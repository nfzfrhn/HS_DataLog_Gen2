
HS_DataLog_Gen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021e7c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010fc  08022040  08022040  00032040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802313c  0802313c  00040260  2**0
                  CONTENTS
  4 .ARM          00000008  0802313c  0802313c  0003313c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023144  08023144  00040260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023144  08023144  00033144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023148  08023148  00033148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0802314c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00040260  2**0
                  CONTENTS
 10 .bss          00018fc4  20000260  20000260  00040260  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20019224  20019224  00040260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040260  2**0
                  CONTENTS, READONLY
 13 .debug_info   00078f44  00000000  00000000  00040290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000abf8  00000000  00000000  000b91d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004058  00000000  00000000  000c3dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003c80  00000000  00000000  000c7e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00047e2a  00000000  00000000  000cbaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00056eda  00000000  00000000  001138d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e91f  00000000  00000000  0016a7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002d90cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00012688  00000000  00000000  002d9120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000260 	.word	0x20000260
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08022024 	.word	0x08022024

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000264 	.word	0x20000264
 80001fc:	08022024 	.word	0x08022024

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <HSD_JSON_set_allocation_functions>:
* @param  malloc_function: malloc() implementation
* @param  free_function: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_set_allocation_functions(void * (*malloc_function)(size_t), void (*free_function)(void *))
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  json_set_allocation_functions(malloc_function, free_function);
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f01c fc05 	bl	801d858 <json_set_allocation_functions>
  JSON_free_function = free_function;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HSD_JSON_set_allocation_functions+0x24>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	6013      	str	r3, [r2, #0]
  return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000027c 	.word	0x2000027c

08001064 <HSD_JSON_free>:

int32_t HSD_JSON_free(void * mem)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  JSON_free_function(mem);
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HSD_JSON_free+0x1c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	4798      	blx	r3
  return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000027c 	.word	0x2000027c

08001084 <HSD_JSON_serialize_Device>:
* @param  Device: COM_Device_t struct instance to be serialized 
* @param  SerializedJSON: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_serialize_Device(COM_Device_t *Device, char **SerializedJSON, uint8_t pretty)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	71fb      	strb	r3, [r7, #7]
  return get_JSON_from_Device(Device, SerializedJSON, pretty);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	461a      	mov	r2, r3
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 f813 	bl	80010c4 <get_JSON_from_Device>
 800109e:	4603      	mov	r3, r0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HSD_JSON_parse_Device>:
{
  return get_JSON_from_SubSensorStatus(SubSensorStatus, SerializedJSON);
}

int32_t HSD_JSON_parse_Device(char *SerializedJSON, COM_Device_t *Device)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  return parse_Device_from_JSON(SerializedJSON, Device);
 80010b2:	6839      	ldr	r1, [r7, #0]
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f87f 	bl	80011b8 <parse_Device_from_JSON>
 80010ba:	4603      	mov	r3, r0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <get_JSON_from_Device>:
}


/* Private function ----------------------------------------------------------*/
static int32_t get_JSON_from_Device(COM_Device_t *device, char **serialized_string, uint8_t pretty)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	4613      	mov	r3, r2
 80010d0:	71fb      	strb	r3, [r7, #7]
  JSON_Object *JSON_Device;
  JSON_Array *JSON_SensorArray;
  uint32_t size;
  uint32_t i;
  
  tempJSON = json_value_init_object();
 80010d2:	f01c f819 	bl	801d108 <json_value_init_object>
 80010d6:	61f8      	str	r0, [r7, #28]
  JSON_Device = json_value_get_object(tempJSON);
 80010d8:	69f8      	ldr	r0, [r7, #28]
 80010da:	f01b ff82 	bl	801cfe2 <json_value_get_object>
 80010de:	61b8      	str	r0, [r7, #24]
  
  json_object_dotset_string(JSON_Device, "device.deviceInfo.serialNumber", device->deviceDescriptor.serialNumber);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	461a      	mov	r2, r3
 80010e4:	4930      	ldr	r1, [pc, #192]	; (80011a8 <get_JSON_from_Device+0xe4>)
 80010e6:	69b8      	ldr	r0, [r7, #24]
 80010e8:	f01c fb48 	bl	801d77c <json_object_dotset_string>
  json_object_dotset_string(JSON_Device, "device.deviceInfo.alias", device->deviceDescriptor.alias);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3315      	adds	r3, #21
 80010f0:	461a      	mov	r2, r3
 80010f2:	492e      	ldr	r1, [pc, #184]	; (80011ac <get_JSON_from_Device+0xe8>)
 80010f4:	69b8      	ldr	r0, [r7, #24]
 80010f6:	f01c fb41 	bl	801d77c <json_object_dotset_string>
  json_object_dotset_number(JSON_Device, "device.deviceInfo.nSensor", device->deviceDescriptor.nSensor);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa28 	bl	8000554 <__aeabi_ui2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	ec43 2b10 	vmov	d0, r2, r3
 800110c:	4928      	ldr	r1, [pc, #160]	; (80011b0 <get_JSON_from_Device+0xec>)
 800110e:	69b8      	ldr	r0, [r7, #24]
 8001110:	f01c fb58 	bl	801d7c4 <json_object_dotset_number>
  
  json_object_dotset_value(JSON_Device, "device.sensor", json_value_init_array());
 8001114:	f01c f824 	bl	801d160 <json_value_init_array>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4925      	ldr	r1, [pc, #148]	; (80011b4 <get_JSON_from_Device+0xf0>)
 800111e:	69b8      	ldr	r0, [r7, #24]
 8001120:	f01c fa9f 	bl	801d662 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_Device, "device.sensor");
 8001124:	4923      	ldr	r1, [pc, #140]	; (80011b4 <get_JSON_from_Device+0xf0>)
 8001126:	69b8      	ldr	r0, [r7, #24]
 8001128:	f01b fe90 	bl	801ce4c <json_object_dotget_array>
 800112c:	6178      	str	r0, [r7, #20]
  
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
 8001132:	e013      	b.n	800115c <get_JSON_from_Device+0x98>
  {        
    tempJSON1 = json_value_init_object();  
 8001134:	f01b ffe8 	bl	801d108 <json_value_init_object>
 8001138:	6138      	str	r0, [r7, #16]
    create_JSON_Sensor(device->sensors[i], tempJSON1);    
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	330a      	adds	r3, #10
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	6939      	ldr	r1, [r7, #16]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f9cd 	bl	80014e8 <create_JSON_Sensor>
    json_array_append_value(JSON_SensorArray,tempJSON1);
 800114e:	6939      	ldr	r1, [r7, #16]
 8001150:	6978      	ldr	r0, [r7, #20]
 8001152:	f01c f9f1 	bl	801d538 <json_array_append_value>
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	3301      	adds	r3, #1
 800115a:	623b      	str	r3, [r7, #32]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	6a3a      	ldr	r2, [r7, #32]
 8001162:	429a      	cmp	r2, r3
 8001164:	d3e6      	bcc.n	8001134 <get_JSON_from_Device+0x70>
  }  
  
  /* convert to a json string and write to file */
  if (pretty == 1)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d10a      	bne.n	8001182 <get_JSON_from_Device+0xbe>
  {
    *serialized_string = json_serialize_to_string_pretty(tempJSON);
 800116c:	69f8      	ldr	r0, [r7, #28]
 800116e:	f01c f9a3 	bl	801d4b8 <json_serialize_to_string_pretty>
 8001172:	4602      	mov	r2, r0
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	601a      	str	r2, [r3, #0]
    size = json_serialization_size_pretty(tempJSON);    
 8001178:	69f8      	ldr	r0, [r7, #28]
 800117a:	f01c f959 	bl	801d430 <json_serialization_size_pretty>
 800117e:	6278      	str	r0, [r7, #36]	; 0x24
 8001180:	e009      	b.n	8001196 <get_JSON_from_Device+0xd2>
  }
  else
  {
    *serialized_string = json_serialize_to_string(tempJSON);
 8001182:	69f8      	ldr	r0, [r7, #28]
 8001184:	f01c f922 	bl	801d3cc <json_serialize_to_string>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	601a      	str	r2, [r3, #0]
    size = json_serialization_size(tempJSON);    
 800118e:	69f8      	ldr	r0, [r7, #28]
 8001190:	f01c f8d8 	bl	801d344 <json_serialization_size>
 8001194:	6278      	str	r0, [r7, #36]	; 0x24
  }
  
  json_value_free(tempJSON);
 8001196:	69f8      	ldr	r0, [r7, #28]
 8001198:	f01b ff88 	bl	801d0ac <json_value_free>
  
  return size;    
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	08022040 	.word	0x08022040
 80011ac:	08022060 	.word	0x08022060
 80011b0:	08022078 	.word	0x08022078
 80011b4:	08022094 	.word	0x08022094

080011b8 <parse_Device_from_JSON>:
  return size;
}


static int32_t parse_Device_from_JSON(char *SerializedJSON, COM_Device_t* Device)
{  
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  char *StatusText;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f01b fdc0 	bl	801cd48 <json_parse_string>
 80011c8:	6238      	str	r0, [r7, #32]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80011ca:	6a38      	ldr	r0, [r7, #32]
 80011cc:	f01b ff09 	bl	801cfe2 <json_value_get_object>
 80011d0:	61f8      	str	r0, [r7, #28]
  
  if (json_object_dothas_value(JSON_ParseHandler,"device.sensor"))
 80011d2:	4921      	ldr	r1, [pc, #132]	; (8001258 <parse_Device_from_JSON+0xa0>)
 80011d4:	69f8      	ldr	r0, [r7, #28]
 80011d6:	f01b fe95 	bl	801cf04 <json_object_dothas_value>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d033      	beq.n	8001248 <parse_Device_from_JSON+0x90>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "device.sensor");    
 80011e0:	491d      	ldr	r1, [pc, #116]	; (8001258 <parse_Device_from_JSON+0xa0>)
 80011e2:	69f8      	ldr	r0, [r7, #28]
 80011e4:	f01b fe32 	bl	801ce4c <json_object_dotget_array>
 80011e8:	61b8      	str	r0, [r7, #24]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 80011ea:	69b8      	ldr	r0, [r7, #24]
 80011ec:	f01b feca 	bl	801cf84 <json_array_get_count>
 80011f0:	6178      	str	r0, [r7, #20]
    
    for (ii = 0; ii < size; ii++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
 80011f6:	e023      	b.n	8001240 <parse_Device_from_JSON+0x88>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);
 80011f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011fa:	69b8      	ldr	r0, [r7, #24]
 80011fc:	f01b feb0 	bl	801cf60 <json_array_get_object>
 8001200:	6138      	str	r0, [r7, #16]
      if (json_object_dothas_value(JSON_subSensorObj,"sensorStatus"))
 8001202:	4916      	ldr	r1, [pc, #88]	; (800125c <parse_Device_from_JSON+0xa4>)
 8001204:	6938      	ldr	r0, [r7, #16]
 8001206:	f01b fe7d 	bl	801cf04 <json_object_dothas_value>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d014      	beq.n	800123a <parse_Device_from_JSON+0x82>
      {
        StatusText = json_serialize_to_string(json_object_get_value(JSON_subSensorObj,"sensorStatus"));
 8001210:	4912      	ldr	r1, [pc, #72]	; (800125c <parse_Device_from_JSON+0xa4>)
 8001212:	6938      	ldr	r0, [r7, #16]
 8001214:	f01b fdbc 	bl	801cd90 <json_object_get_value>
 8001218:	4603      	mov	r3, r0
 800121a:	4618      	mov	r0, r3
 800121c:	f01c f8d6 	bl	801d3cc <json_serialize_to_string>
 8001220:	60f8      	str	r0, [r7, #12]
        parse_Status_from_JSON(StatusText, &Device->sensors[ii]->sensorStatus);
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	330a      	adds	r3, #10
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8001232:	4619      	mov	r1, r3
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f000 f813 	bl	8001260 <parse_Status_from_JSON>
    for (ii = 0; ii < size; ii++)
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	3301      	adds	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
 8001240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	429a      	cmp	r2, r3
 8001246:	d3d7      	bcc.n	80011f8 <parse_Device_from_JSON+0x40>
      }
    }
  }
  
  json_value_free(tempJSON);
 8001248:	6a38      	ldr	r0, [r7, #32]
 800124a:	f01b ff2f 	bl	801d0ac <json_value_free>
  
  return 0;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08022094 	.word	0x08022094
 800125c:	080220a4 	.word	0x080220a4

08001260 <parse_Status_from_JSON>:
  
  return 0;  
}
volatile  int8_t subid = -1;
static int32_t parse_Status_from_JSON(char *SerializedJSON, COM_SensorStatus_t * sensorStatus)
{  
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f01b fd6c 	bl	801cd48 <json_parse_string>
 8001270:	61b8      	str	r0, [r7, #24]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8001272:	69b8      	ldr	r0, [r7, #24]
 8001274:	f01b feb5 	bl	801cfe2 <json_value_get_object>
 8001278:	6178      	str	r0, [r7, #20]
  
  if (json_object_dothas_value(JSON_ParseHandler,"odr"))
 800127a:	4990      	ldr	r1, [pc, #576]	; (80014bc <parse_Status_from_JSON+0x25c>)
 800127c:	6978      	ldr	r0, [r7, #20]
 800127e:	f01b fe41 	bl	801cf04 <json_object_dothas_value>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00c      	beq.n	80012a2 <parse_Status_from_JSON+0x42>
  {
    sensorStatus->ODR = json_object_dotget_number(JSON_ParseHandler, "odr");
 8001288:	498c      	ldr	r1, [pc, #560]	; (80014bc <parse_Status_from_JSON+0x25c>)
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f01b fdc6 	bl	801ce1c <json_object_dotget_number>
 8001290:	ec53 2b10 	vmov	r2, r3, d0
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fcce 	bl	8000c38 <__aeabi_d2f>
 800129c:	4602      	mov	r2, r0
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	601a      	str	r2, [r3, #0]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"usbDataPacketSize"))
 80012a2:	4987      	ldr	r1, [pc, #540]	; (80014c0 <parse_Status_from_JSON+0x260>)
 80012a4:	6978      	ldr	r0, [r7, #20]
 80012a6:	f01b fe2d 	bl	801cf04 <json_object_dothas_value>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00d      	beq.n	80012cc <parse_Status_from_JSON+0x6c>
  {
    sensorStatus->usbDataPacketSize = (uint16_t) json_object_dotget_number(JSON_ParseHandler, "usbDataPacketSize");
 80012b0:	4983      	ldr	r1, [pc, #524]	; (80014c0 <parse_Status_from_JSON+0x260>)
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f01b fdb2 	bl	801ce1c <json_object_dotget_number>
 80012b8:	ec53 2b10 	vmov	r2, r3, d0
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc9a 	bl	8000bf8 <__aeabi_d2uiz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	821a      	strh	r2, [r3, #16]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"sdWriteBufferSize"))
 80012cc:	497d      	ldr	r1, [pc, #500]	; (80014c4 <parse_Status_from_JSON+0x264>)
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f01b fe18 	bl	801cf04 <json_object_dothas_value>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00c      	beq.n	80012f4 <parse_Status_from_JSON+0x94>
  {
    sensorStatus->sdWriteBufferSize = (uint32_t) json_object_dotget_number(JSON_ParseHandler, "sdWriteBufferSize");
 80012da:	497a      	ldr	r1, [pc, #488]	; (80014c4 <parse_Status_from_JSON+0x264>)
 80012dc:	6978      	ldr	r0, [r7, #20]
 80012de:	f01b fd9d 	bl	801ce1c <json_object_dotget_number>
 80012e2:	ec53 2b10 	vmov	r2, r3, d0
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc85 	bl	8000bf8 <__aeabi_d2uiz>
 80012ee:	4602      	mov	r2, r0
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	615a      	str	r2, [r3, #20]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"comChannelNumber"))
 80012f4:	4974      	ldr	r1, [pc, #464]	; (80014c8 <parse_Status_from_JSON+0x268>)
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f01b fe04 	bl	801cf04 <json_object_dothas_value>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00d      	beq.n	800131e <parse_Status_from_JSON+0xbe>
  {
    sensorStatus->comChannelNumber = (int16_t) json_object_dotget_number(JSON_ParseHandler, "comChannelNumber");
 8001302:	4971      	ldr	r1, [pc, #452]	; (80014c8 <parse_Status_from_JSON+0x268>)
 8001304:	6978      	ldr	r0, [r7, #20]
 8001306:	f01b fd89 	bl	801ce1c <json_object_dotget_number>
 800130a:	ec53 2b10 	vmov	r2, r3, d0
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc49 	bl	8000ba8 <__aeabi_d2iz>
 8001316:	4603      	mov	r3, r0
 8001318:	b21a      	sxth	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	831a      	strh	r2, [r3, #24]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"samplesPerTs"))
 800131e:	496b      	ldr	r1, [pc, #428]	; (80014cc <parse_Status_from_JSON+0x26c>)
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	f01b fdef 	bl	801cf04 <json_object_dothas_value>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00d      	beq.n	8001348 <parse_Status_from_JSON+0xe8>
  {
    sensorStatus->samplesPerTimestamp = (uint16_t)json_object_dotget_number(JSON_ParseHandler, "samplesPerTs");
 800132c:	4967      	ldr	r1, [pc, #412]	; (80014cc <parse_Status_from_JSON+0x26c>)
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f01b fd74 	bl	801ce1c <json_object_dotget_number>
 8001334:	ec53 2b10 	vmov	r2, r3, d0
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fc5c 	bl	8000bf8 <__aeabi_d2uiz>
 8001340:	4603      	mov	r3, r0
 8001342:	b29a      	uxth	r2, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	819a      	strh	r2, [r3, #12]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"isActive"))
 8001348:	4961      	ldr	r1, [pc, #388]	; (80014d0 <parse_Status_from_JSON+0x270>)
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f01b fdda 	bl	801cf04 <json_object_dothas_value>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00d      	beq.n	8001372 <parse_Status_from_JSON+0x112>
  {
    if (json_object_dotget_boolean(JSON_ParseHandler,"isActive") == 1)
 8001356:	495e      	ldr	r1, [pc, #376]	; (80014d0 <parse_Status_from_JSON+0x270>)
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f01b fd89 	bl	801ce70 <json_object_dotget_boolean>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d103      	bne.n	800136c <parse_Status_from_JSON+0x10c>
    {
      sensorStatus->isActive = 1;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2201      	movs	r2, #1
 8001368:	739a      	strb	r2, [r3, #14]
 800136a:	e002      	b.n	8001372 <parse_Status_from_JSON+0x112>
    }
    else 
    {
      sensorStatus->isActive = 0;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	739a      	strb	r2, [r3, #14]
    }
  }
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorStatus"))
 8001372:	4958      	ldr	r1, [pc, #352]	; (80014d4 <parse_Status_from_JSON+0x274>)
 8001374:	6978      	ldr	r0, [r7, #20]
 8001376:	f01b fdc5 	bl	801cf04 <json_object_dothas_value>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 8094 	beq.w	80014aa <parse_Status_from_JSON+0x24a>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "subSensorStatus");    
 8001382:	4954      	ldr	r1, [pc, #336]	; (80014d4 <parse_Status_from_JSON+0x274>)
 8001384:	6978      	ldr	r0, [r7, #20]
 8001386:	f01b fd61 	bl	801ce4c <json_object_dotget_array>
 800138a:	6138      	str	r0, [r7, #16]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 800138c:	6938      	ldr	r0, [r7, #16]
 800138e:	f01b fdf9 	bl	801cf84 <json_array_get_count>
 8001392:	60f8      	str	r0, [r7, #12]
    
    for (ii = 0; ii < size; ii++)
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	e082      	b.n	80014a0 <parse_Status_from_JSON+0x240>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);      
 800139a:	69f9      	ldr	r1, [r7, #28]
 800139c:	6938      	ldr	r0, [r7, #16]
 800139e:	f01b fddf 	bl	801cf60 <json_array_get_object>
 80013a2:	60b8      	str	r0, [r7, #8]
      
      if (json_object_dothas_value(JSON_subSensorObj,"id"))  
 80013a4:	494c      	ldr	r1, [pc, #304]	; (80014d8 <parse_Status_from_JSON+0x278>)
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	f01b fdac 	bl	801cf04 <json_object_dothas_value>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00e      	beq.n	80013d0 <parse_Status_from_JSON+0x170>
      {
        subid = (int8_t)json_object_dotget_number(JSON_subSensorObj, "id");
 80013b2:	4949      	ldr	r1, [pc, #292]	; (80014d8 <parse_Status_from_JSON+0x278>)
 80013b4:	68b8      	ldr	r0, [r7, #8]
 80013b6:	f01b fd31 	bl	801ce1c <json_object_dotget_number>
 80013ba:	ec53 2b10 	vmov	r2, r3, d0
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fbf1 	bl	8000ba8 <__aeabi_d2iz>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b25a      	sxtb	r2, r3
 80013ca:	4b44      	ldr	r3, [pc, #272]	; (80014dc <parse_Status_from_JSON+0x27c>)
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	e003      	b.n	80013d8 <parse_Status_from_JSON+0x178>
      }
      else
      {
        subid = ii;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	b25a      	sxtb	r2, r3
 80013d4:	4b41      	ldr	r3, [pc, #260]	; (80014dc <parse_Status_from_JSON+0x27c>)
 80013d6:	701a      	strb	r2, [r3, #0]
      }
      
      if (json_object_dothas_value(JSON_subSensorObj,"fs"))
 80013d8:	4941      	ldr	r1, [pc, #260]	; (80014e0 <parse_Status_from_JSON+0x280>)
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f01b fd92 	bl	801cf04 <json_object_dothas_value>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d014      	beq.n	8001410 <parse_Status_from_JSON+0x1b0>
      {
        sensorStatus->subSensorStatus[subid].FS = json_object_dotget_number(JSON_subSensorObj, "fs");
 80013e6:	493e      	ldr	r1, [pc, #248]	; (80014e0 <parse_Status_from_JSON+0x280>)
 80013e8:	68b8      	ldr	r0, [r7, #8]
 80013ea:	f01b fd17 	bl	801ce1c <json_object_dotget_number>
 80013ee:	ec51 0b10 	vmov	r0, r1, d0
 80013f2:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <parse_Status_from_JSON+0x27c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	461c      	mov	r4, r3
 80013fa:	f7ff fc1d 	bl	8000c38 <__aeabi_d2f>
 80013fe:	4601      	mov	r1, r0
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	4623      	mov	r3, r4
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4423      	add	r3, r4
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	331c      	adds	r3, #28
 800140e:	6019      	str	r1, [r3, #0]
      }
      if (json_object_dothas_value(JSON_subSensorObj,"sensitivity"))
 8001410:	4934      	ldr	r1, [pc, #208]	; (80014e4 <parse_Status_from_JSON+0x284>)
 8001412:	68b8      	ldr	r0, [r7, #8]
 8001414:	f01b fd76 	bl	801cf04 <json_object_dothas_value>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d014      	beq.n	8001448 <parse_Status_from_JSON+0x1e8>
      {
        sensorStatus->subSensorStatus[subid].sensitivity = json_object_dotget_number(JSON_subSensorObj, "sensitivity");
 800141e:	4931      	ldr	r1, [pc, #196]	; (80014e4 <parse_Status_from_JSON+0x284>)
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	f01b fcfb 	bl	801ce1c <json_object_dotget_number>
 8001426:	ec51 0b10 	vmov	r0, r1, d0
 800142a:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <parse_Status_from_JSON+0x27c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b25b      	sxtb	r3, r3
 8001430:	461c      	mov	r4, r3
 8001432:	f7ff fc01 	bl	8000c38 <__aeabi_d2f>
 8001436:	4601      	mov	r1, r0
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	4623      	mov	r3, r4
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4423      	add	r3, r4
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	3320      	adds	r3, #32
 8001446:	6019      	str	r1, [r3, #0]
      }      
      if (json_object_dothas_value(JSON_subSensorObj,"isActive"))
 8001448:	4921      	ldr	r1, [pc, #132]	; (80014d0 <parse_Status_from_JSON+0x270>)
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f01b fd5a 	bl	801cf04 <json_object_dothas_value>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d021      	beq.n	800149a <parse_Status_from_JSON+0x23a>
      {
        if (json_object_dotget_boolean(JSON_subSensorObj,"isActive") == 1)
 8001456:	491e      	ldr	r1, [pc, #120]	; (80014d0 <parse_Status_from_JSON+0x270>)
 8001458:	68b8      	ldr	r0, [r7, #8]
 800145a:	f01b fd09 	bl	801ce70 <json_object_dotget_boolean>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d10d      	bne.n	8001480 <parse_Status_from_JSON+0x220>
        {
          sensorStatus->subSensorStatus[subid].isActive = 1;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <parse_Status_from_JSON+0x27c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b25b      	sxtb	r3, r3
 800146a:	4619      	mov	r1, r3
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	460b      	mov	r3, r1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	440b      	add	r3, r1
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	3324      	adds	r3, #36	; 0x24
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	e00c      	b.n	800149a <parse_Status_from_JSON+0x23a>
        }
        else 
        {
          sensorStatus->subSensorStatus[subid].isActive = 0;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <parse_Status_from_JSON+0x27c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b25b      	sxtb	r3, r3
 8001486:	4619      	mov	r1, r3
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	460b      	mov	r3, r1
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	440b      	add	r3, r1
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3324      	adds	r3, #36	; 0x24
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
    for (ii = 0; ii < size; ii++)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3301      	adds	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	f4ff af78 	bcc.w	800139a <parse_Status_from_JSON+0x13a>
        }
      }
    }
  }  
  json_value_free(tempJSON);
 80014aa:	69b8      	ldr	r0, [r7, #24]
 80014ac:	f01b fdfe 	bl	801d0ac <json_value_free>
  
  return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd90      	pop	{r4, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	0802211c 	.word	0x0802211c
 80014c0:	08022120 	.word	0x08022120
 80014c4:	08022134 	.word	0x08022134
 80014c8:	08022148 	.word	0x08022148
 80014cc:	0802215c 	.word	0x0802215c
 80014d0:	0802216c 	.word	0x0802216c
 80014d4:	08022178 	.word	0x08022178
 80014d8:	08022188 	.word	0x08022188
 80014dc:	20000000 	.word	0x20000000
 80014e0:	0802218c 	.word	0x0802218c
 80014e4:	08022190 	.word	0x08022190

080014e8 <create_JSON_Sensor>:
  
}


static void create_JSON_Sensor(COM_Sensor_t *sensor, JSON_Value *tempJSON)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  JSON_Value *tempJSON1;
  JSON_Value *tempJSON2;
  JSON_Array *JSON_SensorArray1;
  JSON_Array *JSON_SensorArray2;
  uint32_t ii = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t nSubSensors = sensor->sensorDescriptor.nSubSensors; 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80014fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t nSensor = sensor->sensorDescriptor.id;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  
  JSON_Object *JSON_Sensor = json_value_get_object(tempJSON);
 8001508:	6838      	ldr	r0, [r7, #0]
 800150a:	f01b fd6a 	bl	801cfe2 <json_value_get_object>
 800150e:	6278      	str	r0, [r7, #36]	; 0x24
  
  json_object_dotset_number(JSON_Sensor, "id", nSensor);
 8001510:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f81d 	bl	8000554 <__aeabi_ui2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	ec43 2b10 	vmov	d0, r2, r3
 8001522:	493e      	ldr	r1, [pc, #248]	; (800161c <create_JSON_Sensor+0x134>)
 8001524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001526:	f01c f94d 	bl	801d7c4 <json_object_dotset_number>
  
  JSON_Value *DescriptorJSON = json_value_init_object();
 800152a:	f01b fded 	bl	801d108 <json_value_init_object>
 800152e:	6238      	str	r0, [r7, #32]
  json_object_set_value(JSON_Sensor, "sensorDescriptor", DescriptorJSON);
 8001530:	6a3a      	ldr	r2, [r7, #32]
 8001532:	493b      	ldr	r1, [pc, #236]	; (8001620 <create_JSON_Sensor+0x138>)
 8001534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001536:	f01c f83e 	bl	801d5b6 <json_object_set_value>
  create_JSON_SensorDescriptor(&sensor->sensorDescriptor, DescriptorJSON); 
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a39      	ldr	r1, [r7, #32]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f876 	bl	8001630 <create_JSON_SensorDescriptor>
  
  json_object_dotset_value(JSON_Sensor, "sensorDescriptor.subSensorDescriptor", json_value_init_array());
 8001544:	f01b fe0c 	bl	801d160 <json_value_init_array>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4935      	ldr	r1, [pc, #212]	; (8001624 <create_JSON_Sensor+0x13c>)
 800154e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001550:	f01c f887 	bl	801d662 <json_object_dotset_value>
  
  JSON_SensorArray1 = json_object_dotget_array(JSON_Sensor, "sensorDescriptor.subSensorDescriptor"); 
 8001554:	4933      	ldr	r1, [pc, #204]	; (8001624 <create_JSON_Sensor+0x13c>)
 8001556:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001558:	f01b fc78 	bl	801ce4c <json_object_dotget_array>
 800155c:	61f8      	str	r0, [r7, #28]
  for (ii = 0; ii < nSubSensors; ii++)
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001562:	e015      	b.n	8001590 <create_JSON_Sensor+0xa8>
  {
    tempJSON1 = json_value_init_object();  
 8001564:	f01b fdd0 	bl	801d108 <json_value_init_object>
 8001568:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor->sensorDescriptor.subSensorDescriptor[ii], tempJSON1);  
 800156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156c:	2254      	movs	r2, #84	; 0x54
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	3358      	adds	r3, #88	; 0x58
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	3304      	adds	r3, #4
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f9cf 	bl	8001920 <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 8001582:	68f9      	ldr	r1, [r7, #12]
 8001584:	69f8      	ldr	r0, [r7, #28]
 8001586:	f01b ffd7 	bl	801d538 <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 800158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158c:	3301      	adds	r3, #1
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001590:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001596:	429a      	cmp	r2, r3
 8001598:	d3e4      	bcc.n	8001564 <create_JSON_Sensor+0x7c>
  }
  
  JSON_Value *statusJSON = json_value_init_object();
 800159a:	f01b fdb5 	bl	801d108 <json_value_init_object>
 800159e:	61b8      	str	r0, [r7, #24]
  json_object_set_value(JSON_Sensor, "sensorStatus", statusJSON);
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4921      	ldr	r1, [pc, #132]	; (8001628 <create_JSON_Sensor+0x140>)
 80015a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015a6:	f01c f806 	bl	801d5b6 <json_object_set_value>
  create_JSON_SensorStatus(&sensor->sensorStatus, statusJSON); 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80015b0:	69b9      	ldr	r1, [r7, #24]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f934 	bl	8001820 <create_JSON_SensorStatus>
  
  json_object_dotset_value(JSON_Sensor, "sensorStatus.subSensorStatus", json_value_init_array());
 80015b8:	f01b fdd2 	bl	801d160 <json_value_init_array>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	491a      	ldr	r1, [pc, #104]	; (800162c <create_JSON_Sensor+0x144>)
 80015c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015c4:	f01c f84d 	bl	801d662 <json_object_dotset_value>
  JSON_SensorArray2= json_object_dotget_array(JSON_Sensor, "sensorStatus.subSensorStatus"); 
 80015c8:	4918      	ldr	r1, [pc, #96]	; (800162c <create_JSON_Sensor+0x144>)
 80015ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015cc:	f01b fc3e 	bl	801ce4c <json_object_dotget_array>
 80015d0:	6178      	str	r0, [r7, #20]
  for (ii = 0; ii < nSubSensors; ii++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d6:	e017      	b.n	8001608 <create_JSON_Sensor+0x120>
  {
    tempJSON2 = json_value_init_object();  
 80015d8:	f01b fd96 	bl	801d108 <json_value_init_object>
 80015dc:	6138      	str	r0, [r7, #16]
    create_JSON_SubSensorStatus(&sensor->sensorStatus.subSensorStatus[ii], tempJSON2);    
 80015de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	3308      	adds	r3, #8
 80015f2:	6939      	ldr	r1, [r7, #16]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 fa5d 	bl	8001ab4 <create_JSON_SubSensorStatus>
    json_array_append_value(JSON_SensorArray2,tempJSON2);
 80015fa:	6939      	ldr	r1, [r7, #16]
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f01b ff9b 	bl	801d538 <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	3301      	adds	r3, #1
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001608:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800160c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160e:	429a      	cmp	r2, r3
 8001610:	d3e2      	bcc.n	80015d8 <create_JSON_Sensor+0xf0>
  }
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	3730      	adds	r7, #48	; 0x30
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08022188 	.word	0x08022188
 8001620:	080221bc 	.word	0x080221bc
 8001624:	080221d0 	.word	0x080221d0
 8001628:	080220a4 	.word	0x080220a4
 800162c:	080221f8 	.word	0x080221f8

08001630 <create_JSON_SensorDescriptor>:


static void create_JSON_SensorDescriptor(COM_SensorDescriptor_t *sensor_descriptor, JSON_Value *tempJSON)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  
  JSON_Object *JSON_SensorDescriptor = json_value_get_object(tempJSON);
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	f01b fccf 	bl	801cfe2 <json_value_get_object>
 8001644:	61b8      	str	r0, [r7, #24]
  JSON_Array *JSON_SensorArray1;
  JSON_Value *tempJSON1;
  
  json_object_dotset_string(JSON_SensorDescriptor, "name", sensor_descriptor->name);  
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3301      	adds	r3, #1
 800164a:	461a      	mov	r2, r3
 800164c:	4965      	ldr	r1, [pc, #404]	; (80017e4 <create_JSON_SensorDescriptor+0x1b4>)
 800164e:	69b8      	ldr	r0, [r7, #24]
 8001650:	f01c f894 	bl	801d77c <json_object_dotset_string>
  
  switch (sensor_descriptor->dataType)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7c5b      	ldrb	r3, [r3, #17]
 8001658:	2b06      	cmp	r3, #6
 800165a:	d83b      	bhi.n	80016d4 <create_JSON_SensorDescriptor+0xa4>
 800165c:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <create_JSON_SensorDescriptor+0x34>)
 800165e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001662:	bf00      	nop
 8001664:	08001681 	.word	0x08001681
 8001668:	0800168d 	.word	0x0800168d
 800166c:	08001699 	.word	0x08001699
 8001670:	080016a5 	.word	0x080016a5
 8001674:	080016b1 	.word	0x080016b1
 8001678:	080016bd 	.word	0x080016bd
 800167c:	080016c9 	.word	0x080016c9
  {
  case DATA_TYPE_UINT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint8_t");
 8001680:	4a59      	ldr	r2, [pc, #356]	; (80017e8 <create_JSON_SensorDescriptor+0x1b8>)
 8001682:	495a      	ldr	r1, [pc, #360]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 8001684:	69b8      	ldr	r0, [r7, #24]
 8001686:	f01c f879 	bl	801d77c <json_object_dotset_string>
    break;
 800168a:	e029      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int8_t");
 800168c:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <create_JSON_SensorDescriptor+0x1c0>)
 800168e:	4957      	ldr	r1, [pc, #348]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 8001690:	69b8      	ldr	r0, [r7, #24]
 8001692:	f01c f873 	bl	801d77c <json_object_dotset_string>
    break;
 8001696:	e023      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint16_t");
 8001698:	4a56      	ldr	r2, [pc, #344]	; (80017f4 <create_JSON_SensorDescriptor+0x1c4>)
 800169a:	4954      	ldr	r1, [pc, #336]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 800169c:	69b8      	ldr	r0, [r7, #24]
 800169e:	f01c f86d 	bl	801d77c <json_object_dotset_string>
    break;
 80016a2:	e01d      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int16_t");
 80016a4:	4a54      	ldr	r2, [pc, #336]	; (80017f8 <create_JSON_SensorDescriptor+0x1c8>)
 80016a6:	4951      	ldr	r1, [pc, #324]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016a8:	69b8      	ldr	r0, [r7, #24]
 80016aa:	f01c f867 	bl	801d77c <json_object_dotset_string>
    break;
 80016ae:	e017      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint32_t");
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <create_JSON_SensorDescriptor+0x1cc>)
 80016b2:	494e      	ldr	r1, [pc, #312]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016b4:	69b8      	ldr	r0, [r7, #24]
 80016b6:	f01c f861 	bl	801d77c <json_object_dotset_string>
    break;
 80016ba:	e011      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int32_t");
 80016bc:	4a50      	ldr	r2, [pc, #320]	; (8001800 <create_JSON_SensorDescriptor+0x1d0>)
 80016be:	494b      	ldr	r1, [pc, #300]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016c0:	69b8      	ldr	r0, [r7, #24]
 80016c2:	f01c f85b 	bl	801d77c <json_object_dotset_string>
    break;
 80016c6:	e00b      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_FLOAT:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "float");
 80016c8:	4a4e      	ldr	r2, [pc, #312]	; (8001804 <create_JSON_SensorDescriptor+0x1d4>)
 80016ca:	4948      	ldr	r1, [pc, #288]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016cc:	69b8      	ldr	r0, [r7, #24]
 80016ce:	f01c f855 	bl	801d77c <json_object_dotset_string>
    break;
 80016d2:	e005      	b.n	80016e0 <create_JSON_SensorDescriptor+0xb0>
  default:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "NA");
 80016d4:	4a4c      	ldr	r2, [pc, #304]	; (8001808 <create_JSON_SensorDescriptor+0x1d8>)
 80016d6:	4945      	ldr	r1, [pc, #276]	; (80017ec <create_JSON_SensorDescriptor+0x1bc>)
 80016d8:	69b8      	ldr	r0, [r7, #24]
 80016da:	f01c f84f 	bl	801d77c <json_object_dotset_string>
    break;
 80016de:	bf00      	nop
  }  
  
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.min", sensor_descriptor->samplesPerTimestamp[0]);  
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff34 	bl	8000554 <__aeabi_ui2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	ec43 2b10 	vmov	d0, r2, r3
 80016f4:	4945      	ldr	r1, [pc, #276]	; (800180c <create_JSON_SensorDescriptor+0x1dc>)
 80016f6:	69b8      	ldr	r0, [r7, #24]
 80016f8:	f01c f864 	bl	801d7c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.max", sensor_descriptor->samplesPerTimestamp[1]);  
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe ff26 	bl	8000554 <__aeabi_ui2d>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	ec43 2b10 	vmov	d0, r2, r3
 8001710:	493f      	ldr	r1, [pc, #252]	; (8001810 <create_JSON_SensorDescriptor+0x1e0>)
 8001712:	69b8      	ldr	r0, [r7, #24]
 8001714:	f01c f856 	bl	801d7c4 <json_object_dotset_number>
  json_object_dotset_string(JSON_SensorDescriptor, "samplesPerTs.dataType", "int16_t");  
 8001718:	4a37      	ldr	r2, [pc, #220]	; (80017f8 <create_JSON_SensorDescriptor+0x1c8>)
 800171a:	493e      	ldr	r1, [pc, #248]	; (8001814 <create_JSON_SensorDescriptor+0x1e4>)
 800171c:	69b8      	ldr	r0, [r7, #24]
 800171e:	f01c f82d 	bl	801d77c <json_object_dotset_string>
  
  json_object_dotset_value(JSON_SensorDescriptor, "odr.values", json_value_init_array());
 8001722:	f01b fd1d 	bl	801d160 <json_value_init_array>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	493b      	ldr	r1, [pc, #236]	; (8001818 <create_JSON_SensorDescriptor+0x1e8>)
 800172c:	69b8      	ldr	r0, [r7, #24]
 800172e:	f01b ff98 	bl	801d662 <json_object_dotset_value>
  JSON_Array *JSON_SensorArray = json_object_dotget_array(JSON_SensorDescriptor, "odr.values");
 8001732:	4939      	ldr	r1, [pc, #228]	; (8001818 <create_JSON_SensorDescriptor+0x1e8>)
 8001734:	69b8      	ldr	r0, [r7, #24]
 8001736:	f01b fb89 	bl	801ce4c <json_object_dotget_array>
 800173a:	6178      	str	r0, [r7, #20]
  
  while (sensor_descriptor->ODR[ii] > 0)
 800173c:	e013      	b.n	8001766 <create_JSON_SensorDescriptor+0x136>
  {
    json_array_append_number(JSON_SensorArray, sensor_descriptor->ODR[ii]);
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	3304      	adds	r3, #4
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3304      	adds	r3, #4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff23 	bl	8000598 <__aeabi_f2d>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	ec43 2b10 	vmov	d0, r2, r3
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f01b ff07 	bl	801d56e <json_array_append_number>
    ii++;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	3301      	adds	r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
  while (sensor_descriptor->ODR[ii] > 0)
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3304      	adds	r3, #4
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	3304      	adds	r3, #4
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	dcde      	bgt.n	800173e <create_JSON_SensorDescriptor+0x10e>
  }
  
  json_object_dotset_value(JSON_SensorDescriptor, "subSensorDescriptor", json_value_init_array());  
 8001780:	f01b fcee 	bl	801d160 <json_value_init_array>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4924      	ldr	r1, [pc, #144]	; (800181c <create_JSON_SensorDescriptor+0x1ec>)
 800178a:	69b8      	ldr	r0, [r7, #24]
 800178c:	f01b ff69 	bl	801d662 <json_object_dotset_value>
  JSON_SensorArray1 = json_object_dotget_array(JSON_SensorDescriptor, "subSensorDescriptor"); 
 8001790:	4922      	ldr	r1, [pc, #136]	; (800181c <create_JSON_SensorDescriptor+0x1ec>)
 8001792:	69b8      	ldr	r0, [r7, #24]
 8001794:	f01b fb5a 	bl	801ce4c <json_object_dotget_array>
 8001798:	6138      	str	r0, [r7, #16]
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e015      	b.n	80017cc <create_JSON_SensorDescriptor+0x19c>
  {
    tempJSON1 = json_value_init_object();  
 80017a0:	f01b fcb2 	bl	801d108 <json_value_init_object>
 80017a4:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor_descriptor->subSensorDescriptor[ii], tempJSON1);  
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	2254      	movs	r2, #84	; 0x54
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	3358      	adds	r3, #88	; 0x58
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	3304      	adds	r3, #4
 80017b6:	68f9      	ldr	r1, [r7, #12]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f8b1 	bl	8001920 <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 80017be:	68f9      	ldr	r1, [r7, #12]
 80017c0:	6938      	ldr	r0, [r7, #16]
 80017c2:	f01b feb9 	bl	801d538 <json_array_append_value>
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80017d2:	461a      	mov	r2, r3
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d3e2      	bcc.n	80017a0 <create_JSON_SensorDescriptor+0x170>
  }  
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	08022218 	.word	0x08022218
 80017e8:	08022220 	.word	0x08022220
 80017ec:	08022228 	.word	0x08022228
 80017f0:	08022234 	.word	0x08022234
 80017f4:	0802223c 	.word	0x0802223c
 80017f8:	08022248 	.word	0x08022248
 80017fc:	08022250 	.word	0x08022250
 8001800:	0802225c 	.word	0x0802225c
 8001804:	08022264 	.word	0x08022264
 8001808:	0802226c 	.word	0x0802226c
 800180c:	08022270 	.word	0x08022270
 8001810:	08022284 	.word	0x08022284
 8001814:	08022298 	.word	0x08022298
 8001818:	080222b0 	.word	0x080222b0
 800181c:	080222bc 	.word	0x080222bc

08001820 <create_JSON_SensorStatus>:


static void create_JSON_SensorStatus(COM_SensorStatus_t *sensor_status, JSON_Value *tempJSON)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SensorStatus= json_value_get_object(tempJSON);
 800182a:	6838      	ldr	r0, [r7, #0]
 800182c:	f01b fbd9 	bl	801cfe2 <json_value_get_object>
 8001830:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SensorStatus, "odr", sensor_status->ODR);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe feae 	bl	8000598 <__aeabi_f2d>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	ec43 2b10 	vmov	d0, r2, r3
 8001844:	492e      	ldr	r1, [pc, #184]	; (8001900 <create_JSON_SensorStatus+0xe0>)
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f01b ffbc 	bl	801d7c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "odrMeasured", sensor_status->measuredODR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fea1 	bl	8000598 <__aeabi_f2d>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	ec43 2b10 	vmov	d0, r2, r3
 800185e:	4929      	ldr	r1, [pc, #164]	; (8001904 <create_JSON_SensorStatus+0xe4>)
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f01b ffaf 	bl	801d7c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "initialOffset", sensor_status->initialOffset);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe94 	bl	8000598 <__aeabi_f2d>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	ec43 2b10 	vmov	d0, r2, r3
 8001878:	4923      	ldr	r1, [pc, #140]	; (8001908 <create_JSON_SensorStatus+0xe8>)
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f01b ffa2 	bl	801d7c4 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SensorStatus, "isActive", sensor_status->isActive);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7b9b      	ldrb	r3, [r3, #14]
 8001884:	461a      	mov	r2, r3
 8001886:	4921      	ldr	r1, [pc, #132]	; (800190c <create_JSON_SensorStatus+0xec>)
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f01b ffc1 	bl	801d810 <json_object_dotset_boolean>
  json_object_dotset_number(JSON_SensorStatus, "samplesPerTs", sensor_status->samplesPerTimestamp);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	899b      	ldrh	r3, [r3, #12]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe5e 	bl	8000554 <__aeabi_ui2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	ec43 2b10 	vmov	d0, r2, r3
 80018a0:	491b      	ldr	r1, [pc, #108]	; (8001910 <create_JSON_SensorStatus+0xf0>)
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f01b ff8e 	bl	801d7c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "usbDataPacketSize", sensor_status->usbDataPacketSize);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	8a1b      	ldrh	r3, [r3, #16]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe51 	bl	8000554 <__aeabi_ui2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	ec43 2b10 	vmov	d0, r2, r3
 80018ba:	4916      	ldr	r1, [pc, #88]	; (8001914 <create_JSON_SensorStatus+0xf4>)
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f01b ff81 	bl	801d7c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "sdWriteBufferSize", sensor_status->sdWriteBufferSize);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe44 	bl	8000554 <__aeabi_ui2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	ec43 2b10 	vmov	d0, r2, r3
 80018d4:	4910      	ldr	r1, [pc, #64]	; (8001918 <create_JSON_SensorStatus+0xf8>)
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f01b ff74 	bl	801d7c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "comChannelNumber", sensor_status->comChannelNumber);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe46 	bl	8000574 <__aeabi_i2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	ec43 2b10 	vmov	d0, r2, r3
 80018f0:	490a      	ldr	r1, [pc, #40]	; (800191c <create_JSON_SensorStatus+0xfc>)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f01b ff66 	bl	801d7c4 <json_object_dotset_number>
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	0802211c 	.word	0x0802211c
 8001904:	080222d0 	.word	0x080222d0
 8001908:	080222dc 	.word	0x080222dc
 800190c:	0802216c 	.word	0x0802216c
 8001910:	0802215c 	.word	0x0802215c
 8001914:	08022120 	.word	0x08022120
 8001918:	08022134 	.word	0x08022134
 800191c:	08022148 	.word	0x08022148

08001920 <create_JSON_SubSensorDescriptor>:


static void create_JSON_SubSensorDescriptor(COM_SubSensorDescriptor_t *sub_sensor_descriptor, JSON_Value *tempJSON)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  
  JSON_Value *tempJSONarray = json_value_init_object();
 800192e:	f01b fbeb 	bl	801d108 <json_value_init_object>
 8001932:	6138      	str	r0, [r7, #16]
  JSON_Array *JSON_SensorArray = json_value_get_array(tempJSONarray);
 8001934:	6938      	ldr	r0, [r7, #16]
 8001936:	f01b fb66 	bl	801d006 <json_value_get_array>
 800193a:	60f8      	str	r0, [r7, #12]
  JSON_Object *JSON_SubSensorDescriptor= json_value_get_object(tempJSON);
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f01b fb50 	bl	801cfe2 <json_value_get_object>
 8001942:	60b8      	str	r0, [r7, #8]
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "id", sub_sensor_descriptor->id);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe03 	bl	8000554 <__aeabi_ui2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	ec43 2b10 	vmov	d0, r2, r3
 8001956:	494a      	ldr	r1, [pc, #296]	; (8001a80 <create_JSON_SubSensorDescriptor+0x160>)
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f01b ff33 	bl	801d7c4 <json_object_dotset_number>
  
  switch (sub_sensor_descriptor->sensorType)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	3b01      	subs	r3, #1
 8001964:	2b06      	cmp	r3, #6
 8001966:	d83b      	bhi.n	80019e0 <create_JSON_SubSensorDescriptor+0xc0>
 8001968:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <create_JSON_SubSensorDescriptor+0x50>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	0800198d 	.word	0x0800198d
 8001974:	08001999 	.word	0x08001999
 8001978:	080019a5 	.word	0x080019a5
 800197c:	080019b1 	.word	0x080019b1
 8001980:	080019bd 	.word	0x080019bd
 8001984:	080019c9 	.word	0x080019c9
 8001988:	080019d5 	.word	0x080019d5
  {
  case COM_TYPE_ACC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "ACC");
 800198c:	4a3d      	ldr	r2, [pc, #244]	; (8001a84 <create_JSON_SubSensorDescriptor+0x164>)
 800198e:	493e      	ldr	r1, [pc, #248]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 8001990:	68b8      	ldr	r0, [r7, #8]
 8001992:	f01b fef3 	bl	801d77c <json_object_dotset_string>
    break;
 8001996:	e029      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MAG:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MAG");
 8001998:	4a3c      	ldr	r2, [pc, #240]	; (8001a8c <create_JSON_SubSensorDescriptor+0x16c>)
 800199a:	493b      	ldr	r1, [pc, #236]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 800199c:	68b8      	ldr	r0, [r7, #8]
 800199e:	f01b feed 	bl	801d77c <json_object_dotset_string>
    break;
 80019a2:	e023      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_GYRO:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "GYRO");
 80019a4:	4a3a      	ldr	r2, [pc, #232]	; (8001a90 <create_JSON_SubSensorDescriptor+0x170>)
 80019a6:	4938      	ldr	r1, [pc, #224]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019a8:	68b8      	ldr	r0, [r7, #8]
 80019aa:	f01b fee7 	bl	801d77c <json_object_dotset_string>
    break;
 80019ae:	e01d      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_TEMP:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "TEMP");
 80019b0:	4a38      	ldr	r2, [pc, #224]	; (8001a94 <create_JSON_SubSensorDescriptor+0x174>)
 80019b2:	4935      	ldr	r1, [pc, #212]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019b4:	68b8      	ldr	r0, [r7, #8]
 80019b6:	f01b fee1 	bl	801d77c <json_object_dotset_string>
    break;
 80019ba:	e017      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_PRESS:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "PRESS");
 80019bc:	4a36      	ldr	r2, [pc, #216]	; (8001a98 <create_JSON_SubSensorDescriptor+0x178>)
 80019be:	4932      	ldr	r1, [pc, #200]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019c0:	68b8      	ldr	r0, [r7, #8]
 80019c2:	f01b fedb 	bl	801d77c <json_object_dotset_string>
    break;
 80019c6:	e011      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_HUM:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "HUM");
 80019c8:	4a34      	ldr	r2, [pc, #208]	; (8001a9c <create_JSON_SubSensorDescriptor+0x17c>)
 80019ca:	492f      	ldr	r1, [pc, #188]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f01b fed5 	bl	801d77c <json_object_dotset_string>
    break;
 80019d2:	e00b      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MIC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MIC");
 80019d4:	4a32      	ldr	r2, [pc, #200]	; (8001aa0 <create_JSON_SubSensorDescriptor+0x180>)
 80019d6:	492c      	ldr	r1, [pc, #176]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f01b fecf 	bl	801d77c <json_object_dotset_string>
    break;
 80019de:	e005      	b.n	80019ec <create_JSON_SubSensorDescriptor+0xcc>
  default:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "NA");
 80019e0:	4a30      	ldr	r2, [pc, #192]	; (8001aa4 <create_JSON_SubSensorDescriptor+0x184>)
 80019e2:	4929      	ldr	r1, [pc, #164]	; (8001a88 <create_JSON_SubSensorDescriptor+0x168>)
 80019e4:	68b8      	ldr	r0, [r7, #8]
 80019e6:	f01b fec9 	bl	801d77c <json_object_dotset_string>
    break;      
 80019ea:	bf00      	nop
  }
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "dataPerSample", sub_sensor_descriptor->dataPerSample);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	789b      	ldrb	r3, [r3, #2]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fdaf 	bl	8000554 <__aeabi_ui2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	ec43 2b10 	vmov	d0, r2, r3
 80019fe:	492a      	ldr	r1, [pc, #168]	; (8001aa8 <create_JSON_SubSensorDescriptor+0x188>)
 8001a00:	68b8      	ldr	r0, [r7, #8]
 8001a02:	f01b fedf 	bl	801d7c4 <json_object_dotset_number>
  json_object_dotset_string(JSON_SubSensorDescriptor, "unit", sub_sensor_descriptor->unit);  
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3303      	adds	r3, #3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4927      	ldr	r1, [pc, #156]	; (8001aac <create_JSON_SubSensorDescriptor+0x18c>)
 8001a0e:	68b8      	ldr	r0, [r7, #8]
 8001a10:	f01b feb4 	bl	801d77c <json_object_dotset_string>
  json_object_dotset_value(JSON_SubSensorDescriptor, "fs.values", json_value_init_array());
 8001a14:	f01b fba4 	bl	801d160 <json_value_init_array>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4924      	ldr	r1, [pc, #144]	; (8001ab0 <create_JSON_SubSensorDescriptor+0x190>)
 8001a1e:	68b8      	ldr	r0, [r7, #8]
 8001a20:	f01b fe1f 	bl	801d662 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_SubSensorDescriptor, "fs.values");
 8001a24:	4922      	ldr	r1, [pc, #136]	; (8001ab0 <create_JSON_SubSensorDescriptor+0x190>)
 8001a26:	68b8      	ldr	r0, [r7, #8]
 8001a28:	f01b fa10 	bl	801ce4c <json_object_dotget_array>
 8001a2c:	60f8      	str	r0, [r7, #12]
  
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001a2e:	e013      	b.n	8001a58 <create_JSON_SubSensorDescriptor+0x138>
  {
    json_array_append_number(JSON_SensorArray, sub_sensor_descriptor->FS[ii]);
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3304      	adds	r3, #4
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fdaa 	bl	8000598 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	ec43 2b10 	vmov	d0, r2, r3
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f01b fd8e 	bl	801d56e <json_array_append_number>
    ii++;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	3304      	adds	r3, #4
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	dcde      	bgt.n	8001a30 <create_JSON_SubSensorDescriptor+0x110>
  }  
  json_value_free(tempJSONarray);
 8001a72:	6938      	ldr	r0, [r7, #16]
 8001a74:	f01b fb1a 	bl	801d0ac <json_value_free>
}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	08022188 	.word	0x08022188
 8001a84:	080222ec 	.word	0x080222ec
 8001a88:	080222f0 	.word	0x080222f0
 8001a8c:	080222fc 	.word	0x080222fc
 8001a90:	08022300 	.word	0x08022300
 8001a94:	08022308 	.word	0x08022308
 8001a98:	08022310 	.word	0x08022310
 8001a9c:	08022318 	.word	0x08022318
 8001aa0:	0802231c 	.word	0x0802231c
 8001aa4:	0802226c 	.word	0x0802226c
 8001aa8:	08022320 	.word	0x08022320
 8001aac:	08022330 	.word	0x08022330
 8001ab0:	08022338 	.word	0x08022338

08001ab4 <create_JSON_SubSensorStatus>:


static void create_JSON_SubSensorStatus(COM_SubSensorStatus_t *sub_sensor_status, JSON_Value *tempJSON)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SubSensorStatus = json_value_get_object(tempJSON);
 8001abe:	6838      	ldr	r0, [r7, #0]
 8001ac0:	f01b fa8f 	bl	801cfe2 <json_value_get_object>
 8001ac4:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SubSensorStatus, "fs", sub_sensor_status->FS);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd64 	bl	8000598 <__aeabi_f2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	ec43 2b10 	vmov	d0, r2, r3
 8001ad8:	490d      	ldr	r1, [pc, #52]	; (8001b10 <create_JSON_SubSensorStatus+0x5c>)
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f01b fe72 	bl	801d7c4 <json_object_dotset_number>
  json_object_dotset_number(JSON_SubSensorStatus, "sensitivity", sub_sensor_status->sensitivity);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd57 	bl	8000598 <__aeabi_f2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	ec43 2b10 	vmov	d0, r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <create_JSON_SubSensorStatus+0x60>)
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f01b fe65 	bl	801d7c4 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SubSensorStatus, "isActive", sub_sensor_status->isActive);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7a1b      	ldrb	r3, [r3, #8]
 8001afe:	461a      	mov	r2, r3
 8001b00:	4905      	ldr	r1, [pc, #20]	; (8001b18 <create_JSON_SubSensorStatus+0x64>)
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f01b fe84 	bl	801d810 <json_object_dotset_boolean>
}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	0802218c 	.word	0x0802218c
 8001b14:	08022190 	.word	0x08022190
 8001b18:	0802216c 	.word	0x0802216c

08001b1c <COM_AddSensor>:
* @brief Add Sensor to Db
* @param None
* @retval Sensor unique sID
*/
int32_t COM_AddSensor(void)
{  
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
  uint32_t ii = COM_device.deviceDescriptor.nSensor;
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <COM_AddSensor+0x68>)
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	607b      	str	r3, [r7, #4]
  
  COM_device.sensors[ii] = calloc(1, sizeof(COM_Sensor_t));   
 8001b28:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f01b ff8d 	bl	801da4c <calloc>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4619      	mov	r1, r3
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <COM_AddSensor+0x68>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	330a      	adds	r3, #10
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	6059      	str	r1, [r3, #4]
  
  if(COM_device.sensors[ii] == NULL)
 8001b42:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <COM_AddSensor+0x68>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	330a      	adds	r3, #10
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <COM_AddSensor+0x3c>
    return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	e010      	b.n	8001b7a <COM_AddSensor+0x5e>
  
  COM_device.sensors[ii]->sensorDescriptor.id = ii;
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <COM_AddSensor+0x68>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	330a      	adds	r3, #10
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
  COM_device.deviceDescriptor.nSensor++;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <COM_AddSensor+0x68>)
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	3301      	adds	r3, #1
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <COM_AddSensor+0x68>)
 8001b72:	6293      	str	r3, [r2, #40]	; 0x28
  return COM_device.deviceDescriptor.nSensor - 1;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <COM_AddSensor+0x68>)
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	3b01      	subs	r3, #1
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000280 	.word	0x20000280

08001b88 <COM_GetDevice>:
* @brief Get Device Struct
* @param None
* @retval whole device Structure
*/
COM_Device_t * COM_GetDevice(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return (COM_Device_t *)&COM_device;
 8001b8c:	4b02      	ldr	r3, [pc, #8]	; (8001b98 <COM_GetDevice+0x10>)
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	20000280 	.word	0x20000280

08001b9c <COM_GetDeviceDescriptor>:
* @brief Get Device Descriptor
* @param None
* @retval Device Descriptor
*/
COM_DeviceDescriptor_t * COM_GetDeviceDescriptor(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return (COM_DeviceDescriptor_t *)&(COM_device.deviceDescriptor);
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <COM_GetDeviceDescriptor+0x10>)
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	20000280 	.word	0x20000280

08001bb0 <COM_GetSensor>:
* @brief Get Sensor 
* @param None
* @retval Sensor unique sID
*/
COM_Sensor_t * COM_GetSensor(uint8_t sID)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  return COM_device.sensors[sID];
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <COM_GetSensor+0x24>)
 8001bbe:	330a      	adds	r3, #10
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	685b      	ldr	r3, [r3, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000280 	.word	0x20000280

08001bd8 <COM_GetSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SensorDescriptor_t * COM_GetSensorDescriptor(uint8_t sID)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorDescriptor);  
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <COM_GetSensorDescriptor+0x24>)
 8001be6:	330a      	adds	r3, #10
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	685b      	ldr	r3, [r3, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000280 	.word	0x20000280

08001c00 <COM_GetSensorStatus>:
* @brief Get Sensor Status
* @param None
* @retval Sensor unique sID
*/
COM_SensorStatus_t * COM_GetSensorStatus(uint8_t sID)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorStatus);  
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4a06      	ldr	r2, [pc, #24]	; (8001c28 <COM_GetSensorStatus+0x28>)
 8001c0e:	330a      	adds	r3, #10
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000280 	.word	0x20000280

08001c2c <COM_GetSubSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SubSensorDescriptor_t * COM_GetSubSensorDescriptor(uint8_t sID, uint8_t ssID)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71bb      	strb	r3, [r7, #6]
    return &(COM_device.sensors[sID]->sensorDescriptor.subSensorDescriptor[ssID]);  
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <COM_GetSubSensorDescriptor+0x38>)
 8001c40:	330a      	adds	r3, #10
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	2154      	movs	r1, #84	; 0x54
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	3358      	adds	r3, #88	; 0x58
 8001c52:	4413      	add	r3, r2
 8001c54:	3304      	adds	r3, #4
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000280 	.word	0x20000280

08001c68 <COM_GetSubSensorNumber>:
* @brief Get Sensor Status
* @param Sensor unique sID
* @retval number of subsensors
*/
uint8_t COM_GetSubSensorNumber(uint8_t sID)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
    return COM_device.sensors[sID]->sensorDescriptor.nSubSensors;  
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <COM_GetSubSensorNumber+0x28>)
 8001c76:	330a      	adds	r3, #10
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000280 	.word	0x20000280

08001c94 <COM_IsOdrLegal>:
  
  return ret;
}

uint8_t COM_IsOdrLegal(float value, uint8_t sID)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	70fb      	strb	r3, [r7, #3]
  uint16_t i = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	737b      	strb	r3, [r7, #13]
  float * list = COM_device.sensors[sID]->sensorDescriptor.ODR;
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <COM_IsOdrLegal+0x74>)
 8001cae:	330a      	adds	r3, #10
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	60bb      	str	r3, [r7, #8]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001cba:	e011      	b.n	8001ce0 <COM_IsOdrLegal+0x4c>
  {
    if(list[i] == value)
 8001cbc:	89fb      	ldrh	r3, [r7, #14]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ccc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	d101      	bne.n	8001cda <COM_IsOdrLegal+0x46>
      ret = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	737b      	strb	r3, [r7, #13]
    i++;
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	81fb      	strh	r3, [r7, #14]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001ce0:	89fb      	ldrh	r3, [r7, #14]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001cf0:	eef4 7a47 	vcmp.f32	s15, s14
 8001cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf8:	d1e0      	bne.n	8001cbc <COM_IsOdrLegal+0x28>
  }
  
  return ret;
 8001cfa:	7b7b      	ldrb	r3, [r7, #13]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20000280 	.word	0x20000280

08001d0c <get_unique_id>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


static void get_unique_id(char * id)
{ 
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t deviceserial[3];
  
  deviceserial[0] = *(uint32_t*)DEVICE_ID_REG_1;
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <get_unique_id+0xd4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  deviceserial[1] = *(uint32_t*)DEVICE_ID_REG_2;
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <get_unique_id+0xd8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
  deviceserial[2] = *(uint32_t*)DEVICE_ID_REG_3; 
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <get_unique_id+0xdc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	617b      	str	r3, [r7, #20]
  
  uint16_t y = (deviceserial[0] & 0xFFFF);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t x = ((deviceserial[0] >> 16) & 0xFFFF);  
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint8_t waf_num = (deviceserial[1] & 0xFF);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
  id[0] = (deviceserial[1]>>8) & 0xFF;
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	701a      	strb	r2, [r3, #0]
  id[1] = (deviceserial[1]>>16) & 0xFF;
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	0c1a      	lsrs	r2, r3, #16
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3301      	adds	r3, #1
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]
  id[2] = (deviceserial[1]>>24) & 0xFF;  
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	0e1a      	lsrs	r2, r3, #24
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3302      	adds	r3, #2
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]
  id[3] = (deviceserial[2]) & 0xFF;
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3303      	adds	r3, #3
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
  id[4] = (deviceserial[2]>>8) & 0xFF;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	0a1a      	lsrs	r2, r3, #8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]
  id[5] = (deviceserial[2]>>16) & 0xFF;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	0c1a      	lsrs	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3305      	adds	r3, #5
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]
  id[6] = (deviceserial[2]>>24) & 0xFF;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	0e1a      	lsrs	r2, r3, #24
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3306      	adds	r3, #6
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	701a      	strb	r2, [r3, #0]
  
  int n;
  char * p = &id[7];
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3307      	adds	r3, #7
 8001d8a:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%03u", waf_num);
 8001d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d90:	461a      	mov	r2, r3
 8001d92:	4916      	ldr	r1, [pc, #88]	; (8001dec <get_unique_id+0xe0>)
 8001d94:	69f8      	ldr	r0, [r7, #28]
 8001d96:	f01c fe39 	bl	801ea0c <siprintf>
 8001d9a:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	4413      	add	r3, r2
 8001da2:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", x);
 8001da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001da6:	461a      	mov	r2, r3
 8001da8:	4911      	ldr	r1, [pc, #68]	; (8001df0 <get_unique_id+0xe4>)
 8001daa:	69f8      	ldr	r0, [r7, #28]
 8001dac:	f01c fe2e 	bl	801ea0c <siprintf>
 8001db0:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	4413      	add	r3, r2
 8001db8:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", y);
 8001dba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	490c      	ldr	r1, [pc, #48]	; (8001df0 <get_unique_id+0xe4>)
 8001dc0:	69f8      	ldr	r0, [r7, #28]
 8001dc2:	f01c fe23 	bl	801ea0c <siprintf>
 8001dc6:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	4413      	add	r3, r2
 8001dce:	61fb      	str	r3, [r7, #28]
  
  *p = '\0';
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
  /*OUT: | LOT NUMBER [7] | WAF NUMBER [3] | X ON WAF [5] | Y ON WAF [5] | */  
}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	1fff7590 	.word	0x1fff7590
 8001de4:	1fff7594 	.word	0x1fff7594
 8001de8:	1fff7598 	.word	0x1fff7598
 8001dec:	08022344 	.word	0x08022344
 8001df0:	0802234c 	.word	0x0802234c

08001df4 <set_default_description>:
* @brief Set default device description
* @param None
* @retval None
*/
void set_default_description(void)
{  
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;
  COM_DeviceDescriptor_t * tempDeviceDescriptor;
  tempDeviceDescriptor = COM_GetDeviceDescriptor();
 8001dfa:	f7ff fecf 	bl	8001b9c <COM_GetDeviceDescriptor>
 8001dfe:	6078      	str	r0, [r7, #4]
  
  get_unique_id(tempDeviceDescriptor->serialNumber);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff82 	bl	8001d0c <get_unique_id>
  strcpy(tempDeviceDescriptor->alias, "STWIN_001"); 
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3315      	adds	r3, #21
 8001e0c:	49ba      	ldr	r1, [pc, #744]	; (80020f8 <set_default_description+0x304>)
 8001e0e:	461a      	mov	r2, r3
 8001e10:	460b      	mov	r3, r1
 8001e12:	cb03      	ldmia	r3!, {r0, r1}
 8001e14:	6010      	str	r0, [r2, #0]
 8001e16:	6051      	str	r1, [r2, #4]
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	8113      	strh	r3, [r2, #8]
    
  /***** IIS3DWB *****/
  iis3dwb_com_id = COM_AddSensor();
 8001e1c:	f7ff fe7e 	bl	8001b1c <COM_AddSensor>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4bb5      	ldr	r3, [pc, #724]	; (80020fc <set_default_description+0x308>)
 8001e26:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);
 8001e28:	4bb4      	ldr	r3, [pc, #720]	; (80020fc <set_default_description+0x308>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff febf 	bl	8001bb0 <COM_GetSensor>
 8001e32:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS3DWB"); 
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	49b1      	ldr	r1, [pc, #708]	; (8002100 <set_default_description+0x30c>)
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	cb03      	ldmia	r3!, {r0, r1}
 8001e40:	6010      	str	r0, [r2, #0]
 8001e42:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2203      	movs	r2, #3
 8001e48:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 26667.0f;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	4aad      	ldr	r2, [pc, #692]	; (8002104 <set_default_description+0x310>)
 8001e4e:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  /* Terminate list */
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4aad      	ldr	r2, [pc, #692]	; (8002108 <set_default_description+0x314>)
 8001e54:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 26667.0f;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4aa4      	ldr	r2, [pc, #656]	; (8002104 <set_default_description+0x310>)
 8001e74:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e92:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 3000;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ea4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS3DWB;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001eae:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb8:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	335f      	adds	r3, #95	; 0x5f
 8001ed8:	4a8c      	ldr	r2, [pc, #560]	; (800210c <set_default_description+0x318>)
 8001eda:	8811      	ldrh	r1, [r2, #0]
 8001edc:	7892      	ldrb	r2, [r2, #2]
 8001ede:	8019      	strh	r1, [r3, #0]
 8001ee0:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee8:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001ef0:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001ef8:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001f00:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	4a80      	ldr	r2, [pc, #512]	; (8002108 <set_default_description+0x314>)
 8001f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001f10:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8001f22:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002110 <set_default_description+0x31c>
 8001f26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f2a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc

  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8001f3e:	4a75      	ldr	r2, [pc, #468]	; (8002114 <set_default_description+0x320>)
 8001f40:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001f48:	4a72      	ldr	r2, [pc, #456]	; (8002114 <set_default_description+0x320>)
 8001f4a:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8001f52:	4b70      	ldr	r3, [pc, #448]	; (8002114 <set_default_description+0x320>)
 8001f54:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis3dwb_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS3DWB / (uint32_t)(IIS3DWB_Init_Param.ODR * 6); 
 8001f56:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <set_default_description+0x320>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f68:	ee17 2a90 	vmov	r2, s15
 8001f6c:	4b63      	ldr	r3, [pc, #396]	; (80020fc <set_default_description+0x308>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	4b69      	ldr	r3, [pc, #420]	; (8002118 <set_default_description+0x324>)
 8001f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f78:	4a68      	ldr	r2, [pc, #416]	; (800211c <set_default_description+0x328>)
 8001f7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /*****                                                                 *****/ 
  
  /***** HTS221 *****/
  hts221_com_id = COM_AddSensor();
 8001f7e:	f7ff fdcd 	bl	8001b1c <COM_AddSensor>
 8001f82:	4603      	mov	r3, r0
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4b66      	ldr	r3, [pc, #408]	; (8002120 <set_default_description+0x32c>)
 8001f88:	701a      	strb	r2, [r3, #0]
  tempSensor = COM_GetSensor(hts221_com_id);
 8001f8a:	4b65      	ldr	r3, [pc, #404]	; (8002120 <set_default_description+0x32c>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fe0e 	bl	8001bb0 <COM_GetSensor>
 8001f94:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "HTS221"); 
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4a62      	ldr	r2, [pc, #392]	; (8002124 <set_default_description+0x330>)
 8001f9c:	6810      	ldr	r0, [r2, #0]
 8001f9e:	6018      	str	r0, [r3, #0]
 8001fa0:	8891      	ldrh	r1, [r2, #4]
 8001fa2:	7992      	ldrb	r2, [r2, #6]
 8001fa4:	8099      	strh	r1, [r3, #4]
 8001fa6:	719a      	strb	r2, [r3, #6]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2206      	movs	r2, #6
 8001fac:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fb4:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 7.0f;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	4a5b      	ldr	r2, [pc, #364]	; (8002128 <set_default_description+0x334>)
 8001fba:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 12.5f;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4a5b      	ldr	r2, [pc, #364]	; (800212c <set_default_description+0x338>)
 8001fc0:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = COM_END_OF_LIST_FLOAT;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	4a50      	ldr	r2, [pc, #320]	; (8002108 <set_default_description+0x314>)
 8001fc6:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 12.5f;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	4a51      	ldr	r2, [pc, #324]	; (800212c <set_default_description+0x338>)
 8001fe6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 50;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2232      	movs	r2, #50	; 0x32
 8002002:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 16;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2210      	movs	r2, #16
 8002012:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_HTS221;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800201c:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002026:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_TEMP; 
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2204      	movs	r2, #4
 8002036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	335f      	adds	r3, #95	; 0x5f
 8002046:	493a      	ldr	r1, [pc, #232]	; (8002130 <set_default_description+0x33c>)
 8002048:	461a      	mov	r2, r3
 800204a:	460b      	mov	r3, r1
 800204c:	cb03      	ldmia	r3!, {r0, r1}
 800204e:	6010      	str	r0, [r2, #0]
 8002050:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 120.0f; 
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	4a37      	ldr	r2, [pc, #220]	; (8002134 <set_default_description+0x340>)
 8002056:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <set_default_description+0x314>)
 800205c:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 120.0f;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	4a34      	ldr	r2, [pc, #208]	; (8002134 <set_default_description+0x340>)
 8002062:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0f;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002074:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_HUM; 
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2206      	movs	r2, #6
 8002084:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 1;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "%");
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	33b3      	adds	r3, #179	; 0xb3
 8002094:	4928      	ldr	r1, [pc, #160]	; (8002138 <set_default_description+0x344>)
 8002096:	461a      	mov	r2, r3
 8002098:	460b      	mov	r3, r1
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	8013      	strh	r3, [r2, #0]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 100.0f; 
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	4a26      	ldr	r2, [pc, #152]	; (800213c <set_default_description+0x348>)
 80020a2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = COM_END_OF_LIST_FLOAT;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <set_default_description+0x314>)
 80020aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 100.0f;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	4a22      	ldr	r2, [pc, #136]	; (800213c <set_default_description+0x348>)
 80020b2:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 1.0f;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020c4:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
  
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80020ce:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <set_default_description+0x34c>)
 80020d0:	6013      	str	r3, [r2, #0]
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80020d8:	4a19      	ldr	r2, [pc, #100]	; (8002140 <set_default_description+0x34c>)
 80020da:	6053      	str	r3, [r2, #4]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80020e2:	4a17      	ldr	r2, [pc, #92]	; (8002140 <set_default_description+0x34c>)
 80020e4:	6093      	str	r3, [r2, #8]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <set_default_description+0x34c>)
 80020ee:	751a      	strb	r2, [r3, #20]
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80020f6:	e025      	b.n	8002144 <set_default_description+0x350>
 80020f8:	08022354 	.word	0x08022354
 80020fc:	20016040 	.word	0x20016040
 8002100:	08022360 	.word	0x08022360
 8002104:	46d05600 	.word	0x46d05600
 8002108:	bf800000 	.word	0xbf800000
 800210c:	08022368 	.word	0x08022368
 8002110:	3d79db23 	.word	0x3d79db23
 8002114:	2000ff08 	.word	0x2000ff08
 8002118:	01e84800 	.word	0x01e84800
 800211c:	20016320 	.word	0x20016320
 8002120:	20016354 	.word	0x20016354
 8002124:	0802236c 	.word	0x0802236c
 8002128:	40e00000 	.word	0x40e00000
 800212c:	41480000 	.word	0x41480000
 8002130:	08022374 	.word	0x08022374
 8002134:	42f00000 	.word	0x42f00000
 8002138:	0802237c 	.word	0x0802237c
 800213c:	42c80000 	.word	0x42c80000
 8002140:	2000fe78 	.word	0x2000fe78
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <set_default_description+0x4cc>)
 8002146:	755a      	strb	r2, [r3, #21]
  
  maxWriteTimeSensor[hts221_com_id] = 1000 * WRITE_BUFFER_SIZE_HTS221 / (uint32_t)(HTS221_Init_Param.ODR * 8); 
 8002148:	4b5d      	ldr	r3, [pc, #372]	; (80022c0 <set_default_description+0x4cc>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800215a:	ee17 2a90 	vmov	r2, s15
 800215e:	4b59      	ldr	r3, [pc, #356]	; (80022c4 <set_default_description+0x4d0>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	4619      	mov	r1, r3
 8002164:	4b58      	ldr	r3, [pc, #352]	; (80022c8 <set_default_description+0x4d4>)
 8002166:	fbb3 f3f2 	udiv	r3, r3, r2
 800216a:	4a58      	ldr	r2, [pc, #352]	; (80022cc <set_default_description+0x4d8>)
 800216c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /*****                                                                  *****/ 
    
  /***** IIS2DH *****/
  iis2dh_com_id = COM_AddSensor();
 8002170:	f7ff fcd4 	bl	8001b1c <COM_AddSensor>
 8002174:	4603      	mov	r3, r0
 8002176:	b2da      	uxtb	r2, r3
 8002178:	4b55      	ldr	r3, [pc, #340]	; (80022d0 <set_default_description+0x4dc>)
 800217a:	701a      	strb	r2, [r3, #0]
  tempSensor = COM_GetSensor(iis2dh_com_id);
 800217c:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <set_default_description+0x4dc>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fd15 	bl	8001bb0 <COM_GetSensor>
 8002186:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS2DH"); 
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	3301      	adds	r3, #1
 800218c:	4a51      	ldr	r2, [pc, #324]	; (80022d4 <set_default_description+0x4e0>)
 800218e:	6810      	ldr	r0, [r2, #0]
 8002190:	6018      	str	r0, [r3, #0]
 8002192:	8891      	ldrh	r1, [r2, #4]
 8002194:	7992      	ldrb	r2, [r2, #6]
 8002196:	8099      	strh	r1, [r3, #4]
 8002198:	719a      	strb	r2, [r3, #6]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2203      	movs	r2, #3
 800219e:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021a6:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 10.0f;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4a4b      	ldr	r2, [pc, #300]	; (80022d8 <set_default_description+0x4e4>)
 80021ac:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 25.0f;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	4a4a      	ldr	r2, [pc, #296]	; (80022dc <set_default_description+0x4e8>)
 80021b2:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 50.0f;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4a4a      	ldr	r2, [pc, #296]	; (80022e0 <set_default_description+0x4ec>)
 80021b8:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 100.0f;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	4a49      	ldr	r2, [pc, #292]	; (80022e4 <set_default_description+0x4f0>)
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[5] = 200.0f;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	4a49      	ldr	r2, [pc, #292]	; (80022e8 <set_default_description+0x4f4>)
 80021c4:	629a      	str	r2, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 400.0f;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	4a48      	ldr	r2, [pc, #288]	; (80022ec <set_default_description+0x4f8>)
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = 1344.0f;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4a48      	ldr	r2, [pc, #288]	; (80022f0 <set_default_description+0x4fc>)
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
  tempSensor->sensorDescriptor.ODR[8] = COM_END_OF_LIST_FLOAT;  
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	4a47      	ldr	r2, [pc, #284]	; (80022f4 <set_default_description+0x500>)
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2200      	movs	r2, #0
 80021dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 1344.0f;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	4a3e      	ldr	r2, [pc, #248]	; (80022f0 <set_default_description+0x4fc>)
 80021f6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002214:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 2400;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002226:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS2DH;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002230:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800223a:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2203      	movs	r2, #3
 8002252:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	335f      	adds	r3, #95	; 0x5f
 800225a:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <set_default_description+0x504>)
 800225c:	8811      	ldrh	r1, [r2, #0]
 800225e:	7892      	ldrb	r2, [r2, #2]
 8002260:	8019      	strh	r1, [r3, #0]
 8002262:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800226a:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002272:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800227a:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002282:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <set_default_description+0x500>)
 8002288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002292:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  if (tempSensor->sensorStatus.subSensorStatus[0].FS == 16.0f)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 80022a4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80022a8:	eef4 7a47 	vcmp.f32	s15, s14
 80022ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b0:	d126      	bne.n	8002300 <set_default_description+0x50c>
  {
    tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.75f;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80022b8:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 80022bc:	e02e      	b.n	800231c <set_default_description+0x528>
 80022be:	bf00      	nop
 80022c0:	2000fe78 	.word	0x2000fe78
 80022c4:	20016354 	.word	0x20016354
 80022c8:	0007a120 	.word	0x0007a120
 80022cc:	20016320 	.word	0x20016320
 80022d0:	200163f0 	.word	0x200163f0
 80022d4:	08022380 	.word	0x08022380
 80022d8:	41200000 	.word	0x41200000
 80022dc:	41c80000 	.word	0x41c80000
 80022e0:	42480000 	.word	0x42480000
 80022e4:	42c80000 	.word	0x42c80000
 80022e8:	43480000 	.word	0x43480000
 80022ec:	43c80000 	.word	0x43c80000
 80022f0:	44a80000 	.word	0x44a80000
 80022f4:	bf800000 	.word	0xbf800000
 80022f8:	08022368 	.word	0x08022368
 80022fc:	3d800000 	.word	0x3d800000
  }
  else
  {
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.0625f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8002306:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80022fc <set_default_description+0x508>
 800230a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800230e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
  }
  
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002322:	4ab8      	ldr	r2, [pc, #736]	; (8002604 <set_default_description+0x810>)
 8002324:	6013      	str	r3, [r2, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800232c:	4ab5      	ldr	r2, [pc, #724]	; (8002604 <set_default_description+0x810>)
 800232e:	6053      	str	r3, [r2, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002336:	4bb3      	ldr	r3, [pc, #716]	; (8002604 <set_default_description+0x810>)
 8002338:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis2dh_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2DH / (uint32_t)(IIS2DH_Init_Param.ODR * 6);
 800233a:	4bb2      	ldr	r3, [pc, #712]	; (8002604 <set_default_description+0x810>)
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002344:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800234c:	ee17 2a90 	vmov	r2, s15
 8002350:	4bad      	ldr	r3, [pc, #692]	; (8002608 <set_default_description+0x814>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	4bad      	ldr	r3, [pc, #692]	; (800260c <set_default_description+0x818>)
 8002358:	fbb3 f3f2 	udiv	r3, r3, r2
 800235c:	4aac      	ldr	r2, [pc, #688]	; (8002610 <set_default_description+0x81c>)
 800235e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* IIS2MDC */
  iis2mdc_com_id = COM_AddSensor();  
 8002362:	f7ff fbdb 	bl	8001b1c <COM_AddSensor>
 8002366:	4603      	mov	r3, r0
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4baa      	ldr	r3, [pc, #680]	; (8002614 <set_default_description+0x820>)
 800236c:	701a      	strb	r2, [r3, #0]
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 800236e:	4ba9      	ldr	r3, [pc, #676]	; (8002614 <set_default_description+0x820>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fc1c 	bl	8001bb0 <COM_GetSensor>
 8002378:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS2MDC"); 
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	3301      	adds	r3, #1
 800237e:	49a6      	ldr	r1, [pc, #664]	; (8002618 <set_default_description+0x824>)
 8002380:	461a      	mov	r2, r3
 8002382:	460b      	mov	r3, r1
 8002384:	cb03      	ldmia	r3!, {r0, r1}
 8002386:	6010      	str	r0, [r2, #0]
 8002388:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2203      	movs	r2, #3
 800238e:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 10.0f;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4aa2      	ldr	r2, [pc, #648]	; (800261c <set_default_description+0x828>)
 8002394:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 20.0f;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	4aa1      	ldr	r2, [pc, #644]	; (8002620 <set_default_description+0x82c>)
 800239a:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 50.0f;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4aa1      	ldr	r2, [pc, #644]	; (8002624 <set_default_description+0x830>)
 80023a0:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 100.0f;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	4aa0      	ldr	r2, [pc, #640]	; (8002628 <set_default_description+0x834>)
 80023a6:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = COM_END_OF_LIST_FLOAT;  
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	4aa0      	ldr	r2, [pc, #640]	; (800262c <set_default_description+0x838>)
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 100.0f;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4a97      	ldr	r2, [pc, #604]	; (8002628 <set_default_description+0x834>)
 80023cc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 100;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2264      	movs	r2, #100	; 0x64
 80023e8:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 600;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80023fa:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS2MDC;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002404:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800240e:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MAG; 
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2203      	movs	r2, #3
 8002426:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "gauss");
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	335f      	adds	r3, #95	; 0x5f
 800242e:	4a80      	ldr	r2, [pc, #512]	; (8002630 <set_default_description+0x83c>)
 8002430:	6810      	ldr	r0, [r2, #0]
 8002432:	6018      	str	r0, [r3, #0]
 8002434:	8892      	ldrh	r2, [r2, #4]
 8002436:	809a      	strh	r2, [r3, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 50.0f; 
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4a7a      	ldr	r2, [pc, #488]	; (8002624 <set_default_description+0x830>)
 800243c:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	4a7a      	ldr	r2, [pc, #488]	; (800262c <set_default_description+0x838>)
 8002442:	675a      	str	r2, [r3, #116]	; 0x74

  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 50.0f;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4a77      	ldr	r2, [pc, #476]	; (8002624 <set_default_description+0x830>)
 8002448:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.5;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800245a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002464:	4a73      	ldr	r2, [pc, #460]	; (8002634 <set_default_description+0x840>)
 8002466:	6013      	str	r3, [r2, #0]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800246e:	4a71      	ldr	r2, [pc, #452]	; (8002634 <set_default_description+0x840>)
 8002470:	6053      	str	r3, [r2, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002478:	4b6e      	ldr	r3, [pc, #440]	; (8002634 <set_default_description+0x840>)
 800247a:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis2mdc_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2MDC / (uint32_t)(IIS2MDC_Init_Param.ODR * 6); 
 800247c:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <set_default_description+0x840>)
 800247e:	edd3 7a00 	vldr	s15, [r3]
 8002482:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800248e:	ee17 2a90 	vmov	r2, s15
 8002492:	4b60      	ldr	r3, [pc, #384]	; (8002614 <set_default_description+0x820>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	4b67      	ldr	r3, [pc, #412]	; (8002638 <set_default_description+0x844>)
 800249a:	fbb3 f3f2 	udiv	r3, r3, r2
 800249e:	4a5c      	ldr	r2, [pc, #368]	; (8002610 <set_default_description+0x81c>)
 80024a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* IMP34DT05 */
  imp34dt05_com_id = COM_AddSensor();
 80024a4:	f7ff fb3a 	bl	8001b1c <COM_AddSensor>
 80024a8:	4603      	mov	r3, r0
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b63      	ldr	r3, [pc, #396]	; (800263c <set_default_description+0x848>)
 80024ae:	701a      	strb	r2, [r3, #0]
   
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 80024b0:	4b62      	ldr	r3, [pc, #392]	; (800263c <set_default_description+0x848>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fb7b 	bl	8001bb0 <COM_GetSensor>
 80024ba:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IMP34DT05"); 
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	3301      	adds	r3, #1
 80024c0:	495f      	ldr	r1, [pc, #380]	; (8002640 <set_default_description+0x84c>)
 80024c2:	461a      	mov	r2, r3
 80024c4:	460b      	mov	r3, r1
 80024c6:	cb03      	ldmia	r3!, {r0, r1}
 80024c8:	6010      	str	r0, [r2, #0]
 80024ca:	6051      	str	r1, [r2, #4]
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	8113      	strh	r3, [r2, #8]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2203      	movs	r2, #3
 80024d4:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 48000.0f;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	4a5a      	ldr	r2, [pc, #360]	; (8002644 <set_default_description+0x850>)
 80024da:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4a53      	ldr	r2, [pc, #332]	; (800262c <set_default_description+0x838>)
 80024e0:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 48000.0f;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4a51      	ldr	r2, [pc, #324]	; (8002644 <set_default_description+0x850>)
 8002500:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800251e:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 4096;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002530:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IMP34DT05;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800253a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002544:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;  
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MIC; 
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2207      	movs	r2, #7
 8002554:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	335f      	adds	r3, #95	; 0x5f
 8002564:	4938      	ldr	r1, [pc, #224]	; (8002648 <set_default_description+0x854>)
 8002566:	461a      	mov	r2, r3
 8002568:	460b      	mov	r3, r1
 800256a:	cb03      	ldmia	r3!, {r0, r1}
 800256c:	6010      	str	r0, [r2, #0]
 800256e:	6051      	str	r1, [r2, #4]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	7213      	strb	r3, [r2, #8]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 122.5f; 
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4a35      	ldr	r2, [pc, #212]	; (800264c <set_default_description+0x858>)
 8002578:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	4a2b      	ldr	r2, [pc, #172]	; (800262c <set_default_description+0x838>)
 800257e:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 122.5f;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4a32      	ldr	r2, [pc, #200]	; (800264c <set_default_description+0x858>)
 8002584:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002596:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80025a0:	4a2b      	ldr	r2, [pc, #172]	; (8002650 <set_default_description+0x85c>)
 80025a2:	6013      	str	r3, [r2, #0]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80025aa:	4a29      	ldr	r2, [pc, #164]	; (8002650 <set_default_description+0x85c>)
 80025ac:	6053      	str	r3, [r2, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80025b4:	4b26      	ldr	r3, [pc, #152]	; (8002650 <set_default_description+0x85c>)
 80025b6:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[imp34dt05_com_id] = 1000 * WRITE_BUFFER_SIZE_IMP34DT05 / (uint32_t)(IMP34DT05_Init_Param.ODR * 2); 
 80025b8:	4b25      	ldr	r3, [pc, #148]	; (8002650 <set_default_description+0x85c>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c6:	ee17 2a90 	vmov	r2, s15
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <set_default_description+0x848>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	4619      	mov	r1, r3
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <set_default_description+0x860>)
 80025d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80025d6:	4a0e      	ldr	r2, [pc, #56]	; (8002610 <set_default_description+0x81c>)
 80025d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
/**********/ 
  
  /* ISM330DHCX */
  ism330dhcx_com_id = COM_AddSensor();
 80025dc:	f7ff fa9e 	bl	8001b1c <COM_AddSensor>
 80025e0:	4603      	mov	r3, r0
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <set_default_description+0x864>)
 80025e6:	701a      	strb	r2, [r3, #0]
  
    tempSensor = COM_GetSensor(ism330dhcx_com_id);
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <set_default_description+0x864>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fadf 	bl	8001bb0 <COM_GetSensor>
 80025f2:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "ISM330DHCX"); 
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	4918      	ldr	r1, [pc, #96]	; (800265c <set_default_description+0x868>)
 80025fa:	461a      	mov	r2, r3
 80025fc:	460b      	mov	r3, r1
 80025fe:	cb03      	ldmia	r3!, {r0, r1}
 8002600:	e02e      	b.n	8002660 <set_default_description+0x86c>
 8002602:	bf00      	nop
 8002604:	2000fea4 	.word	0x2000fea4
 8002608:	200163f0 	.word	0x200163f0
 800260c:	007a1200 	.word	0x007a1200
 8002610:	20016320 	.word	0x20016320
 8002614:	20016315 	.word	0x20016315
 8002618:	08022388 	.word	0x08022388
 800261c:	41200000 	.word	0x41200000
 8002620:	41a00000 	.word	0x41a00000
 8002624:	42480000 	.word	0x42480000
 8002628:	42c80000 	.word	0x42c80000
 800262c:	bf800000 	.word	0xbf800000
 8002630:	08022390 	.word	0x08022390
 8002634:	2000fedc 	.word	0x2000fedc
 8002638:	001e8480 	.word	0x001e8480
 800263c:	200163e8 	.word	0x200163e8
 8002640:	08022398 	.word	0x08022398
 8002644:	473b8000 	.word	0x473b8000
 8002648:	080223a4 	.word	0x080223a4
 800264c:	42f50000 	.word	0x42f50000
 8002650:	20014e58 	.word	0x20014e58
 8002654:	01e84800 	.word	0x01e84800
 8002658:	20016355 	.word	0x20016355
 800265c:	080223b0 	.word	0x080223b0
 8002660:	6010      	str	r0, [r2, #0]
 8002662:	6051      	str	r1, [r2, #4]
 8002664:	8819      	ldrh	r1, [r3, #0]
 8002666:	789b      	ldrb	r3, [r3, #2]
 8002668:	8111      	strh	r1, [r2, #8]
 800266a:	7293      	strb	r3, [r2, #10]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2203      	movs	r2, #3
 8002670:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 12.5f;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	4ab3      	ldr	r2, [pc, #716]	; (8002944 <set_default_description+0xb50>)
 8002676:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 26.0f;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4ab3      	ldr	r2, [pc, #716]	; (8002948 <set_default_description+0xb54>)
 800267c:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 52.0f;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	4ab2      	ldr	r2, [pc, #712]	; (800294c <set_default_description+0xb58>)
 8002682:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 104.0f;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	4ab2      	ldr	r2, [pc, #712]	; (8002950 <set_default_description+0xb5c>)
 8002688:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 208.0f;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	4ab1      	ldr	r2, [pc, #708]	; (8002954 <set_default_description+0xb60>)
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[5] = 417.0f;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	4ab1      	ldr	r2, [pc, #708]	; (8002958 <set_default_description+0xb64>)
 8002694:	629a      	str	r2, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 833.0f;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	4ab0      	ldr	r2, [pc, #704]	; (800295c <set_default_description+0xb68>)
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = 1667.0f;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4ab0      	ldr	r2, [pc, #704]	; (8002960 <set_default_description+0xb6c>)
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
  tempSensor->sensorDescriptor.ODR[8] = 3333.0f;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	4aaf      	ldr	r2, [pc, #700]	; (8002964 <set_default_description+0xb70>)
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34
  tempSensor->sensorDescriptor.ODR[9] = 6667.0f;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4aaf      	ldr	r2, [pc, #700]	; (8002968 <set_default_description+0xb74>)
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
  tempSensor->sensorDescriptor.ODR[10] = COM_END_OF_LIST_FLOAT;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	4aae      	ldr	r2, [pc, #696]	; (800296c <set_default_description+0xb78>)
 80026b2:	63da      	str	r2, [r3, #60]	; 0x3c
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 2;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 6667.0f;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	4aa5      	ldr	r2, [pc, #660]	; (8002968 <set_default_description+0xb74>)
 80026d2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f0:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 2048;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002702:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_ISM330DHCX;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800270c:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002716:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	335f      	adds	r3, #95	; 0x5f
 8002736:	4a8e      	ldr	r2, [pc, #568]	; (8002970 <set_default_description+0xb7c>)
 8002738:	8811      	ldrh	r1, [r2, #0]
 800273a:	7892      	ldrb	r2, [r2, #2]
 800273c:	8019      	strh	r1, [r3, #0]
 800273e:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002746:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800274e:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8002756:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800275e:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_LIST_SEPARATOR_FLOAT;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8002766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8002770:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f * tempSensor->sensorStatus.subSensorStatus[0].FS/2.0f;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8002782:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002974 <set_default_description+0xb80>
 8002786:	ee27 7a87 	vmul.f32	s14, s15, s14
 800278a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800278e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_GYRO; 
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2203      	movs	r2, #3
 80027a4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 3;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2203      	movs	r2, #3
 80027ac:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "mdps");
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	33b3      	adds	r3, #179	; 0xb3
 80027b4:	4a70      	ldr	r2, [pc, #448]	; (8002978 <set_default_description+0xb84>)
 80027b6:	6810      	ldr	r0, [r2, #0]
 80027b8:	6018      	str	r0, [r3, #0]
 80027ba:	7912      	ldrb	r2, [r2, #4]
 80027bc:	711a      	strb	r2, [r3, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 125.0f; 
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	4a6e      	ldr	r2, [pc, #440]	; (800297c <set_default_description+0xb88>)
 80027c2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = 250.0f; 
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	4a6d      	ldr	r2, [pc, #436]	; (8002980 <set_default_description+0xb8c>)
 80027ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[2] = 500.0f; 
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	4a6c      	ldr	r2, [pc, #432]	; (8002984 <set_default_description+0xb90>)
 80027d2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[3] = 1000.0f; 
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	4a6b      	ldr	r2, [pc, #428]	; (8002988 <set_default_description+0xb94>)
 80027da:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[4] = 2000.0f; 
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	4a6a      	ldr	r2, [pc, #424]	; (800298c <set_default_description+0xb98>)
 80027e2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[5] = 4000.0f; 
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	4a69      	ldr	r2, [pc, #420]	; (8002990 <set_default_description+0xb9c>)
 80027ea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[6] = COM_END_OF_LIST_FLOAT; 
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	4a5e      	ldr	r2, [pc, #376]	; (800296c <set_default_description+0xb78>)
 80027f2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 4000.0f;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	4a65      	ldr	r2, [pc, #404]	; (8002990 <set_default_description+0xb9c>)
 80027fa:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 4.375f * tempSensor->sensorStatus.subSensorStatus[1].FS/125.0f;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 800280c:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002994 <set_default_description+0xba0>
 8002810:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002814:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002998 <set_default_description+0xba4>
 8002818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	edc3 7a76 	vstr	s15, [r3, #472]	; 0x1d8
  
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002828:	4a5c      	ldr	r2, [pc, #368]	; (800299c <set_default_description+0xba8>)
 800282a:	6013      	str	r3, [r2, #0]
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002832:	4a5a      	ldr	r2, [pc, #360]	; (800299c <set_default_description+0xba8>)
 8002834:	6053      	str	r3, [r2, #4]
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800283c:	4a57      	ldr	r2, [pc, #348]	; (800299c <set_default_description+0xba8>)
 800283e:	6093      	str	r3, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002846:	4b55      	ldr	r3, [pc, #340]	; (800299c <set_default_description+0xba8>)
 8002848:	751a      	strb	r2, [r3, #20]
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8002850:	4b52      	ldr	r3, [pc, #328]	; (800299c <set_default_description+0xba8>)
 8002852:	755a      	strb	r2, [r3, #21]
  
  maxWriteTimeSensor[ism330dhcx_com_id] = 1000 * WRITE_BUFFER_SIZE_ISM330DHCX / (uint32_t)(ISM330DHCX_Init_Param.ODR * 12); 
 8002854:	4b51      	ldr	r3, [pc, #324]	; (800299c <set_default_description+0xba8>)
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800285e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002866:	ee17 2a90 	vmov	r2, s15
 800286a:	4b4d      	ldr	r3, [pc, #308]	; (80029a0 <set_default_description+0xbac>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	4619      	mov	r1, r3
 8002870:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <set_default_description+0xbb0>)
 8002872:	fbb3 f3f2 	udiv	r3, r3, r2
 8002876:	4a4c      	ldr	r2, [pc, #304]	; (80029a8 <set_default_description+0xbb4>)
 8002878:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* LPS22HH */
  lps22hh_com_id = COM_AddSensor();
 800287c:	f7ff f94e 	bl	8001b1c <COM_AddSensor>
 8002880:	4603      	mov	r3, r0
 8002882:	b2da      	uxtb	r2, r3
 8002884:	4b49      	ldr	r3, [pc, #292]	; (80029ac <set_default_description+0xbb8>)
 8002886:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(lps22hh_com_id);
 8002888:	4b48      	ldr	r3, [pc, #288]	; (80029ac <set_default_description+0xbb8>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff f98f 	bl	8001bb0 <COM_GetSensor>
 8002892:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "LPS22HH"); 
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	4945      	ldr	r1, [pc, #276]	; (80029b0 <set_default_description+0xbbc>)
 800289a:	461a      	mov	r2, r3
 800289c:	460b      	mov	r3, r1
 800289e:	cb03      	ldmia	r3!, {r0, r1}
 80028a0:	6010      	str	r0, [r2, #0]
 80028a2:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2206      	movs	r2, #6
 80028a8:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028b0:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 10.0f;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	4a3f      	ldr	r2, [pc, #252]	; (80029b4 <set_default_description+0xbc0>)
 80028b6:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 25.0f;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	4a3f      	ldr	r2, [pc, #252]	; (80029b8 <set_default_description+0xbc4>)
 80028bc:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 50.0f;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	4a3e      	ldr	r2, [pc, #248]	; (80029bc <set_default_description+0xbc8>)
 80028c2:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 75.0f;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4a3e      	ldr	r2, [pc, #248]	; (80029c0 <set_default_description+0xbcc>)
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[5] = 100.0f;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	4a3d      	ldr	r2, [pc, #244]	; (80029c4 <set_default_description+0xbd0>)
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 200.0f;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	4a3d      	ldr	r2, [pc, #244]	; (80029c8 <set_default_description+0xbd4>)
 80028d4:	62da      	str	r2, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = COM_END_OF_LIST_FLOAT; 
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	4a24      	ldr	r2, [pc, #144]	; (800296c <set_default_description+0xb78>)
 80028da:	631a      	str	r2, [r3, #48]	; 0x30

  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2200      	movs	r2, #0
 80028e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 2;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 200.0f;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	4a33      	ldr	r2, [pc, #204]	; (80029c8 <set_default_description+0xbd4>)
 80028fa:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 200;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	22c8      	movs	r2, #200	; 0xc8
 8002916:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 1600;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002928:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_LPS22HH;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002932:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800293c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 8002940:	e044      	b.n	80029cc <set_default_description+0xbd8>
 8002942:	bf00      	nop
 8002944:	41480000 	.word	0x41480000
 8002948:	41d00000 	.word	0x41d00000
 800294c:	42500000 	.word	0x42500000
 8002950:	42d00000 	.word	0x42d00000
 8002954:	43500000 	.word	0x43500000
 8002958:	43d08000 	.word	0x43d08000
 800295c:	44504000 	.word	0x44504000
 8002960:	44d06000 	.word	0x44d06000
 8002964:	45505000 	.word	0x45505000
 8002968:	45d05800 	.word	0x45d05800
 800296c:	bf800000 	.word	0xbf800000
 8002970:	08022368 	.word	0x08022368
 8002974:	3d79db23 	.word	0x3d79db23
 8002978:	080223bc 	.word	0x080223bc
 800297c:	42fa0000 	.word	0x42fa0000
 8002980:	437a0000 	.word	0x437a0000
 8002984:	43fa0000 	.word	0x43fa0000
 8002988:	447a0000 	.word	0x447a0000
 800298c:	44fa0000 	.word	0x44fa0000
 8002990:	457a0000 	.word	0x457a0000
 8002994:	408c0000 	.word	0x408c0000
 8002998:	42fa0000 	.word	0x42fa0000
 800299c:	20015f8c 	.word	0x20015f8c
 80029a0:	20016355 	.word	0x20016355
 80029a4:	00f42400 	.word	0x00f42400
 80029a8:	20016320 	.word	0x20016320
 80029ac:	200163f9 	.word	0x200163f9
 80029b0:	080223c4 	.word	0x080223c4
 80029b4:	41200000 	.word	0x41200000
 80029b8:	41c80000 	.word	0x41c80000
 80029bc:	42480000 	.word	0x42480000
 80029c0:	42960000 	.word	0x42960000
 80029c4:	42c80000 	.word	0x42c80000
 80029c8:	43480000 	.word	0x43480000
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_PRESS; 
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2205      	movs	r2, #5
 80029d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "hPa");
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	335f      	adds	r3, #95	; 0x5f
 80029e8:	4aba      	ldr	r2, [pc, #744]	; (8002cd4 <set_default_description+0xee0>)
 80029ea:	6810      	ldr	r0, [r2, #0]
 80029ec:	6018      	str	r0, [r3, #0]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 1260.0f; 
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	4ab9      	ldr	r2, [pc, #740]	; (8002cd8 <set_default_description+0xee4>)
 80029f2:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4ab9      	ldr	r2, [pc, #740]	; (8002cdc <set_default_description+0xee8>)
 80029f8:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 1260.0f;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	4ab6      	ldr	r2, [pc, #728]	; (8002cd8 <set_default_description+0xee4>)
 80029fe:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0f;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a10:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_TEMP; 
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2204      	movs	r2, #4
 8002a20:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 1;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "Celsius");
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	33b3      	adds	r3, #179	; 0xb3
 8002a30:	49ab      	ldr	r1, [pc, #684]	; (8002ce0 <set_default_description+0xeec>)
 8002a32:	461a      	mov	r2, r3
 8002a34:	460b      	mov	r3, r1
 8002a36:	cb03      	ldmia	r3!, {r0, r1}
 8002a38:	6010      	str	r0, [r2, #0]
 8002a3a:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 85.0f; 
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4aa9      	ldr	r2, [pc, #676]	; (8002ce4 <set_default_description+0xef0>)
 8002a40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = COM_END_OF_LIST_FLOAT;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4aa5      	ldr	r2, [pc, #660]	; (8002cdc <set_default_description+0xee8>)
 8002a48:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 85.0f;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4aa5      	ldr	r2, [pc, #660]	; (8002ce4 <set_default_description+0xef0>)
 8002a50:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 1.0f;   
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a62:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
  
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002a6c:	4a9e      	ldr	r2, [pc, #632]	; (8002ce8 <set_default_description+0xef4>)
 8002a6e:	6013      	str	r3, [r2, #0]
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002a76:	4a9c      	ldr	r2, [pc, #624]	; (8002ce8 <set_default_description+0xef4>)
 8002a78:	6053      	str	r3, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002a80:	4a99      	ldr	r2, [pc, #612]	; (8002ce8 <set_default_description+0xef4>)
 8002a82:	6093      	str	r3, [r2, #8]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002a8a:	4b97      	ldr	r3, [pc, #604]	; (8002ce8 <set_default_description+0xef4>)
 8002a8c:	751a      	strb	r2, [r3, #20]
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;  
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8002a94:	4b94      	ldr	r3, [pc, #592]	; (8002ce8 <set_default_description+0xef4>)
 8002a96:	755a      	strb	r2, [r3, #21]
  
  maxWriteTimeSensor[lps22hh_com_id] = 1000 * WRITE_BUFFER_SIZE_LPS22HH / (uint32_t)(LPS22HH_Init_Param.ODR * 8); 
 8002a98:	4b93      	ldr	r3, [pc, #588]	; (8002ce8 <set_default_description+0xef4>)
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aaa:	ee17 2a90 	vmov	r2, s15
 8002aae:	4b8f      	ldr	r3, [pc, #572]	; (8002cec <set_default_description+0xef8>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4b8e      	ldr	r3, [pc, #568]	; (8002cf0 <set_default_description+0xefc>)
 8002ab6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aba:	4a8e      	ldr	r2, [pc, #568]	; (8002cf4 <set_default_description+0xf00>)
 8002abc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* MP23ABS1 */
  mp23abs1_com_id = COM_AddSensor();
 8002ac0:	f7ff f82c 	bl	8001b1c <COM_AddSensor>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	4b8b      	ldr	r3, [pc, #556]	; (8002cf8 <set_default_description+0xf04>)
 8002aca:	701a      	strb	r2, [r3, #0]
  
   tempSensor = COM_GetSensor(mp23abs1_com_id);
 8002acc:	4b8a      	ldr	r3, [pc, #552]	; (8002cf8 <set_default_description+0xf04>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff f86d 	bl	8001bb0 <COM_GetSensor>
 8002ad6:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "MP23ABS1"); 
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	3301      	adds	r3, #1
 8002adc:	4987      	ldr	r1, [pc, #540]	; (8002cfc <set_default_description+0xf08>)
 8002ade:	461a      	mov	r2, r3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	cb03      	ldmia	r3!, {r0, r1}
 8002ae4:	6010      	str	r0, [r2, #0]
 8002ae6:	6051      	str	r1, [r2, #4]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	7213      	strb	r3, [r2, #8]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2203      	movs	r2, #3
 8002af0:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 192000.0f;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	4a82      	ldr	r2, [pc, #520]	; (8002d00 <set_default_description+0xf0c>)
 8002af6:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4a78      	ldr	r2, [pc, #480]	; (8002cdc <set_default_description+0xee8>)
 8002afc:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 192000.0f;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4a79      	ldr	r2, [pc, #484]	; (8002d00 <set_default_description+0xf0c>)
 8002b1c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b3a:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 4096;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b4c:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_MP23ABS1;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002b56:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b60:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MIC; 
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2207      	movs	r2, #7
 8002b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	335f      	adds	r3, #95	; 0x5f
 8002b80:	4960      	ldr	r1, [pc, #384]	; (8002d04 <set_default_description+0xf10>)
 8002b82:	461a      	mov	r2, r3
 8002b84:	460b      	mov	r3, r1
 8002b86:	cb03      	ldmia	r3!, {r0, r1}
 8002b88:	6010      	str	r0, [r2, #0]
 8002b8a:	6051      	str	r1, [r2, #4]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	7213      	strb	r3, [r2, #8]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 130.0f; 
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4a5d      	ldr	r2, [pc, #372]	; (8002d08 <set_default_description+0xf14>)
 8002b94:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	4a50      	ldr	r2, [pc, #320]	; (8002cdc <set_default_description+0xee8>)
 8002b9a:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 130.0f;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	4a5a      	ldr	r2, [pc, #360]	; (8002d08 <set_default_description+0xf14>)
 8002ba0:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002bb2:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002bbc:	4a53      	ldr	r2, [pc, #332]	; (8002d0c <set_default_description+0xf18>)
 8002bbe:	6013      	str	r3, [r2, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002bc6:	4a51      	ldr	r2, [pc, #324]	; (8002d0c <set_default_description+0xf18>)
 8002bc8:	6053      	str	r3, [r2, #4]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002bd0:	4b4e      	ldr	r3, [pc, #312]	; (8002d0c <set_default_description+0xf18>)
 8002bd2:	751a      	strb	r2, [r3, #20]
    
  maxWriteTimeSensor[mp23abs1_com_id] = 1000 * WRITE_BUFFER_SIZE_MP23ABS1 / (uint32_t)(MP23ABS1_Init_Param.ODR * 2); 
 8002bd4:	4b4d      	ldr	r3, [pc, #308]	; (8002d0c <set_default_description+0xf18>)
 8002bd6:	edd3 7a00 	vldr	s15, [r3]
 8002bda:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be2:	ee17 2a90 	vmov	r2, s15
 8002be6:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <set_default_description+0xf04>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
 8002bec:	4b48      	ldr	r3, [pc, #288]	; (8002d10 <set_default_description+0xf1c>)
 8002bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bf2:	4a40      	ldr	r2, [pc, #256]	; (8002cf4 <set_default_description+0xf00>)
 8002bf4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* STTS751 */
  stts751_com_id = COM_AddSensor();
 8002bf8:	f7fe ff90 	bl	8001b1c <COM_AddSensor>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	4b44      	ldr	r3, [pc, #272]	; (8002d14 <set_default_description+0xf20>)
 8002c02:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(stts751_com_id);
 8002c04:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <set_default_description+0xf20>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe ffd1 	bl	8001bb0 <COM_GetSensor>
 8002c0e:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "STTS751"); 
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	4940      	ldr	r1, [pc, #256]	; (8002d18 <set_default_description+0xf24>)
 8002c16:	461a      	mov	r2, r3
 8002c18:	460b      	mov	r3, r1
 8002c1a:	cb03      	ldmia	r3!, {r0, r1}
 8002c1c:	6010      	str	r0, [r2, #0]
 8002c1e:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;  
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2206      	movs	r2, #6
 8002c24:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c2c:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 2.0f; 
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c34:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 4.0f; 
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002c3c:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = COM_END_OF_LIST_FLOAT;  
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <set_default_description+0xee8>)
 8002c42:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 4.0f;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002c64:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 20;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2214      	movs	r2, #20
 8002c80:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 16;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2210      	movs	r2, #16
 8002c90:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_STTS751;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2264      	movs	r2, #100	; 0x64
 8002c98:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca2:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_TEMP; 
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	335f      	adds	r3, #95	; 0x5f
 8002cc2:	4907      	ldr	r1, [pc, #28]	; (8002ce0 <set_default_description+0xeec>)
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	cb03      	ldmia	r3!, {r0, r1}
 8002cca:	6010      	str	r0, [r2, #0]
 8002ccc:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 100.0f; 
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	e024      	b.n	8002d1c <set_default_description+0xf28>
 8002cd2:	bf00      	nop
 8002cd4:	080223cc 	.word	0x080223cc
 8002cd8:	449d8000 	.word	0x449d8000
 8002cdc:	bf800000 	.word	0xbf800000
 8002ce0:	08022374 	.word	0x08022374
 8002ce4:	42aa0000 	.word	0x42aa0000
 8002ce8:	20015fa8 	.word	0x20015fa8
 8002cec:	200163f9 	.word	0x200163f9
 8002cf0:	007a1200 	.word	0x007a1200
 8002cf4:	20016320 	.word	0x20016320
 8002cf8:	20016314 	.word	0x20016314
 8002cfc:	080223d0 	.word	0x080223d0
 8002d00:	483b8000 	.word	0x483b8000
 8002d04:	080223a4 	.word	0x080223a4
 8002d08:	43020000 	.word	0x43020000
 8002d0c:	20016544 	.word	0x20016544
 8002d10:	03dfd240 	.word	0x03dfd240
 8002d14:	200163f8 	.word	0x200163f8
 8002d18:	080223dc 	.word	0x080223dc
 8002d1c:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <set_default_description+0xf9c>)
 8002d1e:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	4a1c      	ldr	r2, [pc, #112]	; (8002d94 <set_default_description+0xfa0>)
 8002d24:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 100.0f;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	4a19      	ldr	r2, [pc, #100]	; (8002d90 <set_default_description+0xf9c>)
 8002d2a:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d3c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002d46:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <set_default_description+0xfa4>)
 8002d48:	6013      	str	r3, [r2, #0]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002d50:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <set_default_description+0xfa4>)
 8002d52:	6053      	str	r3, [r2, #4]
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <set_default_description+0xfa4>)
 8002d5c:	751a      	strb	r2, [r3, #20]

  maxWriteTimeSensor[stts751_com_id] = 1000 * WRITE_BUFFER_SIZE_STTS751 / (uint32_t)(STTS751_Init_Param.ODR * 4); 
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <set_default_description+0xfa4>)
 8002d60:	edd3 7a00 	vldr	s15, [r3]
 8002d64:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d70:	ee17 2a90 	vmov	r2, s15
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <set_default_description+0xfa8>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <set_default_description+0xfac>)
 8002d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d80:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <set_default_description+0xfb0>)
 8002d82:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	42c80000 	.word	0x42c80000
 8002d94:	bf800000 	.word	0xbf800000
 8002d98:	200189f0 	.word	0x200189f0
 8002d9c:	200163f8 	.word	0x200163f8
 8002da0:	000186a0 	.word	0x000186a0
 8002da4:	20016320 	.word	0x20016320

08002da8 <update_sensorStatus>:

void update_sensorStatus(COM_SensorStatus_t * oldSensorStatus, COM_SensorStatus_t * newSensorStatus, uint8_t sID)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	4613      	mov	r3, r2
 8002db4:	71fb      	strb	r3, [r7, #7]
  /* Check differencies between oldSensorStatus and newSensorStatus, act properly*/
  /* ODR */
  if(oldSensorStatus->ODR != newSensorStatus->ODR)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	ed93 7a00 	vldr	s14, [r3]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	eeb4 7a67 	vcmp.f32	s14, s15
 8002dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dca:	d00f      	beq.n	8002dec <update_sensorStatus+0x44>
  {
    if(COM_IsOdrLegal(newSensorStatus->ODR, sID))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	edd3 7a00 	vldr	s15, [r3]
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dda:	f7fe ff5b 	bl	8001c94 <COM_IsOdrLegal>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <update_sensorStatus+0x44>
    {
      oldSensorStatus->ODR = newSensorStatus->ODR; /* Todo Setters and getters */
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* isActive */
  if(oldSensorStatus->isActive != newSensorStatus->isActive)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	7b9a      	ldrb	r2, [r3, #14]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	7b9b      	ldrb	r3, [r3, #14]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d003      	beq.n	8002e00 <update_sensorStatus+0x58>
  {
    oldSensorStatus->isActive = newSensorStatus->isActive;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	7b9a      	ldrb	r2, [r3, #14]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	739a      	strb	r2, [r3, #14]
  }
  
  /* subsensor: FS, is Active*/
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e054      	b.n	8002eb0 <update_sensorStatus+0x108>
  {
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 8002e06:	68f9      	ldr	r1, [r7, #12]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	331c      	adds	r3, #28
 8002e16:	ed93 7a00 	vldr	s14, [r3]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	331c      	adds	r3, #28
 8002e2a:	edd3 7a00 	vldr	s15, [r3]
 8002e2e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e36:	d011      	beq.n	8002e5c <update_sensorStatus+0xb4>
    {
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	331c      	adds	r3, #28
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4403      	add	r3, r0
 8002e58:	331c      	adds	r3, #28
 8002e5a:	6019      	str	r1, [r3, #0]
    }
    
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	3324      	adds	r3, #36	; 0x24
 8002e6c:	7819      	ldrb	r1, [r3, #0]
 8002e6e:	68b8      	ldr	r0, [r7, #8]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4403      	add	r3, r0
 8002e7c:	3324      	adds	r3, #36	; 0x24
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4299      	cmp	r1, r3
 8002e82:	d012      	beq.n	8002eaa <update_sensorStatus+0x102>
    {
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	3324      	adds	r3, #36	; 0x24
 8002e94:	7818      	ldrb	r0, [r3, #0]
 8002e96:	68f9      	ldr	r1, [r7, #12]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3324      	adds	r3, #36	; 0x24
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3301      	adds	r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fed8 	bl	8001c68 <COM_GetSubSensorNumber>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	dba1      	blt.n	8002e06 <update_sensorStatus+0x5e>
    }
  }
  
  if (sID == iis3dwb_com_id)
 8002ec2:	4b39      	ldr	r3, [pc, #228]	; (8002fa8 <update_sensorStatus+0x200>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	79fa      	ldrb	r2, [r7, #7]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d10e      	bne.n	8002eea <update_sensorStatus+0x142>
  {
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ed2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002fac <update_sensorStatus+0x204>
 8002ed6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002eda:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	edc3 7a08 	vstr	s15, [r3, #32]
 8002ee8:	e043      	b.n	8002f72 <update_sensorStatus+0x1ca>
  }
  else if (sID == iis2dh_com_id)
 8002eea:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <update_sensorStatus+0x208>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	79fa      	ldrb	r2, [r7, #7]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d11d      	bne.n	8002f30 <update_sensorStatus+0x188>
  {    
    if (oldSensorStatus->subSensorStatus[0].FS == 16.0f)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002efa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002efe:	eef4 7a47 	vcmp.f32	s15, s14
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	d104      	bne.n	8002f12 <update_sensorStatus+0x16a>
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.75f;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002f0e:	621a      	str	r2, [r3, #32]
 8002f10:	e02f      	b.n	8002f72 <update_sensorStatus+0x1ca>
    }
    else
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.0625f *  oldSensorStatus->subSensorStatus[0].FS/2;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f18:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002fb4 <update_sensorStatus+0x20c>
 8002f1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	edc3 7a08 	vstr	s15, [r3, #32]
 8002f2e:	e020      	b.n	8002f72 <update_sensorStatus+0x1ca>
    }
  }
  else if (sID == ism330dhcx_com_id)
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <update_sensorStatus+0x210>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	79fa      	ldrb	r2, [r7, #7]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d11b      	bne.n	8002f72 <update_sensorStatus+0x1ca>
  {        
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f40:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002fac <update_sensorStatus+0x204>
 8002f44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f48:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	edc3 7a08 	vstr	s15, [r3, #32]
    oldSensorStatus->subSensorStatus[1].sensitivity = 4.375f * oldSensorStatus->subSensorStatus[1].FS/125.0f;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002f5c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002fbc <update_sensorStatus+0x214>
 8002f60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f64:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002fc0 <update_sensorStatus+0x218>
 8002f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  }
  
  /* CHANNEL NUMBER */
  if(oldSensorStatus->comChannelNumber != newSensorStatus->comChannelNumber)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d004      	beq.n	8002f8c <update_sensorStatus+0x1e4>
  {
    oldSensorStatus->comChannelNumber = newSensorStatus->comChannelNumber; /* Todo Setters and getters */         
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	831a      	strh	r2, [r3, #24]
  }  
  
   /* CHANNEL NUMBER */
  if(oldSensorStatus->samplesPerTimestamp != newSensorStatus->samplesPerTimestamp)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	899a      	ldrh	r2, [r3, #12]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	899b      	ldrh	r3, [r3, #12]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d003      	beq.n	8002fa0 <update_sensorStatus+0x1f8>
  {
    oldSensorStatus->samplesPerTimestamp = newSensorStatus->samplesPerTimestamp; /* Todo Setters and getters */         
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	899a      	ldrh	r2, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	819a      	strh	r2, [r3, #12]
  }  
}
 8002fa0:	bf00      	nop
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20016040 	.word	0x20016040
 8002fac:	3d79db23 	.word	0x3d79db23
 8002fb0:	200163f0 	.word	0x200163f0
 8002fb4:	3d800000 	.word	0x3d800000
 8002fb8:	20016355 	.word	0x20016355
 8002fbc:	408c0000 	.word	0x408c0000
 8002fc0:	42fa0000 	.word	0x42fa0000

08002fc4 <update_sensors_config>:

void update_sensors_config(void)
{  
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;  
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);  
 8002fca:	4b6f      	ldr	r3, [pc, #444]	; (8003188 <update_sensors_config+0x1c4>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fdee 	bl	8001bb0 <COM_GetSensor>
 8002fd4:	6078      	str	r0, [r7, #4]
  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002fdc:	4a6b      	ldr	r2, [pc, #428]	; (800318c <update_sensors_config+0x1c8>)
 8002fde:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002fe6:	4a69      	ldr	r2, [pc, #420]	; (800318c <update_sensors_config+0x1c8>)
 8002fe8:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002ff0:	4b66      	ldr	r3, [pc, #408]	; (800318c <update_sensors_config+0x1c8>)
 8002ff2:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(hts221_com_id);
 8002ff4:	4b66      	ldr	r3, [pc, #408]	; (8003190 <update_sensors_config+0x1cc>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fe fdd9 	bl	8001bb0 <COM_GetSensor>
 8002ffe:	6078      	str	r0, [r7, #4]
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003006:	4a63      	ldr	r2, [pc, #396]	; (8003194 <update_sensors_config+0x1d0>)
 8003008:	6013      	str	r3, [r2, #0]
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003010:	4a60      	ldr	r2, [pc, #384]	; (8003194 <update_sensors_config+0x1d0>)
 8003012:	6053      	str	r3, [r2, #4]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800301a:	4a5e      	ldr	r2, [pc, #376]	; (8003194 <update_sensors_config+0x1d0>)
 800301c:	6093      	str	r3, [r2, #8]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003024:	4b5b      	ldr	r3, [pc, #364]	; (8003194 <update_sensors_config+0x1d0>)
 8003026:	751a      	strb	r2, [r3, #20]
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 800302e:	4b59      	ldr	r3, [pc, #356]	; (8003194 <update_sensors_config+0x1d0>)
 8003030:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(iis2dh_com_id);
 8003032:	4b59      	ldr	r3, [pc, #356]	; (8003198 <update_sensors_config+0x1d4>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fdba 	bl	8001bb0 <COM_GetSensor>
 800303c:	6078      	str	r0, [r7, #4]
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003044:	4a55      	ldr	r2, [pc, #340]	; (800319c <update_sensors_config+0x1d8>)
 8003046:	6013      	str	r3, [r2, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800304e:	4a53      	ldr	r2, [pc, #332]	; (800319c <update_sensors_config+0x1d8>)
 8003050:	6053      	str	r3, [r2, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003058:	4b50      	ldr	r3, [pc, #320]	; (800319c <update_sensors_config+0x1d8>)
 800305a:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 800305c:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <update_sensors_config+0x1dc>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe fda5 	bl	8001bb0 <COM_GetSensor>
 8003066:	6078      	str	r0, [r7, #4]
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800306e:	4a4d      	ldr	r2, [pc, #308]	; (80031a4 <update_sensors_config+0x1e0>)
 8003070:	6013      	str	r3, [r2, #0]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003078:	4a4a      	ldr	r2, [pc, #296]	; (80031a4 <update_sensors_config+0x1e0>)
 800307a:	6053      	str	r3, [r2, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003082:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <update_sensors_config+0x1e0>)
 8003084:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 8003086:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <update_sensors_config+0x1e4>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fd90 	bl	8001bb0 <COM_GetSensor>
 8003090:	6078      	str	r0, [r7, #4]
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003098:	4a44      	ldr	r2, [pc, #272]	; (80031ac <update_sensors_config+0x1e8>)
 800309a:	6013      	str	r3, [r2, #0]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80030a2:	4a42      	ldr	r2, [pc, #264]	; (80031ac <update_sensors_config+0x1e8>)
 80030a4:	6053      	str	r3, [r2, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80030ac:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <update_sensors_config+0x1e8>)
 80030ae:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(ism330dhcx_com_id);
 80030b0:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <update_sensors_config+0x1ec>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe fd7b 	bl	8001bb0 <COM_GetSensor>
 80030ba:	6078      	str	r0, [r7, #4]
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80030c2:	4a3c      	ldr	r2, [pc, #240]	; (80031b4 <update_sensors_config+0x1f0>)
 80030c4:	6013      	str	r3, [r2, #0]
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80030cc:	4a39      	ldr	r2, [pc, #228]	; (80031b4 <update_sensors_config+0x1f0>)
 80030ce:	6053      	str	r3, [r2, #4]
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80030d6:	4a37      	ldr	r2, [pc, #220]	; (80031b4 <update_sensors_config+0x1f0>)
 80030d8:	6093      	str	r3, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80030e0:	4b34      	ldr	r3, [pc, #208]	; (80031b4 <update_sensors_config+0x1f0>)
 80030e2:	751a      	strb	r2, [r3, #20]
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80030ea:	4b32      	ldr	r3, [pc, #200]	; (80031b4 <update_sensors_config+0x1f0>)
 80030ec:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(lps22hh_com_id);
 80030ee:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <update_sensors_config+0x1f4>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe fd5c 	bl	8001bb0 <COM_GetSensor>
 80030f8:	6078      	str	r0, [r7, #4]
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003100:	4a2e      	ldr	r2, [pc, #184]	; (80031bc <update_sensors_config+0x1f8>)
 8003102:	6013      	str	r3, [r2, #0]
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800310a:	4a2c      	ldr	r2, [pc, #176]	; (80031bc <update_sensors_config+0x1f8>)
 800310c:	6053      	str	r3, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8003114:	4a29      	ldr	r2, [pc, #164]	; (80031bc <update_sensors_config+0x1f8>)
 8003116:	6093      	str	r3, [r2, #8]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800311e:	4b27      	ldr	r3, [pc, #156]	; (80031bc <update_sensors_config+0x1f8>)
 8003120:	751a      	strb	r2, [r3, #20]
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive; 
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8003128:	4b24      	ldr	r3, [pc, #144]	; (80031bc <update_sensors_config+0x1f8>)
 800312a:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(mp23abs1_com_id);
 800312c:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <update_sensors_config+0x1fc>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe fd3d 	bl	8001bb0 <COM_GetSensor>
 8003136:	6078      	str	r0, [r7, #4]
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <update_sensors_config+0x200>)
 8003140:	6013      	str	r3, [r2, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003148:	4a1e      	ldr	r2, [pc, #120]	; (80031c4 <update_sensors_config+0x200>)
 800314a:	6053      	str	r3, [r2, #4]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <update_sensors_config+0x200>)
 8003154:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(stts751_com_id);
 8003156:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <update_sensors_config+0x204>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fd28 	bl	8001bb0 <COM_GetSensor>
 8003160:	6078      	str	r0, [r7, #4]
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003168:	4a18      	ldr	r2, [pc, #96]	; (80031cc <update_sensors_config+0x208>)
 800316a:	6013      	str	r3, [r2, #0]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003172:	4a16      	ldr	r2, [pc, #88]	; (80031cc <update_sensors_config+0x208>)
 8003174:	6053      	str	r3, [r2, #4]
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800317c:	4b13      	ldr	r3, [pc, #76]	; (80031cc <update_sensors_config+0x208>)
 800317e:	751a      	strb	r2, [r3, #20]
  
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20016040 	.word	0x20016040
 800318c:	2000ff08 	.word	0x2000ff08
 8003190:	20016354 	.word	0x20016354
 8003194:	2000fe78 	.word	0x2000fe78
 8003198:	200163f0 	.word	0x200163f0
 800319c:	2000fea4 	.word	0x2000fea4
 80031a0:	20016315 	.word	0x20016315
 80031a4:	2000fedc 	.word	0x2000fedc
 80031a8:	200163e8 	.word	0x200163e8
 80031ac:	20014e58 	.word	0x20014e58
 80031b0:	20016355 	.word	0x20016355
 80031b4:	20015f8c 	.word	0x20015f8c
 80031b8:	200163f9 	.word	0x200163f9
 80031bc:	20015fa8 	.word	0x20015fa8
 80031c0:	20016314 	.word	0x20016314
 80031c4:	20016544 	.word	0x20016544
 80031c8:	200163f8 	.word	0x200163f8
 80031cc:	200189f0 	.word	0x200189f0

080031d0 <HTS221_Set_State>:
  
  osSemaphoreRelease(hts221_data_ready_sem_id);    
}

void HTS221_Set_State(SM_Sensor_State_t newState)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  HTS221_Sensor_State = newState;
 80031da:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HTS221_Set_State+0x1c>)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	7013      	strb	r3, [r2, #0]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	20000001 	.word	0x20000001

080031f0 <HTS221_Start>:
  HTS221_Init_Param.FS[0] = newFS1;
  HTS221_Init_Param.FS[0] = newFS2;
}

void HTS221_Start(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80031f4:	2003      	movs	r0, #3
 80031f6:	f7ff ffeb 	bl	80031d0 <HTS221_Set_State>
  osThreadResume(HTS221_Thread_Id);
 80031fa:	4b03      	ldr	r3, [pc, #12]	; (8003208 <HTS221_Start+0x18>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f014 fab4 	bl	801776c <osThreadResume>
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}
 8003208:	2000fe98 	.word	0x2000fe98

0800320c <HTS221_Stop>:

void HTS221_Stop(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003210:	2001      	movs	r0, #1
 8003212:	f7ff ffdd 	bl	80031d0 <HTS221_Set_State>
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <IIS2DH_Set_State>:
{
  osSemaphoreRelease( iis2dh_DreadySem_id);    
}

void IIS2DH_Set_State(SM_Sensor_State_t newState)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  IIS2DH_Sensor_State = newState;
 8003226:	4a04      	ldr	r2, [pc, #16]	; (8003238 <IIS2DH_Set_State+0x1c>)
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	7013      	strb	r3, [r2, #0]
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	20000002 	.word	0x20000002

0800323c <IIS2DH_Start>:
  IIS2DH_Init_Param.FS[0] = newFS1;
  IIS2DH_Init_Param.FS[0] = newFS2;
}

void IIS2DH_Start(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003240:	2003      	movs	r0, #3
 8003242:	f7ff ffeb 	bl	800321c <IIS2DH_Set_State>
  osThreadResume(IIS2DH_Thread_Id);
 8003246:	4b03      	ldr	r3, [pc, #12]	; (8003254 <IIS2DH_Start+0x18>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f014 fa8e 	bl	801776c <osThreadResume>
}
 8003250:	bf00      	nop
 8003252:	bd80      	pop	{r7, pc}
 8003254:	2000fec0 	.word	0x2000fec0

08003258 <IIS2DH_Stop>:

void IIS2DH_Stop(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 800325c:	2001      	movs	r0, #1
 800325e:	f7ff ffdd 	bl	800321c <IIS2DH_Set_State>
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <IIS2MDC_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(iis2mdc_data_ready_sem_id);    
}

void IIS2MDC_Set_State(SM_Sensor_State_t newState)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  IIS2MDC_Sensor_State = newState;
 8003272:	4a04      	ldr	r2, [pc, #16]	; (8003284 <IIS2MDC_Set_State+0x1c>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	7013      	strb	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	20000003 	.word	0x20000003

08003288 <IIS2MDC_Start>:
  IIS2MDC_Init_Param.FS[0] = newFS1;
  IIS2MDC_Init_Param.FS[0] = newFS2;
}

void IIS2MDC_Start(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_INITIALIZING);
 800328c:	2003      	movs	r0, #3
 800328e:	f7ff ffeb 	bl	8003268 <IIS2MDC_Set_State>
  osThreadResume(IIS2MDC_Thread_Id);
 8003292:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <IIS2MDC_Start+0x18>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f014 fa68 	bl	801776c <osThreadResume>
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	2000fef4 	.word	0x2000fef4

080032a4 <IIS2MDC_Stop>:

void IIS2MDC_Stop(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_SUSPENDING);
 80032a8:	2001      	movs	r0, #1
 80032aa:	f7ff ffdd 	bl	8003268 <IIS2MDC_Set_State>
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <IIS3DWB_Peripheral_Init>:
* @brief IIS3DWB GPIO Initialization Function
* @param None
* @retval None
*/
void IIS3DWB_Peripheral_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ba:	f107 0314 	add.w	r3, r7, #20
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
//  __HAL_RCC_GPIOE_CLK_ENABLE();
//  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();		//SPI2_CS
 80032ca:	4b3a      	ldr	r3, [pc, #232]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 80032cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ce:	4a39      	ldr	r2, [pc, #228]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 80032d0:	f043 0302 	orr.w	r3, r3, #2
 80032d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032d6:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 80032d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();		//SPI2_MOSI,SPI2_INT
 80032e2:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e6:	4a33      	ldr	r2, [pc, #204]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ee:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();		//SPI2_CLK,SPI2_MISO
 80032fa:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fe:	4a2d      	ldr	r2, [pc, #180]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 8003300:	f043 0308 	orr.w	r3, r3, #8
 8003304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();		//SEL_3_4
 8003312:	4b28      	ldr	r3, [pc, #160]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 8003314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003316:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 8003318:	f043 0320 	orr.w	r3, r3, #32
 800331c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800331e:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 8003320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();		//SEL_1_2
 800332a:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 8003330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003336:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <IIS3DWB_Peripheral_Init+0x100>)
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);
 8003342:	2201      	movs	r2, #1
 8003344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003348:	481b      	ldr	r0, [pc, #108]	; (80033b8 <IIS3DWB_Peripheral_Init+0x104>)
 800334a:	f005 ff97 	bl	800927c <HAL_GPIO_WritePin>
  
  //Configure GPIO pin Output Level of 1_2_SEL and 3_4_SEL
  HAL_GPIO_WritePin(IIS3DWB_1_2_SEL_GPIO_Port, IIS3DWB_1_2_SEL_Pin, GPIO_PIN_RESET);
 800334e:	2200      	movs	r2, #0
 8003350:	2101      	movs	r1, #1
 8003352:	481a      	ldr	r0, [pc, #104]	; (80033bc <IIS3DWB_Peripheral_Init+0x108>)
 8003354:	f005 ff92 	bl	800927c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IIS3DWB_3_4_SEL_GPIO_Port, IIS3DWB_3_4_SEL_Pin, GPIO_PIN_SET);
 8003358:	2201      	movs	r2, #1
 800335a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800335e:	4818      	ldr	r0, [pc, #96]	; (80033c0 <IIS3DWB_Peripheral_Init+0x10c>)
 8003360:	f005 ff8c 	bl	800927c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IIS3DWB_SPI_CS_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 8003364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336a:	2301      	movs	r3, #1
 800336c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003372:	2302      	movs	r3, #2
 8003374:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4619      	mov	r1, r3
 800337c:	480e      	ldr	r0, [pc, #56]	; (80033b8 <IIS3DWB_Peripheral_Init+0x104>)
 800337e:	f005 fdd3 	bl	8008f28 <HAL_GPIO_Init>
  
  /*Configure GPIO pins : STTS751_INT_Pin IIS3DWB_INT1_Pin */
  GPIO_InitStruct.Pin =  IIS3DWB_INT1_Pin ;
 8003382:	2320      	movs	r3, #32
 8003384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003386:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <IIS3DWB_Peripheral_Init+0x110>)
 8003388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);  
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	4619      	mov	r1, r3
 8003394:	480c      	ldr	r0, [pc, #48]	; (80033c8 <IIS3DWB_Peripheral_Init+0x114>)
 8003396:	f005 fdc7 	bl	8008f28 <HAL_GPIO_Init>
  
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800339a:	2200      	movs	r2, #0
 800339c:	2105      	movs	r1, #5
 800339e:	2017      	movs	r0, #23
 80033a0:	f005 fb0b 	bl	80089ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80033a4:	2017      	movs	r0, #23
 80033a6:	f005 fb24 	bl	80089f2 <HAL_NVIC_EnableIRQ>
//  HAL_EXTI_GetHandle(&iis3dwb_exti, EXTI_LINE_5);
//  HAL_EXTI_RegisterCallback(&iis3dwb_exti,  HAL_EXTI_COMMON_CB_ID, IIS3DWB_Int_Callback);
  
}
 80033aa:	bf00      	nop
 80033ac:	3728      	adds	r7, #40	; 0x28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	48000400 	.word	0x48000400
 80033bc:	48001800 	.word	0x48001800
 80033c0:	48001400 	.word	0x48001400
 80033c4:	10110000 	.word	0x10110000
 80033c8:	48001000 	.word	0x48001000

080033cc <IIS3DWB_OS_Init>:
* @brief IIS3DWB Threads Creation
* @param None
* @retval None
*/
void IIS3DWB_OS_Init(void)
{  
 80033cc:	b5b0      	push	{r4, r5, r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
  /* Data read complete semaphore initialization */  
  iis3dwb_data_read_cmplt_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_read_cmplt_sem), 1);
 80033d2:	2101      	movs	r1, #1
 80033d4:	481f      	ldr	r0, [pc, #124]	; (8003454 <IIS3DWB_OS_Init+0x88>)
 80033d6:	f013 ff43 	bl	8017260 <osSemaphoreCreate>
 80033da:	4603      	mov	r3, r0
 80033dc:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <IIS3DWB_OS_Init+0x8c>)
 80033de:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_read_cmplt_sem_id, "iis3dwb_data_read_cmplt_sem_id" );
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <IIS3DWB_OS_Init+0x8c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	491d      	ldr	r1, [pc, #116]	; (800345c <IIS3DWB_OS_Init+0x90>)
 80033e6:	4618      	mov	r0, r3
 80033e8:	f015 f948 	bl	801867c <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_read_cmplt_sem_id,osWaitForever);
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <IIS3DWB_OS_Init+0x8c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f04f 31ff 	mov.w	r1, #4294967295
 80033f4:	4618      	mov	r0, r3
 80033f6:	f013 ff57 	bl	80172a8 <osSemaphoreWait>
  
  /* Data ready interrupt semaphore initialization */  
  iis3dwb_data_ready_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_ready_sem), 1);
 80033fa:	2101      	movs	r1, #1
 80033fc:	4818      	ldr	r0, [pc, #96]	; (8003460 <IIS3DWB_OS_Init+0x94>)
 80033fe:	f013 ff2f 	bl	8017260 <osSemaphoreCreate>
 8003402:	4603      	mov	r3, r0
 8003404:	4a17      	ldr	r2, [pc, #92]	; (8003464 <IIS3DWB_OS_Init+0x98>)
 8003406:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_ready_sem_id, "iis3dwb_data_ready_sem_id" );
 8003408:	4b16      	ldr	r3, [pc, #88]	; (8003464 <IIS3DWB_OS_Init+0x98>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4916      	ldr	r1, [pc, #88]	; (8003468 <IIS3DWB_OS_Init+0x9c>)
 800340e:	4618      	mov	r0, r3
 8003410:	f015 f934 	bl	801867c <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <IIS3DWB_OS_Init+0x98>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f04f 31ff 	mov.w	r1, #4294967295
 800341c:	4618      	mov	r0, r3
 800341e:	f013 ff43 	bl	80172a8 <osSemaphoreWait>
  

  /* Thread definition: read data */  
  osThreadDef(IIS3DWB_Acquisition_Thread, IIS3DWB_Thread, IIS3DWB_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);  
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <IIS3DWB_OS_Init+0xa0>)
 8003424:	1d3c      	adds	r4, r7, #4
 8003426:	461d      	mov	r5, r3
 8003428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800342a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  IIS3DWB_Thread_Id = osThreadCreate(osThread(IIS3DWB_Acquisition_Thread), NULL); 
 8003430:	1d3b      	adds	r3, r7, #4
 8003432:	2100      	movs	r1, #0
 8003434:	4618      	mov	r0, r3
 8003436:	f013 feec 	bl	8017212 <osThreadCreate>
 800343a:	4603      	mov	r3, r0
 800343c:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <IIS3DWB_OS_Init+0xa4>)
 800343e:	6013      	str	r3, [r2, #0]
  osThreadSuspend(IIS3DWB_Thread_Id);
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <IIS3DWB_OS_Init+0xa4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f014 f984 	bl	8017752 <osThreadSuspend>
}
 800344a:	bf00      	nop
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bdb0      	pop	{r4, r5, r7, pc}
 8003452:	bf00      	nop
 8003454:	0802278c 	.word	0x0802278c
 8003458:	200002dc 	.word	0x200002dc
 800345c:	08022400 	.word	0x08022400
 8003460:	08022788 	.word	0x08022788
 8003464:	200002d8 	.word	0x200002d8
 8003468:	08022420 	.word	0x08022420
 800346c:	0802243c 	.word	0x0802243c
 8003470:	2000ff04 	.word	0x2000ff04

08003474 <IIS3DWB_Thread>:


static void IIS3DWB_Thread(void const *argument)
{
 8003474:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003478:	b088      	sub	sp, #32
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  (void) argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_IIS3DWB_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_IIS3DWB_DEBUG_PIN );
 800347e:	2101      	movs	r1, #1
 8003480:	2000      	movs	r0, #0
 8003482:	f015 fdf7 	bl	8019074 <vTaskSetApplicationTaskTag>
#endif
  
  uint8_t reg0;
  uint8_t reg1;
  
  volatile uint16_t fifo_level = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	823b      	strh	r3, [r7, #16]
  
  for (;;)
  {
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 800348a:	4bae      	ldr	r3, [pc, #696]	; (8003744 <IIS3DWB_Thread+0x2d0>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b03      	cmp	r3, #3
 8003490:	f040 8094 	bne.w	80035bc <IIS3DWB_Thread+0x148>
    {  
      ts_iis3dwb = 0;
 8003494:	49ac      	ldr	r1, [pc, #688]	; (8003748 <IIS3DWB_Thread+0x2d4>)
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	e9c1 2300 	strd	r2, r3, [r1]
      tim_value_old = 0;
 80034a2:	4baa      	ldr	r3, [pc, #680]	; (800374c <IIS3DWB_Thread+0x2d8>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
      
      iis3dwb_device_id_get( &iis3dwb_ctx_instance, (uint8_t *)&reg0);
 80034a8:	f107 0313 	add.w	r3, r7, #19
 80034ac:	4619      	mov	r1, r3
 80034ae:	48a8      	ldr	r0, [pc, #672]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 80034b0:	f002 fd11 	bl	8005ed6 <iis3dwb_device_id_get>
      iis3dwb_reset_set(&iis3dwb_ctx_instance, 1);
 80034b4:	2101      	movs	r1, #1
 80034b6:	48a6      	ldr	r0, [pc, #664]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 80034b8:	f002 fd1e 	bl	8005ef8 <iis3dwb_reset_set>
      iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 80034bc:	f107 0213 	add.w	r2, r7, #19
 80034c0:	2301      	movs	r3, #1
 80034c2:	2110      	movs	r1, #16
 80034c4:	48a2      	ldr	r0, [pc, #648]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 80034c6:	f002 fc8a 	bl	8005dde <iis3dwb_read_reg>
      reg0 |= 0xA0;
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	74fb      	strb	r3, [r7, #19]
      iis3dwb_write_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 80034d4:	f107 0213 	add.w	r2, r7, #19
 80034d8:	2301      	movs	r3, #1
 80034da:	2110      	movs	r1, #16
 80034dc:	489c      	ldr	r0, [pc, #624]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 80034de:	f002 fc96 	bl	8005e0e <iis3dwb_write_reg>
      /*Set fifo in continuous / stream mode*/
      iis3dwb_i2c_interface_set(&iis3dwb_ctx_instance, IIS3DWB_I2C_DISABLE); 
 80034e2:	2101      	movs	r1, #1
 80034e4:	489a      	ldr	r0, [pc, #616]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 80034e6:	f002 fd85 	bl	8005ff4 <iis3dwb_i2c_interface_set>
      iis3dwb_fifo_mode_set(&iis3dwb_ctx_instance, IIS3DWB_STREAM_MODE); 
 80034ea:	2106      	movs	r1, #6
 80034ec:	4898      	ldr	r0, [pc, #608]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 80034ee:	f002 fe1f 	bl	8006130 <iis3dwb_fifo_mode_set>
      /*Set watermark*/
      iis3dwb_fifo_watermark_set(&iis3dwb_ctx_instance, IIS3DWB_WTM_LEVEL);
 80034f2:	2180      	movs	r1, #128	; 0x80
 80034f4:	4896      	ldr	r0, [pc, #600]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 80034f6:	f002 fdbf 	bl	8006078 <iis3dwb_fifo_watermark_set>
      /*Data Ready pulse mode*/
      iis3dwb_data_ready_mode_set(&iis3dwb_ctx_instance, IIS3DWB_DRDY_PULSED);
 80034fa:	2101      	movs	r1, #1
 80034fc:	4894      	ldr	r0, [pc, #592]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 80034fe:	f002 fcc4 	bl	8005e8a <iis3dwb_data_ready_mode_set>
      /*Set full scale*/
      if(IIS3DWB_Init_Param.FS[0] < 3.0f)
 8003502:	4b94      	ldr	r3, [pc, #592]	; (8003754 <IIS3DWB_Thread+0x2e0>)
 8003504:	edd3 7a01 	vldr	s15, [r3, #4]
 8003508:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800350c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003514:	d504      	bpl.n	8003520 <IIS3DWB_Thread+0xac>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_2g);
 8003516:	2100      	movs	r1, #0
 8003518:	488d      	ldr	r0, [pc, #564]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 800351a:	f002 fc90 	bl	8005e3e <iis3dwb_xl_full_scale_set>
 800351e:	e02b      	b.n	8003578 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 5.0f)
 8003520:	4b8c      	ldr	r3, [pc, #560]	; (8003754 <IIS3DWB_Thread+0x2e0>)
 8003522:	edd3 7a01 	vldr	s15, [r3, #4]
 8003526:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800352a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800352e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003532:	d504      	bpl.n	800353e <IIS3DWB_Thread+0xca>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_4g);
 8003534:	2102      	movs	r1, #2
 8003536:	4886      	ldr	r0, [pc, #536]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 8003538:	f002 fc81 	bl	8005e3e <iis3dwb_xl_full_scale_set>
 800353c:	e01c      	b.n	8003578 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 9.0f)
 800353e:	4b85      	ldr	r3, [pc, #532]	; (8003754 <IIS3DWB_Thread+0x2e0>)
 8003540:	edd3 7a01 	vldr	s15, [r3, #4]
 8003544:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800354c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003550:	d504      	bpl.n	800355c <IIS3DWB_Thread+0xe8>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_8g);
 8003552:	2103      	movs	r1, #3
 8003554:	487e      	ldr	r0, [pc, #504]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 8003556:	f002 fc72 	bl	8005e3e <iis3dwb_xl_full_scale_set>
 800355a:	e00d      	b.n	8003578 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 17.0f)
 800355c:	4b7d      	ldr	r3, [pc, #500]	; (8003754 <IIS3DWB_Thread+0x2e0>)
 800355e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003562:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8003566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800356a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356e:	d503      	bpl.n	8003578 <IIS3DWB_Thread+0x104>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_16g);
 8003570:	2101      	movs	r1, #1
 8003572:	4877      	ldr	r0, [pc, #476]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 8003574:	f002 fc63 	bl	8005e3e <iis3dwb_xl_full_scale_set>
      
      /*Set 2nd stage filter*/
      iis3dwb_xl_hp_path_on_out_set(&iis3dwb_ctx_instance,IIS3DWB_LP_5kHz);
 8003578:	2100      	movs	r1, #0
 800357a:	4875      	ldr	r0, [pc, #468]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 800357c:	f002 fce2 	bl	8005f44 <iis3dwb_xl_hp_path_on_out_set>
      /* FIFO_WTM_IA routing on pin INT1 */
      iis3dwb_pin_int1_route_t pin_int1_route;
      *(uint8_t*)&(pin_int1_route.int1_ctrl) = 0;
 8003580:	f107 030c 	add.w	r3, r7, #12
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
      *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
 8003588:	f107 030c 	add.w	r3, r7, #12
 800358c:	3301      	adds	r3, #1
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]
      pin_int1_route.int1_ctrl.int1_fifo_th = 1;
 8003592:	7b3b      	ldrb	r3, [r7, #12]
 8003594:	f043 0308 	orr.w	r3, r3, #8
 8003598:	733b      	strb	r3, [r7, #12]
      iis3dwb_pin_int1_route_set(&iis3dwb_ctx_instance, &pin_int1_route);
 800359a:	f107 030c 	add.w	r3, r7, #12
 800359e:	4619      	mov	r1, r3
 80035a0:	486b      	ldr	r0, [pc, #428]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 80035a2:	f002 fd4d 	bl	8006040 <iis3dwb_pin_int1_route_set>
      
      /*Enable writing to FIFO*/
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_BATCHED_AT_26k7Hz);
 80035a6:	210a      	movs	r1, #10
 80035a8:	4869      	ldr	r0, [pc, #420]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 80035aa:	f002 fd9b 	bl	80060e4 <iis3dwb_fifo_xl_batch_set>
      
      HAL_NVIC_EnableIRQ(IIS3DWB_INT1_EXTI_IRQn); 
 80035ae:	2017      	movs	r0, #23
 80035b0:	f005 fa1f 	bl	80089f2 <HAL_NVIC_EnableIRQ>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_RUNNING;      
 80035b4:	4b63      	ldr	r3, [pc, #396]	; (8003744 <IIS3DWB_Thread+0x2d0>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e766      	b.n	800348a <IIS3DWB_Thread+0x16>
    }
    else if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING)
 80035bc:	4b61      	ldr	r3, [pc, #388]	; (8003744 <IIS3DWB_Thread+0x2d0>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 80ad 	bne.w	8003720 <IIS3DWB_Thread+0x2ac>
    {  
      osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);     
 80035c6:	4b64      	ldr	r3, [pc, #400]	; (8003758 <IIS3DWB_Thread+0x2e4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f04f 31ff 	mov.w	r1, #4294967295
 80035ce:	4618      	mov	r0, r3
 80035d0:	f013 fe6a 	bl	80172a8 <osSemaphoreWait>
      
      if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING) /* Change of state can happen while task blocked */
 80035d4:	4b5b      	ldr	r3, [pc, #364]	; (8003744 <IIS3DWB_Thread+0x2d0>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f47f af56 	bne.w	800348a <IIS3DWB_Thread+0x16>
      {
        /* Check FIFO_WTM_IA anf fifo level. We do not use PID in order to avoid reading one register twice */
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS1, &reg0, 1);
 80035de:	f107 0213 	add.w	r2, r7, #19
 80035e2:	2301      	movs	r3, #1
 80035e4:	213a      	movs	r1, #58	; 0x3a
 80035e6:	485a      	ldr	r0, [pc, #360]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 80035e8:	f002 fbf9 	bl	8005dde <iis3dwb_read_reg>
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS2, &reg1, 1);        
 80035ec:	f107 0212 	add.w	r2, r7, #18
 80035f0:	2301      	movs	r3, #1
 80035f2:	213b      	movs	r1, #59	; 0x3b
 80035f4:	4856      	ldr	r0, [pc, #344]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 80035f6:	f002 fbf2 	bl	8005dde <iis3dwb_read_reg>
        fifo_level = ((reg1 & 0x03) << 8) + reg0; 
 80035fa:	7cbb      	ldrb	r3, [r7, #18]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003604:	b29a      	uxth	r2, r3
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	b29b      	uxth	r3, r3
 800360a:	4413      	add	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	823b      	strh	r3, [r7, #16]
        if((reg1) & 0x80  && (fifo_level>=IIS3DWB_SAMPLES_PER_IT) )
 8003610:	7cbb      	ldrb	r3, [r7, #18]
 8003612:	b25b      	sxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	f6bf af38 	bge.w	800348a <IIS3DWB_Thread+0x16>
 800361a:	8a3b      	ldrh	r3, [r7, #16]
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b7f      	cmp	r3, #127	; 0x7f
 8003620:	f67f af33 	bls.w	800348a <IIS3DWB_Thread+0x16>
        {        
          if(tim_value >= tim_value_old)
 8003624:	4b4d      	ldr	r3, [pc, #308]	; (800375c <IIS3DWB_Thread+0x2e8>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4b48      	ldr	r3, [pc, #288]	; (800374c <IIS3DWB_Thread+0x2d8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d307      	bcc.n	8003640 <IIS3DWB_Thread+0x1cc>
          {
            period = tim_value - tim_value_old;
 8003630:	4b4a      	ldr	r3, [pc, #296]	; (800375c <IIS3DWB_Thread+0x2e8>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b45      	ldr	r3, [pc, #276]	; (800374c <IIS3DWB_Thread+0x2d8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	4a49      	ldr	r2, [pc, #292]	; (8003760 <IIS3DWB_Thread+0x2ec>)
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e007      	b.n	8003650 <IIS3DWB_Thread+0x1dc>
          }
          else
          {
            period = tim_value + (0xFFFFFFFF - tim_value_old);
 8003640:	4b46      	ldr	r3, [pc, #280]	; (800375c <IIS3DWB_Thread+0x2e8>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b41      	ldr	r3, [pc, #260]	; (800374c <IIS3DWB_Thread+0x2d8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	4a44      	ldr	r2, [pc, #272]	; (8003760 <IIS3DWB_Thread+0x2ec>)
 800364e:	6013      	str	r3, [r2, #0]
          }
          
          tim_value_old = tim_value;
 8003650:	4b42      	ldr	r3, [pc, #264]	; (800375c <IIS3DWB_Thread+0x2e8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a3d      	ldr	r2, [pc, #244]	; (800374c <IIS3DWB_Thread+0x2d8>)
 8003656:	6013      	str	r3, [r2, #0]
          ts_iis3dwb +=  period;
 8003658:	4b41      	ldr	r3, [pc, #260]	; (8003760 <IIS3DWB_Thread+0x2ec>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f04f 0100 	mov.w	r1, #0
 8003662:	4b39      	ldr	r3, [pc, #228]	; (8003748 <IIS3DWB_Thread+0x2d4>)
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	1884      	adds	r4, r0, r2
 800366a:	eb41 0503 	adc.w	r5, r1, r3
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <IIS3DWB_Thread+0x2d4>)
 8003670:	e9c3 4500 	strd	r4, r5, [r3]
          
          uint16_t i = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	83fb      	strh	r3, [r7, #30]
          iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_DATA_OUT_TAG, (uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 7);
 8003678:	f44f 7360 	mov.w	r3, #896	; 0x380
 800367c:	4a39      	ldr	r2, [pc, #228]	; (8003764 <IIS3DWB_Thread+0x2f0>)
 800367e:	2178      	movs	r1, #120	; 0x78
 8003680:	4833      	ldr	r0, [pc, #204]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 8003682:	f002 fbac 	bl	8005dde <iis3dwb_read_reg>
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
          }
#else
          int16_t * p16src = (int16_t *)iis3dwb_mem;
 8003686:	4b37      	ldr	r3, [pc, #220]	; (8003764 <IIS3DWB_Thread+0x2f0>)
 8003688:	61bb      	str	r3, [r7, #24]
          int16_t * p16dest = (int16_t *)iis3dwb_mem;
 800368a:	4b36      	ldr	r3, [pc, #216]	; (8003764 <IIS3DWB_Thread+0x2f0>)
 800368c:	617b      	str	r3, [r7, #20]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 800368e:	2300      	movs	r3, #0
 8003690:	83fb      	strh	r3, [r7, #30]
 8003692:	e020      	b.n	80036d6 <IIS3DWB_Thread+0x262>
          {      
            p16src = (int16_t *)&((uint8_t *)(p16src))[1];          
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	3301      	adds	r3, #1
 8003698:	61bb      	str	r3, [r7, #24]
            *p16dest++ = *p16src++;
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	1c93      	adds	r3, r2, #2
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	1c99      	adds	r1, r3, #2
 80036a4:	6179      	str	r1, [r7, #20]
 80036a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80036aa:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	1c93      	adds	r3, r2, #2
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	1c99      	adds	r1, r3, #2
 80036b6:	6179      	str	r1, [r7, #20]
 80036b8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80036bc:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	1c93      	adds	r3, r2, #2
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	1c99      	adds	r1, r3, #2
 80036c8:	6179      	str	r1, [r7, #20]
 80036ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80036ce:	801a      	strh	r2, [r3, #0]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 80036d0:	8bfb      	ldrh	r3, [r7, #30]
 80036d2:	3301      	adds	r3, #1
 80036d4:	83fb      	strh	r3, [r7, #30]
 80036d6:	8bfb      	ldrh	r3, [r7, #30]
 80036d8:	2b7f      	cmp	r3, #127	; 0x7f
 80036da:	d9db      	bls.n	8003694 <IIS3DWB_Thread+0x220>
          }
#endif  
          IIS3DWB_Data_Ready((uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 6, (double)ts_iis3dwb/(double)SystemCoreClock);        
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <IIS3DWB_Thread+0x2d4>)
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	f7fc ff79 	bl	80005dc <__aeabi_ul2d>
 80036ea:	4680      	mov	r8, r0
 80036ec:	4689      	mov	r9, r1
 80036ee:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <IIS3DWB_Thread+0x2f4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc ff2e 	bl	8000554 <__aeabi_ui2d>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4640      	mov	r0, r8
 80036fe:	4649      	mov	r1, r9
 8003700:	f7fd f8cc 	bl	800089c <__aeabi_ddiv>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	ec43 2b17 	vmov	d7, r2, r3
 800370c:	eeb0 0a47 	vmov.f32	s0, s14
 8003710:	eef0 0a67 	vmov.f32	s1, s15
 8003714:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003718:	4812      	ldr	r0, [pc, #72]	; (8003764 <IIS3DWB_Thread+0x2f0>)
 800371a:	f000 fd4b 	bl	80041b4 <IIS3DWB_Data_Ready>
 800371e:	e6b4      	b.n	800348a <IIS3DWB_Thread+0x16>
        }
      }
    }
    else if ( IIS3DWB_Sensor_State == SM_SENSOR_STATE_SUSPENDING)
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <IIS3DWB_Thread+0x2d0>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b01      	cmp	r3, #1
 8003726:	f47f aeb0 	bne.w	800348a <IIS3DWB_Thread+0x16>
    {
#ifdef DATA_TEST
      usbTestData = 0;
#endif      
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_NOT_BATCHED);
 800372a:	2100      	movs	r1, #0
 800372c:	4808      	ldr	r0, [pc, #32]	; (8003750 <IIS3DWB_Thread+0x2dc>)
 800372e:	f002 fcd9 	bl	80060e4 <iis3dwb_fifo_xl_batch_set>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_SUSPENDED;
 8003732:	4b04      	ldr	r3, [pc, #16]	; (8003744 <IIS3DWB_Thread+0x2d0>)
 8003734:	2202      	movs	r2, #2
 8003736:	701a      	strb	r2, [r3, #0]
      osThreadSuspend(IIS3DWB_Thread_Id);
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <IIS3DWB_Thread+0x2f8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f014 f808 	bl	8017752 <osThreadSuspend>
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 8003742:	e6a2      	b.n	800348a <IIS3DWB_Thread+0x16>
 8003744:	20000004 	.word	0x20000004
 8003748:	20000670 	.word	0x20000670
 800374c:	20000664 	.word	0x20000664
 8003750:	20000018 	.word	0x20000018
 8003754:	2000ff08 	.word	0x2000ff08
 8003758:	200002d8 	.word	0x200002d8
 800375c:	20000660 	.word	0x20000660
 8003760:	20000668 	.word	0x20000668
 8003764:	200002e0 	.word	0x200002e0
 8003768:	20000038 	.word	0x20000038
 800376c:	2000ff04 	.word	0x2000ff04

08003770 <UpdateTimerValue>:
{
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(iis3dwb_data_ready_sem_id);
}

void UpdateTimerValue(void){
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
	tim_value = hsm_tim.Instance->CNT;
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <UpdateTimerValue+0x1c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	4a05      	ldr	r2, [pc, #20]	; (8003790 <UpdateTimerValue+0x20>)
 800377c:	6013      	str	r3, [r2, #0]
	osSemaphoreRelease(iis3dwb_data_ready_sem_id);
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <UpdateTimerValue+0x24>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f013 fdde 	bl	8017344 <osSemaphoreRelease>
}
 8003788:	bf00      	nop
 800378a:	bd80      	pop	{r7, pc}
 800378c:	200187d8 	.word	0x200187d8
 8003790:	20000660 	.word	0x20000660
 8003794:	200002d8 	.word	0x200002d8

08003798 <IIS3DWB_Set_State>:

void IIS3DWB_Set_State(SM_Sensor_State_t newState)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	71fb      	strb	r3, [r7, #7]
  IIS3DWB_Sensor_State = newState;
 80037a2:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <IIS3DWB_Set_State+0x1c>)
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	7013      	strb	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	20000004 	.word	0x20000004

080037b8 <IIS3DWB_Start>:
  IIS3DWB_Init_Param.FS[0] = newFS1;
  IIS3DWB_Init_Param.FS[0] = newFS2;
}

void IIS3DWB_Start(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80037bc:	2003      	movs	r0, #3
 80037be:	f7ff ffeb 	bl	8003798 <IIS3DWB_Set_State>
  osThreadResume(IIS3DWB_Thread_Id);
 80037c2:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <IIS3DWB_Start+0x18>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f013 ffd0 	bl	801776c <osThreadResume>
}
 80037cc:	bf00      	nop
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	2000ff04 	.word	0x2000ff04

080037d4 <IIS3DWB_Stop>:

void IIS3DWB_Stop(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_SUSPENDING);  
 80037d8:	2001      	movs	r0, #1
 80037da:	f7ff ffdd 	bl	8003798 <IIS3DWB_Set_State>
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <IMP34DT05_Set_State>:
  
}


void IMP34DT05_Set_State(SM_Sensor_State_t newState)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	71fb      	strb	r3, [r7, #7]
  IMP34DT05_Sensor_State = newState;
 80037ee:	4a04      	ldr	r2, [pc, #16]	; (8003800 <IMP34DT05_Set_State+0x1c>)
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	7013      	strb	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	20000024 	.word	0x20000024

08003804 <IMP34DT05_Start>:
  IMP34DT05_Init_Param.FS[0] = newFS1;
  IMP34DT05_Init_Param.FS[0] = newFS2;
}

void IMP34DT05_Start(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003808:	2003      	movs	r0, #3
 800380a:	f7ff ffeb 	bl	80037e4 <IMP34DT05_Set_State>
  osThreadResume(IMP34DT05_Thread_Id);
 800380e:	4b03      	ldr	r3, [pc, #12]	; (800381c <IMP34DT05_Start+0x18>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f013 ffaa 	bl	801776c <osThreadResume>
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}
 800381c:	2000ff28 	.word	0x2000ff28

08003820 <IMP34DT05_Stop>:

void IMP34DT05_Stop(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003824:	2001      	movs	r0, #1
 8003826:	f7ff ffdd 	bl	80037e4 <IMP34DT05_Set_State>
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <ISM330DHCX_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(ism330dhcx_DreadySem_id);    
}

void ISM330DHCX_Set_State(SM_Sensor_State_t newState)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
  ISM330DHCX_Sensor_State = newState;
 800383a:	4a04      	ldr	r2, [pc, #16]	; (800384c <ISM330DHCX_Set_State+0x1c>)
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	7013      	strb	r3, [r2, #0]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	20000025 	.word	0x20000025

08003850 <ISM330DHCX_Start>:
  ISM330DHCX_Init_Param.FS[0] = newFS1;
  ISM330DHCX_Init_Param.FS[0] = newFS2;
}

void ISM330DHCX_Start(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003854:	2003      	movs	r0, #3
 8003856:	f7ff ffeb 	bl	8003830 <ISM330DHCX_Set_State>
  osThreadResume(ISM330DHCX_Thread_Id);
 800385a:	4b03      	ldr	r3, [pc, #12]	; (8003868 <ISM330DHCX_Start+0x18>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f013 ff84 	bl	801776c <osThreadResume>
}
 8003864:	bf00      	nop
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20015e80 	.word	0x20015e80

0800386c <ISM330DHCX_Stop>:

void ISM330DHCX_Stop(void)
{  
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003870:	2001      	movs	r0, #1
 8003872:	f7ff ffdd 	bl	8003830 <ISM330DHCX_Set_State>
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <LPS22HH_Set_State>:
    }    
  }     
}

void LPS22HH_Set_State(SM_Sensor_State_t newState)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  LPS22HH_Sensor_State = newState;
 8003886:	4a04      	ldr	r2, [pc, #16]	; (8003898 <LPS22HH_Set_State+0x1c>)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	7013      	strb	r3, [r2, #0]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	20000026 	.word	0x20000026

0800389c <LPS22HH_Start>:
  LPS22HH_Init_Param.FS[0] = newFS1;
  LPS22HH_Init_Param.FS[0] = newFS2;
}

void LPS22HH_Start(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80038a0:	2003      	movs	r0, #3
 80038a2:	f7ff ffeb 	bl	800387c <LPS22HH_Set_State>
  osThreadResume(LPS22HH_Thread_Id);
 80038a6:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <LPS22HH_Start+0x18>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f013 ff5e 	bl	801776c <osThreadResume>
}
 80038b0:	bf00      	nop
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20015fa4 	.word	0x20015fa4

080038b8 <LPS22HH_Stop>:

void LPS22HH_Stop(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 80038bc:	2001      	movs	r0, #1
 80038be:	f7ff ffdd 	bl	800387c <LPS22HH_Set_State>
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <main>:
* @brief  Main program
* @param  None
* @retval None
*/  
int main(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08e      	sub	sp, #56	; 0x38
 80038cc:	af00      	add	r7, sp, #0



	HAL_Init();
 80038ce:	f003 fabd 	bl	8006e4c <HAL_Init>

	SystemClock_Config();
 80038d2:	f000 f92d 	bl	8003b30 <SystemClock_Config>
    
	/* Enable Power Clock for low power modes*/
	__HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	4b3d      	ldr	r3, [pc, #244]	; (80039cc <main+0x104>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	4a3c      	ldr	r2, [pc, #240]	; (80039cc <main+0x104>)
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e0:	6593      	str	r3, [r2, #88]	; 0x58
 80038e2:	4b3a      	ldr	r3, [pc, #232]	; (80039cc <main+0x104>)
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
	MX_SDMMC1_SD_Init();
 80038ee:	f000 f87d 	bl	80039ec <MX_SDMMC1_SD_Init>
	//HAL_PWREx_EnableVddUSB();		/* USB */
	//HAL_PWREx_EnableVddIO2();		/* VddIO2 is for Port G, since we are not using it */
	//BSP_Enable_DCDC2();				//Only for I2C 3, WiFi
  
	/* Configure the Battery Charger */
	BattChrg_Init();
 80038f2:	f000 f9bd 	bl	8003c70 <BattChrg_Init>
  
	/* Configure Power Voltage Detector(PVD) to detect if battery voltage is low */
	PVD_Config();
 80038f6:	f000 f9ef 	bl	8003cd8 <PVD_Config>
  
	/* Configure DEBUG PIN and LED */
	//BSP_DEBUG_PIN_Init_All();
	BSP_LED_Init(LED1);				//Green
 80038fa:	2000      	movs	r0, #0
 80038fc:	f002 fd50 	bl	80063a0 <BSP_LED_Init>
	BSP_LED_Init(LED2);				//Orange
 8003900:	2001      	movs	r0, #1
 8003902:	f002 fd4d 	bl	80063a0 <BSP_LED_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE();		//PA13, 14 are for DEBUG
 8003906:	4b31      	ldr	r3, [pc, #196]	; (80039cc <main+0x104>)
 8003908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390a:	4a30      	ldr	r2, [pc, #192]	; (80039cc <main+0x104>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <main+0x104>)
 8003914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	607b      	str	r3, [r7, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
   
	HSD_JSON_set_allocation_functions(HSD_malloc, HSD_free);
 800391e:	492c      	ldr	r1, [pc, #176]	; (80039d0 <main+0x108>)
 8003920:	482c      	ldr	r0, [pc, #176]	; (80039d4 <main+0x10c>)
 8003922:	f7fd fb8b 	bl	800103c <HSD_JSON_set_allocation_functions>
  
  /* Start USB */  
  //MX_USB_DEVICE_Init();			//Dont know why this is disabled
  
  /* Set default device description */
  set_default_description();
 8003926:	f7fe fa65 	bl	8001df4 <set_default_description>
  
  /* USER Button initialization */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800392a:	2101      	movs	r1, #1
 800392c:	2000      	movs	r0, #0
 800392e:	f002 fce5 	bl	80062fc <BSP_PB_Init>
  BSP_PB_PWR_Init();
 8003932:	f002 fcb3 	bl	800629c <BSP_PB_PWR_Init>
  
  /* Sensor Manager initilization, only using PID (Platform Indepentent Drivers) */
  SM_Peripheral_Init();
 8003936:	f001 feb9 	bl	80056ac <SM_Peripheral_Init>
  SM_OS_Init();
 800393a:	f001 fd7b 	bl	8005434 <SM_OS_Init>
  
  MX_USART2_Init();
 800393e:	f000 f877 	bl	8003a30 <MX_USART2_Init>
  Peripheral_MSP_Init_All();  
 8003942:	f000 fc4f 	bl	80041e4 <Peripheral_MSP_Init_All>
  SDM_Peripheral_Init();
 8003946:	f000 ffcd 	bl	80048e4 <SDM_Peripheral_Init>
  
  Peripheral_OS_Init_All();  
 800394a:	f000 fc51 	bl	80041f0 <Peripheral_OS_Init_All>
  SDM_OS_Init();
 800394e:	f000 ffcf 	bl	80048f0 <SDM_OS_Init>
  
  //Show reset
  char wakeUp [] = {"MCU WAKE UP"};
 8003952:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <main+0x110>)
 8003954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003958:	ca07      	ldmia	r2, {r0, r1, r2}
 800395a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t *) wakeUp, sizeof(wakeUp), HAL_MAX_DELAY);
 800395e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003962:	f04f 33ff 	mov.w	r3, #4294967295
 8003966:	220c      	movs	r2, #12
 8003968:	481c      	ldr	r0, [pc, #112]	; (80039dc <main+0x114>)
 800396a:	f00b fd37 	bl	800f3dc <HAL_UART_Transmit>

  //Get SOC
  BSP_BC_GetVoltageAndLevel(&mvLevel, &batteryLevel);
 800396e:	491c      	ldr	r1, [pc, #112]	; (80039e0 <main+0x118>)
 8003970:	481c      	ldr	r0, [pc, #112]	; (80039e4 <main+0x11c>)
 8003972:	f002 fe27 	bl	80065c4 <BSP_BC_GetVoltageAndLevel>

  //Show SOC
  char soc[21] = {"SOC in % :"};
 8003976:	4a1c      	ldr	r2, [pc, #112]	; (80039e8 <main+0x120>)
 8003978:	f107 0314 	add.w	r3, r7, #20
 800397c:	ca07      	ldmia	r2, {r0, r1, r2}
 800397e:	c303      	stmia	r3!, {r0, r1}
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	3302      	adds	r3, #2
 8003984:	0c12      	lsrs	r2, r2, #16
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	f107 031f 	add.w	r3, r7, #31
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	811a      	strh	r2, [r3, #8]
  char batVal[5];
  itoa(batteryLevel, batVal,10);
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <main+0x118>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f107 030c 	add.w	r3, r7, #12
 800399e:	220a      	movs	r2, #10
 80039a0:	4619      	mov	r1, r3
 80039a2:	f01a fa55 	bl	801de50 <itoa>
  strcat(soc, batVal);
 80039a6:	f107 020c 	add.w	r2, r7, #12
 80039aa:	f107 0314 	add.w	r3, r7, #20
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f01b f88e 	bl	801ead2 <strcat>
  HAL_UART_Transmit(&huart2, (uint8_t *) soc, sizeof(soc), HAL_MAX_DELAY);
 80039b6:	f107 0114 	add.w	r1, r7, #20
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
 80039be:	2215      	movs	r2, #21
 80039c0:	4806      	ldr	r0, [pc, #24]	; (80039dc <main+0x114>)
 80039c2:	f00b fd0b 	bl	800f3dc <HAL_UART_Transmit>

  /* Start scheduler */
  osKernelStart();
 80039c6:	f013 fc1d 	bl	8017204 <osKernelStart>
  
  while(1);  
 80039ca:	e7fe      	b.n	80039ca <main+0x102>
 80039cc:	40021000 	.word	0x40021000
 80039d0:	0801df35 	.word	0x0801df35
 80039d4:	0801df25 	.word	0x0801df25
 80039d8:	08022450 	.word	0x08022450
 80039dc:	20016358 	.word	0x20016358
 80039e0:	20000720 	.word	0x20000720
 80039e4:	2000071c 	.word	0x2000071c
 80039e8:	0802245c 	.word	0x0802245c

080039ec <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <MX_SDMMC1_SD_Init+0x3c>)
 80039f2:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <MX_SDMMC1_SD_Init+0x40>)
 80039f4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80039f6:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <MX_SDMMC1_SD_Init+0x3c>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <MX_SDMMC1_SD_Init+0x3c>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003a02:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <MX_SDMMC1_SD_Init+0x3c>)
 8003a04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a08:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a0a:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <MX_SDMMC1_SD_Init+0x3c>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <MX_SDMMC1_SD_Init+0x3c>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8003a16:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <MX_SDMMC1_SD_Init+0x3c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20015fc0 	.word	0x20015fc0
 8003a2c:	50062400 	.word	0x50062400

08003a30 <MX_USART2_Init>:


//UART2 INIT
void MX_USART2_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8003a34:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a36:	4a24      	ldr	r2, [pc, #144]	; (8003ac8 <MX_USART2_Init+0x98>)
 8003a38:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003a3a:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a40:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003a48:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a56:	220c      	movs	r2, #12
 8003a58:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a60:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a62:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a68:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a7a:	4812      	ldr	r0, [pc, #72]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a7c:	f00b fc5e 	bl	800f33c <HAL_UART_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_USART2_Init+0x5a>
	{
		Error_Handler();
 8003a86:	f000 fbcf 	bl	8004228 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	480d      	ldr	r0, [pc, #52]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003a8e:	f00d f89c 	bl	8010bca <HAL_UARTEx_SetTxFifoThreshold>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_USART2_Init+0x6c>
	{
		Error_Handler();
 8003a98:	f000 fbc6 	bl	8004228 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4809      	ldr	r0, [pc, #36]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003aa0:	f00d f8d1 	bl	8010c46 <HAL_UARTEx_SetRxFifoThreshold>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <MX_USART2_Init+0x7e>
	{
		Error_Handler();
 8003aaa:	f000 fbbd 	bl	8004228 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003aae:	4805      	ldr	r0, [pc, #20]	; (8003ac4 <MX_USART2_Init+0x94>)
 8003ab0:	f00d f852 	bl	8010b58 <HAL_UARTEx_DisableFifoMode>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <MX_USART2_Init+0x8e>
	{
		Error_Handler();
 8003aba:	f000 fbb5 	bl	8004228 <Error_Handler>
	}

}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20016358 	.word	0x20016358
 8003ac8:	40004400 	.word	0x40004400

08003acc <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
 // UNUSED(huart);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad4:	f107 030c 	add.w	r3, r7, #12
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <HAL_UART_MspInit+0x58>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	4a0e      	ldr	r2, [pc, #56]	; (8003b24 <HAL_UART_MspInit+0x58>)
 8003aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aee:	6593      	str	r3, [r2, #88]	; 0x58
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <HAL_UART_MspInit+0x58>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART_CR2_RXINV|USART2_RTS_Pin|USART2_TX_Pin;
 8003afc:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <HAL_UART_MspInit+0x5c>)
 8003afe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b00:	2302      	movs	r3, #2
 8003b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b0c:	2307      	movs	r3, #7
 8003b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b10:	f107 030c 	add.w	r3, r7, #12
 8003b14:	4619      	mov	r1, r3
 8003b16:	4805      	ldr	r0, [pc, #20]	; (8003b2c <HAL_UART_MspInit+0x60>)
 8003b18:	f005 fa06 	bl	8008f28 <HAL_GPIO_Init>
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40021000 	.word	0x40021000
 8003b28:	00010030 	.word	0x00010030
 8003b2c:	48000c00 	.word	0x48000c00

08003b30 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b0be      	sub	sp, #248	; 0xf8
 8003b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b36:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b3a:	2244      	movs	r2, #68	; 0x44
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f01a fa28 	bl	801df94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b44:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	60da      	str	r2, [r3, #12]
 8003b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b54:	1d3b      	adds	r3, r7, #4
 8003b56:	229c      	movs	r2, #156	; 0x9c
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f01a fa1a 	bl	801df94 <memset>
  
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8003b60:	2000      	movs	r0, #0
 8003b62:	f006 ffd1 	bl	800ab08 <HAL_PWREx_ControlVoltageScaling>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8003b6c:	f000 fb5c 	bl	8004228 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  HAL_PWR_EnableBkUpAccess();
 8003b70:	f006 ff2a 	bl	800a9c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003b74:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <SystemClock_Config+0x134>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	4a3a      	ldr	r2, [pc, #232]	; (8003c64 <SystemClock_Config+0x134>)
 8003b7c:	f023 0318 	bic.w	r3, r3, #24
 8003b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;	//Changed
 8003b84:	2325      	movs	r3, #37	; 0x25
 8003b86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;					//Changed
 8003b92:	2301      	movs	r3, #1
 8003b94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003baa:	2302      	movs	r3, #2
 8003bac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 20;
 8003bb0:	2314      	movs	r3, #20
 8003bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;				//Changed
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bc8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f007 f899 	bl	800ad04 <HAL_RCC_OscConfig>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003bd8:	f000 fb26 	bl	8004228 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bdc:	230f      	movs	r3, #15
 8003bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003be2:	2303      	movs	r3, #3
 8003be4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003bfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bfe:	2105      	movs	r1, #5
 8003c00:	4618      	mov	r0, r3
 8003c02:	f007 fca5 	bl	800b550 <HAL_RCC_ClockConfig>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8003c0c:	f000 fb0c 	bl	8004228 <Error_Handler>
#if 0
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
    |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
      |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_DFSDM1AUDIO;
#else
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
 8003c10:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <SystemClock_Config+0x138>)
 8003c12:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
#endif

  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003c14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
#endif

  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8003c20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c24:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

#if 1
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8003c32:	2305      	movs	r3, #5
 8003c34:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8003c36:	2360      	movs	r3, #96	; 0x60
 8003c38:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8003c3a:	2319      	movs	r3, #25
 8003c3c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8003c3e:	2304      	movs	r3, #4
 8003c40:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8003c42:	2304      	movs	r3, #4
 8003c44:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8003c46:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <SystemClock_Config+0x13c>)
 8003c48:	623b      	str	r3, [r7, #32]
#endif

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c4a:	1d3b      	adds	r3, r7, #4
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f007 ff2d 	bl	800baac <HAL_RCCEx_PeriphCLKConfig>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8003c58:	f000 fae6 	bl	8004228 <Error_Handler>
  }  
}
 8003c5c:	bf00      	nop
 8003c5e:	37f8      	adds	r7, #248	; 0xf8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	000a4002 	.word	0x000a4002
 8003c6c:	01010000 	.word	0x01010000

08003c70 <BattChrg_Init>:


void BattChrg_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  BSP_BC_Init();
 8003c74:	f002 fc0a 	bl	800648c <BSP_BC_Init>
  BSP_BC_BatMS_Init();
 8003c78:	f002 fc4c 	bl	8006514 <BSP_BC_BatMS_Init>
  BSP_BC_CmdSend(BATMS_ON);  
 8003c7c:	200a      	movs	r0, #10
 8003c7e:	f002 fc0d 	bl	800649c <BSP_BC_CmdSend>
  
  HAL_EXTI_GetHandle(&BC_exti, EXTI_LINE_10);  
 8003c82:	4908      	ldr	r1, [pc, #32]	; (8003ca4 <BattChrg_Init+0x34>)
 8003c84:	4808      	ldr	r0, [pc, #32]	; (8003ca8 <BattChrg_Init+0x38>)
 8003c86:	f005 f90b 	bl	8008ea0 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&BC_exti,  HAL_EXTI_COMMON_CB_ID, BC_Int_Callback);
 8003c8a:	4a08      	ldr	r2, [pc, #32]	; (8003cac <BattChrg_Init+0x3c>)
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4806      	ldr	r0, [pc, #24]	; (8003ca8 <BattChrg_Init+0x38>)
 8003c90:	f005 f8ec 	bl	8008e6c <HAL_EXTI_RegisterCallback>
  
  t_stwin = HAL_GetTick(); 
 8003c94:	f003 f946 	bl	8006f24 <HAL_GetTick>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <BattChrg_Init+0x40>)
 8003c9c:	6013      	str	r3, [r2, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	1600000a 	.word	0x1600000a
 8003ca8:	20016318 	.word	0x20016318
 8003cac:	08003cb5 	.word	0x08003cb5
 8003cb0:	20000718 	.word	0x20000718

08003cb4 <BC_Int_Callback>:
* @brief  Battery Charger Interrupt callback
* @param  None
* @retval None
*/
void BC_Int_Callback(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  if(HAL_GetTick() - t_stwin > 4000)
 8003cb8:	f003 f934 	bl	8006f24 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <BC_Int_Callback+0x20>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003cc8:	d902      	bls.n	8003cd0 <BC_Int_Callback+0x1c>
  {
    BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8003cca:	2017      	movs	r0, #23
 8003ccc:	f002 fbe6 	bl	800649c <BSP_BC_CmdSend>
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000718 	.word	0x20000718

08003cd8 <PVD_Config>:
* @brief  Configures the PVD resources.
* @param  None
* @retval None
*/
void PVD_Config(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD;
  
  /*##-1- Enable Power Clock #################################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <PVD_Config+0x50>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	4a11      	ldr	r2, [pc, #68]	; (8003d28 <PVD_Config+0x50>)
 8003ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <PVD_Config+0x50>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	607b      	str	r3, [r7, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
  
  /*##-2- Configure the NVIC for PVD #########################################*/
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	f004 fe5d 	bl	80089ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8003d00:	2001      	movs	r0, #1
 8003d02:	f004 fe76 	bl	80089f2 <HAL_NVIC_EnableIRQ>
  
  /* Configure the PVD Level to 6 and generate an interrupt on falling
  edge(PVD detection level set to 2.9V, refer to the electrical characteristics
  of you device datasheet for more details) */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8003d06:	230c      	movs	r3, #12
 8003d08:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8003d0a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003d0e:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003d10:	f107 0308 	add.w	r3, r7, #8
 8003d14:	4618      	mov	r0, r3
 8003d16:	f006 fe67 	bl	800a9e8 <HAL_PWR_ConfigPVD>
  
  /* Enable the PVD Output */
  HAL_PWR_EnablePVD();
 8003d1a:	f006 fec5 	bl	800aaa8 <HAL_PWR_EnablePVD>
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000

08003d2c <vApplicationIdleHook>:


void vApplicationIdleHook( void )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
	//Starts measurement manually


#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT) 
	//If SD_Logging enabled start measurement
  if(SD_Logging_Enabled)
 8003d30:	4b3e      	ldr	r3, [pc, #248]	; (8003e2c <vApplicationIdleHook+0x100>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <vApplicationIdleHook+0x10>
  {
    SDM_AutosaveFile();
 8003d38:	f001 fad6 	bl	80052e8 <SDM_AutosaveFile>
  }
#endif
  
  if (!SD_Logging_Active)
 8003d3c:	4b3c      	ldr	r3, [pc, #240]	; (8003e30 <vApplicationIdleHook+0x104>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d171      	bne.n	8003e28 <vApplicationIdleHook+0xfc>
  {
    if(com_status == HS_DATALOG_USB_STARTED)
 8003d44:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <vApplicationIdleHook+0x108>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d121      	bne.n	8003d92 <vApplicationIdleHook+0x66>
    {
        if(!(HAL_GetTick()%100)) 
 8003d4e:	f003 f8e9 	bl	8006f24 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b38      	ldr	r3, [pc, #224]	; (8003e38 <vApplicationIdleHook+0x10c>)
 8003d56:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2164      	movs	r1, #100	; 0x64
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d103      	bne.n	8003d70 <vApplicationIdleHook+0x44>
        {
          BSP_LED_On(LED_ORANGE);
 8003d68:	2001      	movs	r0, #1
 8003d6a:	f002 fb5b 	bl	8006424 <BSP_LED_On>
 8003d6e:	e059      	b.n	8003e24 <vApplicationIdleHook+0xf8>
        }
        else 
        {
          if(!(HAL_GetTick()%50)) 
 8003d70:	f003 f8d8 	bl	8006f24 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <vApplicationIdleHook+0x10c>)
 8003d78:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	2132      	movs	r1, #50	; 0x32
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d14c      	bne.n	8003e24 <vApplicationIdleHook+0xf8>
          {
            BSP_LED_Off(LED_ORANGE);
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	f002 fb64 	bl	8006458 <BSP_LED_Off>
 8003d90:	e048      	b.n	8003e24 <vApplicationIdleHook+0xf8>
          }
        }        
    }
    else
    {
      if (!BSP_SD_IsDetected())
 8003d92:	f002 ff7f 	bl	8006c94 <BSP_SD_IsDetected>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d121      	bne.n	8003de0 <vApplicationIdleHook+0xb4>
      {
        if(!(HAL_GetTick()%200)) 
 8003d9c:	f003 f8c2 	bl	8006f24 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <vApplicationIdleHook+0x10c>)
 8003da4:	fba3 1302 	umull	r1, r3, r3, r2
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	21c8      	movs	r1, #200	; 0xc8
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <vApplicationIdleHook+0x92>
        {
          BSP_LED_On(LED_ORANGE);
 8003db6:	2001      	movs	r0, #1
 8003db8:	f002 fb34 	bl	8006424 <BSP_LED_On>
 8003dbc:	e032      	b.n	8003e24 <vApplicationIdleHook+0xf8>
        }
        else 
        {
          if(!(HAL_GetTick()%100)) 
 8003dbe:	f003 f8b1 	bl	8006f24 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <vApplicationIdleHook+0x10c>)
 8003dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	2164      	movs	r1, #100	; 0x64
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d125      	bne.n	8003e24 <vApplicationIdleHook+0xf8>
          {
            BSP_LED_Off(LED_ORANGE);
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f002 fb3d 	bl	8006458 <BSP_LED_Off>
 8003dde:	e021      	b.n	8003e24 <vApplicationIdleHook+0xf8>
          }
        }    
      }
      else
      {
        if(!(HAL_GetTick()%1000)) 
 8003de0:	f003 f8a0 	bl	8006f24 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <vApplicationIdleHook+0x110>)
 8003de8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dec:	099b      	lsrs	r3, r3, #6
 8003dee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d103      	bne.n	8003e04 <vApplicationIdleHook+0xd8>
        {
          BSP_LED_On(LED_ORANGE);
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	f002 fb11 	bl	8006424 <BSP_LED_On>
 8003e02:	e00f      	b.n	8003e24 <vApplicationIdleHook+0xf8>
        }
        else 
        {
          if(!(HAL_GetTick()%50)) 
 8003e04:	f003 f88e 	bl	8006f24 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <vApplicationIdleHook+0x10c>)
 8003e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	2132      	movs	r1, #50	; 0x32
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d102      	bne.n	8003e24 <vApplicationIdleHook+0xf8>
          {
            BSP_LED_Off(LED_ORANGE);
 8003e1e:	2001      	movs	r0, #1
 8003e20:	f002 fb1a 	bl	8006458 <BSP_LED_Off>
        }
      }
    }
    //Start Measurement manually
    //Show reset
    SDM_StartMeasurements();
 8003e24:	f001 fa00 	bl	8005228 <SDM_StartMeasurements>
  }
}
 8003e28:	bf00      	nop
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000768 	.word	0x20000768
 8003e30:	20000754 	.word	0x20000754
 8003e34:	200002d4 	.word	0x200002d4
 8003e38:	51eb851f 	.word	0x51eb851f
 8003e3c:	10624dd3 	.word	0x10624dd3

08003e40 <SENSOR_Generic_Data_Ready>:
* @param  size: input data buffer size [bytes]
* @param  timeStamp: timestamp of the latest sample in the input buffer
* @retval 
*/
void SENSOR_Generic_Data_Ready(uint16_t sId, uint8_t *buf, uint16_t size, double timeStamp)
{ 
 8003e40:	b5b0      	push	{r4, r5, r7, lr}
 8003e42:	b08c      	sub	sp, #48	; 0x30
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	ed87 0b00 	vstr	d0, [r7]
 8003e4e:	81fb      	strh	r3, [r7, #14]
 8003e50:	4613      	mov	r3, r2
 8003e52:	81bb      	strh	r3, [r7, #12]
  COM_SensorStatus_t * tempStatus = COM_GetSensorStatus(sId);    
 8003e54:	89fb      	ldrh	r3, [r7, #14]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fd fed1 	bl	8001c00 <COM_GetSensorStatus>
 8003e5e:	6238      	str	r0, [r7, #32]
  COM_SensorDescriptor_t * tempDescriptor = COM_GetSensorDescriptor(sId); 
 8003e60:	89fb      	ldrh	r3, [r7, #14]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd feb7 	bl	8001bd8 <COM_GetSensorDescriptor>
 8003e6a:	61f8      	str	r0, [r7, #28]
  COM_SubSensorDescriptor_t *tempSubSensorDescriptor; 
  uint16_t toSend = 0, nBytesPerSample = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003e70:	2300      	movs	r3, #0
 8003e72:	85bb      	strh	r3, [r7, #44]	; 0x2c
  
  if (sensor_first_dataReady[sId]) // Discard first set of sensor data
 8003e74:	89fb      	ldrh	r3, [r7, #14]
 8003e76:	4a89      	ldr	r2, [pc, #548]	; (800409c <SENSOR_Generic_Data_Ready+0x25c>)
 8003e78:	5cd3      	ldrb	r3, [r2, r3]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d020      	beq.n	8003ec0 <SENSOR_Generic_Data_Ready+0x80>
  {
    sensor_first_dataReady[sId] = 0;    
 8003e7e:	89fb      	ldrh	r3, [r7, #14]
 8003e80:	4a86      	ldr	r2, [pc, #536]	; (800409c <SENSOR_Generic_Data_Ready+0x25c>)
 8003e82:	2100      	movs	r1, #0
 8003e84:	54d1      	strb	r1, [r2, r3]
    sensor_n_samples_acc[sId] = 0.0f;    
 8003e86:	89fb      	ldrh	r3, [r7, #14]
 8003e88:	4a85      	ldr	r2, [pc, #532]	; (80040a0 <SENSOR_Generic_Data_Ready+0x260>)
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
    tempStatus->initialOffset = (float)timeStamp;
 8003e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e98:	f7fc fece 	bl	8000c38 <__aeabi_d2f>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	609a      	str	r2, [r3, #8]
    old_time_stamp[sId] = timeStamp;
 8003ea2:	89fb      	ldrh	r3, [r7, #14]
 8003ea4:	4a7f      	ldr	r2, [pc, #508]	; (80040a4 <SENSOR_Generic_Data_Ready+0x264>)
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	18d1      	adds	r1, r2, r3
 8003eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eae:	e9c1 2300 	strd	r2, r3, [r1]
    sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;
 8003eb2:	89fb      	ldrh	r3, [r7, #14]
 8003eb4:	6a3a      	ldr	r2, [r7, #32]
 8003eb6:	8991      	ldrh	r1, [r2, #12]
 8003eb8:	4a7b      	ldr	r2, [pc, #492]	; (80040a8 <SENSOR_Generic_Data_Ready+0x268>)
 8003eba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
      }      
    }    
  }    
}
 8003ebe:	e16c      	b.n	800419a <SENSOR_Generic_Data_Ready+0x35a>
    if(tempDescriptor->dataType == DATA_TYPE_FLOAT || tempDescriptor->dataType == DATA_TYPE_INT32 || tempDescriptor->dataType == DATA_TYPE_UINT32) 
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	7c5b      	ldrb	r3, [r3, #17]
 8003ec4:	2b06      	cmp	r3, #6
 8003ec6:	d007      	beq.n	8003ed8 <SENSOR_Generic_Data_Ready+0x98>
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	7c5b      	ldrb	r3, [r3, #17]
 8003ecc:	2b05      	cmp	r3, #5
 8003ece:	d003      	beq.n	8003ed8 <SENSOR_Generic_Data_Ready+0x98>
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	7c5b      	ldrb	r3, [r3, #17]
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d102      	bne.n	8003ede <SENSOR_Generic_Data_Ready+0x9e>
      nBytesPerSample = 4;
 8003ed8:	2304      	movs	r3, #4
 8003eda:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003edc:	e014      	b.n	8003f08 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT16 || tempDescriptor->dataType == DATA_TYPE_INT16) 
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	7c5b      	ldrb	r3, [r3, #17]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d003      	beq.n	8003eee <SENSOR_Generic_Data_Ready+0xae>
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	7c5b      	ldrb	r3, [r3, #17]
 8003eea:	2b03      	cmp	r3, #3
 8003eec:	d102      	bne.n	8003ef4 <SENSOR_Generic_Data_Ready+0xb4>
      nBytesPerSample = 2;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003ef2:	e009      	b.n	8003f08 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT8 || tempDescriptor->dataType == DATA_TYPE_INT8) 
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	7c5b      	ldrb	r3, [r3, #17]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <SENSOR_Generic_Data_Ready+0xc4>
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	7c5b      	ldrb	r3, [r3, #17]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <SENSOR_Generic_Data_Ready+0xc8>
      nBytesPerSample = 1;
 8003f04:	2301      	movs	r3, #1
 8003f06:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint8_t totalDataPerSample = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	e01d      	b.n	8003f50 <SENSOR_Generic_Data_Ready+0x110>
      if (tempStatus->subSensorStatus[i].isActive)
 8003f14:	6a39      	ldr	r1, [r7, #32]
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	4613      	mov	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	3324      	adds	r3, #36	; 0x24
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00f      	beq.n	8003f4a <SENSOR_Generic_Data_Ready+0x10a>
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 8003f2a:	89fb      	ldrh	r3, [r7, #14]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fd fe79 	bl	8001c2c <COM_GetSubSensorDescriptor>
 8003f3a:	61b8      	str	r0, [r7, #24]
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	789a      	ldrb	r2, [r3, #2]
 8003f40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f44:	4413      	add	r3, r2
 8003f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f56:	461a      	mov	r2, r3
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	dbda      	blt.n	8003f14 <SENSOR_Generic_Data_Ready+0xd4>
    nBytesPerSample *= totalDataPerSample;
 8003f5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003f66:	fb12 f303 	smulbb	r3, r2, r3
 8003f6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sensor_n_samples_acc[sId] = (float)(size / nBytesPerSample);
 8003f6c:	89ba      	ldrh	r2, [r7, #12]
 8003f6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f80:	4a47      	ldr	r2, [pc, #284]	; (80040a0 <SENSOR_Generic_Data_Ready+0x260>)
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	edc3 7a00 	vstr	s15, [r3]
    tempStatus->measuredODR = sensor_n_samples_acc[sId]/(timeStamp - old_time_stamp[sId]);
 8003f8a:	89fb      	ldrh	r3, [r7, #14]
 8003f8c:	4a44      	ldr	r2, [pc, #272]	; (80040a0 <SENSOR_Generic_Data_Ready+0x260>)
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fc faff 	bl	8000598 <__aeabi_f2d>
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	460d      	mov	r5, r1
 8003f9e:	89fb      	ldrh	r3, [r7, #14]
 8003fa0:	4a40      	ldr	r2, [pc, #256]	; (80040a4 <SENSOR_Generic_Data_Ready+0x264>)
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fae:	f7fc f993 	bl	80002d8 <__aeabi_dsub>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4629      	mov	r1, r5
 8003fba:	f7fc fc6f 	bl	800089c <__aeabi_ddiv>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f7fc fe37 	bl	8000c38 <__aeabi_d2f>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	605a      	str	r2, [r3, #4]
    old_time_stamp[sId] = timeStamp;
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
 8003fd2:	4a34      	ldr	r2, [pc, #208]	; (80040a4 <SENSOR_Generic_Data_Ready+0x264>)
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	18d1      	adds	r1, r2, r3
 8003fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fdc:	e9c1 2300 	strd	r2, r3, [r1]
    toSend = size/nBytesPerSample;
 8003fe0:	89ba      	ldrh	r2, [r7, #12]
 8003fe2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while(toSend > 0)
 8003fea:	e0d2      	b.n	8004192 <SENSOR_Generic_Data_Ready+0x352>
      if(toSend < sensor_n_samples_to_timestamp[sId] || sensor_n_samples_to_timestamp[sId] == 0)
 8003fec:	89fb      	ldrh	r3, [r7, #14]
 8003fee:	4a2e      	ldr	r2, [pc, #184]	; (80040a8 <SENSOR_Generic_Data_Ready+0x268>)
 8003ff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ff4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d305      	bcc.n	8004006 <SENSOR_Generic_Data_Ready+0x1c6>
 8003ffa:	89fb      	ldrh	r3, [r7, #14]
 8003ffc:	4a2a      	ldr	r2, [pc, #168]	; (80040a8 <SENSOR_Generic_Data_Ready+0x268>)
 8003ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d135      	bne.n	8004072 <SENSOR_Generic_Data_Ready+0x232>
        if(com_status == HS_DATALOG_SD_STARTED)
 8004006:	4b29      	ldr	r3, [pc, #164]	; (80040ac <SENSOR_Generic_Data_Ready+0x26c>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d10b      	bne.n	8004028 <SENSOR_Generic_Data_Ready+0x1e8>
          SDM_Fill_Buffer(sId , (uint8_t *)buf, toSend * nBytesPerSample);
 8004010:	89fb      	ldrh	r3, [r7, #14]
 8004012:	b2d8      	uxtb	r0, r3
 8004014:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004016:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004018:	fb12 f303 	smulbb	r3, r2, r3
 800401c:	b29b      	uxth	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	f000 ff47 	bl	8004eb4 <SDM_Fill_Buffer>
 8004026:	e010      	b.n	800404a <SENSOR_Generic_Data_Ready+0x20a>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8004028:	4b20      	ldr	r3, [pc, #128]	; (80040ac <SENSOR_Generic_Data_Ready+0x26c>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b01      	cmp	r3, #1
 8004030:	d10b      	bne.n	800404a <SENSOR_Generic_Data_Ready+0x20a>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber  , (uint8_t *)buf, toSend * nBytesPerSample);
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004038:	b2d9      	uxtb	r1, r3
 800403a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800403c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	481a      	ldr	r0, [pc, #104]	; (80040b0 <SENSOR_Generic_Data_Ready+0x270>)
 8004046:	f00e fb3d 	bl	80126c4 <USBD_WCID_STREAMING_FillTxDataBuffer>
        if(sensor_n_samples_to_timestamp[sId] != 0)
 800404a:	89fb      	ldrh	r3, [r7, #14]
 800404c:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <SENSOR_Generic_Data_Ready+0x268>)
 800404e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <SENSOR_Generic_Data_Ready+0x22c>
          sensor_n_samples_to_timestamp[sId] -= toSend;
 8004056:	89fb      	ldrh	r3, [r7, #14]
 8004058:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <SENSOR_Generic_Data_Ready+0x268>)
 800405a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800405e:	89fb      	ldrh	r3, [r7, #14]
 8004060:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004062:	1a8a      	subs	r2, r1, r2
 8004064:	b291      	uxth	r1, r2
 8004066:	4a10      	ldr	r2, [pc, #64]	; (80040a8 <SENSOR_Generic_Data_Ready+0x268>)
 8004068:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        toSend = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004070:	e08f      	b.n	8004192 <SENSOR_Generic_Data_Ready+0x352>
        if(com_status == HS_DATALOG_SD_STARTED)
 8004072:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <SENSOR_Generic_Data_Ready+0x26c>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d11b      	bne.n	80040b4 <SENSOR_Generic_Data_Ready+0x274>
          SDM_Fill_Buffer(sId, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 800407c:	89fb      	ldrh	r3, [r7, #14]
 800407e:	b2d8      	uxtb	r0, r3
 8004080:	89fb      	ldrh	r3, [r7, #14]
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <SENSOR_Generic_Data_Ready+0x268>)
 8004084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004088:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800408a:	fb12 f303 	smulbb	r3, r2, r3
 800408e:	b29b      	uxth	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	f000 ff0e 	bl	8004eb4 <SDM_Fill_Buffer>
 8004098:	e021      	b.n	80040de <SENSOR_Generic_Data_Ready+0x29e>
 800409a:	bf00      	nop
 800409c:	20000028 	.word	0x20000028
 80040a0:	20000678 	.word	0x20000678
 80040a4:	200006a8 	.word	0x200006a8
 80040a8:	20000700 	.word	0x20000700
 80040ac:	200002d4 	.word	0x200002d4
 80040b0:	20016050 	.word	0x20016050
        else if (com_status == HS_DATALOG_USB_STARTED )
 80040b4:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <SENSOR_Generic_Data_Ready+0x364>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d10f      	bne.n	80040de <SENSOR_Generic_Data_Ready+0x29e>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80040c4:	b2d9      	uxtb	r1, r3
 80040c6:	89fb      	ldrh	r3, [r7, #14]
 80040c8:	4a37      	ldr	r2, [pc, #220]	; (80041a8 <SENSOR_Generic_Data_Ready+0x368>)
 80040ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ce:	461a      	mov	r2, r3
 80040d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80040d2:	fb03 f302 	mul.w	r3, r3, r2
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4834      	ldr	r0, [pc, #208]	; (80041ac <SENSOR_Generic_Data_Ready+0x36c>)
 80040da:	f00e faf3 	bl	80126c4 <USBD_WCID_STREAMING_FillTxDataBuffer>
        buf+=sensor_n_samples_to_timestamp[sId] * nBytesPerSample;
 80040de:	89fb      	ldrh	r3, [r7, #14]
 80040e0:	4a31      	ldr	r2, [pc, #196]	; (80041a8 <SENSOR_Generic_Data_Ready+0x368>)
 80040e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040e6:	461a      	mov	r2, r3
 80040e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80040ea:	fb03 f302 	mul.w	r3, r3, r2
 80040ee:	461a      	mov	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4413      	add	r3, r2
 80040f4:	60bb      	str	r3, [r7, #8]
        toSend -= sensor_n_samples_to_timestamp[sId];
 80040f6:	89fb      	ldrh	r3, [r7, #14]
 80040f8:	4a2b      	ldr	r2, [pc, #172]	; (80041a8 <SENSOR_Generic_Data_Ready+0x368>)
 80040fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	85fb      	strh	r3, [r7, #46]	; 0x2e
        double newTS = timeStamp - ((1.0 / (double)tempStatus->measuredODR) * toSend);   
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc fa45 	bl	8000598 <__aeabi_f2d>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	4926      	ldr	r1, [pc, #152]	; (80041b0 <SENSOR_Generic_Data_Ready+0x370>)
 8004118:	f7fc fbc0 	bl	800089c <__aeabi_ddiv>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4614      	mov	r4, r2
 8004122:	461d      	mov	r5, r3
 8004124:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004126:	4618      	mov	r0, r3
 8004128:	f7fc fa24 	bl	8000574 <__aeabi_i2d>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4620      	mov	r0, r4
 8004132:	4629      	mov	r1, r5
 8004134:	f7fc fa88 	bl	8000648 <__aeabi_dmul>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004140:	f7fc f8ca 	bl	80002d8 <__aeabi_dsub>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if(com_status == HS_DATALOG_SD_STARTED)
 800414c:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <SENSOR_Generic_Data_Ready+0x364>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d108      	bne.n	8004168 <SENSOR_Generic_Data_Ready+0x328>
          SDM_Fill_Buffer(sId, (uint8_t *)&newTS, 8);
 8004156:	89fb      	ldrh	r3, [r7, #14]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f107 0110 	add.w	r1, r7, #16
 800415e:	2208      	movs	r2, #8
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fea7 	bl	8004eb4 <SDM_Fill_Buffer>
 8004166:	e00e      	b.n	8004186 <SENSOR_Generic_Data_Ready+0x346>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8004168:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <SENSOR_Generic_Data_Ready+0x364>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d109      	bne.n	8004186 <SENSOR_Generic_Data_Ready+0x346>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)&newTS, 8);
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004178:	b2d9      	uxtb	r1, r3
 800417a:	f107 0210 	add.w	r2, r7, #16
 800417e:	2308      	movs	r3, #8
 8004180:	480a      	ldr	r0, [pc, #40]	; (80041ac <SENSOR_Generic_Data_Ready+0x36c>)
 8004182:	f00e fa9f 	bl	80126c4 <USBD_WCID_STREAMING_FillTxDataBuffer>
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
 8004186:	89fb      	ldrh	r3, [r7, #14]
 8004188:	6a3a      	ldr	r2, [r7, #32]
 800418a:	8991      	ldrh	r1, [r2, #12]
 800418c:	4a06      	ldr	r2, [pc, #24]	; (80041a8 <SENSOR_Generic_Data_Ready+0x368>)
 800418e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    while(toSend > 0)
 8004192:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004194:	2b00      	cmp	r3, #0
 8004196:	f47f af29 	bne.w	8003fec <SENSOR_Generic_Data_Ready+0x1ac>
}
 800419a:	bf00      	nop
 800419c:	3730      	adds	r7, #48	; 0x30
 800419e:	46bd      	mov	sp, r7
 80041a0:	bdb0      	pop	{r4, r5, r7, pc}
 80041a2:	bf00      	nop
 80041a4:	200002d4 	.word	0x200002d4
 80041a8:	20000700 	.word	0x20000700
 80041ac:	20016050 	.word	0x20016050
 80041b0:	3ff00000 	.word	0x3ff00000

080041b4 <IIS3DWB_Data_Ready>:


/*  ---------- Sensors data ready functions ----------- */
void IIS3DWB_Data_Ready(uint8_t * buf, uint16_t size, double timeStamp)
{  
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	460b      	mov	r3, r1
 80041be:	ed87 0b00 	vstr	d0, [r7]
 80041c2:	817b      	strh	r3, [r7, #10]
  SENSOR_Generic_Data_Ready(iis3dwb_com_id, buf, size, timeStamp);
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <IIS3DWB_Data_Ready+0x2c>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	897a      	ldrh	r2, [r7, #10]
 80041cc:	ed97 0b00 	vldr	d0, [r7]
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fe34 	bl	8003e40 <SENSOR_Generic_Data_Ready>
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20016040 	.word	0x20016040

080041e4 <Peripheral_MSP_Init_All>:
}



void Peripheral_MSP_Init_All(void)
{  
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  HTS221_Peripheral_Init();
  IMP34DT05_Peripheral_Init();
  MP23ABS1_Peripheral_Init();
  ISM330DHCX_Peripheral_Init();
#endif
  IIS3DWB_Peripheral_Init();
 80041e8:	f7ff f864 	bl	80032b4 <IIS3DWB_Peripheral_Init>
#if 0
  IIS2DH_Peripheral_Init();
#endif
}
 80041ec:	bf00      	nop
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <Peripheral_OS_Init_All>:


void Peripheral_OS_Init_All(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  HTS221_OS_Init();
  IMP34DT05_OS_Init();
  MP23ABS1_OS_Init();
  ISM330DHCX_OS_Init();
#endif
  IIS3DWB_OS_Init();
 80041f4:	f7ff f8ea 	bl	80033cc <IIS3DWB_OS_Init>
#if 0
  IIS2DH_OS_Init();
#endif
}
 80041f8:	bf00      	nop
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d002      	beq.n	8004212 <HAL_GPIO_EXTI_Callback+0x16>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d004      	beq.n	800421a <HAL_GPIO_EXTI_Callback+0x1e>
		  userButtonCallback(GPIO_Pin);
	  case  IIS3DWB_INT1_Pin:
		  UpdateTimerValue();

	  default:
		break;
 8004210:	e005      	b.n	800421e <HAL_GPIO_EXTI_Callback+0x22>
		  userButtonCallback(GPIO_Pin);
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fff8 	bl	800520a <userButtonCallback>
		  UpdateTimerValue();
 800421a:	f7ff faa9 	bl	8003770 <UpdateTimerValue>
		break;
 800421e:	bf00      	nop
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void Error_Handler(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  while(1);
 800422c:	e7fe      	b.n	800422c <Error_Handler+0x4>
	...

08004230 <MP23ABS1_Set_State>:
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }
}

void MP23ABS1_Set_State(SM_Sensor_State_t newState)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	71fb      	strb	r3, [r7, #7]
  MP23ABS1_Sensor_State = newState;
 800423a:	4a04      	ldr	r2, [pc, #16]	; (800424c <MP23ABS1_Set_State+0x1c>)
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	7013      	strb	r3, [r2, #0]
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	20000033 	.word	0x20000033

08004250 <MP23ABS1_Start>:
  MP23ABS1_Init_Param.FS[0] = newFS1;
  MP23ABS1_Init_Param.FS[0] = newFS2;
}

void MP23ABS1_Start(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8004254:	2003      	movs	r0, #3
 8004256:	f7ff ffeb 	bl	8004230 <MP23ABS1_Set_State>
  osThreadResume(MP23ABS1_Thread_Id);
 800425a:	4b03      	ldr	r3, [pc, #12]	; (8004268 <MP23ABS1_Start+0x18>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f013 fa84 	bl	801776c <osThreadResume>
}
 8004264:	bf00      	nop
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20016400 	.word	0x20016400

0800426c <MP23ABS1_Stop>:

void MP23ABS1_Stop(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8004270:	2001      	movs	r0, #1
 8004272:	f7ff ffdd 	bl	8004230 <MP23ABS1_Set_State>
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <SD_CheckStatus+0x38>)
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800428c:	f002 fdac 	bl	8006de8 <BSP_SD_GetCardState>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d107      	bne.n	80042a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <SD_CheckStatus+0x38>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <SD_CheckStatus+0x38>)
 80042a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80042a6:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <SD_CheckStatus+0x38>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	b2db      	uxtb	r3, r3
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000034 	.word	0x20000034

080042b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <SD_initialize+0x38>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80042c8:	f002 fc8c 	bl	8006be4 <BSP_SD_Init>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff ffd1 	bl	800427c <SD_CheckStatus>
 80042da:	4603      	mov	r3, r0
 80042dc:	461a      	mov	r2, r3
 80042de:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <SD_initialize+0x38>)
 80042e0:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80042e2:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <SD_initialize+0x38>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	b2db      	uxtb	r3, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000034 	.word	0x20000034

080042f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ffbb 	bl	800427c <SD_CheckStatus>
 8004306:	4603      	mov	r3, r0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	4603      	mov	r3, r0
 800431e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
  ReadStatus = 0;
 8004324:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <SD_read+0x94>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	68b8      	ldr	r0, [r7, #8]
 8004330:	f002 fcca 	bl	8006cc8 <BSP_SD_ReadBlocks_DMA>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d12f      	bne.n	800439a <SD_read+0x8a>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 800433a:	f002 fdf3 	bl	8006f24 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004340:	bf00      	nop
 8004342:	4b18      	ldr	r3, [pc, #96]	; (80043a4 <SD_read+0x94>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d108      	bne.n	800435c <SD_read+0x4c>
 800434a:	f002 fdeb 	bl	8006f24 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f247 522f 	movw	r2, #29999	; 0x752f
 8004358:	4293      	cmp	r3, r2
 800435a:	d9f2      	bls.n	8004342 <SD_read+0x32>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 800435c:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <SD_read+0x94>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d102      	bne.n	800436a <SD_read+0x5a>
    {
      res = RES_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	75fb      	strb	r3, [r7, #23]
 8004368:	e017      	b.n	800439a <SD_read+0x8a>
    }
    else
    {
      ReadStatus = 0;
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <SD_read+0x94>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 8004370:	f002 fdd8 	bl	8006f24 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004376:	e007      	b.n	8004388 <SD_read+0x78>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004378:	f002 fd36 	bl	8006de8 <BSP_SD_GetCardState>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d102      	bne.n	8004388 <SD_read+0x78>
        {
          res = RES_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	75fb      	strb	r3, [r7, #23]
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
           break;
 8004386:	e008      	b.n	800439a <SD_read+0x8a>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004388:	f002 fdcc 	bl	8006f24 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f247 522f 	movw	r2, #29999	; 0x752f
 8004396:	4293      	cmp	r3, r2
 8004398:	d9ee      	bls.n	8004378 <SD_read+0x68>
        }
      }
    }
  }

  return res;
 800439a:	7dfb      	ldrb	r3, [r7, #23]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000728 	.word	0x20000728

080043a8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	75fb      	strb	r3, [r7, #23]
  WriteStatus = 0;
 80043bc:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <SD_write+0x88>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	68b8      	ldr	r0, [r7, #8]
 80043c8:	f002 fc98 	bl	8006cfc <BSP_SD_WriteBlocks_DMA>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d128      	bne.n	8004424 <SD_write+0x7c>
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */
//    BSP_DBG_On(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
    timeout = HAL_GetTick();
 80043d2:	f002 fda7 	bl	8006f24 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]
    osSemaphoreWait(sdioSem_id, SD_TIMEOUT);
 80043d8:	4b16      	ldr	r3, [pc, #88]	; (8004434 <SD_write+0x8c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f247 5130 	movw	r1, #30000	; 0x7530
 80043e0:	4618      	mov	r0, r3
 80043e2:	f012 ff61 	bl	80172a8 <osSemaphoreWait>
//    {
//    }
//    BSP_DBG_Off(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <SD_write+0x88>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d102      	bne.n	80043f4 <SD_write+0x4c>
    {
      res = RES_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	75fb      	strb	r3, [r7, #23]
 80043f2:	e017      	b.n	8004424 <SD_write+0x7c>
    }
    else
    {
      WriteStatus = 0;
 80043f4:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <SD_write+0x88>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 80043fa:	f002 fd93 	bl	8006f24 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004400:	e007      	b.n	8004412 <SD_write+0x6a>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004402:	f002 fcf1 	bl	8006de8 <BSP_SD_GetCardState>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <SD_write+0x6a>
        {
          res = RES_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	75fb      	strb	r3, [r7, #23]
          break;
 8004410:	e008      	b.n	8004424 <SD_write+0x7c>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004412:	f002 fd87 	bl	8006f24 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f247 522f 	movw	r2, #29999	; 0x752f
 8004420:	4293      	cmp	r3, r2
 8004422:	d9ee      	bls.n	8004402 <SD_write+0x5a>
        }
      }
    }
  }

  return res;
 8004424:	7dfb      	ldrb	r3, [r7, #23]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000724 	.word	0x20000724
 8004434:	20018704 	.word	0x20018704

08004438 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08c      	sub	sp, #48	; 0x30
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	603a      	str	r2, [r7, #0]
 8004442:	71fb      	strb	r3, [r7, #7]
 8004444:	460b      	mov	r3, r1
 8004446:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800444e:	4b25      	ldr	r3, [pc, #148]	; (80044e4 <SD_ioctl+0xac>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <SD_ioctl+0x28>
 800445c:	2303      	movs	r3, #3
 800445e:	e03c      	b.n	80044da <SD_ioctl+0xa2>

  switch (cmd)
 8004460:	79bb      	ldrb	r3, [r7, #6]
 8004462:	2b03      	cmp	r3, #3
 8004464:	d834      	bhi.n	80044d0 <SD_ioctl+0x98>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <SD_ioctl+0x34>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	0800447d 	.word	0x0800447d
 8004470:	08004485 	.word	0x08004485
 8004474:	0800449d 	.word	0x0800449d
 8004478:	080044b7 	.word	0x080044b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004482:	e028      	b.n	80044d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004484:	f107 0308 	add.w	r3, r7, #8
 8004488:	4618      	mov	r0, r3
 800448a:	f002 fcbd 	bl	8006e08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800448e:	6a3a      	ldr	r2, [r7, #32]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800449a:	e01c      	b.n	80044d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800449c:	f107 0308 	add.w	r3, r7, #8
 80044a0:	4618      	mov	r0, r3
 80044a2:	f002 fcb1 	bl	8006e08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80044b4:	e00f      	b.n	80044d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	4618      	mov	r0, r3
 80044bc:	f002 fca4 	bl	8006e08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	0a5a      	lsrs	r2, r3, #9
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80044ce:	e002      	b.n	80044d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80044d0:	2304      	movs	r3, #4
 80044d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80044d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3730      	adds	r7, #48	; 0x30
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000034 	.word	0x20000034

080044e8 <BSP_SD_WriteCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  WriteStatus = 1;
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <BSP_SD_WriteCpltCallback+0x18>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
  osSemaphoreRelease(sdioSem_id);
 80044f2:	4b04      	ldr	r3, [pc, #16]	; (8004504 <BSP_SD_WriteCpltCallback+0x1c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f012 ff24 	bl	8017344 <osSemaphoreRelease>
}
 80044fc:	bf00      	nop
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000724 	.word	0x20000724
 8004504:	20018704 	.word	0x20018704

08004508 <BSP_SD_ReadCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <BSP_SD_ReadCpltCallback+0x14>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	20000728 	.word	0x20000728

08004520 <Enable_Sensors>:
uint32_t SD_Logging_Enabled = 0;
#endif

/*----------------------------------------------------------------------------*/
void Enable_Sensors(void)
{  
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Comment or uncomment each of the following lines
  * to chose which sensor you want to log.         */
  
  Activate_Sensor(iis3dwb_com_id);
 8004524:	4b03      	ldr	r3, [pc, #12]	; (8004534 <Enable_Sensors+0x14>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 f805 	bl	8004538 <Activate_Sensor>
  Activate_Sensor(mp23abs1_com_id);
  Activate_Sensor(ism330dhcx_com_id);
  Activate_Sensor(lps22hh_com_id);
  Activate_Sensor(stts751_com_id);
#endif
}
 800452e:	bf00      	nop
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20016040 	.word	0x20016040

08004538 <Activate_Sensor>:


void Activate_Sensor(uint32_t id)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	4618      	mov	r0, r3
 8004546:	f7fd fb5b 	bl	8001c00 <COM_GetSensorStatus>
 800454a:	60f8      	str	r0, [r7, #12]
  sensor_status->isActive = 1;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	739a      	strb	r2, [r3, #14]
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <SDM_Thread>:



/*----------------------------------------------------------------------------*/
static void SDM_Thread(void const *argument)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b09a      	sub	sp, #104	; 0x68
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  (void)argument;
  osEvent evt;
  DIR dir;
  static FILINFO fno;
  int isJSON = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	667b      	str	r3, [r7, #100]	; 0x64
  
  if (BSP_SD_IsDetected())
 8004568:	f002 fb94 	bl	8006c94 <BSP_SD_IsDetected>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d063      	beq.n	800463a <SDM_Thread+0xde>
  {        
    if (init_SD_peripheral != 1)
 8004572:	4b91      	ldr	r3, [pc, #580]	; (80047b8 <SDM_Thread+0x25c>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d004      	beq.n	8004584 <SDM_Thread+0x28>
    {
      SDM_SD_Init();
 800457a:	f000 f9f9 	bl	8004970 <SDM_SD_Init>
      init_SD_peripheral = 1;
 800457e:	4b8e      	ldr	r3, [pc, #568]	; (80047b8 <SDM_Thread+0x25c>)
 8004580:	2201      	movs	r2, #1
 8004582:	701a      	strb	r2, [r3, #0]
    }
    
    /* Check if a custom configuration JSON is available in the root folder of the SD Card*/   
    (void)f_opendir(&dir, "/"); /* Open the root directory */
 8004584:	f107 030c 	add.w	r3, r7, #12
 8004588:	498c      	ldr	r1, [pc, #560]	; (80047bc <SDM_Thread+0x260>)
 800458a:	4618      	mov	r0, r3
 800458c:	f012 fa84 	bl	8016a98 <f_opendir>
    
    for (;;) 
    {
      (void)f_readdir(&dir, &fno); /* Read files in root folder */
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	498a      	ldr	r1, [pc, #552]	; (80047c0 <SDM_Thread+0x264>)
 8004596:	4618      	mov	r0, r3
 8004598:	f012 fb17 	bl	8016bca <f_readdir>
      if (fno.fname[0] == 0) break;
 800459c:	4b88      	ldr	r3, [pc, #544]	; (80047c0 <SDM_Thread+0x264>)
 800459e:	7d9b      	ldrb	r3, [r3, #22]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d034      	beq.n	800460e <SDM_Thread+0xb2>
      if (fno.fattrib & AM_ARC) /* It is a file. */
 80045a4:	4b86      	ldr	r3, [pc, #536]	; (80047c0 <SDM_Thread+0x264>)
 80045a6:	7a1b      	ldrb	r3, [r3, #8]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0ef      	beq.n	8004590 <SDM_Thread+0x34>
      {
        isJSON = strcmp(".json",fno.fname);
 80045b0:	4984      	ldr	r1, [pc, #528]	; (80047c4 <SDM_Thread+0x268>)
 80045b2:	4885      	ldr	r0, [pc, #532]	; (80047c8 <SDM_Thread+0x26c>)
 80045b4:	f7fb fe24 	bl	8000200 <strcmp>
 80045b8:	6678      	str	r0, [r7, #100]	; 0x64
        if (isJSON)
 80045ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d028      	beq.n	8004612 <SDM_Thread+0xb6>
        {
          if(f_open(&FileConfigJSON, fno.fname, FA_OPEN_EXISTING | FA_READ) == FR_OK)
 80045c0:	2201      	movs	r2, #1
 80045c2:	4980      	ldr	r1, [pc, #512]	; (80047c4 <SDM_Thread+0x268>)
 80045c4:	4881      	ldr	r0, [pc, #516]	; (80047cc <SDM_Thread+0x270>)
 80045c6:	f011 fd4d 	bl	8016064 <f_open>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d120      	bne.n	8004612 <SDM_Thread+0xb6>
          {  
            char* config_JSON_string = NULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	663b      	str	r3, [r7, #96]	; 0x60
            int sizeFile;
            uint32_t br;  
            sizeFile = f_size(&FileConfigJSON)+1;
 80045d4:	4b7d      	ldr	r3, [pc, #500]	; (80047cc <SDM_Thread+0x270>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	3301      	adds	r3, #1
 80045da:	65fb      	str	r3, [r7, #92]	; 0x5c
            config_JSON_string = HSD_malloc(sizeFile);
 80045dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045de:	4618      	mov	r0, r3
 80045e0:	f019 fca0 	bl	801df24 <malloc>
 80045e4:	4603      	mov	r3, r0
 80045e6:	663b      	str	r3, [r7, #96]	; 0x60
            f_read (&FileConfigJSON, config_JSON_string, sizeFile, &br);
 80045e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045ea:	f107 0308 	add.w	r3, r7, #8
 80045ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80045f0:	4876      	ldr	r0, [pc, #472]	; (80047cc <SDM_Thread+0x270>)
 80045f2:	f011 fef5 	bl	80163e0 <f_read>
            SDM_ReadJSON(config_JSON_string);
 80045f6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80045f8:	f000 fdba 	bl	8005170 <SDM_ReadJSON>
            HSD_JSON_free(config_JSON_string);
 80045fc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80045fe:	f7fc fd31 	bl	8001064 <HSD_JSON_free>
            config_JSON_string = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	663b      	str	r3, [r7, #96]	; 0x60
            f_close(&FileConfigJSON);
 8004606:	4871      	ldr	r0, [pc, #452]	; (80047cc <SDM_Thread+0x270>)
 8004608:	f012 fa1c 	bl	8016a44 <f_close>
          }
        }
        break; 
 800460c:	e001      	b.n	8004612 <SDM_Thread+0xb6>
      if (fno.fname[0] == 0) break;
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <SDM_Thread+0xb8>
        break; 
 8004612:	bf00      	nop
      }
    }
    f_closedir(&dir);
 8004614:	f107 030c 	add.w	r3, r7, #12
 8004618:	4618      	mov	r0, r3
 800461a:	f012 fab0 	bl	8016b7e <f_closedir>
    
    if (isJSON == 0)
 800461e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <SDM_Thread+0xcc>
    {
      Enable_Sensors();    
 8004624:	f7ff ff7c 	bl	8004520 <Enable_Sensors>
    }
    
    if (init_SD_peripheral != 0)
 8004628:	4b63      	ldr	r3, [pc, #396]	; (80047b8 <SDM_Thread+0x25c>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <SDM_Thread+0xde>
    {
      SDM_SD_DeInit();
 8004630:	f000 f9c6 	bl	80049c0 <SDM_SD_DeInit>
      init_SD_peripheral = 0;
 8004634:	4b60      	ldr	r3, [pc, #384]	; (80047b8 <SDM_Thread+0x25c>)
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
    }   
  }
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SDM_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SDM_DEBUG_PIN );
 800463a:	2102      	movs	r1, #2
 800463c:	2000      	movs	r0, #0
 800463e:	f014 fd19 	bl	8019074 <vTaskSetApplicationTaskTag>
#endif
  for (;;)
  {
    BSP_LED_Off(LED1); 
 8004642:	2000      	movs	r0, #0
 8004644:	f001 ff08 	bl	8006458 <BSP_LED_Off>
    
    /* If the battery is too low close the file and turn off the system */
    if(BatteryLow == 1)
 8004648:	4b61      	ldr	r3, [pc, #388]	; (80047d0 <SDM_Thread+0x274>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d117      	bne.n	8004682 <SDM_Thread+0x126>
    {
#ifdef LOG_ERROR
      batt_error();
#endif      
      SM_TIM_Stop();
 8004652:	f001 f965 	bl	8005920 <SM_TIM_Stop>
      if(SDM_CloseFiles() == 0)
 8004656:	f000 fb07 	bl	8004c68 <SDM_CloseFiles>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <SDM_Thread+0x10a>
      {
        SD_Logging_Active = 0;
 8004660:	4b5c      	ldr	r3, [pc, #368]	; (80047d4 <SDM_Thread+0x278>)
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
      }
      SDM_Memory_Deinit();
 8004666:	f000 f909 	bl	800487c <SDM_Memory_Deinit>
      
      if (init_SD_peripheral != 0)
 800466a:	4b53      	ldr	r3, [pc, #332]	; (80047b8 <SDM_Thread+0x25c>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d004      	beq.n	800467c <SDM_Thread+0x120>
      {
        SDM_SD_DeInit();
 8004672:	f000 f9a5 	bl	80049c0 <SDM_SD_DeInit>
        init_SD_peripheral = 0;
 8004676:	4b50      	ldr	r3, [pc, #320]	; (80047b8 <SDM_Thread+0x25c>)
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
      }
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 800467c:	2017      	movs	r0, #23
 800467e:	f001 ff0d 	bl	800649c <BSP_BC_CmdSend>
    }      
    
    evt = osMessageGet(sdThreadQueue_id, osWaitForever);  // wait for message      
 8004682:	4b55      	ldr	r3, [pc, #340]	; (80047d8 <SDM_Thread+0x27c>)
 8004684:	6819      	ldr	r1, [r3, #0]
 8004686:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800468a:	f04f 32ff 	mov.w	r2, #4294967295
 800468e:	4618      	mov	r0, r3
 8004690:	f012 ffe0 	bl	8017654 <osMessageGet>
    
    if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 8004694:	4b51      	ldr	r3, [pc, #324]	; (80047dc <SDM_Thread+0x280>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <SDM_Thread+0x14c>
 800469e:	4b4f      	ldr	r3, [pc, #316]	; (80047dc <SDM_Thread+0x280>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d1cc      	bne.n	8004642 <SDM_Thread+0xe6>
    {      
      BSP_LED_On(LED1);
 80046a8:	2000      	movs	r0, #0
 80046aa:	f001 febb 	bl	8006424 <BSP_LED_On>
      
      if (evt.status == osEventMessage)
 80046ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d1c6      	bne.n	8004642 <SDM_Thread+0xe6>
      {
        if(evt.value.v == SDM_START_STOP)
 80046b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b6:	f248 0201 	movw	r2, #32769	; 0x8001
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d14b      	bne.n	8004756 <SDM_Thread+0x1fa>
        {
          if(SD_Logging_Active == 0)
 80046be:	4b45      	ldr	r3, [pc, #276]	; (80047d4 <SDM_Thread+0x278>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d12a      	bne.n	800471c <SDM_Thread+0x1c0>
          {
            com_status = HS_DATALOG_SD_STARTED;            
 80046c6:	4b45      	ldr	r3, [pc, #276]	; (80047dc <SDM_Thread+0x280>)
 80046c8:	2202      	movs	r2, #2
 80046ca:	701a      	strb	r2, [r3, #0]
            SM_TIM_Start();
 80046cc:	f001 f91e 	bl	800590c <SM_TIM_Start>
            if (BSP_SD_IsDetected())
 80046d0:	f002 fae0 	bl	8006c94 <BSP_SD_IsDetected>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01c      	beq.n	8004714 <SDM_Thread+0x1b8>
            {              
              if (init_SD_peripheral != 1)
 80046da:	4b37      	ldr	r3, [pc, #220]	; (80047b8 <SDM_Thread+0x25c>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d004      	beq.n	80046ec <SDM_Thread+0x190>
              {
                SDM_SD_Init();
 80046e2:	f000 f945 	bl	8004970 <SDM_SD_Init>
                init_SD_peripheral = 1;
 80046e6:	4b34      	ldr	r3, [pc, #208]	; (80047b8 <SDM_Thread+0x25c>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]
              }
              SD_present = 1;
 80046ec:	4b3c      	ldr	r3, [pc, #240]	; (80047e0 <SDM_Thread+0x284>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
              if(SDM_InitFiles() == 0)
 80046f2:	f000 fa41 	bl	8004b78 <SDM_InitFiles>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d105      	bne.n	8004708 <SDM_Thread+0x1ac>
              {
                SD_Logging_Active = 1;
 80046fc:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <SDM_Thread+0x278>)
 80046fe:	2201      	movs	r2, #1
 8004700:	701a      	strb	r2, [r3, #0]
                BSP_LED_Off(LED_ORANGE);
 8004702:	2001      	movs	r0, #1
 8004704:	f001 fea8 	bl	8006458 <BSP_LED_Off>
              }
              testTime = HAL_GetTick();
 8004708:	f002 fc0c 	bl	8006f24 <HAL_GetTick>
 800470c:	4603      	mov	r3, r0
 800470e:	4a35      	ldr	r2, [pc, #212]	; (80047e4 <SDM_Thread+0x288>)
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e796      	b.n	8004642 <SDM_Thread+0xe6>
            }
            else
            {
              SD_present = 0;
 8004714:	4b32      	ldr	r3, [pc, #200]	; (80047e0 <SDM_Thread+0x284>)
 8004716:	2200      	movs	r2, #0
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e792      	b.n	8004642 <SDM_Thread+0xe6>
            }
          }
          else if (SD_Logging_Active == 1)
 800471c:	4b2d      	ldr	r3, [pc, #180]	; (80047d4 <SDM_Thread+0x278>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d18e      	bne.n	8004642 <SDM_Thread+0xe6>
          {      
            SM_TIM_Stop();
 8004724:	f001 f8fc 	bl	8005920 <SM_TIM_Stop>
            
            if(SDM_CloseFiles() == 0)
 8004728:	f000 fa9e 	bl	8004c68 <SDM_CloseFiles>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d102      	bne.n	8004738 <SDM_Thread+0x1dc>
            {
              SD_Logging_Active = 0;
 8004732:	4b28      	ldr	r3, [pc, #160]	; (80047d4 <SDM_Thread+0x278>)
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]
            }
            SDM_Memory_Deinit();
 8004738:	f000 f8a0 	bl	800487c <SDM_Memory_Deinit>
            
            if (init_SD_peripheral != 0)
 800473c:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <SDM_Thread+0x25c>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <SDM_Thread+0x1f2>
            {
              SDM_SD_DeInit();
 8004744:	f000 f93c 	bl	80049c0 <SDM_SD_DeInit>
              init_SD_peripheral = 0;
 8004748:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <SDM_Thread+0x25c>)
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
            }
            com_status = HS_DATALOG_IDLE;
 800474e:	4b23      	ldr	r3, [pc, #140]	; (80047dc <SDM_Thread+0x280>)
 8004750:	2200      	movs	r2, #0
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e775      	b.n	8004642 <SDM_Thread+0xe6>
          }
        }
        else
        {
          if(evt.value.v & SDM_DATA_READY_MASK)
 8004756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475c:	2b00      	cmp	r3, #0
 800475e:	f43f af70 	beq.w	8004642 <SDM_Thread+0xe6>
          {
            COM_SensorStatus_t * sensor_status; 
            uint32_t buf_size;
            uint8_t sensor_id = (uint8_t)(evt.value.v & SDM_SENSOR_ID_MASK);
 8004762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004764:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            {
              oldTime[sensor_id] = HAL_GetTick();
            }
#endif          
            
            sensor_status = COM_GetSensorStatus(sensor_id);
 8004768:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800476c:	4618      	mov	r0, r3
 800476e:	f7fd fa47 	bl	8001c00 <COM_GetSensorStatus>
 8004772:	6578      	str	r0, [r7, #84]	; 0x54
            buf_size = sensor_status->sdWriteBufferSize;
 8004774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	653b      	str	r3, [r7, #80]	; 0x50
            
            if(evt.value.v & SDM_DATA_FIRST_HALF_MASK) // Data available on first half of the circular buffer
 800477a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800477c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00b      	beq.n	800479c <SDM_Thread+0x240>
            {
              SDM_WriteBuffer(sensor_id, SD_WriteBuffer[sensor_id], buf_size);
 8004784:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 8004788:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800478c:	4a16      	ldr	r2, [pc, #88]	; (80047e8 <SDM_Thread+0x28c>)
 800478e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004794:	4619      	mov	r1, r3
 8004796:	f000 fb0d 	bl	8004db4 <SDM_WriteBuffer>
 800479a:	e752      	b.n	8004642 <SDM_Thread+0xe6>
            }
            else // Data available on second half of the circular buffer
            {
              SDM_WriteBuffer(sensor_id, (uint8_t *)(SD_WriteBuffer[sensor_id]+buf_size), buf_size);
 800479c:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 80047a0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80047a4:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <SDM_Thread+0x28c>)
 80047a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80047aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ac:	4413      	add	r3, r2
 80047ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047b0:	4619      	mov	r1, r3
 80047b2:	f000 faff 	bl	8004db4 <SDM_WriteBuffer>
    BSP_LED_Off(LED1); 
 80047b6:	e744      	b.n	8004642 <SDM_Thread+0xe6>
 80047b8:	20000756 	.word	0x20000756
 80047bc:	08022488 	.word	0x08022488
 80047c0:	2000076c 	.word	0x2000076c
 80047c4:	20000782 	.word	0x20000782
 80047c8:	0802248c 	.word	0x0802248c
 80047cc:	20018480 	.word	0x20018480
 80047d0:	20000760 	.word	0x20000760
 80047d4:	20000754 	.word	0x20000754
 80047d8:	20018478 	.word	0x20018478
 80047dc:	200002d4 	.word	0x200002d4
 80047e0:	20000755 	.word	0x20000755
 80047e4:	2000075c 	.word	0x2000075c
 80047e8:	200186dc 	.word	0x200186dc

080047ec <HAL_PWR_PVDCallback>:
* @brief  PWR PVD interrupt callback
* @param  None 
* @retval None
*/
void HAL_PWR_PVDCallback(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  BatteryLow = 1;
 80047f0:	4b03      	ldr	r3, [pc, #12]	; (8004800 <HAL_PWR_PVDCallback+0x14>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	701a      	strb	r2, [r3, #0]
}
 80047f6:	bf00      	nop
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	20000760 	.word	0x20000760

08004804 <SDM_Memory_Init>:
*         the SD_WriteBuffer associated to each active sensor.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Init(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 800480a:	f7fd f9c7 	bl	8001b9c <COM_GetDeviceDescriptor>
 800480e:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e026      	b.n	8004864 <SDM_Memory_Init+0x60>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	4618      	mov	r0, r3
 800481c:	f7fd f9f0 	bl	8001c00 <COM_GetSensorStatus>
 8004820:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	7b9b      	ldrb	r3, [r3, #14]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d014      	beq.n	8004854 <SDM_Memory_Init+0x50>
    {
      SD_WriteBuffer[i] = HSD_malloc(sensor_status->sdWriteBufferSize*2);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4618      	mov	r0, r3
 8004832:	f019 fb77 	bl	801df24 <malloc>
 8004836:	4603      	mov	r3, r0
 8004838:	4619      	mov	r1, r3
 800483a:	4a0f      	ldr	r2, [pc, #60]	; (8004878 <SDM_Memory_Init+0x74>)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      if(!SD_WriteBuffer[i])
 8004842:	4a0d      	ldr	r2, [pc, #52]	; (8004878 <SDM_Memory_Init+0x74>)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d107      	bne.n	800485e <SDM_Memory_Init+0x5a>
      {
        _Error_Handler();
 800484e:	f000 fd9d 	bl	800538c <_Error_Handler>
 8004852:	e004      	b.n	800485e <SDM_Memory_Init+0x5a>
      }
    }
    else
    {
      SD_WriteBuffer[i] = 0;
 8004854:	4a08      	ldr	r2, [pc, #32]	; (8004878 <SDM_Memory_Init+0x74>)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2100      	movs	r1, #0
 800485a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3301      	adds	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	429a      	cmp	r2, r3
 800486c:	d3d3      	bcc.n	8004816 <SDM_Memory_Init+0x12>
    }
  }
  return 1;
 800486e:	2301      	movs	r3, #1
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	200186dc 	.word	0x200186dc

0800487c <SDM_Memory_Deinit>:
* @brief  SD Card Manager memory De-initialization.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Deinit(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 8004882:	f7fd f98b 	bl	8001b9c <COM_GetDeviceDescriptor>
 8004886:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e01e      	b.n	80048cc <SDM_Memory_Deinit+0x50>
  {
    sensor_status = COM_GetSensorStatus(i);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	4618      	mov	r0, r3
 8004894:	f7fd f9b4 	bl	8001c00 <COM_GetSensorStatus>
 8004898:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive && SD_WriteBuffer[i]!=0)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	7b9b      	ldrb	r3, [r3, #14]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d011      	beq.n	80048c6 <SDM_Memory_Deinit+0x4a>
 80048a2:	4a0f      	ldr	r2, [pc, #60]	; (80048e0 <SDM_Memory_Deinit+0x64>)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <SDM_Memory_Deinit+0x4a>
    {
      HSD_free(SD_WriteBuffer[i]);
 80048ae:	4a0c      	ldr	r2, [pc, #48]	; (80048e0 <SDM_Memory_Deinit+0x64>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f019 fb3c 	bl	801df34 <free>
      SD_WriteBuffer[i] = NULL;
 80048bc:	4a08      	ldr	r2, [pc, #32]	; (80048e0 <SDM_Memory_Deinit+0x64>)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2100      	movs	r1, #0
 80048c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d3db      	bcc.n	800488e <SDM_Memory_Deinit+0x12>
    }
  }
  return 1;
 80048d6:	2301      	movs	r3, #1
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200186dc 	.word	0x200186dc

080048e4 <SDM_Peripheral_Init>:


void SDM_Peripheral_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  BSP_SD_Detect_Init();   
 80048e8:	f002 f9ae 	bl	8006c48 <BSP_SD_Detect_Init>
}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <SDM_OS_Init>:
* @brief  Initialize SD Card Manager thread and queue
* @param  None
* @retval None
*/
void SDM_OS_Init(void)
{
 80048f0:	b5b0      	push	{r4, r5, r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
  sdioSem_id = osSemaphoreCreate(osSemaphore(sdioSem), 1);
 80048f6:	2101      	movs	r1, #1
 80048f8:	4816      	ldr	r0, [pc, #88]	; (8004954 <SDM_OS_Init+0x64>)
 80048fa:	f012 fcb1 	bl	8017260 <osSemaphoreCreate>
 80048fe:	4603      	mov	r3, r0
 8004900:	4a15      	ldr	r2, [pc, #84]	; (8004958 <SDM_OS_Init+0x68>)
 8004902:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(sdioSem_id, osWaitForever);
 8004904:	4b14      	ldr	r3, [pc, #80]	; (8004958 <SDM_OS_Init+0x68>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f04f 31ff 	mov.w	r1, #4294967295
 800490c:	4618      	mov	r0, r3
 800490e:	f012 fccb 	bl	80172a8 <osSemaphoreWait>
  
  sdThreadQueue_id = osMessageCreate(osMessageQ(sdThreadQueue), NULL);
 8004912:	2100      	movs	r1, #0
 8004914:	4811      	ldr	r0, [pc, #68]	; (800495c <SDM_OS_Init+0x6c>)
 8004916:	f012 fe4b 	bl	80175b0 <osMessageCreate>
 800491a:	4603      	mov	r3, r0
 800491c:	4a10      	ldr	r2, [pc, #64]	; (8004960 <SDM_OS_Init+0x70>)
 800491e:	6013      	str	r3, [r2, #0]
  
  vQueueAddToRegistry( sdThreadQueue_id, "sdThreadQueue_id" );
 8004920:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <SDM_OS_Init+0x70>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	490f      	ldr	r1, [pc, #60]	; (8004964 <SDM_OS_Init+0x74>)
 8004926:	4618      	mov	r0, r3
 8004928:	f013 fea8 	bl	801867c <vQueueAddToRegistry>
  
  /* Thread definition: read data */
  osThreadDef(SDM_On_Off_Thread, SDM_Thread, SD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE*4);
 800492c:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <SDM_OS_Init+0x78>)
 800492e:	1d3c      	adds	r4, r7, #4
 8004930:	461d      	mov	r5, r3
 8004932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004936:	682b      	ldr	r3, [r5, #0]
 8004938:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  SDM_Thread_Id = osThreadCreate(osThread(SDM_On_Off_Thread), NULL);
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f012 fc67 	bl	8017212 <osThreadCreate>
 8004944:	4603      	mov	r3, r0
 8004946:	4a09      	ldr	r2, [pc, #36]	; (800496c <SDM_OS_Init+0x7c>)
 8004948:	6013      	str	r3, [r2, #0]
}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bdb0      	pop	{r4, r5, r7, pc}
 8004952:	bf00      	nop
 8004954:	080227a4 	.word	0x080227a4
 8004958:	20018704 	.word	0x20018704
 800495c:	080227a8 	.word	0x080227a8
 8004960:	20018478 	.word	0x20018478
 8004964:	080224c4 	.word	0x080224c4
 8004968:	080224d8 	.word	0x080224d8
 800496c:	200186d8 	.word	0x200186d8

08004970 <SDM_SD_Init>:
* @brief  Initialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8004974:	490f      	ldr	r1, [pc, #60]	; (80049b4 <SDM_SD_Init+0x44>)
 8004976:	4810      	ldr	r0, [pc, #64]	; (80049b8 <SDM_SD_Init+0x48>)
 8004978:	f012 fafe 	bl	8016f78 <FATFS_LinkDriver>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d115      	bne.n	80049ae <SDM_SD_Init+0x3e>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8004982:	2200      	movs	r2, #0
 8004984:	490b      	ldr	r1, [pc, #44]	; (80049b4 <SDM_SD_Init+0x44>)
 8004986:	480d      	ldr	r0, [pc, #52]	; (80049bc <SDM_SD_Init+0x4c>)
 8004988:	f011 fb26 	bl	8015fd8 <f_mount>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00d      	beq.n	80049ae <SDM_SD_Init+0x3e>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 8004992:	2000      	movs	r0, #0
 8004994:	f001 fd46 	bl	8006424 <BSP_LED_On>
        HAL_Delay(500);
 8004998:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800499c:	f002 face 	bl	8006f3c <HAL_Delay>
        BSP_LED_Off(LED1);
 80049a0:	2000      	movs	r0, #0
 80049a2:	f001 fd59 	bl	8006458 <BSP_LED_Off>
        HAL_Delay(100);
 80049a6:	2064      	movs	r0, #100	; 0x64
 80049a8:	f002 fac8 	bl	8006f3c <HAL_Delay>
        BSP_LED_On(LED1);
 80049ac:	e7f1      	b.n	8004992 <SDM_SD_Init+0x22>
      }
    }
  }
}
 80049ae:	bf00      	nop
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	2001847c 	.word	0x2001847c
 80049b8:	08022790 	.word	0x08022790
 80049bc:	20016804 	.word	0x20016804

080049c0 <SDM_SD_DeInit>:
* @brief  Deinitialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_DeInit(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  if(FATFS_UnLinkDriver(SDPath) == 0)
 80049c4:	480e      	ldr	r0, [pc, #56]	; (8004a00 <SDM_SD_DeInit+0x40>)
 80049c6:	f012 fb1f 	bl	8017008 <FATFS_UnLinkDriver>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d115      	bne.n	80049fc <SDM_SD_DeInit+0x3c>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(NULL, (TCHAR const*)SDPath, 0) != FR_OK)
 80049d0:	2200      	movs	r2, #0
 80049d2:	490b      	ldr	r1, [pc, #44]	; (8004a00 <SDM_SD_DeInit+0x40>)
 80049d4:	2000      	movs	r0, #0
 80049d6:	f011 faff 	bl	8015fd8 <f_mount>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00d      	beq.n	80049fc <SDM_SD_DeInit+0x3c>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 80049e0:	2000      	movs	r0, #0
 80049e2:	f001 fd1f 	bl	8006424 <BSP_LED_On>
        HAL_Delay(500);
 80049e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049ea:	f002 faa7 	bl	8006f3c <HAL_Delay>
        BSP_LED_Off(LED1);
 80049ee:	2000      	movs	r0, #0
 80049f0:	f001 fd32 	bl	8006458 <BSP_LED_Off>
        HAL_Delay(100);
 80049f4:	2064      	movs	r0, #100	; 0x64
 80049f6:	f002 faa1 	bl	8006f3c <HAL_Delay>
        BSP_LED_On(LED1);
 80049fa:	e7f1      	b.n	80049e0 <SDM_SD_DeInit+0x20>
      }
    }
  }
}
 80049fc:	bf00      	nop
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	2001847c 	.word	0x2001847c

08004a04 <SDM_OpenFile>:
  return 0; // OK
}


uint8_t SDM_OpenFile(uint32_t id, const char *sensorName)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b090      	sub	sp, #64	; 0x40
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  char file_name[50];
  
  sprintf(file_name, "%s%s", sensorName, ".dat");
 8004a0e:	f107 000c 	add.w	r0, r7, #12
 8004a12:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <SDM_OpenFile+0x48>)
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	490e      	ldr	r1, [pc, #56]	; (8004a50 <SDM_OpenFile+0x4c>)
 8004a18:	f019 fff8 	bl	801ea0c <siprintf>
  
  if(f_open(&FileHandler[id], (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <SDM_OpenFile+0x50>)
 8004a28:	4413      	add	r3, r2
 8004a2a:	f107 010c 	add.w	r1, r7, #12
 8004a2e:	220a      	movs	r2, #10
 8004a30:	4618      	mov	r0, r3
 8004a32:	f011 fb17 	bl	8016064 <f_open>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <SDM_OpenFile+0x3c>
  {
    return 1;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <SDM_OpenFile+0x3e>
  }
  
  return 0; // OK
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3740      	adds	r7, #64	; 0x40
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	08022520 	.word	0x08022520
 8004a50:	08022528 	.word	0x08022528
 8004a54:	20016e98 	.word	0x20016e98

08004a58 <SDM_CloseFile>:


uint8_t SDM_CloseFile(uint32_t id)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  return f_close(&FileHandler[id]);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	4a05      	ldr	r2, [pc, #20]	; (8004a80 <SDM_CloseFile+0x28>)
 8004a6c:	4413      	add	r3, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f011 ffe8 	bl	8016a44 <f_close>
 8004a74:	4603      	mov	r3, r0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20016e98 	.word	0x20016e98

08004a84 <SDM_GetLastDirNumber>:
* @brief  Scan SD Card file system to find the latest directory number that includes to the LOG_DIR_PREFIX
* @param  None
* @retval 
*/
uint32_t SDM_GetLastDirNumber(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b0da      	sub	sp, #360	; 0x168
 8004a88:	af00      	add	r7, sp, #0
  FRESULT fr;     /* Return value */
  DIR dj;         /* Directory search object */
  FILINFO fno;    /* File information */
  int dir_n = 0, tmp;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  char dir_name[sizeof(LOG_DIR_PREFIX)+1] = LOG_DIR_PREFIX;
 8004a90:	1d3a      	adds	r2, r7, #4
 8004a92:	4937      	ldr	r1, [pc, #220]	; (8004b70 <SDM_GetLastDirNumber+0xec>)
 8004a94:	4613      	mov	r3, r2
 8004a96:	c903      	ldmia	r1, {r0, r1}
 8004a98:	6018      	str	r0, [r3, #0]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	8019      	strh	r1, [r3, #0]
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	0c09      	lsrs	r1, r1, #16
 8004aa2:	7019      	strb	r1, [r3, #0]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	71d3      	strb	r3, [r2, #7]
  
  dir_name[sizeof(LOG_DIR_PREFIX)-1] = '*';  /* wildcard */
 8004aa8:	1d3b      	adds	r3, r7, #4
 8004aaa:	222a      	movs	r2, #42	; 0x2a
 8004aac:	719a      	strb	r2, [r3, #6]
  dir_name[sizeof(LOG_DIR_PREFIX)] = 0;
 8004aae:	1d3b      	adds	r3, r7, #4
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	71da      	strb	r2, [r3, #7]
  
  fr = f_findfirst(&dj, &fno, "", dir_name);  /* Start to search for matching directories */
 8004ab4:	1d3b      	adds	r3, r7, #4
 8004ab6:	f107 010c 	add.w	r1, r7, #12
 8004aba:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8004abe:	4a2d      	ldr	r2, [pc, #180]	; (8004b74 <SDM_GetLastDirNumber+0xf0>)
 8004ac0:	f012 f8e8 	bl	8016c94 <f_findfirst>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  if(fno.fname[0])
 8004aca:	f107 030c 	add.w	r3, r7, #12
 8004ace:	7d9b      	ldrb	r3, [r3, #22]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d038      	beq.n	8004b46 <SDM_GetLastDirNumber+0xc2>
  {
    tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8004ad4:	f107 030c 	add.w	r3, r7, #12
 8004ad8:	331d      	adds	r3, #29
 8004ada:	220a      	movs	r2, #10
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f01a fef0 	bl	801f8c4 <strtol>
 8004ae4:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    if(dir_n<tmp)
 8004ae8:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8004aec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004af0:	429a      	cmp	r2, r3
 8004af2:	da28      	bge.n	8004b46 <SDM_GetLastDirNumber+0xc2>
    {
      dir_n = tmp;
 8004af4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004af8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    }
  }
  
  /* Repeat while an item is found */
  while (fr == FR_OK && fno.fname[0])
 8004afc:	e023      	b.n	8004b46 <SDM_GetLastDirNumber+0xc2>
  {
    fr = f_findnext(&dj, &fno);   /* Search for next item */
 8004afe:	f107 020c 	add.w	r2, r7, #12
 8004b02:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f012 f89b 	bl	8016c44 <f_findnext>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    if(fno.fname[0])
 8004b14:	f107 030c 	add.w	r3, r7, #12
 8004b18:	7d9b      	ldrb	r3, [r3, #22]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d013      	beq.n	8004b46 <SDM_GetLastDirNumber+0xc2>
    {
      tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8004b1e:	f107 030c 	add.w	r3, r7, #12
 8004b22:	331d      	adds	r3, #29
 8004b24:	220a      	movs	r2, #10
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f01a fecb 	bl	801f8c4 <strtol>
 8004b2e:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
      if(tmp > dir_n)
 8004b32:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004b36:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	dd03      	ble.n	8004b46 <SDM_GetLastDirNumber+0xc2>
      {
        dir_n = tmp;
 8004b3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004b42:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  while (fr == FR_OK && fno.fname[0])
 8004b46:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d104      	bne.n	8004b58 <SDM_GetLastDirNumber+0xd4>
 8004b4e:	f107 030c 	add.w	r3, r7, #12
 8004b52:	7d9b      	ldrb	r3, [r3, #22]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1d2      	bne.n	8004afe <SDM_GetLastDirNumber+0x7a>
      }
    }
  }
  
  f_closedir(&dj);
 8004b58:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f012 f80e 	bl	8016b7e <f_closedir>
  return (uint32_t)dir_n;
 8004b62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	08022534 	.word	0x08022534
 8004b74:	08022530 	.word	0x08022530

08004b78 <SDM_InitFiles>:
* @brief  Open one file for each sensor to store raw data and a JSON file with the device configuration
* @param  None
* @retval None
*/
uint8_t SDM_InitFiles(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b096      	sub	sp, #88	; 0x58
 8004b7c:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  COM_SensorDescriptor_t * sensor_descriptor; 
  
  uint32_t i = 0, dir_n = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	657b      	str	r3, [r7, #84]	; 0x54
 8004b82:	2300      	movs	r3, #0
 8004b84:	653b      	str	r3, [r7, #80]	; 0x50
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  
  device_descriptor = COM_GetDeviceDescriptor();  
 8004b86:	f7fd f809 	bl	8001b9c <COM_GetDeviceDescriptor>
 8004b8a:	64f8      	str	r0, [r7, #76]	; 0x4c
  dir_n = SDM_GetLastDirNumber();
 8004b8c:	f7ff ff7a 	bl	8004a84 <SDM_GetLastDirNumber>
 8004b90:	6538      	str	r0, [r7, #80]	; 0x50
  dir_n++;
 8004b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b94:	3301      	adds	r3, #1
 8004b96:	653b      	str	r3, [r7, #80]	; 0x50
  
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8004b98:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b9e:	4a2f      	ldr	r2, [pc, #188]	; (8004c5c <SDM_InitFiles+0xe4>)
 8004ba0:	492f      	ldr	r1, [pc, #188]	; (8004c60 <SDM_InitFiles+0xe8>)
 8004ba2:	f019 ff33 	bl	801ea0c <siprintf>
  
  FRESULT test = f_mkdir(dir_name);
 8004ba6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004baa:	4618      	mov	r0, r3
 8004bac:	f012 f890 	bl	8016cd0 <f_mkdir>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  if(test != FR_OK)
 8004bb6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <SDM_InitFiles+0x4a>
  {
    return 1;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e047      	b.n	8004c52 <SDM_InitFiles+0xda>
  {
    return 1;    
  }
#endif
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	657b      	str	r3, [r7, #84]	; 0x54
 8004bc6:	e024      	b.n	8004c12 <SDM_InitFiles+0x9a>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fd f817 	bl	8001c00 <COM_GetSensorStatus>
 8004bd2:	6478      	str	r0, [r7, #68]	; 0x44
    
    if(sensor_status->isActive)
 8004bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd6:	7b9b      	ldrb	r3, [r3, #14]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d017      	beq.n	8004c0c <SDM_InitFiles+0x94>
    {
      sensor_descriptor = COM_GetSensorDescriptor(i);
 8004bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fc fff9 	bl	8001bd8 <COM_GetSensorDescriptor>
 8004be6:	6438      	str	r0, [r7, #64]	; 0x40
      sprintf(file_name, "%s/%s", dir_name, sensor_descriptor->name);
 8004be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bea:	3301      	adds	r3, #1
 8004bec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	491c      	ldr	r1, [pc, #112]	; (8004c64 <SDM_InitFiles+0xec>)
 8004bf4:	f019 ff0a 	bl	801ea0c <siprintf>
      
      if(SDM_OpenFile(i, file_name)!=0)
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004bfe:	f7ff ff01 	bl	8004a04 <SDM_OpenFile>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <SDM_InitFiles+0x94>
      {
        return 1;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e022      	b.n	8004c52 <SDM_InitFiles+0xda>
  for(i=0;i<device_descriptor->nSensor;i++)
 8004c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0e:	3301      	adds	r3, #1
 8004c10:	657b      	str	r3, [r7, #84]	; 0x54
 8004c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d3d5      	bcc.n	8004bc8 <SDM_InitFiles+0x50>
      }
    }
  }
  
  SDM_Memory_Init();
 8004c1c:	f7ff fdf2 	bl	8004804 <SDM_Memory_Init>
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004c20:	2300      	movs	r3, #0
 8004c22:	657b      	str	r3, [r7, #84]	; 0x54
 8004c24:	e00f      	b.n	8004c46 <SDM_InitFiles+0xce>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fc ffe8 	bl	8001c00 <COM_GetSensorStatus>
 8004c30:	6478      	str	r0, [r7, #68]	; 0x44
    
    if(sensor_status->isActive)
 8004c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c34:	7b9b      	ldrb	r3, [r3, #14]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <SDM_InitFiles+0xc8>
    {
      SDM_StartSensorThread(i);
 8004c3a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004c3c:	f000 f9b4 	bl	8004fa8 <SDM_StartSensorThread>
  for(i=0;i<device_descriptor->nSensor;i++)
 8004c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c42:	3301      	adds	r3, #1
 8004c44:	657b      	str	r3, [r7, #84]	; 0x54
 8004c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d3ea      	bcc.n	8004c26 <SDM_InitFiles+0xae>
    }
  }  
  
  return 0;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3758      	adds	r7, #88	; 0x58
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	0802253c 	.word	0x0802253c
 8004c60:	08022544 	.word	0x08022544
 8004c64:	0802254c 	.word	0x0802254c

08004c68 <SDM_CloseFiles>:

uint8_t SDM_CloseFiles(void)
{
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b097      	sub	sp, #92	; 0x5c
 8004c6c:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t id = 0, dir_n = 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	657b      	str	r3, [r7, #84]	; 0x54
 8004c72:	2300      	movs	r3, #0
 8004c74:	653b      	str	r3, [r7, #80]	; 0x50
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  char* JSON_string = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	607b      	str	r3, [r7, #4]
  
  device_descriptor = COM_GetDeviceDescriptor();
 8004c7a:	f7fc ff8f 	bl	8001b9c <COM_GetDeviceDescriptor>
 8004c7e:	64f8      	str	r0, [r7, #76]	; 0x4c
  
  /* Put all the sensors in "SUSPENDED" mode */
  for(id=0;id<device_descriptor->nSensor;id++)
 8004c80:	2300      	movs	r3, #0
 8004c82:	657b      	str	r3, [r7, #84]	; 0x54
 8004c84:	e00f      	b.n	8004ca6 <SDM_CloseFiles+0x3e>
  {
    sensor_status = COM_GetSensorStatus(id);
 8004c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fc ffb8 	bl	8001c00 <COM_GetSensorStatus>
 8004c90:	64b8      	str	r0, [r7, #72]	; 0x48
    
    if(sensor_status->isActive)
 8004c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c94:	7b9b      	ldrb	r3, [r3, #14]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <SDM_CloseFiles+0x38>
    {
      SDM_StopSensorThread(id);
 8004c9a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004c9c:	f000 f9f6 	bl	800508c <SDM_StopSensorThread>
  for(id=0;id<device_descriptor->nSensor;id++)
 8004ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d3ea      	bcc.n	8004c86 <SDM_CloseFiles+0x1e>
    }
  }
  
  /* Flush remaining data and close the files  */
  for(id=0;id<device_descriptor->nSensor;id++)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8004cb4:	e017      	b.n	8004ce6 <SDM_CloseFiles+0x7e>
  {
    sensor_status = COM_GetSensorStatus(id);
 8004cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fc ffa0 	bl	8001c00 <COM_GetSensorStatus>
 8004cc0:	64b8      	str	r0, [r7, #72]	; 0x48
    
    if(sensor_status->isActive)
 8004cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc4:	7b9b      	ldrb	r3, [r3, #14]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <SDM_CloseFiles+0x78>
    {
      SDM_Flush_Buffer(id);
 8004cca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004ccc:	f000 f892 	bl	8004df4 <SDM_Flush_Buffer>
      if(SDM_CloseFile(id)!=0)
 8004cd0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004cd2:	f7ff fec1 	bl	8004a58 <SDM_CloseFile>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <SDM_CloseFiles+0x78>
      {
        return 1;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e042      	b.n	8004d66 <SDM_CloseFiles+0xfe>
  for(id=0;id<device_descriptor->nSensor;id++)
 8004ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d3e2      	bcc.n	8004cb6 <SDM_CloseFiles+0x4e>
  {
    return 1;
  }  
#endif
  
  dir_n = SDM_GetLastDirNumber();
 8004cf0:	f7ff fec8 	bl	8004a84 <SDM_GetLastDirNumber>
 8004cf4:	6538      	str	r0, [r7, #80]	; 0x50
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8004cf6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfc:	4a1c      	ldr	r2, [pc, #112]	; (8004d70 <SDM_CloseFiles+0x108>)
 8004cfe:	491d      	ldr	r1, [pc, #116]	; (8004d74 <SDM_CloseFiles+0x10c>)
 8004d00:	f019 fe84 	bl	801ea0c <siprintf>
  sprintf(file_name, "%s/DeviceConfig.json", dir_name);
 8004d04:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d08:	f107 0308 	add.w	r3, r7, #8
 8004d0c:	491a      	ldr	r1, [pc, #104]	; (8004d78 <SDM_CloseFiles+0x110>)
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f019 fe7c 	bl	801ea0c <siprintf>
  
  if(f_open(&FileConfigHandler, (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8004d14:	f107 0308 	add.w	r3, r7, #8
 8004d18:	220a      	movs	r2, #10
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4817      	ldr	r0, [pc, #92]	; (8004d7c <SDM_CloseFiles+0x114>)
 8004d1e:	f011 f9a1 	bl	8016064 <f_open>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <SDM_CloseFiles+0xc4>
  {
    return 1;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e01c      	b.n	8004d66 <SDM_CloseFiles+0xfe>
  }
  
  (void)SDM_CreateJSON(&JSON_string);
 8004d2c:	1d3b      	adds	r3, r7, #4
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fa58 	bl	80051e4 <SDM_CreateJSON>
  SDM_WriteConfigBuffer((uint8_t*)JSON_string, strlen(JSON_string));  
 8004d34:	687c      	ldr	r4, [r7, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fb fa6b 	bl	8000214 <strlen>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4619      	mov	r1, r3
 8004d42:	4620      	mov	r0, r4
 8004d44:	f000 f81c 	bl	8004d80 <SDM_WriteConfigBuffer>
  
  if (f_close(&FileConfigHandler)!= FR_OK)
 8004d48:	480c      	ldr	r0, [pc, #48]	; (8004d7c <SDM_CloseFiles+0x114>)
 8004d4a:	f011 fe7b 	bl	8016a44 <f_close>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <SDM_CloseFiles+0xf0>
  {
    return 1;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e006      	b.n	8004d66 <SDM_CloseFiles+0xfe>
  }
  
  HSD_JSON_free(JSON_string);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fc f982 	bl	8001064 <HSD_JSON_free>
  JSON_string = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	607b      	str	r3, [r7, #4]
  
  return 0;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	375c      	adds	r7, #92	; 0x5c
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd90      	pop	{r4, r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	0802253c 	.word	0x0802253c
 8004d74:	08022544 	.word	0x08022544
 8004d78:	08022554 	.word	0x08022554
 8004d7c:	20016c68 	.word	0x20016c68

08004d80 <SDM_WriteConfigBuffer>:


uint8_t SDM_WriteConfigBuffer(uint8_t *buffer, uint32_t size)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t byteswritten;
  FRESULT returnWrite;
  
  returnWrite = f_write(&FileConfigHandler, buffer, size, (void *)&byteswritten);
 8004d8a:	f107 0308 	add.w	r3, r7, #8
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4807      	ldr	r0, [pc, #28]	; (8004db0 <SDM_WriteConfigBuffer+0x30>)
 8004d94:	f011 fc63 	bl	801665e <f_write>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73fb      	strb	r3, [r7, #15]
  if(returnWrite != FR_OK)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <SDM_WriteConfigBuffer+0x26>
  {
    return 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e000      	b.n	8004da8 <SDM_WriteConfigBuffer+0x28>
  }  
  return 1;
 8004da6:	2301      	movs	r3, #1
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20016c68 	.word	0x20016c68

08004db4 <SDM_WriteBuffer>:


uint8_t SDM_WriteBuffer(uint32_t id, uint8_t *buffer, uint32_t size)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  uint32_t byteswritten;
  
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004dc6:	fb02 f303 	mul.w	r3, r2, r3
 8004dca:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <SDM_WriteBuffer+0x3c>)
 8004dcc:	1898      	adds	r0, r3, r2
 8004dce:	f107 0314 	add.w	r3, r7, #20
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	f011 fc42 	bl	801665e <f_write>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <SDM_WriteBuffer+0x30>
  {
    return 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e000      	b.n	8004de6 <SDM_WriteBuffer+0x32>
  }  
  return 1;
 8004de4:	2301      	movs	r3, #1
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20016e98 	.word	0x20016e98

08004df4 <SDM_Flush_Buffer>:

/* Write remaining data to file */
uint8_t SDM_Flush_Buffer(uint32_t id)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint8_t ret = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	75fb      	strb	r3, [r7, #23]
  uint32_t buf_size;
  COM_SensorStatus_t * sensor_status;   
  
  sensor_status = COM_GetSensorStatus(id);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fc fefb 	bl	8001c00 <COM_GetSensorStatus>
 8004e0a:	6138      	str	r0, [r7, #16]
  buf_size = sensor_status->sdWriteBufferSize;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	60fb      	str	r3, [r7, #12]
  
  if(SD_WriteBufferIdx[id]>0 && SD_WriteBufferIdx[id]<(buf_size-1))
 8004e12:	4a26      	ldr	r2, [pc, #152]	; (8004eac <SDM_Flush_Buffer+0xb8>)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d017      	beq.n	8004e4e <SDM_Flush_Buffer+0x5a>
 8004e1e:	4a23      	ldr	r2, [pc, #140]	; (8004eac <SDM_Flush_Buffer+0xb8>)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d20f      	bcs.n	8004e4e <SDM_Flush_Buffer+0x5a>
  {
    /* flush from the beginning */
    ret = SDM_WriteBuffer(id, SD_WriteBuffer[id], SD_WriteBufferIdx[id]+1);
 8004e2e:	4a20      	ldr	r2, [pc, #128]	; (8004eb0 <SDM_Flush_Buffer+0xbc>)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e36:	4a1d      	ldr	r2, [pc, #116]	; (8004eac <SDM_Flush_Buffer+0xb8>)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	461a      	mov	r2, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff ffb6 	bl	8004db4 <SDM_WriteBuffer>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	75fb      	strb	r3, [r7, #23]
 8004e4c:	e023      	b.n	8004e96 <SDM_Flush_Buffer+0xa2>
  }
  else if (SD_WriteBufferIdx[id]>(buf_size-1) && SD_WriteBufferIdx[id]<(buf_size*2-1))
 8004e4e:	4a17      	ldr	r2, [pc, #92]	; (8004eac <SDM_Flush_Buffer+0xb8>)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d91b      	bls.n	8004e96 <SDM_Flush_Buffer+0xa2>
 8004e5e:	4a13      	ldr	r2, [pc, #76]	; (8004eac <SDM_Flush_Buffer+0xb8>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d212      	bcs.n	8004e96 <SDM_Flush_Buffer+0xa2>
  {
    /* flush from half buffer */
    ret =  SDM_WriteBuffer(id, (uint8_t *)(SD_WriteBuffer[id]+buf_size), SD_WriteBufferIdx[id]+1-buf_size);
 8004e70:	4a0f      	ldr	r2, [pc, #60]	; (8004eb0 <SDM_Flush_Buffer+0xbc>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	18d1      	adds	r1, r2, r3
 8004e7c:	4a0b      	ldr	r2, [pc, #44]	; (8004eac <SDM_Flush_Buffer+0xb8>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ff91 	bl	8004db4 <SDM_WriteBuffer>
 8004e92:	4603      	mov	r3, r0
 8004e94:	75fb      	strb	r3, [r7, #23]
  }
  
  SD_WriteBufferIdx[id] = 0;
 8004e96:	4a05      	ldr	r2, [pc, #20]	; (8004eac <SDM_Flush_Buffer+0xb8>)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  return ret;
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2000072c 	.word	0x2000072c
 8004eb0:	200186dc 	.word	0x200186dc

08004eb4 <SDM_Fill_Buffer>:

/* Fill SD buffer with new data */
uint8_t SDM_Fill_Buffer(uint8_t id, uint8_t *src, uint16_t srcSize)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	6039      	str	r1, [r7, #0]
 8004ebe:	71fb      	strb	r3, [r7, #7]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	80bb      	strh	r3, [r7, #4]
  uint8_t *dst;
  uint32_t dstP, srcP=0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61bb      	str	r3, [r7, #24]
  COM_SensorStatus_t * sensor_status; 
  uint32_t dstSize, sdBufSize;
  
  
  sensor_status = COM_GetSensorStatus(id);
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fc fe98 	bl	8001c00 <COM_GetSensorStatus>
 8004ed0:	6178      	str	r0, [r7, #20]
  dst = SD_WriteBuffer[id];
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	4a31      	ldr	r2, [pc, #196]	; (8004f9c <SDM_Fill_Buffer+0xe8>)
 8004ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eda:	613b      	str	r3, [r7, #16]
  dstP = SD_WriteBufferIdx[id];
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	4a30      	ldr	r2, [pc, #192]	; (8004fa0 <SDM_Fill_Buffer+0xec>)
 8004ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee4:	61fb      	str	r3, [r7, #28]
  sdBufSize = sensor_status->sdWriteBufferSize;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	60fb      	str	r3, [r7, #12]
  dstSize = sdBufSize*2;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	60bb      	str	r3, [r7, #8]
  
  /* byte per byte copy */
  while(srcP < srcSize)
 8004ef2:	e013      	b.n	8004f1c <SDM_Fill_Buffer+0x68>
  {
    dst[dstP] = src[srcP];
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	441a      	add	r2, r3
 8004efa:	6939      	ldr	r1, [r7, #16]
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	440b      	add	r3, r1
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	701a      	strb	r2, [r3, #0]
    dstP++;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
    srcP++;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	61bb      	str	r3, [r7, #24]
    if(dstP>=dstSize)
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d301      	bcc.n	8004f1c <SDM_Fill_Buffer+0x68>
    {
      dstP=0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61fb      	str	r3, [r7, #28]
  while(srcP < srcSize)
 8004f1c:	88bb      	ldrh	r3, [r7, #4]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d3e7      	bcc.n	8004ef4 <SDM_Fill_Buffer+0x40>
    }
  }
  
  if(SD_WriteBufferIdx[id]<(dstSize/2) && dstP>=(dstSize/2)) // first half full
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	4a1e      	ldr	r2, [pc, #120]	; (8004fa0 <SDM_Fill_Buffer+0xec>)
 8004f28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	085b      	lsrs	r3, r3, #1
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d213      	bcs.n	8004f5c <SDM_Fill_Buffer+0xa8>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d30e      	bcc.n	8004f5c <SDM_Fill_Buffer+0xa8>
  {           
    // unlock write task
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 8004f3e:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <SDM_Fill_Buffer+0xf0>)
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8004f48:	2200      	movs	r2, #0
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f012 fb42 	bl	80175d4 <osMessagePut>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d017      	beq.n	8004f86 <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 8004f56:	f000 fa19 	bl	800538c <_Error_Handler>
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 8004f5a:	e014      	b.n	8004f86 <SDM_Fill_Buffer+0xd2>
    }
    
    // check for buffer consistency
  }
  else if(dstP<SD_WriteBufferIdx[id])  // second half full
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	4a10      	ldr	r2, [pc, #64]	; (8004fa0 <SDM_Fill_Buffer+0xec>)
 8004f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d20d      	bcs.n	8004f86 <SDM_Fill_Buffer+0xd2>
  {
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_SECOND_HALF_MASK, 0) != osOK)
 8004f6a:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <SDM_Fill_Buffer+0xf0>)
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f74:	2200      	movs	r2, #0
 8004f76:	4619      	mov	r1, r3
 8004f78:	f012 fb2c 	bl	80175d4 <osMessagePut>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 8004f82:	f000 fa03 	bl	800538c <_Error_Handler>
    }
  }
  SD_WriteBufferIdx[id] = dstP;
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	4905      	ldr	r1, [pc, #20]	; (8004fa0 <SDM_Fill_Buffer+0xec>)
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  return 0;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	200186dc 	.word	0x200186dc
 8004fa0:	2000072c 	.word	0x2000072c
 8004fa4:	20018478 	.word	0x20018478

08004fa8 <SDM_StartSensorThread>:
* @brief  Start sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StartSensorThread(uint32_t id)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 8004fb0:	4b2c      	ldr	r3, [pc, #176]	; (8005064 <SDM_StartSensorThread+0xbc>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d102      	bne.n	8004fc2 <SDM_StartSensorThread+0x1a>
  {
    IIS3DWB_Start();
 8004fbc:	f7fe fbfc 	bl	80037b8 <IIS3DWB_Start>
 8004fc0:	e046      	b.n	8005050 <SDM_StartSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 8004fc2:	4b29      	ldr	r3, [pc, #164]	; (8005068 <SDM_StartSensorThread+0xc0>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d102      	bne.n	8004fd4 <SDM_StartSensorThread+0x2c>
  {
    HTS221_Start();
 8004fce:	f7fe f90f 	bl	80031f0 <HTS221_Start>
 8004fd2:	e03d      	b.n	8005050 <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 8004fd4:	4b25      	ldr	r3, [pc, #148]	; (800506c <SDM_StartSensorThread+0xc4>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d102      	bne.n	8004fe6 <SDM_StartSensorThread+0x3e>
  {
    IIS2DH_Start();
 8004fe0:	f7fe f92c 	bl	800323c <IIS2DH_Start>
 8004fe4:	e034      	b.n	8005050 <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 8004fe6:	4b22      	ldr	r3, [pc, #136]	; (8005070 <SDM_StartSensorThread+0xc8>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d102      	bne.n	8004ff8 <SDM_StartSensorThread+0x50>
  {
    IIS2MDC_Start();
 8004ff2:	f7fe f949 	bl	8003288 <IIS2MDC_Start>
 8004ff6:	e02b      	b.n	8005050 <SDM_StartSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 8004ff8:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <SDM_StartSensorThread+0xcc>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4293      	cmp	r3, r2
 8005002:	d102      	bne.n	800500a <SDM_StartSensorThread+0x62>
  {
    IMP34DT05_Start();
 8005004:	f7fe fbfe 	bl	8003804 <IMP34DT05_Start>
 8005008:	e022      	b.n	8005050 <SDM_StartSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 800500a:	4b1b      	ldr	r3, [pc, #108]	; (8005078 <SDM_StartSensorThread+0xd0>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4293      	cmp	r3, r2
 8005014:	d102      	bne.n	800501c <SDM_StartSensorThread+0x74>
  {
    MP23ABS1_Start();
 8005016:	f7ff f91b 	bl	8004250 <MP23ABS1_Start>
 800501a:	e019      	b.n	8005050 <SDM_StartSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 800501c:	4b17      	ldr	r3, [pc, #92]	; (800507c <SDM_StartSensorThread+0xd4>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4293      	cmp	r3, r2
 8005026:	d102      	bne.n	800502e <SDM_StartSensorThread+0x86>
  {
    ISM330DHCX_Start();
 8005028:	f7fe fc12 	bl	8003850 <ISM330DHCX_Start>
 800502c:	e010      	b.n	8005050 <SDM_StartSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 800502e:	4b14      	ldr	r3, [pc, #80]	; (8005080 <SDM_StartSensorThread+0xd8>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4293      	cmp	r3, r2
 8005038:	d102      	bne.n	8005040 <SDM_StartSensorThread+0x98>
  {
    LPS22HH_Start();
 800503a:	f7fe fc2f 	bl	800389c <LPS22HH_Start>
 800503e:	e007      	b.n	8005050 <SDM_StartSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 8005040:	4b10      	ldr	r3, [pc, #64]	; (8005084 <SDM_StartSensorThread+0xdc>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4293      	cmp	r3, r2
 800504a:	d101      	bne.n	8005050 <SDM_StartSensorThread+0xa8>
  {
    STTS751_Start();
 800504c:	f000 fd08 	bl	8005a60 <STTS751_Start>
  }
  sensor_first_dataReady[id] = 1;
 8005050:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <SDM_StartSensorThread+0xe0>)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4413      	add	r3, r2
 8005056:	2201      	movs	r2, #1
 8005058:	701a      	strb	r2, [r3, #0]
  
  return 0;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20016040 	.word	0x20016040
 8005068:	20016354 	.word	0x20016354
 800506c:	200163f0 	.word	0x200163f0
 8005070:	20016315 	.word	0x20016315
 8005074:	200163e8 	.word	0x200163e8
 8005078:	20016314 	.word	0x20016314
 800507c:	20016355 	.word	0x20016355
 8005080:	200163f9 	.word	0x200163f9
 8005084:	200163f8 	.word	0x200163f8
 8005088:	20000028 	.word	0x20000028

0800508c <SDM_StopSensorThread>:
* @brief  Stop sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StopSensorThread(uint32_t id)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 8005094:	4b2c      	ldr	r3, [pc, #176]	; (8005148 <SDM_StopSensorThread+0xbc>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4293      	cmp	r3, r2
 800509e:	d102      	bne.n	80050a6 <SDM_StopSensorThread+0x1a>
  {
    IIS3DWB_Stop();
 80050a0:	f7fe fb98 	bl	80037d4 <IIS3DWB_Stop>
 80050a4:	e046      	b.n	8005134 <SDM_StopSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 80050a6:	4b29      	ldr	r3, [pc, #164]	; (800514c <SDM_StopSensorThread+0xc0>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d102      	bne.n	80050b8 <SDM_StopSensorThread+0x2c>
  {
    HTS221_Stop();
 80050b2:	f7fe f8ab 	bl	800320c <HTS221_Stop>
 80050b6:	e03d      	b.n	8005134 <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 80050b8:	4b25      	ldr	r3, [pc, #148]	; (8005150 <SDM_StopSensorThread+0xc4>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d102      	bne.n	80050ca <SDM_StopSensorThread+0x3e>
  {
    IIS2DH_Stop();
 80050c4:	f7fe f8c8 	bl	8003258 <IIS2DH_Stop>
 80050c8:	e034      	b.n	8005134 <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 80050ca:	4b22      	ldr	r3, [pc, #136]	; (8005154 <SDM_StopSensorThread+0xc8>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d102      	bne.n	80050dc <SDM_StopSensorThread+0x50>
  {
    IIS2MDC_Stop();
 80050d6:	f7fe f8e5 	bl	80032a4 <IIS2MDC_Stop>
 80050da:	e02b      	b.n	8005134 <SDM_StopSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 80050dc:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <SDM_StopSensorThread+0xcc>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d102      	bne.n	80050ee <SDM_StopSensorThread+0x62>
  {
    IMP34DT05_Stop();
 80050e8:	f7fe fb9a 	bl	8003820 <IMP34DT05_Stop>
 80050ec:	e022      	b.n	8005134 <SDM_StopSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 80050ee:	4b1b      	ldr	r3, [pc, #108]	; (800515c <SDM_StopSensorThread+0xd0>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d102      	bne.n	8005100 <SDM_StopSensorThread+0x74>
  {
    MP23ABS1_Stop();
 80050fa:	f7ff f8b7 	bl	800426c <MP23ABS1_Stop>
 80050fe:	e019      	b.n	8005134 <SDM_StopSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 8005100:	4b17      	ldr	r3, [pc, #92]	; (8005160 <SDM_StopSensorThread+0xd4>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4293      	cmp	r3, r2
 800510a:	d102      	bne.n	8005112 <SDM_StopSensorThread+0x86>
  {
    ISM330DHCX_Stop();
 800510c:	f7fe fbae 	bl	800386c <ISM330DHCX_Stop>
 8005110:	e010      	b.n	8005134 <SDM_StopSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 8005112:	4b14      	ldr	r3, [pc, #80]	; (8005164 <SDM_StopSensorThread+0xd8>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4293      	cmp	r3, r2
 800511c:	d102      	bne.n	8005124 <SDM_StopSensorThread+0x98>
  {
    LPS22HH_Stop();
 800511e:	f7fe fbcb 	bl	80038b8 <LPS22HH_Stop>
 8005122:	e007      	b.n	8005134 <SDM_StopSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 8005124:	4b10      	ldr	r3, [pc, #64]	; (8005168 <SDM_StopSensorThread+0xdc>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4293      	cmp	r3, r2
 800512e:	d101      	bne.n	8005134 <SDM_StopSensorThread+0xa8>
  {
    STTS751_Stop();
 8005130:	f000 fca4 	bl	8005a7c <STTS751_Stop>
  }
  sensor_first_dataReady[id] = 0;
 8005134:	4a0d      	ldr	r2, [pc, #52]	; (800516c <SDM_StopSensorThread+0xe0>)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]
  return 0;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20016040 	.word	0x20016040
 800514c:	20016354 	.word	0x20016354
 8005150:	200163f0 	.word	0x200163f0
 8005154:	20016315 	.word	0x20016315
 8005158:	200163e8 	.word	0x200163e8
 800515c:	20016314 	.word	0x20016314
 8005160:	20016355 	.word	0x20016355
 8005164:	200163f9 	.word	0x200163f9
 8005168:	200163f8 	.word	0x200163f8
 800516c:	20000028 	.word	0x20000028

08005170 <SDM_ReadJSON>:



uint32_t SDM_ReadJSON(char *serialized_string)
{  
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  static COM_Device_t JSON_device; 
  COM_Device_t *local_device; 
  uint8_t ii;
  uint32_t size;
  
  local_device = COM_GetDevice();  
 8005178:	f7fc fd06 	bl	8001b88 <COM_GetDevice>
 800517c:	6138      	str	r0, [r7, #16]
  size = sizeof(COM_Device_t);
 800517e:	2354      	movs	r3, #84	; 0x54
 8005180:	60fb      	str	r3, [r7, #12]
  
  memcpy(&JSON_device, local_device, size);       
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	6939      	ldr	r1, [r7, #16]
 8005186:	4816      	ldr	r0, [pc, #88]	; (80051e0 <SDM_ReadJSON+0x70>)
 8005188:	f018 fedc 	bl	801df44 <memcpy>
  HSD_JSON_parse_Device(serialized_string, &JSON_device);      
 800518c:	4914      	ldr	r1, [pc, #80]	; (80051e0 <SDM_ReadJSON+0x70>)
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fb ff8a 	bl	80010a8 <HSD_JSON_parse_Device>
  
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 8005194:	2300      	movs	r3, #0
 8005196:	75fb      	strb	r3, [r7, #23]
 8005198:	e016      	b.n	80051c8 <SDM_ReadJSON+0x58>
  {
    update_sensorStatus(&local_device->sensors[ii]->sensorStatus, &JSON_device.sensors[ii]->sensorStatus, ii);
 800519a:	7dfb      	ldrb	r3, [r7, #23]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	330a      	adds	r3, #10
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	4a0c      	ldr	r2, [pc, #48]	; (80051e0 <SDM_ReadJSON+0x70>)
 80051ae:	330a      	adds	r3, #10
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80051ba:	7dfa      	ldrb	r2, [r7, #23]
 80051bc:	4619      	mov	r1, r3
 80051be:	f7fd fdf3 	bl	8002da8 <update_sensorStatus>
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 80051c2:	7dfb      	ldrb	r3, [r7, #23]
 80051c4:	3301      	adds	r3, #1
 80051c6:	75fb      	strb	r3, [r7, #23]
 80051c8:	7dfa      	ldrb	r2, [r7, #23]
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <SDM_ReadJSON+0x70>)
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d3e3      	bcc.n	800519a <SDM_ReadJSON+0x2a>
  }
  
  update_sensors_config();  
 80051d2:	f7fd fef7 	bl	8002fc4 <update_sensors_config>
  
  return 0;  
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20000884 	.word	0x20000884

080051e4 <SDM_CreateJSON>:

uint32_t SDM_CreateJSON(char **serialized_string)
{  
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  COM_Device_t *device; 
  uint32_t size;
  
  device = COM_GetDevice();  
 80051ec:	f7fc fccc 	bl	8001b88 <COM_GetDevice>
 80051f0:	60f8      	str	r0, [r7, #12]
  size = HSD_JSON_serialize_Device(device, serialized_string, PRETTY_JSON);
 80051f2:	2201      	movs	r2, #1
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7fb ff44 	bl	8001084 <HSD_JSON_serialize_Device>
 80051fc:	4603      	mov	r3, r0
 80051fe:	60bb      	str	r3, [r7, #8]
  
  return size;
 8005200:	68bb      	ldr	r3, [r7, #8]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <userButtonCallback>:



void userButtonCallback(uint16_t GPIO_Pin)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b082      	sub	sp, #8
 800520e:	af00      	add	r7, sp, #0
 8005210:	4603      	mov	r3, r0
 8005212:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <userButtonCallback+0x14>
  {
  case USER_BUTTON_PIN:
	  SDM_StartMeasurements();
 800521a:	f000 f805 	bl	8005228 <SDM_StartMeasurements>
  default:
    break;
 800521e:	bf00      	nop
  }
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <SDM_StartMeasurements>:

void SDM_StartMeasurements(void)
{
 8005228:	b5b0      	push	{r4, r5, r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
    if( HAL_GetTick() - t_start > 1000 )
 800522e:	f001 fe79 	bl	8006f24 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	4b25      	ldr	r3, [pc, #148]	; (80052cc <SDM_StartMeasurements+0xa4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800523e:	d940      	bls.n	80052c2 <SDM_StartMeasurements+0x9a>
    {
      if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 8005240:	4b23      	ldr	r3, [pc, #140]	; (80052d0 <SDM_StartMeasurements+0xa8>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <SDM_StartMeasurements+0x2c>
 800524a:	4b21      	ldr	r3, [pc, #132]	; (80052d0 <SDM_StartMeasurements+0xa8>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d136      	bne.n	80052c2 <SDM_StartMeasurements+0x9a>
      {
    	 char startMeasurements [] = {"StartMeasurements!!!"};
 8005254:	4b1f      	ldr	r3, [pc, #124]	; (80052d4 <SDM_StartMeasurements+0xac>)
 8005256:	463c      	mov	r4, r7
 8005258:	461d      	mov	r5, r3
 800525a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800525c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800525e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005262:	6020      	str	r0, [r4, #0]
 8005264:	3404      	adds	r4, #4
 8005266:	7021      	strb	r1, [r4, #0]
    	 HAL_UART_Transmit(&huart2, (uint8_t *) startMeasurements, sizeof(startMeasurements), HAL_MAX_DELAY);
 8005268:	4639      	mov	r1, r7
 800526a:	f04f 33ff 	mov.w	r3, #4294967295
 800526e:	2215      	movs	r2, #21
 8005270:	4819      	ldr	r0, [pc, #100]	; (80052d8 <SDM_StartMeasurements+0xb0>)
 8005272:	f00a f8b3 	bl	800f3dc <HAL_UART_Transmit>

        // Cannot wait since we are in an ISR
        if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 8005276:	4b19      	ldr	r3, [pc, #100]	; (80052dc <SDM_StartMeasurements+0xb4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2200      	movs	r2, #0
 800527c:	f248 0101 	movw	r1, #32769	; 0x8001
 8005280:	4618      	mov	r0, r3
 8005282:	f012 f9a7 	bl	80175d4 <osMessagePut>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <SDM_StartMeasurements+0x68>
        {
          _Error_Handler();
 800528c:	f000 f87e 	bl	800538c <_Error_Handler>
        }

        t_start = HAL_GetTick();
 8005290:	f001 fe48 	bl	8006f24 <HAL_GetTick>
 8005294:	4603      	mov	r3, r0
 8005296:	4a0d      	ldr	r2, [pc, #52]	; (80052cc <SDM_StartMeasurements+0xa4>)
 8005298:	6013      	str	r3, [r2, #0]

#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
        t_start = SD_Logging_Time_Start = HAL_GetTick();
 800529a:	f001 fe43 	bl	8006f24 <HAL_GetTick>
 800529e:	4603      	mov	r3, r0
 80052a0:	4a0f      	ldr	r2, [pc, #60]	; (80052e0 <SDM_StartMeasurements+0xb8>)
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <SDM_StartMeasurements+0xb8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a08      	ldr	r2, [pc, #32]	; (80052cc <SDM_StartMeasurements+0xa4>)
 80052aa:	6013      	str	r3, [r2, #0]

        if (SD_Logging_Enabled == 1)
 80052ac:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <SDM_StartMeasurements+0xbc>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d103      	bne.n	80052bc <SDM_StartMeasurements+0x94>
          SD_Logging_Enabled = 0;
 80052b4:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <SDM_StartMeasurements+0xbc>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]
          SD_Logging_Enabled = 1;
#endif
      }
    }

}
 80052ba:	e002      	b.n	80052c2 <SDM_StartMeasurements+0x9a>
          SD_Logging_Enabled = 1;
 80052bc:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <SDM_StartMeasurements+0xbc>)
 80052be:	2201      	movs	r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
}
 80052c2:	bf00      	nop
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bdb0      	pop	{r4, r5, r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000758 	.word	0x20000758
 80052d0:	200002d4 	.word	0x200002d4
 80052d4:	0802256c 	.word	0x0802256c
 80052d8:	20016358 	.word	0x20016358
 80052dc:	20018478 	.word	0x20018478
 80052e0:	20000764 	.word	0x20000764
 80052e4:	20000768 	.word	0x20000768

080052e8 <SDM_AutosaveFile>:

#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
void SDM_AutosaveFile(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  if (SD_Logging_Active)
 80052ec:	4b23      	ldr	r3, [pc, #140]	; (800537c <SDM_AutosaveFile+0x94>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d020      	beq.n	8005336 <SDM_AutosaveFile+0x4e>
  {
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_ACTIVE*1000 )
 80052f4:	f001 fe16 	bl	8006f24 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b21      	ldr	r3, [pc, #132]	; (8005380 <SDM_AutosaveFile+0x98>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005304:	4293      	cmp	r3, r2
 8005306:	d936      	bls.n	8005376 <SDM_AutosaveFile+0x8e>
    {
      // Cannot wait since we are in an ISR
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 8005308:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <SDM_AutosaveFile+0x9c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2200      	movs	r2, #0
 800530e:	f248 0101 	movw	r1, #32769	; 0x8001
 8005312:	4618      	mov	r0, r3
 8005314:	f012 f95e 	bl	80175d4 <osMessagePut>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <SDM_AutosaveFile+0x3a>
      {
        _Error_Handler();
 800531e:	f000 f835 	bl	800538c <_Error_Handler>
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 8005322:	f001 fdff 	bl	8006f24 <HAL_GetTick>
 8005326:	4603      	mov	r3, r0
 8005328:	4a15      	ldr	r2, [pc, #84]	; (8005380 <SDM_AutosaveFile+0x98>)
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	4b14      	ldr	r3, [pc, #80]	; (8005380 <SDM_AutosaveFile+0x98>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a15      	ldr	r2, [pc, #84]	; (8005388 <SDM_AutosaveFile+0xa0>)
 8005332:	6013      	str	r3, [r2, #0]
        _Error_Handler();
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
    }
  }
}
 8005334:	e01f      	b.n	8005376 <SDM_AutosaveFile+0x8e>
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_IDLE*1000 )
 8005336:	f001 fdf5 	bl	8006f24 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	4b10      	ldr	r3, [pc, #64]	; (8005380 <SDM_AutosaveFile+0x98>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	f242 7210 	movw	r2, #10000	; 0x2710
 8005346:	4293      	cmp	r3, r2
 8005348:	d915      	bls.n	8005376 <SDM_AutosaveFile+0x8e>
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 800534a:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <SDM_AutosaveFile+0x9c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2200      	movs	r2, #0
 8005350:	f248 0101 	movw	r1, #32769	; 0x8001
 8005354:	4618      	mov	r0, r3
 8005356:	f012 f93d 	bl	80175d4 <osMessagePut>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <SDM_AutosaveFile+0x7c>
        _Error_Handler();
 8005360:	f000 f814 	bl	800538c <_Error_Handler>
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 8005364:	f001 fdde 	bl	8006f24 <HAL_GetTick>
 8005368:	4603      	mov	r3, r0
 800536a:	4a05      	ldr	r2, [pc, #20]	; (8005380 <SDM_AutosaveFile+0x98>)
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4b04      	ldr	r3, [pc, #16]	; (8005380 <SDM_AutosaveFile+0x98>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a05      	ldr	r2, [pc, #20]	; (8005388 <SDM_AutosaveFile+0xa0>)
 8005374:	6013      	str	r3, [r2, #0]
}
 8005376:	bf00      	nop
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000754 	.word	0x20000754
 8005380:	20000764 	.word	0x20000764
 8005384:	20018478 	.word	0x20018478
 8005388:	20000758 	.word	0x20000758

0800538c <_Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void _Error_Handler( void )
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  while (1)
 8005390:	e7fe      	b.n	8005390 <_Error_Handler+0x4>
	...

08005394 <SM_SPI_Init>:
* @param None
* @retval None
* @note callbacks to the MSP
*/
static void SM_SPI_Init(void)
{  
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* SPI3 parameter configuration*/
  hsm_spi.Instance = SM_SPI_x;
 8005398:	4b20      	ldr	r3, [pc, #128]	; (800541c <SM_SPI_Init+0x88>)
 800539a:	4a21      	ldr	r2, [pc, #132]	; (8005420 <SM_SPI_Init+0x8c>)
 800539c:	601a      	str	r2, [r3, #0]
  hsm_spi.Init.Mode = SPI_MODE_MASTER;
 800539e:	4b1f      	ldr	r3, [pc, #124]	; (800541c <SM_SPI_Init+0x88>)
 80053a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80053a4:	605a      	str	r2, [r3, #4]
  hsm_spi.Init.Direction = SPI_DIRECTION_2LINES;
 80053a6:	4b1d      	ldr	r3, [pc, #116]	; (800541c <SM_SPI_Init+0x88>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	609a      	str	r2, [r3, #8]
  hsm_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 80053ac:	4b1b      	ldr	r3, [pc, #108]	; (800541c <SM_SPI_Init+0x88>)
 80053ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80053b2:	60da      	str	r2, [r3, #12]
  hsm_spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80053b4:	4b19      	ldr	r3, [pc, #100]	; (800541c <SM_SPI_Init+0x88>)
 80053b6:	2202      	movs	r2, #2
 80053b8:	611a      	str	r2, [r3, #16]
  hsm_spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 80053ba:	4b18      	ldr	r3, [pc, #96]	; (800541c <SM_SPI_Init+0x88>)
 80053bc:	2201      	movs	r2, #1
 80053be:	615a      	str	r2, [r3, #20]
  hsm_spi.Init.NSS = SPI_NSS_SOFT;
 80053c0:	4b16      	ldr	r3, [pc, #88]	; (800541c <SM_SPI_Init+0x88>)
 80053c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c6:	619a      	str	r2, [r3, #24]
  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /*SPI running @ 10 MHz */ /*stwin*/
 80053c8:	4b14      	ldr	r3, [pc, #80]	; (800541c <SM_SPI_Init+0x88>)
 80053ca:	2218      	movs	r2, #24
 80053cc:	61da      	str	r2, [r3, #28]
  hsm_spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <SM_SPI_Init+0x88>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	621a      	str	r2, [r3, #32]
  hsm_spi.Init.TIMode = SPI_TIMODE_DISABLE;
 80053d4:	4b11      	ldr	r3, [pc, #68]	; (800541c <SM_SPI_Init+0x88>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	625a      	str	r2, [r3, #36]	; 0x24
  hsm_spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <SM_SPI_Init+0x88>)
 80053dc:	2200      	movs	r2, #0
 80053de:	629a      	str	r2, [r3, #40]	; 0x28
  hsm_spi.Init.CRCPolynomial = 7;
 80053e0:	4b0e      	ldr	r3, [pc, #56]	; (800541c <SM_SPI_Init+0x88>)
 80053e2:	2207      	movs	r2, #7
 80053e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsm_spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80053e6:	4b0d      	ldr	r3, [pc, #52]	; (800541c <SM_SPI_Init+0x88>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
  hsm_spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <SM_SPI_Init+0x88>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Register MSP Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_MSPINIT_CB_ID, SM_SPI_MspInit);
 80053f2:	4a0c      	ldr	r2, [pc, #48]	; (8005424 <SM_SPI_Init+0x90>)
 80053f4:	2108      	movs	r1, #8
 80053f6:	4809      	ldr	r0, [pc, #36]	; (800541c <SM_SPI_Init+0x88>)
 80053f8:	f008 fe18 	bl	800e02c <HAL_SPI_RegisterCallback>
  
  if (HAL_SPI_Init(&hsm_spi) != HAL_OK)
 80053fc:	4807      	ldr	r0, [pc, #28]	; (800541c <SM_SPI_Init+0x88>)
 80053fe:	f008 fd4b 	bl	800de98 <HAL_SPI_Init>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <SM_SPI_Init+0x78>
  {
    SM_Error_Handler();
 8005408:	f000 f810 	bl	800542c <SM_Error_Handler>
  }
  
  /* Register SPI DMA complete Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_TX_RX_COMPLETE_CB_ID, SM_SPI_TxRxCpltCallback);
 800540c:	4a06      	ldr	r2, [pc, #24]	; (8005428 <SM_SPI_Init+0x94>)
 800540e:	2102      	movs	r1, #2
 8005410:	4802      	ldr	r0, [pc, #8]	; (800541c <SM_SPI_Init+0x88>)
 8005412:	f008 fe0b 	bl	800e02c <HAL_SPI_RegisterCallback>
}
 8005416:	bf00      	nop
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20018818 	.word	0x20018818
 8005420:	40003800 	.word	0x40003800
 8005424:	08005725 	.word	0x08005725
 8005428:	0800568d 	.word	0x0800568d

0800542c <SM_Error_Handler>:

void SM_Error_Handler( void )
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  while (1)
 8005430:	e7fe      	b.n	8005430 <SM_Error_Handler+0x4>
	...

08005434 <SM_OS_Init>:
*        read requests and a semaphore used to wait for DMA transfer complete
* @param None
* @retval None
*/
void SM_OS_Init(void)
{
 8005434:	b5b0      	push	{r4, r5, r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
  /* Bus read semaphores */
  spiThreadSem_id = osSemaphoreCreate(osSemaphore(spiThreadSem), 1);
 800543a:	2101      	movs	r1, #1
 800543c:	4819      	ldr	r0, [pc, #100]	; (80054a4 <SM_OS_Init+0x70>)
 800543e:	f011 ff0f 	bl	8017260 <osSemaphoreCreate>
 8005442:	4603      	mov	r3, r0
 8005444:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <SM_OS_Init+0x74>)
 8005446:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(spiThreadSem_id,osWaitForever);
 8005448:	4b17      	ldr	r3, [pc, #92]	; (80054a8 <SM_OS_Init+0x74>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f04f 31ff 	mov.w	r1, #4294967295
 8005450:	4618      	mov	r0, r3
 8005452:	f011 ff29 	bl	80172a8 <osSemaphoreWait>
#if 0
  i2cThreadSem_id = osSemaphoreCreate(osSemaphore(i2cThreadSem), 1);
  osSemaphoreWait(i2cThreadSem_id,osWaitForever);    
#endif
  /* Bus read functions memory pools */  
  spiPool_id = osPoolCreate(osPool(spiPool));
 8005456:	4815      	ldr	r0, [pc, #84]	; (80054ac <SM_OS_Init+0x78>)
 8005458:	f011 ffaa 	bl	80173b0 <osPoolCreate>
 800545c:	4603      	mov	r3, r0
 800545e:	4a14      	ldr	r2, [pc, #80]	; (80054b0 <SM_OS_Init+0x7c>)
 8005460:	6013      	str	r3, [r2, #0]
#if 0
  i2cPool_id = osPoolCreate(osPool(i2cPool));    
#endif
  /* Bus read queues */
  spiReqQueue_id = osMessageCreate(osMessageQ(spireqqueue), NULL);
 8005462:	2100      	movs	r1, #0
 8005464:	4813      	ldr	r0, [pc, #76]	; (80054b4 <SM_OS_Init+0x80>)
 8005466:	f012 f8a3 	bl	80175b0 <osMessageCreate>
 800546a:	4603      	mov	r3, r0
 800546c:	4a12      	ldr	r2, [pc, #72]	; (80054b8 <SM_OS_Init+0x84>)
 800546e:	6013      	str	r3, [r2, #0]
#if 0
  i2cReqQueue_id = osMessageCreate(osMessageQ(i2creqqueue), NULL);
#endif
  vQueueAddToRegistry( spiReqQueue_id, "spiReqQueue_id" );
 8005470:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <SM_OS_Init+0x84>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4911      	ldr	r1, [pc, #68]	; (80054bc <SM_OS_Init+0x88>)
 8005476:	4618      	mov	r0, r3
 8005478:	f013 f900 	bl	801867c <vQueueAddToRegistry>
  
  /* SPI read Thread*/
  osThreadDef(SPI_THREAD, spi_Thread, SPI_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 800547c:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <SM_OS_Init+0x8c>)
 800547e:	1d3c      	adds	r4, r7, #4
 8005480:	461d      	mov	r5, r3
 8005482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005486:	682b      	ldr	r3, [r5, #0]
 8005488:	6023      	str	r3, [r4, #0]
#if 0
  /* I2C read Thread*/
  osThreadDef(I2C_THREAD, i2c_Thread, I2C_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
#endif
  /* Start SPI read Thread */
  spiThreadId = osThreadCreate(osThread(SPI_THREAD), NULL);
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	2100      	movs	r1, #0
 800548e:	4618      	mov	r0, r3
 8005490:	f011 febf 	bl	8017212 <osThreadCreate>
 8005494:	4603      	mov	r3, r0
 8005496:	4a0b      	ldr	r2, [pc, #44]	; (80054c4 <SM_OS_Init+0x90>)
 8005498:	6013      	str	r3, [r2, #0]
#if 0
  /* Start I2C read Thread */
  i2cThreadId = osThreadCreate(osThread(I2C_THREAD), NULL);
#endif
}
 800549a:	bf00      	nop
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bdb0      	pop	{r4, r5, r7, pc}
 80054a2:	bf00      	nop
 80054a4:	080227b0 	.word	0x080227b0
 80054a8:	20018714 	.word	0x20018714
 80054ac:	080227bc 	.word	0x080227bc
 80054b0:	2001870c 	.word	0x2001870c
 80054b4:	080227b4 	.word	0x080227b4
 80054b8:	20018708 	.word	0x20018708
 80054bc:	08022590 	.word	0x08022590
 80054c0:	080225a0 	.word	0x080225a0
 80054c4:	20018710 	.word	0x20018710

080054c8 <SM_SPI_Read_Os>:
* @note when the function is used and linked to the sensor context, all the calls made by the PID driver will result in a
*       call to this function. If this is the case, be sure to make all the calls to the PID driver functions from a freeRTOS thread
* @retval None
*/
int32_t SM_SPI_Read_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	607a      	str	r2, [r7, #4]
 80054d2:	461a      	mov	r2, r3
 80054d4:	460b      	mov	r3, r1
 80054d6:	72fb      	strb	r3, [r7, #11]
 80054d8:	4613      	mov	r3, r2
 80054da:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 80054dc:	2300      	movs	r3, #0
 80054de:	75fb      	strb	r3, [r7, #23]
  SM_Message_t * msg;
  
  msg = osPoolAlloc(spiPool_id);
 80054e0:	4b1a      	ldr	r3, [pc, #104]	; (800554c <SM_SPI_Read_Os+0x84>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f011 ffc0 	bl	801746a <osPoolAlloc>
 80054ea:	6138      	str	r0, [r7, #16]
  
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b33      	cmp	r3, #51	; 0x33
 80054f2:	d104      	bne.n	80054fe <SM_SPI_Read_Os+0x36>
 80054f4:	893b      	ldrh	r3, [r7, #8]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d901      	bls.n	80054fe <SM_SPI_Read_Os+0x36>
  {
    autoInc = 0x40;
 80054fa:	2340      	movs	r3, #64	; 0x40
 80054fc:	75fb      	strb	r3, [r7, #23]
  }
  
  msg->sensorHandler = handle;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg | 0x80 | autoInc;
 8005504:	7afa      	ldrb	r2, [r7, #11]
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	4313      	orrs	r3, r2
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005510:	b2da      	uxtb	r2, r3
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	893a      	ldrh	r2, [r7, #8]
 800551a:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 8005522:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <SM_SPI_Read_Os+0x88>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6939      	ldr	r1, [r7, #16]
 8005528:	f04f 32ff 	mov.w	r2, #4294967295
 800552c:	4618      	mov	r0, r3
 800552e:	f012 f851 	bl	80175d4 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f04f 31ff 	mov.w	r1, #4294967295
 800553c:	4618      	mov	r0, r3
 800553e:	f011 feb3 	bl	80172a8 <osSemaphoreWait>
  
  return 0;  
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	2001870c 	.word	0x2001870c
 8005550:	20018708 	.word	0x20018708

08005554 <SM_SPI_Write_Os>:

int32_t SM_SPI_Write_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	461a      	mov	r2, r3
 8005560:	460b      	mov	r3, r1
 8005562:	72fb      	strb	r3, [r7, #11]
 8005564:	4613      	mov	r3, r2
 8005566:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 8005568:	2300      	movs	r3, #0
 800556a:	75fb      	strb	r3, [r7, #23]

  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b33      	cmp	r3, #51	; 0x33
 8005572:	d104      	bne.n	800557e <SM_SPI_Write_Os+0x2a>
 8005574:	893b      	ldrh	r3, [r7, #8]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d901      	bls.n	800557e <SM_SPI_Write_Os+0x2a>
  {
    autoInc = 0x40;
 800557a:	2340      	movs	r3, #64	; 0x40
 800557c:	75fb      	strb	r3, [r7, #23]
  }
  
  SM_Message_t * msg;  
  msg = osPoolAlloc(spiPool_id);
 800557e:	4b15      	ldr	r3, [pc, #84]	; (80055d4 <SM_SPI_Write_Os+0x80>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f011 ff71 	bl	801746a <osPoolAlloc>
 8005588:	6138      	str	r0, [r7, #16]
  msg->sensorHandler = handle;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg|autoInc ;
 8005590:	7afa      	ldrb	r2, [r7, #11]
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	4313      	orrs	r3, r2
 8005596:	b2da      	uxtb	r2, r3
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	893a      	ldrh	r2, [r7, #8]
 80055a0:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <SM_SPI_Write_Os+0x84>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6939      	ldr	r1, [r7, #16]
 80055ae:	f04f 32ff 	mov.w	r2, #4294967295
 80055b2:	4618      	mov	r0, r3
 80055b4:	f012 f80e 	bl	80175d4 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f04f 31ff 	mov.w	r1, #4294967295
 80055c2:	4618      	mov	r0, r3
 80055c4:	f011 fe70 	bl	80172a8 <osSemaphoreWait>
  
  return 0;  
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	2001870c 	.word	0x2001870c
 80055d8:	20018708 	.word	0x20018708

080055dc <spi_Thread>:
*         the thread which made the request at the end of the read.
* @param  argument not used
* @retval None
*/
static void spi_Thread(void const *argument)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  (void)argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SM_SPI_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_SPI_DEBUG_PIN );
 80055e4:	210a      	movs	r1, #10
 80055e6:	2000      	movs	r0, #0
 80055e8:	f013 fd44 	bl	8019074 <vTaskSetApplicationTaskTag>
#endif

  osEvent evt;
  for (;;)
  {    
    evt = osMessageGet(spiReqQueue_id, osWaitForever); 
 80055ec:	4b23      	ldr	r3, [pc, #140]	; (800567c <spi_Thread+0xa0>)
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	f107 030c 	add.w	r3, r7, #12
 80055f4:	f04f 32ff 	mov.w	r2, #4294967295
 80055f8:	4618      	mov	r0, r3
 80055fa:	f012 f82b 	bl	8017654 <osMessageGet>

    SM_Message_t * msg = evt.value.p;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_RESET);
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6858      	ldr	r0, [r3, #4]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	891b      	ldrh	r3, [r3, #8]
 800560e:	2200      	movs	r2, #0
 8005610:	4619      	mov	r1, r3
 8005612:	f003 fe33 	bl	800927c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hsm_spi, &msg->regAddr, 1, 1000);
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f103 010c 	add.w	r1, r3, #12
 800561c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005620:	2201      	movs	r2, #1
 8005622:	4817      	ldr	r0, [pc, #92]	; (8005680 <spi_Thread+0xa4>)
 8005624:	f008 fda8 	bl	800e178 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive_DMA(&hsm_spi, msg->dataPtr, msg->dataPtr, msg->readSize);
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	6899      	ldr	r1, [r3, #8]
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	89db      	ldrh	r3, [r3, #14]
 8005634:	4812      	ldr	r0, [pc, #72]	; (8005680 <spi_Thread+0xa4>)
 8005636:	f008 ff05 	bl	800e444 <HAL_SPI_TransmitReceive_DMA>
    
    osSemaphoreWait(spiThreadSem_id, osWaitForever);
 800563a:	4b12      	ldr	r3, [pc, #72]	; (8005684 <spi_Thread+0xa8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f04f 31ff 	mov.w	r1, #4294967295
 8005642:	4618      	mov	r0, r3
 8005644:	f011 fe30 	bl	80172a8 <osSemaphoreWait>
    
    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_SET); 
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6858      	ldr	r0, [r3, #4]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	891b      	ldrh	r3, [r3, #8]
 8005654:	2201      	movs	r2, #1
 8005656:	4619      	mov	r1, r3
 8005658:	f003 fe10 	bl	800927c <HAL_GPIO_WritePin>

    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	61bb      	str	r3, [r7, #24]
    osPoolFree(spiPool_id, msg);
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <spi_Thread+0xac>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69f9      	ldr	r1, [r7, #28]
 800566a:	4618      	mov	r0, r3
 800566c:	f011 ff5f 	bl	801752e <osPoolFree>
    osSemaphoreRelease(*sem);
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f011 fe65 	bl	8017344 <osSemaphoreRelease>
  {    
 800567a:	e7b7      	b.n	80055ec <spi_Thread+0x10>
 800567c:	20018708 	.word	0x20018708
 8005680:	20018818 	.word	0x20018818
 8005684:	20018714 	.word	0x20018714
 8005688:	2001870c 	.word	0x2001870c

0800568c <SM_SPI_TxRxCpltCallback>:
  }
}

static void SM_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(spiThreadSem_id);    
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <SM_SPI_TxRxCpltCallback+0x1c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f011 fe53 	bl	8017344 <osSemaphoreRelease>
}
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20018714 	.word	0x20018714

080056ac <SM_Peripheral_Init>:
{
  errors++;
}

void SM_Peripheral_Init(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  SM_DMA_Init();
 80056b0:	f000 f806 	bl	80056c0 <SM_DMA_Init>
//  SM_I2C_Init();
  SM_SPI_Init();
 80056b4:	f7ff fe6e 	bl	8005394 <SM_SPI_Init>
  SM_TIM_Init();
 80056b8:	f000 f8f8 	bl	80058ac <SM_TIM_Init>
}
 80056bc:	bf00      	nop
 80056be:	bd80      	pop	{r7, pc}

080056c0 <SM_DMA_Init>:

/** 
* Enable DMA controller clock
*/
static void SM_DMA_Init(void) 
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80056c6:	4b16      	ldr	r3, [pc, #88]	; (8005720 <SM_DMA_Init+0x60>)
 80056c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ca:	4a15      	ldr	r2, [pc, #84]	; (8005720 <SM_DMA_Init+0x60>)
 80056cc:	f043 0304 	orr.w	r3, r3, #4
 80056d0:	6493      	str	r3, [r2, #72]	; 0x48
 80056d2:	4b13      	ldr	r3, [pc, #76]	; (8005720 <SM_DMA_Init+0x60>)
 80056d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
  SM_SPIx_DMA_CLK_ENABLE();
 80056de:	4b10      	ldr	r3, [pc, #64]	; (8005720 <SM_DMA_Init+0x60>)
 80056e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e2:	4a0f      	ldr	r2, [pc, #60]	; (8005720 <SM_DMA_Init+0x60>)
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	6493      	str	r3, [r2, #72]	; 0x48
 80056ea:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <SM_DMA_Init+0x60>)
 80056ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_I2C_RX_DMA_IRQn, 3, 0);
  HAL_NVIC_EnableIRQ(SM_I2C_RX_DMA_IRQn);
#endif
  /* SM_SPI_RX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_RX_DMA_IRQn, 3, 0);
 80056f6:	2200      	movs	r2, #0
 80056f8:	2103      	movs	r1, #3
 80056fa:	200b      	movs	r0, #11
 80056fc:	f003 f95d 	bl	80089ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_RX_DMA_IRQn);
 8005700:	200b      	movs	r0, #11
 8005702:	f003 f976 	bl	80089f2 <HAL_NVIC_EnableIRQ>
  
  /* SM_SPI_TX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_TX_DMA_IRQn, 3, 0);
 8005706:	2200      	movs	r2, #0
 8005708:	2103      	movs	r1, #3
 800570a:	200c      	movs	r0, #12
 800570c:	f003 f955 	bl	80089ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_TX_DMA_IRQn);
 8005710:	200c      	movs	r0, #12
 8005712:	f003 f96e 	bl	80089f2 <HAL_NVIC_EnableIRQ>
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40021000 	.word	0x40021000

08005724 <SM_SPI_MspInit>:

static void SM_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08c      	sub	sp, #48	; 0x30
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800572c:	f107 031c 	add.w	r3, r7, #28
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	605a      	str	r2, [r3, #4]
 8005736:	609a      	str	r2, [r3, #8]
 8005738:	60da      	str	r2, [r3, #12]
 800573a:	611a      	str	r2, [r3, #16]
  
  SM_SPI_CLK_PIN_CLK_ENABLE(); 
 800573c:	4b54      	ldr	r3, [pc, #336]	; (8005890 <SM_SPI_MspInit+0x16c>)
 800573e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005740:	4a53      	ldr	r2, [pc, #332]	; (8005890 <SM_SPI_MspInit+0x16c>)
 8005742:	f043 0308 	orr.w	r3, r3, #8
 8005746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005748:	4b51      	ldr	r3, [pc, #324]	; (8005890 <SM_SPI_MspInit+0x16c>)
 800574a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	69bb      	ldr	r3, [r7, #24]
  SM_SPI_MISO_PIN_CLK_ENABLE(); 
 8005754:	4b4e      	ldr	r3, [pc, #312]	; (8005890 <SM_SPI_MspInit+0x16c>)
 8005756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005758:	4a4d      	ldr	r2, [pc, #308]	; (8005890 <SM_SPI_MspInit+0x16c>)
 800575a:	f043 0308 	orr.w	r3, r3, #8
 800575e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005760:	4b4b      	ldr	r3, [pc, #300]	; (8005890 <SM_SPI_MspInit+0x16c>)
 8005762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	697b      	ldr	r3, [r7, #20]
  SM_SPI_MOSI_PIN_CLK_ENABLE(); 
 800576c:	4b48      	ldr	r3, [pc, #288]	; (8005890 <SM_SPI_MspInit+0x16c>)
 800576e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005770:	4a47      	ldr	r2, [pc, #284]	; (8005890 <SM_SPI_MspInit+0x16c>)
 8005772:	f043 0304 	orr.w	r3, r3, #4
 8005776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005778:	4b45      	ldr	r3, [pc, #276]	; (8005890 <SM_SPI_MspInit+0x16c>)
 800577a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	693b      	ldr	r3, [r7, #16]
  
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005784:	2302      	movs	r3, #2
 8005786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005788:	2300      	movs	r3, #0
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800578c:	2303      	movs	r3, #3
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  GPIO_InitStruct.Alternate = SM_SPI_CLK_AF;
 8005790:	2305      	movs	r3, #5
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pin = SM_SPI_CLK_PIN;
 8005794:	2302      	movs	r3, #2
 8005796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_SPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005798:	f107 031c 	add.w	r3, r7, #28
 800579c:	4619      	mov	r1, r3
 800579e:	483d      	ldr	r0, [pc, #244]	; (8005894 <SM_SPI_MspInit+0x170>)
 80057a0:	f003 fbc2 	bl	8008f28 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MISO_AF;
 80057a4:	2305      	movs	r3, #5
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pin = SM_SPI_MISO_PIN;
 80057a8:	2308      	movs	r3, #8
 80057aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80057ac:	f107 031c 	add.w	r3, r7, #28
 80057b0:	4619      	mov	r1, r3
 80057b2:	4838      	ldr	r0, [pc, #224]	; (8005894 <SM_SPI_MspInit+0x170>)
 80057b4:	f003 fbb8 	bl	8008f28 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MOSI_AF;
 80057b8:	2305      	movs	r3, #5
 80057ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pin = SM_SPI_MOSI_PIN;
 80057bc:	2308      	movs	r3, #8
 80057be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80057c0:	f107 031c 	add.w	r3, r7, #28
 80057c4:	4619      	mov	r1, r3
 80057c6:	4834      	ldr	r0, [pc, #208]	; (8005898 <SM_SPI_MspInit+0x174>)
 80057c8:	f003 fbae 	bl	8008f28 <HAL_GPIO_Init>
  
  SM_SPIx_CLK_ENABLE();
 80057cc:	4b30      	ldr	r3, [pc, #192]	; (8005890 <SM_SPI_MspInit+0x16c>)
 80057ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d0:	4a2f      	ldr	r2, [pc, #188]	; (8005890 <SM_SPI_MspInit+0x16c>)
 80057d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057d6:	6593      	str	r3, [r2, #88]	; 0x58
 80057d8:	4b2d      	ldr	r3, [pc, #180]	; (8005890 <SM_SPI_MspInit+0x16c>)
 80057da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	68fb      	ldr	r3, [r7, #12]
    
  /* SPI DMA Init */
  /* SPI_RX Init */
  hdma_sm_spi_rx.Instance = SM_SPI_RX_DMA_CHANNEL;
 80057e4:	4b2d      	ldr	r3, [pc, #180]	; (800589c <SM_SPI_MspInit+0x178>)
 80057e6:	4a2e      	ldr	r2, [pc, #184]	; (80058a0 <SM_SPI_MspInit+0x17c>)
 80057e8:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_rx.Init.Request = SM_SPI_RX_DMA_REQUEST;
 80057ea:	4b2c      	ldr	r3, [pc, #176]	; (800589c <SM_SPI_MspInit+0x178>)
 80057ec:	220c      	movs	r2, #12
 80057ee:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057f0:	4b2a      	ldr	r3, [pc, #168]	; (800589c <SM_SPI_MspInit+0x178>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057f6:	4b29      	ldr	r3, [pc, #164]	; (800589c <SM_SPI_MspInit+0x178>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057fc:	4b27      	ldr	r3, [pc, #156]	; (800589c <SM_SPI_MspInit+0x178>)
 80057fe:	2280      	movs	r2, #128	; 0x80
 8005800:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005802:	4b26      	ldr	r3, [pc, #152]	; (800589c <SM_SPI_MspInit+0x178>)
 8005804:	2200      	movs	r2, #0
 8005806:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005808:	4b24      	ldr	r3, [pc, #144]	; (800589c <SM_SPI_MspInit+0x178>)
 800580a:	2200      	movs	r2, #0
 800580c:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_rx.Init.Mode = DMA_NORMAL;
 800580e:	4b23      	ldr	r3, [pc, #140]	; (800589c <SM_SPI_MspInit+0x178>)
 8005810:	2200      	movs	r2, #0
 8005812:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005814:	4b21      	ldr	r3, [pc, #132]	; (800589c <SM_SPI_MspInit+0x178>)
 8005816:	2200      	movs	r2, #0
 8005818:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_rx) != HAL_OK)
 800581a:	4820      	ldr	r0, [pc, #128]	; (800589c <SM_SPI_MspInit+0x178>)
 800581c:	f003 f904 	bl	8008a28 <HAL_DMA_Init>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <SM_SPI_MspInit+0x106>
  {
    SM_Error_Handler();
 8005826:	f7ff fe01 	bl	800542c <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmarx,hdma_sm_spi_rx);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a1b      	ldr	r2, [pc, #108]	; (800589c <SM_SPI_MspInit+0x178>)
 800582e:	659a      	str	r2, [r3, #88]	; 0x58
 8005830:	4a1a      	ldr	r2, [pc, #104]	; (800589c <SM_SPI_MspInit+0x178>)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6293      	str	r3, [r2, #40]	; 0x28
  
  /* SPI_TX Init */
  hdma_sm_spi_tx.Instance = SM_SPI_TX_DMA_CHANNEL;
 8005836:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <SM_SPI_MspInit+0x180>)
 8005838:	4a1b      	ldr	r2, [pc, #108]	; (80058a8 <SM_SPI_MspInit+0x184>)
 800583a:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_tx.Init.Request = SM_SPI_TX_DMA_REQUEST;
 800583c:	4b19      	ldr	r3, [pc, #100]	; (80058a4 <SM_SPI_MspInit+0x180>)
 800583e:	220d      	movs	r2, #13
 8005840:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005842:	4b18      	ldr	r3, [pc, #96]	; (80058a4 <SM_SPI_MspInit+0x180>)
 8005844:	2210      	movs	r2, #16
 8005846:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005848:	4b16      	ldr	r3, [pc, #88]	; (80058a4 <SM_SPI_MspInit+0x180>)
 800584a:	2200      	movs	r2, #0
 800584c:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_tx.Init.MemInc = DMA_MINC_ENABLE;
 800584e:	4b15      	ldr	r3, [pc, #84]	; (80058a4 <SM_SPI_MspInit+0x180>)
 8005850:	2280      	movs	r2, #128	; 0x80
 8005852:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005854:	4b13      	ldr	r3, [pc, #76]	; (80058a4 <SM_SPI_MspInit+0x180>)
 8005856:	2200      	movs	r2, #0
 8005858:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800585a:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <SM_SPI_MspInit+0x180>)
 800585c:	2200      	movs	r2, #0
 800585e:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_tx.Init.Mode = DMA_NORMAL;
 8005860:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <SM_SPI_MspInit+0x180>)
 8005862:	2200      	movs	r2, #0
 8005864:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005866:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <SM_SPI_MspInit+0x180>)
 8005868:	2200      	movs	r2, #0
 800586a:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_tx) != HAL_OK)
 800586c:	480d      	ldr	r0, [pc, #52]	; (80058a4 <SM_SPI_MspInit+0x180>)
 800586e:	f003 f8db 	bl	8008a28 <HAL_DMA_Init>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <SM_SPI_MspInit+0x158>
  {
    SM_Error_Handler();
 8005878:	f7ff fdd8 	bl	800542c <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmatx,hdma_sm_spi_tx);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a09      	ldr	r2, [pc, #36]	; (80058a4 <SM_SPI_MspInit+0x180>)
 8005880:	655a      	str	r2, [r3, #84]	; 0x54
 8005882:	4a08      	ldr	r2, [pc, #32]	; (80058a4 <SM_SPI_MspInit+0x180>)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005888:	bf00      	nop
 800588a:	3730      	adds	r7, #48	; 0x30
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40021000 	.word	0x40021000
 8005894:	48000c00 	.word	0x48000c00
 8005898:	48000800 	.word	0x48000800
 800589c:	20018718 	.word	0x20018718
 80058a0:	40020008 	.word	0x40020008
 80058a4:	2001898c 	.word	0x2001898c
 80058a8:	4002001c 	.word	0x4002001c

080058ac <SM_TIM_Init>:
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 4, 0);
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);  
}

void SM_TIM_Init(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
  SM_TIMx_CLK_ENABLE();
 80058b2:	4b13      	ldr	r3, [pc, #76]	; (8005900 <SM_TIM_Init+0x54>)
 80058b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b6:	4a12      	ldr	r2, [pc, #72]	; (8005900 <SM_TIM_Init+0x54>)
 80058b8:	f043 0308 	orr.w	r3, r3, #8
 80058bc:	6593      	str	r3, [r2, #88]	; 0x58
 80058be:	4b10      	ldr	r3, [pc, #64]	; (8005900 <SM_TIM_Init+0x54>)
 80058c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
  /* Set TIMx instance */
  hsm_tim.Instance = SM_TIMx;
 80058ca:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <SM_TIM_Init+0x58>)
 80058cc:	4a0e      	ldr	r2, [pc, #56]	; (8005908 <SM_TIM_Init+0x5c>)
 80058ce:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = (SystemCoreClock/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  hsm_tim.Init.Period            = 0xFFFFFFFF;
 80058d0:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <SM_TIM_Init+0x58>)
 80058d2:	f04f 32ff 	mov.w	r2, #4294967295
 80058d6:	60da      	str	r2, [r3, #12]
  hsm_tim.Init.Prescaler         = 0;
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <SM_TIM_Init+0x58>)
 80058da:	2200      	movs	r2, #0
 80058dc:	605a      	str	r2, [r3, #4]
  hsm_tim.Init.ClockDivision     = 0;
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <SM_TIM_Init+0x58>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	611a      	str	r2, [r3, #16]
  hsm_tim.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80058e4:	4b07      	ldr	r3, [pc, #28]	; (8005904 <SM_TIM_Init+0x58>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	609a      	str	r2, [r3, #8]
  hsm_tim.Init.RepetitionCounter = 0;
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <SM_TIM_Init+0x58>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	615a      	str	r2, [r3, #20]

  if (HAL_TIM_Base_Init(&hsm_tim) != HAL_OK)
 80058f0:	4804      	ldr	r0, [pc, #16]	; (8005904 <SM_TIM_Init+0x58>)
 80058f2:	f009 f9c5 	bl	800ec80 <HAL_TIM_Base_Init>
  {
    /* Initialization Error */
//    Error_Handler();
  }
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40021000 	.word	0x40021000
 8005904:	200187d8 	.word	0x200187d8
 8005908:	40000c00 	.word	0x40000c00

0800590c <SM_TIM_Start>:

void SM_TIM_Start(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Start(&hsm_tim) != HAL_OK)
 8005910:	4802      	ldr	r0, [pc, #8]	; (800591c <SM_TIM_Start+0x10>)
 8005912:	f009 f9eb 	bl	800ecec <HAL_TIM_Base_Start>
  {
    /* Starting Error */
//    Error_Handler();
  }
}
 8005916:	bf00      	nop
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	200187d8 	.word	0x200187d8

08005920 <SM_TIM_Stop>:

void SM_TIM_Stop(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Stop(&hsm_tim) != HAL_OK)
 8005924:	4804      	ldr	r0, [pc, #16]	; (8005938 <SM_TIM_Stop+0x18>)
 8005926:	f009 fa0b 	bl	800ed40 <HAL_TIM_Base_Stop>
  {
    /* Starting Error */
//    Error_Handler();
  }
  hsm_tim.Instance->CNT = 0;
 800592a:	4b03      	ldr	r3, [pc, #12]	; (8005938 <SM_TIM_Stop+0x18>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2200      	movs	r2, #0
 8005930:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005932:	bf00      	nop
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	200187d8 	.word	0x200187d8

0800593c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005940:	bf00      	nop
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800594a:	b480      	push	{r7}
 800594c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800594e:	e7fe      	b.n	800594e <HardFault_Handler+0x4>

08005950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005954:	e7fe      	b.n	8005954 <MemManage_Handler+0x4>

08005956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005956:	b480      	push	{r7}
 8005958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800595a:	e7fe      	b.n	800595a <BusFault_Handler+0x4>

0800595c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005960:	e7fe      	b.n	8005960 <UsageFault_Handler+0x4>

08005962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005962:	b480      	push	{r7}
 8005964:	af00      	add	r7, sp, #0

}
 8005966:	bf00      	nop
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
 HAL_IncTick();
 8005974:	f001 fac4 	bl	8006f00 <HAL_IncTick>
 osSystickHandler();
 8005978:	f011 fee0 	bl	801773c <osSystickHandler>
}
 800597c:	bf00      	nop
 800597e:	bd80      	pop	{r7, pc}

08005980 <PVD_PVM_IRQHandler>:
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/
void PVD_PVM_IRQHandler(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  HAL_PWREx_PVD_PVM_IRQHandler();
 8005984:	f005 f964 	bl	800ac50 <HAL_PWREx_PVD_PVM_IRQHandler>
}
 8005988:	bf00      	nop
 800598a:	bd80      	pop	{r7, pc}

0800598c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line[0] interrupts.
  */
void EXTI0_IRQHandler(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8005990:	2001      	movs	r0, #1
 8005992:	f003 fca5 	bl	80092e0 <HAL_GPIO_EXTI_IRQHandler>
}
 8005996:	bf00      	nop
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
   HAL_EXTI_IRQHandler(&hts221_exti);  
 80059a0:	4806      	ldr	r0, [pc, #24]	; (80059bc <EXTI9_5_IRQHandler+0x20>)
 80059a2:	f003 fa91 	bl	8008ec8 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&ism330dhcx_exti);  
 80059a6:	4806      	ldr	r0, [pc, #24]	; (80059c0 <EXTI9_5_IRQHandler+0x24>)
 80059a8:	f003 fa8e 	bl	8008ec8 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&iis2mdc_exti);
 80059ac:	4805      	ldr	r0, [pc, #20]	; (80059c4 <EXTI9_5_IRQHandler+0x28>)
 80059ae:	f003 fa8b 	bl	8008ec8 <HAL_EXTI_IRQHandler>
   HAL_GPIO_EXTI_IRQHandler(IIS3DWB_INT1_Pin);
 80059b2:	2020      	movs	r0, #32
 80059b4:	f003 fc94 	bl	80092e0 <HAL_GPIO_EXTI_IRQHandler>
}
 80059b8:	bf00      	nop
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	2000fe90 	.word	0x2000fe90
 80059c0:	20015e78 	.word	0x20015e78
 80059c4:	2000fef8 	.word	0x2000fef8

080059c8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hsm_i2c);
 80059cc:	4802      	ldr	r0, [pc, #8]	; (80059d8 <I2C2_EV_IRQHandler+0x10>)
 80059ce:	f003 fc9f 	bl	8009310 <HAL_I2C_EV_IRQHandler>
}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	200188a8 	.word	0x200188a8

080059dc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hsm_i2c);
 80059e0:	4802      	ldr	r0, [pc, #8]	; (80059ec <I2C2_ER_IRQHandler+0x10>)
 80059e2:	f003 fcaf 	bl	8009344 <HAL_I2C_ER_IRQHandler>
}
 80059e6:	bf00      	nop
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200188a8 	.word	0x200188a8

080059f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
//  HAL_EXTI_IRQHandler(&iis3dwb_exti);
  HAL_EXTI_IRQHandler(&BC_exti);
 80059f4:	4802      	ldr	r0, [pc, #8]	; (8005a00 <EXTI15_10_IRQHandler+0x10>)
 80059f6:	f003 fa67 	bl	8008ec8 <HAL_EXTI_IRQHandler>
}
 80059fa:	bf00      	nop
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20016318 	.word	0x20016318

08005a04 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI2_IRQHandler(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&iis2dh_exti);
 8005a08:	4802      	ldr	r0, [pc, #8]	; (8005a14 <EXTI2_IRQHandler+0x10>)
 8005a0a:	f003 fa5d 	bl	8008ec8 <HAL_EXTI_IRQHandler>
}
 8005a0e:	bf00      	nop
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	2000fed4 	.word	0x2000fed4

08005a18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005a1c:	4802      	ldr	r0, [pc, #8]	; (8005a28 <OTG_FS_IRQHandler+0x10>)
 8005a1e:	f004 f958 	bl	8009cd2 <HAL_PCD_IRQHandler>
}
 8005a22:	bf00      	nop
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20018a14 	.word	0x20018a14

08005a2c <SDMMC1_IRQHandler>:

void SDMMC1_IRQHandler(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd1);
 8005a30:	4802      	ldr	r0, [pc, #8]	; (8005a3c <SDMMC1_IRQHandler+0x10>)
 8005a32:	f007 f819 	bl	800ca68 <HAL_SD_IRQHandler>
}
 8005a36:	bf00      	nop
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20015fc0 	.word	0x20015fc0

08005a40 <STTS751_Set_State>:
    }      
  }
}

void STTS751_Set_State(SM_Sensor_State_t newState)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	71fb      	strb	r3, [r7, #7]
  STTS751_Sensor_State = newState;
 8005a4a:	4a04      	ldr	r2, [pc, #16]	; (8005a5c <STTS751_Set_State+0x1c>)
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	7013      	strb	r3, [r2, #0]
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	20000035 	.word	0x20000035

08005a60 <STTS751_Start>:
  STTS751_Init_Param.FS[0] = newFS1;
  STTS751_Init_Param.FS[0] = newFS2;
}

void STTS751_Start(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8005a64:	2003      	movs	r0, #3
 8005a66:	f7ff ffeb 	bl	8005a40 <STTS751_Set_State>
  osThreadResume(STTS751_Thread_Id);
 8005a6a:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <STTS751_Start+0x18>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f011 fe7c 	bl	801776c <osThreadResume>
}
 8005a74:	bf00      	nop
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20018a10 	.word	0x20018a10

08005a7c <STTS751_Stop>:

void STTS751_Stop(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8005a80:	2001      	movs	r0, #1
 8005a82:	f7ff ffdd 	bl	8005a40 <STTS751_Set_State>
}
 8005a86:	bf00      	nop
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <SystemInit>:
#define VECTOR_TABLE 0x08000000
#endif


void SystemInit(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a90:	4b17      	ldr	r3, [pc, #92]	; (8005af0 <SystemInit+0x64>)
 8005a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a96:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <SystemInit+0x64>)
 8005a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005aa0:	4b14      	ldr	r3, [pc, #80]	; (8005af4 <SystemInit+0x68>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <SystemInit+0x68>)
 8005aa6:	f043 0301 	orr.w	r3, r3, #1
 8005aaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005aac:	4b11      	ldr	r3, [pc, #68]	; (8005af4 <SystemInit+0x68>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8005ab2:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <SystemInit+0x68>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a0f      	ldr	r2, [pc, #60]	; (8005af4 <SystemInit+0x68>)
 8005ab8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005abc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005ac0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8005ac2:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <SystemInit+0x68>)
 8005ac4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ac8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005aca:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <SystemInit+0x68>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a09      	ldr	r2, [pc, #36]	; (8005af4 <SystemInit+0x68>)
 8005ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005ad6:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <SystemInit+0x68>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <SystemInit+0x64>)
 8005ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	e000ed00 	.word	0xe000ed00
 8005af4:	40021000 	.word	0x40021000

08005af8 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f00c fec5 	bl	801289e <USBD_LL_SetupStage>
}
 8005b14:	bf00      	nop
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005b2e:	78fa      	ldrb	r2, [r7, #3]
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	4613      	mov	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	440b      	add	r3, r1
 8005b3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	4619      	mov	r1, r3
 8005b46:	f00c fef7 	bl	8012938 <USBD_LL_DataOutStage>
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	440b      	add	r3, r1
 8005b72:	3348      	adds	r3, #72	; 0x48
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	f00c ff4e 	bl	8012a1a <USBD_LL_DataInStage>
}
 8005b7e:	bf00      	nop
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b94:	4618      	mov	r0, r3
 8005b96:	f00d f861 	bl	8012c5c <USBD_LL_SOF>
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f00c ffd7 	bl	8012b64 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f00d f811 	bl	8012be6 <USBD_LL_SetSpeed>
}
 8005bc4:	bf00      	nop
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f00d f813 	bl	8012c06 <USBD_LL_Suspend>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f00d f81a 	bl	8012c30 <USBD_LL_Resume>
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c16:	78fa      	ldrb	r2, [r7, #3]
 8005c18:	4611      	mov	r1, r2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f00d f845 	bl	8012caa <USBD_LL_IsoOUTIncomplete>
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c3a:	78fa      	ldrb	r2, [r7, #3]
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f00d f826 	bl	8012c90 <USBD_LL_IsoINIncomplete>
}
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f00d f832 	bl	8012cc4 <USBD_LL_DevConnected>
}
 8005c60:	bf00      	nop
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c76:	4618      	mov	r0, r3
 8005c78:	f00d f82f 	bl	8012cda <USBD_LL_DevDisconnected>
}
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	4611      	mov	r1, r2
 8005c90:	461a      	mov	r2, r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	70fb      	strb	r3, [r7, #3]
 8005c96:	460b      	mov	r3, r1
 8005c98:	70bb      	strb	r3, [r7, #2]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005ca4:	78bb      	ldrb	r3, [r7, #2]
 8005ca6:	883a      	ldrh	r2, [r7, #0]
 8005ca8:	78f9      	ldrb	r1, [r7, #3]
 8005caa:	f004 fbdb 	bl	800a464 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cca:	78fa      	ldrb	r2, [r7, #3]
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f004 fcab 	bl	800a62a <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b082      	sub	sp, #8
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cf0:	78fa      	ldrb	r2, [r7, #3]
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f004 fcfa 	bl	800a6ee <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d16:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da0b      	bge.n	8005d38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d26:	68f9      	ldr	r1, [r7, #12]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	1a9b      	subs	r3, r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	333e      	adds	r3, #62	; 0x3e
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	e00b      	b.n	8005d50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d3e:	68f9      	ldr	r1, [r7, #12]
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d6e:	78fa      	ldrb	r2, [r7, #3]
 8005d70:	4611      	mov	r1, r2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f004 fb51 	bl	800a41a <HAL_PCD_SetAddress>
  return USBD_OK; 
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	460b      	mov	r3, r1
 8005d90:	72fb      	strb	r3, [r7, #11]
 8005d92:	4613      	mov	r3, r2
 8005d94:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005d9c:	893b      	ldrh	r3, [r7, #8]
 8005d9e:	7af9      	ldrb	r1, [r7, #11]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	f004 fc05 	bl	800a5b0 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	72fb      	strb	r3, [r7, #11]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005dca:	893b      	ldrh	r3, [r7, #8]
 8005dcc:	7af9      	ldrb	r1, [r7, #11]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	f004 fbb0 	bl	800a534 <HAL_PCD_EP_Receive>
  return USBD_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <iis3dwb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8005dde:	b590      	push	{r4, r7, lr}
 8005de0:	b087      	sub	sp, #28
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	461a      	mov	r2, r3
 8005dea:	460b      	mov	r3, r1
 8005dec:	72fb      	strb	r3, [r7, #11]
 8005dee:	4613      	mov	r3, r2
 8005df0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685c      	ldr	r4, [r3, #4]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6898      	ldr	r0, [r3, #8]
 8005dfa:	893b      	ldrh	r3, [r7, #8]
 8005dfc:	7af9      	ldrb	r1, [r7, #11]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	47a0      	blx	r4
 8005e02:	6178      	str	r0, [r7, #20]
  return ret;
 8005e04:	697b      	ldr	r3, [r7, #20]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd90      	pop	{r4, r7, pc}

08005e0e <iis3dwb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 8005e0e:	b590      	push	{r4, r7, lr}
 8005e10:	b087      	sub	sp, #28
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	72fb      	strb	r3, [r7, #11]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681c      	ldr	r4, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6898      	ldr	r0, [r3, #8]
 8005e2a:	893b      	ldrh	r3, [r7, #8]
 8005e2c:	7af9      	ldrb	r1, [r7, #11]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	47a0      	blx	r4
 8005e32:	6178      	str	r0, [r7, #20]
  return ret;
 8005e34:	697b      	ldr	r3, [r7, #20]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd90      	pop	{r4, r7, pc}

08005e3e <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    iis3dwb_fs_xl_t val)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005e4a:	f107 0208 	add.w	r2, r7, #8
 8005e4e:	2301      	movs	r3, #1
 8005e50:	2110      	movs	r1, #16
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff ffc3 	bl	8005dde <iis3dwb_read_reg>
 8005e58:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10f      	bne.n	8005e80 <iis3dwb_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	7a3b      	ldrb	r3, [r7, #8]
 8005e6a:	f362 0383 	bfi	r3, r2, #2, #2
 8005e6e:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8005e70:	f107 0208 	add.w	r2, r7, #8
 8005e74:	2301      	movs	r3, #1
 8005e76:	2110      	movs	r1, #16
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff ffc8 	bl	8005e0e <iis3dwb_write_reg>
 8005e7e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 8005e80:	68fb      	ldr	r3, [r7, #12]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                      iis3dwb_dataready_pulsed_t val)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	460b      	mov	r3, r1
 8005e94:	70fb      	strb	r3, [r7, #3]
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 8005e96:	f107 0208 	add.w	r2, r7, #8
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	210b      	movs	r1, #11
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff ff9d 	bl	8005dde <iis3dwb_read_reg>
 8005ea4:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&counter_bdr_reg1, 1);
  if(ret == 0){
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10f      	bne.n	8005ecc <iis3dwb_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed= (uint8_t)val;
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	7a3b      	ldrb	r3, [r7, #8]
 8005eb6:	f362 13c7 	bfi	r3, r2, #7, #1
 8005eba:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 8005ebc:	f107 0208 	add.w	r2, r7, #8
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	210b      	movs	r1, #11
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff ffa2 	bl	8005e0e <iis3dwb_write_reg>
 8005eca:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&counter_bdr_reg1, 1);
  }
  return ret;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	210f      	movs	r1, #15
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff ff79 	bl	8005dde <iis3dwb_read_reg>
 8005eec:	60f8      	str	r0, [r7, #12]
  return ret;
 8005eee:	68fb      	ldr	r3, [r7, #12]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005f04:	f107 0208 	add.w	r2, r7, #8
 8005f08:	2301      	movs	r3, #1
 8005f0a:	2112      	movs	r1, #18
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff ff66 	bl	8005dde <iis3dwb_read_reg>
 8005f12:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10f      	bne.n	8005f3a <iis3dwb_reset_set+0x42>
    ctrl3_c.sw_reset= (uint8_t)val;
 8005f1a:	78fb      	ldrb	r3, [r7, #3]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	7a3b      	ldrb	r3, [r7, #8]
 8005f24:	f362 0300 	bfi	r3, r2, #0, #1
 8005f28:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005f2a:	f107 0208 	add.w	r2, r7, #8
 8005f2e:	2301      	movs	r3, #1
 8005f30:	2112      	movs	r1, #18
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff ff6b 	bl	8005e0e <iis3dwb_write_reg>
 8005f38:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <iis3dwb_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_hp_slope_xl_en_t val)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005f50:	f107 0210 	add.w	r2, r7, #16
 8005f54:	2301      	movs	r3, #1
 8005f56:	2110      	movs	r1, #16
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff ff40 	bl	8005dde <iis3dwb_read_reg>
 8005f5e:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d111      	bne.n	8005f8a <iis3dwb_xl_hp_path_on_out_set+0x46>
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	09db      	lsrs	r3, r3, #7
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	7c3b      	ldrb	r3, [r7, #16]
 8005f74:	f362 0341 	bfi	r3, r2, #1, #1
 8005f78:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005f7a:	f107 0210 	add.w	r2, r7, #16
 8005f7e:	2301      	movs	r3, #1
 8005f80:	2110      	movs	r1, #16
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff ff43 	bl	8005e0e <iis3dwb_write_reg>
 8005f88:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d107      	bne.n	8005fa0 <iis3dwb_xl_hp_path_on_out_set+0x5c>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8005f90:	f107 020c 	add.w	r2, r7, #12
 8005f94:	2301      	movs	r3, #1
 8005f96:	2117      	movs	r1, #23
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff ff20 	bl	8005dde <iis3dwb_read_reg>
 8005f9e:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d121      	bne.n	8005fea <iis3dwb_xl_hp_path_on_out_set+0xa6>
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	7b3b      	ldrb	r3, [r7, #12]
 8005fb2:	f362 0382 	bfi	r3, r2, #2, #1
 8005fb6:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	7b3b      	ldrb	r3, [r7, #12]
 8005fc4:	f362 1304 	bfi	r3, r2, #4, #1
 8005fc8:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	7b3b      	ldrb	r3, [r7, #12]
 8005fd4:	f362 1347 	bfi	r3, r2, #5, #3
 8005fd8:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8005fda:	f107 020c 	add.w	r2, r7, #12
 8005fde:	2301      	movs	r3, #1
 8005fe0:	2117      	movs	r1, #23
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff ff13 	bl	8005e0e <iis3dwb_write_reg>
 8005fe8:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8005fea:	697b      	ldr	r3, [r7, #20]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                    iis3dwb_i2c_disable_t val)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8006000:	f107 0208 	add.w	r2, r7, #8
 8006004:	2301      	movs	r3, #1
 8006006:	2113      	movs	r1, #19
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff fee8 	bl	8005dde <iis3dwb_read_reg>
 800600e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10f      	bne.n	8006036 <iis3dwb_i2c_interface_set+0x42>
    ctrl4_c.i2c_disable= (uint8_t)val;
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	b2da      	uxtb	r2, r3
 800601e:	7a3b      	ldrb	r3, [r7, #8]
 8006020:	f362 0382 	bfi	r3, r2, #2, #1
 8006024:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8006026:	f107 0208 	add.w	r2, r7, #8
 800602a:	2301      	movs	r3, #1
 800602c:	2113      	movs	r1, #19
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff feed 	bl	8005e0e <iis3dwb_write_reg>
 8006034:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006036:	68fb      	ldr	r3, [r7, #12]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <iis3dwb_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                     iis3dwb_pin_int1_route_t *val)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
                            (uint8_t*)&val->int1_ctrl, 1);
 800604a:	683a      	ldr	r2, [r7, #0]
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
 800604c:	2301      	movs	r3, #1
 800604e:	210d      	movs	r1, #13
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff fedc 	bl	8005e0e <iis3dwb_write_reg>
 8006056:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d107      	bne.n	800606e <iis3dwb_pin_int1_route_set+0x2e>
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
                              (uint8_t*)&val->md1_cfg, 1);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	1c5a      	adds	r2, r3, #1
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
 8006062:	2301      	movs	r3, #1
 8006064:	215e      	movs	r1, #94	; 0x5e
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff fed1 	bl	8005e0e <iis3dwb_write_reg>
 800606c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800606e:	68fb      	ldr	r3, [r7, #12]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	807b      	strh	r3, [r7, #2]
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8006084:	f107 020c 	add.w	r2, r7, #12
 8006088:	2301      	movs	r3, #1
 800608a:	2108      	movs	r1, #8
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff fea6 	bl	8005dde <iis3dwb_read_reg>
 8006092:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_ctrl2, 1);
  if(ret == 0){
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <iis3dwb_fifo_watermark_set+0x38>
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 800609a:	887b      	ldrh	r3, [r7, #2]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
 80060a0:	f107 0210 	add.w	r2, r7, #16
 80060a4:	2301      	movs	r3, #1
 80060a6:	2107      	movs	r1, #7
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff feb0 	bl	8005e0e <iis3dwb_write_reg>
 80060ae:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl1, 1);
  }
  if(ret == 0){
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d111      	bne.n	80060da <iis3dwb_fifo_watermark_set+0x62>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 80060b6:	887b      	ldrh	r3, [r7, #2]
 80060b8:	0a1b      	lsrs	r3, r3, #8
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	7b3b      	ldrb	r3, [r7, #12]
 80060c4:	f362 0300 	bfi	r3, r2, #0, #1
 80060c8:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
 80060ca:	f107 020c 	add.w	r2, r7, #12
 80060ce:	2301      	movs	r3, #1
 80060d0:	2108      	movs	r1, #8
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fe9b 	bl	8005e0e <iis3dwb_write_reg>
 80060d8:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
  }
  return ret;
 80060da:	697b      	ldr	r3, [r7, #20]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                    iis3dwb_bdr_xl_t val)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
 80060f0:	f107 0208 	add.w	r2, r7, #8
 80060f4:	2301      	movs	r3, #1
 80060f6:	2109      	movs	r1, #9
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff fe70 	bl	8005dde <iis3dwb_read_reg>
 80060fe:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl3, 1);
  if(ret == 0){
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10f      	bne.n	8006126 <iis3dwb_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl= (uint8_t)val;
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	b2da      	uxtb	r2, r3
 800610e:	7a3b      	ldrb	r3, [r7, #8]
 8006110:	f362 0303 	bfi	r3, r2, #0, #4
 8006114:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8006116:	f107 0208 	add.w	r2, r7, #8
 800611a:	2301      	movs	r3, #1
 800611c:	2109      	movs	r1, #9
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff fe75 	bl	8005e0e <iis3dwb_write_reg>
 8006124:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 8006126:	68fb      	ldr	r3, [r7, #12]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                                iis3dwb_fifo_mode_t val)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 800613c:	f107 0208 	add.w	r2, r7, #8
 8006140:	2301      	movs	r3, #1
 8006142:	210a      	movs	r1, #10
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff fe4a 	bl	8005dde <iis3dwb_read_reg>
 800614a:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10f      	bne.n	8006172 <iis3dwb_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	b2da      	uxtb	r2, r3
 800615a:	7a3b      	ldrb	r3, [r7, #8]
 800615c:	f362 0302 	bfi	r3, r2, #0, #3
 8006160:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8006162:	f107 0208 	add.w	r2, r7, #8
 8006166:	2301      	movs	r3, #1
 8006168:	210a      	movs	r1, #10
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff fe4f 	bl	8005e0e <iis3dwb_write_reg>
 8006170:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
 8006172:	68fb      	ldr	r3, [r7, #12]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	71fb      	strb	r3, [r7, #7]
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 8006186:	4b31      	ldr	r3, [pc, #196]	; (800624c <BSP_ADC1_Initialization+0xd0>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d152      	bne.n	8006234 <BSP_ADC1_Initialization+0xb8>
   
    /**Common config */
    ADC1_Handle.Instance = ADC1;
 800618e:	4b30      	ldr	r3, [pc, #192]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 8006190:	4a30      	ldr	r2, [pc, #192]	; (8006254 <BSP_ADC1_Initialization+0xd8>)
 8006192:	601a      	str	r2, [r3, #0]
    ADC1_Handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006194:	4b2e      	ldr	r3, [pc, #184]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 8006196:	2200      	movs	r2, #0
 8006198:	605a      	str	r2, [r3, #4]
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 800619a:	4b2d      	ldr	r3, [pc, #180]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 800619c:	2200      	movs	r2, #0
 800619e:	609a      	str	r2, [r3, #8]
    ADC1_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80061a0:	4b2b      	ldr	r3, [pc, #172]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	60da      	str	r2, [r3, #12]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 80061a6:	4b2a      	ldr	r3, [pc, #168]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	611a      	str	r2, [r3, #16]
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80061ac:	4b28      	ldr	r3, [pc, #160]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061ae:	2204      	movs	r2, #4
 80061b0:	615a      	str	r2, [r3, #20]
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 80061b2:	4b27      	ldr	r3, [pc, #156]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	761a      	strb	r2, [r3, #24]
    ADC1_Handle.Init.ContinuousConvMode = ENABLE;
 80061b8:	4b25      	ldr	r3, [pc, #148]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	765a      	strb	r2, [r3, #25]
    ADC1_Handle.Init.NbrOfConversion = 1; 
 80061be:	4b24      	ldr	r3, [pc, #144]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	61da      	str	r2, [r3, #28]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 80061c4:	4b22      	ldr	r3, [pc, #136]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	625a      	str	r2, [r3, #36]	; 0x24
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 80061ca:	4b21      	ldr	r3, [pc, #132]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2020 	strb.w	r2, [r3, #32]
    ADC1_Handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80061d2:	4b1f      	ldr	r3, [pc, #124]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80061d8:	4b1d      	ldr	r3, [pc, #116]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061da:	2200      	movs	r2, #0
 80061dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 80061de:	4b1c      	ldr	r3, [pc, #112]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80061e6:	4b1a      	ldr	r3, [pc, #104]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Oversampling enabled */
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 80061ee:	4b18      	ldr	r3, [pc, #96]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    
    ADC1_Handle.Init.Oversampling.RightBitShift         = ADC_RIGHTBITSHIFT_NONE;         /* Right shift of the oversampled summation */
 80061f6:	4b16      	ldr	r3, [pc, #88]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	641a      	str	r2, [r3, #64]	; 0x40
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 80061fc:	4b14      	ldr	r3, [pc, #80]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 80061fe:	2200      	movs	r2, #0
 8006200:	645a      	str	r2, [r3, #68]	; 0x44
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */    
 8006202:	4b13      	ldr	r3, [pc, #76]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 8006204:	2201      	movs	r2, #1
 8006206:	649a      	str	r2, [r3, #72]	; 0x48
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8006208:	4b11      	ldr	r3, [pc, #68]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 800620a:	2204      	movs	r2, #4
 800620c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 800620e:	4810      	ldr	r0, [pc, #64]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 8006210:	f000 ffc8 	bl	80071a4 <HAL_ADC_Init>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <BSP_ADC1_Initialization+0xa4>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800621a:	f06f 0303 	mvn.w	r3, #3
 800621e:	e011      	b.n	8006244 <BSP_ADC1_Initialization+0xc8>
    }

    /* ### Start calibration ############################################ */
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 8006220:	217f      	movs	r1, #127	; 0x7f
 8006222:	480b      	ldr	r0, [pc, #44]	; (8006250 <BSP_ADC1_Initialization+0xd4>)
 8006224:	f001 fcf2 	bl	8007c0c <HAL_ADCEx_Calibration_Start>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <BSP_ADC1_Initialization+0xb8>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800622e:	f06f 0303 	mvn.w	r3, #3
 8006232:	e007      	b.n	8006244 <BSP_ADC1_Initialization+0xc8>
    } 
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <BSP_ADC1_Initialization+0xd0>)
 8006236:	781a      	ldrb	r2, [r3, #0]
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	4313      	orrs	r3, r2
 800623c:	b2da      	uxtb	r2, r3
 800623e:	4b03      	ldr	r3, [pc, #12]	; (800624c <BSP_ADC1_Initialization+0xd0>)
 8006240:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	200008d8 	.word	0x200008d8
 8006250:	20018e1c 	.word	0x20018e1c
 8006254:	50040000 	.word	0x50040000

08006258 <HAL_ADC_MspInit>:
* @brief  Initialize the ADC MSP.
* @param  hDfsdmFilter ADC handle
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 8006260:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <HAL_ADC_MspInit+0x40>)
 8006262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006264:	4a0c      	ldr	r2, [pc, #48]	; (8006298 <HAL_ADC_MspInit+0x40>)
 8006266:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800626a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <HAL_ADC_MspInit+0x40>)
 800626e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 8006278:	4b07      	ldr	r3, [pc, #28]	; (8006298 <HAL_ADC_MspInit+0x40>)
 800627a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006282:	4a05      	ldr	r2, [pc, #20]	; (8006298 <HAL_ADC_MspInit+0x40>)
 8006284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800628c:	bf00      	nop
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40021000 	.word	0x40021000

0800629c <BSP_PB_PWR_Init>:
* @brief  Initialize the Power button PWR.
* @param  None
* @retval None
*/
void BSP_PB_PWR_Init(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  POWER_BUTTON_GPIO_CLK_ENABLE();
 80062a2:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <BSP_PB_PWR_Init+0x54>)
 80062a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a6:	4a12      	ldr	r2, [pc, #72]	; (80062f0 <BSP_PB_PWR_Init+0x54>)
 80062a8:	f043 0308 	orr.w	r3, r3, #8
 80062ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062ae:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <BSP_PB_PWR_Init+0x54>)
 80062b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	683b      	ldr	r3, [r7, #0]
  
  /* Configure Button pin as input with External interrupt */
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 80062ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80062c0:	2302      	movs	r3, #2
 80062c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80062c4:	2302      	movs	r3, #2
 80062c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80062c8:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <BSP_PB_PWR_Init+0x58>)
 80062ca:	60bb      	str	r3, [r7, #8]
  
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80062cc:	1d3b      	adds	r3, r7, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	4809      	ldr	r0, [pc, #36]	; (80062f8 <BSP_PB_PWR_Init+0x5c>)
 80062d2:	f002 fe29 	bl	8008f28 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type) POWER_BUTTON_EXTI_IRQn, 0x0F, 0x00);
 80062d6:	2200      	movs	r2, #0
 80062d8:	210f      	movs	r1, #15
 80062da:	2028      	movs	r0, #40	; 0x28
 80062dc:	f002 fb6d 	bl	80089ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) POWER_BUTTON_EXTI_IRQn);
 80062e0:	2028      	movs	r0, #40	; 0x28
 80062e2:	f002 fb86 	bl	80089f2 <HAL_NVIC_EnableIRQ>
  
}
 80062e6:	bf00      	nop
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40021000 	.word	0x40021000
 80062f4:	10110000 	.word	0x10110000
 80062f8:	48000c00 	.word	0x48000c00

080062fc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	460a      	mov	r2, r1
 8006306:	71fb      	strb	r3, [r7, #7]
 8006308:	4613      	mov	r3, r2
 800630a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800630c:	4b21      	ldr	r3, [pc, #132]	; (8006394 <BSP_PB_Init+0x98>)
 800630e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006310:	4a20      	ldr	r2, [pc, #128]	; (8006394 <BSP_PB_Init+0x98>)
 8006312:	f043 0310 	orr.w	r3, r3, #16
 8006316:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006318:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <BSP_PB_Init+0x98>)
 800631a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	68bb      	ldr	r3, [r7, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8006324:	79bb      	ldrb	r3, [r7, #6]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d112      	bne.n	8006350 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800632a:	2301      	movs	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800632e:	2300      	movs	r3, #0
 8006330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006332:	2302      	movs	r3, #2
 8006334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006336:	2302      	movs	r3, #2
 8006338:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	4a16      	ldr	r2, [pc, #88]	; (8006398 <BSP_PB_Init+0x9c>)
 800633e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006342:	f107 020c 	add.w	r2, r7, #12
 8006346:	4611      	mov	r1, r2
 8006348:	4618      	mov	r0, r3
 800634a:	f002 fded 	bl	8008f28 <HAL_GPIO_Init>
 800634e:	e01b      	b.n	8006388 <BSP_PB_Init+0x8c>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8006350:	2301      	movs	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006358:	4b10      	ldr	r3, [pc, #64]	; (800639c <BSP_PB_Init+0xa0>)
 800635a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	4a0e      	ldr	r2, [pc, #56]	; (8006398 <BSP_PB_Init+0x9c>)
 8006360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006364:	f107 020c 	add.w	r2, r7, #12
 8006368:	4611      	mov	r1, r2
 800636a:	4618      	mov	r0, r3
 800636c:	f002 fddc 	bl	8008f28 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8006370:	2306      	movs	r3, #6
 8006372:	b25b      	sxtb	r3, r3
 8006374:	2200      	movs	r2, #0
 8006376:	210f      	movs	r1, #15
 8006378:	4618      	mov	r0, r3
 800637a:	f002 fb1e 	bl	80089ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800637e:	2306      	movs	r3, #6
 8006380:	b25b      	sxtb	r3, r3
 8006382:	4618      	mov	r0, r3
 8006384:	f002 fb35 	bl	80089f2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;  
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3720      	adds	r7, #32
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40021000 	.word	0x40021000
 8006398:	2000003c 	.word	0x2000003c
 800639c:	10210000 	.word	0x10210000

080063a0 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08a      	sub	sp, #40	; 0x28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	4603      	mov	r3, r0
 80063a8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10c      	bne.n	80063ca <BSP_LED_Init+0x2a>
 80063b0:	4b19      	ldr	r3, [pc, #100]	; (8006418 <BSP_LED_Init+0x78>)
 80063b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b4:	4a18      	ldr	r2, [pc, #96]	; (8006418 <BSP_LED_Init+0x78>)
 80063b6:	f043 0310 	orr.w	r3, r3, #16
 80063ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063bc:	4b16      	ldr	r3, [pc, #88]	; (8006418 <BSP_LED_Init+0x78>)
 80063be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	e00b      	b.n	80063e2 <BSP_LED_Init+0x42>
 80063ca:	4b13      	ldr	r3, [pc, #76]	; (8006418 <BSP_LED_Init+0x78>)
 80063cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ce:	4a12      	ldr	r2, [pc, #72]	; (8006418 <BSP_LED_Init+0x78>)
 80063d0:	f043 0308 	orr.w	r3, r3, #8
 80063d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063d6:	4b10      	ldr	r3, [pc, #64]	; (8006418 <BSP_LED_Init+0x78>)
 80063d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	4a0d      	ldr	r2, [pc, #52]	; (800641c <BSP_LED_Init+0x7c>)
 80063e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063ec:	2301      	movs	r3, #1
 80063ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80063f4:	2302      	movs	r3, #2
 80063f6:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	4a09      	ldr	r2, [pc, #36]	; (8006420 <BSP_LED_Init+0x80>)
 80063fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006400:	f107 0214 	add.w	r2, r7, #20
 8006404:	4611      	mov	r1, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f002 fd8e 	bl	8008f28 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3728      	adds	r7, #40	; 0x28
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40021000 	.word	0x40021000
 800641c:	08022810 	.word	0x08022810
 8006420:	20000040 	.word	0x20000040

08006424 <BSP_LED_On>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	4a07      	ldr	r2, [pc, #28]	; (8006450 <BSP_LED_On+0x2c>)
 8006432:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	4a06      	ldr	r2, [pc, #24]	; (8006454 <BSP_LED_On+0x30>)
 800643a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800643e:	2201      	movs	r2, #1
 8006440:	4619      	mov	r1, r3
 8006442:	f002 ff1b 	bl	800927c <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20000040 	.word	0x20000040
 8006454:	08022810 	.word	0x08022810

08006458 <BSP_LED_Off>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	4a07      	ldr	r2, [pc, #28]	; (8006484 <BSP_LED_Off+0x2c>)
 8006466:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	4a06      	ldr	r2, [pc, #24]	; (8006488 <BSP_LED_Off+0x30>)
 800646e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006472:	2200      	movs	r2, #0
 8006474:	4619      	mov	r1, r3
 8006476:	f002 ff01 	bl	800927c <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20000040 	.word	0x20000040
 8006488:	08022810 	.word	0x08022810

0800648c <BSP_BC_Init>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BSP_BC_Init(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  BC_InitCommon();
 8006490:	f000 f908 	bl	80066a4 <BC_InitCommon>
  /* Init the related GPIOs */
  BC_IO_Init();
 8006494:	f000 f90c 	bl	80066b0 <BC_IO_Init>
}
 8006498:	bf00      	nop
 800649a:	bd80      	pop	{r7, pc}

0800649c <BSP_BC_CmdSend>:
  * @param stbc02_SwCmd The command to be sent
  * @retval 0 in case of success
  * @retval 1 in case of failure
  */
int32_t BSP_BC_CmdSend(stbc02_SwCmd_TypeDef stbc02_SwCmd)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	71fb      	strb	r3, [r7, #7]
  uint32_t tk = STBC02_GetTick();
 80064a6:	f000 fd3d 	bl	8006f24 <HAL_GetTick>
 80064aa:	60f8      	str	r0, [r7, #12]
  
  stbc02_SwCmdSel = stbc02_SwCmd;
 80064ac:	4a0f      	ldr	r2, [pc, #60]	; (80064ec <BSP_BC_CmdSend+0x50>)
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	7013      	strb	r3, [r2, #0]
  stbc02_SwState = start;
 80064b2:	4b0f      	ldr	r3, [pc, #60]	; (80064f0 <BSP_BC_CmdSend+0x54>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	701a      	strb	r2, [r3, #0]
  
  /* Start the time base */
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 80064b8:	480e      	ldr	r0, [pc, #56]	; (80064f4 <BSP_BC_CmdSend+0x58>)
 80064ba:	f008 fc6d 	bl	800ed98 <HAL_TIM_Base_Start_IT>
    
  while(stbc02_SwState != idle)
 80064be:	e008      	b.n	80064d2 <BSP_BC_CmdSend+0x36>
  {
    if ( (STBC02_GetTick() - tk) > 10U )
 80064c0:	f000 fd30 	bl	8006f24 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b0a      	cmp	r3, #10
 80064cc:	d901      	bls.n	80064d2 <BSP_BC_CmdSend+0x36>
    {
      return 1;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e007      	b.n	80064e2 <BSP_BC_CmdSend+0x46>
  while(stbc02_SwState != idle)
 80064d2:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <BSP_BC_CmdSend+0x54>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1f2      	bne.n	80064c0 <BSP_BC_CmdSend+0x24>
    }
  }
    /* Stop the time base */
  (void)HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 80064da:	4806      	ldr	r0, [pc, #24]	; (80064f4 <BSP_BC_CmdSend+0x58>)
 80064dc:	f008 fc86 	bl	800edec <HAL_TIM_Base_Stop_IT>
  
  return 0;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	200008e0 	.word	0x200008e0
 80064f0:	200008e1 	.word	0x200008e1
 80064f4:	20018eb0 	.word	0x20018eb0

080064f8 <BSP_BC_ChgPinHasToggled>:
  * @brief Call the function for measuring the toggling frequency of the charging pin of the STBC02
  * @note Must be called when the charging pin of the STBC02 has toggled
  * @retval None
  */
void BSP_BC_ChgPinHasToggled(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  BC_ChgPinFreqGet();
 80064fc:	f000 f9c6 	bl	800688c <BC_ChgPinFreqGet>
  stbc02_ChgPinToggledTime = STBC02_GetTick();
 8006500:	f000 fd10 	bl	8006f24 <HAL_GetTick>
 8006504:	4603      	mov	r3, r0
 8006506:	4a02      	ldr	r2, [pc, #8]	; (8006510 <BSP_BC_ChgPinHasToggled+0x18>)
 8006508:	6013      	str	r3, [r2, #0]
}
 800650a:	bf00      	nop
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	200008e4 	.word	0x200008e4

08006514 <BSP_BC_BatMS_Init>:
* @param  None
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_BatMS_Init(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
   /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 8006518:	2002      	movs	r0, #2
 800651a:	f7ff fe2f 	bl	800617c <BSP_ADC1_Initialization>
  /* Configure the Injection Channel for Voltage ADC convertion */
  (void)Channel_ADC1_Init();
 800651e:	f000 faad 	bl	8006a7c <Channel_ADC1_Init>
  return 0;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	bd80      	pop	{r7, pc}

08006528 <BSP_BC_GetVoltage>:
* @param  mV pointer to destination variable
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_GetVoltage(uint32_t *mV)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t Voltage;
  
  if (HAL_ADCEx_InjectedStart(&ADC1_Handle) != HAL_OK)
 8006530:	4820      	ldr	r0, [pc, #128]	; (80065b4 <BSP_BC_GetVoltage+0x8c>)
 8006532:	f001 fbcb 	bl	8007ccc <HAL_ADCEx_InjectedStart>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <BSP_BC_GetVoltage+0x1a>
  {
    /* Start Conversation Error */
    return BSP_ERROR_COMPONENT_FAILURE;
 800653c:	f06f 0304 	mvn.w	r3, #4
 8006540:	e034      	b.n	80065ac <BSP_BC_GetVoltage+0x84>
  }
  
  if (HAL_ADCEx_InjectedPollForConversion(&ADC1_Handle, 10) != HAL_OK)
 8006542:	210a      	movs	r1, #10
 8006544:	481b      	ldr	r0, [pc, #108]	; (80065b4 <BSP_BC_GetVoltage+0x8c>)
 8006546:	f001 fc33 	bl	8007db0 <HAL_ADCEx_InjectedPollForConversion>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <BSP_BC_GetVoltage+0x2e>
  {
    /* End Of Conversion flag not set on time */
    return BSP_ERROR_CLOCK_FAILURE;
 8006550:	f06f 0308 	mvn.w	r3, #8
 8006554:	e02a      	b.n	80065ac <BSP_BC_GetVoltage+0x84>
  }
  
  /* Check if the continuous conversion of regular channel is finished */
  if ((HAL_ADC_GetState(&ADC1_Handle) & HAL_ADC_STATE_INJ_EOC) == HAL_ADC_STATE_INJ_EOC)
 8006556:	4817      	ldr	r0, [pc, #92]	; (80065b4 <BSP_BC_GetVoltage+0x8c>)
 8006558:	f001 f868 	bl	800762c <HAL_ADC_GetState>
 800655c:	4603      	mov	r3, r0
 800655e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006566:	d106      	bne.n	8006576 <BSP_BC_GetVoltage+0x4e>
  {
    /*##-5- Get the converted value of regular channel  ########################*/
    uhADCxConvertedValue = HAL_ADCEx_InjectedGetValue(&ADC1_Handle,ADC_INJECTED_RANK_1);
 8006568:	2108      	movs	r1, #8
 800656a:	4812      	ldr	r0, [pc, #72]	; (80065b4 <BSP_BC_GetVoltage+0x8c>)
 800656c:	f001 fcae 	bl	8007ecc <HAL_ADCEx_InjectedGetValue>
 8006570:	4603      	mov	r3, r0
 8006572:	4a11      	ldr	r2, [pc, #68]	; (80065b8 <BSP_BC_GetVoltage+0x90>)
 8006574:	6013      	str	r3, [r2, #0]
  }
  
  Voltage = (2700U * (uint32_t)uhADCxConvertedValue) / (4095U);  // [0-2.7V]
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <BSP_BC_GetVoltage+0x90>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f640 228c 	movw	r2, #2700	; 0xa8c
 800657e:	fb02 f203 	mul.w	r2, r2, r3
 8006582:	4b0e      	ldr	r3, [pc, #56]	; (80065bc <BSP_BC_GetVoltage+0x94>)
 8006584:	fba3 1302 	umull	r1, r3, r3, r2
 8006588:	1ad2      	subs	r2, r2, r3
 800658a:	0852      	lsrs	r2, r2, #1
 800658c:	4413      	add	r3, r2
 800658e:	0adb      	lsrs	r3, r3, #11
 8006590:	60fb      	str	r3, [r7, #12]
  Voltage = ((56U+100U)*Voltage)/100U;   // [0-4.2V]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	229c      	movs	r2, #156	; 0x9c
 8006596:	fb02 f303 	mul.w	r3, r2, r3
 800659a:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <BSP_BC_GetVoltage+0x98>)
 800659c:	fba2 2303 	umull	r2, r3, r2, r3
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	60fb      	str	r3, [r7, #12]
  
  *mV= Voltage;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	601a      	str	r2, [r3, #0]
  return BSP_ERROR_NONE;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	20018e1c 	.word	0x20018e1c
 80065b8:	200008dc 	.word	0x200008dc
 80065bc:	00100101 	.word	0x00100101
 80065c0:	51eb851f 	.word	0x51eb851f

080065c4 <BSP_BC_GetVoltageAndLevel>:
* @param  uint32_t *Volt battery Voltage Value
* @param  uint32_t *BatteryLevel Battery % Level
* @retval BSP status
*/
int32_t BSP_BC_GetVoltageAndLevel(uint32_t *mV, uint32_t *BatteryLevel)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t Voltage = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60bb      	str	r3, [r7, #8]
  static int32_t VoltageWindowInit=0;
  static uint32_t WindowVoltage[WINDOW_VOLTAGE_DIM];
  static int32_t WindowPostion =0;
  
  (void)BSP_BC_GetVoltage(&Voltage);
 80065d2:	f107 0308 	add.w	r3, r7, #8
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff ffa6 	bl	8006528 <BSP_BC_GetVoltage>
  
  /* We Filter the Voltage for understanding the Battery % Level */
  
  /* Insert the new Value */
  WindowVoltage[WindowPostion]= Voltage;
 80065dc:	4b2d      	ldr	r3, [pc, #180]	; (8006694 <BSP_BC_GetVoltageAndLevel+0xd0>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	492d      	ldr	r1, [pc, #180]	; (8006698 <BSP_BC_GetVoltageAndLevel+0xd4>)
 80065e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  WindowPostion++;  
 80065e8:	4b2a      	ldr	r3, [pc, #168]	; (8006694 <BSP_BC_GetVoltageAndLevel+0xd0>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3301      	adds	r3, #1
 80065ee:	4a29      	ldr	r2, [pc, #164]	; (8006694 <BSP_BC_GetVoltageAndLevel+0xd0>)
 80065f0:	6013      	str	r3, [r2, #0]
  
  /* Control if we have reached the end */    
  if(WindowPostion==WINDOW_VOLTAGE_DIM)
 80065f2:	4b28      	ldr	r3, [pc, #160]	; (8006694 <BSP_BC_GetVoltageAndLevel+0xd0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d109      	bne.n	800660e <BSP_BC_GetVoltageAndLevel+0x4a>
  {
    if(VoltageWindowInit==0)
 80065fa:	4b28      	ldr	r3, [pc, #160]	; (800669c <BSP_BC_GetVoltageAndLevel+0xd8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <BSP_BC_GetVoltageAndLevel+0x44>
    {
      VoltageWindowInit =1;
 8006602:	4b26      	ldr	r3, [pc, #152]	; (800669c <BSP_BC_GetVoltageAndLevel+0xd8>)
 8006604:	2201      	movs	r2, #1
 8006606:	601a      	str	r2, [r3, #0]
    }
    WindowPostion     =0;
 8006608:	4b22      	ldr	r3, [pc, #136]	; (8006694 <BSP_BC_GetVoltageAndLevel+0xd0>)
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
  }
  
  /* Make the mean of latest voltage values */
  if(VoltageWindowInit == 1)
 800660e:	4b23      	ldr	r3, [pc, #140]	; (800669c <BSP_BC_GetVoltageAndLevel+0xd8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d114      	bne.n	8006640 <BSP_BC_GetVoltageAndLevel+0x7c>
  {    
    int32_t Counter;   
    Voltage =0;
 8006616:	2300      	movs	r3, #0
 8006618:	60bb      	str	r3, [r7, #8]
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) 
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	e009      	b.n	8006634 <BSP_BC_GetVoltageAndLevel+0x70>
    {
      Voltage+=WindowVoltage[Counter];
 8006620:	4a1d      	ldr	r2, [pc, #116]	; (8006698 <BSP_BC_GetVoltageAndLevel+0xd4>)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4413      	add	r3, r2
 800662c:	60bb      	str	r3, [r7, #8]
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) 
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b0f      	cmp	r3, #15
 8006638:	ddf2      	ble.n	8006620 <BSP_BC_GetVoltageAndLevel+0x5c>
    }
    Voltage>>=4;    
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	091b      	lsrs	r3, r3, #4
 800663e:	60bb      	str	r3, [r7, #8]
  }
  
  /* Limits check */
  if(Voltage > (uint32_t)MAX_VOLTAGE) 
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f241 0281 	movw	r2, #4225	; 0x1081
 8006646:	4293      	cmp	r3, r2
 8006648:	d902      	bls.n	8006650 <BSP_BC_GetVoltageAndLevel+0x8c>
  {
    Voltage= MAX_VOLTAGE;
 800664a:	f241 0381 	movw	r3, #4225	; 0x1081
 800664e:	60bb      	str	r3, [r7, #8]
  }   
  if(Voltage < (uint32_t)MIN_VOLTAGE) 
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f640 42b1 	movw	r2, #3249	; 0xcb1
 8006656:	4293      	cmp	r3, r2
 8006658:	d802      	bhi.n	8006660 <BSP_BC_GetVoltageAndLevel+0x9c>
  {
    Voltage= MIN_VOLTAGE;
 800665a:	f640 43b2 	movw	r3, #3250	; 0xcb2
 800665e:	60bb      	str	r3, [r7, #8]
  }
  
  *BatteryLevel= (((Voltage - (uint32_t)MIN_VOLTAGE) * 100U)/(uint32_t)(MAX_VOLTAGE - MIN_VOLTAGE));
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2264      	movs	r2, #100	; 0x64
 8006664:	fb02 f303 	mul.w	r3, r2, r3
 8006668:	f5a3 239e 	sub.w	r3, r3, #323584	; 0x4f000
 800666c:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8006670:	4a0b      	ldr	r2, [pc, #44]	; (80066a0 <BSP_BC_GetVoltageAndLevel+0xdc>)
 8006672:	fba2 1203 	umull	r1, r2, r2, r3
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	085b      	lsrs	r3, r3, #1
 800667a:	4413      	add	r3, r2
 800667c:	0a5a      	lsrs	r2, r3, #9
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	601a      	str	r2, [r3, #0]
  *mV = Voltage;
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	601a      	str	r2, [r3, #0]
  
  return BSP_ERROR_NONE;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	2000093c 	.word	0x2000093c
 8006698:	20000940 	.word	0x20000940
 800669c:	20000980 	.word	0x20000980
 80066a0:	0cdd9aa7 	.word	0x0cdd9aa7

080066a4 <BC_InitCommon>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BC_InitCommon(void)
{  
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* Init the time base */
  BC_TIMx_Init();
 80066a8:	f000 f93a 	bl	8006920 <BC_TIMx_Init>
}
 80066ac:	bf00      	nop
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <BC_IO_Init>:
/**
  * @brief  Initializes the GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_Init(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  BC_IO_SW_SEL_Init();
 80066b4:	f000 f802 	bl	80066bc <BC_IO_SW_SEL_Init>
}
 80066b8:	bf00      	nop
 80066ba:	bd80      	pop	{r7, pc}

080066bc <BC_IO_SW_SEL_Init>:
/**
  * @brief  Initializes the SW_SEL GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_SW_SEL_Init(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 80066c2:	4b11      	ldr	r3, [pc, #68]	; (8006708 <BC_IO_SW_SEL_Init+0x4c>)
 80066c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c6:	4a10      	ldr	r2, [pc, #64]	; (8006708 <BC_IO_SW_SEL_Init+0x4c>)
 80066c8:	f043 0320 	orr.w	r3, r3, #32
 80066cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066ce:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <BC_IO_SW_SEL_Init+0x4c>)
 80066d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	603b      	str	r3, [r7, #0]
 80066d8:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 80066da:	2340      	movs	r3, #64	; 0x40
 80066dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066de:	2301      	movs	r3, #1
 80066e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80066e6:	2302      	movs	r3, #2
 80066e8:	613b      	str	r3, [r7, #16]

  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 80066ea:	2200      	movs	r2, #0
 80066ec:	2140      	movs	r1, #64	; 0x40
 80066ee:	4807      	ldr	r0, [pc, #28]	; (800670c <BC_IO_SW_SEL_Init+0x50>)
 80066f0:	f002 fdc4 	bl	800927c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 80066f4:	1d3b      	adds	r3, r7, #4
 80066f6:	4619      	mov	r1, r3
 80066f8:	4804      	ldr	r0, [pc, #16]	; (800670c <BC_IO_SW_SEL_Init+0x50>)
 80066fa:	f002 fc15 	bl	8008f28 <HAL_GPIO_Init>
}
 80066fe:	bf00      	nop
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	40021000 	.word	0x40021000
 800670c:	48001400 	.word	0x48001400

08006710 <BC_CmdMng>:
  * @brief Single wire command manager for the STBC02
  * @note This function have to be called every 5 us
  * @retval None
  */
void BC_CmdMng(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  static uint16_t TIMx_Pulse = 0;                           //! Actual timer pulse number
  static uint16_t TIMx_PulseTCS = 0;                        //! Timer pulse number to change state
  static stbc02_SwState_TypeDef stbc02_sw_state_prv = idle; //! Previous state
  static uint8_t CmdPulse = 0;                              //! Cmd pulse number

  TIMx_Pulse++;
 8006714:	4b56      	ldr	r3, [pc, #344]	; (8006870 <BC_CmdMng+0x160>)
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	4b54      	ldr	r3, [pc, #336]	; (8006870 <BC_CmdMng+0x160>)
 800671e:	801a      	strh	r2, [r3, #0]
  switch (stbc02_SwState)
 8006720:	4b54      	ldr	r3, [pc, #336]	; (8006874 <BC_CmdMng+0x164>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b06      	cmp	r3, #6
 8006726:	f200 809e 	bhi.w	8006866 <BC_CmdMng+0x156>
 800672a:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <BC_CmdMng+0x20>)
 800672c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006730:	08006867 	.word	0x08006867
 8006734:	0800674d 	.word	0x0800674d
 8006738:	08006771 	.word	0x08006771
 800673c:	08006795 	.word	0x08006795
 8006740:	080067b9 	.word	0x080067b9
 8006744:	080067dd 	.word	0x080067dd
 8006748:	08006801 	.word	0x08006801
  {
  case idle:
    break;
  case start:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 800674c:	2140      	movs	r1, #64	; 0x40
 800674e:	484a      	ldr	r0, [pc, #296]	; (8006878 <BC_CmdMng+0x168>)
 8006750:	f002 fdac 	bl	80092ac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8006754:	4b46      	ldr	r3, [pc, #280]	; (8006870 <BC_CmdMng+0x160>)
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	3346      	adds	r3, #70	; 0x46
 800675a:	b29a      	uxth	r2, r3
 800675c:	4b47      	ldr	r3, [pc, #284]	; (800687c <BC_CmdMng+0x16c>)
 800675e:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8006760:	4b44      	ldr	r3, [pc, #272]	; (8006874 <BC_CmdMng+0x164>)
 8006762:	781a      	ldrb	r2, [r3, #0]
 8006764:	4b46      	ldr	r3, [pc, #280]	; (8006880 <BC_CmdMng+0x170>)
 8006766:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8006768:	4b42      	ldr	r3, [pc, #264]	; (8006874 <BC_CmdMng+0x164>)
 800676a:	2206      	movs	r2, #6
 800676c:	701a      	strb	r2, [r3, #0]
    break;
 800676e:	e07d      	b.n	800686c <BC_CmdMng+0x15c>
  case pulse_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8006770:	2140      	movs	r1, #64	; 0x40
 8006772:	4841      	ldr	r0, [pc, #260]	; (8006878 <BC_CmdMng+0x168>)
 8006774:	f002 fd9a 	bl	80092ac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8006778:	4b3d      	ldr	r3, [pc, #244]	; (8006870 <BC_CmdMng+0x160>)
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	b29a      	uxth	r2, r3
 8006780:	4b3e      	ldr	r3, [pc, #248]	; (800687c <BC_CmdMng+0x16c>)
 8006782:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8006784:	4b3b      	ldr	r3, [pc, #236]	; (8006874 <BC_CmdMng+0x164>)
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	4b3d      	ldr	r3, [pc, #244]	; (8006880 <BC_CmdMng+0x170>)
 800678a:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 800678c:	4b39      	ldr	r3, [pc, #228]	; (8006874 <BC_CmdMng+0x164>)
 800678e:	2206      	movs	r2, #6
 8006790:	701a      	strb	r2, [r3, #0]
    break;
 8006792:	e06b      	b.n	800686c <BC_CmdMng+0x15c>
  case pulse_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8006794:	2140      	movs	r1, #64	; 0x40
 8006796:	4838      	ldr	r0, [pc, #224]	; (8006878 <BC_CmdMng+0x168>)
 8006798:	f002 fd88 	bl	80092ac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 800679c:	4b34      	ldr	r3, [pc, #208]	; (8006870 <BC_CmdMng+0x160>)
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	3314      	adds	r3, #20
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	4b35      	ldr	r3, [pc, #212]	; (800687c <BC_CmdMng+0x16c>)
 80067a6:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 80067a8:	4b32      	ldr	r3, [pc, #200]	; (8006874 <BC_CmdMng+0x164>)
 80067aa:	781a      	ldrb	r2, [r3, #0]
 80067ac:	4b34      	ldr	r3, [pc, #208]	; (8006880 <BC_CmdMng+0x170>)
 80067ae:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 80067b0:	4b30      	ldr	r3, [pc, #192]	; (8006874 <BC_CmdMng+0x164>)
 80067b2:	2206      	movs	r2, #6
 80067b4:	701a      	strb	r2, [r3, #0]
    break;
 80067b6:	e059      	b.n	800686c <BC_CmdMng+0x15c>
  case stop_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80067b8:	2140      	movs	r1, #64	; 0x40
 80067ba:	482f      	ldr	r0, [pc, #188]	; (8006878 <BC_CmdMng+0x168>)
 80067bc:	f002 fd76 	bl	80092ac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 80067c0:	4b2b      	ldr	r3, [pc, #172]	; (8006870 <BC_CmdMng+0x160>)
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	3314      	adds	r3, #20
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	4b2c      	ldr	r3, [pc, #176]	; (800687c <BC_CmdMng+0x16c>)
 80067ca:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 80067cc:	4b29      	ldr	r3, [pc, #164]	; (8006874 <BC_CmdMng+0x164>)
 80067ce:	781a      	ldrb	r2, [r3, #0]
 80067d0:	4b2b      	ldr	r3, [pc, #172]	; (8006880 <BC_CmdMng+0x170>)
 80067d2:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 80067d4:	4b27      	ldr	r3, [pc, #156]	; (8006874 <BC_CmdMng+0x164>)
 80067d6:	2206      	movs	r2, #6
 80067d8:	701a      	strb	r2, [r3, #0]
    break;
 80067da:	e047      	b.n	800686c <BC_CmdMng+0x15c>
  case stop_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80067dc:	2140      	movs	r1, #64	; 0x40
 80067de:	4826      	ldr	r0, [pc, #152]	; (8006878 <BC_CmdMng+0x168>)
 80067e0:	f002 fd64 	bl	80092ac <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 80067e4:	4b22      	ldr	r3, [pc, #136]	; (8006870 <BC_CmdMng+0x160>)
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	3364      	adds	r3, #100	; 0x64
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	4b23      	ldr	r3, [pc, #140]	; (800687c <BC_CmdMng+0x16c>)
 80067ee:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 80067f0:	4b20      	ldr	r3, [pc, #128]	; (8006874 <BC_CmdMng+0x164>)
 80067f2:	781a      	ldrb	r2, [r3, #0]
 80067f4:	4b22      	ldr	r3, [pc, #136]	; (8006880 <BC_CmdMng+0x170>)
 80067f6:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 80067f8:	4b1e      	ldr	r3, [pc, #120]	; (8006874 <BC_CmdMng+0x164>)
 80067fa:	2206      	movs	r2, #6
 80067fc:	701a      	strb	r2, [r3, #0]
    break;
 80067fe:	e035      	b.n	800686c <BC_CmdMng+0x15c>
  case wait:
    if ( TIMx_Pulse > TIMx_PulseTCS )
 8006800:	4b1b      	ldr	r3, [pc, #108]	; (8006870 <BC_CmdMng+0x160>)
 8006802:	881a      	ldrh	r2, [r3, #0]
 8006804:	4b1d      	ldr	r3, [pc, #116]	; (800687c <BC_CmdMng+0x16c>)
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d92e      	bls.n	800686a <BC_CmdMng+0x15a>
    {
      if ( stbc02_sw_state_prv == stop_h )
 800680c:	4b1c      	ldr	r3, [pc, #112]	; (8006880 <BC_CmdMng+0x170>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b05      	cmp	r3, #5
 8006812:	d10b      	bne.n	800682c <BC_CmdMng+0x11c>
      {
        CmdPulse = 0;
 8006814:	4b1b      	ldr	r3, [pc, #108]	; (8006884 <BC_CmdMng+0x174>)
 8006816:	2200      	movs	r2, #0
 8006818:	701a      	strb	r2, [r3, #0]
        stbc02_SwState = idle;
 800681a:	4b16      	ldr	r3, [pc, #88]	; (8006874 <BC_CmdMng+0x164>)
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8006820:	2200      	movs	r2, #0
 8006822:	2140      	movs	r1, #64	; 0x40
 8006824:	4814      	ldr	r0, [pc, #80]	; (8006878 <BC_CmdMng+0x168>)
 8006826:	f002 fd29 	bl	800927c <HAL_GPIO_WritePin>
        }
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
        __NOP();
      }
    }
    break;
 800682a:	e01e      	b.n	800686a <BC_CmdMng+0x15a>
        if ( stbc02_sw_state_prv == pulse_h )
 800682c:	4b14      	ldr	r3, [pc, #80]	; (8006880 <BC_CmdMng+0x170>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b03      	cmp	r3, #3
 8006832:	d110      	bne.n	8006856 <BC_CmdMng+0x146>
          CmdPulse++;
 8006834:	4b13      	ldr	r3, [pc, #76]	; (8006884 <BC_CmdMng+0x174>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	b2da      	uxtb	r2, r3
 800683c:	4b11      	ldr	r3, [pc, #68]	; (8006884 <BC_CmdMng+0x174>)
 800683e:	701a      	strb	r2, [r3, #0]
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8006840:	4b10      	ldr	r3, [pc, #64]	; (8006884 <BC_CmdMng+0x174>)
 8006842:	781a      	ldrb	r2, [r3, #0]
 8006844:	4b10      	ldr	r3, [pc, #64]	; (8006888 <BC_CmdMng+0x178>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	d203      	bcs.n	8006854 <BC_CmdMng+0x144>
            stbc02_sw_state_prv = start;
 800684c:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <BC_CmdMng+0x170>)
 800684e:	2201      	movs	r2, #1
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	e000      	b.n	8006856 <BC_CmdMng+0x146>
            __NOP();
 8006854:	bf00      	nop
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
 8006856:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <BC_CmdMng+0x170>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	3301      	adds	r3, #1
 800685c:	b2da      	uxtb	r2, r3
 800685e:	4b05      	ldr	r3, [pc, #20]	; (8006874 <BC_CmdMng+0x164>)
 8006860:	701a      	strb	r2, [r3, #0]
        __NOP();
 8006862:	bf00      	nop
    break;
 8006864:	e001      	b.n	800686a <BC_CmdMng+0x15a>
  default:
    break;
 8006866:	bf00      	nop
 8006868:	e000      	b.n	800686c <BC_CmdMng+0x15c>
    break;
 800686a:	bf00      	nop
  }
}
 800686c:	bf00      	nop
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20000984 	.word	0x20000984
 8006874:	200008e1 	.word	0x200008e1
 8006878:	48001400 	.word	0x48001400
 800687c:	20000986 	.word	0x20000986
 8006880:	20000988 	.word	0x20000988
 8006884:	20000989 	.word	0x20000989
 8006888:	200008e0 	.word	0x200008e0

0800688c <BC_ChgPinFreqGet>:
* @brief Measure the toggling frequency of the charging pin of the STBC02
* @note This function works with 1 ms as time base
* @retval None
*/
void BC_ChgPinFreqGet(void)
{  
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
  if(uhCaptureIndex == 0U)
 8006890:	4b1d      	ldr	r3, [pc, #116]	; (8006908 <BC_ChgPinFreqGet+0x7c>)
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d107      	bne.n	80068a8 <BC_ChgPinFreqGet+0x1c>
  {
    /* Get the 1st Input Capture value */
    uwIC2Value1 = HAL_GetTick();
 8006898:	f000 fb44 	bl	8006f24 <HAL_GetTick>
 800689c:	4603      	mov	r3, r0
 800689e:	4a1b      	ldr	r2, [pc, #108]	; (800690c <BC_ChgPinFreqGet+0x80>)
 80068a0:	6013      	str	r3, [r2, #0]
    uhCaptureIndex = 1;
 80068a2:	4b19      	ldr	r3, [pc, #100]	; (8006908 <BC_ChgPinFreqGet+0x7c>)
 80068a4:	2201      	movs	r2, #1
 80068a6:	801a      	strh	r2, [r3, #0]
  }
   if(uhCaptureIndex == 1U)
 80068a8:	4b17      	ldr	r3, [pc, #92]	; (8006908 <BC_ChgPinFreqGet+0x7c>)
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d128      	bne.n	8006902 <BC_ChgPinFreqGet+0x76>
  {
    /* Get the 2nd Input Capture value */
    uwIC2Value2 = HAL_GetTick();
 80068b0:	f000 fb38 	bl	8006f24 <HAL_GetTick>
 80068b4:	4603      	mov	r3, r0
 80068b6:	4a16      	ldr	r2, [pc, #88]	; (8006910 <BC_ChgPinFreqGet+0x84>)
 80068b8:	6013      	str	r3, [r2, #0]
    
    /* Capture computation */
    if (uwIC2Value2 > uwIC2Value1)
 80068ba:	4b15      	ldr	r3, [pc, #84]	; (8006910 <BC_ChgPinFreqGet+0x84>)
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <BC_ChgPinFreqGet+0x80>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d907      	bls.n	80068d6 <BC_ChgPinFreqGet+0x4a>
    {
      uwDiffCapture = (uwIC2Value2 - uwIC2Value1); 
 80068c6:	4b12      	ldr	r3, [pc, #72]	; (8006910 <BC_ChgPinFreqGet+0x84>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <BC_ChgPinFreqGet+0x80>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	4a10      	ldr	r2, [pc, #64]	; (8006914 <BC_ChgPinFreqGet+0x88>)
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	e006      	b.n	80068e4 <BC_ChgPinFreqGet+0x58>
    }
    else
    {
      uwDiffCapture = ((0xFFFFFFFF - uwIC2Value1) + uwIC2Value2) + 1U;
 80068d6:	4b0e      	ldr	r3, [pc, #56]	; (8006910 <BC_ChgPinFreqGet+0x84>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b0c      	ldr	r3, [pc, #48]	; (800690c <BC_ChgPinFreqGet+0x80>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	4a0c      	ldr	r2, [pc, #48]	; (8006914 <BC_ChgPinFreqGet+0x88>)
 80068e2:	6013      	str	r3, [r2, #0]
    }
    
    if (uwDiffCapture != 0U)
 80068e4:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <BC_ChgPinFreqGet+0x88>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00a      	beq.n	8006902 <BC_ChgPinFreqGet+0x76>
    {
      /* Frequency computation */      
      uwFrequency = 10000U / uwDiffCapture;
 80068ec:	4b09      	ldr	r3, [pc, #36]	; (8006914 <BC_ChgPinFreqGet+0x88>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80068f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f8:	4a07      	ldr	r2, [pc, #28]	; (8006918 <BC_ChgPinFreqGet+0x8c>)
 80068fa:	6013      	str	r3, [r2, #0]
      uhCaptureIndex = 0U;
 80068fc:	4b02      	ldr	r3, [pc, #8]	; (8006908 <BC_ChgPinFreqGet+0x7c>)
 80068fe:	2200      	movs	r2, #0
 8006900:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8006902:	bf00      	nop
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20000934 	.word	0x20000934
 800690c:	20000928 	.word	0x20000928
 8006910:	2000092c 	.word	0x2000092c
 8006914:	20000930 	.word	0x20000930
 8006918:	20000938 	.word	0x20000938
 800691c:	00000000 	.word	0x00000000

08006920 <BC_TIMx_Init>:
/**
  * @brief  Initializes the used timer
  * @retval None
  */
void BC_TIMx_Init(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006926:	463b      	mov	r3, r7
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	605a      	str	r2, [r3, #4]
 800692e:	609a      	str	r2, [r3, #8]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8006930:	f004 ffd0 	bl	800b8d4 <HAL_RCC_GetPCLK1Freq>
 8006934:	4602      	mov	r2, r0
 8006936:	4b26      	ldr	r3, [pc, #152]	; (80069d0 <BC_TIMx_Init+0xb0>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <BC_TIMx_Init+0x26>
 8006942:	2301      	movs	r3, #1
 8006944:	e000      	b.n	8006948 <BC_TIMx_Init+0x28>
 8006946:	2302      	movs	r3, #2
 8006948:	fb02 f303 	mul.w	r3, r2, r3
 800694c:	613b      	str	r3, [r7, #16]
  uint32_t prescaler = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]
  uint32_t period;
  
  do
  {
    prescaler++;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	3301      	adds	r3, #1
 8006956:	617b      	str	r3, [r7, #20]
    period = (uint32_t)(freq/(prescaler) * STBC02_USED_TIM_PERIOD);
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	4618      	mov	r0, r3
 8006962:	f7f9 fdf7 	bl	8000554 <__aeabi_ui2d>
 8006966:	a318      	add	r3, pc, #96	; (adr r3, 80069c8 <BC_TIMx_Init+0xa8>)
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	f7f9 fe6c 	bl	8000648 <__aeabi_dmul>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4610      	mov	r0, r2
 8006976:	4619      	mov	r1, r3
 8006978:	f7fa f93e 	bl	8000bf8 <__aeabi_d2uiz>
 800697c:	4603      	mov	r3, r0
 800697e:	60fb      	str	r3, [r7, #12]
  } while (period > 65535U);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006986:	d2e4      	bcs.n	8006952 <BC_TIMx_Init+0x32>

  hstbc02_UsedTim.Instance = STBC02_USED_TIM;
 8006988:	4b12      	ldr	r3, [pc, #72]	; (80069d4 <BC_TIMx_Init+0xb4>)
 800698a:	4a13      	ldr	r2, [pc, #76]	; (80069d8 <BC_TIMx_Init+0xb8>)
 800698c:	601a      	str	r2, [r3, #0]
  hstbc02_UsedTim.Init.Prescaler = (prescaler-1U);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	3b01      	subs	r3, #1
 8006992:	4a10      	ldr	r2, [pc, #64]	; (80069d4 <BC_TIMx_Init+0xb4>)
 8006994:	6053      	str	r3, [r2, #4]
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006996:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <BC_TIMx_Init+0xb4>)
 8006998:	2200      	movs	r2, #0
 800699a:	609a      	str	r2, [r3, #8]
  hstbc02_UsedTim.Init.Period = period;
 800699c:	4a0d      	ldr	r2, [pc, #52]	; (80069d4 <BC_TIMx_Init+0xb4>)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	60d3      	str	r3, [r2, #12]
#if USE_TIM_AUTORELOAD_PRELOAD
  hstbc02_UsedTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
#endif //USE_TIM_AUTORELOAD_PRELOAD
  
  HAL_TIM_BC_MspInit(&hstbc02_UsedTim);    
 80069a2:	480c      	ldr	r0, [pc, #48]	; (80069d4 <BC_TIMx_Init+0xb4>)
 80069a4:	f000 f81a 	bl	80069dc <HAL_TIM_BC_MspInit>
  (void)HAL_TIM_Base_Init(&hstbc02_UsedTim);
 80069a8:	480a      	ldr	r0, [pc, #40]	; (80069d4 <BC_TIMx_Init+0xb4>)
 80069aa:	f008 f969 	bl	800ec80 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069ae:	2300      	movs	r3, #0
 80069b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60bb      	str	r3, [r7, #8]
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 80069b6:	463b      	mov	r3, r7
 80069b8:	4619      	mov	r1, r3
 80069ba:	4806      	ldr	r0, [pc, #24]	; (80069d4 <BC_TIMx_Init+0xb4>)
 80069bc:	f008 fc18 	bl	800f1f0 <HAL_TIMEx_MasterConfigSynchronization>
}
 80069c0:	bf00      	nop
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	88e368f1 	.word	0x88e368f1
 80069cc:	3ed4f8b5 	.word	0x3ed4f8b5
 80069d0:	40021000 	.word	0x40021000
 80069d4:	20018eb0 	.word	0x20018eb0
 80069d8:	40001400 	.word	0x40001400

080069dc <HAL_TIM_BC_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_BC_MspInit(TIM_HandleTypeDef *htim)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]

  if(htim->Instance==STBC02_USED_TIM)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a0d      	ldr	r2, [pc, #52]	; (8006a20 <HAL_TIM_BC_MspInit+0x44>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d113      	bne.n	8006a16 <HAL_TIM_BC_MspInit+0x3a>
  {
    /* STBC02_USED_TIM clock enable */
    STBC02_USED_TIM_CLK_ENABLE();
 80069ee:	4b0d      	ldr	r3, [pc, #52]	; (8006a24 <HAL_TIM_BC_MspInit+0x48>)
 80069f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f2:	4a0c      	ldr	r2, [pc, #48]	; (8006a24 <HAL_TIM_BC_MspInit+0x48>)
 80069f4:	f043 0320 	orr.w	r3, r3, #32
 80069f8:	6593      	str	r3, [r2, #88]	; 0x58
 80069fa:	4b0a      	ldr	r3, [pc, #40]	; (8006a24 <HAL_TIM_BC_MspInit+0x48>)
 80069fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]

    /* STBC02_USED_TIM interrupt Init */
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8006a06:	2200      	movs	r2, #0
 8006a08:	2103      	movs	r1, #3
 8006a0a:	2037      	movs	r0, #55	; 0x37
 8006a0c:	f001 ffd5 	bl	80089ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 8006a10:	2037      	movs	r0, #55	; 0x37
 8006a12:	f001 ffee 	bl	80089f2 <HAL_NVIC_EnableIRQ>
  }
}
 8006a16:	bf00      	nop
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	40001400 	.word	0x40001400
 8006a24:	40021000 	.word	0x40021000

08006a28 <HAL_ADC_BC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param BC_AdcHandle ADC handle
  * @retval None
  */
void HAL_ADC_BC_MspInit()
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a2e:	1d3b      	adds	r3, r7, #4
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	605a      	str	r2, [r3, #4]
 8006a36:	609a      	str	r2, [r3, #8]
 8006a38:	60da      	str	r2, [r3, #12]
 8006a3a:	611a      	str	r2, [r3, #16]
  
  /* STBC02_USED_ADC GPIO Configuration */
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <HAL_ADC_BC_MspInit+0x4c>)
 8006a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a40:	4a0c      	ldr	r2, [pc, #48]	; (8006a74 <HAL_ADC_BC_MspInit+0x4c>)
 8006a42:	f043 0304 	orr.w	r3, r3, #4
 8006a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a48:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <HAL_ADC_BC_MspInit+0x4c>)
 8006a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 8006a54:	2310      	movs	r3, #16
 8006a56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 8006a58:	230b      	movs	r3, #11
 8006a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4804      	ldr	r0, [pc, #16]	; (8006a78 <HAL_ADC_BC_MspInit+0x50>)
 8006a66:	f002 fa5f 	bl	8008f28 <HAL_GPIO_Init>
  
}
 8006a6a:	bf00      	nop
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	40021000 	.word	0x40021000
 8006a78:	48000800 	.word	0x48000800

08006a7c <Channel_ADC1_Init>:
  * @brief  Initializes the used ADC
  * @retval 0 in case of success
  * @retval 1 in case of failure
*/
static int32_t Channel_ADC1_Init(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08e      	sub	sp, #56	; 0x38
 8006a80:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8006a82:	463b      	mov	r3, r7
 8006a84:	2234      	movs	r2, #52	; 0x34
 8006a86:	2100      	movs	r1, #0
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f017 fa83 	bl	801df94 <memset>
  static uint8_t ADC_stopped=0;
  uint32_t ADC_Status;
  
  
  ADC_Status= HAL_ADC_GetState(&ADC1_Handle);
 8006a8e:	481e      	ldr	r0, [pc, #120]	; (8006b08 <Channel_ADC1_Init+0x8c>)
 8006a90:	f000 fdcc 	bl	800762c <HAL_ADC_GetState>
 8006a94:	6378      	str	r0, [r7, #52]	; 0x34
  if ((ADC_Status & HAL_ADC_STATE_REG_BUSY) == HAL_ADC_STATE_REG_BUSY)
 8006a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <Channel_ADC1_Init+0x30>
  {
    (void)HAL_ADC_Stop(&ADC1_Handle);
 8006aa0:	4819      	ldr	r0, [pc, #100]	; (8006b08 <Channel_ADC1_Init+0x8c>)
 8006aa2:	f000 fd68 	bl	8007576 <HAL_ADC_Stop>
    ADC_stopped=1;
 8006aa6:	4b19      	ldr	r3, [pc, #100]	; (8006b0c <Channel_ADC1_Init+0x90>)
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	701a      	strb	r2, [r3, #0]
  }

    
  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 8006aac:	4b18      	ldr	r3, [pc, #96]	; (8006b10 <Channel_ADC1_Init+0x94>)
 8006aae:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8006ab0:	2308      	movs	r3, #8
 8006ab2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8006ab4:	2307      	movs	r3, #7
 8006ab6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8006ab8:	237f      	movs	r3, #127	; 0x7f
 8006aba:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8006abc:	2304      	movs	r3, #4
 8006abe:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	773b      	strb	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	777b      	strb	r3, [r7, #29]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjecOversamplingMode = DISABLE; 
 8006adc:	2300      	movs	r3, #0
 8006ade:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  
  HAL_ADC_BC_MspInit();
 8006ae2:	f7ff ffa1 	bl	8006a28 <HAL_ADC_BC_MspInit>
  
  
  (void)HAL_ADCEx_InjectedConfigChannel(&ADC1_Handle, &sConfigInjected);
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4807      	ldr	r0, [pc, #28]	; (8006b08 <Channel_ADC1_Init+0x8c>)
 8006aec:	f001 fa58 	bl	8007fa0 <HAL_ADCEx_InjectedConfigChannel>
    
  if (ADC_stopped == 1U)
 8006af0:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <Channel_ADC1_Init+0x90>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d102      	bne.n	8006afe <Channel_ADC1_Init+0x82>
  {
    (void)HAL_ADC_Start(&ADC1_Handle);
 8006af8:	4803      	ldr	r0, [pc, #12]	; (8006b08 <Channel_ADC1_Init+0x8c>)
 8006afa:	f000 fcd9 	bl	80074b0 <HAL_ADC_Start>
  }
  
  return 0;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3738      	adds	r7, #56	; 0x38
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20018e1c 	.word	0x20018e1c
 8006b0c:	2000098a 	.word	0x2000098a
 8006b10:	36902000 	.word	0x36902000

08006b14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == STBC02_USED_TIM)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a04      	ldr	r2, [pc, #16]	; (8006b34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d101      	bne.n	8006b2a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    BC_CmdMng();
 8006b26:	f7ff fdf3 	bl	8006710 <BC_CmdMng>
  }
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	40001400 	.word	0x40001400

08006b38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  htim : hadc handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	7f1b      	ldrb	r3, [r3, #28]
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d101      	bne.n	8006b4c <HAL_TIM_IC_CaptureCallback+0x14>
  {
    BSP_BC_ChgPinHasToggled();
 8006b48:	f7ff fcd6 	bl	80064f8 <BSP_BC_ChgPinHasToggled>
  }
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <TIM7_IRQHandler>:
 */
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 8006b58:	4802      	ldr	r0, [pc, #8]	; (8006b64 <TIM7_IRQHandler+0x10>)
 8006b5a:	f008 f972 	bl	800ee42 <HAL_TIM_IRQHandler>
}
 8006b5e:	bf00      	nop
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20018eb0 	.word	0x20018eb0

08006b68 <TIM3_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimBCHandle);
 8006b6c:	4802      	ldr	r0, [pc, #8]	; (8006b78 <TIM3_IRQHandler+0x10>)
 8006b6e:	f008 f968 	bl	800ee42 <HAL_TIM_IRQHandler>
}
 8006b72:	bf00      	nop
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	200008e8 	.word	0x200008e8

08006b7c <BSP_DEBUG_PIN_On>:
  HAL_GPIO_DeInit(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin]);
  DEBUG_PINx_GPIO_CLK_DISABLE(Pin);
}

void BSP_DEBUG_PIN_On(Debug_Pin_TypeDef Pin)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4603      	mov	r3, r0
 8006b84:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_SET);
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	4a07      	ldr	r2, [pc, #28]	; (8006ba8 <BSP_DEBUG_PIN_On+0x2c>)
 8006b8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	4a06      	ldr	r2, [pc, #24]	; (8006bac <BSP_DEBUG_PIN_On+0x30>)
 8006b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b96:	2201      	movs	r2, #1
 8006b98:	4619      	mov	r1, r3
 8006b9a:	f002 fb6f 	bl	800927c <HAL_GPIO_WritePin>
}
 8006b9e:	bf00      	nop
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000048 	.word	0x20000048
 8006bac:	08022814 	.word	0x08022814

08006bb0 <BSP_DEBUG_PIN_Off>:

void BSP_DEBUG_PIN_Off(Debug_Pin_TypeDef Pin)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_RESET);
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	4a07      	ldr	r2, [pc, #28]	; (8006bdc <BSP_DEBUG_PIN_Off+0x2c>)
 8006bbe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	4a06      	ldr	r2, [pc, #24]	; (8006be0 <BSP_DEBUG_PIN_Off+0x30>)
 8006bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	4619      	mov	r1, r3
 8006bce:	f002 fb55 	bl	800927c <HAL_GPIO_WritePin>
}
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000048 	.word	0x20000048
 8006be0:	08022814 	.word	0x08022814

08006be4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
  uint8_t sd_state;
  /* Check if the SD card is plugged in the slot */
  
  /* Initialize all configured peripherals */

  hsd1.Instance = SDMMC1;
 8006bea:	4b15      	ldr	r3, [pc, #84]	; (8006c40 <BSP_SD_Init+0x5c>)
 8006bec:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <BSP_SD_Init+0x60>)
 8006bee:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8006bf0:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <BSP_SD_Init+0x5c>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006bf6:	4b12      	ldr	r3, [pc, #72]	; (8006c40 <BSP_SD_Init+0x5c>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8006bfc:	4b10      	ldr	r3, [pc, #64]	; (8006c40 <BSP_SD_Init+0x5c>)
 8006bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c02:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8006c04:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <BSP_SD_Init+0x5c>)
 8006c06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006c0a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8006c0c:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <BSP_SD_Init+0x5c>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8006c12:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <BSP_SD_Init+0x5c>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	619a      	str	r2, [r3, #24]
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&hsd1);
 8006c18:	4809      	ldr	r0, [pc, #36]	; (8006c40 <BSP_SD_Init+0x5c>)
 8006c1a:	f000 f889 	bl	8006d30 <BSP_SD_MspInit>
  
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006c1e:	f000 f839 	bl	8006c94 <BSP_SD_IsDetected>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d001      	beq.n	8006c2c <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e005      	b.n	8006c38 <BSP_SD_Init+0x54>
  }
  /* HAL SD initialization */
  sd_state = (uint8_t)HAL_SD_Init(&hsd1);
 8006c2c:	4804      	ldr	r0, [pc, #16]	; (8006c40 <BSP_SD_Init+0x5c>)
 8006c2e:	f005 fcb5 	bl	800c59c <HAL_SD_Init>
 8006c32:	4603      	mov	r3, r0
 8006c34:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006c36:	79fb      	ldrb	r3, [r7, #7]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20015fc0 	.word	0x20015fc0
 8006c44:	50062400 	.word	0x50062400

08006c48 <BSP_SD_Detect_Init>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
void BSP_SD_Detect_Init(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
  
  SD_DETECT_GPIO_CLK_ENABLE();
 8006c4e:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <BSP_SD_Detect_Init+0x44>)
 8006c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c52:	4a0e      	ldr	r2, [pc, #56]	; (8006c8c <BSP_SD_Detect_Init+0x44>)
 8006c54:	f043 0302 	orr.w	r3, r3, #2
 8006c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c5a:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <BSP_SD_Detect_Init+0x44>)
 8006c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]

  /* Configure MFX Interrupt GPIO */
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 8006c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c6a:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_LOW;
 8006c70:	2300      	movs	r3, #0
 8006c72:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode  = GPIO_MODE_INPUT;
 8006c74:	2300      	movs	r3, #0
 8006c76:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8006c78:	1d3b      	adds	r3, r7, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4804      	ldr	r0, [pc, #16]	; (8006c90 <BSP_SD_Detect_Init+0x48>)
 8006c7e:	f002 f953 	bl	8008f28 <HAL_GPIO_Init>
}
 8006c82:	bf00      	nop
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	48000400 	.word	0x48000400

08006c94 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 8006c98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c9c:	4808      	ldr	r0, [pc, #32]	; (8006cc0 <BSP_SD_IsDetected+0x2c>)
 8006c9e:	f002 fad5 	bl	800924c <HAL_GPIO_ReadPin>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d103      	bne.n	8006cb0 <BSP_SD_IsDetected+0x1c>
  {
    SD_Status = SD_NOT_PRESENT;
 8006ca8:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <BSP_SD_IsDetected+0x30>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
 8006cae:	e002      	b.n	8006cb6 <BSP_SD_IsDetected+0x22>
  }
  else
  {
    SD_Status = SD_PRESENT;
 8006cb0:	4b04      	ldr	r3, [pc, #16]	; (8006cc4 <BSP_SD_IsDetected+0x30>)
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	701a      	strb	r2, [r3, #0]
  }
  
  return SD_Status;
 8006cb6:	4b03      	ldr	r3, [pc, #12]	; (8006cc4 <BSP_SD_IsDetected+0x30>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	b2db      	uxtb	r3, r3
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	48000400 	.word	0x48000400
 8006cc4:	2000098b 	.word	0x2000098b

08006cc8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	68f9      	ldr	r1, [r7, #12]
 8006cde:	4806      	ldr	r0, [pc, #24]	; (8006cf8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006ce0:	f005 fd72 	bl	800c7c8 <HAL_SD_ReadBlocks_DMA>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20015fc0 	.word	0x20015fc0

08006cfc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	68f9      	ldr	r1, [r7, #12]
 8006d12:	4806      	ldr	r0, [pc, #24]	; (8006d2c <BSP_SD_WriteBlocks_DMA+0x30>)
 8006d14:	f005 fe00 	bl	800c918 <HAL_SD_WriteBlocks_DMA>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20015fc0 	.word	0x20015fc0

08006d30 <BSP_SD_MspInit>:

  return sd_state; 
}

void BSP_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  GPIO_InitTypeDef gpioinitstruct = {0};
 8006d38:	f107 0314 	add.w	r3, r7, #20
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	609a      	str	r2, [r3, #8]
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	611a      	str	r2, [r3, #16]
  
  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006d48:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <BSP_SD_MspInit+0xac>)
 8006d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d4c:	4a23      	ldr	r2, [pc, #140]	; (8006ddc <BSP_SD_MspInit+0xac>)
 8006d4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d54:	4b21      	ldr	r3, [pc, #132]	; (8006ddc <BSP_SD_MspInit+0xac>)
 8006d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d60:	4b1e      	ldr	r3, [pc, #120]	; (8006ddc <BSP_SD_MspInit+0xac>)
 8006d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d64:	4a1d      	ldr	r2, [pc, #116]	; (8006ddc <BSP_SD_MspInit+0xac>)
 8006d66:	f043 0304 	orr.w	r3, r3, #4
 8006d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <BSP_SD_MspInit+0xac>)
 8006d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d78:	4b18      	ldr	r3, [pc, #96]	; (8006ddc <BSP_SD_MspInit+0xac>)
 8006d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7c:	4a17      	ldr	r2, [pc, #92]	; (8006ddc <BSP_SD_MspInit+0xac>)
 8006d7e:	f043 0308 	orr.w	r3, r3, #8
 8006d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d84:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <BSP_SD_MspInit+0xac>)
 8006d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	60bb      	str	r3, [r7, #8]
 8006d8e:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 8006d90:	2302      	movs	r3, #2
 8006d92:	61bb      	str	r3, [r7, #24]
  gpioinitstruct.Pull      = GPIO_PULLUP;
 8006d94:	2301      	movs	r3, #1
 8006d96:	61fb      	str	r3, [r7, #28]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	623b      	str	r3, [r7, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8006da0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006da4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8006da6:	f107 0314 	add.w	r3, r7, #20
 8006daa:	4619      	mov	r1, r3
 8006dac:	480c      	ldr	r0, [pc, #48]	; (8006de0 <BSP_SD_MspInit+0xb0>)
 8006dae:	f002 f8bb 	bl	8008f28 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 8006db2:	2304      	movs	r3, #4
 8006db4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8006db6:	f107 0314 	add.w	r3, r7, #20
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4809      	ldr	r0, [pc, #36]	; (8006de4 <BSP_SD_MspInit+0xb4>)
 8006dbe:	f002 f8b3 	bl	8008f28 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2105      	movs	r1, #5
 8006dc6:	2031      	movs	r0, #49	; 0x31
 8006dc8:	f001 fdf7 	bl	80089ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 8006dcc:	2031      	movs	r0, #49	; 0x31
 8006dce:	f001 fe10 	bl	80089f2 <HAL_NVIC_EnableIRQ>


}
 8006dd2:	bf00      	nop
 8006dd4:	3728      	adds	r7, #40	; 0x28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	48000800 	.word	0x48000800
 8006de4:	48000c00 	.word	0x48000c00

08006de8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006dec:	4805      	ldr	r0, [pc, #20]	; (8006e04 <BSP_SD_GetCardState+0x1c>)
 8006dee:	f006 fb2b 	bl	800d448 <HAL_SD_GetCardState>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	bf14      	ite	ne
 8006df8:	2301      	movne	r3, #1
 8006dfa:	2300      	moveq	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20015fc0 	.word	0x20015fc0

08006e08 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  (void)HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	4803      	ldr	r0, [pc, #12]	; (8006e20 <BSP_SD_GetCardInfo+0x18>)
 8006e14:	f006 fa42 	bl	800d29c <HAL_SD_GetCardInfo>
}
 8006e18:	bf00      	nop
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20015fc0 	.word	0x20015fc0

08006e24 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_WriteCpltCallback();
 8006e2c:	f7fd fb5c 	bl	80044e8 <BSP_SD_WriteCpltCallback>
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_ReadCpltCallback();
 8006e40:	f7fd fb62 	bl	8004508 <BSP_SD_ReadCpltCallback>
}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e56:	2003      	movs	r0, #3
 8006e58:	f001 fda4 	bl	80089a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f000 f815 	bl	8006e8c <HAL_InitTick>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	71fb      	strb	r3, [r7, #7]
 8006e6c:	e001      	b.n	8006e72 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006e6e:	f000 f805 	bl	8006e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006e72:	79fb      	ldrb	r3, [r7, #7]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
	...

08006e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006e98:	4b16      	ldr	r3, [pc, #88]	; (8006ef4 <HAL_InitTick+0x68>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d022      	beq.n	8006ee6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006ea0:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <HAL_InitTick+0x6c>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	4b13      	ldr	r3, [pc, #76]	; (8006ef4 <HAL_InitTick+0x68>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f001 fdaa 	bl	8008a0e <HAL_SYSTICK_Config>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10f      	bne.n	8006ee0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b0f      	cmp	r3, #15
 8006ec4:	d809      	bhi.n	8006eda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	f04f 30ff 	mov.w	r0, #4294967295
 8006ece:	f001 fd74 	bl	80089ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006ed2:	4a0a      	ldr	r2, [pc, #40]	; (8006efc <HAL_InitTick+0x70>)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	e007      	b.n	8006eea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	73fb      	strb	r3, [r7, #15]
 8006ede:	e004      	b.n	8006eea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
 8006ee4:	e001      	b.n	8006eea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	2000007c 	.word	0x2000007c
 8006ef8:	20000038 	.word	0x20000038
 8006efc:	20000078 	.word	0x20000078

08006f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <HAL_IncTick+0x1c>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <HAL_IncTick+0x20>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	4a03      	ldr	r2, [pc, #12]	; (8006f1c <HAL_IncTick+0x1c>)
 8006f10:	6013      	str	r3, [r2, #0]
}
 8006f12:	bf00      	nop
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	20018ef0 	.word	0x20018ef0
 8006f20:	2000007c 	.word	0x2000007c

08006f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  return uwTick;
 8006f28:	4b03      	ldr	r3, [pc, #12]	; (8006f38 <HAL_GetTick+0x14>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20018ef0 	.word	0x20018ef0

08006f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f44:	f7ff ffee 	bl	8006f24 <HAL_GetTick>
 8006f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d004      	beq.n	8006f60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f56:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <HAL_Delay+0x40>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f60:	bf00      	nop
 8006f62:	f7ff ffdf 	bl	8006f24 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d8f7      	bhi.n	8006f62 <HAL_Delay+0x26>
  {
  }
}
 8006f72:	bf00      	nop
 8006f74:	bf00      	nop
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	2000007c 	.word	0x2000007c

08006f80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	609a      	str	r2, [r3, #8]
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006fb6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6093      	str	r3, [r2, #8]
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fde:	d101      	bne.n	8006fe4 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007002:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007006:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800702e:	d101      	bne.n	8007034 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007030:	2301      	movs	r3, #1
 8007032:	e000      	b.n	8007036 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007052:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007056:	f043 0201 	orr.w	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800707a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800707e:	f043 0202 	orr.w	r2, r3, #2
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d101      	bne.n	80070aa <LL_ADC_IsEnabled+0x18>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <LL_ADC_IsEnabled+0x1a>
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d101      	bne.n	80070d0 <LL_ADC_IsDisableOngoing+0x18>
 80070cc:	2301      	movs	r3, #1
 80070ce:	e000      	b.n	80070d2 <LL_ADC_IsDisableOngoing+0x1a>
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80070f2:	f043 0204 	orr.w	r2, r3, #4
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8007106:	b480      	push	{r7}
 8007108:	b083      	sub	sp, #12
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007116:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800711a:	f043 0210 	orr.w	r2, r3, #16
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 0304 	and.w	r3, r3, #4
 800713e:	2b04      	cmp	r3, #4
 8007140:	d101      	bne.n	8007146 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007168:	f043 0220 	orr.w	r2, r3, #32
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b08      	cmp	r3, #8
 800718e:	d101      	bne.n	8007194 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007190:	2301      	movs	r3, #1
 8007192:	e000      	b.n	8007196 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
	...

080071a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e174      	b.n	80074a8 <HAL_ADC_Init+0x304>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d132      	bne.n	8007232 <HAL_ADC_Init+0x8e>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a9a      	ldr	r2, [pc, #616]	; (8007438 <HAL_ADC_Init+0x294>)
 80071d0:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a99      	ldr	r2, [pc, #612]	; (800743c <HAL_ADC_Init+0x298>)
 80071d6:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a99      	ldr	r2, [pc, #612]	; (8007440 <HAL_ADC_Init+0x29c>)
 80071dc:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a98      	ldr	r2, [pc, #608]	; (8007444 <HAL_ADC_Init+0x2a0>)
 80071e2:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a98      	ldr	r2, [pc, #608]	; (8007448 <HAL_ADC_Init+0x2a4>)
 80071e8:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a97      	ldr	r2, [pc, #604]	; (800744c <HAL_ADC_Init+0x2a8>)
 80071ee:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a97      	ldr	r2, [pc, #604]	; (8007450 <HAL_ADC_Init+0x2ac>)
 80071f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a96      	ldr	r2, [pc, #600]	; (8007454 <HAL_ADC_Init+0x2b0>)
 80071fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a95      	ldr	r2, [pc, #596]	; (8007458 <HAL_ADC_Init+0x2b4>)
 8007204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (hadc->MspInitCallback == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <HAL_ADC_Init+0x76>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a91      	ldr	r2, [pc, #580]	; (800745c <HAL_ADC_Init+0x2b8>)
 8007216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fec7 	bl	8006fca <LL_ADC_IsDeepPowerDownEnabled>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <HAL_ADC_Init+0xa8>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff fead 	bl	8006fa6 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff fee2 	bl	800701a <LL_ADC_IsInternalRegulatorEnabled>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d113      	bne.n	8007284 <HAL_ADC_Init+0xe0>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff fec6 	bl	8006ff2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007266:	4b7e      	ldr	r3, [pc, #504]	; (8007460 <HAL_ADC_Init+0x2bc>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	099b      	lsrs	r3, r3, #6
 800726c:	4a7d      	ldr	r2, [pc, #500]	; (8007464 <HAL_ADC_Init+0x2c0>)
 800726e:	fba2 2303 	umull	r2, r3, r2, r3
 8007272:	099b      	lsrs	r3, r3, #6
 8007274:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007276:	e002      	b.n	800727e <HAL_ADC_Init+0xda>
    {
      wait_loop_index--;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	3b01      	subs	r3, #1
 800727c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1f9      	bne.n	8007278 <HAL_ADC_Init+0xd4>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff fec6 	bl	800701a <LL_ADC_IsInternalRegulatorEnabled>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10d      	bne.n	80072b0 <HAL_ADC_Init+0x10c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007298:	f043 0210 	orr.w	r2, r3, #16
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a4:	f043 0201 	orr.w	r2, r3, #1
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff ff3a 	bl	800712e <LL_ADC_REG_IsConversionOngoing>
 80072ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 80e6 	bne.w	8007496 <HAL_ADC_Init+0x2f2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f040 80e2 	bne.w	8007496 <HAL_ADC_Init+0x2f2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80072da:	f043 0202 	orr.w	r2, r3, #2
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff fed3 	bl	8007092 <LL_ADC_IsEnabled>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10b      	bne.n	800730a <HAL_ADC_Init+0x166>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072f2:	485d      	ldr	r0, [pc, #372]	; (8007468 <HAL_ADC_Init+0x2c4>)
 80072f4:	f7ff fecd 	bl	8007092 <LL_ADC_IsEnabled>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <HAL_ADC_Init+0x166>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4619      	mov	r1, r3
 8007304:	4859      	ldr	r0, [pc, #356]	; (800746c <HAL_ADC_Init+0x2c8>)
 8007306:	f7ff fe3b 	bl	8006f80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	7e5b      	ldrb	r3, [r3, #25]
 800730e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007314:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800731a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007320:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007328:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800732a:	4313      	orrs	r3, r2
 800732c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d106      	bne.n	8007346 <HAL_ADC_Init+0x1a2>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	3b01      	subs	r3, #1
 800733e:	045b      	lsls	r3, r3, #17
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	4313      	orrs	r3, r2
 8007344:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734a:	2b00      	cmp	r3, #0
 800734c:	d009      	beq.n	8007362 <HAL_ADC_Init+0x1be>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	4313      	orrs	r3, r2
 8007360:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	4b41      	ldr	r3, [pc, #260]	; (8007470 <HAL_ADC_Init+0x2cc>)
 800736a:	4013      	ands	r3, r2
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	6812      	ldr	r2, [r2, #0]
 8007370:	69b9      	ldr	r1, [r7, #24]
 8007372:	430b      	orrs	r3, r1
 8007374:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff fed7 	bl	800712e <LL_ADC_REG_IsConversionOngoing>
 8007380:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff fef8 	bl	800717c <LL_ADC_INJ_IsConversionOngoing>
 800738c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d140      	bne.n	8007416 <HAL_ADC_Init+0x272>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d13d      	bne.n	8007416 <HAL_ADC_Init+0x272>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	7e1b      	ldrb	r3, [r3, #24]
 80073a2:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80073a4:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073ac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80073ae:	4313      	orrs	r3, r2
 80073b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073bc:	f023 0306 	bic.w	r3, r3, #6
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	6812      	ldr	r2, [r2, #0]
 80073c4:	69b9      	ldr	r1, [r7, #24]
 80073c6:	430b      	orrs	r3, r1
 80073c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d118      	bne.n	8007406 <HAL_ADC_Init+0x262>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80073de:	f023 0304 	bic.w	r3, r3, #4
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80073ea:	4311      	orrs	r1, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80073f0:	4311      	orrs	r1, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80073f6:	430a      	orrs	r2, r1
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0201 	orr.w	r2, r2, #1
 8007402:	611a      	str	r2, [r3, #16]
 8007404:	e007      	b.n	8007416 <HAL_ADC_Init+0x272>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0201 	bic.w	r2, r2, #1
 8007414:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d12a      	bne.n	8007474 <HAL_ADC_Init+0x2d0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	f023 010f 	bic.w	r1, r3, #15
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	1e5a      	subs	r2, r3, #1
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	631a      	str	r2, [r3, #48]	; 0x30
 8007436:	e025      	b.n	8007484 <HAL_ADC_Init+0x2e0>
 8007438:	080075dd 	.word	0x080075dd
 800743c:	080075f1 	.word	0x080075f1
 8007440:	08007605 	.word	0x08007605
 8007444:	08007619 	.word	0x08007619
 8007448:	08007f3b 	.word	0x08007f3b
 800744c:	08007f4f 	.word	0x08007f4f
 8007450:	08007f63 	.word	0x08007f63
 8007454:	08007f77 	.word	0x08007f77
 8007458:	08007f8b 	.word	0x08007f8b
 800745c:	08006259 	.word	0x08006259
 8007460:	20000038 	.word	0x20000038
 8007464:	053e2d63 	.word	0x053e2d63
 8007468:	50040000 	.word	0x50040000
 800746c:	50040300 	.word	0x50040300
 8007470:	fff0c007 	.word	0xfff0c007
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 020f 	bic.w	r2, r2, #15
 8007482:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007488:	f023 0303 	bic.w	r3, r3, #3
 800748c:	f043 0201 	orr.w	r2, r3, #1
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	659a      	str	r2, [r3, #88]	; 0x58
 8007494:	e007      	b.n	80074a6 <HAL_ADC_Init+0x302>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749a:	f043 0210 	orr.w	r2, r3, #16
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80074a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3720      	adds	r7, #32
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff fe36 	bl	800712e <LL_ADC_REG_IsConversionOngoing>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d14f      	bne.n	8007568 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_ADC_Start+0x26>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e04b      	b.n	800756e <HAL_ADC_Start+0xbe>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f964 	bl	80077ac <ADC_Enable>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d137      	bne.n	800755e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80074f6:	f023 0301 	bic.w	r3, r3, #1
 80074fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800750a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750e:	d106      	bne.n	800751e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007514:	f023 0206 	bic.w	r2, r3, #6
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	65da      	str	r2, [r3, #92]	; 0x5c
 800751c:	e002      	b.n	8007524 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	221c      	movs	r2, #28
 800752a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007546:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800754a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4618      	mov	r0, r3
 8007558:	f7ff fdc1 	bl	80070de <LL_ADC_REG_StartConversion>
 800755c:	e006      	b.n	800756c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8007566:	e001      	b.n	800756c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007568:	2302      	movs	r3, #2
 800756a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_ADC_Stop+0x16>
 8007588:	2302      	movs	r3, #2
 800758a:	e023      	b.n	80075d4 <HAL_ADC_Stop+0x5e>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007594:	2103      	movs	r1, #3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f854 	bl	8007644 <ADC_ConversionStop>
 800759c:	4603      	mov	r3, r0
 800759e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d111      	bne.n	80075ca <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f95a 	bl	8007860 <ADC_Disable>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80075be:	f023 0301 	bic.w	r3, r3, #1
 80075c2:	f043 0201 	orr.w	r2, r3, #1
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800764e:	2300      	movs	r3, #0
 8007650:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4618      	mov	r0, r3
 800765c:	f7ff fd67 	bl	800712e <LL_ADC_REG_IsConversionOngoing>
 8007660:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fd88 	bl	800717c <LL_ADC_INJ_IsConversionOngoing>
 800766c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 8091 	beq.w	800779e <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d02a      	beq.n	80076e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	7e5b      	ldrb	r3, [r3, #25]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d126      	bne.n	80076e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	7e1b      	ldrb	r3, [r3, #24]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d122      	bne.n	80076e0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800769a:	2301      	movs	r3, #1
 800769c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800769e:	e014      	b.n	80076ca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4a41      	ldr	r2, [pc, #260]	; (80077a8 <ADC_ConversionStop+0x164>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d90d      	bls.n	80076c4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ac:	f043 0210 	orr.w	r2, r3, #16
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b8:	f043 0201 	orr.w	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e06d      	b.n	80077a0 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	3301      	adds	r3, #1
 80076c8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d4:	2b40      	cmp	r3, #64	; 0x40
 80076d6:	d1e3      	bne.n	80076a0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2240      	movs	r2, #64	; 0x40
 80076de:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d014      	beq.n	8007710 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff fd1f 	bl	800712e <LL_ADC_REG_IsConversionOngoing>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00c      	beq.n	8007710 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff fcdc 	bl	80070b8 <LL_ADC_IsDisableOngoing>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d104      	bne.n	8007710 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff fcfb 	bl	8007106 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d014      	beq.n	8007740 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fd2e 	bl	800717c <LL_ADC_INJ_IsConversionOngoing>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00c      	beq.n	8007740 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fcc4 	bl	80070b8 <LL_ADC_IsDisableOngoing>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d104      	bne.n	8007740 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f7ff fd0a 	bl	8007154 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d005      	beq.n	8007752 <ADC_ConversionStop+0x10e>
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	2b03      	cmp	r3, #3
 800774a:	d105      	bne.n	8007758 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800774c:	230c      	movs	r3, #12
 800774e:	617b      	str	r3, [r7, #20]
        break;
 8007750:	e005      	b.n	800775e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007752:	2308      	movs	r3, #8
 8007754:	617b      	str	r3, [r7, #20]
        break;
 8007756:	e002      	b.n	800775e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007758:	2304      	movs	r3, #4
 800775a:	617b      	str	r3, [r7, #20]
        break;
 800775c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800775e:	f7ff fbe1 	bl	8006f24 <HAL_GetTick>
 8007762:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007764:	e014      	b.n	8007790 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007766:	f7ff fbdd 	bl	8006f24 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b05      	cmp	r3, #5
 8007772:	d90d      	bls.n	8007790 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007778:	f043 0210 	orr.w	r2, r3, #16
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007784:	f043 0201 	orr.w	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e007      	b.n	80077a0 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	4013      	ands	r3, r2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e3      	bne.n	8007766 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3720      	adds	r7, #32
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	a33fffff 	.word	0xa33fffff

080077ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff fc6a 	bl	8007092 <LL_ADC_IsEnabled>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d146      	bne.n	8007852 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	4b24      	ldr	r3, [pc, #144]	; (800785c <ADC_Enable+0xb0>)
 80077cc:	4013      	ands	r3, r2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00d      	beq.n	80077ee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d6:	f043 0210 	orr.w	r2, r3, #16
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e2:	f043 0201 	orr.w	r2, r3, #1
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e032      	b.n	8007854 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff fc25 	bl	8007042 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80077f8:	f7ff fb94 	bl	8006f24 <HAL_GetTick>
 80077fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077fe:	e021      	b.n	8007844 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	f7ff fc44 	bl	8007092 <LL_ADC_IsEnabled>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d104      	bne.n	800781a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff fc14 	bl	8007042 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800781a:	f7ff fb83 	bl	8006f24 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	2b02      	cmp	r3, #2
 8007826:	d90d      	bls.n	8007844 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	f043 0210 	orr.w	r2, r3, #16
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007838:	f043 0201 	orr.w	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e007      	b.n	8007854 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b01      	cmp	r3, #1
 8007850:	d1d6      	bne.n	8007800 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	8000003f 	.word	0x8000003f

08007860 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4618      	mov	r0, r3
 800786e:	f7ff fc23 	bl	80070b8 <LL_ADC_IsDisableOngoing>
 8007872:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff fc0a 	bl	8007092 <LL_ADC_IsEnabled>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d040      	beq.n	8007906 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d13d      	bne.n	8007906 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 030d 	and.w	r3, r3, #13
 8007894:	2b01      	cmp	r3, #1
 8007896:	d10c      	bne.n	80078b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff fbe4 	bl	800706a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2203      	movs	r2, #3
 80078a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80078aa:	f7ff fb3b 	bl	8006f24 <HAL_GetTick>
 80078ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80078b0:	e022      	b.n	80078f8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b6:	f043 0210 	orr.w	r2, r3, #16
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c2:	f043 0201 	orr.w	r2, r3, #1
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e01c      	b.n	8007908 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80078ce:	f7ff fb29 	bl	8006f24 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d90d      	bls.n	80078f8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e0:	f043 0210 	orr.w	r2, r3, #16
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ec:	f043 0201 	orr.w	r2, r3, #1
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e007      	b.n	8007908 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e3      	bne.n	80078ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <LL_ADC_SetCommonPathInternalCh>:
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	609a      	str	r2, [r3, #8]
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <LL_ADC_GetCommonPathInternalCh>:
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007946:	4618      	mov	r0, r3
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
	...

08007954 <LL_ADC_SetOffset>:
{
 8007954:	b490      	push	{r4, r7}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3360      	adds	r3, #96	; 0x60
 8007966:	461a      	mov	r2, r3
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8007970:	6822      	ldr	r2, [r4, #0]
 8007972:	4b08      	ldr	r3, [pc, #32]	; (8007994 <LL_ADC_SetOffset+0x40>)
 8007974:	4013      	ands	r3, r2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	4313      	orrs	r3, r2
 8007982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007986:	6023      	str	r3, [r4, #0]
}
 8007988:	bf00      	nop
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bc90      	pop	{r4, r7}
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	03fff000 	.word	0x03fff000

08007998 <LL_ADC_GetOffsetChannel>:
{
 8007998:	b490      	push	{r4, r7}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3360      	adds	r3, #96	; 0x60
 80079a6:	461a      	mov	r2, r3
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc90      	pop	{r4, r7}
 80079be:	4770      	bx	lr

080079c0 <LL_ADC_SetOffsetState>:
{
 80079c0:	b490      	push	{r4, r7}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3360      	adds	r3, #96	; 0x60
 80079d0:	461a      	mov	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	6023      	str	r3, [r4, #0]
}
 80079e6:	bf00      	nop
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bc90      	pop	{r4, r7}
 80079ee:	4770      	bx	lr

080079f0 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	431a      	orrs	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	615a      	str	r2, [r3, #20]
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e000      	b.n	8007a30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e000      	b.n	8007a56 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <LL_ADC_INJ_GetTrigAuto>:
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <LL_ADC_SetChannelSamplingTime>:
{
 8007a7e:	b490      	push	{r4, r7}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3314      	adds	r3, #20
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	0e5b      	lsrs	r3, r3, #25
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	f003 0304 	and.w	r3, r3, #4
 8007a9a:	4413      	add	r3, r2
 8007a9c:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8007a9e:	6822      	ldr	r2, [r4, #0]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	0d1b      	lsrs	r3, r3, #20
 8007aa4:	f003 031f 	and.w	r3, r3, #31
 8007aa8:	2107      	movs	r1, #7
 8007aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8007aae:	43db      	mvns	r3, r3
 8007ab0:	401a      	ands	r2, r3
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	0d1b      	lsrs	r3, r3, #20
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	6023      	str	r3, [r4, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bc90      	pop	{r4, r7}
 8007acc:	4770      	bx	lr
	...

08007ad0 <LL_ADC_SetChannelSingleDiff>:
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ae8:	43db      	mvns	r3, r3
 8007aea:	401a      	ands	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f003 0318 	and.w	r3, r3, #24
 8007af2:	4908      	ldr	r1, [pc, #32]	; (8007b14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007af4:	40d9      	lsrs	r1, r3
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	400b      	ands	r3, r1
 8007afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007afe:	431a      	orrs	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007b06:	bf00      	nop
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	0007ffff 	.word	0x0007ffff

08007b18 <LL_ADC_IsEnabled>:
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d101      	bne.n	8007b30 <LL_ADC_IsEnabled+0x18>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e000      	b.n	8007b32 <LL_ADC_IsEnabled+0x1a>
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <LL_ADC_StartCalibration>:
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007b50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	609a      	str	r2, [r3, #8]
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <LL_ADC_IsCalibrationOnGoing>:
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b84:	d101      	bne.n	8007b8a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007b86:	2301      	movs	r3, #1
 8007b88:	e000      	b.n	8007b8c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <LL_ADC_REG_IsConversionOngoing>:
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b04      	cmp	r3, #4
 8007baa:	d101      	bne.n	8007bb0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007bac:	2301      	movs	r3, #1
 8007bae:	e000      	b.n	8007bb2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <LL_ADC_INJ_StartConversion>:
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007bd2:	f043 0208 	orr.w	r2, r3, #8
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	609a      	str	r2, [r3, #8]
}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <LL_ADC_INJ_IsConversionOngoing>:
{
 8007be6:	b480      	push	{r7}
 8007be8:	b083      	sub	sp, #12
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 0308 	and.w	r3, r3, #8
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	d101      	bne.n	8007bfe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d101      	bne.n	8007c28 <HAL_ADCEx_Calibration_Start+0x1c>
 8007c24:	2302      	movs	r3, #2
 8007c26:	e04d      	b.n	8007cc4 <HAL_ADCEx_Calibration_Start+0xb8>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff fe15 	bl	8007860 <ADC_Disable>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d136      	bne.n	8007cae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007c48:	f023 0302 	bic.w	r3, r3, #2
 8007c4c:	f043 0202 	orr.w	r2, r3, #2
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7ff ff6f 	bl	8007b3e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007c60:	e014      	b.n	8007c8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	3301      	adds	r3, #1
 8007c66:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8007c6e:	d30d      	bcc.n	8007c8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c74:	f023 0312 	bic.w	r3, r3, #18
 8007c78:	f043 0210 	orr.w	r2, r3, #16
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e01b      	b.n	8007cc4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7ff ff6d 	bl	8007b70 <LL_ADC_IsCalibrationOnGoing>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e2      	bne.n	8007c62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca0:	f023 0303 	bic.w	r3, r3, #3
 8007ca4:	f043 0201 	orr.w	r2, r3, #1
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	659a      	str	r2, [r3, #88]	; 0x58
 8007cac:	e005      	b.n	8007cba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb2:	f043 0210 	orr.w	r2, r3, #16
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7ff ff84 	bl	8007be6 <LL_ADC_INJ_IsConversionOngoing>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <HAL_ADCEx_InjectedStart+0x1c>
  {
    return HAL_BUSY;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e05f      	b.n	8007da8 <HAL_ADCEx_InjectedStart+0xdc>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cf2:	60fb      	str	r3, [r7, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <HAL_ADCEx_InjectedStart+0x4c>
        && (tmp_config_injected_queue == 0UL)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d107      	bne.n	8007d18 <HAL_ADCEx_InjectedStart+0x4c>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0c:	f043 0220 	orr.w	r2, r3, #32
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e047      	b.n	8007da8 <HAL_ADCEx_InjectedStart+0xdc>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d101      	bne.n	8007d26 <HAL_ADCEx_InjectedStart+0x5a>
 8007d22:	2302      	movs	r3, #2
 8007d24:	e040      	b.n	8007da8 <HAL_ADCEx_InjectedStart+0xdc>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7ff fd3c 	bl	80077ac <ADC_Enable>
 8007d34:	4603      	mov	r3, r0
 8007d36:	72fb      	strb	r3, [r7, #11]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d12f      	bne.n	8007d9e <HAL_ADCEx_InjectedStart+0xd2>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d006      	beq.n	8007d58 <HAL_ADCEx_InjectedStart+0x8c>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d4e:	f023 0208 	bic.w	r2, r3, #8
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d56:	e002      	b.n	8007d5e <HAL_ADCEx_InjectedStart+0x92>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007d66:	f023 0301 	bic.w	r3, r3, #1
 8007d6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2260      	movs	r2, #96	; 0x60
 8007d78:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      }
#else
      if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fe6b 	bl	8007a62 <LL_ADC_INJ_GetTrigAuto>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d109      	bne.n	8007da6 <HAL_ADCEx_InjectedStart+0xda>
      {
        /* Start ADC group injected conversion */
        LL_ADC_INJ_StartConversion(hadc->Instance);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff ff11 	bl	8007bbe <LL_ADC_INJ_StartConversion>
 8007d9c:	e003      	b.n	8007da6 <HAL_ADCEx_InjectedStart+0xda>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
 8007da6:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_ADCEx_InjectedPollForConversion>:
  * @note   Depending on hadc->Init.EOCSelection, JEOS or JEOC is
  *         checked and cleared depending on AUTDLY bit status.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of sequence selected */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	2b08      	cmp	r3, #8
 8007dc0:	d102      	bne.n	8007dc8 <HAL_ADCEx_InjectedPollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_JEOS;
 8007dc2:	2340      	movs	r3, #64	; 0x40
 8007dc4:	61fb      	str	r3, [r7, #28]
 8007dc6:	e001      	b.n	8007dcc <HAL_ADCEx_InjectedPollForConversion+0x1c>
  }
  else /* end of conversion selected */
  {
    tmp_Flag_End = ADC_FLAG_JEOC;
 8007dc8:	2320      	movs	r3, #32
 8007dca:	61fb      	str	r3, [r7, #28]
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8007dcc:	f7ff f8aa 	bl	8006f24 <HAL_GetTick>
 8007dd0:	61b8      	str	r0, [r7, #24]

  /* Wait until End of Conversion or Sequence flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8007dd2:	e01a      	b.n	8007e0a <HAL_ADCEx_InjectedPollForConversion+0x5a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dda:	d016      	beq.n	8007e0a <HAL_ADCEx_InjectedPollForConversion+0x5a>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8007ddc:	f7ff f8a2 	bl	8006f24 <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d302      	bcc.n	8007df2 <HAL_ADCEx_InjectedPollForConversion+0x42>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10b      	bne.n	8007e0a <HAL_ADCEx_InjectedPollForConversion+0x5a>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df6:	f043 0204 	orr.w	r2, r3, #4
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e05c      	b.n	8007ec4 <HAL_ADCEx_InjectedPollForConversion+0x114>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	4013      	ands	r3, r2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0dd      	beq.n	8007dd4 <HAL_ADCEx_InjectedPollForConversion+0x24>
      }
    }
  }

  /* Retrieve ADC configuration */
  tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff fe0d 	bl	8007a3c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007e22:	6178      	str	r0, [r7, #20]
  tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff fdf4 	bl	8007a16 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007e2e:	6138      	str	r0, [r7, #16]
  {
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	60fb      	str	r3, [r7, #12]
#endif

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10c      	bne.n	8007e64 <HAL_ADCEx_InjectedPollForConversion+0xb4>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d125      	bne.n	8007ea0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d022      	beq.n	8007ea0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
        (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d11d      	bne.n	8007ea0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6e:	2b40      	cmp	r3, #64	; 0x40
 8007e70:	d116      	bne.n	8007ea0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
      /* when the last context has been fully processed, JSQR is reset      */
      /* by the hardware. Even if no injected conversion is planned to come */
      /* (queue empty, triggers are ignored), it can start again            */
      /* immediately after setting a new context (JADSTART is still set).   */
      /* Therefore, state of HAL ADC injected group is kept to busy.        */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d111      	bne.n	8007ea0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	659a      	str	r2, [r3, #88]	; 0x58

        if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d105      	bne.n	8007ea0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e98:	f043 0201 	orr.w	r2, r3, #1
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_JEOS)
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2b40      	cmp	r3, #64	; 0x40
 8007ea4:	d109      	bne.n	8007eba <HAL_ADCEx_InjectedPollForConversion+0x10a>
  {
    /* Clear end of sequence JEOS flag of injected group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature.   */
    /* For injected groups, no new conversion will start before JEOS is       */
    /* cleared.                                                               */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d108      	bne.n	8007ec2 <HAL_ADCEx_InjectedPollForConversion+0x112>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2260      	movs	r2, #96	; 0x60
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	e003      	b.n	8007ec2 <HAL_ADCEx_InjectedPollForConversion+0x112>
    }
  }
  else
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	601a      	str	r2, [r3, #0]
  }

  /* Return API HAL status */
  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3720      	adds	r7, #32
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	f240 321a 	movw	r2, #794	; 0x31a
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d00d      	beq.n	8007efc <HAL_ADCEx_InjectedGetValue+0x30>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	f240 321a 	movw	r2, #794	; 0x31a
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d81a      	bhi.n	8007f20 <HAL_ADCEx_InjectedGetValue+0x54>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007ef0:	d010      	beq.n	8007f14 <HAL_ADCEx_InjectedGetValue+0x48>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	f5b3 7f05 	cmp.w	r3, #532	; 0x214
 8007ef8:	d006      	beq.n	8007f08 <HAL_ADCEx_InjectedGetValue+0x3c>
 8007efa:	e011      	b.n	8007f20 <HAL_ADCEx_InjectedGetValue+0x54>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f04:	60fb      	str	r3, [r7, #12]
      break;
 8007f06:	e011      	b.n	8007f2c <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f10:	60fb      	str	r3, [r7, #12]
      break;
 8007f12:	e00b      	b.n	8007f2c <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f1c:	60fb      	str	r3, [r7, #12]
      break;
 8007f1e:	e005      	b.n	8007f2c <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f28:	60fb      	str	r3, [r7, #12]
      break;
 8007f2a:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
	...

08007fa0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b0a8      	sub	sp, #160	; 0xa0
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d102      	bne.n	8007fca <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	f000 bc13 	b.w	80087f0 <HAL_ADCEx_InjectedConfigChannel+0x850>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d130      	bne.n	8008044 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2b08      	cmp	r3, #8
 8007fe8:	d179      	bne.n	80080de <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d010      	beq.n	8008014 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	0e9b      	lsrs	r3, r3, #26
 8007ff8:	021b      	lsls	r3, r3, #8
 8007ffa:	f403 52f8 	and.w	r2, r3, #7936	; 0x1f00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008006:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800800c:	4313      	orrs	r3, r2
 800800e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008012:	e007      	b.n	8008024 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	0e9b      	lsrs	r3, r3, #26
 800801a:	021b      	lsls	r3, r3, #8
 800801c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8008020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800802a:	4ba1      	ldr	r3, [pc, #644]	; (80082b0 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 800802c:	4013      	ands	r3, r2
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	6812      	ldr	r2, [r2, #0]
 8008032:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8008036:	430b      	orrs	r3, r1
 8008038:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008040:	661a      	str	r2, [r3, #96]	; 0x60
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8008042:	e04c      	b.n	80080de <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008048:	2b00      	cmp	r3, #0
 800804a:	d11d      	bne.n	8008088 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	699a      	ldr	r2, [r3, #24]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	665a      	str	r2, [r3, #100]	; 0x64
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	661a      	str	r2, [r3, #96]	; 0x60
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00d      	beq.n	800807e <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008070:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8008076:	4313      	orrs	r3, r2
 8008078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800807c:	e004      	b.n	8008088 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	3b01      	subs	r3, #1
 8008084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	0e9b      	lsrs	r3, r3, #26
 800808e:	f003 021f 	and.w	r2, r3, #31
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f003 031f 	and.w	r3, r3, #31
 800809a:	fa02 f303 	lsl.w	r3, r2, r3
 800809e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80080a2:	4313      	orrs	r3, r2
 80080a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ac:	1e5a      	subs	r2, r3, #1
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	665a      	str	r2, [r3, #100]	; 0x64

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080ba:	431a      	orrs	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	661a      	str	r2, [r3, #96]	; 0x60

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080ce:	4b78      	ldr	r3, [pc, #480]	; (80082b0 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 80080d0:	4013      	ands	r3, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	6812      	ldr	r2, [r2, #0]
 80080da:	430b      	orrs	r3, r1
 80080dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff fd7f 	bl	8007be6 <LL_ADC_INJ_IsConversionOngoing>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d120      	bne.n	8008130 <HAL_ADCEx_InjectedConfigChannel+0x190>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	7f5b      	ldrb	r3, [r3, #29]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d110      	bne.n	8008118 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	7f9b      	ldrb	r3, [r3, #30]
 8008104:	055a      	lsls	r2, r3, #21
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	7f1b      	ldrb	r3, [r3, #28]
 800810a:	051b      	lsls	r3, r3, #20
 800810c:	431a      	orrs	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	60da      	str	r2, [r3, #12]
 8008116:	e00b      	b.n	8008130 <HAL_ADCEx_InjectedConfigChannel+0x190>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	7f9b      	ldrb	r3, [r3, #30]
 8008126:	055a      	lsls	r2, r3, #21
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff fd2f 	bl	8007b98 <LL_ADC_REG_IsConversionOngoing>
 800813a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4618      	mov	r0, r3
 8008144:	f7ff fd4f 	bl	8007be6 <LL_ADC_INJ_IsConversionOngoing>
 8008148:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800814c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008150:	2b00      	cmp	r3, #0
 8008152:	f040 81b9 	bne.w	80084c8 <HAL_ADCEx_InjectedConfigChannel+0x528>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008156:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800815a:	2b00      	cmp	r3, #0
 800815c:	f040 81b4 	bne.w	80084c8 <HAL_ADCEx_InjectedConfigChannel+0x528>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	2b00      	cmp	r3, #0
 800816e:	d115      	bne.n	800819c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	7f5b      	ldrb	r3, [r3, #29]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d108      	bne.n	800818a <HAL_ADCEx_InjectedConfigChannel+0x1ea>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008186:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8008188:	e01e      	b.n	80081c8 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008198:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800819a:	e015      	b.n	80081c8 <HAL_ADCEx_InjectedConfigChannel+0x228>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	7f5b      	ldrb	r3, [r3, #29]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d109      	bne.n	80081b8 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a8:	f043 0220 	orr.w	r2, r3, #32
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	659a      	str	r2, [r3, #88]	; 0x58

        tmp_hal_status = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80081b6:	e007      	b.n	80081c8 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80081c6:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d110      	bne.n	80081f4 <HAL_ADCEx_InjectedConfigChannel+0x254>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	430b      	orrs	r3, r1
 80081e6:	431a      	orrs	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f042 0202 	orr.w	r2, r2, #2
 80081f0:	611a      	str	r2, [r3, #16]
 80081f2:	e007      	b.n	8008204 <HAL_ADCEx_InjectedConfigChannel+0x264>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691a      	ldr	r2, [r3, #16]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0202 	bic.w	r2, r2, #2
 8008202:	611a      	str	r2, [r3, #16]
    }

#if defined(ADC_SMPR1_SMPPLUS)
    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800820c:	d10f      	bne.n	800822e <HAL_ADCEx_InjectedConfigChannel+0x28e>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2200      	movs	r2, #0
 8008218:	4619      	mov	r1, r3
 800821a:	f7ff fc30 	bl	8007a7e <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff fbe2 	bl	80079f0 <LL_ADC_SetSamplingTimeCommonConfig>
 800822c:	e00e      	b.n	800824c <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6819      	ldr	r1, [r3, #0]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	461a      	mov	r2, r3
 800823c:	f7ff fc1f 	bl	8007a7e <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2100      	movs	r1, #0
 8008246:	4618      	mov	r0, r3
 8008248:	f7ff fbd2 	bl	80079f0 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	695a      	ldr	r2, [r3, #20]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	08db      	lsrs	r3, r3, #3
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	fa02 f303 	lsl.w	r3, r2, r3
 8008262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	2b04      	cmp	r3, #4
 800826c:	d00a      	beq.n	8008284 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	6919      	ldr	r1, [r3, #16]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800827e:	f7ff fb69 	bl	8007954 <LL_ADC_SetOffset>
 8008282:	e121      	b.n	80084c8 <HAL_ADCEx_InjectedConfigChannel+0x528>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2100      	movs	r1, #0
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff fb84 	bl	8007998 <LL_ADC_GetOffsetChannel>
 8008290:	4603      	mov	r3, r0
 8008292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10c      	bne.n	80082b4 <HAL_ADCEx_InjectedConfigChannel+0x314>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2100      	movs	r1, #0
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7ff fb79 	bl	8007998 <LL_ADC_GetOffsetChannel>
 80082a6:	4603      	mov	r3, r0
 80082a8:	0e9b      	lsrs	r3, r3, #26
 80082aa:	f003 021f 	and.w	r2, r3, #31
 80082ae:	e016      	b.n	80082de <HAL_ADCEx_InjectedConfigChannel+0x33e>
 80082b0:	82082000 	.word	0x82082000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2100      	movs	r1, #0
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff fb6c 	bl	8007998 <LL_ADC_GetOffsetChannel>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082ca:	fa93 f3a3 	rbit	r3, r3
 80082ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80082d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80082d6:	fab3 f383 	clz	r3, r3
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	461a      	mov	r2, r3
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <HAL_ADCEx_InjectedConfigChannel+0x356>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	0e9b      	lsrs	r3, r3, #26
 80082f0:	f003 031f 	and.w	r3, r3, #31
 80082f4:	e00a      	b.n	800830c <HAL_ADCEx_InjectedConfigChannel+0x36c>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082fe:	fa93 f3a3 	rbit	r3, r3
 8008302:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8008304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008306:	fab3 f383 	clz	r3, r3
 800830a:	b2db      	uxtb	r3, r3
 800830c:	429a      	cmp	r2, r3
 800830e:	d106      	bne.n	800831e <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2200      	movs	r2, #0
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff fb51 	bl	80079c0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2101      	movs	r1, #1
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff fb37 	bl	8007998 <LL_ADC_GetOffsetChannel>
 800832a:	4603      	mov	r3, r0
 800832c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10a      	bne.n	800834a <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2101      	movs	r1, #1
 800833a:	4618      	mov	r0, r3
 800833c:	f7ff fb2c 	bl	8007998 <LL_ADC_GetOffsetChannel>
 8008340:	4603      	mov	r3, r0
 8008342:	0e9b      	lsrs	r3, r3, #26
 8008344:	f003 021f 	and.w	r2, r3, #31
 8008348:	e010      	b.n	800836c <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2101      	movs	r1, #1
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff fb21 	bl	8007998 <LL_ADC_GetOffsetChannel>
 8008356:	4603      	mov	r3, r0
 8008358:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800835a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800835c:	fa93 f3a3 	rbit	r3, r3
 8008360:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008364:	fab3 f383 	clz	r3, r3
 8008368:	b2db      	uxtb	r3, r3
 800836a:	461a      	mov	r2, r3
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008374:	2b00      	cmp	r3, #0
 8008376:	d105      	bne.n	8008384 <HAL_ADCEx_InjectedConfigChannel+0x3e4>
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	0e9b      	lsrs	r3, r3, #26
 800837e:	f003 031f 	and.w	r3, r3, #31
 8008382:	e00a      	b.n	800839a <HAL_ADCEx_InjectedConfigChannel+0x3fa>
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800838a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838c:	fa93 f3a3 	rbit	r3, r3
 8008390:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8008392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008394:	fab3 f383 	clz	r3, r3
 8008398:	b2db      	uxtb	r3, r3
 800839a:	429a      	cmp	r2, r3
 800839c:	d106      	bne.n	80083ac <HAL_ADCEx_InjectedConfigChannel+0x40c>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2200      	movs	r2, #0
 80083a4:	2101      	movs	r1, #1
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff fb0a 	bl	80079c0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2102      	movs	r1, #2
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7ff faf0 	bl	8007998 <LL_ADC_GetOffsetChannel>
 80083b8:	4603      	mov	r3, r0
 80083ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <HAL_ADCEx_InjectedConfigChannel+0x438>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2102      	movs	r1, #2
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7ff fae5 	bl	8007998 <LL_ADC_GetOffsetChannel>
 80083ce:	4603      	mov	r3, r0
 80083d0:	0e9b      	lsrs	r3, r3, #26
 80083d2:	f003 021f 	and.w	r2, r3, #31
 80083d6:	e010      	b.n	80083fa <HAL_ADCEx_InjectedConfigChannel+0x45a>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2102      	movs	r1, #2
 80083de:	4618      	mov	r0, r3
 80083e0:	f7ff fada 	bl	8007998 <LL_ADC_GetOffsetChannel>
 80083e4:	4603      	mov	r3, r0
 80083e6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ea:	fa93 f3a3 	rbit	r3, r3
 80083ee:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80083f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083f2:	fab3 f383 	clz	r3, r3
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	461a      	mov	r2, r3
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008402:	2b00      	cmp	r3, #0
 8008404:	d105      	bne.n	8008412 <HAL_ADCEx_InjectedConfigChannel+0x472>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	0e9b      	lsrs	r3, r3, #26
 800840c:	f003 031f 	and.w	r3, r3, #31
 8008410:	e00a      	b.n	8008428 <HAL_ADCEx_InjectedConfigChannel+0x488>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800841a:	fa93 f3a3 	rbit	r3, r3
 800841e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008420:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008422:	fab3 f383 	clz	r3, r3
 8008426:	b2db      	uxtb	r3, r3
 8008428:	429a      	cmp	r2, r3
 800842a:	d106      	bne.n	800843a <HAL_ADCEx_InjectedConfigChannel+0x49a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2200      	movs	r2, #0
 8008432:	2102      	movs	r1, #2
 8008434:	4618      	mov	r0, r3
 8008436:	f7ff fac3 	bl	80079c0 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2103      	movs	r1, #3
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff faa9 	bl	8007998 <LL_ADC_GetOffsetChannel>
 8008446:	4603      	mov	r3, r0
 8008448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10a      	bne.n	8008466 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2103      	movs	r1, #3
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff fa9e 	bl	8007998 <LL_ADC_GetOffsetChannel>
 800845c:	4603      	mov	r3, r0
 800845e:	0e9b      	lsrs	r3, r3, #26
 8008460:	f003 021f 	and.w	r2, r3, #31
 8008464:	e010      	b.n	8008488 <HAL_ADCEx_InjectedConfigChannel+0x4e8>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2103      	movs	r1, #3
 800846c:	4618      	mov	r0, r3
 800846e:	f7ff fa93 	bl	8007998 <LL_ADC_GetOffsetChannel>
 8008472:	4603      	mov	r3, r0
 8008474:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008478:	fa93 f3a3 	rbit	r3, r3
 800847c:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 800847e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008480:	fab3 f383 	clz	r3, r3
 8008484:	b2db      	uxtb	r3, r3
 8008486:	461a      	mov	r2, r3
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008490:	2b00      	cmp	r3, #0
 8008492:	d105      	bne.n	80084a0 <HAL_ADCEx_InjectedConfigChannel+0x500>
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	0e9b      	lsrs	r3, r3, #26
 800849a:	f003 031f 	and.w	r3, r3, #31
 800849e:	e00a      	b.n	80084b6 <HAL_ADCEx_InjectedConfigChannel+0x516>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a8:	fa93 f3a3 	rbit	r3, r3
 80084ac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80084ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084b0:	fab3 f383 	clz	r3, r3
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d106      	bne.n	80084c8 <HAL_ADCEx_InjectedConfigChannel+0x528>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2200      	movs	r2, #0
 80084c0:	2103      	movs	r1, #3
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff fa7c 	bl	80079c0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff fb23 	bl	8007b18 <LL_ADC_IsEnabled>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f040 810c 	bne.w	80086f2 <HAL_ADCEx_InjectedConfigChannel+0x752>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	6819      	ldr	r1, [r3, #0]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	461a      	mov	r2, r3
 80084e8:	f7ff faf2 	bl	8007ad0 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	4aa8      	ldr	r2, [pc, #672]	; (8008794 <HAL_ADCEx_InjectedConfigChannel+0x7f4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	f040 80fd 	bne.w	80086f2 <HAL_ADCEx_InjectedConfigChannel+0x752>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10b      	bne.n	8008520 <HAL_ADCEx_InjectedConfigChannel+0x580>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	0e9b      	lsrs	r3, r3, #26
 800850e:	3301      	adds	r3, #1
 8008510:	f003 031f 	and.w	r3, r3, #31
 8008514:	2b09      	cmp	r3, #9
 8008516:	bf94      	ite	ls
 8008518:	2301      	movls	r3, #1
 800851a:	2300      	movhi	r3, #0
 800851c:	b2db      	uxtb	r3, r3
 800851e:	e012      	b.n	8008546 <HAL_ADCEx_InjectedConfigChannel+0x5a6>
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008528:	fa93 f3a3 	rbit	r3, r3
 800852c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800852e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008530:	fab3 f383 	clz	r3, r3
 8008534:	b2db      	uxtb	r3, r3
 8008536:	3301      	adds	r3, #1
 8008538:	f003 031f 	and.w	r3, r3, #31
 800853c:	2b09      	cmp	r3, #9
 800853e:	bf94      	ite	ls
 8008540:	2301      	movls	r3, #1
 8008542:	2300      	movhi	r3, #0
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d064      	beq.n	8008614 <HAL_ADCEx_InjectedConfigChannel+0x674>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008552:	2b00      	cmp	r3, #0
 8008554:	d107      	bne.n	8008566 <HAL_ADCEx_InjectedConfigChannel+0x5c6>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	0e9b      	lsrs	r3, r3, #26
 800855c:	3301      	adds	r3, #1
 800855e:	069b      	lsls	r3, r3, #26
 8008560:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008564:	e00e      	b.n	8008584 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800856c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856e:	fa93 f3a3 	rbit	r3, r3
 8008572:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	fab3 f383 	clz	r3, r3
 800857a:	b2db      	uxtb	r3, r3
 800857c:	3301      	adds	r3, #1
 800857e:	069b      	lsls	r3, r3, #26
 8008580:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800858c:	2b00      	cmp	r3, #0
 800858e:	d109      	bne.n	80085a4 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	0e9b      	lsrs	r3, r3, #26
 8008596:	3301      	adds	r3, #1
 8008598:	f003 031f 	and.w	r3, r3, #31
 800859c:	2101      	movs	r1, #1
 800859e:	fa01 f303 	lsl.w	r3, r1, r3
 80085a2:	e010      	b.n	80085c6 <HAL_ADCEx_InjectedConfigChannel+0x626>
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ac:	fa93 f3a3 	rbit	r3, r3
 80085b0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	fab3 f383 	clz	r3, r3
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	3301      	adds	r3, #1
 80085bc:	f003 031f 	and.w	r3, r3, #31
 80085c0:	2101      	movs	r1, #1
 80085c2:	fa01 f303 	lsl.w	r3, r1, r3
 80085c6:	ea42 0103 	orr.w	r1, r2, r3
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10a      	bne.n	80085ec <HAL_ADCEx_InjectedConfigChannel+0x64c>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	0e9b      	lsrs	r3, r3, #26
 80085dc:	3301      	adds	r3, #1
 80085de:	f003 021f 	and.w	r2, r3, #31
 80085e2:	4613      	mov	r3, r2
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	4413      	add	r3, r2
 80085e8:	051b      	lsls	r3, r3, #20
 80085ea:	e011      	b.n	8008610 <HAL_ADCEx_InjectedConfigChannel+0x670>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f4:	fa93 f3a3 	rbit	r3, r3
 80085f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80085fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fc:	fab3 f383 	clz	r3, r3
 8008600:	b2db      	uxtb	r3, r3
 8008602:	3301      	adds	r3, #1
 8008604:	f003 021f 	and.w	r2, r3, #31
 8008608:	4613      	mov	r3, r2
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	4413      	add	r3, r2
 800860e:	051b      	lsls	r3, r3, #20
 8008610:	430b      	orrs	r3, r1
 8008612:	e069      	b.n	80086e8 <HAL_ADCEx_InjectedConfigChannel+0x748>
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800861c:	2b00      	cmp	r3, #0
 800861e:	d107      	bne.n	8008630 <HAL_ADCEx_InjectedConfigChannel+0x690>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	0e9b      	lsrs	r3, r3, #26
 8008626:	3301      	adds	r3, #1
 8008628:	069b      	lsls	r3, r3, #26
 800862a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800862e:	e00e      	b.n	800864e <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	fa93 f3a3 	rbit	r3, r3
 800863c:	623b      	str	r3, [r7, #32]
  return result;
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	fab3 f383 	clz	r3, r3
 8008644:	b2db      	uxtb	r3, r3
 8008646:	3301      	adds	r3, #1
 8008648:	069b      	lsls	r3, r3, #26
 800864a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	0e9b      	lsrs	r3, r3, #26
 8008660:	3301      	adds	r3, #1
 8008662:	f003 031f 	and.w	r3, r3, #31
 8008666:	2101      	movs	r1, #1
 8008668:	fa01 f303 	lsl.w	r3, r1, r3
 800866c:	e010      	b.n	8008690 <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	fa93 f3a3 	rbit	r3, r3
 800867a:	61bb      	str	r3, [r7, #24]
  return result;
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	fab3 f383 	clz	r3, r3
 8008682:	b2db      	uxtb	r3, r3
 8008684:	3301      	adds	r3, #1
 8008686:	f003 031f 	and.w	r3, r3, #31
 800868a:	2101      	movs	r1, #1
 800868c:	fa01 f303 	lsl.w	r3, r1, r3
 8008690:	ea42 0103 	orr.w	r1, r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10d      	bne.n	80086bc <HAL_ADCEx_InjectedConfigChannel+0x71c>
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	0e9b      	lsrs	r3, r3, #26
 80086a6:	3301      	adds	r3, #1
 80086a8:	f003 021f 	and.w	r2, r3, #31
 80086ac:	4613      	mov	r3, r2
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	4413      	add	r3, r2
 80086b2:	3b1e      	subs	r3, #30
 80086b4:	051b      	lsls	r3, r3, #20
 80086b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80086ba:	e014      	b.n	80086e6 <HAL_ADCEx_InjectedConfigChannel+0x746>
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	fa93 f3a3 	rbit	r3, r3
 80086c8:	613b      	str	r3, [r7, #16]
  return result;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	fab3 f383 	clz	r3, r3
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	3301      	adds	r3, #1
 80086d4:	f003 021f 	and.w	r2, r3, #31
 80086d8:	4613      	mov	r3, r2
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	4413      	add	r3, r2
 80086de:	3b1e      	subs	r3, #30
 80086e0:	051b      	lsls	r3, r3, #20
 80086e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80086e6:	430b      	orrs	r3, r1
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	6892      	ldr	r2, [r2, #8]
 80086ec:	4619      	mov	r1, r3
 80086ee:	f7ff f9c6 	bl	8007a7e <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	4b28      	ldr	r3, [pc, #160]	; (8008798 <HAL_ADCEx_InjectedConfigChannel+0x7f8>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d072      	beq.n	80087e4 <HAL_ADCEx_InjectedConfigChannel+0x844>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80086fe:	4827      	ldr	r0, [pc, #156]	; (800879c <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8008700:	f7ff f919 	bl	8007936 <LL_ADC_GetCommonPathInternalCh>
 8008704:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a24      	ldr	r2, [pc, #144]	; (80087a0 <HAL_ADCEx_InjectedConfigChannel+0x800>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d126      	bne.n	8008760 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008712:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d120      	bne.n	8008760 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a20      	ldr	r2, [pc, #128]	; (80087a4 <HAL_ADCEx_InjectedConfigChannel+0x804>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d15d      	bne.n	80087e4 <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800872c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008730:	4619      	mov	r1, r3
 8008732:	481a      	ldr	r0, [pc, #104]	; (800879c <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8008734:	f7ff f8ec 	bl	8007910 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008738:	4b1b      	ldr	r3, [pc, #108]	; (80087a8 <HAL_ADCEx_InjectedConfigChannel+0x808>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	099b      	lsrs	r3, r3, #6
 800873e:	4a1b      	ldr	r2, [pc, #108]	; (80087ac <HAL_ADCEx_InjectedConfigChannel+0x80c>)
 8008740:	fba2 2303 	umull	r2, r3, r2, r3
 8008744:	099a      	lsrs	r2, r3, #6
 8008746:	4613      	mov	r3, r2
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8008750:	e002      	b.n	8008758 <HAL_ADCEx_InjectedConfigChannel+0x7b8>
        {
          wait_loop_index--;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	3b01      	subs	r3, #1
 8008756:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1f9      	bne.n	8008752 <HAL_ADCEx_InjectedConfigChannel+0x7b2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800875e:	e041      	b.n	80087e4 <HAL_ADCEx_InjectedConfigChannel+0x844>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a12      	ldr	r2, [pc, #72]	; (80087b0 <HAL_ADCEx_InjectedConfigChannel+0x810>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d124      	bne.n	80087b4 <HAL_ADCEx_InjectedConfigChannel+0x814>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800876a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800876e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d11e      	bne.n	80087b4 <HAL_ADCEx_InjectedConfigChannel+0x814>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a0a      	ldr	r2, [pc, #40]	; (80087a4 <HAL_ADCEx_InjectedConfigChannel+0x804>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d131      	bne.n	80087e4 <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008780:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008788:	4619      	mov	r1, r3
 800878a:	4804      	ldr	r0, [pc, #16]	; (800879c <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 800878c:	f7ff f8c0 	bl	8007910 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008790:	e028      	b.n	80087e4 <HAL_ADCEx_InjectedConfigChannel+0x844>
 8008792:	bf00      	nop
 8008794:	407f0000 	.word	0x407f0000
 8008798:	80080000 	.word	0x80080000
 800879c:	50040300 	.word	0x50040300
 80087a0:	c7520000 	.word	0xc7520000
 80087a4:	50040000 	.word	0x50040000
 80087a8:	20000038 	.word	0x20000038
 80087ac:	053e2d63 	.word	0x053e2d63
 80087b0:	cb840000 	.word	0xcb840000
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a0f      	ldr	r2, [pc, #60]	; (80087f8 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d112      	bne.n	80087e4 <HAL_ADCEx_InjectedConfigChannel+0x844>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80087be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10c      	bne.n	80087e4 <HAL_ADCEx_InjectedConfigChannel+0x844>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a0b      	ldr	r2, [pc, #44]	; (80087fc <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d107      	bne.n	80087e4 <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80087d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80087dc:	4619      	mov	r1, r3
 80087de:	4808      	ldr	r0, [pc, #32]	; (8008800 <HAL_ADCEx_InjectedConfigChannel+0x860>)
 80087e0:	f7ff f896 	bl	8007910 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80087ec:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	37a0      	adds	r7, #160	; 0xa0
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	80000001 	.word	0x80000001
 80087fc:	50040000 	.word	0x50040000
 8008800:	50040300 	.word	0x50040300

08008804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008814:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <__NVIC_SetPriorityGrouping+0x44>)
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008820:	4013      	ands	r3, r2
 8008822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800882c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008836:	4a04      	ldr	r2, [pc, #16]	; (8008848 <__NVIC_SetPriorityGrouping+0x44>)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	60d3      	str	r3, [r2, #12]
}
 800883c:	bf00      	nop
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	e000ed00 	.word	0xe000ed00

0800884c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008850:	4b04      	ldr	r3, [pc, #16]	; (8008864 <__NVIC_GetPriorityGrouping+0x18>)
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	0a1b      	lsrs	r3, r3, #8
 8008856:	f003 0307 	and.w	r3, r3, #7
}
 800885a:	4618      	mov	r0, r3
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	e000ed00 	.word	0xe000ed00

08008868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008876:	2b00      	cmp	r3, #0
 8008878:	db0b      	blt.n	8008892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800887a:	79fb      	ldrb	r3, [r7, #7]
 800887c:	f003 021f 	and.w	r2, r3, #31
 8008880:	4907      	ldr	r1, [pc, #28]	; (80088a0 <__NVIC_EnableIRQ+0x38>)
 8008882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008886:	095b      	lsrs	r3, r3, #5
 8008888:	2001      	movs	r0, #1
 800888a:	fa00 f202 	lsl.w	r2, r0, r2
 800888e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	e000e100 	.word	0xe000e100

080088a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	6039      	str	r1, [r7, #0]
 80088ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	db0a      	blt.n	80088ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	490c      	ldr	r1, [pc, #48]	; (80088f0 <__NVIC_SetPriority+0x4c>)
 80088be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088c2:	0112      	lsls	r2, r2, #4
 80088c4:	b2d2      	uxtb	r2, r2
 80088c6:	440b      	add	r3, r1
 80088c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80088cc:	e00a      	b.n	80088e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	4908      	ldr	r1, [pc, #32]	; (80088f4 <__NVIC_SetPriority+0x50>)
 80088d4:	79fb      	ldrb	r3, [r7, #7]
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	3b04      	subs	r3, #4
 80088dc:	0112      	lsls	r2, r2, #4
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	440b      	add	r3, r1
 80088e2:	761a      	strb	r2, [r3, #24]
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	e000e100 	.word	0xe000e100
 80088f4:	e000ed00 	.word	0xe000ed00

080088f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b089      	sub	sp, #36	; 0x24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	f1c3 0307 	rsb	r3, r3, #7
 8008912:	2b04      	cmp	r3, #4
 8008914:	bf28      	it	cs
 8008916:	2304      	movcs	r3, #4
 8008918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	3304      	adds	r3, #4
 800891e:	2b06      	cmp	r3, #6
 8008920:	d902      	bls.n	8008928 <NVIC_EncodePriority+0x30>
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	3b03      	subs	r3, #3
 8008926:	e000      	b.n	800892a <NVIC_EncodePriority+0x32>
 8008928:	2300      	movs	r3, #0
 800892a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800892c:	f04f 32ff 	mov.w	r2, #4294967295
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	43da      	mvns	r2, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	401a      	ands	r2, r3
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008940:	f04f 31ff 	mov.w	r1, #4294967295
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	fa01 f303 	lsl.w	r3, r1, r3
 800894a:	43d9      	mvns	r1, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008950:	4313      	orrs	r3, r2
         );
}
 8008952:	4618      	mov	r0, r3
 8008954:	3724      	adds	r7, #36	; 0x24
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
	...

08008960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3b01      	subs	r3, #1
 800896c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008970:	d301      	bcc.n	8008976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008972:	2301      	movs	r3, #1
 8008974:	e00f      	b.n	8008996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008976:	4a0a      	ldr	r2, [pc, #40]	; (80089a0 <SysTick_Config+0x40>)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3b01      	subs	r3, #1
 800897c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800897e:	210f      	movs	r1, #15
 8008980:	f04f 30ff 	mov.w	r0, #4294967295
 8008984:	f7ff ff8e 	bl	80088a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008988:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <SysTick_Config+0x40>)
 800898a:	2200      	movs	r2, #0
 800898c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800898e:	4b04      	ldr	r3, [pc, #16]	; (80089a0 <SysTick_Config+0x40>)
 8008990:	2207      	movs	r2, #7
 8008992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	e000e010 	.word	0xe000e010

080089a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff ff29 	bl	8008804 <__NVIC_SetPriorityGrouping>
}
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b086      	sub	sp, #24
 80089be:	af00      	add	r7, sp, #0
 80089c0:	4603      	mov	r3, r0
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
 80089c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80089c8:	2300      	movs	r3, #0
 80089ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80089cc:	f7ff ff3e 	bl	800884c <__NVIC_GetPriorityGrouping>
 80089d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	6978      	ldr	r0, [r7, #20]
 80089d8:	f7ff ff8e 	bl	80088f8 <NVIC_EncodePriority>
 80089dc:	4602      	mov	r2, r0
 80089de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089e2:	4611      	mov	r1, r2
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7ff ff5d 	bl	80088a4 <__NVIC_SetPriority>
}
 80089ea:	bf00      	nop
 80089ec:	3718      	adds	r7, #24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	4603      	mov	r3, r0
 80089fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80089fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7ff ff31 	bl	8008868 <__NVIC_EnableIRQ>
}
 8008a06:	bf00      	nop
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7ff ffa2 	bl	8008960 <SysTick_Config>
 8008a1c:	4603      	mov	r3, r0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
	...

08008a28 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e08d      	b.n	8008b56 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4b47      	ldr	r3, [pc, #284]	; (8008b60 <HAL_DMA_Init+0x138>)
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d80f      	bhi.n	8008a66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	4b45      	ldr	r3, [pc, #276]	; (8008b64 <HAL_DMA_Init+0x13c>)
 8008a4e:	4413      	add	r3, r2
 8008a50:	4a45      	ldr	r2, [pc, #276]	; (8008b68 <HAL_DMA_Init+0x140>)
 8008a52:	fba2 2303 	umull	r2, r3, r2, r3
 8008a56:	091b      	lsrs	r3, r3, #4
 8008a58:	009a      	lsls	r2, r3, #2
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a42      	ldr	r2, [pc, #264]	; (8008b6c <HAL_DMA_Init+0x144>)
 8008a62:	641a      	str	r2, [r3, #64]	; 0x40
 8008a64:	e00e      	b.n	8008a84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	4b40      	ldr	r3, [pc, #256]	; (8008b70 <HAL_DMA_Init+0x148>)
 8008a6e:	4413      	add	r3, r2
 8008a70:	4a3d      	ldr	r2, [pc, #244]	; (8008b68 <HAL_DMA_Init+0x140>)
 8008a72:	fba2 2303 	umull	r2, r3, r2, r3
 8008a76:	091b      	lsrs	r3, r3, #4
 8008a78:	009a      	lsls	r2, r3, #2
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a3c      	ldr	r2, [pc, #240]	; (8008b74 <HAL_DMA_Init+0x14c>)
 8008a82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f966 	bl	8008da8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ae4:	d102      	bne.n	8008aec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008af4:	b2d2      	uxtb	r2, r2
 8008af6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008b00:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d010      	beq.n	8008b2c <HAL_DMA_Init+0x104>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d80c      	bhi.n	8008b2c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f986 	bl	8008e24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008b28:	605a      	str	r2, [r3, #4]
 8008b2a:	e008      	b.n	8008b3e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	40020407 	.word	0x40020407
 8008b64:	bffdfff8 	.word	0xbffdfff8
 8008b68:	cccccccd 	.word	0xcccccccd
 8008b6c:	40020000 	.word	0x40020000
 8008b70:	bffdfbf8 	.word	0xbffdfbf8
 8008b74:	40020400 	.word	0x40020400

08008b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_DMA_Start_IT+0x20>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e066      	b.n	8008c66 <HAL_DMA_Start_IT+0xee>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d155      	bne.n	8008c58 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 0201 	bic.w	r2, r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	68b9      	ldr	r1, [r7, #8]
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 f8ab 	bl	8008d2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d008      	beq.n	8008bf0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f042 020e 	orr.w	r2, r2, #14
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	e00f      	b.n	8008c10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f022 0204 	bic.w	r2, r2, #4
 8008bfe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f042 020a 	orr.w	r2, r2, #10
 8008c0e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d007      	beq.n	8008c2e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c2c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d007      	beq.n	8008c46 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c44:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f042 0201 	orr.w	r2, r2, #1
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	e005      	b.n	8008c64 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008c60:	2302      	movs	r3, #2
 8008c62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3718      	adds	r7, #24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d005      	beq.n	8008c92 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2204      	movs	r2, #4
 8008c8a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	73fb      	strb	r3, [r7, #15]
 8008c90:	e047      	b.n	8008d22 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f022 020e 	bic.w	r2, r2, #14
 8008ca0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0201 	bic.w	r2, r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc6:	f003 021c 	and.w	r2, r3, #28
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cce:	2101      	movs	r1, #1
 8008cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8008cd4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008cde:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00c      	beq.n	8008d02 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cf6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008d00:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	4798      	blx	r3
    }
  }
  return status;
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008d42:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d004      	beq.n	8008d56 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008d54:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5a:	f003 021c 	and.w	r2, r3, #28
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	2101      	movs	r1, #1
 8008d64:	fa01 f202 	lsl.w	r2, r1, r2
 8008d68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	2b10      	cmp	r3, #16
 8008d78:	d108      	bne.n	8008d8c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008d8a:	e007      	b.n	8008d9c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	60da      	str	r2, [r3, #12]
}
 8008d9c:	bf00      	nop
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	461a      	mov	r2, r3
 8008db6:	4b17      	ldr	r3, [pc, #92]	; (8008e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d80a      	bhi.n	8008dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc0:	089b      	lsrs	r3, r3, #2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008dc8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	6493      	str	r3, [r2, #72]	; 0x48
 8008dd0:	e007      	b.n	8008de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd6:	089b      	lsrs	r3, r3, #2
 8008dd8:	009a      	lsls	r2, r3, #2
 8008dda:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008ddc:	4413      	add	r3, r2
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	3b08      	subs	r3, #8
 8008dea:	4a0c      	ldr	r2, [pc, #48]	; (8008e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008dec:	fba2 2303 	umull	r2, r3, r2, r3
 8008df0:	091b      	lsrs	r3, r3, #4
 8008df2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a0a      	ldr	r2, [pc, #40]	; (8008e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008df8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f003 031f 	and.w	r3, r3, #31
 8008e00:	2201      	movs	r2, #1
 8008e02:	409a      	lsls	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008e08:	bf00      	nop
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	40020407 	.word	0x40020407
 8008e18:	4002081c 	.word	0x4002081c
 8008e1c:	cccccccd 	.word	0xcccccccd
 8008e20:	40020880 	.word	0x40020880

08008e24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008e38:	4413      	add	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a08      	ldr	r2, [pc, #32]	; (8008e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008e46:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	f003 0303 	and.w	r3, r3, #3
 8008e50:	2201      	movs	r2, #1
 8008e52:	409a      	lsls	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008e58:	bf00      	nop
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	1000823f 	.word	0x1000823f
 8008e68:	40020940 	.word	0x40020940

08008e6c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	460b      	mov	r3, r1
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8008e7e:	7afb      	ldrb	r3, [r7, #11]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d103      	bne.n	8008e8c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	605a      	str	r2, [r3, #4]
      break;
 8008e8a:	e002      	b.n	8008e92 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e90:	bf00      	nop
  }

  return status;
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	371c      	adds	r7, #28
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e003      	b.n	8008ebc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008eba:	2300      	movs	r3, #0
  }
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	0c1b      	lsrs	r3, r3, #16
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 031f 	and.w	r3, r3, #31
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eea:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <HAL_EXTI_IRQHandler+0x5c>)
 8008ef2:	4413      	add	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	4013      	ands	r3, r2
 8008efe:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d009      	beq.n	8008f1a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	4798      	blx	r3
    }
  }
}
 8008f1a:	bf00      	nop
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	40010414 	.word	0x40010414

08008f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f32:	2300      	movs	r3, #0
 8008f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f36:	e166      	b.n	8009206 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	fa01 f303 	lsl.w	r3, r1, r3
 8008f44:	4013      	ands	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 8158 	beq.w	8009200 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d003      	beq.n	8008f60 <HAL_GPIO_Init+0x38>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	2b12      	cmp	r3, #18
 8008f5e:	d123      	bne.n	8008fa8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	08da      	lsrs	r2, r3, #3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3208      	adds	r2, #8
 8008f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f003 0307 	and.w	r3, r3, #7
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	220f      	movs	r2, #15
 8008f78:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7c:	43db      	mvns	r3, r3
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	4013      	ands	r3, r2
 8008f82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	fa02 f303 	lsl.w	r3, r2, r3
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	08da      	lsrs	r2, r3, #3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3208      	adds	r2, #8
 8008fa2:	6939      	ldr	r1, [r7, #16]
 8008fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	005b      	lsls	r3, r3, #1
 8008fb2:	2203      	movs	r2, #3
 8008fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb8:	43db      	mvns	r3, r3
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f003 0203 	and.w	r2, r3, #3
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d00b      	beq.n	8008ffc <HAL_GPIO_Init+0xd4>
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d007      	beq.n	8008ffc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008ff0:	2b11      	cmp	r3, #17
 8008ff2:	d003      	beq.n	8008ffc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	2b12      	cmp	r3, #18
 8008ffa:	d130      	bne.n	800905e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	2203      	movs	r2, #3
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	43db      	mvns	r3, r3
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	4013      	ands	r3, r2
 8009012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	68da      	ldr	r2, [r3, #12]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	fa02 f303 	lsl.w	r3, r2, r3
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4313      	orrs	r3, r2
 8009024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009032:	2201      	movs	r2, #1
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	fa02 f303 	lsl.w	r3, r2, r3
 800903a:	43db      	mvns	r3, r3
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	4013      	ands	r3, r2
 8009040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	091b      	lsrs	r3, r3, #4
 8009048:	f003 0201 	and.w	r2, r3, #1
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	fa02 f303 	lsl.w	r3, r2, r3
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	4313      	orrs	r3, r2
 8009056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	005b      	lsls	r3, r3, #1
 8009068:	2203      	movs	r2, #3
 800906a:	fa02 f303 	lsl.w	r3, r2, r3
 800906e:	43db      	mvns	r3, r3
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	4013      	ands	r3, r2
 8009074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	689a      	ldr	r2, [r3, #8]
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	005b      	lsls	r3, r3, #1
 800907e:	fa02 f303 	lsl.w	r3, r2, r3
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	4313      	orrs	r3, r2
 8009086:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 80b2 	beq.w	8009200 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800909c:	4b61      	ldr	r3, [pc, #388]	; (8009224 <HAL_GPIO_Init+0x2fc>)
 800909e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a0:	4a60      	ldr	r2, [pc, #384]	; (8009224 <HAL_GPIO_Init+0x2fc>)
 80090a2:	f043 0301 	orr.w	r3, r3, #1
 80090a6:	6613      	str	r3, [r2, #96]	; 0x60
 80090a8:	4b5e      	ldr	r3, [pc, #376]	; (8009224 <HAL_GPIO_Init+0x2fc>)
 80090aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	60bb      	str	r3, [r7, #8]
 80090b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80090b4:	4a5c      	ldr	r2, [pc, #368]	; (8009228 <HAL_GPIO_Init+0x300>)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	089b      	lsrs	r3, r3, #2
 80090ba:	3302      	adds	r3, #2
 80090bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f003 0303 	and.w	r3, r3, #3
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	220f      	movs	r2, #15
 80090cc:	fa02 f303 	lsl.w	r3, r2, r3
 80090d0:	43db      	mvns	r3, r3
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	4013      	ands	r3, r2
 80090d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80090de:	d02b      	beq.n	8009138 <HAL_GPIO_Init+0x210>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a52      	ldr	r2, [pc, #328]	; (800922c <HAL_GPIO_Init+0x304>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d025      	beq.n	8009134 <HAL_GPIO_Init+0x20c>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a51      	ldr	r2, [pc, #324]	; (8009230 <HAL_GPIO_Init+0x308>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d01f      	beq.n	8009130 <HAL_GPIO_Init+0x208>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a50      	ldr	r2, [pc, #320]	; (8009234 <HAL_GPIO_Init+0x30c>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d019      	beq.n	800912c <HAL_GPIO_Init+0x204>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a4f      	ldr	r2, [pc, #316]	; (8009238 <HAL_GPIO_Init+0x310>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d013      	beq.n	8009128 <HAL_GPIO_Init+0x200>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a4e      	ldr	r2, [pc, #312]	; (800923c <HAL_GPIO_Init+0x314>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00d      	beq.n	8009124 <HAL_GPIO_Init+0x1fc>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a4d      	ldr	r2, [pc, #308]	; (8009240 <HAL_GPIO_Init+0x318>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d007      	beq.n	8009120 <HAL_GPIO_Init+0x1f8>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a4c      	ldr	r2, [pc, #304]	; (8009244 <HAL_GPIO_Init+0x31c>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d101      	bne.n	800911c <HAL_GPIO_Init+0x1f4>
 8009118:	2307      	movs	r3, #7
 800911a:	e00e      	b.n	800913a <HAL_GPIO_Init+0x212>
 800911c:	2308      	movs	r3, #8
 800911e:	e00c      	b.n	800913a <HAL_GPIO_Init+0x212>
 8009120:	2306      	movs	r3, #6
 8009122:	e00a      	b.n	800913a <HAL_GPIO_Init+0x212>
 8009124:	2305      	movs	r3, #5
 8009126:	e008      	b.n	800913a <HAL_GPIO_Init+0x212>
 8009128:	2304      	movs	r3, #4
 800912a:	e006      	b.n	800913a <HAL_GPIO_Init+0x212>
 800912c:	2303      	movs	r3, #3
 800912e:	e004      	b.n	800913a <HAL_GPIO_Init+0x212>
 8009130:	2302      	movs	r3, #2
 8009132:	e002      	b.n	800913a <HAL_GPIO_Init+0x212>
 8009134:	2301      	movs	r3, #1
 8009136:	e000      	b.n	800913a <HAL_GPIO_Init+0x212>
 8009138:	2300      	movs	r3, #0
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	f002 0203 	and.w	r2, r2, #3
 8009140:	0092      	lsls	r2, r2, #2
 8009142:	4093      	lsls	r3, r2
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	4313      	orrs	r3, r2
 8009148:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800914a:	4937      	ldr	r1, [pc, #220]	; (8009228 <HAL_GPIO_Init+0x300>)
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	089b      	lsrs	r3, r3, #2
 8009150:	3302      	adds	r3, #2
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009158:	4b3b      	ldr	r3, [pc, #236]	; (8009248 <HAL_GPIO_Init+0x320>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	43db      	mvns	r3, r3
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	4013      	ands	r3, r2
 8009166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4313      	orrs	r3, r2
 800917a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800917c:	4a32      	ldr	r2, [pc, #200]	; (8009248 <HAL_GPIO_Init+0x320>)
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8009182:	4b31      	ldr	r3, [pc, #196]	; (8009248 <HAL_GPIO_Init+0x320>)
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	43db      	mvns	r3, r3
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	4013      	ands	r3, r2
 8009190:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80091a6:	4a28      	ldr	r2, [pc, #160]	; (8009248 <HAL_GPIO_Init+0x320>)
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80091ac:	4b26      	ldr	r3, [pc, #152]	; (8009248 <HAL_GPIO_Init+0x320>)
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	43db      	mvns	r3, r3
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	4013      	ands	r3, r2
 80091ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d003      	beq.n	80091d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80091d0:	4a1d      	ldr	r2, [pc, #116]	; (8009248 <HAL_GPIO_Init+0x320>)
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80091d6:	4b1c      	ldr	r3, [pc, #112]	; (8009248 <HAL_GPIO_Init+0x320>)
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	43db      	mvns	r3, r3
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	4013      	ands	r3, r2
 80091e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80091fa:	4a13      	ldr	r2, [pc, #76]	; (8009248 <HAL_GPIO_Init+0x320>)
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	3301      	adds	r3, #1
 8009204:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	fa22 f303 	lsr.w	r3, r2, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	f47f ae91 	bne.w	8008f38 <HAL_GPIO_Init+0x10>
  }
}
 8009216:	bf00      	nop
 8009218:	bf00      	nop
 800921a:	371c      	adds	r7, #28
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	40021000 	.word	0x40021000
 8009228:	40010000 	.word	0x40010000
 800922c:	48000400 	.word	0x48000400
 8009230:	48000800 	.word	0x48000800
 8009234:	48000c00 	.word	0x48000c00
 8009238:	48001000 	.word	0x48001000
 800923c:	48001400 	.word	0x48001400
 8009240:	48001800 	.word	0x48001800
 8009244:	48001c00 	.word	0x48001c00
 8009248:	40010400 	.word	0x40010400

0800924c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691a      	ldr	r2, [r3, #16]
 800925c:	887b      	ldrh	r3, [r7, #2]
 800925e:	4013      	ands	r3, r2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009264:	2301      	movs	r3, #1
 8009266:	73fb      	strb	r3, [r7, #15]
 8009268:	e001      	b.n	800926e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800926e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	807b      	strh	r3, [r7, #2]
 8009288:	4613      	mov	r3, r2
 800928a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800928c:	787b      	ldrb	r3, [r7, #1]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009292:	887a      	ldrh	r2, [r7, #2]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009298:	e002      	b.n	80092a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800929a:	887a      	ldrh	r2, [r7, #2]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	695a      	ldr	r2, [r3, #20]
 80092bc:	887b      	ldrh	r3, [r7, #2]
 80092be:	4013      	ands	r3, r2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80092c4:	887a      	ldrh	r2, [r7, #2]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80092ca:	e002      	b.n	80092d2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80092cc:	887a      	ldrh	r2, [r7, #2]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	619a      	str	r2, [r3, #24]
}
 80092d2:	bf00      	nop
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
	...

080092e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80092ea:	4b08      	ldr	r3, [pc, #32]	; (800930c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80092ec:	695a      	ldr	r2, [r3, #20]
 80092ee:	88fb      	ldrh	r3, [r7, #6]
 80092f0:	4013      	ands	r3, r2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d006      	beq.n	8009304 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80092f6:	4a05      	ldr	r2, [pc, #20]	; (800930c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80092f8:	88fb      	ldrh	r3, [r7, #6]
 80092fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fa ff7c 	bl	80041fc <HAL_GPIO_EXTI_Callback>
  }
}
 8009304:	bf00      	nop
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	40010400 	.word	0x40010400

08009310 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932c:	2b00      	cmp	r3, #0
 800932e:	d005      	beq.n	800933c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	68f9      	ldr	r1, [r7, #12]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	4798      	blx	r3
  }
}
 800933c:	bf00      	nop
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	0a1b      	lsrs	r3, r3, #8
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	2b00      	cmp	r3, #0
 8009366:	d010      	beq.n	800938a <HAL_I2C_ER_IRQHandler+0x46>
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	09db      	lsrs	r3, r3, #7
 800936c:	f003 0301 	and.w	r3, r3, #1
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00a      	beq.n	800938a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009378:	f043 0201 	orr.w	r2, r3, #1
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009388:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	0a9b      	lsrs	r3, r3, #10
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	d010      	beq.n	80093b8 <HAL_I2C_ER_IRQHandler+0x74>
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	09db      	lsrs	r3, r3, #7
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a6:	f043 0208 	orr.w	r2, r3, #8
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	0a5b      	lsrs	r3, r3, #9
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d010      	beq.n	80093e6 <HAL_I2C_ER_IRQHandler+0xa2>
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	09db      	lsrs	r3, r3, #7
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00a      	beq.n	80093e6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d4:	f043 0202 	orr.w	r2, r3, #2
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f003 030b 	and.w	r3, r3, #11
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80093f6:	68f9      	ldr	r1, [r7, #12]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 faf9 	bl	80099f0 <I2C_ITError>
  }
}
 80093fe:	bf00      	nop
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b086      	sub	sp, #24
 800940a:	af00      	add	r7, sp, #0
 800940c:	60f8      	str	r0, [r7, #12]
 800940e:	60b9      	str	r1, [r7, #8]
 8009410:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009416:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <I2C_Slave_ISR_IT+0x24>
 8009426:	2302      	movs	r3, #2
 8009428:	e0ec      	b.n	8009604 <I2C_Slave_ISR_IT+0x1fe>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	095b      	lsrs	r3, r3, #5
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d009      	beq.n	8009452 <I2C_Slave_ISR_IT+0x4c>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	095b      	lsrs	r3, r3, #5
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800944a:	6939      	ldr	r1, [r7, #16]
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 f99f 	bl	8009790 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	091b      	lsrs	r3, r3, #4
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	2b00      	cmp	r3, #0
 800945c:	d04d      	beq.n	80094fa <I2C_Slave_ISR_IT+0xf4>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	091b      	lsrs	r3, r3, #4
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d047      	beq.n	80094fa <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946e:	b29b      	uxth	r3, r3
 8009470:	2b00      	cmp	r3, #0
 8009472:	d128      	bne.n	80094c6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b28      	cmp	r3, #40	; 0x28
 800947e:	d108      	bne.n	8009492 <I2C_Slave_ISR_IT+0x8c>
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009486:	d104      	bne.n	8009492 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009488:	6939      	ldr	r1, [r7, #16]
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f000 fa5a 	bl	8009944 <I2C_ITListenCplt>
 8009490:	e032      	b.n	80094f8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b29      	cmp	r3, #41	; 0x29
 800949c:	d10e      	bne.n	80094bc <I2C_Slave_ISR_IT+0xb6>
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80094a4:	d00a      	beq.n	80094bc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2210      	movs	r2, #16
 80094ac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 fb60 	bl	8009b74 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 f92b 	bl	8009710 <I2C_ITSlaveSeqCplt>
 80094ba:	e01d      	b.n	80094f8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2210      	movs	r2, #16
 80094c2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80094c4:	e096      	b.n	80095f4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2210      	movs	r2, #16
 80094cc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094d2:	f043 0204 	orr.w	r2, r3, #4
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d004      	beq.n	80094ea <I2C_Slave_ISR_IT+0xe4>
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80094e6:	f040 8085 	bne.w	80095f4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ee:	4619      	mov	r1, r3
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 fa7d 	bl	80099f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80094f6:	e07d      	b.n	80095f4 <I2C_Slave_ISR_IT+0x1ee>
 80094f8:	e07c      	b.n	80095f4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	089b      	lsrs	r3, r3, #2
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d030      	beq.n	8009568 <I2C_Slave_ISR_IT+0x162>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	089b      	lsrs	r3, r3, #2
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d02a      	beq.n	8009568 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009516:	b29b      	uxth	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d018      	beq.n	800954e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009538:	3b01      	subs	r3, #1
 800953a:	b29a      	uxth	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	b29a      	uxth	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d14f      	bne.n	80095f8 <I2C_Slave_ISR_IT+0x1f2>
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800955e:	d04b      	beq.n	80095f8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 f8d5 	bl	8009710 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009566:	e047      	b.n	80095f8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	08db      	lsrs	r3, r3, #3
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00a      	beq.n	800958a <I2C_Slave_ISR_IT+0x184>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	08db      	lsrs	r3, r3, #3
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d004      	beq.n	800958a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009580:	6939      	ldr	r1, [r7, #16]
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f000 f842 	bl	800960c <I2C_ITAddrCplt>
 8009588:	e037      	b.n	80095fa <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	085b      	lsrs	r3, r3, #1
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d031      	beq.n	80095fa <I2C_Slave_ISR_IT+0x1f4>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	085b      	lsrs	r3, r3, #1
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d02b      	beq.n	80095fa <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d018      	beq.n	80095de <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	781a      	ldrb	r2, [r3, #0]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	3b01      	subs	r3, #1
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d4:	3b01      	subs	r3, #1
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	851a      	strh	r2, [r3, #40]	; 0x28
 80095dc:	e00d      	b.n	80095fa <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095e4:	d002      	beq.n	80095ec <I2C_Slave_ISR_IT+0x1e6>
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d106      	bne.n	80095fa <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 f88f 	bl	8009710 <I2C_ITSlaveSeqCplt>
 80095f2:	e002      	b.n	80095fa <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80095f4:	bf00      	nop
 80095f6:	e000      	b.n	80095fa <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80095f8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009622:	2b28      	cmp	r3, #40	; 0x28
 8009624:	d168      	bne.n	80096f8 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	0c1b      	lsrs	r3, r3, #16
 800962e:	b2db      	uxtb	r3, r3
 8009630:	f003 0301 	and.w	r3, r3, #1
 8009634:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	0c1b      	lsrs	r3, r3, #16
 800963e:	b29b      	uxth	r3, r3
 8009640:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009644:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	b29b      	uxth	r3, r3
 800964e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009652:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	b29b      	uxth	r3, r3
 800965c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009660:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	2b02      	cmp	r3, #2
 8009668:	d137      	bne.n	80096da <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800966a:	897b      	ldrh	r3, [r7, #10]
 800966c:	09db      	lsrs	r3, r3, #7
 800966e:	b29a      	uxth	r2, r3
 8009670:	89bb      	ldrh	r3, [r7, #12]
 8009672:	4053      	eors	r3, r2
 8009674:	b29b      	uxth	r3, r3
 8009676:	f003 0306 	and.w	r3, r3, #6
 800967a:	2b00      	cmp	r3, #0
 800967c:	d11c      	bne.n	80096b8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800967e:	897b      	ldrh	r3, [r7, #10]
 8009680:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009690:	2b02      	cmp	r3, #2
 8009692:	d139      	bne.n	8009708 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2208      	movs	r2, #8
 80096a0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ae:	89ba      	ldrh	r2, [r7, #12]
 80096b0:	7bf9      	ldrb	r1, [r7, #15]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80096b6:	e027      	b.n	8009708 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 80096b8:	893b      	ldrh	r3, [r7, #8]
 80096ba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80096bc:	2104      	movs	r1, #4
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 faa2 	bl	8009c08 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d0:	89ba      	ldrh	r2, [r7, #12]
 80096d2:	7bf9      	ldrb	r1, [r7, #15]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	4798      	blx	r3
}
 80096d8:	e016      	b.n	8009708 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80096da:	2104      	movs	r1, #4
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fa93 	bl	8009c08 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ee:	89ba      	ldrh	r2, [r7, #12]
 80096f0:	7bf9      	ldrb	r1, [r7, #15]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	4798      	blx	r3
}
 80096f6:	e007      	b.n	8009708 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2208      	movs	r2, #8
 80096fe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009708:	bf00      	nop
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b29      	cmp	r3, #41	; 0x29
 800972a:	d113      	bne.n	8009754 <I2C_ITSlaveSeqCplt+0x44>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2228      	movs	r2, #40	; 0x28
 8009730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2221      	movs	r2, #33	; 0x21
 8009738:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800973a:	2101      	movs	r1, #1
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fa63 	bl	8009c08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8009752:	e018      	b.n	8009786 <I2C_ITSlaveSeqCplt+0x76>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b2a      	cmp	r3, #42	; 0x2a
 800975e:	d112      	bne.n	8009786 <I2C_ITSlaveSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2228      	movs	r2, #40	; 0x28
 8009764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2222      	movs	r2, #34	; 0x22
 800976c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800976e:	2102      	movs	r1, #2
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fa49 	bl	8009c08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	4798      	blx	r3
}
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2220      	movs	r2, #32
 80097ac:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80097ae:	2107      	movs	r1, #7
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fa29 	bl	8009c08 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097c4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6859      	ldr	r1, [r3, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	4b5a      	ldr	r3, [pc, #360]	; (800993c <I2C_ITSlaveCplt+0x1ac>)
 80097d2:	400b      	ands	r3, r1
 80097d4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f9cc 	bl	8009b74 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	0b9b      	lsrs	r3, r3, #14
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00b      	beq.n	8009800 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d018      	beq.n	8009822 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097fe:	e010      	b.n	8009822 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	0bdb      	lsrs	r3, r3, #15
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009810:	2b00      	cmp	r3, #0
 8009812:	d006      	beq.n	8009822 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	b29a      	uxth	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	089b      	lsrs	r3, r3, #2
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d020      	beq.n	8009870 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f023 0304 	bic.w	r3, r3, #4
 8009834:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009840:	b2d2      	uxtb	r2, r2
 8009842:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00c      	beq.n	8009870 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800985a:	3b01      	subs	r3, #1
 800985c:	b29a      	uxth	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009866:	b29b      	uxth	r3, r3
 8009868:	3b01      	subs	r3, #1
 800986a:	b29a      	uxth	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009874:	b29b      	uxth	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d005      	beq.n	8009886 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800987e:	f043 0204 	orr.w	r2, r3, #4
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d010      	beq.n	80098c4 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a6:	4619      	mov	r1, r3
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f8a1 	bl	80099f0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b28      	cmp	r3, #40	; 0x28
 80098b8:	d13b      	bne.n	8009932 <I2C_ITSlaveCplt+0x1a2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80098ba:	68f9      	ldr	r1, [r7, #12]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f841 	bl	8009944 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80098c2:	e036      	b.n	8009932 <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098cc:	d012      	beq.n	80098f4 <I2C_ITSlaveCplt+0x164>
    I2C_ITSlaveSeqCplt(hi2c);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7ff ff1e 	bl	8009710 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a1a      	ldr	r2, [pc, #104]	; (8009940 <I2C_ITSlaveCplt+0x1b0>)
 80098d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2220      	movs	r2, #32
 80098de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	4798      	blx	r3
}
 80098f2:	e01e      	b.n	8009932 <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b22      	cmp	r3, #34	; 0x22
 80098fe:	d10c      	bne.n	800991a <I2C_ITSlaveCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2220      	movs	r2, #32
 8009904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
}
 8009918:	e00b      	b.n	8009932 <I2C_ITSlaveCplt+0x1a2>
    hi2c->State = HAL_I2C_STATE_READY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2220      	movs	r2, #32
 800991e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
}
 8009932:	bf00      	nop
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	fe00e800 	.word	0xfe00e800
 8009940:	ffff0000 	.word	0xffff0000

08009944 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a26      	ldr	r2, [pc, #152]	; (80099ec <I2C_ITListenCplt+0xa8>)
 8009952:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2220      	movs	r2, #32
 800995e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	089b      	lsrs	r3, r3, #2
 8009974:	f003 0301 	and.w	r3, r3, #1
 8009978:	2b00      	cmp	r3, #0
 800997a:	d022      	beq.n	80099c2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009986:	b2d2      	uxtb	r2, r2
 8009988:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009998:	2b00      	cmp	r3, #0
 800999a:	d012      	beq.n	80099c2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a0:	3b01      	subs	r3, #1
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	3b01      	subs	r3, #1
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ba:	f043 0204 	orr.w	r2, r3, #4
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80099c2:	2107      	movs	r1, #7
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f91f 	bl	8009c08 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2210      	movs	r2, #16
 80099d0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80099e2:	bf00      	nop
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	ffff0000 	.word	0xffff0000

080099f0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a00:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a56      	ldr	r2, [pc, #344]	; (8009b68 <I2C_ITError+0x178>)
 8009a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	2b28      	cmp	r3, #40	; 0x28
 8009a26:	d005      	beq.n	8009a34 <I2C_ITError+0x44>
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	2b29      	cmp	r3, #41	; 0x29
 8009a2c:	d002      	beq.n	8009a34 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	2b2a      	cmp	r3, #42	; 0x2a
 8009a32:	d10e      	bne.n	8009a52 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009a34:	2103      	movs	r1, #3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f8e6 	bl	8009c08 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2228      	movs	r2, #40	; 0x28
 8009a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a47      	ldr	r2, [pc, #284]	; (8009b6c <I2C_ITError+0x17c>)
 8009a4e:	635a      	str	r2, [r3, #52]	; 0x34
 8009a50:	e013      	b.n	8009a7a <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009a52:	2107      	movs	r1, #7
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 f8d7 	bl	8009c08 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b60      	cmp	r3, #96	; 0x60
 8009a64:	d003      	beq.n	8009a6e <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a88:	d123      	bne.n	8009ad2 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a98:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d05e      	beq.n	8009b60 <I2C_ITError+0x170>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa6:	4a32      	ldr	r2, [pc, #200]	; (8009b70 <I2C_ITError+0x180>)
 8009aa8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7ff f8d9 	bl	8008c6e <HAL_DMA_Abort_IT>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d04e      	beq.n	8009b60 <I2C_ITError+0x170>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009acc:	4610      	mov	r0, r2
 8009ace:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009ad0:	e046      	b.n	8009b60 <I2C_ITError+0x170>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ae0:	d123      	bne.n	8009b2a <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009af0:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d032      	beq.n	8009b60 <I2C_ITError+0x170>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009afe:	4a1c      	ldr	r2, [pc, #112]	; (8009b70 <I2C_ITError+0x180>)
 8009b00:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7ff f8ad 	bl	8008c6e <HAL_DMA_Abort_IT>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d022      	beq.n	8009b60 <I2C_ITError+0x170>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009b24:	4610      	mov	r0, r2
 8009b26:	4798      	blx	r3
}
 8009b28:	e01a      	b.n	8009b60 <I2C_ITError+0x170>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b60      	cmp	r3, #96	; 0x60
 8009b34:	d10c      	bne.n	8009b50 <I2C_ITError+0x160>
    hi2c->State = HAL_I2C_STATE_READY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2220      	movs	r2, #32
 8009b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->AbortCpltCallback(hi2c);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	4798      	blx	r3
}
 8009b4e:	e007      	b.n	8009b60 <I2C_ITError+0x170>
    __HAL_UNLOCK(hi2c);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	4798      	blx	r3
}
 8009b60:	bf00      	nop
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	ffff0000 	.word	0xffff0000
 8009b6c:	08009407 	.word	0x08009407
 8009b70:	08009bbd 	.word	0x08009bbd

08009b74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	f003 0302 	and.w	r3, r3, #2
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d103      	bne.n	8009b92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d007      	beq.n	8009bb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	699a      	ldr	r2, [r3, #24]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f042 0201 	orr.w	r2, r2, #1
 8009bae:	619a      	str	r2, [r3, #24]
  }
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bce:	2200      	movs	r2, #0
 8009bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b60      	cmp	r3, #96	; 0x60
 8009be4:	d108      	bne.n	8009bf8 <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009bf6:	e003      	b.n	8009c00 <I2C_DMAAbort+0x44>
    hi2c->ErrorCallback(hi2c);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	4798      	blx	r3
}
 8009c00:	bf00      	nop
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	460b      	mov	r3, r1
 8009c12:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009c18:	887b      	ldrh	r3, [r7, #2]
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00f      	beq.n	8009c42 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009c28:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c36:	2b28      	cmp	r3, #40	; 0x28
 8009c38:	d003      	beq.n	8009c42 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009c40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009c42:	887b      	ldrh	r3, [r7, #2]
 8009c44:	f003 0302 	and.w	r3, r3, #2
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00f      	beq.n	8009c6c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009c52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c60:	2b28      	cmp	r3, #40	; 0x28
 8009c62:	d003      	beq.n	8009c6c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009c6a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009c6c:	887b      	ldrh	r3, [r7, #2]
 8009c6e:	f003 0304 	and.w	r3, r3, #4
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009c7c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8009c7e:	887b      	ldrh	r3, [r7, #2]
 8009c80:	f003 0311 	and.w	r3, r3, #17
 8009c84:	2b11      	cmp	r3, #17
 8009c86:	d103      	bne.n	8009c90 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009c8e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8009c90:	887b      	ldrh	r3, [r7, #2]
 8009c92:	f003 0312 	and.w	r3, r3, #18
 8009c96:	2b12      	cmp	r3, #18
 8009c98:	d103      	bne.n	8009ca2 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f043 0320 	orr.w	r3, r3, #32
 8009ca0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8009ca2:	887b      	ldrh	r3, [r7, #2]
 8009ca4:	f003 0312 	and.w	r3, r3, #18
 8009ca8:	2b12      	cmp	r3, #18
 8009caa:	d103      	bne.n	8009cb4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6819      	ldr	r1, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	43da      	mvns	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	400a      	ands	r2, r1
 8009cc4:	601a      	str	r2, [r3, #0]
}
 8009cc6:	bf00      	nop
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009cd2:	b590      	push	{r4, r7, lr}
 8009cd4:	b08d      	sub	sp, #52	; 0x34
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f008 fc72 	bl	80125d2 <USB_GetMode>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f040 838f 	bne.w	800a414 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f008 fbd6 	bl	80124ac <USB_ReadInterrupts>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 8385 	beq.w	800a412 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f008 fbcd 	bl	80124ac <USB_ReadInterrupts>
 8009d12:	4603      	mov	r3, r0
 8009d14:	f003 0302 	and.w	r3, r3, #2
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d107      	bne.n	8009d2c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	695a      	ldr	r2, [r3, #20]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f002 0202 	and.w	r2, r2, #2
 8009d2a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f008 fbbb 	bl	80124ac <USB_ReadInterrupts>
 8009d36:	4603      	mov	r3, r0
 8009d38:	f003 0310 	and.w	r3, r3, #16
 8009d3c:	2b10      	cmp	r3, #16
 8009d3e:	d161      	bne.n	8009e04 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	699a      	ldr	r2, [r3, #24]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f022 0210 	bic.w	r2, r2, #16
 8009d4e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	f003 020f 	and.w	r2, r3, #15
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	00db      	lsls	r3, r3, #3
 8009d60:	1a9b      	subs	r3, r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	0c5b      	lsrs	r3, r3, #17
 8009d74:	f003 030f 	and.w	r3, r3, #15
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d124      	bne.n	8009dc6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009d7c:	69ba      	ldr	r2, [r7, #24]
 8009d7e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009d82:	4013      	ands	r3, r2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d035      	beq.n	8009df4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	091b      	lsrs	r3, r3, #4
 8009d90:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009d92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	461a      	mov	r2, r3
 8009d9a:	6a38      	ldr	r0, [r7, #32]
 8009d9c:	f008 fa63 	bl	8012266 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	68da      	ldr	r2, [r3, #12]
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	091b      	lsrs	r3, r3, #4
 8009da8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009dac:	441a      	add	r2, r3
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	699a      	ldr	r2, [r3, #24]
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	091b      	lsrs	r3, r3, #4
 8009dba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009dbe:	441a      	add	r2, r3
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	619a      	str	r2, [r3, #24]
 8009dc4:	e016      	b.n	8009df4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	0c5b      	lsrs	r3, r3, #17
 8009dca:	f003 030f 	and.w	r3, r3, #15
 8009dce:	2b06      	cmp	r3, #6
 8009dd0:	d110      	bne.n	8009df4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009dd8:	2208      	movs	r2, #8
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6a38      	ldr	r0, [r7, #32]
 8009dde:	f008 fa42 	bl	8012266 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	699a      	ldr	r2, [r3, #24]
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	091b      	lsrs	r3, r3, #4
 8009dea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009dee:	441a      	add	r2, r3
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	699a      	ldr	r2, [r3, #24]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f042 0210 	orr.w	r2, r2, #16
 8009e02:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f008 fb4f 	bl	80124ac <USB_ReadInterrupts>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009e18:	d16e      	bne.n	8009ef8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f008 fb55 	bl	80124d2 <USB_ReadDevAllOutEpInterrupt>
 8009e28:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009e2a:	e062      	b.n	8009ef2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d057      	beq.n	8009ee6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3c:	b2d2      	uxtb	r2, r2
 8009e3e:	4611      	mov	r1, r2
 8009e40:	4618      	mov	r0, r3
 8009e42:	f008 fb7a 	bl	801253a <USB_ReadDevOutEPInterrupt>
 8009e46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00c      	beq.n	8009e6c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e54:	015a      	lsls	r2, r3, #5
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	4413      	add	r3, r2
 8009e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e5e:	461a      	mov	r2, r3
 8009e60:	2301      	movs	r3, #1
 8009e62:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fd20 	bl	800a8ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f003 0308 	and.w	r3, r3, #8
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00c      	beq.n	8009e90 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e82:	461a      	mov	r2, r3
 8009e84:	2308      	movs	r3, #8
 8009e86:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fd5c 	bl	800a948 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f003 0310 	and.w	r3, r3, #16
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d008      	beq.n	8009eac <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	015a      	lsls	r2, r3, #5
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	2310      	movs	r3, #16
 8009eaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f003 0320 	and.w	r3, r3, #32
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d008      	beq.n	8009ec8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	2320      	movs	r3, #32
 8009ec6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d009      	beq.n	8009ee6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ede:	461a      	mov	r2, r3
 8009ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ee4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	3301      	adds	r3, #1
 8009eea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	085b      	lsrs	r3, r3, #1
 8009ef0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d199      	bne.n	8009e2c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f008 fad5 	bl	80124ac <USB_ReadInterrupts>
 8009f02:	4603      	mov	r3, r0
 8009f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009f0c:	f040 8087 	bne.w	800a01e <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f008 faf6 	bl	8012506 <USB_ReadDevAllInEpInterrupt>
 8009f1a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009f20:	e07a      	b.n	800a018 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d06f      	beq.n	800a00c <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f32:	b2d2      	uxtb	r2, r2
 8009f34:	4611      	mov	r1, r2
 8009f36:	4618      	mov	r0, r3
 8009f38:	f008 fb1d 	bl	8012576 <USB_ReadDevInEPInterrupt>
 8009f3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d020      	beq.n	8009f8a <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	f003 030f 	and.w	r3, r3, #15
 8009f4e:	2201      	movs	r2, #1
 8009f50:	fa02 f303 	lsl.w	r3, r2, r3
 8009f54:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	43db      	mvns	r3, r3
 8009f62:	69f9      	ldr	r1, [r7, #28]
 8009f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f68:	4013      	ands	r3, r2
 8009f6a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f78:	461a      	mov	r2, r3
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7fb fde4 	bl	8005b52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	f003 0308 	and.w	r3, r3, #8
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d008      	beq.n	8009fa6 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	2308      	movs	r3, #8
 8009fa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	f003 0310 	and.w	r3, r3, #16
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d008      	beq.n	8009fc2 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	015a      	lsls	r2, r3, #5
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	2310      	movs	r3, #16
 8009fc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d008      	beq.n	8009fde <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd8:	461a      	mov	r2, r3
 8009fda:	2340      	movs	r3, #64	; 0x40
 8009fdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	f003 0302 	and.w	r3, r3, #2
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d008      	beq.n	8009ffa <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fbc7 	bl	800a79a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00e:	3301      	adds	r3, #1
 800a010:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	085b      	lsrs	r3, r3, #1
 800a016:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d181      	bne.n	8009f22 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4618      	mov	r0, r3
 800a024:	f008 fa42 	bl	80124ac <USB_ReadInterrupts>
 800a028:	4603      	mov	r3, r0
 800a02a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a02e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a032:	d122      	bne.n	800a07a <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	69fa      	ldr	r2, [r7, #28]
 800a03e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a042:	f023 0301 	bic.w	r3, r3, #1
 800a046:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d108      	bne.n	800a064 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a05a:	2100      	movs	r1, #0
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fca7 	bl	800a9b0 <HAL_PCDEx_LPM_Callback>
 800a062:	e002      	b.n	800a06a <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7fb fdbf 	bl	8005be8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	695a      	ldr	r2, [r3, #20]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a078:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4618      	mov	r0, r3
 800a080:	f008 fa14 	bl	80124ac <USB_ReadInterrupts>
 800a084:	4603      	mov	r3, r0
 800a086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a08a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a08e:	d112      	bne.n	800a0b6 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d102      	bne.n	800a0a6 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7fb fd93 	bl	8005bcc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	695a      	ldr	r2, [r3, #20]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a0b4:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f008 f9f6 	bl	80124ac <USB_ReadInterrupts>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0ca:	d121      	bne.n	800a110 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	695a      	ldr	r2, [r3, #20]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a0da:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d111      	bne.n	800a10a <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f4:	089b      	lsrs	r3, r3, #2
 800a0f6:	f003 020f 	and.w	r2, r3, #15
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a100:	2101      	movs	r1, #1
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fc54 	bl	800a9b0 <HAL_PCDEx_LPM_Callback>
 800a108:	e002      	b.n	800a110 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7fb fd5e 	bl	8005bcc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4618      	mov	r0, r3
 800a116:	f008 f9c9 	bl	80124ac <USB_ReadInterrupts>
 800a11a:	4603      	mov	r3, r0
 800a11c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a124:	f040 80c5 	bne.w	800a2b2 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	69fa      	ldr	r2, [r7, #28]
 800a132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a136:	f023 0301 	bic.w	r3, r3, #1
 800a13a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2110      	movs	r1, #16
 800a142:	4618      	mov	r0, r3
 800a144:	f007 fc98 	bl	8011a78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a148:	2300      	movs	r3, #0
 800a14a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a14c:	e056      	b.n	800a1fc <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a150:	015a      	lsls	r2, r3, #5
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	4413      	add	r3, r2
 800a156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a15a:	461a      	mov	r2, r3
 800a15c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a160:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	69fa      	ldr	r2, [r7, #28]
 800a176:	440a      	add	r2, r1
 800a178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a17c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a180:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a192:	0151      	lsls	r1, r2, #5
 800a194:	69fa      	ldr	r2, [r7, #28]
 800a196:	440a      	add	r2, r1
 800a198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a19c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a1a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b8:	015a      	lsls	r2, r3, #5
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1c6:	0151      	lsls	r1, r2, #5
 800a1c8:	69fa      	ldr	r2, [r7, #28]
 800a1ca:	440a      	add	r2, r1
 800a1cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a1d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d8:	015a      	lsls	r2, r3, #5
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	4413      	add	r3, r2
 800a1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1e6:	0151      	lsls	r1, r2, #5
 800a1e8:	69fa      	ldr	r2, [r7, #28]
 800a1ea:	440a      	add	r2, r1
 800a1ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a1f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a202:	429a      	cmp	r2, r3
 800a204:	d3a3      	bcc.n	800a14e <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	69fa      	ldr	r2, [r7, #28]
 800a210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a214:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a218:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d016      	beq.n	800a250 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a22c:	69fa      	ldr	r2, [r7, #28]
 800a22e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a232:	f043 030b 	orr.w	r3, r3, #11
 800a236:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a242:	69fa      	ldr	r2, [r7, #28]
 800a244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a248:	f043 030b 	orr.w	r3, r3, #11
 800a24c:	6453      	str	r3, [r2, #68]	; 0x44
 800a24e:	e015      	b.n	800a27c <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	69fa      	ldr	r2, [r7, #28]
 800a25a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a25e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a262:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a266:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	69fa      	ldr	r2, [r7, #28]
 800a272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a276:	f043 030b 	orr.w	r3, r3, #11
 800a27a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	69fa      	ldr	r2, [r7, #28]
 800a286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a28a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a28e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a29a:	4619      	mov	r1, r3
 800a29c:	4610      	mov	r0, r2
 800a29e:	f008 f9c9 	bl	8012634 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	695a      	ldr	r2, [r3, #20]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a2b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f008 f8f8 	bl	80124ac <USB_ReadInterrupts>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2c6:	d124      	bne.n	800a312 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f008 f98e 	bl	80125ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f007 fbf4 	bl	8011ac4 <USB_GetDevSpeed>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	461a      	mov	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681c      	ldr	r4, [r3, #0]
 800a2e8:	f001 fae8 	bl	800b8bc <HAL_RCC_GetHCLKFreq>
 800a2ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f007 fb22 	bl	8011940 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7fb fc50 	bl	8005ba2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	695a      	ldr	r2, [r3, #20]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a310:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4618      	mov	r0, r3
 800a318:	f008 f8c8 	bl	80124ac <USB_ReadInterrupts>
 800a31c:	4603      	mov	r3, r0
 800a31e:	f003 0308 	and.w	r3, r3, #8
 800a322:	2b08      	cmp	r3, #8
 800a324:	d10a      	bne.n	800a33c <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7fb fc2d 	bl	8005b86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	695a      	ldr	r2, [r3, #20]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f002 0208 	and.w	r2, r2, #8
 800a33a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4618      	mov	r0, r3
 800a342:	f008 f8b3 	bl	80124ac <USB_ReadInterrupts>
 800a346:	4603      	mov	r3, r0
 800a348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a34c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a350:	d10f      	bne.n	800a372 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a352:	2300      	movs	r3, #0
 800a354:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7fb fc63 	bl	8005c28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	695a      	ldr	r2, [r3, #20]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a370:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4618      	mov	r0, r3
 800a378:	f008 f898 	bl	80124ac <USB_ReadInterrupts>
 800a37c:	4603      	mov	r3, r0
 800a37e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a386:	d10f      	bne.n	800a3a8 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a388:	2300      	movs	r3, #0
 800a38a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	4619      	mov	r1, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7fb fc36 	bl	8005c04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	695a      	ldr	r2, [r3, #20]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a3a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f008 f87d 	bl	80124ac <USB_ReadInterrupts>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3bc:	d10a      	bne.n	800a3d4 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7fb fc44 	bl	8005c4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	695a      	ldr	r2, [r3, #20]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a3d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f008 f867 	bl	80124ac <USB_ReadInterrupts>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	f003 0304 	and.w	r3, r3, #4
 800a3e4:	2b04      	cmp	r3, #4
 800a3e6:	d115      	bne.n	800a414 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	f003 0304 	and.w	r3, r3, #4
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7fb fc34 	bl	8005c68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6859      	ldr	r1, [r3, #4]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	605a      	str	r2, [r3, #4]
 800a410:	e000      	b.n	800a414 <HAL_PCD_IRQHandler+0x742>
      return;
 800a412:	bf00      	nop
    }
  }
}
 800a414:	3734      	adds	r7, #52	; 0x34
 800a416:	46bd      	mov	sp, r7
 800a418:	bd90      	pop	{r4, r7, pc}

0800a41a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b082      	sub	sp, #8
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	460b      	mov	r3, r1
 800a424:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d101      	bne.n	800a434 <HAL_PCD_SetAddress+0x1a>
 800a430:	2302      	movs	r3, #2
 800a432:	e013      	b.n	800a45c <HAL_PCD_SetAddress+0x42>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	78fa      	ldrb	r2, [r7, #3]
 800a440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	78fa      	ldrb	r2, [r7, #3]
 800a44a:	4611      	mov	r1, r2
 800a44c:	4618      	mov	r0, r3
 800a44e:	f008 f807 	bl	8012460 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	4608      	mov	r0, r1
 800a46e:	4611      	mov	r1, r2
 800a470:	461a      	mov	r2, r3
 800a472:	4603      	mov	r3, r0
 800a474:	70fb      	strb	r3, [r7, #3]
 800a476:	460b      	mov	r3, r1
 800a478:	803b      	strh	r3, [r7, #0]
 800a47a:	4613      	mov	r3, r2
 800a47c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a486:	2b00      	cmp	r3, #0
 800a488:	da0f      	bge.n	800a4aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a48a:	78fb      	ldrb	r3, [r7, #3]
 800a48c:	f003 020f 	and.w	r2, r3, #15
 800a490:	4613      	mov	r3, r2
 800a492:	00db      	lsls	r3, r3, #3
 800a494:	1a9b      	subs	r3, r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	3338      	adds	r3, #56	; 0x38
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	4413      	add	r3, r2
 800a49e:	3304      	adds	r3, #4
 800a4a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	705a      	strb	r2, [r3, #1]
 800a4a8:	e00f      	b.n	800a4ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a4aa:	78fb      	ldrb	r3, [r7, #3]
 800a4ac:	f003 020f 	and.w	r2, r3, #15
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	00db      	lsls	r3, r3, #3
 800a4b4:	1a9b      	subs	r3, r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	4413      	add	r3, r2
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a4ca:	78fb      	ldrb	r3, [r7, #3]
 800a4cc:	f003 030f 	and.w	r3, r3, #15
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a4d6:	883a      	ldrh	r2, [r7, #0]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	78ba      	ldrb	r2, [r7, #2]
 800a4e0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	785b      	ldrb	r3, [r3, #1]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d004      	beq.n	800a4f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a4f4:	78bb      	ldrb	r3, [r7, #2]
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d102      	bne.n	800a500 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a506:	2b01      	cmp	r3, #1
 800a508:	d101      	bne.n	800a50e <HAL_PCD_EP_Open+0xaa>
 800a50a:	2302      	movs	r3, #2
 800a50c:	e00e      	b.n	800a52c <HAL_PCD_EP_Open+0xc8>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68f9      	ldr	r1, [r7, #12]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f007 faf0 	bl	8011b02 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a52a:	7afb      	ldrb	r3, [r7, #11]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	607a      	str	r2, [r7, #4]
 800a53e:	603b      	str	r3, [r7, #0]
 800a540:	460b      	mov	r3, r1
 800a542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a544:	7afb      	ldrb	r3, [r7, #11]
 800a546:	f003 020f 	and.w	r2, r3, #15
 800a54a:	4613      	mov	r3, r2
 800a54c:	00db      	lsls	r3, r3, #3
 800a54e:	1a9b      	subs	r3, r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	4413      	add	r3, r2
 800a55a:	3304      	adds	r3, #4
 800a55c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	683a      	ldr	r2, [r7, #0]
 800a568:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	2200      	movs	r2, #0
 800a56e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	2200      	movs	r2, #0
 800a574:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a576:	7afb      	ldrb	r3, [r7, #11]
 800a578:	f003 030f 	and.w	r3, r3, #15
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a582:	7afb      	ldrb	r3, [r7, #11]
 800a584:	f003 030f 	and.w	r3, r3, #15
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d106      	bne.n	800a59a <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6979      	ldr	r1, [r7, #20]
 800a592:	4618      	mov	r0, r3
 800a594:	f007 fd18 	bl	8011fc8 <USB_EP0StartXfer>
 800a598:	e005      	b.n	800a5a6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6979      	ldr	r1, [r7, #20]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f007 fb35 	bl	8011c10 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	607a      	str	r2, [r7, #4]
 800a5ba:	603b      	str	r3, [r7, #0]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5c0:	7afb      	ldrb	r3, [r7, #11]
 800a5c2:	f003 020f 	and.w	r2, r3, #15
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	00db      	lsls	r3, r3, #3
 800a5ca:	1a9b      	subs	r3, r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	3338      	adds	r3, #56	; 0x38
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5f0:	7afb      	ldrb	r3, [r7, #11]
 800a5f2:	f003 030f 	and.w	r3, r3, #15
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a5fc:	7afb      	ldrb	r3, [r7, #11]
 800a5fe:	f003 030f 	and.w	r3, r3, #15
 800a602:	2b00      	cmp	r3, #0
 800a604:	d106      	bne.n	800a614 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6979      	ldr	r1, [r7, #20]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f007 fcdb 	bl	8011fc8 <USB_EP0StartXfer>
 800a612:	e005      	b.n	800a620 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6979      	ldr	r1, [r7, #20]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f007 faf8 	bl	8011c10 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3718      	adds	r7, #24
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b084      	sub	sp, #16
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	460b      	mov	r3, r1
 800a634:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a636:	78fb      	ldrb	r3, [r7, #3]
 800a638:	f003 020f 	and.w	r2, r3, #15
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	429a      	cmp	r2, r3
 800a642:	d901      	bls.n	800a648 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e04e      	b.n	800a6e6 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	da0f      	bge.n	800a670 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a650:	78fb      	ldrb	r3, [r7, #3]
 800a652:	f003 020f 	and.w	r2, r3, #15
 800a656:	4613      	mov	r3, r2
 800a658:	00db      	lsls	r3, r3, #3
 800a65a:	1a9b      	subs	r3, r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	3338      	adds	r3, #56	; 0x38
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	4413      	add	r3, r2
 800a664:	3304      	adds	r3, #4
 800a666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2201      	movs	r2, #1
 800a66c:	705a      	strb	r2, [r3, #1]
 800a66e:	e00d      	b.n	800a68c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a670:	78fa      	ldrb	r2, [r7, #3]
 800a672:	4613      	mov	r3, r2
 800a674:	00db      	lsls	r3, r3, #3
 800a676:	1a9b      	subs	r3, r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	4413      	add	r3, r2
 800a682:	3304      	adds	r3, #4
 800a684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2201      	movs	r2, #1
 800a690:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a692:	78fb      	ldrb	r3, [r7, #3]
 800a694:	f003 030f 	and.w	r3, r3, #15
 800a698:	b2da      	uxtb	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d101      	bne.n	800a6ac <HAL_PCD_EP_SetStall+0x82>
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	e01c      	b.n	800a6e6 <HAL_PCD_EP_SetStall+0xbc>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68f9      	ldr	r1, [r7, #12]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f007 fdfc 	bl	80122b8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	f003 030f 	and.w	r3, r3, #15
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d108      	bne.n	800a6dc <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f007 ffac 	bl	8012634 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a6fa:	78fb      	ldrb	r3, [r7, #3]
 800a6fc:	f003 020f 	and.w	r2, r3, #15
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	429a      	cmp	r2, r3
 800a706:	d901      	bls.n	800a70c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e042      	b.n	800a792 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a70c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a710:	2b00      	cmp	r3, #0
 800a712:	da0f      	bge.n	800a734 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a714:	78fb      	ldrb	r3, [r7, #3]
 800a716:	f003 020f 	and.w	r2, r3, #15
 800a71a:	4613      	mov	r3, r2
 800a71c:	00db      	lsls	r3, r3, #3
 800a71e:	1a9b      	subs	r3, r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	3338      	adds	r3, #56	; 0x38
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	4413      	add	r3, r2
 800a728:	3304      	adds	r3, #4
 800a72a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2201      	movs	r2, #1
 800a730:	705a      	strb	r2, [r3, #1]
 800a732:	e00f      	b.n	800a754 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a734:	78fb      	ldrb	r3, [r7, #3]
 800a736:	f003 020f 	and.w	r2, r3, #15
 800a73a:	4613      	mov	r3, r2
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	1a9b      	subs	r3, r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	4413      	add	r3, r2
 800a74a:	3304      	adds	r3, #4
 800a74c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a75a:	78fb      	ldrb	r3, [r7, #3]
 800a75c:	f003 030f 	and.w	r3, r3, #15
 800a760:	b2da      	uxtb	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d101      	bne.n	800a774 <HAL_PCD_EP_ClrStall+0x86>
 800a770:	2302      	movs	r3, #2
 800a772:	e00e      	b.n	800a792 <HAL_PCD_EP_ClrStall+0xa4>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68f9      	ldr	r1, [r7, #12]
 800a782:	4618      	mov	r0, r3
 800a784:	f007 fe06 	bl	8012394 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b088      	sub	sp, #32
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a7ae:	683a      	ldr	r2, [r7, #0]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	00db      	lsls	r3, r3, #3
 800a7b4:	1a9b      	subs	r3, r3, r2
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	3338      	adds	r3, #56	; 0x38
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	4413      	add	r3, r2
 800a7be:	3304      	adds	r3, #4
 800a7c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	699a      	ldr	r2, [r3, #24]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	695b      	ldr	r3, [r3, #20]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d901      	bls.n	800a7d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e067      	b.n	800a8a2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	695a      	ldr	r2, [r3, #20]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	69fa      	ldr	r2, [r7, #28]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d902      	bls.n	800a7ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	3303      	adds	r3, #3
 800a7f2:	089b      	lsrs	r3, r3, #2
 800a7f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7f6:	e026      	b.n	800a846 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	695a      	ldr	r2, [r3, #20]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	699b      	ldr	r3, [r3, #24]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	69fa      	ldr	r2, [r7, #28]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d902      	bls.n	800a814 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	3303      	adds	r3, #3
 800a818:	089b      	lsrs	r3, r3, #2
 800a81a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	68d9      	ldr	r1, [r3, #12]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	b2da      	uxtb	r2, r3
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	b29b      	uxth	r3, r3
 800a828:	6978      	ldr	r0, [r7, #20]
 800a82a:	f007 fceb 	bl	8012204 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	441a      	add	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	699a      	ldr	r2, [r3, #24]
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	441a      	add	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	015a      	lsls	r2, r3, #5
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	4413      	add	r3, r2
 800a84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	b29b      	uxth	r3, r3
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d809      	bhi.n	800a870 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	699a      	ldr	r2, [r3, #24]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a864:	429a      	cmp	r2, r3
 800a866:	d203      	bcs.n	800a870 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1c3      	bne.n	800a7f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	695a      	ldr	r2, [r3, #20]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d811      	bhi.n	800a8a0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	f003 030f 	and.w	r3, r3, #15
 800a882:	2201      	movs	r2, #1
 800a884:	fa02 f303 	lsl.w	r3, r2, r3
 800a888:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	43db      	mvns	r3, r3
 800a896:	6939      	ldr	r1, [r7, #16]
 800a898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a89c:	4013      	ands	r3, r2
 800a89e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3720      	adds	r7, #32
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
	...

0800a8ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	333c      	adds	r3, #60	; 0x3c
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	015a      	lsls	r2, r3, #5
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	4a19      	ldr	r2, [pc, #100]	; (800a944 <PCD_EP_OutXfrComplete_int+0x98>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d124      	bne.n	800a92c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00a      	beq.n	800a902 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	015a      	lsls	r2, r3, #5
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8fe:	6093      	str	r3, [r2, #8]
 800a900:	e01a      	b.n	800a938 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	f003 0320 	and.w	r3, r3, #32
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d008      	beq.n	800a91e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a918:	461a      	mov	r2, r3
 800a91a:	2320      	movs	r3, #32
 800a91c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f7fb f8f9 	bl	8005b1c <HAL_PCD_DataOutStageCallback>
 800a92a:	e005      	b.n	800a938 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	4619      	mov	r1, r3
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7fb f8f2 	bl	8005b1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	4f54310a 	.word	0x4f54310a

0800a948 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	333c      	adds	r3, #60	; 0x3c
 800a960:	3304      	adds	r3, #4
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	4a0c      	ldr	r2, [pc, #48]	; (800a9ac <PCD_EP_OutSetupPacket_int+0x64>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d90e      	bls.n	800a99c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a984:	2b00      	cmp	r3, #0
 800a986:	d009      	beq.n	800a99c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a994:	461a      	mov	r2, r3
 800a996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a99a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f7fb f8ab 	bl	8005af8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3718      	adds	r7, #24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	4f54300a 	.word	0x4f54300a

0800a9b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9cc:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a04      	ldr	r2, [pc, #16]	; (800a9e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9d6:	6013      	str	r3, [r2, #0]
}
 800a9d8:	bf00      	nop
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	40007000 	.word	0x40007000

0800a9e8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800a9f0:	4b2b      	ldr	r3, [pc, #172]	; (800aaa0 <HAL_PWR_ConfigPVD+0xb8>)
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	f023 020e 	bic.w	r2, r3, #14
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4928      	ldr	r1, [pc, #160]	; (800aaa0 <HAL_PWR_ConfigPVD+0xb8>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800aa02:	4b28      	ldr	r3, [pc, #160]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	4a27      	ldr	r2, [pc, #156]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa0c:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800aa0e:	4b25      	ldr	r3, [pc, #148]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a24      	ldr	r2, [pc, #144]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa18:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800aa1a:	4b22      	ldr	r3, [pc, #136]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	4a21      	ldr	r2, [pc, #132]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa24:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800aa26:	4b1f      	ldr	r3, [pc, #124]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	4a1e      	ldr	r2, [pc, #120]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa30:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d005      	beq.n	800aa4a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800aa3e:	4b19      	ldr	r3, [pc, #100]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a18      	ldr	r2, [pc, #96]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa48:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d005      	beq.n	800aa62 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800aa56:	4b13      	ldr	r3, [pc, #76]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	4a12      	ldr	r2, [pc, #72]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa60:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f003 0301 	and.w	r3, r3, #1
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d005      	beq.n	800aa7a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800aa6e:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	4a0c      	ldr	r2, [pc, #48]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa78:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	f003 0302 	and.w	r3, r3, #2
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d005      	beq.n	800aa92 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800aa86:	4b07      	ldr	r3, [pc, #28]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	4a06      	ldr	r2, [pc, #24]	; (800aaa4 <HAL_PWR_ConfigPVD+0xbc>)
 800aa8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa90:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	40007000 	.word	0x40007000
 800aaa4:	40010400 	.word	0x40010400

0800aaa8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800aaac:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <HAL_PWR_EnablePVD+0x1c>)
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	4a04      	ldr	r2, [pc, #16]	; (800aac4 <HAL_PWR_EnablePVD+0x1c>)
 800aab2:	f043 0301 	orr.w	r3, r3, #1
 800aab6:	6053      	str	r3, [r2, #4]
}
 800aab8:	bf00      	nop
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	40007000 	.word	0x40007000

0800aac8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800aac8:	b480      	push	{r7}
 800aaca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aacc:	4b0d      	ldr	r3, [pc, #52]	; (800ab04 <HAL_PWREx_GetVoltageRange+0x3c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aad8:	d102      	bne.n	800aae0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800aada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aade:	e00b      	b.n	800aaf8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800aae0:	4b08      	ldr	r3, [pc, #32]	; (800ab04 <HAL_PWREx_GetVoltageRange+0x3c>)
 800aae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaee:	d102      	bne.n	800aaf6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800aaf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aaf4:	e000      	b.n	800aaf8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800aaf6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	40007000 	.word	0x40007000

0800ab08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d141      	bne.n	800ab9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ab16:	4b4b      	ldr	r3, [pc, #300]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab22:	d131      	bne.n	800ab88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab24:	4b47      	ldr	r3, [pc, #284]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab2a:	4a46      	ldr	r2, [pc, #280]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab34:	4b43      	ldr	r3, [pc, #268]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab3c:	4a41      	ldr	r2, [pc, #260]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800ab44:	4b40      	ldr	r3, [pc, #256]	; (800ac48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2232      	movs	r2, #50	; 0x32
 800ab4a:	fb02 f303 	mul.w	r3, r2, r3
 800ab4e:	4a3f      	ldr	r2, [pc, #252]	; (800ac4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ab50:	fba2 2303 	umull	r2, r3, r2, r3
 800ab54:	0c9b      	lsrs	r3, r3, #18
 800ab56:	3301      	adds	r3, #1
 800ab58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab5a:	e002      	b.n	800ab62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab62:	4b38      	ldr	r3, [pc, #224]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab6e:	d102      	bne.n	800ab76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1f2      	bne.n	800ab5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ab76:	4b33      	ldr	r3, [pc, #204]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab82:	d158      	bne.n	800ac36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e057      	b.n	800ac38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab88:	4b2e      	ldr	r3, [pc, #184]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab8e:	4a2d      	ldr	r2, [pc, #180]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ab98:	e04d      	b.n	800ac36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aba0:	d141      	bne.n	800ac26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aba2:	4b28      	ldr	r3, [pc, #160]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800abaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abae:	d131      	bne.n	800ac14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800abb0:	4b24      	ldr	r3, [pc, #144]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abb6:	4a23      	ldr	r2, [pc, #140]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800abc0:	4b20      	ldr	r3, [pc, #128]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800abc8:	4a1e      	ldr	r2, [pc, #120]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800abd0:	4b1d      	ldr	r3, [pc, #116]	; (800ac48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2232      	movs	r2, #50	; 0x32
 800abd6:	fb02 f303 	mul.w	r3, r2, r3
 800abda:	4a1c      	ldr	r2, [pc, #112]	; (800ac4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800abdc:	fba2 2303 	umull	r2, r3, r2, r3
 800abe0:	0c9b      	lsrs	r3, r3, #18
 800abe2:	3301      	adds	r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800abe6:	e002      	b.n	800abee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	3b01      	subs	r3, #1
 800abec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800abee:	4b15      	ldr	r3, [pc, #84]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abfa:	d102      	bne.n	800ac02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1f2      	bne.n	800abe8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ac02:	4b10      	ldr	r3, [pc, #64]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac0e:	d112      	bne.n	800ac36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ac10:	2303      	movs	r3, #3
 800ac12:	e011      	b.n	800ac38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ac14:	4b0b      	ldr	r3, [pc, #44]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac1a:	4a0a      	ldr	r2, [pc, #40]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ac24:	e007      	b.n	800ac36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ac26:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ac2e:	4a05      	ldr	r2, [pc, #20]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac34:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	40007000 	.word	0x40007000
 800ac48:	20000038 	.word	0x20000038
 800ac4c:	431bde83 	.word	0x431bde83

0800ac50 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 800ac54:	4b1c      	ldr	r3, [pc, #112]	; (800acc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d005      	beq.n	800ac6c <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800ac60:	f7f9 fdc4 	bl	80047ec <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800ac64:	4b18      	ldr	r3, [pc, #96]	; (800acc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800ac66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ac6a:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 800ac6c:	4b16      	ldr	r3, [pc, #88]	; (800acc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800ac6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac70:	f003 0308 	and.w	r3, r3, #8
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d004      	beq.n	800ac82 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800ac78:	f000 f828 	bl	800accc <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800ac7c:	4b12      	ldr	r3, [pc, #72]	; (800acc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800ac7e:	2208      	movs	r2, #8
 800ac80:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 800ac82:	4b11      	ldr	r3, [pc, #68]	; (800acc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800ac84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac86:	f003 0310 	and.w	r3, r3, #16
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d004      	beq.n	800ac98 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 800ac8e:	f000 f824 	bl	800acda <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800ac92:	4b0d      	ldr	r3, [pc, #52]	; (800acc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800ac94:	2210      	movs	r2, #16
 800ac96:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 800ac98:	4b0b      	ldr	r3, [pc, #44]	; (800acc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800ac9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac9c:	f003 0320 	and.w	r3, r3, #32
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d004      	beq.n	800acae <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800aca4:	f000 f820 	bl	800ace8 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800aca8:	4b07      	ldr	r3, [pc, #28]	; (800acc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800acaa:	2220      	movs	r2, #32
 800acac:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 800acae:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800acb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d004      	beq.n	800acc4 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 800acba:	f000 f81c 	bl	800acf6 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800acbe:	4b02      	ldr	r3, [pc, #8]	; (800acc8 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800acc0:	2240      	movs	r2, #64	; 0x40
 800acc2:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800acc4:	bf00      	nop
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	40010400 	.word	0x40010400

0800accc <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800accc:	b480      	push	{r7}
 800acce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800acd0:	bf00      	nop
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 800acda:	b480      	push	{r7}
 800acdc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 800acde:	bf00      	nop
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800ace8:	b480      	push	{r7}
 800acea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800acec:	bf00      	nop
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800acf6:	b480      	push	{r7}
 800acf8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800acfa:	bf00      	nop
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b088      	sub	sp, #32
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d102      	bne.n	800ad18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	f000 bc16 	b.w	800b544 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad18:	4ba0      	ldr	r3, [pc, #640]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f003 030c 	and.w	r3, r3, #12
 800ad20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad22:	4b9e      	ldr	r3, [pc, #632]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	f003 0303 	and.w	r3, r3, #3
 800ad2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 0310 	and.w	r3, r3, #16
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 80e4 	beq.w	800af02 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d007      	beq.n	800ad50 <HAL_RCC_OscConfig+0x4c>
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	2b0c      	cmp	r3, #12
 800ad44:	f040 808b 	bne.w	800ae5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	f040 8087 	bne.w	800ae5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ad50:	4b92      	ldr	r3, [pc, #584]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0302 	and.w	r3, r3, #2
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d005      	beq.n	800ad68 <HAL_RCC_OscConfig+0x64>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e3ed      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a1a      	ldr	r2, [r3, #32]
 800ad6c:	4b8b      	ldr	r3, [pc, #556]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 0308 	and.w	r3, r3, #8
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d004      	beq.n	800ad82 <HAL_RCC_OscConfig+0x7e>
 800ad78:	4b88      	ldr	r3, [pc, #544]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad80:	e005      	b.n	800ad8e <HAL_RCC_OscConfig+0x8a>
 800ad82:	4b86      	ldr	r3, [pc, #536]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ad84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad88:	091b      	lsrs	r3, r3, #4
 800ad8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d223      	bcs.n	800adda <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 fdc8 	bl	800b92c <RCC_SetFlashLatencyFromMSIRange>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e3ce      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ada6:	4b7d      	ldr	r3, [pc, #500]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a7c      	ldr	r2, [pc, #496]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800adac:	f043 0308 	orr.w	r3, r3, #8
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	4b7a      	ldr	r3, [pc, #488]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	4977      	ldr	r1, [pc, #476]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800adc0:	4313      	orrs	r3, r2
 800adc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800adc4:	4b75      	ldr	r3, [pc, #468]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	021b      	lsls	r3, r3, #8
 800add2:	4972      	ldr	r1, [pc, #456]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800add4:	4313      	orrs	r3, r2
 800add6:	604b      	str	r3, [r1, #4]
 800add8:	e025      	b.n	800ae26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800adda:	4b70      	ldr	r3, [pc, #448]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a6f      	ldr	r2, [pc, #444]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ade0:	f043 0308 	orr.w	r3, r3, #8
 800ade4:	6013      	str	r3, [r2, #0]
 800ade6:	4b6d      	ldr	r3, [pc, #436]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	496a      	ldr	r1, [pc, #424]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800adf4:	4313      	orrs	r3, r2
 800adf6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800adf8:	4b68      	ldr	r3, [pc, #416]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	69db      	ldr	r3, [r3, #28]
 800ae04:	021b      	lsls	r3, r3, #8
 800ae06:	4965      	ldr	r1, [pc, #404]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d109      	bne.n	800ae26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 fd88 	bl	800b92c <RCC_SetFlashLatencyFromMSIRange>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	e38e      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ae26:	f000 fcbf 	bl	800b7a8 <HAL_RCC_GetSysClockFreq>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	4b5b      	ldr	r3, [pc, #364]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	091b      	lsrs	r3, r3, #4
 800ae32:	f003 030f 	and.w	r3, r3, #15
 800ae36:	495a      	ldr	r1, [pc, #360]	; (800afa0 <HAL_RCC_OscConfig+0x29c>)
 800ae38:	5ccb      	ldrb	r3, [r1, r3]
 800ae3a:	f003 031f 	and.w	r3, r3, #31
 800ae3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae42:	4a58      	ldr	r2, [pc, #352]	; (800afa4 <HAL_RCC_OscConfig+0x2a0>)
 800ae44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ae46:	4b58      	ldr	r3, [pc, #352]	; (800afa8 <HAL_RCC_OscConfig+0x2a4>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fc f81e 	bl	8006e8c <HAL_InitTick>
 800ae50:	4603      	mov	r3, r0
 800ae52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d052      	beq.n	800af00 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
 800ae5c:	e372      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d032      	beq.n	800aecc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ae66:	4b4d      	ldr	r3, [pc, #308]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a4c      	ldr	r2, [pc, #304]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ae6c:	f043 0301 	orr.w	r3, r3, #1
 800ae70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ae72:	f7fc f857 	bl	8006f24 <HAL_GetTick>
 800ae76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ae78:	e008      	b.n	800ae8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ae7a:	f7fc f853 	bl	8006f24 <HAL_GetTick>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d901      	bls.n	800ae8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e35b      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ae8c:	4b43      	ldr	r3, [pc, #268]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0302 	and.w	r3, r3, #2
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d0f0      	beq.n	800ae7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ae98:	4b40      	ldr	r3, [pc, #256]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a3f      	ldr	r2, [pc, #252]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800ae9e:	f043 0308 	orr.w	r3, r3, #8
 800aea2:	6013      	str	r3, [r2, #0]
 800aea4:	4b3d      	ldr	r3, [pc, #244]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a1b      	ldr	r3, [r3, #32]
 800aeb0:	493a      	ldr	r1, [pc, #232]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aeb6:	4b39      	ldr	r3, [pc, #228]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	69db      	ldr	r3, [r3, #28]
 800aec2:	021b      	lsls	r3, r3, #8
 800aec4:	4935      	ldr	r1, [pc, #212]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800aec6:	4313      	orrs	r3, r2
 800aec8:	604b      	str	r3, [r1, #4]
 800aeca:	e01a      	b.n	800af02 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800aecc:	4b33      	ldr	r3, [pc, #204]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a32      	ldr	r2, [pc, #200]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800aed2:	f023 0301 	bic.w	r3, r3, #1
 800aed6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aed8:	f7fc f824 	bl	8006f24 <HAL_GetTick>
 800aedc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800aede:	e008      	b.n	800aef2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aee0:	f7fc f820 	bl	8006f24 <HAL_GetTick>
 800aee4:	4602      	mov	r2, r0
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d901      	bls.n	800aef2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e328      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800aef2:	4b2a      	ldr	r3, [pc, #168]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0302 	and.w	r3, r3, #2
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1f0      	bne.n	800aee0 <HAL_RCC_OscConfig+0x1dc>
 800aefe:	e000      	b.n	800af02 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800af00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d073      	beq.n	800aff6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	2b08      	cmp	r3, #8
 800af12:	d005      	beq.n	800af20 <HAL_RCC_OscConfig+0x21c>
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	2b0c      	cmp	r3, #12
 800af18:	d10e      	bne.n	800af38 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	d10b      	bne.n	800af38 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af20:	4b1e      	ldr	r3, [pc, #120]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d063      	beq.n	800aff4 <HAL_RCC_OscConfig+0x2f0>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d15f      	bne.n	800aff4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	e305      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af40:	d106      	bne.n	800af50 <HAL_RCC_OscConfig+0x24c>
 800af42:	4b16      	ldr	r3, [pc, #88]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a15      	ldr	r2, [pc, #84]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800af48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af4c:	6013      	str	r3, [r2, #0]
 800af4e:	e01d      	b.n	800af8c <HAL_RCC_OscConfig+0x288>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af58:	d10c      	bne.n	800af74 <HAL_RCC_OscConfig+0x270>
 800af5a:	4b10      	ldr	r3, [pc, #64]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a0f      	ldr	r2, [pc, #60]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800af60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	4b0d      	ldr	r3, [pc, #52]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a0c      	ldr	r2, [pc, #48]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800af6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af70:	6013      	str	r3, [r2, #0]
 800af72:	e00b      	b.n	800af8c <HAL_RCC_OscConfig+0x288>
 800af74:	4b09      	ldr	r3, [pc, #36]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a08      	ldr	r2, [pc, #32]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800af7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af7e:	6013      	str	r3, [r2, #0]
 800af80:	4b06      	ldr	r3, [pc, #24]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a05      	ldr	r2, [pc, #20]	; (800af9c <HAL_RCC_OscConfig+0x298>)
 800af86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d01b      	beq.n	800afcc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af94:	f7fb ffc6 	bl	8006f24 <HAL_GetTick>
 800af98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af9a:	e010      	b.n	800afbe <HAL_RCC_OscConfig+0x2ba>
 800af9c:	40021000 	.word	0x40021000
 800afa0:	080227c8 	.word	0x080227c8
 800afa4:	20000038 	.word	0x20000038
 800afa8:	20000078 	.word	0x20000078
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afac:	f7fb ffba 	bl	8006f24 <HAL_GetTick>
 800afb0:	4602      	mov	r2, r0
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	2b64      	cmp	r3, #100	; 0x64
 800afb8:	d901      	bls.n	800afbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e2c2      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800afbe:	4baf      	ldr	r3, [pc, #700]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d0f0      	beq.n	800afac <HAL_RCC_OscConfig+0x2a8>
 800afca:	e014      	b.n	800aff6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afcc:	f7fb ffaa 	bl	8006f24 <HAL_GetTick>
 800afd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800afd2:	e008      	b.n	800afe6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afd4:	f7fb ffa6 	bl	8006f24 <HAL_GetTick>
 800afd8:	4602      	mov	r2, r0
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	2b64      	cmp	r3, #100	; 0x64
 800afe0:	d901      	bls.n	800afe6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800afe2:	2303      	movs	r3, #3
 800afe4:	e2ae      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800afe6:	4ba5      	ldr	r3, [pc, #660]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1f0      	bne.n	800afd4 <HAL_RCC_OscConfig+0x2d0>
 800aff2:	e000      	b.n	800aff6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 0302 	and.w	r3, r3, #2
 800affe:	2b00      	cmp	r3, #0
 800b000:	d060      	beq.n	800b0c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	2b04      	cmp	r3, #4
 800b006:	d005      	beq.n	800b014 <HAL_RCC_OscConfig+0x310>
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	2b0c      	cmp	r3, #12
 800b00c:	d119      	bne.n	800b042 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2b02      	cmp	r3, #2
 800b012:	d116      	bne.n	800b042 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b014:	4b99      	ldr	r3, [pc, #612]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d005      	beq.n	800b02c <HAL_RCC_OscConfig+0x328>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e28b      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b02c:	4b93      	ldr	r3, [pc, #588]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	061b      	lsls	r3, r3, #24
 800b03a:	4990      	ldr	r1, [pc, #576]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b03c:	4313      	orrs	r3, r2
 800b03e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b040:	e040      	b.n	800b0c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d023      	beq.n	800b092 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b04a:	4b8c      	ldr	r3, [pc, #560]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a8b      	ldr	r2, [pc, #556]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b056:	f7fb ff65 	bl	8006f24 <HAL_GetTick>
 800b05a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b05c:	e008      	b.n	800b070 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b05e:	f7fb ff61 	bl	8006f24 <HAL_GetTick>
 800b062:	4602      	mov	r2, r0
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d901      	bls.n	800b070 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b06c:	2303      	movs	r3, #3
 800b06e:	e269      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b070:	4b82      	ldr	r3, [pc, #520]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d0f0      	beq.n	800b05e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b07c:	4b7f      	ldr	r3, [pc, #508]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	061b      	lsls	r3, r3, #24
 800b08a:	497c      	ldr	r1, [pc, #496]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b08c:	4313      	orrs	r3, r2
 800b08e:	604b      	str	r3, [r1, #4]
 800b090:	e018      	b.n	800b0c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b092:	4b7a      	ldr	r3, [pc, #488]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a79      	ldr	r2, [pc, #484]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b09c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b09e:	f7fb ff41 	bl	8006f24 <HAL_GetTick>
 800b0a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b0a4:	e008      	b.n	800b0b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0a6:	f7fb ff3d 	bl	8006f24 <HAL_GetTick>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d901      	bls.n	800b0b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	e245      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b0b8:	4b70      	ldr	r3, [pc, #448]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1f0      	bne.n	800b0a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0308 	and.w	r3, r3, #8
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d03c      	beq.n	800b14a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	695b      	ldr	r3, [r3, #20]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d01c      	beq.n	800b112 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b0d8:	4b68      	ldr	r3, [pc, #416]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b0da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0de:	4a67      	ldr	r2, [pc, #412]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b0e0:	f043 0301 	orr.w	r3, r3, #1
 800b0e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0e8:	f7fb ff1c 	bl	8006f24 <HAL_GetTick>
 800b0ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b0ee:	e008      	b.n	800b102 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0f0:	f7fb ff18 	bl	8006f24 <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	d901      	bls.n	800b102 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e220      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b102:	4b5e      	ldr	r3, [pc, #376]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b108:	f003 0302 	and.w	r3, r3, #2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d0ef      	beq.n	800b0f0 <HAL_RCC_OscConfig+0x3ec>
 800b110:	e01b      	b.n	800b14a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b112:	4b5a      	ldr	r3, [pc, #360]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b118:	4a58      	ldr	r2, [pc, #352]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b11a:	f023 0301 	bic.w	r3, r3, #1
 800b11e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b122:	f7fb feff 	bl	8006f24 <HAL_GetTick>
 800b126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b128:	e008      	b.n	800b13c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b12a:	f7fb fefb 	bl	8006f24 <HAL_GetTick>
 800b12e:	4602      	mov	r2, r0
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	2b02      	cmp	r3, #2
 800b136:	d901      	bls.n	800b13c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b138:	2303      	movs	r3, #3
 800b13a:	e203      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b13c:	4b4f      	ldr	r3, [pc, #316]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b13e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b142:	f003 0302 	and.w	r3, r3, #2
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1ef      	bne.n	800b12a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 0304 	and.w	r3, r3, #4
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 80a6 	beq.w	800b2a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b158:	2300      	movs	r3, #0
 800b15a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b15c:	4b47      	ldr	r3, [pc, #284]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b15e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10d      	bne.n	800b184 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b168:	4b44      	ldr	r3, [pc, #272]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b16a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b16c:	4a43      	ldr	r2, [pc, #268]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b16e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b172:	6593      	str	r3, [r2, #88]	; 0x58
 800b174:	4b41      	ldr	r3, [pc, #260]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b17c:	60bb      	str	r3, [r7, #8]
 800b17e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b180:	2301      	movs	r3, #1
 800b182:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b184:	4b3e      	ldr	r3, [pc, #248]	; (800b280 <HAL_RCC_OscConfig+0x57c>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d118      	bne.n	800b1c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b190:	4b3b      	ldr	r3, [pc, #236]	; (800b280 <HAL_RCC_OscConfig+0x57c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a3a      	ldr	r2, [pc, #232]	; (800b280 <HAL_RCC_OscConfig+0x57c>)
 800b196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b19a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b19c:	f7fb fec2 	bl	8006f24 <HAL_GetTick>
 800b1a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1a2:	e008      	b.n	800b1b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1a4:	f7fb febe 	bl	8006f24 <HAL_GetTick>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	1ad3      	subs	r3, r2, r3
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d901      	bls.n	800b1b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	e1c6      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1b6:	4b32      	ldr	r3, [pc, #200]	; (800b280 <HAL_RCC_OscConfig+0x57c>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d0f0      	beq.n	800b1a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d108      	bne.n	800b1dc <HAL_RCC_OscConfig+0x4d8>
 800b1ca:	4b2c      	ldr	r3, [pc, #176]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1d0:	4a2a      	ldr	r2, [pc, #168]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b1d2:	f043 0301 	orr.w	r3, r3, #1
 800b1d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1da:	e024      	b.n	800b226 <HAL_RCC_OscConfig+0x522>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	2b05      	cmp	r3, #5
 800b1e2:	d110      	bne.n	800b206 <HAL_RCC_OscConfig+0x502>
 800b1e4:	4b25      	ldr	r3, [pc, #148]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ea:	4a24      	ldr	r2, [pc, #144]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b1ec:	f043 0304 	orr.w	r3, r3, #4
 800b1f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1f4:	4b21      	ldr	r3, [pc, #132]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1fa:	4a20      	ldr	r2, [pc, #128]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b1fc:	f043 0301 	orr.w	r3, r3, #1
 800b200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b204:	e00f      	b.n	800b226 <HAL_RCC_OscConfig+0x522>
 800b206:	4b1d      	ldr	r3, [pc, #116]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b20c:	4a1b      	ldr	r2, [pc, #108]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b20e:	f023 0301 	bic.w	r3, r3, #1
 800b212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b216:	4b19      	ldr	r3, [pc, #100]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b21c:	4a17      	ldr	r2, [pc, #92]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b21e:	f023 0304 	bic.w	r3, r3, #4
 800b222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d016      	beq.n	800b25c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b22e:	f7fb fe79 	bl	8006f24 <HAL_GetTick>
 800b232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b234:	e00a      	b.n	800b24c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b236:	f7fb fe75 	bl	8006f24 <HAL_GetTick>
 800b23a:	4602      	mov	r2, r0
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	f241 3288 	movw	r2, #5000	; 0x1388
 800b244:	4293      	cmp	r3, r2
 800b246:	d901      	bls.n	800b24c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800b248:	2303      	movs	r3, #3
 800b24a:	e17b      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b24c:	4b0b      	ldr	r3, [pc, #44]	; (800b27c <HAL_RCC_OscConfig+0x578>)
 800b24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b252:	f003 0302 	and.w	r3, r3, #2
 800b256:	2b00      	cmp	r3, #0
 800b258:	d0ed      	beq.n	800b236 <HAL_RCC_OscConfig+0x532>
 800b25a:	e01a      	b.n	800b292 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b25c:	f7fb fe62 	bl	8006f24 <HAL_GetTick>
 800b260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b262:	e00f      	b.n	800b284 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b264:	f7fb fe5e 	bl	8006f24 <HAL_GetTick>
 800b268:	4602      	mov	r2, r0
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	1ad3      	subs	r3, r2, r3
 800b26e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b272:	4293      	cmp	r3, r2
 800b274:	d906      	bls.n	800b284 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b276:	2303      	movs	r3, #3
 800b278:	e164      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
 800b27a:	bf00      	nop
 800b27c:	40021000 	.word	0x40021000
 800b280:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b284:	4ba8      	ldr	r3, [pc, #672]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b28a:	f003 0302 	and.w	r3, r3, #2
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1e8      	bne.n	800b264 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b292:	7ffb      	ldrb	r3, [r7, #31]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d105      	bne.n	800b2a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b298:	4ba3      	ldr	r3, [pc, #652]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b29a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b29c:	4aa2      	ldr	r2, [pc, #648]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b29e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 0320 	and.w	r3, r3, #32
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d03c      	beq.n	800b32a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d01c      	beq.n	800b2f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b2b8:	4b9b      	ldr	r3, [pc, #620]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b2ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2be:	4a9a      	ldr	r2, [pc, #616]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b2c0:	f043 0301 	orr.w	r3, r3, #1
 800b2c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2c8:	f7fb fe2c 	bl	8006f24 <HAL_GetTick>
 800b2cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b2ce:	e008      	b.n	800b2e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2d0:	f7fb fe28 	bl	8006f24 <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d901      	bls.n	800b2e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e130      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b2e2:	4b91      	ldr	r3, [pc, #580]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b2e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2e8:	f003 0302 	and.w	r3, r3, #2
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d0ef      	beq.n	800b2d0 <HAL_RCC_OscConfig+0x5cc>
 800b2f0:	e01b      	b.n	800b32a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b2f2:	4b8d      	ldr	r3, [pc, #564]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b2f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2f8:	4a8b      	ldr	r2, [pc, #556]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b2fa:	f023 0301 	bic.w	r3, r3, #1
 800b2fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b302:	f7fb fe0f 	bl	8006f24 <HAL_GetTick>
 800b306:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b308:	e008      	b.n	800b31c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b30a:	f7fb fe0b 	bl	8006f24 <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	2b02      	cmp	r3, #2
 800b316:	d901      	bls.n	800b31c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b318:	2303      	movs	r3, #3
 800b31a:	e113      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b31c:	4b82      	ldr	r3, [pc, #520]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b31e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b322:	f003 0302 	and.w	r3, r3, #2
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1ef      	bne.n	800b30a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f000 8107 	beq.w	800b542 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b338:	2b02      	cmp	r3, #2
 800b33a:	f040 80cb 	bne.w	800b4d4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b33e:	4b7a      	ldr	r3, [pc, #488]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f003 0203 	and.w	r2, r3, #3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34e:	429a      	cmp	r2, r3
 800b350:	d12c      	bne.n	800b3ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35c:	3b01      	subs	r3, #1
 800b35e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b360:	429a      	cmp	r2, r3
 800b362:	d123      	bne.n	800b3ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b36e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b370:	429a      	cmp	r2, r3
 800b372:	d11b      	bne.n	800b3ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b380:	429a      	cmp	r2, r3
 800b382:	d113      	bne.n	800b3ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b38e:	085b      	lsrs	r3, r3, #1
 800b390:	3b01      	subs	r3, #1
 800b392:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b394:	429a      	cmp	r2, r3
 800b396:	d109      	bne.n	800b3ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a2:	085b      	lsrs	r3, r3, #1
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d06d      	beq.n	800b488 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	2b0c      	cmp	r3, #12
 800b3b0:	d068      	beq.n	800b484 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b3b2:	4b5d      	ldr	r3, [pc, #372]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d105      	bne.n	800b3ca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b3be:	4b5a      	ldr	r3, [pc, #360]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d001      	beq.n	800b3ce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e0ba      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b3ce:	4b56      	ldr	r3, [pc, #344]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a55      	ldr	r2, [pc, #340]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b3d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b3da:	f7fb fda3 	bl	8006f24 <HAL_GetTick>
 800b3de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b3e0:	e008      	b.n	800b3f4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3e2:	f7fb fd9f 	bl	8006f24 <HAL_GetTick>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d901      	bls.n	800b3f4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	e0a7      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b3f4:	4b4c      	ldr	r3, [pc, #304]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1f0      	bne.n	800b3e2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b400:	4b49      	ldr	r3, [pc, #292]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b402:	68da      	ldr	r2, [r3, #12]
 800b404:	4b49      	ldr	r3, [pc, #292]	; (800b52c <HAL_RCC_OscConfig+0x828>)
 800b406:	4013      	ands	r3, r2
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b410:	3a01      	subs	r2, #1
 800b412:	0112      	lsls	r2, r2, #4
 800b414:	4311      	orrs	r1, r2
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b41a:	0212      	lsls	r2, r2, #8
 800b41c:	4311      	orrs	r1, r2
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b422:	0852      	lsrs	r2, r2, #1
 800b424:	3a01      	subs	r2, #1
 800b426:	0552      	lsls	r2, r2, #21
 800b428:	4311      	orrs	r1, r2
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b42e:	0852      	lsrs	r2, r2, #1
 800b430:	3a01      	subs	r2, #1
 800b432:	0652      	lsls	r2, r2, #25
 800b434:	4311      	orrs	r1, r2
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b43a:	06d2      	lsls	r2, r2, #27
 800b43c:	430a      	orrs	r2, r1
 800b43e:	493a      	ldr	r1, [pc, #232]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b440:	4313      	orrs	r3, r2
 800b442:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b444:	4b38      	ldr	r3, [pc, #224]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a37      	ldr	r2, [pc, #220]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b44a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b44e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b450:	4b35      	ldr	r3, [pc, #212]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	4a34      	ldr	r2, [pc, #208]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b45a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b45c:	f7fb fd62 	bl	8006f24 <HAL_GetTick>
 800b460:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b462:	e008      	b.n	800b476 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b464:	f7fb fd5e 	bl	8006f24 <HAL_GetTick>
 800b468:	4602      	mov	r2, r0
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d901      	bls.n	800b476 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800b472:	2303      	movs	r3, #3
 800b474:	e066      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b476:	4b2c      	ldr	r3, [pc, #176]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d0f0      	beq.n	800b464 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b482:	e05e      	b.n	800b542 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	e05d      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b488:	4b27      	ldr	r3, [pc, #156]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d156      	bne.n	800b542 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b494:	4b24      	ldr	r3, [pc, #144]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a23      	ldr	r2, [pc, #140]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b49a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b49e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b4a0:	4b21      	ldr	r3, [pc, #132]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	4a20      	ldr	r2, [pc, #128]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b4a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b4ac:	f7fb fd3a 	bl	8006f24 <HAL_GetTick>
 800b4b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4b2:	e008      	b.n	800b4c6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4b4:	f7fb fd36 	bl	8006f24 <HAL_GetTick>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d901      	bls.n	800b4c6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	e03e      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4c6:	4b18      	ldr	r3, [pc, #96]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d0f0      	beq.n	800b4b4 <HAL_RCC_OscConfig+0x7b0>
 800b4d2:	e036      	b.n	800b542 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	2b0c      	cmp	r3, #12
 800b4d8:	d031      	beq.n	800b53e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4da:	4b13      	ldr	r3, [pc, #76]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a12      	ldr	r2, [pc, #72]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b4e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800b4e6:	4b10      	ldr	r3, [pc, #64]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d105      	bne.n	800b4fe <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b4f2:	4b0d      	ldr	r3, [pc, #52]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	4a0c      	ldr	r2, [pc, #48]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b4f8:	f023 0303 	bic.w	r3, r3, #3
 800b4fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b4fe:	4b0a      	ldr	r3, [pc, #40]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	4a09      	ldr	r2, [pc, #36]	; (800b528 <HAL_RCC_OscConfig+0x824>)
 800b504:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b50c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b50e:	f7fb fd09 	bl	8006f24 <HAL_GetTick>
 800b512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b514:	e00c      	b.n	800b530 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b516:	f7fb fd05 	bl	8006f24 <HAL_GetTick>
 800b51a:	4602      	mov	r2, r0
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	2b02      	cmp	r3, #2
 800b522:	d905      	bls.n	800b530 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800b524:	2303      	movs	r3, #3
 800b526:	e00d      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
 800b528:	40021000 	.word	0x40021000
 800b52c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b530:	4b06      	ldr	r3, [pc, #24]	; (800b54c <HAL_RCC_OscConfig+0x848>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1ec      	bne.n	800b516 <HAL_RCC_OscConfig+0x812>
 800b53c:	e001      	b.n	800b542 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	e000      	b.n	800b544 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3720      	adds	r7, #32
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	40021000 	.word	0x40021000

0800b550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b55a:	2300      	movs	r3, #0
 800b55c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	e10f      	b.n	800b788 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b568:	4b89      	ldr	r3, [pc, #548]	; (800b790 <HAL_RCC_ClockConfig+0x240>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 030f 	and.w	r3, r3, #15
 800b570:	683a      	ldr	r2, [r7, #0]
 800b572:	429a      	cmp	r2, r3
 800b574:	d910      	bls.n	800b598 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b576:	4b86      	ldr	r3, [pc, #536]	; (800b790 <HAL_RCC_ClockConfig+0x240>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f023 020f 	bic.w	r2, r3, #15
 800b57e:	4984      	ldr	r1, [pc, #528]	; (800b790 <HAL_RCC_ClockConfig+0x240>)
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	4313      	orrs	r3, r2
 800b584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b586:	4b82      	ldr	r3, [pc, #520]	; (800b790 <HAL_RCC_ClockConfig+0x240>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f003 030f 	and.w	r3, r3, #15
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	429a      	cmp	r2, r3
 800b592:	d001      	beq.n	800b598 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	e0f7      	b.n	800b788 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f003 0301 	and.w	r3, r3, #1
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 8089 	beq.w	800b6b8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d133      	bne.n	800b616 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b5ae:	4b79      	ldr	r3, [pc, #484]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d101      	bne.n	800b5be <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e0e4      	b.n	800b788 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800b5be:	f000 fa0f 	bl	800b9e0 <RCC_GetSysClockFreqFromPLLSource>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	4a74      	ldr	r2, [pc, #464]	; (800b798 <HAL_RCC_ClockConfig+0x248>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d955      	bls.n	800b676 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800b5ca:	4b72      	ldr	r3, [pc, #456]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b5cc:	689b      	ldr	r3, [r3, #8]
 800b5ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10a      	bne.n	800b5ec <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b5d6:	4b6f      	ldr	r3, [pc, #444]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5de:	4a6d      	ldr	r2, [pc, #436]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b5e6:	2380      	movs	r3, #128	; 0x80
 800b5e8:	617b      	str	r3, [r7, #20]
 800b5ea:	e044      	b.n	800b676 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 0302 	and.w	r3, r3, #2
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d03e      	beq.n	800b676 <HAL_RCC_ClockConfig+0x126>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d13a      	bne.n	800b676 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b600:	4b64      	ldr	r3, [pc, #400]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b608:	4a62      	ldr	r2, [pc, #392]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b60a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b60e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b610:	2380      	movs	r3, #128	; 0x80
 800b612:	617b      	str	r3, [r7, #20]
 800b614:	e02f      	b.n	800b676 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d107      	bne.n	800b62e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b61e:	4b5d      	ldr	r3, [pc, #372]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d115      	bne.n	800b656 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e0ac      	b.n	800b788 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d107      	bne.n	800b646 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b636:	4b57      	ldr	r3, [pc, #348]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 0302 	and.w	r3, r3, #2
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d109      	bne.n	800b656 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	e0a0      	b.n	800b788 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b646:	4b53      	ldr	r3, [pc, #332]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d101      	bne.n	800b656 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	e098      	b.n	800b788 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800b656:	f000 f8a7 	bl	800b7a8 <HAL_RCC_GetSysClockFreq>
 800b65a:	4603      	mov	r3, r0
 800b65c:	4a4e      	ldr	r2, [pc, #312]	; (800b798 <HAL_RCC_ClockConfig+0x248>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d909      	bls.n	800b676 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b662:	4b4c      	ldr	r3, [pc, #304]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b66a:	4a4a      	ldr	r2, [pc, #296]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b66c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b670:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b672:	2380      	movs	r3, #128	; 0x80
 800b674:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b676:	4b47      	ldr	r3, [pc, #284]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	f023 0203 	bic.w	r2, r3, #3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	4944      	ldr	r1, [pc, #272]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b684:	4313      	orrs	r3, r2
 800b686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b688:	f7fb fc4c 	bl	8006f24 <HAL_GetTick>
 800b68c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b68e:	e00a      	b.n	800b6a6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b690:	f7fb fc48 	bl	8006f24 <HAL_GetTick>
 800b694:	4602      	mov	r2, r0
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d901      	bls.n	800b6a6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	e070      	b.n	800b788 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6a6:	4b3b      	ldr	r3, [pc, #236]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	f003 020c 	and.w	r2, r3, #12
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d1eb      	bne.n	800b690 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d009      	beq.n	800b6d8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6c4:	4b33      	ldr	r3, [pc, #204]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	4930      	ldr	r1, [pc, #192]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	608b      	str	r3, [r1, #8]
 800b6d6:	e008      	b.n	800b6ea <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2b80      	cmp	r3, #128	; 0x80
 800b6dc:	d105      	bne.n	800b6ea <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b6de:	4b2d      	ldr	r3, [pc, #180]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	4a2c      	ldr	r2, [pc, #176]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b6e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6e8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b6ea:	4b29      	ldr	r3, [pc, #164]	; (800b790 <HAL_RCC_ClockConfig+0x240>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 030f 	and.w	r3, r3, #15
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d210      	bcs.n	800b71a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6f8:	4b25      	ldr	r3, [pc, #148]	; (800b790 <HAL_RCC_ClockConfig+0x240>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f023 020f 	bic.w	r2, r3, #15
 800b700:	4923      	ldr	r1, [pc, #140]	; (800b790 <HAL_RCC_ClockConfig+0x240>)
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	4313      	orrs	r3, r2
 800b706:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b708:	4b21      	ldr	r3, [pc, #132]	; (800b790 <HAL_RCC_ClockConfig+0x240>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 030f 	and.w	r3, r3, #15
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	429a      	cmp	r2, r3
 800b714:	d001      	beq.n	800b71a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	e036      	b.n	800b788 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f003 0304 	and.w	r3, r3, #4
 800b722:	2b00      	cmp	r3, #0
 800b724:	d008      	beq.n	800b738 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b726:	4b1b      	ldr	r3, [pc, #108]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	4918      	ldr	r1, [pc, #96]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b734:	4313      	orrs	r3, r2
 800b736:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f003 0308 	and.w	r3, r3, #8
 800b740:	2b00      	cmp	r3, #0
 800b742:	d009      	beq.n	800b758 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b744:	4b13      	ldr	r3, [pc, #76]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	00db      	lsls	r3, r3, #3
 800b752:	4910      	ldr	r1, [pc, #64]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b754:	4313      	orrs	r3, r2
 800b756:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b758:	f000 f826 	bl	800b7a8 <HAL_RCC_GetSysClockFreq>
 800b75c:	4602      	mov	r2, r0
 800b75e:	4b0d      	ldr	r3, [pc, #52]	; (800b794 <HAL_RCC_ClockConfig+0x244>)
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	091b      	lsrs	r3, r3, #4
 800b764:	f003 030f 	and.w	r3, r3, #15
 800b768:	490c      	ldr	r1, [pc, #48]	; (800b79c <HAL_RCC_ClockConfig+0x24c>)
 800b76a:	5ccb      	ldrb	r3, [r1, r3]
 800b76c:	f003 031f 	and.w	r3, r3, #31
 800b770:	fa22 f303 	lsr.w	r3, r2, r3
 800b774:	4a0a      	ldr	r2, [pc, #40]	; (800b7a0 <HAL_RCC_ClockConfig+0x250>)
 800b776:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b778:	4b0a      	ldr	r3, [pc, #40]	; (800b7a4 <HAL_RCC_ClockConfig+0x254>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7fb fb85 	bl	8006e8c <HAL_InitTick>
 800b782:	4603      	mov	r3, r0
 800b784:	73fb      	strb	r3, [r7, #15]

  return status;
 800b786:	7bfb      	ldrb	r3, [r7, #15]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3718      	adds	r7, #24
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	40022000 	.word	0x40022000
 800b794:	40021000 	.word	0x40021000
 800b798:	04c4b400 	.word	0x04c4b400
 800b79c:	080227c8 	.word	0x080227c8
 800b7a0:	20000038 	.word	0x20000038
 800b7a4:	20000078 	.word	0x20000078

0800b7a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b089      	sub	sp, #36	; 0x24
 800b7ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	61fb      	str	r3, [r7, #28]
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7b6:	4b3e      	ldr	r3, [pc, #248]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	f003 030c 	and.w	r3, r3, #12
 800b7be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b7c0:	4b3b      	ldr	r3, [pc, #236]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	f003 0303 	and.w	r3, r3, #3
 800b7c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d005      	beq.n	800b7dc <HAL_RCC_GetSysClockFreq+0x34>
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	2b0c      	cmp	r3, #12
 800b7d4:	d121      	bne.n	800b81a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d11e      	bne.n	800b81a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b7dc:	4b34      	ldr	r3, [pc, #208]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0308 	and.w	r3, r3, #8
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d107      	bne.n	800b7f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b7e8:	4b31      	ldr	r3, [pc, #196]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7ee:	0a1b      	lsrs	r3, r3, #8
 800b7f0:	f003 030f 	and.w	r3, r3, #15
 800b7f4:	61fb      	str	r3, [r7, #28]
 800b7f6:	e005      	b.n	800b804 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b7f8:	4b2d      	ldr	r3, [pc, #180]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	091b      	lsrs	r3, r3, #4
 800b7fe:	f003 030f 	and.w	r3, r3, #15
 800b802:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b804:	4a2b      	ldr	r2, [pc, #172]	; (800b8b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b80c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10d      	bne.n	800b830 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b818:	e00a      	b.n	800b830 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d102      	bne.n	800b826 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b820:	4b25      	ldr	r3, [pc, #148]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800b822:	61bb      	str	r3, [r7, #24]
 800b824:	e004      	b.n	800b830 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b08      	cmp	r3, #8
 800b82a:	d101      	bne.n	800b830 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b82c:	4b22      	ldr	r3, [pc, #136]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800b82e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	2b0c      	cmp	r3, #12
 800b834:	d134      	bne.n	800b8a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b836:	4b1e      	ldr	r3, [pc, #120]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	f003 0303 	and.w	r3, r3, #3
 800b83e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b02      	cmp	r3, #2
 800b844:	d003      	beq.n	800b84e <HAL_RCC_GetSysClockFreq+0xa6>
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d003      	beq.n	800b854 <HAL_RCC_GetSysClockFreq+0xac>
 800b84c:	e005      	b.n	800b85a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b84e:	4b1a      	ldr	r3, [pc, #104]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800b850:	617b      	str	r3, [r7, #20]
      break;
 800b852:	e005      	b.n	800b860 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b854:	4b18      	ldr	r3, [pc, #96]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800b856:	617b      	str	r3, [r7, #20]
      break;
 800b858:	e002      	b.n	800b860 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	617b      	str	r3, [r7, #20]
      break;
 800b85e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b860:	4b13      	ldr	r3, [pc, #76]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	091b      	lsrs	r3, r3, #4
 800b866:	f003 030f 	and.w	r3, r3, #15
 800b86a:	3301      	adds	r3, #1
 800b86c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b86e:	4b10      	ldr	r3, [pc, #64]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	0a1b      	lsrs	r3, r3, #8
 800b874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	fb02 f203 	mul.w	r2, r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	fbb2 f3f3 	udiv	r3, r2, r3
 800b884:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b886:	4b0a      	ldr	r3, [pc, #40]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x108>)
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	0e5b      	lsrs	r3, r3, #25
 800b88c:	f003 0303 	and.w	r3, r3, #3
 800b890:	3301      	adds	r3, #1
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b896:	697a      	ldr	r2, [r7, #20]
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b89e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b8a0:	69bb      	ldr	r3, [r7, #24]
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3724      	adds	r7, #36	; 0x24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	40021000 	.word	0x40021000
 800b8b4:	080227e0 	.word	0x080227e0
 800b8b8:	00f42400 	.word	0x00f42400

0800b8bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8c0:	4b03      	ldr	r3, [pc, #12]	; (800b8d0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	20000038 	.word	0x20000038

0800b8d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b8d8:	f7ff fff0 	bl	800b8bc <HAL_RCC_GetHCLKFreq>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	0a1b      	lsrs	r3, r3, #8
 800b8e4:	f003 0307 	and.w	r3, r3, #7
 800b8e8:	4904      	ldr	r1, [pc, #16]	; (800b8fc <HAL_RCC_GetPCLK1Freq+0x28>)
 800b8ea:	5ccb      	ldrb	r3, [r1, r3]
 800b8ec:	f003 031f 	and.w	r3, r3, #31
 800b8f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	40021000 	.word	0x40021000
 800b8fc:	080227d8 	.word	0x080227d8

0800b900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b904:	f7ff ffda 	bl	800b8bc <HAL_RCC_GetHCLKFreq>
 800b908:	4602      	mov	r2, r0
 800b90a:	4b06      	ldr	r3, [pc, #24]	; (800b924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	0adb      	lsrs	r3, r3, #11
 800b910:	f003 0307 	and.w	r3, r3, #7
 800b914:	4904      	ldr	r1, [pc, #16]	; (800b928 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b916:	5ccb      	ldrb	r3, [r1, r3]
 800b918:	f003 031f 	and.w	r3, r3, #31
 800b91c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b920:	4618      	mov	r0, r3
 800b922:	bd80      	pop	{r7, pc}
 800b924:	40021000 	.word	0x40021000
 800b928:	080227d8 	.word	0x080227d8

0800b92c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b934:	2300      	movs	r3, #0
 800b936:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b938:	4b27      	ldr	r3, [pc, #156]	; (800b9d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b93a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b93c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d003      	beq.n	800b94c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b944:	f7ff f8c0 	bl	800aac8 <HAL_PWREx_GetVoltageRange>
 800b948:	6178      	str	r0, [r7, #20]
 800b94a:	e014      	b.n	800b976 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b94c:	4b22      	ldr	r3, [pc, #136]	; (800b9d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b950:	4a21      	ldr	r2, [pc, #132]	; (800b9d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b956:	6593      	str	r3, [r2, #88]	; 0x58
 800b958:	4b1f      	ldr	r3, [pc, #124]	; (800b9d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b95a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b95c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b960:	60fb      	str	r3, [r7, #12]
 800b962:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b964:	f7ff f8b0 	bl	800aac8 <HAL_PWREx_GetVoltageRange>
 800b968:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b96a:	4b1b      	ldr	r3, [pc, #108]	; (800b9d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b96e:	4a1a      	ldr	r2, [pc, #104]	; (800b9d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b974:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b97c:	d10b      	bne.n	800b996 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2b80      	cmp	r3, #128	; 0x80
 800b982:	d913      	bls.n	800b9ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2ba0      	cmp	r3, #160	; 0xa0
 800b988:	d902      	bls.n	800b990 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b98a:	2302      	movs	r3, #2
 800b98c:	613b      	str	r3, [r7, #16]
 800b98e:	e00d      	b.n	800b9ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b990:	2301      	movs	r3, #1
 800b992:	613b      	str	r3, [r7, #16]
 800b994:	e00a      	b.n	800b9ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b7f      	cmp	r3, #127	; 0x7f
 800b99a:	d902      	bls.n	800b9a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800b99c:	2302      	movs	r3, #2
 800b99e:	613b      	str	r3, [r7, #16]
 800b9a0:	e004      	b.n	800b9ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b70      	cmp	r3, #112	; 0x70
 800b9a6:	d101      	bne.n	800b9ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b9ac:	4b0b      	ldr	r3, [pc, #44]	; (800b9dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f023 020f 	bic.w	r2, r3, #15
 800b9b4:	4909      	ldr	r1, [pc, #36]	; (800b9dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b9bc:	4b07      	ldr	r3, [pc, #28]	; (800b9dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 030f 	and.w	r3, r3, #15
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d001      	beq.n	800b9ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e000      	b.n	800b9d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3718      	adds	r7, #24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	40021000 	.word	0x40021000
 800b9dc:	40022000 	.word	0x40022000

0800b9e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b087      	sub	sp, #28
 800b9e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800b9ea:	4b2d      	ldr	r3, [pc, #180]	; (800baa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	f003 0303 	and.w	r3, r3, #3
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d118      	bne.n	800ba28 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b9f6:	4b2a      	ldr	r3, [pc, #168]	; (800baa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f003 0308 	and.w	r3, r3, #8
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d107      	bne.n	800ba12 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ba02:	4b27      	ldr	r3, [pc, #156]	; (800baa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ba04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba08:	0a1b      	lsrs	r3, r3, #8
 800ba0a:	f003 030f 	and.w	r3, r3, #15
 800ba0e:	617b      	str	r3, [r7, #20]
 800ba10:	e005      	b.n	800ba1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ba12:	4b23      	ldr	r3, [pc, #140]	; (800baa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	091b      	lsrs	r3, r3, #4
 800ba18:	f003 030f 	and.w	r3, r3, #15
 800ba1c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ba1e:	4a21      	ldr	r2, [pc, #132]	; (800baa4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba26:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ba28:	4b1d      	ldr	r3, [pc, #116]	; (800baa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	f003 0303 	and.w	r3, r3, #3
 800ba30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d003      	beq.n	800ba40 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	d003      	beq.n	800ba46 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800ba3e:	e005      	b.n	800ba4c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800ba40:	4b19      	ldr	r3, [pc, #100]	; (800baa8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800ba42:	613b      	str	r3, [r7, #16]
    break;
 800ba44:	e005      	b.n	800ba52 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800ba46:	4b18      	ldr	r3, [pc, #96]	; (800baa8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800ba48:	613b      	str	r3, [r7, #16]
    break;
 800ba4a:	e002      	b.n	800ba52 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	613b      	str	r3, [r7, #16]
    break;
 800ba50:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ba52:	4b13      	ldr	r3, [pc, #76]	; (800baa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	091b      	lsrs	r3, r3, #4
 800ba58:	f003 030f 	and.w	r3, r3, #15
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ba60:	4b0f      	ldr	r3, [pc, #60]	; (800baa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	0a1b      	lsrs	r3, r3, #8
 800ba66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	fb02 f203 	mul.w	r2, r2, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba76:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ba78:	4b09      	ldr	r3, [pc, #36]	; (800baa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	0e5b      	lsrs	r3, r3, #25
 800ba7e:	f003 0303 	and.w	r3, r3, #3
 800ba82:	3301      	adds	r3, #1
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800ba88:	693a      	ldr	r2, [r7, #16]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba90:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800ba92:	683b      	ldr	r3, [r7, #0]
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	371c      	adds	r7, #28
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	40021000 	.word	0x40021000
 800baa4:	080227e0 	.word	0x080227e0
 800baa8:	00f42400 	.word	0x00f42400

0800baac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bab4:	2300      	movs	r3, #0
 800bab6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bab8:	2300      	movs	r3, #0
 800baba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d040      	beq.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bacc:	2b80      	cmp	r3, #128	; 0x80
 800bace:	d02a      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bad0:	2b80      	cmp	r3, #128	; 0x80
 800bad2:	d825      	bhi.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800bad4:	2b60      	cmp	r3, #96	; 0x60
 800bad6:	d026      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bad8:	2b60      	cmp	r3, #96	; 0x60
 800bada:	d821      	bhi.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800badc:	2b40      	cmp	r3, #64	; 0x40
 800bade:	d006      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x42>
 800bae0:	2b40      	cmp	r3, #64	; 0x40
 800bae2:	d81d      	bhi.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d009      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x50>
 800bae8:	2b20      	cmp	r3, #32
 800baea:	d010      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800baec:	e018      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800baee:	4b89      	ldr	r3, [pc, #548]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	4a88      	ldr	r2, [pc, #544]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800baf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800baf8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bafa:	e015      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	3304      	adds	r3, #4
 800bb00:	2100      	movs	r1, #0
 800bb02:	4618      	mov	r0, r3
 800bb04:	f000 fb62 	bl	800c1cc <RCCEx_PLLSAI1_Config>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bb0c:	e00c      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	3320      	adds	r3, #32
 800bb12:	2100      	movs	r1, #0
 800bb14:	4618      	mov	r0, r3
 800bb16:	f000 fc4d 	bl	800c3b4 <RCCEx_PLLSAI2_Config>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bb1e:	e003      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	74fb      	strb	r3, [r7, #19]
      break;
 800bb24:	e000      	b.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800bb26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb28:	7cfb      	ldrb	r3, [r7, #19]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10b      	bne.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bb2e:	4b79      	ldr	r3, [pc, #484]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb34:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb3c:	4975      	ldr	r1, [pc, #468]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800bb44:	e001      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb46:	7cfb      	ldrb	r3, [r7, #19]
 800bb48:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d047      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb5e:	d030      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800bb60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb64:	d82a      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800bb66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb6a:	d02a      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800bb6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb70:	d824      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800bb72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb76:	d008      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800bb78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb7c:	d81e      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00a      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800bb82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb86:	d010      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800bb88:	e018      	b.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bb8a:	4b62      	ldr	r3, [pc, #392]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	4a61      	ldr	r2, [pc, #388]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb94:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bb96:	e015      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 fb14 	bl	800c1cc <RCCEx_PLLSAI1_Config>
 800bba4:	4603      	mov	r3, r0
 800bba6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bba8:	e00c      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	3320      	adds	r3, #32
 800bbae:	2100      	movs	r1, #0
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 fbff 	bl	800c3b4 <RCCEx_PLLSAI2_Config>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800bbba:	e003      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	74fb      	strb	r3, [r7, #19]
      break;
 800bbc0:	e000      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800bbc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbc4:	7cfb      	ldrb	r3, [r7, #19]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10b      	bne.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bbca:	4b52      	ldr	r3, [pc, #328]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bbcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bbd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbd8:	494e      	ldr	r1, [pc, #312]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800bbe0:	e001      	b.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe2:	7cfb      	ldrb	r3, [r7, #19]
 800bbe4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f000 809f 	beq.w	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800bbf8:	4b46      	ldr	r3, [pc, #280]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bbfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d101      	bne.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800bc04:	2301      	movs	r3, #1
 800bc06:	e000      	b.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00d      	beq.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc0e:	4b41      	ldr	r3, [pc, #260]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc12:	4a40      	ldr	r2, [pc, #256]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc18:	6593      	str	r3, [r2, #88]	; 0x58
 800bc1a:	4b3e      	ldr	r3, [pc, #248]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc22:	60bb      	str	r3, [r7, #8]
 800bc24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc26:	2301      	movs	r3, #1
 800bc28:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc2a:	4b3b      	ldr	r3, [pc, #236]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a3a      	ldr	r2, [pc, #232]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800bc30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc36:	f7fb f975 	bl	8006f24 <HAL_GetTick>
 800bc3a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bc3c:	e009      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc3e:	f7fb f971 	bl	8006f24 <HAL_GetTick>
 800bc42:	4602      	mov	r2, r0
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d902      	bls.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	74fb      	strb	r3, [r7, #19]
        break;
 800bc50:	e005      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800bc52:	4b31      	ldr	r3, [pc, #196]	; (800bd18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0ef      	beq.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800bc5e:	7cfb      	ldrb	r3, [r7, #19]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d15b      	bne.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bc64:	4b2b      	ldr	r3, [pc, #172]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc6e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d01f      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc7c:	697a      	ldr	r2, [r7, #20]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d019      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bc82:	4b24      	ldr	r3, [pc, #144]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc8e:	4b21      	ldr	r3, [pc, #132]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc94:	4a1f      	ldr	r2, [pc, #124]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bc96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc9e:	4b1d      	ldr	r3, [pc, #116]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bca4:	4a1b      	ldr	r2, [pc, #108]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bcae:	4a19      	ldr	r2, [pc, #100]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d016      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcc0:	f7fb f930 	bl	8006f24 <HAL_GetTick>
 800bcc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcc6:	e00b      	b.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcc8:	f7fb f92c 	bl	8006f24 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d902      	bls.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	74fb      	strb	r3, [r7, #19]
            break;
 800bcde:	e006      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bce0:	4b0c      	ldr	r3, [pc, #48]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bce6:	f003 0302 	and.w	r3, r3, #2
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0ec      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800bcee:	7cfb      	ldrb	r3, [r7, #19]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10c      	bne.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcf4:	4b07      	ldr	r3, [pc, #28]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bcf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd04:	4903      	ldr	r1, [pc, #12]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bd0c:	e008      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd0e:	7cfb      	ldrb	r3, [r7, #19]
 800bd10:	74bb      	strb	r3, [r7, #18]
 800bd12:	e005      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800bd14:	40021000 	.word	0x40021000
 800bd18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd1c:	7cfb      	ldrb	r3, [r7, #19]
 800bd1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd20:	7c7b      	ldrb	r3, [r7, #17]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d105      	bne.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd26:	4ba0      	ldr	r3, [pc, #640]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd2a:	4a9f      	ldr	r2, [pc, #636]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00a      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd3e:	4b9a      	ldr	r3, [pc, #616]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd44:	f023 0203 	bic.w	r2, r3, #3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd4c:	4996      	ldr	r1, [pc, #600]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 0302 	and.w	r3, r3, #2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00a      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bd60:	4b91      	ldr	r3, [pc, #580]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd66:	f023 020c 	bic.w	r2, r3, #12
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6e:	498e      	ldr	r1, [pc, #568]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd70:	4313      	orrs	r3, r2
 800bd72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 0304 	and.w	r3, r3, #4
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00a      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bd82:	4b89      	ldr	r3, [pc, #548]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd90:	4985      	ldr	r1, [pc, #532]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0308 	and.w	r3, r3, #8
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00a      	beq.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bda4:	4b80      	ldr	r3, [pc, #512]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bda6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdb2:	497d      	ldr	r1, [pc, #500]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 0310 	and.w	r3, r3, #16
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00a      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bdc6:	4b78      	ldr	r3, [pc, #480]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdd4:	4974      	ldr	r1, [pc, #464]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 0320 	and.w	r3, r3, #32
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00a      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bde8:	4b6f      	ldr	r3, [pc, #444]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdf6:	496c      	ldr	r1, [pc, #432]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be0a:	4b67      	ldr	r3, [pc, #412]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be18:	4963      	ldr	r1, [pc, #396]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be1a:	4313      	orrs	r3, r2
 800be1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00a      	beq.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800be2c:	4b5e      	ldr	r3, [pc, #376]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be3a:	495b      	ldr	r1, [pc, #364]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be3c:	4313      	orrs	r3, r2
 800be3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00a      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800be4e:	4b56      	ldr	r3, [pc, #344]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5c:	4952      	ldr	r1, [pc, #328]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be5e:	4313      	orrs	r3, r2
 800be60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00a      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800be70:	4b4d      	ldr	r3, [pc, #308]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be7e:	494a      	ldr	r1, [pc, #296]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be80:	4313      	orrs	r3, r2
 800be82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00a      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be92:	4b45      	ldr	r3, [pc, #276]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bea0:	4941      	ldr	r1, [pc, #260]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bea2:	4313      	orrs	r3, r2
 800bea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00a      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800beb4:	4b3c      	ldr	r3, [pc, #240]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800beb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800beba:	f023 0203 	bic.w	r2, r3, #3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bec2:	4939      	ldr	r1, [pc, #228]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bec4:	4313      	orrs	r3, r2
 800bec6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d028      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bed6:	4b34      	ldr	r3, [pc, #208]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bedc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bee4:	4930      	ldr	r1, [pc, #192]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bee6:	4313      	orrs	r3, r2
 800bee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bef4:	d106      	bne.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bef6:	4b2c      	ldr	r3, [pc, #176]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	4a2b      	ldr	r2, [pc, #172]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800befc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf00:	60d3      	str	r3, [r2, #12]
 800bf02:	e011      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf0c:	d10c      	bne.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3304      	adds	r3, #4
 800bf12:	2101      	movs	r1, #1
 800bf14:	4618      	mov	r0, r3
 800bf16:	f000 f959 	bl	800c1cc <RCCEx_PLLSAI1_Config>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800bf1e:	7cfb      	ldrb	r3, [r7, #19]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d001      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800bf24:	7cfb      	ldrb	r3, [r7, #19]
 800bf26:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d04d      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf3c:	d108      	bne.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800bf3e:	4b1a      	ldr	r3, [pc, #104]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf44:	4a18      	ldr	r2, [pc, #96]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800bf4e:	e012      	b.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800bf50:	4b15      	ldr	r3, [pc, #84]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf56:	4a14      	ldr	r2, [pc, #80]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800bf60:	4b11      	ldr	r3, [pc, #68]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf6e:	490e      	ldr	r1, [pc, #56]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf70:	4313      	orrs	r3, r2
 800bf72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf7e:	d106      	bne.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf80:	4b09      	ldr	r3, [pc, #36]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	4a08      	ldr	r2, [pc, #32]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf8a:	60d3      	str	r3, [r2, #12]
 800bf8c:	e020      	b.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf96:	d109      	bne.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bf98:	4b03      	ldr	r3, [pc, #12]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	4a02      	ldr	r2, [pc, #8]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bf9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfa2:	60d3      	str	r3, [r2, #12]
 800bfa4:	e014      	b.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800bfa6:	bf00      	nop
 800bfa8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bfb4:	d10c      	bne.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3304      	adds	r3, #4
 800bfba:	2101      	movs	r1, #1
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 f905 	bl	800c1cc <RCCEx_PLLSAI1_Config>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bfc6:	7cfb      	ldrb	r3, [r7, #19]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800bfcc:	7cfb      	ldrb	r3, [r7, #19]
 800bfce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d028      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bfdc:	4b7a      	ldr	r3, [pc, #488]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bfde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfea:	4977      	ldr	r1, [pc, #476]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bfec:	4313      	orrs	r3, r2
 800bfee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bffa:	d106      	bne.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bffc:	4b72      	ldr	r3, [pc, #456]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	4a71      	ldr	r2, [pc, #452]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c006:	60d3      	str	r3, [r2, #12]
 800c008:	e011      	b.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c00e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c012:	d10c      	bne.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	3304      	adds	r3, #4
 800c018:	2101      	movs	r1, #1
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 f8d6 	bl	800c1cc <RCCEx_PLLSAI1_Config>
 800c020:	4603      	mov	r3, r0
 800c022:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c024:	7cfb      	ldrb	r3, [r7, #19]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800c02a:	7cfb      	ldrb	r3, [r7, #19]
 800c02c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c036:	2b00      	cmp	r3, #0
 800c038:	d01e      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c03a:	4b63      	ldr	r3, [pc, #396]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c040:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c04a:	495f      	ldr	r1, [pc, #380]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c04c:	4313      	orrs	r3, r2
 800c04e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c05c:	d10c      	bne.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	3304      	adds	r3, #4
 800c062:	2102      	movs	r1, #2
 800c064:	4618      	mov	r0, r3
 800c066:	f000 f8b1 	bl	800c1cc <RCCEx_PLLSAI1_Config>
 800c06a:	4603      	mov	r3, r0
 800c06c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c06e:	7cfb      	ldrb	r3, [r7, #19]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d001      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800c074:	7cfb      	ldrb	r3, [r7, #19]
 800c076:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00b      	beq.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c084:	4b50      	ldr	r3, [pc, #320]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c08a:	f023 0204 	bic.w	r2, r3, #4
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c094:	494c      	ldr	r1, [pc, #304]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c096:	4313      	orrs	r3, r2
 800c098:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00b      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c0a8:	4b47      	ldr	r3, [pc, #284]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c0aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0ae:	f023 0218 	bic.w	r2, r3, #24
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0b8:	4943      	ldr	r1, [pc, #268]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d035      	beq.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800c0cc:	4b3e      	ldr	r3, [pc, #248]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a3d      	ldr	r2, [pc, #244]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c0d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0d8:	f7fa ff24 	bl	8006f24 <HAL_GetTick>
 800c0dc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c0de:	e009      	b.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c0e0:	f7fa ff20 	bl	8006f24 <HAL_GetTick>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d902      	bls.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	74fb      	strb	r3, [r7, #19]
        break;
 800c0f2:	e005      	b.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c0f4:	4b34      	ldr	r3, [pc, #208]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1ef      	bne.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800c100:	7cfb      	ldrb	r3, [r7, #19]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d113      	bne.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800c106:	4b30      	ldr	r3, [pc, #192]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c108:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c10c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c116:	492c      	ldr	r1, [pc, #176]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c118:	4313      	orrs	r3, r2
 800c11a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	3320      	adds	r3, #32
 800c122:	2102      	movs	r1, #2
 800c124:	4618      	mov	r0, r3
 800c126:	f000 f945 	bl	800c3b4 <RCCEx_PLLSAI2_Config>
 800c12a:	4603      	mov	r3, r0
 800c12c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800c12e:	7cfb      	ldrb	r3, [r7, #19]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d001      	beq.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800c134:	7cfb      	ldrb	r3, [r7, #19]
 800c136:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c140:	2b00      	cmp	r3, #0
 800c142:	d01e      	beq.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800c144:	4b20      	ldr	r3, [pc, #128]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c14a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c154:	491c      	ldr	r1, [pc, #112]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c156:	4313      	orrs	r3, r2
 800c158:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c166:	d10c      	bne.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3320      	adds	r3, #32
 800c16c:	2101      	movs	r1, #1
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 f920 	bl	800c3b4 <RCCEx_PLLSAI2_Config>
 800c174:	4603      	mov	r3, r0
 800c176:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c178:	7cfb      	ldrb	r3, [r7, #19]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800c17e:	7cfb      	ldrb	r3, [r7, #19]
 800c180:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d017      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c18e:	4b0e      	ldr	r3, [pc, #56]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c190:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c194:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c19e:	490a      	ldr	r1, [pc, #40]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c1ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1b0:	d105      	bne.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1b2:	4b05      	ldr	r3, [pc, #20]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	4a04      	ldr	r2, [pc, #16]	; (800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c1b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1bc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c1be:	7cbb      	ldrb	r3, [r7, #18]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3718      	adds	r7, #24
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	40021000 	.word	0x40021000

0800c1cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c1da:	4b72      	ldr	r3, [pc, #456]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	f003 0303 	and.w	r3, r3, #3
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00e      	beq.n	800c204 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c1e6:	4b6f      	ldr	r3, [pc, #444]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	f003 0203 	and.w	r2, r3, #3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d103      	bne.n	800c1fe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
       ||
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d142      	bne.n	800c284 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	73fb      	strb	r3, [r7, #15]
 800c202:	e03f      	b.n	800c284 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b03      	cmp	r3, #3
 800c20a:	d018      	beq.n	800c23e <RCCEx_PLLSAI1_Config+0x72>
 800c20c:	2b03      	cmp	r3, #3
 800c20e:	d825      	bhi.n	800c25c <RCCEx_PLLSAI1_Config+0x90>
 800c210:	2b01      	cmp	r3, #1
 800c212:	d002      	beq.n	800c21a <RCCEx_PLLSAI1_Config+0x4e>
 800c214:	2b02      	cmp	r3, #2
 800c216:	d009      	beq.n	800c22c <RCCEx_PLLSAI1_Config+0x60>
 800c218:	e020      	b.n	800c25c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c21a:	4b62      	ldr	r3, [pc, #392]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 0302 	and.w	r3, r3, #2
 800c222:	2b00      	cmp	r3, #0
 800c224:	d11d      	bne.n	800c262 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c22a:	e01a      	b.n	800c262 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c22c:	4b5d      	ldr	r3, [pc, #372]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c234:	2b00      	cmp	r3, #0
 800c236:	d116      	bne.n	800c266 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800c238:	2301      	movs	r3, #1
 800c23a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c23c:	e013      	b.n	800c266 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c23e:	4b59      	ldr	r3, [pc, #356]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10f      	bne.n	800c26a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c24a:	4b56      	ldr	r3, [pc, #344]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c252:	2b00      	cmp	r3, #0
 800c254:	d109      	bne.n	800c26a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800c256:	2301      	movs	r3, #1
 800c258:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c25a:	e006      	b.n	800c26a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	73fb      	strb	r3, [r7, #15]
      break;
 800c260:	e004      	b.n	800c26c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800c262:	bf00      	nop
 800c264:	e002      	b.n	800c26c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800c266:	bf00      	nop
 800c268:	e000      	b.n	800c26c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800c26a:	bf00      	nop
    }

    if(status == HAL_OK)
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d108      	bne.n	800c284 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800c272:	4b4c      	ldr	r3, [pc, #304]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	f023 0203 	bic.w	r2, r3, #3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4949      	ldr	r1, [pc, #292]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c280:	4313      	orrs	r3, r2
 800c282:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800c284:	7bfb      	ldrb	r3, [r7, #15]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f040 8086 	bne.w	800c398 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c28c:	4b45      	ldr	r3, [pc, #276]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a44      	ldr	r2, [pc, #272]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c292:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c298:	f7fa fe44 	bl	8006f24 <HAL_GetTick>
 800c29c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c29e:	e009      	b.n	800c2b4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c2a0:	f7fa fe40 	bl	8006f24 <HAL_GetTick>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d902      	bls.n	800c2b4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	73fb      	strb	r3, [r7, #15]
        break;
 800c2b2:	e005      	b.n	800c2c0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c2b4:	4b3b      	ldr	r3, [pc, #236]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1ef      	bne.n	800c2a0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d168      	bne.n	800c398 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d113      	bne.n	800c2f4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c2cc:	4b35      	ldr	r3, [pc, #212]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c2ce:	691a      	ldr	r2, [r3, #16]
 800c2d0:	4b35      	ldr	r3, [pc, #212]	; (800c3a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800c2d2:	4013      	ands	r3, r2
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	6892      	ldr	r2, [r2, #8]
 800c2d8:	0211      	lsls	r1, r2, #8
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	68d2      	ldr	r2, [r2, #12]
 800c2de:	06d2      	lsls	r2, r2, #27
 800c2e0:	4311      	orrs	r1, r2
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	6852      	ldr	r2, [r2, #4]
 800c2e6:	3a01      	subs	r2, #1
 800c2e8:	0112      	lsls	r2, r2, #4
 800c2ea:	430a      	orrs	r2, r1
 800c2ec:	492d      	ldr	r1, [pc, #180]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	610b      	str	r3, [r1, #16]
 800c2f2:	e02d      	b.n	800c350 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d115      	bne.n	800c326 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c2fa:	4b2a      	ldr	r3, [pc, #168]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c2fc:	691a      	ldr	r2, [r3, #16]
 800c2fe:	4b2b      	ldr	r3, [pc, #172]	; (800c3ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c300:	4013      	ands	r3, r2
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	6892      	ldr	r2, [r2, #8]
 800c306:	0211      	lsls	r1, r2, #8
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	6912      	ldr	r2, [r2, #16]
 800c30c:	0852      	lsrs	r2, r2, #1
 800c30e:	3a01      	subs	r2, #1
 800c310:	0552      	lsls	r2, r2, #21
 800c312:	4311      	orrs	r1, r2
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	6852      	ldr	r2, [r2, #4]
 800c318:	3a01      	subs	r2, #1
 800c31a:	0112      	lsls	r2, r2, #4
 800c31c:	430a      	orrs	r2, r1
 800c31e:	4921      	ldr	r1, [pc, #132]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c320:	4313      	orrs	r3, r2
 800c322:	610b      	str	r3, [r1, #16]
 800c324:	e014      	b.n	800c350 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c326:	4b1f      	ldr	r3, [pc, #124]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c328:	691a      	ldr	r2, [r3, #16]
 800c32a:	4b21      	ldr	r3, [pc, #132]	; (800c3b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c32c:	4013      	ands	r3, r2
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	6892      	ldr	r2, [r2, #8]
 800c332:	0211      	lsls	r1, r2, #8
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	6952      	ldr	r2, [r2, #20]
 800c338:	0852      	lsrs	r2, r2, #1
 800c33a:	3a01      	subs	r2, #1
 800c33c:	0652      	lsls	r2, r2, #25
 800c33e:	4311      	orrs	r1, r2
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	6852      	ldr	r2, [r2, #4]
 800c344:	3a01      	subs	r2, #1
 800c346:	0112      	lsls	r2, r2, #4
 800c348:	430a      	orrs	r2, r1
 800c34a:	4916      	ldr	r1, [pc, #88]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c34c:	4313      	orrs	r3, r2
 800c34e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c350:	4b14      	ldr	r3, [pc, #80]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a13      	ldr	r2, [pc, #76]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c356:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c35a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c35c:	f7fa fde2 	bl	8006f24 <HAL_GetTick>
 800c360:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c362:	e009      	b.n	800c378 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c364:	f7fa fdde 	bl	8006f24 <HAL_GetTick>
 800c368:	4602      	mov	r2, r0
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d902      	bls.n	800c378 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800c372:	2303      	movs	r3, #3
 800c374:	73fb      	strb	r3, [r7, #15]
          break;
 800c376:	e005      	b.n	800c384 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c378:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d0ef      	beq.n	800c364 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800c384:	7bfb      	ldrb	r3, [r7, #15]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d106      	bne.n	800c398 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c38a:	4b06      	ldr	r3, [pc, #24]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c38c:	691a      	ldr	r2, [r3, #16]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	4904      	ldr	r1, [pc, #16]	; (800c3a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c394:	4313      	orrs	r3, r2
 800c396:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c398:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	40021000 	.word	0x40021000
 800c3a8:	07ff800f 	.word	0x07ff800f
 800c3ac:	ff9f800f 	.word	0xff9f800f
 800c3b0:	f9ff800f 	.word	0xf9ff800f

0800c3b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c3c2:	4b72      	ldr	r3, [pc, #456]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	f003 0303 	and.w	r3, r3, #3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00e      	beq.n	800c3ec <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800c3ce:	4b6f      	ldr	r3, [pc, #444]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	f003 0203 	and.w	r2, r3, #3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d103      	bne.n	800c3e6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
       ||
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d142      	bne.n	800c46c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	73fb      	strb	r3, [r7, #15]
 800c3ea:	e03f      	b.n	800c46c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	d018      	beq.n	800c426 <RCCEx_PLLSAI2_Config+0x72>
 800c3f4:	2b03      	cmp	r3, #3
 800c3f6:	d825      	bhi.n	800c444 <RCCEx_PLLSAI2_Config+0x90>
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d002      	beq.n	800c402 <RCCEx_PLLSAI2_Config+0x4e>
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d009      	beq.n	800c414 <RCCEx_PLLSAI2_Config+0x60>
 800c400:	e020      	b.n	800c444 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c402:	4b62      	ldr	r3, [pc, #392]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 0302 	and.w	r3, r3, #2
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d11d      	bne.n	800c44a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
 800c410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c412:	e01a      	b.n	800c44a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c414:	4b5d      	ldr	r3, [pc, #372]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d116      	bne.n	800c44e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800c420:	2301      	movs	r3, #1
 800c422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c424:	e013      	b.n	800c44e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c426:	4b59      	ldr	r3, [pc, #356]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10f      	bne.n	800c452 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c432:	4b56      	ldr	r3, [pc, #344]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d109      	bne.n	800c452 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c442:	e006      	b.n	800c452 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	73fb      	strb	r3, [r7, #15]
      break;
 800c448:	e004      	b.n	800c454 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800c44a:	bf00      	nop
 800c44c:	e002      	b.n	800c454 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800c44e:	bf00      	nop
 800c450:	e000      	b.n	800c454 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800c452:	bf00      	nop
    }

    if(status == HAL_OK)
 800c454:	7bfb      	ldrb	r3, [r7, #15]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d108      	bne.n	800c46c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800c45a:	4b4c      	ldr	r3, [pc, #304]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c45c:	68db      	ldr	r3, [r3, #12]
 800c45e:	f023 0203 	bic.w	r2, r3, #3
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4949      	ldr	r1, [pc, #292]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c468:	4313      	orrs	r3, r2
 800c46a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f040 8086 	bne.w	800c580 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800c474:	4b45      	ldr	r3, [pc, #276]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a44      	ldr	r2, [pc, #272]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c47a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c47e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c480:	f7fa fd50 	bl	8006f24 <HAL_GetTick>
 800c484:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c486:	e009      	b.n	800c49c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c488:	f7fa fd4c 	bl	8006f24 <HAL_GetTick>
 800c48c:	4602      	mov	r2, r0
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	2b02      	cmp	r3, #2
 800c494:	d902      	bls.n	800c49c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800c496:	2303      	movs	r3, #3
 800c498:	73fb      	strb	r3, [r7, #15]
        break;
 800c49a:	e005      	b.n	800c4a8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c49c:	4b3b      	ldr	r3, [pc, #236]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1ef      	bne.n	800c488 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800c4a8:	7bfb      	ldrb	r3, [r7, #15]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d168      	bne.n	800c580 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d113      	bne.n	800c4dc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c4b4:	4b35      	ldr	r3, [pc, #212]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c4b6:	695a      	ldr	r2, [r3, #20]
 800c4b8:	4b35      	ldr	r3, [pc, #212]	; (800c590 <RCCEx_PLLSAI2_Config+0x1dc>)
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	6892      	ldr	r2, [r2, #8]
 800c4c0:	0211      	lsls	r1, r2, #8
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	68d2      	ldr	r2, [r2, #12]
 800c4c6:	06d2      	lsls	r2, r2, #27
 800c4c8:	4311      	orrs	r1, r2
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	6852      	ldr	r2, [r2, #4]
 800c4ce:	3a01      	subs	r2, #1
 800c4d0:	0112      	lsls	r2, r2, #4
 800c4d2:	430a      	orrs	r2, r1
 800c4d4:	492d      	ldr	r1, [pc, #180]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	614b      	str	r3, [r1, #20]
 800c4da:	e02d      	b.n	800c538 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d115      	bne.n	800c50e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c4e2:	4b2a      	ldr	r3, [pc, #168]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c4e4:	695a      	ldr	r2, [r3, #20]
 800c4e6:	4b2b      	ldr	r3, [pc, #172]	; (800c594 <RCCEx_PLLSAI2_Config+0x1e0>)
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	6892      	ldr	r2, [r2, #8]
 800c4ee:	0211      	lsls	r1, r2, #8
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	6912      	ldr	r2, [r2, #16]
 800c4f4:	0852      	lsrs	r2, r2, #1
 800c4f6:	3a01      	subs	r2, #1
 800c4f8:	0552      	lsls	r2, r2, #21
 800c4fa:	4311      	orrs	r1, r2
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	6852      	ldr	r2, [r2, #4]
 800c500:	3a01      	subs	r2, #1
 800c502:	0112      	lsls	r2, r2, #4
 800c504:	430a      	orrs	r2, r1
 800c506:	4921      	ldr	r1, [pc, #132]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c508:	4313      	orrs	r3, r2
 800c50a:	614b      	str	r3, [r1, #20]
 800c50c:	e014      	b.n	800c538 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c50e:	4b1f      	ldr	r3, [pc, #124]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c510:	695a      	ldr	r2, [r3, #20]
 800c512:	4b21      	ldr	r3, [pc, #132]	; (800c598 <RCCEx_PLLSAI2_Config+0x1e4>)
 800c514:	4013      	ands	r3, r2
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	6892      	ldr	r2, [r2, #8]
 800c51a:	0211      	lsls	r1, r2, #8
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	6952      	ldr	r2, [r2, #20]
 800c520:	0852      	lsrs	r2, r2, #1
 800c522:	3a01      	subs	r2, #1
 800c524:	0652      	lsls	r2, r2, #25
 800c526:	4311      	orrs	r1, r2
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	6852      	ldr	r2, [r2, #4]
 800c52c:	3a01      	subs	r2, #1
 800c52e:	0112      	lsls	r2, r2, #4
 800c530:	430a      	orrs	r2, r1
 800c532:	4916      	ldr	r1, [pc, #88]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c534:	4313      	orrs	r3, r2
 800c536:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800c538:	4b14      	ldr	r3, [pc, #80]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a13      	ldr	r2, [pc, #76]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c53e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c542:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c544:	f7fa fcee 	bl	8006f24 <HAL_GetTick>
 800c548:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c54a:	e009      	b.n	800c560 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c54c:	f7fa fcea 	bl	8006f24 <HAL_GetTick>
 800c550:	4602      	mov	r2, r0
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	2b02      	cmp	r3, #2
 800c558:	d902      	bls.n	800c560 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800c55a:	2303      	movs	r3, #3
 800c55c:	73fb      	strb	r3, [r7, #15]
          break;
 800c55e:	e005      	b.n	800c56c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c560:	4b0a      	ldr	r3, [pc, #40]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d0ef      	beq.n	800c54c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800c56c:	7bfb      	ldrb	r3, [r7, #15]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d106      	bne.n	800c580 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800c572:	4b06      	ldr	r3, [pc, #24]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c574:	695a      	ldr	r2, [r3, #20]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	699b      	ldr	r3, [r3, #24]
 800c57a:	4904      	ldr	r1, [pc, #16]	; (800c58c <RCCEx_PLLSAI2_Config+0x1d8>)
 800c57c:	4313      	orrs	r3, r2
 800c57e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800c580:	7bfb      	ldrb	r3, [r7, #15]
}
 800c582:	4618      	mov	r0, r3
 800c584:	3710      	adds	r7, #16
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	40021000 	.word	0x40021000
 800c590:	07ff800f 	.word	0x07ff800f
 800c594:	ff9f800f 	.word	0xff9f800f
 800c598:	f9ff800f 	.word	0xf9ff800f

0800c59c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08a      	sub	sp, #40	; 0x28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e075      	b.n	800c69a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d105      	bne.n	800c5c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 f8f7 	bl	800c7b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2203      	movs	r2, #3
 800c5ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f868 	bl	800c6a4 <HAL_SD_InitCard>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d001      	beq.n	800c5de <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e05d      	b.n	800c69a <HAL_SD_Init+0xfe>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c5de:	f107 0308 	add.w	r3, r7, #8
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fda3 	bl	800d130 <HAL_SD_GetCardStatus>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d001      	beq.n	800c5f4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e052      	b.n	800c69a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c5f4:	7e3b      	ldrb	r3, [r7, #24]
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c5fa:	7e7b      	ldrb	r3, [r7, #25]
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c604:	2b01      	cmp	r3, #1
 800c606:	d10a      	bne.n	800c61e <HAL_SD_Init+0x82>
 800c608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d102      	bne.n	800c614 <HAL_SD_Init+0x78>
 800c60e:	6a3b      	ldr	r3, [r7, #32]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d004      	beq.n	800c61e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c61a:	65da      	str	r2, [r3, #92]	; 0x5c
 800c61c:	e00b      	b.n	800c636 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c622:	2b01      	cmp	r3, #1
 800c624:	d104      	bne.n	800c630 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c62c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c62e:	e002      	b.n	800c636 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	4619      	mov	r1, r3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 fe59 	bl	800d2f4 <HAL_SD_ConfigWideBusOperation>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d001      	beq.n	800c64c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e026      	b.n	800c69a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c64c:	f7fa fc6a 	bl	8006f24 <HAL_GetTick>
 800c650:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c652:	e011      	b.n	800c678 <HAL_SD_Init+0xdc>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800c654:	f7fa fc66 	bl	8006f24 <HAL_GetTick>
 800c658:	4602      	mov	r2, r0
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	1ad3      	subs	r3, r2, r3
 800c65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c662:	d109      	bne.n	800c678 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c66a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800c674:	2303      	movs	r3, #3
 800c676:	e010      	b.n	800c69a <HAL_SD_Init+0xfe>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 fee5 	bl	800d448 <HAL_SD_GetCardState>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b04      	cmp	r3, #4
 800c682:	d1e7      	bne.n	800c654 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3728      	adds	r7, #40	; 0x28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
	...

0800c6a4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c6a4:	b5b0      	push	{r4, r5, r7, lr}
 800c6a6:	b08e      	sub	sp, #56	; 0x38
 800c6a8:	af04      	add	r7, sp, #16
 800c6aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c6bc:	238a      	movs	r3, #138	; 0x8a
 800c6be:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	699b      	ldr	r3, [r3, #24]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d107      	bne.n	800c6d8 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f042 0210 	orr.w	r2, r2, #16
 800c6d6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681d      	ldr	r5, [r3, #0]
 800c6dc:	466c      	mov	r4, sp
 800c6de:	f107 0314 	add.w	r3, r7, #20
 800c6e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c6e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c6ea:	f107 0308 	add.w	r3, r7, #8
 800c6ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	f004 fb4f 	bl	8010d94 <SDMMC_Init>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	e04f      	b.n	800c7a8 <HAL_SD_InitCard+0x104>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f004 fb89 	bl	8010e24 <SDMMC_PowerState_ON>
 800c712:	4603      	mov	r3, r0
 800c714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d001      	beq.n	800c724 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 800c720:	2301      	movs	r3, #1
 800c722:	e041      	b.n	800c7a8 <HAL_SD_InitCard+0x104>
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 ff6d 	bl	800d604 <SD_PowerON>
 800c72a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c72c:	6a3b      	ldr	r3, [r7, #32]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00b      	beq.n	800c74a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c73e:	6a3b      	ldr	r3, [r7, #32]
 800c740:	431a      	orrs	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c746:	2301      	movs	r3, #1
 800c748:	e02e      	b.n	800c7a8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fe9c 	bl	800d488 <SD_InitCard>
 800c750:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00b      	beq.n	800c770 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c764:	6a3b      	ldr	r3, [r7, #32]
 800c766:	431a      	orrs	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	e01b      	b.n	800c7a8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c778:	4618      	mov	r0, r3
 800c77a:	f004 fbe9 	bl	8010f50 <SDMMC_CmdBlockLength>
 800c77e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c780:	6a3b      	ldr	r3, [r7, #32]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00f      	beq.n	800c7a6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a09      	ldr	r2, [pc, #36]	; (800c7b0 <HAL_SD_InitCard+0x10c>)
 800c78c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c792:	6a3b      	ldr	r3, [r7, #32]
 800c794:	431a      	orrs	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2201      	movs	r2, #1
 800c79e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e000      	b.n	800c7a8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3728      	adds	r7, #40	; 0x28
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bdb0      	pop	{r4, r5, r7, pc}
 800c7b0:	1fe00fff 	.word	0x1fe00fff

0800c7b4 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800c7bc:	bf00      	nop
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b08c      	sub	sp, #48	; 0x30
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
 800c7d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d107      	bne.n	800c7f0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	e08d      	b.n	800c90c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	f040 8086 	bne.w	800c90a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	441a      	add	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c80e:	429a      	cmp	r2, r3
 800c810:	d907      	bls.n	800c822 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c816:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	e074      	b.n	800c90c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2203      	movs	r2, #3
 800c826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2200      	movs	r2, #0
 800c830:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	025a      	lsls	r2, r3, #9
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c844:	2b01      	cmp	r3, #1
 800c846:	d002      	beq.n	800c84e <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	025b      	lsls	r3, r3, #9
 800c84c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c84e:	f04f 33ff 	mov.w	r3, #4294967295
 800c852:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	025b      	lsls	r3, r3, #9
 800c858:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c85a:	2390      	movs	r3, #144	; 0x90
 800c85c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c85e:	2302      	movs	r3, #2
 800c860:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c862:	2300      	movs	r3, #0
 800c864:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800c866:	2300      	movs	r3, #0
 800c868:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f107 0210 	add.w	r2, r7, #16
 800c872:	4611      	mov	r1, r2
 800c874:	4618      	mov	r0, r3
 800c876:	f004 fb3f 	bl	8010ef8 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	68da      	ldr	r2, [r3, #12]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c888:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	68ba      	ldr	r2, [r7, #8]
 800c890:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2201      	movs	r2, #1
 800c898:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d90a      	bls.n	800c8b6 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2282      	movs	r2, #130	; 0x82
 800c8a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f004 fb95 	bl	8010fdc <SDMMC_CmdReadMultiBlock>
 800c8b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c8b4:	e009      	b.n	800c8ca <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2281      	movs	r2, #129	; 0x81
 800c8ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f004 fb67 	bl	8010f96 <SDMMC_CmdReadSingleBlock>
 800c8c8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d012      	beq.n	800c8f6 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a0f      	ldr	r2, [pc, #60]	; (800c914 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c8d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8de:	431a      	orrs	r2, r3
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e00a      	b.n	800c90c <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c904:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800c906:	2300      	movs	r3, #0
 800c908:	e000      	b.n	800c90c <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800c90a:	2302      	movs	r3, #2
  }
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3730      	adds	r7, #48	; 0x30
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	1fe00fff 	.word	0x1fe00fff

0800c918 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08c      	sub	sp, #48	; 0x30
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
 800c924:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d107      	bne.n	800c940 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c934:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e08d      	b.n	800ca5c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c946:	b2db      	uxtb	r3, r3
 800c948:	2b01      	cmp	r3, #1
 800c94a:	f040 8086 	bne.w	800ca5a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2200      	movs	r2, #0
 800c952:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	441a      	add	r2, r3
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c95e:	429a      	cmp	r2, r3
 800c960:	d907      	bls.n	800c972 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c966:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c96e:	2301      	movs	r3, #1
 800c970:	e074      	b.n	800ca5c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2203      	movs	r2, #3
 800c976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2200      	movs	r2, #0
 800c980:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	025a      	lsls	r2, r3, #9
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c994:	2b01      	cmp	r3, #1
 800c996:	d002      	beq.n	800c99e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	025b      	lsls	r3, r3, #9
 800c99c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c99e:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	025b      	lsls	r3, r3, #9
 800c9a8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c9aa:	2390      	movs	r3, #144	; 0x90
 800c9ac:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f107 0210 	add.w	r2, r7, #16
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f004 fa97 	bl	8010ef8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68da      	ldr	r2, [r3, #12]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9d8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68ba      	ldr	r2, [r7, #8]
 800c9e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d90a      	bls.n	800ca06 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	22a0      	movs	r2, #160	; 0xa0
 800c9f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f004 fb33 	bl	8011068 <SDMMC_CmdWriteMultiBlock>
 800ca02:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ca04:	e009      	b.n	800ca1a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2290      	movs	r2, #144	; 0x90
 800ca0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca12:	4618      	mov	r0, r3
 800ca14:	f004 fb05 	bl	8011022 <SDMMC_CmdWriteSingleBlock>
 800ca18:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d012      	beq.n	800ca46 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a0f      	ldr	r2, [pc, #60]	; (800ca64 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800ca26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	431a      	orrs	r2, r3
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e00a      	b.n	800ca5c <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800ca54:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	e000      	b.n	800ca5c <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800ca5a:	2302      	movs	r3, #2
  }
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3730      	adds	r7, #48	; 0x30
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	1fe00fff 	.word	0x1fe00fff

0800ca68 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca74:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d008      	beq.n	800ca96 <HAL_SD_IRQHandler+0x2e>
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f003 0308 	and.w	r3, r3, #8
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d003      	beq.n	800ca96 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f001 f928 	bl	800dce4 <SD_Read_IT>
 800ca94:	e199      	b.n	800cdca <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f000 80ae 	beq.w	800cc02 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800caae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	6812      	ldr	r2, [r2, #0]
 800caba:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800cabe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800cac2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cad2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68da      	ldr	r2, [r3, #12]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cae2:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f003 0308 	and.w	r3, r3, #8
 800caea:	2b00      	cmp	r3, #0
 800caec:	d038      	beq.n	800cb60 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f003 0302 	and.w	r3, r3, #2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d104      	bne.n	800cb02 <HAL_SD_IRQHandler+0x9a>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f003 0320 	and.w	r3, r3, #32
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d011      	beq.n	800cb26 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4618      	mov	r0, r3
 800cb08:	f004 fad2 	bl	80110b0 <SDMMC_CmdStopTransfer>
 800cb0c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d008      	beq.n	800cb26 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	431a      	orrs	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 f957 	bl	800cdd4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4aa0      	ldr	r2, [pc, #640]	; (800cdac <HAL_SD_IRQHandler+0x344>)
 800cb2c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2201      	movs	r2, #1
 800cb32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f003 0301 	and.w	r3, r3, #1
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d104      	bne.n	800cb50 <HAL_SD_IRQHandler+0xe8>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f003 0302 	and.w	r3, r3, #2
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d003      	beq.n	800cb58 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f7fa f971 	bl	8006e38 <HAL_SD_RxCpltCallback>
 800cb56:	e138      	b.n	800cdca <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7fa f963 	bl	8006e24 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800cb5e:	e134      	b.n	800cdca <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f000 812f 	beq.w	800cdca <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2200      	movs	r2, #0
 800cb72:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2200      	movs	r2, #0
 800cb82:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f003 0302 	and.w	r3, r3, #2
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d104      	bne.n	800cb98 <HAL_SD_IRQHandler+0x130>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f003 0320 	and.w	r3, r3, #32
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d011      	beq.n	800cbbc <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f004 fa87 	bl	80110b0 <SDMMC_CmdStopTransfer>
 800cba2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d008      	beq.n	800cbbc <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	431a      	orrs	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 f90c 	bl	800cdd4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f003 0310 	and.w	r3, r3, #16
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d104      	bne.n	800cbde <HAL_SD_IRQHandler+0x176>
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f003 0320 	and.w	r3, r3, #32
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d002      	beq.n	800cbe4 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7fa f920 	bl	8006e24 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f003 0301 	and.w	r3, r3, #1
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d105      	bne.n	800cbfa <HAL_SD_IRQHandler+0x192>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f003 0302 	and.w	r3, r3, #2
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f000 80e8 	beq.w	800cdca <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7fa f91c 	bl	8006e38 <HAL_SD_RxCpltCallback>
}
 800cc00:	e0e3      	b.n	800cdca <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d008      	beq.n	800cc22 <HAL_SD_IRQHandler+0x1ba>
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f003 0308 	and.w	r3, r3, #8
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d003      	beq.n	800cc22 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f001 f8b3 	bl	800dd86 <SD_Write_IT>
 800cc20:	e0d3      	b.n	800cdca <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc28:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f000 809d 	beq.w	800cd6c <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc38:	f003 0302 	and.w	r3, r3, #2
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d005      	beq.n	800cc4c <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc44:	f043 0202 	orr.w	r2, r3, #2
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc52:	f003 0308 	and.w	r3, r3, #8
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d005      	beq.n	800cc66 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5e:	f043 0208 	orr.w	r2, r3, #8
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc6c:	f003 0320 	and.w	r3, r3, #32
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d005      	beq.n	800cc80 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc78:	f043 0220 	orr.w	r2, r3, #32
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc86:	f003 0310 	and.w	r3, r3, #16
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d005      	beq.n	800cc9a <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc92:	f043 0210 	orr.w	r2, r3, #16
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a43      	ldr	r2, [pc, #268]	; (800cdac <HAL_SD_IRQHandler+0x344>)
 800cca0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ccb0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68da      	ldr	r2, [r3, #12]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccc0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ccd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68da      	ldr	r2, [r3, #12]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cce0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f004 f9e2 	bl	80110b0 <SDMMC_CmdStopTransfer>
 800ccec:	4602      	mov	r2, r0
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf2:	431a      	orrs	r2, r3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	68da      	ldr	r2, [r3, #12]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd06:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd10:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f003 0308 	and.w	r3, r3, #8
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00a      	beq.n	800cd32 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f852 	bl	800cdd4 <HAL_SD_ErrorCallback>
}
 800cd30:	e04b      	b.n	800cdca <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d046      	beq.n	800cdca <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d042      	beq.n	800cdca <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cd52:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 f835 	bl	800cdd4 <HAL_SD_ErrorCallback>
}
 800cd6a:	e02e      	b.n	800cdca <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d027      	beq.n	800cdca <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd82:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd8a:	f003 0304 	and.w	r3, r3, #4
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10e      	bne.n	800cdb0 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f003 0320 	and.w	r3, r3, #32
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d003      	beq.n	800cda4 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f001 f870 	bl	800de82 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800cda2:	e012      	b.n	800cdca <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f001 f858 	bl	800de5a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800cdaa:	e00e      	b.n	800cdca <HAL_SD_IRQHandler+0x362>
 800cdac:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f003 0320 	and.w	r3, r3, #32
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f001 f857 	bl	800de6e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800cdc0:	e003      	b.n	800cdca <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f001 f83f 	bl	800de46 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800cdc8:	e7ff      	b.n	800cdca <HAL_SD_IRQHandler+0x362>
 800cdca:	bf00      	nop
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop

0800cdd4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cddc:	bf00      	nop
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdf6:	0f9b      	lsrs	r3, r3, #30
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce02:	0e9b      	lsrs	r3, r3, #26
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	f003 030f 	and.w	r3, r3, #15
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce14:	0e1b      	lsrs	r3, r3, #24
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	f003 0303 	and.w	r3, r3, #3
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce26:	0c1b      	lsrs	r3, r3, #16
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce32:	0a1b      	lsrs	r3, r3, #8
 800ce34:	b2da      	uxtb	r2, r3
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce48:	0d1b      	lsrs	r3, r3, #20
 800ce4a:	b29a      	uxth	r2, r3
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce54:	0c1b      	lsrs	r3, r3, #16
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	f003 030f 	and.w	r3, r3, #15
 800ce5c:	b2da      	uxtb	r2, r3
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce66:	0bdb      	lsrs	r3, r3, #15
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	f003 0301 	and.w	r3, r3, #1
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce78:	0b9b      	lsrs	r3, r3, #14
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	f003 0301 	and.w	r3, r3, #1
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce8a:	0b5b      	lsrs	r3, r3, #13
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	f003 0301 	and.w	r3, r3, #1
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce9c:	0b1b      	lsrs	r3, r3, #12
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	f003 0301 	and.w	r3, r3, #1
 800cea4:	b2da      	uxtb	r2, r3
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	2200      	movs	r2, #0
 800ceae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d163      	bne.n	800cf80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cebc:	009a      	lsls	r2, r3, #2
 800cebe:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cec2:	4013      	ands	r3, r2
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cec8:	0f92      	lsrs	r2, r2, #30
 800ceca:	431a      	orrs	r2, r3
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ced4:	0edb      	lsrs	r3, r3, #27
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	f003 0307 	and.w	r3, r3, #7
 800cedc:	b2da      	uxtb	r2, r3
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cee6:	0e1b      	lsrs	r3, r3, #24
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	f003 0307 	and.w	r3, r3, #7
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cef8:	0d5b      	lsrs	r3, r3, #21
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	f003 0307 	and.w	r3, r3, #7
 800cf00:	b2da      	uxtb	r2, r3
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf0a:	0c9b      	lsrs	r3, r3, #18
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	f003 0307 	and.w	r3, r3, #7
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf1c:	0bdb      	lsrs	r3, r3, #15
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	f003 0307 	and.w	r3, r3, #7
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	691b      	ldr	r3, [r3, #16]
 800cf2e:	1c5a      	adds	r2, r3, #1
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	7e1b      	ldrb	r3, [r3, #24]
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	f003 0307 	and.w	r3, r3, #7
 800cf3e:	3302      	adds	r3, #2
 800cf40:	2201      	movs	r2, #1
 800cf42:	fa02 f303 	lsl.w	r3, r2, r3
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800cf4a:	fb02 f203 	mul.w	r2, r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	7a1b      	ldrb	r3, [r3, #8]
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	f003 030f 	and.w	r3, r3, #15
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	409a      	lsls	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800cf6c:	0a52      	lsrs	r2, r2, #9
 800cf6e:	fb02 f203 	mul.w	r2, r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf7c:	659a      	str	r2, [r3, #88]	; 0x58
 800cf7e:	e031      	b.n	800cfe4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d11d      	bne.n	800cfc4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf8c:	041b      	lsls	r3, r3, #16
 800cf8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf96:	0c1b      	lsrs	r3, r3, #16
 800cf98:	431a      	orrs	r2, r3
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	029a      	lsls	r2, r3, #10
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfb8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	659a      	str	r2, [r3, #88]	; 0x58
 800cfc2:	e00f      	b.n	800cfe4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a58      	ldr	r2, [pc, #352]	; (800d12c <HAL_SD_GetCardCSD+0x344>)
 800cfca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	e09d      	b.n	800d120 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfe8:	0b9b      	lsrs	r3, r3, #14
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	f003 0301 	and.w	r3, r3, #1
 800cff0:	b2da      	uxtb	r2, r3
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cffa:	09db      	lsrs	r3, r3, #7
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d002:	b2da      	uxtb	r2, r3
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d012:	b2da      	uxtb	r2, r3
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d01c:	0fdb      	lsrs	r3, r3, #31
 800d01e:	b2da      	uxtb	r2, r3
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d028:	0f5b      	lsrs	r3, r3, #29
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	f003 0303 	and.w	r3, r3, #3
 800d030:	b2da      	uxtb	r2, r3
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d03a:	0e9b      	lsrs	r3, r3, #26
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	f003 0307 	and.w	r3, r3, #7
 800d042:	b2da      	uxtb	r2, r3
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d04c:	0d9b      	lsrs	r3, r3, #22
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	f003 030f 	and.w	r3, r3, #15
 800d054:	b2da      	uxtb	r2, r3
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d05e:	0d5b      	lsrs	r3, r3, #21
 800d060:	b2db      	uxtb	r3, r3
 800d062:	f003 0301 	and.w	r3, r3, #1
 800d066:	b2da      	uxtb	r2, r3
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	2200      	movs	r2, #0
 800d072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d07a:	0c1b      	lsrs	r3, r3, #16
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	f003 0301 	and.w	r3, r3, #1
 800d082:	b2da      	uxtb	r2, r3
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d08e:	0bdb      	lsrs	r3, r3, #15
 800d090:	b2db      	uxtb	r3, r3
 800d092:	f003 0301 	and.w	r3, r3, #1
 800d096:	b2da      	uxtb	r2, r3
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0a2:	0b9b      	lsrs	r3, r3, #14
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	f003 0301 	and.w	r3, r3, #1
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0b6:	0b5b      	lsrs	r3, r3, #13
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	f003 0301 	and.w	r3, r3, #1
 800d0be:	b2da      	uxtb	r2, r3
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0ca:	0b1b      	lsrs	r3, r3, #12
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	f003 0301 	and.w	r3, r3, #1
 800d0d2:	b2da      	uxtb	r2, r3
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0de:	0a9b      	lsrs	r3, r3, #10
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	f003 0303 	and.w	r3, r3, #3
 800d0e6:	b2da      	uxtb	r2, r3
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0f2:	0a1b      	lsrs	r3, r3, #8
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	f003 0303 	and.w	r3, r3, #3
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d106:	085b      	lsrs	r3, r3, #1
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d10e:	b2da      	uxtb	r2, r3
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	2201      	movs	r2, #1
 800d11a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d11e:	2300      	movs	r3, #0
}
 800d120:	4618      	mov	r0, r3
 800d122:	370c      	adds	r7, #12
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	1fe00fff 	.word	0x1fe00fff

0800d130 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b094      	sub	sp, #80	; 0x50
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d13a:	2300      	movs	r3, #0
 800d13c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d140:	f107 0308 	add.w	r3, r7, #8
 800d144:	4619      	mov	r1, r3
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 fb6e 	bl	800d828 <SD_SendSDStatus>
 800d14c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800d14e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d150:	2b00      	cmp	r3, #0
 800d152:	d011      	beq.n	800d178 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a4f      	ldr	r2, [pc, #316]	; (800d298 <HAL_SD_GetCardStatus+0x168>)
 800d15a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d162:	431a      	orrs	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d170:	2301      	movs	r3, #1
 800d172:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d176:	e070      	b.n	800d25a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	099b      	lsrs	r3, r3, #6
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	f003 0303 	and.w	r3, r3, #3
 800d182:	b2da      	uxtb	r2, r3
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	095b      	lsrs	r3, r3, #5
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	f003 0301 	and.w	r3, r3, #1
 800d192:	b2da      	uxtb	r2, r3
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	0a1b      	lsrs	r3, r3, #8
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d1a2:	b29a      	uxth	r2, r3
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	0e1b      	lsrs	r3, r3, #24
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	061a      	lsls	r2, r3, #24
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	021b      	lsls	r3, r3, #8
 800d1ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d1be:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	0a1b      	lsrs	r3, r3, #8
 800d1c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d1c8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	0e1b      	lsrs	r3, r3, #24
 800d1ce:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	b2da      	uxtb	r2, r3
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	0a1b      	lsrs	r3, r3, #8
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	0d1b      	lsrs	r3, r3, #20
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	f003 030f 	and.w	r3, r3, #15
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	0c1b      	lsrs	r3, r3, #16
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d200:	b29a      	uxth	r2, r3
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	b29b      	uxth	r3, r3
 800d206:	b2db      	uxtb	r3, r3
 800d208:	b29b      	uxth	r3, r3
 800d20a:	4313      	orrs	r3, r2
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	0a9b      	lsrs	r3, r3, #10
 800d216:	b2db      	uxtb	r3, r3
 800d218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	0a1b      	lsrs	r3, r3, #8
 800d226:	b2db      	uxtb	r3, r3
 800d228:	f003 0303 	and.w	r3, r3, #3
 800d22c:	b2da      	uxtb	r2, r3
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	091b      	lsrs	r3, r3, #4
 800d236:	b2db      	uxtb	r3, r3
 800d238:	f003 030f 	and.w	r3, r3, #15
 800d23c:	b2da      	uxtb	r2, r3
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	b2db      	uxtb	r3, r3
 800d246:	f003 030f 	and.w	r3, r3, #15
 800d24a:	b2da      	uxtb	r2, r3
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	0e1b      	lsrs	r3, r3, #24
 800d254:	b2da      	uxtb	r2, r3
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d262:	4618      	mov	r0, r3
 800d264:	f003 fe74 	bl	8010f50 <SDMMC_CmdBlockLength>
 800d268:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800d26a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00d      	beq.n	800d28c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a08      	ldr	r2, [pc, #32]	; (800d298 <HAL_SD_GetCardStatus+0x168>)
 800d276:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d27c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2201      	movs	r2, #1
 800d282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d286:	2301      	movs	r3, #1
 800d288:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800d28c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d290:	4618      	mov	r0, r3
 800d292:	3750      	adds	r7, #80	; 0x50
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	1fe00fff 	.word	0x1fe00fff

0800d29c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d2e6:	2300      	movs	r3, #0
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d2f4:	b5b0      	push	{r4, r5, r7, lr}
 800d2f6:	b08e      	sub	sp, #56	; 0x38
 800d2f8:	af04      	add	r7, sp, #16
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2203      	movs	r2, #3
 800d308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d310:	2b03      	cmp	r3, #3
 800d312:	d02e      	beq.n	800d372 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d31a:	d106      	bne.n	800d32a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d320:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	639a      	str	r2, [r3, #56]	; 0x38
 800d328:	e029      	b.n	800d37e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d330:	d10a      	bne.n	800d348 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fb70 	bl	800da18 <SD_WideBus_Enable>
 800d338:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d33e:	6a3b      	ldr	r3, [r7, #32]
 800d340:	431a      	orrs	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	639a      	str	r2, [r3, #56]	; 0x38
 800d346:	e01a      	b.n	800d37e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d10a      	bne.n	800d364 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 fbad 	bl	800daae <SD_WideBus_Disable>
 800d354:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d35a:	6a3b      	ldr	r3, [r7, #32]
 800d35c:	431a      	orrs	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	639a      	str	r2, [r3, #56]	; 0x38
 800d362:	e00c      	b.n	800d37e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d368:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	639a      	str	r2, [r3, #56]	; 0x38
 800d370:	e005      	b.n	800d37e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d376:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d382:	2b00      	cmp	r3, #0
 800d384:	d007      	beq.n	800d396 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a2e      	ldr	r2, [pc, #184]	; (800d444 <HAL_SD_ConfigWideBusOperation+0x150>)
 800d38c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d38e:	2301      	movs	r3, #1
 800d390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d394:	e034      	b.n	800d400 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	617b      	str	r3, [r7, #20]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	695b      	ldr	r3, [r3, #20]
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	d903      	bls.n	800d3bc <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	61bb      	str	r3, [r7, #24]
 800d3ba:	e012      	b.n	800d3e2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3c4:	d103      	bne.n	800d3ce <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	695b      	ldr	r3, [r3, #20]
 800d3ca:	61bb      	str	r3, [r7, #24]
 800d3cc:	e009      	b.n	800d3e2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3d6:	d102      	bne.n	800d3de <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800d3d8:	2302      	movs	r3, #2
 800d3da:	61bb      	str	r3, [r7, #24]
 800d3dc:	e001      	b.n	800d3e2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800d3de:	2303      	movs	r3, #3
 800d3e0:	61bb      	str	r3, [r7, #24]
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681d      	ldr	r5, [r3, #0]
 800d3e6:	466c      	mov	r4, sp
 800d3e8:	f107 0314 	add.w	r3, r7, #20
 800d3ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d3f4:	f107 0308 	add.w	r3, r7, #8
 800d3f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f003 fcca 	bl	8010d94 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d408:	4618      	mov	r0, r3
 800d40a:	f003 fda1 	bl	8010f50 <SDMMC_CmdBlockLength>
 800d40e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d410:	6a3b      	ldr	r3, [r7, #32]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00c      	beq.n	800d430 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4a0a      	ldr	r2, [pc, #40]	; (800d444 <HAL_SD_ConfigWideBusOperation+0x150>)
 800d41c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d422:	6a3b      	ldr	r3, [r7, #32]
 800d424:	431a      	orrs	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3728      	adds	r7, #40	; 0x28
 800d440:	46bd      	mov	sp, r7
 800d442:	bdb0      	pop	{r4, r5, r7, pc}
 800d444:	1fe00fff 	.word	0x1fe00fff

0800d448 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b086      	sub	sp, #24
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d450:	2300      	movs	r3, #0
 800d452:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d454:	f107 030c 	add.w	r3, r7, #12
 800d458:	4619      	mov	r1, r3
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fab4 	bl	800d9c8 <SD_SendStatus>
 800d460:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d005      	beq.n	800d474 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	431a      	orrs	r2, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	0a5b      	lsrs	r3, r3, #9
 800d478:	f003 030f 	and.w	r3, r3, #15
 800d47c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d47e:	693b      	ldr	r3, [r7, #16]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3718      	adds	r7, #24
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b090      	sub	sp, #64	; 0x40
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d490:	2301      	movs	r3, #1
 800d492:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4618      	mov	r0, r3
 800d49a:	f003 fcd5 	bl	8010e48 <SDMMC_GetPowerState>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d102      	bne.n	800d4aa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d4a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d4a8:	e0a7      	b.n	800d5fa <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ae:	2b03      	cmp	r3, #3
 800d4b0:	d02e      	beq.n	800d510 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f003 ff1a 	bl	80112f0 <SDMMC_CmdSendCID>
 800d4bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d001      	beq.n	800d4c8 <SD_InitCard+0x40>
    {
      return errorstate;
 800d4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c6:	e098      	b.n	800d5fa <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f003 fcff 	bl	8010ed2 <SDMMC_GetResponse>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2104      	movs	r1, #4
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f003 fcf6 	bl	8010ed2 <SDMMC_GetResponse>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2108      	movs	r1, #8
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f003 fced 	bl	8010ed2 <SDMMC_GetResponse>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	210c      	movs	r1, #12
 800d504:	4618      	mov	r0, r3
 800d506:	f003 fce4 	bl	8010ed2 <SDMMC_GetResponse>
 800d50a:	4602      	mov	r2, r0
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d514:	2b03      	cmp	r3, #3
 800d516:	d00d      	beq.n	800d534 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f107 020e 	add.w	r2, r7, #14
 800d520:	4611      	mov	r1, r2
 800d522:	4618      	mov	r0, r3
 800d524:	f003 ff23 	bl	801136e <SDMMC_CmdSetRelAdd>
 800d528:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d001      	beq.n	800d534 <SD_InitCard+0xac>
    {
      return errorstate;
 800d530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d532:	e062      	b.n	800d5fa <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d538:	2b03      	cmp	r3, #3
 800d53a:	d036      	beq.n	800d5aa <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d53c:	89fb      	ldrh	r3, [r7, #14]
 800d53e:	461a      	mov	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d54c:	041b      	lsls	r3, r3, #16
 800d54e:	4619      	mov	r1, r3
 800d550:	4610      	mov	r0, r2
 800d552:	f003 feec 	bl	801132e <SDMMC_CmdSendCSD>
 800d556:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d001      	beq.n	800d562 <SD_InitCard+0xda>
    {
      return errorstate;
 800d55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d560:	e04b      	b.n	800d5fa <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	2100      	movs	r1, #0
 800d568:	4618      	mov	r0, r3
 800d56a:	f003 fcb2 	bl	8010ed2 <SDMMC_GetResponse>
 800d56e:	4602      	mov	r2, r0
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2104      	movs	r1, #4
 800d57a:	4618      	mov	r0, r3
 800d57c:	f003 fca9 	bl	8010ed2 <SDMMC_GetResponse>
 800d580:	4602      	mov	r2, r0
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2108      	movs	r1, #8
 800d58c:	4618      	mov	r0, r3
 800d58e:	f003 fca0 	bl	8010ed2 <SDMMC_GetResponse>
 800d592:	4602      	mov	r2, r0
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	210c      	movs	r1, #12
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f003 fc97 	bl	8010ed2 <SDMMC_GetResponse>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2104      	movs	r1, #4
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f003 fc8e 	bl	8010ed2 <SDMMC_GetResponse>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	0d1a      	lsrs	r2, r3, #20
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d5be:	f107 0310 	add.w	r3, r7, #16
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7ff fc0f 	bl	800cde8 <HAL_SD_GetCardCSD>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d5d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d5d4:	e011      	b.n	800d5fa <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6819      	ldr	r1, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5de:	041b      	lsls	r3, r3, #16
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	f04f 0300 	mov.w	r3, #0
 800d5e6:	4608      	mov	r0, r1
 800d5e8:	f003 fd98 	bl	801111c <SDMMC_CmdSelDesel>
 800d5ec:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <SD_InitCard+0x170>
  {
    return errorstate;
 800d5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f6:	e000      	b.n	800d5fa <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3740      	adds	r7, #64	; 0x40
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d60c:	2300      	movs	r3, #0
 800d60e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800d610:	2300      	movs	r3, #0
 800d612:	61fb      	str	r3, [r7, #28]
 800d614:	2300      	movs	r3, #0
 800d616:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800d618:	f7f9 fc84 	bl	8006f24 <HAL_GetTick>
 800d61c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4618      	mov	r0, r3
 800d624:	f003 fd9e 	bl	8011164 <SDMMC_CmdGoIdleState>
 800d628:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d001      	beq.n	800d634 <SD_PowerON+0x30>
  {
    return errorstate;
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	e0f2      	b.n	800d81a <SD_PowerON+0x216>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4618      	mov	r0, r3
 800d63a:	f003 fdb1 	bl	80111a0 <SDMMC_CmdOperCond>
 800d63e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00d      	beq.n	800d662 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4618      	mov	r0, r3
 800d652:	f003 fd87 	bl	8011164 <SDMMC_CmdGoIdleState>
 800d656:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d004      	beq.n	800d668 <SD_PowerON+0x64>
    {
      return errorstate;
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	e0db      	b.n	800d81a <SD_PowerON+0x216>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2201      	movs	r2, #1
 800d666:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d137      	bne.n	800d6e0 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2100      	movs	r1, #0
 800d676:	4618      	mov	r0, r3
 800d678:	f003 fdb2 	bl	80111e0 <SDMMC_CmdAppCommand>
 800d67c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d02d      	beq.n	800d6e0 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d684:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d688:	e0c7      	b.n	800d81a <SD_PowerON+0x216>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2100      	movs	r1, #0
 800d690:	4618      	mov	r0, r3
 800d692:	f003 fda5 	bl	80111e0 <SDMMC_CmdAppCommand>
 800d696:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <SD_PowerON+0x9e>
    {
      return errorstate;
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	e0bb      	b.n	800d81a <SD_PowerON+0x216>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	495f      	ldr	r1, [pc, #380]	; (800d824 <SD_PowerON+0x220>)
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f003 fdbc 	bl	8011226 <SDMMC_CmdAppOperCommand>
 800d6ae:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d002      	beq.n	800d6bc <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d6b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d6ba:	e0ae      	b.n	800d81a <SD_PowerON+0x216>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f003 fc05 	bl	8010ed2 <SDMMC_GetResponse>
 800d6c8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	0fdb      	lsrs	r3, r3, #31
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d101      	bne.n	800d6d6 <SD_PowerON+0xd2>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e000      	b.n	800d6d8 <SD_PowerON+0xd4>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	61bb      	str	r3, [r7, #24]

    count++;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d802      	bhi.n	800d6f0 <SD_PowerON+0xec>
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d0cc      	beq.n	800d68a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d902      	bls.n	800d700 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d6fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d6fe:	e08c      	b.n	800d81a <SD_PowerON+0x216>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d706:	2b00      	cmp	r3, #0
 800d708:	f000 8083 	beq.w	800d812 <SD_PowerON+0x20e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2201      	movs	r2, #1
 800d710:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	699b      	ldr	r3, [r3, #24]
 800d716:	2b01      	cmp	r3, #1
 800d718:	d17e      	bne.n	800d818 <SD_PowerON+0x214>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d720:	2b00      	cmp	r3, #0
 800d722:	d079      	beq.n	800d818 <SD_PowerON+0x214>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d72a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f042 0208 	orr.w	r2, r2, #8
 800d73a:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4618      	mov	r0, r3
 800d742:	f003 fe7b 	bl	801143c <SDMMC_CmdVoltageSwitch>
 800d746:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00c      	beq.n	800d768 <SD_PowerON+0x164>
        {
          return errorstate;
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	e063      	b.n	800d81a <SD_PowerON+0x216>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d752:	f7f9 fbe7 	bl	8006f24 <HAL_GetTick>
 800d756:	4602      	mov	r2, r0
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	1ad3      	subs	r3, r2, r3
 800d75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d760:	d102      	bne.n	800d768 <SD_PowerON+0x164>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800d762:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d766:	e058      	b.n	800d81a <SD_PowerON+0x216>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d76e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d772:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d776:	d1ec      	bne.n	800d752 <SD_PowerON+0x14e>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d780:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d78c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d790:	d002      	beq.n	800d798 <SD_PowerON+0x194>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800d792:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d796:	e040      	b.n	800d81a <SD_PowerON+0x216>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800d798:	2001      	movs	r0, #1
 800d79a:	f000 fb49 	bl	800de30 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f042 0204 	orr.w	r2, r2, #4
 800d7ac:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d7ae:	e00a      	b.n	800d7c6 <SD_PowerON+0x1c2>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d7b0:	f7f9 fbb8 	bl	8006f24 <HAL_GetTick>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7be:	d102      	bne.n	800d7c6 <SD_PowerON+0x1c2>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800d7c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7c4:	e029      	b.n	800d81a <SD_PowerON+0x216>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d7d4:	d1ec      	bne.n	800d7b0 <SD_PowerON+0x1ac>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d7de:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d7ee:	d102      	bne.n	800d7f6 <SD_PowerON+0x1f2>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d7f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d7f4:	e011      	b.n	800d81a <SD_PowerON+0x216>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2213      	movs	r2, #19
 800d7fc:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f04f 32ff 	mov.w	r2, #4294967295
 800d806:	639a      	str	r2, [r3, #56]	; 0x38
        }

        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d80e:	65da      	str	r2, [r3, #92]	; 0x5c
 800d810:	e002      	b.n	800d818 <SD_PowerON+0x214>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3720      	adds	r7, #32
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	c1100000 	.word	0xc1100000

0800d828 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b08c      	sub	sp, #48	; 0x30
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d832:	f7f9 fb77 	bl	8006f24 <HAL_GetTick>
 800d836:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2100      	movs	r1, #0
 800d842:	4618      	mov	r0, r3
 800d844:	f003 fb45 	bl	8010ed2 <SDMMC_GetResponse>
 800d848:	4603      	mov	r3, r0
 800d84a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d84e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d852:	d102      	bne.n	800d85a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d854:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d858:	e0b0      	b.n	800d9bc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2140      	movs	r1, #64	; 0x40
 800d860:	4618      	mov	r0, r3
 800d862:	f003 fb75 	bl	8010f50 <SDMMC_CmdBlockLength>
 800d866:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d868:	6a3b      	ldr	r3, [r7, #32]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d005      	beq.n	800d87a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d876:	6a3b      	ldr	r3, [r7, #32]
 800d878:	e0a0      	b.n	800d9bc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d882:	041b      	lsls	r3, r3, #16
 800d884:	4619      	mov	r1, r3
 800d886:	4610      	mov	r0, r2
 800d888:	f003 fcaa 	bl	80111e0 <SDMMC_CmdAppCommand>
 800d88c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d88e:	6a3b      	ldr	r3, [r7, #32]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d005      	beq.n	800d8a0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d89c:	6a3b      	ldr	r3, [r7, #32]
 800d89e:	e08d      	b.n	800d9bc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d8a6:	2340      	movs	r3, #64	; 0x40
 800d8a8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d8aa:	2360      	movs	r3, #96	; 0x60
 800d8ac:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d8ae:	2302      	movs	r3, #2
 800d8b0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f107 0208 	add.w	r2, r7, #8
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f003 fb17 	bl	8010ef8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f003 fd92 	bl	80113f8 <SDMMC_CmdStatusRegister>
 800d8d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d02b      	beq.n	800d934 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	e069      	b.n	800d9bc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d013      	beq.n	800d91e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8fa:	e00d      	b.n	800d918 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4618      	mov	r0, r3
 800d902:	f003 fa71 	bl	8010de8 <SDMMC_ReadFIFO>
 800d906:	4602      	mov	r2, r0
 800d908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90a:	601a      	str	r2, [r3, #0]
        pData++;
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	3304      	adds	r3, #4
 800d910:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800d912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d914:	3301      	adds	r3, #1
 800d916:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91a:	2b07      	cmp	r3, #7
 800d91c:	d9ee      	bls.n	800d8fc <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d91e:	f7f9 fb01 	bl	8006f24 <HAL_GetTick>
 800d922:	4602      	mov	r2, r0
 800d924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d926:	1ad3      	subs	r3, r2, r3
 800d928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d92c:	d102      	bne.n	800d934 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d92e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d932:	e043      	b.n	800d9bc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d93a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d0d2      	beq.n	800d8e8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d948:	f003 0308 	and.w	r3, r3, #8
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d001      	beq.n	800d954 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d950:	2308      	movs	r3, #8
 800d952:	e033      	b.n	800d9bc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d95a:	f003 0302 	and.w	r3, r3, #2
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d001      	beq.n	800d966 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d962:	2302      	movs	r3, #2
 800d964:	e02a      	b.n	800d9bc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d96c:	f003 0320 	and.w	r3, r3, #32
 800d970:	2b00      	cmp	r3, #0
 800d972:	d017      	beq.n	800d9a4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d974:	2320      	movs	r3, #32
 800d976:	e021      	b.n	800d9bc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f003 fa33 	bl	8010de8 <SDMMC_ReadFIFO>
 800d982:	4602      	mov	r2, r0
 800d984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d986:	601a      	str	r2, [r3, #0]
    pData++;
 800d988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98a:	3304      	adds	r3, #4
 800d98c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d98e:	f7f9 fac9 	bl	8006f24 <HAL_GetTick>
 800d992:	4602      	mov	r2, r0
 800d994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d99c:	d102      	bne.n	800d9a4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d99e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9a2:	e00b      	b.n	800d9bc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d1e2      	bne.n	800d978 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4a03      	ldr	r2, [pc, #12]	; (800d9c4 <SD_SendSDStatus+0x19c>)
 800d9b8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d9ba:	2300      	movs	r3, #0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3730      	adds	r7, #48	; 0x30
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	18000f3a 	.word	0x18000f3a

0800d9c8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b084      	sub	sp, #16
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d102      	bne.n	800d9de <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d9d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d9dc:	e018      	b.n	800da10 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9e6:	041b      	lsls	r3, r3, #16
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f003 fce1 	bl	80113b2 <SDMMC_CmdSendStatus>
 800d9f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d001      	beq.n	800d9fc <SD_SendStatus+0x34>
  {
    return errorstate;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	e009      	b.n	800da10 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2100      	movs	r1, #0
 800da02:	4618      	mov	r0, r3
 800da04:	f003 fa65 	bl	8010ed2 <SDMMC_GetResponse>
 800da08:	4602      	mov	r2, r0
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b086      	sub	sp, #24
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800da20:	2300      	movs	r3, #0
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	2300      	movs	r3, #0
 800da26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2100      	movs	r1, #0
 800da2e:	4618      	mov	r0, r3
 800da30:	f003 fa4f 	bl	8010ed2 <SDMMC_GetResponse>
 800da34:	4603      	mov	r3, r0
 800da36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da3e:	d102      	bne.n	800da46 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800da40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da44:	e02f      	b.n	800daa6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800da46:	f107 030c 	add.w	r3, r7, #12
 800da4a:	4619      	mov	r1, r3
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f879 	bl	800db44 <SD_FindSCR>
 800da52:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d001      	beq.n	800da5e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	e023      	b.n	800daa6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800da64:	2b00      	cmp	r3, #0
 800da66:	d01c      	beq.n	800daa2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da70:	041b      	lsls	r3, r3, #16
 800da72:	4619      	mov	r1, r3
 800da74:	4610      	mov	r0, r2
 800da76:	f003 fbb3 	bl	80111e0 <SDMMC_CmdAppCommand>
 800da7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	e00f      	b.n	800daa6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2102      	movs	r1, #2
 800da8c:	4618      	mov	r0, r3
 800da8e:	f003 fbea 	bl	8011266 <SDMMC_CmdBusWidth>
 800da92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d001      	beq.n	800da9e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	e003      	b.n	800daa6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800da9e:	2300      	movs	r3, #0
 800daa0:	e001      	b.n	800daa6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800daa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3718      	adds	r7, #24
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b086      	sub	sp, #24
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dab6:	2300      	movs	r3, #0
 800dab8:	60fb      	str	r3, [r7, #12]
 800daba:	2300      	movs	r3, #0
 800dabc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2100      	movs	r1, #0
 800dac4:	4618      	mov	r0, r3
 800dac6:	f003 fa04 	bl	8010ed2 <SDMMC_GetResponse>
 800daca:	4603      	mov	r3, r0
 800dacc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dad4:	d102      	bne.n	800dadc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dada:	e02f      	b.n	800db3c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dadc:	f107 030c 	add.w	r3, r7, #12
 800dae0:	4619      	mov	r1, r3
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f82e 	bl	800db44 <SD_FindSCR>
 800dae8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d001      	beq.n	800daf4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	e023      	b.n	800db3c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d01c      	beq.n	800db38 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db06:	041b      	lsls	r3, r3, #16
 800db08:	4619      	mov	r1, r3
 800db0a:	4610      	mov	r0, r2
 800db0c:	f003 fb68 	bl	80111e0 <SDMMC_CmdAppCommand>
 800db10:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d001      	beq.n	800db1c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	e00f      	b.n	800db3c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2100      	movs	r1, #0
 800db22:	4618      	mov	r0, r3
 800db24:	f003 fb9f 	bl	8011266 <SDMMC_CmdBusWidth>
 800db28:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d001      	beq.n	800db34 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	e003      	b.n	800db3c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800db34:	2300      	movs	r3, #0
 800db36:	e001      	b.n	800db3c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800db38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3718      	adds	r7, #24
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b08e      	sub	sp, #56	; 0x38
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800db4e:	f7f9 f9e9 	bl	8006f24 <HAL_GetTick>
 800db52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800db54:	2300      	movs	r3, #0
 800db56:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800db58:	2300      	movs	r3, #0
 800db5a:	60bb      	str	r3, [r7, #8]
 800db5c:	2300      	movs	r3, #0
 800db5e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2108      	movs	r1, #8
 800db6a:	4618      	mov	r0, r3
 800db6c:	f003 f9f0 	bl	8010f50 <SDMMC_CmdBlockLength>
 800db70:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800db72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db74:	2b00      	cmp	r3, #0
 800db76:	d001      	beq.n	800db7c <SD_FindSCR+0x38>
  {
    return errorstate;
 800db78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7a:	e0ad      	b.n	800dcd8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db84:	041b      	lsls	r3, r3, #16
 800db86:	4619      	mov	r1, r3
 800db88:	4610      	mov	r0, r2
 800db8a:	f003 fb29 	bl	80111e0 <SDMMC_CmdAppCommand>
 800db8e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	2b00      	cmp	r3, #0
 800db94:	d001      	beq.n	800db9a <SD_FindSCR+0x56>
  {
    return errorstate;
 800db96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db98:	e09e      	b.n	800dcd8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db9a:	f04f 33ff 	mov.w	r3, #4294967295
 800db9e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dba0:	2308      	movs	r3, #8
 800dba2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dba4:	2330      	movs	r3, #48	; 0x30
 800dba6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dba8:	2302      	movs	r3, #2
 800dbaa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dbac:	2300      	movs	r3, #0
 800dbae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f107 0210 	add.w	r2, r7, #16
 800dbbc:	4611      	mov	r1, r2
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f003 f99a 	bl	8010ef8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f003 fb6f 	bl	80112ac <SDMMC_CmdSendSCR>
 800dbce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d027      	beq.n	800dc26 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800dbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd8:	e07e      	b.n	800dcd8 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d113      	bne.n	800dc10 <SD_FindSCR+0xcc>
 800dbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d110      	bne.n	800dc10 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f003 f8f8 	bl	8010de8 <SDMMC_ReadFIFO>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f003 f8f1 	bl	8010de8 <SDMMC_ReadFIFO>
 800dc06:	4603      	mov	r3, r0
 800dc08:	60fb      	str	r3, [r7, #12]
      index++;
 800dc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dc10:	f7f9 f988 	bl	8006f24 <HAL_GetTick>
 800dc14:	4602      	mov	r2, r0
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	1ad3      	subs	r3, r2, r3
 800dc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc1e:	d102      	bne.n	800dc26 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dc20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc24:	e058      	b.n	800dcd8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc2c:	f240 532a 	movw	r3, #1322	; 0x52a
 800dc30:	4013      	ands	r3, r2
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d0d1      	beq.n	800dbda <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc3c:	f003 0308 	and.w	r3, r3, #8
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d005      	beq.n	800dc50 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2208      	movs	r2, #8
 800dc4a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dc4c:	2308      	movs	r3, #8
 800dc4e:	e043      	b.n	800dcd8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc56:	f003 0302 	and.w	r3, r3, #2
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d005      	beq.n	800dc6a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2202      	movs	r2, #2
 800dc64:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc66:	2302      	movs	r3, #2
 800dc68:	e036      	b.n	800dcd8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc70:	f003 0320 	and.w	r3, r3, #32
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d005      	beq.n	800dc84 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2220      	movs	r2, #32
 800dc7e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dc80:	2320      	movs	r3, #32
 800dc82:	e029      	b.n	800dcd8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a15      	ldr	r2, [pc, #84]	; (800dce0 <SD_FindSCR+0x19c>)
 800dc8a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	061a      	lsls	r2, r3, #24
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	021b      	lsls	r3, r3, #8
 800dc94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc98:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	0a1b      	lsrs	r3, r3, #8
 800dc9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dca2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	0e1b      	lsrs	r3, r3, #24
 800dca8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcac:	601a      	str	r2, [r3, #0]
    scr++;
 800dcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	061a      	lsls	r2, r3, #24
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	021b      	lsls	r3, r3, #8
 800dcbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dcc0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	0a1b      	lsrs	r3, r3, #8
 800dcc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dcca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	0e1b      	lsrs	r3, r3, #24
 800dcd0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dcd6:	2300      	movs	r3, #0
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3738      	adds	r7, #56	; 0x38
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	18000f3a 	.word	0x18000f3a

0800dce4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcf0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d03f      	beq.n	800dd7e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dcfe:	2300      	movs	r3, #0
 800dd00:	617b      	str	r3, [r7, #20]
 800dd02:	e033      	b.n	800dd6c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f003 f86d 	bl	8010de8 <SDMMC_ReadFIFO>
 800dd0e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	3b01      	subs	r3, #1
 800dd22:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	0a1b      	lsrs	r3, r3, #8
 800dd28:	b2da      	uxtb	r2, r3
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	3301      	adds	r3, #1
 800dd32:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	3b01      	subs	r3, #1
 800dd38:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	0c1b      	lsrs	r3, r3, #16
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	3301      	adds	r3, #1
 800dd48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	3b01      	subs	r3, #1
 800dd4e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	0e1b      	lsrs	r3, r3, #24
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	3b01      	subs	r3, #1
 800dd64:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	617b      	str	r3, [r7, #20]
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	2b07      	cmp	r3, #7
 800dd70:	d9c8      	bls.n	800dd04 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68fa      	ldr	r2, [r7, #12]
 800dd76:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	693a      	ldr	r2, [r7, #16]
 800dd7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800dd7e:	bf00      	nop
 800dd80:	3718      	adds	r7, #24
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b086      	sub	sp, #24
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a1b      	ldr	r3, [r3, #32]
 800dd92:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd98:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d043      	beq.n	800de28 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800dda0:	2300      	movs	r3, #0
 800dda2:	617b      	str	r3, [r7, #20]
 800dda4:	e037      	b.n	800de16 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	021a      	lsls	r2, r3, #8
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	041a      	lsls	r2, r3, #16
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	3301      	adds	r3, #1
 800dde0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	3b01      	subs	r3, #1
 800dde6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	061a      	lsls	r2, r3, #24
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f107 0208 	add.w	r2, r7, #8
 800de08:	4611      	mov	r1, r2
 800de0a:	4618      	mov	r0, r3
 800de0c:	f002 fff9 	bl	8010e02 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	3301      	adds	r3, #1
 800de14:	617b      	str	r3, [r7, #20]
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2b07      	cmp	r3, #7
 800de1a:	d9c4      	bls.n	800dda6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	68fa      	ldr	r2, [r7, #12]
 800de20:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	693a      	ldr	r2, [r7, #16]
 800de26:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800de28:	bf00      	nop
 800de2a:	3718      	adds	r7, #24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
 800de36:	4603      	mov	r3, r0
 800de38:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800de3a:	bf00      	nop
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr

0800de46 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800de46:	b480      	push	{r7}
 800de48:	b083      	sub	sp, #12
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800de4e:	bf00      	nop
 800de50:	370c      	adds	r7, #12
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr

0800de5a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800de5a:	b480      	push	{r7}
 800de5c:	b083      	sub	sp, #12
 800de5e:	af00      	add	r7, sp, #0
 800de60:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800de62:	bf00      	nop
 800de64:	370c      	adds	r7, #12
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800de6e:	b480      	push	{r7}
 800de70:	b083      	sub	sp, #12
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800de76:	bf00      	nop
 800de78:	370c      	adds	r7, #12
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr

0800de82 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800de82:	b480      	push	{r7}
 800de84:	b083      	sub	sp, #12
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800de8a:	bf00      	nop
 800de8c:	370c      	adds	r7, #12
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr
	...

0800de98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d101      	bne.n	800deaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dea6:	2301      	movs	r3, #1
 800dea8:	e0a0      	b.n	800dfec <HAL_SPI_Init+0x154>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d12a      	bne.n	800df12 <HAL_SPI_Init+0x7a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	4a4b      	ldr	r2, [pc, #300]	; (800dff4 <HAL_SPI_Init+0x15c>)
 800dec8:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	4a4a      	ldr	r2, [pc, #296]	; (800dff8 <HAL_SPI_Init+0x160>)
 800dece:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	4a4a      	ldr	r2, [pc, #296]	; (800dffc <HAL_SPI_Init+0x164>)
 800ded4:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	4a49      	ldr	r2, [pc, #292]	; (800e000 <HAL_SPI_Init+0x168>)
 800deda:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	4a49      	ldr	r2, [pc, #292]	; (800e004 <HAL_SPI_Init+0x16c>)
 800dee0:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4a48      	ldr	r2, [pc, #288]	; (800e008 <HAL_SPI_Init+0x170>)
 800dee6:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4a48      	ldr	r2, [pc, #288]	; (800e00c <HAL_SPI_Init+0x174>)
 800deec:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	4a47      	ldr	r2, [pc, #284]	; (800e010 <HAL_SPI_Init+0x178>)
 800def2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800defc:	2b00      	cmp	r3, #0
 800defe:	d103      	bne.n	800df08 <HAL_SPI_Init+0x70>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	4a44      	ldr	r2, [pc, #272]	; (800e014 <HAL_SPI_Init+0x17c>)
 800df04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2202      	movs	r2, #2
 800df16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df28:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df32:	d902      	bls.n	800df3a <HAL_SPI_Init+0xa2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800df34:	2300      	movs	r3, #0
 800df36:	60fb      	str	r3, [r7, #12]
 800df38:	e002      	b.n	800df40 <HAL_SPI_Init+0xa8>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800df3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df3e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800df48:	d007      	beq.n	800df5a <HAL_SPI_Init+0xc2>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df52:	d002      	beq.n	800df5a <HAL_SPI_Init+0xc2>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10b      	bne.n	800df7a <HAL_SPI_Init+0xe2>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df6a:	d903      	bls.n	800df74 <HAL_SPI_Init+0xdc>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2202      	movs	r2, #2
 800df70:	631a      	str	r2, [r3, #48]	; 0x30
 800df72:	e002      	b.n	800df7a <HAL_SPI_Init+0xe2>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2201      	movs	r2, #1
 800df78:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	685a      	ldr	r2, [r3, #4]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	431a      	orrs	r2, r3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	691b      	ldr	r3, [r3, #16]
 800df88:	431a      	orrs	r2, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	695b      	ldr	r3, [r3, #20]
 800df8e:	431a      	orrs	r2, r3
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	699b      	ldr	r3, [r3, #24]
 800df94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df98:	431a      	orrs	r2, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	69db      	ldr	r3, [r3, #28]
 800df9e:	431a      	orrs	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6a1b      	ldr	r3, [r3, #32]
 800dfa4:	ea42 0103 	orr.w	r1, r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	430a      	orrs	r2, r1
 800dfb2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	699b      	ldr	r3, [r3, #24]
 800dfb8:	0c1b      	lsrs	r3, r3, #16
 800dfba:	f003 0204 	and.w	r2, r3, #4
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc2:	431a      	orrs	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc8:	431a      	orrs	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	ea42 0103 	orr.w	r1, r2, r3
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	430a      	orrs	r2, r1
 800dfda:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800dfea:	2300      	movs	r3, #0
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3710      	adds	r7, #16
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	0800e75d 	.word	0x0800e75d
 800dff8:	0800e771 	.word	0x0800e771
 800dffc:	0800e785 	.word	0x0800e785
 800e000:	0800e799 	.word	0x0800e799
 800e004:	0800e7ad 	.word	0x0800e7ad
 800e008:	0800e7c1 	.word	0x0800e7c1
 800e00c:	0800e7d5 	.word	0x0800e7d5
 800e010:	0800e7e9 	.word	0x0800e7e9
 800e014:	0800e019 	.word	0x0800e019

0800e018 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800e020:	bf00      	nop
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <HAL_SPI_RegisterCallback>:
  * @param  CallbackID ID of the callback to be registered
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID, pSPI_CallbackTypeDef pCallback)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b087      	sub	sp, #28
 800e030:	af00      	add	r7, sp, #0
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	460b      	mov	r3, r1
 800e036:	607a      	str	r2, [r7, #4]
 800e038:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800e03a:	2300      	movs	r3, #0
 800e03c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d107      	bne.n	800e054 <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e048:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800e050:	2301      	movs	r3, #1
 800e052:	e08b      	b.n	800e16c <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d101      	bne.n	800e062 <HAL_SPI_RegisterCallback+0x36>
 800e05e:	2302      	movs	r3, #2
 800e060:	e084      	b.n	800e16c <HAL_SPI_RegisterCallback+0x140>
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2201      	movs	r2, #1
 800e066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e070:	b2db      	uxtb	r3, r3
 800e072:	2b01      	cmp	r3, #1
 800e074:	d14e      	bne.n	800e114 <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 800e076:	7afb      	ldrb	r3, [r7, #11]
 800e078:	2b09      	cmp	r3, #9
 800e07a:	d842      	bhi.n	800e102 <HAL_SPI_RegisterCallback+0xd6>
 800e07c:	a201      	add	r2, pc, #4	; (adr r2, 800e084 <HAL_SPI_RegisterCallback+0x58>)
 800e07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e082:	bf00      	nop
 800e084:	0800e0ad 	.word	0x0800e0ad
 800e088:	0800e0b5 	.word	0x0800e0b5
 800e08c:	0800e0bd 	.word	0x0800e0bd
 800e090:	0800e0c5 	.word	0x0800e0c5
 800e094:	0800e0cd 	.word	0x0800e0cd
 800e098:	0800e0d5 	.word	0x0800e0d5
 800e09c:	0800e0dd 	.word	0x0800e0dd
 800e0a0:	0800e0e5 	.word	0x0800e0e5
 800e0a4:	0800e0ef 	.word	0x0800e0ef
 800e0a8:	0800e0f9 	.word	0x0800e0f9
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800e0b2:	e056      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	687a      	ldr	r2, [r7, #4]
 800e0b8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800e0ba:	e052      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800e0c2:	e04e      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800e0ca:	e04a      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800e0d2:	e046      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800e0da:	e042      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800e0e2:	e03e      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800e0ec:	e039      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800e0f6:	e034      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800e100:	e02f      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e106:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	75fb      	strb	r3, [r7, #23]
        break;
 800e112:	e026      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d118      	bne.n	800e152 <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 800e120:	7afb      	ldrb	r3, [r7, #11]
 800e122:	2b08      	cmp	r3, #8
 800e124:	d002      	beq.n	800e12c <HAL_SPI_RegisterCallback+0x100>
 800e126:	2b09      	cmp	r3, #9
 800e128:	d005      	beq.n	800e136 <HAL_SPI_RegisterCallback+0x10a>
 800e12a:	e009      	b.n	800e140 <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800e134:	e015      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800e13e:	e010      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e144:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800e14c:	2301      	movs	r3, #1
 800e14e:	75fb      	strb	r3, [r7, #23]
        break;
 800e150:	e007      	b.n	800e162 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e156:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 800e15e:	2301      	movs	r3, #1
 800e160:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 800e16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	371c      	adds	r7, #28
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	603b      	str	r3, [r7, #0]
 800e184:	4613      	mov	r3, r2
 800e186:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e188:	2300      	movs	r3, #0
 800e18a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e192:	2b01      	cmp	r3, #1
 800e194:	d101      	bne.n	800e19a <HAL_SPI_Transmit+0x22>
 800e196:	2302      	movs	r3, #2
 800e198:	e150      	b.n	800e43c <HAL_SPI_Transmit+0x2c4>
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2201      	movs	r2, #1
 800e19e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1a2:	f7f8 febf 	bl	8006f24 <HAL_GetTick>
 800e1a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e1a8:	88fb      	ldrh	r3, [r7, #6]
 800e1aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d002      	beq.n	800e1be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e1b8:	2302      	movs	r3, #2
 800e1ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e1bc:	e135      	b.n	800e42a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <HAL_SPI_Transmit+0x52>
 800e1c4:	88fb      	ldrh	r3, [r7, #6]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d102      	bne.n	800e1d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e1ce:	e12c      	b.n	800e42a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2203      	movs	r2, #3
 800e1d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	68ba      	ldr	r2, [r7, #8]
 800e1e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	88fa      	ldrh	r2, [r7, #6]
 800e1e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	88fa      	ldrh	r2, [r7, #6]
 800e1ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2200      	movs	r2, #0
 800e202:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2200      	movs	r2, #0
 800e210:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e21a:	d107      	bne.n	800e22c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	681a      	ldr	r2, [r3, #0]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e22a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e236:	2b40      	cmp	r3, #64	; 0x40
 800e238:	d007      	beq.n	800e24a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e248:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	68db      	ldr	r3, [r3, #12]
 800e24e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e252:	d94b      	bls.n	800e2ec <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d002      	beq.n	800e262 <HAL_SPI_Transmit+0xea>
 800e25c:	8afb      	ldrh	r3, [r7, #22]
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d13e      	bne.n	800e2e0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e266:	881a      	ldrh	r2, [r3, #0]
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e272:	1c9a      	adds	r2, r3, #2
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	3b01      	subs	r3, #1
 800e280:	b29a      	uxth	r2, r3
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e286:	e02b      	b.n	800e2e0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	f003 0302 	and.w	r3, r3, #2
 800e292:	2b02      	cmp	r3, #2
 800e294:	d112      	bne.n	800e2bc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e29a:	881a      	ldrh	r2, [r3, #0]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2a6:	1c9a      	adds	r2, r3, #2
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	3b01      	subs	r3, #1
 800e2b4:	b29a      	uxth	r2, r3
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e2ba:	e011      	b.n	800e2e0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2bc:	f7f8 fe32 	bl	8006f24 <HAL_GetTick>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	69bb      	ldr	r3, [r7, #24]
 800e2c4:	1ad3      	subs	r3, r2, r3
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d803      	bhi.n	800e2d4 <HAL_SPI_Transmit+0x15c>
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d2:	d102      	bne.n	800e2da <HAL_SPI_Transmit+0x162>
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d102      	bne.n	800e2e0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800e2da:	2303      	movs	r3, #3
 800e2dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e2de:	e0a4      	b.n	800e42a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1ce      	bne.n	800e288 <HAL_SPI_Transmit+0x110>
 800e2ea:	e07c      	b.n	800e3e6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d002      	beq.n	800e2fa <HAL_SPI_Transmit+0x182>
 800e2f4:	8afb      	ldrh	r3, [r7, #22]
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d170      	bne.n	800e3dc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	2b01      	cmp	r3, #1
 800e302:	d912      	bls.n	800e32a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e308:	881a      	ldrh	r2, [r3, #0]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e314:	1c9a      	adds	r2, r3, #2
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e31e:	b29b      	uxth	r3, r3
 800e320:	3b02      	subs	r3, #2
 800e322:	b29a      	uxth	r2, r3
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e328:	e058      	b.n	800e3dc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	330c      	adds	r3, #12
 800e334:	7812      	ldrb	r2, [r2, #0]
 800e336:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e33c:	1c5a      	adds	r2, r3, #1
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e346:	b29b      	uxth	r3, r3
 800e348:	3b01      	subs	r3, #1
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e350:	e044      	b.n	800e3dc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	f003 0302 	and.w	r3, r3, #2
 800e35c:	2b02      	cmp	r3, #2
 800e35e:	d12b      	bne.n	800e3b8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e364:	b29b      	uxth	r3, r3
 800e366:	2b01      	cmp	r3, #1
 800e368:	d912      	bls.n	800e390 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e36e:	881a      	ldrh	r2, [r3, #0]
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e37a:	1c9a      	adds	r2, r3, #2
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e384:	b29b      	uxth	r3, r3
 800e386:	3b02      	subs	r3, #2
 800e388:	b29a      	uxth	r2, r3
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e38e:	e025      	b.n	800e3dc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	330c      	adds	r3, #12
 800e39a:	7812      	ldrb	r2, [r2, #0]
 800e39c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3a2:	1c5a      	adds	r2, r3, #1
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	b29a      	uxth	r2, r3
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e3b6:	e011      	b.n	800e3dc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3b8:	f7f8 fdb4 	bl	8006f24 <HAL_GetTick>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	683a      	ldr	r2, [r7, #0]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d803      	bhi.n	800e3d0 <HAL_SPI_Transmit+0x258>
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ce:	d102      	bne.n	800e3d6 <HAL_SPI_Transmit+0x25e>
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d102      	bne.n	800e3dc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800e3d6:	2303      	movs	r3, #3
 800e3d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e3da:	e026      	b.n	800e42a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d1b5      	bne.n	800e352 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e3e6:	69ba      	ldr	r2, [r7, #24]
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	f000 fc02 	bl	800ebf4 <SPI_EndRxTxTransaction>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d002      	beq.n	800e3fc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2220      	movs	r2, #32
 800e3fa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	689b      	ldr	r3, [r3, #8]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d10a      	bne.n	800e41a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e404:	2300      	movs	r3, #0
 800e406:	613b      	str	r3, [r7, #16]
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	613b      	str	r3, [r7, #16]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	689b      	ldr	r3, [r3, #8]
 800e416:	613b      	str	r3, [r7, #16]
 800e418:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d002      	beq.n	800e428 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800e422:	2301      	movs	r3, #1
 800e424:	77fb      	strb	r3, [r7, #31]
 800e426:	e000      	b.n	800e42a <HAL_SPI_Transmit+0x2b2>
  }

error:
 800e428:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2201      	movs	r2, #1
 800e42e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2200      	movs	r2, #0
 800e436:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e43a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3720      	adds	r7, #32
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b086      	sub	sp, #24
 800e448:	af00      	add	r7, sp, #0
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	607a      	str	r2, [r7, #4]
 800e450:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d101      	bne.n	800e464 <HAL_SPI_TransmitReceive_DMA+0x20>
 800e460:	2302      	movs	r3, #2
 800e462:	e16c      	b.n	800e73e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2201      	movs	r2, #1
 800e468:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e472:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800e47a:	7dbb      	ldrb	r3, [r7, #22]
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d00d      	beq.n	800e49c <HAL_SPI_TransmitReceive_DMA+0x58>
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e486:	d106      	bne.n	800e496 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d102      	bne.n	800e496 <HAL_SPI_TransmitReceive_DMA+0x52>
 800e490:	7dbb      	ldrb	r3, [r7, #22]
 800e492:	2b04      	cmp	r3, #4
 800e494:	d002      	beq.n	800e49c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800e496:	2302      	movs	r3, #2
 800e498:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e49a:	e14b      	b.n	800e734 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d005      	beq.n	800e4ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d002      	beq.n	800e4ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e4a8:	887b      	ldrh	r3, [r7, #2]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d102      	bne.n	800e4b4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e4b2:	e13f      	b.n	800e734 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	2b04      	cmp	r3, #4
 800e4be:	d003      	beq.n	800e4c8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2205      	movs	r2, #5
 800e4c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	68ba      	ldr	r2, [r7, #8]
 800e4d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	887a      	ldrh	r2, [r7, #2]
 800e4d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	887a      	ldrh	r2, [r7, #2]
 800e4de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	887a      	ldrh	r2, [r7, #2]
 800e4ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	887a      	ldrh	r2, [r7, #2]
 800e4f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2200      	movs	r2, #0
 800e500:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	685a      	ldr	r2, [r3, #4]
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800e510:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e51a:	d908      	bls.n	800e52e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	685a      	ldr	r2, [r3, #4]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e52a:	605a      	str	r2, [r3, #4]
 800e52c:	e06f      	b.n	800e60e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	685a      	ldr	r2, [r3, #4]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e53c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e542:	699b      	ldr	r3, [r3, #24]
 800e544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e548:	d126      	bne.n	800e598 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e54e:	f003 0301 	and.w	r3, r3, #1
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10f      	bne.n	800e576 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	685a      	ldr	r2, [r3, #4]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e564:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	085b      	lsrs	r3, r3, #1
 800e56e:	b29a      	uxth	r2, r3
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e574:	e010      	b.n	800e598 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	685a      	ldr	r2, [r3, #4]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e584:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	085b      	lsrs	r3, r3, #1
 800e58e:	b29b      	uxth	r3, r3
 800e590:	3301      	adds	r3, #1
 800e592:	b29a      	uxth	r2, r3
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e59c:	699b      	ldr	r3, [r3, #24]
 800e59e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5a2:	d134      	bne.n	800e60e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	685a      	ldr	r2, [r3, #4]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e5b2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	f003 0301 	and.w	r3, r3, #1
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d111      	bne.n	800e5e8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	685a      	ldr	r2, [r3, #4]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e5d2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	085b      	lsrs	r3, r3, #1
 800e5de:	b29a      	uxth	r2, r3
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e5e6:	e012      	b.n	800e60e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	685a      	ldr	r2, [r3, #4]
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e5f6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	085b      	lsrs	r3, r3, #1
 800e602:	b29b      	uxth	r3, r3
 800e604:	3301      	adds	r3, #1
 800e606:	b29a      	uxth	r2, r3
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e614:	b2db      	uxtb	r3, r3
 800e616:	2b04      	cmp	r3, #4
 800e618:	d108      	bne.n	800e62c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e61e:	4a4a      	ldr	r2, [pc, #296]	; (800e748 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800e620:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e626:	4a49      	ldr	r2, [pc, #292]	; (800e74c <HAL_SPI_TransmitReceive_DMA+0x308>)
 800e628:	62da      	str	r2, [r3, #44]	; 0x2c
 800e62a:	e007      	b.n	800e63c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e630:	4a47      	ldr	r2, [pc, #284]	; (800e750 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800e632:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e638:	4a46      	ldr	r2, [pc, #280]	; (800e754 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800e63a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e640:	4a45      	ldr	r2, [pc, #276]	; (800e758 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800e642:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e648:	2200      	movs	r2, #0
 800e64a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	330c      	adds	r3, #12
 800e656:	4619      	mov	r1, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e65c:	461a      	mov	r2, r3
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e664:	b29b      	uxth	r3, r3
 800e666:	f7fa fa87 	bl	8008b78 <HAL_DMA_Start_IT>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00c      	beq.n	800e68a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e674:	f043 0210 	orr.w	r2, r3, #16
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e67c:	2301      	movs	r3, #1
 800e67e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2201      	movs	r2, #1
 800e684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e688:	e054      	b.n	800e734 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	685a      	ldr	r2, [r3, #4]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f042 0201 	orr.w	r2, r2, #1
 800e698:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e69e:	2200      	movs	r2, #0
 800e6a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	330c      	adds	r3, #12
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	f7fa fa51 	bl	8008b78 <HAL_DMA_Start_IT>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00c      	beq.n	800e6f6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6e0:	f043 0210 	orr.w	r2, r3, #16
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e6f4:	e01e      	b.n	800e734 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e700:	2b40      	cmp	r3, #64	; 0x40
 800e702:	d007      	beq.n	800e714 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e712:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	685a      	ldr	r2, [r3, #4]
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f042 0220 	orr.w	r2, r2, #32
 800e722:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	685a      	ldr	r2, [r3, #4]
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f042 0202 	orr.w	r2, r2, #2
 800e732:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2200      	movs	r2, #0
 800e738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3718      	adds	r7, #24
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	0800e919 	.word	0x0800e919
 800e74c:	0800e7fd 	.word	0x0800e7fd
 800e750:	0800e937 	.word	0x0800e937
 800e754:	0800e885 	.word	0x0800e885
 800e758:	0800e955 	.word	0x0800e955

0800e75c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e764:	bf00      	nop
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e7a0:	bf00      	nop
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e7b4:	bf00      	nop
 800e7b6:	370c      	adds	r7, #12
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e7c8:	bf00      	nop
 800e7ca:	370c      	adds	r7, #12
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b083      	sub	sp, #12
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e7dc:	bf00      	nop
 800e7de:	370c      	adds	r7, #12
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800e7f0:	bf00      	nop
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e808:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e80a:	f7f8 fb8b 	bl	8006f24 <HAL_GetTick>
 800e80e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f003 0320 	and.w	r3, r3, #32
 800e81a:	2b20      	cmp	r3, #32
 800e81c:	d02b      	beq.n	800e876 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	685a      	ldr	r2, [r3, #4]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f022 0220 	bic.w	r2, r2, #32
 800e82c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	685a      	ldr	r2, [r3, #4]
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f022 0203 	bic.w	r2, r2, #3
 800e83c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	2164      	movs	r1, #100	; 0x64
 800e842:	68f8      	ldr	r0, [r7, #12]
 800e844:	f000 f97e 	bl	800eb44 <SPI_EndRxTransaction>
 800e848:	4603      	mov	r3, r0
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d002      	beq.n	800e854 <SPI_DMAReceiveCplt+0x58>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2220      	movs	r2, #32
 800e852:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2200      	movs	r2, #0
 800e858:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2201      	movs	r2, #1
 800e860:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d004      	beq.n	800e876 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e870:	68f8      	ldr	r0, [r7, #12]
 800e872:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e874:	e003      	b.n	800e87e <SPI_DMAReceiveCplt+0x82>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e890:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e892:	f7f8 fb47 	bl	8006f24 <HAL_GetTick>
 800e896:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f003 0320 	and.w	r3, r3, #32
 800e8a2:	2b20      	cmp	r3, #32
 800e8a4:	d031      	beq.n	800e90a <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	685a      	ldr	r2, [r3, #4]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f022 0220 	bic.w	r2, r2, #32
 800e8b4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e8b6:	68ba      	ldr	r2, [r7, #8]
 800e8b8:	2164      	movs	r1, #100	; 0x64
 800e8ba:	68f8      	ldr	r0, [r7, #12]
 800e8bc:	f000 f99a 	bl	800ebf4 <SPI_EndRxTxTransaction>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d005      	beq.n	800e8d2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8ca:	f043 0220 	orr.w	r2, r3, #32
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	685a      	ldr	r2, [r3, #4]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f022 0203 	bic.w	r2, r2, #3
 800e8e0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d004      	beq.n	800e90a <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e908:	e003      	b.n	800e912 <SPI_DMATransmitReceiveCplt+0x8e>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e90e:	68f8      	ldr	r0, [r7, #12]
 800e910:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e924:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e92e:	bf00      	nop
 800e930:	3710      	adds	r7, #16
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e936:	b580      	push	{r7, lr}
 800e938:	b084      	sub	sp, #16
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e942:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e948:	68f8      	ldr	r0, [r7, #12]
 800e94a:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e94c:	bf00      	nop
 800e94e:	3710      	adds	r7, #16
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e960:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	685a      	ldr	r2, [r3, #4]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f022 0203 	bic.w	r2, r2, #3
 800e970:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e976:	f043 0210 	orr.w	r2, r3, #16
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2201      	movs	r2, #1
 800e982:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e98e:	bf00      	nop
 800e990:	3710      	adds	r7, #16
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}

0800e996 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e996:	b580      	push	{r7, lr}
 800e998:	b084      	sub	sp, #16
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	60f8      	str	r0, [r7, #12]
 800e99e:	60b9      	str	r1, [r7, #8]
 800e9a0:	603b      	str	r3, [r7, #0]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e9a6:	e04c      	b.n	800ea42 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ae:	d048      	beq.n	800ea42 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e9b0:	f7f8 fab8 	bl	8006f24 <HAL_GetTick>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	683a      	ldr	r2, [r7, #0]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d902      	bls.n	800e9c6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d13d      	bne.n	800ea42 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	685a      	ldr	r2, [r3, #4]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e9d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9de:	d111      	bne.n	800ea04 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	689b      	ldr	r3, [r3, #8]
 800e9e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9e8:	d004      	beq.n	800e9f4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	689b      	ldr	r3, [r3, #8]
 800e9ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9f2:	d107      	bne.n	800ea04 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea0c:	d10f      	bne.n	800ea2e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ea1c:	601a      	str	r2, [r3, #0]
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2201      	movs	r2, #1
 800ea32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ea3e:	2303      	movs	r3, #3
 800ea40:	e00f      	b.n	800ea62 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	689a      	ldr	r2, [r3, #8]
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	4013      	ands	r3, r2
 800ea4c:	68ba      	ldr	r2, [r7, #8]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	bf0c      	ite	eq
 800ea52:	2301      	moveq	r3, #1
 800ea54:	2300      	movne	r3, #0
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	461a      	mov	r2, r3
 800ea5a:	79fb      	ldrb	r3, [r7, #7]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d1a3      	bne.n	800e9a8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b084      	sub	sp, #16
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	60f8      	str	r0, [r7, #12]
 800ea72:	60b9      	str	r1, [r7, #8]
 800ea74:	607a      	str	r2, [r7, #4]
 800ea76:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800ea78:	e057      	b.n	800eb2a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ea80:	d106      	bne.n	800ea90 <SPI_WaitFifoStateUntilTimeout+0x26>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d103      	bne.n	800ea90 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	330c      	adds	r3, #12
 800ea8e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea96:	d048      	beq.n	800eb2a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ea98:	f7f8 fa44 	bl	8006f24 <HAL_GetTick>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	1ad3      	subs	r3, r2, r3
 800eaa2:	683a      	ldr	r2, [r7, #0]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d902      	bls.n	800eaae <SPI_WaitFifoStateUntilTimeout+0x44>
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d13d      	bne.n	800eb2a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	685a      	ldr	r2, [r3, #4]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eabc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eac6:	d111      	bne.n	800eaec <SPI_WaitFifoStateUntilTimeout+0x82>
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ead0:	d004      	beq.n	800eadc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	689b      	ldr	r3, [r3, #8]
 800ead6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eada:	d107      	bne.n	800eaec <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eaea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eaf4:	d10f      	bne.n	800eb16 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eb04:	601a      	str	r2, [r3, #0]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eb14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2201      	movs	r2, #1
 800eb1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800eb26:	2303      	movs	r3, #3
 800eb28:	e008      	b.n	800eb3c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	689a      	ldr	r2, [r3, #8]
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	4013      	ands	r3, r2
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d19f      	bne.n	800ea7a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800eb3a:	2300      	movs	r3, #0
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b086      	sub	sp, #24
 800eb48:	af02      	add	r7, sp, #8
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	60b9      	str	r1, [r7, #8]
 800eb4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb58:	d111      	bne.n	800eb7e <SPI_EndRxTransaction+0x3a>
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	689b      	ldr	r3, [r3, #8]
 800eb5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb62:	d004      	beq.n	800eb6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb6c:	d107      	bne.n	800eb7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb7c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	9300      	str	r3, [sp, #0]
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	2200      	movs	r2, #0
 800eb86:	2180      	movs	r1, #128	; 0x80
 800eb88:	68f8      	ldr	r0, [r7, #12]
 800eb8a:	f7ff ff04 	bl	800e996 <SPI_WaitFlagStateUntilTimeout>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d007      	beq.n	800eba4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb98:	f043 0220 	orr.w	r2, r3, #32
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800eba0:	2303      	movs	r3, #3
 800eba2:	e023      	b.n	800ebec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	685b      	ldr	r3, [r3, #4]
 800eba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebac:	d11d      	bne.n	800ebea <SPI_EndRxTransaction+0xa6>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebb6:	d004      	beq.n	800ebc2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	689b      	ldr	r3, [r3, #8]
 800ebbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebc0:	d113      	bne.n	800ebea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	9300      	str	r3, [sp, #0]
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	f7ff ff4b 	bl	800ea6a <SPI_WaitFifoStateUntilTimeout>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d007      	beq.n	800ebea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ebde:	f043 0220 	orr.w	r2, r3, #32
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ebe6:	2303      	movs	r3, #3
 800ebe8:	e000      	b.n	800ebec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ebea:	2300      	movs	r3, #0
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b086      	sub	sp, #24
 800ebf8:	af02      	add	r7, sp, #8
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	9300      	str	r3, [sp, #0]
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	2200      	movs	r2, #0
 800ec08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ec0c:	68f8      	ldr	r0, [r7, #12]
 800ec0e:	f7ff ff2c 	bl	800ea6a <SPI_WaitFifoStateUntilTimeout>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d007      	beq.n	800ec28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec1c:	f043 0220 	orr.w	r2, r3, #32
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ec24:	2303      	movs	r3, #3
 800ec26:	e027      	b.n	800ec78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	9300      	str	r3, [sp, #0]
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	2180      	movs	r1, #128	; 0x80
 800ec32:	68f8      	ldr	r0, [r7, #12]
 800ec34:	f7ff feaf 	bl	800e996 <SPI_WaitFlagStateUntilTimeout>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d007      	beq.n	800ec4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec42:	f043 0220 	orr.w	r2, r3, #32
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ec4a:	2303      	movs	r3, #3
 800ec4c:	e014      	b.n	800ec78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	2200      	movs	r2, #0
 800ec56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ec5a:	68f8      	ldr	r0, [r7, #12]
 800ec5c:	f7ff ff05 	bl	800ea6a <SPI_WaitFifoStateUntilTimeout>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d007      	beq.n	800ec76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ec6a:	f043 0220 	orr.w	r2, r3, #32
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ec72:	2303      	movs	r3, #3
 800ec74:	e000      	b.n	800ec78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ec76:	2300      	movs	r3, #0
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3710      	adds	r7, #16
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d101      	bne.n	800ec92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e01d      	b.n	800ecce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d106      	bne.n	800ecac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f000 f815 	bl	800ecd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2202      	movs	r2, #2
 800ecb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681a      	ldr	r2, [r3, #0]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	3304      	adds	r3, #4
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	4610      	mov	r0, r2
 800ecc0:	f000 f9fc 	bl	800f0bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ecd6:	b480      	push	{r7}
 800ecd8:	b083      	sub	sp, #12
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ecde:	bf00      	nop
 800ece0:	370c      	adds	r7, #12
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr
	...

0800ecec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2202      	movs	r2, #2
 800ecf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	689a      	ldr	r2, [r3, #8]
 800ed02:	4b0e      	ldr	r3, [pc, #56]	; (800ed3c <HAL_TIM_Base_Start+0x50>)
 800ed04:	4013      	ands	r3, r2
 800ed06:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2b06      	cmp	r3, #6
 800ed0c:	d00b      	beq.n	800ed26 <HAL_TIM_Base_Start+0x3a>
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed14:	d007      	beq.n	800ed26 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f042 0201 	orr.w	r2, r2, #1
 800ed24:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2201      	movs	r2, #1
 800ed2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ed2e:	2300      	movs	r3, #0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3714      	adds	r7, #20
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr
 800ed3c:	00010007 	.word	0x00010007

0800ed40 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2202      	movs	r2, #2
 800ed4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	6a1a      	ldr	r2, [r3, #32]
 800ed56:	f241 1311 	movw	r3, #4369	; 0x1111
 800ed5a:	4013      	ands	r3, r2
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d10f      	bne.n	800ed80 <HAL_TIM_Base_Stop+0x40>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	6a1a      	ldr	r2, [r3, #32]
 800ed66:	f240 4344 	movw	r3, #1092	; 0x444
 800ed6a:	4013      	ands	r3, r2
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d107      	bne.n	800ed80 <HAL_TIM_Base_Stop+0x40>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	681a      	ldr	r2, [r3, #0]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f022 0201 	bic.w	r2, r2, #1
 800ed7e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ed88:	2300      	movs	r3, #0
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	370c      	adds	r7, #12
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr
	...

0800ed98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b085      	sub	sp, #20
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	68da      	ldr	r2, [r3, #12]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f042 0201 	orr.w	r2, r2, #1
 800edae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	689a      	ldr	r2, [r3, #8]
 800edb6:	4b0c      	ldr	r3, [pc, #48]	; (800ede8 <HAL_TIM_Base_Start_IT+0x50>)
 800edb8:	4013      	ands	r3, r2
 800edba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2b06      	cmp	r3, #6
 800edc0:	d00b      	beq.n	800edda <HAL_TIM_Base_Start_IT+0x42>
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edc8:	d007      	beq.n	800edda <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	681a      	ldr	r2, [r3, #0]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f042 0201 	orr.w	r2, r2, #1
 800edd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800edda:	2300      	movs	r3, #0
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3714      	adds	r7, #20
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr
 800ede8:	00010007 	.word	0x00010007

0800edec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	68da      	ldr	r2, [r3, #12]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f022 0201 	bic.w	r2, r2, #1
 800ee02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	6a1a      	ldr	r2, [r3, #32]
 800ee0a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ee0e:	4013      	ands	r3, r2
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d10f      	bne.n	800ee34 <HAL_TIM_Base_Stop_IT+0x48>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	6a1a      	ldr	r2, [r3, #32]
 800ee1a:	f240 4344 	movw	r3, #1092	; 0x444
 800ee1e:	4013      	ands	r3, r2
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d107      	bne.n	800ee34 <HAL_TIM_Base_Stop_IT+0x48>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	681a      	ldr	r2, [r3, #0]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f022 0201 	bic.w	r2, r2, #1
 800ee32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ee34:	2300      	movs	r3, #0
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	370c      	adds	r7, #12
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr

0800ee42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b082      	sub	sp, #8
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	691b      	ldr	r3, [r3, #16]
 800ee50:	f003 0302 	and.w	r3, r3, #2
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	d122      	bne.n	800ee9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	f003 0302 	and.w	r3, r3, #2
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	d11b      	bne.n	800ee9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f06f 0202 	mvn.w	r2, #2
 800ee6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2201      	movs	r2, #1
 800ee74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	699b      	ldr	r3, [r3, #24]
 800ee7c:	f003 0303 	and.w	r3, r3, #3
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d003      	beq.n	800ee8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7f7 fe57 	bl	8006b38 <HAL_TIM_IC_CaptureCallback>
 800ee8a:	e005      	b.n	800ee98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 f8f7 	bl	800f080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 f8fe 	bl	800f094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	f003 0304 	and.w	r3, r3, #4
 800eea8:	2b04      	cmp	r3, #4
 800eeaa:	d122      	bne.n	800eef2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	68db      	ldr	r3, [r3, #12]
 800eeb2:	f003 0304 	and.w	r3, r3, #4
 800eeb6:	2b04      	cmp	r3, #4
 800eeb8:	d11b      	bne.n	800eef2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f06f 0204 	mvn.w	r2, #4
 800eec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2202      	movs	r2, #2
 800eec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	699b      	ldr	r3, [r3, #24]
 800eed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d003      	beq.n	800eee0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f7f7 fe2d 	bl	8006b38 <HAL_TIM_IC_CaptureCallback>
 800eede:	e005      	b.n	800eeec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 f8cd 	bl	800f080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 f8d4 	bl	800f094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	691b      	ldr	r3, [r3, #16]
 800eef8:	f003 0308 	and.w	r3, r3, #8
 800eefc:	2b08      	cmp	r3, #8
 800eefe:	d122      	bne.n	800ef46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	f003 0308 	and.w	r3, r3, #8
 800ef0a:	2b08      	cmp	r3, #8
 800ef0c:	d11b      	bne.n	800ef46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f06f 0208 	mvn.w	r2, #8
 800ef16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2204      	movs	r2, #4
 800ef1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	69db      	ldr	r3, [r3, #28]
 800ef24:	f003 0303 	and.w	r3, r3, #3
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d003      	beq.n	800ef34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f7f7 fe03 	bl	8006b38 <HAL_TIM_IC_CaptureCallback>
 800ef32:	e005      	b.n	800ef40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f000 f8a3 	bl	800f080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f000 f8aa 	bl	800f094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	691b      	ldr	r3, [r3, #16]
 800ef4c:	f003 0310 	and.w	r3, r3, #16
 800ef50:	2b10      	cmp	r3, #16
 800ef52:	d122      	bne.n	800ef9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	68db      	ldr	r3, [r3, #12]
 800ef5a:	f003 0310 	and.w	r3, r3, #16
 800ef5e:	2b10      	cmp	r3, #16
 800ef60:	d11b      	bne.n	800ef9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f06f 0210 	mvn.w	r2, #16
 800ef6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2208      	movs	r2, #8
 800ef70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	69db      	ldr	r3, [r3, #28]
 800ef78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d003      	beq.n	800ef88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f7f7 fdd9 	bl	8006b38 <HAL_TIM_IC_CaptureCallback>
 800ef86:	e005      	b.n	800ef94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 f879 	bl	800f080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 f880 	bl	800f094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2200      	movs	r2, #0
 800ef98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	691b      	ldr	r3, [r3, #16]
 800efa0:	f003 0301 	and.w	r3, r3, #1
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d10e      	bne.n	800efc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	f003 0301 	and.w	r3, r3, #1
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d107      	bne.n	800efc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f06f 0201 	mvn.w	r2, #1
 800efbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7f7 fda7 	bl	8006b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	691b      	ldr	r3, [r3, #16]
 800efcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efd0:	2b80      	cmp	r3, #128	; 0x80
 800efd2:	d10e      	bne.n	800eff2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efde:	2b80      	cmp	r3, #128	; 0x80
 800efe0:	d107      	bne.n	800eff2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800efea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f000 f991 	bl	800f314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	691b      	ldr	r3, [r3, #16]
 800eff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800effc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f000:	d10e      	bne.n	800f020 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f00c:	2b80      	cmp	r3, #128	; 0x80
 800f00e:	d107      	bne.n	800f020 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 f984 	bl	800f328 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	691b      	ldr	r3, [r3, #16]
 800f026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f02a:	2b40      	cmp	r3, #64	; 0x40
 800f02c:	d10e      	bne.n	800f04c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f038:	2b40      	cmp	r3, #64	; 0x40
 800f03a:	d107      	bne.n	800f04c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 f82e 	bl	800f0a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	691b      	ldr	r3, [r3, #16]
 800f052:	f003 0320 	and.w	r3, r3, #32
 800f056:	2b20      	cmp	r3, #32
 800f058:	d10e      	bne.n	800f078 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	68db      	ldr	r3, [r3, #12]
 800f060:	f003 0320 	and.w	r3, r3, #32
 800f064:	2b20      	cmp	r3, #32
 800f066:	d107      	bne.n	800f078 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f06f 0220 	mvn.w	r2, #32
 800f070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 f944 	bl	800f300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f078:	bf00      	nop
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f088:	bf00      	nop
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f094:	b480      	push	{r7}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f09c:	bf00      	nop
 800f09e:	370c      	adds	r7, #12
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f0b0:	bf00      	nop
 800f0b2:	370c      	adds	r7, #12
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b085      	sub	sp, #20
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4a40      	ldr	r2, [pc, #256]	; (800f1d0 <TIM_Base_SetConfig+0x114>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d013      	beq.n	800f0fc <TIM_Base_SetConfig+0x40>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0da:	d00f      	beq.n	800f0fc <TIM_Base_SetConfig+0x40>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4a3d      	ldr	r2, [pc, #244]	; (800f1d4 <TIM_Base_SetConfig+0x118>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d00b      	beq.n	800f0fc <TIM_Base_SetConfig+0x40>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4a3c      	ldr	r2, [pc, #240]	; (800f1d8 <TIM_Base_SetConfig+0x11c>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d007      	beq.n	800f0fc <TIM_Base_SetConfig+0x40>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	4a3b      	ldr	r2, [pc, #236]	; (800f1dc <TIM_Base_SetConfig+0x120>)
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d003      	beq.n	800f0fc <TIM_Base_SetConfig+0x40>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	4a3a      	ldr	r2, [pc, #232]	; (800f1e0 <TIM_Base_SetConfig+0x124>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d108      	bne.n	800f10e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	4313      	orrs	r3, r2
 800f10c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4a2f      	ldr	r2, [pc, #188]	; (800f1d0 <TIM_Base_SetConfig+0x114>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d01f      	beq.n	800f156 <TIM_Base_SetConfig+0x9a>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f11c:	d01b      	beq.n	800f156 <TIM_Base_SetConfig+0x9a>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	4a2c      	ldr	r2, [pc, #176]	; (800f1d4 <TIM_Base_SetConfig+0x118>)
 800f122:	4293      	cmp	r3, r2
 800f124:	d017      	beq.n	800f156 <TIM_Base_SetConfig+0x9a>
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4a2b      	ldr	r2, [pc, #172]	; (800f1d8 <TIM_Base_SetConfig+0x11c>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d013      	beq.n	800f156 <TIM_Base_SetConfig+0x9a>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	4a2a      	ldr	r2, [pc, #168]	; (800f1dc <TIM_Base_SetConfig+0x120>)
 800f132:	4293      	cmp	r3, r2
 800f134:	d00f      	beq.n	800f156 <TIM_Base_SetConfig+0x9a>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	4a29      	ldr	r2, [pc, #164]	; (800f1e0 <TIM_Base_SetConfig+0x124>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d00b      	beq.n	800f156 <TIM_Base_SetConfig+0x9a>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	4a28      	ldr	r2, [pc, #160]	; (800f1e4 <TIM_Base_SetConfig+0x128>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d007      	beq.n	800f156 <TIM_Base_SetConfig+0x9a>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	4a27      	ldr	r2, [pc, #156]	; (800f1e8 <TIM_Base_SetConfig+0x12c>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d003      	beq.n	800f156 <TIM_Base_SetConfig+0x9a>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4a26      	ldr	r2, [pc, #152]	; (800f1ec <TIM_Base_SetConfig+0x130>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d108      	bne.n	800f168 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f15c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	68fa      	ldr	r2, [r7, #12]
 800f164:	4313      	orrs	r3, r2
 800f166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	695b      	ldr	r3, [r3, #20]
 800f172:	4313      	orrs	r3, r2
 800f174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	68fa      	ldr	r2, [r7, #12]
 800f17a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	689a      	ldr	r2, [r3, #8]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4a10      	ldr	r2, [pc, #64]	; (800f1d0 <TIM_Base_SetConfig+0x114>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d00f      	beq.n	800f1b4 <TIM_Base_SetConfig+0xf8>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a12      	ldr	r2, [pc, #72]	; (800f1e0 <TIM_Base_SetConfig+0x124>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d00b      	beq.n	800f1b4 <TIM_Base_SetConfig+0xf8>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4a11      	ldr	r2, [pc, #68]	; (800f1e4 <TIM_Base_SetConfig+0x128>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d007      	beq.n	800f1b4 <TIM_Base_SetConfig+0xf8>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a10      	ldr	r2, [pc, #64]	; (800f1e8 <TIM_Base_SetConfig+0x12c>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d003      	beq.n	800f1b4 <TIM_Base_SetConfig+0xf8>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4a0f      	ldr	r2, [pc, #60]	; (800f1ec <TIM_Base_SetConfig+0x130>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d103      	bne.n	800f1bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	691a      	ldr	r2, [r3, #16]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2201      	movs	r2, #1
 800f1c0:	615a      	str	r2, [r3, #20]
}
 800f1c2:	bf00      	nop
 800f1c4:	3714      	adds	r7, #20
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	40012c00 	.word	0x40012c00
 800f1d4:	40000400 	.word	0x40000400
 800f1d8:	40000800 	.word	0x40000800
 800f1dc:	40000c00 	.word	0x40000c00
 800f1e0:	40013400 	.word	0x40013400
 800f1e4:	40014000 	.word	0x40014000
 800f1e8:	40014400 	.word	0x40014400
 800f1ec:	40014800 	.word	0x40014800

0800f1f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b085      	sub	sp, #20
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f200:	2b01      	cmp	r3, #1
 800f202:	d101      	bne.n	800f208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f204:	2302      	movs	r3, #2
 800f206:	e068      	b.n	800f2da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2201      	movs	r2, #1
 800f20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2202      	movs	r2, #2
 800f214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	689b      	ldr	r3, [r3, #8]
 800f226:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4a2e      	ldr	r2, [pc, #184]	; (800f2e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d004      	beq.n	800f23c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4a2d      	ldr	r2, [pc, #180]	; (800f2ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d108      	bne.n	800f24e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f242:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	4313      	orrs	r3, r2
 800f24c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f254:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	68fa      	ldr	r2, [r7, #12]
 800f25c:	4313      	orrs	r3, r2
 800f25e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	68fa      	ldr	r2, [r7, #12]
 800f266:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4a1e      	ldr	r2, [pc, #120]	; (800f2e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	d01d      	beq.n	800f2ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f27a:	d018      	beq.n	800f2ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a1b      	ldr	r2, [pc, #108]	; (800f2f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d013      	beq.n	800f2ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4a1a      	ldr	r2, [pc, #104]	; (800f2f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d00e      	beq.n	800f2ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a18      	ldr	r2, [pc, #96]	; (800f2f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d009      	beq.n	800f2ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4a13      	ldr	r2, [pc, #76]	; (800f2ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d004      	beq.n	800f2ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4a14      	ldr	r2, [pc, #80]	; (800f2fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d10c      	bne.n	800f2c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	68ba      	ldr	r2, [r7, #8]
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	68ba      	ldr	r2, [r7, #8]
 800f2c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f2d8:	2300      	movs	r3, #0
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3714      	adds	r7, #20
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e4:	4770      	bx	lr
 800f2e6:	bf00      	nop
 800f2e8:	40012c00 	.word	0x40012c00
 800f2ec:	40013400 	.word	0x40013400
 800f2f0:	40000400 	.word	0x40000400
 800f2f4:	40000800 	.word	0x40000800
 800f2f8:	40000c00 	.word	0x40000c00
 800f2fc:	40014000 	.word	0x40014000

0800f300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f308:	bf00      	nop
 800f30a:	370c      	adds	r7, #12
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f314:	b480      	push	{r7}
 800f316:	b083      	sub	sp, #12
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f31c:	bf00      	nop
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f330:	bf00      	nop
 800f332:	370c      	adds	r7, #12
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr

0800f33c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d101      	bne.n	800f34e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f34a:	2301      	movs	r3, #1
 800f34c:	e042      	b.n	800f3d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f354:	2b00      	cmp	r3, #0
 800f356:	d106      	bne.n	800f366 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2200      	movs	r2, #0
 800f35c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7f4 fbb3 	bl	8003acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2224      	movs	r2, #36	; 0x24
 800f36a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f022 0201 	bic.w	r2, r2, #1
 800f37c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 f8c4 	bl	800f50c <UART_SetConfig>
 800f384:	4603      	mov	r3, r0
 800f386:	2b01      	cmp	r3, #1
 800f388:	d101      	bne.n	800f38e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f38a:	2301      	movs	r3, #1
 800f38c:	e022      	b.n	800f3d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f392:	2b00      	cmp	r3, #0
 800f394:	d002      	beq.n	800f39c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f001 fa74 	bl	8010884 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	685a      	ldr	r2, [r3, #4]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f3aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	689a      	ldr	r2, [r3, #8]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f3ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f042 0201 	orr.w	r2, r2, #1
 800f3ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f001 fafb 	bl	80109c8 <UART_CheckIdleState>
 800f3d2:	4603      	mov	r3, r0
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b08a      	sub	sp, #40	; 0x28
 800f3e0:	af02      	add	r7, sp, #8
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	60b9      	str	r1, [r7, #8]
 800f3e6:	603b      	str	r3, [r7, #0]
 800f3e8:	4613      	mov	r3, r2
 800f3ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3f2:	2b20      	cmp	r3, #32
 800f3f4:	f040 8084 	bne.w	800f500 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d002      	beq.n	800f404 <HAL_UART_Transmit+0x28>
 800f3fe:	88fb      	ldrh	r3, [r7, #6]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d101      	bne.n	800f408 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f404:	2301      	movs	r3, #1
 800f406:	e07c      	b.n	800f502 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d101      	bne.n	800f416 <HAL_UART_Transmit+0x3a>
 800f412:	2302      	movs	r3, #2
 800f414:	e075      	b.n	800f502 <HAL_UART_Transmit+0x126>
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2201      	movs	r2, #1
 800f41a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2200      	movs	r2, #0
 800f422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2221      	movs	r2, #33	; 0x21
 800f42a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f42e:	f7f7 fd79 	bl	8006f24 <HAL_GetTick>
 800f432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	88fa      	ldrh	r2, [r7, #6]
 800f438:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	88fa      	ldrh	r2, [r7, #6]
 800f440:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f44c:	d108      	bne.n	800f460 <HAL_UART_Transmit+0x84>
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	691b      	ldr	r3, [r3, #16]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d104      	bne.n	800f460 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f456:	2300      	movs	r3, #0
 800f458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	61bb      	str	r3, [r7, #24]
 800f45e:	e003      	b.n	800f468 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f464:	2300      	movs	r3, #0
 800f466:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2200      	movs	r2, #0
 800f46c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800f470:	e02d      	b.n	800f4ce <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	9300      	str	r3, [sp, #0]
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	2200      	movs	r2, #0
 800f47a:	2180      	movs	r1, #128	; 0x80
 800f47c:	68f8      	ldr	r0, [r7, #12]
 800f47e:	f001 faeb 	bl	8010a58 <UART_WaitOnFlagUntilTimeout>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f488:	2303      	movs	r3, #3
 800f48a:	e03a      	b.n	800f502 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d10b      	bne.n	800f4aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	881a      	ldrh	r2, [r3, #0]
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f49e:	b292      	uxth	r2, r2
 800f4a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f4a2:	69bb      	ldr	r3, [r7, #24]
 800f4a4:	3302      	adds	r3, #2
 800f4a6:	61bb      	str	r3, [r7, #24]
 800f4a8:	e008      	b.n	800f4bc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f4aa:	69fb      	ldr	r3, [r7, #28]
 800f4ac:	781a      	ldrb	r2, [r3, #0]
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	b292      	uxth	r2, r2
 800f4b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f4b6:	69fb      	ldr	r3, [r7, #28]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f4c2:	b29b      	uxth	r3, r3
 800f4c4:	3b01      	subs	r3, #1
 800f4c6:	b29a      	uxth	r2, r3
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d1cb      	bne.n	800f472 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	2140      	movs	r1, #64	; 0x40
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f001 fab7 	bl	8010a58 <UART_WaitOnFlagUntilTimeout>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d001      	beq.n	800f4f4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800f4f0:	2303      	movs	r3, #3
 800f4f2:	e006      	b.n	800f502 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	2220      	movs	r2, #32
 800f4f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	e000      	b.n	800f502 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800f500:	2302      	movs	r3, #2
  }
}
 800f502:	4618      	mov	r0, r3
 800f504:	3720      	adds	r7, #32
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
	...

0800f50c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f50c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f510:	b08c      	sub	sp, #48	; 0x30
 800f512:	af00      	add	r7, sp, #0
 800f514:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800f516:	2300      	movs	r3, #0
 800f518:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef ret               = HAL_OK;
 800f51a:	2300      	movs	r3, #0
 800f51c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800f520:	2300      	movs	r3, #0
 800f522:	61fb      	str	r3, [r7, #28]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	689a      	ldr	r2, [r3, #8]
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	431a      	orrs	r2, r3
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	695b      	ldr	r3, [r3, #20]
 800f532:	431a      	orrs	r2, r3
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	69db      	ldr	r3, [r3, #28]
 800f538:	4313      	orrs	r3, r2
 800f53a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f542:	4313      	orrs	r3, r2
 800f544:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	4baa      	ldr	r3, [pc, #680]	; (800f7f8 <UART_SetConfig+0x2ec>)
 800f54e:	4013      	ands	r3, r2
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	6812      	ldr	r2, [r2, #0]
 800f554:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f556:	430b      	orrs	r3, r1
 800f558:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	68da      	ldr	r2, [r3, #12]
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	430a      	orrs	r2, r1
 800f56e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	699b      	ldr	r3, [r3, #24]
 800f574:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4aa0      	ldr	r2, [pc, #640]	; (800f7fc <UART_SetConfig+0x2f0>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d004      	beq.n	800f58a <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	6a1b      	ldr	r3, [r3, #32]
 800f584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f586:	4313      	orrs	r3, r2
 800f588:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f594:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	6812      	ldr	r2, [r2, #0]
 800f59c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f59e:	430b      	orrs	r3, r1
 800f5a0:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a8:	f023 010f 	bic.w	r1, r3, #15
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	430a      	orrs	r2, r1
 800f5b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4a90      	ldr	r2, [pc, #576]	; (800f800 <UART_SetConfig+0x2f4>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d126      	bne.n	800f610 <UART_SetConfig+0x104>
 800f5c2:	4b90      	ldr	r3, [pc, #576]	; (800f804 <UART_SetConfig+0x2f8>)
 800f5c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5c8:	f003 0303 	and.w	r3, r3, #3
 800f5cc:	2b03      	cmp	r3, #3
 800f5ce:	d81b      	bhi.n	800f608 <UART_SetConfig+0xfc>
 800f5d0:	a201      	add	r2, pc, #4	; (adr r2, 800f5d8 <UART_SetConfig+0xcc>)
 800f5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5d6:	bf00      	nop
 800f5d8:	0800f5e9 	.word	0x0800f5e9
 800f5dc:	0800f5f9 	.word	0x0800f5f9
 800f5e0:	0800f5f1 	.word	0x0800f5f1
 800f5e4:	0800f601 	.word	0x0800f601
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5ee:	e116      	b.n	800f81e <UART_SetConfig+0x312>
 800f5f0:	2302      	movs	r3, #2
 800f5f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5f6:	e112      	b.n	800f81e <UART_SetConfig+0x312>
 800f5f8:	2304      	movs	r3, #4
 800f5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f5fe:	e10e      	b.n	800f81e <UART_SetConfig+0x312>
 800f600:	2308      	movs	r3, #8
 800f602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f606:	e10a      	b.n	800f81e <UART_SetConfig+0x312>
 800f608:	2310      	movs	r3, #16
 800f60a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f60e:	e106      	b.n	800f81e <UART_SetConfig+0x312>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4a7c      	ldr	r2, [pc, #496]	; (800f808 <UART_SetConfig+0x2fc>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d138      	bne.n	800f68c <UART_SetConfig+0x180>
 800f61a:	4b7a      	ldr	r3, [pc, #488]	; (800f804 <UART_SetConfig+0x2f8>)
 800f61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f620:	f003 030c 	and.w	r3, r3, #12
 800f624:	2b0c      	cmp	r3, #12
 800f626:	d82d      	bhi.n	800f684 <UART_SetConfig+0x178>
 800f628:	a201      	add	r2, pc, #4	; (adr r2, 800f630 <UART_SetConfig+0x124>)
 800f62a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f62e:	bf00      	nop
 800f630:	0800f665 	.word	0x0800f665
 800f634:	0800f685 	.word	0x0800f685
 800f638:	0800f685 	.word	0x0800f685
 800f63c:	0800f685 	.word	0x0800f685
 800f640:	0800f675 	.word	0x0800f675
 800f644:	0800f685 	.word	0x0800f685
 800f648:	0800f685 	.word	0x0800f685
 800f64c:	0800f685 	.word	0x0800f685
 800f650:	0800f66d 	.word	0x0800f66d
 800f654:	0800f685 	.word	0x0800f685
 800f658:	0800f685 	.word	0x0800f685
 800f65c:	0800f685 	.word	0x0800f685
 800f660:	0800f67d 	.word	0x0800f67d
 800f664:	2300      	movs	r3, #0
 800f666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f66a:	e0d8      	b.n	800f81e <UART_SetConfig+0x312>
 800f66c:	2302      	movs	r3, #2
 800f66e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f672:	e0d4      	b.n	800f81e <UART_SetConfig+0x312>
 800f674:	2304      	movs	r3, #4
 800f676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f67a:	e0d0      	b.n	800f81e <UART_SetConfig+0x312>
 800f67c:	2308      	movs	r3, #8
 800f67e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f682:	e0cc      	b.n	800f81e <UART_SetConfig+0x312>
 800f684:	2310      	movs	r3, #16
 800f686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f68a:	e0c8      	b.n	800f81e <UART_SetConfig+0x312>
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a5e      	ldr	r2, [pc, #376]	; (800f80c <UART_SetConfig+0x300>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d125      	bne.n	800f6e2 <UART_SetConfig+0x1d6>
 800f696:	4b5b      	ldr	r3, [pc, #364]	; (800f804 <UART_SetConfig+0x2f8>)
 800f698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f69c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f6a0:	2b30      	cmp	r3, #48	; 0x30
 800f6a2:	d016      	beq.n	800f6d2 <UART_SetConfig+0x1c6>
 800f6a4:	2b30      	cmp	r3, #48	; 0x30
 800f6a6:	d818      	bhi.n	800f6da <UART_SetConfig+0x1ce>
 800f6a8:	2b20      	cmp	r3, #32
 800f6aa:	d00a      	beq.n	800f6c2 <UART_SetConfig+0x1b6>
 800f6ac:	2b20      	cmp	r3, #32
 800f6ae:	d814      	bhi.n	800f6da <UART_SetConfig+0x1ce>
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d002      	beq.n	800f6ba <UART_SetConfig+0x1ae>
 800f6b4:	2b10      	cmp	r3, #16
 800f6b6:	d008      	beq.n	800f6ca <UART_SetConfig+0x1be>
 800f6b8:	e00f      	b.n	800f6da <UART_SetConfig+0x1ce>
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6c0:	e0ad      	b.n	800f81e <UART_SetConfig+0x312>
 800f6c2:	2302      	movs	r3, #2
 800f6c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6c8:	e0a9      	b.n	800f81e <UART_SetConfig+0x312>
 800f6ca:	2304      	movs	r3, #4
 800f6cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6d0:	e0a5      	b.n	800f81e <UART_SetConfig+0x312>
 800f6d2:	2308      	movs	r3, #8
 800f6d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6d8:	e0a1      	b.n	800f81e <UART_SetConfig+0x312>
 800f6da:	2310      	movs	r3, #16
 800f6dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f6e0:	e09d      	b.n	800f81e <UART_SetConfig+0x312>
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a4a      	ldr	r2, [pc, #296]	; (800f810 <UART_SetConfig+0x304>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d125      	bne.n	800f738 <UART_SetConfig+0x22c>
 800f6ec:	4b45      	ldr	r3, [pc, #276]	; (800f804 <UART_SetConfig+0x2f8>)
 800f6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f6f6:	2bc0      	cmp	r3, #192	; 0xc0
 800f6f8:	d016      	beq.n	800f728 <UART_SetConfig+0x21c>
 800f6fa:	2bc0      	cmp	r3, #192	; 0xc0
 800f6fc:	d818      	bhi.n	800f730 <UART_SetConfig+0x224>
 800f6fe:	2b80      	cmp	r3, #128	; 0x80
 800f700:	d00a      	beq.n	800f718 <UART_SetConfig+0x20c>
 800f702:	2b80      	cmp	r3, #128	; 0x80
 800f704:	d814      	bhi.n	800f730 <UART_SetConfig+0x224>
 800f706:	2b00      	cmp	r3, #0
 800f708:	d002      	beq.n	800f710 <UART_SetConfig+0x204>
 800f70a:	2b40      	cmp	r3, #64	; 0x40
 800f70c:	d008      	beq.n	800f720 <UART_SetConfig+0x214>
 800f70e:	e00f      	b.n	800f730 <UART_SetConfig+0x224>
 800f710:	2300      	movs	r3, #0
 800f712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f716:	e082      	b.n	800f81e <UART_SetConfig+0x312>
 800f718:	2302      	movs	r3, #2
 800f71a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f71e:	e07e      	b.n	800f81e <UART_SetConfig+0x312>
 800f720:	2304      	movs	r3, #4
 800f722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f726:	e07a      	b.n	800f81e <UART_SetConfig+0x312>
 800f728:	2308      	movs	r3, #8
 800f72a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f72e:	e076      	b.n	800f81e <UART_SetConfig+0x312>
 800f730:	2310      	movs	r3, #16
 800f732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f736:	e072      	b.n	800f81e <UART_SetConfig+0x312>
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4a35      	ldr	r2, [pc, #212]	; (800f814 <UART_SetConfig+0x308>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d12a      	bne.n	800f798 <UART_SetConfig+0x28c>
 800f742:	4b30      	ldr	r3, [pc, #192]	; (800f804 <UART_SetConfig+0x2f8>)
 800f744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f74c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f750:	d01a      	beq.n	800f788 <UART_SetConfig+0x27c>
 800f752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f756:	d81b      	bhi.n	800f790 <UART_SetConfig+0x284>
 800f758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f75c:	d00c      	beq.n	800f778 <UART_SetConfig+0x26c>
 800f75e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f762:	d815      	bhi.n	800f790 <UART_SetConfig+0x284>
 800f764:	2b00      	cmp	r3, #0
 800f766:	d003      	beq.n	800f770 <UART_SetConfig+0x264>
 800f768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f76c:	d008      	beq.n	800f780 <UART_SetConfig+0x274>
 800f76e:	e00f      	b.n	800f790 <UART_SetConfig+0x284>
 800f770:	2300      	movs	r3, #0
 800f772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f776:	e052      	b.n	800f81e <UART_SetConfig+0x312>
 800f778:	2302      	movs	r3, #2
 800f77a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f77e:	e04e      	b.n	800f81e <UART_SetConfig+0x312>
 800f780:	2304      	movs	r3, #4
 800f782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f786:	e04a      	b.n	800f81e <UART_SetConfig+0x312>
 800f788:	2308      	movs	r3, #8
 800f78a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f78e:	e046      	b.n	800f81e <UART_SetConfig+0x312>
 800f790:	2310      	movs	r3, #16
 800f792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f796:	e042      	b.n	800f81e <UART_SetConfig+0x312>
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a17      	ldr	r2, [pc, #92]	; (800f7fc <UART_SetConfig+0x2f0>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d13a      	bne.n	800f818 <UART_SetConfig+0x30c>
 800f7a2:	4b18      	ldr	r3, [pc, #96]	; (800f804 <UART_SetConfig+0x2f8>)
 800f7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f7ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f7b0:	d01a      	beq.n	800f7e8 <UART_SetConfig+0x2dc>
 800f7b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f7b6:	d81b      	bhi.n	800f7f0 <UART_SetConfig+0x2e4>
 800f7b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7bc:	d00c      	beq.n	800f7d8 <UART_SetConfig+0x2cc>
 800f7be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7c2:	d815      	bhi.n	800f7f0 <UART_SetConfig+0x2e4>
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d003      	beq.n	800f7d0 <UART_SetConfig+0x2c4>
 800f7c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7cc:	d008      	beq.n	800f7e0 <UART_SetConfig+0x2d4>
 800f7ce:	e00f      	b.n	800f7f0 <UART_SetConfig+0x2e4>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7d6:	e022      	b.n	800f81e <UART_SetConfig+0x312>
 800f7d8:	2302      	movs	r3, #2
 800f7da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7de:	e01e      	b.n	800f81e <UART_SetConfig+0x312>
 800f7e0:	2304      	movs	r3, #4
 800f7e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7e6:	e01a      	b.n	800f81e <UART_SetConfig+0x312>
 800f7e8:	2308      	movs	r3, #8
 800f7ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7ee:	e016      	b.n	800f81e <UART_SetConfig+0x312>
 800f7f0:	2310      	movs	r3, #16
 800f7f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7f6:	e012      	b.n	800f81e <UART_SetConfig+0x312>
 800f7f8:	cfff69f3 	.word	0xcfff69f3
 800f7fc:	40008000 	.word	0x40008000
 800f800:	40013800 	.word	0x40013800
 800f804:	40021000 	.word	0x40021000
 800f808:	40004400 	.word	0x40004400
 800f80c:	40004800 	.word	0x40004800
 800f810:	40004c00 	.word	0x40004c00
 800f814:	40005000 	.word	0x40005000
 800f818:	2310      	movs	r3, #16
 800f81a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4a88      	ldr	r2, [pc, #544]	; (800fa44 <UART_SetConfig+0x538>)
 800f824:	4293      	cmp	r3, r2
 800f826:	f040 841b 	bne.w	8010060 <UART_SetConfig+0xb54>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f82a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f82e:	2b08      	cmp	r3, #8
 800f830:	f200 815c 	bhi.w	800faec <UART_SetConfig+0x5e0>
 800f834:	a201      	add	r2, pc, #4	; (adr r2, 800f83c <UART_SetConfig+0x330>)
 800f836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f83a:	bf00      	nop
 800f83c:	0800f861 	.word	0x0800f861
 800f840:	0800faed 	.word	0x0800faed
 800f844:	0800f903 	.word	0x0800f903
 800f848:	0800faed 	.word	0x0800faed
 800f84c:	0800f9a1 	.word	0x0800f9a1
 800f850:	0800faed 	.word	0x0800faed
 800f854:	0800faed 	.word	0x0800faed
 800f858:	0800faed 	.word	0x0800faed
 800f85c:	0800fa4d 	.word	0x0800fa4d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800f860:	f7fc f838 	bl	800b8d4 <HAL_RCC_GetPCLK1Freq>
 800f864:	4602      	mov	r2, r0
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d044      	beq.n	800f8f8 <UART_SetConfig+0x3ec>
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f872:	2b01      	cmp	r3, #1
 800f874:	d03e      	beq.n	800f8f4 <UART_SetConfig+0x3e8>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	d038      	beq.n	800f8f0 <UART_SetConfig+0x3e4>
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f882:	2b03      	cmp	r3, #3
 800f884:	d032      	beq.n	800f8ec <UART_SetConfig+0x3e0>
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88a:	2b04      	cmp	r3, #4
 800f88c:	d02c      	beq.n	800f8e8 <UART_SetConfig+0x3dc>
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f892:	2b05      	cmp	r3, #5
 800f894:	d026      	beq.n	800f8e4 <UART_SetConfig+0x3d8>
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f89a:	2b06      	cmp	r3, #6
 800f89c:	d020      	beq.n	800f8e0 <UART_SetConfig+0x3d4>
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a2:	2b07      	cmp	r3, #7
 800f8a4:	d01a      	beq.n	800f8dc <UART_SetConfig+0x3d0>
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8aa:	2b08      	cmp	r3, #8
 800f8ac:	d014      	beq.n	800f8d8 <UART_SetConfig+0x3cc>
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b2:	2b09      	cmp	r3, #9
 800f8b4:	d00e      	beq.n	800f8d4 <UART_SetConfig+0x3c8>
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ba:	2b0a      	cmp	r3, #10
 800f8bc:	d008      	beq.n	800f8d0 <UART_SetConfig+0x3c4>
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c2:	2b0b      	cmp	r3, #11
 800f8c4:	d102      	bne.n	800f8cc <UART_SetConfig+0x3c0>
 800f8c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f8ca:	e016      	b.n	800f8fa <UART_SetConfig+0x3ee>
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	e014      	b.n	800f8fa <UART_SetConfig+0x3ee>
 800f8d0:	2380      	movs	r3, #128	; 0x80
 800f8d2:	e012      	b.n	800f8fa <UART_SetConfig+0x3ee>
 800f8d4:	2340      	movs	r3, #64	; 0x40
 800f8d6:	e010      	b.n	800f8fa <UART_SetConfig+0x3ee>
 800f8d8:	2320      	movs	r3, #32
 800f8da:	e00e      	b.n	800f8fa <UART_SetConfig+0x3ee>
 800f8dc:	2310      	movs	r3, #16
 800f8de:	e00c      	b.n	800f8fa <UART_SetConfig+0x3ee>
 800f8e0:	230c      	movs	r3, #12
 800f8e2:	e00a      	b.n	800f8fa <UART_SetConfig+0x3ee>
 800f8e4:	230a      	movs	r3, #10
 800f8e6:	e008      	b.n	800f8fa <UART_SetConfig+0x3ee>
 800f8e8:	2308      	movs	r3, #8
 800f8ea:	e006      	b.n	800f8fa <UART_SetConfig+0x3ee>
 800f8ec:	2306      	movs	r3, #6
 800f8ee:	e004      	b.n	800f8fa <UART_SetConfig+0x3ee>
 800f8f0:	2304      	movs	r3, #4
 800f8f2:	e002      	b.n	800f8fa <UART_SetConfig+0x3ee>
 800f8f4:	2302      	movs	r3, #2
 800f8f6:	e000      	b.n	800f8fa <UART_SetConfig+0x3ee>
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8fe:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800f900:	e0f8      	b.n	800faf4 <UART_SetConfig+0x5e8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f906:	2b00      	cmp	r3, #0
 800f908:	d044      	beq.n	800f994 <UART_SetConfig+0x488>
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d03e      	beq.n	800f990 <UART_SetConfig+0x484>
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f916:	2b02      	cmp	r3, #2
 800f918:	d038      	beq.n	800f98c <UART_SetConfig+0x480>
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91e:	2b03      	cmp	r3, #3
 800f920:	d032      	beq.n	800f988 <UART_SetConfig+0x47c>
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f926:	2b04      	cmp	r3, #4
 800f928:	d02c      	beq.n	800f984 <UART_SetConfig+0x478>
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92e:	2b05      	cmp	r3, #5
 800f930:	d026      	beq.n	800f980 <UART_SetConfig+0x474>
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f936:	2b06      	cmp	r3, #6
 800f938:	d020      	beq.n	800f97c <UART_SetConfig+0x470>
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93e:	2b07      	cmp	r3, #7
 800f940:	d01a      	beq.n	800f978 <UART_SetConfig+0x46c>
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f946:	2b08      	cmp	r3, #8
 800f948:	d014      	beq.n	800f974 <UART_SetConfig+0x468>
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94e:	2b09      	cmp	r3, #9
 800f950:	d00e      	beq.n	800f970 <UART_SetConfig+0x464>
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f956:	2b0a      	cmp	r3, #10
 800f958:	d008      	beq.n	800f96c <UART_SetConfig+0x460>
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f95e:	2b0b      	cmp	r3, #11
 800f960:	d102      	bne.n	800f968 <UART_SetConfig+0x45c>
 800f962:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f966:	e016      	b.n	800f996 <UART_SetConfig+0x48a>
 800f968:	2301      	movs	r3, #1
 800f96a:	e014      	b.n	800f996 <UART_SetConfig+0x48a>
 800f96c:	2380      	movs	r3, #128	; 0x80
 800f96e:	e012      	b.n	800f996 <UART_SetConfig+0x48a>
 800f970:	2340      	movs	r3, #64	; 0x40
 800f972:	e010      	b.n	800f996 <UART_SetConfig+0x48a>
 800f974:	2320      	movs	r3, #32
 800f976:	e00e      	b.n	800f996 <UART_SetConfig+0x48a>
 800f978:	2310      	movs	r3, #16
 800f97a:	e00c      	b.n	800f996 <UART_SetConfig+0x48a>
 800f97c:	230c      	movs	r3, #12
 800f97e:	e00a      	b.n	800f996 <UART_SetConfig+0x48a>
 800f980:	230a      	movs	r3, #10
 800f982:	e008      	b.n	800f996 <UART_SetConfig+0x48a>
 800f984:	2308      	movs	r3, #8
 800f986:	e006      	b.n	800f996 <UART_SetConfig+0x48a>
 800f988:	2306      	movs	r3, #6
 800f98a:	e004      	b.n	800f996 <UART_SetConfig+0x48a>
 800f98c:	2304      	movs	r3, #4
 800f98e:	e002      	b.n	800f996 <UART_SetConfig+0x48a>
 800f990:	2302      	movs	r3, #2
 800f992:	e000      	b.n	800f996 <UART_SetConfig+0x48a>
 800f994:	2301      	movs	r3, #1
 800f996:	4a2c      	ldr	r2, [pc, #176]	; (800fa48 <UART_SetConfig+0x53c>)
 800f998:	fbb2 f3f3 	udiv	r3, r2, r3
 800f99c:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 800f99e:	e0a9      	b.n	800faf4 <UART_SetConfig+0x5e8>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800f9a0:	f7fb ff02 	bl	800b7a8 <HAL_RCC_GetSysClockFreq>
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d044      	beq.n	800fa38 <UART_SetConfig+0x52c>
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	d03e      	beq.n	800fa34 <UART_SetConfig+0x528>
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	d038      	beq.n	800fa30 <UART_SetConfig+0x524>
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c2:	2b03      	cmp	r3, #3
 800f9c4:	d032      	beq.n	800fa2c <UART_SetConfig+0x520>
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ca:	2b04      	cmp	r3, #4
 800f9cc:	d02c      	beq.n	800fa28 <UART_SetConfig+0x51c>
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d2:	2b05      	cmp	r3, #5
 800f9d4:	d026      	beq.n	800fa24 <UART_SetConfig+0x518>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9da:	2b06      	cmp	r3, #6
 800f9dc:	d020      	beq.n	800fa20 <UART_SetConfig+0x514>
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e2:	2b07      	cmp	r3, #7
 800f9e4:	d01a      	beq.n	800fa1c <UART_SetConfig+0x510>
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ea:	2b08      	cmp	r3, #8
 800f9ec:	d014      	beq.n	800fa18 <UART_SetConfig+0x50c>
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f2:	2b09      	cmp	r3, #9
 800f9f4:	d00e      	beq.n	800fa14 <UART_SetConfig+0x508>
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fa:	2b0a      	cmp	r3, #10
 800f9fc:	d008      	beq.n	800fa10 <UART_SetConfig+0x504>
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa02:	2b0b      	cmp	r3, #11
 800fa04:	d102      	bne.n	800fa0c <UART_SetConfig+0x500>
 800fa06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa0a:	e016      	b.n	800fa3a <UART_SetConfig+0x52e>
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e014      	b.n	800fa3a <UART_SetConfig+0x52e>
 800fa10:	2380      	movs	r3, #128	; 0x80
 800fa12:	e012      	b.n	800fa3a <UART_SetConfig+0x52e>
 800fa14:	2340      	movs	r3, #64	; 0x40
 800fa16:	e010      	b.n	800fa3a <UART_SetConfig+0x52e>
 800fa18:	2320      	movs	r3, #32
 800fa1a:	e00e      	b.n	800fa3a <UART_SetConfig+0x52e>
 800fa1c:	2310      	movs	r3, #16
 800fa1e:	e00c      	b.n	800fa3a <UART_SetConfig+0x52e>
 800fa20:	230c      	movs	r3, #12
 800fa22:	e00a      	b.n	800fa3a <UART_SetConfig+0x52e>
 800fa24:	230a      	movs	r3, #10
 800fa26:	e008      	b.n	800fa3a <UART_SetConfig+0x52e>
 800fa28:	2308      	movs	r3, #8
 800fa2a:	e006      	b.n	800fa3a <UART_SetConfig+0x52e>
 800fa2c:	2306      	movs	r3, #6
 800fa2e:	e004      	b.n	800fa3a <UART_SetConfig+0x52e>
 800fa30:	2304      	movs	r3, #4
 800fa32:	e002      	b.n	800fa3a <UART_SetConfig+0x52e>
 800fa34:	2302      	movs	r3, #2
 800fa36:	e000      	b.n	800fa3a <UART_SetConfig+0x52e>
 800fa38:	2301      	movs	r3, #1
 800fa3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa3e:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800fa40:	e058      	b.n	800faf4 <UART_SetConfig+0x5e8>
 800fa42:	bf00      	nop
 800fa44:	40008000 	.word	0x40008000
 800fa48:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d044      	beq.n	800fade <UART_SetConfig+0x5d2>
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	d03e      	beq.n	800fada <UART_SetConfig+0x5ce>
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa60:	2b02      	cmp	r3, #2
 800fa62:	d038      	beq.n	800fad6 <UART_SetConfig+0x5ca>
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa68:	2b03      	cmp	r3, #3
 800fa6a:	d032      	beq.n	800fad2 <UART_SetConfig+0x5c6>
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa70:	2b04      	cmp	r3, #4
 800fa72:	d02c      	beq.n	800face <UART_SetConfig+0x5c2>
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa78:	2b05      	cmp	r3, #5
 800fa7a:	d026      	beq.n	800faca <UART_SetConfig+0x5be>
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa80:	2b06      	cmp	r3, #6
 800fa82:	d020      	beq.n	800fac6 <UART_SetConfig+0x5ba>
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa88:	2b07      	cmp	r3, #7
 800fa8a:	d01a      	beq.n	800fac2 <UART_SetConfig+0x5b6>
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa90:	2b08      	cmp	r3, #8
 800fa92:	d014      	beq.n	800fabe <UART_SetConfig+0x5b2>
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa98:	2b09      	cmp	r3, #9
 800fa9a:	d00e      	beq.n	800faba <UART_SetConfig+0x5ae>
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa0:	2b0a      	cmp	r3, #10
 800faa2:	d008      	beq.n	800fab6 <UART_SetConfig+0x5aa>
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa8:	2b0b      	cmp	r3, #11
 800faaa:	d102      	bne.n	800fab2 <UART_SetConfig+0x5a6>
 800faac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fab0:	e016      	b.n	800fae0 <UART_SetConfig+0x5d4>
 800fab2:	2301      	movs	r3, #1
 800fab4:	e014      	b.n	800fae0 <UART_SetConfig+0x5d4>
 800fab6:	2380      	movs	r3, #128	; 0x80
 800fab8:	e012      	b.n	800fae0 <UART_SetConfig+0x5d4>
 800faba:	2340      	movs	r3, #64	; 0x40
 800fabc:	e010      	b.n	800fae0 <UART_SetConfig+0x5d4>
 800fabe:	2320      	movs	r3, #32
 800fac0:	e00e      	b.n	800fae0 <UART_SetConfig+0x5d4>
 800fac2:	2310      	movs	r3, #16
 800fac4:	e00c      	b.n	800fae0 <UART_SetConfig+0x5d4>
 800fac6:	230c      	movs	r3, #12
 800fac8:	e00a      	b.n	800fae0 <UART_SetConfig+0x5d4>
 800faca:	230a      	movs	r3, #10
 800facc:	e008      	b.n	800fae0 <UART_SetConfig+0x5d4>
 800face:	2308      	movs	r3, #8
 800fad0:	e006      	b.n	800fae0 <UART_SetConfig+0x5d4>
 800fad2:	2306      	movs	r3, #6
 800fad4:	e004      	b.n	800fae0 <UART_SetConfig+0x5d4>
 800fad6:	2304      	movs	r3, #4
 800fad8:	e002      	b.n	800fae0 <UART_SetConfig+0x5d4>
 800fada:	2302      	movs	r3, #2
 800fadc:	e000      	b.n	800fae0 <UART_SetConfig+0x5d4>
 800fade:	2301      	movs	r3, #1
 800fae0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800fae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fae8:	61fb      	str	r3, [r7, #28]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 800faea:	e003      	b.n	800faf4 <UART_SetConfig+0x5e8>
      default:
        ret = HAL_ERROR;
 800faec:	2301      	movs	r3, #1
 800faee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 800faf2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	f000 86ad 	beq.w	8010856 <UART_SetConfig+0x134a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	685a      	ldr	r2, [r3, #4]
 800fb00:	4613      	mov	r3, r2
 800fb02:	005b      	lsls	r3, r3, #1
 800fb04:	4413      	add	r3, r2
 800fb06:	69fa      	ldr	r2, [r7, #28]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d305      	bcc.n	800fb18 <UART_SetConfig+0x60c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb12:	69fa      	ldr	r2, [r7, #28]
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d904      	bls.n	800fb22 <UART_SetConfig+0x616>
      {
        ret = HAL_ERROR;
 800fb18:	2301      	movs	r3, #1
 800fb1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800fb1e:	f000 be9a 	b.w	8010856 <UART_SetConfig+0x134a>
      }
      else
      {
        switch (clocksource)
 800fb22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb26:	2b08      	cmp	r3, #8
 800fb28:	f200 8282 	bhi.w	8010030 <UART_SetConfig+0xb24>
 800fb2c:	a201      	add	r2, pc, #4	; (adr r2, 800fb34 <UART_SetConfig+0x628>)
 800fb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb32:	bf00      	nop
 800fb34:	0800fb59 	.word	0x0800fb59
 800fb38:	08010031 	.word	0x08010031
 800fb3c:	0800fc93 	.word	0x0800fc93
 800fb40:	08010031 	.word	0x08010031
 800fb44:	0800fdc5 	.word	0x0800fdc5
 800fb48:	08010031 	.word	0x08010031
 800fb4c:	08010031 	.word	0x08010031
 800fb50:	08010031 	.word	0x08010031
 800fb54:	0800feff 	.word	0x0800feff
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800fb58:	f7fb febc 	bl	800b8d4 <HAL_RCC_GetPCLK1Freq>
 800fb5c:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb5e:	69bb      	ldr	r3, [r7, #24]
 800fb60:	4618      	mov	r0, r3
 800fb62:	f04f 0100 	mov.w	r1, #0
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d067      	beq.n	800fc3e <UART_SetConfig+0x732>
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb72:	2b01      	cmp	r3, #1
 800fb74:	d05e      	beq.n	800fc34 <UART_SetConfig+0x728>
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb7a:	2b02      	cmp	r3, #2
 800fb7c:	d055      	beq.n	800fc2a <UART_SetConfig+0x71e>
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb82:	2b03      	cmp	r3, #3
 800fb84:	d04c      	beq.n	800fc20 <UART_SetConfig+0x714>
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb8a:	2b04      	cmp	r3, #4
 800fb8c:	d043      	beq.n	800fc16 <UART_SetConfig+0x70a>
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb92:	2b05      	cmp	r3, #5
 800fb94:	d03a      	beq.n	800fc0c <UART_SetConfig+0x700>
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb9a:	2b06      	cmp	r3, #6
 800fb9c:	d031      	beq.n	800fc02 <UART_SetConfig+0x6f6>
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba2:	2b07      	cmp	r3, #7
 800fba4:	d028      	beq.n	800fbf8 <UART_SetConfig+0x6ec>
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbaa:	2b08      	cmp	r3, #8
 800fbac:	d01f      	beq.n	800fbee <UART_SetConfig+0x6e2>
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbb2:	2b09      	cmp	r3, #9
 800fbb4:	d016      	beq.n	800fbe4 <UART_SetConfig+0x6d8>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbba:	2b0a      	cmp	r3, #10
 800fbbc:	d00d      	beq.n	800fbda <UART_SetConfig+0x6ce>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc2:	2b0b      	cmp	r3, #11
 800fbc4:	d104      	bne.n	800fbd0 <UART_SetConfig+0x6c4>
 800fbc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fbca:	f04f 0300 	mov.w	r3, #0
 800fbce:	e03a      	b.n	800fc46 <UART_SetConfig+0x73a>
 800fbd0:	f04f 0201 	mov.w	r2, #1
 800fbd4:	f04f 0300 	mov.w	r3, #0
 800fbd8:	e035      	b.n	800fc46 <UART_SetConfig+0x73a>
 800fbda:	f04f 0280 	mov.w	r2, #128	; 0x80
 800fbde:	f04f 0300 	mov.w	r3, #0
 800fbe2:	e030      	b.n	800fc46 <UART_SetConfig+0x73a>
 800fbe4:	f04f 0240 	mov.w	r2, #64	; 0x40
 800fbe8:	f04f 0300 	mov.w	r3, #0
 800fbec:	e02b      	b.n	800fc46 <UART_SetConfig+0x73a>
 800fbee:	f04f 0220 	mov.w	r2, #32
 800fbf2:	f04f 0300 	mov.w	r3, #0
 800fbf6:	e026      	b.n	800fc46 <UART_SetConfig+0x73a>
 800fbf8:	f04f 0210 	mov.w	r2, #16
 800fbfc:	f04f 0300 	mov.w	r3, #0
 800fc00:	e021      	b.n	800fc46 <UART_SetConfig+0x73a>
 800fc02:	f04f 020c 	mov.w	r2, #12
 800fc06:	f04f 0300 	mov.w	r3, #0
 800fc0a:	e01c      	b.n	800fc46 <UART_SetConfig+0x73a>
 800fc0c:	f04f 020a 	mov.w	r2, #10
 800fc10:	f04f 0300 	mov.w	r3, #0
 800fc14:	e017      	b.n	800fc46 <UART_SetConfig+0x73a>
 800fc16:	f04f 0208 	mov.w	r2, #8
 800fc1a:	f04f 0300 	mov.w	r3, #0
 800fc1e:	e012      	b.n	800fc46 <UART_SetConfig+0x73a>
 800fc20:	f04f 0206 	mov.w	r2, #6
 800fc24:	f04f 0300 	mov.w	r3, #0
 800fc28:	e00d      	b.n	800fc46 <UART_SetConfig+0x73a>
 800fc2a:	f04f 0204 	mov.w	r2, #4
 800fc2e:	f04f 0300 	mov.w	r3, #0
 800fc32:	e008      	b.n	800fc46 <UART_SetConfig+0x73a>
 800fc34:	f04f 0202 	mov.w	r2, #2
 800fc38:	f04f 0300 	mov.w	r3, #0
 800fc3c:	e003      	b.n	800fc46 <UART_SetConfig+0x73a>
 800fc3e:	f04f 0201 	mov.w	r2, #1
 800fc42:	f04f 0300 	mov.w	r3, #0
 800fc46:	f7f1 f847 	bl	8000cd8 <__aeabi_uldivmod>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	4610      	mov	r0, r2
 800fc50:	4619      	mov	r1, r3
 800fc52:	f04f 0200 	mov.w	r2, #0
 800fc56:	f04f 0300 	mov.w	r3, #0
 800fc5a:	020b      	lsls	r3, r1, #8
 800fc5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fc60:	0202      	lsls	r2, r0, #8
 800fc62:	68f9      	ldr	r1, [r7, #12]
 800fc64:	6849      	ldr	r1, [r1, #4]
 800fc66:	0849      	lsrs	r1, r1, #1
 800fc68:	4608      	mov	r0, r1
 800fc6a:	f04f 0100 	mov.w	r1, #0
 800fc6e:	1814      	adds	r4, r2, r0
 800fc70:	603c      	str	r4, [r7, #0]
 800fc72:	414b      	adcs	r3, r1
 800fc74:	607b      	str	r3, [r7, #4]
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	f04f 0300 	mov.w	r3, #0
 800fc80:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fc84:	f7f1 f828 	bl	8000cd8 <__aeabi_uldivmod>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800fc90:	e1d2      	b.n	8010038 <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d067      	beq.n	800fd6a <UART_SetConfig+0x85e>
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9e:	2b01      	cmp	r3, #1
 800fca0:	d05e      	beq.n	800fd60 <UART_SetConfig+0x854>
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca6:	2b02      	cmp	r3, #2
 800fca8:	d055      	beq.n	800fd56 <UART_SetConfig+0x84a>
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcae:	2b03      	cmp	r3, #3
 800fcb0:	d04c      	beq.n	800fd4c <UART_SetConfig+0x840>
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb6:	2b04      	cmp	r3, #4
 800fcb8:	d043      	beq.n	800fd42 <UART_SetConfig+0x836>
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcbe:	2b05      	cmp	r3, #5
 800fcc0:	d03a      	beq.n	800fd38 <UART_SetConfig+0x82c>
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc6:	2b06      	cmp	r3, #6
 800fcc8:	d031      	beq.n	800fd2e <UART_SetConfig+0x822>
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcce:	2b07      	cmp	r3, #7
 800fcd0:	d028      	beq.n	800fd24 <UART_SetConfig+0x818>
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd6:	2b08      	cmp	r3, #8
 800fcd8:	d01f      	beq.n	800fd1a <UART_SetConfig+0x80e>
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcde:	2b09      	cmp	r3, #9
 800fce0:	d016      	beq.n	800fd10 <UART_SetConfig+0x804>
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce6:	2b0a      	cmp	r3, #10
 800fce8:	d00d      	beq.n	800fd06 <UART_SetConfig+0x7fa>
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcee:	2b0b      	cmp	r3, #11
 800fcf0:	d104      	bne.n	800fcfc <UART_SetConfig+0x7f0>
 800fcf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fcf6:	f04f 0300 	mov.w	r3, #0
 800fcfa:	e03a      	b.n	800fd72 <UART_SetConfig+0x866>
 800fcfc:	f04f 0201 	mov.w	r2, #1
 800fd00:	f04f 0300 	mov.w	r3, #0
 800fd04:	e035      	b.n	800fd72 <UART_SetConfig+0x866>
 800fd06:	f04f 0280 	mov.w	r2, #128	; 0x80
 800fd0a:	f04f 0300 	mov.w	r3, #0
 800fd0e:	e030      	b.n	800fd72 <UART_SetConfig+0x866>
 800fd10:	f04f 0240 	mov.w	r2, #64	; 0x40
 800fd14:	f04f 0300 	mov.w	r3, #0
 800fd18:	e02b      	b.n	800fd72 <UART_SetConfig+0x866>
 800fd1a:	f04f 0220 	mov.w	r2, #32
 800fd1e:	f04f 0300 	mov.w	r3, #0
 800fd22:	e026      	b.n	800fd72 <UART_SetConfig+0x866>
 800fd24:	f04f 0210 	mov.w	r2, #16
 800fd28:	f04f 0300 	mov.w	r3, #0
 800fd2c:	e021      	b.n	800fd72 <UART_SetConfig+0x866>
 800fd2e:	f04f 020c 	mov.w	r2, #12
 800fd32:	f04f 0300 	mov.w	r3, #0
 800fd36:	e01c      	b.n	800fd72 <UART_SetConfig+0x866>
 800fd38:	f04f 020a 	mov.w	r2, #10
 800fd3c:	f04f 0300 	mov.w	r3, #0
 800fd40:	e017      	b.n	800fd72 <UART_SetConfig+0x866>
 800fd42:	f04f 0208 	mov.w	r2, #8
 800fd46:	f04f 0300 	mov.w	r3, #0
 800fd4a:	e012      	b.n	800fd72 <UART_SetConfig+0x866>
 800fd4c:	f04f 0206 	mov.w	r2, #6
 800fd50:	f04f 0300 	mov.w	r3, #0
 800fd54:	e00d      	b.n	800fd72 <UART_SetConfig+0x866>
 800fd56:	f04f 0204 	mov.w	r2, #4
 800fd5a:	f04f 0300 	mov.w	r3, #0
 800fd5e:	e008      	b.n	800fd72 <UART_SetConfig+0x866>
 800fd60:	f04f 0202 	mov.w	r2, #2
 800fd64:	f04f 0300 	mov.w	r3, #0
 800fd68:	e003      	b.n	800fd72 <UART_SetConfig+0x866>
 800fd6a:	f04f 0201 	mov.w	r2, #1
 800fd6e:	f04f 0300 	mov.w	r3, #0
 800fd72:	48ba      	ldr	r0, [pc, #744]	; (801005c <UART_SetConfig+0xb50>)
 800fd74:	f04f 0100 	mov.w	r1, #0
 800fd78:	f7f0 ffae 	bl	8000cd8 <__aeabi_uldivmod>
 800fd7c:	4602      	mov	r2, r0
 800fd7e:	460b      	mov	r3, r1
 800fd80:	4610      	mov	r0, r2
 800fd82:	4619      	mov	r1, r3
 800fd84:	f04f 0200 	mov.w	r2, #0
 800fd88:	f04f 0300 	mov.w	r3, #0
 800fd8c:	020b      	lsls	r3, r1, #8
 800fd8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fd92:	0202      	lsls	r2, r0, #8
 800fd94:	68f9      	ldr	r1, [r7, #12]
 800fd96:	6849      	ldr	r1, [r1, #4]
 800fd98:	0849      	lsrs	r1, r1, #1
 800fd9a:	4608      	mov	r0, r1
 800fd9c:	f04f 0100 	mov.w	r1, #0
 800fda0:	eb12 0a00 	adds.w	sl, r2, r0
 800fda4:	eb43 0b01 	adc.w	fp, r3, r1
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	685b      	ldr	r3, [r3, #4]
 800fdac:	461a      	mov	r2, r3
 800fdae:	f04f 0300 	mov.w	r3, #0
 800fdb2:	4650      	mov	r0, sl
 800fdb4:	4659      	mov	r1, fp
 800fdb6:	f7f0 ff8f 	bl	8000cd8 <__aeabi_uldivmod>
 800fdba:	4602      	mov	r2, r0
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800fdc2:	e139      	b.n	8010038 <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800fdc4:	f7fb fcf0 	bl	800b7a8 <HAL_RCC_GetSysClockFreq>
 800fdc8:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdca:	69bb      	ldr	r3, [r7, #24]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f04f 0100 	mov.w	r1, #0
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d067      	beq.n	800feaa <UART_SetConfig+0x99e>
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d05e      	beq.n	800fea0 <UART_SetConfig+0x994>
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde6:	2b02      	cmp	r3, #2
 800fde8:	d055      	beq.n	800fe96 <UART_SetConfig+0x98a>
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdee:	2b03      	cmp	r3, #3
 800fdf0:	d04c      	beq.n	800fe8c <UART_SetConfig+0x980>
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdf6:	2b04      	cmp	r3, #4
 800fdf8:	d043      	beq.n	800fe82 <UART_SetConfig+0x976>
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfe:	2b05      	cmp	r3, #5
 800fe00:	d03a      	beq.n	800fe78 <UART_SetConfig+0x96c>
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe06:	2b06      	cmp	r3, #6
 800fe08:	d031      	beq.n	800fe6e <UART_SetConfig+0x962>
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0e:	2b07      	cmp	r3, #7
 800fe10:	d028      	beq.n	800fe64 <UART_SetConfig+0x958>
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe16:	2b08      	cmp	r3, #8
 800fe18:	d01f      	beq.n	800fe5a <UART_SetConfig+0x94e>
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe1e:	2b09      	cmp	r3, #9
 800fe20:	d016      	beq.n	800fe50 <UART_SetConfig+0x944>
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe26:	2b0a      	cmp	r3, #10
 800fe28:	d00d      	beq.n	800fe46 <UART_SetConfig+0x93a>
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe2e:	2b0b      	cmp	r3, #11
 800fe30:	d104      	bne.n	800fe3c <UART_SetConfig+0x930>
 800fe32:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fe36:	f04f 0300 	mov.w	r3, #0
 800fe3a:	e03a      	b.n	800feb2 <UART_SetConfig+0x9a6>
 800fe3c:	f04f 0201 	mov.w	r2, #1
 800fe40:	f04f 0300 	mov.w	r3, #0
 800fe44:	e035      	b.n	800feb2 <UART_SetConfig+0x9a6>
 800fe46:	f04f 0280 	mov.w	r2, #128	; 0x80
 800fe4a:	f04f 0300 	mov.w	r3, #0
 800fe4e:	e030      	b.n	800feb2 <UART_SetConfig+0x9a6>
 800fe50:	f04f 0240 	mov.w	r2, #64	; 0x40
 800fe54:	f04f 0300 	mov.w	r3, #0
 800fe58:	e02b      	b.n	800feb2 <UART_SetConfig+0x9a6>
 800fe5a:	f04f 0220 	mov.w	r2, #32
 800fe5e:	f04f 0300 	mov.w	r3, #0
 800fe62:	e026      	b.n	800feb2 <UART_SetConfig+0x9a6>
 800fe64:	f04f 0210 	mov.w	r2, #16
 800fe68:	f04f 0300 	mov.w	r3, #0
 800fe6c:	e021      	b.n	800feb2 <UART_SetConfig+0x9a6>
 800fe6e:	f04f 020c 	mov.w	r2, #12
 800fe72:	f04f 0300 	mov.w	r3, #0
 800fe76:	e01c      	b.n	800feb2 <UART_SetConfig+0x9a6>
 800fe78:	f04f 020a 	mov.w	r2, #10
 800fe7c:	f04f 0300 	mov.w	r3, #0
 800fe80:	e017      	b.n	800feb2 <UART_SetConfig+0x9a6>
 800fe82:	f04f 0208 	mov.w	r2, #8
 800fe86:	f04f 0300 	mov.w	r3, #0
 800fe8a:	e012      	b.n	800feb2 <UART_SetConfig+0x9a6>
 800fe8c:	f04f 0206 	mov.w	r2, #6
 800fe90:	f04f 0300 	mov.w	r3, #0
 800fe94:	e00d      	b.n	800feb2 <UART_SetConfig+0x9a6>
 800fe96:	f04f 0204 	mov.w	r2, #4
 800fe9a:	f04f 0300 	mov.w	r3, #0
 800fe9e:	e008      	b.n	800feb2 <UART_SetConfig+0x9a6>
 800fea0:	f04f 0202 	mov.w	r2, #2
 800fea4:	f04f 0300 	mov.w	r3, #0
 800fea8:	e003      	b.n	800feb2 <UART_SetConfig+0x9a6>
 800feaa:	f04f 0201 	mov.w	r2, #1
 800feae:	f04f 0300 	mov.w	r3, #0
 800feb2:	f7f0 ff11 	bl	8000cd8 <__aeabi_uldivmod>
 800feb6:	4602      	mov	r2, r0
 800feb8:	460b      	mov	r3, r1
 800feba:	4610      	mov	r0, r2
 800febc:	4619      	mov	r1, r3
 800febe:	f04f 0200 	mov.w	r2, #0
 800fec2:	f04f 0300 	mov.w	r3, #0
 800fec6:	020b      	lsls	r3, r1, #8
 800fec8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fecc:	0202      	lsls	r2, r0, #8
 800fece:	68f9      	ldr	r1, [r7, #12]
 800fed0:	6849      	ldr	r1, [r1, #4]
 800fed2:	0849      	lsrs	r1, r1, #1
 800fed4:	4608      	mov	r0, r1
 800fed6:	f04f 0100 	mov.w	r1, #0
 800feda:	eb12 0800 	adds.w	r8, r2, r0
 800fede:	eb43 0901 	adc.w	r9, r3, r1
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	685b      	ldr	r3, [r3, #4]
 800fee6:	461a      	mov	r2, r3
 800fee8:	f04f 0300 	mov.w	r3, #0
 800feec:	4640      	mov	r0, r8
 800feee:	4649      	mov	r1, r9
 800fef0:	f7f0 fef2 	bl	8000cd8 <__aeabi_uldivmod>
 800fef4:	4602      	mov	r2, r0
 800fef6:	460b      	mov	r3, r1
 800fef8:	4613      	mov	r3, r2
 800fefa:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800fefc:	e09c      	b.n	8010038 <UART_SetConfig+0xb2c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d067      	beq.n	800ffd6 <UART_SetConfig+0xaca>
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	d05e      	beq.n	800ffcc <UART_SetConfig+0xac0>
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff12:	2b02      	cmp	r3, #2
 800ff14:	d055      	beq.n	800ffc2 <UART_SetConfig+0xab6>
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff1a:	2b03      	cmp	r3, #3
 800ff1c:	d04c      	beq.n	800ffb8 <UART_SetConfig+0xaac>
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff22:	2b04      	cmp	r3, #4
 800ff24:	d043      	beq.n	800ffae <UART_SetConfig+0xaa2>
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff2a:	2b05      	cmp	r3, #5
 800ff2c:	d03a      	beq.n	800ffa4 <UART_SetConfig+0xa98>
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff32:	2b06      	cmp	r3, #6
 800ff34:	d031      	beq.n	800ff9a <UART_SetConfig+0xa8e>
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff3a:	2b07      	cmp	r3, #7
 800ff3c:	d028      	beq.n	800ff90 <UART_SetConfig+0xa84>
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff42:	2b08      	cmp	r3, #8
 800ff44:	d01f      	beq.n	800ff86 <UART_SetConfig+0xa7a>
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4a:	2b09      	cmp	r3, #9
 800ff4c:	d016      	beq.n	800ff7c <UART_SetConfig+0xa70>
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff52:	2b0a      	cmp	r3, #10
 800ff54:	d00d      	beq.n	800ff72 <UART_SetConfig+0xa66>
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff5a:	2b0b      	cmp	r3, #11
 800ff5c:	d104      	bne.n	800ff68 <UART_SetConfig+0xa5c>
 800ff5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ff62:	f04f 0300 	mov.w	r3, #0
 800ff66:	e03a      	b.n	800ffde <UART_SetConfig+0xad2>
 800ff68:	f04f 0201 	mov.w	r2, #1
 800ff6c:	f04f 0300 	mov.w	r3, #0
 800ff70:	e035      	b.n	800ffde <UART_SetConfig+0xad2>
 800ff72:	f04f 0280 	mov.w	r2, #128	; 0x80
 800ff76:	f04f 0300 	mov.w	r3, #0
 800ff7a:	e030      	b.n	800ffde <UART_SetConfig+0xad2>
 800ff7c:	f04f 0240 	mov.w	r2, #64	; 0x40
 800ff80:	f04f 0300 	mov.w	r3, #0
 800ff84:	e02b      	b.n	800ffde <UART_SetConfig+0xad2>
 800ff86:	f04f 0220 	mov.w	r2, #32
 800ff8a:	f04f 0300 	mov.w	r3, #0
 800ff8e:	e026      	b.n	800ffde <UART_SetConfig+0xad2>
 800ff90:	f04f 0210 	mov.w	r2, #16
 800ff94:	f04f 0300 	mov.w	r3, #0
 800ff98:	e021      	b.n	800ffde <UART_SetConfig+0xad2>
 800ff9a:	f04f 020c 	mov.w	r2, #12
 800ff9e:	f04f 0300 	mov.w	r3, #0
 800ffa2:	e01c      	b.n	800ffde <UART_SetConfig+0xad2>
 800ffa4:	f04f 020a 	mov.w	r2, #10
 800ffa8:	f04f 0300 	mov.w	r3, #0
 800ffac:	e017      	b.n	800ffde <UART_SetConfig+0xad2>
 800ffae:	f04f 0208 	mov.w	r2, #8
 800ffb2:	f04f 0300 	mov.w	r3, #0
 800ffb6:	e012      	b.n	800ffde <UART_SetConfig+0xad2>
 800ffb8:	f04f 0206 	mov.w	r2, #6
 800ffbc:	f04f 0300 	mov.w	r3, #0
 800ffc0:	e00d      	b.n	800ffde <UART_SetConfig+0xad2>
 800ffc2:	f04f 0204 	mov.w	r2, #4
 800ffc6:	f04f 0300 	mov.w	r3, #0
 800ffca:	e008      	b.n	800ffde <UART_SetConfig+0xad2>
 800ffcc:	f04f 0202 	mov.w	r2, #2
 800ffd0:	f04f 0300 	mov.w	r3, #0
 800ffd4:	e003      	b.n	800ffde <UART_SetConfig+0xad2>
 800ffd6:	f04f 0201 	mov.w	r2, #1
 800ffda:	f04f 0300 	mov.w	r3, #0
 800ffde:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ffe2:	f04f 0100 	mov.w	r1, #0
 800ffe6:	f7f0 fe77 	bl	8000cd8 <__aeabi_uldivmod>
 800ffea:	4602      	mov	r2, r0
 800ffec:	460b      	mov	r3, r1
 800ffee:	4610      	mov	r0, r2
 800fff0:	4619      	mov	r1, r3
 800fff2:	f04f 0200 	mov.w	r2, #0
 800fff6:	f04f 0300 	mov.w	r3, #0
 800fffa:	020b      	lsls	r3, r1, #8
 800fffc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010000:	0202      	lsls	r2, r0, #8
 8010002:	68f9      	ldr	r1, [r7, #12]
 8010004:	6849      	ldr	r1, [r1, #4]
 8010006:	0849      	lsrs	r1, r1, #1
 8010008:	4608      	mov	r0, r1
 801000a:	f04f 0100 	mov.w	r1, #0
 801000e:	1814      	adds	r4, r2, r0
 8010010:	eb43 0501 	adc.w	r5, r3, r1
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	461a      	mov	r2, r3
 801001a:	f04f 0300 	mov.w	r3, #0
 801001e:	4620      	mov	r0, r4
 8010020:	4629      	mov	r1, r5
 8010022:	f7f0 fe59 	bl	8000cd8 <__aeabi_uldivmod>
 8010026:	4602      	mov	r2, r0
 8010028:	460b      	mov	r3, r1
 801002a:	4613      	mov	r3, r2
 801002c:	627b      	str	r3, [r7, #36]	; 0x24
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 801002e:	e003      	b.n	8010038 <UART_SetConfig+0xb2c>
          default:
            ret = HAL_ERROR;
 8010030:	2301      	movs	r3, #1
 8010032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;
 8010036:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801003e:	d309      	bcc.n	8010054 <UART_SetConfig+0xb48>
 8010040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010046:	d205      	bcs.n	8010054 <UART_SetConfig+0xb48>
        {
          huart->Instance->BRR = usartdiv;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801004e:	60da      	str	r2, [r3, #12]
 8010050:	f000 bc01 	b.w	8010856 <UART_SetConfig+0x134a>
        }
        else
        {
          ret = HAL_ERROR;
 8010054:	2301      	movs	r3, #1
 8010056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801005a:	e3fc      	b.n	8010856 <UART_SetConfig+0x134a>
 801005c:	00f42400 	.word	0x00f42400
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	69db      	ldr	r3, [r3, #28]
 8010064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010068:	f040 8203 	bne.w	8010472 <UART_SetConfig+0xf66>
  {
    switch (clocksource)
 801006c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010070:	2b08      	cmp	r3, #8
 8010072:	f200 81dc 	bhi.w	801042e <UART_SetConfig+0xf22>
 8010076:	a201      	add	r2, pc, #4	; (adr r2, 801007c <UART_SetConfig+0xb70>)
 8010078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801007c:	080100a1 	.word	0x080100a1
 8010080:	08010159 	.word	0x08010159
 8010084:	08010211 	.word	0x08010211
 8010088:	0801042f 	.word	0x0801042f
 801008c:	080102c3 	.word	0x080102c3
 8010090:	0801042f 	.word	0x0801042f
 8010094:	0801042f 	.word	0x0801042f
 8010098:	0801042f 	.word	0x0801042f
 801009c:	0801037b 	.word	0x0801037b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80100a0:	f7fb fc18 	bl	800b8d4 <HAL_RCC_GetPCLK1Freq>
 80100a4:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d044      	beq.n	8010138 <UART_SetConfig+0xc2c>
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d03e      	beq.n	8010134 <UART_SetConfig+0xc28>
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ba:	2b02      	cmp	r3, #2
 80100bc:	d038      	beq.n	8010130 <UART_SetConfig+0xc24>
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c2:	2b03      	cmp	r3, #3
 80100c4:	d032      	beq.n	801012c <UART_SetConfig+0xc20>
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ca:	2b04      	cmp	r3, #4
 80100cc:	d02c      	beq.n	8010128 <UART_SetConfig+0xc1c>
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d2:	2b05      	cmp	r3, #5
 80100d4:	d026      	beq.n	8010124 <UART_SetConfig+0xc18>
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100da:	2b06      	cmp	r3, #6
 80100dc:	d020      	beq.n	8010120 <UART_SetConfig+0xc14>
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e2:	2b07      	cmp	r3, #7
 80100e4:	d01a      	beq.n	801011c <UART_SetConfig+0xc10>
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ea:	2b08      	cmp	r3, #8
 80100ec:	d014      	beq.n	8010118 <UART_SetConfig+0xc0c>
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f2:	2b09      	cmp	r3, #9
 80100f4:	d00e      	beq.n	8010114 <UART_SetConfig+0xc08>
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100fa:	2b0a      	cmp	r3, #10
 80100fc:	d008      	beq.n	8010110 <UART_SetConfig+0xc04>
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010102:	2b0b      	cmp	r3, #11
 8010104:	d102      	bne.n	801010c <UART_SetConfig+0xc00>
 8010106:	f44f 7380 	mov.w	r3, #256	; 0x100
 801010a:	e016      	b.n	801013a <UART_SetConfig+0xc2e>
 801010c:	2301      	movs	r3, #1
 801010e:	e014      	b.n	801013a <UART_SetConfig+0xc2e>
 8010110:	2380      	movs	r3, #128	; 0x80
 8010112:	e012      	b.n	801013a <UART_SetConfig+0xc2e>
 8010114:	2340      	movs	r3, #64	; 0x40
 8010116:	e010      	b.n	801013a <UART_SetConfig+0xc2e>
 8010118:	2320      	movs	r3, #32
 801011a:	e00e      	b.n	801013a <UART_SetConfig+0xc2e>
 801011c:	2310      	movs	r3, #16
 801011e:	e00c      	b.n	801013a <UART_SetConfig+0xc2e>
 8010120:	230c      	movs	r3, #12
 8010122:	e00a      	b.n	801013a <UART_SetConfig+0xc2e>
 8010124:	230a      	movs	r3, #10
 8010126:	e008      	b.n	801013a <UART_SetConfig+0xc2e>
 8010128:	2308      	movs	r3, #8
 801012a:	e006      	b.n	801013a <UART_SetConfig+0xc2e>
 801012c:	2306      	movs	r3, #6
 801012e:	e004      	b.n	801013a <UART_SetConfig+0xc2e>
 8010130:	2304      	movs	r3, #4
 8010132:	e002      	b.n	801013a <UART_SetConfig+0xc2e>
 8010134:	2302      	movs	r3, #2
 8010136:	e000      	b.n	801013a <UART_SetConfig+0xc2e>
 8010138:	2301      	movs	r3, #1
 801013a:	69ba      	ldr	r2, [r7, #24]
 801013c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010140:	005a      	lsls	r2, r3, #1
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	085b      	lsrs	r3, r3, #1
 8010148:	441a      	add	r2, r3
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010152:	b29b      	uxth	r3, r3
 8010154:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010156:	e16e      	b.n	8010436 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010158:	f7fb fbd2 	bl	800b900 <HAL_RCC_GetPCLK2Freq>
 801015c:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010162:	2b00      	cmp	r3, #0
 8010164:	d044      	beq.n	80101f0 <UART_SetConfig+0xce4>
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801016a:	2b01      	cmp	r3, #1
 801016c:	d03e      	beq.n	80101ec <UART_SetConfig+0xce0>
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010172:	2b02      	cmp	r3, #2
 8010174:	d038      	beq.n	80101e8 <UART_SetConfig+0xcdc>
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017a:	2b03      	cmp	r3, #3
 801017c:	d032      	beq.n	80101e4 <UART_SetConfig+0xcd8>
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010182:	2b04      	cmp	r3, #4
 8010184:	d02c      	beq.n	80101e0 <UART_SetConfig+0xcd4>
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801018a:	2b05      	cmp	r3, #5
 801018c:	d026      	beq.n	80101dc <UART_SetConfig+0xcd0>
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010192:	2b06      	cmp	r3, #6
 8010194:	d020      	beq.n	80101d8 <UART_SetConfig+0xccc>
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801019a:	2b07      	cmp	r3, #7
 801019c:	d01a      	beq.n	80101d4 <UART_SetConfig+0xcc8>
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a2:	2b08      	cmp	r3, #8
 80101a4:	d014      	beq.n	80101d0 <UART_SetConfig+0xcc4>
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101aa:	2b09      	cmp	r3, #9
 80101ac:	d00e      	beq.n	80101cc <UART_SetConfig+0xcc0>
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b2:	2b0a      	cmp	r3, #10
 80101b4:	d008      	beq.n	80101c8 <UART_SetConfig+0xcbc>
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ba:	2b0b      	cmp	r3, #11
 80101bc:	d102      	bne.n	80101c4 <UART_SetConfig+0xcb8>
 80101be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80101c2:	e016      	b.n	80101f2 <UART_SetConfig+0xce6>
 80101c4:	2301      	movs	r3, #1
 80101c6:	e014      	b.n	80101f2 <UART_SetConfig+0xce6>
 80101c8:	2380      	movs	r3, #128	; 0x80
 80101ca:	e012      	b.n	80101f2 <UART_SetConfig+0xce6>
 80101cc:	2340      	movs	r3, #64	; 0x40
 80101ce:	e010      	b.n	80101f2 <UART_SetConfig+0xce6>
 80101d0:	2320      	movs	r3, #32
 80101d2:	e00e      	b.n	80101f2 <UART_SetConfig+0xce6>
 80101d4:	2310      	movs	r3, #16
 80101d6:	e00c      	b.n	80101f2 <UART_SetConfig+0xce6>
 80101d8:	230c      	movs	r3, #12
 80101da:	e00a      	b.n	80101f2 <UART_SetConfig+0xce6>
 80101dc:	230a      	movs	r3, #10
 80101de:	e008      	b.n	80101f2 <UART_SetConfig+0xce6>
 80101e0:	2308      	movs	r3, #8
 80101e2:	e006      	b.n	80101f2 <UART_SetConfig+0xce6>
 80101e4:	2306      	movs	r3, #6
 80101e6:	e004      	b.n	80101f2 <UART_SetConfig+0xce6>
 80101e8:	2304      	movs	r3, #4
 80101ea:	e002      	b.n	80101f2 <UART_SetConfig+0xce6>
 80101ec:	2302      	movs	r3, #2
 80101ee:	e000      	b.n	80101f2 <UART_SetConfig+0xce6>
 80101f0:	2301      	movs	r3, #1
 80101f2:	69ba      	ldr	r2, [r7, #24]
 80101f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80101f8:	005a      	lsls	r2, r3, #1
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	085b      	lsrs	r3, r3, #1
 8010200:	441a      	add	r2, r3
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	fbb2 f3f3 	udiv	r3, r2, r3
 801020a:	b29b      	uxth	r3, r3
 801020c:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 801020e:	e112      	b.n	8010436 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010214:	2b00      	cmp	r3, #0
 8010216:	d044      	beq.n	80102a2 <UART_SetConfig+0xd96>
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801021c:	2b01      	cmp	r3, #1
 801021e:	d03e      	beq.n	801029e <UART_SetConfig+0xd92>
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010224:	2b02      	cmp	r3, #2
 8010226:	d038      	beq.n	801029a <UART_SetConfig+0xd8e>
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801022c:	2b03      	cmp	r3, #3
 801022e:	d032      	beq.n	8010296 <UART_SetConfig+0xd8a>
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010234:	2b04      	cmp	r3, #4
 8010236:	d02c      	beq.n	8010292 <UART_SetConfig+0xd86>
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801023c:	2b05      	cmp	r3, #5
 801023e:	d026      	beq.n	801028e <UART_SetConfig+0xd82>
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010244:	2b06      	cmp	r3, #6
 8010246:	d020      	beq.n	801028a <UART_SetConfig+0xd7e>
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024c:	2b07      	cmp	r3, #7
 801024e:	d01a      	beq.n	8010286 <UART_SetConfig+0xd7a>
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010254:	2b08      	cmp	r3, #8
 8010256:	d014      	beq.n	8010282 <UART_SetConfig+0xd76>
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801025c:	2b09      	cmp	r3, #9
 801025e:	d00e      	beq.n	801027e <UART_SetConfig+0xd72>
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010264:	2b0a      	cmp	r3, #10
 8010266:	d008      	beq.n	801027a <UART_SetConfig+0xd6e>
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801026c:	2b0b      	cmp	r3, #11
 801026e:	d102      	bne.n	8010276 <UART_SetConfig+0xd6a>
 8010270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010274:	e016      	b.n	80102a4 <UART_SetConfig+0xd98>
 8010276:	2301      	movs	r3, #1
 8010278:	e014      	b.n	80102a4 <UART_SetConfig+0xd98>
 801027a:	2380      	movs	r3, #128	; 0x80
 801027c:	e012      	b.n	80102a4 <UART_SetConfig+0xd98>
 801027e:	2340      	movs	r3, #64	; 0x40
 8010280:	e010      	b.n	80102a4 <UART_SetConfig+0xd98>
 8010282:	2320      	movs	r3, #32
 8010284:	e00e      	b.n	80102a4 <UART_SetConfig+0xd98>
 8010286:	2310      	movs	r3, #16
 8010288:	e00c      	b.n	80102a4 <UART_SetConfig+0xd98>
 801028a:	230c      	movs	r3, #12
 801028c:	e00a      	b.n	80102a4 <UART_SetConfig+0xd98>
 801028e:	230a      	movs	r3, #10
 8010290:	e008      	b.n	80102a4 <UART_SetConfig+0xd98>
 8010292:	2308      	movs	r3, #8
 8010294:	e006      	b.n	80102a4 <UART_SetConfig+0xd98>
 8010296:	2306      	movs	r3, #6
 8010298:	e004      	b.n	80102a4 <UART_SetConfig+0xd98>
 801029a:	2304      	movs	r3, #4
 801029c:	e002      	b.n	80102a4 <UART_SetConfig+0xd98>
 801029e:	2302      	movs	r3, #2
 80102a0:	e000      	b.n	80102a4 <UART_SetConfig+0xd98>
 80102a2:	2301      	movs	r3, #1
 80102a4:	4aa1      	ldr	r2, [pc, #644]	; (801052c <UART_SetConfig+0x1020>)
 80102a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80102aa:	005a      	lsls	r2, r3, #1
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	085b      	lsrs	r3, r3, #1
 80102b2:	441a      	add	r2, r3
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80102bc:	b29b      	uxth	r3, r3
 80102be:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80102c0:	e0b9      	b.n	8010436 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80102c2:	f7fb fa71 	bl	800b7a8 <HAL_RCC_GetSysClockFreq>
 80102c6:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d044      	beq.n	801035a <UART_SetConfig+0xe4e>
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d4:	2b01      	cmp	r3, #1
 80102d6:	d03e      	beq.n	8010356 <UART_SetConfig+0xe4a>
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102dc:	2b02      	cmp	r3, #2
 80102de:	d038      	beq.n	8010352 <UART_SetConfig+0xe46>
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e4:	2b03      	cmp	r3, #3
 80102e6:	d032      	beq.n	801034e <UART_SetConfig+0xe42>
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ec:	2b04      	cmp	r3, #4
 80102ee:	d02c      	beq.n	801034a <UART_SetConfig+0xe3e>
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102f4:	2b05      	cmp	r3, #5
 80102f6:	d026      	beq.n	8010346 <UART_SetConfig+0xe3a>
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102fc:	2b06      	cmp	r3, #6
 80102fe:	d020      	beq.n	8010342 <UART_SetConfig+0xe36>
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010304:	2b07      	cmp	r3, #7
 8010306:	d01a      	beq.n	801033e <UART_SetConfig+0xe32>
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801030c:	2b08      	cmp	r3, #8
 801030e:	d014      	beq.n	801033a <UART_SetConfig+0xe2e>
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010314:	2b09      	cmp	r3, #9
 8010316:	d00e      	beq.n	8010336 <UART_SetConfig+0xe2a>
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801031c:	2b0a      	cmp	r3, #10
 801031e:	d008      	beq.n	8010332 <UART_SetConfig+0xe26>
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010324:	2b0b      	cmp	r3, #11
 8010326:	d102      	bne.n	801032e <UART_SetConfig+0xe22>
 8010328:	f44f 7380 	mov.w	r3, #256	; 0x100
 801032c:	e016      	b.n	801035c <UART_SetConfig+0xe50>
 801032e:	2301      	movs	r3, #1
 8010330:	e014      	b.n	801035c <UART_SetConfig+0xe50>
 8010332:	2380      	movs	r3, #128	; 0x80
 8010334:	e012      	b.n	801035c <UART_SetConfig+0xe50>
 8010336:	2340      	movs	r3, #64	; 0x40
 8010338:	e010      	b.n	801035c <UART_SetConfig+0xe50>
 801033a:	2320      	movs	r3, #32
 801033c:	e00e      	b.n	801035c <UART_SetConfig+0xe50>
 801033e:	2310      	movs	r3, #16
 8010340:	e00c      	b.n	801035c <UART_SetConfig+0xe50>
 8010342:	230c      	movs	r3, #12
 8010344:	e00a      	b.n	801035c <UART_SetConfig+0xe50>
 8010346:	230a      	movs	r3, #10
 8010348:	e008      	b.n	801035c <UART_SetConfig+0xe50>
 801034a:	2308      	movs	r3, #8
 801034c:	e006      	b.n	801035c <UART_SetConfig+0xe50>
 801034e:	2306      	movs	r3, #6
 8010350:	e004      	b.n	801035c <UART_SetConfig+0xe50>
 8010352:	2304      	movs	r3, #4
 8010354:	e002      	b.n	801035c <UART_SetConfig+0xe50>
 8010356:	2302      	movs	r3, #2
 8010358:	e000      	b.n	801035c <UART_SetConfig+0xe50>
 801035a:	2301      	movs	r3, #1
 801035c:	69ba      	ldr	r2, [r7, #24]
 801035e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010362:	005a      	lsls	r2, r3, #1
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	085b      	lsrs	r3, r3, #1
 801036a:	441a      	add	r2, r3
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	fbb2 f3f3 	udiv	r3, r2, r3
 8010374:	b29b      	uxth	r3, r3
 8010376:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010378:	e05d      	b.n	8010436 <UART_SetConfig+0xf2a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801037e:	2b00      	cmp	r3, #0
 8010380:	d044      	beq.n	801040c <UART_SetConfig+0xf00>
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010386:	2b01      	cmp	r3, #1
 8010388:	d03e      	beq.n	8010408 <UART_SetConfig+0xefc>
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801038e:	2b02      	cmp	r3, #2
 8010390:	d038      	beq.n	8010404 <UART_SetConfig+0xef8>
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010396:	2b03      	cmp	r3, #3
 8010398:	d032      	beq.n	8010400 <UART_SetConfig+0xef4>
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039e:	2b04      	cmp	r3, #4
 80103a0:	d02c      	beq.n	80103fc <UART_SetConfig+0xef0>
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103a6:	2b05      	cmp	r3, #5
 80103a8:	d026      	beq.n	80103f8 <UART_SetConfig+0xeec>
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ae:	2b06      	cmp	r3, #6
 80103b0:	d020      	beq.n	80103f4 <UART_SetConfig+0xee8>
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b6:	2b07      	cmp	r3, #7
 80103b8:	d01a      	beq.n	80103f0 <UART_SetConfig+0xee4>
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103be:	2b08      	cmp	r3, #8
 80103c0:	d014      	beq.n	80103ec <UART_SetConfig+0xee0>
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103c6:	2b09      	cmp	r3, #9
 80103c8:	d00e      	beq.n	80103e8 <UART_SetConfig+0xedc>
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ce:	2b0a      	cmp	r3, #10
 80103d0:	d008      	beq.n	80103e4 <UART_SetConfig+0xed8>
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103d6:	2b0b      	cmp	r3, #11
 80103d8:	d102      	bne.n	80103e0 <UART_SetConfig+0xed4>
 80103da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103de:	e016      	b.n	801040e <UART_SetConfig+0xf02>
 80103e0:	2301      	movs	r3, #1
 80103e2:	e014      	b.n	801040e <UART_SetConfig+0xf02>
 80103e4:	2380      	movs	r3, #128	; 0x80
 80103e6:	e012      	b.n	801040e <UART_SetConfig+0xf02>
 80103e8:	2340      	movs	r3, #64	; 0x40
 80103ea:	e010      	b.n	801040e <UART_SetConfig+0xf02>
 80103ec:	2320      	movs	r3, #32
 80103ee:	e00e      	b.n	801040e <UART_SetConfig+0xf02>
 80103f0:	2310      	movs	r3, #16
 80103f2:	e00c      	b.n	801040e <UART_SetConfig+0xf02>
 80103f4:	230c      	movs	r3, #12
 80103f6:	e00a      	b.n	801040e <UART_SetConfig+0xf02>
 80103f8:	230a      	movs	r3, #10
 80103fa:	e008      	b.n	801040e <UART_SetConfig+0xf02>
 80103fc:	2308      	movs	r3, #8
 80103fe:	e006      	b.n	801040e <UART_SetConfig+0xf02>
 8010400:	2306      	movs	r3, #6
 8010402:	e004      	b.n	801040e <UART_SetConfig+0xf02>
 8010404:	2304      	movs	r3, #4
 8010406:	e002      	b.n	801040e <UART_SetConfig+0xf02>
 8010408:	2302      	movs	r3, #2
 801040a:	e000      	b.n	801040e <UART_SetConfig+0xf02>
 801040c:	2301      	movs	r3, #1
 801040e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010412:	fbb2 f3f3 	udiv	r3, r2, r3
 8010416:	005a      	lsls	r2, r3, #1
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	085b      	lsrs	r3, r3, #1
 801041e:	441a      	add	r2, r3
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	fbb2 f3f3 	udiv	r3, r2, r3
 8010428:	b29b      	uxth	r3, r3
 801042a:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 801042c:	e003      	b.n	8010436 <UART_SetConfig+0xf2a>
      default:
        ret = HAL_ERROR;
 801042e:	2301      	movs	r3, #1
 8010430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8010434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010438:	2b0f      	cmp	r3, #15
 801043a:	d916      	bls.n	801046a <UART_SetConfig+0xf5e>
 801043c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010442:	d212      	bcs.n	801046a <UART_SetConfig+0xf5e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010446:	b29b      	uxth	r3, r3
 8010448:	f023 030f 	bic.w	r3, r3, #15
 801044c:	82fb      	strh	r3, [r7, #22]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010450:	085b      	lsrs	r3, r3, #1
 8010452:	b29b      	uxth	r3, r3
 8010454:	f003 0307 	and.w	r3, r3, #7
 8010458:	b29a      	uxth	r2, r3
 801045a:	8afb      	ldrh	r3, [r7, #22]
 801045c:	4313      	orrs	r3, r2
 801045e:	82fb      	strh	r3, [r7, #22]
      huart->Instance->BRR = brrtemp;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	8afa      	ldrh	r2, [r7, #22]
 8010466:	60da      	str	r2, [r3, #12]
 8010468:	e1f5      	b.n	8010856 <UART_SetConfig+0x134a>
    }
    else
    {
      ret = HAL_ERROR;
 801046a:	2301      	movs	r3, #1
 801046c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8010470:	e1f1      	b.n	8010856 <UART_SetConfig+0x134a>
    }
  }
  else
  {
    switch (clocksource)
 8010472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010476:	2b08      	cmp	r3, #8
 8010478:	f200 81da 	bhi.w	8010830 <UART_SetConfig+0x1324>
 801047c:	a201      	add	r2, pc, #4	; (adr r2, 8010484 <UART_SetConfig+0xf78>)
 801047e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010482:	bf00      	nop
 8010484:	080104a9 	.word	0x080104a9
 8010488:	08010563 	.word	0x08010563
 801048c:	08010619 	.word	0x08010619
 8010490:	08010831 	.word	0x08010831
 8010494:	080106c9 	.word	0x080106c9
 8010498:	08010831 	.word	0x08010831
 801049c:	08010831 	.word	0x08010831
 80104a0:	08010831 	.word	0x08010831
 80104a4:	0801077f 	.word	0x0801077f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80104a8:	f7fb fa14 	bl	800b8d4 <HAL_RCC_GetPCLK1Freq>
 80104ac:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d046      	beq.n	8010544 <UART_SetConfig+0x1038>
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d040      	beq.n	8010540 <UART_SetConfig+0x1034>
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c2:	2b02      	cmp	r3, #2
 80104c4:	d03a      	beq.n	801053c <UART_SetConfig+0x1030>
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ca:	2b03      	cmp	r3, #3
 80104cc:	d034      	beq.n	8010538 <UART_SetConfig+0x102c>
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104d2:	2b04      	cmp	r3, #4
 80104d4:	d02e      	beq.n	8010534 <UART_SetConfig+0x1028>
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104da:	2b05      	cmp	r3, #5
 80104dc:	d028      	beq.n	8010530 <UART_SetConfig+0x1024>
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e2:	2b06      	cmp	r3, #6
 80104e4:	d020      	beq.n	8010528 <UART_SetConfig+0x101c>
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ea:	2b07      	cmp	r3, #7
 80104ec:	d01a      	beq.n	8010524 <UART_SetConfig+0x1018>
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f2:	2b08      	cmp	r3, #8
 80104f4:	d014      	beq.n	8010520 <UART_SetConfig+0x1014>
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104fa:	2b09      	cmp	r3, #9
 80104fc:	d00e      	beq.n	801051c <UART_SetConfig+0x1010>
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010502:	2b0a      	cmp	r3, #10
 8010504:	d008      	beq.n	8010518 <UART_SetConfig+0x100c>
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801050a:	2b0b      	cmp	r3, #11
 801050c:	d102      	bne.n	8010514 <UART_SetConfig+0x1008>
 801050e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010512:	e018      	b.n	8010546 <UART_SetConfig+0x103a>
 8010514:	2301      	movs	r3, #1
 8010516:	e016      	b.n	8010546 <UART_SetConfig+0x103a>
 8010518:	2380      	movs	r3, #128	; 0x80
 801051a:	e014      	b.n	8010546 <UART_SetConfig+0x103a>
 801051c:	2340      	movs	r3, #64	; 0x40
 801051e:	e012      	b.n	8010546 <UART_SetConfig+0x103a>
 8010520:	2320      	movs	r3, #32
 8010522:	e010      	b.n	8010546 <UART_SetConfig+0x103a>
 8010524:	2310      	movs	r3, #16
 8010526:	e00e      	b.n	8010546 <UART_SetConfig+0x103a>
 8010528:	230c      	movs	r3, #12
 801052a:	e00c      	b.n	8010546 <UART_SetConfig+0x103a>
 801052c:	00f42400 	.word	0x00f42400
 8010530:	230a      	movs	r3, #10
 8010532:	e008      	b.n	8010546 <UART_SetConfig+0x103a>
 8010534:	2308      	movs	r3, #8
 8010536:	e006      	b.n	8010546 <UART_SetConfig+0x103a>
 8010538:	2306      	movs	r3, #6
 801053a:	e004      	b.n	8010546 <UART_SetConfig+0x103a>
 801053c:	2304      	movs	r3, #4
 801053e:	e002      	b.n	8010546 <UART_SetConfig+0x103a>
 8010540:	2302      	movs	r3, #2
 8010542:	e000      	b.n	8010546 <UART_SetConfig+0x103a>
 8010544:	2301      	movs	r3, #1
 8010546:	69ba      	ldr	r2, [r7, #24]
 8010548:	fbb2 f2f3 	udiv	r2, r2, r3
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	085b      	lsrs	r3, r3, #1
 8010552:	441a      	add	r2, r3
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	fbb2 f3f3 	udiv	r3, r2, r3
 801055c:	b29b      	uxth	r3, r3
 801055e:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010560:	e16a      	b.n	8010838 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010562:	f7fb f9cd 	bl	800b900 <HAL_RCC_GetPCLK2Freq>
 8010566:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801056c:	2b00      	cmp	r3, #0
 801056e:	d044      	beq.n	80105fa <UART_SetConfig+0x10ee>
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010574:	2b01      	cmp	r3, #1
 8010576:	d03e      	beq.n	80105f6 <UART_SetConfig+0x10ea>
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801057c:	2b02      	cmp	r3, #2
 801057e:	d038      	beq.n	80105f2 <UART_SetConfig+0x10e6>
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010584:	2b03      	cmp	r3, #3
 8010586:	d032      	beq.n	80105ee <UART_SetConfig+0x10e2>
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801058c:	2b04      	cmp	r3, #4
 801058e:	d02c      	beq.n	80105ea <UART_SetConfig+0x10de>
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010594:	2b05      	cmp	r3, #5
 8010596:	d026      	beq.n	80105e6 <UART_SetConfig+0x10da>
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801059c:	2b06      	cmp	r3, #6
 801059e:	d020      	beq.n	80105e2 <UART_SetConfig+0x10d6>
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a4:	2b07      	cmp	r3, #7
 80105a6:	d01a      	beq.n	80105de <UART_SetConfig+0x10d2>
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ac:	2b08      	cmp	r3, #8
 80105ae:	d014      	beq.n	80105da <UART_SetConfig+0x10ce>
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b4:	2b09      	cmp	r3, #9
 80105b6:	d00e      	beq.n	80105d6 <UART_SetConfig+0x10ca>
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105bc:	2b0a      	cmp	r3, #10
 80105be:	d008      	beq.n	80105d2 <UART_SetConfig+0x10c6>
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c4:	2b0b      	cmp	r3, #11
 80105c6:	d102      	bne.n	80105ce <UART_SetConfig+0x10c2>
 80105c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105cc:	e016      	b.n	80105fc <UART_SetConfig+0x10f0>
 80105ce:	2301      	movs	r3, #1
 80105d0:	e014      	b.n	80105fc <UART_SetConfig+0x10f0>
 80105d2:	2380      	movs	r3, #128	; 0x80
 80105d4:	e012      	b.n	80105fc <UART_SetConfig+0x10f0>
 80105d6:	2340      	movs	r3, #64	; 0x40
 80105d8:	e010      	b.n	80105fc <UART_SetConfig+0x10f0>
 80105da:	2320      	movs	r3, #32
 80105dc:	e00e      	b.n	80105fc <UART_SetConfig+0x10f0>
 80105de:	2310      	movs	r3, #16
 80105e0:	e00c      	b.n	80105fc <UART_SetConfig+0x10f0>
 80105e2:	230c      	movs	r3, #12
 80105e4:	e00a      	b.n	80105fc <UART_SetConfig+0x10f0>
 80105e6:	230a      	movs	r3, #10
 80105e8:	e008      	b.n	80105fc <UART_SetConfig+0x10f0>
 80105ea:	2308      	movs	r3, #8
 80105ec:	e006      	b.n	80105fc <UART_SetConfig+0x10f0>
 80105ee:	2306      	movs	r3, #6
 80105f0:	e004      	b.n	80105fc <UART_SetConfig+0x10f0>
 80105f2:	2304      	movs	r3, #4
 80105f4:	e002      	b.n	80105fc <UART_SetConfig+0x10f0>
 80105f6:	2302      	movs	r3, #2
 80105f8:	e000      	b.n	80105fc <UART_SetConfig+0x10f0>
 80105fa:	2301      	movs	r3, #1
 80105fc:	69ba      	ldr	r2, [r7, #24]
 80105fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	085b      	lsrs	r3, r3, #1
 8010608:	441a      	add	r2, r3
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010612:	b29b      	uxth	r3, r3
 8010614:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010616:	e10f      	b.n	8010838 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801061c:	2b00      	cmp	r3, #0
 801061e:	d044      	beq.n	80106aa <UART_SetConfig+0x119e>
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010624:	2b01      	cmp	r3, #1
 8010626:	d03e      	beq.n	80106a6 <UART_SetConfig+0x119a>
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801062c:	2b02      	cmp	r3, #2
 801062e:	d038      	beq.n	80106a2 <UART_SetConfig+0x1196>
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010634:	2b03      	cmp	r3, #3
 8010636:	d032      	beq.n	801069e <UART_SetConfig+0x1192>
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801063c:	2b04      	cmp	r3, #4
 801063e:	d02c      	beq.n	801069a <UART_SetConfig+0x118e>
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010644:	2b05      	cmp	r3, #5
 8010646:	d026      	beq.n	8010696 <UART_SetConfig+0x118a>
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801064c:	2b06      	cmp	r3, #6
 801064e:	d020      	beq.n	8010692 <UART_SetConfig+0x1186>
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010654:	2b07      	cmp	r3, #7
 8010656:	d01a      	beq.n	801068e <UART_SetConfig+0x1182>
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801065c:	2b08      	cmp	r3, #8
 801065e:	d014      	beq.n	801068a <UART_SetConfig+0x117e>
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010664:	2b09      	cmp	r3, #9
 8010666:	d00e      	beq.n	8010686 <UART_SetConfig+0x117a>
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801066c:	2b0a      	cmp	r3, #10
 801066e:	d008      	beq.n	8010682 <UART_SetConfig+0x1176>
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010674:	2b0b      	cmp	r3, #11
 8010676:	d102      	bne.n	801067e <UART_SetConfig+0x1172>
 8010678:	f44f 7380 	mov.w	r3, #256	; 0x100
 801067c:	e016      	b.n	80106ac <UART_SetConfig+0x11a0>
 801067e:	2301      	movs	r3, #1
 8010680:	e014      	b.n	80106ac <UART_SetConfig+0x11a0>
 8010682:	2380      	movs	r3, #128	; 0x80
 8010684:	e012      	b.n	80106ac <UART_SetConfig+0x11a0>
 8010686:	2340      	movs	r3, #64	; 0x40
 8010688:	e010      	b.n	80106ac <UART_SetConfig+0x11a0>
 801068a:	2320      	movs	r3, #32
 801068c:	e00e      	b.n	80106ac <UART_SetConfig+0x11a0>
 801068e:	2310      	movs	r3, #16
 8010690:	e00c      	b.n	80106ac <UART_SetConfig+0x11a0>
 8010692:	230c      	movs	r3, #12
 8010694:	e00a      	b.n	80106ac <UART_SetConfig+0x11a0>
 8010696:	230a      	movs	r3, #10
 8010698:	e008      	b.n	80106ac <UART_SetConfig+0x11a0>
 801069a:	2308      	movs	r3, #8
 801069c:	e006      	b.n	80106ac <UART_SetConfig+0x11a0>
 801069e:	2306      	movs	r3, #6
 80106a0:	e004      	b.n	80106ac <UART_SetConfig+0x11a0>
 80106a2:	2304      	movs	r3, #4
 80106a4:	e002      	b.n	80106ac <UART_SetConfig+0x11a0>
 80106a6:	2302      	movs	r3, #2
 80106a8:	e000      	b.n	80106ac <UART_SetConfig+0x11a0>
 80106aa:	2301      	movs	r3, #1
 80106ac:	4a74      	ldr	r2, [pc, #464]	; (8010880 <UART_SetConfig+0x1374>)
 80106ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	685b      	ldr	r3, [r3, #4]
 80106b6:	085b      	lsrs	r3, r3, #1
 80106b8:	441a      	add	r2, r3
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	fbb2 f3f3 	udiv	r3, r2, r3
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80106c6:	e0b7      	b.n	8010838 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80106c8:	f7fb f86e 	bl	800b7a8 <HAL_RCC_GetSysClockFreq>
 80106cc:	61b8      	str	r0, [r7, #24]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d044      	beq.n	8010760 <UART_SetConfig+0x1254>
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d03e      	beq.n	801075c <UART_SetConfig+0x1250>
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e2:	2b02      	cmp	r3, #2
 80106e4:	d038      	beq.n	8010758 <UART_SetConfig+0x124c>
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ea:	2b03      	cmp	r3, #3
 80106ec:	d032      	beq.n	8010754 <UART_SetConfig+0x1248>
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f2:	2b04      	cmp	r3, #4
 80106f4:	d02c      	beq.n	8010750 <UART_SetConfig+0x1244>
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106fa:	2b05      	cmp	r3, #5
 80106fc:	d026      	beq.n	801074c <UART_SetConfig+0x1240>
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010702:	2b06      	cmp	r3, #6
 8010704:	d020      	beq.n	8010748 <UART_SetConfig+0x123c>
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801070a:	2b07      	cmp	r3, #7
 801070c:	d01a      	beq.n	8010744 <UART_SetConfig+0x1238>
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010712:	2b08      	cmp	r3, #8
 8010714:	d014      	beq.n	8010740 <UART_SetConfig+0x1234>
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801071a:	2b09      	cmp	r3, #9
 801071c:	d00e      	beq.n	801073c <UART_SetConfig+0x1230>
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010722:	2b0a      	cmp	r3, #10
 8010724:	d008      	beq.n	8010738 <UART_SetConfig+0x122c>
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801072a:	2b0b      	cmp	r3, #11
 801072c:	d102      	bne.n	8010734 <UART_SetConfig+0x1228>
 801072e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010732:	e016      	b.n	8010762 <UART_SetConfig+0x1256>
 8010734:	2301      	movs	r3, #1
 8010736:	e014      	b.n	8010762 <UART_SetConfig+0x1256>
 8010738:	2380      	movs	r3, #128	; 0x80
 801073a:	e012      	b.n	8010762 <UART_SetConfig+0x1256>
 801073c:	2340      	movs	r3, #64	; 0x40
 801073e:	e010      	b.n	8010762 <UART_SetConfig+0x1256>
 8010740:	2320      	movs	r3, #32
 8010742:	e00e      	b.n	8010762 <UART_SetConfig+0x1256>
 8010744:	2310      	movs	r3, #16
 8010746:	e00c      	b.n	8010762 <UART_SetConfig+0x1256>
 8010748:	230c      	movs	r3, #12
 801074a:	e00a      	b.n	8010762 <UART_SetConfig+0x1256>
 801074c:	230a      	movs	r3, #10
 801074e:	e008      	b.n	8010762 <UART_SetConfig+0x1256>
 8010750:	2308      	movs	r3, #8
 8010752:	e006      	b.n	8010762 <UART_SetConfig+0x1256>
 8010754:	2306      	movs	r3, #6
 8010756:	e004      	b.n	8010762 <UART_SetConfig+0x1256>
 8010758:	2304      	movs	r3, #4
 801075a:	e002      	b.n	8010762 <UART_SetConfig+0x1256>
 801075c:	2302      	movs	r3, #2
 801075e:	e000      	b.n	8010762 <UART_SetConfig+0x1256>
 8010760:	2301      	movs	r3, #1
 8010762:	69ba      	ldr	r2, [r7, #24]
 8010764:	fbb2 f2f3 	udiv	r2, r2, r3
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	085b      	lsrs	r3, r3, #1
 801076e:	441a      	add	r2, r3
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	fbb2 f3f3 	udiv	r3, r2, r3
 8010778:	b29b      	uxth	r3, r3
 801077a:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 801077c:	e05c      	b.n	8010838 <UART_SetConfig+0x132c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010782:	2b00      	cmp	r3, #0
 8010784:	d044      	beq.n	8010810 <UART_SetConfig+0x1304>
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801078a:	2b01      	cmp	r3, #1
 801078c:	d03e      	beq.n	801080c <UART_SetConfig+0x1300>
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010792:	2b02      	cmp	r3, #2
 8010794:	d038      	beq.n	8010808 <UART_SetConfig+0x12fc>
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801079a:	2b03      	cmp	r3, #3
 801079c:	d032      	beq.n	8010804 <UART_SetConfig+0x12f8>
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a2:	2b04      	cmp	r3, #4
 80107a4:	d02c      	beq.n	8010800 <UART_SetConfig+0x12f4>
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107aa:	2b05      	cmp	r3, #5
 80107ac:	d026      	beq.n	80107fc <UART_SetConfig+0x12f0>
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b2:	2b06      	cmp	r3, #6
 80107b4:	d020      	beq.n	80107f8 <UART_SetConfig+0x12ec>
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ba:	2b07      	cmp	r3, #7
 80107bc:	d01a      	beq.n	80107f4 <UART_SetConfig+0x12e8>
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c2:	2b08      	cmp	r3, #8
 80107c4:	d014      	beq.n	80107f0 <UART_SetConfig+0x12e4>
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ca:	2b09      	cmp	r3, #9
 80107cc:	d00e      	beq.n	80107ec <UART_SetConfig+0x12e0>
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d2:	2b0a      	cmp	r3, #10
 80107d4:	d008      	beq.n	80107e8 <UART_SetConfig+0x12dc>
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107da:	2b0b      	cmp	r3, #11
 80107dc:	d102      	bne.n	80107e4 <UART_SetConfig+0x12d8>
 80107de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107e2:	e016      	b.n	8010812 <UART_SetConfig+0x1306>
 80107e4:	2301      	movs	r3, #1
 80107e6:	e014      	b.n	8010812 <UART_SetConfig+0x1306>
 80107e8:	2380      	movs	r3, #128	; 0x80
 80107ea:	e012      	b.n	8010812 <UART_SetConfig+0x1306>
 80107ec:	2340      	movs	r3, #64	; 0x40
 80107ee:	e010      	b.n	8010812 <UART_SetConfig+0x1306>
 80107f0:	2320      	movs	r3, #32
 80107f2:	e00e      	b.n	8010812 <UART_SetConfig+0x1306>
 80107f4:	2310      	movs	r3, #16
 80107f6:	e00c      	b.n	8010812 <UART_SetConfig+0x1306>
 80107f8:	230c      	movs	r3, #12
 80107fa:	e00a      	b.n	8010812 <UART_SetConfig+0x1306>
 80107fc:	230a      	movs	r3, #10
 80107fe:	e008      	b.n	8010812 <UART_SetConfig+0x1306>
 8010800:	2308      	movs	r3, #8
 8010802:	e006      	b.n	8010812 <UART_SetConfig+0x1306>
 8010804:	2306      	movs	r3, #6
 8010806:	e004      	b.n	8010812 <UART_SetConfig+0x1306>
 8010808:	2304      	movs	r3, #4
 801080a:	e002      	b.n	8010812 <UART_SetConfig+0x1306>
 801080c:	2302      	movs	r3, #2
 801080e:	e000      	b.n	8010812 <UART_SetConfig+0x1306>
 8010810:	2301      	movs	r3, #1
 8010812:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010816:	fbb2 f2f3 	udiv	r2, r2, r3
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	085b      	lsrs	r3, r3, #1
 8010820:	441a      	add	r2, r3
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	fbb2 f3f3 	udiv	r3, r2, r3
 801082a:	b29b      	uxth	r3, r3
 801082c:	627b      	str	r3, [r7, #36]	; 0x24
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 801082e:	e003      	b.n	8010838 <UART_SetConfig+0x132c>
      default:
        ret = HAL_ERROR;
 8010830:	2301      	movs	r3, #1
 8010832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        break;
 8010836:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083a:	2b0f      	cmp	r3, #15
 801083c:	d908      	bls.n	8010850 <UART_SetConfig+0x1344>
 801083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010844:	d204      	bcs.n	8010850 <UART_SetConfig+0x1344>
    {
      huart->Instance->BRR = usartdiv;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801084c:	60da      	str	r2, [r3, #12]
 801084e:	e002      	b.n	8010856 <UART_SetConfig+0x134a>
    }
    else
    {
      ret = HAL_ERROR;
 8010850:	2301      	movs	r3, #1
 8010852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	2201      	movs	r2, #1
 801085a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2201      	movs	r2, #1
 8010862:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2200      	movs	r2, #0
 801086a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2200      	movs	r2, #0
 8010870:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8010872:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8010876:	4618      	mov	r0, r3
 8010878:	3730      	adds	r7, #48	; 0x30
 801087a:	46bd      	mov	sp, r7
 801087c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010880:	00f42400 	.word	0x00f42400

08010884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010890:	f003 0301 	and.w	r3, r3, #1
 8010894:	2b00      	cmp	r3, #0
 8010896:	d00a      	beq.n	80108ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	430a      	orrs	r2, r1
 80108ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108b2:	f003 0302 	and.w	r3, r3, #2
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d00a      	beq.n	80108d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	430a      	orrs	r2, r1
 80108ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108d4:	f003 0304 	and.w	r3, r3, #4
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d00a      	beq.n	80108f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	430a      	orrs	r2, r1
 80108f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108f6:	f003 0308 	and.w	r3, r3, #8
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d00a      	beq.n	8010914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	430a      	orrs	r2, r1
 8010912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010918:	f003 0310 	and.w	r3, r3, #16
 801091c:	2b00      	cmp	r3, #0
 801091e:	d00a      	beq.n	8010936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	689b      	ldr	r3, [r3, #8]
 8010926:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	430a      	orrs	r2, r1
 8010934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801093a:	f003 0320 	and.w	r3, r3, #32
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00a      	beq.n	8010958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	689b      	ldr	r3, [r3, #8]
 8010948:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	430a      	orrs	r2, r1
 8010956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801095c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010960:	2b00      	cmp	r3, #0
 8010962:	d01a      	beq.n	801099a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	430a      	orrs	r2, r1
 8010978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801097e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010982:	d10a      	bne.n	801099a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	430a      	orrs	r2, r1
 8010998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d00a      	beq.n	80109bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	430a      	orrs	r2, r1
 80109ba:	605a      	str	r2, [r3, #4]
  }
}
 80109bc:	bf00      	nop
 80109be:	370c      	adds	r7, #12
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b086      	sub	sp, #24
 80109cc:	af02      	add	r7, sp, #8
 80109ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2200      	movs	r2, #0
 80109d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80109d8:	f7f6 faa4 	bl	8006f24 <HAL_GetTick>
 80109dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f003 0308 	and.w	r3, r3, #8
 80109e8:	2b08      	cmp	r3, #8
 80109ea:	d10e      	bne.n	8010a0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80109ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80109f0:	9300      	str	r3, [sp, #0]
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2200      	movs	r2, #0
 80109f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f000 f82c 	bl	8010a58 <UART_WaitOnFlagUntilTimeout>
 8010a00:	4603      	mov	r3, r0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d001      	beq.n	8010a0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a06:	2303      	movs	r3, #3
 8010a08:	e022      	b.n	8010a50 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f003 0304 	and.w	r3, r3, #4
 8010a14:	2b04      	cmp	r3, #4
 8010a16:	d10e      	bne.n	8010a36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010a1c:	9300      	str	r3, [sp, #0]
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	2200      	movs	r2, #0
 8010a22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f000 f816 	bl	8010a58 <UART_WaitOnFlagUntilTimeout>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d001      	beq.n	8010a36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a32:	2303      	movs	r3, #3
 8010a34:	e00c      	b.n	8010a50 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2220      	movs	r2, #32
 8010a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2220      	movs	r2, #32
 8010a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010a4e:	2300      	movs	r3, #0
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3710      	adds	r7, #16
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b084      	sub	sp, #16
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	60f8      	str	r0, [r7, #12]
 8010a60:	60b9      	str	r1, [r7, #8]
 8010a62:	603b      	str	r3, [r7, #0]
 8010a64:	4613      	mov	r3, r2
 8010a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a68:	e062      	b.n	8010b30 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a70:	d05e      	beq.n	8010b30 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a72:	f7f6 fa57 	bl	8006f24 <HAL_GetTick>
 8010a76:	4602      	mov	r2, r0
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	1ad3      	subs	r3, r2, r3
 8010a7c:	69ba      	ldr	r2, [r7, #24]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d302      	bcc.n	8010a88 <UART_WaitOnFlagUntilTimeout+0x30>
 8010a82:	69bb      	ldr	r3, [r7, #24]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d11d      	bne.n	8010ac4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010a96:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	689a      	ldr	r2, [r3, #8]
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f022 0201 	bic.w	r2, r2, #1
 8010aa6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2220      	movs	r2, #32
 8010aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2220      	movs	r2, #32
 8010ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2200      	movs	r2, #0
 8010abc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8010ac0:	2303      	movs	r3, #3
 8010ac2:	e045      	b.n	8010b50 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f003 0304 	and.w	r3, r3, #4
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d02e      	beq.n	8010b30 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	69db      	ldr	r3, [r3, #28]
 8010ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ae0:	d126      	bne.n	8010b30 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010aea:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	681a      	ldr	r2, [r3, #0]
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010afa:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	689a      	ldr	r2, [r3, #8]
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f022 0201 	bic.w	r2, r2, #1
 8010b0a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	2220      	movs	r2, #32
 8010b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2220      	movs	r2, #32
 8010b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2220      	movs	r2, #32
 8010b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2200      	movs	r2, #0
 8010b28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8010b2c:	2303      	movs	r3, #3
 8010b2e:	e00f      	b.n	8010b50 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	69da      	ldr	r2, [r3, #28]
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	4013      	ands	r3, r2
 8010b3a:	68ba      	ldr	r2, [r7, #8]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	bf0c      	ite	eq
 8010b40:	2301      	moveq	r3, #1
 8010b42:	2300      	movne	r3, #0
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	461a      	mov	r2, r3
 8010b48:	79fb      	ldrb	r3, [r7, #7]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d08d      	beq.n	8010a6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b4e:	2300      	movs	r3, #0
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3710      	adds	r7, #16
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b085      	sub	sp, #20
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d101      	bne.n	8010b6e <HAL_UARTEx_DisableFifoMode+0x16>
 8010b6a:	2302      	movs	r3, #2
 8010b6c:	e027      	b.n	8010bbe <HAL_UARTEx_DisableFifoMode+0x66>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2201      	movs	r2, #1
 8010b72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2224      	movs	r2, #36	; 0x24
 8010b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	f022 0201 	bic.w	r2, r2, #1
 8010b94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010b9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2220      	movs	r2, #32
 8010bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010bbc:	2300      	movs	r3, #0
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3714      	adds	r7, #20
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr

08010bca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010bca:	b580      	push	{r7, lr}
 8010bcc:	b084      	sub	sp, #16
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
 8010bd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010bda:	2b01      	cmp	r3, #1
 8010bdc:	d101      	bne.n	8010be2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010bde:	2302      	movs	r3, #2
 8010be0:	e02d      	b.n	8010c3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2201      	movs	r2, #1
 8010be6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2224      	movs	r2, #36	; 0x24
 8010bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	f022 0201 	bic.w	r2, r2, #1
 8010c08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	689b      	ldr	r3, [r3, #8]
 8010c10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	683a      	ldr	r2, [r7, #0]
 8010c1a:	430a      	orrs	r2, r1
 8010c1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f000 f850 	bl	8010cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2220      	movs	r2, #32
 8010c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3710      	adds	r7, #16
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c46:	b580      	push	{r7, lr}
 8010c48:	b084      	sub	sp, #16
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
 8010c4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d101      	bne.n	8010c5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010c5a:	2302      	movs	r3, #2
 8010c5c:	e02d      	b.n	8010cba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2201      	movs	r2, #1
 8010c62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2224      	movs	r2, #36	; 0x24
 8010c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	f022 0201 	bic.w	r2, r2, #1
 8010c84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	683a      	ldr	r2, [r7, #0]
 8010c96:	430a      	orrs	r2, r1
 8010c98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f000 f812 	bl	8010cc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	68fa      	ldr	r2, [r7, #12]
 8010ca6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2220      	movs	r2, #32
 8010cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010cb8:	2300      	movs	r3, #0
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3710      	adds	r7, #16
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
	...

08010cc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b089      	sub	sp, #36	; 0x24
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010ccc:	4a2f      	ldr	r2, [pc, #188]	; (8010d8c <UARTEx_SetNbDataToProcess+0xc8>)
 8010cce:	f107 0314 	add.w	r3, r7, #20
 8010cd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cd6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8010cda:	4a2d      	ldr	r2, [pc, #180]	; (8010d90 <UARTEx_SetNbDataToProcess+0xcc>)
 8010cdc:	f107 030c 	add.w	r3, r7, #12
 8010ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ce4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d108      	bne.n	8010d02 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010d00:	e03d      	b.n	8010d7e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010d02:	2308      	movs	r3, #8
 8010d04:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010d06:	2308      	movs	r3, #8
 8010d08:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	689b      	ldr	r3, [r3, #8]
 8010d10:	0e5b      	lsrs	r3, r3, #25
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	f003 0307 	and.w	r3, r3, #7
 8010d18:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	689b      	ldr	r3, [r3, #8]
 8010d20:	0f5b      	lsrs	r3, r3, #29
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	f003 0307 	and.w	r3, r3, #7
 8010d28:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8010d2a:	7fbb      	ldrb	r3, [r7, #30]
 8010d2c:	7f3a      	ldrb	r2, [r7, #28]
 8010d2e:	f107 0120 	add.w	r1, r7, #32
 8010d32:	440a      	add	r2, r1
 8010d34:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010d38:	fb02 f303 	mul.w	r3, r2, r3
 8010d3c:	7f3a      	ldrb	r2, [r7, #28]
 8010d3e:	f107 0120 	add.w	r1, r7, #32
 8010d42:	440a      	add	r2, r1
 8010d44:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010d48:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d4c:	b29a      	uxth	r2, r3
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8010d54:	7ffb      	ldrb	r3, [r7, #31]
 8010d56:	7f7a      	ldrb	r2, [r7, #29]
 8010d58:	f107 0120 	add.w	r1, r7, #32
 8010d5c:	440a      	add	r2, r1
 8010d5e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010d62:	fb02 f303 	mul.w	r3, r2, r3
 8010d66:	7f7a      	ldrb	r2, [r7, #29]
 8010d68:	f107 0120 	add.w	r1, r7, #32
 8010d6c:	440a      	add	r2, r1
 8010d6e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010d72:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010d7e:	bf00      	nop
 8010d80:	3724      	adds	r7, #36	; 0x24
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr
 8010d8a:	bf00      	nop
 8010d8c:	080225b4 	.word	0x080225b4
 8010d90:	080225bc 	.word	0x080225bc

08010d94 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010d94:	b084      	sub	sp, #16
 8010d96:	b480      	push	{r7}
 8010d98:	b085      	sub	sp, #20
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	6078      	str	r0, [r7, #4]
 8010d9e:	f107 001c 	add.w	r0, r7, #28
 8010da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010da6:	2300      	movs	r3, #0
 8010da8:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8010daa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8010dac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010dae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8010db2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8010db6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8010dba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010dbc:	68fa      	ldr	r2, [r7, #12]
 8010dbe:	4313      	orrs	r3, r2
 8010dc0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	685a      	ldr	r2, [r3, #4]
 8010dc6:	4b07      	ldr	r3, [pc, #28]	; (8010de4 <SDMMC_Init+0x50>)
 8010dc8:	4013      	ands	r3, r2
 8010dca:	68fa      	ldr	r2, [r7, #12]
 8010dcc:	431a      	orrs	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010dd2:	2300      	movs	r3, #0
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3714      	adds	r7, #20
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	b004      	add	sp, #16
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop
 8010de4:	ffc02c00 	.word	0xffc02c00

08010de8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b083      	sub	sp, #12
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	370c      	adds	r7, #12
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr

08010e02 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010e02:	b480      	push	{r7}
 8010e04:	b083      	sub	sp, #12
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	6078      	str	r0, [r7, #4]
 8010e0a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010e16:	2300      	movs	r3, #0
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	370c      	adds	r7, #12
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr

08010e24 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b082      	sub	sp, #8
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	f043 0203 	orr.w	r2, r3, #3
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010e38:	2002      	movs	r0, #2
 8010e3a:	f7f6 f87f 	bl	8006f3c <HAL_Delay>

  return HAL_OK;
 8010e3e:	2300      	movs	r3, #0
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3708      	adds	r7, #8
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}

08010e48 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b083      	sub	sp, #12
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f003 0303 	and.w	r3, r3, #3
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	370c      	adds	r7, #12
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr

08010e64 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b085      	sub	sp, #20
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	681a      	ldr	r2, [r3, #0]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010e82:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010e88:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010e8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010e90:	68fa      	ldr	r2, [r7, #12]
 8010e92:	4313      	orrs	r3, r2
 8010e94:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	68da      	ldr	r2, [r3, #12]
 8010e9a:	4b06      	ldr	r3, [pc, #24]	; (8010eb4 <SDMMC_SendCommand+0x50>)
 8010e9c:	4013      	ands	r3, r2
 8010e9e:	68fa      	ldr	r2, [r7, #12]
 8010ea0:	431a      	orrs	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010ea6:	2300      	movs	r3, #0
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3714      	adds	r7, #20
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr
 8010eb4:	fffee0c0 	.word	0xfffee0c0

08010eb8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	691b      	ldr	r3, [r3, #16]
 8010ec4:	b2db      	uxtb	r3, r3
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	370c      	adds	r7, #12
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr

08010ed2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010ed2:	b480      	push	{r7}
 8010ed4:	b085      	sub	sp, #20
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
 8010eda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	3314      	adds	r3, #20
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	681b      	ldr	r3, [r3, #0]
}
 8010eec:	4618      	mov	r0, r3
 8010eee:	3714      	adds	r7, #20
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef6:	4770      	bx	lr

08010ef8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b085      	sub	sp, #20
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010f02:	2300      	movs	r3, #0
 8010f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	681a      	ldr	r2, [r3, #0]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	685a      	ldr	r2, [r3, #4]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010f1e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010f24:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010f2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010f2c:	68fa      	ldr	r2, [r7, #12]
 8010f2e:	4313      	orrs	r3, r2
 8010f30:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	431a      	orrs	r2, r3
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010f42:	2300      	movs	r3, #0

}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3714      	adds	r7, #20
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4e:	4770      	bx	lr

08010f50 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b088      	sub	sp, #32
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010f5e:	2310      	movs	r3, #16
 8010f60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f72:	f107 0308 	add.w	r3, r7, #8
 8010f76:	4619      	mov	r1, r3
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f7ff ff73 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f82:	2110      	movs	r1, #16
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f000 faa5 	bl	80114d4 <SDMMC_GetCmdResp1>
 8010f8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f8c:	69fb      	ldr	r3, [r7, #28]
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3720      	adds	r7, #32
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}

08010f96 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010f96:	b580      	push	{r7, lr}
 8010f98:	b088      	sub	sp, #32
 8010f9a:	af00      	add	r7, sp, #0
 8010f9c:	6078      	str	r0, [r7, #4]
 8010f9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010fa4:	2311      	movs	r3, #17
 8010fa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010fac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fae:	2300      	movs	r3, #0
 8010fb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010fb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fb8:	f107 0308 	add.w	r3, r7, #8
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f7ff ff50 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fc8:	2111      	movs	r1, #17
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 fa82 	bl	80114d4 <SDMMC_GetCmdResp1>
 8010fd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fd2:	69fb      	ldr	r3, [r7, #28]
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3720      	adds	r7, #32
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b088      	sub	sp, #32
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010fea:	2312      	movs	r3, #18
 8010fec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ffc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ffe:	f107 0308 	add.w	r3, r7, #8
 8011002:	4619      	mov	r1, r3
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f7ff ff2d 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801100a:	f241 3288 	movw	r2, #5000	; 0x1388
 801100e:	2112      	movs	r1, #18
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f000 fa5f 	bl	80114d4 <SDMMC_GetCmdResp1>
 8011016:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011018:	69fb      	ldr	r3, [r7, #28]
}
 801101a:	4618      	mov	r0, r3
 801101c:	3720      	adds	r7, #32
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}

08011022 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011022:	b580      	push	{r7, lr}
 8011024:	b088      	sub	sp, #32
 8011026:	af00      	add	r7, sp, #0
 8011028:	6078      	str	r0, [r7, #4]
 801102a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011030:	2318      	movs	r3, #24
 8011032:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801103a:	2300      	movs	r3, #0
 801103c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011042:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011044:	f107 0308 	add.w	r3, r7, #8
 8011048:	4619      	mov	r1, r3
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f7ff ff0a 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011050:	f241 3288 	movw	r2, #5000	; 0x1388
 8011054:	2118      	movs	r1, #24
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 fa3c 	bl	80114d4 <SDMMC_GetCmdResp1>
 801105c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801105e:	69fb      	ldr	r3, [r7, #28]
}
 8011060:	4618      	mov	r0, r3
 8011062:	3720      	adds	r7, #32
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}

08011068 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b088      	sub	sp, #32
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011076:	2319      	movs	r3, #25
 8011078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801107a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801107e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011080:	2300      	movs	r3, #0
 8011082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011088:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801108a:	f107 0308 	add.w	r3, r7, #8
 801108e:	4619      	mov	r1, r3
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f7ff fee7 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011096:	f241 3288 	movw	r2, #5000	; 0x1388
 801109a:	2119      	movs	r1, #25
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 fa19 	bl	80114d4 <SDMMC_GetCmdResp1>
 80110a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110a4:	69fb      	ldr	r3, [r7, #28]
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3720      	adds	r7, #32
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
	...

080110b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b088      	sub	sp, #32
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80110b8:	2300      	movs	r3, #0
 80110ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80110bc:	230c      	movs	r3, #12
 80110be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110c6:	2300      	movs	r3, #0
 80110c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110ce:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110e8:	f107 0308 	add.w	r3, r7, #8
 80110ec:	4619      	mov	r1, r3
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f7ff feb8 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80110f4:	4a08      	ldr	r2, [pc, #32]	; (8011118 <SDMMC_CmdStopTransfer+0x68>)
 80110f6:	210c      	movs	r1, #12
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 f9eb 	bl	80114d4 <SDMMC_GetCmdResp1>
 80110fe:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 801110c:	69fb      	ldr	r3, [r7, #28]
}
 801110e:	4618      	mov	r0, r3
 8011110:	3720      	adds	r7, #32
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	05f5e100 	.word	0x05f5e100

0801111c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b08a      	sub	sp, #40	; 0x28
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801112c:	2307      	movs	r3, #7
 801112e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011134:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011136:	2300      	movs	r3, #0
 8011138:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801113e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011140:	f107 0310 	add.w	r3, r7, #16
 8011144:	4619      	mov	r1, r3
 8011146:	68f8      	ldr	r0, [r7, #12]
 8011148:	f7ff fe8c 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801114c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011150:	2107      	movs	r1, #7
 8011152:	68f8      	ldr	r0, [r7, #12]
 8011154:	f000 f9be 	bl	80114d4 <SDMMC_GetCmdResp1>
 8011158:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801115c:	4618      	mov	r0, r3
 801115e:	3728      	adds	r7, #40	; 0x28
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b088      	sub	sp, #32
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801116c:	2300      	movs	r3, #0
 801116e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011170:	2300      	movs	r3, #0
 8011172:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011174:	2300      	movs	r3, #0
 8011176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011178:	2300      	movs	r3, #0
 801117a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801117c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011180:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011182:	f107 0308 	add.w	r3, r7, #8
 8011186:	4619      	mov	r1, r3
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f7ff fe6b 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 f976 	bl	8011480 <SDMMC_GetCmdError>
 8011194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011196:	69fb      	ldr	r3, [r7, #28]
}
 8011198:	4618      	mov	r0, r3
 801119a:	3720      	adds	r7, #32
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}

080111a0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b088      	sub	sp, #32
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80111a8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80111ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80111ae:	2308      	movs	r3, #8
 80111b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111b8:	2300      	movs	r3, #0
 80111ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111c2:	f107 0308 	add.w	r3, r7, #8
 80111c6:	4619      	mov	r1, r3
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f7ff fe4b 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f000 fb6a 	bl	80118a8 <SDMMC_GetCmdResp7>
 80111d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111d6:	69fb      	ldr	r3, [r7, #28]
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3720      	adds	r7, #32
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b088      	sub	sp, #32
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80111ee:	2337      	movs	r3, #55	; 0x37
 80111f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111f8:	2300      	movs	r3, #0
 80111fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011200:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011202:	f107 0308 	add.w	r3, r7, #8
 8011206:	4619      	mov	r1, r3
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f7ff fe2b 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801120e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011212:	2137      	movs	r1, #55	; 0x37
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f000 f95d 	bl	80114d4 <SDMMC_GetCmdResp1>
 801121a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801121c:	69fb      	ldr	r3, [r7, #28]
}
 801121e:	4618      	mov	r0, r3
 8011220:	3720      	adds	r7, #32
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011226:	b580      	push	{r7, lr}
 8011228:	b088      	sub	sp, #32
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
 801122e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011234:	2329      	movs	r3, #41	; 0x29
 8011236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011238:	f44f 7380 	mov.w	r3, #256	; 0x100
 801123c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801123e:	2300      	movs	r3, #0
 8011240:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011246:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011248:	f107 0308 	add.w	r3, r7, #8
 801124c:	4619      	mov	r1, r3
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f7ff fe08 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f000 fa75 	bl	8011744 <SDMMC_GetCmdResp3>
 801125a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801125c:	69fb      	ldr	r3, [r7, #28]
}
 801125e:	4618      	mov	r0, r3
 8011260:	3720      	adds	r7, #32
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}

08011266 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b088      	sub	sp, #32
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
 801126e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011274:	2306      	movs	r3, #6
 8011276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011278:	f44f 7380 	mov.w	r3, #256	; 0x100
 801127c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801127e:	2300      	movs	r3, #0
 8011280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011286:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011288:	f107 0308 	add.w	r3, r7, #8
 801128c:	4619      	mov	r1, r3
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f7ff fde8 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011294:	f241 3288 	movw	r2, #5000	; 0x1388
 8011298:	2106      	movs	r1, #6
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f000 f91a 	bl	80114d4 <SDMMC_GetCmdResp1>
 80112a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112a2:	69fb      	ldr	r3, [r7, #28]
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3720      	adds	r7, #32
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}

080112ac <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b088      	sub	sp, #32
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80112b4:	2300      	movs	r3, #0
 80112b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80112b8:	2333      	movs	r3, #51	; 0x33
 80112ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112c2:	2300      	movs	r3, #0
 80112c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112cc:	f107 0308 	add.w	r3, r7, #8
 80112d0:	4619      	mov	r1, r3
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f7ff fdc6 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80112d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80112dc:	2133      	movs	r1, #51	; 0x33
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f000 f8f8 	bl	80114d4 <SDMMC_GetCmdResp1>
 80112e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112e6:	69fb      	ldr	r3, [r7, #28]
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3720      	adds	r7, #32
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b088      	sub	sp, #32
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80112f8:	2300      	movs	r3, #0
 80112fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80112fc:	2302      	movs	r3, #2
 80112fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011300:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011306:	2300      	movs	r3, #0
 8011308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801130a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801130e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011310:	f107 0308 	add.w	r3, r7, #8
 8011314:	4619      	mov	r1, r3
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f7ff fda4 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f000 f9c9 	bl	80116b4 <SDMMC_GetCmdResp2>
 8011322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011324:	69fb      	ldr	r3, [r7, #28]
}
 8011326:	4618      	mov	r0, r3
 8011328:	3720      	adds	r7, #32
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}

0801132e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801132e:	b580      	push	{r7, lr}
 8011330:	b088      	sub	sp, #32
 8011332:	af00      	add	r7, sp, #0
 8011334:	6078      	str	r0, [r7, #4]
 8011336:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801133c:	2309      	movs	r3, #9
 801133e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011340:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011346:	2300      	movs	r3, #0
 8011348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801134e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011350:	f107 0308 	add.w	r3, r7, #8
 8011354:	4619      	mov	r1, r3
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f7ff fd84 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f000 f9a9 	bl	80116b4 <SDMMC_GetCmdResp2>
 8011362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011364:	69fb      	ldr	r3, [r7, #28]
}
 8011366:	4618      	mov	r0, r3
 8011368:	3720      	adds	r7, #32
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}

0801136e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801136e:	b580      	push	{r7, lr}
 8011370:	b088      	sub	sp, #32
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
 8011376:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011378:	2300      	movs	r3, #0
 801137a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801137c:	2303      	movs	r3, #3
 801137e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011386:	2300      	movs	r3, #0
 8011388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801138e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011390:	f107 0308 	add.w	r3, r7, #8
 8011394:	4619      	mov	r1, r3
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f7ff fd64 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801139c:	683a      	ldr	r2, [r7, #0]
 801139e:	2103      	movs	r1, #3
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f000 fa0b 	bl	80117bc <SDMMC_GetCmdResp6>
 80113a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113a8:	69fb      	ldr	r3, [r7, #28]
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3720      	adds	r7, #32
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}

080113b2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80113b2:	b580      	push	{r7, lr}
 80113b4:	b088      	sub	sp, #32
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	6078      	str	r0, [r7, #4]
 80113ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80113c0:	230d      	movs	r3, #13
 80113c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113ca:	2300      	movs	r3, #0
 80113cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113d4:	f107 0308 	add.w	r3, r7, #8
 80113d8:	4619      	mov	r1, r3
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f7ff fd42 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80113e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80113e4:	210d      	movs	r1, #13
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f000 f874 	bl	80114d4 <SDMMC_GetCmdResp1>
 80113ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113ee:	69fb      	ldr	r3, [r7, #28]
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3720      	adds	r7, #32
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b088      	sub	sp, #32
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011400:	2300      	movs	r3, #0
 8011402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011404:	230d      	movs	r3, #13
 8011406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011408:	f44f 7380 	mov.w	r3, #256	; 0x100
 801140c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801140e:	2300      	movs	r3, #0
 8011410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011416:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011418:	f107 0308 	add.w	r3, r7, #8
 801141c:	4619      	mov	r1, r3
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f7ff fd20 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011424:	f241 3288 	movw	r2, #5000	; 0x1388
 8011428:	210d      	movs	r1, #13
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f000 f852 	bl	80114d4 <SDMMC_GetCmdResp1>
 8011430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011432:	69fb      	ldr	r3, [r7, #28]
}
 8011434:	4618      	mov	r0, r3
 8011436:	3720      	adds	r7, #32
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}

0801143c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b088      	sub	sp, #32
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8011444:	2300      	movs	r3, #0
 8011446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8011448:	230b      	movs	r3, #11
 801144a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801144c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011452:	2300      	movs	r3, #0
 8011454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801145a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801145c:	f107 0308 	add.w	r3, r7, #8
 8011460:	4619      	mov	r1, r3
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f7ff fcfe 	bl	8010e64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8011468:	f241 3288 	movw	r2, #5000	; 0x1388
 801146c:	210b      	movs	r1, #11
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f000 f830 	bl	80114d4 <SDMMC_GetCmdResp1>
 8011474:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011476:	69fb      	ldr	r3, [r7, #28]
}
 8011478:	4618      	mov	r0, r3
 801147a:	3720      	adds	r7, #32
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011480:	b490      	push	{r4, r7}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011488:	4b0f      	ldr	r3, [pc, #60]	; (80114c8 <SDMMC_GetCmdError+0x48>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a0f      	ldr	r2, [pc, #60]	; (80114cc <SDMMC_GetCmdError+0x4c>)
 801148e:	fba2 2303 	umull	r2, r3, r2, r3
 8011492:	0a5b      	lsrs	r3, r3, #9
 8011494:	f241 3288 	movw	r2, #5000	; 0x1388
 8011498:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 801149c:	4623      	mov	r3, r4
 801149e:	1e5c      	subs	r4, r3, #1
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d102      	bne.n	80114aa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80114a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80114a8:	e009      	b.n	80114be <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d0f2      	beq.n	801149c <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	4a05      	ldr	r2, [pc, #20]	; (80114d0 <SDMMC_GetCmdError+0x50>)
 80114ba:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80114bc:	2300      	movs	r3, #0
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3708      	adds	r7, #8
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bc90      	pop	{r4, r7}
 80114c6:	4770      	bx	lr
 80114c8:	20000038 	.word	0x20000038
 80114cc:	10624dd3 	.word	0x10624dd3
 80114d0:	002000c5 	.word	0x002000c5

080114d4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80114d4:	b590      	push	{r4, r7, lr}
 80114d6:	b087      	sub	sp, #28
 80114d8:	af00      	add	r7, sp, #0
 80114da:	60f8      	str	r0, [r7, #12]
 80114dc:	460b      	mov	r3, r1
 80114de:	607a      	str	r2, [r7, #4]
 80114e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80114e2:	4b6f      	ldr	r3, [pc, #444]	; (80116a0 <SDMMC_GetCmdResp1+0x1cc>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	4a6f      	ldr	r2, [pc, #444]	; (80116a4 <SDMMC_GetCmdResp1+0x1d0>)
 80114e8:	fba2 2303 	umull	r2, r3, r2, r3
 80114ec:	0a5b      	lsrs	r3, r3, #9
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80114f4:	4623      	mov	r3, r4
 80114f6:	1e5c      	subs	r4, r3, #1
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d102      	bne.n	8011502 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80114fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011500:	e0c9      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011506:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011508:	697a      	ldr	r2, [r7, #20]
 801150a:	4b67      	ldr	r3, [pc, #412]	; (80116a8 <SDMMC_GetCmdResp1+0x1d4>)
 801150c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801150e:	2b00      	cmp	r3, #0
 8011510:	d0f0      	beq.n	80114f4 <SDMMC_GetCmdResp1+0x20>
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011518:	2b00      	cmp	r3, #0
 801151a:	d1eb      	bne.n	80114f4 <SDMMC_GetCmdResp1+0x20>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011520:	f003 0304 	and.w	r3, r3, #4
 8011524:	2b00      	cmp	r3, #0
 8011526:	d004      	beq.n	8011532 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	2204      	movs	r2, #4
 801152c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801152e:	2304      	movs	r3, #4
 8011530:	e0b1      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011536:	f003 0301 	and.w	r3, r3, #1
 801153a:	2b00      	cmp	r3, #0
 801153c:	d004      	beq.n	8011548 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2201      	movs	r2, #1
 8011542:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011544:	2301      	movs	r3, #1
 8011546:	e0a6      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	4a58      	ldr	r2, [pc, #352]	; (80116ac <SDMMC_GetCmdResp1+0x1d8>)
 801154c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801154e:	68f8      	ldr	r0, [r7, #12]
 8011550:	f7ff fcb2 	bl	8010eb8 <SDMMC_GetCommandResponse>
 8011554:	4603      	mov	r3, r0
 8011556:	461a      	mov	r2, r3
 8011558:	7afb      	ldrb	r3, [r7, #11]
 801155a:	4293      	cmp	r3, r2
 801155c:	d001      	beq.n	8011562 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801155e:	2301      	movs	r3, #1
 8011560:	e099      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011562:	2100      	movs	r1, #0
 8011564:	68f8      	ldr	r0, [r7, #12]
 8011566:	f7ff fcb4 	bl	8010ed2 <SDMMC_GetResponse>
 801156a:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801156c:	693a      	ldr	r2, [r7, #16]
 801156e:	4b50      	ldr	r3, [pc, #320]	; (80116b0 <SDMMC_GetCmdResp1+0x1dc>)
 8011570:	4013      	ands	r3, r2
 8011572:	2b00      	cmp	r3, #0
 8011574:	d101      	bne.n	801157a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8011576:	2300      	movs	r3, #0
 8011578:	e08d      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	2b00      	cmp	r3, #0
 801157e:	da02      	bge.n	8011586 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011580:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011584:	e087      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801158c:	2b00      	cmp	r3, #0
 801158e:	d001      	beq.n	8011594 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011590:	2340      	movs	r3, #64	; 0x40
 8011592:	e080      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801159a:	2b00      	cmp	r3, #0
 801159c:	d001      	beq.n	80115a2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801159e:	2380      	movs	r3, #128	; 0x80
 80115a0:	e079      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d002      	beq.n	80115b2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80115ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115b0:	e071      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d002      	beq.n	80115c2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80115bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115c0:	e069      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d002      	beq.n	80115d2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80115cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115d0:	e061      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d002      	beq.n	80115e2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80115dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80115e0:	e059      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d002      	beq.n	80115f2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80115ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115f0:	e051      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d002      	beq.n	8011602 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80115fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011600:	e049      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011608:	2b00      	cmp	r3, #0
 801160a:	d002      	beq.n	8011612 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801160c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011610:	e041      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011618:	2b00      	cmp	r3, #0
 801161a:	d002      	beq.n	8011622 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 801161c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011620:	e039      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011628:	2b00      	cmp	r3, #0
 801162a:	d002      	beq.n	8011632 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801162c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011630:	e031      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011638:	2b00      	cmp	r3, #0
 801163a:	d002      	beq.n	8011642 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801163c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011640:	e029      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011648:	2b00      	cmp	r3, #0
 801164a:	d002      	beq.n	8011652 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801164c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011650:	e021      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011658:	2b00      	cmp	r3, #0
 801165a:	d002      	beq.n	8011662 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801165c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011660:	e019      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011668:	2b00      	cmp	r3, #0
 801166a:	d002      	beq.n	8011672 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801166c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011670:	e011      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011678:	2b00      	cmp	r3, #0
 801167a:	d002      	beq.n	8011682 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801167c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011680:	e009      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	f003 0308 	and.w	r3, r3, #8
 8011688:	2b00      	cmp	r3, #0
 801168a:	d002      	beq.n	8011692 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801168c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011690:	e001      	b.n	8011696 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011696:	4618      	mov	r0, r3
 8011698:	371c      	adds	r7, #28
 801169a:	46bd      	mov	sp, r7
 801169c:	bd90      	pop	{r4, r7, pc}
 801169e:	bf00      	nop
 80116a0:	20000038 	.word	0x20000038
 80116a4:	10624dd3 	.word	0x10624dd3
 80116a8:	00200045 	.word	0x00200045
 80116ac:	002000c5 	.word	0x002000c5
 80116b0:	fdffe008 	.word	0xfdffe008

080116b4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80116b4:	b490      	push	{r4, r7}
 80116b6:	b084      	sub	sp, #16
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116bc:	4b1e      	ldr	r3, [pc, #120]	; (8011738 <SDMMC_GetCmdResp2+0x84>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	4a1e      	ldr	r2, [pc, #120]	; (801173c <SDMMC_GetCmdResp2+0x88>)
 80116c2:	fba2 2303 	umull	r2, r3, r2, r3
 80116c6:	0a5b      	lsrs	r3, r3, #9
 80116c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80116cc:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80116d0:	4623      	mov	r3, r4
 80116d2:	1e5c      	subs	r4, r3, #1
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d102      	bne.n	80116de <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80116d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80116dc:	e026      	b.n	801172c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116e2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d0f0      	beq.n	80116d0 <SDMMC_GetCmdResp2+0x1c>
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d1eb      	bne.n	80116d0 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116fc:	f003 0304 	and.w	r3, r3, #4
 8011700:	2b00      	cmp	r3, #0
 8011702:	d004      	beq.n	801170e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2204      	movs	r2, #4
 8011708:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801170a:	2304      	movs	r3, #4
 801170c:	e00e      	b.n	801172c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011712:	f003 0301 	and.w	r3, r3, #1
 8011716:	2b00      	cmp	r3, #0
 8011718:	d004      	beq.n	8011724 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2201      	movs	r2, #1
 801171e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011720:	2301      	movs	r3, #1
 8011722:	e003      	b.n	801172c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	4a06      	ldr	r2, [pc, #24]	; (8011740 <SDMMC_GetCmdResp2+0x8c>)
 8011728:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801172a:	2300      	movs	r3, #0
}
 801172c:	4618      	mov	r0, r3
 801172e:	3710      	adds	r7, #16
 8011730:	46bd      	mov	sp, r7
 8011732:	bc90      	pop	{r4, r7}
 8011734:	4770      	bx	lr
 8011736:	bf00      	nop
 8011738:	20000038 	.word	0x20000038
 801173c:	10624dd3 	.word	0x10624dd3
 8011740:	002000c5 	.word	0x002000c5

08011744 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011744:	b490      	push	{r4, r7}
 8011746:	b084      	sub	sp, #16
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801174c:	4b18      	ldr	r3, [pc, #96]	; (80117b0 <SDMMC_GetCmdResp3+0x6c>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	4a18      	ldr	r2, [pc, #96]	; (80117b4 <SDMMC_GetCmdResp3+0x70>)
 8011752:	fba2 2303 	umull	r2, r3, r2, r3
 8011756:	0a5b      	lsrs	r3, r3, #9
 8011758:	f241 3288 	movw	r2, #5000	; 0x1388
 801175c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011760:	4623      	mov	r3, r4
 8011762:	1e5c      	subs	r4, r3, #1
 8011764:	2b00      	cmp	r3, #0
 8011766:	d102      	bne.n	801176e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801176c:	e01b      	b.n	80117a6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011772:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801177a:	2b00      	cmp	r3, #0
 801177c:	d0f0      	beq.n	8011760 <SDMMC_GetCmdResp3+0x1c>
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011784:	2b00      	cmp	r3, #0
 8011786:	d1eb      	bne.n	8011760 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801178c:	f003 0304 	and.w	r3, r3, #4
 8011790:	2b00      	cmp	r3, #0
 8011792:	d004      	beq.n	801179e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2204      	movs	r2, #4
 8011798:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801179a:	2304      	movs	r3, #4
 801179c:	e003      	b.n	80117a6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	4a05      	ldr	r2, [pc, #20]	; (80117b8 <SDMMC_GetCmdResp3+0x74>)
 80117a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80117a4:	2300      	movs	r3, #0
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	3710      	adds	r7, #16
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bc90      	pop	{r4, r7}
 80117ae:	4770      	bx	lr
 80117b0:	20000038 	.word	0x20000038
 80117b4:	10624dd3 	.word	0x10624dd3
 80117b8:	002000c5 	.word	0x002000c5

080117bc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80117bc:	b590      	push	{r4, r7, lr}
 80117be:	b087      	sub	sp, #28
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	60f8      	str	r0, [r7, #12]
 80117c4:	460b      	mov	r3, r1
 80117c6:	607a      	str	r2, [r7, #4]
 80117c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80117ca:	4b34      	ldr	r3, [pc, #208]	; (801189c <SDMMC_GetCmdResp6+0xe0>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	4a34      	ldr	r2, [pc, #208]	; (80118a0 <SDMMC_GetCmdResp6+0xe4>)
 80117d0:	fba2 2303 	umull	r2, r3, r2, r3
 80117d4:	0a5b      	lsrs	r3, r3, #9
 80117d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80117da:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80117de:	4623      	mov	r3, r4
 80117e0:	1e5c      	subs	r4, r3, #1
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d102      	bne.n	80117ec <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80117e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80117ea:	e052      	b.n	8011892 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117f0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d0f0      	beq.n	80117de <SDMMC_GetCmdResp6+0x22>
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011802:	2b00      	cmp	r3, #0
 8011804:	d1eb      	bne.n	80117de <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801180a:	f003 0304 	and.w	r3, r3, #4
 801180e:	2b00      	cmp	r3, #0
 8011810:	d004      	beq.n	801181c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	2204      	movs	r2, #4
 8011816:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011818:	2304      	movs	r3, #4
 801181a:	e03a      	b.n	8011892 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011820:	f003 0301 	and.w	r3, r3, #1
 8011824:	2b00      	cmp	r3, #0
 8011826:	d004      	beq.n	8011832 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	2201      	movs	r2, #1
 801182c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801182e:	2301      	movs	r3, #1
 8011830:	e02f      	b.n	8011892 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011832:	68f8      	ldr	r0, [r7, #12]
 8011834:	f7ff fb40 	bl	8010eb8 <SDMMC_GetCommandResponse>
 8011838:	4603      	mov	r3, r0
 801183a:	461a      	mov	r2, r3
 801183c:	7afb      	ldrb	r3, [r7, #11]
 801183e:	4293      	cmp	r3, r2
 8011840:	d001      	beq.n	8011846 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011842:	2301      	movs	r3, #1
 8011844:	e025      	b.n	8011892 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	4a16      	ldr	r2, [pc, #88]	; (80118a4 <SDMMC_GetCmdResp6+0xe8>)
 801184a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801184c:	2100      	movs	r1, #0
 801184e:	68f8      	ldr	r0, [r7, #12]
 8011850:	f7ff fb3f 	bl	8010ed2 <SDMMC_GetResponse>
 8011854:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011856:	693b      	ldr	r3, [r7, #16]
 8011858:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801185c:	2b00      	cmp	r3, #0
 801185e:	d106      	bne.n	801186e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011860:	693b      	ldr	r3, [r7, #16]
 8011862:	0c1b      	lsrs	r3, r3, #16
 8011864:	b29a      	uxth	r2, r3
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801186a:	2300      	movs	r3, #0
 801186c:	e011      	b.n	8011892 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011874:	2b00      	cmp	r3, #0
 8011876:	d002      	beq.n	801187e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801187c:	e009      	b.n	8011892 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011884:	2b00      	cmp	r3, #0
 8011886:	d002      	beq.n	801188e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801188c:	e001      	b.n	8011892 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801188e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011892:	4618      	mov	r0, r3
 8011894:	371c      	adds	r7, #28
 8011896:	46bd      	mov	sp, r7
 8011898:	bd90      	pop	{r4, r7, pc}
 801189a:	bf00      	nop
 801189c:	20000038 	.word	0x20000038
 80118a0:	10624dd3 	.word	0x10624dd3
 80118a4:	002000c5 	.word	0x002000c5

080118a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80118a8:	b490      	push	{r4, r7}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80118b0:	4b21      	ldr	r3, [pc, #132]	; (8011938 <SDMMC_GetCmdResp7+0x90>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	4a21      	ldr	r2, [pc, #132]	; (801193c <SDMMC_GetCmdResp7+0x94>)
 80118b6:	fba2 2303 	umull	r2, r3, r2, r3
 80118ba:	0a5b      	lsrs	r3, r3, #9
 80118bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80118c0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80118c4:	4623      	mov	r3, r4
 80118c6:	1e5c      	subs	r4, r3, #1
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d102      	bne.n	80118d2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80118d0:	e02c      	b.n	801192c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d0f0      	beq.n	80118c4 <SDMMC_GetCmdResp7+0x1c>
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d1eb      	bne.n	80118c4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118f0:	f003 0304 	and.w	r3, r3, #4
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d004      	beq.n	8011902 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2204      	movs	r2, #4
 80118fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80118fe:	2304      	movs	r3, #4
 8011900:	e014      	b.n	801192c <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011906:	f003 0301 	and.w	r3, r3, #1
 801190a:	2b00      	cmp	r3, #0
 801190c:	d004      	beq.n	8011918 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2201      	movs	r2, #1
 8011912:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011914:	2301      	movs	r3, #1
 8011916:	e009      	b.n	801192c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801191c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011920:	2b00      	cmp	r3, #0
 8011922:	d002      	beq.n	801192a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2240      	movs	r2, #64	; 0x40
 8011928:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801192a:	2300      	movs	r3, #0

}
 801192c:	4618      	mov	r0, r3
 801192e:	3710      	adds	r7, #16
 8011930:	46bd      	mov	sp, r7
 8011932:	bc90      	pop	{r4, r7}
 8011934:	4770      	bx	lr
 8011936:	bf00      	nop
 8011938:	20000038 	.word	0x20000038
 801193c:	10624dd3 	.word	0x10624dd3

08011940 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011940:	b480      	push	{r7}
 8011942:	b087      	sub	sp, #28
 8011944:	af00      	add	r7, sp, #0
 8011946:	60f8      	str	r0, [r7, #12]
 8011948:	60b9      	str	r1, [r7, #8]
 801194a:	4613      	mov	r3, r2
 801194c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801194e:	79fb      	ldrb	r3, [r7, #7]
 8011950:	2b02      	cmp	r3, #2
 8011952:	d165      	bne.n	8011a20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	4a3e      	ldr	r2, [pc, #248]	; (8011a50 <USB_SetTurnaroundTime+0x110>)
 8011958:	4293      	cmp	r3, r2
 801195a:	d906      	bls.n	801196a <USB_SetTurnaroundTime+0x2a>
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	4a3d      	ldr	r2, [pc, #244]	; (8011a54 <USB_SetTurnaroundTime+0x114>)
 8011960:	4293      	cmp	r3, r2
 8011962:	d202      	bcs.n	801196a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011964:	230f      	movs	r3, #15
 8011966:	617b      	str	r3, [r7, #20]
 8011968:	e05c      	b.n	8011a24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	4a39      	ldr	r2, [pc, #228]	; (8011a54 <USB_SetTurnaroundTime+0x114>)
 801196e:	4293      	cmp	r3, r2
 8011970:	d306      	bcc.n	8011980 <USB_SetTurnaroundTime+0x40>
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	4a38      	ldr	r2, [pc, #224]	; (8011a58 <USB_SetTurnaroundTime+0x118>)
 8011976:	4293      	cmp	r3, r2
 8011978:	d202      	bcs.n	8011980 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801197a:	230e      	movs	r3, #14
 801197c:	617b      	str	r3, [r7, #20]
 801197e:	e051      	b.n	8011a24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	4a35      	ldr	r2, [pc, #212]	; (8011a58 <USB_SetTurnaroundTime+0x118>)
 8011984:	4293      	cmp	r3, r2
 8011986:	d306      	bcc.n	8011996 <USB_SetTurnaroundTime+0x56>
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	4a34      	ldr	r2, [pc, #208]	; (8011a5c <USB_SetTurnaroundTime+0x11c>)
 801198c:	4293      	cmp	r3, r2
 801198e:	d202      	bcs.n	8011996 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011990:	230d      	movs	r3, #13
 8011992:	617b      	str	r3, [r7, #20]
 8011994:	e046      	b.n	8011a24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	4a30      	ldr	r2, [pc, #192]	; (8011a5c <USB_SetTurnaroundTime+0x11c>)
 801199a:	4293      	cmp	r3, r2
 801199c:	d306      	bcc.n	80119ac <USB_SetTurnaroundTime+0x6c>
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	4a2f      	ldr	r2, [pc, #188]	; (8011a60 <USB_SetTurnaroundTime+0x120>)
 80119a2:	4293      	cmp	r3, r2
 80119a4:	d802      	bhi.n	80119ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80119a6:	230c      	movs	r3, #12
 80119a8:	617b      	str	r3, [r7, #20]
 80119aa:	e03b      	b.n	8011a24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	4a2c      	ldr	r2, [pc, #176]	; (8011a60 <USB_SetTurnaroundTime+0x120>)
 80119b0:	4293      	cmp	r3, r2
 80119b2:	d906      	bls.n	80119c2 <USB_SetTurnaroundTime+0x82>
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	4a2b      	ldr	r2, [pc, #172]	; (8011a64 <USB_SetTurnaroundTime+0x124>)
 80119b8:	4293      	cmp	r3, r2
 80119ba:	d802      	bhi.n	80119c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80119bc:	230b      	movs	r3, #11
 80119be:	617b      	str	r3, [r7, #20]
 80119c0:	e030      	b.n	8011a24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	4a27      	ldr	r2, [pc, #156]	; (8011a64 <USB_SetTurnaroundTime+0x124>)
 80119c6:	4293      	cmp	r3, r2
 80119c8:	d906      	bls.n	80119d8 <USB_SetTurnaroundTime+0x98>
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	4a26      	ldr	r2, [pc, #152]	; (8011a68 <USB_SetTurnaroundTime+0x128>)
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d802      	bhi.n	80119d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80119d2:	230a      	movs	r3, #10
 80119d4:	617b      	str	r3, [r7, #20]
 80119d6:	e025      	b.n	8011a24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	4a23      	ldr	r2, [pc, #140]	; (8011a68 <USB_SetTurnaroundTime+0x128>)
 80119dc:	4293      	cmp	r3, r2
 80119de:	d906      	bls.n	80119ee <USB_SetTurnaroundTime+0xae>
 80119e0:	68bb      	ldr	r3, [r7, #8]
 80119e2:	4a22      	ldr	r2, [pc, #136]	; (8011a6c <USB_SetTurnaroundTime+0x12c>)
 80119e4:	4293      	cmp	r3, r2
 80119e6:	d202      	bcs.n	80119ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80119e8:	2309      	movs	r3, #9
 80119ea:	617b      	str	r3, [r7, #20]
 80119ec:	e01a      	b.n	8011a24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	4a1e      	ldr	r2, [pc, #120]	; (8011a6c <USB_SetTurnaroundTime+0x12c>)
 80119f2:	4293      	cmp	r3, r2
 80119f4:	d306      	bcc.n	8011a04 <USB_SetTurnaroundTime+0xc4>
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	4a1d      	ldr	r2, [pc, #116]	; (8011a70 <USB_SetTurnaroundTime+0x130>)
 80119fa:	4293      	cmp	r3, r2
 80119fc:	d802      	bhi.n	8011a04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80119fe:	2308      	movs	r3, #8
 8011a00:	617b      	str	r3, [r7, #20]
 8011a02:	e00f      	b.n	8011a24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	4a1a      	ldr	r2, [pc, #104]	; (8011a70 <USB_SetTurnaroundTime+0x130>)
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	d906      	bls.n	8011a1a <USB_SetTurnaroundTime+0xda>
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	4a19      	ldr	r2, [pc, #100]	; (8011a74 <USB_SetTurnaroundTime+0x134>)
 8011a10:	4293      	cmp	r3, r2
 8011a12:	d202      	bcs.n	8011a1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011a14:	2307      	movs	r3, #7
 8011a16:	617b      	str	r3, [r7, #20]
 8011a18:	e004      	b.n	8011a24 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011a1a:	2306      	movs	r3, #6
 8011a1c:	617b      	str	r3, [r7, #20]
 8011a1e:	e001      	b.n	8011a24 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011a20:	2309      	movs	r3, #9
 8011a22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	68db      	ldr	r3, [r3, #12]
 8011a28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	68da      	ldr	r2, [r3, #12]
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	029b      	lsls	r3, r3, #10
 8011a38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011a3c:	431a      	orrs	r2, r3
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011a42:	2300      	movs	r3, #0
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	371c      	adds	r7, #28
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr
 8011a50:	00d8acbf 	.word	0x00d8acbf
 8011a54:	00e4e1c0 	.word	0x00e4e1c0
 8011a58:	00f42400 	.word	0x00f42400
 8011a5c:	01067380 	.word	0x01067380
 8011a60:	011a499f 	.word	0x011a499f
 8011a64:	01312cff 	.word	0x01312cff
 8011a68:	014ca43f 	.word	0x014ca43f
 8011a6c:	016e3600 	.word	0x016e3600
 8011a70:	01a6ab1f 	.word	0x01a6ab1f
 8011a74:	01e84800 	.word	0x01e84800

08011a78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011a78:	b480      	push	{r7}
 8011a7a:	b085      	sub	sp, #20
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011a82:	2300      	movs	r3, #0
 8011a84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	019b      	lsls	r3, r3, #6
 8011a8a:	f043 0220 	orr.w	r2, r3, #32
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	3301      	adds	r3, #1
 8011a96:	60fb      	str	r3, [r7, #12]
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	4a09      	ldr	r2, [pc, #36]	; (8011ac0 <USB_FlushTxFifo+0x48>)
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d901      	bls.n	8011aa4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011aa0:	2303      	movs	r3, #3
 8011aa2:	e006      	b.n	8011ab2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	691b      	ldr	r3, [r3, #16]
 8011aa8:	f003 0320 	and.w	r3, r3, #32
 8011aac:	2b20      	cmp	r3, #32
 8011aae:	d0f0      	beq.n	8011a92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011ab0:	2300      	movs	r3, #0
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3714      	adds	r7, #20
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr
 8011abe:	bf00      	nop
 8011ac0:	00030d40 	.word	0x00030d40

08011ac4 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b087      	sub	sp, #28
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ad6:	689b      	ldr	r3, [r3, #8]
 8011ad8:	f003 0306 	and.w	r3, r3, #6
 8011adc:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2b02      	cmp	r3, #2
 8011ae2:	d002      	beq.n	8011aea <USB_GetDevSpeed+0x26>
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	2b06      	cmp	r3, #6
 8011ae8:	d102      	bne.n	8011af0 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011aea:	2302      	movs	r3, #2
 8011aec:	75fb      	strb	r3, [r7, #23]
 8011aee:	e001      	b.n	8011af4 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8011af0:	230f      	movs	r3, #15
 8011af2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	371c      	adds	r7, #28
 8011afa:	46bd      	mov	sp, r7
 8011afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b00:	4770      	bx	lr

08011b02 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011b02:	b480      	push	{r7}
 8011b04:	b085      	sub	sp, #20
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
 8011b0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	785b      	ldrb	r3, [r3, #1]
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	d13a      	bne.n	8011b94 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b24:	69da      	ldr	r2, [r3, #28]
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	f003 030f 	and.w	r3, r3, #15
 8011b2e:	2101      	movs	r1, #1
 8011b30:	fa01 f303 	lsl.w	r3, r1, r3
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	68f9      	ldr	r1, [r7, #12]
 8011b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b3c:	4313      	orrs	r3, r2
 8011b3e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	015a      	lsls	r2, r3, #5
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	4413      	add	r3, r2
 8011b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d155      	bne.n	8011c02 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	015a      	lsls	r2, r3, #5
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	4413      	add	r3, r2
 8011b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b62:	681a      	ldr	r2, [r3, #0]
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	689b      	ldr	r3, [r3, #8]
 8011b68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	78db      	ldrb	r3, [r3, #3]
 8011b70:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011b72:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	059b      	lsls	r3, r3, #22
 8011b78:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	68ba      	ldr	r2, [r7, #8]
 8011b7e:	0151      	lsls	r1, r2, #5
 8011b80:	68fa      	ldr	r2, [r7, #12]
 8011b82:	440a      	add	r2, r1
 8011b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b90:	6013      	str	r3, [r2, #0]
 8011b92:	e036      	b.n	8011c02 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b9a:	69da      	ldr	r2, [r3, #28]
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	f003 030f 	and.w	r3, r3, #15
 8011ba4:	2101      	movs	r1, #1
 8011ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8011baa:	041b      	lsls	r3, r3, #16
 8011bac:	68f9      	ldr	r1, [r7, #12]
 8011bae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011bb2:	4313      	orrs	r3, r2
 8011bb4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	015a      	lsls	r2, r3, #5
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	4413      	add	r3, r2
 8011bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d11a      	bne.n	8011c02 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	015a      	lsls	r2, r3, #5
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	4413      	add	r3, r2
 8011bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bd8:	681a      	ldr	r2, [r3, #0]
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	78db      	ldrb	r3, [r3, #3]
 8011be6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011be8:	430b      	orrs	r3, r1
 8011bea:	4313      	orrs	r3, r2
 8011bec:	68ba      	ldr	r2, [r7, #8]
 8011bee:	0151      	lsls	r1, r2, #5
 8011bf0:	68fa      	ldr	r2, [r7, #12]
 8011bf2:	440a      	add	r2, r1
 8011bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c00:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011c02:	2300      	movs	r3, #0
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3714      	adds	r7, #20
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr

08011c10 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b086      	sub	sp, #24
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	785b      	ldrb	r3, [r3, #1]
 8011c28:	2b01      	cmp	r3, #1
 8011c2a:	f040 810a 	bne.w	8011e42 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	695b      	ldr	r3, [r3, #20]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d132      	bne.n	8011c9c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	015a      	lsls	r2, r3, #5
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	4413      	add	r3, r2
 8011c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c42:	691b      	ldr	r3, [r3, #16]
 8011c44:	693a      	ldr	r2, [r7, #16]
 8011c46:	0151      	lsls	r1, r2, #5
 8011c48:	697a      	ldr	r2, [r7, #20]
 8011c4a:	440a      	add	r2, r1
 8011c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011c54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011c58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011c5a:	693b      	ldr	r3, [r7, #16]
 8011c5c:	015a      	lsls	r2, r3, #5
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	4413      	add	r3, r2
 8011c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c66:	691b      	ldr	r3, [r3, #16]
 8011c68:	693a      	ldr	r2, [r7, #16]
 8011c6a:	0151      	lsls	r1, r2, #5
 8011c6c:	697a      	ldr	r2, [r7, #20]
 8011c6e:	440a      	add	r2, r1
 8011c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011c78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	015a      	lsls	r2, r3, #5
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	4413      	add	r3, r2
 8011c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c86:	691b      	ldr	r3, [r3, #16]
 8011c88:	693a      	ldr	r2, [r7, #16]
 8011c8a:	0151      	lsls	r1, r2, #5
 8011c8c:	697a      	ldr	r2, [r7, #20]
 8011c8e:	440a      	add	r2, r1
 8011c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c94:	0cdb      	lsrs	r3, r3, #19
 8011c96:	04db      	lsls	r3, r3, #19
 8011c98:	6113      	str	r3, [r2, #16]
 8011c9a:	e074      	b.n	8011d86 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	015a      	lsls	r2, r3, #5
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	4413      	add	r3, r2
 8011ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ca8:	691b      	ldr	r3, [r3, #16]
 8011caa:	693a      	ldr	r2, [r7, #16]
 8011cac:	0151      	lsls	r1, r2, #5
 8011cae:	697a      	ldr	r2, [r7, #20]
 8011cb0:	440a      	add	r2, r1
 8011cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011cb6:	0cdb      	lsrs	r3, r3, #19
 8011cb8:	04db      	lsls	r3, r3, #19
 8011cba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011cbc:	693b      	ldr	r3, [r7, #16]
 8011cbe:	015a      	lsls	r2, r3, #5
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	4413      	add	r3, r2
 8011cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cc8:	691b      	ldr	r3, [r3, #16]
 8011cca:	693a      	ldr	r2, [r7, #16]
 8011ccc:	0151      	lsls	r1, r2, #5
 8011cce:	697a      	ldr	r2, [r7, #20]
 8011cd0:	440a      	add	r2, r1
 8011cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011cd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011cda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011cde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	015a      	lsls	r2, r3, #5
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	4413      	add	r3, r2
 8011ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cec:	691a      	ldr	r2, [r3, #16]
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	6959      	ldr	r1, [r3, #20]
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	689b      	ldr	r3, [r3, #8]
 8011cf6:	440b      	add	r3, r1
 8011cf8:	1e59      	subs	r1, r3, #1
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	689b      	ldr	r3, [r3, #8]
 8011cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8011d02:	04d9      	lsls	r1, r3, #19
 8011d04:	4baf      	ldr	r3, [pc, #700]	; (8011fc4 <USB_EPStartXfer+0x3b4>)
 8011d06:	400b      	ands	r3, r1
 8011d08:	6939      	ldr	r1, [r7, #16]
 8011d0a:	0148      	lsls	r0, r1, #5
 8011d0c:	6979      	ldr	r1, [r7, #20]
 8011d0e:	4401      	add	r1, r0
 8011d10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011d14:	4313      	orrs	r3, r2
 8011d16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011d18:	693b      	ldr	r3, [r7, #16]
 8011d1a:	015a      	lsls	r2, r3, #5
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	4413      	add	r3, r2
 8011d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d24:	691a      	ldr	r2, [r3, #16]
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	695b      	ldr	r3, [r3, #20]
 8011d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d2e:	6939      	ldr	r1, [r7, #16]
 8011d30:	0148      	lsls	r0, r1, #5
 8011d32:	6979      	ldr	r1, [r7, #20]
 8011d34:	4401      	add	r1, r0
 8011d36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	78db      	ldrb	r3, [r3, #3]
 8011d42:	2b01      	cmp	r3, #1
 8011d44:	d11f      	bne.n	8011d86 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	015a      	lsls	r2, r3, #5
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d52:	691b      	ldr	r3, [r3, #16]
 8011d54:	693a      	ldr	r2, [r7, #16]
 8011d56:	0151      	lsls	r1, r2, #5
 8011d58:	697a      	ldr	r2, [r7, #20]
 8011d5a:	440a      	add	r2, r1
 8011d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011d64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	015a      	lsls	r2, r3, #5
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	4413      	add	r3, r2
 8011d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d72:	691b      	ldr	r3, [r3, #16]
 8011d74:	693a      	ldr	r2, [r7, #16]
 8011d76:	0151      	lsls	r1, r2, #5
 8011d78:	697a      	ldr	r2, [r7, #20]
 8011d7a:	440a      	add	r2, r1
 8011d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011d84:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	015a      	lsls	r2, r3, #5
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	693a      	ldr	r2, [r7, #16]
 8011d96:	0151      	lsls	r1, r2, #5
 8011d98:	697a      	ldr	r2, [r7, #20]
 8011d9a:	440a      	add	r2, r1
 8011d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011da0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011da4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	78db      	ldrb	r3, [r3, #3]
 8011daa:	2b01      	cmp	r3, #1
 8011dac:	d015      	beq.n	8011dda <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	695b      	ldr	r3, [r3, #20]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	f000 8100 	beq.w	8011fb8 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	f003 030f 	and.w	r3, r3, #15
 8011dc8:	2101      	movs	r1, #1
 8011dca:	fa01 f303 	lsl.w	r3, r1, r3
 8011dce:	6979      	ldr	r1, [r7, #20]
 8011dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011dd4:	4313      	orrs	r3, r2
 8011dd6:	634b      	str	r3, [r1, #52]	; 0x34
 8011dd8:	e0ee      	b.n	8011fb8 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011de0:	689b      	ldr	r3, [r3, #8]
 8011de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d110      	bne.n	8011e0c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	015a      	lsls	r2, r3, #5
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	4413      	add	r3, r2
 8011df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	693a      	ldr	r2, [r7, #16]
 8011dfa:	0151      	lsls	r1, r2, #5
 8011dfc:	697a      	ldr	r2, [r7, #20]
 8011dfe:	440a      	add	r2, r1
 8011e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011e08:	6013      	str	r3, [r2, #0]
 8011e0a:	e00f      	b.n	8011e2c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011e0c:	693b      	ldr	r3, [r7, #16]
 8011e0e:	015a      	lsls	r2, r3, #5
 8011e10:	697b      	ldr	r3, [r7, #20]
 8011e12:	4413      	add	r3, r2
 8011e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	693a      	ldr	r2, [r7, #16]
 8011e1c:	0151      	lsls	r1, r2, #5
 8011e1e:	697a      	ldr	r2, [r7, #20]
 8011e20:	440a      	add	r2, r1
 8011e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e2a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	68d9      	ldr	r1, [r3, #12]
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	781a      	ldrb	r2, [r3, #0]
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	695b      	ldr	r3, [r3, #20]
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 f9e2 	bl	8012204 <USB_WritePacket>
 8011e40:	e0ba      	b.n	8011fb8 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	015a      	lsls	r2, r3, #5
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	4413      	add	r3, r2
 8011e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e4e:	691b      	ldr	r3, [r3, #16]
 8011e50:	693a      	ldr	r2, [r7, #16]
 8011e52:	0151      	lsls	r1, r2, #5
 8011e54:	697a      	ldr	r2, [r7, #20]
 8011e56:	440a      	add	r2, r1
 8011e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e5c:	0cdb      	lsrs	r3, r3, #19
 8011e5e:	04db      	lsls	r3, r3, #19
 8011e60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	015a      	lsls	r2, r3, #5
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	4413      	add	r3, r2
 8011e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e6e:	691b      	ldr	r3, [r3, #16]
 8011e70:	693a      	ldr	r2, [r7, #16]
 8011e72:	0151      	lsls	r1, r2, #5
 8011e74:	697a      	ldr	r2, [r7, #20]
 8011e76:	440a      	add	r2, r1
 8011e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011e80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011e84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	695b      	ldr	r3, [r3, #20]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d123      	bne.n	8011ed6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	015a      	lsls	r2, r3, #5
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	4413      	add	r3, r2
 8011e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e9a:	691a      	ldr	r2, [r3, #16]
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	689b      	ldr	r3, [r3, #8]
 8011ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ea4:	6939      	ldr	r1, [r7, #16]
 8011ea6:	0148      	lsls	r0, r1, #5
 8011ea8:	6979      	ldr	r1, [r7, #20]
 8011eaa:	4401      	add	r1, r0
 8011eac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011eb0:	4313      	orrs	r3, r2
 8011eb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	015a      	lsls	r2, r3, #5
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	4413      	add	r3, r2
 8011ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ec0:	691b      	ldr	r3, [r3, #16]
 8011ec2:	693a      	ldr	r2, [r7, #16]
 8011ec4:	0151      	lsls	r1, r2, #5
 8011ec6:	697a      	ldr	r2, [r7, #20]
 8011ec8:	440a      	add	r2, r1
 8011eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011ed2:	6113      	str	r3, [r2, #16]
 8011ed4:	e033      	b.n	8011f3e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	695a      	ldr	r2, [r3, #20]
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	689b      	ldr	r3, [r3, #8]
 8011ede:	4413      	add	r3, r2
 8011ee0:	1e5a      	subs	r2, r3, #1
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	689b      	ldr	r3, [r3, #8]
 8011ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011eea:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	015a      	lsls	r2, r3, #5
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	4413      	add	r3, r2
 8011ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ef8:	691a      	ldr	r2, [r3, #16]
 8011efa:	89fb      	ldrh	r3, [r7, #14]
 8011efc:	04d9      	lsls	r1, r3, #19
 8011efe:	4b31      	ldr	r3, [pc, #196]	; (8011fc4 <USB_EPStartXfer+0x3b4>)
 8011f00:	400b      	ands	r3, r1
 8011f02:	6939      	ldr	r1, [r7, #16]
 8011f04:	0148      	lsls	r0, r1, #5
 8011f06:	6979      	ldr	r1, [r7, #20]
 8011f08:	4401      	add	r1, r0
 8011f0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011f0e:	4313      	orrs	r3, r2
 8011f10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	015a      	lsls	r2, r3, #5
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	4413      	add	r3, r2
 8011f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f1e:	691a      	ldr	r2, [r3, #16]
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	689b      	ldr	r3, [r3, #8]
 8011f24:	89f9      	ldrh	r1, [r7, #14]
 8011f26:	fb01 f303 	mul.w	r3, r1, r3
 8011f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011f2e:	6939      	ldr	r1, [r7, #16]
 8011f30:	0148      	lsls	r0, r1, #5
 8011f32:	6979      	ldr	r1, [r7, #20]
 8011f34:	4401      	add	r1, r0
 8011f36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011f3a:	4313      	orrs	r3, r2
 8011f3c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	78db      	ldrb	r3, [r3, #3]
 8011f42:	2b01      	cmp	r3, #1
 8011f44:	d128      	bne.n	8011f98 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f4c:	689b      	ldr	r3, [r3, #8]
 8011f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d110      	bne.n	8011f78 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	015a      	lsls	r2, r3, #5
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	4413      	add	r3, r2
 8011f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	693a      	ldr	r2, [r7, #16]
 8011f66:	0151      	lsls	r1, r2, #5
 8011f68:	697a      	ldr	r2, [r7, #20]
 8011f6a:	440a      	add	r2, r1
 8011f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011f74:	6013      	str	r3, [r2, #0]
 8011f76:	e00f      	b.n	8011f98 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	015a      	lsls	r2, r3, #5
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	4413      	add	r3, r2
 8011f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	693a      	ldr	r2, [r7, #16]
 8011f88:	0151      	lsls	r1, r2, #5
 8011f8a:	697a      	ldr	r2, [r7, #20]
 8011f8c:	440a      	add	r2, r1
 8011f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	015a      	lsls	r2, r3, #5
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	4413      	add	r3, r2
 8011fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	693a      	ldr	r2, [r7, #16]
 8011fa8:	0151      	lsls	r1, r2, #5
 8011faa:	697a      	ldr	r2, [r7, #20]
 8011fac:	440a      	add	r2, r1
 8011fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011fb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011fb8:	2300      	movs	r3, #0
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3718      	adds	r7, #24
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	1ff80000 	.word	0x1ff80000

08011fc8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b085      	sub	sp, #20
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
 8011fd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	785b      	ldrb	r3, [r3, #1]
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	f040 80ab 	bne.w	801213c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	695b      	ldr	r3, [r3, #20]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d132      	bne.n	8012054 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	015a      	lsls	r2, r3, #5
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	4413      	add	r3, r2
 8011ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ffa:	691b      	ldr	r3, [r3, #16]
 8011ffc:	68ba      	ldr	r2, [r7, #8]
 8011ffe:	0151      	lsls	r1, r2, #5
 8012000:	68fa      	ldr	r2, [r7, #12]
 8012002:	440a      	add	r2, r1
 8012004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012008:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801200c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012010:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	015a      	lsls	r2, r3, #5
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	4413      	add	r3, r2
 801201a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801201e:	691b      	ldr	r3, [r3, #16]
 8012020:	68ba      	ldr	r2, [r7, #8]
 8012022:	0151      	lsls	r1, r2, #5
 8012024:	68fa      	ldr	r2, [r7, #12]
 8012026:	440a      	add	r2, r1
 8012028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801202c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012030:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	015a      	lsls	r2, r3, #5
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	4413      	add	r3, r2
 801203a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801203e:	691b      	ldr	r3, [r3, #16]
 8012040:	68ba      	ldr	r2, [r7, #8]
 8012042:	0151      	lsls	r1, r2, #5
 8012044:	68fa      	ldr	r2, [r7, #12]
 8012046:	440a      	add	r2, r1
 8012048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801204c:	0cdb      	lsrs	r3, r3, #19
 801204e:	04db      	lsls	r3, r3, #19
 8012050:	6113      	str	r3, [r2, #16]
 8012052:	e04e      	b.n	80120f2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	015a      	lsls	r2, r3, #5
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	4413      	add	r3, r2
 801205c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012060:	691b      	ldr	r3, [r3, #16]
 8012062:	68ba      	ldr	r2, [r7, #8]
 8012064:	0151      	lsls	r1, r2, #5
 8012066:	68fa      	ldr	r2, [r7, #12]
 8012068:	440a      	add	r2, r1
 801206a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801206e:	0cdb      	lsrs	r3, r3, #19
 8012070:	04db      	lsls	r3, r3, #19
 8012072:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	015a      	lsls	r2, r3, #5
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	4413      	add	r3, r2
 801207c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012080:	691b      	ldr	r3, [r3, #16]
 8012082:	68ba      	ldr	r2, [r7, #8]
 8012084:	0151      	lsls	r1, r2, #5
 8012086:	68fa      	ldr	r2, [r7, #12]
 8012088:	440a      	add	r2, r1
 801208a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801208e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012092:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012096:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	695a      	ldr	r2, [r3, #20]
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	689b      	ldr	r3, [r3, #8]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d903      	bls.n	80120ac <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	689a      	ldr	r2, [r3, #8]
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	015a      	lsls	r2, r3, #5
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	4413      	add	r3, r2
 80120b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120b8:	691b      	ldr	r3, [r3, #16]
 80120ba:	68ba      	ldr	r2, [r7, #8]
 80120bc:	0151      	lsls	r1, r2, #5
 80120be:	68fa      	ldr	r2, [r7, #12]
 80120c0:	440a      	add	r2, r1
 80120c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80120ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	015a      	lsls	r2, r3, #5
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	4413      	add	r3, r2
 80120d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120d8:	691a      	ldr	r2, [r3, #16]
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	695b      	ldr	r3, [r3, #20]
 80120de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80120e2:	68b9      	ldr	r1, [r7, #8]
 80120e4:	0148      	lsls	r0, r1, #5
 80120e6:	68f9      	ldr	r1, [r7, #12]
 80120e8:	4401      	add	r1, r0
 80120ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80120ee:	4313      	orrs	r3, r2
 80120f0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	015a      	lsls	r2, r3, #5
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	4413      	add	r3, r2
 80120fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	68ba      	ldr	r2, [r7, #8]
 8012102:	0151      	lsls	r1, r2, #5
 8012104:	68fa      	ldr	r2, [r7, #12]
 8012106:	440a      	add	r2, r1
 8012108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801210c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012110:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	695b      	ldr	r3, [r3, #20]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d06d      	beq.n	80121f6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	f003 030f 	and.w	r3, r3, #15
 801212a:	2101      	movs	r1, #1
 801212c:	fa01 f303 	lsl.w	r3, r1, r3
 8012130:	68f9      	ldr	r1, [r7, #12]
 8012132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012136:	4313      	orrs	r3, r2
 8012138:	634b      	str	r3, [r1, #52]	; 0x34
 801213a:	e05c      	b.n	80121f6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	015a      	lsls	r2, r3, #5
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	4413      	add	r3, r2
 8012144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012148:	691b      	ldr	r3, [r3, #16]
 801214a:	68ba      	ldr	r2, [r7, #8]
 801214c:	0151      	lsls	r1, r2, #5
 801214e:	68fa      	ldr	r2, [r7, #12]
 8012150:	440a      	add	r2, r1
 8012152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012156:	0cdb      	lsrs	r3, r3, #19
 8012158:	04db      	lsls	r3, r3, #19
 801215a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	015a      	lsls	r2, r3, #5
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	4413      	add	r3, r2
 8012164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012168:	691b      	ldr	r3, [r3, #16]
 801216a:	68ba      	ldr	r2, [r7, #8]
 801216c:	0151      	lsls	r1, r2, #5
 801216e:	68fa      	ldr	r2, [r7, #12]
 8012170:	440a      	add	r2, r1
 8012172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012176:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801217a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801217e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	695b      	ldr	r3, [r3, #20]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d003      	beq.n	8012190 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	689a      	ldr	r2, [r3, #8]
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	015a      	lsls	r2, r3, #5
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	4413      	add	r3, r2
 8012198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801219c:	691b      	ldr	r3, [r3, #16]
 801219e:	68ba      	ldr	r2, [r7, #8]
 80121a0:	0151      	lsls	r1, r2, #5
 80121a2:	68fa      	ldr	r2, [r7, #12]
 80121a4:	440a      	add	r2, r1
 80121a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80121aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80121ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	015a      	lsls	r2, r3, #5
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	4413      	add	r3, r2
 80121b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121bc:	691a      	ldr	r2, [r3, #16]
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	689b      	ldr	r3, [r3, #8]
 80121c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80121c6:	68b9      	ldr	r1, [r7, #8]
 80121c8:	0148      	lsls	r0, r1, #5
 80121ca:	68f9      	ldr	r1, [r7, #12]
 80121cc:	4401      	add	r1, r0
 80121ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80121d2:	4313      	orrs	r3, r2
 80121d4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	015a      	lsls	r2, r3, #5
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	4413      	add	r3, r2
 80121de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	0151      	lsls	r1, r2, #5
 80121e8:	68fa      	ldr	r2, [r7, #12]
 80121ea:	440a      	add	r2, r1
 80121ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80121f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80121f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80121f6:	2300      	movs	r3, #0
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3714      	adds	r7, #20
 80121fc:	46bd      	mov	sp, r7
 80121fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012202:	4770      	bx	lr

08012204 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8012204:	b480      	push	{r7}
 8012206:	b089      	sub	sp, #36	; 0x24
 8012208:	af00      	add	r7, sp, #0
 801220a:	60f8      	str	r0, [r7, #12]
 801220c:	60b9      	str	r1, [r7, #8]
 801220e:	4611      	mov	r1, r2
 8012210:	461a      	mov	r2, r3
 8012212:	460b      	mov	r3, r1
 8012214:	71fb      	strb	r3, [r7, #7]
 8012216:	4613      	mov	r3, r2
 8012218:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8012222:	88bb      	ldrh	r3, [r7, #4]
 8012224:	3303      	adds	r3, #3
 8012226:	089b      	lsrs	r3, r3, #2
 8012228:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 801222a:	2300      	movs	r3, #0
 801222c:	61bb      	str	r3, [r7, #24]
 801222e:	e00f      	b.n	8012250 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012230:	79fb      	ldrb	r3, [r7, #7]
 8012232:	031a      	lsls	r2, r3, #12
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	4413      	add	r3, r2
 8012238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801223c:	461a      	mov	r2, r3
 801223e:	69fb      	ldr	r3, [r7, #28]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	6013      	str	r3, [r2, #0]
    pSrc++;
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	3304      	adds	r3, #4
 8012248:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	3301      	adds	r3, #1
 801224e:	61bb      	str	r3, [r7, #24]
 8012250:	69ba      	ldr	r2, [r7, #24]
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	429a      	cmp	r2, r3
 8012256:	d3eb      	bcc.n	8012230 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8012258:	2300      	movs	r3, #0
}
 801225a:	4618      	mov	r0, r3
 801225c:	3724      	adds	r7, #36	; 0x24
 801225e:	46bd      	mov	sp, r7
 8012260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012264:	4770      	bx	lr

08012266 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012266:	b480      	push	{r7}
 8012268:	b089      	sub	sp, #36	; 0x24
 801226a:	af00      	add	r7, sp, #0
 801226c:	60f8      	str	r0, [r7, #12]
 801226e:	60b9      	str	r1, [r7, #8]
 8012270:	4613      	mov	r3, r2
 8012272:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801227c:	88fb      	ldrh	r3, [r7, #6]
 801227e:	3303      	adds	r3, #3
 8012280:	089b      	lsrs	r3, r3, #2
 8012282:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012284:	2300      	movs	r3, #0
 8012286:	61bb      	str	r3, [r7, #24]
 8012288:	e00b      	b.n	80122a2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	69fb      	ldr	r3, [r7, #28]
 8012294:	601a      	str	r2, [r3, #0]
    pDest++;
 8012296:	69fb      	ldr	r3, [r7, #28]
 8012298:	3304      	adds	r3, #4
 801229a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	3301      	adds	r3, #1
 80122a0:	61bb      	str	r3, [r7, #24]
 80122a2:	69ba      	ldr	r2, [r7, #24]
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d3ef      	bcc.n	801228a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80122aa:	69fb      	ldr	r3, [r7, #28]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3724      	adds	r7, #36	; 0x24
 80122b0:	46bd      	mov	sp, r7
 80122b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b6:	4770      	bx	lr

080122b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80122b8:	b480      	push	{r7}
 80122ba:	b085      	sub	sp, #20
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	785b      	ldrb	r3, [r3, #1]
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d12c      	bne.n	801232e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	015a      	lsls	r2, r3, #5
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	4413      	add	r3, r2
 80122dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	db12      	blt.n	801230c <USB_EPSetStall+0x54>
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d00f      	beq.n	801230c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	015a      	lsls	r2, r3, #5
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	4413      	add	r3, r2
 80122f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	68ba      	ldr	r2, [r7, #8]
 80122fc:	0151      	lsls	r1, r2, #5
 80122fe:	68fa      	ldr	r2, [r7, #12]
 8012300:	440a      	add	r2, r1
 8012302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012306:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801230a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	015a      	lsls	r2, r3, #5
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	4413      	add	r3, r2
 8012314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	68ba      	ldr	r2, [r7, #8]
 801231c:	0151      	lsls	r1, r2, #5
 801231e:	68fa      	ldr	r2, [r7, #12]
 8012320:	440a      	add	r2, r1
 8012322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012326:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801232a:	6013      	str	r3, [r2, #0]
 801232c:	e02b      	b.n	8012386 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	015a      	lsls	r2, r3, #5
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	4413      	add	r3, r2
 8012336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	2b00      	cmp	r3, #0
 801233e:	db12      	blt.n	8012366 <USB_EPSetStall+0xae>
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d00f      	beq.n	8012366 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	015a      	lsls	r2, r3, #5
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	4413      	add	r3, r2
 801234e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	68ba      	ldr	r2, [r7, #8]
 8012356:	0151      	lsls	r1, r2, #5
 8012358:	68fa      	ldr	r2, [r7, #12]
 801235a:	440a      	add	r2, r1
 801235c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012360:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012364:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	015a      	lsls	r2, r3, #5
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	4413      	add	r3, r2
 801236e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	68ba      	ldr	r2, [r7, #8]
 8012376:	0151      	lsls	r1, r2, #5
 8012378:	68fa      	ldr	r2, [r7, #12]
 801237a:	440a      	add	r2, r1
 801237c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012380:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012384:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012386:	2300      	movs	r3, #0
}
 8012388:	4618      	mov	r0, r3
 801238a:	3714      	adds	r7, #20
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012394:	b480      	push	{r7}
 8012396:	b085      	sub	sp, #20
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	781b      	ldrb	r3, [r3, #0]
 80123a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	785b      	ldrb	r3, [r3, #1]
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	d128      	bne.n	8012402 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	015a      	lsls	r2, r3, #5
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	4413      	add	r3, r2
 80123b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	68ba      	ldr	r2, [r7, #8]
 80123c0:	0151      	lsls	r1, r2, #5
 80123c2:	68fa      	ldr	r2, [r7, #12]
 80123c4:	440a      	add	r2, r1
 80123c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80123ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80123ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	78db      	ldrb	r3, [r3, #3]
 80123d4:	2b03      	cmp	r3, #3
 80123d6:	d003      	beq.n	80123e0 <USB_EPClearStall+0x4c>
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	78db      	ldrb	r3, [r3, #3]
 80123dc:	2b02      	cmp	r3, #2
 80123de:	d138      	bne.n	8012452 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	015a      	lsls	r2, r3, #5
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	4413      	add	r3, r2
 80123e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	68ba      	ldr	r2, [r7, #8]
 80123f0:	0151      	lsls	r1, r2, #5
 80123f2:	68fa      	ldr	r2, [r7, #12]
 80123f4:	440a      	add	r2, r1
 80123f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80123fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80123fe:	6013      	str	r3, [r2, #0]
 8012400:	e027      	b.n	8012452 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	015a      	lsls	r2, r3, #5
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	4413      	add	r3, r2
 801240a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	68ba      	ldr	r2, [r7, #8]
 8012412:	0151      	lsls	r1, r2, #5
 8012414:	68fa      	ldr	r2, [r7, #12]
 8012416:	440a      	add	r2, r1
 8012418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801241c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012420:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	78db      	ldrb	r3, [r3, #3]
 8012426:	2b03      	cmp	r3, #3
 8012428:	d003      	beq.n	8012432 <USB_EPClearStall+0x9e>
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	78db      	ldrb	r3, [r3, #3]
 801242e:	2b02      	cmp	r3, #2
 8012430:	d10f      	bne.n	8012452 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	015a      	lsls	r2, r3, #5
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	4413      	add	r3, r2
 801243a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	68ba      	ldr	r2, [r7, #8]
 8012442:	0151      	lsls	r1, r2, #5
 8012444:	68fa      	ldr	r2, [r7, #12]
 8012446:	440a      	add	r2, r1
 8012448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801244c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012450:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012452:	2300      	movs	r3, #0
}
 8012454:	4618      	mov	r0, r3
 8012456:	3714      	adds	r7, #20
 8012458:	46bd      	mov	sp, r7
 801245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245e:	4770      	bx	lr

08012460 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012460:	b480      	push	{r7}
 8012462:	b085      	sub	sp, #20
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	460b      	mov	r3, r1
 801246a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	68fa      	ldr	r2, [r7, #12]
 801247a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801247e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012482:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	78fb      	ldrb	r3, [r7, #3]
 801248e:	011b      	lsls	r3, r3, #4
 8012490:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012494:	68f9      	ldr	r1, [r7, #12]
 8012496:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801249a:	4313      	orrs	r3, r2
 801249c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801249e:	2300      	movs	r3, #0
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3714      	adds	r7, #20
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr

080124ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80124ac:	b480      	push	{r7}
 80124ae:	b085      	sub	sp, #20
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	695b      	ldr	r3, [r3, #20]
 80124b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	699b      	ldr	r3, [r3, #24]
 80124be:	68fa      	ldr	r2, [r7, #12]
 80124c0:	4013      	ands	r3, r2
 80124c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80124c4:	68fb      	ldr	r3, [r7, #12]
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3714      	adds	r7, #20
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr

080124d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80124d2:	b480      	push	{r7}
 80124d4:	b085      	sub	sp, #20
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124e4:	699b      	ldr	r3, [r3, #24]
 80124e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124ee:	69db      	ldr	r3, [r3, #28]
 80124f0:	68ba      	ldr	r2, [r7, #8]
 80124f2:	4013      	ands	r3, r2
 80124f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	0c1b      	lsrs	r3, r3, #16
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	3714      	adds	r7, #20
 80124fe:	46bd      	mov	sp, r7
 8012500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012504:	4770      	bx	lr

08012506 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012506:	b480      	push	{r7}
 8012508:	b085      	sub	sp, #20
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012518:	699b      	ldr	r3, [r3, #24]
 801251a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012522:	69db      	ldr	r3, [r3, #28]
 8012524:	68ba      	ldr	r2, [r7, #8]
 8012526:	4013      	ands	r3, r2
 8012528:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	b29b      	uxth	r3, r3
}
 801252e:	4618      	mov	r0, r3
 8012530:	3714      	adds	r7, #20
 8012532:	46bd      	mov	sp, r7
 8012534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012538:	4770      	bx	lr

0801253a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801253a:	b480      	push	{r7}
 801253c:	b085      	sub	sp, #20
 801253e:	af00      	add	r7, sp, #0
 8012540:	6078      	str	r0, [r7, #4]
 8012542:	460b      	mov	r3, r1
 8012544:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801254a:	78fb      	ldrb	r3, [r7, #3]
 801254c:	015a      	lsls	r2, r3, #5
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	4413      	add	r3, r2
 8012552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012560:	695b      	ldr	r3, [r3, #20]
 8012562:	68ba      	ldr	r2, [r7, #8]
 8012564:	4013      	ands	r3, r2
 8012566:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012568:	68bb      	ldr	r3, [r7, #8]
}
 801256a:	4618      	mov	r0, r3
 801256c:	3714      	adds	r7, #20
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr

08012576 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012576:	b480      	push	{r7}
 8012578:	b087      	sub	sp, #28
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	460b      	mov	r3, r1
 8012580:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801258c:	691b      	ldr	r3, [r3, #16]
 801258e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012598:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801259a:	78fb      	ldrb	r3, [r7, #3]
 801259c:	f003 030f 	and.w	r3, r3, #15
 80125a0:	68fa      	ldr	r2, [r7, #12]
 80125a2:	fa22 f303 	lsr.w	r3, r2, r3
 80125a6:	01db      	lsls	r3, r3, #7
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	693a      	ldr	r2, [r7, #16]
 80125ac:	4313      	orrs	r3, r2
 80125ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80125b0:	78fb      	ldrb	r3, [r7, #3]
 80125b2:	015a      	lsls	r2, r3, #5
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	4413      	add	r3, r2
 80125b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125bc:	689b      	ldr	r3, [r3, #8]
 80125be:	693a      	ldr	r2, [r7, #16]
 80125c0:	4013      	ands	r3, r2
 80125c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80125c4:	68bb      	ldr	r3, [r7, #8]
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	371c      	adds	r7, #28
 80125ca:	46bd      	mov	sp, r7
 80125cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d0:	4770      	bx	lr

080125d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80125d2:	b480      	push	{r7}
 80125d4:	b083      	sub	sp, #12
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	695b      	ldr	r3, [r3, #20]
 80125de:	f003 0301 	and.w	r3, r3, #1
}
 80125e2:	4618      	mov	r0, r3
 80125e4:	370c      	adds	r7, #12
 80125e6:	46bd      	mov	sp, r7
 80125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ec:	4770      	bx	lr

080125ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80125ee:	b480      	push	{r7}
 80125f0:	b085      	sub	sp, #20
 80125f2:	af00      	add	r7, sp, #0
 80125f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	68fa      	ldr	r2, [r7, #12]
 8012604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012608:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801260c:	f023 0307 	bic.w	r3, r3, #7
 8012610:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	68fa      	ldr	r2, [r7, #12]
 801261c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012624:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012626:	2300      	movs	r3, #0
}
 8012628:	4618      	mov	r0, r3
 801262a:	3714      	adds	r7, #20
 801262c:	46bd      	mov	sp, r7
 801262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012632:	4770      	bx	lr

08012634 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8012634:	b480      	push	{r7}
 8012636:	b085      	sub	sp, #20
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	333c      	adds	r3, #60	; 0x3c
 8012646:	3304      	adds	r3, #4
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	4a1c      	ldr	r2, [pc, #112]	; (80126c0 <USB_EP0_OutStart+0x8c>)
 8012650:	4293      	cmp	r3, r2
 8012652:	d90a      	bls.n	801266a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012664:	d101      	bne.n	801266a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8012666:	2300      	movs	r3, #0
 8012668:	e024      	b.n	80126b4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012670:	461a      	mov	r2, r3
 8012672:	2300      	movs	r3, #0
 8012674:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801267c:	691b      	ldr	r3, [r3, #16]
 801267e:	68fa      	ldr	r2, [r7, #12]
 8012680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012688:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012690:	691b      	ldr	r3, [r3, #16]
 8012692:	68fa      	ldr	r2, [r7, #12]
 8012694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012698:	f043 0318 	orr.w	r3, r3, #24
 801269c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126a4:	691b      	ldr	r3, [r3, #16]
 80126a6:	68fa      	ldr	r2, [r7, #12]
 80126a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80126ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80126b0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80126b2:	2300      	movs	r3, #0
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	3714      	adds	r7, #20
 80126b8:	46bd      	mov	sp, r7
 80126ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126be:	4770      	bx	lr
 80126c0:	4f54300a 	.word	0x4f54300a

080126c4 <USBD_WCID_STREAMING_FillTxDataBuffer>:
* @param  size: length of data in bytes
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_FillTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number, uint8_t* buf, uint32_t size)
{
 80126c4:	b480      	push	{r7}
 80126c6:	b08f      	sub	sp, #60	; 0x3c
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	607a      	str	r2, [r7, #4]
 80126ce:	603b      	str	r3, [r7, #0]
 80126d0:	460b      	mov	r3, r1
 80126d2:	72fb      	strb	r3, [r7, #11]
    USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126da:	62fb      	str	r3, [r7, #44]	; 0x2c

   uint8_t ** TxBuffer = hwcid->TxBuffer;
 80126dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80126e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __IO uint8_t * TxBuffStatus = hwcid->TxBuffStatus;
 80126e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80126ea:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
 80126ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ee:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80126f2:	623b      	str	r3, [r7, #32]
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
 80126f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f6:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 80126fa:	61fb      	str	r3, [r7, #28]
   __IO uint8_t * TxBuffReset = hwcid->TxBuffReset;
 80126fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fe:	f203 1365 	addw	r3, r3, #357	; 0x165
 8012702:	61bb      	str	r3, [r7, #24]
   
  uint32_t i;   
  uint8_t * txBuffptr = (uint8_t*)TxBuffer[ch_number];  
 8012704:	7afb      	ldrb	r3, [r7, #11]
 8012706:	009b      	lsls	r3, r3, #2
 8012708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801270a:	4413      	add	r3, r2
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	617b      	str	r3, [r7, #20]
  
  if(TxBuffReset[ch_number] == 1)
 8012710:	7afb      	ldrb	r3, [r7, #11]
 8012712:	69ba      	ldr	r2, [r7, #24]
 8012714:	4413      	add	r3, r2
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	b2db      	uxtb	r3, r3
 801271a:	2b01      	cmp	r3, #1
 801271c:	d121      	bne.n	8012762 <USBD_WCID_STREAMING_FillTxDataBuffer+0x9e>
  {
    if(ch_number >= (N_IN_ENDPOINTS-1))
 801271e:	7afb      	ldrb	r3, [r7, #11]
 8012720:	2b03      	cmp	r3, #3
 8012722:	d90e      	bls.n	8012742 <USBD_WCID_STREAMING_FillTxDataBuffer+0x7e>
    {
      txBuffptr[0] = ch_number;
 8012724:	697b      	ldr	r3, [r7, #20]
 8012726:	7afa      	ldrb	r2, [r7, #11]
 8012728:	701a      	strb	r2, [r3, #0]
      TxBuffIdx[ch_number] = 1;
 801272a:	7afb      	ldrb	r3, [r7, #11]
 801272c:	009b      	lsls	r3, r3, #2
 801272e:	6a3a      	ldr	r2, [r7, #32]
 8012730:	4413      	add	r3, r2
 8012732:	2201      	movs	r2, #1
 8012734:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 8012736:	7afb      	ldrb	r3, [r7, #11]
 8012738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801273a:	4413      	add	r3, r2
 801273c:	2200      	movs	r2, #0
 801273e:	701a      	strb	r2, [r3, #0]
 8012740:	e00a      	b.n	8012758 <USBD_WCID_STREAMING_FillTxDataBuffer+0x94>
    }
    else
    {
      TxBuffIdx[ch_number] = 0;
 8012742:	7afb      	ldrb	r3, [r7, #11]
 8012744:	009b      	lsls	r3, r3, #2
 8012746:	6a3a      	ldr	r2, [r7, #32]
 8012748:	4413      	add	r3, r2
 801274a:	2200      	movs	r2, #0
 801274c:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 801274e:	7afb      	ldrb	r3, [r7, #11]
 8012750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012752:	4413      	add	r3, r2
 8012754:	2200      	movs	r2, #0
 8012756:	701a      	strb	r2, [r3, #0]
      
    }
    TxBuffReset[ch_number] = 0;
 8012758:	7afb      	ldrb	r3, [r7, #11]
 801275a:	69ba      	ldr	r2, [r7, #24]
 801275c:	4413      	add	r3, r2
 801275e:	2200      	movs	r2, #0
 8012760:	701a      	strb	r2, [r3, #0]
  }
  
  uint32_t txBuffIdx = TxBuffIdx[ch_number];  
 8012762:	7afb      	ldrb	r3, [r7, #11]
 8012764:	009b      	lsls	r3, r3, #2
 8012766:	6a3a      	ldr	r2, [r7, #32]
 8012768:	4413      	add	r3, r2
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	633b      	str	r3, [r7, #48]	; 0x30
  
  for (i = 0; i < size; i++)
 801276e:	2300      	movs	r3, #0
 8012770:	637b      	str	r3, [r7, #52]	; 0x34
 8012772:	e046      	b.n	8012802 <USBD_WCID_STREAMING_FillTxDataBuffer+0x13e>
  {
    txBuffptr[txBuffIdx] = buf[i];    
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012778:	441a      	add	r2, r3
 801277a:	6979      	ldr	r1, [r7, #20]
 801277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277e:	440b      	add	r3, r1
 8012780:	7812      	ldrb	r2, [r2, #0]
 8012782:	701a      	strb	r2, [r3, #0]
    txBuffIdx = (txBuffIdx + 1) %  (USB_DataSizePerEp[ch_number]);
 8012784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012786:	3301      	adds	r3, #1
 8012788:	7afa      	ldrb	r2, [r7, #11]
 801278a:	0052      	lsls	r2, r2, #1
 801278c:	69f9      	ldr	r1, [r7, #28]
 801278e:	440a      	add	r2, r1
 8012790:	8812      	ldrh	r2, [r2, #0]
 8012792:	fbb3 f1f2 	udiv	r1, r3, r2
 8012796:	fb02 f201 	mul.w	r2, r2, r1
 801279a:	1a9b      	subs	r3, r3, r2
 801279c:	633b      	str	r3, [r7, #48]	; 0x30
    
    if(txBuffIdx == (USB_DataSizePerEp[ch_number]/2))
 801279e:	7afb      	ldrb	r3, [r7, #11]
 80127a0:	005b      	lsls	r3, r3, #1
 80127a2:	69fa      	ldr	r2, [r7, #28]
 80127a4:	4413      	add	r3, r2
 80127a6:	881b      	ldrh	r3, [r3, #0]
 80127a8:	085b      	lsrs	r3, r3, #1
 80127aa:	b29b      	uxth	r3, r3
 80127ac:	461a      	mov	r2, r3
 80127ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b0:	4293      	cmp	r3, r2
 80127b2:	d110      	bne.n	80127d6 <USBD_WCID_STREAMING_FillTxDataBuffer+0x112>
    {
      TxBuffStatus[ch_number] = 1;
 80127b4:	7afb      	ldrb	r3, [r7, #11]
 80127b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127b8:	4413      	add	r3, r2
 80127ba:	2201      	movs	r2, #1
 80127bc:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 80127be:	7afb      	ldrb	r3, [r7, #11]
 80127c0:	2b03      	cmp	r3, #3
 80127c2:	d91b      	bls.n	80127fc <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 80127c4:	697a      	ldr	r2, [r7, #20]
 80127c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c8:	4413      	add	r3, r2
 80127ca:	7afa      	ldrb	r2, [r7, #11]
 80127cc:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 80127ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d0:	3301      	adds	r3, #1
 80127d2:	633b      	str	r3, [r7, #48]	; 0x30
 80127d4:	e012      	b.n	80127fc <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      }
    }
    else if (txBuffIdx == 0)
 80127d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d10f      	bne.n	80127fc <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
    {
      TxBuffStatus[ch_number] = 2;
 80127dc:	7afb      	ldrb	r3, [r7, #11]
 80127de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127e0:	4413      	add	r3, r2
 80127e2:	2202      	movs	r2, #2
 80127e4:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 80127e6:	7afb      	ldrb	r3, [r7, #11]
 80127e8:	2b03      	cmp	r3, #3
 80127ea:	d907      	bls.n	80127fc <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 80127ec:	697a      	ldr	r2, [r7, #20]
 80127ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f0:	4413      	add	r3, r2
 80127f2:	7afa      	ldrb	r2, [r7, #11]
 80127f4:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 80127f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f8:	3301      	adds	r3, #1
 80127fa:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < size; i++)
 80127fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127fe:	3301      	adds	r3, #1
 8012800:	637b      	str	r3, [r7, #52]	; 0x34
 8012802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	429a      	cmp	r2, r3
 8012808:	d3b4      	bcc.n	8012774 <USBD_WCID_STREAMING_FillTxDataBuffer+0xb0>
      }
    }
  }  
  TxBuffIdx[ch_number] = txBuffIdx;  
 801280a:	7afb      	ldrb	r3, [r7, #11]
 801280c:	009b      	lsls	r3, r3, #2
 801280e:	6a3a      	ldr	r2, [r7, #32]
 8012810:	4413      	add	r3, r2
 8012812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012814:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 8012816:	2300      	movs	r3, #0
}
 8012818:	4618      	mov	r0, r3
 801281a:	373c      	adds	r7, #60	; 0x3c
 801281c:	46bd      	mov	sp, r7
 801281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012822:	4770      	bx	lr

08012824 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012824:	b480      	push	{r7}
 8012826:	b083      	sub	sp, #12
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801282c:	2300      	movs	r3, #0
}
 801282e:	4618      	mov	r0, r3
 8012830:	370c      	adds	r7, #12
 8012832:	46bd      	mov	sp, r7
 8012834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012838:	4770      	bx	lr

0801283a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801283a:	b580      	push	{r7, lr}
 801283c:	b084      	sub	sp, #16
 801283e:	af00      	add	r7, sp, #0
 8012840:	6078      	str	r0, [r7, #4]
 8012842:	460b      	mov	r3, r1
 8012844:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8012846:	2302      	movs	r3, #2
 8012848:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012850:	2b00      	cmp	r3, #0
 8012852:	d00c      	beq.n	801286e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	78fa      	ldrb	r2, [r7, #3]
 801285e:	4611      	mov	r1, r2
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	4798      	blx	r3
 8012864:	4603      	mov	r3, r0
 8012866:	2b00      	cmp	r3, #0
 8012868:	d101      	bne.n	801286e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 801286a:	2300      	movs	r3, #0
 801286c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012870:	4618      	mov	r0, r3
 8012872:	3710      	adds	r7, #16
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}

08012878 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b082      	sub	sp, #8
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
 8012880:	460b      	mov	r3, r1
 8012882:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801288a:	685b      	ldr	r3, [r3, #4]
 801288c:	78fa      	ldrb	r2, [r7, #3]
 801288e:	4611      	mov	r1, r2
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	4798      	blx	r3

  return USBD_OK;
 8012894:	2300      	movs	r3, #0
}
 8012896:	4618      	mov	r0, r3
 8012898:	3708      	adds	r7, #8
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}

0801289e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801289e:	b580      	push	{r7, lr}
 80128a0:	b082      	sub	sp, #8
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	6078      	str	r0, [r7, #4]
 80128a6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80128ae:	6839      	ldr	r1, [r7, #0]
 80128b0:	4618      	mov	r0, r3
 80128b2:	f000 ff28 	bl	8013706 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2201      	movs	r2, #1
 80128ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80128c4:	461a      	mov	r2, r3
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80128d2:	f003 031f 	and.w	r3, r3, #31
 80128d6:	2b02      	cmp	r3, #2
 80128d8:	d016      	beq.n	8012908 <USBD_LL_SetupStage+0x6a>
 80128da:	2b02      	cmp	r3, #2
 80128dc:	d81c      	bhi.n	8012918 <USBD_LL_SetupStage+0x7a>
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d002      	beq.n	80128e8 <USBD_LL_SetupStage+0x4a>
 80128e2:	2b01      	cmp	r3, #1
 80128e4:	d008      	beq.n	80128f8 <USBD_LL_SetupStage+0x5a>
 80128e6:	e017      	b.n	8012918 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80128ee:	4619      	mov	r1, r3
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f000 fa09 	bl	8012d08 <USBD_StdDevReq>
      break;
 80128f6:	e01a      	b.n	801292e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80128fe:	4619      	mov	r1, r3
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f000 fa6b 	bl	8012ddc <USBD_StdItfReq>
      break;
 8012906:	e012      	b.n	801292e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801290e:	4619      	mov	r1, r3
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f000 faab 	bl	8012e6c <USBD_StdEPReq>
      break;
 8012916:	e00a      	b.n	801292e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801291e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012922:	b2db      	uxtb	r3, r3
 8012924:	4619      	mov	r1, r3
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f7f3 f9c6 	bl	8005cb8 <USBD_LL_StallEP>
      break;
 801292c:	bf00      	nop
  }

  return USBD_OK;
 801292e:	2300      	movs	r3, #0
}
 8012930:	4618      	mov	r0, r3
 8012932:	3708      	adds	r7, #8
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b086      	sub	sp, #24
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	460b      	mov	r3, r1
 8012942:	607a      	str	r2, [r7, #4]
 8012944:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012946:	7afb      	ldrb	r3, [r7, #11]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d14b      	bne.n	80129e4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012952:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801295a:	2b03      	cmp	r3, #3
 801295c:	d134      	bne.n	80129c8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	68da      	ldr	r2, [r3, #12]
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	691b      	ldr	r3, [r3, #16]
 8012966:	429a      	cmp	r2, r3
 8012968:	d919      	bls.n	801299e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	68da      	ldr	r2, [r3, #12]
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	691b      	ldr	r3, [r3, #16]
 8012972:	1ad2      	subs	r2, r2, r3
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	68da      	ldr	r2, [r3, #12]
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012980:	429a      	cmp	r2, r3
 8012982:	d203      	bcs.n	801298c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8012988:	b29b      	uxth	r3, r3
 801298a:	e002      	b.n	8012992 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012990:	b29b      	uxth	r3, r3
 8012992:	461a      	mov	r2, r3
 8012994:	6879      	ldr	r1, [r7, #4]
 8012996:	68f8      	ldr	r0, [r7, #12]
 8012998:	f000 ff31 	bl	80137fe <USBD_CtlContinueRx>
 801299c:	e038      	b.n	8012a10 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129a4:	691b      	ldr	r3, [r3, #16]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d00a      	beq.n	80129c0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80129b0:	2b03      	cmp	r3, #3
 80129b2:	d105      	bne.n	80129c0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129ba:	691b      	ldr	r3, [r3, #16]
 80129bc:	68f8      	ldr	r0, [r7, #12]
 80129be:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80129c0:	68f8      	ldr	r0, [r7, #12]
 80129c2:	f000 ff2e 	bl	8013822 <USBD_CtlSendStatus>
 80129c6:	e023      	b.n	8012a10 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80129ce:	2b05      	cmp	r3, #5
 80129d0:	d11e      	bne.n	8012a10 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	2200      	movs	r2, #0
 80129d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80129da:	2100      	movs	r1, #0
 80129dc:	68f8      	ldr	r0, [r7, #12]
 80129de:	f7f3 f96b 	bl	8005cb8 <USBD_LL_StallEP>
 80129e2:	e015      	b.n	8012a10 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129ea:	699b      	ldr	r3, [r3, #24]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d00d      	beq.n	8012a0c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80129f6:	2b03      	cmp	r3, #3
 80129f8:	d108      	bne.n	8012a0c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a00:	699b      	ldr	r3, [r3, #24]
 8012a02:	7afa      	ldrb	r2, [r7, #11]
 8012a04:	4611      	mov	r1, r2
 8012a06:	68f8      	ldr	r0, [r7, #12]
 8012a08:	4798      	blx	r3
 8012a0a:	e001      	b.n	8012a10 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012a0c:	2302      	movs	r3, #2
 8012a0e:	e000      	b.n	8012a12 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8012a10:	2300      	movs	r3, #0
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	3718      	adds	r7, #24
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}

08012a1a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012a1a:	b580      	push	{r7, lr}
 8012a1c:	b086      	sub	sp, #24
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	60f8      	str	r0, [r7, #12]
 8012a22:	460b      	mov	r3, r1
 8012a24:	607a      	str	r2, [r7, #4]
 8012a26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012a28:	7afb      	ldrb	r3, [r7, #11]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d17f      	bne.n	8012b2e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	3314      	adds	r3, #20
 8012a32:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012a3a:	2b02      	cmp	r3, #2
 8012a3c:	d15c      	bne.n	8012af8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	68da      	ldr	r2, [r3, #12]
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	691b      	ldr	r3, [r3, #16]
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d915      	bls.n	8012a76 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	68da      	ldr	r2, [r3, #12]
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	691b      	ldr	r3, [r3, #16]
 8012a52:	1ad2      	subs	r2, r2, r3
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	68db      	ldr	r3, [r3, #12]
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	461a      	mov	r2, r3
 8012a60:	6879      	ldr	r1, [r7, #4]
 8012a62:	68f8      	ldr	r0, [r7, #12]
 8012a64:	f000 feb9 	bl	80137da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012a68:	2300      	movs	r3, #0
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	2100      	movs	r1, #0
 8012a6e:	68f8      	ldr	r0, [r7, #12]
 8012a70:	f7f3 f99e 	bl	8005db0 <USBD_LL_PrepareReceive>
 8012a74:	e04e      	b.n	8012b14 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	689b      	ldr	r3, [r3, #8]
 8012a7a:	697a      	ldr	r2, [r7, #20]
 8012a7c:	6912      	ldr	r2, [r2, #16]
 8012a7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a82:	fb02 f201 	mul.w	r2, r2, r1
 8012a86:	1a9b      	subs	r3, r3, r2
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d11c      	bne.n	8012ac6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	689a      	ldr	r2, [r3, #8]
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d316      	bcc.n	8012ac6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	689a      	ldr	r2, [r3, #8]
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d20f      	bcs.n	8012ac6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	2100      	movs	r1, #0
 8012aaa:	68f8      	ldr	r0, [r7, #12]
 8012aac:	f000 fe95 	bl	80137da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012ab8:	2300      	movs	r3, #0
 8012aba:	2200      	movs	r2, #0
 8012abc:	2100      	movs	r1, #0
 8012abe:	68f8      	ldr	r0, [r7, #12]
 8012ac0:	f7f3 f976 	bl	8005db0 <USBD_LL_PrepareReceive>
 8012ac4:	e026      	b.n	8012b14 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012acc:	68db      	ldr	r3, [r3, #12]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d00a      	beq.n	8012ae8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8012ad8:	2b03      	cmp	r3, #3
 8012ada:	d105      	bne.n	8012ae8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ae2:	68db      	ldr	r3, [r3, #12]
 8012ae4:	68f8      	ldr	r0, [r7, #12]
 8012ae6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8012ae8:	2180      	movs	r1, #128	; 0x80
 8012aea:	68f8      	ldr	r0, [r7, #12]
 8012aec:	f7f3 f8e4 	bl	8005cb8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8012af0:	68f8      	ldr	r0, [r7, #12]
 8012af2:	f000 fea9 	bl	8013848 <USBD_CtlReceiveStatus>
 8012af6:	e00d      	b.n	8012b14 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012afe:	2b04      	cmp	r3, #4
 8012b00:	d004      	beq.n	8012b0c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d103      	bne.n	8012b14 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8012b0c:	2180      	movs	r1, #128	; 0x80
 8012b0e:	68f8      	ldr	r0, [r7, #12]
 8012b10:	f7f3 f8d2 	bl	8005cb8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012b1a:	2b01      	cmp	r3, #1
 8012b1c:	d11d      	bne.n	8012b5a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8012b1e:	68f8      	ldr	r0, [r7, #12]
 8012b20:	f7ff fe80 	bl	8012824 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	2200      	movs	r2, #0
 8012b28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012b2c:	e015      	b.n	8012b5a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b34:	695b      	ldr	r3, [r3, #20]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d00d      	beq.n	8012b56 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8012b40:	2b03      	cmp	r3, #3
 8012b42:	d108      	bne.n	8012b56 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b4a:	695b      	ldr	r3, [r3, #20]
 8012b4c:	7afa      	ldrb	r2, [r7, #11]
 8012b4e:	4611      	mov	r1, r2
 8012b50:	68f8      	ldr	r0, [r7, #12]
 8012b52:	4798      	blx	r3
 8012b54:	e001      	b.n	8012b5a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012b56:	2302      	movs	r3, #2
 8012b58:	e000      	b.n	8012b5c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8012b5a:	2300      	movs	r3, #0
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	3718      	adds	r7, #24
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}

08012b64 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012b6c:	2340      	movs	r3, #64	; 0x40
 8012b6e:	2200      	movs	r2, #0
 8012b70:	2100      	movs	r1, #0
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f7f3 f886 	bl	8005c84 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	2201      	movs	r2, #1
 8012b7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2240      	movs	r2, #64	; 0x40
 8012b84:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012b88:	2340      	movs	r3, #64	; 0x40
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	2180      	movs	r1, #128	; 0x80
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f7f3 f878 	bl	8005c84 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2201      	movs	r2, #1
 8012b98:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2240      	movs	r2, #64	; 0x40
 8012b9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2200      	movs	r2, #0
 8012bac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d009      	beq.n	8012bdc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bce:	685b      	ldr	r3, [r3, #4]
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	6852      	ldr	r2, [r2, #4]
 8012bd4:	b2d2      	uxtb	r2, r2
 8012bd6:	4611      	mov	r1, r2
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	4798      	blx	r3
  }

  return USBD_OK;
 8012bdc:	2300      	movs	r3, #0
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3708      	adds	r7, #8
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}

08012be6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012be6:	b480      	push	{r7}
 8012be8:	b083      	sub	sp, #12
 8012bea:	af00      	add	r7, sp, #0
 8012bec:	6078      	str	r0, [r7, #4]
 8012bee:	460b      	mov	r3, r1
 8012bf0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	78fa      	ldrb	r2, [r7, #3]
 8012bf6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012bf8:	2300      	movs	r3, #0
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	370c      	adds	r7, #12
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c04:	4770      	bx	lr

08012c06 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012c06:	b480      	push	{r7}
 8012c08:	b083      	sub	sp, #12
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2204      	movs	r2, #4
 8012c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012c22:	2300      	movs	r3, #0
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	370c      	adds	r7, #12
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2e:	4770      	bx	lr

08012c30 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012c30:	b480      	push	{r7}
 8012c32:	b083      	sub	sp, #12
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c3e:	2b04      	cmp	r3, #4
 8012c40:	d105      	bne.n	8012c4e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012c4e:	2300      	movs	r3, #0
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	370c      	adds	r7, #12
 8012c54:	46bd      	mov	sp, r7
 8012c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5a:	4770      	bx	lr

08012c5c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c6a:	2b03      	cmp	r3, #3
 8012c6c:	d10b      	bne.n	8012c86 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c74:	69db      	ldr	r3, [r3, #28]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d005      	beq.n	8012c86 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c80:	69db      	ldr	r3, [r3, #28]
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012c86:	2300      	movs	r3, #0
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3708      	adds	r7, #8
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}

08012c90 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012c90:	b480      	push	{r7}
 8012c92:	b083      	sub	sp, #12
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
 8012c98:	460b      	mov	r3, r1
 8012c9a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8012c9c:	2300      	movs	r3, #0
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	370c      	adds	r7, #12
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca8:	4770      	bx	lr

08012caa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012caa:	b480      	push	{r7}
 8012cac:	b083      	sub	sp, #12
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	6078      	str	r0, [r7, #4]
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8012cb6:	2300      	movs	r3, #0
}
 8012cb8:	4618      	mov	r0, r3
 8012cba:	370c      	adds	r7, #12
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr

08012cc4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b083      	sub	sp, #12
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012ccc:	2300      	movs	r3, #0
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	370c      	adds	r7, #12
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd8:	4770      	bx	lr

08012cda <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012cda:	b580      	push	{r7, lr}
 8012cdc:	b082      	sub	sp, #8
 8012cde:	af00      	add	r7, sp, #0
 8012ce0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2201      	movs	r2, #1
 8012ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	687a      	ldr	r2, [r7, #4]
 8012cf4:	6852      	ldr	r2, [r2, #4]
 8012cf6:	b2d2      	uxtb	r2, r2
 8012cf8:	4611      	mov	r1, r2
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	4798      	blx	r3

  return USBD_OK;
 8012cfe:	2300      	movs	r3, #0
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3708      	adds	r7, #8
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}

08012d08 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b084      	sub	sp, #16
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012d12:	2300      	movs	r3, #0
 8012d14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	781b      	ldrb	r3, [r3, #0]
 8012d1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012d1e:	2b40      	cmp	r3, #64	; 0x40
 8012d20:	d005      	beq.n	8012d2e <USBD_StdDevReq+0x26>
 8012d22:	2b40      	cmp	r3, #64	; 0x40
 8012d24:	d84f      	bhi.n	8012dc6 <USBD_StdDevReq+0xbe>
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d009      	beq.n	8012d3e <USBD_StdDevReq+0x36>
 8012d2a:	2b20      	cmp	r3, #32
 8012d2c:	d14b      	bne.n	8012dc6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d34:	689b      	ldr	r3, [r3, #8]
 8012d36:	6839      	ldr	r1, [r7, #0]
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	4798      	blx	r3
      break;
 8012d3c:	e048      	b.n	8012dd0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	785b      	ldrb	r3, [r3, #1]
 8012d42:	2b09      	cmp	r3, #9
 8012d44:	d839      	bhi.n	8012dba <USBD_StdDevReq+0xb2>
 8012d46:	a201      	add	r2, pc, #4	; (adr r2, 8012d4c <USBD_StdDevReq+0x44>)
 8012d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d4c:	08012d9d 	.word	0x08012d9d
 8012d50:	08012db1 	.word	0x08012db1
 8012d54:	08012dbb 	.word	0x08012dbb
 8012d58:	08012da7 	.word	0x08012da7
 8012d5c:	08012dbb 	.word	0x08012dbb
 8012d60:	08012d7f 	.word	0x08012d7f
 8012d64:	08012d75 	.word	0x08012d75
 8012d68:	08012dbb 	.word	0x08012dbb
 8012d6c:	08012d93 	.word	0x08012d93
 8012d70:	08012d89 	.word	0x08012d89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012d74:	6839      	ldr	r1, [r7, #0]
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f000 f9dc 	bl	8013134 <USBD_GetDescriptor>
          break;
 8012d7c:	e022      	b.n	8012dc4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012d7e:	6839      	ldr	r1, [r7, #0]
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f000 fb51 	bl	8013428 <USBD_SetAddress>
          break;
 8012d86:	e01d      	b.n	8012dc4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8012d88:	6839      	ldr	r1, [r7, #0]
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f000 fb90 	bl	80134b0 <USBD_SetConfig>
          break;
 8012d90:	e018      	b.n	8012dc4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012d92:	6839      	ldr	r1, [r7, #0]
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f000 fc19 	bl	80135cc <USBD_GetConfig>
          break;
 8012d9a:	e013      	b.n	8012dc4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012d9c:	6839      	ldr	r1, [r7, #0]
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f000 fc49 	bl	8013636 <USBD_GetStatus>
          break;
 8012da4:	e00e      	b.n	8012dc4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012da6:	6839      	ldr	r1, [r7, #0]
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f000 fc77 	bl	801369c <USBD_SetFeature>
          break;
 8012dae:	e009      	b.n	8012dc4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012db0:	6839      	ldr	r1, [r7, #0]
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f000 fc86 	bl	80136c4 <USBD_ClrFeature>
          break;
 8012db8:	e004      	b.n	8012dc4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8012dba:	6839      	ldr	r1, [r7, #0]
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f000 fcdf 	bl	8013780 <USBD_CtlError>
          break;
 8012dc2:	bf00      	nop
      }
      break;
 8012dc4:	e004      	b.n	8012dd0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8012dc6:	6839      	ldr	r1, [r7, #0]
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f000 fcd9 	bl	8013780 <USBD_CtlError>
      break;
 8012dce:	bf00      	nop
  }

  return ret;
 8012dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3710      	adds	r7, #16
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
 8012dda:	bf00      	nop

08012ddc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b084      	sub	sp, #16
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012de6:	2300      	movs	r3, #0
 8012de8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012df2:	2b40      	cmp	r3, #64	; 0x40
 8012df4:	d005      	beq.n	8012e02 <USBD_StdItfReq+0x26>
 8012df6:	2b40      	cmp	r3, #64	; 0x40
 8012df8:	d82e      	bhi.n	8012e58 <USBD_StdItfReq+0x7c>
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d001      	beq.n	8012e02 <USBD_StdItfReq+0x26>
 8012dfe:	2b20      	cmp	r3, #32
 8012e00:	d12a      	bne.n	8012e58 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e08:	3b01      	subs	r3, #1
 8012e0a:	2b02      	cmp	r3, #2
 8012e0c:	d81d      	bhi.n	8012e4a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	889b      	ldrh	r3, [r3, #4]
 8012e12:	b2db      	uxtb	r3, r3
 8012e14:	2b01      	cmp	r3, #1
 8012e16:	d813      	bhi.n	8012e40 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e1e:	689b      	ldr	r3, [r3, #8]
 8012e20:	6839      	ldr	r1, [r7, #0]
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	4798      	blx	r3
 8012e26:	4603      	mov	r3, r0
 8012e28:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	88db      	ldrh	r3, [r3, #6]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d110      	bne.n	8012e54 <USBD_StdItfReq+0x78>
 8012e32:	7bfb      	ldrb	r3, [r7, #15]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d10d      	bne.n	8012e54 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f000 fcf2 	bl	8013822 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012e3e:	e009      	b.n	8012e54 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8012e40:	6839      	ldr	r1, [r7, #0]
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f000 fc9c 	bl	8013780 <USBD_CtlError>
          break;
 8012e48:	e004      	b.n	8012e54 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8012e4a:	6839      	ldr	r1, [r7, #0]
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f000 fc97 	bl	8013780 <USBD_CtlError>
          break;
 8012e52:	e000      	b.n	8012e56 <USBD_StdItfReq+0x7a>
          break;
 8012e54:	bf00      	nop
      }
      break;
 8012e56:	e004      	b.n	8012e62 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8012e58:	6839      	ldr	r1, [r7, #0]
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f000 fc90 	bl	8013780 <USBD_CtlError>
      break;
 8012e60:	bf00      	nop
  }

  return USBD_OK;
 8012e62:	2300      	movs	r3, #0
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	3710      	adds	r7, #16
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}

08012e6c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012e76:	2300      	movs	r3, #0
 8012e78:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	889b      	ldrh	r3, [r3, #4]
 8012e7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012e88:	2b40      	cmp	r3, #64	; 0x40
 8012e8a:	d007      	beq.n	8012e9c <USBD_StdEPReq+0x30>
 8012e8c:	2b40      	cmp	r3, #64	; 0x40
 8012e8e:	f200 8146 	bhi.w	801311e <USBD_StdEPReq+0x2b2>
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d00a      	beq.n	8012eac <USBD_StdEPReq+0x40>
 8012e96:	2b20      	cmp	r3, #32
 8012e98:	f040 8141 	bne.w	801311e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ea2:	689b      	ldr	r3, [r3, #8]
 8012ea4:	6839      	ldr	r1, [r7, #0]
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	4798      	blx	r3
      break;
 8012eaa:	e13d      	b.n	8013128 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012eb4:	2b20      	cmp	r3, #32
 8012eb6:	d10a      	bne.n	8012ece <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ebe:	689b      	ldr	r3, [r3, #8]
 8012ec0:	6839      	ldr	r1, [r7, #0]
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	4798      	blx	r3
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8012eca:	7bfb      	ldrb	r3, [r7, #15]
 8012ecc:	e12d      	b.n	801312a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	785b      	ldrb	r3, [r3, #1]
 8012ed2:	2b03      	cmp	r3, #3
 8012ed4:	d007      	beq.n	8012ee6 <USBD_StdEPReq+0x7a>
 8012ed6:	2b03      	cmp	r3, #3
 8012ed8:	f300 811b 	bgt.w	8013112 <USBD_StdEPReq+0x2a6>
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d072      	beq.n	8012fc6 <USBD_StdEPReq+0x15a>
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	d03a      	beq.n	8012f5a <USBD_StdEPReq+0xee>
 8012ee4:	e115      	b.n	8013112 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012eec:	2b02      	cmp	r3, #2
 8012eee:	d002      	beq.n	8012ef6 <USBD_StdEPReq+0x8a>
 8012ef0:	2b03      	cmp	r3, #3
 8012ef2:	d015      	beq.n	8012f20 <USBD_StdEPReq+0xb4>
 8012ef4:	e02b      	b.n	8012f4e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012ef6:	7bbb      	ldrb	r3, [r7, #14]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d00c      	beq.n	8012f16 <USBD_StdEPReq+0xaa>
 8012efc:	7bbb      	ldrb	r3, [r7, #14]
 8012efe:	2b80      	cmp	r3, #128	; 0x80
 8012f00:	d009      	beq.n	8012f16 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012f02:	7bbb      	ldrb	r3, [r7, #14]
 8012f04:	4619      	mov	r1, r3
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	f7f2 fed6 	bl	8005cb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8012f0c:	2180      	movs	r1, #128	; 0x80
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f7f2 fed2 	bl	8005cb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012f14:	e020      	b.n	8012f58 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8012f16:	6839      	ldr	r1, [r7, #0]
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f000 fc31 	bl	8013780 <USBD_CtlError>
              break;
 8012f1e:	e01b      	b.n	8012f58 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	885b      	ldrh	r3, [r3, #2]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d10e      	bne.n	8012f46 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8012f28:	7bbb      	ldrb	r3, [r7, #14]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d00b      	beq.n	8012f46 <USBD_StdEPReq+0xda>
 8012f2e:	7bbb      	ldrb	r3, [r7, #14]
 8012f30:	2b80      	cmp	r3, #128	; 0x80
 8012f32:	d008      	beq.n	8012f46 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	88db      	ldrh	r3, [r3, #6]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d104      	bne.n	8012f46 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8012f3c:	7bbb      	ldrb	r3, [r7, #14]
 8012f3e:	4619      	mov	r1, r3
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f7f2 feb9 	bl	8005cb8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f000 fc6b 	bl	8013822 <USBD_CtlSendStatus>

              break;
 8012f4c:	e004      	b.n	8012f58 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8012f4e:	6839      	ldr	r1, [r7, #0]
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f000 fc15 	bl	8013780 <USBD_CtlError>
              break;
 8012f56:	bf00      	nop
          }
          break;
 8012f58:	e0e0      	b.n	801311c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f60:	2b02      	cmp	r3, #2
 8012f62:	d002      	beq.n	8012f6a <USBD_StdEPReq+0xfe>
 8012f64:	2b03      	cmp	r3, #3
 8012f66:	d015      	beq.n	8012f94 <USBD_StdEPReq+0x128>
 8012f68:	e026      	b.n	8012fb8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012f6a:	7bbb      	ldrb	r3, [r7, #14]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d00c      	beq.n	8012f8a <USBD_StdEPReq+0x11e>
 8012f70:	7bbb      	ldrb	r3, [r7, #14]
 8012f72:	2b80      	cmp	r3, #128	; 0x80
 8012f74:	d009      	beq.n	8012f8a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8012f76:	7bbb      	ldrb	r3, [r7, #14]
 8012f78:	4619      	mov	r1, r3
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f7f2 fe9c 	bl	8005cb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8012f80:	2180      	movs	r1, #128	; 0x80
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f7f2 fe98 	bl	8005cb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012f88:	e01c      	b.n	8012fc4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8012f8a:	6839      	ldr	r1, [r7, #0]
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f000 fbf7 	bl	8013780 <USBD_CtlError>
              break;
 8012f92:	e017      	b.n	8012fc4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	885b      	ldrh	r3, [r3, #2]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d112      	bne.n	8012fc2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012f9c:	7bbb      	ldrb	r3, [r7, #14]
 8012f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d004      	beq.n	8012fb0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8012fa6:	7bbb      	ldrb	r3, [r7, #14]
 8012fa8:	4619      	mov	r1, r3
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f7f2 fe97 	bl	8005cde <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8012fb0:	6878      	ldr	r0, [r7, #4]
 8012fb2:	f000 fc36 	bl	8013822 <USBD_CtlSendStatus>
              }
              break;
 8012fb6:	e004      	b.n	8012fc2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8012fb8:	6839      	ldr	r1, [r7, #0]
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f000 fbe0 	bl	8013780 <USBD_CtlError>
              break;
 8012fc0:	e000      	b.n	8012fc4 <USBD_StdEPReq+0x158>
              break;
 8012fc2:	bf00      	nop
          }
          break;
 8012fc4:	e0aa      	b.n	801311c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012fcc:	2b02      	cmp	r3, #2
 8012fce:	d002      	beq.n	8012fd6 <USBD_StdEPReq+0x16a>
 8012fd0:	2b03      	cmp	r3, #3
 8012fd2:	d032      	beq.n	801303a <USBD_StdEPReq+0x1ce>
 8012fd4:	e097      	b.n	8013106 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012fd6:	7bbb      	ldrb	r3, [r7, #14]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d007      	beq.n	8012fec <USBD_StdEPReq+0x180>
 8012fdc:	7bbb      	ldrb	r3, [r7, #14]
 8012fde:	2b80      	cmp	r3, #128	; 0x80
 8012fe0:	d004      	beq.n	8012fec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8012fe2:	6839      	ldr	r1, [r7, #0]
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f000 fbcb 	bl	8013780 <USBD_CtlError>
                break;
 8012fea:	e091      	b.n	8013110 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	da0b      	bge.n	801300c <USBD_StdEPReq+0x1a0>
 8012ff4:	7bbb      	ldrb	r3, [r7, #14]
 8012ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	009b      	lsls	r3, r3, #2
 8012ffe:	4413      	add	r3, r2
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	3310      	adds	r3, #16
 8013004:	687a      	ldr	r2, [r7, #4]
 8013006:	4413      	add	r3, r2
 8013008:	3304      	adds	r3, #4
 801300a:	e00b      	b.n	8013024 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801300c:	7bbb      	ldrb	r3, [r7, #14]
 801300e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013012:	4613      	mov	r3, r2
 8013014:	009b      	lsls	r3, r3, #2
 8013016:	4413      	add	r3, r2
 8013018:	009b      	lsls	r3, r3, #2
 801301a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801301e:	687a      	ldr	r2, [r7, #4]
 8013020:	4413      	add	r3, r2
 8013022:	3304      	adds	r3, #4
 8013024:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	2200      	movs	r2, #0
 801302a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	2202      	movs	r2, #2
 8013030:	4619      	mov	r1, r3
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f000 fbb5 	bl	80137a2 <USBD_CtlSendData>
              break;
 8013038:	e06a      	b.n	8013110 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801303a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801303e:	2b00      	cmp	r3, #0
 8013040:	da11      	bge.n	8013066 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013042:	7bbb      	ldrb	r3, [r7, #14]
 8013044:	f003 020f 	and.w	r2, r3, #15
 8013048:	6879      	ldr	r1, [r7, #4]
 801304a:	4613      	mov	r3, r2
 801304c:	009b      	lsls	r3, r3, #2
 801304e:	4413      	add	r3, r2
 8013050:	009b      	lsls	r3, r3, #2
 8013052:	440b      	add	r3, r1
 8013054:	3318      	adds	r3, #24
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d117      	bne.n	801308c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 801305c:	6839      	ldr	r1, [r7, #0]
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f000 fb8e 	bl	8013780 <USBD_CtlError>
                  break;
 8013064:	e054      	b.n	8013110 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013066:	7bbb      	ldrb	r3, [r7, #14]
 8013068:	f003 020f 	and.w	r2, r3, #15
 801306c:	6879      	ldr	r1, [r7, #4]
 801306e:	4613      	mov	r3, r2
 8013070:	009b      	lsls	r3, r3, #2
 8013072:	4413      	add	r3, r2
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	440b      	add	r3, r1
 8013078:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d104      	bne.n	801308c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8013082:	6839      	ldr	r1, [r7, #0]
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	f000 fb7b 	bl	8013780 <USBD_CtlError>
                  break;
 801308a:	e041      	b.n	8013110 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801308c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013090:	2b00      	cmp	r3, #0
 8013092:	da0b      	bge.n	80130ac <USBD_StdEPReq+0x240>
 8013094:	7bbb      	ldrb	r3, [r7, #14]
 8013096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801309a:	4613      	mov	r3, r2
 801309c:	009b      	lsls	r3, r3, #2
 801309e:	4413      	add	r3, r2
 80130a0:	009b      	lsls	r3, r3, #2
 80130a2:	3310      	adds	r3, #16
 80130a4:	687a      	ldr	r2, [r7, #4]
 80130a6:	4413      	add	r3, r2
 80130a8:	3304      	adds	r3, #4
 80130aa:	e00b      	b.n	80130c4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80130ac:	7bbb      	ldrb	r3, [r7, #14]
 80130ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80130b2:	4613      	mov	r3, r2
 80130b4:	009b      	lsls	r3, r3, #2
 80130b6:	4413      	add	r3, r2
 80130b8:	009b      	lsls	r3, r3, #2
 80130ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	4413      	add	r3, r2
 80130c2:	3304      	adds	r3, #4
 80130c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80130c6:	7bbb      	ldrb	r3, [r7, #14]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d002      	beq.n	80130d2 <USBD_StdEPReq+0x266>
 80130cc:	7bbb      	ldrb	r3, [r7, #14]
 80130ce:	2b80      	cmp	r3, #128	; 0x80
 80130d0:	d103      	bne.n	80130da <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	2200      	movs	r2, #0
 80130d6:	601a      	str	r2, [r3, #0]
 80130d8:	e00e      	b.n	80130f8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80130da:	7bbb      	ldrb	r3, [r7, #14]
 80130dc:	4619      	mov	r1, r3
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f7f2 fe10 	bl	8005d04 <USBD_LL_IsStallEP>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d003      	beq.n	80130f2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	2201      	movs	r2, #1
 80130ee:	601a      	str	r2, [r3, #0]
 80130f0:	e002      	b.n	80130f8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	2200      	movs	r2, #0
 80130f6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	2202      	movs	r2, #2
 80130fc:	4619      	mov	r1, r3
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f000 fb4f 	bl	80137a2 <USBD_CtlSendData>
              break;
 8013104:	e004      	b.n	8013110 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8013106:	6839      	ldr	r1, [r7, #0]
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f000 fb39 	bl	8013780 <USBD_CtlError>
              break;
 801310e:	bf00      	nop
          }
          break;
 8013110:	e004      	b.n	801311c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8013112:	6839      	ldr	r1, [r7, #0]
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f000 fb33 	bl	8013780 <USBD_CtlError>
          break;
 801311a:	bf00      	nop
      }
      break;
 801311c:	e004      	b.n	8013128 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 801311e:	6839      	ldr	r1, [r7, #0]
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f000 fb2d 	bl	8013780 <USBD_CtlError>
      break;
 8013126:	bf00      	nop
  }

  return ret;
 8013128:	7bfb      	ldrb	r3, [r7, #15]
}
 801312a:	4618      	mov	r0, r3
 801312c:	3710      	adds	r7, #16
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
	...

08013134 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b084      	sub	sp, #16
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801313e:	2300      	movs	r3, #0
 8013140:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013142:	2300      	movs	r3, #0
 8013144:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013146:	2300      	movs	r3, #0
 8013148:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	885b      	ldrh	r3, [r3, #2]
 801314e:	0a1b      	lsrs	r3, r3, #8
 8013150:	b29b      	uxth	r3, r3
 8013152:	3b01      	subs	r3, #1
 8013154:	2b06      	cmp	r3, #6
 8013156:	f200 813b 	bhi.w	80133d0 <USBD_GetDescriptor+0x29c>
 801315a:	a201      	add	r2, pc, #4	; (adr r2, 8013160 <USBD_GetDescriptor+0x2c>)
 801315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013160:	0801317d 	.word	0x0801317d
 8013164:	08013195 	.word	0x08013195
 8013168:	080131d5 	.word	0x080131d5
 801316c:	080133d1 	.word	0x080133d1
 8013170:	080133d1 	.word	0x080133d1
 8013174:	08013371 	.word	0x08013371
 8013178:	0801339d 	.word	0x0801339d
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	687a      	ldr	r2, [r7, #4]
 8013186:	7c12      	ldrb	r2, [r2, #16]
 8013188:	f107 0108 	add.w	r1, r7, #8
 801318c:	4610      	mov	r0, r2
 801318e:	4798      	blx	r3
 8013190:	60f8      	str	r0, [r7, #12]
      break;
 8013192:	e125      	b.n	80133e0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	7c1b      	ldrb	r3, [r3, #16]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d10d      	bne.n	80131b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80131a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131a4:	f107 0208 	add.w	r2, r7, #8
 80131a8:	4610      	mov	r0, r2
 80131aa:	4798      	blx	r3
 80131ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	3301      	adds	r3, #1
 80131b2:	2202      	movs	r2, #2
 80131b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80131b6:	e113      	b.n	80133e0 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80131be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131c0:	f107 0208 	add.w	r2, r7, #8
 80131c4:	4610      	mov	r0, r2
 80131c6:	4798      	blx	r3
 80131c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	3301      	adds	r3, #1
 80131ce:	2202      	movs	r2, #2
 80131d0:	701a      	strb	r2, [r3, #0]
      break;
 80131d2:	e105      	b.n	80133e0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	885b      	ldrh	r3, [r3, #2]
 80131d8:	b2db      	uxtb	r3, r3
 80131da:	2b05      	cmp	r3, #5
 80131dc:	f200 80ac 	bhi.w	8013338 <USBD_GetDescriptor+0x204>
 80131e0:	a201      	add	r2, pc, #4	; (adr r2, 80131e8 <USBD_GetDescriptor+0xb4>)
 80131e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131e6:	bf00      	nop
 80131e8:	08013201 	.word	0x08013201
 80131ec:	08013235 	.word	0x08013235
 80131f0:	08013269 	.word	0x08013269
 80131f4:	0801329d 	.word	0x0801329d
 80131f8:	080132d1 	.word	0x080132d1
 80131fc:	08013305 	.word	0x08013305
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013206:	685b      	ldr	r3, [r3, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d00b      	beq.n	8013224 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	687a      	ldr	r2, [r7, #4]
 8013216:	7c12      	ldrb	r2, [r2, #16]
 8013218:	f107 0108 	add.w	r1, r7, #8
 801321c:	4610      	mov	r0, r2
 801321e:	4798      	blx	r3
 8013220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013222:	e0a4      	b.n	801336e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013224:	6839      	ldr	r1, [r7, #0]
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f000 faaa 	bl	8013780 <USBD_CtlError>
            err++;
 801322c:	7afb      	ldrb	r3, [r7, #11]
 801322e:	3301      	adds	r3, #1
 8013230:	72fb      	strb	r3, [r7, #11]
          break;
 8013232:	e09c      	b.n	801336e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801323a:	689b      	ldr	r3, [r3, #8]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d00b      	beq.n	8013258 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013246:	689b      	ldr	r3, [r3, #8]
 8013248:	687a      	ldr	r2, [r7, #4]
 801324a:	7c12      	ldrb	r2, [r2, #16]
 801324c:	f107 0108 	add.w	r1, r7, #8
 8013250:	4610      	mov	r0, r2
 8013252:	4798      	blx	r3
 8013254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013256:	e08a      	b.n	801336e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013258:	6839      	ldr	r1, [r7, #0]
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f000 fa90 	bl	8013780 <USBD_CtlError>
            err++;
 8013260:	7afb      	ldrb	r3, [r7, #11]
 8013262:	3301      	adds	r3, #1
 8013264:	72fb      	strb	r3, [r7, #11]
          break;
 8013266:	e082      	b.n	801336e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801326e:	68db      	ldr	r3, [r3, #12]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d00b      	beq.n	801328c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801327a:	68db      	ldr	r3, [r3, #12]
 801327c:	687a      	ldr	r2, [r7, #4]
 801327e:	7c12      	ldrb	r2, [r2, #16]
 8013280:	f107 0108 	add.w	r1, r7, #8
 8013284:	4610      	mov	r0, r2
 8013286:	4798      	blx	r3
 8013288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801328a:	e070      	b.n	801336e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 801328c:	6839      	ldr	r1, [r7, #0]
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f000 fa76 	bl	8013780 <USBD_CtlError>
            err++;
 8013294:	7afb      	ldrb	r3, [r7, #11]
 8013296:	3301      	adds	r3, #1
 8013298:	72fb      	strb	r3, [r7, #11]
          break;
 801329a:	e068      	b.n	801336e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80132a2:	691b      	ldr	r3, [r3, #16]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d00b      	beq.n	80132c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80132ae:	691b      	ldr	r3, [r3, #16]
 80132b0:	687a      	ldr	r2, [r7, #4]
 80132b2:	7c12      	ldrb	r2, [r2, #16]
 80132b4:	f107 0108 	add.w	r1, r7, #8
 80132b8:	4610      	mov	r0, r2
 80132ba:	4798      	blx	r3
 80132bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132be:	e056      	b.n	801336e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80132c0:	6839      	ldr	r1, [r7, #0]
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	f000 fa5c 	bl	8013780 <USBD_CtlError>
            err++;
 80132c8:	7afb      	ldrb	r3, [r7, #11]
 80132ca:	3301      	adds	r3, #1
 80132cc:	72fb      	strb	r3, [r7, #11]
          break;
 80132ce:	e04e      	b.n	801336e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80132d6:	695b      	ldr	r3, [r3, #20]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d00b      	beq.n	80132f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80132e2:	695b      	ldr	r3, [r3, #20]
 80132e4:	687a      	ldr	r2, [r7, #4]
 80132e6:	7c12      	ldrb	r2, [r2, #16]
 80132e8:	f107 0108 	add.w	r1, r7, #8
 80132ec:	4610      	mov	r0, r2
 80132ee:	4798      	blx	r3
 80132f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132f2:	e03c      	b.n	801336e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80132f4:	6839      	ldr	r1, [r7, #0]
 80132f6:	6878      	ldr	r0, [r7, #4]
 80132f8:	f000 fa42 	bl	8013780 <USBD_CtlError>
            err++;
 80132fc:	7afb      	ldrb	r3, [r7, #11]
 80132fe:	3301      	adds	r3, #1
 8013300:	72fb      	strb	r3, [r7, #11]
          break;
 8013302:	e034      	b.n	801336e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801330a:	699b      	ldr	r3, [r3, #24]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d00b      	beq.n	8013328 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013316:	699b      	ldr	r3, [r3, #24]
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	7c12      	ldrb	r2, [r2, #16]
 801331c:	f107 0108 	add.w	r1, r7, #8
 8013320:	4610      	mov	r0, r2
 8013322:	4798      	blx	r3
 8013324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013326:	e022      	b.n	801336e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013328:	6839      	ldr	r1, [r7, #0]
 801332a:	6878      	ldr	r0, [r7, #4]
 801332c:	f000 fa28 	bl	8013780 <USBD_CtlError>
            err++;
 8013330:	7afb      	ldrb	r3, [r7, #11]
 8013332:	3301      	adds	r3, #1
 8013334:	72fb      	strb	r3, [r7, #11]
          break;
 8013336:	e01a      	b.n	801336e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013340:	2b00      	cmp	r3, #0
 8013342:	d00c      	beq.n	801335e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801334c:	683a      	ldr	r2, [r7, #0]
 801334e:	8852      	ldrh	r2, [r2, #2]
 8013350:	b2d1      	uxtb	r1, r2
 8013352:	f107 0208 	add.w	r2, r7, #8
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	4798      	blx	r3
 801335a:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801335c:	e006      	b.n	801336c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 801335e:	6839      	ldr	r1, [r7, #0]
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f000 fa0d 	bl	8013780 <USBD_CtlError>
            err++;
 8013366:	7afb      	ldrb	r3, [r7, #11]
 8013368:	3301      	adds	r3, #1
 801336a:	72fb      	strb	r3, [r7, #11]
          break;
 801336c:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 801336e:	e037      	b.n	80133e0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	7c1b      	ldrb	r3, [r3, #16]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d109      	bne.n	801338c <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801337e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013380:	f107 0208 	add.w	r2, r7, #8
 8013384:	4610      	mov	r0, r2
 8013386:	4798      	blx	r3
 8013388:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801338a:	e029      	b.n	80133e0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 801338c:	6839      	ldr	r1, [r7, #0]
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f000 f9f6 	bl	8013780 <USBD_CtlError>
        err++;
 8013394:	7afb      	ldrb	r3, [r7, #11]
 8013396:	3301      	adds	r3, #1
 8013398:	72fb      	strb	r3, [r7, #11]
      break;
 801339a:	e021      	b.n	80133e0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	7c1b      	ldrb	r3, [r3, #16]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10d      	bne.n	80133c0 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133ac:	f107 0208 	add.w	r2, r7, #8
 80133b0:	4610      	mov	r0, r2
 80133b2:	4798      	blx	r3
 80133b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	3301      	adds	r3, #1
 80133ba:	2207      	movs	r2, #7
 80133bc:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80133be:	e00f      	b.n	80133e0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80133c0:	6839      	ldr	r1, [r7, #0]
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	f000 f9dc 	bl	8013780 <USBD_CtlError>
        err++;
 80133c8:	7afb      	ldrb	r3, [r7, #11]
 80133ca:	3301      	adds	r3, #1
 80133cc:	72fb      	strb	r3, [r7, #11]
      break;
 80133ce:	e007      	b.n	80133e0 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80133d0:	6839      	ldr	r1, [r7, #0]
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f000 f9d4 	bl	8013780 <USBD_CtlError>
      err++;
 80133d8:	7afb      	ldrb	r3, [r7, #11]
 80133da:	3301      	adds	r3, #1
 80133dc:	72fb      	strb	r3, [r7, #11]
      break;
 80133de:	bf00      	nop
  }

  if (err != 0U)
 80133e0:	7afb      	ldrb	r3, [r7, #11]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d11c      	bne.n	8013420 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80133e6:	893b      	ldrh	r3, [r7, #8]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d011      	beq.n	8013410 <USBD_GetDescriptor+0x2dc>
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	88db      	ldrh	r3, [r3, #6]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d00d      	beq.n	8013410 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	88da      	ldrh	r2, [r3, #6]
 80133f8:	893b      	ldrh	r3, [r7, #8]
 80133fa:	4293      	cmp	r3, r2
 80133fc:	bf28      	it	cs
 80133fe:	4613      	movcs	r3, r2
 8013400:	b29b      	uxth	r3, r3
 8013402:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013404:	893b      	ldrh	r3, [r7, #8]
 8013406:	461a      	mov	r2, r3
 8013408:	68f9      	ldr	r1, [r7, #12]
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f000 f9c9 	bl	80137a2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	88db      	ldrh	r3, [r3, #6]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d104      	bne.n	8013422 <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f000 fa02 	bl	8013822 <USBD_CtlSendStatus>
 801341e:	e000      	b.n	8013422 <USBD_GetDescriptor+0x2ee>
    return;
 8013420:	bf00      	nop
    }
  }
}
 8013422:	3710      	adds	r7, #16
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}

08013428 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b084      	sub	sp, #16
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	889b      	ldrh	r3, [r3, #4]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d130      	bne.n	801349c <USBD_SetAddress+0x74>
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	88db      	ldrh	r3, [r3, #6]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d12c      	bne.n	801349c <USBD_SetAddress+0x74>
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	885b      	ldrh	r3, [r3, #2]
 8013446:	2b7f      	cmp	r3, #127	; 0x7f
 8013448:	d828      	bhi.n	801349c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	885b      	ldrh	r3, [r3, #2]
 801344e:	b2db      	uxtb	r3, r3
 8013450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013454:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801345c:	2b03      	cmp	r3, #3
 801345e:	d104      	bne.n	801346a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8013460:	6839      	ldr	r1, [r7, #0]
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f000 f98c 	bl	8013780 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013468:	e01d      	b.n	80134a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	7bfa      	ldrb	r2, [r7, #15]
 801346e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013472:	7bfb      	ldrb	r3, [r7, #15]
 8013474:	4619      	mov	r1, r3
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f7f2 fc70 	bl	8005d5c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f000 f9d0 	bl	8013822 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013482:	7bfb      	ldrb	r3, [r7, #15]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d004      	beq.n	8013492 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2202      	movs	r2, #2
 801348c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013490:	e009      	b.n	80134a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	2201      	movs	r2, #1
 8013496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801349a:	e004      	b.n	80134a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801349c:	6839      	ldr	r1, [r7, #0]
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f000 f96e 	bl	8013780 <USBD_CtlError>
  }
}
 80134a4:	bf00      	nop
 80134a6:	bf00      	nop
 80134a8:	3710      	adds	r7, #16
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
	...

080134b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b082      	sub	sp, #8
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
 80134b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	885b      	ldrh	r3, [r3, #2]
 80134be:	b2da      	uxtb	r2, r3
 80134c0:	4b41      	ldr	r3, [pc, #260]	; (80135c8 <USBD_SetConfig+0x118>)
 80134c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80134c4:	4b40      	ldr	r3, [pc, #256]	; (80135c8 <USBD_SetConfig+0x118>)
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	2b01      	cmp	r3, #1
 80134ca:	d904      	bls.n	80134d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80134cc:	6839      	ldr	r1, [r7, #0]
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	f000 f956 	bl	8013780 <USBD_CtlError>
 80134d4:	e075      	b.n	80135c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134dc:	2b02      	cmp	r3, #2
 80134de:	d002      	beq.n	80134e6 <USBD_SetConfig+0x36>
 80134e0:	2b03      	cmp	r3, #3
 80134e2:	d023      	beq.n	801352c <USBD_SetConfig+0x7c>
 80134e4:	e062      	b.n	80135ac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80134e6:	4b38      	ldr	r3, [pc, #224]	; (80135c8 <USBD_SetConfig+0x118>)
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d01a      	beq.n	8013524 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80134ee:	4b36      	ldr	r3, [pc, #216]	; (80135c8 <USBD_SetConfig+0x118>)
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	461a      	mov	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2203      	movs	r2, #3
 80134fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013500:	4b31      	ldr	r3, [pc, #196]	; (80135c8 <USBD_SetConfig+0x118>)
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	4619      	mov	r1, r3
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f7ff f997 	bl	801283a <USBD_SetClassConfig>
 801350c:	4603      	mov	r3, r0
 801350e:	2b02      	cmp	r3, #2
 8013510:	d104      	bne.n	801351c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8013512:	6839      	ldr	r1, [r7, #0]
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f000 f933 	bl	8013780 <USBD_CtlError>
            return;
 801351a:	e052      	b.n	80135c2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f000 f980 	bl	8013822 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8013522:	e04e      	b.n	80135c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f000 f97c 	bl	8013822 <USBD_CtlSendStatus>
        break;
 801352a:	e04a      	b.n	80135c2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801352c:	4b26      	ldr	r3, [pc, #152]	; (80135c8 <USBD_SetConfig+0x118>)
 801352e:	781b      	ldrb	r3, [r3, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d112      	bne.n	801355a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2202      	movs	r2, #2
 8013538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 801353c:	4b22      	ldr	r3, [pc, #136]	; (80135c8 <USBD_SetConfig+0x118>)
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	461a      	mov	r2, r3
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8013546:	4b20      	ldr	r3, [pc, #128]	; (80135c8 <USBD_SetConfig+0x118>)
 8013548:	781b      	ldrb	r3, [r3, #0]
 801354a:	4619      	mov	r1, r3
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f7ff f993 	bl	8012878 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f000 f965 	bl	8013822 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8013558:	e033      	b.n	80135c2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801355a:	4b1b      	ldr	r3, [pc, #108]	; (80135c8 <USBD_SetConfig+0x118>)
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	461a      	mov	r2, r3
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	685b      	ldr	r3, [r3, #4]
 8013564:	429a      	cmp	r2, r3
 8013566:	d01d      	beq.n	80135a4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	685b      	ldr	r3, [r3, #4]
 801356c:	b2db      	uxtb	r3, r3
 801356e:	4619      	mov	r1, r3
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f7ff f981 	bl	8012878 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8013576:	4b14      	ldr	r3, [pc, #80]	; (80135c8 <USBD_SetConfig+0x118>)
 8013578:	781b      	ldrb	r3, [r3, #0]
 801357a:	461a      	mov	r2, r3
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013580:	4b11      	ldr	r3, [pc, #68]	; (80135c8 <USBD_SetConfig+0x118>)
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	4619      	mov	r1, r3
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f7ff f957 	bl	801283a <USBD_SetClassConfig>
 801358c:	4603      	mov	r3, r0
 801358e:	2b02      	cmp	r3, #2
 8013590:	d104      	bne.n	801359c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8013592:	6839      	ldr	r1, [r7, #0]
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f000 f8f3 	bl	8013780 <USBD_CtlError>
            return;
 801359a:	e012      	b.n	80135c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f000 f940 	bl	8013822 <USBD_CtlSendStatus>
        break;
 80135a2:	e00e      	b.n	80135c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f000 f93c 	bl	8013822 <USBD_CtlSendStatus>
        break;
 80135aa:	e00a      	b.n	80135c2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80135ac:	6839      	ldr	r1, [r7, #0]
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f000 f8e6 	bl	8013780 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80135b4:	4b04      	ldr	r3, [pc, #16]	; (80135c8 <USBD_SetConfig+0x118>)
 80135b6:	781b      	ldrb	r3, [r3, #0]
 80135b8:	4619      	mov	r1, r3
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f7ff f95c 	bl	8012878 <USBD_ClrClassConfig>
        break;
 80135c0:	bf00      	nop
    }
  }
}
 80135c2:	3708      	adds	r7, #8
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	2000098c 	.word	0x2000098c

080135cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b082      	sub	sp, #8
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
 80135d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	88db      	ldrh	r3, [r3, #6]
 80135da:	2b01      	cmp	r3, #1
 80135dc:	d004      	beq.n	80135e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80135de:	6839      	ldr	r1, [r7, #0]
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f000 f8cd 	bl	8013780 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80135e6:	e022      	b.n	801362e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135ee:	2b02      	cmp	r3, #2
 80135f0:	dc02      	bgt.n	80135f8 <USBD_GetConfig+0x2c>
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	dc03      	bgt.n	80135fe <USBD_GetConfig+0x32>
 80135f6:	e015      	b.n	8013624 <USBD_GetConfig+0x58>
 80135f8:	2b03      	cmp	r3, #3
 80135fa:	d00b      	beq.n	8013614 <USBD_GetConfig+0x48>
 80135fc:	e012      	b.n	8013624 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2200      	movs	r2, #0
 8013602:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	3308      	adds	r3, #8
 8013608:	2201      	movs	r2, #1
 801360a:	4619      	mov	r1, r3
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f000 f8c8 	bl	80137a2 <USBD_CtlSendData>
        break;
 8013612:	e00c      	b.n	801362e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	3304      	adds	r3, #4
 8013618:	2201      	movs	r2, #1
 801361a:	4619      	mov	r1, r3
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f000 f8c0 	bl	80137a2 <USBD_CtlSendData>
        break;
 8013622:	e004      	b.n	801362e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8013624:	6839      	ldr	r1, [r7, #0]
 8013626:	6878      	ldr	r0, [r7, #4]
 8013628:	f000 f8aa 	bl	8013780 <USBD_CtlError>
        break;
 801362c:	bf00      	nop
}
 801362e:	bf00      	nop
 8013630:	3708      	adds	r7, #8
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}

08013636 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013636:	b580      	push	{r7, lr}
 8013638:	b082      	sub	sp, #8
 801363a:	af00      	add	r7, sp, #0
 801363c:	6078      	str	r0, [r7, #4]
 801363e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013646:	3b01      	subs	r3, #1
 8013648:	2b02      	cmp	r3, #2
 801364a:	d81e      	bhi.n	801368a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	88db      	ldrh	r3, [r3, #6]
 8013650:	2b02      	cmp	r3, #2
 8013652:	d004      	beq.n	801365e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8013654:	6839      	ldr	r1, [r7, #0]
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f000 f892 	bl	8013780 <USBD_CtlError>
        break;
 801365c:	e01a      	b.n	8013694 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	2201      	movs	r2, #1
 8013662:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801366a:	2b00      	cmp	r3, #0
 801366c:	d005      	beq.n	801367a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	68db      	ldr	r3, [r3, #12]
 8013672:	f043 0202 	orr.w	r2, r3, #2
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	330c      	adds	r3, #12
 801367e:	2202      	movs	r2, #2
 8013680:	4619      	mov	r1, r3
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f000 f88d 	bl	80137a2 <USBD_CtlSendData>
      break;
 8013688:	e004      	b.n	8013694 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801368a:	6839      	ldr	r1, [r7, #0]
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f000 f877 	bl	8013780 <USBD_CtlError>
      break;
 8013692:	bf00      	nop
  }
}
 8013694:	bf00      	nop
 8013696:	3708      	adds	r7, #8
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}

0801369c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
 80136a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	885b      	ldrh	r3, [r3, #2]
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d106      	bne.n	80136bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2201      	movs	r2, #1
 80136b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f000 f8b3 	bl	8013822 <USBD_CtlSendStatus>
  }
}
 80136bc:	bf00      	nop
 80136be:	3708      	adds	r7, #8
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}

080136c4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b082      	sub	sp, #8
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136d4:	3b01      	subs	r3, #1
 80136d6:	2b02      	cmp	r3, #2
 80136d8:	d80b      	bhi.n	80136f2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	885b      	ldrh	r3, [r3, #2]
 80136de:	2b01      	cmp	r3, #1
 80136e0:	d10c      	bne.n	80136fc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2200      	movs	r2, #0
 80136e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f000 f899 	bl	8013822 <USBD_CtlSendStatus>
      }
      break;
 80136f0:	e004      	b.n	80136fc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80136f2:	6839      	ldr	r1, [r7, #0]
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f000 f843 	bl	8013780 <USBD_CtlError>
      break;
 80136fa:	e000      	b.n	80136fe <USBD_ClrFeature+0x3a>
      break;
 80136fc:	bf00      	nop
  }
}
 80136fe:	bf00      	nop
 8013700:	3708      	adds	r7, #8
 8013702:	46bd      	mov	sp, r7
 8013704:	bd80      	pop	{r7, pc}

08013706 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013706:	b480      	push	{r7}
 8013708:	b083      	sub	sp, #12
 801370a:	af00      	add	r7, sp, #0
 801370c:	6078      	str	r0, [r7, #4]
 801370e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	781a      	ldrb	r2, [r3, #0]
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	785a      	ldrb	r2, [r3, #1]
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	3302      	adds	r3, #2
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	b29a      	uxth	r2, r3
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	3303      	adds	r3, #3
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	b29b      	uxth	r3, r3
 8013730:	021b      	lsls	r3, r3, #8
 8013732:	b29b      	uxth	r3, r3
 8013734:	4413      	add	r3, r2
 8013736:	b29a      	uxth	r2, r3
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801373c:	683b      	ldr	r3, [r7, #0]
 801373e:	3304      	adds	r3, #4
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	b29a      	uxth	r2, r3
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	3305      	adds	r3, #5
 8013748:	781b      	ldrb	r3, [r3, #0]
 801374a:	b29b      	uxth	r3, r3
 801374c:	021b      	lsls	r3, r3, #8
 801374e:	b29b      	uxth	r3, r3
 8013750:	4413      	add	r3, r2
 8013752:	b29a      	uxth	r2, r3
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	3306      	adds	r3, #6
 801375c:	781b      	ldrb	r3, [r3, #0]
 801375e:	b29a      	uxth	r2, r3
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	3307      	adds	r3, #7
 8013764:	781b      	ldrb	r3, [r3, #0]
 8013766:	b29b      	uxth	r3, r3
 8013768:	021b      	lsls	r3, r3, #8
 801376a:	b29b      	uxth	r3, r3
 801376c:	4413      	add	r3, r2
 801376e:	b29a      	uxth	r2, r3
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	80da      	strh	r2, [r3, #6]

}
 8013774:	bf00      	nop
 8013776:	370c      	adds	r7, #12
 8013778:	46bd      	mov	sp, r7
 801377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377e:	4770      	bx	lr

08013780 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801378a:	2180      	movs	r1, #128	; 0x80
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f7f2 fa93 	bl	8005cb8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8013792:	2100      	movs	r1, #0
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7f2 fa8f 	bl	8005cb8 <USBD_LL_StallEP>
}
 801379a:	bf00      	nop
 801379c:	3708      	adds	r7, #8
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}

080137a2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80137a2:	b580      	push	{r7, lr}
 80137a4:	b084      	sub	sp, #16
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	60f8      	str	r0, [r7, #12]
 80137aa:	60b9      	str	r1, [r7, #8]
 80137ac:	4613      	mov	r3, r2
 80137ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	2202      	movs	r2, #2
 80137b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80137b8:	88fa      	ldrh	r2, [r7, #6]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80137be:	88fa      	ldrh	r2, [r7, #6]
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80137c4:	88fb      	ldrh	r3, [r7, #6]
 80137c6:	68ba      	ldr	r2, [r7, #8]
 80137c8:	2100      	movs	r1, #0
 80137ca:	68f8      	ldr	r0, [r7, #12]
 80137cc:	f7f2 fad9 	bl	8005d82 <USBD_LL_Transmit>

  return USBD_OK;
 80137d0:	2300      	movs	r3, #0
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	3710      	adds	r7, #16
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd80      	pop	{r7, pc}

080137da <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80137da:	b580      	push	{r7, lr}
 80137dc:	b084      	sub	sp, #16
 80137de:	af00      	add	r7, sp, #0
 80137e0:	60f8      	str	r0, [r7, #12]
 80137e2:	60b9      	str	r1, [r7, #8]
 80137e4:	4613      	mov	r3, r2
 80137e6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80137e8:	88fb      	ldrh	r3, [r7, #6]
 80137ea:	68ba      	ldr	r2, [r7, #8]
 80137ec:	2100      	movs	r1, #0
 80137ee:	68f8      	ldr	r0, [r7, #12]
 80137f0:	f7f2 fac7 	bl	8005d82 <USBD_LL_Transmit>

  return USBD_OK;
 80137f4:	2300      	movs	r3, #0
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	3710      	adds	r7, #16
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}

080137fe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80137fe:	b580      	push	{r7, lr}
 8013800:	b084      	sub	sp, #16
 8013802:	af00      	add	r7, sp, #0
 8013804:	60f8      	str	r0, [r7, #12]
 8013806:	60b9      	str	r1, [r7, #8]
 8013808:	4613      	mov	r3, r2
 801380a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801380c:	88fb      	ldrh	r3, [r7, #6]
 801380e:	68ba      	ldr	r2, [r7, #8]
 8013810:	2100      	movs	r1, #0
 8013812:	68f8      	ldr	r0, [r7, #12]
 8013814:	f7f2 facc 	bl	8005db0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013818:	2300      	movs	r3, #0
}
 801381a:	4618      	mov	r0, r3
 801381c:	3710      	adds	r7, #16
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}

08013822 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013822:	b580      	push	{r7, lr}
 8013824:	b082      	sub	sp, #8
 8013826:	af00      	add	r7, sp, #0
 8013828:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2204      	movs	r2, #4
 801382e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013832:	2300      	movs	r3, #0
 8013834:	2200      	movs	r2, #0
 8013836:	2100      	movs	r1, #0
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f7f2 faa2 	bl	8005d82 <USBD_LL_Transmit>

  return USBD_OK;
 801383e:	2300      	movs	r3, #0
}
 8013840:	4618      	mov	r0, r3
 8013842:	3708      	adds	r7, #8
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}

08013848 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b082      	sub	sp, #8
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	2205      	movs	r2, #5
 8013854:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013858:	2300      	movs	r3, #0
 801385a:	2200      	movs	r2, #0
 801385c:	2100      	movs	r1, #0
 801385e:	6878      	ldr	r0, [r7, #4]
 8013860:	f7f2 faa6 	bl	8005db0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013864:	2300      	movs	r3, #0
}
 8013866:	4618      	mov	r0, r3
 8013868:	3708      	adds	r7, #8
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
	...

08013870 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	4603      	mov	r3, r0
 8013878:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801387a:	79fb      	ldrb	r3, [r7, #7]
 801387c:	4a08      	ldr	r2, [pc, #32]	; (80138a0 <disk_status+0x30>)
 801387e:	009b      	lsls	r3, r3, #2
 8013880:	4413      	add	r3, r2
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	79fa      	ldrb	r2, [r7, #7]
 8013888:	4905      	ldr	r1, [pc, #20]	; (80138a0 <disk_status+0x30>)
 801388a:	440a      	add	r2, r1
 801388c:	7a12      	ldrb	r2, [r2, #8]
 801388e:	4610      	mov	r0, r2
 8013890:	4798      	blx	r3
 8013892:	4603      	mov	r3, r0
 8013894:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013896:	7bfb      	ldrb	r3, [r7, #15]
}
 8013898:	4618      	mov	r0, r3
 801389a:	3710      	adds	r7, #16
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}
 80138a0:	20000cd8 	.word	0x20000cd8

080138a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b084      	sub	sp, #16
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	4603      	mov	r3, r0
 80138ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80138ae:	2300      	movs	r3, #0
 80138b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80138b2:	79fb      	ldrb	r3, [r7, #7]
 80138b4:	4a0d      	ldr	r2, [pc, #52]	; (80138ec <disk_initialize+0x48>)
 80138b6:	5cd3      	ldrb	r3, [r2, r3]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d111      	bne.n	80138e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80138bc:	79fb      	ldrb	r3, [r7, #7]
 80138be:	4a0b      	ldr	r2, [pc, #44]	; (80138ec <disk_initialize+0x48>)
 80138c0:	2101      	movs	r1, #1
 80138c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80138c4:	79fb      	ldrb	r3, [r7, #7]
 80138c6:	4a09      	ldr	r2, [pc, #36]	; (80138ec <disk_initialize+0x48>)
 80138c8:	009b      	lsls	r3, r3, #2
 80138ca:	4413      	add	r3, r2
 80138cc:	685b      	ldr	r3, [r3, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	79fa      	ldrb	r2, [r7, #7]
 80138d2:	4906      	ldr	r1, [pc, #24]	; (80138ec <disk_initialize+0x48>)
 80138d4:	440a      	add	r2, r1
 80138d6:	7a12      	ldrb	r2, [r2, #8]
 80138d8:	4610      	mov	r0, r2
 80138da:	4798      	blx	r3
 80138dc:	4603      	mov	r3, r0
 80138de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80138e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80138e2:	4618      	mov	r0, r3
 80138e4:	3710      	adds	r7, #16
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}
 80138ea:	bf00      	nop
 80138ec:	20000cd8 	.word	0x20000cd8

080138f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80138f0:	b590      	push	{r4, r7, lr}
 80138f2:	b087      	sub	sp, #28
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60b9      	str	r1, [r7, #8]
 80138f8:	607a      	str	r2, [r7, #4]
 80138fa:	603b      	str	r3, [r7, #0]
 80138fc:	4603      	mov	r3, r0
 80138fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013900:	7bfb      	ldrb	r3, [r7, #15]
 8013902:	4a0a      	ldr	r2, [pc, #40]	; (801392c <disk_read+0x3c>)
 8013904:	009b      	lsls	r3, r3, #2
 8013906:	4413      	add	r3, r2
 8013908:	685b      	ldr	r3, [r3, #4]
 801390a:	689c      	ldr	r4, [r3, #8]
 801390c:	7bfb      	ldrb	r3, [r7, #15]
 801390e:	4a07      	ldr	r2, [pc, #28]	; (801392c <disk_read+0x3c>)
 8013910:	4413      	add	r3, r2
 8013912:	7a18      	ldrb	r0, [r3, #8]
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	687a      	ldr	r2, [r7, #4]
 8013918:	68b9      	ldr	r1, [r7, #8]
 801391a:	47a0      	blx	r4
 801391c:	4603      	mov	r3, r0
 801391e:	75fb      	strb	r3, [r7, #23]
  return res;
 8013920:	7dfb      	ldrb	r3, [r7, #23]
}
 8013922:	4618      	mov	r0, r3
 8013924:	371c      	adds	r7, #28
 8013926:	46bd      	mov	sp, r7
 8013928:	bd90      	pop	{r4, r7, pc}
 801392a:	bf00      	nop
 801392c:	20000cd8 	.word	0x20000cd8

08013930 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013930:	b590      	push	{r4, r7, lr}
 8013932:	b087      	sub	sp, #28
 8013934:	af00      	add	r7, sp, #0
 8013936:	60b9      	str	r1, [r7, #8]
 8013938:	607a      	str	r2, [r7, #4]
 801393a:	603b      	str	r3, [r7, #0]
 801393c:	4603      	mov	r3, r0
 801393e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013940:	7bfb      	ldrb	r3, [r7, #15]
 8013942:	4a0a      	ldr	r2, [pc, #40]	; (801396c <disk_write+0x3c>)
 8013944:	009b      	lsls	r3, r3, #2
 8013946:	4413      	add	r3, r2
 8013948:	685b      	ldr	r3, [r3, #4]
 801394a:	68dc      	ldr	r4, [r3, #12]
 801394c:	7bfb      	ldrb	r3, [r7, #15]
 801394e:	4a07      	ldr	r2, [pc, #28]	; (801396c <disk_write+0x3c>)
 8013950:	4413      	add	r3, r2
 8013952:	7a18      	ldrb	r0, [r3, #8]
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	687a      	ldr	r2, [r7, #4]
 8013958:	68b9      	ldr	r1, [r7, #8]
 801395a:	47a0      	blx	r4
 801395c:	4603      	mov	r3, r0
 801395e:	75fb      	strb	r3, [r7, #23]
  return res;
 8013960:	7dfb      	ldrb	r3, [r7, #23]
}
 8013962:	4618      	mov	r0, r3
 8013964:	371c      	adds	r7, #28
 8013966:	46bd      	mov	sp, r7
 8013968:	bd90      	pop	{r4, r7, pc}
 801396a:	bf00      	nop
 801396c:	20000cd8 	.word	0x20000cd8

08013970 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b084      	sub	sp, #16
 8013974:	af00      	add	r7, sp, #0
 8013976:	4603      	mov	r3, r0
 8013978:	603a      	str	r2, [r7, #0]
 801397a:	71fb      	strb	r3, [r7, #7]
 801397c:	460b      	mov	r3, r1
 801397e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013980:	79fb      	ldrb	r3, [r7, #7]
 8013982:	4a09      	ldr	r2, [pc, #36]	; (80139a8 <disk_ioctl+0x38>)
 8013984:	009b      	lsls	r3, r3, #2
 8013986:	4413      	add	r3, r2
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	691b      	ldr	r3, [r3, #16]
 801398c:	79fa      	ldrb	r2, [r7, #7]
 801398e:	4906      	ldr	r1, [pc, #24]	; (80139a8 <disk_ioctl+0x38>)
 8013990:	440a      	add	r2, r1
 8013992:	7a10      	ldrb	r0, [r2, #8]
 8013994:	79b9      	ldrb	r1, [r7, #6]
 8013996:	683a      	ldr	r2, [r7, #0]
 8013998:	4798      	blx	r3
 801399a:	4603      	mov	r3, r0
 801399c:	73fb      	strb	r3, [r7, #15]
  return res;
 801399e:	7bfb      	ldrb	r3, [r7, #15]
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	3710      	adds	r7, #16
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}
 80139a8:	20000cd8 	.word	0x20000cd8

080139ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 80139ac:	b480      	push	{r7}
 80139ae:	af00      	add	r7, sp, #0
  return 0;
 80139b0:	2300      	movs	r3, #0
}
 80139b2:	4618      	mov	r0, r3
 80139b4:	46bd      	mov	sp, r7
 80139b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ba:	4770      	bx	lr

080139bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80139bc:	b480      	push	{r7}
 80139be:	b085      	sub	sp, #20
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	3301      	adds	r3, #1
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80139cc:	89fb      	ldrh	r3, [r7, #14]
 80139ce:	021b      	lsls	r3, r3, #8
 80139d0:	b21a      	sxth	r2, r3
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	b21b      	sxth	r3, r3
 80139d8:	4313      	orrs	r3, r2
 80139da:	b21b      	sxth	r3, r3
 80139dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80139de:	89fb      	ldrh	r3, [r7, #14]
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3714      	adds	r7, #20
 80139e4:	46bd      	mov	sp, r7
 80139e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ea:	4770      	bx	lr

080139ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80139ec:	b480      	push	{r7}
 80139ee:	b085      	sub	sp, #20
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	3303      	adds	r3, #3
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	021b      	lsls	r3, r3, #8
 8013a00:	687a      	ldr	r2, [r7, #4]
 8013a02:	3202      	adds	r2, #2
 8013a04:	7812      	ldrb	r2, [r2, #0]
 8013a06:	4313      	orrs	r3, r2
 8013a08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	021b      	lsls	r3, r3, #8
 8013a0e:	687a      	ldr	r2, [r7, #4]
 8013a10:	3201      	adds	r2, #1
 8013a12:	7812      	ldrb	r2, [r2, #0]
 8013a14:	4313      	orrs	r3, r2
 8013a16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	021b      	lsls	r3, r3, #8
 8013a1c:	687a      	ldr	r2, [r7, #4]
 8013a1e:	7812      	ldrb	r2, [r2, #0]
 8013a20:	4313      	orrs	r3, r2
 8013a22:	60fb      	str	r3, [r7, #12]
	return rv;
 8013a24:	68fb      	ldr	r3, [r7, #12]
}
 8013a26:	4618      	mov	r0, r3
 8013a28:	3714      	adds	r7, #20
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a30:	4770      	bx	lr

08013a32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8013a32:	b480      	push	{r7}
 8013a34:	b083      	sub	sp, #12
 8013a36:	af00      	add	r7, sp, #0
 8013a38:	6078      	str	r0, [r7, #4]
 8013a3a:	460b      	mov	r3, r1
 8013a3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	1c5a      	adds	r2, r3, #1
 8013a42:	607a      	str	r2, [r7, #4]
 8013a44:	887a      	ldrh	r2, [r7, #2]
 8013a46:	b2d2      	uxtb	r2, r2
 8013a48:	701a      	strb	r2, [r3, #0]
 8013a4a:	887b      	ldrh	r3, [r7, #2]
 8013a4c:	0a1b      	lsrs	r3, r3, #8
 8013a4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	1c5a      	adds	r2, r3, #1
 8013a54:	607a      	str	r2, [r7, #4]
 8013a56:	887a      	ldrh	r2, [r7, #2]
 8013a58:	b2d2      	uxtb	r2, r2
 8013a5a:	701a      	strb	r2, [r3, #0]
}
 8013a5c:	bf00      	nop
 8013a5e:	370c      	adds	r7, #12
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr

08013a68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013a68:	b480      	push	{r7}
 8013a6a:	b083      	sub	sp, #12
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	1c5a      	adds	r2, r3, #1
 8013a76:	607a      	str	r2, [r7, #4]
 8013a78:	683a      	ldr	r2, [r7, #0]
 8013a7a:	b2d2      	uxtb	r2, r2
 8013a7c:	701a      	strb	r2, [r3, #0]
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	0a1b      	lsrs	r3, r3, #8
 8013a82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	1c5a      	adds	r2, r3, #1
 8013a88:	607a      	str	r2, [r7, #4]
 8013a8a:	683a      	ldr	r2, [r7, #0]
 8013a8c:	b2d2      	uxtb	r2, r2
 8013a8e:	701a      	strb	r2, [r3, #0]
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	0a1b      	lsrs	r3, r3, #8
 8013a94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	1c5a      	adds	r2, r3, #1
 8013a9a:	607a      	str	r2, [r7, #4]
 8013a9c:	683a      	ldr	r2, [r7, #0]
 8013a9e:	b2d2      	uxtb	r2, r2
 8013aa0:	701a      	strb	r2, [r3, #0]
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	0a1b      	lsrs	r3, r3, #8
 8013aa6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	1c5a      	adds	r2, r3, #1
 8013aac:	607a      	str	r2, [r7, #4]
 8013aae:	683a      	ldr	r2, [r7, #0]
 8013ab0:	b2d2      	uxtb	r2, r2
 8013ab2:	701a      	strb	r2, [r3, #0]
}
 8013ab4:	bf00      	nop
 8013ab6:	370c      	adds	r7, #12
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abe:	4770      	bx	lr

08013ac0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013ac0:	b480      	push	{r7}
 8013ac2:	b087      	sub	sp, #28
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	60f8      	str	r0, [r7, #12]
 8013ac8:	60b9      	str	r1, [r7, #8]
 8013aca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d00d      	beq.n	8013af6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013ada:	693a      	ldr	r2, [r7, #16]
 8013adc:	1c53      	adds	r3, r2, #1
 8013ade:	613b      	str	r3, [r7, #16]
 8013ae0:	697b      	ldr	r3, [r7, #20]
 8013ae2:	1c59      	adds	r1, r3, #1
 8013ae4:	6179      	str	r1, [r7, #20]
 8013ae6:	7812      	ldrb	r2, [r2, #0]
 8013ae8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	3b01      	subs	r3, #1
 8013aee:	607b      	str	r3, [r7, #4]
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d1f1      	bne.n	8013ada <mem_cpy+0x1a>
	}
}
 8013af6:	bf00      	nop
 8013af8:	371c      	adds	r7, #28
 8013afa:	46bd      	mov	sp, r7
 8013afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b00:	4770      	bx	lr

08013b02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013b02:	b480      	push	{r7}
 8013b04:	b087      	sub	sp, #28
 8013b06:	af00      	add	r7, sp, #0
 8013b08:	60f8      	str	r0, [r7, #12]
 8013b0a:	60b9      	str	r1, [r7, #8]
 8013b0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	1c5a      	adds	r2, r3, #1
 8013b16:	617a      	str	r2, [r7, #20]
 8013b18:	68ba      	ldr	r2, [r7, #8]
 8013b1a:	b2d2      	uxtb	r2, r2
 8013b1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	3b01      	subs	r3, #1
 8013b22:	607b      	str	r3, [r7, #4]
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d1f3      	bne.n	8013b12 <mem_set+0x10>
}
 8013b2a:	bf00      	nop
 8013b2c:	bf00      	nop
 8013b2e:	371c      	adds	r7, #28
 8013b30:	46bd      	mov	sp, r7
 8013b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b36:	4770      	bx	lr

08013b38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8013b38:	b480      	push	{r7}
 8013b3a:	b089      	sub	sp, #36	; 0x24
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	60f8      	str	r0, [r7, #12]
 8013b40:	60b9      	str	r1, [r7, #8]
 8013b42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	61fb      	str	r3, [r7, #28]
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8013b50:	69fb      	ldr	r3, [r7, #28]
 8013b52:	1c5a      	adds	r2, r3, #1
 8013b54:	61fa      	str	r2, [r7, #28]
 8013b56:	781b      	ldrb	r3, [r3, #0]
 8013b58:	4619      	mov	r1, r3
 8013b5a:	69bb      	ldr	r3, [r7, #24]
 8013b5c:	1c5a      	adds	r2, r3, #1
 8013b5e:	61ba      	str	r2, [r7, #24]
 8013b60:	781b      	ldrb	r3, [r3, #0]
 8013b62:	1acb      	subs	r3, r1, r3
 8013b64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	3b01      	subs	r3, #1
 8013b6a:	607b      	str	r3, [r7, #4]
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d002      	beq.n	8013b78 <mem_cmp+0x40>
 8013b72:	697b      	ldr	r3, [r7, #20]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d0eb      	beq.n	8013b50 <mem_cmp+0x18>

	return r;
 8013b78:	697b      	ldr	r3, [r7, #20]
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3724      	adds	r7, #36	; 0x24
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr

08013b86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8013b86:	b480      	push	{r7}
 8013b88:	b083      	sub	sp, #12
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
 8013b8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8013b90:	e002      	b.n	8013b98 <chk_chr+0x12>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	3301      	adds	r3, #1
 8013b96:	607b      	str	r3, [r7, #4]
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	781b      	ldrb	r3, [r3, #0]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d005      	beq.n	8013bac <chk_chr+0x26>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	781b      	ldrb	r3, [r3, #0]
 8013ba4:	461a      	mov	r2, r3
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	4293      	cmp	r3, r2
 8013baa:	d1f2      	bne.n	8013b92 <chk_chr+0xc>
	return *str;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	781b      	ldrb	r3, [r3, #0]
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	370c      	adds	r7, #12
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr

08013bbc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013bbc:	b480      	push	{r7}
 8013bbe:	b085      	sub	sp, #20
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	60bb      	str	r3, [r7, #8]
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	60fb      	str	r3, [r7, #12]
 8013bce:	e029      	b.n	8013c24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013bd0:	4a27      	ldr	r2, [pc, #156]	; (8013c70 <chk_lock+0xb4>)
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	011b      	lsls	r3, r3, #4
 8013bd6:	4413      	add	r3, r2
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d01d      	beq.n	8013c1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013bde:	4a24      	ldr	r2, [pc, #144]	; (8013c70 <chk_lock+0xb4>)
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	011b      	lsls	r3, r3, #4
 8013be4:	4413      	add	r3, r2
 8013be6:	681a      	ldr	r2, [r3, #0]
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d116      	bne.n	8013c1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013bf0:	4a1f      	ldr	r2, [pc, #124]	; (8013c70 <chk_lock+0xb4>)
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	011b      	lsls	r3, r3, #4
 8013bf6:	4413      	add	r3, r2
 8013bf8:	3304      	adds	r3, #4
 8013bfa:	681a      	ldr	r2, [r3, #0]
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d10c      	bne.n	8013c1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013c04:	4a1a      	ldr	r2, [pc, #104]	; (8013c70 <chk_lock+0xb4>)
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	011b      	lsls	r3, r3, #4
 8013c0a:	4413      	add	r3, r2
 8013c0c:	3308      	adds	r3, #8
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d102      	bne.n	8013c1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013c18:	e007      	b.n	8013c2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	3301      	adds	r3, #1
 8013c22:	60fb      	str	r3, [r7, #12]
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	2b13      	cmp	r3, #19
 8013c28:	d9d2      	bls.n	8013bd0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	2b14      	cmp	r3, #20
 8013c2e:	d109      	bne.n	8013c44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d102      	bne.n	8013c3c <chk_lock+0x80>
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	2b02      	cmp	r3, #2
 8013c3a:	d101      	bne.n	8013c40 <chk_lock+0x84>
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	e010      	b.n	8013c62 <chk_lock+0xa6>
 8013c40:	2312      	movs	r3, #18
 8013c42:	e00e      	b.n	8013c62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d108      	bne.n	8013c5c <chk_lock+0xa0>
 8013c4a:	4a09      	ldr	r2, [pc, #36]	; (8013c70 <chk_lock+0xb4>)
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	011b      	lsls	r3, r3, #4
 8013c50:	4413      	add	r3, r2
 8013c52:	330c      	adds	r3, #12
 8013c54:	881b      	ldrh	r3, [r3, #0]
 8013c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c5a:	d101      	bne.n	8013c60 <chk_lock+0xa4>
 8013c5c:	2310      	movs	r3, #16
 8013c5e:	e000      	b.n	8013c62 <chk_lock+0xa6>
 8013c60:	2300      	movs	r3, #0
}
 8013c62:	4618      	mov	r0, r3
 8013c64:	3714      	adds	r7, #20
 8013c66:	46bd      	mov	sp, r7
 8013c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop
 8013c70:	20000998 	.word	0x20000998

08013c74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013c74:	b480      	push	{r7}
 8013c76:	b083      	sub	sp, #12
 8013c78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	607b      	str	r3, [r7, #4]
 8013c7e:	e002      	b.n	8013c86 <enq_lock+0x12>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	3301      	adds	r3, #1
 8013c84:	607b      	str	r3, [r7, #4]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2b13      	cmp	r3, #19
 8013c8a:	d806      	bhi.n	8013c9a <enq_lock+0x26>
 8013c8c:	4a09      	ldr	r2, [pc, #36]	; (8013cb4 <enq_lock+0x40>)
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	011b      	lsls	r3, r3, #4
 8013c92:	4413      	add	r3, r2
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d1f2      	bne.n	8013c80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	2b14      	cmp	r3, #20
 8013c9e:	bf14      	ite	ne
 8013ca0:	2301      	movne	r3, #1
 8013ca2:	2300      	moveq	r3, #0
 8013ca4:	b2db      	uxtb	r3, r3
}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	370c      	adds	r7, #12
 8013caa:	46bd      	mov	sp, r7
 8013cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb0:	4770      	bx	lr
 8013cb2:	bf00      	nop
 8013cb4:	20000998 	.word	0x20000998

08013cb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b085      	sub	sp, #20
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	60fb      	str	r3, [r7, #12]
 8013cc6:	e01f      	b.n	8013d08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013cc8:	4a41      	ldr	r2, [pc, #260]	; (8013dd0 <inc_lock+0x118>)
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	011b      	lsls	r3, r3, #4
 8013cce:	4413      	add	r3, r2
 8013cd0:	681a      	ldr	r2, [r3, #0]
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d113      	bne.n	8013d02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8013cda:	4a3d      	ldr	r2, [pc, #244]	; (8013dd0 <inc_lock+0x118>)
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	011b      	lsls	r3, r3, #4
 8013ce0:	4413      	add	r3, r2
 8013ce2:	3304      	adds	r3, #4
 8013ce4:	681a      	ldr	r2, [r3, #0]
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8013cea:	429a      	cmp	r2, r3
 8013cec:	d109      	bne.n	8013d02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013cee:	4a38      	ldr	r2, [pc, #224]	; (8013dd0 <inc_lock+0x118>)
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	011b      	lsls	r3, r3, #4
 8013cf4:	4413      	add	r3, r2
 8013cf6:	3308      	adds	r3, #8
 8013cf8:	681a      	ldr	r2, [r3, #0]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d006      	beq.n	8013d10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	3301      	adds	r3, #1
 8013d06:	60fb      	str	r3, [r7, #12]
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	2b13      	cmp	r3, #19
 8013d0c:	d9dc      	bls.n	8013cc8 <inc_lock+0x10>
 8013d0e:	e000      	b.n	8013d12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013d10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	2b14      	cmp	r3, #20
 8013d16:	d132      	bne.n	8013d7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	60fb      	str	r3, [r7, #12]
 8013d1c:	e002      	b.n	8013d24 <inc_lock+0x6c>
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	3301      	adds	r3, #1
 8013d22:	60fb      	str	r3, [r7, #12]
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	2b13      	cmp	r3, #19
 8013d28:	d806      	bhi.n	8013d38 <inc_lock+0x80>
 8013d2a:	4a29      	ldr	r2, [pc, #164]	; (8013dd0 <inc_lock+0x118>)
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	011b      	lsls	r3, r3, #4
 8013d30:	4413      	add	r3, r2
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d1f2      	bne.n	8013d1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	2b14      	cmp	r3, #20
 8013d3c:	d101      	bne.n	8013d42 <inc_lock+0x8a>
 8013d3e:	2300      	movs	r3, #0
 8013d40:	e040      	b.n	8013dc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681a      	ldr	r2, [r3, #0]
 8013d46:	4922      	ldr	r1, [pc, #136]	; (8013dd0 <inc_lock+0x118>)
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	011b      	lsls	r3, r3, #4
 8013d4c:	440b      	add	r3, r1
 8013d4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	689a      	ldr	r2, [r3, #8]
 8013d54:	491e      	ldr	r1, [pc, #120]	; (8013dd0 <inc_lock+0x118>)
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	011b      	lsls	r3, r3, #4
 8013d5a:	440b      	add	r3, r1
 8013d5c:	3304      	adds	r3, #4
 8013d5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	695a      	ldr	r2, [r3, #20]
 8013d64:	491a      	ldr	r1, [pc, #104]	; (8013dd0 <inc_lock+0x118>)
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	011b      	lsls	r3, r3, #4
 8013d6a:	440b      	add	r3, r1
 8013d6c:	3308      	adds	r3, #8
 8013d6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013d70:	4a17      	ldr	r2, [pc, #92]	; (8013dd0 <inc_lock+0x118>)
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	011b      	lsls	r3, r3, #4
 8013d76:	4413      	add	r3, r2
 8013d78:	330c      	adds	r3, #12
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d009      	beq.n	8013d98 <inc_lock+0xe0>
 8013d84:	4a12      	ldr	r2, [pc, #72]	; (8013dd0 <inc_lock+0x118>)
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	011b      	lsls	r3, r3, #4
 8013d8a:	4413      	add	r3, r2
 8013d8c:	330c      	adds	r3, #12
 8013d8e:	881b      	ldrh	r3, [r3, #0]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d001      	beq.n	8013d98 <inc_lock+0xe0>
 8013d94:	2300      	movs	r3, #0
 8013d96:	e015      	b.n	8013dc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d108      	bne.n	8013db0 <inc_lock+0xf8>
 8013d9e:	4a0c      	ldr	r2, [pc, #48]	; (8013dd0 <inc_lock+0x118>)
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	011b      	lsls	r3, r3, #4
 8013da4:	4413      	add	r3, r2
 8013da6:	330c      	adds	r3, #12
 8013da8:	881b      	ldrh	r3, [r3, #0]
 8013daa:	3301      	adds	r3, #1
 8013dac:	b29a      	uxth	r2, r3
 8013dae:	e001      	b.n	8013db4 <inc_lock+0xfc>
 8013db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013db4:	4906      	ldr	r1, [pc, #24]	; (8013dd0 <inc_lock+0x118>)
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	011b      	lsls	r3, r3, #4
 8013dba:	440b      	add	r3, r1
 8013dbc:	330c      	adds	r3, #12
 8013dbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	3301      	adds	r3, #1
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3714      	adds	r7, #20
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr
 8013dd0:	20000998 	.word	0x20000998

08013dd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013dd4:	b480      	push	{r7}
 8013dd6:	b085      	sub	sp, #20
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	3b01      	subs	r3, #1
 8013de0:	607b      	str	r3, [r7, #4]
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2b13      	cmp	r3, #19
 8013de6:	d825      	bhi.n	8013e34 <dec_lock+0x60>
		n = Files[i].ctr;
 8013de8:	4a17      	ldr	r2, [pc, #92]	; (8013e48 <dec_lock+0x74>)
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	011b      	lsls	r3, r3, #4
 8013dee:	4413      	add	r3, r2
 8013df0:	330c      	adds	r3, #12
 8013df2:	881b      	ldrh	r3, [r3, #0]
 8013df4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8013df6:	89fb      	ldrh	r3, [r7, #14]
 8013df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013dfc:	d101      	bne.n	8013e02 <dec_lock+0x2e>
 8013dfe:	2300      	movs	r3, #0
 8013e00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013e02:	89fb      	ldrh	r3, [r7, #14]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d002      	beq.n	8013e0e <dec_lock+0x3a>
 8013e08:	89fb      	ldrh	r3, [r7, #14]
 8013e0a:	3b01      	subs	r3, #1
 8013e0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013e0e:	4a0e      	ldr	r2, [pc, #56]	; (8013e48 <dec_lock+0x74>)
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	011b      	lsls	r3, r3, #4
 8013e14:	4413      	add	r3, r2
 8013e16:	330c      	adds	r3, #12
 8013e18:	89fa      	ldrh	r2, [r7, #14]
 8013e1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013e1c:	89fb      	ldrh	r3, [r7, #14]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d105      	bne.n	8013e2e <dec_lock+0x5a>
 8013e22:	4a09      	ldr	r2, [pc, #36]	; (8013e48 <dec_lock+0x74>)
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	011b      	lsls	r3, r3, #4
 8013e28:	4413      	add	r3, r2
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	737b      	strb	r3, [r7, #13]
 8013e32:	e001      	b.n	8013e38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013e34:	2302      	movs	r3, #2
 8013e36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013e38:	7b7b      	ldrb	r3, [r7, #13]
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3714      	adds	r7, #20
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr
 8013e46:	bf00      	nop
 8013e48:	20000998 	.word	0x20000998

08013e4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	b085      	sub	sp, #20
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013e54:	2300      	movs	r3, #0
 8013e56:	60fb      	str	r3, [r7, #12]
 8013e58:	e010      	b.n	8013e7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013e5a:	4a0d      	ldr	r2, [pc, #52]	; (8013e90 <clear_lock+0x44>)
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	011b      	lsls	r3, r3, #4
 8013e60:	4413      	add	r3, r2
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	687a      	ldr	r2, [r7, #4]
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d105      	bne.n	8013e76 <clear_lock+0x2a>
 8013e6a:	4a09      	ldr	r2, [pc, #36]	; (8013e90 <clear_lock+0x44>)
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	011b      	lsls	r3, r3, #4
 8013e70:	4413      	add	r3, r2
 8013e72:	2200      	movs	r2, #0
 8013e74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	3301      	adds	r3, #1
 8013e7a:	60fb      	str	r3, [r7, #12]
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	2b13      	cmp	r3, #19
 8013e80:	d9eb      	bls.n	8013e5a <clear_lock+0xe>
	}
}
 8013e82:	bf00      	nop
 8013e84:	bf00      	nop
 8013e86:	3714      	adds	r7, #20
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8e:	4770      	bx	lr
 8013e90:	20000998 	.word	0x20000998

08013e94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b086      	sub	sp, #24
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	78db      	ldrb	r3, [r3, #3]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d034      	beq.n	8013f12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	7858      	ldrb	r0, [r3, #1]
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013eb8:	2301      	movs	r3, #1
 8013eba:	697a      	ldr	r2, [r7, #20]
 8013ebc:	f7ff fd38 	bl	8013930 <disk_write>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d002      	beq.n	8013ecc <sync_window+0x38>
			res = FR_DISK_ERR;
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	73fb      	strb	r3, [r7, #15]
 8013eca:	e022      	b.n	8013f12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ed6:	697a      	ldr	r2, [r7, #20]
 8013ed8:	1ad2      	subs	r2, r2, r3
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	69db      	ldr	r3, [r3, #28]
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d217      	bcs.n	8013f12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	789b      	ldrb	r3, [r3, #2]
 8013ee6:	613b      	str	r3, [r7, #16]
 8013ee8:	e010      	b.n	8013f0c <sync_window+0x78>
					wsect += fs->fsize;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	69db      	ldr	r3, [r3, #28]
 8013eee:	697a      	ldr	r2, [r7, #20]
 8013ef0:	4413      	add	r3, r2
 8013ef2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	7858      	ldrb	r0, [r3, #1]
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013efe:	2301      	movs	r3, #1
 8013f00:	697a      	ldr	r2, [r7, #20]
 8013f02:	f7ff fd15 	bl	8013930 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	3b01      	subs	r3, #1
 8013f0a:	613b      	str	r3, [r7, #16]
 8013f0c:	693b      	ldr	r3, [r7, #16]
 8013f0e:	2b01      	cmp	r3, #1
 8013f10:	d8eb      	bhi.n	8013eea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f14:	4618      	mov	r0, r3
 8013f16:	3718      	adds	r7, #24
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}

08013f1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b084      	sub	sp, #16
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013f26:	2300      	movs	r3, #0
 8013f28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f2e:	683a      	ldr	r2, [r7, #0]
 8013f30:	429a      	cmp	r2, r3
 8013f32:	d01b      	beq.n	8013f6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	f7ff ffad 	bl	8013e94 <sync_window>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013f3e:	7bfb      	ldrb	r3, [r7, #15]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d113      	bne.n	8013f6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	7858      	ldrb	r0, [r3, #1]
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013f4e:	2301      	movs	r3, #1
 8013f50:	683a      	ldr	r2, [r7, #0]
 8013f52:	f7ff fccd 	bl	80138f0 <disk_read>
 8013f56:	4603      	mov	r3, r0
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d004      	beq.n	8013f66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8013f60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013f62:	2301      	movs	r3, #1
 8013f64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	683a      	ldr	r2, [r7, #0]
 8013f6a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8013f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	3710      	adds	r7, #16
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}
	...

08013f78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b084      	sub	sp, #16
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013f80:	6878      	ldr	r0, [r7, #4]
 8013f82:	f7ff ff87 	bl	8013e94 <sync_window>
 8013f86:	4603      	mov	r3, r0
 8013f88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013f8a:	7bfb      	ldrb	r3, [r7, #15]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d158      	bne.n	8014042 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	2b03      	cmp	r3, #3
 8013f96:	d148      	bne.n	801402a <sync_fs+0xb2>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	791b      	ldrb	r3, [r3, #4]
 8013f9c:	2b01      	cmp	r3, #1
 8013f9e:	d144      	bne.n	801402a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	3334      	adds	r3, #52	; 0x34
 8013fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013fa8:	2100      	movs	r1, #0
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7ff fda9 	bl	8013b02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	3334      	adds	r3, #52	; 0x34
 8013fb4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013fb8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7ff fd38 	bl	8013a32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	3334      	adds	r3, #52	; 0x34
 8013fc6:	4921      	ldr	r1, [pc, #132]	; (801404c <sync_fs+0xd4>)
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7ff fd4d 	bl	8013a68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	3334      	adds	r3, #52	; 0x34
 8013fd2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013fd6:	491e      	ldr	r1, [pc, #120]	; (8014050 <sync_fs+0xd8>)
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7ff fd45 	bl	8013a68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	3334      	adds	r3, #52	; 0x34
 8013fe2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	695b      	ldr	r3, [r3, #20]
 8013fea:	4619      	mov	r1, r3
 8013fec:	4610      	mov	r0, r2
 8013fee:	f7ff fd3b 	bl	8013a68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	3334      	adds	r3, #52	; 0x34
 8013ff6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	691b      	ldr	r3, [r3, #16]
 8013ffe:	4619      	mov	r1, r3
 8014000:	4610      	mov	r0, r2
 8014002:	f7ff fd31 	bl	8013a68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	6a1b      	ldr	r3, [r3, #32]
 801400a:	1c5a      	adds	r2, r3, #1
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	7858      	ldrb	r0, [r3, #1]
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801401e:	2301      	movs	r3, #1
 8014020:	f7ff fc86 	bl	8013930 <disk_write>
			fs->fsi_flag = 0;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2200      	movs	r2, #0
 8014028:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	785b      	ldrb	r3, [r3, #1]
 801402e:	2200      	movs	r2, #0
 8014030:	2100      	movs	r1, #0
 8014032:	4618      	mov	r0, r3
 8014034:	f7ff fc9c 	bl	8013970 <disk_ioctl>
 8014038:	4603      	mov	r3, r0
 801403a:	2b00      	cmp	r3, #0
 801403c:	d001      	beq.n	8014042 <sync_fs+0xca>
 801403e:	2301      	movs	r3, #1
 8014040:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014042:	7bfb      	ldrb	r3, [r7, #15]
}
 8014044:	4618      	mov	r0, r3
 8014046:	3710      	adds	r7, #16
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}
 801404c:	41615252 	.word	0x41615252
 8014050:	61417272 	.word	0x61417272

08014054 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014054:	b480      	push	{r7}
 8014056:	b083      	sub	sp, #12
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
 801405c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	3b02      	subs	r3, #2
 8014062:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	699b      	ldr	r3, [r3, #24]
 8014068:	3b02      	subs	r3, #2
 801406a:	683a      	ldr	r2, [r7, #0]
 801406c:	429a      	cmp	r2, r3
 801406e:	d301      	bcc.n	8014074 <clust2sect+0x20>
 8014070:	2300      	movs	r3, #0
 8014072:	e008      	b.n	8014086 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	895b      	ldrh	r3, [r3, #10]
 8014078:	461a      	mov	r2, r3
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	fb03 f202 	mul.w	r2, r3, r2
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014084:	4413      	add	r3, r2
}
 8014086:	4618      	mov	r0, r3
 8014088:	370c      	adds	r7, #12
 801408a:	46bd      	mov	sp, r7
 801408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014090:	4770      	bx	lr

08014092 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014092:	b580      	push	{r7, lr}
 8014094:	b086      	sub	sp, #24
 8014096:	af00      	add	r7, sp, #0
 8014098:	6078      	str	r0, [r7, #4]
 801409a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80140a2:	683b      	ldr	r3, [r7, #0]
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d904      	bls.n	80140b2 <get_fat+0x20>
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	699b      	ldr	r3, [r3, #24]
 80140ac:	683a      	ldr	r2, [r7, #0]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d302      	bcc.n	80140b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80140b2:	2301      	movs	r3, #1
 80140b4:	617b      	str	r3, [r7, #20]
 80140b6:	e08f      	b.n	80141d8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80140b8:	f04f 33ff 	mov.w	r3, #4294967295
 80140bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	781b      	ldrb	r3, [r3, #0]
 80140c2:	2b03      	cmp	r3, #3
 80140c4:	d062      	beq.n	801418c <get_fat+0xfa>
 80140c6:	2b03      	cmp	r3, #3
 80140c8:	dc7c      	bgt.n	80141c4 <get_fat+0x132>
 80140ca:	2b01      	cmp	r3, #1
 80140cc:	d002      	beq.n	80140d4 <get_fat+0x42>
 80140ce:	2b02      	cmp	r3, #2
 80140d0:	d042      	beq.n	8014158 <get_fat+0xc6>
 80140d2:	e077      	b.n	80141c4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	60fb      	str	r3, [r7, #12]
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	085b      	lsrs	r3, r3, #1
 80140dc:	68fa      	ldr	r2, [r7, #12]
 80140de:	4413      	add	r3, r2
 80140e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	0a5b      	lsrs	r3, r3, #9
 80140ea:	4413      	add	r3, r2
 80140ec:	4619      	mov	r1, r3
 80140ee:	6938      	ldr	r0, [r7, #16]
 80140f0:	f7ff ff14 	bl	8013f1c <move_window>
 80140f4:	4603      	mov	r3, r0
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d167      	bne.n	80141ca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	1c5a      	adds	r2, r3, #1
 80140fe:	60fa      	str	r2, [r7, #12]
 8014100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014104:	693a      	ldr	r2, [r7, #16]
 8014106:	4413      	add	r3, r2
 8014108:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801410c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801410e:	693b      	ldr	r3, [r7, #16]
 8014110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	0a5b      	lsrs	r3, r3, #9
 8014116:	4413      	add	r3, r2
 8014118:	4619      	mov	r1, r3
 801411a:	6938      	ldr	r0, [r7, #16]
 801411c:	f7ff fefe 	bl	8013f1c <move_window>
 8014120:	4603      	mov	r3, r0
 8014122:	2b00      	cmp	r3, #0
 8014124:	d153      	bne.n	80141ce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801412c:	693a      	ldr	r2, [r7, #16]
 801412e:	4413      	add	r3, r2
 8014130:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014134:	021b      	lsls	r3, r3, #8
 8014136:	461a      	mov	r2, r3
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	4313      	orrs	r3, r2
 801413c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	f003 0301 	and.w	r3, r3, #1
 8014144:	2b00      	cmp	r3, #0
 8014146:	d002      	beq.n	801414e <get_fat+0xbc>
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	091b      	lsrs	r3, r3, #4
 801414c:	e002      	b.n	8014154 <get_fat+0xc2>
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014154:	617b      	str	r3, [r7, #20]
			break;
 8014156:	e03f      	b.n	80141d8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014158:	693b      	ldr	r3, [r7, #16]
 801415a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	0a1b      	lsrs	r3, r3, #8
 8014160:	4413      	add	r3, r2
 8014162:	4619      	mov	r1, r3
 8014164:	6938      	ldr	r0, [r7, #16]
 8014166:	f7ff fed9 	bl	8013f1c <move_window>
 801416a:	4603      	mov	r3, r0
 801416c:	2b00      	cmp	r3, #0
 801416e:	d130      	bne.n	80141d2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	005b      	lsls	r3, r3, #1
 801417a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801417e:	4413      	add	r3, r2
 8014180:	4618      	mov	r0, r3
 8014182:	f7ff fc1b 	bl	80139bc <ld_word>
 8014186:	4603      	mov	r3, r0
 8014188:	617b      	str	r3, [r7, #20]
			break;
 801418a:	e025      	b.n	80141d8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801418c:	693b      	ldr	r3, [r7, #16]
 801418e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	09db      	lsrs	r3, r3, #7
 8014194:	4413      	add	r3, r2
 8014196:	4619      	mov	r1, r3
 8014198:	6938      	ldr	r0, [r7, #16]
 801419a:	f7ff febf 	bl	8013f1c <move_window>
 801419e:	4603      	mov	r3, r0
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d118      	bne.n	80141d6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	009b      	lsls	r3, r3, #2
 80141ae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80141b2:	4413      	add	r3, r2
 80141b4:	4618      	mov	r0, r3
 80141b6:	f7ff fc19 	bl	80139ec <ld_dword>
 80141ba:	4603      	mov	r3, r0
 80141bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80141c0:	617b      	str	r3, [r7, #20]
			break;
 80141c2:	e009      	b.n	80141d8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80141c4:	2301      	movs	r3, #1
 80141c6:	617b      	str	r3, [r7, #20]
 80141c8:	e006      	b.n	80141d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80141ca:	bf00      	nop
 80141cc:	e004      	b.n	80141d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80141ce:	bf00      	nop
 80141d0:	e002      	b.n	80141d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80141d2:	bf00      	nop
 80141d4:	e000      	b.n	80141d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80141d6:	bf00      	nop
		}
	}

	return val;
 80141d8:	697b      	ldr	r3, [r7, #20]
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3718      	adds	r7, #24
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}

080141e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80141e2:	b590      	push	{r4, r7, lr}
 80141e4:	b089      	sub	sp, #36	; 0x24
 80141e6:	af00      	add	r7, sp, #0
 80141e8:	60f8      	str	r0, [r7, #12]
 80141ea:	60b9      	str	r1, [r7, #8]
 80141ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80141ee:	2302      	movs	r3, #2
 80141f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	2b01      	cmp	r3, #1
 80141f6:	f240 80d2 	bls.w	801439e <put_fat+0x1bc>
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	699b      	ldr	r3, [r3, #24]
 80141fe:	68ba      	ldr	r2, [r7, #8]
 8014200:	429a      	cmp	r2, r3
 8014202:	f080 80cc 	bcs.w	801439e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	2b03      	cmp	r3, #3
 801420c:	f000 8096 	beq.w	801433c <put_fat+0x15a>
 8014210:	2b03      	cmp	r3, #3
 8014212:	f300 80cd 	bgt.w	80143b0 <put_fat+0x1ce>
 8014216:	2b01      	cmp	r3, #1
 8014218:	d002      	beq.n	8014220 <put_fat+0x3e>
 801421a:	2b02      	cmp	r3, #2
 801421c:	d06e      	beq.n	80142fc <put_fat+0x11a>
 801421e:	e0c7      	b.n	80143b0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	61bb      	str	r3, [r7, #24]
 8014224:	69bb      	ldr	r3, [r7, #24]
 8014226:	085b      	lsrs	r3, r3, #1
 8014228:	69ba      	ldr	r2, [r7, #24]
 801422a:	4413      	add	r3, r2
 801422c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014232:	69bb      	ldr	r3, [r7, #24]
 8014234:	0a5b      	lsrs	r3, r3, #9
 8014236:	4413      	add	r3, r2
 8014238:	4619      	mov	r1, r3
 801423a:	68f8      	ldr	r0, [r7, #12]
 801423c:	f7ff fe6e 	bl	8013f1c <move_window>
 8014240:	4603      	mov	r3, r0
 8014242:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014244:	7ffb      	ldrb	r3, [r7, #31]
 8014246:	2b00      	cmp	r3, #0
 8014248:	f040 80ab 	bne.w	80143a2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014252:	69bb      	ldr	r3, [r7, #24]
 8014254:	1c59      	adds	r1, r3, #1
 8014256:	61b9      	str	r1, [r7, #24]
 8014258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801425c:	4413      	add	r3, r2
 801425e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	f003 0301 	and.w	r3, r3, #1
 8014266:	2b00      	cmp	r3, #0
 8014268:	d00d      	beq.n	8014286 <put_fat+0xa4>
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	781b      	ldrb	r3, [r3, #0]
 801426e:	b25b      	sxtb	r3, r3
 8014270:	f003 030f 	and.w	r3, r3, #15
 8014274:	b25a      	sxtb	r2, r3
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	b2db      	uxtb	r3, r3
 801427a:	011b      	lsls	r3, r3, #4
 801427c:	b25b      	sxtb	r3, r3
 801427e:	4313      	orrs	r3, r2
 8014280:	b25b      	sxtb	r3, r3
 8014282:	b2db      	uxtb	r3, r3
 8014284:	e001      	b.n	801428a <put_fat+0xa8>
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	b2db      	uxtb	r3, r3
 801428a:	697a      	ldr	r2, [r7, #20]
 801428c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	2201      	movs	r2, #1
 8014292:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014298:	69bb      	ldr	r3, [r7, #24]
 801429a:	0a5b      	lsrs	r3, r3, #9
 801429c:	4413      	add	r3, r2
 801429e:	4619      	mov	r1, r3
 80142a0:	68f8      	ldr	r0, [r7, #12]
 80142a2:	f7ff fe3b 	bl	8013f1c <move_window>
 80142a6:	4603      	mov	r3, r0
 80142a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80142aa:	7ffb      	ldrb	r3, [r7, #31]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d17a      	bne.n	80143a6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80142b6:	69bb      	ldr	r3, [r7, #24]
 80142b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142bc:	4413      	add	r3, r2
 80142be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	f003 0301 	and.w	r3, r3, #1
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d003      	beq.n	80142d2 <put_fat+0xf0>
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	091b      	lsrs	r3, r3, #4
 80142ce:	b2db      	uxtb	r3, r3
 80142d0:	e00e      	b.n	80142f0 <put_fat+0x10e>
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	b25b      	sxtb	r3, r3
 80142d8:	f023 030f 	bic.w	r3, r3, #15
 80142dc:	b25a      	sxtb	r2, r3
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	0a1b      	lsrs	r3, r3, #8
 80142e2:	b25b      	sxtb	r3, r3
 80142e4:	f003 030f 	and.w	r3, r3, #15
 80142e8:	b25b      	sxtb	r3, r3
 80142ea:	4313      	orrs	r3, r2
 80142ec:	b25b      	sxtb	r3, r3
 80142ee:	b2db      	uxtb	r3, r3
 80142f0:	697a      	ldr	r2, [r7, #20]
 80142f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	2201      	movs	r2, #1
 80142f8:	70da      	strb	r2, [r3, #3]
			break;
 80142fa:	e059      	b.n	80143b0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	0a1b      	lsrs	r3, r3, #8
 8014304:	4413      	add	r3, r2
 8014306:	4619      	mov	r1, r3
 8014308:	68f8      	ldr	r0, [r7, #12]
 801430a:	f7ff fe07 	bl	8013f1c <move_window>
 801430e:	4603      	mov	r3, r0
 8014310:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014312:	7ffb      	ldrb	r3, [r7, #31]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d148      	bne.n	80143aa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	005b      	lsls	r3, r3, #1
 8014322:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8014326:	4413      	add	r3, r2
 8014328:	687a      	ldr	r2, [r7, #4]
 801432a:	b292      	uxth	r2, r2
 801432c:	4611      	mov	r1, r2
 801432e:	4618      	mov	r0, r3
 8014330:	f7ff fb7f 	bl	8013a32 <st_word>
			fs->wflag = 1;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	2201      	movs	r2, #1
 8014338:	70da      	strb	r2, [r3, #3]
			break;
 801433a:	e039      	b.n	80143b0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	09db      	lsrs	r3, r3, #7
 8014344:	4413      	add	r3, r2
 8014346:	4619      	mov	r1, r3
 8014348:	68f8      	ldr	r0, [r7, #12]
 801434a:	f7ff fde7 	bl	8013f1c <move_window>
 801434e:	4603      	mov	r3, r0
 8014350:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014352:	7ffb      	ldrb	r3, [r7, #31]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d12a      	bne.n	80143ae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801436c:	4413      	add	r3, r2
 801436e:	4618      	mov	r0, r3
 8014370:	f7ff fb3c 	bl	80139ec <ld_dword>
 8014374:	4603      	mov	r3, r0
 8014376:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801437a:	4323      	orrs	r3, r4
 801437c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	009b      	lsls	r3, r3, #2
 8014388:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801438c:	4413      	add	r3, r2
 801438e:	6879      	ldr	r1, [r7, #4]
 8014390:	4618      	mov	r0, r3
 8014392:	f7ff fb69 	bl	8013a68 <st_dword>
			fs->wflag = 1;
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	2201      	movs	r2, #1
 801439a:	70da      	strb	r2, [r3, #3]
			break;
 801439c:	e008      	b.n	80143b0 <put_fat+0x1ce>
		}
	}
 801439e:	bf00      	nop
 80143a0:	e006      	b.n	80143b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80143a2:	bf00      	nop
 80143a4:	e004      	b.n	80143b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80143a6:	bf00      	nop
 80143a8:	e002      	b.n	80143b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80143aa:	bf00      	nop
 80143ac:	e000      	b.n	80143b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80143ae:	bf00      	nop
	return res;
 80143b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80143b2:	4618      	mov	r0, r3
 80143b4:	3724      	adds	r7, #36	; 0x24
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd90      	pop	{r4, r7, pc}

080143ba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80143ba:	b580      	push	{r7, lr}
 80143bc:	b088      	sub	sp, #32
 80143be:	af00      	add	r7, sp, #0
 80143c0:	60f8      	str	r0, [r7, #12]
 80143c2:	60b9      	str	r1, [r7, #8]
 80143c4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80143c6:	2300      	movs	r3, #0
 80143c8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	2b01      	cmp	r3, #1
 80143d4:	d904      	bls.n	80143e0 <remove_chain+0x26>
 80143d6:	69bb      	ldr	r3, [r7, #24]
 80143d8:	699b      	ldr	r3, [r3, #24]
 80143da:	68ba      	ldr	r2, [r7, #8]
 80143dc:	429a      	cmp	r2, r3
 80143de:	d301      	bcc.n	80143e4 <remove_chain+0x2a>
 80143e0:	2302      	movs	r3, #2
 80143e2:	e04b      	b.n	801447c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d00c      	beq.n	8014404 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80143ea:	f04f 32ff 	mov.w	r2, #4294967295
 80143ee:	6879      	ldr	r1, [r7, #4]
 80143f0:	69b8      	ldr	r0, [r7, #24]
 80143f2:	f7ff fef6 	bl	80141e2 <put_fat>
 80143f6:	4603      	mov	r3, r0
 80143f8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80143fa:	7ffb      	ldrb	r3, [r7, #31]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d001      	beq.n	8014404 <remove_chain+0x4a>
 8014400:	7ffb      	ldrb	r3, [r7, #31]
 8014402:	e03b      	b.n	801447c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014404:	68b9      	ldr	r1, [r7, #8]
 8014406:	68f8      	ldr	r0, [r7, #12]
 8014408:	f7ff fe43 	bl	8014092 <get_fat>
 801440c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d031      	beq.n	8014478 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	2b01      	cmp	r3, #1
 8014418:	d101      	bne.n	801441e <remove_chain+0x64>
 801441a:	2302      	movs	r3, #2
 801441c:	e02e      	b.n	801447c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014424:	d101      	bne.n	801442a <remove_chain+0x70>
 8014426:	2301      	movs	r3, #1
 8014428:	e028      	b.n	801447c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801442a:	2200      	movs	r2, #0
 801442c:	68b9      	ldr	r1, [r7, #8]
 801442e:	69b8      	ldr	r0, [r7, #24]
 8014430:	f7ff fed7 	bl	80141e2 <put_fat>
 8014434:	4603      	mov	r3, r0
 8014436:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014438:	7ffb      	ldrb	r3, [r7, #31]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d001      	beq.n	8014442 <remove_chain+0x88>
 801443e:	7ffb      	ldrb	r3, [r7, #31]
 8014440:	e01c      	b.n	801447c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014442:	69bb      	ldr	r3, [r7, #24]
 8014444:	695a      	ldr	r2, [r3, #20]
 8014446:	69bb      	ldr	r3, [r7, #24]
 8014448:	699b      	ldr	r3, [r3, #24]
 801444a:	3b02      	subs	r3, #2
 801444c:	429a      	cmp	r2, r3
 801444e:	d20b      	bcs.n	8014468 <remove_chain+0xae>
			fs->free_clst++;
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	695b      	ldr	r3, [r3, #20]
 8014454:	1c5a      	adds	r2, r3, #1
 8014456:	69bb      	ldr	r3, [r7, #24]
 8014458:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801445a:	69bb      	ldr	r3, [r7, #24]
 801445c:	791b      	ldrb	r3, [r3, #4]
 801445e:	f043 0301 	orr.w	r3, r3, #1
 8014462:	b2da      	uxtb	r2, r3
 8014464:	69bb      	ldr	r3, [r7, #24]
 8014466:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014468:	697b      	ldr	r3, [r7, #20]
 801446a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	699b      	ldr	r3, [r3, #24]
 8014470:	68ba      	ldr	r2, [r7, #8]
 8014472:	429a      	cmp	r2, r3
 8014474:	d3c6      	bcc.n	8014404 <remove_chain+0x4a>
 8014476:	e000      	b.n	801447a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014478:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801447a:	2300      	movs	r3, #0
}
 801447c:	4618      	mov	r0, r3
 801447e:	3720      	adds	r7, #32
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}

08014484 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b088      	sub	sp, #32
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
 801448c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d10d      	bne.n	80144b6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	691b      	ldr	r3, [r3, #16]
 801449e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80144a0:	69bb      	ldr	r3, [r7, #24]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d004      	beq.n	80144b0 <create_chain+0x2c>
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	699b      	ldr	r3, [r3, #24]
 80144aa:	69ba      	ldr	r2, [r7, #24]
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d31b      	bcc.n	80144e8 <create_chain+0x64>
 80144b0:	2301      	movs	r3, #1
 80144b2:	61bb      	str	r3, [r7, #24]
 80144b4:	e018      	b.n	80144e8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80144b6:	6839      	ldr	r1, [r7, #0]
 80144b8:	6878      	ldr	r0, [r7, #4]
 80144ba:	f7ff fdea 	bl	8014092 <get_fat>
 80144be:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	2b01      	cmp	r3, #1
 80144c4:	d801      	bhi.n	80144ca <create_chain+0x46>
 80144c6:	2301      	movs	r3, #1
 80144c8:	e070      	b.n	80145ac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144d0:	d101      	bne.n	80144d6 <create_chain+0x52>
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	e06a      	b.n	80145ac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	699b      	ldr	r3, [r3, #24]
 80144da:	68fa      	ldr	r2, [r7, #12]
 80144dc:	429a      	cmp	r2, r3
 80144de:	d201      	bcs.n	80144e4 <create_chain+0x60>
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	e063      	b.n	80145ac <create_chain+0x128>
		scl = clst;
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80144e8:	69bb      	ldr	r3, [r7, #24]
 80144ea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80144ec:	69fb      	ldr	r3, [r7, #28]
 80144ee:	3301      	adds	r3, #1
 80144f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	699b      	ldr	r3, [r3, #24]
 80144f6:	69fa      	ldr	r2, [r7, #28]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d307      	bcc.n	801450c <create_chain+0x88>
				ncl = 2;
 80144fc:	2302      	movs	r3, #2
 80144fe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014500:	69fa      	ldr	r2, [r7, #28]
 8014502:	69bb      	ldr	r3, [r7, #24]
 8014504:	429a      	cmp	r2, r3
 8014506:	d901      	bls.n	801450c <create_chain+0x88>
 8014508:	2300      	movs	r3, #0
 801450a:	e04f      	b.n	80145ac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801450c:	69f9      	ldr	r1, [r7, #28]
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f7ff fdbf 	bl	8014092 <get_fat>
 8014514:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d00e      	beq.n	801453a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	2b01      	cmp	r3, #1
 8014520:	d003      	beq.n	801452a <create_chain+0xa6>
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014528:	d101      	bne.n	801452e <create_chain+0xaa>
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	e03e      	b.n	80145ac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801452e:	69fa      	ldr	r2, [r7, #28]
 8014530:	69bb      	ldr	r3, [r7, #24]
 8014532:	429a      	cmp	r2, r3
 8014534:	d1da      	bne.n	80144ec <create_chain+0x68>
 8014536:	2300      	movs	r3, #0
 8014538:	e038      	b.n	80145ac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801453a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801453c:	f04f 32ff 	mov.w	r2, #4294967295
 8014540:	69f9      	ldr	r1, [r7, #28]
 8014542:	6938      	ldr	r0, [r7, #16]
 8014544:	f7ff fe4d 	bl	80141e2 <put_fat>
 8014548:	4603      	mov	r3, r0
 801454a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801454c:	7dfb      	ldrb	r3, [r7, #23]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d109      	bne.n	8014566 <create_chain+0xe2>
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d006      	beq.n	8014566 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8014558:	69fa      	ldr	r2, [r7, #28]
 801455a:	6839      	ldr	r1, [r7, #0]
 801455c:	6938      	ldr	r0, [r7, #16]
 801455e:	f7ff fe40 	bl	80141e2 <put_fat>
 8014562:	4603      	mov	r3, r0
 8014564:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014566:	7dfb      	ldrb	r3, [r7, #23]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d116      	bne.n	801459a <create_chain+0x116>
		fs->last_clst = ncl;
 801456c:	693b      	ldr	r3, [r7, #16]
 801456e:	69fa      	ldr	r2, [r7, #28]
 8014570:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	695a      	ldr	r2, [r3, #20]
 8014576:	693b      	ldr	r3, [r7, #16]
 8014578:	699b      	ldr	r3, [r3, #24]
 801457a:	3b02      	subs	r3, #2
 801457c:	429a      	cmp	r2, r3
 801457e:	d804      	bhi.n	801458a <create_chain+0x106>
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	695b      	ldr	r3, [r3, #20]
 8014584:	1e5a      	subs	r2, r3, #1
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801458a:	693b      	ldr	r3, [r7, #16]
 801458c:	791b      	ldrb	r3, [r3, #4]
 801458e:	f043 0301 	orr.w	r3, r3, #1
 8014592:	b2da      	uxtb	r2, r3
 8014594:	693b      	ldr	r3, [r7, #16]
 8014596:	711a      	strb	r2, [r3, #4]
 8014598:	e007      	b.n	80145aa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801459a:	7dfb      	ldrb	r3, [r7, #23]
 801459c:	2b01      	cmp	r3, #1
 801459e:	d102      	bne.n	80145a6 <create_chain+0x122>
 80145a0:	f04f 33ff 	mov.w	r3, #4294967295
 80145a4:	e000      	b.n	80145a8 <create_chain+0x124>
 80145a6:	2301      	movs	r3, #1
 80145a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80145aa:	69fb      	ldr	r3, [r7, #28]
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3720      	adds	r7, #32
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80145b4:	b480      	push	{r7}
 80145b6:	b087      	sub	sp, #28
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145c8:	3304      	adds	r3, #4
 80145ca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	0a5b      	lsrs	r3, r3, #9
 80145d0:	68fa      	ldr	r2, [r7, #12]
 80145d2:	8952      	ldrh	r2, [r2, #10]
 80145d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80145d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	1d1a      	adds	r2, r3, #4
 80145de:	613a      	str	r2, [r7, #16]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d101      	bne.n	80145ee <clmt_clust+0x3a>
 80145ea:	2300      	movs	r3, #0
 80145ec:	e010      	b.n	8014610 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80145ee:	697a      	ldr	r2, [r7, #20]
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d307      	bcc.n	8014606 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80145f6:	697a      	ldr	r2, [r7, #20]
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	617b      	str	r3, [r7, #20]
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	3304      	adds	r3, #4
 8014602:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014604:	e7e9      	b.n	80145da <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8014606:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	681a      	ldr	r2, [r3, #0]
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	4413      	add	r3, r2
}
 8014610:	4618      	mov	r0, r3
 8014612:	371c      	adds	r7, #28
 8014614:	46bd      	mov	sp, r7
 8014616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461a:	4770      	bx	lr

0801461c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b086      	sub	sp, #24
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
 8014624:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014632:	d204      	bcs.n	801463e <dir_sdi+0x22>
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	f003 031f 	and.w	r3, r3, #31
 801463a:	2b00      	cmp	r3, #0
 801463c:	d001      	beq.n	8014642 <dir_sdi+0x26>
		return FR_INT_ERR;
 801463e:	2302      	movs	r3, #2
 8014640:	e063      	b.n	801470a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	683a      	ldr	r2, [r7, #0]
 8014646:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	689b      	ldr	r3, [r3, #8]
 801464c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801464e:	697b      	ldr	r3, [r7, #20]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d106      	bne.n	8014662 <dir_sdi+0x46>
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	781b      	ldrb	r3, [r3, #0]
 8014658:	2b02      	cmp	r3, #2
 801465a:	d902      	bls.n	8014662 <dir_sdi+0x46>
		clst = fs->dirbase;
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014660:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014662:	697b      	ldr	r3, [r7, #20]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d10c      	bne.n	8014682 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	095b      	lsrs	r3, r3, #5
 801466c:	693a      	ldr	r2, [r7, #16]
 801466e:	8912      	ldrh	r2, [r2, #8]
 8014670:	4293      	cmp	r3, r2
 8014672:	d301      	bcc.n	8014678 <dir_sdi+0x5c>
 8014674:	2302      	movs	r3, #2
 8014676:	e048      	b.n	801470a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8014678:	693b      	ldr	r3, [r7, #16]
 801467a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	61da      	str	r2, [r3, #28]
 8014680:	e029      	b.n	80146d6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	895b      	ldrh	r3, [r3, #10]
 8014686:	025b      	lsls	r3, r3, #9
 8014688:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801468a:	e019      	b.n	80146c0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	6979      	ldr	r1, [r7, #20]
 8014690:	4618      	mov	r0, r3
 8014692:	f7ff fcfe 	bl	8014092 <get_fat>
 8014696:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014698:	697b      	ldr	r3, [r7, #20]
 801469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801469e:	d101      	bne.n	80146a4 <dir_sdi+0x88>
 80146a0:	2301      	movs	r3, #1
 80146a2:	e032      	b.n	801470a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80146a4:	697b      	ldr	r3, [r7, #20]
 80146a6:	2b01      	cmp	r3, #1
 80146a8:	d904      	bls.n	80146b4 <dir_sdi+0x98>
 80146aa:	693b      	ldr	r3, [r7, #16]
 80146ac:	699b      	ldr	r3, [r3, #24]
 80146ae:	697a      	ldr	r2, [r7, #20]
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d301      	bcc.n	80146b8 <dir_sdi+0x9c>
 80146b4:	2302      	movs	r3, #2
 80146b6:	e028      	b.n	801470a <dir_sdi+0xee>
			ofs -= csz;
 80146b8:	683a      	ldr	r2, [r7, #0]
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	1ad3      	subs	r3, r2, r3
 80146be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80146c0:	683a      	ldr	r2, [r7, #0]
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d2e1      	bcs.n	801468c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80146c8:	6979      	ldr	r1, [r7, #20]
 80146ca:	6938      	ldr	r0, [r7, #16]
 80146cc:	f7ff fcc2 	bl	8014054 <clust2sect>
 80146d0:	4602      	mov	r2, r0
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	697a      	ldr	r2, [r7, #20]
 80146da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	69db      	ldr	r3, [r3, #28]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d101      	bne.n	80146e8 <dir_sdi+0xcc>
 80146e4:	2302      	movs	r3, #2
 80146e6:	e010      	b.n	801470a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	69da      	ldr	r2, [r3, #28]
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	0a5b      	lsrs	r3, r3, #9
 80146f0:	441a      	add	r2, r3
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80146f6:	693b      	ldr	r3, [r7, #16]
 80146f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014702:	441a      	add	r2, r3
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014708:	2300      	movs	r3, #0
}
 801470a:	4618      	mov	r0, r3
 801470c:	3718      	adds	r7, #24
 801470e:	46bd      	mov	sp, r7
 8014710:	bd80      	pop	{r7, pc}

08014712 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8014712:	b580      	push	{r7, lr}
 8014714:	b086      	sub	sp, #24
 8014716:	af00      	add	r7, sp, #0
 8014718:	6078      	str	r0, [r7, #4]
 801471a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	695b      	ldr	r3, [r3, #20]
 8014726:	3320      	adds	r3, #32
 8014728:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	69db      	ldr	r3, [r3, #28]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d003      	beq.n	801473a <dir_next+0x28>
 8014732:	68bb      	ldr	r3, [r7, #8]
 8014734:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014738:	d301      	bcc.n	801473e <dir_next+0x2c>
 801473a:	2304      	movs	r3, #4
 801473c:	e0aa      	b.n	8014894 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014744:	2b00      	cmp	r3, #0
 8014746:	f040 8098 	bne.w	801487a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	69db      	ldr	r3, [r3, #28]
 801474e:	1c5a      	adds	r2, r3, #1
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	699b      	ldr	r3, [r3, #24]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d10b      	bne.n	8014774 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801475c:	68bb      	ldr	r3, [r7, #8]
 801475e:	095b      	lsrs	r3, r3, #5
 8014760:	68fa      	ldr	r2, [r7, #12]
 8014762:	8912      	ldrh	r2, [r2, #8]
 8014764:	4293      	cmp	r3, r2
 8014766:	f0c0 8088 	bcc.w	801487a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	2200      	movs	r2, #0
 801476e:	61da      	str	r2, [r3, #28]
 8014770:	2304      	movs	r3, #4
 8014772:	e08f      	b.n	8014894 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	0a5b      	lsrs	r3, r3, #9
 8014778:	68fa      	ldr	r2, [r7, #12]
 801477a:	8952      	ldrh	r2, [r2, #10]
 801477c:	3a01      	subs	r2, #1
 801477e:	4013      	ands	r3, r2
 8014780:	2b00      	cmp	r3, #0
 8014782:	d17a      	bne.n	801487a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014784:	687a      	ldr	r2, [r7, #4]
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	699b      	ldr	r3, [r3, #24]
 801478a:	4619      	mov	r1, r3
 801478c:	4610      	mov	r0, r2
 801478e:	f7ff fc80 	bl	8014092 <get_fat>
 8014792:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014794:	697b      	ldr	r3, [r7, #20]
 8014796:	2b01      	cmp	r3, #1
 8014798:	d801      	bhi.n	801479e <dir_next+0x8c>
 801479a:	2302      	movs	r3, #2
 801479c:	e07a      	b.n	8014894 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147a4:	d101      	bne.n	80147aa <dir_next+0x98>
 80147a6:	2301      	movs	r3, #1
 80147a8:	e074      	b.n	8014894 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	699b      	ldr	r3, [r3, #24]
 80147ae:	697a      	ldr	r2, [r7, #20]
 80147b0:	429a      	cmp	r2, r3
 80147b2:	d358      	bcc.n	8014866 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d104      	bne.n	80147c4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2200      	movs	r2, #0
 80147be:	61da      	str	r2, [r3, #28]
 80147c0:	2304      	movs	r3, #4
 80147c2:	e067      	b.n	8014894 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80147c4:	687a      	ldr	r2, [r7, #4]
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	699b      	ldr	r3, [r3, #24]
 80147ca:	4619      	mov	r1, r3
 80147cc:	4610      	mov	r0, r2
 80147ce:	f7ff fe59 	bl	8014484 <create_chain>
 80147d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d101      	bne.n	80147de <dir_next+0xcc>
 80147da:	2307      	movs	r3, #7
 80147dc:	e05a      	b.n	8014894 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	2b01      	cmp	r3, #1
 80147e2:	d101      	bne.n	80147e8 <dir_next+0xd6>
 80147e4:	2302      	movs	r3, #2
 80147e6:	e055      	b.n	8014894 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80147e8:	697b      	ldr	r3, [r7, #20]
 80147ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147ee:	d101      	bne.n	80147f4 <dir_next+0xe2>
 80147f0:	2301      	movs	r3, #1
 80147f2:	e04f      	b.n	8014894 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80147f4:	68f8      	ldr	r0, [r7, #12]
 80147f6:	f7ff fb4d 	bl	8013e94 <sync_window>
 80147fa:	4603      	mov	r3, r0
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d001      	beq.n	8014804 <dir_next+0xf2>
 8014800:	2301      	movs	r3, #1
 8014802:	e047      	b.n	8014894 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	3334      	adds	r3, #52	; 0x34
 8014808:	f44f 7200 	mov.w	r2, #512	; 0x200
 801480c:	2100      	movs	r1, #0
 801480e:	4618      	mov	r0, r3
 8014810:	f7ff f977 	bl	8013b02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014814:	2300      	movs	r3, #0
 8014816:	613b      	str	r3, [r7, #16]
 8014818:	6979      	ldr	r1, [r7, #20]
 801481a:	68f8      	ldr	r0, [r7, #12]
 801481c:	f7ff fc1a 	bl	8014054 <clust2sect>
 8014820:	4602      	mov	r2, r0
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	631a      	str	r2, [r3, #48]	; 0x30
 8014826:	e012      	b.n	801484e <dir_next+0x13c>
						fs->wflag = 1;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	2201      	movs	r2, #1
 801482c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801482e:	68f8      	ldr	r0, [r7, #12]
 8014830:	f7ff fb30 	bl	8013e94 <sync_window>
 8014834:	4603      	mov	r3, r0
 8014836:	2b00      	cmp	r3, #0
 8014838:	d001      	beq.n	801483e <dir_next+0x12c>
 801483a:	2301      	movs	r3, #1
 801483c:	e02a      	b.n	8014894 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801483e:	693b      	ldr	r3, [r7, #16]
 8014840:	3301      	adds	r3, #1
 8014842:	613b      	str	r3, [r7, #16]
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014848:	1c5a      	adds	r2, r3, #1
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	631a      	str	r2, [r3, #48]	; 0x30
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	895b      	ldrh	r3, [r3, #10]
 8014852:	461a      	mov	r2, r3
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	4293      	cmp	r3, r2
 8014858:	d3e6      	bcc.n	8014828 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	1ad2      	subs	r2, r2, r3
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	697a      	ldr	r2, [r7, #20]
 801486a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801486c:	6979      	ldr	r1, [r7, #20]
 801486e:	68f8      	ldr	r0, [r7, #12]
 8014870:	f7ff fbf0 	bl	8014054 <clust2sect>
 8014874:	4602      	mov	r2, r0
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	68ba      	ldr	r2, [r7, #8]
 801487e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014886:	68bb      	ldr	r3, [r7, #8]
 8014888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801488c:	441a      	add	r2, r3
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014892:	2300      	movs	r3, #0
}
 8014894:	4618      	mov	r0, r3
 8014896:	3718      	adds	r7, #24
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}

0801489c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b086      	sub	sp, #24
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80148ac:	2100      	movs	r1, #0
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f7ff feb4 	bl	801461c <dir_sdi>
 80148b4:	4603      	mov	r3, r0
 80148b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80148b8:	7dfb      	ldrb	r3, [r7, #23]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d12b      	bne.n	8014916 <dir_alloc+0x7a>
		n = 0;
 80148be:	2300      	movs	r3, #0
 80148c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	69db      	ldr	r3, [r3, #28]
 80148c6:	4619      	mov	r1, r3
 80148c8:	68f8      	ldr	r0, [r7, #12]
 80148ca:	f7ff fb27 	bl	8013f1c <move_window>
 80148ce:	4603      	mov	r3, r0
 80148d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80148d2:	7dfb      	ldrb	r3, [r7, #23]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d11d      	bne.n	8014914 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	6a1b      	ldr	r3, [r3, #32]
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	2be5      	cmp	r3, #229	; 0xe5
 80148e0:	d004      	beq.n	80148ec <dir_alloc+0x50>
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	6a1b      	ldr	r3, [r3, #32]
 80148e6:	781b      	ldrb	r3, [r3, #0]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d107      	bne.n	80148fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80148ec:	693b      	ldr	r3, [r7, #16]
 80148ee:	3301      	adds	r3, #1
 80148f0:	613b      	str	r3, [r7, #16]
 80148f2:	693a      	ldr	r2, [r7, #16]
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d102      	bne.n	8014900 <dir_alloc+0x64>
 80148fa:	e00c      	b.n	8014916 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80148fc:	2300      	movs	r3, #0
 80148fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8014900:	2101      	movs	r1, #1
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f7ff ff05 	bl	8014712 <dir_next>
 8014908:	4603      	mov	r3, r0
 801490a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801490c:	7dfb      	ldrb	r3, [r7, #23]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d0d7      	beq.n	80148c2 <dir_alloc+0x26>
 8014912:	e000      	b.n	8014916 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8014914:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014916:	7dfb      	ldrb	r3, [r7, #23]
 8014918:	2b04      	cmp	r3, #4
 801491a:	d101      	bne.n	8014920 <dir_alloc+0x84>
 801491c:	2307      	movs	r3, #7
 801491e:	75fb      	strb	r3, [r7, #23]
	return res;
 8014920:	7dfb      	ldrb	r3, [r7, #23]
}
 8014922:	4618      	mov	r0, r3
 8014924:	3718      	adds	r7, #24
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}

0801492a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801492a:	b580      	push	{r7, lr}
 801492c:	b084      	sub	sp, #16
 801492e:	af00      	add	r7, sp, #0
 8014930:	6078      	str	r0, [r7, #4]
 8014932:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	331a      	adds	r3, #26
 8014938:	4618      	mov	r0, r3
 801493a:	f7ff f83f 	bl	80139bc <ld_word>
 801493e:	4603      	mov	r3, r0
 8014940:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	781b      	ldrb	r3, [r3, #0]
 8014946:	2b03      	cmp	r3, #3
 8014948:	d109      	bne.n	801495e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	3314      	adds	r3, #20
 801494e:	4618      	mov	r0, r3
 8014950:	f7ff f834 	bl	80139bc <ld_word>
 8014954:	4603      	mov	r3, r0
 8014956:	041b      	lsls	r3, r3, #16
 8014958:	68fa      	ldr	r2, [r7, #12]
 801495a:	4313      	orrs	r3, r2
 801495c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801495e:	68fb      	ldr	r3, [r7, #12]
}
 8014960:	4618      	mov	r0, r3
 8014962:	3710      	adds	r7, #16
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}

08014968 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b084      	sub	sp, #16
 801496c:	af00      	add	r7, sp, #0
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014974:	68bb      	ldr	r3, [r7, #8]
 8014976:	331a      	adds	r3, #26
 8014978:	687a      	ldr	r2, [r7, #4]
 801497a:	b292      	uxth	r2, r2
 801497c:	4611      	mov	r1, r2
 801497e:	4618      	mov	r0, r3
 8014980:	f7ff f857 	bl	8013a32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	2b03      	cmp	r3, #3
 801498a:	d109      	bne.n	80149a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801498c:	68bb      	ldr	r3, [r7, #8]
 801498e:	f103 0214 	add.w	r2, r3, #20
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	0c1b      	lsrs	r3, r3, #16
 8014996:	b29b      	uxth	r3, r3
 8014998:	4619      	mov	r1, r3
 801499a:	4610      	mov	r0, r2
 801499c:	f7ff f849 	bl	8013a32 <st_word>
	}
}
 80149a0:	bf00      	nop
 80149a2:	3710      	adds	r7, #16
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80149a8:	b590      	push	{r4, r7, lr}
 80149aa:	b087      	sub	sp, #28
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	331a      	adds	r3, #26
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7ff f800 	bl	80139bc <ld_word>
 80149bc:	4603      	mov	r3, r0
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d001      	beq.n	80149c6 <cmp_lfn+0x1e>
 80149c2:	2300      	movs	r3, #0
 80149c4:	e059      	b.n	8014a7a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80149ce:	1e5a      	subs	r2, r3, #1
 80149d0:	4613      	mov	r3, r2
 80149d2:	005b      	lsls	r3, r3, #1
 80149d4:	4413      	add	r3, r2
 80149d6:	009b      	lsls	r3, r3, #2
 80149d8:	4413      	add	r3, r2
 80149da:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80149dc:	2301      	movs	r3, #1
 80149de:	81fb      	strh	r3, [r7, #14]
 80149e0:	2300      	movs	r3, #0
 80149e2:	613b      	str	r3, [r7, #16]
 80149e4:	e033      	b.n	8014a4e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80149e6:	4a27      	ldr	r2, [pc, #156]	; (8014a84 <cmp_lfn+0xdc>)
 80149e8:	693b      	ldr	r3, [r7, #16]
 80149ea:	4413      	add	r3, r2
 80149ec:	781b      	ldrb	r3, [r3, #0]
 80149ee:	461a      	mov	r2, r3
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	4413      	add	r3, r2
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7fe ffe1 	bl	80139bc <ld_word>
 80149fa:	4603      	mov	r3, r0
 80149fc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80149fe:	89fb      	ldrh	r3, [r7, #14]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d01a      	beq.n	8014a3a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	2bfe      	cmp	r3, #254	; 0xfe
 8014a08:	d812      	bhi.n	8014a30 <cmp_lfn+0x88>
 8014a0a:	89bb      	ldrh	r3, [r7, #12]
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f002 fb45 	bl	801709c <ff_wtoupper>
 8014a12:	4603      	mov	r3, r0
 8014a14:	461c      	mov	r4, r3
 8014a16:	697b      	ldr	r3, [r7, #20]
 8014a18:	1c5a      	adds	r2, r3, #1
 8014a1a:	617a      	str	r2, [r7, #20]
 8014a1c:	005b      	lsls	r3, r3, #1
 8014a1e:	687a      	ldr	r2, [r7, #4]
 8014a20:	4413      	add	r3, r2
 8014a22:	881b      	ldrh	r3, [r3, #0]
 8014a24:	4618      	mov	r0, r3
 8014a26:	f002 fb39 	bl	801709c <ff_wtoupper>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	429c      	cmp	r4, r3
 8014a2e:	d001      	beq.n	8014a34 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8014a30:	2300      	movs	r3, #0
 8014a32:	e022      	b.n	8014a7a <cmp_lfn+0xd2>
			}
			wc = uc;
 8014a34:	89bb      	ldrh	r3, [r7, #12]
 8014a36:	81fb      	strh	r3, [r7, #14]
 8014a38:	e006      	b.n	8014a48 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014a3a:	89bb      	ldrh	r3, [r7, #12]
 8014a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a40:	4293      	cmp	r3, r2
 8014a42:	d001      	beq.n	8014a48 <cmp_lfn+0xa0>
 8014a44:	2300      	movs	r3, #0
 8014a46:	e018      	b.n	8014a7a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	613b      	str	r3, [r7, #16]
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	2b0c      	cmp	r3, #12
 8014a52:	d9c8      	bls.n	80149e6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	781b      	ldrb	r3, [r3, #0]
 8014a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d00b      	beq.n	8014a78 <cmp_lfn+0xd0>
 8014a60:	89fb      	ldrh	r3, [r7, #14]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d008      	beq.n	8014a78 <cmp_lfn+0xd0>
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	005b      	lsls	r3, r3, #1
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	4413      	add	r3, r2
 8014a6e:	881b      	ldrh	r3, [r3, #0]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d001      	beq.n	8014a78 <cmp_lfn+0xd0>
 8014a74:	2300      	movs	r3, #0
 8014a76:	e000      	b.n	8014a7a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8014a78:	2301      	movs	r3, #1
}
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	371c      	adds	r7, #28
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd90      	pop	{r4, r7, pc}
 8014a82:	bf00      	nop
 8014a84:	080228ac 	.word	0x080228ac

08014a88 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b086      	sub	sp, #24
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	331a      	adds	r3, #26
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7fe ff90 	bl	80139bc <ld_word>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d001      	beq.n	8014aa6 <pick_lfn+0x1e>
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	e04d      	b.n	8014b42 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8014aa6:	683b      	ldr	r3, [r7, #0]
 8014aa8:	781b      	ldrb	r3, [r3, #0]
 8014aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014aae:	1e5a      	subs	r2, r3, #1
 8014ab0:	4613      	mov	r3, r2
 8014ab2:	005b      	lsls	r3, r3, #1
 8014ab4:	4413      	add	r3, r2
 8014ab6:	009b      	lsls	r3, r3, #2
 8014ab8:	4413      	add	r3, r2
 8014aba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014abc:	2301      	movs	r3, #1
 8014abe:	81fb      	strh	r3, [r7, #14]
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	613b      	str	r3, [r7, #16]
 8014ac4:	e028      	b.n	8014b18 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8014ac6:	4a21      	ldr	r2, [pc, #132]	; (8014b4c <pick_lfn+0xc4>)
 8014ac8:	693b      	ldr	r3, [r7, #16]
 8014aca:	4413      	add	r3, r2
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	461a      	mov	r2, r3
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	4413      	add	r3, r2
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7fe ff71 	bl	80139bc <ld_word>
 8014ada:	4603      	mov	r3, r0
 8014adc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8014ade:	89fb      	ldrh	r3, [r7, #14]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d00f      	beq.n	8014b04 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	2bfe      	cmp	r3, #254	; 0xfe
 8014ae8:	d901      	bls.n	8014aee <pick_lfn+0x66>
 8014aea:	2300      	movs	r3, #0
 8014aec:	e029      	b.n	8014b42 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014aee:	89bb      	ldrh	r3, [r7, #12]
 8014af0:	81fb      	strh	r3, [r7, #14]
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	1c5a      	adds	r2, r3, #1
 8014af6:	617a      	str	r2, [r7, #20]
 8014af8:	005b      	lsls	r3, r3, #1
 8014afa:	687a      	ldr	r2, [r7, #4]
 8014afc:	4413      	add	r3, r2
 8014afe:	89fa      	ldrh	r2, [r7, #14]
 8014b00:	801a      	strh	r2, [r3, #0]
 8014b02:	e006      	b.n	8014b12 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014b04:	89bb      	ldrh	r3, [r7, #12]
 8014b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b0a:	4293      	cmp	r3, r2
 8014b0c:	d001      	beq.n	8014b12 <pick_lfn+0x8a>
 8014b0e:	2300      	movs	r3, #0
 8014b10:	e017      	b.n	8014b42 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014b12:	693b      	ldr	r3, [r7, #16]
 8014b14:	3301      	adds	r3, #1
 8014b16:	613b      	str	r3, [r7, #16]
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	2b0c      	cmp	r3, #12
 8014b1c:	d9d3      	bls.n	8014ac6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	781b      	ldrb	r3, [r3, #0]
 8014b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d00a      	beq.n	8014b40 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	2bfe      	cmp	r3, #254	; 0xfe
 8014b2e:	d901      	bls.n	8014b34 <pick_lfn+0xac>
 8014b30:	2300      	movs	r3, #0
 8014b32:	e006      	b.n	8014b42 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	005b      	lsls	r3, r3, #1
 8014b38:	687a      	ldr	r2, [r7, #4]
 8014b3a:	4413      	add	r3, r2
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8014b40:	2301      	movs	r3, #1
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	3718      	adds	r7, #24
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}
 8014b4a:	bf00      	nop
 8014b4c:	080228ac 	.word	0x080228ac

08014b50 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b088      	sub	sp, #32
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	60f8      	str	r0, [r7, #12]
 8014b58:	60b9      	str	r1, [r7, #8]
 8014b5a:	4611      	mov	r1, r2
 8014b5c:	461a      	mov	r2, r3
 8014b5e:	460b      	mov	r3, r1
 8014b60:	71fb      	strb	r3, [r7, #7]
 8014b62:	4613      	mov	r3, r2
 8014b64:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	330d      	adds	r3, #13
 8014b6a:	79ba      	ldrb	r2, [r7, #6]
 8014b6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8014b6e:	68bb      	ldr	r3, [r7, #8]
 8014b70:	330b      	adds	r3, #11
 8014b72:	220f      	movs	r2, #15
 8014b74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	330c      	adds	r3, #12
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8014b7e:	68bb      	ldr	r3, [r7, #8]
 8014b80:	331a      	adds	r3, #26
 8014b82:	2100      	movs	r1, #0
 8014b84:	4618      	mov	r0, r3
 8014b86:	f7fe ff54 	bl	8013a32 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8014b8a:	79fb      	ldrb	r3, [r7, #7]
 8014b8c:	1e5a      	subs	r2, r3, #1
 8014b8e:	4613      	mov	r3, r2
 8014b90:	005b      	lsls	r3, r3, #1
 8014b92:	4413      	add	r3, r2
 8014b94:	009b      	lsls	r3, r3, #2
 8014b96:	4413      	add	r3, r2
 8014b98:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	82fb      	strh	r3, [r7, #22]
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8014ba2:	8afb      	ldrh	r3, [r7, #22]
 8014ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ba8:	4293      	cmp	r3, r2
 8014baa:	d007      	beq.n	8014bbc <put_lfn+0x6c>
 8014bac:	69fb      	ldr	r3, [r7, #28]
 8014bae:	1c5a      	adds	r2, r3, #1
 8014bb0:	61fa      	str	r2, [r7, #28]
 8014bb2:	005b      	lsls	r3, r3, #1
 8014bb4:	68fa      	ldr	r2, [r7, #12]
 8014bb6:	4413      	add	r3, r2
 8014bb8:	881b      	ldrh	r3, [r3, #0]
 8014bba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8014bbc:	4a17      	ldr	r2, [pc, #92]	; (8014c1c <put_lfn+0xcc>)
 8014bbe:	69bb      	ldr	r3, [r7, #24]
 8014bc0:	4413      	add	r3, r2
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	461a      	mov	r2, r3
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	4413      	add	r3, r2
 8014bca:	8afa      	ldrh	r2, [r7, #22]
 8014bcc:	4611      	mov	r1, r2
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f7fe ff2f 	bl	8013a32 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8014bd4:	8afb      	ldrh	r3, [r7, #22]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d102      	bne.n	8014be0 <put_lfn+0x90>
 8014bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014bde:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8014be0:	69bb      	ldr	r3, [r7, #24]
 8014be2:	3301      	adds	r3, #1
 8014be4:	61bb      	str	r3, [r7, #24]
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	2b0c      	cmp	r3, #12
 8014bea:	d9da      	bls.n	8014ba2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8014bec:	8afb      	ldrh	r3, [r7, #22]
 8014bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014bf2:	4293      	cmp	r3, r2
 8014bf4:	d006      	beq.n	8014c04 <put_lfn+0xb4>
 8014bf6:	69fb      	ldr	r3, [r7, #28]
 8014bf8:	005b      	lsls	r3, r3, #1
 8014bfa:	68fa      	ldr	r2, [r7, #12]
 8014bfc:	4413      	add	r3, r2
 8014bfe:	881b      	ldrh	r3, [r3, #0]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d103      	bne.n	8014c0c <put_lfn+0xbc>
 8014c04:	79fb      	ldrb	r3, [r7, #7]
 8014c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c0a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	79fa      	ldrb	r2, [r7, #7]
 8014c10:	701a      	strb	r2, [r3, #0]
}
 8014c12:	bf00      	nop
 8014c14:	3720      	adds	r7, #32
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}
 8014c1a:	bf00      	nop
 8014c1c:	080228ac 	.word	0x080228ac

08014c20 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b08c      	sub	sp, #48	; 0x30
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	60f8      	str	r0, [r7, #12]
 8014c28:	60b9      	str	r1, [r7, #8]
 8014c2a:	607a      	str	r2, [r7, #4]
 8014c2c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8014c2e:	220b      	movs	r2, #11
 8014c30:	68b9      	ldr	r1, [r7, #8]
 8014c32:	68f8      	ldr	r0, [r7, #12]
 8014c34:	f7fe ff44 	bl	8013ac0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	2b05      	cmp	r3, #5
 8014c3c:	d92b      	bls.n	8014c96 <gen_numname+0x76>
		sr = seq;
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8014c42:	e022      	b.n	8014c8a <gen_numname+0x6a>
			wc = *lfn++;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	1c9a      	adds	r2, r3, #2
 8014c48:	607a      	str	r2, [r7, #4]
 8014c4a:	881b      	ldrh	r3, [r3, #0]
 8014c4c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8014c4e:	2300      	movs	r3, #0
 8014c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c52:	e017      	b.n	8014c84 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8014c54:	69fb      	ldr	r3, [r7, #28]
 8014c56:	005a      	lsls	r2, r3, #1
 8014c58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c5a:	f003 0301 	and.w	r3, r3, #1
 8014c5e:	4413      	add	r3, r2
 8014c60:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8014c62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c64:	085b      	lsrs	r3, r3, #1
 8014c66:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8014c68:	69fb      	ldr	r3, [r7, #28]
 8014c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d005      	beq.n	8014c7e <gen_numname+0x5e>
 8014c72:	69fb      	ldr	r3, [r7, #28]
 8014c74:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8014c78:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8014c7c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8014c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c80:	3301      	adds	r3, #1
 8014c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c86:	2b0f      	cmp	r3, #15
 8014c88:	d9e4      	bls.n	8014c54 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	881b      	ldrh	r3, [r3, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d1d8      	bne.n	8014c44 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8014c92:	69fb      	ldr	r3, [r7, #28]
 8014c94:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8014c96:	2307      	movs	r3, #7
 8014c98:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	b2db      	uxtb	r3, r3
 8014c9e:	f003 030f 	and.w	r3, r3, #15
 8014ca2:	b2db      	uxtb	r3, r3
 8014ca4:	3330      	adds	r3, #48	; 0x30
 8014ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8014caa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014cae:	2b39      	cmp	r3, #57	; 0x39
 8014cb0:	d904      	bls.n	8014cbc <gen_numname+0x9c>
 8014cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014cb6:	3307      	adds	r3, #7
 8014cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8014cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cbe:	1e5a      	subs	r2, r3, #1
 8014cc0:	62ba      	str	r2, [r7, #40]	; 0x28
 8014cc2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014cc6:	4413      	add	r3, r2
 8014cc8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014ccc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8014cd0:	683b      	ldr	r3, [r7, #0]
 8014cd2:	091b      	lsrs	r3, r3, #4
 8014cd4:	603b      	str	r3, [r7, #0]
	} while (seq);
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d1de      	bne.n	8014c9a <gen_numname+0x7a>
	ns[i] = '~';
 8014cdc:	f107 0214 	add.w	r2, r7, #20
 8014ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ce2:	4413      	add	r3, r2
 8014ce4:	227e      	movs	r2, #126	; 0x7e
 8014ce6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8014ce8:	2300      	movs	r3, #0
 8014cea:	627b      	str	r3, [r7, #36]	; 0x24
 8014cec:	e002      	b.n	8014cf4 <gen_numname+0xd4>
 8014cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf0:	3301      	adds	r3, #1
 8014cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8014cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	d205      	bcs.n	8014d08 <gen_numname+0xe8>
 8014cfc:	68fa      	ldr	r2, [r7, #12]
 8014cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d00:	4413      	add	r3, r2
 8014d02:	781b      	ldrb	r3, [r3, #0]
 8014d04:	2b20      	cmp	r3, #32
 8014d06:	d1f2      	bne.n	8014cee <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d0a:	2b07      	cmp	r3, #7
 8014d0c:	d808      	bhi.n	8014d20 <gen_numname+0x100>
 8014d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d10:	1c5a      	adds	r2, r3, #1
 8014d12:	62ba      	str	r2, [r7, #40]	; 0x28
 8014d14:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014d18:	4413      	add	r3, r2
 8014d1a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8014d1e:	e000      	b.n	8014d22 <gen_numname+0x102>
 8014d20:	2120      	movs	r1, #32
 8014d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d24:	1c5a      	adds	r2, r3, #1
 8014d26:	627a      	str	r2, [r7, #36]	; 0x24
 8014d28:	68fa      	ldr	r2, [r7, #12]
 8014d2a:	4413      	add	r3, r2
 8014d2c:	460a      	mov	r2, r1
 8014d2e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8014d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d32:	2b07      	cmp	r3, #7
 8014d34:	d9e8      	bls.n	8014d08 <gen_numname+0xe8>
}
 8014d36:	bf00      	nop
 8014d38:	bf00      	nop
 8014d3a:	3730      	adds	r7, #48	; 0x30
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bd80      	pop	{r7, pc}

08014d40 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8014d40:	b480      	push	{r7}
 8014d42:	b085      	sub	sp, #20
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8014d4c:	230b      	movs	r3, #11
 8014d4e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014d50:	7bfb      	ldrb	r3, [r7, #15]
 8014d52:	b2da      	uxtb	r2, r3
 8014d54:	0852      	lsrs	r2, r2, #1
 8014d56:	01db      	lsls	r3, r3, #7
 8014d58:	4313      	orrs	r3, r2
 8014d5a:	b2da      	uxtb	r2, r3
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	1c59      	adds	r1, r3, #1
 8014d60:	6079      	str	r1, [r7, #4]
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	4413      	add	r3, r2
 8014d66:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	3b01      	subs	r3, #1
 8014d6c:	60bb      	str	r3, [r7, #8]
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d1ed      	bne.n	8014d50 <sum_sfn+0x10>
	return sum;
 8014d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	3714      	adds	r7, #20
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d80:	4770      	bx	lr

08014d82 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8014d82:	b580      	push	{r7, lr}
 8014d84:	b086      	sub	sp, #24
 8014d86:	af00      	add	r7, sp, #0
 8014d88:	6078      	str	r0, [r7, #4]
 8014d8a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8014d8c:	2304      	movs	r3, #4
 8014d8e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8014d96:	23ff      	movs	r3, #255	; 0xff
 8014d98:	757b      	strb	r3, [r7, #21]
 8014d9a:	23ff      	movs	r3, #255	; 0xff
 8014d9c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8014d9e:	e081      	b.n	8014ea4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	69db      	ldr	r3, [r3, #28]
 8014da4:	4619      	mov	r1, r3
 8014da6:	6938      	ldr	r0, [r7, #16]
 8014da8:	f7ff f8b8 	bl	8013f1c <move_window>
 8014dac:	4603      	mov	r3, r0
 8014dae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014db0:	7dfb      	ldrb	r3, [r7, #23]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d17c      	bne.n	8014eb0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6a1b      	ldr	r3, [r3, #32]
 8014dba:	781b      	ldrb	r3, [r3, #0]
 8014dbc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8014dbe:	7dbb      	ldrb	r3, [r7, #22]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d102      	bne.n	8014dca <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8014dc4:	2304      	movs	r3, #4
 8014dc6:	75fb      	strb	r3, [r7, #23]
 8014dc8:	e077      	b.n	8014eba <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	6a1b      	ldr	r3, [r3, #32]
 8014dce:	330b      	adds	r3, #11
 8014dd0:	781b      	ldrb	r3, [r3, #0]
 8014dd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014dd6:	73fb      	strb	r3, [r7, #15]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	7bfa      	ldrb	r2, [r7, #15]
 8014ddc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8014dde:	7dbb      	ldrb	r3, [r7, #22]
 8014de0:	2be5      	cmp	r3, #229	; 0xe5
 8014de2:	d00e      	beq.n	8014e02 <dir_read+0x80>
 8014de4:	7dbb      	ldrb	r3, [r7, #22]
 8014de6:	2b2e      	cmp	r3, #46	; 0x2e
 8014de8:	d00b      	beq.n	8014e02 <dir_read+0x80>
 8014dea:	7bfb      	ldrb	r3, [r7, #15]
 8014dec:	f023 0320 	bic.w	r3, r3, #32
 8014df0:	2b08      	cmp	r3, #8
 8014df2:	bf0c      	ite	eq
 8014df4:	2301      	moveq	r3, #1
 8014df6:	2300      	movne	r3, #0
 8014df8:	b2db      	uxtb	r3, r3
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	683b      	ldr	r3, [r7, #0]
 8014dfe:	4293      	cmp	r3, r2
 8014e00:	d002      	beq.n	8014e08 <dir_read+0x86>
				ord = 0xFF;
 8014e02:	23ff      	movs	r3, #255	; 0xff
 8014e04:	757b      	strb	r3, [r7, #21]
 8014e06:	e044      	b.n	8014e92 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8014e08:	7bfb      	ldrb	r3, [r7, #15]
 8014e0a:	2b0f      	cmp	r3, #15
 8014e0c:	d12f      	bne.n	8014e6e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8014e0e:	7dbb      	ldrb	r3, [r7, #22]
 8014e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d00d      	beq.n	8014e34 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	6a1b      	ldr	r3, [r3, #32]
 8014e1c:	7b5b      	ldrb	r3, [r3, #13]
 8014e1e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8014e20:	7dbb      	ldrb	r3, [r7, #22]
 8014e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014e26:	75bb      	strb	r3, [r7, #22]
 8014e28:	7dbb      	ldrb	r3, [r7, #22]
 8014e2a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	695a      	ldr	r2, [r3, #20]
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014e34:	7dba      	ldrb	r2, [r7, #22]
 8014e36:	7d7b      	ldrb	r3, [r7, #21]
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d115      	bne.n	8014e68 <dir_read+0xe6>
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	6a1b      	ldr	r3, [r3, #32]
 8014e40:	330d      	adds	r3, #13
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	7d3a      	ldrb	r2, [r7, #20]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d10e      	bne.n	8014e68 <dir_read+0xe6>
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	68da      	ldr	r2, [r3, #12]
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	6a1b      	ldr	r3, [r3, #32]
 8014e52:	4619      	mov	r1, r3
 8014e54:	4610      	mov	r0, r2
 8014e56:	f7ff fe17 	bl	8014a88 <pick_lfn>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d003      	beq.n	8014e68 <dir_read+0xe6>
 8014e60:	7d7b      	ldrb	r3, [r7, #21]
 8014e62:	3b01      	subs	r3, #1
 8014e64:	b2db      	uxtb	r3, r3
 8014e66:	e000      	b.n	8014e6a <dir_read+0xe8>
 8014e68:	23ff      	movs	r3, #255	; 0xff
 8014e6a:	757b      	strb	r3, [r7, #21]
 8014e6c:	e011      	b.n	8014e92 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8014e6e:	7d7b      	ldrb	r3, [r7, #21]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d109      	bne.n	8014e88 <dir_read+0x106>
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	6a1b      	ldr	r3, [r3, #32]
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f7ff ff61 	bl	8014d40 <sum_sfn>
 8014e7e:	4603      	mov	r3, r0
 8014e80:	461a      	mov	r2, r3
 8014e82:	7d3b      	ldrb	r3, [r7, #20]
 8014e84:	4293      	cmp	r3, r2
 8014e86:	d015      	beq.n	8014eb4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8014e8e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8014e90:	e010      	b.n	8014eb4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8014e92:	2100      	movs	r1, #0
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f7ff fc3c 	bl	8014712 <dir_next>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014e9e:	7dfb      	ldrb	r3, [r7, #23]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d109      	bne.n	8014eb8 <dir_read+0x136>
	while (dp->sect) {
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	69db      	ldr	r3, [r3, #28]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	f47f af79 	bne.w	8014da0 <dir_read+0x1e>
 8014eae:	e004      	b.n	8014eba <dir_read+0x138>
		if (res != FR_OK) break;
 8014eb0:	bf00      	nop
 8014eb2:	e002      	b.n	8014eba <dir_read+0x138>
					break;
 8014eb4:	bf00      	nop
 8014eb6:	e000      	b.n	8014eba <dir_read+0x138>
		if (res != FR_OK) break;
 8014eb8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014eba:	7dfb      	ldrb	r3, [r7, #23]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d002      	beq.n	8014ec6 <dir_read+0x144>
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	61da      	str	r2, [r3, #28]
	return res;
 8014ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3718      	adds	r7, #24
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}

08014ed0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b086      	sub	sp, #24
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014ede:	2100      	movs	r1, #0
 8014ee0:	6878      	ldr	r0, [r7, #4]
 8014ee2:	f7ff fb9b 	bl	801461c <dir_sdi>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8014eea:	7dfb      	ldrb	r3, [r7, #23]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d001      	beq.n	8014ef4 <dir_find+0x24>
 8014ef0:	7dfb      	ldrb	r3, [r7, #23]
 8014ef2:	e0a9      	b.n	8015048 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014ef4:	23ff      	movs	r3, #255	; 0xff
 8014ef6:	753b      	strb	r3, [r7, #20]
 8014ef8:	7d3b      	ldrb	r3, [r7, #20]
 8014efa:	757b      	strb	r3, [r7, #21]
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f04f 32ff 	mov.w	r2, #4294967295
 8014f02:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	69db      	ldr	r3, [r3, #28]
 8014f08:	4619      	mov	r1, r3
 8014f0a:	6938      	ldr	r0, [r7, #16]
 8014f0c:	f7ff f806 	bl	8013f1c <move_window>
 8014f10:	4603      	mov	r3, r0
 8014f12:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014f14:	7dfb      	ldrb	r3, [r7, #23]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	f040 8090 	bne.w	801503c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6a1b      	ldr	r3, [r3, #32]
 8014f20:	781b      	ldrb	r3, [r3, #0]
 8014f22:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014f24:	7dbb      	ldrb	r3, [r7, #22]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d102      	bne.n	8014f30 <dir_find+0x60>
 8014f2a:	2304      	movs	r3, #4
 8014f2c:	75fb      	strb	r3, [r7, #23]
 8014f2e:	e08a      	b.n	8015046 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	6a1b      	ldr	r3, [r3, #32]
 8014f34:	330b      	adds	r3, #11
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f3c:	73fb      	strb	r3, [r7, #15]
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	7bfa      	ldrb	r2, [r7, #15]
 8014f42:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8014f44:	7dbb      	ldrb	r3, [r7, #22]
 8014f46:	2be5      	cmp	r3, #229	; 0xe5
 8014f48:	d007      	beq.n	8014f5a <dir_find+0x8a>
 8014f4a:	7bfb      	ldrb	r3, [r7, #15]
 8014f4c:	f003 0308 	and.w	r3, r3, #8
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d009      	beq.n	8014f68 <dir_find+0x98>
 8014f54:	7bfb      	ldrb	r3, [r7, #15]
 8014f56:	2b0f      	cmp	r3, #15
 8014f58:	d006      	beq.n	8014f68 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014f5a:	23ff      	movs	r3, #255	; 0xff
 8014f5c:	757b      	strb	r3, [r7, #21]
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	f04f 32ff 	mov.w	r2, #4294967295
 8014f64:	631a      	str	r2, [r3, #48]	; 0x30
 8014f66:	e05e      	b.n	8015026 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8014f68:	7bfb      	ldrb	r3, [r7, #15]
 8014f6a:	2b0f      	cmp	r3, #15
 8014f6c:	d136      	bne.n	8014fdc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d154      	bne.n	8015026 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8014f7c:	7dbb      	ldrb	r3, [r7, #22]
 8014f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d00d      	beq.n	8014fa2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6a1b      	ldr	r3, [r3, #32]
 8014f8a:	7b5b      	ldrb	r3, [r3, #13]
 8014f8c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8014f8e:	7dbb      	ldrb	r3, [r7, #22]
 8014f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f94:	75bb      	strb	r3, [r7, #22]
 8014f96:	7dbb      	ldrb	r3, [r7, #22]
 8014f98:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	695a      	ldr	r2, [r3, #20]
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014fa2:	7dba      	ldrb	r2, [r7, #22]
 8014fa4:	7d7b      	ldrb	r3, [r7, #21]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d115      	bne.n	8014fd6 <dir_find+0x106>
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	6a1b      	ldr	r3, [r3, #32]
 8014fae:	330d      	adds	r3, #13
 8014fb0:	781b      	ldrb	r3, [r3, #0]
 8014fb2:	7d3a      	ldrb	r2, [r7, #20]
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	d10e      	bne.n	8014fd6 <dir_find+0x106>
 8014fb8:	693b      	ldr	r3, [r7, #16]
 8014fba:	68da      	ldr	r2, [r3, #12]
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	6a1b      	ldr	r3, [r3, #32]
 8014fc0:	4619      	mov	r1, r3
 8014fc2:	4610      	mov	r0, r2
 8014fc4:	f7ff fcf0 	bl	80149a8 <cmp_lfn>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d003      	beq.n	8014fd6 <dir_find+0x106>
 8014fce:	7d7b      	ldrb	r3, [r7, #21]
 8014fd0:	3b01      	subs	r3, #1
 8014fd2:	b2db      	uxtb	r3, r3
 8014fd4:	e000      	b.n	8014fd8 <dir_find+0x108>
 8014fd6:	23ff      	movs	r3, #255	; 0xff
 8014fd8:	757b      	strb	r3, [r7, #21]
 8014fda:	e024      	b.n	8015026 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8014fdc:	7d7b      	ldrb	r3, [r7, #21]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d109      	bne.n	8014ff6 <dir_find+0x126>
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	6a1b      	ldr	r3, [r3, #32]
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f7ff feaa 	bl	8014d40 <sum_sfn>
 8014fec:	4603      	mov	r3, r0
 8014fee:	461a      	mov	r2, r3
 8014ff0:	7d3b      	ldrb	r3, [r7, #20]
 8014ff2:	4293      	cmp	r3, r2
 8014ff4:	d024      	beq.n	8015040 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014ffc:	f003 0301 	and.w	r3, r3, #1
 8015000:	2b00      	cmp	r3, #0
 8015002:	d10a      	bne.n	801501a <dir_find+0x14a>
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6a18      	ldr	r0, [r3, #32]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	3324      	adds	r3, #36	; 0x24
 801500c:	220b      	movs	r2, #11
 801500e:	4619      	mov	r1, r3
 8015010:	f7fe fd92 	bl	8013b38 <mem_cmp>
 8015014:	4603      	mov	r3, r0
 8015016:	2b00      	cmp	r3, #0
 8015018:	d014      	beq.n	8015044 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801501a:	23ff      	movs	r3, #255	; 0xff
 801501c:	757b      	strb	r3, [r7, #21]
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	f04f 32ff 	mov.w	r2, #4294967295
 8015024:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015026:	2100      	movs	r1, #0
 8015028:	6878      	ldr	r0, [r7, #4]
 801502a:	f7ff fb72 	bl	8014712 <dir_next>
 801502e:	4603      	mov	r3, r0
 8015030:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015032:	7dfb      	ldrb	r3, [r7, #23]
 8015034:	2b00      	cmp	r3, #0
 8015036:	f43f af65 	beq.w	8014f04 <dir_find+0x34>
 801503a:	e004      	b.n	8015046 <dir_find+0x176>
		if (res != FR_OK) break;
 801503c:	bf00      	nop
 801503e:	e002      	b.n	8015046 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015040:	bf00      	nop
 8015042:	e000      	b.n	8015046 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015044:	bf00      	nop

	return res;
 8015046:	7dfb      	ldrb	r3, [r7, #23]
}
 8015048:	4618      	mov	r0, r3
 801504a:	3718      	adds	r7, #24
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b08c      	sub	sp, #48	; 0x30
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015064:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8015068:	2b00      	cmp	r3, #0
 801506a:	d001      	beq.n	8015070 <dir_register+0x20>
 801506c:	2306      	movs	r3, #6
 801506e:	e0e0      	b.n	8015232 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015070:	2300      	movs	r3, #0
 8015072:	627b      	str	r3, [r7, #36]	; 0x24
 8015074:	e002      	b.n	801507c <dir_register+0x2c>
 8015076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015078:	3301      	adds	r3, #1
 801507a:	627b      	str	r3, [r7, #36]	; 0x24
 801507c:	69fb      	ldr	r3, [r7, #28]
 801507e:	68da      	ldr	r2, [r3, #12]
 8015080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015082:	005b      	lsls	r3, r3, #1
 8015084:	4413      	add	r3, r2
 8015086:	881b      	ldrh	r3, [r3, #0]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d1f4      	bne.n	8015076 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8015092:	f107 030c 	add.w	r3, r7, #12
 8015096:	220c      	movs	r2, #12
 8015098:	4618      	mov	r0, r3
 801509a:	f7fe fd11 	bl	8013ac0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801509e:	7dfb      	ldrb	r3, [r7, #23]
 80150a0:	f003 0301 	and.w	r3, r3, #1
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d032      	beq.n	801510e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2240      	movs	r2, #64	; 0x40
 80150ac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80150b0:	2301      	movs	r3, #1
 80150b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80150b4:	e016      	b.n	80150e4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80150bc:	69fb      	ldr	r3, [r7, #28]
 80150be:	68da      	ldr	r2, [r3, #12]
 80150c0:	f107 010c 	add.w	r1, r7, #12
 80150c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150c6:	f7ff fdab 	bl	8014c20 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f7ff ff00 	bl	8014ed0 <dir_find>
 80150d0:	4603      	mov	r3, r0
 80150d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80150d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d106      	bne.n	80150ec <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80150de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e0:	3301      	adds	r3, #1
 80150e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80150e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e6:	2b63      	cmp	r3, #99	; 0x63
 80150e8:	d9e5      	bls.n	80150b6 <dir_register+0x66>
 80150ea:	e000      	b.n	80150ee <dir_register+0x9e>
			if (res != FR_OK) break;
 80150ec:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80150ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f0:	2b64      	cmp	r3, #100	; 0x64
 80150f2:	d101      	bne.n	80150f8 <dir_register+0xa8>
 80150f4:	2307      	movs	r3, #7
 80150f6:	e09c      	b.n	8015232 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80150f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150fc:	2b04      	cmp	r3, #4
 80150fe:	d002      	beq.n	8015106 <dir_register+0xb6>
 8015100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015104:	e095      	b.n	8015232 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015106:	7dfa      	ldrb	r2, [r7, #23]
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801510e:	7dfb      	ldrb	r3, [r7, #23]
 8015110:	f003 0302 	and.w	r3, r3, #2
 8015114:	2b00      	cmp	r3, #0
 8015116:	d007      	beq.n	8015128 <dir_register+0xd8>
 8015118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801511a:	330c      	adds	r3, #12
 801511c:	4a47      	ldr	r2, [pc, #284]	; (801523c <dir_register+0x1ec>)
 801511e:	fba2 2303 	umull	r2, r3, r2, r3
 8015122:	089b      	lsrs	r3, r3, #2
 8015124:	3301      	adds	r3, #1
 8015126:	e000      	b.n	801512a <dir_register+0xda>
 8015128:	2301      	movs	r3, #1
 801512a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801512c:	6a39      	ldr	r1, [r7, #32]
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f7ff fbb4 	bl	801489c <dir_alloc>
 8015134:	4603      	mov	r3, r0
 8015136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801513a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801513e:	2b00      	cmp	r3, #0
 8015140:	d148      	bne.n	80151d4 <dir_register+0x184>
 8015142:	6a3b      	ldr	r3, [r7, #32]
 8015144:	3b01      	subs	r3, #1
 8015146:	623b      	str	r3, [r7, #32]
 8015148:	6a3b      	ldr	r3, [r7, #32]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d042      	beq.n	80151d4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	695a      	ldr	r2, [r3, #20]
 8015152:	6a3b      	ldr	r3, [r7, #32]
 8015154:	015b      	lsls	r3, r3, #5
 8015156:	1ad3      	subs	r3, r2, r3
 8015158:	4619      	mov	r1, r3
 801515a:	6878      	ldr	r0, [r7, #4]
 801515c:	f7ff fa5e 	bl	801461c <dir_sdi>
 8015160:	4603      	mov	r3, r0
 8015162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801516a:	2b00      	cmp	r3, #0
 801516c:	d132      	bne.n	80151d4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	3324      	adds	r3, #36	; 0x24
 8015172:	4618      	mov	r0, r3
 8015174:	f7ff fde4 	bl	8014d40 <sum_sfn>
 8015178:	4603      	mov	r3, r0
 801517a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	69db      	ldr	r3, [r3, #28]
 8015180:	4619      	mov	r1, r3
 8015182:	69f8      	ldr	r0, [r7, #28]
 8015184:	f7fe feca 	bl	8013f1c <move_window>
 8015188:	4603      	mov	r3, r0
 801518a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801518e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015192:	2b00      	cmp	r3, #0
 8015194:	d11d      	bne.n	80151d2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015196:	69fb      	ldr	r3, [r7, #28]
 8015198:	68d8      	ldr	r0, [r3, #12]
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	6a19      	ldr	r1, [r3, #32]
 801519e:	6a3b      	ldr	r3, [r7, #32]
 80151a0:	b2da      	uxtb	r2, r3
 80151a2:	7efb      	ldrb	r3, [r7, #27]
 80151a4:	f7ff fcd4 	bl	8014b50 <put_lfn>
				fs->wflag = 1;
 80151a8:	69fb      	ldr	r3, [r7, #28]
 80151aa:	2201      	movs	r2, #1
 80151ac:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80151ae:	2100      	movs	r1, #0
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	f7ff faae 	bl	8014712 <dir_next>
 80151b6:	4603      	mov	r3, r0
 80151b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80151bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d107      	bne.n	80151d4 <dir_register+0x184>
 80151c4:	6a3b      	ldr	r3, [r7, #32]
 80151c6:	3b01      	subs	r3, #1
 80151c8:	623b      	str	r3, [r7, #32]
 80151ca:	6a3b      	ldr	r3, [r7, #32]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d1d5      	bne.n	801517c <dir_register+0x12c>
 80151d0:	e000      	b.n	80151d4 <dir_register+0x184>
				if (res != FR_OK) break;
 80151d2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80151d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d128      	bne.n	801522e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	69db      	ldr	r3, [r3, #28]
 80151e0:	4619      	mov	r1, r3
 80151e2:	69f8      	ldr	r0, [r7, #28]
 80151e4:	f7fe fe9a 	bl	8013f1c <move_window>
 80151e8:	4603      	mov	r3, r0
 80151ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80151ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d11b      	bne.n	801522e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6a1b      	ldr	r3, [r3, #32]
 80151fa:	2220      	movs	r2, #32
 80151fc:	2100      	movs	r1, #0
 80151fe:	4618      	mov	r0, r3
 8015200:	f7fe fc7f 	bl	8013b02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	6a18      	ldr	r0, [r3, #32]
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	3324      	adds	r3, #36	; 0x24
 801520c:	220b      	movs	r2, #11
 801520e:	4619      	mov	r1, r3
 8015210:	f7fe fc56 	bl	8013ac0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	6a1b      	ldr	r3, [r3, #32]
 801521e:	330c      	adds	r3, #12
 8015220:	f002 0218 	and.w	r2, r2, #24
 8015224:	b2d2      	uxtb	r2, r2
 8015226:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015228:	69fb      	ldr	r3, [r7, #28]
 801522a:	2201      	movs	r2, #1
 801522c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801522e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015232:	4618      	mov	r0, r3
 8015234:	3730      	adds	r7, #48	; 0x30
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
 801523a:	bf00      	nop
 801523c:	4ec4ec4f 	.word	0x4ec4ec4f

08015240 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b088      	sub	sp, #32
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
 8015248:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	2200      	movs	r2, #0
 8015254:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	69db      	ldr	r3, [r3, #28]
 801525a:	2b00      	cmp	r3, #0
 801525c:	f000 80c9 	beq.w	80153f2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015268:	d032      	beq.n	80152d0 <get_fileinfo+0x90>
			i = j = 0;
 801526a:	2300      	movs	r3, #0
 801526c:	61bb      	str	r3, [r7, #24]
 801526e:	69bb      	ldr	r3, [r7, #24]
 8015270:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8015272:	e01b      	b.n	80152ac <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8015274:	89fb      	ldrh	r3, [r7, #14]
 8015276:	2100      	movs	r1, #0
 8015278:	4618      	mov	r0, r3
 801527a:	f001 fed3 	bl	8017024 <ff_convert>
 801527e:	4603      	mov	r3, r0
 8015280:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8015282:	89fb      	ldrh	r3, [r7, #14]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d102      	bne.n	801528e <get_fileinfo+0x4e>
 8015288:	2300      	movs	r3, #0
 801528a:	61fb      	str	r3, [r7, #28]
 801528c:	e01a      	b.n	80152c4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	2bfe      	cmp	r3, #254	; 0xfe
 8015292:	d902      	bls.n	801529a <get_fileinfo+0x5a>
 8015294:	2300      	movs	r3, #0
 8015296:	61fb      	str	r3, [r7, #28]
 8015298:	e014      	b.n	80152c4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801529a:	69fb      	ldr	r3, [r7, #28]
 801529c:	1c5a      	adds	r2, r3, #1
 801529e:	61fa      	str	r2, [r7, #28]
 80152a0:	89fa      	ldrh	r2, [r7, #14]
 80152a2:	b2d1      	uxtb	r1, r2
 80152a4:	683a      	ldr	r2, [r7, #0]
 80152a6:	4413      	add	r3, r2
 80152a8:	460a      	mov	r2, r1
 80152aa:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80152ac:	693b      	ldr	r3, [r7, #16]
 80152ae:	68da      	ldr	r2, [r3, #12]
 80152b0:	69bb      	ldr	r3, [r7, #24]
 80152b2:	1c59      	adds	r1, r3, #1
 80152b4:	61b9      	str	r1, [r7, #24]
 80152b6:	005b      	lsls	r3, r3, #1
 80152b8:	4413      	add	r3, r2
 80152ba:	881b      	ldrh	r3, [r3, #0]
 80152bc:	81fb      	strh	r3, [r7, #14]
 80152be:	89fb      	ldrh	r3, [r7, #14]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d1d7      	bne.n	8015274 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80152c4:	683a      	ldr	r2, [r7, #0]
 80152c6:	69fb      	ldr	r3, [r7, #28]
 80152c8:	4413      	add	r3, r2
 80152ca:	3316      	adds	r3, #22
 80152cc:	2200      	movs	r2, #0
 80152ce:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80152d0:	2300      	movs	r3, #0
 80152d2:	61bb      	str	r3, [r7, #24]
 80152d4:	69bb      	ldr	r3, [r7, #24]
 80152d6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80152d8:	683a      	ldr	r2, [r7, #0]
 80152da:	69fb      	ldr	r3, [r7, #28]
 80152dc:	4413      	add	r3, r2
 80152de:	3316      	adds	r3, #22
 80152e0:	781b      	ldrb	r3, [r3, #0]
 80152e2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80152e4:	e04c      	b.n	8015380 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6a1a      	ldr	r2, [r3, #32]
 80152ea:	69fb      	ldr	r3, [r7, #28]
 80152ec:	1c59      	adds	r1, r3, #1
 80152ee:	61f9      	str	r1, [r7, #28]
 80152f0:	4413      	add	r3, r2
 80152f2:	781b      	ldrb	r3, [r3, #0]
 80152f4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80152f6:	7dfb      	ldrb	r3, [r7, #23]
 80152f8:	2b20      	cmp	r3, #32
 80152fa:	d100      	bne.n	80152fe <get_fileinfo+0xbe>
 80152fc:	e040      	b.n	8015380 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80152fe:	7dfb      	ldrb	r3, [r7, #23]
 8015300:	2b05      	cmp	r3, #5
 8015302:	d101      	bne.n	8015308 <get_fileinfo+0xc8>
 8015304:	23e5      	movs	r3, #229	; 0xe5
 8015306:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8015308:	69fb      	ldr	r3, [r7, #28]
 801530a:	2b09      	cmp	r3, #9
 801530c:	d10f      	bne.n	801532e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801530e:	89bb      	ldrh	r3, [r7, #12]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d105      	bne.n	8015320 <get_fileinfo+0xe0>
 8015314:	683a      	ldr	r2, [r7, #0]
 8015316:	69bb      	ldr	r3, [r7, #24]
 8015318:	4413      	add	r3, r2
 801531a:	3316      	adds	r3, #22
 801531c:	222e      	movs	r2, #46	; 0x2e
 801531e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8015320:	69bb      	ldr	r3, [r7, #24]
 8015322:	1c5a      	adds	r2, r3, #1
 8015324:	61ba      	str	r2, [r7, #24]
 8015326:	683a      	ldr	r2, [r7, #0]
 8015328:	4413      	add	r3, r2
 801532a:	222e      	movs	r2, #46	; 0x2e
 801532c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801532e:	683a      	ldr	r2, [r7, #0]
 8015330:	69bb      	ldr	r3, [r7, #24]
 8015332:	4413      	add	r3, r2
 8015334:	3309      	adds	r3, #9
 8015336:	7dfa      	ldrb	r2, [r7, #23]
 8015338:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801533a:	89bb      	ldrh	r3, [r7, #12]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d11c      	bne.n	801537a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8015340:	7dfb      	ldrb	r3, [r7, #23]
 8015342:	2b40      	cmp	r3, #64	; 0x40
 8015344:	d913      	bls.n	801536e <get_fileinfo+0x12e>
 8015346:	7dfb      	ldrb	r3, [r7, #23]
 8015348:	2b5a      	cmp	r3, #90	; 0x5a
 801534a:	d810      	bhi.n	801536e <get_fileinfo+0x12e>
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	6a1b      	ldr	r3, [r3, #32]
 8015350:	330c      	adds	r3, #12
 8015352:	781b      	ldrb	r3, [r3, #0]
 8015354:	461a      	mov	r2, r3
 8015356:	69fb      	ldr	r3, [r7, #28]
 8015358:	2b08      	cmp	r3, #8
 801535a:	d901      	bls.n	8015360 <get_fileinfo+0x120>
 801535c:	2310      	movs	r3, #16
 801535e:	e000      	b.n	8015362 <get_fileinfo+0x122>
 8015360:	2308      	movs	r3, #8
 8015362:	4013      	ands	r3, r2
 8015364:	2b00      	cmp	r3, #0
 8015366:	d002      	beq.n	801536e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8015368:	7dfb      	ldrb	r3, [r7, #23]
 801536a:	3320      	adds	r3, #32
 801536c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801536e:	683a      	ldr	r2, [r7, #0]
 8015370:	69bb      	ldr	r3, [r7, #24]
 8015372:	4413      	add	r3, r2
 8015374:	3316      	adds	r3, #22
 8015376:	7dfa      	ldrb	r2, [r7, #23]
 8015378:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801537a:	69bb      	ldr	r3, [r7, #24]
 801537c:	3301      	adds	r3, #1
 801537e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	2b0a      	cmp	r3, #10
 8015384:	d9af      	bls.n	80152e6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8015386:	89bb      	ldrh	r3, [r7, #12]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d10d      	bne.n	80153a8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 801538c:	683a      	ldr	r2, [r7, #0]
 801538e:	69bb      	ldr	r3, [r7, #24]
 8015390:	4413      	add	r3, r2
 8015392:	3316      	adds	r3, #22
 8015394:	2200      	movs	r2, #0
 8015396:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6a1b      	ldr	r3, [r3, #32]
 801539c:	330c      	adds	r3, #12
 801539e:	781b      	ldrb	r3, [r3, #0]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d101      	bne.n	80153a8 <get_fileinfo+0x168>
 80153a4:	2300      	movs	r3, #0
 80153a6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80153a8:	683a      	ldr	r2, [r7, #0]
 80153aa:	69bb      	ldr	r3, [r7, #24]
 80153ac:	4413      	add	r3, r2
 80153ae:	3309      	adds	r3, #9
 80153b0:	2200      	movs	r2, #0
 80153b2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	6a1b      	ldr	r3, [r3, #32]
 80153b8:	7ada      	ldrb	r2, [r3, #11]
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6a1b      	ldr	r3, [r3, #32]
 80153c2:	331c      	adds	r3, #28
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7fe fb11 	bl	80139ec <ld_dword>
 80153ca:	4602      	mov	r2, r0
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6a1b      	ldr	r3, [r3, #32]
 80153d4:	3316      	adds	r3, #22
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7fe fb08 	bl	80139ec <ld_dword>
 80153dc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	b29a      	uxth	r2, r3
 80153e2:	683b      	ldr	r3, [r7, #0]
 80153e4:	80da      	strh	r2, [r3, #6]
 80153e6:	68bb      	ldr	r3, [r7, #8]
 80153e8:	0c1b      	lsrs	r3, r3, #16
 80153ea:	b29a      	uxth	r2, r3
 80153ec:	683b      	ldr	r3, [r7, #0]
 80153ee:	809a      	strh	r2, [r3, #4]
 80153f0:	e000      	b.n	80153f4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80153f2:	bf00      	nop
}
 80153f4:	3720      	adds	r7, #32
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
	...

080153fc <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80153fc:	b480      	push	{r7}
 80153fe:	b085      	sub	sp, #20
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	1c59      	adds	r1, r3, #1
 801540a:	687a      	ldr	r2, [r7, #4]
 801540c:	6011      	str	r1, [r2, #0]
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8015412:	89fb      	ldrh	r3, [r7, #14]
 8015414:	2b60      	cmp	r3, #96	; 0x60
 8015416:	d905      	bls.n	8015424 <get_achar+0x28>
 8015418:	89fb      	ldrh	r3, [r7, #14]
 801541a:	2b7a      	cmp	r3, #122	; 0x7a
 801541c:	d802      	bhi.n	8015424 <get_achar+0x28>
 801541e:	89fb      	ldrh	r3, [r7, #14]
 8015420:	3b20      	subs	r3, #32
 8015422:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8015424:	89fb      	ldrh	r3, [r7, #14]
 8015426:	2b7f      	cmp	r3, #127	; 0x7f
 8015428:	d904      	bls.n	8015434 <get_achar+0x38>
 801542a:	89fb      	ldrh	r3, [r7, #14]
 801542c:	3b80      	subs	r3, #128	; 0x80
 801542e:	4a05      	ldr	r2, [pc, #20]	; (8015444 <get_achar+0x48>)
 8015430:	5cd3      	ldrb	r3, [r2, r3]
 8015432:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8015434:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8015436:	4618      	mov	r0, r3
 8015438:	3714      	adds	r7, #20
 801543a:	46bd      	mov	sp, r7
 801543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015440:	4770      	bx	lr
 8015442:	bf00      	nop
 8015444:	0802282c 	.word	0x0802282c

08015448 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b08a      	sub	sp, #40	; 0x28
 801544c:	af00      	add	r7, sp, #0
 801544e:	60f8      	str	r0, [r7, #12]
 8015450:	60b9      	str	r1, [r7, #8]
 8015452:	607a      	str	r2, [r7, #4]
 8015454:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8015456:	e009      	b.n	801546c <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8015458:	f107 0308 	add.w	r3, r7, #8
 801545c:	4618      	mov	r0, r3
 801545e:	f7ff ffcd 	bl	80153fc <get_achar>
 8015462:	4603      	mov	r3, r0
 8015464:	2b00      	cmp	r3, #0
 8015466:	d101      	bne.n	801546c <pattern_matching+0x24>
 8015468:	2300      	movs	r3, #0
 801546a:	e064      	b.n	8015536 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	1e5a      	subs	r2, r3, #1
 8015470:	607a      	str	r2, [r7, #4]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d1f0      	bne.n	8015458 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	781b      	ldrb	r3, [r3, #0]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d104      	bne.n	8015488 <pattern_matching+0x40>
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d001      	beq.n	8015488 <pattern_matching+0x40>
 8015484:	2301      	movs	r3, #1
 8015486:	e056      	b.n	8015536 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	617b      	str	r3, [r7, #20]
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	781b      	ldrb	r3, [r3, #0]
 8015494:	2b3f      	cmp	r3, #63	; 0x3f
 8015496:	d003      	beq.n	80154a0 <pattern_matching+0x58>
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	781b      	ldrb	r3, [r3, #0]
 801549c:	2b2a      	cmp	r3, #42	; 0x2a
 801549e:	d126      	bne.n	80154ee <pattern_matching+0xa6>
				nm = nx = 0;
 80154a0:	2300      	movs	r3, #0
 80154a2:	61fb      	str	r3, [r7, #28]
 80154a4:	69fb      	ldr	r3, [r7, #28]
 80154a6:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	1c5a      	adds	r2, r3, #1
 80154ac:	617a      	str	r2, [r7, #20]
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	2b3f      	cmp	r3, #63	; 0x3f
 80154b2:	d103      	bne.n	80154bc <pattern_matching+0x74>
 80154b4:	6a3b      	ldr	r3, [r7, #32]
 80154b6:	3301      	adds	r3, #1
 80154b8:	623b      	str	r3, [r7, #32]
 80154ba:	e001      	b.n	80154c0 <pattern_matching+0x78>
 80154bc:	2301      	movs	r3, #1
 80154be:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	2b3f      	cmp	r3, #63	; 0x3f
 80154c6:	d0ef      	beq.n	80154a8 <pattern_matching+0x60>
 80154c8:	697b      	ldr	r3, [r7, #20]
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	2b2a      	cmp	r3, #42	; 0x2a
 80154ce:	d0eb      	beq.n	80154a8 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80154d0:	6978      	ldr	r0, [r7, #20]
 80154d2:	6939      	ldr	r1, [r7, #16]
 80154d4:	69fb      	ldr	r3, [r7, #28]
 80154d6:	6a3a      	ldr	r2, [r7, #32]
 80154d8:	f7ff ffb6 	bl	8015448 <pattern_matching>
 80154dc:	4603      	mov	r3, r0
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d001      	beq.n	80154e6 <pattern_matching+0x9e>
 80154e2:	2301      	movs	r3, #1
 80154e4:	e027      	b.n	8015536 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80154e6:	693b      	ldr	r3, [r7, #16]
 80154e8:	781b      	ldrb	r3, [r3, #0]
 80154ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80154ec:	e017      	b.n	801551e <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80154ee:	f107 0314 	add.w	r3, r7, #20
 80154f2:	4618      	mov	r0, r3
 80154f4:	f7ff ff82 	bl	80153fc <get_achar>
 80154f8:	4603      	mov	r3, r0
 80154fa:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80154fc:	f107 0310 	add.w	r3, r7, #16
 8015500:	4618      	mov	r0, r3
 8015502:	f7ff ff7b 	bl	80153fc <get_achar>
 8015506:	4603      	mov	r3, r0
 8015508:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 801550a:	8b7a      	ldrh	r2, [r7, #26]
 801550c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801550e:	429a      	cmp	r2, r3
 8015510:	d104      	bne.n	801551c <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8015512:	8b7b      	ldrh	r3, [r7, #26]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d1bb      	bne.n	8015490 <pattern_matching+0x48>
 8015518:	2301      	movs	r3, #1
 801551a:	e00c      	b.n	8015536 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 801551c:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 801551e:	f107 0308 	add.w	r3, r7, #8
 8015522:	4618      	mov	r0, r3
 8015524:	f7ff ff6a 	bl	80153fc <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d002      	beq.n	8015534 <pattern_matching+0xec>
 801552e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015530:	2b00      	cmp	r3, #0
 8015532:	d1a9      	bne.n	8015488 <pattern_matching+0x40>

	return 0;
 8015534:	2300      	movs	r3, #0
}
 8015536:	4618      	mov	r0, r3
 8015538:	3728      	adds	r7, #40	; 0x28
 801553a:	46bd      	mov	sp, r7
 801553c:	bd80      	pop	{r7, pc}
	...

08015540 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b08a      	sub	sp, #40	; 0x28
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
 8015548:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	613b      	str	r3, [r7, #16]
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	68db      	ldr	r3, [r3, #12]
 8015556:	60fb      	str	r3, [r7, #12]
 8015558:	2300      	movs	r3, #0
 801555a:	617b      	str	r3, [r7, #20]
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8015560:	69bb      	ldr	r3, [r7, #24]
 8015562:	1c5a      	adds	r2, r3, #1
 8015564:	61ba      	str	r2, [r7, #24]
 8015566:	693a      	ldr	r2, [r7, #16]
 8015568:	4413      	add	r3, r2
 801556a:	781b      	ldrb	r3, [r3, #0]
 801556c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801556e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015570:	2b1f      	cmp	r3, #31
 8015572:	d940      	bls.n	80155f6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8015574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015576:	2b2f      	cmp	r3, #47	; 0x2f
 8015578:	d006      	beq.n	8015588 <create_name+0x48>
 801557a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801557c:	2b5c      	cmp	r3, #92	; 0x5c
 801557e:	d110      	bne.n	80155a2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015580:	e002      	b.n	8015588 <create_name+0x48>
 8015582:	69bb      	ldr	r3, [r7, #24]
 8015584:	3301      	adds	r3, #1
 8015586:	61bb      	str	r3, [r7, #24]
 8015588:	693a      	ldr	r2, [r7, #16]
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	4413      	add	r3, r2
 801558e:	781b      	ldrb	r3, [r3, #0]
 8015590:	2b2f      	cmp	r3, #47	; 0x2f
 8015592:	d0f6      	beq.n	8015582 <create_name+0x42>
 8015594:	693a      	ldr	r2, [r7, #16]
 8015596:	69bb      	ldr	r3, [r7, #24]
 8015598:	4413      	add	r3, r2
 801559a:	781b      	ldrb	r3, [r3, #0]
 801559c:	2b5c      	cmp	r3, #92	; 0x5c
 801559e:	d0f0      	beq.n	8015582 <create_name+0x42>
			break;
 80155a0:	e02a      	b.n	80155f8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80155a2:	697b      	ldr	r3, [r7, #20]
 80155a4:	2bfe      	cmp	r3, #254	; 0xfe
 80155a6:	d901      	bls.n	80155ac <create_name+0x6c>
 80155a8:	2306      	movs	r3, #6
 80155aa:	e177      	b.n	801589c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80155ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155ae:	b2db      	uxtb	r3, r3
 80155b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80155b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155b4:	2101      	movs	r1, #1
 80155b6:	4618      	mov	r0, r3
 80155b8:	f001 fd34 	bl	8017024 <ff_convert>
 80155bc:	4603      	mov	r3, r0
 80155be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80155c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d101      	bne.n	80155ca <create_name+0x8a>
 80155c6:	2306      	movs	r3, #6
 80155c8:	e168      	b.n	801589c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80155ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155cc:	2b7f      	cmp	r3, #127	; 0x7f
 80155ce:	d809      	bhi.n	80155e4 <create_name+0xa4>
 80155d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155d2:	4619      	mov	r1, r3
 80155d4:	48b3      	ldr	r0, [pc, #716]	; (80158a4 <create_name+0x364>)
 80155d6:	f7fe fad6 	bl	8013b86 <chk_chr>
 80155da:	4603      	mov	r3, r0
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d001      	beq.n	80155e4 <create_name+0xa4>
 80155e0:	2306      	movs	r3, #6
 80155e2:	e15b      	b.n	801589c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	1c5a      	adds	r2, r3, #1
 80155e8:	617a      	str	r2, [r7, #20]
 80155ea:	005b      	lsls	r3, r3, #1
 80155ec:	68fa      	ldr	r2, [r7, #12]
 80155ee:	4413      	add	r3, r2
 80155f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80155f2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80155f4:	e7b4      	b.n	8015560 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80155f6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80155f8:	693a      	ldr	r2, [r7, #16]
 80155fa:	69bb      	ldr	r3, [r7, #24]
 80155fc:	441a      	add	r2, r3
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015604:	2b1f      	cmp	r3, #31
 8015606:	d801      	bhi.n	801560c <create_name+0xcc>
 8015608:	2304      	movs	r3, #4
 801560a:	e000      	b.n	801560e <create_name+0xce>
 801560c:	2300      	movs	r3, #0
 801560e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015612:	e011      	b.n	8015638 <create_name+0xf8>
		w = lfn[di - 1];
 8015614:	697b      	ldr	r3, [r7, #20]
 8015616:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801561a:	3b01      	subs	r3, #1
 801561c:	005b      	lsls	r3, r3, #1
 801561e:	68fa      	ldr	r2, [r7, #12]
 8015620:	4413      	add	r3, r2
 8015622:	881b      	ldrh	r3, [r3, #0]
 8015624:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8015626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015628:	2b20      	cmp	r3, #32
 801562a:	d002      	beq.n	8015632 <create_name+0xf2>
 801562c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801562e:	2b2e      	cmp	r3, #46	; 0x2e
 8015630:	d106      	bne.n	8015640 <create_name+0x100>
		di--;
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	3b01      	subs	r3, #1
 8015636:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015638:	697b      	ldr	r3, [r7, #20]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d1ea      	bne.n	8015614 <create_name+0xd4>
 801563e:	e000      	b.n	8015642 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8015640:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8015642:	697b      	ldr	r3, [r7, #20]
 8015644:	005b      	lsls	r3, r3, #1
 8015646:	68fa      	ldr	r2, [r7, #12]
 8015648:	4413      	add	r3, r2
 801564a:	2200      	movs	r2, #0
 801564c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d101      	bne.n	8015658 <create_name+0x118>
 8015654:	2306      	movs	r3, #6
 8015656:	e121      	b.n	801589c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	3324      	adds	r3, #36	; 0x24
 801565c:	220b      	movs	r2, #11
 801565e:	2120      	movs	r1, #32
 8015660:	4618      	mov	r0, r3
 8015662:	f7fe fa4e 	bl	8013b02 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015666:	2300      	movs	r3, #0
 8015668:	61bb      	str	r3, [r7, #24]
 801566a:	e002      	b.n	8015672 <create_name+0x132>
 801566c:	69bb      	ldr	r3, [r7, #24]
 801566e:	3301      	adds	r3, #1
 8015670:	61bb      	str	r3, [r7, #24]
 8015672:	69bb      	ldr	r3, [r7, #24]
 8015674:	005b      	lsls	r3, r3, #1
 8015676:	68fa      	ldr	r2, [r7, #12]
 8015678:	4413      	add	r3, r2
 801567a:	881b      	ldrh	r3, [r3, #0]
 801567c:	2b20      	cmp	r3, #32
 801567e:	d0f5      	beq.n	801566c <create_name+0x12c>
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	005b      	lsls	r3, r3, #1
 8015684:	68fa      	ldr	r2, [r7, #12]
 8015686:	4413      	add	r3, r2
 8015688:	881b      	ldrh	r3, [r3, #0]
 801568a:	2b2e      	cmp	r3, #46	; 0x2e
 801568c:	d0ee      	beq.n	801566c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801568e:	69bb      	ldr	r3, [r7, #24]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d009      	beq.n	80156a8 <create_name+0x168>
 8015694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015698:	f043 0303 	orr.w	r3, r3, #3
 801569c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80156a0:	e002      	b.n	80156a8 <create_name+0x168>
 80156a2:	697b      	ldr	r3, [r7, #20]
 80156a4:	3b01      	subs	r3, #1
 80156a6:	617b      	str	r3, [r7, #20]
 80156a8:	697b      	ldr	r3, [r7, #20]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d009      	beq.n	80156c2 <create_name+0x182>
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80156b4:	3b01      	subs	r3, #1
 80156b6:	005b      	lsls	r3, r3, #1
 80156b8:	68fa      	ldr	r2, [r7, #12]
 80156ba:	4413      	add	r3, r2
 80156bc:	881b      	ldrh	r3, [r3, #0]
 80156be:	2b2e      	cmp	r3, #46	; 0x2e
 80156c0:	d1ef      	bne.n	80156a2 <create_name+0x162>

	i = b = 0; ni = 8;
 80156c2:	2300      	movs	r3, #0
 80156c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80156c8:	2300      	movs	r3, #0
 80156ca:	623b      	str	r3, [r7, #32]
 80156cc:	2308      	movs	r3, #8
 80156ce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80156d0:	69bb      	ldr	r3, [r7, #24]
 80156d2:	1c5a      	adds	r2, r3, #1
 80156d4:	61ba      	str	r2, [r7, #24]
 80156d6:	005b      	lsls	r3, r3, #1
 80156d8:	68fa      	ldr	r2, [r7, #12]
 80156da:	4413      	add	r3, r2
 80156dc:	881b      	ldrh	r3, [r3, #0]
 80156de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80156e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	f000 8090 	beq.w	8015808 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80156e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156ea:	2b20      	cmp	r3, #32
 80156ec:	d006      	beq.n	80156fc <create_name+0x1bc>
 80156ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156f0:	2b2e      	cmp	r3, #46	; 0x2e
 80156f2:	d10a      	bne.n	801570a <create_name+0x1ca>
 80156f4:	69ba      	ldr	r2, [r7, #24]
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d006      	beq.n	801570a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80156fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015700:	f043 0303 	orr.w	r3, r3, #3
 8015704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015708:	e07d      	b.n	8015806 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801570a:	6a3a      	ldr	r2, [r7, #32]
 801570c:	69fb      	ldr	r3, [r7, #28]
 801570e:	429a      	cmp	r2, r3
 8015710:	d203      	bcs.n	801571a <create_name+0x1da>
 8015712:	69ba      	ldr	r2, [r7, #24]
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	429a      	cmp	r2, r3
 8015718:	d123      	bne.n	8015762 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801571a:	69fb      	ldr	r3, [r7, #28]
 801571c:	2b0b      	cmp	r3, #11
 801571e:	d106      	bne.n	801572e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8015720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015724:	f043 0303 	orr.w	r3, r3, #3
 8015728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801572c:	e06f      	b.n	801580e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801572e:	69ba      	ldr	r2, [r7, #24]
 8015730:	697b      	ldr	r3, [r7, #20]
 8015732:	429a      	cmp	r2, r3
 8015734:	d005      	beq.n	8015742 <create_name+0x202>
 8015736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801573a:	f043 0303 	orr.w	r3, r3, #3
 801573e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8015742:	69ba      	ldr	r2, [r7, #24]
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	429a      	cmp	r2, r3
 8015748:	d860      	bhi.n	801580c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	61bb      	str	r3, [r7, #24]
 801574e:	2308      	movs	r3, #8
 8015750:	623b      	str	r3, [r7, #32]
 8015752:	230b      	movs	r3, #11
 8015754:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8015756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801575a:	009b      	lsls	r3, r3, #2
 801575c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015760:	e051      	b.n	8015806 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8015762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015764:	2b7f      	cmp	r3, #127	; 0x7f
 8015766:	d914      	bls.n	8015792 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8015768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801576a:	2100      	movs	r1, #0
 801576c:	4618      	mov	r0, r3
 801576e:	f001 fc59 	bl	8017024 <ff_convert>
 8015772:	4603      	mov	r3, r0
 8015774:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8015776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015778:	2b00      	cmp	r3, #0
 801577a:	d004      	beq.n	8015786 <create_name+0x246>
 801577c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801577e:	3b80      	subs	r3, #128	; 0x80
 8015780:	4a49      	ldr	r2, [pc, #292]	; (80158a8 <create_name+0x368>)
 8015782:	5cd3      	ldrb	r3, [r2, r3]
 8015784:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8015786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801578a:	f043 0302 	orr.w	r3, r3, #2
 801578e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8015792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015794:	2b00      	cmp	r3, #0
 8015796:	d007      	beq.n	80157a8 <create_name+0x268>
 8015798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801579a:	4619      	mov	r1, r3
 801579c:	4843      	ldr	r0, [pc, #268]	; (80158ac <create_name+0x36c>)
 801579e:	f7fe f9f2 	bl	8013b86 <chk_chr>
 80157a2:	4603      	mov	r3, r0
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d008      	beq.n	80157ba <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80157a8:	235f      	movs	r3, #95	; 0x5f
 80157aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80157ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157b0:	f043 0303 	orr.w	r3, r3, #3
 80157b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80157b8:	e01b      	b.n	80157f2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80157ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157bc:	2b40      	cmp	r3, #64	; 0x40
 80157be:	d909      	bls.n	80157d4 <create_name+0x294>
 80157c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157c2:	2b5a      	cmp	r3, #90	; 0x5a
 80157c4:	d806      	bhi.n	80157d4 <create_name+0x294>
					b |= 2;
 80157c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80157ca:	f043 0302 	orr.w	r3, r3, #2
 80157ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80157d2:	e00e      	b.n	80157f2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80157d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157d6:	2b60      	cmp	r3, #96	; 0x60
 80157d8:	d90b      	bls.n	80157f2 <create_name+0x2b2>
 80157da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157dc:	2b7a      	cmp	r3, #122	; 0x7a
 80157de:	d808      	bhi.n	80157f2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80157e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80157e4:	f043 0301 	orr.w	r3, r3, #1
 80157e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80157ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157ee:	3b20      	subs	r3, #32
 80157f0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80157f2:	6a3b      	ldr	r3, [r7, #32]
 80157f4:	1c5a      	adds	r2, r3, #1
 80157f6:	623a      	str	r2, [r7, #32]
 80157f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80157fa:	b2d1      	uxtb	r1, r2
 80157fc:	687a      	ldr	r2, [r7, #4]
 80157fe:	4413      	add	r3, r2
 8015800:	460a      	mov	r2, r1
 8015802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8015806:	e763      	b.n	80156d0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8015808:	bf00      	nop
 801580a:	e000      	b.n	801580e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 801580c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015814:	2be5      	cmp	r3, #229	; 0xe5
 8015816:	d103      	bne.n	8015820 <create_name+0x2e0>
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2205      	movs	r2, #5
 801581c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8015820:	69fb      	ldr	r3, [r7, #28]
 8015822:	2b08      	cmp	r3, #8
 8015824:	d104      	bne.n	8015830 <create_name+0x2f0>
 8015826:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801582a:	009b      	lsls	r3, r3, #2
 801582c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015834:	f003 030c 	and.w	r3, r3, #12
 8015838:	2b0c      	cmp	r3, #12
 801583a:	d005      	beq.n	8015848 <create_name+0x308>
 801583c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015840:	f003 0303 	and.w	r3, r3, #3
 8015844:	2b03      	cmp	r3, #3
 8015846:	d105      	bne.n	8015854 <create_name+0x314>
 8015848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801584c:	f043 0302 	orr.w	r3, r3, #2
 8015850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8015854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015858:	f003 0302 	and.w	r3, r3, #2
 801585c:	2b00      	cmp	r3, #0
 801585e:	d117      	bne.n	8015890 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8015860:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015864:	f003 0303 	and.w	r3, r3, #3
 8015868:	2b01      	cmp	r3, #1
 801586a:	d105      	bne.n	8015878 <create_name+0x338>
 801586c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015870:	f043 0310 	orr.w	r3, r3, #16
 8015874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8015878:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801587c:	f003 030c 	and.w	r3, r3, #12
 8015880:	2b04      	cmp	r3, #4
 8015882:	d105      	bne.n	8015890 <create_name+0x350>
 8015884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015888:	f043 0308 	orr.w	r3, r3, #8
 801588c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015896:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801589a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801589c:	4618      	mov	r0, r3
 801589e:	3728      	adds	r7, #40	; 0x28
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}
 80158a4:	080225c4 	.word	0x080225c4
 80158a8:	0802282c 	.word	0x0802282c
 80158ac:	080225d0 	.word	0x080225d0

080158b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b086      	sub	sp, #24
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
 80158b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80158be:	693b      	ldr	r3, [r7, #16]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80158c4:	e002      	b.n	80158cc <follow_path+0x1c>
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	3301      	adds	r3, #1
 80158ca:	603b      	str	r3, [r7, #0]
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	781b      	ldrb	r3, [r3, #0]
 80158d0:	2b2f      	cmp	r3, #47	; 0x2f
 80158d2:	d0f8      	beq.n	80158c6 <follow_path+0x16>
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	781b      	ldrb	r3, [r3, #0]
 80158d8:	2b5c      	cmp	r3, #92	; 0x5c
 80158da:	d0f4      	beq.n	80158c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	2200      	movs	r2, #0
 80158e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80158e2:	683b      	ldr	r3, [r7, #0]
 80158e4:	781b      	ldrb	r3, [r3, #0]
 80158e6:	2b1f      	cmp	r3, #31
 80158e8:	d80a      	bhi.n	8015900 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	2280      	movs	r2, #128	; 0x80
 80158ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80158f2:	2100      	movs	r1, #0
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f7fe fe91 	bl	801461c <dir_sdi>
 80158fa:	4603      	mov	r3, r0
 80158fc:	75fb      	strb	r3, [r7, #23]
 80158fe:	e043      	b.n	8015988 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015900:	463b      	mov	r3, r7
 8015902:	4619      	mov	r1, r3
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f7ff fe1b 	bl	8015540 <create_name>
 801590a:	4603      	mov	r3, r0
 801590c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801590e:	7dfb      	ldrb	r3, [r7, #23]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d134      	bne.n	801597e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f7ff fadb 	bl	8014ed0 <dir_find>
 801591a:	4603      	mov	r3, r0
 801591c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015924:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8015926:	7dfb      	ldrb	r3, [r7, #23]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d00a      	beq.n	8015942 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801592c:	7dfb      	ldrb	r3, [r7, #23]
 801592e:	2b04      	cmp	r3, #4
 8015930:	d127      	bne.n	8015982 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015932:	7afb      	ldrb	r3, [r7, #11]
 8015934:	f003 0304 	and.w	r3, r3, #4
 8015938:	2b00      	cmp	r3, #0
 801593a:	d122      	bne.n	8015982 <follow_path+0xd2>
 801593c:	2305      	movs	r3, #5
 801593e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015940:	e01f      	b.n	8015982 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015942:	7afb      	ldrb	r3, [r7, #11]
 8015944:	f003 0304 	and.w	r3, r3, #4
 8015948:	2b00      	cmp	r3, #0
 801594a:	d11c      	bne.n	8015986 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	799b      	ldrb	r3, [r3, #6]
 8015950:	f003 0310 	and.w	r3, r3, #16
 8015954:	2b00      	cmp	r3, #0
 8015956:	d102      	bne.n	801595e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015958:	2305      	movs	r3, #5
 801595a:	75fb      	strb	r3, [r7, #23]
 801595c:	e014      	b.n	8015988 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	695b      	ldr	r3, [r3, #20]
 8015968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801596c:	4413      	add	r3, r2
 801596e:	4619      	mov	r1, r3
 8015970:	68f8      	ldr	r0, [r7, #12]
 8015972:	f7fe ffda 	bl	801492a <ld_clust>
 8015976:	4602      	mov	r2, r0
 8015978:	693b      	ldr	r3, [r7, #16]
 801597a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801597c:	e7c0      	b.n	8015900 <follow_path+0x50>
			if (res != FR_OK) break;
 801597e:	bf00      	nop
 8015980:	e002      	b.n	8015988 <follow_path+0xd8>
				break;
 8015982:	bf00      	nop
 8015984:	e000      	b.n	8015988 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015986:	bf00      	nop
			}
		}
	}

	return res;
 8015988:	7dfb      	ldrb	r3, [r7, #23]
}
 801598a:	4618      	mov	r0, r3
 801598c:	3718      	adds	r7, #24
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}

08015992 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015992:	b480      	push	{r7}
 8015994:	b087      	sub	sp, #28
 8015996:	af00      	add	r7, sp, #0
 8015998:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801599a:	f04f 33ff 	mov.w	r3, #4294967295
 801599e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d031      	beq.n	8015a0c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	617b      	str	r3, [r7, #20]
 80159ae:	e002      	b.n	80159b6 <get_ldnumber+0x24>
 80159b0:	697b      	ldr	r3, [r7, #20]
 80159b2:	3301      	adds	r3, #1
 80159b4:	617b      	str	r3, [r7, #20]
 80159b6:	697b      	ldr	r3, [r7, #20]
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	2b1f      	cmp	r3, #31
 80159bc:	d903      	bls.n	80159c6 <get_ldnumber+0x34>
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	781b      	ldrb	r3, [r3, #0]
 80159c2:	2b3a      	cmp	r3, #58	; 0x3a
 80159c4:	d1f4      	bne.n	80159b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80159c6:	697b      	ldr	r3, [r7, #20]
 80159c8:	781b      	ldrb	r3, [r3, #0]
 80159ca:	2b3a      	cmp	r3, #58	; 0x3a
 80159cc:	d11c      	bne.n	8015a08 <get_ldnumber+0x76>
			tp = *path;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	1c5a      	adds	r2, r3, #1
 80159d8:	60fa      	str	r2, [r7, #12]
 80159da:	781b      	ldrb	r3, [r3, #0]
 80159dc:	3b30      	subs	r3, #48	; 0x30
 80159de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	2b09      	cmp	r3, #9
 80159e4:	d80e      	bhi.n	8015a04 <get_ldnumber+0x72>
 80159e6:	68fa      	ldr	r2, [r7, #12]
 80159e8:	697b      	ldr	r3, [r7, #20]
 80159ea:	429a      	cmp	r2, r3
 80159ec:	d10a      	bne.n	8015a04 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d107      	bne.n	8015a04 <get_ldnumber+0x72>
					vol = (int)i;
 80159f4:	68bb      	ldr	r3, [r7, #8]
 80159f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	3301      	adds	r3, #1
 80159fc:	617b      	str	r3, [r7, #20]
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	697a      	ldr	r2, [r7, #20]
 8015a02:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8015a04:	693b      	ldr	r3, [r7, #16]
 8015a06:	e002      	b.n	8015a0e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8015a08:	2300      	movs	r3, #0
 8015a0a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8015a0c:	693b      	ldr	r3, [r7, #16]
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	371c      	adds	r7, #28
 8015a12:	46bd      	mov	sp, r7
 8015a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a18:	4770      	bx	lr
	...

08015a1c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b082      	sub	sp, #8
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
 8015a24:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	2200      	movs	r2, #0
 8015a2a:	70da      	strb	r2, [r3, #3]
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8015a32:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015a34:	6839      	ldr	r1, [r7, #0]
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f7fe fa70 	bl	8013f1c <move_window>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d001      	beq.n	8015a46 <check_fs+0x2a>
 8015a42:	2304      	movs	r3, #4
 8015a44:	e038      	b.n	8015ab8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	3334      	adds	r3, #52	; 0x34
 8015a4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7fd ffb4 	bl	80139bc <ld_word>
 8015a54:	4603      	mov	r3, r0
 8015a56:	461a      	mov	r2, r3
 8015a58:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d001      	beq.n	8015a64 <check_fs+0x48>
 8015a60:	2303      	movs	r3, #3
 8015a62:	e029      	b.n	8015ab8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015a6a:	2be9      	cmp	r3, #233	; 0xe9
 8015a6c:	d009      	beq.n	8015a82 <check_fs+0x66>
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015a74:	2beb      	cmp	r3, #235	; 0xeb
 8015a76:	d11e      	bne.n	8015ab6 <check_fs+0x9a>
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8015a7e:	2b90      	cmp	r3, #144	; 0x90
 8015a80:	d119      	bne.n	8015ab6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	3334      	adds	r3, #52	; 0x34
 8015a86:	3336      	adds	r3, #54	; 0x36
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f7fd ffaf 	bl	80139ec <ld_dword>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015a94:	4a0a      	ldr	r2, [pc, #40]	; (8015ac0 <check_fs+0xa4>)
 8015a96:	4293      	cmp	r3, r2
 8015a98:	d101      	bne.n	8015a9e <check_fs+0x82>
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	e00c      	b.n	8015ab8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	3334      	adds	r3, #52	; 0x34
 8015aa2:	3352      	adds	r3, #82	; 0x52
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7fd ffa1 	bl	80139ec <ld_dword>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	4a05      	ldr	r2, [pc, #20]	; (8015ac4 <check_fs+0xa8>)
 8015aae:	4293      	cmp	r3, r2
 8015ab0:	d101      	bne.n	8015ab6 <check_fs+0x9a>
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	e000      	b.n	8015ab8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8015ab6:	2302      	movs	r3, #2
}
 8015ab8:	4618      	mov	r0, r3
 8015aba:	3708      	adds	r7, #8
 8015abc:	46bd      	mov	sp, r7
 8015abe:	bd80      	pop	{r7, pc}
 8015ac0:	00544146 	.word	0x00544146
 8015ac4:	33544146 	.word	0x33544146

08015ac8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b096      	sub	sp, #88	; 0x58
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	60f8      	str	r0, [r7, #12]
 8015ad0:	60b9      	str	r1, [r7, #8]
 8015ad2:	4613      	mov	r3, r2
 8015ad4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8015ad6:	68bb      	ldr	r3, [r7, #8]
 8015ad8:	2200      	movs	r2, #0
 8015ada:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8015adc:	68f8      	ldr	r0, [r7, #12]
 8015ade:	f7ff ff58 	bl	8015992 <get_ldnumber>
 8015ae2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8015ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	da01      	bge.n	8015aee <find_volume+0x26>
 8015aea:	230b      	movs	r3, #11
 8015aec:	e231      	b.n	8015f52 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8015aee:	4aa8      	ldr	r2, [pc, #672]	; (8015d90 <find_volume+0x2c8>)
 8015af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015af6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d101      	bne.n	8015b02 <find_volume+0x3a>
 8015afe:	230c      	movs	r3, #12
 8015b00:	e227      	b.n	8015f52 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8015b02:	68bb      	ldr	r3, [r7, #8]
 8015b04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015b06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015b08:	79fb      	ldrb	r3, [r7, #7]
 8015b0a:	f023 0301 	bic.w	r3, r3, #1
 8015b0e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b12:	781b      	ldrb	r3, [r3, #0]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d01a      	beq.n	8015b4e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8015b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b1a:	785b      	ldrb	r3, [r3, #1]
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f7fd fea7 	bl	8013870 <disk_status>
 8015b22:	4603      	mov	r3, r0
 8015b24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015b28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b2c:	f003 0301 	and.w	r3, r3, #1
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d10c      	bne.n	8015b4e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015b34:	79fb      	ldrb	r3, [r7, #7]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d007      	beq.n	8015b4a <find_volume+0x82>
 8015b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b3e:	f003 0304 	and.w	r3, r3, #4
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d001      	beq.n	8015b4a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8015b46:	230a      	movs	r3, #10
 8015b48:	e203      	b.n	8015f52 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	e201      	b.n	8015f52 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8015b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b50:	2200      	movs	r2, #0
 8015b52:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8015b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b56:	b2da      	uxtb	r2, r3
 8015b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b5a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8015b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b5e:	785b      	ldrb	r3, [r3, #1]
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7fd fe9f 	bl	80138a4 <disk_initialize>
 8015b66:	4603      	mov	r3, r0
 8015b68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8015b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b70:	f003 0301 	and.w	r3, r3, #1
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d001      	beq.n	8015b7c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015b78:	2303      	movs	r3, #3
 8015b7a:	e1ea      	b.n	8015f52 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8015b7c:	79fb      	ldrb	r3, [r7, #7]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d007      	beq.n	8015b92 <find_volume+0xca>
 8015b82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b86:	f003 0304 	and.w	r3, r3, #4
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d001      	beq.n	8015b92 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8015b8e:	230a      	movs	r3, #10
 8015b90:	e1df      	b.n	8015f52 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8015b92:	2300      	movs	r3, #0
 8015b94:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8015b96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015b98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015b9a:	f7ff ff3f 	bl	8015a1c <check_fs>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8015ba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015ba8:	2b02      	cmp	r3, #2
 8015baa:	d14b      	bne.n	8015c44 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015bac:	2300      	movs	r3, #0
 8015bae:	643b      	str	r3, [r7, #64]	; 0x40
 8015bb0:	e01f      	b.n	8015bf2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8015bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bb4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bba:	011b      	lsls	r3, r3, #4
 8015bbc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8015bc0:	4413      	add	r3, r2
 8015bc2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc6:	3304      	adds	r3, #4
 8015bc8:	781b      	ldrb	r3, [r3, #0]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d006      	beq.n	8015bdc <find_volume+0x114>
 8015bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd0:	3308      	adds	r3, #8
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7fd ff0a 	bl	80139ec <ld_dword>
 8015bd8:	4602      	mov	r2, r0
 8015bda:	e000      	b.n	8015bde <find_volume+0x116>
 8015bdc:	2200      	movs	r2, #0
 8015bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015be0:	009b      	lsls	r3, r3, #2
 8015be2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8015be6:	440b      	add	r3, r1
 8015be8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bee:	3301      	adds	r3, #1
 8015bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8015bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bf4:	2b03      	cmp	r3, #3
 8015bf6:	d9dc      	bls.n	8015bb2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8015bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d002      	beq.n	8015c08 <find_volume+0x140>
 8015c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c04:	3b01      	subs	r3, #1
 8015c06:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c0a:	009b      	lsls	r3, r3, #2
 8015c0c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015c10:	4413      	add	r3, r2
 8015c12:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8015c16:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d005      	beq.n	8015c2a <find_volume+0x162>
 8015c1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015c20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015c22:	f7ff fefb 	bl	8015a1c <check_fs>
 8015c26:	4603      	mov	r3, r0
 8015c28:	e000      	b.n	8015c2c <find_volume+0x164>
 8015c2a:	2303      	movs	r3, #3
 8015c2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c34:	2b01      	cmp	r3, #1
 8015c36:	d905      	bls.n	8015c44 <find_volume+0x17c>
 8015c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c3a:	3301      	adds	r3, #1
 8015c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8015c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c40:	2b03      	cmp	r3, #3
 8015c42:	d9e1      	bls.n	8015c08 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015c44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c48:	2b04      	cmp	r3, #4
 8015c4a:	d101      	bne.n	8015c50 <find_volume+0x188>
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	e180      	b.n	8015f52 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015c50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c54:	2b01      	cmp	r3, #1
 8015c56:	d901      	bls.n	8015c5c <find_volume+0x194>
 8015c58:	230d      	movs	r3, #13
 8015c5a:	e17a      	b.n	8015f52 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8015c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c5e:	3334      	adds	r3, #52	; 0x34
 8015c60:	330b      	adds	r3, #11
 8015c62:	4618      	mov	r0, r3
 8015c64:	f7fd feaa 	bl	80139bc <ld_word>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015c6e:	d001      	beq.n	8015c74 <find_volume+0x1ac>
 8015c70:	230d      	movs	r3, #13
 8015c72:	e16e      	b.n	8015f52 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8015c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c76:	3334      	adds	r3, #52	; 0x34
 8015c78:	3316      	adds	r3, #22
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7fd fe9e 	bl	80139bc <ld_word>
 8015c80:	4603      	mov	r3, r0
 8015c82:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8015c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d106      	bne.n	8015c98 <find_volume+0x1d0>
 8015c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c8c:	3334      	adds	r3, #52	; 0x34
 8015c8e:	3324      	adds	r3, #36	; 0x24
 8015c90:	4618      	mov	r0, r3
 8015c92:	f7fd feab 	bl	80139ec <ld_dword>
 8015c96:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8015c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015c9c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8015c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8015ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8015ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015caa:	789b      	ldrb	r3, [r3, #2]
 8015cac:	2b01      	cmp	r3, #1
 8015cae:	d005      	beq.n	8015cbc <find_volume+0x1f4>
 8015cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cb2:	789b      	ldrb	r3, [r3, #2]
 8015cb4:	2b02      	cmp	r3, #2
 8015cb6:	d001      	beq.n	8015cbc <find_volume+0x1f4>
 8015cb8:	230d      	movs	r3, #13
 8015cba:	e14a      	b.n	8015f52 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cbe:	789b      	ldrb	r3, [r3, #2]
 8015cc0:	461a      	mov	r2, r3
 8015cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cc4:	fb02 f303 	mul.w	r3, r2, r3
 8015cc8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8015cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015cd0:	b29a      	uxth	r2, r3
 8015cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cd4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8015cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cd8:	895b      	ldrh	r3, [r3, #10]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d008      	beq.n	8015cf0 <find_volume+0x228>
 8015cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ce0:	895b      	ldrh	r3, [r3, #10]
 8015ce2:	461a      	mov	r2, r3
 8015ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ce6:	895b      	ldrh	r3, [r3, #10]
 8015ce8:	3b01      	subs	r3, #1
 8015cea:	4013      	ands	r3, r2
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d001      	beq.n	8015cf4 <find_volume+0x22c>
 8015cf0:	230d      	movs	r3, #13
 8015cf2:	e12e      	b.n	8015f52 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cf6:	3334      	adds	r3, #52	; 0x34
 8015cf8:	3311      	adds	r3, #17
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7fd fe5e 	bl	80139bc <ld_word>
 8015d00:	4603      	mov	r3, r0
 8015d02:	461a      	mov	r2, r3
 8015d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d0a:	891b      	ldrh	r3, [r3, #8]
 8015d0c:	f003 030f 	and.w	r3, r3, #15
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d001      	beq.n	8015d1a <find_volume+0x252>
 8015d16:	230d      	movs	r3, #13
 8015d18:	e11b      	b.n	8015f52 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d1c:	3334      	adds	r3, #52	; 0x34
 8015d1e:	3313      	adds	r3, #19
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7fd fe4b 	bl	80139bc <ld_word>
 8015d26:	4603      	mov	r3, r0
 8015d28:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d106      	bne.n	8015d3e <find_volume+0x276>
 8015d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d32:	3334      	adds	r3, #52	; 0x34
 8015d34:	3320      	adds	r3, #32
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7fd fe58 	bl	80139ec <ld_dword>
 8015d3c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d40:	3334      	adds	r3, #52	; 0x34
 8015d42:	330e      	adds	r3, #14
 8015d44:	4618      	mov	r0, r3
 8015d46:	f7fd fe39 	bl	80139bc <ld_word>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015d4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d101      	bne.n	8015d58 <find_volume+0x290>
 8015d54:	230d      	movs	r3, #13
 8015d56:	e0fc      	b.n	8015f52 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8015d58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d5c:	4413      	add	r3, r2
 8015d5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d60:	8912      	ldrh	r2, [r2, #8]
 8015d62:	0912      	lsrs	r2, r2, #4
 8015d64:	b292      	uxth	r2, r2
 8015d66:	4413      	add	r3, r2
 8015d68:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8015d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d6e:	429a      	cmp	r2, r3
 8015d70:	d201      	bcs.n	8015d76 <find_volume+0x2ae>
 8015d72:	230d      	movs	r3, #13
 8015d74:	e0ed      	b.n	8015f52 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d7a:	1ad3      	subs	r3, r2, r3
 8015d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015d7e:	8952      	ldrh	r2, [r2, #10]
 8015d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d84:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d103      	bne.n	8015d94 <find_volume+0x2cc>
 8015d8c:	230d      	movs	r3, #13
 8015d8e:	e0e0      	b.n	8015f52 <find_volume+0x48a>
 8015d90:	20000990 	.word	0x20000990
		fmt = FS_FAT32;
 8015d94:	2303      	movs	r3, #3
 8015d96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8015d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d9c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015da0:	4293      	cmp	r3, r2
 8015da2:	d802      	bhi.n	8015daa <find_volume+0x2e2>
 8015da4:	2302      	movs	r3, #2
 8015da6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8015daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dac:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015db0:	4293      	cmp	r3, r2
 8015db2:	d802      	bhi.n	8015dba <find_volume+0x2f2>
 8015db4:	2301      	movs	r3, #1
 8015db6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dbc:	1c9a      	adds	r2, r3, #2
 8015dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dc0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8015dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015dc6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015dc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015dcc:	441a      	add	r2, r3
 8015dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dd0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8015dd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dd6:	441a      	add	r2, r3
 8015dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dda:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8015ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015de0:	2b03      	cmp	r3, #3
 8015de2:	d11e      	bne.n	8015e22 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8015de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015de6:	3334      	adds	r3, #52	; 0x34
 8015de8:	332a      	adds	r3, #42	; 0x2a
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7fd fde6 	bl	80139bc <ld_word>
 8015df0:	4603      	mov	r3, r0
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d001      	beq.n	8015dfa <find_volume+0x332>
 8015df6:	230d      	movs	r3, #13
 8015df8:	e0ab      	b.n	8015f52 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dfc:	891b      	ldrh	r3, [r3, #8]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d001      	beq.n	8015e06 <find_volume+0x33e>
 8015e02:	230d      	movs	r3, #13
 8015e04:	e0a5      	b.n	8015f52 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e08:	3334      	adds	r3, #52	; 0x34
 8015e0a:	332c      	adds	r3, #44	; 0x2c
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f7fd fded 	bl	80139ec <ld_dword>
 8015e12:	4602      	mov	r2, r0
 8015e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e16:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e1a:	699b      	ldr	r3, [r3, #24]
 8015e1c:	009b      	lsls	r3, r3, #2
 8015e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8015e20:	e01f      	b.n	8015e62 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e24:	891b      	ldrh	r3, [r3, #8]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d101      	bne.n	8015e2e <find_volume+0x366>
 8015e2a:	230d      	movs	r3, #13
 8015e2c:	e091      	b.n	8015f52 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e34:	441a      	add	r2, r3
 8015e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e38:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015e3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015e3e:	2b02      	cmp	r3, #2
 8015e40:	d103      	bne.n	8015e4a <find_volume+0x382>
 8015e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e44:	699b      	ldr	r3, [r3, #24]
 8015e46:	005b      	lsls	r3, r3, #1
 8015e48:	e00a      	b.n	8015e60 <find_volume+0x398>
 8015e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e4c:	699a      	ldr	r2, [r3, #24]
 8015e4e:	4613      	mov	r3, r2
 8015e50:	005b      	lsls	r3, r3, #1
 8015e52:	4413      	add	r3, r2
 8015e54:	085a      	lsrs	r2, r3, #1
 8015e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e58:	699b      	ldr	r3, [r3, #24]
 8015e5a:	f003 0301 	and.w	r3, r3, #1
 8015e5e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8015e60:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e64:	69da      	ldr	r2, [r3, #28]
 8015e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e68:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8015e6c:	0a5b      	lsrs	r3, r3, #9
 8015e6e:	429a      	cmp	r2, r3
 8015e70:	d201      	bcs.n	8015e76 <find_volume+0x3ae>
 8015e72:	230d      	movs	r3, #13
 8015e74:	e06d      	b.n	8015f52 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e78:	f04f 32ff 	mov.w	r2, #4294967295
 8015e7c:	615a      	str	r2, [r3, #20]
 8015e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e80:	695a      	ldr	r2, [r3, #20]
 8015e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e84:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8015e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e88:	2280      	movs	r2, #128	; 0x80
 8015e8a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8015e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015e90:	2b03      	cmp	r3, #3
 8015e92:	d149      	bne.n	8015f28 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e96:	3334      	adds	r3, #52	; 0x34
 8015e98:	3330      	adds	r3, #48	; 0x30
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	f7fd fd8e 	bl	80139bc <ld_word>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	2b01      	cmp	r3, #1
 8015ea4:	d140      	bne.n	8015f28 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8015ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ea8:	3301      	adds	r3, #1
 8015eaa:	4619      	mov	r1, r3
 8015eac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015eae:	f7fe f835 	bl	8013f1c <move_window>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d137      	bne.n	8015f28 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8015eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eba:	2200      	movs	r2, #0
 8015ebc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ec0:	3334      	adds	r3, #52	; 0x34
 8015ec2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7fd fd78 	bl	80139bc <ld_word>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	461a      	mov	r2, r3
 8015ed0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d127      	bne.n	8015f28 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8015ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eda:	3334      	adds	r3, #52	; 0x34
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7fd fd85 	bl	80139ec <ld_dword>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	4a1d      	ldr	r2, [pc, #116]	; (8015f5c <find_volume+0x494>)
 8015ee6:	4293      	cmp	r3, r2
 8015ee8:	d11e      	bne.n	8015f28 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015eec:	3334      	adds	r3, #52	; 0x34
 8015eee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	f7fd fd7a 	bl	80139ec <ld_dword>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	4a19      	ldr	r2, [pc, #100]	; (8015f60 <find_volume+0x498>)
 8015efc:	4293      	cmp	r3, r2
 8015efe:	d113      	bne.n	8015f28 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8015f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f02:	3334      	adds	r3, #52	; 0x34
 8015f04:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7fd fd6f 	bl	80139ec <ld_dword>
 8015f0e:	4602      	mov	r2, r0
 8015f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f12:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f16:	3334      	adds	r3, #52	; 0x34
 8015f18:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f7fd fd65 	bl	80139ec <ld_dword>
 8015f22:	4602      	mov	r2, r0
 8015f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f26:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8015f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f2a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8015f2e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8015f30:	4b0c      	ldr	r3, [pc, #48]	; (8015f64 <find_volume+0x49c>)
 8015f32:	881b      	ldrh	r3, [r3, #0]
 8015f34:	3301      	adds	r3, #1
 8015f36:	b29a      	uxth	r2, r3
 8015f38:	4b0a      	ldr	r3, [pc, #40]	; (8015f64 <find_volume+0x49c>)
 8015f3a:	801a      	strh	r2, [r3, #0]
 8015f3c:	4b09      	ldr	r3, [pc, #36]	; (8015f64 <find_volume+0x49c>)
 8015f3e:	881a      	ldrh	r2, [r3, #0]
 8015f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f42:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8015f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f46:	4a08      	ldr	r2, [pc, #32]	; (8015f68 <find_volume+0x4a0>)
 8015f48:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8015f4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015f4c:	f7fd ff7e 	bl	8013e4c <clear_lock>
#endif
	return FR_OK;
 8015f50:	2300      	movs	r3, #0
}
 8015f52:	4618      	mov	r0, r3
 8015f54:	3758      	adds	r7, #88	; 0x58
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	41615252 	.word	0x41615252
 8015f60:	61417272 	.word	0x61417272
 8015f64:	20000994 	.word	0x20000994
 8015f68:	20000ad8 	.word	0x20000ad8

08015f6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b084      	sub	sp, #16
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
 8015f74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8015f76:	2309      	movs	r3, #9
 8015f78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d01c      	beq.n	8015fba <validate+0x4e>
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d018      	beq.n	8015fba <validate+0x4e>
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	781b      	ldrb	r3, [r3, #0]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d013      	beq.n	8015fba <validate+0x4e>
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	889a      	ldrh	r2, [r3, #4]
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	88db      	ldrh	r3, [r3, #6]
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d10c      	bne.n	8015fba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	785b      	ldrb	r3, [r3, #1]
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f7fd fc62 	bl	8013870 <disk_status>
 8015fac:	4603      	mov	r3, r0
 8015fae:	f003 0301 	and.w	r3, r3, #1
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d101      	bne.n	8015fba <validate+0x4e>
			res = FR_OK;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015fba:	7bfb      	ldrb	r3, [r7, #15]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d102      	bne.n	8015fc6 <validate+0x5a>
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	e000      	b.n	8015fc8 <validate+0x5c>
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	683a      	ldr	r2, [r7, #0]
 8015fca:	6013      	str	r3, [r2, #0]
	return res;
 8015fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3710      	adds	r7, #16
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
	...

08015fd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b088      	sub	sp, #32
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	60f8      	str	r0, [r7, #12]
 8015fe0:	60b9      	str	r1, [r7, #8]
 8015fe2:	4613      	mov	r3, r2
 8015fe4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8015fe6:	68bb      	ldr	r3, [r7, #8]
 8015fe8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8015fea:	f107 0310 	add.w	r3, r7, #16
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f7ff fccf 	bl	8015992 <get_ldnumber>
 8015ff4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8015ff6:	69fb      	ldr	r3, [r7, #28]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	da01      	bge.n	8016000 <f_mount+0x28>
 8015ffc:	230b      	movs	r3, #11
 8015ffe:	e02b      	b.n	8016058 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016000:	4a17      	ldr	r2, [pc, #92]	; (8016060 <f_mount+0x88>)
 8016002:	69fb      	ldr	r3, [r7, #28]
 8016004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016008:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801600a:	69bb      	ldr	r3, [r7, #24]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d005      	beq.n	801601c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016010:	69b8      	ldr	r0, [r7, #24]
 8016012:	f7fd ff1b 	bl	8013e4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016016:	69bb      	ldr	r3, [r7, #24]
 8016018:	2200      	movs	r2, #0
 801601a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d002      	beq.n	8016028 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	2200      	movs	r2, #0
 8016026:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016028:	68fa      	ldr	r2, [r7, #12]
 801602a:	490d      	ldr	r1, [pc, #52]	; (8016060 <f_mount+0x88>)
 801602c:	69fb      	ldr	r3, [r7, #28]
 801602e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d002      	beq.n	801603e <f_mount+0x66>
 8016038:	79fb      	ldrb	r3, [r7, #7]
 801603a:	2b01      	cmp	r3, #1
 801603c:	d001      	beq.n	8016042 <f_mount+0x6a>
 801603e:	2300      	movs	r3, #0
 8016040:	e00a      	b.n	8016058 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016042:	f107 010c 	add.w	r1, r7, #12
 8016046:	f107 0308 	add.w	r3, r7, #8
 801604a:	2200      	movs	r2, #0
 801604c:	4618      	mov	r0, r3
 801604e:	f7ff fd3b 	bl	8015ac8 <find_volume>
 8016052:	4603      	mov	r3, r0
 8016054:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016056:	7dfb      	ldrb	r3, [r7, #23]
}
 8016058:	4618      	mov	r0, r3
 801605a:	3720      	adds	r7, #32
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}
 8016060:	20000990 	.word	0x20000990

08016064 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b09a      	sub	sp, #104	; 0x68
 8016068:	af00      	add	r7, sp, #0
 801606a:	60f8      	str	r0, [r7, #12]
 801606c:	60b9      	str	r1, [r7, #8]
 801606e:	4613      	mov	r3, r2
 8016070:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d101      	bne.n	801607c <f_open+0x18>
 8016078:	2309      	movs	r3, #9
 801607a:	e1ad      	b.n	80163d8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801607c:	79fb      	ldrb	r3, [r7, #7]
 801607e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016082:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016084:	79fa      	ldrb	r2, [r7, #7]
 8016086:	f107 0110 	add.w	r1, r7, #16
 801608a:	f107 0308 	add.w	r3, r7, #8
 801608e:	4618      	mov	r0, r3
 8016090:	f7ff fd1a 	bl	8015ac8 <find_volume>
 8016094:	4603      	mov	r3, r0
 8016096:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801609a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801609e:	2b00      	cmp	r3, #0
 80160a0:	f040 8191 	bne.w	80163c6 <f_open+0x362>
		dj.obj.fs = fs;
 80160a4:	693b      	ldr	r3, [r7, #16]
 80160a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80160a8:	68ba      	ldr	r2, [r7, #8]
 80160aa:	f107 0314 	add.w	r3, r7, #20
 80160ae:	4611      	mov	r1, r2
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7ff fbfd 	bl	80158b0 <follow_path>
 80160b6:	4603      	mov	r3, r0
 80160b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80160bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d11a      	bne.n	80160fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80160c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80160c8:	b25b      	sxtb	r3, r3
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	da03      	bge.n	80160d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80160ce:	2306      	movs	r3, #6
 80160d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80160d4:	e011      	b.n	80160fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80160d6:	79fb      	ldrb	r3, [r7, #7]
 80160d8:	f023 0301 	bic.w	r3, r3, #1
 80160dc:	2b00      	cmp	r3, #0
 80160de:	bf14      	ite	ne
 80160e0:	2301      	movne	r3, #1
 80160e2:	2300      	moveq	r3, #0
 80160e4:	b2db      	uxtb	r3, r3
 80160e6:	461a      	mov	r2, r3
 80160e8:	f107 0314 	add.w	r3, r7, #20
 80160ec:	4611      	mov	r1, r2
 80160ee:	4618      	mov	r0, r3
 80160f0:	f7fd fd64 	bl	8013bbc <chk_lock>
 80160f4:	4603      	mov	r3, r0
 80160f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80160fa:	79fb      	ldrb	r3, [r7, #7]
 80160fc:	f003 031c 	and.w	r3, r3, #28
 8016100:	2b00      	cmp	r3, #0
 8016102:	d07f      	beq.n	8016204 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8016104:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016108:	2b00      	cmp	r3, #0
 801610a:	d017      	beq.n	801613c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801610c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016110:	2b04      	cmp	r3, #4
 8016112:	d10e      	bne.n	8016132 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016114:	f7fd fdae 	bl	8013c74 <enq_lock>
 8016118:	4603      	mov	r3, r0
 801611a:	2b00      	cmp	r3, #0
 801611c:	d006      	beq.n	801612c <f_open+0xc8>
 801611e:	f107 0314 	add.w	r3, r7, #20
 8016122:	4618      	mov	r0, r3
 8016124:	f7fe ff94 	bl	8015050 <dir_register>
 8016128:	4603      	mov	r3, r0
 801612a:	e000      	b.n	801612e <f_open+0xca>
 801612c:	2312      	movs	r3, #18
 801612e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016132:	79fb      	ldrb	r3, [r7, #7]
 8016134:	f043 0308 	orr.w	r3, r3, #8
 8016138:	71fb      	strb	r3, [r7, #7]
 801613a:	e010      	b.n	801615e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801613c:	7ebb      	ldrb	r3, [r7, #26]
 801613e:	f003 0311 	and.w	r3, r3, #17
 8016142:	2b00      	cmp	r3, #0
 8016144:	d003      	beq.n	801614e <f_open+0xea>
					res = FR_DENIED;
 8016146:	2307      	movs	r3, #7
 8016148:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801614c:	e007      	b.n	801615e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801614e:	79fb      	ldrb	r3, [r7, #7]
 8016150:	f003 0304 	and.w	r3, r3, #4
 8016154:	2b00      	cmp	r3, #0
 8016156:	d002      	beq.n	801615e <f_open+0xfa>
 8016158:	2308      	movs	r3, #8
 801615a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801615e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016162:	2b00      	cmp	r3, #0
 8016164:	d168      	bne.n	8016238 <f_open+0x1d4>
 8016166:	79fb      	ldrb	r3, [r7, #7]
 8016168:	f003 0308 	and.w	r3, r3, #8
 801616c:	2b00      	cmp	r3, #0
 801616e:	d063      	beq.n	8016238 <f_open+0x1d4>
				dw = GET_FATTIME();
 8016170:	f7fd fc1c 	bl	80139ac <get_fattime>
 8016174:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016178:	330e      	adds	r3, #14
 801617a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801617c:	4618      	mov	r0, r3
 801617e:	f7fd fc73 	bl	8013a68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016184:	3316      	adds	r3, #22
 8016186:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016188:	4618      	mov	r0, r3
 801618a:	f7fd fc6d 	bl	8013a68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016190:	330b      	adds	r3, #11
 8016192:	2220      	movs	r2, #32
 8016194:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016196:	693b      	ldr	r3, [r7, #16]
 8016198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801619a:	4611      	mov	r1, r2
 801619c:	4618      	mov	r0, r3
 801619e:	f7fe fbc4 	bl	801492a <ld_clust>
 80161a2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80161a4:	693b      	ldr	r3, [r7, #16]
 80161a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80161a8:	2200      	movs	r2, #0
 80161aa:	4618      	mov	r0, r3
 80161ac:	f7fe fbdc 	bl	8014968 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80161b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161b2:	331c      	adds	r3, #28
 80161b4:	2100      	movs	r1, #0
 80161b6:	4618      	mov	r0, r3
 80161b8:	f7fd fc56 	bl	8013a68 <st_dword>
					fs->wflag = 1;
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	2201      	movs	r2, #1
 80161c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80161c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d037      	beq.n	8016238 <f_open+0x1d4>
						dw = fs->winsect;
 80161c8:	693b      	ldr	r3, [r7, #16]
 80161ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161cc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80161ce:	f107 0314 	add.w	r3, r7, #20
 80161d2:	2200      	movs	r2, #0
 80161d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7fe f8ef 	bl	80143ba <remove_chain>
 80161dc:	4603      	mov	r3, r0
 80161de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80161e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d126      	bne.n	8016238 <f_open+0x1d4>
							res = move_window(fs, dw);
 80161ea:	693b      	ldr	r3, [r7, #16]
 80161ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80161ee:	4618      	mov	r0, r3
 80161f0:	f7fd fe94 	bl	8013f1c <move_window>
 80161f4:	4603      	mov	r3, r0
 80161f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80161fa:	693b      	ldr	r3, [r7, #16]
 80161fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80161fe:	3a01      	subs	r2, #1
 8016200:	611a      	str	r2, [r3, #16]
 8016202:	e019      	b.n	8016238 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016204:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016208:	2b00      	cmp	r3, #0
 801620a:	d115      	bne.n	8016238 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801620c:	7ebb      	ldrb	r3, [r7, #26]
 801620e:	f003 0310 	and.w	r3, r3, #16
 8016212:	2b00      	cmp	r3, #0
 8016214:	d003      	beq.n	801621e <f_open+0x1ba>
					res = FR_NO_FILE;
 8016216:	2304      	movs	r3, #4
 8016218:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801621c:	e00c      	b.n	8016238 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801621e:	79fb      	ldrb	r3, [r7, #7]
 8016220:	f003 0302 	and.w	r3, r3, #2
 8016224:	2b00      	cmp	r3, #0
 8016226:	d007      	beq.n	8016238 <f_open+0x1d4>
 8016228:	7ebb      	ldrb	r3, [r7, #26]
 801622a:	f003 0301 	and.w	r3, r3, #1
 801622e:	2b00      	cmp	r3, #0
 8016230:	d002      	beq.n	8016238 <f_open+0x1d4>
						res = FR_DENIED;
 8016232:	2307      	movs	r3, #7
 8016234:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8016238:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801623c:	2b00      	cmp	r3, #0
 801623e:	d128      	bne.n	8016292 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016240:	79fb      	ldrb	r3, [r7, #7]
 8016242:	f003 0308 	and.w	r3, r3, #8
 8016246:	2b00      	cmp	r3, #0
 8016248:	d003      	beq.n	8016252 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801624a:	79fb      	ldrb	r3, [r7, #7]
 801624c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016250:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016252:	693b      	ldr	r3, [r7, #16]
 8016254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801625a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016260:	79fb      	ldrb	r3, [r7, #7]
 8016262:	f023 0301 	bic.w	r3, r3, #1
 8016266:	2b00      	cmp	r3, #0
 8016268:	bf14      	ite	ne
 801626a:	2301      	movne	r3, #1
 801626c:	2300      	moveq	r3, #0
 801626e:	b2db      	uxtb	r3, r3
 8016270:	461a      	mov	r2, r3
 8016272:	f107 0314 	add.w	r3, r7, #20
 8016276:	4611      	mov	r1, r2
 8016278:	4618      	mov	r0, r3
 801627a:	f7fd fd1d 	bl	8013cb8 <inc_lock>
 801627e:	4602      	mov	r2, r0
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	691b      	ldr	r3, [r3, #16]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d102      	bne.n	8016292 <f_open+0x22e>
 801628c:	2302      	movs	r3, #2
 801628e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016292:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016296:	2b00      	cmp	r3, #0
 8016298:	f040 8095 	bne.w	80163c6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801629c:	693b      	ldr	r3, [r7, #16]
 801629e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80162a0:	4611      	mov	r1, r2
 80162a2:	4618      	mov	r0, r3
 80162a4:	f7fe fb41 	bl	801492a <ld_clust>
 80162a8:	4602      	mov	r2, r0
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80162ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162b0:	331c      	adds	r3, #28
 80162b2:	4618      	mov	r0, r3
 80162b4:	f7fd fb9a 	bl	80139ec <ld_dword>
 80162b8:	4602      	mov	r2, r0
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	2200      	movs	r2, #0
 80162c2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80162c4:	693a      	ldr	r2, [r7, #16]
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80162ca:	693b      	ldr	r3, [r7, #16]
 80162cc:	88da      	ldrh	r2, [r3, #6]
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	79fa      	ldrb	r2, [r7, #7]
 80162d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	2200      	movs	r2, #0
 80162dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	2200      	movs	r2, #0
 80162e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	2200      	movs	r2, #0
 80162e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	3330      	adds	r3, #48	; 0x30
 80162ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80162f2:	2100      	movs	r1, #0
 80162f4:	4618      	mov	r0, r3
 80162f6:	f7fd fc04 	bl	8013b02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80162fa:	79fb      	ldrb	r3, [r7, #7]
 80162fc:	f003 0320 	and.w	r3, r3, #32
 8016300:	2b00      	cmp	r3, #0
 8016302:	d060      	beq.n	80163c6 <f_open+0x362>
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	68db      	ldr	r3, [r3, #12]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d05c      	beq.n	80163c6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	68da      	ldr	r2, [r3, #12]
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016314:	693b      	ldr	r3, [r7, #16]
 8016316:	895b      	ldrh	r3, [r3, #10]
 8016318:	025b      	lsls	r3, r3, #9
 801631a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	689b      	ldr	r3, [r3, #8]
 8016320:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	68db      	ldr	r3, [r3, #12]
 8016326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016328:	e016      	b.n	8016358 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801632e:	4618      	mov	r0, r3
 8016330:	f7fd feaf 	bl	8014092 <get_fat>
 8016334:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8016336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016338:	2b01      	cmp	r3, #1
 801633a:	d802      	bhi.n	8016342 <f_open+0x2de>
 801633c:	2302      	movs	r3, #2
 801633e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016348:	d102      	bne.n	8016350 <f_open+0x2ec>
 801634a:	2301      	movs	r3, #1
 801634c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016354:	1ad3      	subs	r3, r2, r3
 8016356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016358:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801635c:	2b00      	cmp	r3, #0
 801635e:	d103      	bne.n	8016368 <f_open+0x304>
 8016360:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016364:	429a      	cmp	r2, r3
 8016366:	d8e0      	bhi.n	801632a <f_open+0x2c6>
				}
				fp->clust = clst;
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801636c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801636e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016372:	2b00      	cmp	r3, #0
 8016374:	d127      	bne.n	80163c6 <f_open+0x362>
 8016376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801637c:	2b00      	cmp	r3, #0
 801637e:	d022      	beq.n	80163c6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016380:	693b      	ldr	r3, [r7, #16]
 8016382:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016384:	4618      	mov	r0, r3
 8016386:	f7fd fe65 	bl	8014054 <clust2sect>
 801638a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801638c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801638e:	2b00      	cmp	r3, #0
 8016390:	d103      	bne.n	801639a <f_open+0x336>
						res = FR_INT_ERR;
 8016392:	2302      	movs	r3, #2
 8016394:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016398:	e015      	b.n	80163c6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801639a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801639c:	0a5a      	lsrs	r2, r3, #9
 801639e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163a0:	441a      	add	r2, r3
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80163a6:	693b      	ldr	r3, [r7, #16]
 80163a8:	7858      	ldrb	r0, [r3, #1]
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	6a1a      	ldr	r2, [r3, #32]
 80163b4:	2301      	movs	r3, #1
 80163b6:	f7fd fa9b 	bl	80138f0 <disk_read>
 80163ba:	4603      	mov	r3, r0
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d002      	beq.n	80163c6 <f_open+0x362>
 80163c0:	2301      	movs	r3, #1
 80163c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80163c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d002      	beq.n	80163d4 <f_open+0x370>
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	2200      	movs	r2, #0
 80163d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80163d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80163d8:	4618      	mov	r0, r3
 80163da:	3768      	adds	r7, #104	; 0x68
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd80      	pop	{r7, pc}

080163e0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b08e      	sub	sp, #56	; 0x38
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	60f8      	str	r0, [r7, #12]
 80163e8:	60b9      	str	r1, [r7, #8]
 80163ea:	607a      	str	r2, [r7, #4]
 80163ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	2200      	movs	r2, #0
 80163f6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	f107 0214 	add.w	r2, r7, #20
 80163fe:	4611      	mov	r1, r2
 8016400:	4618      	mov	r0, r3
 8016402:	f7ff fdb3 	bl	8015f6c <validate>
 8016406:	4603      	mov	r3, r0
 8016408:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801640c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016410:	2b00      	cmp	r3, #0
 8016412:	d107      	bne.n	8016424 <f_read+0x44>
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	7d5b      	ldrb	r3, [r3, #21]
 8016418:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801641c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016420:	2b00      	cmp	r3, #0
 8016422:	d002      	beq.n	801642a <f_read+0x4a>
 8016424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016428:	e115      	b.n	8016656 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	7d1b      	ldrb	r3, [r3, #20]
 801642e:	f003 0301 	and.w	r3, r3, #1
 8016432:	2b00      	cmp	r3, #0
 8016434:	d101      	bne.n	801643a <f_read+0x5a>
 8016436:	2307      	movs	r3, #7
 8016438:	e10d      	b.n	8016656 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	68da      	ldr	r2, [r3, #12]
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	699b      	ldr	r3, [r3, #24]
 8016442:	1ad3      	subs	r3, r2, r3
 8016444:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8016446:	687a      	ldr	r2, [r7, #4]
 8016448:	6a3b      	ldr	r3, [r7, #32]
 801644a:	429a      	cmp	r2, r3
 801644c:	f240 80fe 	bls.w	801664c <f_read+0x26c>
 8016450:	6a3b      	ldr	r3, [r7, #32]
 8016452:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8016454:	e0fa      	b.n	801664c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	699b      	ldr	r3, [r3, #24]
 801645a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801645e:	2b00      	cmp	r3, #0
 8016460:	f040 80c6 	bne.w	80165f0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	699b      	ldr	r3, [r3, #24]
 8016468:	0a5b      	lsrs	r3, r3, #9
 801646a:	697a      	ldr	r2, [r7, #20]
 801646c:	8952      	ldrh	r2, [r2, #10]
 801646e:	3a01      	subs	r2, #1
 8016470:	4013      	ands	r3, r2
 8016472:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8016474:	69fb      	ldr	r3, [r7, #28]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d12f      	bne.n	80164da <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	699b      	ldr	r3, [r3, #24]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d103      	bne.n	801648a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	689b      	ldr	r3, [r3, #8]
 8016486:	633b      	str	r3, [r7, #48]	; 0x30
 8016488:	e013      	b.n	80164b2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801648e:	2b00      	cmp	r3, #0
 8016490:	d007      	beq.n	80164a2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	699b      	ldr	r3, [r3, #24]
 8016496:	4619      	mov	r1, r3
 8016498:	68f8      	ldr	r0, [r7, #12]
 801649a:	f7fe f88b 	bl	80145b4 <clmt_clust>
 801649e:	6338      	str	r0, [r7, #48]	; 0x30
 80164a0:	e007      	b.n	80164b2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80164a2:	68fa      	ldr	r2, [r7, #12]
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	69db      	ldr	r3, [r3, #28]
 80164a8:	4619      	mov	r1, r3
 80164aa:	4610      	mov	r0, r2
 80164ac:	f7fd fdf1 	bl	8014092 <get_fat>
 80164b0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80164b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b4:	2b01      	cmp	r3, #1
 80164b6:	d804      	bhi.n	80164c2 <f_read+0xe2>
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	2202      	movs	r2, #2
 80164bc:	755a      	strb	r2, [r3, #21]
 80164be:	2302      	movs	r3, #2
 80164c0:	e0c9      	b.n	8016656 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80164c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164c8:	d104      	bne.n	80164d4 <f_read+0xf4>
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	2201      	movs	r2, #1
 80164ce:	755a      	strb	r2, [r3, #21]
 80164d0:	2301      	movs	r3, #1
 80164d2:	e0c0      	b.n	8016656 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164d8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80164da:	697a      	ldr	r2, [r7, #20]
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	69db      	ldr	r3, [r3, #28]
 80164e0:	4619      	mov	r1, r3
 80164e2:	4610      	mov	r0, r2
 80164e4:	f7fd fdb6 	bl	8014054 <clust2sect>
 80164e8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80164ea:	69bb      	ldr	r3, [r7, #24]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d104      	bne.n	80164fa <f_read+0x11a>
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	2202      	movs	r2, #2
 80164f4:	755a      	strb	r2, [r3, #21]
 80164f6:	2302      	movs	r3, #2
 80164f8:	e0ad      	b.n	8016656 <f_read+0x276>
			sect += csect;
 80164fa:	69ba      	ldr	r2, [r7, #24]
 80164fc:	69fb      	ldr	r3, [r7, #28]
 80164fe:	4413      	add	r3, r2
 8016500:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	0a5b      	lsrs	r3, r3, #9
 8016506:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8016508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801650a:	2b00      	cmp	r3, #0
 801650c:	d039      	beq.n	8016582 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801650e:	69fa      	ldr	r2, [r7, #28]
 8016510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016512:	4413      	add	r3, r2
 8016514:	697a      	ldr	r2, [r7, #20]
 8016516:	8952      	ldrh	r2, [r2, #10]
 8016518:	4293      	cmp	r3, r2
 801651a:	d905      	bls.n	8016528 <f_read+0x148>
					cc = fs->csize - csect;
 801651c:	697b      	ldr	r3, [r7, #20]
 801651e:	895b      	ldrh	r3, [r3, #10]
 8016520:	461a      	mov	r2, r3
 8016522:	69fb      	ldr	r3, [r7, #28]
 8016524:	1ad3      	subs	r3, r2, r3
 8016526:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016528:	697b      	ldr	r3, [r7, #20]
 801652a:	7858      	ldrb	r0, [r3, #1]
 801652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652e:	69ba      	ldr	r2, [r7, #24]
 8016530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016532:	f7fd f9dd 	bl	80138f0 <disk_read>
 8016536:	4603      	mov	r3, r0
 8016538:	2b00      	cmp	r3, #0
 801653a:	d004      	beq.n	8016546 <f_read+0x166>
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	2201      	movs	r2, #1
 8016540:	755a      	strb	r2, [r3, #21]
 8016542:	2301      	movs	r3, #1
 8016544:	e087      	b.n	8016656 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	7d1b      	ldrb	r3, [r3, #20]
 801654a:	b25b      	sxtb	r3, r3
 801654c:	2b00      	cmp	r3, #0
 801654e:	da14      	bge.n	801657a <f_read+0x19a>
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	6a1a      	ldr	r2, [r3, #32]
 8016554:	69bb      	ldr	r3, [r7, #24]
 8016556:	1ad3      	subs	r3, r2, r3
 8016558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801655a:	429a      	cmp	r2, r3
 801655c:	d90d      	bls.n	801657a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	6a1a      	ldr	r2, [r3, #32]
 8016562:	69bb      	ldr	r3, [r7, #24]
 8016564:	1ad3      	subs	r3, r2, r3
 8016566:	025b      	lsls	r3, r3, #9
 8016568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801656a:	18d0      	adds	r0, r2, r3
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	3330      	adds	r3, #48	; 0x30
 8016570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016574:	4619      	mov	r1, r3
 8016576:	f7fd faa3 	bl	8013ac0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801657c:	025b      	lsls	r3, r3, #9
 801657e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8016580:	e050      	b.n	8016624 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	6a1b      	ldr	r3, [r3, #32]
 8016586:	69ba      	ldr	r2, [r7, #24]
 8016588:	429a      	cmp	r2, r3
 801658a:	d02e      	beq.n	80165ea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	7d1b      	ldrb	r3, [r3, #20]
 8016590:	b25b      	sxtb	r3, r3
 8016592:	2b00      	cmp	r3, #0
 8016594:	da18      	bge.n	80165c8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016596:	697b      	ldr	r3, [r7, #20]
 8016598:	7858      	ldrb	r0, [r3, #1]
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	6a1a      	ldr	r2, [r3, #32]
 80165a4:	2301      	movs	r3, #1
 80165a6:	f7fd f9c3 	bl	8013930 <disk_write>
 80165aa:	4603      	mov	r3, r0
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d004      	beq.n	80165ba <f_read+0x1da>
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	2201      	movs	r2, #1
 80165b4:	755a      	strb	r2, [r3, #21]
 80165b6:	2301      	movs	r3, #1
 80165b8:	e04d      	b.n	8016656 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	7d1b      	ldrb	r3, [r3, #20]
 80165be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80165c2:	b2da      	uxtb	r2, r3
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80165c8:	697b      	ldr	r3, [r7, #20]
 80165ca:	7858      	ldrb	r0, [r3, #1]
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80165d2:	2301      	movs	r3, #1
 80165d4:	69ba      	ldr	r2, [r7, #24]
 80165d6:	f7fd f98b 	bl	80138f0 <disk_read>
 80165da:	4603      	mov	r3, r0
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d004      	beq.n	80165ea <f_read+0x20a>
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	2201      	movs	r2, #1
 80165e4:	755a      	strb	r2, [r3, #21]
 80165e6:	2301      	movs	r3, #1
 80165e8:	e035      	b.n	8016656 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	69ba      	ldr	r2, [r7, #24]
 80165ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	699b      	ldr	r3, [r3, #24]
 80165f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80165f8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80165fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80165fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	429a      	cmp	r2, r3
 8016604:	d901      	bls.n	801660a <f_read+0x22a>
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	699b      	ldr	r3, [r3, #24]
 8016614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016618:	4413      	add	r3, r2
 801661a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801661c:	4619      	mov	r1, r3
 801661e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016620:	f7fd fa4e 	bl	8013ac0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8016624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016628:	4413      	add	r3, r2
 801662a:	627b      	str	r3, [r7, #36]	; 0x24
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	699a      	ldr	r2, [r3, #24]
 8016630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016632:	441a      	add	r2, r3
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	619a      	str	r2, [r3, #24]
 8016638:	683b      	ldr	r3, [r7, #0]
 801663a:	681a      	ldr	r2, [r3, #0]
 801663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801663e:	441a      	add	r2, r3
 8016640:	683b      	ldr	r3, [r7, #0]
 8016642:	601a      	str	r2, [r3, #0]
 8016644:	687a      	ldr	r2, [r7, #4]
 8016646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016648:	1ad3      	subs	r3, r2, r3
 801664a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	2b00      	cmp	r3, #0
 8016650:	f47f af01 	bne.w	8016456 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8016654:	2300      	movs	r3, #0
}
 8016656:	4618      	mov	r0, r3
 8016658:	3738      	adds	r7, #56	; 0x38
 801665a:	46bd      	mov	sp, r7
 801665c:	bd80      	pop	{r7, pc}

0801665e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801665e:	b580      	push	{r7, lr}
 8016660:	b08c      	sub	sp, #48	; 0x30
 8016662:	af00      	add	r7, sp, #0
 8016664:	60f8      	str	r0, [r7, #12]
 8016666:	60b9      	str	r1, [r7, #8]
 8016668:	607a      	str	r2, [r7, #4]
 801666a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801666c:	68bb      	ldr	r3, [r7, #8]
 801666e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	2200      	movs	r2, #0
 8016674:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	f107 0210 	add.w	r2, r7, #16
 801667c:	4611      	mov	r1, r2
 801667e:	4618      	mov	r0, r3
 8016680:	f7ff fc74 	bl	8015f6c <validate>
 8016684:	4603      	mov	r3, r0
 8016686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801668a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801668e:	2b00      	cmp	r3, #0
 8016690:	d107      	bne.n	80166a2 <f_write+0x44>
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	7d5b      	ldrb	r3, [r3, #21]
 8016696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801669a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d002      	beq.n	80166a8 <f_write+0x4a>
 80166a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80166a6:	e14b      	b.n	8016940 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	7d1b      	ldrb	r3, [r3, #20]
 80166ac:	f003 0302 	and.w	r3, r3, #2
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d101      	bne.n	80166b8 <f_write+0x5a>
 80166b4:	2307      	movs	r3, #7
 80166b6:	e143      	b.n	8016940 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	699a      	ldr	r2, [r3, #24]
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	441a      	add	r2, r3
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	699b      	ldr	r3, [r3, #24]
 80166c4:	429a      	cmp	r2, r3
 80166c6:	f080 812d 	bcs.w	8016924 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	699b      	ldr	r3, [r3, #24]
 80166ce:	43db      	mvns	r3, r3
 80166d0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80166d2:	e127      	b.n	8016924 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	699b      	ldr	r3, [r3, #24]
 80166d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80166dc:	2b00      	cmp	r3, #0
 80166de:	f040 80e3 	bne.w	80168a8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	699b      	ldr	r3, [r3, #24]
 80166e6:	0a5b      	lsrs	r3, r3, #9
 80166e8:	693a      	ldr	r2, [r7, #16]
 80166ea:	8952      	ldrh	r2, [r2, #10]
 80166ec:	3a01      	subs	r2, #1
 80166ee:	4013      	ands	r3, r2
 80166f0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80166f2:	69bb      	ldr	r3, [r7, #24]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d143      	bne.n	8016780 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	699b      	ldr	r3, [r3, #24]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d10c      	bne.n	801671a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	689b      	ldr	r3, [r3, #8]
 8016704:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016708:	2b00      	cmp	r3, #0
 801670a:	d11a      	bne.n	8016742 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	2100      	movs	r1, #0
 8016710:	4618      	mov	r0, r3
 8016712:	f7fd feb7 	bl	8014484 <create_chain>
 8016716:	62b8      	str	r0, [r7, #40]	; 0x28
 8016718:	e013      	b.n	8016742 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801671e:	2b00      	cmp	r3, #0
 8016720:	d007      	beq.n	8016732 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	699b      	ldr	r3, [r3, #24]
 8016726:	4619      	mov	r1, r3
 8016728:	68f8      	ldr	r0, [r7, #12]
 801672a:	f7fd ff43 	bl	80145b4 <clmt_clust>
 801672e:	62b8      	str	r0, [r7, #40]	; 0x28
 8016730:	e007      	b.n	8016742 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016732:	68fa      	ldr	r2, [r7, #12]
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	69db      	ldr	r3, [r3, #28]
 8016738:	4619      	mov	r1, r3
 801673a:	4610      	mov	r0, r2
 801673c:	f7fd fea2 	bl	8014484 <create_chain>
 8016740:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016744:	2b00      	cmp	r3, #0
 8016746:	f000 80f2 	beq.w	801692e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801674c:	2b01      	cmp	r3, #1
 801674e:	d104      	bne.n	801675a <f_write+0xfc>
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	2202      	movs	r2, #2
 8016754:	755a      	strb	r2, [r3, #21]
 8016756:	2302      	movs	r3, #2
 8016758:	e0f2      	b.n	8016940 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801675c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016760:	d104      	bne.n	801676c <f_write+0x10e>
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	2201      	movs	r2, #1
 8016766:	755a      	strb	r2, [r3, #21]
 8016768:	2301      	movs	r3, #1
 801676a:	e0e9      	b.n	8016940 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016770:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	689b      	ldr	r3, [r3, #8]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d102      	bne.n	8016780 <f_write+0x122>
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801677e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	7d1b      	ldrb	r3, [r3, #20]
 8016784:	b25b      	sxtb	r3, r3
 8016786:	2b00      	cmp	r3, #0
 8016788:	da18      	bge.n	80167bc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801678a:	693b      	ldr	r3, [r7, #16]
 801678c:	7858      	ldrb	r0, [r3, #1]
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	6a1a      	ldr	r2, [r3, #32]
 8016798:	2301      	movs	r3, #1
 801679a:	f7fd f8c9 	bl	8013930 <disk_write>
 801679e:	4603      	mov	r3, r0
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d004      	beq.n	80167ae <f_write+0x150>
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	2201      	movs	r2, #1
 80167a8:	755a      	strb	r2, [r3, #21]
 80167aa:	2301      	movs	r3, #1
 80167ac:	e0c8      	b.n	8016940 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	7d1b      	ldrb	r3, [r3, #20]
 80167b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80167b6:	b2da      	uxtb	r2, r3
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80167bc:	693a      	ldr	r2, [r7, #16]
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	69db      	ldr	r3, [r3, #28]
 80167c2:	4619      	mov	r1, r3
 80167c4:	4610      	mov	r0, r2
 80167c6:	f7fd fc45 	bl	8014054 <clust2sect>
 80167ca:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d104      	bne.n	80167dc <f_write+0x17e>
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	2202      	movs	r2, #2
 80167d6:	755a      	strb	r2, [r3, #21]
 80167d8:	2302      	movs	r3, #2
 80167da:	e0b1      	b.n	8016940 <f_write+0x2e2>
			sect += csect;
 80167dc:	697a      	ldr	r2, [r7, #20]
 80167de:	69bb      	ldr	r3, [r7, #24]
 80167e0:	4413      	add	r3, r2
 80167e2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	0a5b      	lsrs	r3, r3, #9
 80167e8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80167ea:	6a3b      	ldr	r3, [r7, #32]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d03c      	beq.n	801686a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80167f0:	69ba      	ldr	r2, [r7, #24]
 80167f2:	6a3b      	ldr	r3, [r7, #32]
 80167f4:	4413      	add	r3, r2
 80167f6:	693a      	ldr	r2, [r7, #16]
 80167f8:	8952      	ldrh	r2, [r2, #10]
 80167fa:	4293      	cmp	r3, r2
 80167fc:	d905      	bls.n	801680a <f_write+0x1ac>
					cc = fs->csize - csect;
 80167fe:	693b      	ldr	r3, [r7, #16]
 8016800:	895b      	ldrh	r3, [r3, #10]
 8016802:	461a      	mov	r2, r3
 8016804:	69bb      	ldr	r3, [r7, #24]
 8016806:	1ad3      	subs	r3, r2, r3
 8016808:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	7858      	ldrb	r0, [r3, #1]
 801680e:	6a3b      	ldr	r3, [r7, #32]
 8016810:	697a      	ldr	r2, [r7, #20]
 8016812:	69f9      	ldr	r1, [r7, #28]
 8016814:	f7fd f88c 	bl	8013930 <disk_write>
 8016818:	4603      	mov	r3, r0
 801681a:	2b00      	cmp	r3, #0
 801681c:	d004      	beq.n	8016828 <f_write+0x1ca>
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	2201      	movs	r2, #1
 8016822:	755a      	strb	r2, [r3, #21]
 8016824:	2301      	movs	r3, #1
 8016826:	e08b      	b.n	8016940 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	6a1a      	ldr	r2, [r3, #32]
 801682c:	697b      	ldr	r3, [r7, #20]
 801682e:	1ad3      	subs	r3, r2, r3
 8016830:	6a3a      	ldr	r2, [r7, #32]
 8016832:	429a      	cmp	r2, r3
 8016834:	d915      	bls.n	8016862 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	6a1a      	ldr	r2, [r3, #32]
 8016840:	697b      	ldr	r3, [r7, #20]
 8016842:	1ad3      	subs	r3, r2, r3
 8016844:	025b      	lsls	r3, r3, #9
 8016846:	69fa      	ldr	r2, [r7, #28]
 8016848:	4413      	add	r3, r2
 801684a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801684e:	4619      	mov	r1, r3
 8016850:	f7fd f936 	bl	8013ac0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	7d1b      	ldrb	r3, [r3, #20]
 8016858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801685c:	b2da      	uxtb	r2, r3
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016862:	6a3b      	ldr	r3, [r7, #32]
 8016864:	025b      	lsls	r3, r3, #9
 8016866:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8016868:	e03f      	b.n	80168ea <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	6a1b      	ldr	r3, [r3, #32]
 801686e:	697a      	ldr	r2, [r7, #20]
 8016870:	429a      	cmp	r2, r3
 8016872:	d016      	beq.n	80168a2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	699a      	ldr	r2, [r3, #24]
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801687c:	429a      	cmp	r2, r3
 801687e:	d210      	bcs.n	80168a2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8016880:	693b      	ldr	r3, [r7, #16]
 8016882:	7858      	ldrb	r0, [r3, #1]
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801688a:	2301      	movs	r3, #1
 801688c:	697a      	ldr	r2, [r7, #20]
 801688e:	f7fd f82f 	bl	80138f0 <disk_read>
 8016892:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016894:	2b00      	cmp	r3, #0
 8016896:	d004      	beq.n	80168a2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	2201      	movs	r2, #1
 801689c:	755a      	strb	r2, [r3, #21]
 801689e:	2301      	movs	r3, #1
 80168a0:	e04e      	b.n	8016940 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	697a      	ldr	r2, [r7, #20]
 80168a6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	699b      	ldr	r3, [r3, #24]
 80168ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80168b0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80168b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80168b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	429a      	cmp	r2, r3
 80168bc:	d901      	bls.n	80168c2 <f_write+0x264>
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	699b      	ldr	r3, [r3, #24]
 80168cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80168d0:	4413      	add	r3, r2
 80168d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168d4:	69f9      	ldr	r1, [r7, #28]
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7fd f8f2 	bl	8013ac0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	7d1b      	ldrb	r3, [r3, #20]
 80168e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80168e4:	b2da      	uxtb	r2, r3
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80168ea:	69fa      	ldr	r2, [r7, #28]
 80168ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ee:	4413      	add	r3, r2
 80168f0:	61fb      	str	r3, [r7, #28]
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	699a      	ldr	r2, [r3, #24]
 80168f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168f8:	441a      	add	r2, r3
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	619a      	str	r2, [r3, #24]
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	68da      	ldr	r2, [r3, #12]
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	699b      	ldr	r3, [r3, #24]
 8016906:	429a      	cmp	r2, r3
 8016908:	bf38      	it	cc
 801690a:	461a      	movcc	r2, r3
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	60da      	str	r2, [r3, #12]
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	681a      	ldr	r2, [r3, #0]
 8016914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016916:	441a      	add	r2, r3
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	601a      	str	r2, [r3, #0]
 801691c:	687a      	ldr	r2, [r7, #4]
 801691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016920:	1ad3      	subs	r3, r2, r3
 8016922:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2b00      	cmp	r3, #0
 8016928:	f47f aed4 	bne.w	80166d4 <f_write+0x76>
 801692c:	e000      	b.n	8016930 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801692e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	7d1b      	ldrb	r3, [r3, #20]
 8016934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016938:	b2da      	uxtb	r2, r3
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801693e:	2300      	movs	r3, #0
}
 8016940:	4618      	mov	r0, r3
 8016942:	3730      	adds	r7, #48	; 0x30
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}

08016948 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b086      	sub	sp, #24
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	f107 0208 	add.w	r2, r7, #8
 8016956:	4611      	mov	r1, r2
 8016958:	4618      	mov	r0, r3
 801695a:	f7ff fb07 	bl	8015f6c <validate>
 801695e:	4603      	mov	r3, r0
 8016960:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016962:	7dfb      	ldrb	r3, [r7, #23]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d168      	bne.n	8016a3a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	7d1b      	ldrb	r3, [r3, #20]
 801696c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016970:	2b00      	cmp	r3, #0
 8016972:	d062      	beq.n	8016a3a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	7d1b      	ldrb	r3, [r3, #20]
 8016978:	b25b      	sxtb	r3, r3
 801697a:	2b00      	cmp	r3, #0
 801697c:	da15      	bge.n	80169aa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	7858      	ldrb	r0, [r3, #1]
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	6a1a      	ldr	r2, [r3, #32]
 801698c:	2301      	movs	r3, #1
 801698e:	f7fc ffcf 	bl	8013930 <disk_write>
 8016992:	4603      	mov	r3, r0
 8016994:	2b00      	cmp	r3, #0
 8016996:	d001      	beq.n	801699c <f_sync+0x54>
 8016998:	2301      	movs	r3, #1
 801699a:	e04f      	b.n	8016a3c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	7d1b      	ldrb	r3, [r3, #20]
 80169a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80169a4:	b2da      	uxtb	r2, r3
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80169aa:	f7fc ffff 	bl	80139ac <get_fattime>
 80169ae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80169b0:	68ba      	ldr	r2, [r7, #8]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169b6:	4619      	mov	r1, r3
 80169b8:	4610      	mov	r0, r2
 80169ba:	f7fd faaf 	bl	8013f1c <move_window>
 80169be:	4603      	mov	r3, r0
 80169c0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80169c2:	7dfb      	ldrb	r3, [r7, #23]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d138      	bne.n	8016a3a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169cc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	330b      	adds	r3, #11
 80169d2:	781a      	ldrb	r2, [r3, #0]
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	330b      	adds	r3, #11
 80169d8:	f042 0220 	orr.w	r2, r2, #32
 80169dc:	b2d2      	uxtb	r2, r2
 80169de:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	6818      	ldr	r0, [r3, #0]
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	689b      	ldr	r3, [r3, #8]
 80169e8:	461a      	mov	r2, r3
 80169ea:	68f9      	ldr	r1, [r7, #12]
 80169ec:	f7fd ffbc 	bl	8014968 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	f103 021c 	add.w	r2, r3, #28
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	68db      	ldr	r3, [r3, #12]
 80169fa:	4619      	mov	r1, r3
 80169fc:	4610      	mov	r0, r2
 80169fe:	f7fd f833 	bl	8013a68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	3316      	adds	r3, #22
 8016a06:	6939      	ldr	r1, [r7, #16]
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7fd f82d 	bl	8013a68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	3312      	adds	r3, #18
 8016a12:	2100      	movs	r1, #0
 8016a14:	4618      	mov	r0, r3
 8016a16:	f7fd f80c 	bl	8013a32 <st_word>
					fs->wflag = 1;
 8016a1a:	68bb      	ldr	r3, [r7, #8]
 8016a1c:	2201      	movs	r2, #1
 8016a1e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8016a20:	68bb      	ldr	r3, [r7, #8]
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7fd faa8 	bl	8013f78 <sync_fs>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	7d1b      	ldrb	r3, [r3, #20]
 8016a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016a34:	b2da      	uxtb	r2, r3
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8016a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	3718      	adds	r7, #24
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}

08016a44 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b084      	sub	sp, #16
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8016a4c:	6878      	ldr	r0, [r7, #4]
 8016a4e:	f7ff ff7b 	bl	8016948 <f_sync>
 8016a52:	4603      	mov	r3, r0
 8016a54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8016a56:	7bfb      	ldrb	r3, [r7, #15]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d118      	bne.n	8016a8e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	f107 0208 	add.w	r2, r7, #8
 8016a62:	4611      	mov	r1, r2
 8016a64:	4618      	mov	r0, r3
 8016a66:	f7ff fa81 	bl	8015f6c <validate>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8016a6e:	7bfb      	ldrb	r3, [r7, #15]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d10c      	bne.n	8016a8e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	691b      	ldr	r3, [r3, #16]
 8016a78:	4618      	mov	r0, r3
 8016a7a:	f7fd f9ab 	bl	8013dd4 <dec_lock>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8016a82:	7bfb      	ldrb	r3, [r7, #15]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d102      	bne.n	8016a8e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8016a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a90:	4618      	mov	r0, r3
 8016a92:	3710      	adds	r7, #16
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}

08016a98 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b086      	sub	sp, #24
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d101      	bne.n	8016aac <f_opendir+0x14>
 8016aa8:	2309      	movs	r3, #9
 8016aaa:	e064      	b.n	8016b76 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8016ab0:	f107 010c 	add.w	r1, r7, #12
 8016ab4:	463b      	mov	r3, r7
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f7ff f805 	bl	8015ac8 <find_volume>
 8016abe:	4603      	mov	r3, r0
 8016ac0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016ac2:	7dfb      	ldrb	r3, [r7, #23]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d14f      	bne.n	8016b68 <f_opendir+0xd0>
		obj->fs = fs;
 8016ac8:	68fa      	ldr	r2, [r7, #12]
 8016aca:	693b      	ldr	r3, [r7, #16]
 8016acc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8016ace:	683b      	ldr	r3, [r7, #0]
 8016ad0:	4619      	mov	r1, r3
 8016ad2:	6878      	ldr	r0, [r7, #4]
 8016ad4:	f7fe feec 	bl	80158b0 <follow_path>
 8016ad8:	4603      	mov	r3, r0
 8016ada:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8016adc:	7dfb      	ldrb	r3, [r7, #23]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d13d      	bne.n	8016b5e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016ae8:	b25b      	sxtb	r3, r3
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	db12      	blt.n	8016b14 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	799b      	ldrb	r3, [r3, #6]
 8016af2:	f003 0310 	and.w	r3, r3, #16
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d00a      	beq.n	8016b10 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8016afa:	68fa      	ldr	r2, [r7, #12]
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	6a1b      	ldr	r3, [r3, #32]
 8016b00:	4619      	mov	r1, r3
 8016b02:	4610      	mov	r0, r2
 8016b04:	f7fd ff11 	bl	801492a <ld_clust>
 8016b08:	4602      	mov	r2, r0
 8016b0a:	693b      	ldr	r3, [r7, #16]
 8016b0c:	609a      	str	r2, [r3, #8]
 8016b0e:	e001      	b.n	8016b14 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8016b10:	2305      	movs	r3, #5
 8016b12:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8016b14:	7dfb      	ldrb	r3, [r7, #23]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d121      	bne.n	8016b5e <f_opendir+0xc6>
				obj->id = fs->id;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	88da      	ldrh	r2, [r3, #6]
 8016b1e:	693b      	ldr	r3, [r7, #16]
 8016b20:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8016b22:	2100      	movs	r1, #0
 8016b24:	6878      	ldr	r0, [r7, #4]
 8016b26:	f7fd fd79 	bl	801461c <dir_sdi>
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8016b2e:	7dfb      	ldrb	r3, [r7, #23]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d114      	bne.n	8016b5e <f_opendir+0xc6>
					if (obj->sclust) {
 8016b34:	693b      	ldr	r3, [r7, #16]
 8016b36:	689b      	ldr	r3, [r3, #8]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d00d      	beq.n	8016b58 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8016b3c:	2100      	movs	r1, #0
 8016b3e:	6878      	ldr	r0, [r7, #4]
 8016b40:	f7fd f8ba 	bl	8013cb8 <inc_lock>
 8016b44:	4602      	mov	r2, r0
 8016b46:	693b      	ldr	r3, [r7, #16]
 8016b48:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8016b4a:	693b      	ldr	r3, [r7, #16]
 8016b4c:	691b      	ldr	r3, [r3, #16]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d105      	bne.n	8016b5e <f_opendir+0xc6>
 8016b52:	2312      	movs	r3, #18
 8016b54:	75fb      	strb	r3, [r7, #23]
 8016b56:	e002      	b.n	8016b5e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8016b58:	693b      	ldr	r3, [r7, #16]
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8016b5e:	7dfb      	ldrb	r3, [r7, #23]
 8016b60:	2b04      	cmp	r3, #4
 8016b62:	d101      	bne.n	8016b68 <f_opendir+0xd0>
 8016b64:	2305      	movs	r3, #5
 8016b66:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8016b68:	7dfb      	ldrb	r3, [r7, #23]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d002      	beq.n	8016b74 <f_opendir+0xdc>
 8016b6e:	693b      	ldr	r3, [r7, #16]
 8016b70:	2200      	movs	r2, #0
 8016b72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b76:	4618      	mov	r0, r3
 8016b78:	3718      	adds	r7, #24
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bd80      	pop	{r7, pc}

08016b7e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8016b7e:	b580      	push	{r7, lr}
 8016b80:	b084      	sub	sp, #16
 8016b82:	af00      	add	r7, sp, #0
 8016b84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	f107 0208 	add.w	r2, r7, #8
 8016b8c:	4611      	mov	r1, r2
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7ff f9ec 	bl	8015f6c <validate>
 8016b94:	4603      	mov	r3, r0
 8016b96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016b98:	7bfb      	ldrb	r3, [r7, #15]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d110      	bne.n	8016bc0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	691b      	ldr	r3, [r3, #16]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d006      	beq.n	8016bb4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	691b      	ldr	r3, [r3, #16]
 8016baa:	4618      	mov	r0, r3
 8016bac:	f7fd f912 	bl	8013dd4 <dec_lock>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8016bb4:	7bfb      	ldrb	r3, [r7, #15]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d102      	bne.n	8016bc0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8016bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	3710      	adds	r7, #16
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}

08016bca <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8016bca:	b580      	push	{r7, lr}
 8016bcc:	b084      	sub	sp, #16
 8016bce:	af00      	add	r7, sp, #0
 8016bd0:	6078      	str	r0, [r7, #4]
 8016bd2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f107 0208 	add.w	r2, r7, #8
 8016bda:	4611      	mov	r1, r2
 8016bdc:	4618      	mov	r0, r3
 8016bde:	f7ff f9c5 	bl	8015f6c <validate>
 8016be2:	4603      	mov	r3, r0
 8016be4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016be6:	7bfb      	ldrb	r3, [r7, #15]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d126      	bne.n	8016c3a <f_readdir+0x70>
		if (!fno) {
 8016bec:	683b      	ldr	r3, [r7, #0]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d106      	bne.n	8016c00 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8016bf2:	2100      	movs	r1, #0
 8016bf4:	6878      	ldr	r0, [r7, #4]
 8016bf6:	f7fd fd11 	bl	801461c <dir_sdi>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	73fb      	strb	r3, [r7, #15]
 8016bfe:	e01c      	b.n	8016c3a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8016c00:	2100      	movs	r1, #0
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f7fe f8bd 	bl	8014d82 <dir_read>
 8016c08:	4603      	mov	r3, r0
 8016c0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8016c0c:	7bfb      	ldrb	r3, [r7, #15]
 8016c0e:	2b04      	cmp	r3, #4
 8016c10:	d101      	bne.n	8016c16 <f_readdir+0x4c>
 8016c12:	2300      	movs	r3, #0
 8016c14:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8016c16:	7bfb      	ldrb	r3, [r7, #15]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d10e      	bne.n	8016c3a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8016c1c:	6839      	ldr	r1, [r7, #0]
 8016c1e:	6878      	ldr	r0, [r7, #4]
 8016c20:	f7fe fb0e 	bl	8015240 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8016c24:	2100      	movs	r1, #0
 8016c26:	6878      	ldr	r0, [r7, #4]
 8016c28:	f7fd fd73 	bl	8014712 <dir_next>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8016c30:	7bfb      	ldrb	r3, [r7, #15]
 8016c32:	2b04      	cmp	r3, #4
 8016c34:	d101      	bne.n	8016c3a <f_readdir+0x70>
 8016c36:	2300      	movs	r3, #0
 8016c38:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8016c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	3710      	adds	r7, #16
 8016c40:	46bd      	mov	sp, r7
 8016c42:	bd80      	pop	{r7, pc}

08016c44 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b084      	sub	sp, #16
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
 8016c4c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8016c4e:	6839      	ldr	r1, [r7, #0]
 8016c50:	6878      	ldr	r0, [r7, #4]
 8016c52:	f7ff ffba 	bl	8016bca <f_readdir>
 8016c56:	4603      	mov	r3, r0
 8016c58:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8016c5a:	7bfb      	ldrb	r3, [r7, #15]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d114      	bne.n	8016c8a <f_findnext+0x46>
 8016c60:	683b      	ldr	r3, [r7, #0]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d011      	beq.n	8016c8a <f_findnext+0x46>
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	7d9b      	ldrb	r3, [r3, #22]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d00d      	beq.n	8016c8a <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	f103 0116 	add.w	r1, r3, #22
 8016c78:	2300      	movs	r3, #0
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	f7fe fbe4 	bl	8015448 <pattern_matching>
 8016c80:	4603      	mov	r3, r0
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d100      	bne.n	8016c88 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8016c86:	e7e2      	b.n	8016c4e <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8016c88:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8016c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	3710      	adds	r7, #16
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b086      	sub	sp, #24
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	60f8      	str	r0, [r7, #12]
 8016c9c:	60b9      	str	r1, [r7, #8]
 8016c9e:	607a      	str	r2, [r7, #4]
 8016ca0:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	683a      	ldr	r2, [r7, #0]
 8016ca6:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8016ca8:	6879      	ldr	r1, [r7, #4]
 8016caa:	68f8      	ldr	r0, [r7, #12]
 8016cac:	f7ff fef4 	bl	8016a98 <f_opendir>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016cb4:	7dfb      	ldrb	r3, [r7, #23]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d105      	bne.n	8016cc6 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8016cba:	68b9      	ldr	r1, [r7, #8]
 8016cbc:	68f8      	ldr	r0, [r7, #12]
 8016cbe:	f7ff ffc1 	bl	8016c44 <f_findnext>
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8016cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cc8:	4618      	mov	r0, r3
 8016cca:	3718      	adds	r7, #24
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}

08016cd0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b098      	sub	sp, #96	; 0x60
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8016cd8:	f107 0108 	add.w	r1, r7, #8
 8016cdc:	1d3b      	adds	r3, r7, #4
 8016cde:	2202      	movs	r2, #2
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	f7fe fef1 	bl	8015ac8 <find_volume>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8016cf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	f040 80ec 	bne.w	8016ed2 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8016cfa:	687a      	ldr	r2, [r7, #4]
 8016cfc:	f107 030c 	add.w	r3, r7, #12
 8016d00:	4611      	mov	r1, r2
 8016d02:	4618      	mov	r0, r3
 8016d04:	f7fe fdd4 	bl	80158b0 <follow_path>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8016d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d102      	bne.n	8016d1c <f_mkdir+0x4c>
 8016d16:	2308      	movs	r3, #8
 8016d18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8016d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016d20:	2b04      	cmp	r3, #4
 8016d22:	f040 80d6 	bne.w	8016ed2 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8016d26:	f107 030c 	add.w	r3, r7, #12
 8016d2a:	2100      	movs	r1, #0
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f7fd fba9 	bl	8014484 <create_chain>
 8016d32:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8016d34:	68bb      	ldr	r3, [r7, #8]
 8016d36:	895b      	ldrh	r3, [r3, #10]
 8016d38:	025b      	lsls	r3, r3, #9
 8016d3a:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8016d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d102      	bne.n	8016d4e <f_mkdir+0x7e>
 8016d48:	2307      	movs	r3, #7
 8016d4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8016d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d50:	2b01      	cmp	r3, #1
 8016d52:	d102      	bne.n	8016d5a <f_mkdir+0x8a>
 8016d54:	2302      	movs	r3, #2
 8016d56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d60:	d102      	bne.n	8016d68 <f_mkdir+0x98>
 8016d62:	2301      	movs	r3, #1
 8016d64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8016d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d106      	bne.n	8016d7e <f_mkdir+0xae>
 8016d70:	68bb      	ldr	r3, [r7, #8]
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7fd f88e 	bl	8013e94 <sync_window>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8016d7e:	f7fc fe15 	bl	80139ac <get_fattime>
 8016d82:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8016d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d16a      	bne.n	8016e62 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016d90:	4618      	mov	r0, r3
 8016d92:	f7fd f95f 	bl	8014054 <clust2sect>
 8016d96:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8016d98:	68bb      	ldr	r3, [r7, #8]
 8016d9a:	3334      	adds	r3, #52	; 0x34
 8016d9c:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8016d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016da2:	2100      	movs	r1, #0
 8016da4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016da6:	f7fc feac 	bl	8013b02 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8016daa:	220b      	movs	r2, #11
 8016dac:	2120      	movs	r1, #32
 8016dae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016db0:	f7fc fea7 	bl	8013b02 <mem_set>
					dir[DIR_Name] = '.';
 8016db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016db6:	222e      	movs	r2, #46	; 0x2e
 8016db8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8016dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016dbc:	330b      	adds	r3, #11
 8016dbe:	2210      	movs	r2, #16
 8016dc0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8016dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016dc4:	3316      	adds	r3, #22
 8016dc6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7fc fe4d 	bl	8013a68 <st_dword>
					st_clust(fs, dir, dcl);
 8016dce:	68bb      	ldr	r3, [r7, #8]
 8016dd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016dd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f7fd fdc7 	bl	8014968 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8016dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ddc:	3320      	adds	r3, #32
 8016dde:	2220      	movs	r2, #32
 8016de0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016de2:	4618      	mov	r0, r3
 8016de4:	f7fc fe6c 	bl	8013ac0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8016de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016dea:	3321      	adds	r3, #33	; 0x21
 8016dec:	222e      	movs	r2, #46	; 0x2e
 8016dee:	701a      	strb	r2, [r3, #0]
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	781b      	ldrb	r3, [r3, #0]
 8016df8:	2b03      	cmp	r3, #3
 8016dfa:	d106      	bne.n	8016e0a <f_mkdir+0x13a>
 8016dfc:	68bb      	ldr	r3, [r7, #8]
 8016dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016e02:	429a      	cmp	r2, r3
 8016e04:	d101      	bne.n	8016e0a <f_mkdir+0x13a>
 8016e06:	2300      	movs	r3, #0
 8016e08:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8016e0a:	68b8      	ldr	r0, [r7, #8]
 8016e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e0e:	3320      	adds	r3, #32
 8016e10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016e12:	4619      	mov	r1, r3
 8016e14:	f7fd fda8 	bl	8014968 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016e18:	68bb      	ldr	r3, [r7, #8]
 8016e1a:	895b      	ldrh	r3, [r3, #10]
 8016e1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8016e1e:	e01b      	b.n	8016e58 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8016e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e22:	1c5a      	adds	r2, r3, #1
 8016e24:	657a      	str	r2, [r7, #84]	; 0x54
 8016e26:	68ba      	ldr	r2, [r7, #8]
 8016e28:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8016e2a:	68bb      	ldr	r3, [r7, #8]
 8016e2c:	2201      	movs	r2, #1
 8016e2e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8016e30:	68bb      	ldr	r3, [r7, #8]
 8016e32:	4618      	mov	r0, r3
 8016e34:	f7fd f82e 	bl	8013e94 <sync_window>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8016e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d10c      	bne.n	8016e60 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8016e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016e4a:	2100      	movs	r1, #0
 8016e4c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016e4e:	f7fc fe58 	bl	8013b02 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016e54:	3b01      	subs	r3, #1
 8016e56:	65bb      	str	r3, [r7, #88]	; 0x58
 8016e58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d1e0      	bne.n	8016e20 <f_mkdir+0x150>
 8016e5e:	e000      	b.n	8016e62 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8016e60:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8016e62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d107      	bne.n	8016e7a <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8016e6a:	f107 030c 	add.w	r3, r7, #12
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7fe f8ee 	bl	8015050 <dir_register>
 8016e74:	4603      	mov	r3, r0
 8016e76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8016e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d120      	bne.n	8016ec4 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8016e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e84:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8016e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e88:	3316      	adds	r3, #22
 8016e8a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	f7fc fdeb 	bl	8013a68 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8016e92:	68bb      	ldr	r3, [r7, #8]
 8016e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016e96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7fd fd65 	bl	8014968 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8016e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ea0:	330b      	adds	r3, #11
 8016ea2:	2210      	movs	r2, #16
 8016ea4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	2201      	movs	r2, #1
 8016eaa:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8016eac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d10e      	bne.n	8016ed2 <f_mkdir+0x202>
					res = sync_fs(fs);
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7fd f85e 	bl	8013f78 <sync_fs>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016ec2:	e006      	b.n	8016ed2 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8016ec4:	f107 030c 	add.w	r3, r7, #12
 8016ec8:	2200      	movs	r2, #0
 8016eca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f7fd fa74 	bl	80143ba <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8016ed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	3760      	adds	r7, #96	; 0x60
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}
	...

08016ee0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016ee0:	b480      	push	{r7}
 8016ee2:	b087      	sub	sp, #28
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	60f8      	str	r0, [r7, #12]
 8016ee8:	60b9      	str	r1, [r7, #8]
 8016eea:	4613      	mov	r3, r2
 8016eec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016eee:	2301      	movs	r3, #1
 8016ef0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016ef6:	4b1f      	ldr	r3, [pc, #124]	; (8016f74 <FATFS_LinkDriverEx+0x94>)
 8016ef8:	7a5b      	ldrb	r3, [r3, #9]
 8016efa:	b2db      	uxtb	r3, r3
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d131      	bne.n	8016f64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016f00:	4b1c      	ldr	r3, [pc, #112]	; (8016f74 <FATFS_LinkDriverEx+0x94>)
 8016f02:	7a5b      	ldrb	r3, [r3, #9]
 8016f04:	b2db      	uxtb	r3, r3
 8016f06:	461a      	mov	r2, r3
 8016f08:	4b1a      	ldr	r3, [pc, #104]	; (8016f74 <FATFS_LinkDriverEx+0x94>)
 8016f0a:	2100      	movs	r1, #0
 8016f0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016f0e:	4b19      	ldr	r3, [pc, #100]	; (8016f74 <FATFS_LinkDriverEx+0x94>)
 8016f10:	7a5b      	ldrb	r3, [r3, #9]
 8016f12:	b2db      	uxtb	r3, r3
 8016f14:	4a17      	ldr	r2, [pc, #92]	; (8016f74 <FATFS_LinkDriverEx+0x94>)
 8016f16:	009b      	lsls	r3, r3, #2
 8016f18:	4413      	add	r3, r2
 8016f1a:	68fa      	ldr	r2, [r7, #12]
 8016f1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016f1e:	4b15      	ldr	r3, [pc, #84]	; (8016f74 <FATFS_LinkDriverEx+0x94>)
 8016f20:	7a5b      	ldrb	r3, [r3, #9]
 8016f22:	b2db      	uxtb	r3, r3
 8016f24:	461a      	mov	r2, r3
 8016f26:	4b13      	ldr	r3, [pc, #76]	; (8016f74 <FATFS_LinkDriverEx+0x94>)
 8016f28:	4413      	add	r3, r2
 8016f2a:	79fa      	ldrb	r2, [r7, #7]
 8016f2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016f2e:	4b11      	ldr	r3, [pc, #68]	; (8016f74 <FATFS_LinkDriverEx+0x94>)
 8016f30:	7a5b      	ldrb	r3, [r3, #9]
 8016f32:	b2db      	uxtb	r3, r3
 8016f34:	1c5a      	adds	r2, r3, #1
 8016f36:	b2d1      	uxtb	r1, r2
 8016f38:	4a0e      	ldr	r2, [pc, #56]	; (8016f74 <FATFS_LinkDriverEx+0x94>)
 8016f3a:	7251      	strb	r1, [r2, #9]
 8016f3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016f3e:	7dbb      	ldrb	r3, [r7, #22]
 8016f40:	3330      	adds	r3, #48	; 0x30
 8016f42:	b2da      	uxtb	r2, r3
 8016f44:	68bb      	ldr	r3, [r7, #8]
 8016f46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016f48:	68bb      	ldr	r3, [r7, #8]
 8016f4a:	3301      	adds	r3, #1
 8016f4c:	223a      	movs	r2, #58	; 0x3a
 8016f4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016f50:	68bb      	ldr	r3, [r7, #8]
 8016f52:	3302      	adds	r3, #2
 8016f54:	222f      	movs	r2, #47	; 0x2f
 8016f56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	3303      	adds	r3, #3
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016f60:	2300      	movs	r3, #0
 8016f62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	371c      	adds	r7, #28
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f70:	4770      	bx	lr
 8016f72:	bf00      	nop
 8016f74:	20000cd8 	.word	0x20000cd8

08016f78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b082      	sub	sp, #8
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	6078      	str	r0, [r7, #4]
 8016f80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016f82:	2200      	movs	r2, #0
 8016f84:	6839      	ldr	r1, [r7, #0]
 8016f86:	6878      	ldr	r0, [r7, #4]
 8016f88:	f7ff ffaa 	bl	8016ee0 <FATFS_LinkDriverEx>
 8016f8c:	4603      	mov	r3, r0
}
 8016f8e:	4618      	mov	r0, r3
 8016f90:	3708      	adds	r7, #8
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
	...

08016f98 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8016f98:	b480      	push	{r7}
 8016f9a:	b085      	sub	sp, #20
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
 8016fa0:	460b      	mov	r3, r1
 8016fa2:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8016fa8:	2301      	movs	r3, #1
 8016faa:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8016fac:	4b15      	ldr	r3, [pc, #84]	; (8017004 <FATFS_UnLinkDriverEx+0x6c>)
 8016fae:	7a5b      	ldrb	r3, [r3, #9]
 8016fb0:	b2db      	uxtb	r3, r3
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d01e      	beq.n	8016ff4 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	3b30      	subs	r3, #48	; 0x30
 8016fbc:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8016fbe:	7bbb      	ldrb	r3, [r7, #14]
 8016fc0:	4a10      	ldr	r2, [pc, #64]	; (8017004 <FATFS_UnLinkDriverEx+0x6c>)
 8016fc2:	009b      	lsls	r3, r3, #2
 8016fc4:	4413      	add	r3, r2
 8016fc6:	685b      	ldr	r3, [r3, #4]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d013      	beq.n	8016ff4 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8016fcc:	7bbb      	ldrb	r3, [r7, #14]
 8016fce:	4a0d      	ldr	r2, [pc, #52]	; (8017004 <FATFS_UnLinkDriverEx+0x6c>)
 8016fd0:	009b      	lsls	r3, r3, #2
 8016fd2:	4413      	add	r3, r2
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8016fd8:	7bbb      	ldrb	r3, [r7, #14]
 8016fda:	4a0a      	ldr	r2, [pc, #40]	; (8017004 <FATFS_UnLinkDriverEx+0x6c>)
 8016fdc:	4413      	add	r3, r2
 8016fde:	2200      	movs	r2, #0
 8016fe0:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8016fe2:	4b08      	ldr	r3, [pc, #32]	; (8017004 <FATFS_UnLinkDriverEx+0x6c>)
 8016fe4:	7a5b      	ldrb	r3, [r3, #9]
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	3b01      	subs	r3, #1
 8016fea:	b2da      	uxtb	r2, r3
 8016fec:	4b05      	ldr	r3, [pc, #20]	; (8017004 <FATFS_UnLinkDriverEx+0x6c>)
 8016fee:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8016ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	3714      	adds	r7, #20
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017000:	4770      	bx	lr
 8017002:	bf00      	nop
 8017004:	20000cd8 	.word	0x20000cd8

08017008 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b082      	sub	sp, #8
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8017010:	2100      	movs	r1, #0
 8017012:	6878      	ldr	r0, [r7, #4]
 8017014:	f7ff ffc0 	bl	8016f98 <FATFS_UnLinkDriverEx>
 8017018:	4603      	mov	r3, r0
}
 801701a:	4618      	mov	r0, r3
 801701c:	3708      	adds	r7, #8
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}
	...

08017024 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8017024:	b480      	push	{r7}
 8017026:	b085      	sub	sp, #20
 8017028:	af00      	add	r7, sp, #0
 801702a:	4603      	mov	r3, r0
 801702c:	6039      	str	r1, [r7, #0]
 801702e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8017030:	88fb      	ldrh	r3, [r7, #6]
 8017032:	2b7f      	cmp	r3, #127	; 0x7f
 8017034:	d802      	bhi.n	801703c <ff_convert+0x18>
		c = chr;
 8017036:	88fb      	ldrh	r3, [r7, #6]
 8017038:	81fb      	strh	r3, [r7, #14]
 801703a:	e025      	b.n	8017088 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d00b      	beq.n	801705a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8017042:	88fb      	ldrh	r3, [r7, #6]
 8017044:	2bff      	cmp	r3, #255	; 0xff
 8017046:	d805      	bhi.n	8017054 <ff_convert+0x30>
 8017048:	88fb      	ldrh	r3, [r7, #6]
 801704a:	3b80      	subs	r3, #128	; 0x80
 801704c:	4a12      	ldr	r2, [pc, #72]	; (8017098 <ff_convert+0x74>)
 801704e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017052:	e000      	b.n	8017056 <ff_convert+0x32>
 8017054:	2300      	movs	r3, #0
 8017056:	81fb      	strh	r3, [r7, #14]
 8017058:	e016      	b.n	8017088 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801705a:	2300      	movs	r3, #0
 801705c:	81fb      	strh	r3, [r7, #14]
 801705e:	e009      	b.n	8017074 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8017060:	89fb      	ldrh	r3, [r7, #14]
 8017062:	4a0d      	ldr	r2, [pc, #52]	; (8017098 <ff_convert+0x74>)
 8017064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017068:	88fa      	ldrh	r2, [r7, #6]
 801706a:	429a      	cmp	r2, r3
 801706c:	d006      	beq.n	801707c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801706e:	89fb      	ldrh	r3, [r7, #14]
 8017070:	3301      	adds	r3, #1
 8017072:	81fb      	strh	r3, [r7, #14]
 8017074:	89fb      	ldrh	r3, [r7, #14]
 8017076:	2b7f      	cmp	r3, #127	; 0x7f
 8017078:	d9f2      	bls.n	8017060 <ff_convert+0x3c>
 801707a:	e000      	b.n	801707e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801707c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801707e:	89fb      	ldrh	r3, [r7, #14]
 8017080:	3380      	adds	r3, #128	; 0x80
 8017082:	b29b      	uxth	r3, r3
 8017084:	b2db      	uxtb	r3, r3
 8017086:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8017088:	89fb      	ldrh	r3, [r7, #14]
}
 801708a:	4618      	mov	r0, r3
 801708c:	3714      	adds	r7, #20
 801708e:	46bd      	mov	sp, r7
 8017090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017094:	4770      	bx	lr
 8017096:	bf00      	nop
 8017098:	080228bc 	.word	0x080228bc

0801709c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801709c:	b480      	push	{r7}
 801709e:	b087      	sub	sp, #28
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	4603      	mov	r3, r0
 80170a4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80170a6:	88fb      	ldrh	r3, [r7, #6]
 80170a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80170ac:	d201      	bcs.n	80170b2 <ff_wtoupper+0x16>
 80170ae:	4b3e      	ldr	r3, [pc, #248]	; (80171a8 <ff_wtoupper+0x10c>)
 80170b0:	e000      	b.n	80170b4 <ff_wtoupper+0x18>
 80170b2:	4b3e      	ldr	r3, [pc, #248]	; (80171ac <ff_wtoupper+0x110>)
 80170b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80170b6:	697b      	ldr	r3, [r7, #20]
 80170b8:	1c9a      	adds	r2, r3, #2
 80170ba:	617a      	str	r2, [r7, #20]
 80170bc:	881b      	ldrh	r3, [r3, #0]
 80170be:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80170c0:	8a7b      	ldrh	r3, [r7, #18]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d068      	beq.n	8017198 <ff_wtoupper+0xfc>
 80170c6:	88fa      	ldrh	r2, [r7, #6]
 80170c8:	8a7b      	ldrh	r3, [r7, #18]
 80170ca:	429a      	cmp	r2, r3
 80170cc:	d364      	bcc.n	8017198 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	1c9a      	adds	r2, r3, #2
 80170d2:	617a      	str	r2, [r7, #20]
 80170d4:	881b      	ldrh	r3, [r3, #0]
 80170d6:	823b      	strh	r3, [r7, #16]
 80170d8:	8a3b      	ldrh	r3, [r7, #16]
 80170da:	0a1b      	lsrs	r3, r3, #8
 80170dc:	81fb      	strh	r3, [r7, #14]
 80170de:	8a3b      	ldrh	r3, [r7, #16]
 80170e0:	b2db      	uxtb	r3, r3
 80170e2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80170e4:	88fa      	ldrh	r2, [r7, #6]
 80170e6:	8a79      	ldrh	r1, [r7, #18]
 80170e8:	8a3b      	ldrh	r3, [r7, #16]
 80170ea:	440b      	add	r3, r1
 80170ec:	429a      	cmp	r2, r3
 80170ee:	da49      	bge.n	8017184 <ff_wtoupper+0xe8>
			switch (cmd) {
 80170f0:	89fb      	ldrh	r3, [r7, #14]
 80170f2:	2b08      	cmp	r3, #8
 80170f4:	d84f      	bhi.n	8017196 <ff_wtoupper+0xfa>
 80170f6:	a201      	add	r2, pc, #4	; (adr r2, 80170fc <ff_wtoupper+0x60>)
 80170f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170fc:	08017121 	.word	0x08017121
 8017100:	08017133 	.word	0x08017133
 8017104:	08017149 	.word	0x08017149
 8017108:	08017151 	.word	0x08017151
 801710c:	08017159 	.word	0x08017159
 8017110:	08017161 	.word	0x08017161
 8017114:	08017169 	.word	0x08017169
 8017118:	08017171 	.word	0x08017171
 801711c:	08017179 	.word	0x08017179
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8017120:	88fa      	ldrh	r2, [r7, #6]
 8017122:	8a7b      	ldrh	r3, [r7, #18]
 8017124:	1ad3      	subs	r3, r2, r3
 8017126:	005b      	lsls	r3, r3, #1
 8017128:	697a      	ldr	r2, [r7, #20]
 801712a:	4413      	add	r3, r2
 801712c:	881b      	ldrh	r3, [r3, #0]
 801712e:	80fb      	strh	r3, [r7, #6]
 8017130:	e027      	b.n	8017182 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017132:	88fa      	ldrh	r2, [r7, #6]
 8017134:	8a7b      	ldrh	r3, [r7, #18]
 8017136:	1ad3      	subs	r3, r2, r3
 8017138:	b29b      	uxth	r3, r3
 801713a:	f003 0301 	and.w	r3, r3, #1
 801713e:	b29b      	uxth	r3, r3
 8017140:	88fa      	ldrh	r2, [r7, #6]
 8017142:	1ad3      	subs	r3, r2, r3
 8017144:	80fb      	strh	r3, [r7, #6]
 8017146:	e01c      	b.n	8017182 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8017148:	88fb      	ldrh	r3, [r7, #6]
 801714a:	3b10      	subs	r3, #16
 801714c:	80fb      	strh	r3, [r7, #6]
 801714e:	e018      	b.n	8017182 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8017150:	88fb      	ldrh	r3, [r7, #6]
 8017152:	3b20      	subs	r3, #32
 8017154:	80fb      	strh	r3, [r7, #6]
 8017156:	e014      	b.n	8017182 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8017158:	88fb      	ldrh	r3, [r7, #6]
 801715a:	3b30      	subs	r3, #48	; 0x30
 801715c:	80fb      	strh	r3, [r7, #6]
 801715e:	e010      	b.n	8017182 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8017160:	88fb      	ldrh	r3, [r7, #6]
 8017162:	3b1a      	subs	r3, #26
 8017164:	80fb      	strh	r3, [r7, #6]
 8017166:	e00c      	b.n	8017182 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8017168:	88fb      	ldrh	r3, [r7, #6]
 801716a:	3308      	adds	r3, #8
 801716c:	80fb      	strh	r3, [r7, #6]
 801716e:	e008      	b.n	8017182 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8017170:	88fb      	ldrh	r3, [r7, #6]
 8017172:	3b50      	subs	r3, #80	; 0x50
 8017174:	80fb      	strh	r3, [r7, #6]
 8017176:	e004      	b.n	8017182 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8017178:	88fb      	ldrh	r3, [r7, #6]
 801717a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801717e:	80fb      	strh	r3, [r7, #6]
 8017180:	bf00      	nop
			}
			break;
 8017182:	e008      	b.n	8017196 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8017184:	89fb      	ldrh	r3, [r7, #14]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d195      	bne.n	80170b6 <ff_wtoupper+0x1a>
 801718a:	8a3b      	ldrh	r3, [r7, #16]
 801718c:	005b      	lsls	r3, r3, #1
 801718e:	697a      	ldr	r2, [r7, #20]
 8017190:	4413      	add	r3, r2
 8017192:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8017194:	e78f      	b.n	80170b6 <ff_wtoupper+0x1a>
			break;
 8017196:	bf00      	nop
	}

	return chr;
 8017198:	88fb      	ldrh	r3, [r7, #6]
}
 801719a:	4618      	mov	r0, r3
 801719c:	371c      	adds	r7, #28
 801719e:	46bd      	mov	sp, r7
 80171a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a4:	4770      	bx	lr
 80171a6:	bf00      	nop
 80171a8:	080229bc 	.word	0x080229bc
 80171ac:	08022bb0 	.word	0x08022bb0

080171b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80171b0:	b480      	push	{r7}
 80171b2:	b085      	sub	sp, #20
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	4603      	mov	r3, r0
 80171b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80171ba:	2300      	movs	r3, #0
 80171bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80171be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80171c2:	2b84      	cmp	r3, #132	; 0x84
 80171c4:	d005      	beq.n	80171d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80171c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	4413      	add	r3, r2
 80171ce:	3303      	adds	r3, #3
 80171d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80171d2:	68fb      	ldr	r3, [r7, #12]
}
 80171d4:	4618      	mov	r0, r3
 80171d6:	3714      	adds	r7, #20
 80171d8:	46bd      	mov	sp, r7
 80171da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171de:	4770      	bx	lr

080171e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80171e0:	b480      	push	{r7}
 80171e2:	b083      	sub	sp, #12
 80171e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80171e6:	f3ef 8305 	mrs	r3, IPSR
 80171ea:	607b      	str	r3, [r7, #4]
  return(result);
 80171ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	bf14      	ite	ne
 80171f2:	2301      	movne	r3, #1
 80171f4:	2300      	moveq	r3, #0
 80171f6:	b2db      	uxtb	r3, r3
}
 80171f8:	4618      	mov	r0, r3
 80171fa:	370c      	adds	r7, #12
 80171fc:	46bd      	mov	sp, r7
 80171fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017202:	4770      	bx	lr

08017204 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8017204:	b580      	push	{r7, lr}
 8017206:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8017208:	f001 fd6c 	bl	8018ce4 <vTaskStartScheduler>
  
  return osOK;
 801720c:	2300      	movs	r3, #0
}
 801720e:	4618      	mov	r0, r3
 8017210:	bd80      	pop	{r7, pc}

08017212 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8017212:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017214:	b087      	sub	sp, #28
 8017216:	af02      	add	r7, sp, #8
 8017218:	6078      	str	r0, [r7, #4]
 801721a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	685c      	ldr	r4, [r3, #4]
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017228:	b29e      	uxth	r6, r3
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8017230:	4618      	mov	r0, r3
 8017232:	f7ff ffbd 	bl	80171b0 <makeFreeRtosPriority>
 8017236:	4602      	mov	r2, r0
 8017238:	f107 030c 	add.w	r3, r7, #12
 801723c:	9301      	str	r3, [sp, #4]
 801723e:	9200      	str	r2, [sp, #0]
 8017240:	683b      	ldr	r3, [r7, #0]
 8017242:	4632      	mov	r2, r6
 8017244:	4629      	mov	r1, r5
 8017246:	4620      	mov	r0, r4
 8017248:	f001 fa76 	bl	8018738 <xTaskCreate>
 801724c:	4603      	mov	r3, r0
 801724e:	2b01      	cmp	r3, #1
 8017250:	d001      	beq.n	8017256 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8017252:	2300      	movs	r3, #0
 8017254:	e000      	b.n	8017258 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8017256:	68fb      	ldr	r3, [r7, #12]
}
 8017258:	4618      	mov	r0, r3
 801725a:	3714      	adds	r7, #20
 801725c:	46bd      	mov	sp, r7
 801725e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017260 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8017260:	b580      	push	{r7, lr}
 8017262:	b084      	sub	sp, #16
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
 8017268:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801726a:	683b      	ldr	r3, [r7, #0]
 801726c:	2b01      	cmp	r3, #1
 801726e:	d110      	bne.n	8017292 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8017270:	2203      	movs	r2, #3
 8017272:	2100      	movs	r1, #0
 8017274:	2001      	movs	r0, #1
 8017276:	f000 fbb7 	bl	80179e8 <xQueueGenericCreate>
 801727a:	60f8      	str	r0, [r7, #12]
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d005      	beq.n	801728e <osSemaphoreCreate+0x2e>
 8017282:	2300      	movs	r3, #0
 8017284:	2200      	movs	r2, #0
 8017286:	2100      	movs	r1, #0
 8017288:	68f8      	ldr	r0, [r7, #12]
 801728a:	f000 fc3f 	bl	8017b0c <xQueueGenericSend>
    return sema;
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	e006      	b.n	80172a0 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8017292:	683b      	ldr	r3, [r7, #0]
 8017294:	683a      	ldr	r2, [r7, #0]
 8017296:	4611      	mov	r1, r2
 8017298:	4618      	mov	r0, r3
 801729a:	f000 fc04 	bl	8017aa6 <xQueueCreateCountingSemaphore>
 801729e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3710      	adds	r7, #16
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}

080172a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b084      	sub	sp, #16
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	6078      	str	r0, [r7, #4]
 80172b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80172b2:	2300      	movs	r3, #0
 80172b4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d101      	bne.n	80172c0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80172bc:	2380      	movs	r3, #128	; 0x80
 80172be:	e03a      	b.n	8017336 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80172c0:	2300      	movs	r3, #0
 80172c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172ca:	d103      	bne.n	80172d4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80172cc:	f04f 33ff 	mov.w	r3, #4294967295
 80172d0:	60fb      	str	r3, [r7, #12]
 80172d2:	e009      	b.n	80172e8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d006      	beq.n	80172e8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80172da:	683b      	ldr	r3, [r7, #0]
 80172dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d101      	bne.n	80172e8 <osSemaphoreWait+0x40>
      ticks = 1;
 80172e4:	2301      	movs	r3, #1
 80172e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80172e8:	f7ff ff7a 	bl	80171e0 <inHandlerMode>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d017      	beq.n	8017322 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80172f2:	f107 0308 	add.w	r3, r7, #8
 80172f6:	461a      	mov	r2, r3
 80172f8:	2100      	movs	r1, #0
 80172fa:	6878      	ldr	r0, [r7, #4]
 80172fc:	f001 f816 	bl	801832c <xQueueReceiveFromISR>
 8017300:	4603      	mov	r3, r0
 8017302:	2b01      	cmp	r3, #1
 8017304:	d001      	beq.n	801730a <osSemaphoreWait+0x62>
      return osErrorOS;
 8017306:	23ff      	movs	r3, #255	; 0xff
 8017308:	e015      	b.n	8017336 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801730a:	68bb      	ldr	r3, [r7, #8]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d011      	beq.n	8017334 <osSemaphoreWait+0x8c>
 8017310:	4b0b      	ldr	r3, [pc, #44]	; (8017340 <osSemaphoreWait+0x98>)
 8017312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017316:	601a      	str	r2, [r3, #0]
 8017318:	f3bf 8f4f 	dsb	sy
 801731c:	f3bf 8f6f 	isb	sy
 8017320:	e008      	b.n	8017334 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8017322:	68f9      	ldr	r1, [r7, #12]
 8017324:	6878      	ldr	r0, [r7, #4]
 8017326:	f000 fef5 	bl	8018114 <xQueueSemaphoreTake>
 801732a:	4603      	mov	r3, r0
 801732c:	2b01      	cmp	r3, #1
 801732e:	d001      	beq.n	8017334 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8017330:	23ff      	movs	r3, #255	; 0xff
 8017332:	e000      	b.n	8017336 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8017334:	2300      	movs	r3, #0
}
 8017336:	4618      	mov	r0, r3
 8017338:	3710      	adds	r7, #16
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}
 801733e:	bf00      	nop
 8017340:	e000ed04 	.word	0xe000ed04

08017344 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b084      	sub	sp, #16
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801734c:	2300      	movs	r3, #0
 801734e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8017350:	2300      	movs	r3, #0
 8017352:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8017354:	f7ff ff44 	bl	80171e0 <inHandlerMode>
 8017358:	4603      	mov	r3, r0
 801735a:	2b00      	cmp	r3, #0
 801735c:	d016      	beq.n	801738c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801735e:	f107 0308 	add.w	r3, r7, #8
 8017362:	4619      	mov	r1, r3
 8017364:	6878      	ldr	r0, [r7, #4]
 8017366:	f000 fd67 	bl	8017e38 <xQueueGiveFromISR>
 801736a:	4603      	mov	r3, r0
 801736c:	2b01      	cmp	r3, #1
 801736e:	d001      	beq.n	8017374 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8017370:	23ff      	movs	r3, #255	; 0xff
 8017372:	e017      	b.n	80173a4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d013      	beq.n	80173a2 <osSemaphoreRelease+0x5e>
 801737a:	4b0c      	ldr	r3, [pc, #48]	; (80173ac <osSemaphoreRelease+0x68>)
 801737c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017380:	601a      	str	r2, [r3, #0]
 8017382:	f3bf 8f4f 	dsb	sy
 8017386:	f3bf 8f6f 	isb	sy
 801738a:	e00a      	b.n	80173a2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801738c:	2300      	movs	r3, #0
 801738e:	2200      	movs	r2, #0
 8017390:	2100      	movs	r1, #0
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	f000 fbba 	bl	8017b0c <xQueueGenericSend>
 8017398:	4603      	mov	r3, r0
 801739a:	2b01      	cmp	r3, #1
 801739c:	d001      	beq.n	80173a2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801739e:	23ff      	movs	r3, #255	; 0xff
 80173a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80173a2:	68fb      	ldr	r3, [r7, #12]
}
 80173a4:	4618      	mov	r0, r3
 80173a6:	3710      	adds	r7, #16
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}
 80173ac:	e000ed04 	.word	0xe000ed04

080173b0 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b086      	sub	sp, #24
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	685b      	ldr	r3, [r3, #4]
 80173bc:	3303      	adds	r3, #3
 80173be:	f023 0303 	bic.w	r3, r3, #3
 80173c2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80173c4:	2014      	movs	r0, #20
 80173c6:	f003 f85f 	bl	801a488 <pvPortMalloc>
 80173ca:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80173cc:	697b      	ldr	r3, [r7, #20]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d046      	beq.n	8017460 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	681a      	ldr	r2, [r3, #0]
 80173d6:	697b      	ldr	r3, [r7, #20]
 80173d8:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80173da:	68fa      	ldr	r2, [r7, #12]
 80173dc:	697b      	ldr	r3, [r7, #20]
 80173de:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80173e0:	697b      	ldr	r3, [r7, #20]
 80173e2:	2200      	movs	r2, #0
 80173e4:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	4618      	mov	r0, r3
 80173ec:	f003 f84c 	bl	801a488 <pvPortMalloc>
 80173f0:	4602      	mov	r2, r0
 80173f2:	697b      	ldr	r3, [r7, #20]
 80173f4:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80173f6:	697b      	ldr	r3, [r7, #20]
 80173f8:	685b      	ldr	r3, [r3, #4]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d02b      	beq.n	8017456 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	681b      	ldr	r3, [r3, #0]
 8017402:	68fa      	ldr	r2, [r7, #12]
 8017404:	fb02 f303 	mul.w	r3, r2, r3
 8017408:	4618      	mov	r0, r3
 801740a:	f003 f83d 	bl	801a488 <pvPortMalloc>
 801740e:	4602      	mov	r2, r0
 8017410:	697b      	ldr	r3, [r7, #20]
 8017412:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8017414:	697b      	ldr	r3, [r7, #20]
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d011      	beq.n	8017440 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 801741c:	2300      	movs	r3, #0
 801741e:	613b      	str	r3, [r7, #16]
 8017420:	e008      	b.n	8017434 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8017422:	697b      	ldr	r3, [r7, #20]
 8017424:	685a      	ldr	r2, [r3, #4]
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	4413      	add	r3, r2
 801742a:	2200      	movs	r2, #0
 801742c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	3301      	adds	r3, #1
 8017432:	613b      	str	r3, [r7, #16]
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	693a      	ldr	r2, [r7, #16]
 801743a:	429a      	cmp	r2, r3
 801743c:	d3f1      	bcc.n	8017422 <osPoolCreate+0x72>
 801743e:	e00f      	b.n	8017460 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8017440:	697b      	ldr	r3, [r7, #20]
 8017442:	685b      	ldr	r3, [r3, #4]
 8017444:	4618      	mov	r0, r3
 8017446:	f003 f8e3 	bl	801a610 <vPortFree>
        vPortFree(thePool);
 801744a:	6978      	ldr	r0, [r7, #20]
 801744c:	f003 f8e0 	bl	801a610 <vPortFree>
        thePool = NULL;
 8017450:	2300      	movs	r3, #0
 8017452:	617b      	str	r3, [r7, #20]
 8017454:	e004      	b.n	8017460 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8017456:	6978      	ldr	r0, [r7, #20]
 8017458:	f003 f8da 	bl	801a610 <vPortFree>
      thePool = NULL;
 801745c:	2300      	movs	r3, #0
 801745e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8017460:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8017462:	4618      	mov	r0, r3
 8017464:	3718      	adds	r7, #24
 8017466:	46bd      	mov	sp, r7
 8017468:	bd80      	pop	{r7, pc}

0801746a <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 801746a:	b580      	push	{r7, lr}
 801746c:	b08a      	sub	sp, #40	; 0x28
 801746e:	af00      	add	r7, sp, #0
 8017470:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8017472:	2300      	movs	r3, #0
 8017474:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8017476:	2300      	movs	r3, #0
 8017478:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 801747a:	f7ff feb1 	bl	80171e0 <inHandlerMode>
 801747e:	4603      	mov	r3, r0
 8017480:	2b00      	cmp	r3, #0
 8017482:	d00e      	beq.n	80174a2 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017484:	f3ef 8211 	mrs	r2, BASEPRI
 8017488:	f04f 0320 	mov.w	r3, #32
 801748c:	f383 8811 	msr	BASEPRI, r3
 8017490:	f3bf 8f6f 	isb	sy
 8017494:	f3bf 8f4f 	dsb	sy
 8017498:	617a      	str	r2, [r7, #20]
 801749a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801749c:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 801749e:	627b      	str	r3, [r7, #36]	; 0x24
 80174a0:	e001      	b.n	80174a6 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80174a2:	f002 fecf 	bl	801a244 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80174a6:	2300      	movs	r3, #0
 80174a8:	61fb      	str	r3, [r7, #28]
 80174aa:	e029      	b.n	8017500 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	691a      	ldr	r2, [r3, #16]
 80174b0:	69fb      	ldr	r3, [r7, #28]
 80174b2:	4413      	add	r3, r2
 80174b4:	687a      	ldr	r2, [r7, #4]
 80174b6:	6892      	ldr	r2, [r2, #8]
 80174b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80174bc:	fb02 f201 	mul.w	r2, r2, r1
 80174c0:	1a9b      	subs	r3, r3, r2
 80174c2:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	685a      	ldr	r2, [r3, #4]
 80174c8:	69bb      	ldr	r3, [r7, #24]
 80174ca:	4413      	add	r3, r2
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d113      	bne.n	80174fa <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	685a      	ldr	r2, [r3, #4]
 80174d6:	69bb      	ldr	r3, [r7, #24]
 80174d8:	4413      	add	r3, r2
 80174da:	2201      	movs	r2, #1
 80174dc:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	4619      	mov	r1, r3
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	68db      	ldr	r3, [r3, #12]
 80174e8:	69ba      	ldr	r2, [r7, #24]
 80174ea:	fb02 f303 	mul.w	r3, r2, r3
 80174ee:	440b      	add	r3, r1
 80174f0:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	69ba      	ldr	r2, [r7, #24]
 80174f6:	611a      	str	r2, [r3, #16]
      break;
 80174f8:	e007      	b.n	801750a <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80174fa:	69fb      	ldr	r3, [r7, #28]
 80174fc:	3301      	adds	r3, #1
 80174fe:	61fb      	str	r3, [r7, #28]
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	689b      	ldr	r3, [r3, #8]
 8017504:	69fa      	ldr	r2, [r7, #28]
 8017506:	429a      	cmp	r2, r3
 8017508:	d3d0      	bcc.n	80174ac <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 801750a:	f7ff fe69 	bl	80171e0 <inHandlerMode>
 801750e:	4603      	mov	r3, r0
 8017510:	2b00      	cmp	r3, #0
 8017512:	d005      	beq.n	8017520 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8017514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017516:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801751e:	e001      	b.n	8017524 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8017520:	f002 fec0 	bl	801a2a4 <vPortExitCritical>
  }
  
  return p;
 8017524:	6a3b      	ldr	r3, [r7, #32]
}
 8017526:	4618      	mov	r0, r3
 8017528:	3728      	adds	r7, #40	; 0x28
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}

0801752e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 801752e:	b480      	push	{r7}
 8017530:	b085      	sub	sp, #20
 8017532:	af00      	add	r7, sp, #0
 8017534:	6078      	str	r0, [r7, #4]
 8017536:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d101      	bne.n	8017542 <osPoolFree+0x14>
    return osErrorParameter;
 801753e:	2380      	movs	r3, #128	; 0x80
 8017540:	e030      	b.n	80175a4 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8017542:	683b      	ldr	r3, [r7, #0]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d101      	bne.n	801754c <osPoolFree+0x1e>
    return osErrorParameter;
 8017548:	2380      	movs	r3, #128	; 0x80
 801754a:	e02b      	b.n	80175a4 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	683a      	ldr	r2, [r7, #0]
 8017552:	429a      	cmp	r2, r3
 8017554:	d201      	bcs.n	801755a <osPoolFree+0x2c>
    return osErrorParameter;
 8017556:	2380      	movs	r3, #128	; 0x80
 8017558:	e024      	b.n	80175a4 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	687a      	ldr	r2, [r7, #4]
 801755e:	6812      	ldr	r2, [r2, #0]
 8017560:	1a9b      	subs	r3, r3, r2
 8017562:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	68da      	ldr	r2, [r3, #12]
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	fbb3 f1f2 	udiv	r1, r3, r2
 801756e:	fb02 f201 	mul.w	r2, r2, r1
 8017572:	1a9b      	subs	r3, r3, r2
 8017574:	2b00      	cmp	r3, #0
 8017576:	d001      	beq.n	801757c <osPoolFree+0x4e>
    return osErrorParameter;
 8017578:	2380      	movs	r3, #128	; 0x80
 801757a:	e013      	b.n	80175a4 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	68db      	ldr	r3, [r3, #12]
 8017580:	68fa      	ldr	r2, [r7, #12]
 8017582:	fbb2 f3f3 	udiv	r3, r2, r3
 8017586:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	689b      	ldr	r3, [r3, #8]
 801758c:	68fa      	ldr	r2, [r7, #12]
 801758e:	429a      	cmp	r2, r3
 8017590:	d301      	bcc.n	8017596 <osPoolFree+0x68>
    return osErrorParameter;
 8017592:	2380      	movs	r3, #128	; 0x80
 8017594:	e006      	b.n	80175a4 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	685a      	ldr	r2, [r3, #4]
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	4413      	add	r3, r2
 801759e:	2200      	movs	r2, #0
 80175a0:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80175a2:	2300      	movs	r3, #0
}
 80175a4:	4618      	mov	r0, r3
 80175a6:	3714      	adds	r7, #20
 80175a8:	46bd      	mov	sp, r7
 80175aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ae:	4770      	bx	lr

080175b0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b082      	sub	sp, #8
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
 80175b8:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	6818      	ldr	r0, [r3, #0]
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	685b      	ldr	r3, [r3, #4]
 80175c2:	2200      	movs	r2, #0
 80175c4:	4619      	mov	r1, r3
 80175c6:	f000 fa0f 	bl	80179e8 <xQueueGenericCreate>
 80175ca:	4603      	mov	r3, r0
#endif
}
 80175cc:	4618      	mov	r0, r3
 80175ce:	3708      	adds	r7, #8
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b086      	sub	sp, #24
 80175d8:	af00      	add	r7, sp, #0
 80175da:	60f8      	str	r0, [r7, #12]
 80175dc:	60b9      	str	r1, [r7, #8]
 80175de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80175e0:	2300      	movs	r3, #0
 80175e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80175e8:	697b      	ldr	r3, [r7, #20]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d101      	bne.n	80175f2 <osMessagePut+0x1e>
    ticks = 1;
 80175ee:	2301      	movs	r3, #1
 80175f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80175f2:	f7ff fdf5 	bl	80171e0 <inHandlerMode>
 80175f6:	4603      	mov	r3, r0
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d018      	beq.n	801762e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80175fc:	f107 0210 	add.w	r2, r7, #16
 8017600:	f107 0108 	add.w	r1, r7, #8
 8017604:	2300      	movs	r3, #0
 8017606:	68f8      	ldr	r0, [r7, #12]
 8017608:	f000 fb7e 	bl	8017d08 <xQueueGenericSendFromISR>
 801760c:	4603      	mov	r3, r0
 801760e:	2b01      	cmp	r3, #1
 8017610:	d001      	beq.n	8017616 <osMessagePut+0x42>
      return osErrorOS;
 8017612:	23ff      	movs	r3, #255	; 0xff
 8017614:	e018      	b.n	8017648 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017616:	693b      	ldr	r3, [r7, #16]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d014      	beq.n	8017646 <osMessagePut+0x72>
 801761c:	4b0c      	ldr	r3, [pc, #48]	; (8017650 <osMessagePut+0x7c>)
 801761e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017622:	601a      	str	r2, [r3, #0]
 8017624:	f3bf 8f4f 	dsb	sy
 8017628:	f3bf 8f6f 	isb	sy
 801762c:	e00b      	b.n	8017646 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801762e:	f107 0108 	add.w	r1, r7, #8
 8017632:	2300      	movs	r3, #0
 8017634:	697a      	ldr	r2, [r7, #20]
 8017636:	68f8      	ldr	r0, [r7, #12]
 8017638:	f000 fa68 	bl	8017b0c <xQueueGenericSend>
 801763c:	4603      	mov	r3, r0
 801763e:	2b01      	cmp	r3, #1
 8017640:	d001      	beq.n	8017646 <osMessagePut+0x72>
      return osErrorOS;
 8017642:	23ff      	movs	r3, #255	; 0xff
 8017644:	e000      	b.n	8017648 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8017646:	2300      	movs	r3, #0
}
 8017648:	4618      	mov	r0, r3
 801764a:	3718      	adds	r7, #24
 801764c:	46bd      	mov	sp, r7
 801764e:	bd80      	pop	{r7, pc}
 8017650:	e000ed04 	.word	0xe000ed04

08017654 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8017654:	b590      	push	{r4, r7, lr}
 8017656:	b08b      	sub	sp, #44	; 0x2c
 8017658:	af00      	add	r7, sp, #0
 801765a:	60f8      	str	r0, [r7, #12]
 801765c:	60b9      	str	r1, [r7, #8]
 801765e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8017660:	68bb      	ldr	r3, [r7, #8]
 8017662:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8017664:	2300      	movs	r3, #0
 8017666:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8017668:	68bb      	ldr	r3, [r7, #8]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d10a      	bne.n	8017684 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801766e:	2380      	movs	r3, #128	; 0x80
 8017670:	617b      	str	r3, [r7, #20]
    return event;
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	461c      	mov	r4, r3
 8017676:	f107 0314 	add.w	r3, r7, #20
 801767a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801767e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017682:	e054      	b.n	801772e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8017684:	2300      	movs	r3, #0
 8017686:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8017688:	2300      	movs	r3, #0
 801768a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017692:	d103      	bne.n	801769c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8017694:	f04f 33ff 	mov.w	r3, #4294967295
 8017698:	627b      	str	r3, [r7, #36]	; 0x24
 801769a:	e009      	b.n	80176b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d006      	beq.n	80176b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80176a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d101      	bne.n	80176b0 <osMessageGet+0x5c>
      ticks = 1;
 80176ac:	2301      	movs	r3, #1
 80176ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80176b0:	f7ff fd96 	bl	80171e0 <inHandlerMode>
 80176b4:	4603      	mov	r3, r0
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d01c      	beq.n	80176f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80176ba:	f107 0220 	add.w	r2, r7, #32
 80176be:	f107 0314 	add.w	r3, r7, #20
 80176c2:	3304      	adds	r3, #4
 80176c4:	4619      	mov	r1, r3
 80176c6:	68b8      	ldr	r0, [r7, #8]
 80176c8:	f000 fe30 	bl	801832c <xQueueReceiveFromISR>
 80176cc:	4603      	mov	r3, r0
 80176ce:	2b01      	cmp	r3, #1
 80176d0:	d102      	bne.n	80176d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80176d2:	2310      	movs	r3, #16
 80176d4:	617b      	str	r3, [r7, #20]
 80176d6:	e001      	b.n	80176dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80176d8:	2300      	movs	r3, #0
 80176da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80176dc:	6a3b      	ldr	r3, [r7, #32]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d01d      	beq.n	801771e <osMessageGet+0xca>
 80176e2:	4b15      	ldr	r3, [pc, #84]	; (8017738 <osMessageGet+0xe4>)
 80176e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176e8:	601a      	str	r2, [r3, #0]
 80176ea:	f3bf 8f4f 	dsb	sy
 80176ee:	f3bf 8f6f 	isb	sy
 80176f2:	e014      	b.n	801771e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80176f4:	f107 0314 	add.w	r3, r7, #20
 80176f8:	3304      	adds	r3, #4
 80176fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80176fc:	4619      	mov	r1, r3
 80176fe:	68b8      	ldr	r0, [r7, #8]
 8017700:	f000 fc28 	bl	8017f54 <xQueueReceive>
 8017704:	4603      	mov	r3, r0
 8017706:	2b01      	cmp	r3, #1
 8017708:	d102      	bne.n	8017710 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801770a:	2310      	movs	r3, #16
 801770c:	617b      	str	r3, [r7, #20]
 801770e:	e006      	b.n	801771e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8017710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017712:	2b00      	cmp	r3, #0
 8017714:	d101      	bne.n	801771a <osMessageGet+0xc6>
 8017716:	2300      	movs	r3, #0
 8017718:	e000      	b.n	801771c <osMessageGet+0xc8>
 801771a:	2340      	movs	r3, #64	; 0x40
 801771c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	461c      	mov	r4, r3
 8017722:	f107 0314 	add.w	r3, r7, #20
 8017726:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801772a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801772e:	68f8      	ldr	r0, [r7, #12]
 8017730:	372c      	adds	r7, #44	; 0x2c
 8017732:	46bd      	mov	sp, r7
 8017734:	bd90      	pop	{r4, r7, pc}
 8017736:	bf00      	nop
 8017738:	e000ed04 	.word	0xe000ed04

0801773c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 801773c:	b580      	push	{r7, lr}
 801773e:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8017740:	f001 ff08 	bl	8019554 <xTaskGetSchedulerState>
 8017744:	4603      	mov	r3, r0
 8017746:	2b01      	cmp	r3, #1
 8017748:	d001      	beq.n	801774e <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 801774a:	f002 fe0d 	bl	801a368 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 801774e:	bf00      	nop
 8017750:	bd80      	pop	{r7, pc}

08017752 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8017752:	b580      	push	{r7, lr}
 8017754:	b082      	sub	sp, #8
 8017756:	af00      	add	r7, sp, #0
 8017758:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f001 f92e 	bl	80189bc <vTaskSuspend>
  
  return osOK;
 8017760:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8017762:	4618      	mov	r0, r3
 8017764:	3708      	adds	r7, #8
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}
	...

0801776c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b082      	sub	sp, #8
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8017774:	f7ff fd34 	bl	80171e0 <inHandlerMode>
 8017778:	4603      	mov	r3, r0
 801777a:	2b00      	cmp	r3, #0
 801777c:	d00e      	beq.n	801779c <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 801777e:	6878      	ldr	r0, [r7, #4]
 8017780:	f001 fa3e 	bl	8018c00 <xTaskResumeFromISR>
 8017784:	4603      	mov	r3, r0
 8017786:	2b01      	cmp	r3, #1
 8017788:	d10b      	bne.n	80177a2 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 801778a:	4b08      	ldr	r3, [pc, #32]	; (80177ac <osThreadResume+0x40>)
 801778c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017790:	601a      	str	r2, [r3, #0]
 8017792:	f3bf 8f4f 	dsb	sy
 8017796:	f3bf 8f6f 	isb	sy
 801779a:	e002      	b.n	80177a2 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 801779c:	6878      	ldr	r0, [r7, #4]
 801779e:	f001 f9d1 	bl	8018b44 <vTaskResume>
  }
  return osOK;
 80177a2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80177a4:	4618      	mov	r0, r3
 80177a6:	3708      	adds	r7, #8
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bd80      	pop	{r7, pc}
 80177ac:	e000ed04 	.word	0xe000ed04

080177b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80177b0:	b480      	push	{r7}
 80177b2:	b083      	sub	sp, #12
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	f103 0208 	add.w	r2, r3, #8
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	f04f 32ff 	mov.w	r2, #4294967295
 80177c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	f103 0208 	add.w	r2, r3, #8
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f103 0208 	add.w	r2, r3, #8
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	2200      	movs	r2, #0
 80177e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80177e4:	bf00      	nop
 80177e6:	370c      	adds	r7, #12
 80177e8:	46bd      	mov	sp, r7
 80177ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ee:	4770      	bx	lr

080177f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80177f0:	b480      	push	{r7}
 80177f2:	b083      	sub	sp, #12
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	2200      	movs	r2, #0
 80177fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80177fe:	bf00      	nop
 8017800:	370c      	adds	r7, #12
 8017802:	46bd      	mov	sp, r7
 8017804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017808:	4770      	bx	lr

0801780a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801780a:	b480      	push	{r7}
 801780c:	b085      	sub	sp, #20
 801780e:	af00      	add	r7, sp, #0
 8017810:	6078      	str	r0, [r7, #4]
 8017812:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	685b      	ldr	r3, [r3, #4]
 8017818:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801781a:	683b      	ldr	r3, [r7, #0]
 801781c:	68fa      	ldr	r2, [r7, #12]
 801781e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	689a      	ldr	r2, [r3, #8]
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	689b      	ldr	r3, [r3, #8]
 801782c:	683a      	ldr	r2, [r7, #0]
 801782e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	683a      	ldr	r2, [r7, #0]
 8017834:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017836:	683b      	ldr	r3, [r7, #0]
 8017838:	687a      	ldr	r2, [r7, #4]
 801783a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	1c5a      	adds	r2, r3, #1
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	601a      	str	r2, [r3, #0]
}
 8017846:	bf00      	nop
 8017848:	3714      	adds	r7, #20
 801784a:	46bd      	mov	sp, r7
 801784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017850:	4770      	bx	lr

08017852 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017852:	b480      	push	{r7}
 8017854:	b085      	sub	sp, #20
 8017856:	af00      	add	r7, sp, #0
 8017858:	6078      	str	r0, [r7, #4]
 801785a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801785c:	683b      	ldr	r3, [r7, #0]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017862:	68bb      	ldr	r3, [r7, #8]
 8017864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017868:	d103      	bne.n	8017872 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	691b      	ldr	r3, [r3, #16]
 801786e:	60fb      	str	r3, [r7, #12]
 8017870:	e00c      	b.n	801788c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	3308      	adds	r3, #8
 8017876:	60fb      	str	r3, [r7, #12]
 8017878:	e002      	b.n	8017880 <vListInsert+0x2e>
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	685b      	ldr	r3, [r3, #4]
 801787e:	60fb      	str	r3, [r7, #12]
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	685b      	ldr	r3, [r3, #4]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	68ba      	ldr	r2, [r7, #8]
 8017888:	429a      	cmp	r2, r3
 801788a:	d2f6      	bcs.n	801787a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	685a      	ldr	r2, [r3, #4]
 8017890:	683b      	ldr	r3, [r7, #0]
 8017892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017894:	683b      	ldr	r3, [r7, #0]
 8017896:	685b      	ldr	r3, [r3, #4]
 8017898:	683a      	ldr	r2, [r7, #0]
 801789a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801789c:	683b      	ldr	r3, [r7, #0]
 801789e:	68fa      	ldr	r2, [r7, #12]
 80178a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	683a      	ldr	r2, [r7, #0]
 80178a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80178a8:	683b      	ldr	r3, [r7, #0]
 80178aa:	687a      	ldr	r2, [r7, #4]
 80178ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	1c5a      	adds	r2, r3, #1
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	601a      	str	r2, [r3, #0]
}
 80178b8:	bf00      	nop
 80178ba:	3714      	adds	r7, #20
 80178bc:	46bd      	mov	sp, r7
 80178be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c2:	4770      	bx	lr

080178c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80178c4:	b480      	push	{r7}
 80178c6:	b085      	sub	sp, #20
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	691b      	ldr	r3, [r3, #16]
 80178d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	685b      	ldr	r3, [r3, #4]
 80178d6:	687a      	ldr	r2, [r7, #4]
 80178d8:	6892      	ldr	r2, [r2, #8]
 80178da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	689b      	ldr	r3, [r3, #8]
 80178e0:	687a      	ldr	r2, [r7, #4]
 80178e2:	6852      	ldr	r2, [r2, #4]
 80178e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	685b      	ldr	r3, [r3, #4]
 80178ea:	687a      	ldr	r2, [r7, #4]
 80178ec:	429a      	cmp	r2, r3
 80178ee:	d103      	bne.n	80178f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	689a      	ldr	r2, [r3, #8]
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2200      	movs	r2, #0
 80178fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	1e5a      	subs	r2, r3, #1
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	681b      	ldr	r3, [r3, #0]
}
 801790c:	4618      	mov	r0, r3
 801790e:	3714      	adds	r7, #20
 8017910:	46bd      	mov	sp, r7
 8017912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017916:	4770      	bx	lr

08017918 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b084      	sub	sp, #16
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
 8017920:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d10a      	bne.n	8017942 <xQueueGenericReset+0x2a>
	__asm volatile
 801792c:	f04f 0320 	mov.w	r3, #32
 8017930:	f383 8811 	msr	BASEPRI, r3
 8017934:	f3bf 8f6f 	isb	sy
 8017938:	f3bf 8f4f 	dsb	sy
 801793c:	60bb      	str	r3, [r7, #8]
}
 801793e:	bf00      	nop
 8017940:	e7fe      	b.n	8017940 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017942:	f002 fc7f 	bl	801a244 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	681a      	ldr	r2, [r3, #0]
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801794e:	68f9      	ldr	r1, [r7, #12]
 8017950:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017952:	fb01 f303 	mul.w	r3, r1, r3
 8017956:	441a      	add	r2, r3
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	2200      	movs	r2, #0
 8017960:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	681a      	ldr	r2, [r3, #0]
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	681a      	ldr	r2, [r3, #0]
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017972:	3b01      	subs	r3, #1
 8017974:	68f9      	ldr	r1, [r7, #12]
 8017976:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017978:	fb01 f303 	mul.w	r3, r1, r3
 801797c:	441a      	add	r2, r3
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	22ff      	movs	r2, #255	; 0xff
 8017986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	22ff      	movs	r2, #255	; 0xff
 801798e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017992:	683b      	ldr	r3, [r7, #0]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d114      	bne.n	80179c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	691b      	ldr	r3, [r3, #16]
 801799c:	2b00      	cmp	r3, #0
 801799e:	d01a      	beq.n	80179d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	3310      	adds	r3, #16
 80179a4:	4618      	mov	r0, r3
 80179a6:	f001 fc37 	bl	8019218 <xTaskRemoveFromEventList>
 80179aa:	4603      	mov	r3, r0
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d012      	beq.n	80179d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80179b0:	4b0c      	ldr	r3, [pc, #48]	; (80179e4 <xQueueGenericReset+0xcc>)
 80179b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179b6:	601a      	str	r2, [r3, #0]
 80179b8:	f3bf 8f4f 	dsb	sy
 80179bc:	f3bf 8f6f 	isb	sy
 80179c0:	e009      	b.n	80179d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	3310      	adds	r3, #16
 80179c6:	4618      	mov	r0, r3
 80179c8:	f7ff fef2 	bl	80177b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	3324      	adds	r3, #36	; 0x24
 80179d0:	4618      	mov	r0, r3
 80179d2:	f7ff feed 	bl	80177b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80179d6:	f002 fc65 	bl	801a2a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80179da:	2301      	movs	r3, #1
}
 80179dc:	4618      	mov	r0, r3
 80179de:	3710      	adds	r7, #16
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}
 80179e4:	e000ed04 	.word	0xe000ed04

080179e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b08a      	sub	sp, #40	; 0x28
 80179ec:	af02      	add	r7, sp, #8
 80179ee:	60f8      	str	r0, [r7, #12]
 80179f0:	60b9      	str	r1, [r7, #8]
 80179f2:	4613      	mov	r3, r2
 80179f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d10a      	bne.n	8017a12 <xQueueGenericCreate+0x2a>
	__asm volatile
 80179fc:	f04f 0320 	mov.w	r3, #32
 8017a00:	f383 8811 	msr	BASEPRI, r3
 8017a04:	f3bf 8f6f 	isb	sy
 8017a08:	f3bf 8f4f 	dsb	sy
 8017a0c:	613b      	str	r3, [r7, #16]
}
 8017a0e:	bf00      	nop
 8017a10:	e7fe      	b.n	8017a10 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8017a12:	68bb      	ldr	r3, [r7, #8]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d102      	bne.n	8017a1e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8017a18:	2300      	movs	r3, #0
 8017a1a:	61fb      	str	r3, [r7, #28]
 8017a1c:	e004      	b.n	8017a28 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	68ba      	ldr	r2, [r7, #8]
 8017a22:	fb02 f303 	mul.w	r3, r2, r3
 8017a26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017a28:	69fb      	ldr	r3, [r7, #28]
 8017a2a:	3350      	adds	r3, #80	; 0x50
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	f002 fd2b 	bl	801a488 <pvPortMalloc>
 8017a32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8017a34:	69bb      	ldr	r3, [r7, #24]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d00d      	beq.n	8017a56 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017a3a:	69bb      	ldr	r3, [r7, #24]
 8017a3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017a3e:	697b      	ldr	r3, [r7, #20]
 8017a40:	3350      	adds	r3, #80	; 0x50
 8017a42:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017a44:	79fa      	ldrb	r2, [r7, #7]
 8017a46:	69bb      	ldr	r3, [r7, #24]
 8017a48:	9300      	str	r3, [sp, #0]
 8017a4a:	4613      	mov	r3, r2
 8017a4c:	697a      	ldr	r2, [r7, #20]
 8017a4e:	68b9      	ldr	r1, [r7, #8]
 8017a50:	68f8      	ldr	r0, [r7, #12]
 8017a52:	f000 f805 	bl	8017a60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017a56:	69bb      	ldr	r3, [r7, #24]
	}
 8017a58:	4618      	mov	r0, r3
 8017a5a:	3720      	adds	r7, #32
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bd80      	pop	{r7, pc}

08017a60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b084      	sub	sp, #16
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	60f8      	str	r0, [r7, #12]
 8017a68:	60b9      	str	r1, [r7, #8]
 8017a6a:	607a      	str	r2, [r7, #4]
 8017a6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017a6e:	68bb      	ldr	r3, [r7, #8]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d103      	bne.n	8017a7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017a74:	69bb      	ldr	r3, [r7, #24]
 8017a76:	69ba      	ldr	r2, [r7, #24]
 8017a78:	601a      	str	r2, [r3, #0]
 8017a7a:	e002      	b.n	8017a82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017a7c:	69bb      	ldr	r3, [r7, #24]
 8017a7e:	687a      	ldr	r2, [r7, #4]
 8017a80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017a82:	69bb      	ldr	r3, [r7, #24]
 8017a84:	68fa      	ldr	r2, [r7, #12]
 8017a86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017a88:	69bb      	ldr	r3, [r7, #24]
 8017a8a:	68ba      	ldr	r2, [r7, #8]
 8017a8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017a8e:	2101      	movs	r1, #1
 8017a90:	69b8      	ldr	r0, [r7, #24]
 8017a92:	f7ff ff41 	bl	8017918 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017a96:	69bb      	ldr	r3, [r7, #24]
 8017a98:	78fa      	ldrb	r2, [r7, #3]
 8017a9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017a9e:	bf00      	nop
 8017aa0:	3710      	adds	r7, #16
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	bd80      	pop	{r7, pc}

08017aa6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8017aa6:	b580      	push	{r7, lr}
 8017aa8:	b086      	sub	sp, #24
 8017aaa:	af00      	add	r7, sp, #0
 8017aac:	6078      	str	r0, [r7, #4]
 8017aae:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d10a      	bne.n	8017acc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8017ab6:	f04f 0320 	mov.w	r3, #32
 8017aba:	f383 8811 	msr	BASEPRI, r3
 8017abe:	f3bf 8f6f 	isb	sy
 8017ac2:	f3bf 8f4f 	dsb	sy
 8017ac6:	613b      	str	r3, [r7, #16]
}
 8017ac8:	bf00      	nop
 8017aca:	e7fe      	b.n	8017aca <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8017acc:	683a      	ldr	r2, [r7, #0]
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	429a      	cmp	r2, r3
 8017ad2:	d90a      	bls.n	8017aea <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8017ad4:	f04f 0320 	mov.w	r3, #32
 8017ad8:	f383 8811 	msr	BASEPRI, r3
 8017adc:	f3bf 8f6f 	isb	sy
 8017ae0:	f3bf 8f4f 	dsb	sy
 8017ae4:	60fb      	str	r3, [r7, #12]
}
 8017ae6:	bf00      	nop
 8017ae8:	e7fe      	b.n	8017ae8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8017aea:	2202      	movs	r2, #2
 8017aec:	2100      	movs	r1, #0
 8017aee:	6878      	ldr	r0, [r7, #4]
 8017af0:	f7ff ff7a 	bl	80179e8 <xQueueGenericCreate>
 8017af4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8017af6:	697b      	ldr	r3, [r7, #20]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d002      	beq.n	8017b02 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8017afc:	697b      	ldr	r3, [r7, #20]
 8017afe:	683a      	ldr	r2, [r7, #0]
 8017b00:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8017b02:	697b      	ldr	r3, [r7, #20]
	}
 8017b04:	4618      	mov	r0, r3
 8017b06:	3718      	adds	r7, #24
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	bd80      	pop	{r7, pc}

08017b0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b08e      	sub	sp, #56	; 0x38
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	60f8      	str	r0, [r7, #12]
 8017b14:	60b9      	str	r1, [r7, #8]
 8017b16:	607a      	str	r2, [r7, #4]
 8017b18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d10a      	bne.n	8017b3e <xQueueGenericSend+0x32>
	__asm volatile
 8017b28:	f04f 0320 	mov.w	r3, #32
 8017b2c:	f383 8811 	msr	BASEPRI, r3
 8017b30:	f3bf 8f6f 	isb	sy
 8017b34:	f3bf 8f4f 	dsb	sy
 8017b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017b3a:	bf00      	nop
 8017b3c:	e7fe      	b.n	8017b3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017b3e:	68bb      	ldr	r3, [r7, #8]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d103      	bne.n	8017b4c <xQueueGenericSend+0x40>
 8017b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d101      	bne.n	8017b50 <xQueueGenericSend+0x44>
 8017b4c:	2301      	movs	r3, #1
 8017b4e:	e000      	b.n	8017b52 <xQueueGenericSend+0x46>
 8017b50:	2300      	movs	r3, #0
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d10a      	bne.n	8017b6c <xQueueGenericSend+0x60>
	__asm volatile
 8017b56:	f04f 0320 	mov.w	r3, #32
 8017b5a:	f383 8811 	msr	BASEPRI, r3
 8017b5e:	f3bf 8f6f 	isb	sy
 8017b62:	f3bf 8f4f 	dsb	sy
 8017b66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017b68:	bf00      	nop
 8017b6a:	e7fe      	b.n	8017b6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017b6c:	683b      	ldr	r3, [r7, #0]
 8017b6e:	2b02      	cmp	r3, #2
 8017b70:	d103      	bne.n	8017b7a <xQueueGenericSend+0x6e>
 8017b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b76:	2b01      	cmp	r3, #1
 8017b78:	d101      	bne.n	8017b7e <xQueueGenericSend+0x72>
 8017b7a:	2301      	movs	r3, #1
 8017b7c:	e000      	b.n	8017b80 <xQueueGenericSend+0x74>
 8017b7e:	2300      	movs	r3, #0
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d10a      	bne.n	8017b9a <xQueueGenericSend+0x8e>
	__asm volatile
 8017b84:	f04f 0320 	mov.w	r3, #32
 8017b88:	f383 8811 	msr	BASEPRI, r3
 8017b8c:	f3bf 8f6f 	isb	sy
 8017b90:	f3bf 8f4f 	dsb	sy
 8017b94:	623b      	str	r3, [r7, #32]
}
 8017b96:	bf00      	nop
 8017b98:	e7fe      	b.n	8017b98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017b9a:	f001 fcdb 	bl	8019554 <xTaskGetSchedulerState>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d102      	bne.n	8017baa <xQueueGenericSend+0x9e>
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d101      	bne.n	8017bae <xQueueGenericSend+0xa2>
 8017baa:	2301      	movs	r3, #1
 8017bac:	e000      	b.n	8017bb0 <xQueueGenericSend+0xa4>
 8017bae:	2300      	movs	r3, #0
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d10a      	bne.n	8017bca <xQueueGenericSend+0xbe>
	__asm volatile
 8017bb4:	f04f 0320 	mov.w	r3, #32
 8017bb8:	f383 8811 	msr	BASEPRI, r3
 8017bbc:	f3bf 8f6f 	isb	sy
 8017bc0:	f3bf 8f4f 	dsb	sy
 8017bc4:	61fb      	str	r3, [r7, #28]
}
 8017bc6:	bf00      	nop
 8017bc8:	e7fe      	b.n	8017bc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017bca:	f002 fb3b 	bl	801a244 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bd6:	429a      	cmp	r2, r3
 8017bd8:	d302      	bcc.n	8017be0 <xQueueGenericSend+0xd4>
 8017bda:	683b      	ldr	r3, [r7, #0]
 8017bdc:	2b02      	cmp	r3, #2
 8017bde:	d129      	bne.n	8017c34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017be0:	683a      	ldr	r2, [r7, #0]
 8017be2:	68b9      	ldr	r1, [r7, #8]
 8017be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017be6:	f000 fc39 	bl	801845c <prvCopyDataToQueue>
 8017bea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d010      	beq.n	8017c16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bf6:	3324      	adds	r3, #36	; 0x24
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f001 fb0d 	bl	8019218 <xTaskRemoveFromEventList>
 8017bfe:	4603      	mov	r3, r0
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d013      	beq.n	8017c2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017c04:	4b3f      	ldr	r3, [pc, #252]	; (8017d04 <xQueueGenericSend+0x1f8>)
 8017c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c0a:	601a      	str	r2, [r3, #0]
 8017c0c:	f3bf 8f4f 	dsb	sy
 8017c10:	f3bf 8f6f 	isb	sy
 8017c14:	e00a      	b.n	8017c2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d007      	beq.n	8017c2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017c1c:	4b39      	ldr	r3, [pc, #228]	; (8017d04 <xQueueGenericSend+0x1f8>)
 8017c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c22:	601a      	str	r2, [r3, #0]
 8017c24:	f3bf 8f4f 	dsb	sy
 8017c28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017c2c:	f002 fb3a 	bl	801a2a4 <vPortExitCritical>
				return pdPASS;
 8017c30:	2301      	movs	r3, #1
 8017c32:	e063      	b.n	8017cfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d103      	bne.n	8017c42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017c3a:	f002 fb33 	bl	801a2a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017c3e:	2300      	movs	r3, #0
 8017c40:	e05c      	b.n	8017cfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d106      	bne.n	8017c56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017c48:	f107 0314 	add.w	r3, r7, #20
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	f001 fb45 	bl	80192dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017c52:	2301      	movs	r3, #1
 8017c54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017c56:	f002 fb25 	bl	801a2a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017c5a:	f001 f899 	bl	8018d90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017c5e:	f002 faf1 	bl	801a244 <vPortEnterCritical>
 8017c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017c68:	b25b      	sxtb	r3, r3
 8017c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c6e:	d103      	bne.n	8017c78 <xQueueGenericSend+0x16c>
 8017c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c72:	2200      	movs	r2, #0
 8017c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017c7e:	b25b      	sxtb	r3, r3
 8017c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c84:	d103      	bne.n	8017c8e <xQueueGenericSend+0x182>
 8017c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c88:	2200      	movs	r2, #0
 8017c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017c8e:	f002 fb09 	bl	801a2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017c92:	1d3a      	adds	r2, r7, #4
 8017c94:	f107 0314 	add.w	r3, r7, #20
 8017c98:	4611      	mov	r1, r2
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f001 fb34 	bl	8019308 <xTaskCheckForTimeOut>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d124      	bne.n	8017cf0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ca8:	f000 fcd0 	bl	801864c <prvIsQueueFull>
 8017cac:	4603      	mov	r3, r0
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d018      	beq.n	8017ce4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cb4:	3310      	adds	r3, #16
 8017cb6:	687a      	ldr	r2, [r7, #4]
 8017cb8:	4611      	mov	r1, r2
 8017cba:	4618      	mov	r0, r3
 8017cbc:	f001 fa5c 	bl	8019178 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017cc2:	f000 fc5b 	bl	801857c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017cc6:	f001 f871 	bl	8018dac <xTaskResumeAll>
 8017cca:	4603      	mov	r3, r0
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	f47f af7c 	bne.w	8017bca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017cd2:	4b0c      	ldr	r3, [pc, #48]	; (8017d04 <xQueueGenericSend+0x1f8>)
 8017cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cd8:	601a      	str	r2, [r3, #0]
 8017cda:	f3bf 8f4f 	dsb	sy
 8017cde:	f3bf 8f6f 	isb	sy
 8017ce2:	e772      	b.n	8017bca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ce6:	f000 fc49 	bl	801857c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017cea:	f001 f85f 	bl	8018dac <xTaskResumeAll>
 8017cee:	e76c      	b.n	8017bca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017cf2:	f000 fc43 	bl	801857c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017cf6:	f001 f859 	bl	8018dac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017cfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	3738      	adds	r7, #56	; 0x38
 8017d00:	46bd      	mov	sp, r7
 8017d02:	bd80      	pop	{r7, pc}
 8017d04:	e000ed04 	.word	0xe000ed04

08017d08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b08e      	sub	sp, #56	; 0x38
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	60f8      	str	r0, [r7, #12]
 8017d10:	60b9      	str	r1, [r7, #8]
 8017d12:	607a      	str	r2, [r7, #4]
 8017d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d10a      	bne.n	8017d36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017d20:	f04f 0320 	mov.w	r3, #32
 8017d24:	f383 8811 	msr	BASEPRI, r3
 8017d28:	f3bf 8f6f 	isb	sy
 8017d2c:	f3bf 8f4f 	dsb	sy
 8017d30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017d32:	bf00      	nop
 8017d34:	e7fe      	b.n	8017d34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017d36:	68bb      	ldr	r3, [r7, #8]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d103      	bne.n	8017d44 <xQueueGenericSendFromISR+0x3c>
 8017d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d101      	bne.n	8017d48 <xQueueGenericSendFromISR+0x40>
 8017d44:	2301      	movs	r3, #1
 8017d46:	e000      	b.n	8017d4a <xQueueGenericSendFromISR+0x42>
 8017d48:	2300      	movs	r3, #0
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d10a      	bne.n	8017d64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017d4e:	f04f 0320 	mov.w	r3, #32
 8017d52:	f383 8811 	msr	BASEPRI, r3
 8017d56:	f3bf 8f6f 	isb	sy
 8017d5a:	f3bf 8f4f 	dsb	sy
 8017d5e:	623b      	str	r3, [r7, #32]
}
 8017d60:	bf00      	nop
 8017d62:	e7fe      	b.n	8017d62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017d64:	683b      	ldr	r3, [r7, #0]
 8017d66:	2b02      	cmp	r3, #2
 8017d68:	d103      	bne.n	8017d72 <xQueueGenericSendFromISR+0x6a>
 8017d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d6e:	2b01      	cmp	r3, #1
 8017d70:	d101      	bne.n	8017d76 <xQueueGenericSendFromISR+0x6e>
 8017d72:	2301      	movs	r3, #1
 8017d74:	e000      	b.n	8017d78 <xQueueGenericSendFromISR+0x70>
 8017d76:	2300      	movs	r3, #0
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d10a      	bne.n	8017d92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017d7c:	f04f 0320 	mov.w	r3, #32
 8017d80:	f383 8811 	msr	BASEPRI, r3
 8017d84:	f3bf 8f6f 	isb	sy
 8017d88:	f3bf 8f4f 	dsb	sy
 8017d8c:	61fb      	str	r3, [r7, #28]
}
 8017d8e:	bf00      	nop
 8017d90:	e7fe      	b.n	8017d90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017d92:	f002 fb39 	bl	801a408 <vPortValidateInterruptPriority>
	__asm volatile
 8017d96:	f3ef 8211 	mrs	r2, BASEPRI
 8017d9a:	f04f 0320 	mov.w	r3, #32
 8017d9e:	f383 8811 	msr	BASEPRI, r3
 8017da2:	f3bf 8f6f 	isb	sy
 8017da6:	f3bf 8f4f 	dsb	sy
 8017daa:	61ba      	str	r2, [r7, #24]
 8017dac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017dae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017db0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017dba:	429a      	cmp	r2, r3
 8017dbc:	d302      	bcc.n	8017dc4 <xQueueGenericSendFromISR+0xbc>
 8017dbe:	683b      	ldr	r3, [r7, #0]
 8017dc0:	2b02      	cmp	r3, #2
 8017dc2:	d12c      	bne.n	8017e1e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017dce:	683a      	ldr	r2, [r7, #0]
 8017dd0:	68b9      	ldr	r1, [r7, #8]
 8017dd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017dd4:	f000 fb42 	bl	801845c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017dd8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017de0:	d112      	bne.n	8017e08 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d016      	beq.n	8017e18 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dec:	3324      	adds	r3, #36	; 0x24
 8017dee:	4618      	mov	r0, r3
 8017df0:	f001 fa12 	bl	8019218 <xTaskRemoveFromEventList>
 8017df4:	4603      	mov	r3, r0
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d00e      	beq.n	8017e18 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d00b      	beq.n	8017e18 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	2201      	movs	r2, #1
 8017e04:	601a      	str	r2, [r3, #0]
 8017e06:	e007      	b.n	8017e18 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017e08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017e0c:	3301      	adds	r3, #1
 8017e0e:	b2db      	uxtb	r3, r3
 8017e10:	b25a      	sxtb	r2, r3
 8017e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017e18:	2301      	movs	r3, #1
 8017e1a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8017e1c:	e001      	b.n	8017e22 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017e1e:	2300      	movs	r3, #0
 8017e20:	637b      	str	r3, [r7, #52]	; 0x34
 8017e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017e26:	693b      	ldr	r3, [r7, #16]
 8017e28:	f383 8811 	msr	BASEPRI, r3
}
 8017e2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017e30:	4618      	mov	r0, r3
 8017e32:	3738      	adds	r7, #56	; 0x38
 8017e34:	46bd      	mov	sp, r7
 8017e36:	bd80      	pop	{r7, pc}

08017e38 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017e38:	b580      	push	{r7, lr}
 8017e3a:	b08e      	sub	sp, #56	; 0x38
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	6078      	str	r0, [r7, #4]
 8017e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d10a      	bne.n	8017e62 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8017e4c:	f04f 0320 	mov.w	r3, #32
 8017e50:	f383 8811 	msr	BASEPRI, r3
 8017e54:	f3bf 8f6f 	isb	sy
 8017e58:	f3bf 8f4f 	dsb	sy
 8017e5c:	623b      	str	r3, [r7, #32]
}
 8017e5e:	bf00      	nop
 8017e60:	e7fe      	b.n	8017e60 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d00a      	beq.n	8017e80 <xQueueGiveFromISR+0x48>
	__asm volatile
 8017e6a:	f04f 0320 	mov.w	r3, #32
 8017e6e:	f383 8811 	msr	BASEPRI, r3
 8017e72:	f3bf 8f6f 	isb	sy
 8017e76:	f3bf 8f4f 	dsb	sy
 8017e7a:	61fb      	str	r3, [r7, #28]
}
 8017e7c:	bf00      	nop
 8017e7e:	e7fe      	b.n	8017e7e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d103      	bne.n	8017e90 <xQueueGiveFromISR+0x58>
 8017e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e8a:	689b      	ldr	r3, [r3, #8]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d101      	bne.n	8017e94 <xQueueGiveFromISR+0x5c>
 8017e90:	2301      	movs	r3, #1
 8017e92:	e000      	b.n	8017e96 <xQueueGiveFromISR+0x5e>
 8017e94:	2300      	movs	r3, #0
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d10a      	bne.n	8017eb0 <xQueueGiveFromISR+0x78>
	__asm volatile
 8017e9a:	f04f 0320 	mov.w	r3, #32
 8017e9e:	f383 8811 	msr	BASEPRI, r3
 8017ea2:	f3bf 8f6f 	isb	sy
 8017ea6:	f3bf 8f4f 	dsb	sy
 8017eaa:	61bb      	str	r3, [r7, #24]
}
 8017eac:	bf00      	nop
 8017eae:	e7fe      	b.n	8017eae <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017eb0:	f002 faaa 	bl	801a408 <vPortValidateInterruptPriority>
	__asm volatile
 8017eb4:	f3ef 8211 	mrs	r2, BASEPRI
 8017eb8:	f04f 0320 	mov.w	r3, #32
 8017ebc:	f383 8811 	msr	BASEPRI, r3
 8017ec0:	f3bf 8f6f 	isb	sy
 8017ec4:	f3bf 8f4f 	dsb	sy
 8017ec8:	617a      	str	r2, [r7, #20]
 8017eca:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017ecc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017ece:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ed4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017edc:	429a      	cmp	r2, r3
 8017ede:	d22b      	bcs.n	8017f38 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eec:	1c5a      	adds	r2, r3, #1
 8017eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ef0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017ef2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017efa:	d112      	bne.n	8017f22 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d016      	beq.n	8017f32 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f06:	3324      	adds	r3, #36	; 0x24
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f001 f985 	bl	8019218 <xTaskRemoveFromEventList>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d00e      	beq.n	8017f32 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017f14:	683b      	ldr	r3, [r7, #0]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d00b      	beq.n	8017f32 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017f1a:	683b      	ldr	r3, [r7, #0]
 8017f1c:	2201      	movs	r2, #1
 8017f1e:	601a      	str	r2, [r3, #0]
 8017f20:	e007      	b.n	8017f32 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f26:	3301      	adds	r3, #1
 8017f28:	b2db      	uxtb	r3, r3
 8017f2a:	b25a      	sxtb	r2, r3
 8017f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017f32:	2301      	movs	r3, #1
 8017f34:	637b      	str	r3, [r7, #52]	; 0x34
 8017f36:	e001      	b.n	8017f3c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017f38:	2300      	movs	r3, #0
 8017f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8017f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f3e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	f383 8811 	msr	BASEPRI, r3
}
 8017f46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	3738      	adds	r7, #56	; 0x38
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}
	...

08017f54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b08c      	sub	sp, #48	; 0x30
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	60f8      	str	r0, [r7, #12]
 8017f5c:	60b9      	str	r1, [r7, #8]
 8017f5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017f60:	2300      	movs	r3, #0
 8017f62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d10a      	bne.n	8017f84 <xQueueReceive+0x30>
	__asm volatile
 8017f6e:	f04f 0320 	mov.w	r3, #32
 8017f72:	f383 8811 	msr	BASEPRI, r3
 8017f76:	f3bf 8f6f 	isb	sy
 8017f7a:	f3bf 8f4f 	dsb	sy
 8017f7e:	623b      	str	r3, [r7, #32]
}
 8017f80:	bf00      	nop
 8017f82:	e7fe      	b.n	8017f82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017f84:	68bb      	ldr	r3, [r7, #8]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d103      	bne.n	8017f92 <xQueueReceive+0x3e>
 8017f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d101      	bne.n	8017f96 <xQueueReceive+0x42>
 8017f92:	2301      	movs	r3, #1
 8017f94:	e000      	b.n	8017f98 <xQueueReceive+0x44>
 8017f96:	2300      	movs	r3, #0
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d10a      	bne.n	8017fb2 <xQueueReceive+0x5e>
	__asm volatile
 8017f9c:	f04f 0320 	mov.w	r3, #32
 8017fa0:	f383 8811 	msr	BASEPRI, r3
 8017fa4:	f3bf 8f6f 	isb	sy
 8017fa8:	f3bf 8f4f 	dsb	sy
 8017fac:	61fb      	str	r3, [r7, #28]
}
 8017fae:	bf00      	nop
 8017fb0:	e7fe      	b.n	8017fb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017fb2:	f001 facf 	bl	8019554 <xTaskGetSchedulerState>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d102      	bne.n	8017fc2 <xQueueReceive+0x6e>
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d101      	bne.n	8017fc6 <xQueueReceive+0x72>
 8017fc2:	2301      	movs	r3, #1
 8017fc4:	e000      	b.n	8017fc8 <xQueueReceive+0x74>
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d10a      	bne.n	8017fe2 <xQueueReceive+0x8e>
	__asm volatile
 8017fcc:	f04f 0320 	mov.w	r3, #32
 8017fd0:	f383 8811 	msr	BASEPRI, r3
 8017fd4:	f3bf 8f6f 	isb	sy
 8017fd8:	f3bf 8f4f 	dsb	sy
 8017fdc:	61bb      	str	r3, [r7, #24]
}
 8017fde:	bf00      	nop
 8017fe0:	e7fe      	b.n	8017fe0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017fe2:	f002 f92f 	bl	801a244 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d01f      	beq.n	8018032 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017ff2:	68b9      	ldr	r1, [r7, #8]
 8017ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ff6:	f000 fa9b 	bl	8018530 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ffc:	1e5a      	subs	r2, r3, #1
 8017ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018000:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018004:	691b      	ldr	r3, [r3, #16]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d00f      	beq.n	801802a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801800a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801800c:	3310      	adds	r3, #16
 801800e:	4618      	mov	r0, r3
 8018010:	f001 f902 	bl	8019218 <xTaskRemoveFromEventList>
 8018014:	4603      	mov	r3, r0
 8018016:	2b00      	cmp	r3, #0
 8018018:	d007      	beq.n	801802a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801801a:	4b3d      	ldr	r3, [pc, #244]	; (8018110 <xQueueReceive+0x1bc>)
 801801c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018020:	601a      	str	r2, [r3, #0]
 8018022:	f3bf 8f4f 	dsb	sy
 8018026:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801802a:	f002 f93b 	bl	801a2a4 <vPortExitCritical>
				return pdPASS;
 801802e:	2301      	movs	r3, #1
 8018030:	e069      	b.n	8018106 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d103      	bne.n	8018040 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018038:	f002 f934 	bl	801a2a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801803c:	2300      	movs	r3, #0
 801803e:	e062      	b.n	8018106 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018042:	2b00      	cmp	r3, #0
 8018044:	d106      	bne.n	8018054 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018046:	f107 0310 	add.w	r3, r7, #16
 801804a:	4618      	mov	r0, r3
 801804c:	f001 f946 	bl	80192dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018050:	2301      	movs	r3, #1
 8018052:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018054:	f002 f926 	bl	801a2a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018058:	f000 fe9a 	bl	8018d90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801805c:	f002 f8f2 	bl	801a244 <vPortEnterCritical>
 8018060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018066:	b25b      	sxtb	r3, r3
 8018068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801806c:	d103      	bne.n	8018076 <xQueueReceive+0x122>
 801806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018070:	2200      	movs	r2, #0
 8018072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801807c:	b25b      	sxtb	r3, r3
 801807e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018082:	d103      	bne.n	801808c <xQueueReceive+0x138>
 8018084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018086:	2200      	movs	r2, #0
 8018088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801808c:	f002 f90a 	bl	801a2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018090:	1d3a      	adds	r2, r7, #4
 8018092:	f107 0310 	add.w	r3, r7, #16
 8018096:	4611      	mov	r1, r2
 8018098:	4618      	mov	r0, r3
 801809a:	f001 f935 	bl	8019308 <xTaskCheckForTimeOut>
 801809e:	4603      	mov	r3, r0
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d123      	bne.n	80180ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80180a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180a6:	f000 fabb 	bl	8018620 <prvIsQueueEmpty>
 80180aa:	4603      	mov	r3, r0
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d017      	beq.n	80180e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80180b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180b2:	3324      	adds	r3, #36	; 0x24
 80180b4:	687a      	ldr	r2, [r7, #4]
 80180b6:	4611      	mov	r1, r2
 80180b8:	4618      	mov	r0, r3
 80180ba:	f001 f85d 	bl	8019178 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80180be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180c0:	f000 fa5c 	bl	801857c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80180c4:	f000 fe72 	bl	8018dac <xTaskResumeAll>
 80180c8:	4603      	mov	r3, r0
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d189      	bne.n	8017fe2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80180ce:	4b10      	ldr	r3, [pc, #64]	; (8018110 <xQueueReceive+0x1bc>)
 80180d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180d4:	601a      	str	r2, [r3, #0]
 80180d6:	f3bf 8f4f 	dsb	sy
 80180da:	f3bf 8f6f 	isb	sy
 80180de:	e780      	b.n	8017fe2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80180e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180e2:	f000 fa4b 	bl	801857c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80180e6:	f000 fe61 	bl	8018dac <xTaskResumeAll>
 80180ea:	e77a      	b.n	8017fe2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80180ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180ee:	f000 fa45 	bl	801857c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80180f2:	f000 fe5b 	bl	8018dac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80180f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180f8:	f000 fa92 	bl	8018620 <prvIsQueueEmpty>
 80180fc:	4603      	mov	r3, r0
 80180fe:	2b00      	cmp	r3, #0
 8018100:	f43f af6f 	beq.w	8017fe2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018104:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018106:	4618      	mov	r0, r3
 8018108:	3730      	adds	r7, #48	; 0x30
 801810a:	46bd      	mov	sp, r7
 801810c:	bd80      	pop	{r7, pc}
 801810e:	bf00      	nop
 8018110:	e000ed04 	.word	0xe000ed04

08018114 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b08e      	sub	sp, #56	; 0x38
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
 801811c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801811e:	2300      	movs	r3, #0
 8018120:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018126:	2300      	movs	r3, #0
 8018128:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801812c:	2b00      	cmp	r3, #0
 801812e:	d10a      	bne.n	8018146 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8018130:	f04f 0320 	mov.w	r3, #32
 8018134:	f383 8811 	msr	BASEPRI, r3
 8018138:	f3bf 8f6f 	isb	sy
 801813c:	f3bf 8f4f 	dsb	sy
 8018140:	623b      	str	r3, [r7, #32]
}
 8018142:	bf00      	nop
 8018144:	e7fe      	b.n	8018144 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801814a:	2b00      	cmp	r3, #0
 801814c:	d00a      	beq.n	8018164 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801814e:	f04f 0320 	mov.w	r3, #32
 8018152:	f383 8811 	msr	BASEPRI, r3
 8018156:	f3bf 8f6f 	isb	sy
 801815a:	f3bf 8f4f 	dsb	sy
 801815e:	61fb      	str	r3, [r7, #28]
}
 8018160:	bf00      	nop
 8018162:	e7fe      	b.n	8018162 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018164:	f001 f9f6 	bl	8019554 <xTaskGetSchedulerState>
 8018168:	4603      	mov	r3, r0
 801816a:	2b00      	cmp	r3, #0
 801816c:	d102      	bne.n	8018174 <xQueueSemaphoreTake+0x60>
 801816e:	683b      	ldr	r3, [r7, #0]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d101      	bne.n	8018178 <xQueueSemaphoreTake+0x64>
 8018174:	2301      	movs	r3, #1
 8018176:	e000      	b.n	801817a <xQueueSemaphoreTake+0x66>
 8018178:	2300      	movs	r3, #0
 801817a:	2b00      	cmp	r3, #0
 801817c:	d10a      	bne.n	8018194 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801817e:	f04f 0320 	mov.w	r3, #32
 8018182:	f383 8811 	msr	BASEPRI, r3
 8018186:	f3bf 8f6f 	isb	sy
 801818a:	f3bf 8f4f 	dsb	sy
 801818e:	61bb      	str	r3, [r7, #24]
}
 8018190:	bf00      	nop
 8018192:	e7fe      	b.n	8018192 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018194:	f002 f856 	bl	801a244 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8018198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801819a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801819c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d024      	beq.n	80181ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80181a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a6:	1e5a      	subs	r2, r3, #1
 80181a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80181ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d104      	bne.n	80181be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80181b4:	f001 fb8c 	bl	80198d0 <pvTaskIncrementMutexHeldCount>
 80181b8:	4602      	mov	r2, r0
 80181ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80181be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c0:	691b      	ldr	r3, [r3, #16]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d00f      	beq.n	80181e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80181c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c8:	3310      	adds	r3, #16
 80181ca:	4618      	mov	r0, r3
 80181cc:	f001 f824 	bl	8019218 <xTaskRemoveFromEventList>
 80181d0:	4603      	mov	r3, r0
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d007      	beq.n	80181e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80181d6:	4b54      	ldr	r3, [pc, #336]	; (8018328 <xQueueSemaphoreTake+0x214>)
 80181d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181dc:	601a      	str	r2, [r3, #0]
 80181de:	f3bf 8f4f 	dsb	sy
 80181e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80181e6:	f002 f85d 	bl	801a2a4 <vPortExitCritical>
				return pdPASS;
 80181ea:	2301      	movs	r3, #1
 80181ec:	e097      	b.n	801831e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80181ee:	683b      	ldr	r3, [r7, #0]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d111      	bne.n	8018218 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80181f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d00a      	beq.n	8018210 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80181fa:	f04f 0320 	mov.w	r3, #32
 80181fe:	f383 8811 	msr	BASEPRI, r3
 8018202:	f3bf 8f6f 	isb	sy
 8018206:	f3bf 8f4f 	dsb	sy
 801820a:	617b      	str	r3, [r7, #20]
}
 801820c:	bf00      	nop
 801820e:	e7fe      	b.n	801820e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8018210:	f002 f848 	bl	801a2a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018214:	2300      	movs	r3, #0
 8018216:	e082      	b.n	801831e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801821a:	2b00      	cmp	r3, #0
 801821c:	d106      	bne.n	801822c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801821e:	f107 030c 	add.w	r3, r7, #12
 8018222:	4618      	mov	r0, r3
 8018224:	f001 f85a 	bl	80192dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018228:	2301      	movs	r3, #1
 801822a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801822c:	f002 f83a 	bl	801a2a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018230:	f000 fdae 	bl	8018d90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018234:	f002 f806 	bl	801a244 <vPortEnterCritical>
 8018238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801823a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801823e:	b25b      	sxtb	r3, r3
 8018240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018244:	d103      	bne.n	801824e <xQueueSemaphoreTake+0x13a>
 8018246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018248:	2200      	movs	r2, #0
 801824a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801824e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018254:	b25b      	sxtb	r3, r3
 8018256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801825a:	d103      	bne.n	8018264 <xQueueSemaphoreTake+0x150>
 801825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801825e:	2200      	movs	r2, #0
 8018260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018264:	f002 f81e 	bl	801a2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018268:	463a      	mov	r2, r7
 801826a:	f107 030c 	add.w	r3, r7, #12
 801826e:	4611      	mov	r1, r2
 8018270:	4618      	mov	r0, r3
 8018272:	f001 f849 	bl	8019308 <xTaskCheckForTimeOut>
 8018276:	4603      	mov	r3, r0
 8018278:	2b00      	cmp	r3, #0
 801827a:	d132      	bne.n	80182e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801827c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801827e:	f000 f9cf 	bl	8018620 <prvIsQueueEmpty>
 8018282:	4603      	mov	r3, r0
 8018284:	2b00      	cmp	r3, #0
 8018286:	d026      	beq.n	80182d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d109      	bne.n	80182a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8018290:	f001 ffd8 	bl	801a244 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018296:	689b      	ldr	r3, [r3, #8]
 8018298:	4618      	mov	r0, r3
 801829a:	f001 f979 	bl	8019590 <xTaskPriorityInherit>
 801829e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80182a0:	f002 f800 	bl	801a2a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80182a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182a6:	3324      	adds	r3, #36	; 0x24
 80182a8:	683a      	ldr	r2, [r7, #0]
 80182aa:	4611      	mov	r1, r2
 80182ac:	4618      	mov	r0, r3
 80182ae:	f000 ff63 	bl	8019178 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80182b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80182b4:	f000 f962 	bl	801857c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80182b8:	f000 fd78 	bl	8018dac <xTaskResumeAll>
 80182bc:	4603      	mov	r3, r0
 80182be:	2b00      	cmp	r3, #0
 80182c0:	f47f af68 	bne.w	8018194 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80182c4:	4b18      	ldr	r3, [pc, #96]	; (8018328 <xQueueSemaphoreTake+0x214>)
 80182c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182ca:	601a      	str	r2, [r3, #0]
 80182cc:	f3bf 8f4f 	dsb	sy
 80182d0:	f3bf 8f6f 	isb	sy
 80182d4:	e75e      	b.n	8018194 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80182d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80182d8:	f000 f950 	bl	801857c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80182dc:	f000 fd66 	bl	8018dac <xTaskResumeAll>
 80182e0:	e758      	b.n	8018194 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80182e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80182e4:	f000 f94a 	bl	801857c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80182e8:	f000 fd60 	bl	8018dac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80182ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80182ee:	f000 f997 	bl	8018620 <prvIsQueueEmpty>
 80182f2:	4603      	mov	r3, r0
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	f43f af4d 	beq.w	8018194 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80182fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d00d      	beq.n	801831c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8018300:	f001 ffa0 	bl	801a244 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018306:	f000 f891 	bl	801842c <prvGetDisinheritPriorityAfterTimeout>
 801830a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801830c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801830e:	689b      	ldr	r3, [r3, #8]
 8018310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018312:	4618      	mov	r0, r3
 8018314:	f001 fa42 	bl	801979c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8018318:	f001 ffc4 	bl	801a2a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801831c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801831e:	4618      	mov	r0, r3
 8018320:	3738      	adds	r7, #56	; 0x38
 8018322:	46bd      	mov	sp, r7
 8018324:	bd80      	pop	{r7, pc}
 8018326:	bf00      	nop
 8018328:	e000ed04 	.word	0xe000ed04

0801832c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801832c:	b580      	push	{r7, lr}
 801832e:	b08e      	sub	sp, #56	; 0x38
 8018330:	af00      	add	r7, sp, #0
 8018332:	60f8      	str	r0, [r7, #12]
 8018334:	60b9      	str	r1, [r7, #8]
 8018336:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801833c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801833e:	2b00      	cmp	r3, #0
 8018340:	d10a      	bne.n	8018358 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8018342:	f04f 0320 	mov.w	r3, #32
 8018346:	f383 8811 	msr	BASEPRI, r3
 801834a:	f3bf 8f6f 	isb	sy
 801834e:	f3bf 8f4f 	dsb	sy
 8018352:	623b      	str	r3, [r7, #32]
}
 8018354:	bf00      	nop
 8018356:	e7fe      	b.n	8018356 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018358:	68bb      	ldr	r3, [r7, #8]
 801835a:	2b00      	cmp	r3, #0
 801835c:	d103      	bne.n	8018366 <xQueueReceiveFromISR+0x3a>
 801835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018362:	2b00      	cmp	r3, #0
 8018364:	d101      	bne.n	801836a <xQueueReceiveFromISR+0x3e>
 8018366:	2301      	movs	r3, #1
 8018368:	e000      	b.n	801836c <xQueueReceiveFromISR+0x40>
 801836a:	2300      	movs	r3, #0
 801836c:	2b00      	cmp	r3, #0
 801836e:	d10a      	bne.n	8018386 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8018370:	f04f 0320 	mov.w	r3, #32
 8018374:	f383 8811 	msr	BASEPRI, r3
 8018378:	f3bf 8f6f 	isb	sy
 801837c:	f3bf 8f4f 	dsb	sy
 8018380:	61fb      	str	r3, [r7, #28]
}
 8018382:	bf00      	nop
 8018384:	e7fe      	b.n	8018384 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018386:	f002 f83f 	bl	801a408 <vPortValidateInterruptPriority>
	__asm volatile
 801838a:	f3ef 8211 	mrs	r2, BASEPRI
 801838e:	f04f 0320 	mov.w	r3, #32
 8018392:	f383 8811 	msr	BASEPRI, r3
 8018396:	f3bf 8f6f 	isb	sy
 801839a:	f3bf 8f4f 	dsb	sy
 801839e:	61ba      	str	r2, [r7, #24]
 80183a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80183a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80183a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80183a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80183ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d02f      	beq.n	8018412 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80183b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80183b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80183bc:	68b9      	ldr	r1, [r7, #8]
 80183be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80183c0:	f000 f8b6 	bl	8018530 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80183c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183c6:	1e5a      	subs	r2, r3, #1
 80183c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80183cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80183d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183d4:	d112      	bne.n	80183fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80183d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183d8:	691b      	ldr	r3, [r3, #16]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d016      	beq.n	801840c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80183de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e0:	3310      	adds	r3, #16
 80183e2:	4618      	mov	r0, r3
 80183e4:	f000 ff18 	bl	8019218 <xTaskRemoveFromEventList>
 80183e8:	4603      	mov	r3, r0
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d00e      	beq.n	801840c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d00b      	beq.n	801840c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	2201      	movs	r2, #1
 80183f8:	601a      	str	r2, [r3, #0]
 80183fa:	e007      	b.n	801840c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80183fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018400:	3301      	adds	r3, #1
 8018402:	b2db      	uxtb	r3, r3
 8018404:	b25a      	sxtb	r2, r3
 8018406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801840c:	2301      	movs	r3, #1
 801840e:	637b      	str	r3, [r7, #52]	; 0x34
 8018410:	e001      	b.n	8018416 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8018412:	2300      	movs	r3, #0
 8018414:	637b      	str	r3, [r7, #52]	; 0x34
 8018416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018418:	613b      	str	r3, [r7, #16]
	__asm volatile
 801841a:	693b      	ldr	r3, [r7, #16]
 801841c:	f383 8811 	msr	BASEPRI, r3
}
 8018420:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018424:	4618      	mov	r0, r3
 8018426:	3738      	adds	r7, #56	; 0x38
 8018428:	46bd      	mov	sp, r7
 801842a:	bd80      	pop	{r7, pc}

0801842c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801842c:	b480      	push	{r7}
 801842e:	b085      	sub	sp, #20
 8018430:	af00      	add	r7, sp, #0
 8018432:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018438:	2b00      	cmp	r3, #0
 801843a:	d006      	beq.n	801844a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	f1c3 0307 	rsb	r3, r3, #7
 8018446:	60fb      	str	r3, [r7, #12]
 8018448:	e001      	b.n	801844e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801844a:	2300      	movs	r3, #0
 801844c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801844e:	68fb      	ldr	r3, [r7, #12]
	}
 8018450:	4618      	mov	r0, r3
 8018452:	3714      	adds	r7, #20
 8018454:	46bd      	mov	sp, r7
 8018456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801845a:	4770      	bx	lr

0801845c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801845c:	b580      	push	{r7, lr}
 801845e:	b086      	sub	sp, #24
 8018460:	af00      	add	r7, sp, #0
 8018462:	60f8      	str	r0, [r7, #12]
 8018464:	60b9      	str	r1, [r7, #8]
 8018466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018468:	2300      	movs	r3, #0
 801846a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018470:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018476:	2b00      	cmp	r3, #0
 8018478:	d10d      	bne.n	8018496 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d14d      	bne.n	801851e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	689b      	ldr	r3, [r3, #8]
 8018486:	4618      	mov	r0, r3
 8018488:	f001 f902 	bl	8019690 <xTaskPriorityDisinherit>
 801848c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	2200      	movs	r2, #0
 8018492:	609a      	str	r2, [r3, #8]
 8018494:	e043      	b.n	801851e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d119      	bne.n	80184d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	6858      	ldr	r0, [r3, #4]
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184a4:	461a      	mov	r2, r3
 80184a6:	68b9      	ldr	r1, [r7, #8]
 80184a8:	f005 fd4c 	bl	801df44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	685a      	ldr	r2, [r3, #4]
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184b4:	441a      	add	r2, r3
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	685a      	ldr	r2, [r3, #4]
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	689b      	ldr	r3, [r3, #8]
 80184c2:	429a      	cmp	r2, r3
 80184c4:	d32b      	bcc.n	801851e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	681a      	ldr	r2, [r3, #0]
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	605a      	str	r2, [r3, #4]
 80184ce:	e026      	b.n	801851e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	68d8      	ldr	r0, [r3, #12]
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184d8:	461a      	mov	r2, r3
 80184da:	68b9      	ldr	r1, [r7, #8]
 80184dc:	f005 fd32 	bl	801df44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	68da      	ldr	r2, [r3, #12]
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184e8:	425b      	negs	r3, r3
 80184ea:	441a      	add	r2, r3
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	68da      	ldr	r2, [r3, #12]
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	429a      	cmp	r2, r3
 80184fa:	d207      	bcs.n	801850c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	689a      	ldr	r2, [r3, #8]
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018504:	425b      	negs	r3, r3
 8018506:	441a      	add	r2, r3
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	2b02      	cmp	r3, #2
 8018510:	d105      	bne.n	801851e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018512:	693b      	ldr	r3, [r7, #16]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d002      	beq.n	801851e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018518:	693b      	ldr	r3, [r7, #16]
 801851a:	3b01      	subs	r3, #1
 801851c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801851e:	693b      	ldr	r3, [r7, #16]
 8018520:	1c5a      	adds	r2, r3, #1
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018526:	697b      	ldr	r3, [r7, #20]
}
 8018528:	4618      	mov	r0, r3
 801852a:	3718      	adds	r7, #24
 801852c:	46bd      	mov	sp, r7
 801852e:	bd80      	pop	{r7, pc}

08018530 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018530:	b580      	push	{r7, lr}
 8018532:	b082      	sub	sp, #8
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
 8018538:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801853e:	2b00      	cmp	r3, #0
 8018540:	d018      	beq.n	8018574 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	68da      	ldr	r2, [r3, #12]
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801854a:	441a      	add	r2, r3
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	68da      	ldr	r2, [r3, #12]
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	689b      	ldr	r3, [r3, #8]
 8018558:	429a      	cmp	r2, r3
 801855a:	d303      	bcc.n	8018564 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	681a      	ldr	r2, [r3, #0]
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	68d9      	ldr	r1, [r3, #12]
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801856c:	461a      	mov	r2, r3
 801856e:	6838      	ldr	r0, [r7, #0]
 8018570:	f005 fce8 	bl	801df44 <memcpy>
	}
}
 8018574:	bf00      	nop
 8018576:	3708      	adds	r7, #8
 8018578:	46bd      	mov	sp, r7
 801857a:	bd80      	pop	{r7, pc}

0801857c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b084      	sub	sp, #16
 8018580:	af00      	add	r7, sp, #0
 8018582:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018584:	f001 fe5e 	bl	801a244 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801858e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018590:	e011      	b.n	80185b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018596:	2b00      	cmp	r3, #0
 8018598:	d012      	beq.n	80185c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	3324      	adds	r3, #36	; 0x24
 801859e:	4618      	mov	r0, r3
 80185a0:	f000 fe3a 	bl	8019218 <xTaskRemoveFromEventList>
 80185a4:	4603      	mov	r3, r0
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d001      	beq.n	80185ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80185aa:	f000 ff0f 	bl	80193cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80185ae:	7bfb      	ldrb	r3, [r7, #15]
 80185b0:	3b01      	subs	r3, #1
 80185b2:	b2db      	uxtb	r3, r3
 80185b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80185b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	dce9      	bgt.n	8018592 <prvUnlockQueue+0x16>
 80185be:	e000      	b.n	80185c2 <prvUnlockQueue+0x46>
					break;
 80185c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	22ff      	movs	r2, #255	; 0xff
 80185c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80185ca:	f001 fe6b 	bl	801a2a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80185ce:	f001 fe39 	bl	801a244 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80185d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80185da:	e011      	b.n	8018600 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	691b      	ldr	r3, [r3, #16]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d012      	beq.n	801860a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	3310      	adds	r3, #16
 80185e8:	4618      	mov	r0, r3
 80185ea:	f000 fe15 	bl	8019218 <xTaskRemoveFromEventList>
 80185ee:	4603      	mov	r3, r0
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d001      	beq.n	80185f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80185f4:	f000 feea 	bl	80193cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80185f8:	7bbb      	ldrb	r3, [r7, #14]
 80185fa:	3b01      	subs	r3, #1
 80185fc:	b2db      	uxtb	r3, r3
 80185fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018604:	2b00      	cmp	r3, #0
 8018606:	dce9      	bgt.n	80185dc <prvUnlockQueue+0x60>
 8018608:	e000      	b.n	801860c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801860a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	22ff      	movs	r2, #255	; 0xff
 8018610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018614:	f001 fe46 	bl	801a2a4 <vPortExitCritical>
}
 8018618:	bf00      	nop
 801861a:	3710      	adds	r7, #16
 801861c:	46bd      	mov	sp, r7
 801861e:	bd80      	pop	{r7, pc}

08018620 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b084      	sub	sp, #16
 8018624:	af00      	add	r7, sp, #0
 8018626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018628:	f001 fe0c 	bl	801a244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018630:	2b00      	cmp	r3, #0
 8018632:	d102      	bne.n	801863a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018634:	2301      	movs	r3, #1
 8018636:	60fb      	str	r3, [r7, #12]
 8018638:	e001      	b.n	801863e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801863a:	2300      	movs	r3, #0
 801863c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801863e:	f001 fe31 	bl	801a2a4 <vPortExitCritical>

	return xReturn;
 8018642:	68fb      	ldr	r3, [r7, #12]
}
 8018644:	4618      	mov	r0, r3
 8018646:	3710      	adds	r7, #16
 8018648:	46bd      	mov	sp, r7
 801864a:	bd80      	pop	{r7, pc}

0801864c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b084      	sub	sp, #16
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018654:	f001 fdf6 	bl	801a244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018660:	429a      	cmp	r2, r3
 8018662:	d102      	bne.n	801866a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018664:	2301      	movs	r3, #1
 8018666:	60fb      	str	r3, [r7, #12]
 8018668:	e001      	b.n	801866e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801866a:	2300      	movs	r3, #0
 801866c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801866e:	f001 fe19 	bl	801a2a4 <vPortExitCritical>

	return xReturn;
 8018672:	68fb      	ldr	r3, [r7, #12]
}
 8018674:	4618      	mov	r0, r3
 8018676:	3710      	adds	r7, #16
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}

0801867c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801867c:	b480      	push	{r7}
 801867e:	b085      	sub	sp, #20
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
 8018684:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018686:	2300      	movs	r3, #0
 8018688:	60fb      	str	r3, [r7, #12]
 801868a:	e014      	b.n	80186b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801868c:	4a0f      	ldr	r2, [pc, #60]	; (80186cc <vQueueAddToRegistry+0x50>)
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d10b      	bne.n	80186b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018698:	490c      	ldr	r1, [pc, #48]	; (80186cc <vQueueAddToRegistry+0x50>)
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	683a      	ldr	r2, [r7, #0]
 801869e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80186a2:	4a0a      	ldr	r2, [pc, #40]	; (80186cc <vQueueAddToRegistry+0x50>)
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	00db      	lsls	r3, r3, #3
 80186a8:	4413      	add	r3, r2
 80186aa:	687a      	ldr	r2, [r7, #4]
 80186ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80186ae:	e006      	b.n	80186be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	3301      	adds	r3, #1
 80186b4:	60fb      	str	r3, [r7, #12]
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	2b63      	cmp	r3, #99	; 0x63
 80186ba:	d9e7      	bls.n	801868c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80186bc:	bf00      	nop
 80186be:	bf00      	nop
 80186c0:	3714      	adds	r7, #20
 80186c2:	46bd      	mov	sp, r7
 80186c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186c8:	4770      	bx	lr
 80186ca:	bf00      	nop
 80186cc:	20018ef4 	.word	0x20018ef4

080186d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b086      	sub	sp, #24
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	60f8      	str	r0, [r7, #12]
 80186d8:	60b9      	str	r1, [r7, #8]
 80186da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80186e0:	f001 fdb0 	bl	801a244 <vPortEnterCritical>
 80186e4:	697b      	ldr	r3, [r7, #20]
 80186e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80186ea:	b25b      	sxtb	r3, r3
 80186ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186f0:	d103      	bne.n	80186fa <vQueueWaitForMessageRestricted+0x2a>
 80186f2:	697b      	ldr	r3, [r7, #20]
 80186f4:	2200      	movs	r2, #0
 80186f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80186fa:	697b      	ldr	r3, [r7, #20]
 80186fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018700:	b25b      	sxtb	r3, r3
 8018702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018706:	d103      	bne.n	8018710 <vQueueWaitForMessageRestricted+0x40>
 8018708:	697b      	ldr	r3, [r7, #20]
 801870a:	2200      	movs	r2, #0
 801870c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018710:	f001 fdc8 	bl	801a2a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018714:	697b      	ldr	r3, [r7, #20]
 8018716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018718:	2b00      	cmp	r3, #0
 801871a:	d106      	bne.n	801872a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801871c:	697b      	ldr	r3, [r7, #20]
 801871e:	3324      	adds	r3, #36	; 0x24
 8018720:	687a      	ldr	r2, [r7, #4]
 8018722:	68b9      	ldr	r1, [r7, #8]
 8018724:	4618      	mov	r0, r3
 8018726:	f000 fd4b 	bl	80191c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801872a:	6978      	ldr	r0, [r7, #20]
 801872c:	f7ff ff26 	bl	801857c <prvUnlockQueue>
	}
 8018730:	bf00      	nop
 8018732:	3718      	adds	r7, #24
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}

08018738 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018738:	b580      	push	{r7, lr}
 801873a:	b08c      	sub	sp, #48	; 0x30
 801873c:	af04      	add	r7, sp, #16
 801873e:	60f8      	str	r0, [r7, #12]
 8018740:	60b9      	str	r1, [r7, #8]
 8018742:	603b      	str	r3, [r7, #0]
 8018744:	4613      	mov	r3, r2
 8018746:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018748:	88fb      	ldrh	r3, [r7, #6]
 801874a:	009b      	lsls	r3, r3, #2
 801874c:	4618      	mov	r0, r3
 801874e:	f001 fe9b 	bl	801a488 <pvPortMalloc>
 8018752:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018754:	697b      	ldr	r3, [r7, #20]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d00e      	beq.n	8018778 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801875a:	2060      	movs	r0, #96	; 0x60
 801875c:	f001 fe94 	bl	801a488 <pvPortMalloc>
 8018760:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018762:	69fb      	ldr	r3, [r7, #28]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d003      	beq.n	8018770 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018768:	69fb      	ldr	r3, [r7, #28]
 801876a:	697a      	ldr	r2, [r7, #20]
 801876c:	631a      	str	r2, [r3, #48]	; 0x30
 801876e:	e005      	b.n	801877c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018770:	6978      	ldr	r0, [r7, #20]
 8018772:	f001 ff4d 	bl	801a610 <vPortFree>
 8018776:	e001      	b.n	801877c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018778:	2300      	movs	r3, #0
 801877a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801877c:	69fb      	ldr	r3, [r7, #28]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d013      	beq.n	80187aa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018782:	88fa      	ldrh	r2, [r7, #6]
 8018784:	2300      	movs	r3, #0
 8018786:	9303      	str	r3, [sp, #12]
 8018788:	69fb      	ldr	r3, [r7, #28]
 801878a:	9302      	str	r3, [sp, #8]
 801878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801878e:	9301      	str	r3, [sp, #4]
 8018790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018792:	9300      	str	r3, [sp, #0]
 8018794:	683b      	ldr	r3, [r7, #0]
 8018796:	68b9      	ldr	r1, [r7, #8]
 8018798:	68f8      	ldr	r0, [r7, #12]
 801879a:	f000 f80e 	bl	80187ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801879e:	69f8      	ldr	r0, [r7, #28]
 80187a0:	f000 f89e 	bl	80188e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80187a4:	2301      	movs	r3, #1
 80187a6:	61bb      	str	r3, [r7, #24]
 80187a8:	e002      	b.n	80187b0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80187aa:	f04f 33ff 	mov.w	r3, #4294967295
 80187ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80187b0:	69bb      	ldr	r3, [r7, #24]
	}
 80187b2:	4618      	mov	r0, r3
 80187b4:	3720      	adds	r7, #32
 80187b6:	46bd      	mov	sp, r7
 80187b8:	bd80      	pop	{r7, pc}

080187ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80187ba:	b580      	push	{r7, lr}
 80187bc:	b088      	sub	sp, #32
 80187be:	af00      	add	r7, sp, #0
 80187c0:	60f8      	str	r0, [r7, #12]
 80187c2:	60b9      	str	r1, [r7, #8]
 80187c4:	607a      	str	r2, [r7, #4]
 80187c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80187c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	009b      	lsls	r3, r3, #2
 80187d0:	461a      	mov	r2, r3
 80187d2:	21a5      	movs	r1, #165	; 0xa5
 80187d4:	f005 fbde 	bl	801df94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80187d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80187e2:	3b01      	subs	r3, #1
 80187e4:	009b      	lsls	r3, r3, #2
 80187e6:	4413      	add	r3, r2
 80187e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80187ea:	69bb      	ldr	r3, [r7, #24]
 80187ec:	f023 0307 	bic.w	r3, r3, #7
 80187f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80187f2:	69bb      	ldr	r3, [r7, #24]
 80187f4:	f003 0307 	and.w	r3, r3, #7
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d00a      	beq.n	8018812 <prvInitialiseNewTask+0x58>
	__asm volatile
 80187fc:	f04f 0320 	mov.w	r3, #32
 8018800:	f383 8811 	msr	BASEPRI, r3
 8018804:	f3bf 8f6f 	isb	sy
 8018808:	f3bf 8f4f 	dsb	sy
 801880c:	617b      	str	r3, [r7, #20]
}
 801880e:	bf00      	nop
 8018810:	e7fe      	b.n	8018810 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018812:	68bb      	ldr	r3, [r7, #8]
 8018814:	2b00      	cmp	r3, #0
 8018816:	d01f      	beq.n	8018858 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018818:	2300      	movs	r3, #0
 801881a:	61fb      	str	r3, [r7, #28]
 801881c:	e012      	b.n	8018844 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801881e:	68ba      	ldr	r2, [r7, #8]
 8018820:	69fb      	ldr	r3, [r7, #28]
 8018822:	4413      	add	r3, r2
 8018824:	7819      	ldrb	r1, [r3, #0]
 8018826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018828:	69fb      	ldr	r3, [r7, #28]
 801882a:	4413      	add	r3, r2
 801882c:	3334      	adds	r3, #52	; 0x34
 801882e:	460a      	mov	r2, r1
 8018830:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018832:	68ba      	ldr	r2, [r7, #8]
 8018834:	69fb      	ldr	r3, [r7, #28]
 8018836:	4413      	add	r3, r2
 8018838:	781b      	ldrb	r3, [r3, #0]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d006      	beq.n	801884c <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801883e:	69fb      	ldr	r3, [r7, #28]
 8018840:	3301      	adds	r3, #1
 8018842:	61fb      	str	r3, [r7, #28]
 8018844:	69fb      	ldr	r3, [r7, #28]
 8018846:	2b0f      	cmp	r3, #15
 8018848:	d9e9      	bls.n	801881e <prvInitialiseNewTask+0x64>
 801884a:	e000      	b.n	801884e <prvInitialiseNewTask+0x94>
			{
				break;
 801884c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018850:	2200      	movs	r2, #0
 8018852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018856:	e003      	b.n	8018860 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801885a:	2200      	movs	r2, #0
 801885c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018862:	2b06      	cmp	r3, #6
 8018864:	d901      	bls.n	801886a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018866:	2306      	movs	r3, #6
 8018868:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801886c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801886e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018874:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018878:	2200      	movs	r2, #0
 801887a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801887e:	3304      	adds	r3, #4
 8018880:	4618      	mov	r0, r3
 8018882:	f7fe ffb5 	bl	80177f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018888:	3318      	adds	r3, #24
 801888a:	4618      	mov	r0, r3
 801888c:	f7fe ffb0 	bl	80177f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018894:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018898:	f1c3 0207 	rsb	r2, r3, #7
 801889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801889e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80188a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80188a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a8:	2200      	movs	r2, #0
 80188aa:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80188ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188ae:	2200      	movs	r2, #0
 80188b0:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80188b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b4:	2200      	movs	r2, #0
 80188b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80188ba:	683a      	ldr	r2, [r7, #0]
 80188bc:	68f9      	ldr	r1, [r7, #12]
 80188be:	69b8      	ldr	r0, [r7, #24]
 80188c0:	f001 fb92 	bl	8019fe8 <pxPortInitialiseStack>
 80188c4:	4602      	mov	r2, r0
 80188c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80188ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d002      	beq.n	80188d6 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80188d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80188d6:	bf00      	nop
 80188d8:	3720      	adds	r7, #32
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd80      	pop	{r7, pc}
	...

080188e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b082      	sub	sp, #8
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80188e8:	f001 fcac 	bl	801a244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80188ec:	4b2c      	ldr	r3, [pc, #176]	; (80189a0 <prvAddNewTaskToReadyList+0xc0>)
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	3301      	adds	r3, #1
 80188f2:	4a2b      	ldr	r2, [pc, #172]	; (80189a0 <prvAddNewTaskToReadyList+0xc0>)
 80188f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80188f6:	4b2b      	ldr	r3, [pc, #172]	; (80189a4 <prvAddNewTaskToReadyList+0xc4>)
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d109      	bne.n	8018912 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80188fe:	4a29      	ldr	r2, [pc, #164]	; (80189a4 <prvAddNewTaskToReadyList+0xc4>)
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018904:	4b26      	ldr	r3, [pc, #152]	; (80189a0 <prvAddNewTaskToReadyList+0xc0>)
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	2b01      	cmp	r3, #1
 801890a:	d110      	bne.n	801892e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801890c:	f000 fd84 	bl	8019418 <prvInitialiseTaskLists>
 8018910:	e00d      	b.n	801892e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018912:	4b25      	ldr	r3, [pc, #148]	; (80189a8 <prvAddNewTaskToReadyList+0xc8>)
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	2b00      	cmp	r3, #0
 8018918:	d109      	bne.n	801892e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801891a:	4b22      	ldr	r3, [pc, #136]	; (80189a4 <prvAddNewTaskToReadyList+0xc4>)
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018924:	429a      	cmp	r2, r3
 8018926:	d802      	bhi.n	801892e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018928:	4a1e      	ldr	r2, [pc, #120]	; (80189a4 <prvAddNewTaskToReadyList+0xc4>)
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801892e:	4b1f      	ldr	r3, [pc, #124]	; (80189ac <prvAddNewTaskToReadyList+0xcc>)
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	3301      	adds	r3, #1
 8018934:	4a1d      	ldr	r2, [pc, #116]	; (80189ac <prvAddNewTaskToReadyList+0xcc>)
 8018936:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018938:	4b1c      	ldr	r3, [pc, #112]	; (80189ac <prvAddNewTaskToReadyList+0xcc>)
 801893a:	681a      	ldr	r2, [r3, #0]
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018944:	2201      	movs	r2, #1
 8018946:	409a      	lsls	r2, r3
 8018948:	4b19      	ldr	r3, [pc, #100]	; (80189b0 <prvAddNewTaskToReadyList+0xd0>)
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	4313      	orrs	r3, r2
 801894e:	4a18      	ldr	r2, [pc, #96]	; (80189b0 <prvAddNewTaskToReadyList+0xd0>)
 8018950:	6013      	str	r3, [r2, #0]
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018956:	4613      	mov	r3, r2
 8018958:	009b      	lsls	r3, r3, #2
 801895a:	4413      	add	r3, r2
 801895c:	009b      	lsls	r3, r3, #2
 801895e:	4a15      	ldr	r2, [pc, #84]	; (80189b4 <prvAddNewTaskToReadyList+0xd4>)
 8018960:	441a      	add	r2, r3
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	3304      	adds	r3, #4
 8018966:	4619      	mov	r1, r3
 8018968:	4610      	mov	r0, r2
 801896a:	f7fe ff4e 	bl	801780a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801896e:	f001 fc99 	bl	801a2a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018972:	4b0d      	ldr	r3, [pc, #52]	; (80189a8 <prvAddNewTaskToReadyList+0xc8>)
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d00e      	beq.n	8018998 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801897a:	4b0a      	ldr	r3, [pc, #40]	; (80189a4 <prvAddNewTaskToReadyList+0xc4>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018984:	429a      	cmp	r2, r3
 8018986:	d207      	bcs.n	8018998 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018988:	4b0b      	ldr	r3, [pc, #44]	; (80189b8 <prvAddNewTaskToReadyList+0xd8>)
 801898a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801898e:	601a      	str	r2, [r3, #0]
 8018990:	f3bf 8f4f 	dsb	sy
 8018994:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018998:	bf00      	nop
 801899a:	3708      	adds	r7, #8
 801899c:	46bd      	mov	sp, r7
 801899e:	bd80      	pop	{r7, pc}
 80189a0:	20000de4 	.word	0x20000de4
 80189a4:	20000ce4 	.word	0x20000ce4
 80189a8:	20000df0 	.word	0x20000df0
 80189ac:	20000e00 	.word	0x20000e00
 80189b0:	20000dec 	.word	0x20000dec
 80189b4:	20000ce8 	.word	0x20000ce8
 80189b8:	e000ed04 	.word	0xe000ed04

080189bc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b084      	sub	sp, #16
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80189c4:	f001 fc3e 	bl	801a244 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d102      	bne.n	80189d4 <vTaskSuspend+0x18>
 80189ce:	4b3c      	ldr	r3, [pc, #240]	; (8018ac0 <vTaskSuspend+0x104>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	e000      	b.n	80189d6 <vTaskSuspend+0x1a>
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	3304      	adds	r3, #4
 80189dc:	4618      	mov	r0, r3
 80189de:	f7fe ff71 	bl	80178c4 <uxListRemove>
 80189e2:	4603      	mov	r3, r0
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d115      	bne.n	8018a14 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189ec:	4935      	ldr	r1, [pc, #212]	; (8018ac4 <vTaskSuspend+0x108>)
 80189ee:	4613      	mov	r3, r2
 80189f0:	009b      	lsls	r3, r3, #2
 80189f2:	4413      	add	r3, r2
 80189f4:	009b      	lsls	r3, r3, #2
 80189f6:	440b      	add	r3, r1
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d10a      	bne.n	8018a14 <vTaskSuspend+0x58>
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a02:	2201      	movs	r2, #1
 8018a04:	fa02 f303 	lsl.w	r3, r2, r3
 8018a08:	43da      	mvns	r2, r3
 8018a0a:	4b2f      	ldr	r3, [pc, #188]	; (8018ac8 <vTaskSuspend+0x10c>)
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	4013      	ands	r3, r2
 8018a10:	4a2d      	ldr	r2, [pc, #180]	; (8018ac8 <vTaskSuspend+0x10c>)
 8018a12:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d004      	beq.n	8018a26 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	3318      	adds	r3, #24
 8018a20:	4618      	mov	r0, r3
 8018a22:	f7fe ff4f 	bl	80178c4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	3304      	adds	r3, #4
 8018a2a:	4619      	mov	r1, r3
 8018a2c:	4827      	ldr	r0, [pc, #156]	; (8018acc <vTaskSuspend+0x110>)
 8018a2e:	f7fe feec 	bl	801780a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8018a38:	b2db      	uxtb	r3, r3
 8018a3a:	2b01      	cmp	r3, #1
 8018a3c:	d103      	bne.n	8018a46 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	2200      	movs	r2, #0
 8018a42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8018a46:	f001 fc2d 	bl	801a2a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8018a4a:	4b21      	ldr	r3, [pc, #132]	; (8018ad0 <vTaskSuspend+0x114>)
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d005      	beq.n	8018a5e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8018a52:	f001 fbf7 	bl	801a244 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8018a56:	f000 fd5d 	bl	8019514 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8018a5a:	f001 fc23 	bl	801a2a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8018a5e:	4b18      	ldr	r3, [pc, #96]	; (8018ac0 <vTaskSuspend+0x104>)
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	68fa      	ldr	r2, [r7, #12]
 8018a64:	429a      	cmp	r2, r3
 8018a66:	d127      	bne.n	8018ab8 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8018a68:	4b19      	ldr	r3, [pc, #100]	; (8018ad0 <vTaskSuspend+0x114>)
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d017      	beq.n	8018aa0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8018a70:	4b18      	ldr	r3, [pc, #96]	; (8018ad4 <vTaskSuspend+0x118>)
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d00a      	beq.n	8018a8e <vTaskSuspend+0xd2>
	__asm volatile
 8018a78:	f04f 0320 	mov.w	r3, #32
 8018a7c:	f383 8811 	msr	BASEPRI, r3
 8018a80:	f3bf 8f6f 	isb	sy
 8018a84:	f3bf 8f4f 	dsb	sy
 8018a88:	60bb      	str	r3, [r7, #8]
}
 8018a8a:	bf00      	nop
 8018a8c:	e7fe      	b.n	8018a8c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8018a8e:	4b12      	ldr	r3, [pc, #72]	; (8018ad8 <vTaskSuspend+0x11c>)
 8018a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a94:	601a      	str	r2, [r3, #0]
 8018a96:	f3bf 8f4f 	dsb	sy
 8018a9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018a9e:	e00b      	b.n	8018ab8 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8018aa0:	4b0a      	ldr	r3, [pc, #40]	; (8018acc <vTaskSuspend+0x110>)
 8018aa2:	681a      	ldr	r2, [r3, #0]
 8018aa4:	4b0d      	ldr	r3, [pc, #52]	; (8018adc <vTaskSuspend+0x120>)
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	429a      	cmp	r2, r3
 8018aaa:	d103      	bne.n	8018ab4 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8018aac:	4b04      	ldr	r3, [pc, #16]	; (8018ac0 <vTaskSuspend+0x104>)
 8018aae:	2200      	movs	r2, #0
 8018ab0:	601a      	str	r2, [r3, #0]
	}
 8018ab2:	e001      	b.n	8018ab8 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8018ab4:	f000 fafa 	bl	80190ac <vTaskSwitchContext>
	}
 8018ab8:	bf00      	nop
 8018aba:	3710      	adds	r7, #16
 8018abc:	46bd      	mov	sp, r7
 8018abe:	bd80      	pop	{r7, pc}
 8018ac0:	20000ce4 	.word	0x20000ce4
 8018ac4:	20000ce8 	.word	0x20000ce8
 8018ac8:	20000dec 	.word	0x20000dec
 8018acc:	20000dd0 	.word	0x20000dd0
 8018ad0:	20000df0 	.word	0x20000df0
 8018ad4:	20000e0c 	.word	0x20000e0c
 8018ad8:	e000ed04 	.word	0xe000ed04
 8018adc:	20000de4 	.word	0x20000de4

08018ae0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8018ae0:	b480      	push	{r7}
 8018ae2:	b087      	sub	sp, #28
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8018ae8:	2300      	movs	r3, #0
 8018aea:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d10a      	bne.n	8018b0c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8018af6:	f04f 0320 	mov.w	r3, #32
 8018afa:	f383 8811 	msr	BASEPRI, r3
 8018afe:	f3bf 8f6f 	isb	sy
 8018b02:	f3bf 8f4f 	dsb	sy
 8018b06:	60fb      	str	r3, [r7, #12]
}
 8018b08:	bf00      	nop
 8018b0a:	e7fe      	b.n	8018b0a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018b0c:	693b      	ldr	r3, [r7, #16]
 8018b0e:	695b      	ldr	r3, [r3, #20]
 8018b10:	4a0a      	ldr	r2, [pc, #40]	; (8018b3c <prvTaskIsTaskSuspended+0x5c>)
 8018b12:	4293      	cmp	r3, r2
 8018b14:	d10a      	bne.n	8018b2c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8018b16:	693b      	ldr	r3, [r7, #16]
 8018b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b1a:	4a09      	ldr	r2, [pc, #36]	; (8018b40 <prvTaskIsTaskSuspended+0x60>)
 8018b1c:	4293      	cmp	r3, r2
 8018b1e:	d005      	beq.n	8018b2c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8018b20:	693b      	ldr	r3, [r7, #16]
 8018b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d101      	bne.n	8018b2c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8018b28:	2301      	movs	r3, #1
 8018b2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018b2c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018b2e:	4618      	mov	r0, r3
 8018b30:	371c      	adds	r7, #28
 8018b32:	46bd      	mov	sp, r7
 8018b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b38:	4770      	bx	lr
 8018b3a:	bf00      	nop
 8018b3c:	20000dd0 	.word	0x20000dd0
 8018b40:	20000da4 	.word	0x20000da4

08018b44 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	b084      	sub	sp, #16
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d10a      	bne.n	8018b6c <vTaskResume+0x28>
	__asm volatile
 8018b56:	f04f 0320 	mov.w	r3, #32
 8018b5a:	f383 8811 	msr	BASEPRI, r3
 8018b5e:	f3bf 8f6f 	isb	sy
 8018b62:	f3bf 8f4f 	dsb	sy
 8018b66:	60bb      	str	r3, [r7, #8]
}
 8018b68:	bf00      	nop
 8018b6a:	e7fe      	b.n	8018b6a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8018b6c:	4b20      	ldr	r3, [pc, #128]	; (8018bf0 <vTaskResume+0xac>)
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	68fa      	ldr	r2, [r7, #12]
 8018b72:	429a      	cmp	r2, r3
 8018b74:	d037      	beq.n	8018be6 <vTaskResume+0xa2>
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d034      	beq.n	8018be6 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8018b7c:	f001 fb62 	bl	801a244 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018b80:	68f8      	ldr	r0, [r7, #12]
 8018b82:	f7ff ffad 	bl	8018ae0 <prvTaskIsTaskSuspended>
 8018b86:	4603      	mov	r3, r0
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d02a      	beq.n	8018be2 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	3304      	adds	r3, #4
 8018b90:	4618      	mov	r0, r3
 8018b92:	f7fe fe97 	bl	80178c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b9a:	2201      	movs	r2, #1
 8018b9c:	409a      	lsls	r2, r3
 8018b9e:	4b15      	ldr	r3, [pc, #84]	; (8018bf4 <vTaskResume+0xb0>)
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	4313      	orrs	r3, r2
 8018ba4:	4a13      	ldr	r2, [pc, #76]	; (8018bf4 <vTaskResume+0xb0>)
 8018ba6:	6013      	str	r3, [r2, #0]
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bac:	4613      	mov	r3, r2
 8018bae:	009b      	lsls	r3, r3, #2
 8018bb0:	4413      	add	r3, r2
 8018bb2:	009b      	lsls	r3, r3, #2
 8018bb4:	4a10      	ldr	r2, [pc, #64]	; (8018bf8 <vTaskResume+0xb4>)
 8018bb6:	441a      	add	r2, r3
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	3304      	adds	r3, #4
 8018bbc:	4619      	mov	r1, r3
 8018bbe:	4610      	mov	r0, r2
 8018bc0:	f7fe fe23 	bl	801780a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bc8:	4b09      	ldr	r3, [pc, #36]	; (8018bf0 <vTaskResume+0xac>)
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bce:	429a      	cmp	r2, r3
 8018bd0:	d307      	bcc.n	8018be2 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8018bd2:	4b0a      	ldr	r3, [pc, #40]	; (8018bfc <vTaskResume+0xb8>)
 8018bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018bd8:	601a      	str	r2, [r3, #0]
 8018bda:	f3bf 8f4f 	dsb	sy
 8018bde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8018be2:	f001 fb5f 	bl	801a2a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018be6:	bf00      	nop
 8018be8:	3710      	adds	r7, #16
 8018bea:	46bd      	mov	sp, r7
 8018bec:	bd80      	pop	{r7, pc}
 8018bee:	bf00      	nop
 8018bf0:	20000ce4 	.word	0x20000ce4
 8018bf4:	20000dec 	.word	0x20000dec
 8018bf8:	20000ce8 	.word	0x20000ce8
 8018bfc:	e000ed04 	.word	0xe000ed04

08018c00 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b08a      	sub	sp, #40	; 0x28
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8018c08:	2300      	movs	r3, #0
 8018c0a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d10a      	bne.n	8018c2c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8018c16:	f04f 0320 	mov.w	r3, #32
 8018c1a:	f383 8811 	msr	BASEPRI, r3
 8018c1e:	f3bf 8f6f 	isb	sy
 8018c22:	f3bf 8f4f 	dsb	sy
 8018c26:	61bb      	str	r3, [r7, #24]
}
 8018c28:	bf00      	nop
 8018c2a:	e7fe      	b.n	8018c2a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018c2c:	f001 fbec 	bl	801a408 <vPortValidateInterruptPriority>
	__asm volatile
 8018c30:	f3ef 8211 	mrs	r2, BASEPRI
 8018c34:	f04f 0320 	mov.w	r3, #32
 8018c38:	f383 8811 	msr	BASEPRI, r3
 8018c3c:	f3bf 8f6f 	isb	sy
 8018c40:	f3bf 8f4f 	dsb	sy
 8018c44:	617a      	str	r2, [r7, #20]
 8018c46:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018c48:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018c4a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018c4c:	6a38      	ldr	r0, [r7, #32]
 8018c4e:	f7ff ff47 	bl	8018ae0 <prvTaskIsTaskSuspended>
 8018c52:	4603      	mov	r3, r0
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d02f      	beq.n	8018cb8 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018c58:	4b1d      	ldr	r3, [pc, #116]	; (8018cd0 <xTaskResumeFromISR+0xd0>)
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d125      	bne.n	8018cac <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018c60:	6a3b      	ldr	r3, [r7, #32]
 8018c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c64:	4b1b      	ldr	r3, [pc, #108]	; (8018cd4 <xTaskResumeFromISR+0xd4>)
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c6a:	429a      	cmp	r2, r3
 8018c6c:	d301      	bcc.n	8018c72 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8018c6e:	2301      	movs	r3, #1
 8018c70:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018c72:	6a3b      	ldr	r3, [r7, #32]
 8018c74:	3304      	adds	r3, #4
 8018c76:	4618      	mov	r0, r3
 8018c78:	f7fe fe24 	bl	80178c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018c7c:	6a3b      	ldr	r3, [r7, #32]
 8018c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c80:	2201      	movs	r2, #1
 8018c82:	409a      	lsls	r2, r3
 8018c84:	4b14      	ldr	r3, [pc, #80]	; (8018cd8 <xTaskResumeFromISR+0xd8>)
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	4313      	orrs	r3, r2
 8018c8a:	4a13      	ldr	r2, [pc, #76]	; (8018cd8 <xTaskResumeFromISR+0xd8>)
 8018c8c:	6013      	str	r3, [r2, #0]
 8018c8e:	6a3b      	ldr	r3, [r7, #32]
 8018c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c92:	4613      	mov	r3, r2
 8018c94:	009b      	lsls	r3, r3, #2
 8018c96:	4413      	add	r3, r2
 8018c98:	009b      	lsls	r3, r3, #2
 8018c9a:	4a10      	ldr	r2, [pc, #64]	; (8018cdc <xTaskResumeFromISR+0xdc>)
 8018c9c:	441a      	add	r2, r3
 8018c9e:	6a3b      	ldr	r3, [r7, #32]
 8018ca0:	3304      	adds	r3, #4
 8018ca2:	4619      	mov	r1, r3
 8018ca4:	4610      	mov	r0, r2
 8018ca6:	f7fe fdb0 	bl	801780a <vListInsertEnd>
 8018caa:	e005      	b.n	8018cb8 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8018cac:	6a3b      	ldr	r3, [r7, #32]
 8018cae:	3318      	adds	r3, #24
 8018cb0:	4619      	mov	r1, r3
 8018cb2:	480b      	ldr	r0, [pc, #44]	; (8018ce0 <xTaskResumeFromISR+0xe0>)
 8018cb4:	f7fe fda9 	bl	801780a <vListInsertEnd>
 8018cb8:	69fb      	ldr	r3, [r7, #28]
 8018cba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	f383 8811 	msr	BASEPRI, r3
}
 8018cc2:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8018cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	3728      	adds	r7, #40	; 0x28
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	bd80      	pop	{r7, pc}
 8018cce:	bf00      	nop
 8018cd0:	20000e0c 	.word	0x20000e0c
 8018cd4:	20000ce4 	.word	0x20000ce4
 8018cd8:	20000dec 	.word	0x20000dec
 8018cdc:	20000ce8 	.word	0x20000ce8
 8018ce0:	20000da4 	.word	0x20000da4

08018ce4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b086      	sub	sp, #24
 8018ce8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8018cea:	4b22      	ldr	r3, [pc, #136]	; (8018d74 <vTaskStartScheduler+0x90>)
 8018cec:	9301      	str	r3, [sp, #4]
 8018cee:	2300      	movs	r3, #0
 8018cf0:	9300      	str	r3, [sp, #0]
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	2280      	movs	r2, #128	; 0x80
 8018cf6:	4920      	ldr	r1, [pc, #128]	; (8018d78 <vTaskStartScheduler+0x94>)
 8018cf8:	4820      	ldr	r0, [pc, #128]	; (8018d7c <vTaskStartScheduler+0x98>)
 8018cfa:	f7ff fd1d 	bl	8018738 <xTaskCreate>
 8018cfe:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	2b01      	cmp	r3, #1
 8018d04:	d102      	bne.n	8018d0c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8018d06:	f000 fe5d 	bl	80199c4 <xTimerCreateTimerTask>
 8018d0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	2b01      	cmp	r3, #1
 8018d10:	d11c      	bne.n	8018d4c <vTaskStartScheduler+0x68>
	__asm volatile
 8018d12:	f04f 0320 	mov.w	r3, #32
 8018d16:	f383 8811 	msr	BASEPRI, r3
 8018d1a:	f3bf 8f6f 	isb	sy
 8018d1e:	f3bf 8f4f 	dsb	sy
 8018d22:	60bb      	str	r3, [r7, #8]
}
 8018d24:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018d26:	4b16      	ldr	r3, [pc, #88]	; (8018d80 <vTaskStartScheduler+0x9c>)
 8018d28:	f04f 32ff 	mov.w	r2, #4294967295
 8018d2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018d2e:	4b15      	ldr	r3, [pc, #84]	; (8018d84 <vTaskStartScheduler+0xa0>)
 8018d30:	2201      	movs	r2, #1
 8018d32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018d34:	4b14      	ldr	r3, [pc, #80]	; (8018d88 <vTaskStartScheduler+0xa4>)
 8018d36:	2200      	movs	r2, #0
 8018d38:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8018d3a:	4b14      	ldr	r3, [pc, #80]	; (8018d8c <vTaskStartScheduler+0xa8>)
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d40:	4618      	mov	r0, r3
 8018d42:	f7ed ff1b 	bl	8006b7c <BSP_DEBUG_PIN_On>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018d46:	f001 f9db 	bl	801a100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018d4a:	e00e      	b.n	8018d6a <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d52:	d10a      	bne.n	8018d6a <vTaskStartScheduler+0x86>
	__asm volatile
 8018d54:	f04f 0320 	mov.w	r3, #32
 8018d58:	f383 8811 	msr	BASEPRI, r3
 8018d5c:	f3bf 8f6f 	isb	sy
 8018d60:	f3bf 8f4f 	dsb	sy
 8018d64:	607b      	str	r3, [r7, #4]
}
 8018d66:	bf00      	nop
 8018d68:	e7fe      	b.n	8018d68 <vTaskStartScheduler+0x84>
}
 8018d6a:	bf00      	nop
 8018d6c:	3710      	adds	r7, #16
 8018d6e:	46bd      	mov	sp, r7
 8018d70:	bd80      	pop	{r7, pc}
 8018d72:	bf00      	nop
 8018d74:	20000e08 	.word	0x20000e08
 8018d78:	0802260c 	.word	0x0802260c
 8018d7c:	080193e5 	.word	0x080193e5
 8018d80:	20000e04 	.word	0x20000e04
 8018d84:	20000df0 	.word	0x20000df0
 8018d88:	20000de8 	.word	0x20000de8
 8018d8c:	20000ce4 	.word	0x20000ce4

08018d90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018d90:	b480      	push	{r7}
 8018d92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8018d94:	4b04      	ldr	r3, [pc, #16]	; (8018da8 <vTaskSuspendAll+0x18>)
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	3301      	adds	r3, #1
 8018d9a:	4a03      	ldr	r2, [pc, #12]	; (8018da8 <vTaskSuspendAll+0x18>)
 8018d9c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8018d9e:	bf00      	nop
 8018da0:	46bd      	mov	sp, r7
 8018da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da6:	4770      	bx	lr
 8018da8:	20000e0c 	.word	0x20000e0c

08018dac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b084      	sub	sp, #16
 8018db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018db2:	2300      	movs	r3, #0
 8018db4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018db6:	2300      	movs	r3, #0
 8018db8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018dba:	4b41      	ldr	r3, [pc, #260]	; (8018ec0 <xTaskResumeAll+0x114>)
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d10a      	bne.n	8018dd8 <xTaskResumeAll+0x2c>
	__asm volatile
 8018dc2:	f04f 0320 	mov.w	r3, #32
 8018dc6:	f383 8811 	msr	BASEPRI, r3
 8018dca:	f3bf 8f6f 	isb	sy
 8018dce:	f3bf 8f4f 	dsb	sy
 8018dd2:	603b      	str	r3, [r7, #0]
}
 8018dd4:	bf00      	nop
 8018dd6:	e7fe      	b.n	8018dd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018dd8:	f001 fa34 	bl	801a244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018ddc:	4b38      	ldr	r3, [pc, #224]	; (8018ec0 <xTaskResumeAll+0x114>)
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	3b01      	subs	r3, #1
 8018de2:	4a37      	ldr	r2, [pc, #220]	; (8018ec0 <xTaskResumeAll+0x114>)
 8018de4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018de6:	4b36      	ldr	r3, [pc, #216]	; (8018ec0 <xTaskResumeAll+0x114>)
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d161      	bne.n	8018eb2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018dee:	4b35      	ldr	r3, [pc, #212]	; (8018ec4 <xTaskResumeAll+0x118>)
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d05d      	beq.n	8018eb2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018df6:	e02e      	b.n	8018e56 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018df8:	4b33      	ldr	r3, [pc, #204]	; (8018ec8 <xTaskResumeAll+0x11c>)
 8018dfa:	68db      	ldr	r3, [r3, #12]
 8018dfc:	68db      	ldr	r3, [r3, #12]
 8018dfe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	3318      	adds	r3, #24
 8018e04:	4618      	mov	r0, r3
 8018e06:	f7fe fd5d 	bl	80178c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018e0a:	68fb      	ldr	r3, [r7, #12]
 8018e0c:	3304      	adds	r3, #4
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f7fe fd58 	bl	80178c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e18:	2201      	movs	r2, #1
 8018e1a:	409a      	lsls	r2, r3
 8018e1c:	4b2b      	ldr	r3, [pc, #172]	; (8018ecc <xTaskResumeAll+0x120>)
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	4313      	orrs	r3, r2
 8018e22:	4a2a      	ldr	r2, [pc, #168]	; (8018ecc <xTaskResumeAll+0x120>)
 8018e24:	6013      	str	r3, [r2, #0]
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e2a:	4613      	mov	r3, r2
 8018e2c:	009b      	lsls	r3, r3, #2
 8018e2e:	4413      	add	r3, r2
 8018e30:	009b      	lsls	r3, r3, #2
 8018e32:	4a27      	ldr	r2, [pc, #156]	; (8018ed0 <xTaskResumeAll+0x124>)
 8018e34:	441a      	add	r2, r3
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	3304      	adds	r3, #4
 8018e3a:	4619      	mov	r1, r3
 8018e3c:	4610      	mov	r0, r2
 8018e3e:	f7fe fce4 	bl	801780a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e46:	4b23      	ldr	r3, [pc, #140]	; (8018ed4 <xTaskResumeAll+0x128>)
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e4c:	429a      	cmp	r2, r3
 8018e4e:	d302      	bcc.n	8018e56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8018e50:	4b21      	ldr	r3, [pc, #132]	; (8018ed8 <xTaskResumeAll+0x12c>)
 8018e52:	2201      	movs	r2, #1
 8018e54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018e56:	4b1c      	ldr	r3, [pc, #112]	; (8018ec8 <xTaskResumeAll+0x11c>)
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d1cc      	bne.n	8018df8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d001      	beq.n	8018e68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018e64:	f000 fb56 	bl	8019514 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8018e68:	4b1c      	ldr	r3, [pc, #112]	; (8018edc <xTaskResumeAll+0x130>)
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d010      	beq.n	8018e96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018e74:	f000 f846 	bl	8018f04 <xTaskIncrementTick>
 8018e78:	4603      	mov	r3, r0
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d002      	beq.n	8018e84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8018e7e:	4b16      	ldr	r3, [pc, #88]	; (8018ed8 <xTaskResumeAll+0x12c>)
 8018e80:	2201      	movs	r2, #1
 8018e82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	3b01      	subs	r3, #1
 8018e88:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d1f1      	bne.n	8018e74 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8018e90:	4b12      	ldr	r3, [pc, #72]	; (8018edc <xTaskResumeAll+0x130>)
 8018e92:	2200      	movs	r2, #0
 8018e94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018e96:	4b10      	ldr	r3, [pc, #64]	; (8018ed8 <xTaskResumeAll+0x12c>)
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d009      	beq.n	8018eb2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018e9e:	2301      	movs	r3, #1
 8018ea0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018ea2:	4b0f      	ldr	r3, [pc, #60]	; (8018ee0 <xTaskResumeAll+0x134>)
 8018ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ea8:	601a      	str	r2, [r3, #0]
 8018eaa:	f3bf 8f4f 	dsb	sy
 8018eae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018eb2:	f001 f9f7 	bl	801a2a4 <vPortExitCritical>

	return xAlreadyYielded;
 8018eb6:	68bb      	ldr	r3, [r7, #8]
}
 8018eb8:	4618      	mov	r0, r3
 8018eba:	3710      	adds	r7, #16
 8018ebc:	46bd      	mov	sp, r7
 8018ebe:	bd80      	pop	{r7, pc}
 8018ec0:	20000e0c 	.word	0x20000e0c
 8018ec4:	20000de4 	.word	0x20000de4
 8018ec8:	20000da4 	.word	0x20000da4
 8018ecc:	20000dec 	.word	0x20000dec
 8018ed0:	20000ce8 	.word	0x20000ce8
 8018ed4:	20000ce4 	.word	0x20000ce4
 8018ed8:	20000df8 	.word	0x20000df8
 8018edc:	20000df4 	.word	0x20000df4
 8018ee0:	e000ed04 	.word	0xe000ed04

08018ee4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018ee4:	b480      	push	{r7}
 8018ee6:	b083      	sub	sp, #12
 8018ee8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018eea:	4b05      	ldr	r3, [pc, #20]	; (8018f00 <xTaskGetTickCount+0x1c>)
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018ef0:	687b      	ldr	r3, [r7, #4]
}
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	370c      	adds	r7, #12
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018efc:	4770      	bx	lr
 8018efe:	bf00      	nop
 8018f00:	20000de8 	.word	0x20000de8

08018f04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018f04:	b580      	push	{r7, lr}
 8018f06:	b086      	sub	sp, #24
 8018f08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018f0e:	4b4e      	ldr	r3, [pc, #312]	; (8019048 <xTaskIncrementTick+0x144>)
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	f040 8088 	bne.w	8019028 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018f18:	4b4c      	ldr	r3, [pc, #304]	; (801904c <xTaskIncrementTick+0x148>)
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	3301      	adds	r3, #1
 8018f1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018f20:	4a4a      	ldr	r2, [pc, #296]	; (801904c <xTaskIncrementTick+0x148>)
 8018f22:	693b      	ldr	r3, [r7, #16]
 8018f24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018f26:	693b      	ldr	r3, [r7, #16]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d120      	bne.n	8018f6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018f2c:	4b48      	ldr	r3, [pc, #288]	; (8019050 <xTaskIncrementTick+0x14c>)
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d00a      	beq.n	8018f4c <xTaskIncrementTick+0x48>
	__asm volatile
 8018f36:	f04f 0320 	mov.w	r3, #32
 8018f3a:	f383 8811 	msr	BASEPRI, r3
 8018f3e:	f3bf 8f6f 	isb	sy
 8018f42:	f3bf 8f4f 	dsb	sy
 8018f46:	603b      	str	r3, [r7, #0]
}
 8018f48:	bf00      	nop
 8018f4a:	e7fe      	b.n	8018f4a <xTaskIncrementTick+0x46>
 8018f4c:	4b40      	ldr	r3, [pc, #256]	; (8019050 <xTaskIncrementTick+0x14c>)
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	60fb      	str	r3, [r7, #12]
 8018f52:	4b40      	ldr	r3, [pc, #256]	; (8019054 <xTaskIncrementTick+0x150>)
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	4a3e      	ldr	r2, [pc, #248]	; (8019050 <xTaskIncrementTick+0x14c>)
 8018f58:	6013      	str	r3, [r2, #0]
 8018f5a:	4a3e      	ldr	r2, [pc, #248]	; (8019054 <xTaskIncrementTick+0x150>)
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	6013      	str	r3, [r2, #0]
 8018f60:	4b3d      	ldr	r3, [pc, #244]	; (8019058 <xTaskIncrementTick+0x154>)
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	3301      	adds	r3, #1
 8018f66:	4a3c      	ldr	r2, [pc, #240]	; (8019058 <xTaskIncrementTick+0x154>)
 8018f68:	6013      	str	r3, [r2, #0]
 8018f6a:	f000 fad3 	bl	8019514 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018f6e:	4b3b      	ldr	r3, [pc, #236]	; (801905c <xTaskIncrementTick+0x158>)
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	693a      	ldr	r2, [r7, #16]
 8018f74:	429a      	cmp	r2, r3
 8018f76:	d348      	bcc.n	801900a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018f78:	4b35      	ldr	r3, [pc, #212]	; (8019050 <xTaskIncrementTick+0x14c>)
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d104      	bne.n	8018f8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018f82:	4b36      	ldr	r3, [pc, #216]	; (801905c <xTaskIncrementTick+0x158>)
 8018f84:	f04f 32ff 	mov.w	r2, #4294967295
 8018f88:	601a      	str	r2, [r3, #0]
					break;
 8018f8a:	e03e      	b.n	801900a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f8c:	4b30      	ldr	r3, [pc, #192]	; (8019050 <xTaskIncrementTick+0x14c>)
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	68db      	ldr	r3, [r3, #12]
 8018f92:	68db      	ldr	r3, [r3, #12]
 8018f94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018f96:	68bb      	ldr	r3, [r7, #8]
 8018f98:	685b      	ldr	r3, [r3, #4]
 8018f9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018f9c:	693a      	ldr	r2, [r7, #16]
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	429a      	cmp	r2, r3
 8018fa2:	d203      	bcs.n	8018fac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018fa4:	4a2d      	ldr	r2, [pc, #180]	; (801905c <xTaskIncrementTick+0x158>)
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018faa:	e02e      	b.n	801900a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018fac:	68bb      	ldr	r3, [r7, #8]
 8018fae:	3304      	adds	r3, #4
 8018fb0:	4618      	mov	r0, r3
 8018fb2:	f7fe fc87 	bl	80178c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018fb6:	68bb      	ldr	r3, [r7, #8]
 8018fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d004      	beq.n	8018fc8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018fbe:	68bb      	ldr	r3, [r7, #8]
 8018fc0:	3318      	adds	r3, #24
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f7fe fc7e 	bl	80178c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018fc8:	68bb      	ldr	r3, [r7, #8]
 8018fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fcc:	2201      	movs	r2, #1
 8018fce:	409a      	lsls	r2, r3
 8018fd0:	4b23      	ldr	r3, [pc, #140]	; (8019060 <xTaskIncrementTick+0x15c>)
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	4313      	orrs	r3, r2
 8018fd6:	4a22      	ldr	r2, [pc, #136]	; (8019060 <xTaskIncrementTick+0x15c>)
 8018fd8:	6013      	str	r3, [r2, #0]
 8018fda:	68bb      	ldr	r3, [r7, #8]
 8018fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fde:	4613      	mov	r3, r2
 8018fe0:	009b      	lsls	r3, r3, #2
 8018fe2:	4413      	add	r3, r2
 8018fe4:	009b      	lsls	r3, r3, #2
 8018fe6:	4a1f      	ldr	r2, [pc, #124]	; (8019064 <xTaskIncrementTick+0x160>)
 8018fe8:	441a      	add	r2, r3
 8018fea:	68bb      	ldr	r3, [r7, #8]
 8018fec:	3304      	adds	r3, #4
 8018fee:	4619      	mov	r1, r3
 8018ff0:	4610      	mov	r0, r2
 8018ff2:	f7fe fc0a 	bl	801780a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018ff6:	68bb      	ldr	r3, [r7, #8]
 8018ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ffa:	4b1b      	ldr	r3, [pc, #108]	; (8019068 <xTaskIncrementTick+0x164>)
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019000:	429a      	cmp	r2, r3
 8019002:	d3b9      	bcc.n	8018f78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8019004:	2301      	movs	r3, #1
 8019006:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019008:	e7b6      	b.n	8018f78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801900a:	4b17      	ldr	r3, [pc, #92]	; (8019068 <xTaskIncrementTick+0x164>)
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019010:	4914      	ldr	r1, [pc, #80]	; (8019064 <xTaskIncrementTick+0x160>)
 8019012:	4613      	mov	r3, r2
 8019014:	009b      	lsls	r3, r3, #2
 8019016:	4413      	add	r3, r2
 8019018:	009b      	lsls	r3, r3, #2
 801901a:	440b      	add	r3, r1
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	2b01      	cmp	r3, #1
 8019020:	d907      	bls.n	8019032 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8019022:	2301      	movs	r3, #1
 8019024:	617b      	str	r3, [r7, #20]
 8019026:	e004      	b.n	8019032 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8019028:	4b10      	ldr	r3, [pc, #64]	; (801906c <xTaskIncrementTick+0x168>)
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	3301      	adds	r3, #1
 801902e:	4a0f      	ldr	r2, [pc, #60]	; (801906c <xTaskIncrementTick+0x168>)
 8019030:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8019032:	4b0f      	ldr	r3, [pc, #60]	; (8019070 <xTaskIncrementTick+0x16c>)
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	2b00      	cmp	r3, #0
 8019038:	d001      	beq.n	801903e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801903a:	2301      	movs	r3, #1
 801903c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801903e:	697b      	ldr	r3, [r7, #20]
}
 8019040:	4618      	mov	r0, r3
 8019042:	3718      	adds	r7, #24
 8019044:	46bd      	mov	sp, r7
 8019046:	bd80      	pop	{r7, pc}
 8019048:	20000e0c 	.word	0x20000e0c
 801904c:	20000de8 	.word	0x20000de8
 8019050:	20000d9c 	.word	0x20000d9c
 8019054:	20000da0 	.word	0x20000da0
 8019058:	20000dfc 	.word	0x20000dfc
 801905c:	20000e04 	.word	0x20000e04
 8019060:	20000dec 	.word	0x20000dec
 8019064:	20000ce8 	.word	0x20000ce8
 8019068:	20000ce4 	.word	0x20000ce4
 801906c:	20000df4 	.word	0x20000df4
 8019070:	20000df8 	.word	0x20000df8

08019074 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8019074:	b580      	push	{r7, lr}
 8019076:	b084      	sub	sp, #16
 8019078:	af00      	add	r7, sp, #0
 801907a:	6078      	str	r0, [r7, #4]
 801907c:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d103      	bne.n	801908c <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8019084:	4b08      	ldr	r3, [pc, #32]	; (80190a8 <vTaskSetApplicationTaskTag+0x34>)
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	60fb      	str	r3, [r7, #12]
 801908a:	e001      	b.n	8019090 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8019090:	f001 f8d8 	bl	801a244 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	683a      	ldr	r2, [r7, #0]
 8019098:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 801909a:	f001 f903 	bl	801a2a4 <vPortExitCritical>
	}
 801909e:	bf00      	nop
 80190a0:	3710      	adds	r7, #16
 80190a2:	46bd      	mov	sp, r7
 80190a4:	bd80      	pop	{r7, pc}
 80190a6:	bf00      	nop
 80190a8:	20000ce4 	.word	0x20000ce4

080190ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80190ac:	b580      	push	{r7, lr}
 80190ae:	b086      	sub	sp, #24
 80190b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80190b2:	4b2c      	ldr	r3, [pc, #176]	; (8019164 <vTaskSwitchContext+0xb8>)
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d003      	beq.n	80190c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80190ba:	4b2b      	ldr	r3, [pc, #172]	; (8019168 <vTaskSwitchContext+0xbc>)
 80190bc:	2201      	movs	r2, #1
 80190be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80190c0:	e04b      	b.n	801915a <vTaskSwitchContext+0xae>
		xYieldPending = pdFALSE;
 80190c2:	4b29      	ldr	r3, [pc, #164]	; (8019168 <vTaskSwitchContext+0xbc>)
 80190c4:	2200      	movs	r2, #0
 80190c6:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80190c8:	4b28      	ldr	r3, [pc, #160]	; (801916c <vTaskSwitchContext+0xc0>)
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80190ce:	4618      	mov	r0, r3
 80190d0:	f7ed fd6e 	bl	8006bb0 <BSP_DEBUG_PIN_Off>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80190d4:	4b26      	ldr	r3, [pc, #152]	; (8019170 <vTaskSwitchContext+0xc4>)
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	fab3 f383 	clz	r3, r3
 80190e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80190e2:	7afb      	ldrb	r3, [r7, #11]
 80190e4:	f1c3 031f 	rsb	r3, r3, #31
 80190e8:	617b      	str	r3, [r7, #20]
 80190ea:	4922      	ldr	r1, [pc, #136]	; (8019174 <vTaskSwitchContext+0xc8>)
 80190ec:	697a      	ldr	r2, [r7, #20]
 80190ee:	4613      	mov	r3, r2
 80190f0:	009b      	lsls	r3, r3, #2
 80190f2:	4413      	add	r3, r2
 80190f4:	009b      	lsls	r3, r3, #2
 80190f6:	440b      	add	r3, r1
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d10a      	bne.n	8019114 <vTaskSwitchContext+0x68>
	__asm volatile
 80190fe:	f04f 0320 	mov.w	r3, #32
 8019102:	f383 8811 	msr	BASEPRI, r3
 8019106:	f3bf 8f6f 	isb	sy
 801910a:	f3bf 8f4f 	dsb	sy
 801910e:	607b      	str	r3, [r7, #4]
}
 8019110:	bf00      	nop
 8019112:	e7fe      	b.n	8019112 <vTaskSwitchContext+0x66>
 8019114:	697a      	ldr	r2, [r7, #20]
 8019116:	4613      	mov	r3, r2
 8019118:	009b      	lsls	r3, r3, #2
 801911a:	4413      	add	r3, r2
 801911c:	009b      	lsls	r3, r3, #2
 801911e:	4a15      	ldr	r2, [pc, #84]	; (8019174 <vTaskSwitchContext+0xc8>)
 8019120:	4413      	add	r3, r2
 8019122:	613b      	str	r3, [r7, #16]
 8019124:	693b      	ldr	r3, [r7, #16]
 8019126:	685b      	ldr	r3, [r3, #4]
 8019128:	685a      	ldr	r2, [r3, #4]
 801912a:	693b      	ldr	r3, [r7, #16]
 801912c:	605a      	str	r2, [r3, #4]
 801912e:	693b      	ldr	r3, [r7, #16]
 8019130:	685a      	ldr	r2, [r3, #4]
 8019132:	693b      	ldr	r3, [r7, #16]
 8019134:	3308      	adds	r3, #8
 8019136:	429a      	cmp	r2, r3
 8019138:	d104      	bne.n	8019144 <vTaskSwitchContext+0x98>
 801913a:	693b      	ldr	r3, [r7, #16]
 801913c:	685b      	ldr	r3, [r3, #4]
 801913e:	685a      	ldr	r2, [r3, #4]
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	605a      	str	r2, [r3, #4]
 8019144:	693b      	ldr	r3, [r7, #16]
 8019146:	685b      	ldr	r3, [r3, #4]
 8019148:	68db      	ldr	r3, [r3, #12]
 801914a:	4a08      	ldr	r2, [pc, #32]	; (801916c <vTaskSwitchContext+0xc0>)
 801914c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801914e:	4b07      	ldr	r3, [pc, #28]	; (801916c <vTaskSwitchContext+0xc0>)
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019154:	4618      	mov	r0, r3
 8019156:	f7ed fd11 	bl	8006b7c <BSP_DEBUG_PIN_On>
}
 801915a:	bf00      	nop
 801915c:	3718      	adds	r7, #24
 801915e:	46bd      	mov	sp, r7
 8019160:	bd80      	pop	{r7, pc}
 8019162:	bf00      	nop
 8019164:	20000e0c 	.word	0x20000e0c
 8019168:	20000df8 	.word	0x20000df8
 801916c:	20000ce4 	.word	0x20000ce4
 8019170:	20000dec 	.word	0x20000dec
 8019174:	20000ce8 	.word	0x20000ce8

08019178 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b084      	sub	sp, #16
 801917c:	af00      	add	r7, sp, #0
 801917e:	6078      	str	r0, [r7, #4]
 8019180:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d10a      	bne.n	801919e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8019188:	f04f 0320 	mov.w	r3, #32
 801918c:	f383 8811 	msr	BASEPRI, r3
 8019190:	f3bf 8f6f 	isb	sy
 8019194:	f3bf 8f4f 	dsb	sy
 8019198:	60fb      	str	r3, [r7, #12]
}
 801919a:	bf00      	nop
 801919c:	e7fe      	b.n	801919c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801919e:	4b07      	ldr	r3, [pc, #28]	; (80191bc <vTaskPlaceOnEventList+0x44>)
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	3318      	adds	r3, #24
 80191a4:	4619      	mov	r1, r3
 80191a6:	6878      	ldr	r0, [r7, #4]
 80191a8:	f7fe fb53 	bl	8017852 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80191ac:	2101      	movs	r1, #1
 80191ae:	6838      	ldr	r0, [r7, #0]
 80191b0:	f000 fba2 	bl	80198f8 <prvAddCurrentTaskToDelayedList>
}
 80191b4:	bf00      	nop
 80191b6:	3710      	adds	r7, #16
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bd80      	pop	{r7, pc}
 80191bc:	20000ce4 	.word	0x20000ce4

080191c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80191c0:	b580      	push	{r7, lr}
 80191c2:	b086      	sub	sp, #24
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	60f8      	str	r0, [r7, #12]
 80191c8:	60b9      	str	r1, [r7, #8]
 80191ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d10a      	bne.n	80191e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80191d2:	f04f 0320 	mov.w	r3, #32
 80191d6:	f383 8811 	msr	BASEPRI, r3
 80191da:	f3bf 8f6f 	isb	sy
 80191de:	f3bf 8f4f 	dsb	sy
 80191e2:	617b      	str	r3, [r7, #20]
}
 80191e4:	bf00      	nop
 80191e6:	e7fe      	b.n	80191e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80191e8:	4b0a      	ldr	r3, [pc, #40]	; (8019214 <vTaskPlaceOnEventListRestricted+0x54>)
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	3318      	adds	r3, #24
 80191ee:	4619      	mov	r1, r3
 80191f0:	68f8      	ldr	r0, [r7, #12]
 80191f2:	f7fe fb0a 	bl	801780a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d002      	beq.n	8019202 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80191fc:	f04f 33ff 	mov.w	r3, #4294967295
 8019200:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019202:	6879      	ldr	r1, [r7, #4]
 8019204:	68b8      	ldr	r0, [r7, #8]
 8019206:	f000 fb77 	bl	80198f8 <prvAddCurrentTaskToDelayedList>
	}
 801920a:	bf00      	nop
 801920c:	3718      	adds	r7, #24
 801920e:	46bd      	mov	sp, r7
 8019210:	bd80      	pop	{r7, pc}
 8019212:	bf00      	nop
 8019214:	20000ce4 	.word	0x20000ce4

08019218 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b086      	sub	sp, #24
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	68db      	ldr	r3, [r3, #12]
 8019224:	68db      	ldr	r3, [r3, #12]
 8019226:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019228:	693b      	ldr	r3, [r7, #16]
 801922a:	2b00      	cmp	r3, #0
 801922c:	d10a      	bne.n	8019244 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801922e:	f04f 0320 	mov.w	r3, #32
 8019232:	f383 8811 	msr	BASEPRI, r3
 8019236:	f3bf 8f6f 	isb	sy
 801923a:	f3bf 8f4f 	dsb	sy
 801923e:	60fb      	str	r3, [r7, #12]
}
 8019240:	bf00      	nop
 8019242:	e7fe      	b.n	8019242 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019244:	693b      	ldr	r3, [r7, #16]
 8019246:	3318      	adds	r3, #24
 8019248:	4618      	mov	r0, r3
 801924a:	f7fe fb3b 	bl	80178c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801924e:	4b1d      	ldr	r3, [pc, #116]	; (80192c4 <xTaskRemoveFromEventList+0xac>)
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d11c      	bne.n	8019290 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019256:	693b      	ldr	r3, [r7, #16]
 8019258:	3304      	adds	r3, #4
 801925a:	4618      	mov	r0, r3
 801925c:	f7fe fb32 	bl	80178c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019260:	693b      	ldr	r3, [r7, #16]
 8019262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019264:	2201      	movs	r2, #1
 8019266:	409a      	lsls	r2, r3
 8019268:	4b17      	ldr	r3, [pc, #92]	; (80192c8 <xTaskRemoveFromEventList+0xb0>)
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	4313      	orrs	r3, r2
 801926e:	4a16      	ldr	r2, [pc, #88]	; (80192c8 <xTaskRemoveFromEventList+0xb0>)
 8019270:	6013      	str	r3, [r2, #0]
 8019272:	693b      	ldr	r3, [r7, #16]
 8019274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019276:	4613      	mov	r3, r2
 8019278:	009b      	lsls	r3, r3, #2
 801927a:	4413      	add	r3, r2
 801927c:	009b      	lsls	r3, r3, #2
 801927e:	4a13      	ldr	r2, [pc, #76]	; (80192cc <xTaskRemoveFromEventList+0xb4>)
 8019280:	441a      	add	r2, r3
 8019282:	693b      	ldr	r3, [r7, #16]
 8019284:	3304      	adds	r3, #4
 8019286:	4619      	mov	r1, r3
 8019288:	4610      	mov	r0, r2
 801928a:	f7fe fabe 	bl	801780a <vListInsertEnd>
 801928e:	e005      	b.n	801929c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019290:	693b      	ldr	r3, [r7, #16]
 8019292:	3318      	adds	r3, #24
 8019294:	4619      	mov	r1, r3
 8019296:	480e      	ldr	r0, [pc, #56]	; (80192d0 <xTaskRemoveFromEventList+0xb8>)
 8019298:	f7fe fab7 	bl	801780a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801929c:	693b      	ldr	r3, [r7, #16]
 801929e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192a0:	4b0c      	ldr	r3, [pc, #48]	; (80192d4 <xTaskRemoveFromEventList+0xbc>)
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192a6:	429a      	cmp	r2, r3
 80192a8:	d905      	bls.n	80192b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80192aa:	2301      	movs	r3, #1
 80192ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80192ae:	4b0a      	ldr	r3, [pc, #40]	; (80192d8 <xTaskRemoveFromEventList+0xc0>)
 80192b0:	2201      	movs	r2, #1
 80192b2:	601a      	str	r2, [r3, #0]
 80192b4:	e001      	b.n	80192ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80192b6:	2300      	movs	r3, #0
 80192b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80192ba:	697b      	ldr	r3, [r7, #20]
}
 80192bc:	4618      	mov	r0, r3
 80192be:	3718      	adds	r7, #24
 80192c0:	46bd      	mov	sp, r7
 80192c2:	bd80      	pop	{r7, pc}
 80192c4:	20000e0c 	.word	0x20000e0c
 80192c8:	20000dec 	.word	0x20000dec
 80192cc:	20000ce8 	.word	0x20000ce8
 80192d0:	20000da4 	.word	0x20000da4
 80192d4:	20000ce4 	.word	0x20000ce4
 80192d8:	20000df8 	.word	0x20000df8

080192dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80192dc:	b480      	push	{r7}
 80192de:	b083      	sub	sp, #12
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80192e4:	4b06      	ldr	r3, [pc, #24]	; (8019300 <vTaskInternalSetTimeOutState+0x24>)
 80192e6:	681a      	ldr	r2, [r3, #0]
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80192ec:	4b05      	ldr	r3, [pc, #20]	; (8019304 <vTaskInternalSetTimeOutState+0x28>)
 80192ee:	681a      	ldr	r2, [r3, #0]
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	605a      	str	r2, [r3, #4]
}
 80192f4:	bf00      	nop
 80192f6:	370c      	adds	r7, #12
 80192f8:	46bd      	mov	sp, r7
 80192fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192fe:	4770      	bx	lr
 8019300:	20000dfc 	.word	0x20000dfc
 8019304:	20000de8 	.word	0x20000de8

08019308 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019308:	b580      	push	{r7, lr}
 801930a:	b088      	sub	sp, #32
 801930c:	af00      	add	r7, sp, #0
 801930e:	6078      	str	r0, [r7, #4]
 8019310:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d10a      	bne.n	801932e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8019318:	f04f 0320 	mov.w	r3, #32
 801931c:	f383 8811 	msr	BASEPRI, r3
 8019320:	f3bf 8f6f 	isb	sy
 8019324:	f3bf 8f4f 	dsb	sy
 8019328:	613b      	str	r3, [r7, #16]
}
 801932a:	bf00      	nop
 801932c:	e7fe      	b.n	801932c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801932e:	683b      	ldr	r3, [r7, #0]
 8019330:	2b00      	cmp	r3, #0
 8019332:	d10a      	bne.n	801934a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019334:	f04f 0320 	mov.w	r3, #32
 8019338:	f383 8811 	msr	BASEPRI, r3
 801933c:	f3bf 8f6f 	isb	sy
 8019340:	f3bf 8f4f 	dsb	sy
 8019344:	60fb      	str	r3, [r7, #12]
}
 8019346:	bf00      	nop
 8019348:	e7fe      	b.n	8019348 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801934a:	f000 ff7b 	bl	801a244 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801934e:	4b1d      	ldr	r3, [pc, #116]	; (80193c4 <xTaskCheckForTimeOut+0xbc>)
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	685b      	ldr	r3, [r3, #4]
 8019358:	69ba      	ldr	r2, [r7, #24]
 801935a:	1ad3      	subs	r3, r2, r3
 801935c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801935e:	683b      	ldr	r3, [r7, #0]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019366:	d102      	bne.n	801936e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019368:	2300      	movs	r3, #0
 801936a:	61fb      	str	r3, [r7, #28]
 801936c:	e023      	b.n	80193b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	681a      	ldr	r2, [r3, #0]
 8019372:	4b15      	ldr	r3, [pc, #84]	; (80193c8 <xTaskCheckForTimeOut+0xc0>)
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	429a      	cmp	r2, r3
 8019378:	d007      	beq.n	801938a <xTaskCheckForTimeOut+0x82>
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	685b      	ldr	r3, [r3, #4]
 801937e:	69ba      	ldr	r2, [r7, #24]
 8019380:	429a      	cmp	r2, r3
 8019382:	d302      	bcc.n	801938a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019384:	2301      	movs	r3, #1
 8019386:	61fb      	str	r3, [r7, #28]
 8019388:	e015      	b.n	80193b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801938a:	683b      	ldr	r3, [r7, #0]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	697a      	ldr	r2, [r7, #20]
 8019390:	429a      	cmp	r2, r3
 8019392:	d20b      	bcs.n	80193ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019394:	683b      	ldr	r3, [r7, #0]
 8019396:	681a      	ldr	r2, [r3, #0]
 8019398:	697b      	ldr	r3, [r7, #20]
 801939a:	1ad2      	subs	r2, r2, r3
 801939c:	683b      	ldr	r3, [r7, #0]
 801939e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80193a0:	6878      	ldr	r0, [r7, #4]
 80193a2:	f7ff ff9b 	bl	80192dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80193a6:	2300      	movs	r3, #0
 80193a8:	61fb      	str	r3, [r7, #28]
 80193aa:	e004      	b.n	80193b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80193ac:	683b      	ldr	r3, [r7, #0]
 80193ae:	2200      	movs	r2, #0
 80193b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80193b2:	2301      	movs	r3, #1
 80193b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80193b6:	f000 ff75 	bl	801a2a4 <vPortExitCritical>

	return xReturn;
 80193ba:	69fb      	ldr	r3, [r7, #28]
}
 80193bc:	4618      	mov	r0, r3
 80193be:	3720      	adds	r7, #32
 80193c0:	46bd      	mov	sp, r7
 80193c2:	bd80      	pop	{r7, pc}
 80193c4:	20000de8 	.word	0x20000de8
 80193c8:	20000dfc 	.word	0x20000dfc

080193cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80193cc:	b480      	push	{r7}
 80193ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80193d0:	4b03      	ldr	r3, [pc, #12]	; (80193e0 <vTaskMissedYield+0x14>)
 80193d2:	2201      	movs	r2, #1
 80193d4:	601a      	str	r2, [r3, #0]
}
 80193d6:	bf00      	nop
 80193d8:	46bd      	mov	sp, r7
 80193da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193de:	4770      	bx	lr
 80193e0:	20000df8 	.word	0x20000df8

080193e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80193e4:	b580      	push	{r7, lr}
 80193e6:	b082      	sub	sp, #8
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80193ec:	f000 f854 	bl	8019498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80193f0:	4b07      	ldr	r3, [pc, #28]	; (8019410 <prvIdleTask+0x2c>)
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	2b01      	cmp	r3, #1
 80193f6:	d907      	bls.n	8019408 <prvIdleTask+0x24>
			{
				taskYIELD();
 80193f8:	4b06      	ldr	r3, [pc, #24]	; (8019414 <prvIdleTask+0x30>)
 80193fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193fe:	601a      	str	r2, [r3, #0]
 8019400:	f3bf 8f4f 	dsb	sy
 8019404:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8019408:	f7ea fc90 	bl	8003d2c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801940c:	e7ee      	b.n	80193ec <prvIdleTask+0x8>
 801940e:	bf00      	nop
 8019410:	20000ce8 	.word	0x20000ce8
 8019414:	e000ed04 	.word	0xe000ed04

08019418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b082      	sub	sp, #8
 801941c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801941e:	2300      	movs	r3, #0
 8019420:	607b      	str	r3, [r7, #4]
 8019422:	e00c      	b.n	801943e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019424:	687a      	ldr	r2, [r7, #4]
 8019426:	4613      	mov	r3, r2
 8019428:	009b      	lsls	r3, r3, #2
 801942a:	4413      	add	r3, r2
 801942c:	009b      	lsls	r3, r3, #2
 801942e:	4a12      	ldr	r2, [pc, #72]	; (8019478 <prvInitialiseTaskLists+0x60>)
 8019430:	4413      	add	r3, r2
 8019432:	4618      	mov	r0, r3
 8019434:	f7fe f9bc 	bl	80177b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	3301      	adds	r3, #1
 801943c:	607b      	str	r3, [r7, #4]
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	2b06      	cmp	r3, #6
 8019442:	d9ef      	bls.n	8019424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019444:	480d      	ldr	r0, [pc, #52]	; (801947c <prvInitialiseTaskLists+0x64>)
 8019446:	f7fe f9b3 	bl	80177b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801944a:	480d      	ldr	r0, [pc, #52]	; (8019480 <prvInitialiseTaskLists+0x68>)
 801944c:	f7fe f9b0 	bl	80177b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019450:	480c      	ldr	r0, [pc, #48]	; (8019484 <prvInitialiseTaskLists+0x6c>)
 8019452:	f7fe f9ad 	bl	80177b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019456:	480c      	ldr	r0, [pc, #48]	; (8019488 <prvInitialiseTaskLists+0x70>)
 8019458:	f7fe f9aa 	bl	80177b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801945c:	480b      	ldr	r0, [pc, #44]	; (801948c <prvInitialiseTaskLists+0x74>)
 801945e:	f7fe f9a7 	bl	80177b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019462:	4b0b      	ldr	r3, [pc, #44]	; (8019490 <prvInitialiseTaskLists+0x78>)
 8019464:	4a05      	ldr	r2, [pc, #20]	; (801947c <prvInitialiseTaskLists+0x64>)
 8019466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019468:	4b0a      	ldr	r3, [pc, #40]	; (8019494 <prvInitialiseTaskLists+0x7c>)
 801946a:	4a05      	ldr	r2, [pc, #20]	; (8019480 <prvInitialiseTaskLists+0x68>)
 801946c:	601a      	str	r2, [r3, #0]
}
 801946e:	bf00      	nop
 8019470:	3708      	adds	r7, #8
 8019472:	46bd      	mov	sp, r7
 8019474:	bd80      	pop	{r7, pc}
 8019476:	bf00      	nop
 8019478:	20000ce8 	.word	0x20000ce8
 801947c:	20000d74 	.word	0x20000d74
 8019480:	20000d88 	.word	0x20000d88
 8019484:	20000da4 	.word	0x20000da4
 8019488:	20000db8 	.word	0x20000db8
 801948c:	20000dd0 	.word	0x20000dd0
 8019490:	20000d9c 	.word	0x20000d9c
 8019494:	20000da0 	.word	0x20000da0

08019498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019498:	b580      	push	{r7, lr}
 801949a:	b082      	sub	sp, #8
 801949c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801949e:	e019      	b.n	80194d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80194a0:	f000 fed0 	bl	801a244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194a4:	4b10      	ldr	r3, [pc, #64]	; (80194e8 <prvCheckTasksWaitingTermination+0x50>)
 80194a6:	68db      	ldr	r3, [r3, #12]
 80194a8:	68db      	ldr	r3, [r3, #12]
 80194aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	3304      	adds	r3, #4
 80194b0:	4618      	mov	r0, r3
 80194b2:	f7fe fa07 	bl	80178c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80194b6:	4b0d      	ldr	r3, [pc, #52]	; (80194ec <prvCheckTasksWaitingTermination+0x54>)
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	3b01      	subs	r3, #1
 80194bc:	4a0b      	ldr	r2, [pc, #44]	; (80194ec <prvCheckTasksWaitingTermination+0x54>)
 80194be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80194c0:	4b0b      	ldr	r3, [pc, #44]	; (80194f0 <prvCheckTasksWaitingTermination+0x58>)
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	3b01      	subs	r3, #1
 80194c6:	4a0a      	ldr	r2, [pc, #40]	; (80194f0 <prvCheckTasksWaitingTermination+0x58>)
 80194c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80194ca:	f000 feeb 	bl	801a2a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80194ce:	6878      	ldr	r0, [r7, #4]
 80194d0:	f000 f810 	bl	80194f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80194d4:	4b06      	ldr	r3, [pc, #24]	; (80194f0 <prvCheckTasksWaitingTermination+0x58>)
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d1e1      	bne.n	80194a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80194dc:	bf00      	nop
 80194de:	bf00      	nop
 80194e0:	3708      	adds	r7, #8
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}
 80194e6:	bf00      	nop
 80194e8:	20000db8 	.word	0x20000db8
 80194ec:	20000de4 	.word	0x20000de4
 80194f0:	20000dcc 	.word	0x20000dcc

080194f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b082      	sub	sp, #8
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019500:	4618      	mov	r0, r3
 8019502:	f001 f885 	bl	801a610 <vPortFree>
			vPortFree( pxTCB );
 8019506:	6878      	ldr	r0, [r7, #4]
 8019508:	f001 f882 	bl	801a610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801950c:	bf00      	nop
 801950e:	3708      	adds	r7, #8
 8019510:	46bd      	mov	sp, r7
 8019512:	bd80      	pop	{r7, pc}

08019514 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019514:	b480      	push	{r7}
 8019516:	b083      	sub	sp, #12
 8019518:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801951a:	4b0c      	ldr	r3, [pc, #48]	; (801954c <prvResetNextTaskUnblockTime+0x38>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d104      	bne.n	801952e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019524:	4b0a      	ldr	r3, [pc, #40]	; (8019550 <prvResetNextTaskUnblockTime+0x3c>)
 8019526:	f04f 32ff 	mov.w	r2, #4294967295
 801952a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801952c:	e008      	b.n	8019540 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801952e:	4b07      	ldr	r3, [pc, #28]	; (801954c <prvResetNextTaskUnblockTime+0x38>)
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	68db      	ldr	r3, [r3, #12]
 8019534:	68db      	ldr	r3, [r3, #12]
 8019536:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	685b      	ldr	r3, [r3, #4]
 801953c:	4a04      	ldr	r2, [pc, #16]	; (8019550 <prvResetNextTaskUnblockTime+0x3c>)
 801953e:	6013      	str	r3, [r2, #0]
}
 8019540:	bf00      	nop
 8019542:	370c      	adds	r7, #12
 8019544:	46bd      	mov	sp, r7
 8019546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801954a:	4770      	bx	lr
 801954c:	20000d9c 	.word	0x20000d9c
 8019550:	20000e04 	.word	0x20000e04

08019554 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019554:	b480      	push	{r7}
 8019556:	b083      	sub	sp, #12
 8019558:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801955a:	4b0b      	ldr	r3, [pc, #44]	; (8019588 <xTaskGetSchedulerState+0x34>)
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	2b00      	cmp	r3, #0
 8019560:	d102      	bne.n	8019568 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019562:	2301      	movs	r3, #1
 8019564:	607b      	str	r3, [r7, #4]
 8019566:	e008      	b.n	801957a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019568:	4b08      	ldr	r3, [pc, #32]	; (801958c <xTaskGetSchedulerState+0x38>)
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d102      	bne.n	8019576 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019570:	2302      	movs	r3, #2
 8019572:	607b      	str	r3, [r7, #4]
 8019574:	e001      	b.n	801957a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8019576:	2300      	movs	r3, #0
 8019578:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801957a:	687b      	ldr	r3, [r7, #4]
	}
 801957c:	4618      	mov	r0, r3
 801957e:	370c      	adds	r7, #12
 8019580:	46bd      	mov	sp, r7
 8019582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019586:	4770      	bx	lr
 8019588:	20000df0 	.word	0x20000df0
 801958c:	20000e0c 	.word	0x20000e0c

08019590 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8019590:	b580      	push	{r7, lr}
 8019592:	b084      	sub	sp, #16
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801959c:	2300      	movs	r3, #0
 801959e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d069      	beq.n	801967a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80195a6:	68bb      	ldr	r3, [r7, #8]
 80195a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80195aa:	4b36      	ldr	r3, [pc, #216]	; (8019684 <xTaskPriorityInherit+0xf4>)
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195b0:	429a      	cmp	r2, r3
 80195b2:	d259      	bcs.n	8019668 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80195b4:	68bb      	ldr	r3, [r7, #8]
 80195b6:	699b      	ldr	r3, [r3, #24]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	db06      	blt.n	80195ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80195bc:	4b31      	ldr	r3, [pc, #196]	; (8019684 <xTaskPriorityInherit+0xf4>)
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195c2:	f1c3 0207 	rsb	r2, r3, #7
 80195c6:	68bb      	ldr	r3, [r7, #8]
 80195c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80195ca:	68bb      	ldr	r3, [r7, #8]
 80195cc:	6959      	ldr	r1, [r3, #20]
 80195ce:	68bb      	ldr	r3, [r7, #8]
 80195d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80195d2:	4613      	mov	r3, r2
 80195d4:	009b      	lsls	r3, r3, #2
 80195d6:	4413      	add	r3, r2
 80195d8:	009b      	lsls	r3, r3, #2
 80195da:	4a2b      	ldr	r2, [pc, #172]	; (8019688 <xTaskPriorityInherit+0xf8>)
 80195dc:	4413      	add	r3, r2
 80195de:	4299      	cmp	r1, r3
 80195e0:	d13a      	bne.n	8019658 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80195e2:	68bb      	ldr	r3, [r7, #8]
 80195e4:	3304      	adds	r3, #4
 80195e6:	4618      	mov	r0, r3
 80195e8:	f7fe f96c 	bl	80178c4 <uxListRemove>
 80195ec:	4603      	mov	r3, r0
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d115      	bne.n	801961e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80195f2:	68bb      	ldr	r3, [r7, #8]
 80195f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80195f6:	4924      	ldr	r1, [pc, #144]	; (8019688 <xTaskPriorityInherit+0xf8>)
 80195f8:	4613      	mov	r3, r2
 80195fa:	009b      	lsls	r3, r3, #2
 80195fc:	4413      	add	r3, r2
 80195fe:	009b      	lsls	r3, r3, #2
 8019600:	440b      	add	r3, r1
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d10a      	bne.n	801961e <xTaskPriorityInherit+0x8e>
 8019608:	68bb      	ldr	r3, [r7, #8]
 801960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801960c:	2201      	movs	r2, #1
 801960e:	fa02 f303 	lsl.w	r3, r2, r3
 8019612:	43da      	mvns	r2, r3
 8019614:	4b1d      	ldr	r3, [pc, #116]	; (801968c <xTaskPriorityInherit+0xfc>)
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	4013      	ands	r3, r2
 801961a:	4a1c      	ldr	r2, [pc, #112]	; (801968c <xTaskPriorityInherit+0xfc>)
 801961c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801961e:	4b19      	ldr	r3, [pc, #100]	; (8019684 <xTaskPriorityInherit+0xf4>)
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019624:	68bb      	ldr	r3, [r7, #8]
 8019626:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019628:	68bb      	ldr	r3, [r7, #8]
 801962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801962c:	2201      	movs	r2, #1
 801962e:	409a      	lsls	r2, r3
 8019630:	4b16      	ldr	r3, [pc, #88]	; (801968c <xTaskPriorityInherit+0xfc>)
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	4313      	orrs	r3, r2
 8019636:	4a15      	ldr	r2, [pc, #84]	; (801968c <xTaskPriorityInherit+0xfc>)
 8019638:	6013      	str	r3, [r2, #0]
 801963a:	68bb      	ldr	r3, [r7, #8]
 801963c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801963e:	4613      	mov	r3, r2
 8019640:	009b      	lsls	r3, r3, #2
 8019642:	4413      	add	r3, r2
 8019644:	009b      	lsls	r3, r3, #2
 8019646:	4a10      	ldr	r2, [pc, #64]	; (8019688 <xTaskPriorityInherit+0xf8>)
 8019648:	441a      	add	r2, r3
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	3304      	adds	r3, #4
 801964e:	4619      	mov	r1, r3
 8019650:	4610      	mov	r0, r2
 8019652:	f7fe f8da 	bl	801780a <vListInsertEnd>
 8019656:	e004      	b.n	8019662 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019658:	4b0a      	ldr	r3, [pc, #40]	; (8019684 <xTaskPriorityInherit+0xf4>)
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801965e:	68bb      	ldr	r3, [r7, #8]
 8019660:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8019662:	2301      	movs	r3, #1
 8019664:	60fb      	str	r3, [r7, #12]
 8019666:	e008      	b.n	801967a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8019668:	68bb      	ldr	r3, [r7, #8]
 801966a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801966c:	4b05      	ldr	r3, [pc, #20]	; (8019684 <xTaskPriorityInherit+0xf4>)
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019672:	429a      	cmp	r2, r3
 8019674:	d201      	bcs.n	801967a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8019676:	2301      	movs	r3, #1
 8019678:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801967a:	68fb      	ldr	r3, [r7, #12]
	}
 801967c:	4618      	mov	r0, r3
 801967e:	3710      	adds	r7, #16
 8019680:	46bd      	mov	sp, r7
 8019682:	bd80      	pop	{r7, pc}
 8019684:	20000ce4 	.word	0x20000ce4
 8019688:	20000ce8 	.word	0x20000ce8
 801968c:	20000dec 	.word	0x20000dec

08019690 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019690:	b580      	push	{r7, lr}
 8019692:	b086      	sub	sp, #24
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801969c:	2300      	movs	r3, #0
 801969e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d06e      	beq.n	8019784 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80196a6:	4b3a      	ldr	r3, [pc, #232]	; (8019790 <xTaskPriorityDisinherit+0x100>)
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	693a      	ldr	r2, [r7, #16]
 80196ac:	429a      	cmp	r2, r3
 80196ae:	d00a      	beq.n	80196c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80196b0:	f04f 0320 	mov.w	r3, #32
 80196b4:	f383 8811 	msr	BASEPRI, r3
 80196b8:	f3bf 8f6f 	isb	sy
 80196bc:	f3bf 8f4f 	dsb	sy
 80196c0:	60fb      	str	r3, [r7, #12]
}
 80196c2:	bf00      	nop
 80196c4:	e7fe      	b.n	80196c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80196c6:	693b      	ldr	r3, [r7, #16]
 80196c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d10a      	bne.n	80196e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80196ce:	f04f 0320 	mov.w	r3, #32
 80196d2:	f383 8811 	msr	BASEPRI, r3
 80196d6:	f3bf 8f6f 	isb	sy
 80196da:	f3bf 8f4f 	dsb	sy
 80196de:	60bb      	str	r3, [r7, #8]
}
 80196e0:	bf00      	nop
 80196e2:	e7fe      	b.n	80196e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80196e4:	693b      	ldr	r3, [r7, #16]
 80196e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80196e8:	1e5a      	subs	r2, r3, #1
 80196ea:	693b      	ldr	r3, [r7, #16]
 80196ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80196ee:	693b      	ldr	r3, [r7, #16]
 80196f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196f2:	693b      	ldr	r3, [r7, #16]
 80196f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196f6:	429a      	cmp	r2, r3
 80196f8:	d044      	beq.n	8019784 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80196fa:	693b      	ldr	r3, [r7, #16]
 80196fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d140      	bne.n	8019784 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019702:	693b      	ldr	r3, [r7, #16]
 8019704:	3304      	adds	r3, #4
 8019706:	4618      	mov	r0, r3
 8019708:	f7fe f8dc 	bl	80178c4 <uxListRemove>
 801970c:	4603      	mov	r3, r0
 801970e:	2b00      	cmp	r3, #0
 8019710:	d115      	bne.n	801973e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8019712:	693b      	ldr	r3, [r7, #16]
 8019714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019716:	491f      	ldr	r1, [pc, #124]	; (8019794 <xTaskPriorityDisinherit+0x104>)
 8019718:	4613      	mov	r3, r2
 801971a:	009b      	lsls	r3, r3, #2
 801971c:	4413      	add	r3, r2
 801971e:	009b      	lsls	r3, r3, #2
 8019720:	440b      	add	r3, r1
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	2b00      	cmp	r3, #0
 8019726:	d10a      	bne.n	801973e <xTaskPriorityDisinherit+0xae>
 8019728:	693b      	ldr	r3, [r7, #16]
 801972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801972c:	2201      	movs	r2, #1
 801972e:	fa02 f303 	lsl.w	r3, r2, r3
 8019732:	43da      	mvns	r2, r3
 8019734:	4b18      	ldr	r3, [pc, #96]	; (8019798 <xTaskPriorityDisinherit+0x108>)
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	4013      	ands	r3, r2
 801973a:	4a17      	ldr	r2, [pc, #92]	; (8019798 <xTaskPriorityDisinherit+0x108>)
 801973c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801973e:	693b      	ldr	r3, [r7, #16]
 8019740:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019742:	693b      	ldr	r3, [r7, #16]
 8019744:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019746:	693b      	ldr	r3, [r7, #16]
 8019748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801974a:	f1c3 0207 	rsb	r2, r3, #7
 801974e:	693b      	ldr	r3, [r7, #16]
 8019750:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019752:	693b      	ldr	r3, [r7, #16]
 8019754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019756:	2201      	movs	r2, #1
 8019758:	409a      	lsls	r2, r3
 801975a:	4b0f      	ldr	r3, [pc, #60]	; (8019798 <xTaskPriorityDisinherit+0x108>)
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	4313      	orrs	r3, r2
 8019760:	4a0d      	ldr	r2, [pc, #52]	; (8019798 <xTaskPriorityDisinherit+0x108>)
 8019762:	6013      	str	r3, [r2, #0]
 8019764:	693b      	ldr	r3, [r7, #16]
 8019766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019768:	4613      	mov	r3, r2
 801976a:	009b      	lsls	r3, r3, #2
 801976c:	4413      	add	r3, r2
 801976e:	009b      	lsls	r3, r3, #2
 8019770:	4a08      	ldr	r2, [pc, #32]	; (8019794 <xTaskPriorityDisinherit+0x104>)
 8019772:	441a      	add	r2, r3
 8019774:	693b      	ldr	r3, [r7, #16]
 8019776:	3304      	adds	r3, #4
 8019778:	4619      	mov	r1, r3
 801977a:	4610      	mov	r0, r2
 801977c:	f7fe f845 	bl	801780a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019780:	2301      	movs	r3, #1
 8019782:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019784:	697b      	ldr	r3, [r7, #20]
	}
 8019786:	4618      	mov	r0, r3
 8019788:	3718      	adds	r7, #24
 801978a:	46bd      	mov	sp, r7
 801978c:	bd80      	pop	{r7, pc}
 801978e:	bf00      	nop
 8019790:	20000ce4 	.word	0x20000ce4
 8019794:	20000ce8 	.word	0x20000ce8
 8019798:	20000dec 	.word	0x20000dec

0801979c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801979c:	b580      	push	{r7, lr}
 801979e:	b088      	sub	sp, #32
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
 80197a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80197aa:	2301      	movs	r3, #1
 80197ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	f000 8083 	beq.w	80198bc <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80197b6:	69bb      	ldr	r3, [r7, #24]
 80197b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d10a      	bne.n	80197d4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80197be:	f04f 0320 	mov.w	r3, #32
 80197c2:	f383 8811 	msr	BASEPRI, r3
 80197c6:	f3bf 8f6f 	isb	sy
 80197ca:	f3bf 8f4f 	dsb	sy
 80197ce:	60fb      	str	r3, [r7, #12]
}
 80197d0:	bf00      	nop
 80197d2:	e7fe      	b.n	80197d2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80197d4:	69bb      	ldr	r3, [r7, #24]
 80197d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80197d8:	683a      	ldr	r2, [r7, #0]
 80197da:	429a      	cmp	r2, r3
 80197dc:	d902      	bls.n	80197e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80197de:	683b      	ldr	r3, [r7, #0]
 80197e0:	61fb      	str	r3, [r7, #28]
 80197e2:	e002      	b.n	80197ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80197e4:	69bb      	ldr	r3, [r7, #24]
 80197e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80197e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80197ea:	69bb      	ldr	r3, [r7, #24]
 80197ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197ee:	69fa      	ldr	r2, [r7, #28]
 80197f0:	429a      	cmp	r2, r3
 80197f2:	d063      	beq.n	80198bc <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80197f4:	69bb      	ldr	r3, [r7, #24]
 80197f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80197f8:	697a      	ldr	r2, [r7, #20]
 80197fa:	429a      	cmp	r2, r3
 80197fc:	d15e      	bne.n	80198bc <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80197fe:	4b31      	ldr	r3, [pc, #196]	; (80198c4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	69ba      	ldr	r2, [r7, #24]
 8019804:	429a      	cmp	r2, r3
 8019806:	d10a      	bne.n	801981e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8019808:	f04f 0320 	mov.w	r3, #32
 801980c:	f383 8811 	msr	BASEPRI, r3
 8019810:	f3bf 8f6f 	isb	sy
 8019814:	f3bf 8f4f 	dsb	sy
 8019818:	60bb      	str	r3, [r7, #8]
}
 801981a:	bf00      	nop
 801981c:	e7fe      	b.n	801981c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801981e:	69bb      	ldr	r3, [r7, #24]
 8019820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019822:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8019824:	69bb      	ldr	r3, [r7, #24]
 8019826:	69fa      	ldr	r2, [r7, #28]
 8019828:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801982a:	69bb      	ldr	r3, [r7, #24]
 801982c:	699b      	ldr	r3, [r3, #24]
 801982e:	2b00      	cmp	r3, #0
 8019830:	db04      	blt.n	801983c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019832:	69fb      	ldr	r3, [r7, #28]
 8019834:	f1c3 0207 	rsb	r2, r3, #7
 8019838:	69bb      	ldr	r3, [r7, #24]
 801983a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801983c:	69bb      	ldr	r3, [r7, #24]
 801983e:	6959      	ldr	r1, [r3, #20]
 8019840:	693a      	ldr	r2, [r7, #16]
 8019842:	4613      	mov	r3, r2
 8019844:	009b      	lsls	r3, r3, #2
 8019846:	4413      	add	r3, r2
 8019848:	009b      	lsls	r3, r3, #2
 801984a:	4a1f      	ldr	r2, [pc, #124]	; (80198c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801984c:	4413      	add	r3, r2
 801984e:	4299      	cmp	r1, r3
 8019850:	d134      	bne.n	80198bc <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019852:	69bb      	ldr	r3, [r7, #24]
 8019854:	3304      	adds	r3, #4
 8019856:	4618      	mov	r0, r3
 8019858:	f7fe f834 	bl	80178c4 <uxListRemove>
 801985c:	4603      	mov	r3, r0
 801985e:	2b00      	cmp	r3, #0
 8019860:	d115      	bne.n	801988e <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8019862:	69bb      	ldr	r3, [r7, #24]
 8019864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019866:	4918      	ldr	r1, [pc, #96]	; (80198c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8019868:	4613      	mov	r3, r2
 801986a:	009b      	lsls	r3, r3, #2
 801986c:	4413      	add	r3, r2
 801986e:	009b      	lsls	r3, r3, #2
 8019870:	440b      	add	r3, r1
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d10a      	bne.n	801988e <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8019878:	69bb      	ldr	r3, [r7, #24]
 801987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801987c:	2201      	movs	r2, #1
 801987e:	fa02 f303 	lsl.w	r3, r2, r3
 8019882:	43da      	mvns	r2, r3
 8019884:	4b11      	ldr	r3, [pc, #68]	; (80198cc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	4013      	ands	r3, r2
 801988a:	4a10      	ldr	r2, [pc, #64]	; (80198cc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801988c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801988e:	69bb      	ldr	r3, [r7, #24]
 8019890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019892:	2201      	movs	r2, #1
 8019894:	409a      	lsls	r2, r3
 8019896:	4b0d      	ldr	r3, [pc, #52]	; (80198cc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	4313      	orrs	r3, r2
 801989c:	4a0b      	ldr	r2, [pc, #44]	; (80198cc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801989e:	6013      	str	r3, [r2, #0]
 80198a0:	69bb      	ldr	r3, [r7, #24]
 80198a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198a4:	4613      	mov	r3, r2
 80198a6:	009b      	lsls	r3, r3, #2
 80198a8:	4413      	add	r3, r2
 80198aa:	009b      	lsls	r3, r3, #2
 80198ac:	4a06      	ldr	r2, [pc, #24]	; (80198c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80198ae:	441a      	add	r2, r3
 80198b0:	69bb      	ldr	r3, [r7, #24]
 80198b2:	3304      	adds	r3, #4
 80198b4:	4619      	mov	r1, r3
 80198b6:	4610      	mov	r0, r2
 80198b8:	f7fd ffa7 	bl	801780a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80198bc:	bf00      	nop
 80198be:	3720      	adds	r7, #32
 80198c0:	46bd      	mov	sp, r7
 80198c2:	bd80      	pop	{r7, pc}
 80198c4:	20000ce4 	.word	0x20000ce4
 80198c8:	20000ce8 	.word	0x20000ce8
 80198cc:	20000dec 	.word	0x20000dec

080198d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80198d0:	b480      	push	{r7}
 80198d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80198d4:	4b07      	ldr	r3, [pc, #28]	; (80198f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d004      	beq.n	80198e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80198dc:	4b05      	ldr	r3, [pc, #20]	; (80198f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80198e2:	3201      	adds	r2, #1
 80198e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80198e6:	4b03      	ldr	r3, [pc, #12]	; (80198f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80198e8:	681b      	ldr	r3, [r3, #0]
	}
 80198ea:	4618      	mov	r0, r3
 80198ec:	46bd      	mov	sp, r7
 80198ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f2:	4770      	bx	lr
 80198f4:	20000ce4 	.word	0x20000ce4

080198f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b084      	sub	sp, #16
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]
 8019900:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019902:	4b29      	ldr	r3, [pc, #164]	; (80199a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019908:	4b28      	ldr	r3, [pc, #160]	; (80199ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	3304      	adds	r3, #4
 801990e:	4618      	mov	r0, r3
 8019910:	f7fd ffd8 	bl	80178c4 <uxListRemove>
 8019914:	4603      	mov	r3, r0
 8019916:	2b00      	cmp	r3, #0
 8019918:	d10b      	bne.n	8019932 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801991a:	4b24      	ldr	r3, [pc, #144]	; (80199ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019920:	2201      	movs	r2, #1
 8019922:	fa02 f303 	lsl.w	r3, r2, r3
 8019926:	43da      	mvns	r2, r3
 8019928:	4b21      	ldr	r3, [pc, #132]	; (80199b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	4013      	ands	r3, r2
 801992e:	4a20      	ldr	r2, [pc, #128]	; (80199b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8019930:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019938:	d10a      	bne.n	8019950 <prvAddCurrentTaskToDelayedList+0x58>
 801993a:	683b      	ldr	r3, [r7, #0]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d007      	beq.n	8019950 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019940:	4b1a      	ldr	r3, [pc, #104]	; (80199ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	3304      	adds	r3, #4
 8019946:	4619      	mov	r1, r3
 8019948:	481a      	ldr	r0, [pc, #104]	; (80199b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801994a:	f7fd ff5e 	bl	801780a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801994e:	e026      	b.n	801999e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019950:	68fa      	ldr	r2, [r7, #12]
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	4413      	add	r3, r2
 8019956:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019958:	4b14      	ldr	r3, [pc, #80]	; (80199ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	68ba      	ldr	r2, [r7, #8]
 801995e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019960:	68ba      	ldr	r2, [r7, #8]
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	429a      	cmp	r2, r3
 8019966:	d209      	bcs.n	801997c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019968:	4b13      	ldr	r3, [pc, #76]	; (80199b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801996a:	681a      	ldr	r2, [r3, #0]
 801996c:	4b0f      	ldr	r3, [pc, #60]	; (80199ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	3304      	adds	r3, #4
 8019972:	4619      	mov	r1, r3
 8019974:	4610      	mov	r0, r2
 8019976:	f7fd ff6c 	bl	8017852 <vListInsert>
}
 801997a:	e010      	b.n	801999e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801997c:	4b0f      	ldr	r3, [pc, #60]	; (80199bc <prvAddCurrentTaskToDelayedList+0xc4>)
 801997e:	681a      	ldr	r2, [r3, #0]
 8019980:	4b0a      	ldr	r3, [pc, #40]	; (80199ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	3304      	adds	r3, #4
 8019986:	4619      	mov	r1, r3
 8019988:	4610      	mov	r0, r2
 801998a:	f7fd ff62 	bl	8017852 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801998e:	4b0c      	ldr	r3, [pc, #48]	; (80199c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	68ba      	ldr	r2, [r7, #8]
 8019994:	429a      	cmp	r2, r3
 8019996:	d202      	bcs.n	801999e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8019998:	4a09      	ldr	r2, [pc, #36]	; (80199c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801999a:	68bb      	ldr	r3, [r7, #8]
 801999c:	6013      	str	r3, [r2, #0]
}
 801999e:	bf00      	nop
 80199a0:	3710      	adds	r7, #16
 80199a2:	46bd      	mov	sp, r7
 80199a4:	bd80      	pop	{r7, pc}
 80199a6:	bf00      	nop
 80199a8:	20000de8 	.word	0x20000de8
 80199ac:	20000ce4 	.word	0x20000ce4
 80199b0:	20000dec 	.word	0x20000dec
 80199b4:	20000dd0 	.word	0x20000dd0
 80199b8:	20000da0 	.word	0x20000da0
 80199bc:	20000d9c 	.word	0x20000d9c
 80199c0:	20000e04 	.word	0x20000e04

080199c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80199c4:	b580      	push	{r7, lr}
 80199c6:	b084      	sub	sp, #16
 80199c8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80199ca:	2300      	movs	r3, #0
 80199cc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80199ce:	f000 fad5 	bl	8019f7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80199d2:	4b11      	ldr	r3, [pc, #68]	; (8019a18 <xTimerCreateTimerTask+0x54>)
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d00b      	beq.n	80199f2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80199da:	4b10      	ldr	r3, [pc, #64]	; (8019a1c <xTimerCreateTimerTask+0x58>)
 80199dc:	9301      	str	r3, [sp, #4]
 80199de:	2306      	movs	r3, #6
 80199e0:	9300      	str	r3, [sp, #0]
 80199e2:	2300      	movs	r3, #0
 80199e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80199e8:	490d      	ldr	r1, [pc, #52]	; (8019a20 <xTimerCreateTimerTask+0x5c>)
 80199ea:	480e      	ldr	r0, [pc, #56]	; (8019a24 <xTimerCreateTimerTask+0x60>)
 80199ec:	f7fe fea4 	bl	8018738 <xTaskCreate>
 80199f0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d10a      	bne.n	8019a0e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80199f8:	f04f 0320 	mov.w	r3, #32
 80199fc:	f383 8811 	msr	BASEPRI, r3
 8019a00:	f3bf 8f6f 	isb	sy
 8019a04:	f3bf 8f4f 	dsb	sy
 8019a08:	603b      	str	r3, [r7, #0]
}
 8019a0a:	bf00      	nop
 8019a0c:	e7fe      	b.n	8019a0c <xTimerCreateTimerTask+0x48>
	return xReturn;
 8019a0e:	687b      	ldr	r3, [r7, #4]
}
 8019a10:	4618      	mov	r0, r3
 8019a12:	3708      	adds	r7, #8
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd80      	pop	{r7, pc}
 8019a18:	20000e40 	.word	0x20000e40
 8019a1c:	20000e44 	.word	0x20000e44
 8019a20:	08022614 	.word	0x08022614
 8019a24:	08019b5d 	.word	0x08019b5d

08019a28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019a28:	b580      	push	{r7, lr}
 8019a2a:	b08a      	sub	sp, #40	; 0x28
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	60f8      	str	r0, [r7, #12]
 8019a30:	60b9      	str	r1, [r7, #8]
 8019a32:	607a      	str	r2, [r7, #4]
 8019a34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019a36:	2300      	movs	r3, #0
 8019a38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d10a      	bne.n	8019a56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8019a40:	f04f 0320 	mov.w	r3, #32
 8019a44:	f383 8811 	msr	BASEPRI, r3
 8019a48:	f3bf 8f6f 	isb	sy
 8019a4c:	f3bf 8f4f 	dsb	sy
 8019a50:	623b      	str	r3, [r7, #32]
}
 8019a52:	bf00      	nop
 8019a54:	e7fe      	b.n	8019a54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019a56:	4b1a      	ldr	r3, [pc, #104]	; (8019ac0 <xTimerGenericCommand+0x98>)
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d02a      	beq.n	8019ab4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019a5e:	68bb      	ldr	r3, [r7, #8]
 8019a60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019a6a:	68bb      	ldr	r3, [r7, #8]
 8019a6c:	2b05      	cmp	r3, #5
 8019a6e:	dc18      	bgt.n	8019aa2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019a70:	f7ff fd70 	bl	8019554 <xTaskGetSchedulerState>
 8019a74:	4603      	mov	r3, r0
 8019a76:	2b02      	cmp	r3, #2
 8019a78:	d109      	bne.n	8019a8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019a7a:	4b11      	ldr	r3, [pc, #68]	; (8019ac0 <xTimerGenericCommand+0x98>)
 8019a7c:	6818      	ldr	r0, [r3, #0]
 8019a7e:	f107 0114 	add.w	r1, r7, #20
 8019a82:	2300      	movs	r3, #0
 8019a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019a86:	f7fe f841 	bl	8017b0c <xQueueGenericSend>
 8019a8a:	6278      	str	r0, [r7, #36]	; 0x24
 8019a8c:	e012      	b.n	8019ab4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019a8e:	4b0c      	ldr	r3, [pc, #48]	; (8019ac0 <xTimerGenericCommand+0x98>)
 8019a90:	6818      	ldr	r0, [r3, #0]
 8019a92:	f107 0114 	add.w	r1, r7, #20
 8019a96:	2300      	movs	r3, #0
 8019a98:	2200      	movs	r2, #0
 8019a9a:	f7fe f837 	bl	8017b0c <xQueueGenericSend>
 8019a9e:	6278      	str	r0, [r7, #36]	; 0x24
 8019aa0:	e008      	b.n	8019ab4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019aa2:	4b07      	ldr	r3, [pc, #28]	; (8019ac0 <xTimerGenericCommand+0x98>)
 8019aa4:	6818      	ldr	r0, [r3, #0]
 8019aa6:	f107 0114 	add.w	r1, r7, #20
 8019aaa:	2300      	movs	r3, #0
 8019aac:	683a      	ldr	r2, [r7, #0]
 8019aae:	f7fe f92b 	bl	8017d08 <xQueueGenericSendFromISR>
 8019ab2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	3728      	adds	r7, #40	; 0x28
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bd80      	pop	{r7, pc}
 8019abe:	bf00      	nop
 8019ac0:	20000e40 	.word	0x20000e40

08019ac4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019ac4:	b580      	push	{r7, lr}
 8019ac6:	b088      	sub	sp, #32
 8019ac8:	af02      	add	r7, sp, #8
 8019aca:	6078      	str	r0, [r7, #4]
 8019acc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ace:	4b22      	ldr	r3, [pc, #136]	; (8019b58 <prvProcessExpiredTimer+0x94>)
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	68db      	ldr	r3, [r3, #12]
 8019ad4:	68db      	ldr	r3, [r3, #12]
 8019ad6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019ad8:	697b      	ldr	r3, [r7, #20]
 8019ada:	3304      	adds	r3, #4
 8019adc:	4618      	mov	r0, r3
 8019ade:	f7fd fef1 	bl	80178c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019ae2:	697b      	ldr	r3, [r7, #20]
 8019ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ae8:	f003 0304 	and.w	r3, r3, #4
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d022      	beq.n	8019b36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019af0:	697b      	ldr	r3, [r7, #20]
 8019af2:	699a      	ldr	r2, [r3, #24]
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	18d1      	adds	r1, r2, r3
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	683a      	ldr	r2, [r7, #0]
 8019afc:	6978      	ldr	r0, [r7, #20]
 8019afe:	f000 f8d1 	bl	8019ca4 <prvInsertTimerInActiveList>
 8019b02:	4603      	mov	r3, r0
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d01f      	beq.n	8019b48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019b08:	2300      	movs	r3, #0
 8019b0a:	9300      	str	r3, [sp, #0]
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	687a      	ldr	r2, [r7, #4]
 8019b10:	2100      	movs	r1, #0
 8019b12:	6978      	ldr	r0, [r7, #20]
 8019b14:	f7ff ff88 	bl	8019a28 <xTimerGenericCommand>
 8019b18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019b1a:	693b      	ldr	r3, [r7, #16]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d113      	bne.n	8019b48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019b20:	f04f 0320 	mov.w	r3, #32
 8019b24:	f383 8811 	msr	BASEPRI, r3
 8019b28:	f3bf 8f6f 	isb	sy
 8019b2c:	f3bf 8f4f 	dsb	sy
 8019b30:	60fb      	str	r3, [r7, #12]
}
 8019b32:	bf00      	nop
 8019b34:	e7fe      	b.n	8019b34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019b36:	697b      	ldr	r3, [r7, #20]
 8019b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019b3c:	f023 0301 	bic.w	r3, r3, #1
 8019b40:	b2da      	uxtb	r2, r3
 8019b42:	697b      	ldr	r3, [r7, #20]
 8019b44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019b48:	697b      	ldr	r3, [r7, #20]
 8019b4a:	6a1b      	ldr	r3, [r3, #32]
 8019b4c:	6978      	ldr	r0, [r7, #20]
 8019b4e:	4798      	blx	r3
}
 8019b50:	bf00      	nop
 8019b52:	3718      	adds	r7, #24
 8019b54:	46bd      	mov	sp, r7
 8019b56:	bd80      	pop	{r7, pc}
 8019b58:	20000e38 	.word	0x20000e38

08019b5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	b084      	sub	sp, #16
 8019b60:	af00      	add	r7, sp, #0
 8019b62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019b64:	f107 0308 	add.w	r3, r7, #8
 8019b68:	4618      	mov	r0, r3
 8019b6a:	f000 f857 	bl	8019c1c <prvGetNextExpireTime>
 8019b6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019b70:	68bb      	ldr	r3, [r7, #8]
 8019b72:	4619      	mov	r1, r3
 8019b74:	68f8      	ldr	r0, [r7, #12]
 8019b76:	f000 f803 	bl	8019b80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019b7a:	f000 f8d5 	bl	8019d28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019b7e:	e7f1      	b.n	8019b64 <prvTimerTask+0x8>

08019b80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b084      	sub	sp, #16
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	6078      	str	r0, [r7, #4]
 8019b88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019b8a:	f7ff f901 	bl	8018d90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019b8e:	f107 0308 	add.w	r3, r7, #8
 8019b92:	4618      	mov	r0, r3
 8019b94:	f000 f866 	bl	8019c64 <prvSampleTimeNow>
 8019b98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019b9a:	68bb      	ldr	r3, [r7, #8]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d130      	bne.n	8019c02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019ba0:	683b      	ldr	r3, [r7, #0]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d10a      	bne.n	8019bbc <prvProcessTimerOrBlockTask+0x3c>
 8019ba6:	687a      	ldr	r2, [r7, #4]
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	429a      	cmp	r2, r3
 8019bac:	d806      	bhi.n	8019bbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019bae:	f7ff f8fd 	bl	8018dac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019bb2:	68f9      	ldr	r1, [r7, #12]
 8019bb4:	6878      	ldr	r0, [r7, #4]
 8019bb6:	f7ff ff85 	bl	8019ac4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019bba:	e024      	b.n	8019c06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019bbc:	683b      	ldr	r3, [r7, #0]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d008      	beq.n	8019bd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019bc2:	4b13      	ldr	r3, [pc, #76]	; (8019c10 <prvProcessTimerOrBlockTask+0x90>)
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d101      	bne.n	8019bd0 <prvProcessTimerOrBlockTask+0x50>
 8019bcc:	2301      	movs	r3, #1
 8019bce:	e000      	b.n	8019bd2 <prvProcessTimerOrBlockTask+0x52>
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019bd4:	4b0f      	ldr	r3, [pc, #60]	; (8019c14 <prvProcessTimerOrBlockTask+0x94>)
 8019bd6:	6818      	ldr	r0, [r3, #0]
 8019bd8:	687a      	ldr	r2, [r7, #4]
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	1ad3      	subs	r3, r2, r3
 8019bde:	683a      	ldr	r2, [r7, #0]
 8019be0:	4619      	mov	r1, r3
 8019be2:	f7fe fd75 	bl	80186d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019be6:	f7ff f8e1 	bl	8018dac <xTaskResumeAll>
 8019bea:	4603      	mov	r3, r0
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d10a      	bne.n	8019c06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019bf0:	4b09      	ldr	r3, [pc, #36]	; (8019c18 <prvProcessTimerOrBlockTask+0x98>)
 8019bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019bf6:	601a      	str	r2, [r3, #0]
 8019bf8:	f3bf 8f4f 	dsb	sy
 8019bfc:	f3bf 8f6f 	isb	sy
}
 8019c00:	e001      	b.n	8019c06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019c02:	f7ff f8d3 	bl	8018dac <xTaskResumeAll>
}
 8019c06:	bf00      	nop
 8019c08:	3710      	adds	r7, #16
 8019c0a:	46bd      	mov	sp, r7
 8019c0c:	bd80      	pop	{r7, pc}
 8019c0e:	bf00      	nop
 8019c10:	20000e3c 	.word	0x20000e3c
 8019c14:	20000e40 	.word	0x20000e40
 8019c18:	e000ed04 	.word	0xe000ed04

08019c1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019c1c:	b480      	push	{r7}
 8019c1e:	b085      	sub	sp, #20
 8019c20:	af00      	add	r7, sp, #0
 8019c22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019c24:	4b0e      	ldr	r3, [pc, #56]	; (8019c60 <prvGetNextExpireTime+0x44>)
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d101      	bne.n	8019c32 <prvGetNextExpireTime+0x16>
 8019c2e:	2201      	movs	r2, #1
 8019c30:	e000      	b.n	8019c34 <prvGetNextExpireTime+0x18>
 8019c32:	2200      	movs	r2, #0
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d105      	bne.n	8019c4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019c40:	4b07      	ldr	r3, [pc, #28]	; (8019c60 <prvGetNextExpireTime+0x44>)
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	68db      	ldr	r3, [r3, #12]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	60fb      	str	r3, [r7, #12]
 8019c4a:	e001      	b.n	8019c50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019c50:	68fb      	ldr	r3, [r7, #12]
}
 8019c52:	4618      	mov	r0, r3
 8019c54:	3714      	adds	r7, #20
 8019c56:	46bd      	mov	sp, r7
 8019c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c5c:	4770      	bx	lr
 8019c5e:	bf00      	nop
 8019c60:	20000e38 	.word	0x20000e38

08019c64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b084      	sub	sp, #16
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019c6c:	f7ff f93a 	bl	8018ee4 <xTaskGetTickCount>
 8019c70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019c72:	4b0b      	ldr	r3, [pc, #44]	; (8019ca0 <prvSampleTimeNow+0x3c>)
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	68fa      	ldr	r2, [r7, #12]
 8019c78:	429a      	cmp	r2, r3
 8019c7a:	d205      	bcs.n	8019c88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019c7c:	f000 f91a 	bl	8019eb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	2201      	movs	r2, #1
 8019c84:	601a      	str	r2, [r3, #0]
 8019c86:	e002      	b.n	8019c8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	2200      	movs	r2, #0
 8019c8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019c8e:	4a04      	ldr	r2, [pc, #16]	; (8019ca0 <prvSampleTimeNow+0x3c>)
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019c94:	68fb      	ldr	r3, [r7, #12]
}
 8019c96:	4618      	mov	r0, r3
 8019c98:	3710      	adds	r7, #16
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	bd80      	pop	{r7, pc}
 8019c9e:	bf00      	nop
 8019ca0:	20000e48 	.word	0x20000e48

08019ca4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019ca4:	b580      	push	{r7, lr}
 8019ca6:	b086      	sub	sp, #24
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	60f8      	str	r0, [r7, #12]
 8019cac:	60b9      	str	r1, [r7, #8]
 8019cae:	607a      	str	r2, [r7, #4]
 8019cb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	68ba      	ldr	r2, [r7, #8]
 8019cba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	68fa      	ldr	r2, [r7, #12]
 8019cc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019cc2:	68ba      	ldr	r2, [r7, #8]
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	429a      	cmp	r2, r3
 8019cc8:	d812      	bhi.n	8019cf0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019cca:	687a      	ldr	r2, [r7, #4]
 8019ccc:	683b      	ldr	r3, [r7, #0]
 8019cce:	1ad2      	subs	r2, r2, r3
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	699b      	ldr	r3, [r3, #24]
 8019cd4:	429a      	cmp	r2, r3
 8019cd6:	d302      	bcc.n	8019cde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019cd8:	2301      	movs	r3, #1
 8019cda:	617b      	str	r3, [r7, #20]
 8019cdc:	e01b      	b.n	8019d16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019cde:	4b10      	ldr	r3, [pc, #64]	; (8019d20 <prvInsertTimerInActiveList+0x7c>)
 8019ce0:	681a      	ldr	r2, [r3, #0]
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	3304      	adds	r3, #4
 8019ce6:	4619      	mov	r1, r3
 8019ce8:	4610      	mov	r0, r2
 8019cea:	f7fd fdb2 	bl	8017852 <vListInsert>
 8019cee:	e012      	b.n	8019d16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019cf0:	687a      	ldr	r2, [r7, #4]
 8019cf2:	683b      	ldr	r3, [r7, #0]
 8019cf4:	429a      	cmp	r2, r3
 8019cf6:	d206      	bcs.n	8019d06 <prvInsertTimerInActiveList+0x62>
 8019cf8:	68ba      	ldr	r2, [r7, #8]
 8019cfa:	683b      	ldr	r3, [r7, #0]
 8019cfc:	429a      	cmp	r2, r3
 8019cfe:	d302      	bcc.n	8019d06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019d00:	2301      	movs	r3, #1
 8019d02:	617b      	str	r3, [r7, #20]
 8019d04:	e007      	b.n	8019d16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019d06:	4b07      	ldr	r3, [pc, #28]	; (8019d24 <prvInsertTimerInActiveList+0x80>)
 8019d08:	681a      	ldr	r2, [r3, #0]
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	3304      	adds	r3, #4
 8019d0e:	4619      	mov	r1, r3
 8019d10:	4610      	mov	r0, r2
 8019d12:	f7fd fd9e 	bl	8017852 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019d16:	697b      	ldr	r3, [r7, #20]
}
 8019d18:	4618      	mov	r0, r3
 8019d1a:	3718      	adds	r7, #24
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	bd80      	pop	{r7, pc}
 8019d20:	20000e3c 	.word	0x20000e3c
 8019d24:	20000e38 	.word	0x20000e38

08019d28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b08c      	sub	sp, #48	; 0x30
 8019d2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019d2e:	e0ae      	b.n	8019e8e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019d30:	68bb      	ldr	r3, [r7, #8]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	f2c0 80aa 	blt.w	8019e8c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019d38:	693b      	ldr	r3, [r7, #16]
 8019d3a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d3e:	695b      	ldr	r3, [r3, #20]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d004      	beq.n	8019d4e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d46:	3304      	adds	r3, #4
 8019d48:	4618      	mov	r0, r3
 8019d4a:	f7fd fdbb 	bl	80178c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019d4e:	1d3b      	adds	r3, r7, #4
 8019d50:	4618      	mov	r0, r3
 8019d52:	f7ff ff87 	bl	8019c64 <prvSampleTimeNow>
 8019d56:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8019d58:	68bb      	ldr	r3, [r7, #8]
 8019d5a:	2b09      	cmp	r3, #9
 8019d5c:	f200 8097 	bhi.w	8019e8e <prvProcessReceivedCommands+0x166>
 8019d60:	a201      	add	r2, pc, #4	; (adr r2, 8019d68 <prvProcessReceivedCommands+0x40>)
 8019d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d66:	bf00      	nop
 8019d68:	08019d91 	.word	0x08019d91
 8019d6c:	08019d91 	.word	0x08019d91
 8019d70:	08019d91 	.word	0x08019d91
 8019d74:	08019e05 	.word	0x08019e05
 8019d78:	08019e19 	.word	0x08019e19
 8019d7c:	08019e63 	.word	0x08019e63
 8019d80:	08019d91 	.word	0x08019d91
 8019d84:	08019d91 	.word	0x08019d91
 8019d88:	08019e05 	.word	0x08019e05
 8019d8c:	08019e19 	.word	0x08019e19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019d96:	f043 0301 	orr.w	r3, r3, #1
 8019d9a:	b2da      	uxtb	r2, r3
 8019d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019da2:	68fa      	ldr	r2, [r7, #12]
 8019da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019da6:	699b      	ldr	r3, [r3, #24]
 8019da8:	18d1      	adds	r1, r2, r3
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	6a3a      	ldr	r2, [r7, #32]
 8019dae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019db0:	f7ff ff78 	bl	8019ca4 <prvInsertTimerInActiveList>
 8019db4:	4603      	mov	r3, r0
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d069      	beq.n	8019e8e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dbc:	6a1b      	ldr	r3, [r3, #32]
 8019dbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019dc0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019dc8:	f003 0304 	and.w	r3, r3, #4
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d05e      	beq.n	8019e8e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019dd0:	68fa      	ldr	r2, [r7, #12]
 8019dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dd4:	699b      	ldr	r3, [r3, #24]
 8019dd6:	441a      	add	r2, r3
 8019dd8:	2300      	movs	r3, #0
 8019dda:	9300      	str	r3, [sp, #0]
 8019ddc:	2300      	movs	r3, #0
 8019dde:	2100      	movs	r1, #0
 8019de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019de2:	f7ff fe21 	bl	8019a28 <xTimerGenericCommand>
 8019de6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8019de8:	69fb      	ldr	r3, [r7, #28]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d14f      	bne.n	8019e8e <prvProcessReceivedCommands+0x166>
	__asm volatile
 8019dee:	f04f 0320 	mov.w	r3, #32
 8019df2:	f383 8811 	msr	BASEPRI, r3
 8019df6:	f3bf 8f6f 	isb	sy
 8019dfa:	f3bf 8f4f 	dsb	sy
 8019dfe:	61bb      	str	r3, [r7, #24]
}
 8019e00:	bf00      	nop
 8019e02:	e7fe      	b.n	8019e02 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e0a:	f023 0301 	bic.w	r3, r3, #1
 8019e0e:	b2da      	uxtb	r2, r3
 8019e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019e16:	e03a      	b.n	8019e8e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e1e:	f043 0301 	orr.w	r3, r3, #1
 8019e22:	b2da      	uxtb	r2, r3
 8019e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019e2a:	68fa      	ldr	r2, [r7, #12]
 8019e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e32:	699b      	ldr	r3, [r3, #24]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d10a      	bne.n	8019e4e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8019e38:	f04f 0320 	mov.w	r3, #32
 8019e3c:	f383 8811 	msr	BASEPRI, r3
 8019e40:	f3bf 8f6f 	isb	sy
 8019e44:	f3bf 8f4f 	dsb	sy
 8019e48:	617b      	str	r3, [r7, #20]
}
 8019e4a:	bf00      	nop
 8019e4c:	e7fe      	b.n	8019e4c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e50:	699a      	ldr	r2, [r3, #24]
 8019e52:	6a3b      	ldr	r3, [r7, #32]
 8019e54:	18d1      	adds	r1, r2, r3
 8019e56:	6a3b      	ldr	r3, [r7, #32]
 8019e58:	6a3a      	ldr	r2, [r7, #32]
 8019e5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e5c:	f7ff ff22 	bl	8019ca4 <prvInsertTimerInActiveList>
					break;
 8019e60:	e015      	b.n	8019e8e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e68:	f003 0302 	and.w	r3, r3, #2
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d103      	bne.n	8019e78 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8019e70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e72:	f000 fbcd 	bl	801a610 <vPortFree>
 8019e76:	e00a      	b.n	8019e8e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019e7e:	f023 0301 	bic.w	r3, r3, #1
 8019e82:	b2da      	uxtb	r2, r3
 8019e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019e8a:	e000      	b.n	8019e8e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019e8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019e8e:	4b08      	ldr	r3, [pc, #32]	; (8019eb0 <prvProcessReceivedCommands+0x188>)
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	f107 0108 	add.w	r1, r7, #8
 8019e96:	2200      	movs	r2, #0
 8019e98:	4618      	mov	r0, r3
 8019e9a:	f7fe f85b 	bl	8017f54 <xQueueReceive>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	f47f af45 	bne.w	8019d30 <prvProcessReceivedCommands+0x8>
	}
}
 8019ea6:	bf00      	nop
 8019ea8:	bf00      	nop
 8019eaa:	3728      	adds	r7, #40	; 0x28
 8019eac:	46bd      	mov	sp, r7
 8019eae:	bd80      	pop	{r7, pc}
 8019eb0:	20000e40 	.word	0x20000e40

08019eb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b088      	sub	sp, #32
 8019eb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019eba:	e048      	b.n	8019f4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019ebc:	4b2d      	ldr	r3, [pc, #180]	; (8019f74 <prvSwitchTimerLists+0xc0>)
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	68db      	ldr	r3, [r3, #12]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ec6:	4b2b      	ldr	r3, [pc, #172]	; (8019f74 <prvSwitchTimerLists+0xc0>)
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	68db      	ldr	r3, [r3, #12]
 8019ecc:	68db      	ldr	r3, [r3, #12]
 8019ece:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	3304      	adds	r3, #4
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	f7fd fcf5 	bl	80178c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	6a1b      	ldr	r3, [r3, #32]
 8019ede:	68f8      	ldr	r0, [r7, #12]
 8019ee0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019ee2:	68fb      	ldr	r3, [r7, #12]
 8019ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ee8:	f003 0304 	and.w	r3, r3, #4
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d02e      	beq.n	8019f4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	699b      	ldr	r3, [r3, #24]
 8019ef4:	693a      	ldr	r2, [r7, #16]
 8019ef6:	4413      	add	r3, r2
 8019ef8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019efa:	68ba      	ldr	r2, [r7, #8]
 8019efc:	693b      	ldr	r3, [r7, #16]
 8019efe:	429a      	cmp	r2, r3
 8019f00:	d90e      	bls.n	8019f20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	68ba      	ldr	r2, [r7, #8]
 8019f06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	68fa      	ldr	r2, [r7, #12]
 8019f0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019f0e:	4b19      	ldr	r3, [pc, #100]	; (8019f74 <prvSwitchTimerLists+0xc0>)
 8019f10:	681a      	ldr	r2, [r3, #0]
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	3304      	adds	r3, #4
 8019f16:	4619      	mov	r1, r3
 8019f18:	4610      	mov	r0, r2
 8019f1a:	f7fd fc9a 	bl	8017852 <vListInsert>
 8019f1e:	e016      	b.n	8019f4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019f20:	2300      	movs	r3, #0
 8019f22:	9300      	str	r3, [sp, #0]
 8019f24:	2300      	movs	r3, #0
 8019f26:	693a      	ldr	r2, [r7, #16]
 8019f28:	2100      	movs	r1, #0
 8019f2a:	68f8      	ldr	r0, [r7, #12]
 8019f2c:	f7ff fd7c 	bl	8019a28 <xTimerGenericCommand>
 8019f30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d10a      	bne.n	8019f4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019f38:	f04f 0320 	mov.w	r3, #32
 8019f3c:	f383 8811 	msr	BASEPRI, r3
 8019f40:	f3bf 8f6f 	isb	sy
 8019f44:	f3bf 8f4f 	dsb	sy
 8019f48:	603b      	str	r3, [r7, #0]
}
 8019f4a:	bf00      	nop
 8019f4c:	e7fe      	b.n	8019f4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019f4e:	4b09      	ldr	r3, [pc, #36]	; (8019f74 <prvSwitchTimerLists+0xc0>)
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d1b1      	bne.n	8019ebc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019f58:	4b06      	ldr	r3, [pc, #24]	; (8019f74 <prvSwitchTimerLists+0xc0>)
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019f5e:	4b06      	ldr	r3, [pc, #24]	; (8019f78 <prvSwitchTimerLists+0xc4>)
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	4a04      	ldr	r2, [pc, #16]	; (8019f74 <prvSwitchTimerLists+0xc0>)
 8019f64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019f66:	4a04      	ldr	r2, [pc, #16]	; (8019f78 <prvSwitchTimerLists+0xc4>)
 8019f68:	697b      	ldr	r3, [r7, #20]
 8019f6a:	6013      	str	r3, [r2, #0]
}
 8019f6c:	bf00      	nop
 8019f6e:	3718      	adds	r7, #24
 8019f70:	46bd      	mov	sp, r7
 8019f72:	bd80      	pop	{r7, pc}
 8019f74:	20000e38 	.word	0x20000e38
 8019f78:	20000e3c 	.word	0x20000e3c

08019f7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019f80:	f000 f960 	bl	801a244 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019f84:	4b12      	ldr	r3, [pc, #72]	; (8019fd0 <prvCheckForValidListAndQueue+0x54>)
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d11d      	bne.n	8019fc8 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8019f8c:	4811      	ldr	r0, [pc, #68]	; (8019fd4 <prvCheckForValidListAndQueue+0x58>)
 8019f8e:	f7fd fc0f 	bl	80177b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019f92:	4811      	ldr	r0, [pc, #68]	; (8019fd8 <prvCheckForValidListAndQueue+0x5c>)
 8019f94:	f7fd fc0c 	bl	80177b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019f98:	4b10      	ldr	r3, [pc, #64]	; (8019fdc <prvCheckForValidListAndQueue+0x60>)
 8019f9a:	4a0e      	ldr	r2, [pc, #56]	; (8019fd4 <prvCheckForValidListAndQueue+0x58>)
 8019f9c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019f9e:	4b10      	ldr	r3, [pc, #64]	; (8019fe0 <prvCheckForValidListAndQueue+0x64>)
 8019fa0:	4a0d      	ldr	r2, [pc, #52]	; (8019fd8 <prvCheckForValidListAndQueue+0x5c>)
 8019fa2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8019fa4:	2200      	movs	r2, #0
 8019fa6:	210c      	movs	r1, #12
 8019fa8:	2064      	movs	r0, #100	; 0x64
 8019faa:	f7fd fd1d 	bl	80179e8 <xQueueGenericCreate>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	4a07      	ldr	r2, [pc, #28]	; (8019fd0 <prvCheckForValidListAndQueue+0x54>)
 8019fb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019fb4:	4b06      	ldr	r3, [pc, #24]	; (8019fd0 <prvCheckForValidListAndQueue+0x54>)
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d005      	beq.n	8019fc8 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019fbc:	4b04      	ldr	r3, [pc, #16]	; (8019fd0 <prvCheckForValidListAndQueue+0x54>)
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	4908      	ldr	r1, [pc, #32]	; (8019fe4 <prvCheckForValidListAndQueue+0x68>)
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f7fe fb5a 	bl	801867c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019fc8:	f000 f96c 	bl	801a2a4 <vPortExitCritical>
}
 8019fcc:	bf00      	nop
 8019fce:	bd80      	pop	{r7, pc}
 8019fd0:	20000e40 	.word	0x20000e40
 8019fd4:	20000e10 	.word	0x20000e10
 8019fd8:	20000e24 	.word	0x20000e24
 8019fdc:	20000e38 	.word	0x20000e38
 8019fe0:	20000e3c 	.word	0x20000e3c
 8019fe4:	0802261c 	.word	0x0802261c

08019fe8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019fe8:	b480      	push	{r7}
 8019fea:	b085      	sub	sp, #20
 8019fec:	af00      	add	r7, sp, #0
 8019fee:	60f8      	str	r0, [r7, #12]
 8019ff0:	60b9      	str	r1, [r7, #8]
 8019ff2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	3b04      	subs	r3, #4
 8019ff8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	3b04      	subs	r3, #4
 801a006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a008:	68bb      	ldr	r3, [r7, #8]
 801a00a:	f023 0201 	bic.w	r2, r3, #1
 801a00e:	68fb      	ldr	r3, [r7, #12]
 801a010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	3b04      	subs	r3, #4
 801a016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a018:	4a0c      	ldr	r2, [pc, #48]	; (801a04c <pxPortInitialiseStack+0x64>)
 801a01a:	68fb      	ldr	r3, [r7, #12]
 801a01c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	3b14      	subs	r3, #20
 801a022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a024:	687a      	ldr	r2, [r7, #4]
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a02a:	68fb      	ldr	r3, [r7, #12]
 801a02c:	3b04      	subs	r3, #4
 801a02e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	f06f 0202 	mvn.w	r2, #2
 801a036:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	3b20      	subs	r3, #32
 801a03c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a03e:	68fb      	ldr	r3, [r7, #12]
}
 801a040:	4618      	mov	r0, r3
 801a042:	3714      	adds	r7, #20
 801a044:	46bd      	mov	sp, r7
 801a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a04a:	4770      	bx	lr
 801a04c:	0801a051 	.word	0x0801a051

0801a050 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a050:	b480      	push	{r7}
 801a052:	b085      	sub	sp, #20
 801a054:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a056:	2300      	movs	r3, #0
 801a058:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a05a:	4b12      	ldr	r3, [pc, #72]	; (801a0a4 <prvTaskExitError+0x54>)
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a062:	d00a      	beq.n	801a07a <prvTaskExitError+0x2a>
	__asm volatile
 801a064:	f04f 0320 	mov.w	r3, #32
 801a068:	f383 8811 	msr	BASEPRI, r3
 801a06c:	f3bf 8f6f 	isb	sy
 801a070:	f3bf 8f4f 	dsb	sy
 801a074:	60fb      	str	r3, [r7, #12]
}
 801a076:	bf00      	nop
 801a078:	e7fe      	b.n	801a078 <prvTaskExitError+0x28>
	__asm volatile
 801a07a:	f04f 0320 	mov.w	r3, #32
 801a07e:	f383 8811 	msr	BASEPRI, r3
 801a082:	f3bf 8f6f 	isb	sy
 801a086:	f3bf 8f4f 	dsb	sy
 801a08a:	60bb      	str	r3, [r7, #8]
}
 801a08c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a08e:	bf00      	nop
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	2b00      	cmp	r3, #0
 801a094:	d0fc      	beq.n	801a090 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a096:	bf00      	nop
 801a098:	bf00      	nop
 801a09a:	3714      	adds	r7, #20
 801a09c:	46bd      	mov	sp, r7
 801a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a2:	4770      	bx	lr
 801a0a4:	20000080 	.word	0x20000080
	...

0801a0b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801a0b0:	4b07      	ldr	r3, [pc, #28]	; (801a0d0 <pxCurrentTCBConst2>)
 801a0b2:	6819      	ldr	r1, [r3, #0]
 801a0b4:	6808      	ldr	r0, [r1, #0]
 801a0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0ba:	f380 8809 	msr	PSP, r0
 801a0be:	f3bf 8f6f 	isb	sy
 801a0c2:	f04f 0000 	mov.w	r0, #0
 801a0c6:	f380 8811 	msr	BASEPRI, r0
 801a0ca:	4770      	bx	lr
 801a0cc:	f3af 8000 	nop.w

0801a0d0 <pxCurrentTCBConst2>:
 801a0d0:	20000ce4 	.word	0x20000ce4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801a0d4:	bf00      	nop
 801a0d6:	bf00      	nop

0801a0d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a0d8:	4808      	ldr	r0, [pc, #32]	; (801a0fc <prvPortStartFirstTask+0x24>)
 801a0da:	6800      	ldr	r0, [r0, #0]
 801a0dc:	6800      	ldr	r0, [r0, #0]
 801a0de:	f380 8808 	msr	MSP, r0
 801a0e2:	f04f 0000 	mov.w	r0, #0
 801a0e6:	f380 8814 	msr	CONTROL, r0
 801a0ea:	b662      	cpsie	i
 801a0ec:	b661      	cpsie	f
 801a0ee:	f3bf 8f4f 	dsb	sy
 801a0f2:	f3bf 8f6f 	isb	sy
 801a0f6:	df00      	svc	0
 801a0f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a0fa:	bf00      	nop
 801a0fc:	e000ed08 	.word	0xe000ed08

0801a100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a100:	b580      	push	{r7, lr}
 801a102:	b086      	sub	sp, #24
 801a104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a106:	4b46      	ldr	r3, [pc, #280]	; (801a220 <xPortStartScheduler+0x120>)
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	4a46      	ldr	r2, [pc, #280]	; (801a224 <xPortStartScheduler+0x124>)
 801a10c:	4293      	cmp	r3, r2
 801a10e:	d10a      	bne.n	801a126 <xPortStartScheduler+0x26>
	__asm volatile
 801a110:	f04f 0320 	mov.w	r3, #32
 801a114:	f383 8811 	msr	BASEPRI, r3
 801a118:	f3bf 8f6f 	isb	sy
 801a11c:	f3bf 8f4f 	dsb	sy
 801a120:	613b      	str	r3, [r7, #16]
}
 801a122:	bf00      	nop
 801a124:	e7fe      	b.n	801a124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a126:	4b3e      	ldr	r3, [pc, #248]	; (801a220 <xPortStartScheduler+0x120>)
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	4a3f      	ldr	r2, [pc, #252]	; (801a228 <xPortStartScheduler+0x128>)
 801a12c:	4293      	cmp	r3, r2
 801a12e:	d10a      	bne.n	801a146 <xPortStartScheduler+0x46>
	__asm volatile
 801a130:	f04f 0320 	mov.w	r3, #32
 801a134:	f383 8811 	msr	BASEPRI, r3
 801a138:	f3bf 8f6f 	isb	sy
 801a13c:	f3bf 8f4f 	dsb	sy
 801a140:	60fb      	str	r3, [r7, #12]
}
 801a142:	bf00      	nop
 801a144:	e7fe      	b.n	801a144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a146:	4b39      	ldr	r3, [pc, #228]	; (801a22c <xPortStartScheduler+0x12c>)
 801a148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a14a:	697b      	ldr	r3, [r7, #20]
 801a14c:	781b      	ldrb	r3, [r3, #0]
 801a14e:	b2db      	uxtb	r3, r3
 801a150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a152:	697b      	ldr	r3, [r7, #20]
 801a154:	22ff      	movs	r2, #255	; 0xff
 801a156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a158:	697b      	ldr	r3, [r7, #20]
 801a15a:	781b      	ldrb	r3, [r3, #0]
 801a15c:	b2db      	uxtb	r3, r3
 801a15e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a160:	78fb      	ldrb	r3, [r7, #3]
 801a162:	b2db      	uxtb	r3, r3
 801a164:	f003 0320 	and.w	r3, r3, #32
 801a168:	b2da      	uxtb	r2, r3
 801a16a:	4b31      	ldr	r3, [pc, #196]	; (801a230 <xPortStartScheduler+0x130>)
 801a16c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a16e:	4b31      	ldr	r3, [pc, #196]	; (801a234 <xPortStartScheduler+0x134>)
 801a170:	2207      	movs	r2, #7
 801a172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a174:	e009      	b.n	801a18a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801a176:	4b2f      	ldr	r3, [pc, #188]	; (801a234 <xPortStartScheduler+0x134>)
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	3b01      	subs	r3, #1
 801a17c:	4a2d      	ldr	r2, [pc, #180]	; (801a234 <xPortStartScheduler+0x134>)
 801a17e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a180:	78fb      	ldrb	r3, [r7, #3]
 801a182:	b2db      	uxtb	r3, r3
 801a184:	005b      	lsls	r3, r3, #1
 801a186:	b2db      	uxtb	r3, r3
 801a188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a18a:	78fb      	ldrb	r3, [r7, #3]
 801a18c:	b2db      	uxtb	r3, r3
 801a18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a192:	2b80      	cmp	r3, #128	; 0x80
 801a194:	d0ef      	beq.n	801a176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a196:	4b27      	ldr	r3, [pc, #156]	; (801a234 <xPortStartScheduler+0x134>)
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	f1c3 0307 	rsb	r3, r3, #7
 801a19e:	2b04      	cmp	r3, #4
 801a1a0:	d00a      	beq.n	801a1b8 <xPortStartScheduler+0xb8>
	__asm volatile
 801a1a2:	f04f 0320 	mov.w	r3, #32
 801a1a6:	f383 8811 	msr	BASEPRI, r3
 801a1aa:	f3bf 8f6f 	isb	sy
 801a1ae:	f3bf 8f4f 	dsb	sy
 801a1b2:	60bb      	str	r3, [r7, #8]
}
 801a1b4:	bf00      	nop
 801a1b6:	e7fe      	b.n	801a1b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a1b8:	4b1e      	ldr	r3, [pc, #120]	; (801a234 <xPortStartScheduler+0x134>)
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	021b      	lsls	r3, r3, #8
 801a1be:	4a1d      	ldr	r2, [pc, #116]	; (801a234 <xPortStartScheduler+0x134>)
 801a1c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a1c2:	4b1c      	ldr	r3, [pc, #112]	; (801a234 <xPortStartScheduler+0x134>)
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a1ca:	4a1a      	ldr	r2, [pc, #104]	; (801a234 <xPortStartScheduler+0x134>)
 801a1cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	b2da      	uxtb	r2, r3
 801a1d2:	697b      	ldr	r3, [r7, #20]
 801a1d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a1d6:	4b18      	ldr	r3, [pc, #96]	; (801a238 <xPortStartScheduler+0x138>)
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	4a17      	ldr	r2, [pc, #92]	; (801a238 <xPortStartScheduler+0x138>)
 801a1dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a1e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a1e2:	4b15      	ldr	r3, [pc, #84]	; (801a238 <xPortStartScheduler+0x138>)
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	4a14      	ldr	r2, [pc, #80]	; (801a238 <xPortStartScheduler+0x138>)
 801a1e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a1ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a1ee:	f000 f8dd 	bl	801a3ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a1f2:	4b12      	ldr	r3, [pc, #72]	; (801a23c <xPortStartScheduler+0x13c>)
 801a1f4:	2200      	movs	r2, #0
 801a1f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a1f8:	f000 f8fc 	bl	801a3f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a1fc:	4b10      	ldr	r3, [pc, #64]	; (801a240 <xPortStartScheduler+0x140>)
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	4a0f      	ldr	r2, [pc, #60]	; (801a240 <xPortStartScheduler+0x140>)
 801a202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a208:	f7ff ff66 	bl	801a0d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a20c:	f7fe ff4e 	bl	80190ac <vTaskSwitchContext>
	prvTaskExitError();
 801a210:	f7ff ff1e 	bl	801a050 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a214:	2300      	movs	r3, #0
}
 801a216:	4618      	mov	r0, r3
 801a218:	3718      	adds	r7, #24
 801a21a:	46bd      	mov	sp, r7
 801a21c:	bd80      	pop	{r7, pc}
 801a21e:	bf00      	nop
 801a220:	e000ed00 	.word	0xe000ed00
 801a224:	410fc271 	.word	0x410fc271
 801a228:	410fc270 	.word	0x410fc270
 801a22c:	e000e400 	.word	0xe000e400
 801a230:	20000e4c 	.word	0x20000e4c
 801a234:	20000e50 	.word	0x20000e50
 801a238:	e000ed20 	.word	0xe000ed20
 801a23c:	20000080 	.word	0x20000080
 801a240:	e000ef34 	.word	0xe000ef34

0801a244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a244:	b480      	push	{r7}
 801a246:	b083      	sub	sp, #12
 801a248:	af00      	add	r7, sp, #0
	__asm volatile
 801a24a:	f04f 0320 	mov.w	r3, #32
 801a24e:	f383 8811 	msr	BASEPRI, r3
 801a252:	f3bf 8f6f 	isb	sy
 801a256:	f3bf 8f4f 	dsb	sy
 801a25a:	607b      	str	r3, [r7, #4]
}
 801a25c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a25e:	4b0f      	ldr	r3, [pc, #60]	; (801a29c <vPortEnterCritical+0x58>)
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	3301      	adds	r3, #1
 801a264:	4a0d      	ldr	r2, [pc, #52]	; (801a29c <vPortEnterCritical+0x58>)
 801a266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a268:	4b0c      	ldr	r3, [pc, #48]	; (801a29c <vPortEnterCritical+0x58>)
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	2b01      	cmp	r3, #1
 801a26e:	d10f      	bne.n	801a290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a270:	4b0b      	ldr	r3, [pc, #44]	; (801a2a0 <vPortEnterCritical+0x5c>)
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	b2db      	uxtb	r3, r3
 801a276:	2b00      	cmp	r3, #0
 801a278:	d00a      	beq.n	801a290 <vPortEnterCritical+0x4c>
	__asm volatile
 801a27a:	f04f 0320 	mov.w	r3, #32
 801a27e:	f383 8811 	msr	BASEPRI, r3
 801a282:	f3bf 8f6f 	isb	sy
 801a286:	f3bf 8f4f 	dsb	sy
 801a28a:	603b      	str	r3, [r7, #0]
}
 801a28c:	bf00      	nop
 801a28e:	e7fe      	b.n	801a28e <vPortEnterCritical+0x4a>
	}
}
 801a290:	bf00      	nop
 801a292:	370c      	adds	r7, #12
 801a294:	46bd      	mov	sp, r7
 801a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a29a:	4770      	bx	lr
 801a29c:	20000080 	.word	0x20000080
 801a2a0:	e000ed04 	.word	0xe000ed04

0801a2a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a2a4:	b480      	push	{r7}
 801a2a6:	b083      	sub	sp, #12
 801a2a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a2aa:	4b12      	ldr	r3, [pc, #72]	; (801a2f4 <vPortExitCritical+0x50>)
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d10a      	bne.n	801a2c8 <vPortExitCritical+0x24>
	__asm volatile
 801a2b2:	f04f 0320 	mov.w	r3, #32
 801a2b6:	f383 8811 	msr	BASEPRI, r3
 801a2ba:	f3bf 8f6f 	isb	sy
 801a2be:	f3bf 8f4f 	dsb	sy
 801a2c2:	607b      	str	r3, [r7, #4]
}
 801a2c4:	bf00      	nop
 801a2c6:	e7fe      	b.n	801a2c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a2c8:	4b0a      	ldr	r3, [pc, #40]	; (801a2f4 <vPortExitCritical+0x50>)
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	3b01      	subs	r3, #1
 801a2ce:	4a09      	ldr	r2, [pc, #36]	; (801a2f4 <vPortExitCritical+0x50>)
 801a2d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a2d2:	4b08      	ldr	r3, [pc, #32]	; (801a2f4 <vPortExitCritical+0x50>)
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d105      	bne.n	801a2e6 <vPortExitCritical+0x42>
 801a2da:	2300      	movs	r3, #0
 801a2dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a2de:	683b      	ldr	r3, [r7, #0]
 801a2e0:	f383 8811 	msr	BASEPRI, r3
}
 801a2e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a2e6:	bf00      	nop
 801a2e8:	370c      	adds	r7, #12
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f0:	4770      	bx	lr
 801a2f2:	bf00      	nop
 801a2f4:	20000080 	.word	0x20000080
	...

0801a300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a300:	f3ef 8009 	mrs	r0, PSP
 801a304:	f3bf 8f6f 	isb	sy
 801a308:	4b15      	ldr	r3, [pc, #84]	; (801a360 <pxCurrentTCBConst>)
 801a30a:	681a      	ldr	r2, [r3, #0]
 801a30c:	f01e 0f10 	tst.w	lr, #16
 801a310:	bf08      	it	eq
 801a312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a31a:	6010      	str	r0, [r2, #0]
 801a31c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a320:	f04f 0020 	mov.w	r0, #32
 801a324:	f380 8811 	msr	BASEPRI, r0
 801a328:	f3bf 8f4f 	dsb	sy
 801a32c:	f3bf 8f6f 	isb	sy
 801a330:	f7fe febc 	bl	80190ac <vTaskSwitchContext>
 801a334:	f04f 0000 	mov.w	r0, #0
 801a338:	f380 8811 	msr	BASEPRI, r0
 801a33c:	bc09      	pop	{r0, r3}
 801a33e:	6819      	ldr	r1, [r3, #0]
 801a340:	6808      	ldr	r0, [r1, #0]
 801a342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a346:	f01e 0f10 	tst.w	lr, #16
 801a34a:	bf08      	it	eq
 801a34c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a350:	f380 8809 	msr	PSP, r0
 801a354:	f3bf 8f6f 	isb	sy
 801a358:	4770      	bx	lr
 801a35a:	bf00      	nop
 801a35c:	f3af 8000 	nop.w

0801a360 <pxCurrentTCBConst>:
 801a360:	20000ce4 	.word	0x20000ce4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a364:	bf00      	nop
 801a366:	bf00      	nop

0801a368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b082      	sub	sp, #8
 801a36c:	af00      	add	r7, sp, #0
	__asm volatile
 801a36e:	f04f 0320 	mov.w	r3, #32
 801a372:	f383 8811 	msr	BASEPRI, r3
 801a376:	f3bf 8f6f 	isb	sy
 801a37a:	f3bf 8f4f 	dsb	sy
 801a37e:	607b      	str	r3, [r7, #4]
}
 801a380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a382:	f7fe fdbf 	bl	8018f04 <xTaskIncrementTick>
 801a386:	4603      	mov	r3, r0
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d003      	beq.n	801a394 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a38c:	4b06      	ldr	r3, [pc, #24]	; (801a3a8 <xPortSysTickHandler+0x40>)
 801a38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a392:	601a      	str	r2, [r3, #0]
 801a394:	2300      	movs	r3, #0
 801a396:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a398:	683b      	ldr	r3, [r7, #0]
 801a39a:	f383 8811 	msr	BASEPRI, r3
}
 801a39e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a3a0:	bf00      	nop
 801a3a2:	3708      	adds	r7, #8
 801a3a4:	46bd      	mov	sp, r7
 801a3a6:	bd80      	pop	{r7, pc}
 801a3a8:	e000ed04 	.word	0xe000ed04

0801a3ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a3ac:	b480      	push	{r7}
 801a3ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a3b0:	4b0b      	ldr	r3, [pc, #44]	; (801a3e0 <vPortSetupTimerInterrupt+0x34>)
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a3b6:	4b0b      	ldr	r3, [pc, #44]	; (801a3e4 <vPortSetupTimerInterrupt+0x38>)
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a3bc:	4b0a      	ldr	r3, [pc, #40]	; (801a3e8 <vPortSetupTimerInterrupt+0x3c>)
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	4a0a      	ldr	r2, [pc, #40]	; (801a3ec <vPortSetupTimerInterrupt+0x40>)
 801a3c2:	fba2 2303 	umull	r2, r3, r2, r3
 801a3c6:	099b      	lsrs	r3, r3, #6
 801a3c8:	4a09      	ldr	r2, [pc, #36]	; (801a3f0 <vPortSetupTimerInterrupt+0x44>)
 801a3ca:	3b01      	subs	r3, #1
 801a3cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a3ce:	4b04      	ldr	r3, [pc, #16]	; (801a3e0 <vPortSetupTimerInterrupt+0x34>)
 801a3d0:	2207      	movs	r2, #7
 801a3d2:	601a      	str	r2, [r3, #0]
}
 801a3d4:	bf00      	nop
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3dc:	4770      	bx	lr
 801a3de:	bf00      	nop
 801a3e0:	e000e010 	.word	0xe000e010
 801a3e4:	e000e018 	.word	0xe000e018
 801a3e8:	20000038 	.word	0x20000038
 801a3ec:	10624dd3 	.word	0x10624dd3
 801a3f0:	e000e014 	.word	0xe000e014

0801a3f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a3f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a404 <vPortEnableVFP+0x10>
 801a3f8:	6801      	ldr	r1, [r0, #0]
 801a3fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a3fe:	6001      	str	r1, [r0, #0]
 801a400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a402:	bf00      	nop
 801a404:	e000ed88 	.word	0xe000ed88

0801a408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a408:	b480      	push	{r7}
 801a40a:	b085      	sub	sp, #20
 801a40c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a40e:	f3ef 8305 	mrs	r3, IPSR
 801a412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	2b0f      	cmp	r3, #15
 801a418:	d914      	bls.n	801a444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a41a:	4a17      	ldr	r2, [pc, #92]	; (801a478 <vPortValidateInterruptPriority+0x70>)
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	4413      	add	r3, r2
 801a420:	781b      	ldrb	r3, [r3, #0]
 801a422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a424:	4b15      	ldr	r3, [pc, #84]	; (801a47c <vPortValidateInterruptPriority+0x74>)
 801a426:	781b      	ldrb	r3, [r3, #0]
 801a428:	7afa      	ldrb	r2, [r7, #11]
 801a42a:	429a      	cmp	r2, r3
 801a42c:	d20a      	bcs.n	801a444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a42e:	f04f 0320 	mov.w	r3, #32
 801a432:	f383 8811 	msr	BASEPRI, r3
 801a436:	f3bf 8f6f 	isb	sy
 801a43a:	f3bf 8f4f 	dsb	sy
 801a43e:	607b      	str	r3, [r7, #4]
}
 801a440:	bf00      	nop
 801a442:	e7fe      	b.n	801a442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a444:	4b0e      	ldr	r3, [pc, #56]	; (801a480 <vPortValidateInterruptPriority+0x78>)
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a44c:	4b0d      	ldr	r3, [pc, #52]	; (801a484 <vPortValidateInterruptPriority+0x7c>)
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	429a      	cmp	r2, r3
 801a452:	d90a      	bls.n	801a46a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a454:	f04f 0320 	mov.w	r3, #32
 801a458:	f383 8811 	msr	BASEPRI, r3
 801a45c:	f3bf 8f6f 	isb	sy
 801a460:	f3bf 8f4f 	dsb	sy
 801a464:	603b      	str	r3, [r7, #0]
}
 801a466:	bf00      	nop
 801a468:	e7fe      	b.n	801a468 <vPortValidateInterruptPriority+0x60>
	}
 801a46a:	bf00      	nop
 801a46c:	3714      	adds	r7, #20
 801a46e:	46bd      	mov	sp, r7
 801a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a474:	4770      	bx	lr
 801a476:	bf00      	nop
 801a478:	e000e3f0 	.word	0xe000e3f0
 801a47c:	20000e4c 	.word	0x20000e4c
 801a480:	e000ed0c 	.word	0xe000ed0c
 801a484:	20000e50 	.word	0x20000e50

0801a488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b08a      	sub	sp, #40	; 0x28
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a490:	2300      	movs	r3, #0
 801a492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a494:	f7fe fc7c 	bl	8018d90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a498:	4b58      	ldr	r3, [pc, #352]	; (801a5fc <pvPortMalloc+0x174>)
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d101      	bne.n	801a4a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a4a0:	f000 f910 	bl	801a6c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a4a4:	4b56      	ldr	r3, [pc, #344]	; (801a600 <pvPortMalloc+0x178>)
 801a4a6:	681a      	ldr	r2, [r3, #0]
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	4013      	ands	r3, r2
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	f040 808e 	bne.w	801a5ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d01d      	beq.n	801a4f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a4b8:	2208      	movs	r2, #8
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	4413      	add	r3, r2
 801a4be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	f003 0307 	and.w	r3, r3, #7
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d014      	beq.n	801a4f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	f023 0307 	bic.w	r3, r3, #7
 801a4d0:	3308      	adds	r3, #8
 801a4d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	f003 0307 	and.w	r3, r3, #7
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d00a      	beq.n	801a4f4 <pvPortMalloc+0x6c>
	__asm volatile
 801a4de:	f04f 0320 	mov.w	r3, #32
 801a4e2:	f383 8811 	msr	BASEPRI, r3
 801a4e6:	f3bf 8f6f 	isb	sy
 801a4ea:	f3bf 8f4f 	dsb	sy
 801a4ee:	617b      	str	r3, [r7, #20]
}
 801a4f0:	bf00      	nop
 801a4f2:	e7fe      	b.n	801a4f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d069      	beq.n	801a5ce <pvPortMalloc+0x146>
 801a4fa:	4b42      	ldr	r3, [pc, #264]	; (801a604 <pvPortMalloc+0x17c>)
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	687a      	ldr	r2, [r7, #4]
 801a500:	429a      	cmp	r2, r3
 801a502:	d864      	bhi.n	801a5ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a504:	4b40      	ldr	r3, [pc, #256]	; (801a608 <pvPortMalloc+0x180>)
 801a506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a508:	4b3f      	ldr	r3, [pc, #252]	; (801a608 <pvPortMalloc+0x180>)
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a50e:	e004      	b.n	801a51a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a51c:	685b      	ldr	r3, [r3, #4]
 801a51e:	687a      	ldr	r2, [r7, #4]
 801a520:	429a      	cmp	r2, r3
 801a522:	d903      	bls.n	801a52c <pvPortMalloc+0xa4>
 801a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d1f1      	bne.n	801a510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a52c:	4b33      	ldr	r3, [pc, #204]	; (801a5fc <pvPortMalloc+0x174>)
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a532:	429a      	cmp	r2, r3
 801a534:	d04b      	beq.n	801a5ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a536:	6a3b      	ldr	r3, [r7, #32]
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	2208      	movs	r2, #8
 801a53c:	4413      	add	r3, r2
 801a53e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a542:	681a      	ldr	r2, [r3, #0]
 801a544:	6a3b      	ldr	r3, [r7, #32]
 801a546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a54a:	685a      	ldr	r2, [r3, #4]
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	1ad2      	subs	r2, r2, r3
 801a550:	2308      	movs	r3, #8
 801a552:	005b      	lsls	r3, r3, #1
 801a554:	429a      	cmp	r2, r3
 801a556:	d91f      	bls.n	801a598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	4413      	add	r3, r2
 801a55e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a560:	69bb      	ldr	r3, [r7, #24]
 801a562:	f003 0307 	and.w	r3, r3, #7
 801a566:	2b00      	cmp	r3, #0
 801a568:	d00a      	beq.n	801a580 <pvPortMalloc+0xf8>
	__asm volatile
 801a56a:	f04f 0320 	mov.w	r3, #32
 801a56e:	f383 8811 	msr	BASEPRI, r3
 801a572:	f3bf 8f6f 	isb	sy
 801a576:	f3bf 8f4f 	dsb	sy
 801a57a:	613b      	str	r3, [r7, #16]
}
 801a57c:	bf00      	nop
 801a57e:	e7fe      	b.n	801a57e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a582:	685a      	ldr	r2, [r3, #4]
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	1ad2      	subs	r2, r2, r3
 801a588:	69bb      	ldr	r3, [r7, #24]
 801a58a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a58e:	687a      	ldr	r2, [r7, #4]
 801a590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a592:	69b8      	ldr	r0, [r7, #24]
 801a594:	f000 f8f8 	bl	801a788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a598:	4b1a      	ldr	r3, [pc, #104]	; (801a604 <pvPortMalloc+0x17c>)
 801a59a:	681a      	ldr	r2, [r3, #0]
 801a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a59e:	685b      	ldr	r3, [r3, #4]
 801a5a0:	1ad3      	subs	r3, r2, r3
 801a5a2:	4a18      	ldr	r2, [pc, #96]	; (801a604 <pvPortMalloc+0x17c>)
 801a5a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a5a6:	4b17      	ldr	r3, [pc, #92]	; (801a604 <pvPortMalloc+0x17c>)
 801a5a8:	681a      	ldr	r2, [r3, #0]
 801a5aa:	4b18      	ldr	r3, [pc, #96]	; (801a60c <pvPortMalloc+0x184>)
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	429a      	cmp	r2, r3
 801a5b0:	d203      	bcs.n	801a5ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a5b2:	4b14      	ldr	r3, [pc, #80]	; (801a604 <pvPortMalloc+0x17c>)
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	4a15      	ldr	r2, [pc, #84]	; (801a60c <pvPortMalloc+0x184>)
 801a5b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5bc:	685a      	ldr	r2, [r3, #4]
 801a5be:	4b10      	ldr	r3, [pc, #64]	; (801a600 <pvPortMalloc+0x178>)
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	431a      	orrs	r2, r3
 801a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a5ce:	f7fe fbed 	bl	8018dac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a5d2:	69fb      	ldr	r3, [r7, #28]
 801a5d4:	f003 0307 	and.w	r3, r3, #7
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d00a      	beq.n	801a5f2 <pvPortMalloc+0x16a>
	__asm volatile
 801a5dc:	f04f 0320 	mov.w	r3, #32
 801a5e0:	f383 8811 	msr	BASEPRI, r3
 801a5e4:	f3bf 8f6f 	isb	sy
 801a5e8:	f3bf 8f4f 	dsb	sy
 801a5ec:	60fb      	str	r3, [r7, #12]
}
 801a5ee:	bf00      	nop
 801a5f0:	e7fe      	b.n	801a5f0 <pvPortMalloc+0x168>
	return pvReturn;
 801a5f2:	69fb      	ldr	r3, [r7, #28]
}
 801a5f4:	4618      	mov	r0, r3
 801a5f6:	3728      	adds	r7, #40	; 0x28
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	bd80      	pop	{r7, pc}
 801a5fc:	2000fe5c 	.word	0x2000fe5c
 801a600:	2000fe68 	.word	0x2000fe68
 801a604:	2000fe60 	.word	0x2000fe60
 801a608:	2000fe54 	.word	0x2000fe54
 801a60c:	2000fe64 	.word	0x2000fe64

0801a610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b086      	sub	sp, #24
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d048      	beq.n	801a6b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a622:	2308      	movs	r3, #8
 801a624:	425b      	negs	r3, r3
 801a626:	697a      	ldr	r2, [r7, #20]
 801a628:	4413      	add	r3, r2
 801a62a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a62c:	697b      	ldr	r3, [r7, #20]
 801a62e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a630:	693b      	ldr	r3, [r7, #16]
 801a632:	685a      	ldr	r2, [r3, #4]
 801a634:	4b21      	ldr	r3, [pc, #132]	; (801a6bc <vPortFree+0xac>)
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	4013      	ands	r3, r2
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d10a      	bne.n	801a654 <vPortFree+0x44>
	__asm volatile
 801a63e:	f04f 0320 	mov.w	r3, #32
 801a642:	f383 8811 	msr	BASEPRI, r3
 801a646:	f3bf 8f6f 	isb	sy
 801a64a:	f3bf 8f4f 	dsb	sy
 801a64e:	60fb      	str	r3, [r7, #12]
}
 801a650:	bf00      	nop
 801a652:	e7fe      	b.n	801a652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a654:	693b      	ldr	r3, [r7, #16]
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d00a      	beq.n	801a672 <vPortFree+0x62>
	__asm volatile
 801a65c:	f04f 0320 	mov.w	r3, #32
 801a660:	f383 8811 	msr	BASEPRI, r3
 801a664:	f3bf 8f6f 	isb	sy
 801a668:	f3bf 8f4f 	dsb	sy
 801a66c:	60bb      	str	r3, [r7, #8]
}
 801a66e:	bf00      	nop
 801a670:	e7fe      	b.n	801a670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a672:	693b      	ldr	r3, [r7, #16]
 801a674:	685a      	ldr	r2, [r3, #4]
 801a676:	4b11      	ldr	r3, [pc, #68]	; (801a6bc <vPortFree+0xac>)
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	4013      	ands	r3, r2
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d019      	beq.n	801a6b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a680:	693b      	ldr	r3, [r7, #16]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	2b00      	cmp	r3, #0
 801a686:	d115      	bne.n	801a6b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a688:	693b      	ldr	r3, [r7, #16]
 801a68a:	685a      	ldr	r2, [r3, #4]
 801a68c:	4b0b      	ldr	r3, [pc, #44]	; (801a6bc <vPortFree+0xac>)
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	43db      	mvns	r3, r3
 801a692:	401a      	ands	r2, r3
 801a694:	693b      	ldr	r3, [r7, #16]
 801a696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a698:	f7fe fb7a 	bl	8018d90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a69c:	693b      	ldr	r3, [r7, #16]
 801a69e:	685a      	ldr	r2, [r3, #4]
 801a6a0:	4b07      	ldr	r3, [pc, #28]	; (801a6c0 <vPortFree+0xb0>)
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	4413      	add	r3, r2
 801a6a6:	4a06      	ldr	r2, [pc, #24]	; (801a6c0 <vPortFree+0xb0>)
 801a6a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a6aa:	6938      	ldr	r0, [r7, #16]
 801a6ac:	f000 f86c 	bl	801a788 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801a6b0:	f7fe fb7c 	bl	8018dac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a6b4:	bf00      	nop
 801a6b6:	3718      	adds	r7, #24
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd80      	pop	{r7, pc}
 801a6bc:	2000fe68 	.word	0x2000fe68
 801a6c0:	2000fe60 	.word	0x2000fe60

0801a6c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a6c4:	b480      	push	{r7}
 801a6c6:	b085      	sub	sp, #20
 801a6c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a6ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 801a6ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a6d0:	4b27      	ldr	r3, [pc, #156]	; (801a770 <prvHeapInit+0xac>)
 801a6d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	f003 0307 	and.w	r3, r3, #7
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d00c      	beq.n	801a6f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	3307      	adds	r3, #7
 801a6e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	f023 0307 	bic.w	r3, r3, #7
 801a6ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a6ec:	68ba      	ldr	r2, [r7, #8]
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	1ad3      	subs	r3, r2, r3
 801a6f2:	4a1f      	ldr	r2, [pc, #124]	; (801a770 <prvHeapInit+0xac>)
 801a6f4:	4413      	add	r3, r2
 801a6f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a6f8:	68fb      	ldr	r3, [r7, #12]
 801a6fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a6fc:	4a1d      	ldr	r2, [pc, #116]	; (801a774 <prvHeapInit+0xb0>)
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a702:	4b1c      	ldr	r3, [pc, #112]	; (801a774 <prvHeapInit+0xb0>)
 801a704:	2200      	movs	r2, #0
 801a706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	68ba      	ldr	r2, [r7, #8]
 801a70c:	4413      	add	r3, r2
 801a70e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a710:	2208      	movs	r2, #8
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	1a9b      	subs	r3, r3, r2
 801a716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a718:	68fb      	ldr	r3, [r7, #12]
 801a71a:	f023 0307 	bic.w	r3, r3, #7
 801a71e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	4a15      	ldr	r2, [pc, #84]	; (801a778 <prvHeapInit+0xb4>)
 801a724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a726:	4b14      	ldr	r3, [pc, #80]	; (801a778 <prvHeapInit+0xb4>)
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	2200      	movs	r2, #0
 801a72c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a72e:	4b12      	ldr	r3, [pc, #72]	; (801a778 <prvHeapInit+0xb4>)
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	2200      	movs	r2, #0
 801a734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a73a:	683b      	ldr	r3, [r7, #0]
 801a73c:	68fa      	ldr	r2, [r7, #12]
 801a73e:	1ad2      	subs	r2, r2, r3
 801a740:	683b      	ldr	r3, [r7, #0]
 801a742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a744:	4b0c      	ldr	r3, [pc, #48]	; (801a778 <prvHeapInit+0xb4>)
 801a746:	681a      	ldr	r2, [r3, #0]
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a74c:	683b      	ldr	r3, [r7, #0]
 801a74e:	685b      	ldr	r3, [r3, #4]
 801a750:	4a0a      	ldr	r2, [pc, #40]	; (801a77c <prvHeapInit+0xb8>)
 801a752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a754:	683b      	ldr	r3, [r7, #0]
 801a756:	685b      	ldr	r3, [r3, #4]
 801a758:	4a09      	ldr	r2, [pc, #36]	; (801a780 <prvHeapInit+0xbc>)
 801a75a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a75c:	4b09      	ldr	r3, [pc, #36]	; (801a784 <prvHeapInit+0xc0>)
 801a75e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a762:	601a      	str	r2, [r3, #0]
}
 801a764:	bf00      	nop
 801a766:	3714      	adds	r7, #20
 801a768:	46bd      	mov	sp, r7
 801a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a76e:	4770      	bx	lr
 801a770:	20000e54 	.word	0x20000e54
 801a774:	2000fe54 	.word	0x2000fe54
 801a778:	2000fe5c 	.word	0x2000fe5c
 801a77c:	2000fe64 	.word	0x2000fe64
 801a780:	2000fe60 	.word	0x2000fe60
 801a784:	2000fe68 	.word	0x2000fe68

0801a788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a788:	b480      	push	{r7}
 801a78a:	b085      	sub	sp, #20
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a790:	4b28      	ldr	r3, [pc, #160]	; (801a834 <prvInsertBlockIntoFreeList+0xac>)
 801a792:	60fb      	str	r3, [r7, #12]
 801a794:	e002      	b.n	801a79c <prvInsertBlockIntoFreeList+0x14>
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	60fb      	str	r3, [r7, #12]
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	687a      	ldr	r2, [r7, #4]
 801a7a2:	429a      	cmp	r2, r3
 801a7a4:	d8f7      	bhi.n	801a796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a7aa:	68fb      	ldr	r3, [r7, #12]
 801a7ac:	685b      	ldr	r3, [r3, #4]
 801a7ae:	68ba      	ldr	r2, [r7, #8]
 801a7b0:	4413      	add	r3, r2
 801a7b2:	687a      	ldr	r2, [r7, #4]
 801a7b4:	429a      	cmp	r2, r3
 801a7b6:	d108      	bne.n	801a7ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	685a      	ldr	r2, [r3, #4]
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	685b      	ldr	r3, [r3, #4]
 801a7c0:	441a      	add	r2, r3
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	685b      	ldr	r3, [r3, #4]
 801a7d2:	68ba      	ldr	r2, [r7, #8]
 801a7d4:	441a      	add	r2, r3
 801a7d6:	68fb      	ldr	r3, [r7, #12]
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	429a      	cmp	r2, r3
 801a7dc:	d118      	bne.n	801a810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a7de:	68fb      	ldr	r3, [r7, #12]
 801a7e0:	681a      	ldr	r2, [r3, #0]
 801a7e2:	4b15      	ldr	r3, [pc, #84]	; (801a838 <prvInsertBlockIntoFreeList+0xb0>)
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	429a      	cmp	r2, r3
 801a7e8:	d00d      	beq.n	801a806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	685a      	ldr	r2, [r3, #4]
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	685b      	ldr	r3, [r3, #4]
 801a7f4:	441a      	add	r2, r3
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	681a      	ldr	r2, [r3, #0]
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	601a      	str	r2, [r3, #0]
 801a804:	e008      	b.n	801a818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a806:	4b0c      	ldr	r3, [pc, #48]	; (801a838 <prvInsertBlockIntoFreeList+0xb0>)
 801a808:	681a      	ldr	r2, [r3, #0]
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	601a      	str	r2, [r3, #0]
 801a80e:	e003      	b.n	801a818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	681a      	ldr	r2, [r3, #0]
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a818:	68fa      	ldr	r2, [r7, #12]
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	429a      	cmp	r2, r3
 801a81e:	d002      	beq.n	801a826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	687a      	ldr	r2, [r7, #4]
 801a824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a826:	bf00      	nop
 801a828:	3714      	adds	r7, #20
 801a82a:	46bd      	mov	sp, r7
 801a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a830:	4770      	bx	lr
 801a832:	bf00      	nop
 801a834:	2000fe54 	.word	0x2000fe54
 801a838:	2000fe5c 	.word	0x2000fe5c

0801a83c <parson_strndup>:
static int    json_serialize_string(const char *string, char *buf);
static int    append_indent(char *buf, int level);
static int    append_string(char *buf, const char *string);

/* Various */
static char * parson_strndup(const char *string, size_t n) {
 801a83c:	b580      	push	{r7, lr}
 801a83e:	b084      	sub	sp, #16
 801a840:	af00      	add	r7, sp, #0
 801a842:	6078      	str	r0, [r7, #4]
 801a844:	6039      	str	r1, [r7, #0]
    char *output_string = (char*)parson_malloc(n + 1);
 801a846:	4b0d      	ldr	r3, [pc, #52]	; (801a87c <parson_strndup+0x40>)
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	683a      	ldr	r2, [r7, #0]
 801a84c:	3201      	adds	r2, #1
 801a84e:	4610      	mov	r0, r2
 801a850:	4798      	blx	r3
 801a852:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d101      	bne.n	801a85e <parson_strndup+0x22>
        return NULL;
 801a85a:	2300      	movs	r3, #0
 801a85c:	e00a      	b.n	801a874 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 801a85e:	68fa      	ldr	r2, [r7, #12]
 801a860:	683b      	ldr	r3, [r7, #0]
 801a862:	4413      	add	r3, r2
 801a864:	2200      	movs	r2, #0
 801a866:	701a      	strb	r2, [r3, #0]
    strncpy(output_string, string, n);
 801a868:	683a      	ldr	r2, [r7, #0]
 801a86a:	6879      	ldr	r1, [r7, #4]
 801a86c:	68f8      	ldr	r0, [r7, #12]
 801a86e:	f004 f95e 	bl	801eb2e <strncpy>
    return output_string;
 801a872:	68fb      	ldr	r3, [r7, #12]
}
 801a874:	4618      	mov	r0, r3
 801a876:	3710      	adds	r7, #16
 801a878:	46bd      	mov	sp, r7
 801a87a:	bd80      	pop	{r7, pc}
 801a87c:	20000084 	.word	0x20000084

0801a880 <hex_char_to_int>:

static char * parson_strdup(const char *string) {
    return parson_strndup(string, strlen(string));
}

static int hex_char_to_int(char c) {
 801a880:	b480      	push	{r7}
 801a882:	b083      	sub	sp, #12
 801a884:	af00      	add	r7, sp, #0
 801a886:	4603      	mov	r3, r0
 801a888:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 801a88a:	79fb      	ldrb	r3, [r7, #7]
 801a88c:	2b2f      	cmp	r3, #47	; 0x2f
 801a88e:	d905      	bls.n	801a89c <hex_char_to_int+0x1c>
 801a890:	79fb      	ldrb	r3, [r7, #7]
 801a892:	2b39      	cmp	r3, #57	; 0x39
 801a894:	d802      	bhi.n	801a89c <hex_char_to_int+0x1c>
        return c - '0';
 801a896:	79fb      	ldrb	r3, [r7, #7]
 801a898:	3b30      	subs	r3, #48	; 0x30
 801a89a:	e013      	b.n	801a8c4 <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 801a89c:	79fb      	ldrb	r3, [r7, #7]
 801a89e:	2b60      	cmp	r3, #96	; 0x60
 801a8a0:	d905      	bls.n	801a8ae <hex_char_to_int+0x2e>
 801a8a2:	79fb      	ldrb	r3, [r7, #7]
 801a8a4:	2b66      	cmp	r3, #102	; 0x66
 801a8a6:	d802      	bhi.n	801a8ae <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 801a8a8:	79fb      	ldrb	r3, [r7, #7]
 801a8aa:	3b57      	subs	r3, #87	; 0x57
 801a8ac:	e00a      	b.n	801a8c4 <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 801a8ae:	79fb      	ldrb	r3, [r7, #7]
 801a8b0:	2b40      	cmp	r3, #64	; 0x40
 801a8b2:	d905      	bls.n	801a8c0 <hex_char_to_int+0x40>
 801a8b4:	79fb      	ldrb	r3, [r7, #7]
 801a8b6:	2b46      	cmp	r3, #70	; 0x46
 801a8b8:	d802      	bhi.n	801a8c0 <hex_char_to_int+0x40>
        return c - 'A' + 10;
 801a8ba:	79fb      	ldrb	r3, [r7, #7]
 801a8bc:	3b37      	subs	r3, #55	; 0x37
 801a8be:	e001      	b.n	801a8c4 <hex_char_to_int+0x44>
    }
    return -1;
 801a8c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a8c4:	4618      	mov	r0, r3
 801a8c6:	370c      	adds	r7, #12
 801a8c8:	46bd      	mov	sp, r7
 801a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8ce:	4770      	bx	lr

0801a8d0 <parse_utf16_hex>:

static int parse_utf16_hex(const char *s, unsigned int *result) {
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b086      	sub	sp, #24
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	6078      	str	r0, [r7, #4]
 801a8d8:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	781b      	ldrb	r3, [r3, #0]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d00e      	beq.n	801a900 <parse_utf16_hex+0x30>
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	3301      	adds	r3, #1
 801a8e6:	781b      	ldrb	r3, [r3, #0]
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d009      	beq.n	801a900 <parse_utf16_hex+0x30>
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	3302      	adds	r3, #2
 801a8f0:	781b      	ldrb	r3, [r3, #0]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d004      	beq.n	801a900 <parse_utf16_hex+0x30>
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	3303      	adds	r3, #3
 801a8fa:	781b      	ldrb	r3, [r3, #0]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d101      	bne.n	801a904 <parse_utf16_hex+0x34>
        return 0;
 801a900:	2300      	movs	r3, #0
 801a902:	e03a      	b.n	801a97a <parse_utf16_hex+0xaa>
    }
    x1 = hex_char_to_int(s[0]);
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	781b      	ldrb	r3, [r3, #0]
 801a908:	4618      	mov	r0, r3
 801a90a:	f7ff ffb9 	bl	801a880 <hex_char_to_int>
 801a90e:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	3301      	adds	r3, #1
 801a914:	781b      	ldrb	r3, [r3, #0]
 801a916:	4618      	mov	r0, r3
 801a918:	f7ff ffb2 	bl	801a880 <hex_char_to_int>
 801a91c:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	3302      	adds	r3, #2
 801a922:	781b      	ldrb	r3, [r3, #0]
 801a924:	4618      	mov	r0, r3
 801a926:	f7ff ffab 	bl	801a880 <hex_char_to_int>
 801a92a:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	3303      	adds	r3, #3
 801a930:	781b      	ldrb	r3, [r3, #0]
 801a932:	4618      	mov	r0, r3
 801a934:	f7ff ffa4 	bl	801a880 <hex_char_to_int>
 801a938:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 801a93a:	697b      	ldr	r3, [r7, #20]
 801a93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a940:	d00b      	beq.n	801a95a <parse_utf16_hex+0x8a>
 801a942:	693b      	ldr	r3, [r7, #16]
 801a944:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a948:	d007      	beq.n	801a95a <parse_utf16_hex+0x8a>
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a950:	d003      	beq.n	801a95a <parse_utf16_hex+0x8a>
 801a952:	68bb      	ldr	r3, [r7, #8]
 801a954:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a958:	d101      	bne.n	801a95e <parse_utf16_hex+0x8e>
        return 0;
 801a95a:	2300      	movs	r3, #0
 801a95c:	e00d      	b.n	801a97a <parse_utf16_hex+0xaa>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 801a95e:	697b      	ldr	r3, [r7, #20]
 801a960:	031a      	lsls	r2, r3, #12
 801a962:	693b      	ldr	r3, [r7, #16]
 801a964:	021b      	lsls	r3, r3, #8
 801a966:	431a      	orrs	r2, r3
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	011b      	lsls	r3, r3, #4
 801a96c:	431a      	orrs	r2, r3
 801a96e:	68bb      	ldr	r3, [r7, #8]
 801a970:	4313      	orrs	r3, r2
 801a972:	461a      	mov	r2, r3
 801a974:	683b      	ldr	r3, [r7, #0]
 801a976:	601a      	str	r2, [r3, #0]
    return 1;
 801a978:	2301      	movs	r3, #1
}
 801a97a:	4618      	mov	r0, r3
 801a97c:	3718      	adds	r7, #24
 801a97e:	46bd      	mov	sp, r7
 801a980:	bd80      	pop	{r7, pc}

0801a982 <num_bytes_in_utf8_sequence>:

static int num_bytes_in_utf8_sequence(unsigned char c) {
 801a982:	b480      	push	{r7}
 801a984:	b083      	sub	sp, #12
 801a986:	af00      	add	r7, sp, #0
 801a988:	4603      	mov	r3, r0
 801a98a:	71fb      	strb	r3, [r7, #7]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 801a98c:	79fb      	ldrb	r3, [r7, #7]
 801a98e:	2bc0      	cmp	r3, #192	; 0xc0
 801a990:	d00a      	beq.n	801a9a8 <num_bytes_in_utf8_sequence+0x26>
 801a992:	79fb      	ldrb	r3, [r7, #7]
 801a994:	2bc1      	cmp	r3, #193	; 0xc1
 801a996:	d007      	beq.n	801a9a8 <num_bytes_in_utf8_sequence+0x26>
 801a998:	79fb      	ldrb	r3, [r7, #7]
 801a99a:	2bf4      	cmp	r3, #244	; 0xf4
 801a99c:	d804      	bhi.n	801a9a8 <num_bytes_in_utf8_sequence+0x26>
 801a99e:	79fb      	ldrb	r3, [r7, #7]
 801a9a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801a9a4:	2b80      	cmp	r3, #128	; 0x80
 801a9a6:	d101      	bne.n	801a9ac <num_bytes_in_utf8_sequence+0x2a>
        return 0;
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	e01b      	b.n	801a9e4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 801a9ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	db01      	blt.n	801a9b8 <num_bytes_in_utf8_sequence+0x36>
        return 1;
 801a9b4:	2301      	movs	r3, #1
 801a9b6:	e015      	b.n	801a9e4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 801a9b8:	79fb      	ldrb	r3, [r7, #7]
 801a9ba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801a9be:	2bc0      	cmp	r3, #192	; 0xc0
 801a9c0:	d101      	bne.n	801a9c6 <num_bytes_in_utf8_sequence+0x44>
        return 2;
 801a9c2:	2302      	movs	r3, #2
 801a9c4:	e00e      	b.n	801a9e4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 801a9c6:	79fb      	ldrb	r3, [r7, #7]
 801a9c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a9cc:	2be0      	cmp	r3, #224	; 0xe0
 801a9ce:	d101      	bne.n	801a9d4 <num_bytes_in_utf8_sequence+0x52>
        return 3;
 801a9d0:	2303      	movs	r3, #3
 801a9d2:	e007      	b.n	801a9e4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 801a9d4:	79fb      	ldrb	r3, [r7, #7]
 801a9d6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801a9da:	2bf0      	cmp	r3, #240	; 0xf0
 801a9dc:	d101      	bne.n	801a9e2 <num_bytes_in_utf8_sequence+0x60>
        return 4;
 801a9de:	2304      	movs	r3, #4
 801a9e0:	e000      	b.n	801a9e4 <num_bytes_in_utf8_sequence+0x62>
    }
    return 0; /* won't happen */
 801a9e2:	2300      	movs	r3, #0
}
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	370c      	adds	r7, #12
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ee:	4770      	bx	lr

0801a9f0 <verify_utf8_sequence>:

static int verify_utf8_sequence(const unsigned char *string, int *len) {
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b084      	sub	sp, #16
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]
 801a9f8:	6039      	str	r1, [r7, #0]
    unsigned int cp = 0;
 801a9fa:	2300      	movs	r3, #0
 801a9fc:	60fb      	str	r3, [r7, #12]
    *len = num_bytes_in_utf8_sequence(string[0]);
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	781b      	ldrb	r3, [r3, #0]
 801aa02:	4618      	mov	r0, r3
 801aa04:	f7ff ffbd 	bl	801a982 <num_bytes_in_utf8_sequence>
 801aa08:	4602      	mov	r2, r0
 801aa0a:	683b      	ldr	r3, [r7, #0]
 801aa0c:	601a      	str	r2, [r3, #0]

    if (*len == 1) {
 801aa0e:	683b      	ldr	r3, [r7, #0]
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	2b01      	cmp	r3, #1
 801aa14:	d103      	bne.n	801aa1e <verify_utf8_sequence+0x2e>
        cp = string[0];
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	781b      	ldrb	r3, [r3, #0]
 801aa1a:	60fb      	str	r3, [r7, #12]
 801aa1c:	e07f      	b.n	801ab1e <verify_utf8_sequence+0x12e>
    } else if (*len == 2 && IS_CONT(string[1])) {
 801aa1e:	683b      	ldr	r3, [r7, #0]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	2b02      	cmp	r3, #2
 801aa24:	d115      	bne.n	801aa52 <verify_utf8_sequence+0x62>
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	3301      	adds	r3, #1
 801aa2a:	781b      	ldrb	r3, [r3, #0]
 801aa2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801aa30:	2b80      	cmp	r3, #128	; 0x80
 801aa32:	d10e      	bne.n	801aa52 <verify_utf8_sequence+0x62>
        cp = string[0] & 0x1F;
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	781b      	ldrb	r3, [r3, #0]
 801aa38:	f003 031f 	and.w	r3, r3, #31
 801aa3c:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	019a      	lsls	r2, r3, #6
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	3301      	adds	r3, #1
 801aa46:	781b      	ldrb	r3, [r3, #0]
 801aa48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aa4c:	4313      	orrs	r3, r2
 801aa4e:	60fb      	str	r3, [r7, #12]
 801aa50:	e065      	b.n	801ab1e <verify_utf8_sequence+0x12e>
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 801aa52:	683b      	ldr	r3, [r7, #0]
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	2b03      	cmp	r3, #3
 801aa58:	d125      	bne.n	801aaa6 <verify_utf8_sequence+0xb6>
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	3301      	adds	r3, #1
 801aa5e:	781b      	ldrb	r3, [r3, #0]
 801aa60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801aa64:	2b80      	cmp	r3, #128	; 0x80
 801aa66:	d11e      	bne.n	801aaa6 <verify_utf8_sequence+0xb6>
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	3302      	adds	r3, #2
 801aa6c:	781b      	ldrb	r3, [r3, #0]
 801aa6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801aa72:	2b80      	cmp	r3, #128	; 0x80
 801aa74:	d117      	bne.n	801aaa6 <verify_utf8_sequence+0xb6>
        cp = ((unsigned char)string[0]) & 0xF;
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	781b      	ldrb	r3, [r3, #0]
 801aa7a:	f003 030f 	and.w	r3, r3, #15
 801aa7e:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	019a      	lsls	r2, r3, #6
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	3301      	adds	r3, #1
 801aa88:	781b      	ldrb	r3, [r3, #0]
 801aa8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aa8e:	4313      	orrs	r3, r2
 801aa90:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	019a      	lsls	r2, r3, #6
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	3302      	adds	r3, #2
 801aa9a:	781b      	ldrb	r3, [r3, #0]
 801aa9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aaa0:	4313      	orrs	r3, r2
 801aaa2:	60fb      	str	r3, [r7, #12]
 801aaa4:	e03b      	b.n	801ab1e <verify_utf8_sequence+0x12e>
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 801aaa6:	683b      	ldr	r3, [r7, #0]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	2b04      	cmp	r3, #4
 801aaac:	d135      	bne.n	801ab1a <verify_utf8_sequence+0x12a>
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	3301      	adds	r3, #1
 801aab2:	781b      	ldrb	r3, [r3, #0]
 801aab4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801aab8:	2b80      	cmp	r3, #128	; 0x80
 801aaba:	d12e      	bne.n	801ab1a <verify_utf8_sequence+0x12a>
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	3302      	adds	r3, #2
 801aac0:	781b      	ldrb	r3, [r3, #0]
 801aac2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801aac6:	2b80      	cmp	r3, #128	; 0x80
 801aac8:	d127      	bne.n	801ab1a <verify_utf8_sequence+0x12a>
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	3303      	adds	r3, #3
 801aace:	781b      	ldrb	r3, [r3, #0]
 801aad0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801aad4:	2b80      	cmp	r3, #128	; 0x80
 801aad6:	d120      	bne.n	801ab1a <verify_utf8_sequence+0x12a>
        cp = string[0] & 0x7;
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	781b      	ldrb	r3, [r3, #0]
 801aadc:	f003 0307 	and.w	r3, r3, #7
 801aae0:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	019a      	lsls	r2, r3, #6
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	3301      	adds	r3, #1
 801aaea:	781b      	ldrb	r3, [r3, #0]
 801aaec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aaf0:	4313      	orrs	r3, r2
 801aaf2:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	019a      	lsls	r2, r3, #6
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	3302      	adds	r3, #2
 801aafc:	781b      	ldrb	r3, [r3, #0]
 801aafe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ab02:	4313      	orrs	r3, r2
 801ab04:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[3] & 0x3F);
 801ab06:	68fb      	ldr	r3, [r7, #12]
 801ab08:	019a      	lsls	r2, r3, #6
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	3303      	adds	r3, #3
 801ab0e:	781b      	ldrb	r3, [r3, #0]
 801ab10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ab14:	4313      	orrs	r3, r2
 801ab16:	60fb      	str	r3, [r7, #12]
 801ab18:	e001      	b.n	801ab1e <verify_utf8_sequence+0x12e>
    } else {
        return 0;
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	e029      	b.n	801ab72 <verify_utf8_sequence+0x182>
    }

    /* overlong encodings */
    if ((cp < 0x80    && *len > 1) ||
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	2b7f      	cmp	r3, #127	; 0x7f
 801ab22:	d803      	bhi.n	801ab2c <verify_utf8_sequence+0x13c>
 801ab24:	683b      	ldr	r3, [r7, #0]
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	2b01      	cmp	r3, #1
 801ab2a:	dc0f      	bgt.n	801ab4c <verify_utf8_sequence+0x15c>
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ab32:	d203      	bcs.n	801ab3c <verify_utf8_sequence+0x14c>
        (cp < 0x800   && *len > 2) ||
 801ab34:	683b      	ldr	r3, [r7, #0]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	2b02      	cmp	r3, #2
 801ab3a:	dc07      	bgt.n	801ab4c <verify_utf8_sequence+0x15c>
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ab42:	d205      	bcs.n	801ab50 <verify_utf8_sequence+0x160>
        (cp < 0x10000 && *len > 3)) {
 801ab44:	683b      	ldr	r3, [r7, #0]
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	2b03      	cmp	r3, #3
 801ab4a:	dd01      	ble.n	801ab50 <verify_utf8_sequence+0x160>
        return 0;
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	e010      	b.n	801ab72 <verify_utf8_sequence+0x182>
    }

    /* invalid unicode */
    if (cp > 0x10FFFF) {
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 801ab56:	d301      	bcc.n	801ab5c <verify_utf8_sequence+0x16c>
        return 0;
 801ab58:	2300      	movs	r3, #0
 801ab5a:	e00a      	b.n	801ab72 <verify_utf8_sequence+0x182>
    }

    /* surrogate halves */
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801ab62:	d305      	bcc.n	801ab70 <verify_utf8_sequence+0x180>
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801ab6a:	d201      	bcs.n	801ab70 <verify_utf8_sequence+0x180>
        return 0;
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	e000      	b.n	801ab72 <verify_utf8_sequence+0x182>
    }

    return 1;
 801ab70:	2301      	movs	r3, #1
}
 801ab72:	4618      	mov	r0, r3
 801ab74:	3710      	adds	r7, #16
 801ab76:	46bd      	mov	sp, r7
 801ab78:	bd80      	pop	{r7, pc}

0801ab7a <is_valid_utf8>:

static int is_valid_utf8(const char *string, size_t string_len) {
 801ab7a:	b580      	push	{r7, lr}
 801ab7c:	b084      	sub	sp, #16
 801ab7e:	af00      	add	r7, sp, #0
 801ab80:	6078      	str	r0, [r7, #4]
 801ab82:	6039      	str	r1, [r7, #0]
    int len = 0;
 801ab84:	2300      	movs	r3, #0
 801ab86:	60bb      	str	r3, [r7, #8]
    const char *string_end =  string + string_len;
 801ab88:	687a      	ldr	r2, [r7, #4]
 801ab8a:	683b      	ldr	r3, [r7, #0]
 801ab8c:	4413      	add	r3, r2
 801ab8e:	60fb      	str	r3, [r7, #12]
    while (string < string_end) {
 801ab90:	e00f      	b.n	801abb2 <is_valid_utf8+0x38>
        if (!verify_utf8_sequence((const unsigned char*)string, &len)) {
 801ab92:	f107 0308 	add.w	r3, r7, #8
 801ab96:	4619      	mov	r1, r3
 801ab98:	6878      	ldr	r0, [r7, #4]
 801ab9a:	f7ff ff29 	bl	801a9f0 <verify_utf8_sequence>
 801ab9e:	4603      	mov	r3, r0
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d101      	bne.n	801aba8 <is_valid_utf8+0x2e>
            return 0;
 801aba4:	2300      	movs	r3, #0
 801aba6:	e009      	b.n	801abbc <is_valid_utf8+0x42>
        }
        string += len;
 801aba8:	68bb      	ldr	r3, [r7, #8]
 801abaa:	461a      	mov	r2, r3
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	4413      	add	r3, r2
 801abb0:	607b      	str	r3, [r7, #4]
    while (string < string_end) {
 801abb2:	687a      	ldr	r2, [r7, #4]
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	429a      	cmp	r2, r3
 801abb8:	d3eb      	bcc.n	801ab92 <is_valid_utf8+0x18>
    }
    return 1;
 801abba:	2301      	movs	r3, #1
}
 801abbc:	4618      	mov	r0, r3
 801abbe:	3710      	adds	r7, #16
 801abc0:	46bd      	mov	sp, r7
 801abc2:	bd80      	pop	{r7, pc}

0801abc4 <is_decimal>:

static int is_decimal(const char *string, size_t length) {
 801abc4:	b580      	push	{r7, lr}
 801abc6:	b082      	sub	sp, #8
 801abc8:	af00      	add	r7, sp, #0
 801abca:	6078      	str	r0, [r7, #4]
 801abcc:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 801abce:	683b      	ldr	r3, [r7, #0]
 801abd0:	2b01      	cmp	r3, #1
 801abd2:	d90a      	bls.n	801abea <is_decimal+0x26>
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	781b      	ldrb	r3, [r3, #0]
 801abd8:	2b30      	cmp	r3, #48	; 0x30
 801abda:	d106      	bne.n	801abea <is_decimal+0x26>
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	3301      	adds	r3, #1
 801abe0:	781b      	ldrb	r3, [r3, #0]
 801abe2:	2b2e      	cmp	r3, #46	; 0x2e
 801abe4:	d001      	beq.n	801abea <is_decimal+0x26>
        return 0;
 801abe6:	2300      	movs	r3, #0
 801abe8:	e024      	b.n	801ac34 <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 801abea:	683b      	ldr	r3, [r7, #0]
 801abec:	2b02      	cmp	r3, #2
 801abee:	d91b      	bls.n	801ac28 <is_decimal+0x64>
 801abf0:	2202      	movs	r2, #2
 801abf2:	4912      	ldr	r1, [pc, #72]	; (801ac3c <is_decimal+0x78>)
 801abf4:	6878      	ldr	r0, [r7, #4]
 801abf6:	f003 ff88 	bl	801eb0a <strncmp>
 801abfa:	4603      	mov	r3, r0
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d113      	bne.n	801ac28 <is_decimal+0x64>
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	3302      	adds	r3, #2
 801ac04:	781b      	ldrb	r3, [r3, #0]
 801ac06:	2b2e      	cmp	r3, #46	; 0x2e
 801ac08:	d00e      	beq.n	801ac28 <is_decimal+0x64>
        return 0;
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	e012      	b.n	801ac34 <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 801ac0e:	687a      	ldr	r2, [r7, #4]
 801ac10:	683b      	ldr	r3, [r7, #0]
 801ac12:	4413      	add	r3, r2
 801ac14:	781b      	ldrb	r3, [r3, #0]
 801ac16:	4619      	mov	r1, r3
 801ac18:	4809      	ldr	r0, [pc, #36]	; (801ac40 <is_decimal+0x7c>)
 801ac1a:	f003 ff69 	bl	801eaf0 <strchr>
 801ac1e:	4603      	mov	r3, r0
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d001      	beq.n	801ac28 <is_decimal+0x64>
            return 0;
 801ac24:	2300      	movs	r3, #0
 801ac26:	e005      	b.n	801ac34 <is_decimal+0x70>
    while (length--) {
 801ac28:	683b      	ldr	r3, [r7, #0]
 801ac2a:	1e5a      	subs	r2, r3, #1
 801ac2c:	603a      	str	r2, [r7, #0]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d1ed      	bne.n	801ac0e <is_decimal+0x4a>
        }
    }
    return 1;
 801ac32:	2301      	movs	r3, #1
}
 801ac34:	4618      	mov	r0, r3
 801ac36:	3708      	adds	r7, #8
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	bd80      	pop	{r7, pc}
 801ac3c:	08022624 	.word	0x08022624
 801ac40:	08022628 	.word	0x08022628

0801ac44 <json_object_init>:
        string++;
    }
}

/* JSON Object */
static JSON_Object * json_object_init(JSON_Value *wrapping_value) {
 801ac44:	b580      	push	{r7, lr}
 801ac46:	b084      	sub	sp, #16
 801ac48:	af00      	add	r7, sp, #0
 801ac4a:	6078      	str	r0, [r7, #4]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 801ac4c:	4b0e      	ldr	r3, [pc, #56]	; (801ac88 <json_object_init+0x44>)
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	2014      	movs	r0, #20
 801ac52:	4798      	blx	r3
 801ac54:	60f8      	str	r0, [r7, #12]
    if (new_obj == NULL) {
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d101      	bne.n	801ac60 <json_object_init+0x1c>
        return NULL;
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	e00f      	b.n	801ac80 <json_object_init+0x3c>
    }
    new_obj->wrapping_value = wrapping_value;
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	687a      	ldr	r2, [r7, #4]
 801ac64:	601a      	str	r2, [r3, #0]
    new_obj->names = (char**)NULL;
 801ac66:	68fb      	ldr	r3, [r7, #12]
 801ac68:	2200      	movs	r2, #0
 801ac6a:	605a      	str	r2, [r3, #4]
    new_obj->values = (JSON_Value**)NULL;
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	2200      	movs	r2, #0
 801ac70:	609a      	str	r2, [r3, #8]
    new_obj->capacity = 0;
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	2200      	movs	r2, #0
 801ac76:	611a      	str	r2, [r3, #16]
    new_obj->count = 0;
 801ac78:	68fb      	ldr	r3, [r7, #12]
 801ac7a:	2200      	movs	r2, #0
 801ac7c:	60da      	str	r2, [r3, #12]
    return new_obj;
 801ac7e:	68fb      	ldr	r3, [r7, #12]
}
 801ac80:	4618      	mov	r0, r3
 801ac82:	3710      	adds	r7, #16
 801ac84:	46bd      	mov	sp, r7
 801ac86:	bd80      	pop	{r7, pc}
 801ac88:	20000084 	.word	0x20000084

0801ac8c <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
 801ac8c:	b580      	push	{r7, lr}
 801ac8e:	b084      	sub	sp, #16
 801ac90:	af00      	add	r7, sp, #0
 801ac92:	60f8      	str	r0, [r7, #12]
 801ac94:	60b9      	str	r1, [r7, #8]
 801ac96:	607a      	str	r2, [r7, #4]
    if (name == NULL) {
 801ac98:	68bb      	ldr	r3, [r7, #8]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d102      	bne.n	801aca4 <json_object_add+0x18>
        return JSONFailure;
 801ac9e:	f04f 33ff 	mov.w	r3, #4294967295
 801aca2:	e009      	b.n	801acb8 <json_object_add+0x2c>
    }
    return json_object_addn(object, name, strlen(name), value);
 801aca4:	68b8      	ldr	r0, [r7, #8]
 801aca6:	f7e5 fab5 	bl	8000214 <strlen>
 801acaa:	4602      	mov	r2, r0
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	68b9      	ldr	r1, [r7, #8]
 801acb0:	68f8      	ldr	r0, [r7, #12]
 801acb2:	f000 f805 	bl	801acc0 <json_object_addn>
 801acb6:	4603      	mov	r3, r0
}
 801acb8:	4618      	mov	r0, r3
 801acba:	3710      	adds	r7, #16
 801acbc:	46bd      	mov	sp, r7
 801acbe:	bd80      	pop	{r7, pc}

0801acc0 <json_object_addn>:

static JSON_Status json_object_addn(JSON_Object *object, const char *name, size_t name_len, JSON_Value *value) {
 801acc0:	b590      	push	{r4, r7, lr}
 801acc2:	b087      	sub	sp, #28
 801acc4:	af00      	add	r7, sp, #0
 801acc6:	60f8      	str	r0, [r7, #12]
 801acc8:	60b9      	str	r1, [r7, #8]
 801acca:	607a      	str	r2, [r7, #4]
 801accc:	603b      	str	r3, [r7, #0]
    size_t index = 0;
 801acce:	2300      	movs	r3, #0
 801acd0:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d005      	beq.n	801ace4 <json_object_addn+0x24>
 801acd8:	68bb      	ldr	r3, [r7, #8]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d002      	beq.n	801ace4 <json_object_addn+0x24>
 801acde:	683b      	ldr	r3, [r7, #0]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d102      	bne.n	801acea <json_object_addn+0x2a>
        return JSONFailure;
 801ace4:	f04f 33ff 	mov.w	r3, #4294967295
 801ace8:	e04e      	b.n	801ad88 <json_object_addn+0xc8>
    }
    if (json_object_getn_value(object, name, name_len) != NULL) {
 801acea:	687a      	ldr	r2, [r7, #4]
 801acec:	68b9      	ldr	r1, [r7, #8]
 801acee:	68f8      	ldr	r0, [r7, #12]
 801acf0:	f000 f8c8 	bl	801ae84 <json_object_getn_value>
 801acf4:	4603      	mov	r3, r0
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d002      	beq.n	801ad00 <json_object_addn+0x40>
        return JSONFailure;
 801acfa:	f04f 33ff 	mov.w	r3, #4294967295
 801acfe:	e043      	b.n	801ad88 <json_object_addn+0xc8>
    }
    if (object->count >= object->capacity) {
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	68da      	ldr	r2, [r3, #12]
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	691b      	ldr	r3, [r3, #16]
 801ad08:	429a      	cmp	r2, r3
 801ad0a:	d311      	bcc.n	801ad30 <json_object_addn+0x70>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	691b      	ldr	r3, [r3, #16]
 801ad10:	005b      	lsls	r3, r3, #1
 801ad12:	2b10      	cmp	r3, #16
 801ad14:	bf38      	it	cc
 801ad16:	2310      	movcc	r3, #16
 801ad18:	613b      	str	r3, [r7, #16]
        if (json_object_resize(object, new_capacity) == JSONFailure) {
 801ad1a:	6939      	ldr	r1, [r7, #16]
 801ad1c:	68f8      	ldr	r0, [r7, #12]
 801ad1e:	f000 f837 	bl	801ad90 <json_object_resize>
 801ad22:	4603      	mov	r3, r0
 801ad24:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad28:	d102      	bne.n	801ad30 <json_object_addn+0x70>
            return JSONFailure;
 801ad2a:	f04f 33ff 	mov.w	r3, #4294967295
 801ad2e:	e02b      	b.n	801ad88 <json_object_addn+0xc8>
        }
    }
    index = object->count;
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	68db      	ldr	r3, [r3, #12]
 801ad34:	617b      	str	r3, [r7, #20]
    object->names[index] = parson_strndup(name, name_len);
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	685a      	ldr	r2, [r3, #4]
 801ad3a:	697b      	ldr	r3, [r7, #20]
 801ad3c:	009b      	lsls	r3, r3, #2
 801ad3e:	18d4      	adds	r4, r2, r3
 801ad40:	6879      	ldr	r1, [r7, #4]
 801ad42:	68b8      	ldr	r0, [r7, #8]
 801ad44:	f7ff fd7a 	bl	801a83c <parson_strndup>
 801ad48:	4603      	mov	r3, r0
 801ad4a:	6023      	str	r3, [r4, #0]
    if (object->names[index] == NULL) {
 801ad4c:	68fb      	ldr	r3, [r7, #12]
 801ad4e:	685a      	ldr	r2, [r3, #4]
 801ad50:	697b      	ldr	r3, [r7, #20]
 801ad52:	009b      	lsls	r3, r3, #2
 801ad54:	4413      	add	r3, r2
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d102      	bne.n	801ad62 <json_object_addn+0xa2>
        return JSONFailure;
 801ad5c:	f04f 33ff 	mov.w	r3, #4294967295
 801ad60:	e012      	b.n	801ad88 <json_object_addn+0xc8>
    }
    value->parent = json_object_get_wrapping_value(object);
 801ad62:	68f8      	ldr	r0, [r7, #12]
 801ad64:	f002 f8c2 	bl	801ceec <json_object_get_wrapping_value>
 801ad68:	4602      	mov	r2, r0
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	601a      	str	r2, [r3, #0]
    object->values[index] = value;
 801ad6e:	68fb      	ldr	r3, [r7, #12]
 801ad70:	689a      	ldr	r2, [r3, #8]
 801ad72:	697b      	ldr	r3, [r7, #20]
 801ad74:	009b      	lsls	r3, r3, #2
 801ad76:	4413      	add	r3, r2
 801ad78:	683a      	ldr	r2, [r7, #0]
 801ad7a:	601a      	str	r2, [r3, #0]
    object->count++;
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	68db      	ldr	r3, [r3, #12]
 801ad80:	1c5a      	adds	r2, r3, #1
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801ad86:	2300      	movs	r3, #0
}
 801ad88:	4618      	mov	r0, r3
 801ad8a:	371c      	adds	r7, #28
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	bd90      	pop	{r4, r7, pc}

0801ad90 <json_object_resize>:

static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b084      	sub	sp, #16
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
 801ad98:	6039      	str	r1, [r7, #0]
    char **temp_names = NULL;
 801ad9a:	2300      	movs	r3, #0
 801ad9c:	60fb      	str	r3, [r7, #12]
    JSON_Value **temp_values = NULL;
 801ad9e:	2300      	movs	r3, #0
 801ada0:	60bb      	str	r3, [r7, #8]

    if ((object->names == NULL && object->values != NULL) ||
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	685b      	ldr	r3, [r3, #4]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d103      	bne.n	801adb2 <json_object_resize+0x22>
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	689b      	ldr	r3, [r3, #8]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d10a      	bne.n	801adc8 <json_object_resize+0x38>
        (object->names != NULL && object->values == NULL) ||
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	685b      	ldr	r3, [r3, #4]
    if ((object->names == NULL && object->values != NULL) ||
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d003      	beq.n	801adc2 <json_object_resize+0x32>
        (object->names != NULL && object->values == NULL) ||
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	689b      	ldr	r3, [r3, #8]
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	d002      	beq.n	801adc8 <json_object_resize+0x38>
 801adc2:	683b      	ldr	r3, [r7, #0]
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d102      	bne.n	801adce <json_object_resize+0x3e>
        new_capacity == 0) {
            return JSONFailure; /* Shouldn't happen */
 801adc8:	f04f 33ff 	mov.w	r3, #4294967295
 801adcc:	e051      	b.n	801ae72 <json_object_resize+0xe2>
    }
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
 801adce:	4b2b      	ldr	r3, [pc, #172]	; (801ae7c <json_object_resize+0xec>)
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	683a      	ldr	r2, [r7, #0]
 801add4:	0092      	lsls	r2, r2, #2
 801add6:	4610      	mov	r0, r2
 801add8:	4798      	blx	r3
 801adda:	60f8      	str	r0, [r7, #12]
    if (temp_names == NULL) {
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d102      	bne.n	801ade8 <json_object_resize+0x58>
        return JSONFailure;
 801ade2:	f04f 33ff 	mov.w	r3, #4294967295
 801ade6:	e044      	b.n	801ae72 <json_object_resize+0xe2>
    }
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801ade8:	4b24      	ldr	r3, [pc, #144]	; (801ae7c <json_object_resize+0xec>)
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	683a      	ldr	r2, [r7, #0]
 801adee:	0092      	lsls	r2, r2, #2
 801adf0:	4610      	mov	r0, r2
 801adf2:	4798      	blx	r3
 801adf4:	60b8      	str	r0, [r7, #8]
    if (temp_values == NULL) {
 801adf6:	68bb      	ldr	r3, [r7, #8]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d106      	bne.n	801ae0a <json_object_resize+0x7a>
        parson_free(temp_names);
 801adfc:	4b20      	ldr	r3, [pc, #128]	; (801ae80 <json_object_resize+0xf0>)
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	68f8      	ldr	r0, [r7, #12]
 801ae02:	4798      	blx	r3
        return JSONFailure;
 801ae04:	f04f 33ff 	mov.w	r3, #4294967295
 801ae08:	e033      	b.n	801ae72 <json_object_resize+0xe2>
    }
    if (object->names != NULL && object->values != NULL && object->count > 0) {
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	685b      	ldr	r3, [r3, #4]
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d019      	beq.n	801ae46 <json_object_resize+0xb6>
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	689b      	ldr	r3, [r3, #8]
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d015      	beq.n	801ae46 <json_object_resize+0xb6>
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	68db      	ldr	r3, [r3, #12]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d011      	beq.n	801ae46 <json_object_resize+0xb6>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	6859      	ldr	r1, [r3, #4]
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	68db      	ldr	r3, [r3, #12]
 801ae2a:	009b      	lsls	r3, r3, #2
 801ae2c:	461a      	mov	r2, r3
 801ae2e:	68f8      	ldr	r0, [r7, #12]
 801ae30:	f003 f888 	bl	801df44 <memcpy>
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	6899      	ldr	r1, [r3, #8]
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	68db      	ldr	r3, [r3, #12]
 801ae3c:	009b      	lsls	r3, r3, #2
 801ae3e:	461a      	mov	r2, r3
 801ae40:	68b8      	ldr	r0, [r7, #8]
 801ae42:	f003 f87f 	bl	801df44 <memcpy>
    }
    parson_free(object->names);
 801ae46:	4b0e      	ldr	r3, [pc, #56]	; (801ae80 <json_object_resize+0xf0>)
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	687a      	ldr	r2, [r7, #4]
 801ae4c:	6852      	ldr	r2, [r2, #4]
 801ae4e:	4610      	mov	r0, r2
 801ae50:	4798      	blx	r3
    parson_free(object->values);
 801ae52:	4b0b      	ldr	r3, [pc, #44]	; (801ae80 <json_object_resize+0xf0>)
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	687a      	ldr	r2, [r7, #4]
 801ae58:	6892      	ldr	r2, [r2, #8]
 801ae5a:	4610      	mov	r0, r2
 801ae5c:	4798      	blx	r3
    object->names = temp_names;
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	68fa      	ldr	r2, [r7, #12]
 801ae62:	605a      	str	r2, [r3, #4]
    object->values = temp_values;
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	68ba      	ldr	r2, [r7, #8]
 801ae68:	609a      	str	r2, [r3, #8]
    object->capacity = new_capacity;
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	683a      	ldr	r2, [r7, #0]
 801ae6e:	611a      	str	r2, [r3, #16]
    return JSONSuccess;
 801ae70:	2300      	movs	r3, #0
}
 801ae72:	4618      	mov	r0, r3
 801ae74:	3710      	adds	r7, #16
 801ae76:	46bd      	mov	sp, r7
 801ae78:	bd80      	pop	{r7, pc}
 801ae7a:	bf00      	nop
 801ae7c:	20000084 	.word	0x20000084
 801ae80:	20000088 	.word	0x20000088

0801ae84 <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 801ae84:	b580      	push	{r7, lr}
 801ae86:	b086      	sub	sp, #24
 801ae88:	af00      	add	r7, sp, #0
 801ae8a:	60f8      	str	r0, [r7, #12]
 801ae8c:	60b9      	str	r1, [r7, #8]
 801ae8e:	607a      	str	r2, [r7, #4]
    size_t i, name_length;
    for (i = 0; i < json_object_get_count(object); i++) {
 801ae90:	2300      	movs	r3, #0
 801ae92:	617b      	str	r3, [r7, #20]
 801ae94:	e026      	b.n	801aee4 <json_object_getn_value+0x60>
        name_length = strlen(object->names[i]);
 801ae96:	68fb      	ldr	r3, [r7, #12]
 801ae98:	685a      	ldr	r2, [r3, #4]
 801ae9a:	697b      	ldr	r3, [r7, #20]
 801ae9c:	009b      	lsls	r3, r3, #2
 801ae9e:	4413      	add	r3, r2
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	4618      	mov	r0, r3
 801aea4:	f7e5 f9b6 	bl	8000214 <strlen>
 801aea8:	6138      	str	r0, [r7, #16]
        if (name_length != name_len) {
 801aeaa:	693a      	ldr	r2, [r7, #16]
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	429a      	cmp	r2, r3
 801aeb0:	d114      	bne.n	801aedc <json_object_getn_value+0x58>
            continue;
        }
        if (strncmp(object->names[i], name, name_len) == 0) {
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	685a      	ldr	r2, [r3, #4]
 801aeb6:	697b      	ldr	r3, [r7, #20]
 801aeb8:	009b      	lsls	r3, r3, #2
 801aeba:	4413      	add	r3, r2
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	687a      	ldr	r2, [r7, #4]
 801aec0:	68b9      	ldr	r1, [r7, #8]
 801aec2:	4618      	mov	r0, r3
 801aec4:	f003 fe21 	bl	801eb0a <strncmp>
 801aec8:	4603      	mov	r3, r0
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d107      	bne.n	801aede <json_object_getn_value+0x5a>
            return object->values[i];
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	689a      	ldr	r2, [r3, #8]
 801aed2:	697b      	ldr	r3, [r7, #20]
 801aed4:	009b      	lsls	r3, r3, #2
 801aed6:	4413      	add	r3, r2
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	e00b      	b.n	801aef4 <json_object_getn_value+0x70>
            continue;
 801aedc:	bf00      	nop
    for (i = 0; i < json_object_get_count(object); i++) {
 801aede:	697b      	ldr	r3, [r7, #20]
 801aee0:	3301      	adds	r3, #1
 801aee2:	617b      	str	r3, [r7, #20]
 801aee4:	68f8      	ldr	r0, [r7, #12]
 801aee6:	f001 ffd5 	bl	801ce94 <json_object_get_count>
 801aeea:	4602      	mov	r2, r0
 801aeec:	697b      	ldr	r3, [r7, #20]
 801aeee:	4293      	cmp	r3, r2
 801aef0:	d3d1      	bcc.n	801ae96 <json_object_getn_value+0x12>
        }
    }
    return NULL;
 801aef2:	2300      	movs	r3, #0
}
 801aef4:	4618      	mov	r0, r3
 801aef6:	3718      	adds	r7, #24
 801aef8:	46bd      	mov	sp, r7
 801aefa:	bd80      	pop	{r7, pc}

0801aefc <json_object_remove_internal>:

static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, int free_value) {
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b086      	sub	sp, #24
 801af00:	af00      	add	r7, sp, #0
 801af02:	60f8      	str	r0, [r7, #12]
 801af04:	60b9      	str	r1, [r7, #8]
 801af06:	607a      	str	r2, [r7, #4]
    size_t i = 0, last_item_index = 0;
 801af08:	2300      	movs	r3, #0
 801af0a:	617b      	str	r3, [r7, #20]
 801af0c:	2300      	movs	r3, #0
 801af0e:	613b      	str	r3, [r7, #16]
    if (object == NULL || json_object_get_value(object, name) == NULL) {
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	2b00      	cmp	r3, #0
 801af14:	d006      	beq.n	801af24 <json_object_remove_internal+0x28>
 801af16:	68b9      	ldr	r1, [r7, #8]
 801af18:	68f8      	ldr	r0, [r7, #12]
 801af1a:	f001 ff39 	bl	801cd90 <json_object_get_value>
 801af1e:	4603      	mov	r3, r0
 801af20:	2b00      	cmp	r3, #0
 801af22:	d102      	bne.n	801af2a <json_object_remove_internal+0x2e>
        return JSONFailure;
 801af24:	f04f 33ff 	mov.w	r3, #4294967295
 801af28:	e05a      	b.n	801afe0 <json_object_remove_internal+0xe4>
    }
    last_item_index = json_object_get_count(object) - 1;
 801af2a:	68f8      	ldr	r0, [r7, #12]
 801af2c:	f001 ffb2 	bl	801ce94 <json_object_get_count>
 801af30:	4603      	mov	r3, r0
 801af32:	3b01      	subs	r3, #1
 801af34:	613b      	str	r3, [r7, #16]
    for (i = 0; i < json_object_get_count(object); i++) {
 801af36:	2300      	movs	r3, #0
 801af38:	617b      	str	r3, [r7, #20]
 801af3a:	e048      	b.n	801afce <json_object_remove_internal+0xd2>
        if (strcmp(object->names[i], name) == 0) {
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	685a      	ldr	r2, [r3, #4]
 801af40:	697b      	ldr	r3, [r7, #20]
 801af42:	009b      	lsls	r3, r3, #2
 801af44:	4413      	add	r3, r2
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	68b9      	ldr	r1, [r7, #8]
 801af4a:	4618      	mov	r0, r3
 801af4c:	f7e5 f958 	bl	8000200 <strcmp>
 801af50:	4603      	mov	r3, r0
 801af52:	2b00      	cmp	r3, #0
 801af54:	d138      	bne.n	801afc8 <json_object_remove_internal+0xcc>
            parson_free(object->names[i]);
 801af56:	4b24      	ldr	r3, [pc, #144]	; (801afe8 <json_object_remove_internal+0xec>)
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	68fa      	ldr	r2, [r7, #12]
 801af5c:	6851      	ldr	r1, [r2, #4]
 801af5e:	697a      	ldr	r2, [r7, #20]
 801af60:	0092      	lsls	r2, r2, #2
 801af62:	440a      	add	r2, r1
 801af64:	6812      	ldr	r2, [r2, #0]
 801af66:	4610      	mov	r0, r2
 801af68:	4798      	blx	r3
            if (free_value) {
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d008      	beq.n	801af82 <json_object_remove_internal+0x86>
                json_value_free(object->values[i]);
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	689a      	ldr	r2, [r3, #8]
 801af74:	697b      	ldr	r3, [r7, #20]
 801af76:	009b      	lsls	r3, r3, #2
 801af78:	4413      	add	r3, r2
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	4618      	mov	r0, r3
 801af7e:	f002 f895 	bl	801d0ac <json_value_free>
            }
            if (i != last_item_index) { /* Replace key value pair with one from the end */
 801af82:	697a      	ldr	r2, [r7, #20]
 801af84:	693b      	ldr	r3, [r7, #16]
 801af86:	429a      	cmp	r2, r3
 801af88:	d017      	beq.n	801afba <json_object_remove_internal+0xbe>
                object->names[i] = object->names[last_item_index];
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	685a      	ldr	r2, [r3, #4]
 801af8e:	693b      	ldr	r3, [r7, #16]
 801af90:	009b      	lsls	r3, r3, #2
 801af92:	441a      	add	r2, r3
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	6859      	ldr	r1, [r3, #4]
 801af98:	697b      	ldr	r3, [r7, #20]
 801af9a:	009b      	lsls	r3, r3, #2
 801af9c:	440b      	add	r3, r1
 801af9e:	6812      	ldr	r2, [r2, #0]
 801afa0:	601a      	str	r2, [r3, #0]
                object->values[i] = object->values[last_item_index];
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	689a      	ldr	r2, [r3, #8]
 801afa6:	693b      	ldr	r3, [r7, #16]
 801afa8:	009b      	lsls	r3, r3, #2
 801afaa:	441a      	add	r2, r3
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	6899      	ldr	r1, [r3, #8]
 801afb0:	697b      	ldr	r3, [r7, #20]
 801afb2:	009b      	lsls	r3, r3, #2
 801afb4:	440b      	add	r3, r1
 801afb6:	6812      	ldr	r2, [r2, #0]
 801afb8:	601a      	str	r2, [r3, #0]
            }
            object->count -= 1;
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	68db      	ldr	r3, [r3, #12]
 801afbe:	1e5a      	subs	r2, r3, #1
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	60da      	str	r2, [r3, #12]
            return JSONSuccess;
 801afc4:	2300      	movs	r3, #0
 801afc6:	e00b      	b.n	801afe0 <json_object_remove_internal+0xe4>
    for (i = 0; i < json_object_get_count(object); i++) {
 801afc8:	697b      	ldr	r3, [r7, #20]
 801afca:	3301      	adds	r3, #1
 801afcc:	617b      	str	r3, [r7, #20]
 801afce:	68f8      	ldr	r0, [r7, #12]
 801afd0:	f001 ff60 	bl	801ce94 <json_object_get_count>
 801afd4:	4602      	mov	r2, r0
 801afd6:	697b      	ldr	r3, [r7, #20]
 801afd8:	4293      	cmp	r3, r2
 801afda:	d3af      	bcc.n	801af3c <json_object_remove_internal+0x40>
        }
    }
    return JSONFailure; /* No execution path should end here */
 801afdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801afe0:	4618      	mov	r0, r3
 801afe2:	3718      	adds	r7, #24
 801afe4:	46bd      	mov	sp, r7
 801afe6:	bd80      	pop	{r7, pc}
 801afe8:	20000088 	.word	0x20000088

0801afec <json_object_dotremove_internal>:

static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, int free_value) {
 801afec:	b580      	push	{r7, lr}
 801afee:	b088      	sub	sp, #32
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	60f8      	str	r0, [r7, #12]
 801aff4:	60b9      	str	r1, [r7, #8]
 801aff6:	607a      	str	r2, [r7, #4]
    JSON_Value *temp_value = NULL;
 801aff8:	2300      	movs	r3, #0
 801affa:	61fb      	str	r3, [r7, #28]
    JSON_Object *temp_object = NULL;
 801affc:	2300      	movs	r3, #0
 801affe:	61bb      	str	r3, [r7, #24]
    const char *dot_pos = strchr(name, '.');
 801b000:	212e      	movs	r1, #46	; 0x2e
 801b002:	68b8      	ldr	r0, [r7, #8]
 801b004:	f003 fd74 	bl	801eaf0 <strchr>
 801b008:	6178      	str	r0, [r7, #20]
    if (dot_pos == NULL) {
 801b00a:	697b      	ldr	r3, [r7, #20]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d106      	bne.n	801b01e <json_object_dotremove_internal+0x32>
        return json_object_remove_internal(object, name, free_value);
 801b010:	687a      	ldr	r2, [r7, #4]
 801b012:	68b9      	ldr	r1, [r7, #8]
 801b014:	68f8      	ldr	r0, [r7, #12]
 801b016:	f7ff ff71 	bl	801aefc <json_object_remove_internal>
 801b01a:	4603      	mov	r3, r0
 801b01c:	e01d      	b.n	801b05a <json_object_dotremove_internal+0x6e>
    }
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 801b01e:	697a      	ldr	r2, [r7, #20]
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	1ad3      	subs	r3, r2, r3
 801b024:	461a      	mov	r2, r3
 801b026:	68b9      	ldr	r1, [r7, #8]
 801b028:	68f8      	ldr	r0, [r7, #12]
 801b02a:	f7ff ff2b 	bl	801ae84 <json_object_getn_value>
 801b02e:	61f8      	str	r0, [r7, #28]
    if (json_value_get_type(temp_value) != JSONObject) {
 801b030:	69f8      	ldr	r0, [r7, #28]
 801b032:	f001 ffc4 	bl	801cfbe <json_value_get_type>
 801b036:	4603      	mov	r3, r0
 801b038:	2b04      	cmp	r3, #4
 801b03a:	d002      	beq.n	801b042 <json_object_dotremove_internal+0x56>
        return JSONFailure;
 801b03c:	f04f 33ff 	mov.w	r3, #4294967295
 801b040:	e00b      	b.n	801b05a <json_object_dotremove_internal+0x6e>
    }
    temp_object = json_value_get_object(temp_value);
 801b042:	69f8      	ldr	r0, [r7, #28]
 801b044:	f001 ffcd 	bl	801cfe2 <json_value_get_object>
 801b048:	61b8      	str	r0, [r7, #24]
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 801b04a:	697b      	ldr	r3, [r7, #20]
 801b04c:	3301      	adds	r3, #1
 801b04e:	687a      	ldr	r2, [r7, #4]
 801b050:	4619      	mov	r1, r3
 801b052:	69b8      	ldr	r0, [r7, #24]
 801b054:	f7ff ffca 	bl	801afec <json_object_dotremove_internal>
 801b058:	4603      	mov	r3, r0
}
 801b05a:	4618      	mov	r0, r3
 801b05c:	3720      	adds	r7, #32
 801b05e:	46bd      	mov	sp, r7
 801b060:	bd80      	pop	{r7, pc}
	...

0801b064 <json_object_free>:

static void json_object_free(JSON_Object *object) {
 801b064:	b580      	push	{r7, lr}
 801b066:	b084      	sub	sp, #16
 801b068:	af00      	add	r7, sp, #0
 801b06a:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < object->count; i++) {
 801b06c:	2300      	movs	r3, #0
 801b06e:	60fb      	str	r3, [r7, #12]
 801b070:	e015      	b.n	801b09e <json_object_free+0x3a>
        parson_free(object->names[i]);
 801b072:	4b17      	ldr	r3, [pc, #92]	; (801b0d0 <json_object_free+0x6c>)
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	687a      	ldr	r2, [r7, #4]
 801b078:	6851      	ldr	r1, [r2, #4]
 801b07a:	68fa      	ldr	r2, [r7, #12]
 801b07c:	0092      	lsls	r2, r2, #2
 801b07e:	440a      	add	r2, r1
 801b080:	6812      	ldr	r2, [r2, #0]
 801b082:	4610      	mov	r0, r2
 801b084:	4798      	blx	r3
        json_value_free(object->values[i]);
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	689a      	ldr	r2, [r3, #8]
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	009b      	lsls	r3, r3, #2
 801b08e:	4413      	add	r3, r2
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	4618      	mov	r0, r3
 801b094:	f002 f80a 	bl	801d0ac <json_value_free>
    for (i = 0; i < object->count; i++) {
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	3301      	adds	r3, #1
 801b09c:	60fb      	str	r3, [r7, #12]
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	68db      	ldr	r3, [r3, #12]
 801b0a2:	68fa      	ldr	r2, [r7, #12]
 801b0a4:	429a      	cmp	r2, r3
 801b0a6:	d3e4      	bcc.n	801b072 <json_object_free+0xe>
    }
    parson_free(object->names);
 801b0a8:	4b09      	ldr	r3, [pc, #36]	; (801b0d0 <json_object_free+0x6c>)
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	687a      	ldr	r2, [r7, #4]
 801b0ae:	6852      	ldr	r2, [r2, #4]
 801b0b0:	4610      	mov	r0, r2
 801b0b2:	4798      	blx	r3
    parson_free(object->values);
 801b0b4:	4b06      	ldr	r3, [pc, #24]	; (801b0d0 <json_object_free+0x6c>)
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	687a      	ldr	r2, [r7, #4]
 801b0ba:	6892      	ldr	r2, [r2, #8]
 801b0bc:	4610      	mov	r0, r2
 801b0be:	4798      	blx	r3
    parson_free(object);
 801b0c0:	4b03      	ldr	r3, [pc, #12]	; (801b0d0 <json_object_free+0x6c>)
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	6878      	ldr	r0, [r7, #4]
 801b0c6:	4798      	blx	r3
}
 801b0c8:	bf00      	nop
 801b0ca:	3710      	adds	r7, #16
 801b0cc:	46bd      	mov	sp, r7
 801b0ce:	bd80      	pop	{r7, pc}
 801b0d0:	20000088 	.word	0x20000088

0801b0d4 <json_array_init>:

/* JSON Array */
static JSON_Array * json_array_init(JSON_Value *wrapping_value) {
 801b0d4:	b580      	push	{r7, lr}
 801b0d6:	b084      	sub	sp, #16
 801b0d8:	af00      	add	r7, sp, #0
 801b0da:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 801b0dc:	4b0d      	ldr	r3, [pc, #52]	; (801b114 <json_array_init+0x40>)
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	2010      	movs	r0, #16
 801b0e2:	4798      	blx	r3
 801b0e4:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d101      	bne.n	801b0f0 <json_array_init+0x1c>
        return NULL;
 801b0ec:	2300      	movs	r3, #0
 801b0ee:	e00c      	b.n	801b10a <json_array_init+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	687a      	ldr	r2, [r7, #4]
 801b0f4:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	2200      	movs	r2, #0
 801b0fa:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	2200      	movs	r2, #0
 801b100:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 801b102:	68fb      	ldr	r3, [r7, #12]
 801b104:	2200      	movs	r2, #0
 801b106:	609a      	str	r2, [r3, #8]
    return new_array;
 801b108:	68fb      	ldr	r3, [r7, #12]
}
 801b10a:	4618      	mov	r0, r3
 801b10c:	3710      	adds	r7, #16
 801b10e:	46bd      	mov	sp, r7
 801b110:	bd80      	pop	{r7, pc}
 801b112:	bf00      	nop
 801b114:	20000084 	.word	0x20000084

0801b118 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 801b118:	b580      	push	{r7, lr}
 801b11a:	b084      	sub	sp, #16
 801b11c:	af00      	add	r7, sp, #0
 801b11e:	6078      	str	r0, [r7, #4]
 801b120:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	689a      	ldr	r2, [r3, #8]
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	68db      	ldr	r3, [r3, #12]
 801b12a:	429a      	cmp	r2, r3
 801b12c:	d311      	bcc.n	801b152 <json_array_add+0x3a>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	68db      	ldr	r3, [r3, #12]
 801b132:	005b      	lsls	r3, r3, #1
 801b134:	2b10      	cmp	r3, #16
 801b136:	bf38      	it	cc
 801b138:	2310      	movcc	r3, #16
 801b13a:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) == JSONFailure) {
 801b13c:	68f9      	ldr	r1, [r7, #12]
 801b13e:	6878      	ldr	r0, [r7, #4]
 801b140:	f000 f820 	bl	801b184 <json_array_resize>
 801b144:	4603      	mov	r3, r0
 801b146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b14a:	d102      	bne.n	801b152 <json_array_add+0x3a>
            return JSONFailure;
 801b14c:	f04f 33ff 	mov.w	r3, #4294967295
 801b150:	e013      	b.n	801b17a <json_array_add+0x62>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 801b152:	6878      	ldr	r0, [r7, #4]
 801b154:	f001 ff27 	bl	801cfa6 <json_array_get_wrapping_value>
 801b158:	4602      	mov	r2, r0
 801b15a:	683b      	ldr	r3, [r7, #0]
 801b15c:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	685a      	ldr	r2, [r3, #4]
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	689b      	ldr	r3, [r3, #8]
 801b166:	009b      	lsls	r3, r3, #2
 801b168:	4413      	add	r3, r2
 801b16a:	683a      	ldr	r2, [r7, #0]
 801b16c:	601a      	str	r2, [r3, #0]
    array->count++;
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	689b      	ldr	r3, [r3, #8]
 801b172:	1c5a      	adds	r2, r3, #1
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 801b178:	2300      	movs	r3, #0
}
 801b17a:	4618      	mov	r0, r3
 801b17c:	3710      	adds	r7, #16
 801b17e:	46bd      	mov	sp, r7
 801b180:	bd80      	pop	{r7, pc}
	...

0801b184 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 801b184:	b580      	push	{r7, lr}
 801b186:	b084      	sub	sp, #16
 801b188:	af00      	add	r7, sp, #0
 801b18a:	6078      	str	r0, [r7, #4]
 801b18c:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 801b18e:	2300      	movs	r3, #0
 801b190:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 801b192:	683b      	ldr	r3, [r7, #0]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d102      	bne.n	801b19e <json_array_resize+0x1a>
        return JSONFailure;
 801b198:	f04f 33ff 	mov.w	r3, #4294967295
 801b19c:	e02a      	b.n	801b1f4 <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801b19e:	4b17      	ldr	r3, [pc, #92]	; (801b1fc <json_array_resize+0x78>)
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	683a      	ldr	r2, [r7, #0]
 801b1a4:	0092      	lsls	r2, r2, #2
 801b1a6:	4610      	mov	r0, r2
 801b1a8:	4798      	blx	r3
 801b1aa:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d102      	bne.n	801b1b8 <json_array_resize+0x34>
        return JSONFailure;
 801b1b2:	f04f 33ff 	mov.w	r3, #4294967295
 801b1b6:	e01d      	b.n	801b1f4 <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	685b      	ldr	r3, [r3, #4]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d00c      	beq.n	801b1da <json_array_resize+0x56>
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	689b      	ldr	r3, [r3, #8]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d008      	beq.n	801b1da <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	6859      	ldr	r1, [r3, #4]
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	689b      	ldr	r3, [r3, #8]
 801b1d0:	009b      	lsls	r3, r3, #2
 801b1d2:	461a      	mov	r2, r3
 801b1d4:	68f8      	ldr	r0, [r7, #12]
 801b1d6:	f002 feb5 	bl	801df44 <memcpy>
    }
    parson_free(array->items);
 801b1da:	4b09      	ldr	r3, [pc, #36]	; (801b200 <json_array_resize+0x7c>)
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	687a      	ldr	r2, [r7, #4]
 801b1e0:	6852      	ldr	r2, [r2, #4]
 801b1e2:	4610      	mov	r0, r2
 801b1e4:	4798      	blx	r3
    array->items = new_items;
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	68fa      	ldr	r2, [r7, #12]
 801b1ea:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	683a      	ldr	r2, [r7, #0]
 801b1f0:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801b1f2:	2300      	movs	r3, #0
}
 801b1f4:	4618      	mov	r0, r3
 801b1f6:	3710      	adds	r7, #16
 801b1f8:	46bd      	mov	sp, r7
 801b1fa:	bd80      	pop	{r7, pc}
 801b1fc:	20000084 	.word	0x20000084
 801b200:	20000088 	.word	0x20000088

0801b204 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 801b204:	b580      	push	{r7, lr}
 801b206:	b084      	sub	sp, #16
 801b208:	af00      	add	r7, sp, #0
 801b20a:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 801b20c:	2300      	movs	r3, #0
 801b20e:	60fb      	str	r3, [r7, #12]
 801b210:	e00b      	b.n	801b22a <json_array_free+0x26>
        json_value_free(array->items[i]);
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	685a      	ldr	r2, [r3, #4]
 801b216:	68fb      	ldr	r3, [r7, #12]
 801b218:	009b      	lsls	r3, r3, #2
 801b21a:	4413      	add	r3, r2
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	4618      	mov	r0, r3
 801b220:	f001 ff44 	bl	801d0ac <json_value_free>
    for (i = 0; i < array->count; i++) {
 801b224:	68fb      	ldr	r3, [r7, #12]
 801b226:	3301      	adds	r3, #1
 801b228:	60fb      	str	r3, [r7, #12]
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	689b      	ldr	r3, [r3, #8]
 801b22e:	68fa      	ldr	r2, [r7, #12]
 801b230:	429a      	cmp	r2, r3
 801b232:	d3ee      	bcc.n	801b212 <json_array_free+0xe>
    }
    parson_free(array->items);
 801b234:	4b06      	ldr	r3, [pc, #24]	; (801b250 <json_array_free+0x4c>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	687a      	ldr	r2, [r7, #4]
 801b23a:	6852      	ldr	r2, [r2, #4]
 801b23c:	4610      	mov	r0, r2
 801b23e:	4798      	blx	r3
    parson_free(array);
 801b240:	4b03      	ldr	r3, [pc, #12]	; (801b250 <json_array_free+0x4c>)
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	6878      	ldr	r0, [r7, #4]
 801b246:	4798      	blx	r3
}
 801b248:	bf00      	nop
 801b24a:	3710      	adds	r7, #16
 801b24c:	46bd      	mov	sp, r7
 801b24e:	bd80      	pop	{r7, pc}
 801b250:	20000088 	.word	0x20000088

0801b254 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string) {
 801b254:	b580      	push	{r7, lr}
 801b256:	b084      	sub	sp, #16
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801b25c:	4b0b      	ldr	r3, [pc, #44]	; (801b28c <json_value_init_string_no_copy+0x38>)
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	2010      	movs	r0, #16
 801b262:	4798      	blx	r3
 801b264:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d101      	bne.n	801b270 <json_value_init_string_no_copy+0x1c>
        return NULL;
 801b26c:	2300      	movs	r3, #0
 801b26e:	e009      	b.n	801b284 <json_value_init_string_no_copy+0x30>
    }
    new_value->parent = NULL;
 801b270:	68fb      	ldr	r3, [r7, #12]
 801b272:	2200      	movs	r2, #0
 801b274:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	2202      	movs	r2, #2
 801b27a:	605a      	str	r2, [r3, #4]
    new_value->value.string = string;
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	687a      	ldr	r2, [r7, #4]
 801b280:	609a      	str	r2, [r3, #8]
    return new_value;
 801b282:	68fb      	ldr	r3, [r7, #12]
}
 801b284:	4618      	mov	r0, r3
 801b286:	3710      	adds	r7, #16
 801b288:	46bd      	mov	sp, r7
 801b28a:	bd80      	pop	{r7, pc}
 801b28c:	20000084 	.word	0x20000084

0801b290 <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 801b290:	b480      	push	{r7}
 801b292:	b083      	sub	sp, #12
 801b294:	af00      	add	r7, sp, #0
 801b296:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	781b      	ldrb	r3, [r3, #0]
 801b29e:	2b22      	cmp	r3, #34	; 0x22
 801b2a0:	d002      	beq.n	801b2a8 <skip_quotes+0x18>
        return JSONFailure;
 801b2a2:	f04f 33ff 	mov.w	r3, #4294967295
 801b2a6:	e02f      	b.n	801b308 <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	1c5a      	adds	r2, r3, #1
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801b2b2:	e01e      	b.n	801b2f2 <skip_quotes+0x62>
        if (**string == '\0') {
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	781b      	ldrb	r3, [r3, #0]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d102      	bne.n	801b2c4 <skip_quotes+0x34>
            return JSONFailure;
 801b2be:	f04f 33ff 	mov.w	r3, #4294967295
 801b2c2:	e021      	b.n	801b308 <skip_quotes+0x78>
        } else if (**string == '\\') {
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	781b      	ldrb	r3, [r3, #0]
 801b2ca:	2b5c      	cmp	r3, #92	; 0x5c
 801b2cc:	d10c      	bne.n	801b2e8 <skip_quotes+0x58>
            SKIP_CHAR(string);
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	1c5a      	adds	r2, r3, #1
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	781b      	ldrb	r3, [r3, #0]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d102      	bne.n	801b2e8 <skip_quotes+0x58>
                return JSONFailure;
 801b2e2:	f04f 33ff 	mov.w	r3, #4294967295
 801b2e6:	e00f      	b.n	801b308 <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	1c5a      	adds	r2, r3, #1
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	781b      	ldrb	r3, [r3, #0]
 801b2f8:	2b22      	cmp	r3, #34	; 0x22
 801b2fa:	d1db      	bne.n	801b2b4 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	1c5a      	adds	r2, r3, #1
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801b306:	2300      	movs	r3, #0
}
 801b308:	4618      	mov	r0, r3
 801b30a:	370c      	adds	r7, #12
 801b30c:	46bd      	mov	sp, r7
 801b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b312:	4770      	bx	lr

0801b314 <parse_utf16>:

static int parse_utf16(const char **unprocessed, char **processed) {
 801b314:	b580      	push	{r7, lr}
 801b316:	b088      	sub	sp, #32
 801b318:	af00      	add	r7, sp, #0
 801b31a:	6078      	str	r0, [r7, #4]
 801b31c:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    int parse_succeeded = 0;
 801b31e:	2300      	movs	r3, #0
 801b320:	617b      	str	r3, [r7, #20]
    char *processed_ptr = *processed;
 801b322:	683b      	ldr	r3, [r7, #0]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	61bb      	str	r3, [r7, #24]
    unprocessed_ptr++; /* skips u */
 801b32e:	69bb      	ldr	r3, [r7, #24]
 801b330:	3301      	adds	r3, #1
 801b332:	61bb      	str	r3, [r7, #24]
    parse_succeeded = parse_utf16_hex(unprocessed_ptr, &cp);
 801b334:	f107 030c 	add.w	r3, r7, #12
 801b338:	4619      	mov	r1, r3
 801b33a:	69b8      	ldr	r0, [r7, #24]
 801b33c:	f7ff fac8 	bl	801a8d0 <parse_utf16_hex>
 801b340:	6178      	str	r0, [r7, #20]
    if (!parse_succeeded) {
 801b342:	697b      	ldr	r3, [r7, #20]
 801b344:	2b00      	cmp	r3, #0
 801b346:	d102      	bne.n	801b34e <parse_utf16+0x3a>
        return JSONFailure;
 801b348:	f04f 33ff 	mov.w	r3, #4294967295
 801b34c:	e0ce      	b.n	801b4ec <parse_utf16+0x1d8>
    }
    if (cp < 0x80) {
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	2b7f      	cmp	r3, #127	; 0x7f
 801b352:	d804      	bhi.n	801b35e <parse_utf16+0x4a>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	b2da      	uxtb	r2, r3
 801b358:	69fb      	ldr	r3, [r7, #28]
 801b35a:	701a      	strb	r2, [r3, #0]
 801b35c:	e0bc      	b.n	801b4d8 <parse_utf16+0x1c4>
    } else if (cp < 0x800) {
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b364:	d219      	bcs.n	801b39a <parse_utf16+0x86>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	099b      	lsrs	r3, r3, #6
 801b36a:	b2db      	uxtb	r3, r3
 801b36c:	f003 031f 	and.w	r3, r3, #31
 801b370:	b2db      	uxtb	r3, r3
 801b372:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801b376:	b2da      	uxtb	r2, r3
 801b378:	69fb      	ldr	r3, [r7, #28]
 801b37a:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	b2db      	uxtb	r3, r3
 801b380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b384:	b2da      	uxtb	r2, r3
 801b386:	69fb      	ldr	r3, [r7, #28]
 801b388:	3301      	adds	r3, #1
 801b38a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b38e:	b2d2      	uxtb	r2, r2
 801b390:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 801b392:	69fb      	ldr	r3, [r7, #28]
 801b394:	3301      	adds	r3, #1
 801b396:	61fb      	str	r3, [r7, #28]
 801b398:	e09e      	b.n	801b4d8 <parse_utf16+0x1c4>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801b3a0:	d303      	bcc.n	801b3aa <parse_utf16+0x96>
 801b3a2:	68fb      	ldr	r3, [r7, #12]
 801b3a4:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801b3a8:	d325      	bcc.n	801b3f6 <parse_utf16+0xe2>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 801b3aa:	68fb      	ldr	r3, [r7, #12]
 801b3ac:	0b1b      	lsrs	r3, r3, #12
 801b3ae:	b2db      	uxtb	r3, r3
 801b3b0:	f003 030f 	and.w	r3, r3, #15
 801b3b4:	b2db      	uxtb	r3, r3
 801b3b6:	f063 031f 	orn	r3, r3, #31
 801b3ba:	b2da      	uxtb	r2, r3
 801b3bc:	69fb      	ldr	r3, [r7, #28]
 801b3be:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	099b      	lsrs	r3, r3, #6
 801b3c4:	b2db      	uxtb	r3, r3
 801b3c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b3ca:	b2da      	uxtb	r2, r3
 801b3cc:	69fb      	ldr	r3, [r7, #28]
 801b3ce:	3301      	adds	r3, #1
 801b3d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b3d4:	b2d2      	uxtb	r2, r2
 801b3d6:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	b2db      	uxtb	r3, r3
 801b3dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b3e0:	b2da      	uxtb	r2, r3
 801b3e2:	69fb      	ldr	r3, [r7, #28]
 801b3e4:	3302      	adds	r3, #2
 801b3e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b3ea:	b2d2      	uxtb	r2, r2
 801b3ec:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 801b3ee:	69fb      	ldr	r3, [r7, #28]
 801b3f0:	3302      	adds	r3, #2
 801b3f2:	61fb      	str	r3, [r7, #28]
 801b3f4:	e070      	b.n	801b4d8 <parse_utf16+0x1c4>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801b3fc:	d369      	bcc.n	801b4d2 <parse_utf16+0x1be>
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801b404:	d265      	bcs.n	801b4d2 <parse_utf16+0x1be>
        lead = cp;
 801b406:	68fb      	ldr	r3, [r7, #12]
 801b408:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 801b40a:	69bb      	ldr	r3, [r7, #24]
 801b40c:	3304      	adds	r3, #4
 801b40e:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 801b410:	69bb      	ldr	r3, [r7, #24]
 801b412:	1c5a      	adds	r2, r3, #1
 801b414:	61ba      	str	r2, [r7, #24]
 801b416:	781b      	ldrb	r3, [r3, #0]
 801b418:	2b5c      	cmp	r3, #92	; 0x5c
 801b41a:	d105      	bne.n	801b428 <parse_utf16+0x114>
 801b41c:	69bb      	ldr	r3, [r7, #24]
 801b41e:	1c5a      	adds	r2, r3, #1
 801b420:	61ba      	str	r2, [r7, #24]
 801b422:	781b      	ldrb	r3, [r3, #0]
 801b424:	2b75      	cmp	r3, #117	; 0x75
 801b426:	d002      	beq.n	801b42e <parse_utf16+0x11a>
            return JSONFailure;
 801b428:	f04f 33ff 	mov.w	r3, #4294967295
 801b42c:	e05e      	b.n	801b4ec <parse_utf16+0x1d8>
        }
        parse_succeeded = parse_utf16_hex(unprocessed_ptr, &trail);
 801b42e:	f107 0308 	add.w	r3, r7, #8
 801b432:	4619      	mov	r1, r3
 801b434:	69b8      	ldr	r0, [r7, #24]
 801b436:	f7ff fa4b 	bl	801a8d0 <parse_utf16_hex>
 801b43a:	6178      	str	r0, [r7, #20]
        if (!parse_succeeded || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 801b43c:	697b      	ldr	r3, [r7, #20]
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d007      	beq.n	801b452 <parse_utf16+0x13e>
 801b442:	68bb      	ldr	r3, [r7, #8]
 801b444:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801b448:	d303      	bcc.n	801b452 <parse_utf16+0x13e>
 801b44a:	68bb      	ldr	r3, [r7, #8]
 801b44c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801b450:	d302      	bcc.n	801b458 <parse_utf16+0x144>
            return JSONFailure;
 801b452:	f04f 33ff 	mov.w	r3, #4294967295
 801b456:	e049      	b.n	801b4ec <parse_utf16+0x1d8>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 801b458:	693b      	ldr	r3, [r7, #16]
 801b45a:	029a      	lsls	r2, r3, #10
 801b45c:	4b25      	ldr	r3, [pc, #148]	; (801b4f4 <parse_utf16+0x1e0>)
 801b45e:	4013      	ands	r3, r2
 801b460:	68ba      	ldr	r2, [r7, #8]
 801b462:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801b466:	4313      	orrs	r3, r2
 801b468:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801b46c:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 801b46e:	68fb      	ldr	r3, [r7, #12]
 801b470:	0c9b      	lsrs	r3, r3, #18
 801b472:	b2db      	uxtb	r3, r3
 801b474:	f003 0307 	and.w	r3, r3, #7
 801b478:	b2db      	uxtb	r3, r3
 801b47a:	f063 030f 	orn	r3, r3, #15
 801b47e:	b2da      	uxtb	r2, r3
 801b480:	69fb      	ldr	r3, [r7, #28]
 801b482:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 801b484:	68fb      	ldr	r3, [r7, #12]
 801b486:	0b1b      	lsrs	r3, r3, #12
 801b488:	b2db      	uxtb	r3, r3
 801b48a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b48e:	b2da      	uxtb	r2, r3
 801b490:	69fb      	ldr	r3, [r7, #28]
 801b492:	3301      	adds	r3, #1
 801b494:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b498:	b2d2      	uxtb	r2, r2
 801b49a:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 801b49c:	68fb      	ldr	r3, [r7, #12]
 801b49e:	099b      	lsrs	r3, r3, #6
 801b4a0:	b2db      	uxtb	r3, r3
 801b4a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b4a6:	b2da      	uxtb	r2, r3
 801b4a8:	69fb      	ldr	r3, [r7, #28]
 801b4aa:	3302      	adds	r3, #2
 801b4ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b4b0:	b2d2      	uxtb	r2, r2
 801b4b2:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	b2db      	uxtb	r3, r3
 801b4b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b4bc:	b2da      	uxtb	r2, r3
 801b4be:	69fb      	ldr	r3, [r7, #28]
 801b4c0:	3303      	adds	r3, #3
 801b4c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b4c6:	b2d2      	uxtb	r2, r2
 801b4c8:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 801b4ca:	69fb      	ldr	r3, [r7, #28]
 801b4cc:	3303      	adds	r3, #3
 801b4ce:	61fb      	str	r3, [r7, #28]
 801b4d0:	e002      	b.n	801b4d8 <parse_utf16+0x1c4>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 801b4d2:	f04f 33ff 	mov.w	r3, #4294967295
 801b4d6:	e009      	b.n	801b4ec <parse_utf16+0x1d8>
    }
    unprocessed_ptr += 3;
 801b4d8:	69bb      	ldr	r3, [r7, #24]
 801b4da:	3303      	adds	r3, #3
 801b4dc:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 801b4de:	683b      	ldr	r3, [r7, #0]
 801b4e0:	69fa      	ldr	r2, [r7, #28]
 801b4e2:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	69ba      	ldr	r2, [r7, #24]
 801b4e8:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801b4ea:	2300      	movs	r3, #0
}
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	3720      	adds	r7, #32
 801b4f0:	46bd      	mov	sp, r7
 801b4f2:	bd80      	pop	{r7, pc}
 801b4f4:	000ffc00 	.word	0x000ffc00

0801b4f8 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t len) {
 801b4f8:	b580      	push	{r7, lr}
 801b4fa:	b088      	sub	sp, #32
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	6078      	str	r0, [r7, #4]
 801b500:	6039      	str	r1, [r7, #0]
    const char *input_ptr = input;
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	60fb      	str	r3, [r7, #12]
    size_t initial_size = (len + 1) * sizeof(char);
 801b506:	683b      	ldr	r3, [r7, #0]
 801b508:	3301      	adds	r3, #1
 801b50a:	61fb      	str	r3, [r7, #28]
    size_t final_size = 0;
 801b50c:	2300      	movs	r3, #0
 801b50e:	61bb      	str	r3, [r7, #24]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 801b510:	2300      	movs	r3, #0
 801b512:	617b      	str	r3, [r7, #20]
 801b514:	2300      	movs	r3, #0
 801b516:	60bb      	str	r3, [r7, #8]
 801b518:	2300      	movs	r3, #0
 801b51a:	613b      	str	r3, [r7, #16]
    output = (char*)parson_malloc(initial_size);
 801b51c:	4b66      	ldr	r3, [pc, #408]	; (801b6b8 <process_string+0x1c0>)
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	69f8      	ldr	r0, [r7, #28]
 801b522:	4798      	blx	r3
 801b524:	6178      	str	r0, [r7, #20]
    if (output == NULL) {
 801b526:	697b      	ldr	r3, [r7, #20]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	f000 80b5 	beq.w	801b698 <process_string+0x1a0>
        goto error;
    }
    output_ptr = output;
 801b52e:	697b      	ldr	r3, [r7, #20]
 801b530:	60bb      	str	r3, [r7, #8]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801b532:	e08a      	b.n	801b64a <process_string+0x152>
        if (*input_ptr == '\\') {
 801b534:	68fb      	ldr	r3, [r7, #12]
 801b536:	781b      	ldrb	r3, [r3, #0]
 801b538:	2b5c      	cmp	r3, #92	; 0x5c
 801b53a:	d176      	bne.n	801b62a <process_string+0x132>
            input_ptr++;
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	3301      	adds	r3, #1
 801b540:	60fb      	str	r3, [r7, #12]
            switch (*input_ptr) {
 801b542:	68fb      	ldr	r3, [r7, #12]
 801b544:	781b      	ldrb	r3, [r3, #0]
 801b546:	2b75      	cmp	r3, #117	; 0x75
 801b548:	f300 80a8 	bgt.w	801b69c <process_string+0x1a4>
 801b54c:	2b5c      	cmp	r3, #92	; 0x5c
 801b54e:	da04      	bge.n	801b55a <process_string+0x62>
 801b550:	2b22      	cmp	r3, #34	; 0x22
 801b552:	d03d      	beq.n	801b5d0 <process_string+0xd8>
 801b554:	2b2f      	cmp	r3, #47	; 0x2f
 801b556:	d043      	beq.n	801b5e0 <process_string+0xe8>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 801b558:	e0a0      	b.n	801b69c <process_string+0x1a4>
 801b55a:	3b5c      	subs	r3, #92	; 0x5c
 801b55c:	2b19      	cmp	r3, #25
 801b55e:	f200 809d 	bhi.w	801b69c <process_string+0x1a4>
 801b562:	a201      	add	r2, pc, #4	; (adr r2, 801b568 <process_string+0x70>)
 801b564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b568:	0801b5d9 	.word	0x0801b5d9
 801b56c:	0801b69d 	.word	0x0801b69d
 801b570:	0801b69d 	.word	0x0801b69d
 801b574:	0801b69d 	.word	0x0801b69d
 801b578:	0801b69d 	.word	0x0801b69d
 801b57c:	0801b69d 	.word	0x0801b69d
 801b580:	0801b5e9 	.word	0x0801b5e9
 801b584:	0801b69d 	.word	0x0801b69d
 801b588:	0801b69d 	.word	0x0801b69d
 801b58c:	0801b69d 	.word	0x0801b69d
 801b590:	0801b5f1 	.word	0x0801b5f1
 801b594:	0801b69d 	.word	0x0801b69d
 801b598:	0801b69d 	.word	0x0801b69d
 801b59c:	0801b69d 	.word	0x0801b69d
 801b5a0:	0801b69d 	.word	0x0801b69d
 801b5a4:	0801b69d 	.word	0x0801b69d
 801b5a8:	0801b69d 	.word	0x0801b69d
 801b5ac:	0801b69d 	.word	0x0801b69d
 801b5b0:	0801b5f9 	.word	0x0801b5f9
 801b5b4:	0801b69d 	.word	0x0801b69d
 801b5b8:	0801b69d 	.word	0x0801b69d
 801b5bc:	0801b69d 	.word	0x0801b69d
 801b5c0:	0801b601 	.word	0x0801b601
 801b5c4:	0801b69d 	.word	0x0801b69d
 801b5c8:	0801b609 	.word	0x0801b609
 801b5cc:	0801b611 	.word	0x0801b611
                case '\"': *output_ptr = '\"'; break;
 801b5d0:	68bb      	ldr	r3, [r7, #8]
 801b5d2:	2222      	movs	r2, #34	; 0x22
 801b5d4:	701a      	strb	r2, [r3, #0]
 801b5d6:	e032      	b.n	801b63e <process_string+0x146>
                case '\\': *output_ptr = '\\'; break;
 801b5d8:	68bb      	ldr	r3, [r7, #8]
 801b5da:	225c      	movs	r2, #92	; 0x5c
 801b5dc:	701a      	strb	r2, [r3, #0]
 801b5de:	e02e      	b.n	801b63e <process_string+0x146>
                case '/':  *output_ptr = '/';  break;
 801b5e0:	68bb      	ldr	r3, [r7, #8]
 801b5e2:	222f      	movs	r2, #47	; 0x2f
 801b5e4:	701a      	strb	r2, [r3, #0]
 801b5e6:	e02a      	b.n	801b63e <process_string+0x146>
                case 'b':  *output_ptr = '\b'; break;
 801b5e8:	68bb      	ldr	r3, [r7, #8]
 801b5ea:	2208      	movs	r2, #8
 801b5ec:	701a      	strb	r2, [r3, #0]
 801b5ee:	e026      	b.n	801b63e <process_string+0x146>
                case 'f':  *output_ptr = '\f'; break;
 801b5f0:	68bb      	ldr	r3, [r7, #8]
 801b5f2:	220c      	movs	r2, #12
 801b5f4:	701a      	strb	r2, [r3, #0]
 801b5f6:	e022      	b.n	801b63e <process_string+0x146>
                case 'n':  *output_ptr = '\n'; break;
 801b5f8:	68bb      	ldr	r3, [r7, #8]
 801b5fa:	220a      	movs	r2, #10
 801b5fc:	701a      	strb	r2, [r3, #0]
 801b5fe:	e01e      	b.n	801b63e <process_string+0x146>
                case 'r':  *output_ptr = '\r'; break;
 801b600:	68bb      	ldr	r3, [r7, #8]
 801b602:	220d      	movs	r2, #13
 801b604:	701a      	strb	r2, [r3, #0]
 801b606:	e01a      	b.n	801b63e <process_string+0x146>
                case 't':  *output_ptr = '\t'; break;
 801b608:	68bb      	ldr	r3, [r7, #8]
 801b60a:	2209      	movs	r2, #9
 801b60c:	701a      	strb	r2, [r3, #0]
 801b60e:	e016      	b.n	801b63e <process_string+0x146>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
 801b610:	f107 0208 	add.w	r2, r7, #8
 801b614:	f107 030c 	add.w	r3, r7, #12
 801b618:	4611      	mov	r1, r2
 801b61a:	4618      	mov	r0, r3
 801b61c:	f7ff fe7a 	bl	801b314 <parse_utf16>
 801b620:	4603      	mov	r3, r0
 801b622:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b626:	d109      	bne.n	801b63c <process_string+0x144>
                        goto error;
 801b628:	e03d      	b.n	801b6a6 <process_string+0x1ae>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	781b      	ldrb	r3, [r3, #0]
 801b62e:	2b1f      	cmp	r3, #31
 801b630:	d936      	bls.n	801b6a0 <process_string+0x1a8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 801b632:	68fa      	ldr	r2, [r7, #12]
 801b634:	68bb      	ldr	r3, [r7, #8]
 801b636:	7812      	ldrb	r2, [r2, #0]
 801b638:	701a      	strb	r2, [r3, #0]
 801b63a:	e000      	b.n	801b63e <process_string+0x146>
                    break;
 801b63c:	bf00      	nop
        }
        output_ptr++;
 801b63e:	68bb      	ldr	r3, [r7, #8]
 801b640:	3301      	adds	r3, #1
 801b642:	60bb      	str	r3, [r7, #8]
        input_ptr++;
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	3301      	adds	r3, #1
 801b648:	60fb      	str	r3, [r7, #12]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	781b      	ldrb	r3, [r3, #0]
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d007      	beq.n	801b662 <process_string+0x16a>
 801b652:	68fa      	ldr	r2, [r7, #12]
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	1ad3      	subs	r3, r2, r3
 801b658:	461a      	mov	r2, r3
 801b65a:	683b      	ldr	r3, [r7, #0]
 801b65c:	4293      	cmp	r3, r2
 801b65e:	f63f af69 	bhi.w	801b534 <process_string+0x3c>
    }
    *output_ptr = '\0';
 801b662:	68bb      	ldr	r3, [r7, #8]
 801b664:	2200      	movs	r2, #0
 801b666:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 801b668:	68ba      	ldr	r2, [r7, #8]
 801b66a:	697b      	ldr	r3, [r7, #20]
 801b66c:	1ad3      	subs	r3, r2, r3
 801b66e:	3301      	adds	r3, #1
 801b670:	61bb      	str	r3, [r7, #24]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 801b672:	4b11      	ldr	r3, [pc, #68]	; (801b6b8 <process_string+0x1c0>)
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	69b8      	ldr	r0, [r7, #24]
 801b678:	4798      	blx	r3
 801b67a:	6138      	str	r0, [r7, #16]
    if (resized_output == NULL) {
 801b67c:	693b      	ldr	r3, [r7, #16]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d010      	beq.n	801b6a4 <process_string+0x1ac>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 801b682:	69ba      	ldr	r2, [r7, #24]
 801b684:	6979      	ldr	r1, [r7, #20]
 801b686:	6938      	ldr	r0, [r7, #16]
 801b688:	f002 fc5c 	bl	801df44 <memcpy>
    parson_free(output);
 801b68c:	4b0b      	ldr	r3, [pc, #44]	; (801b6bc <process_string+0x1c4>)
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	6978      	ldr	r0, [r7, #20]
 801b692:	4798      	blx	r3
    return resized_output;
 801b694:	693b      	ldr	r3, [r7, #16]
 801b696:	e00b      	b.n	801b6b0 <process_string+0x1b8>
        goto error;
 801b698:	bf00      	nop
 801b69a:	e004      	b.n	801b6a6 <process_string+0x1ae>
                    goto error;
 801b69c:	bf00      	nop
 801b69e:	e002      	b.n	801b6a6 <process_string+0x1ae>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 801b6a0:	bf00      	nop
 801b6a2:	e000      	b.n	801b6a6 <process_string+0x1ae>
        goto error;
 801b6a4:	bf00      	nop
error:
    parson_free(output);
 801b6a6:	4b05      	ldr	r3, [pc, #20]	; (801b6bc <process_string+0x1c4>)
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	6978      	ldr	r0, [r7, #20]
 801b6ac:	4798      	blx	r3
    return NULL;
 801b6ae:	2300      	movs	r3, #0
}
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	3720      	adds	r7, #32
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	bd80      	pop	{r7, pc}
 801b6b8:	20000084 	.word	0x20000084
 801b6bc:	20000088 	.word	0x20000088

0801b6c0 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string) {
 801b6c0:	b580      	push	{r7, lr}
 801b6c2:	b086      	sub	sp, #24
 801b6c4:	af00      	add	r7, sp, #0
 801b6c6:	6078      	str	r0, [r7, #4]
    const char *string_start = *string;
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	617b      	str	r3, [r7, #20]
    size_t string_len = 0;
 801b6ce:	2300      	movs	r3, #0
 801b6d0:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 801b6d2:	6878      	ldr	r0, [r7, #4]
 801b6d4:	f7ff fddc 	bl	801b290 <skip_quotes>
 801b6d8:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 801b6da:	68fb      	ldr	r3, [r7, #12]
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d001      	beq.n	801b6e4 <get_quoted_string+0x24>
        return NULL;
 801b6e0:	2300      	movs	r3, #0
 801b6e2:	e00c      	b.n	801b6fe <get_quoted_string+0x3e>
    }
    string_len = *string - string_start - 2; /* length without quotes */
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	681a      	ldr	r2, [r3, #0]
 801b6e8:	697b      	ldr	r3, [r7, #20]
 801b6ea:	1ad3      	subs	r3, r2, r3
 801b6ec:	3b02      	subs	r3, #2
 801b6ee:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, string_len);
 801b6f0:	697b      	ldr	r3, [r7, #20]
 801b6f2:	3301      	adds	r3, #1
 801b6f4:	6939      	ldr	r1, [r7, #16]
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	f7ff fefe 	bl	801b4f8 <process_string>
 801b6fc:	4603      	mov	r3, r0
}
 801b6fe:	4618      	mov	r0, r3
 801b700:	3718      	adds	r7, #24
 801b702:	46bd      	mov	sp, r7
 801b704:	bd80      	pop	{r7, pc}
	...

0801b708 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 801b708:	b580      	push	{r7, lr}
 801b70a:	b082      	sub	sp, #8
 801b70c:	af00      	add	r7, sp, #0
 801b70e:	6078      	str	r0, [r7, #4]
 801b710:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 801b712:	683b      	ldr	r3, [r7, #0]
 801b714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b718:	d906      	bls.n	801b728 <parse_value+0x20>
        return NULL;
 801b71a:	2300      	movs	r3, #0
 801b71c:	e08d      	b.n	801b83a <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	1c5a      	adds	r2, r3, #1
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	601a      	str	r2, [r3, #0]
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	781b      	ldrb	r3, [r3, #0]
 801b72e:	3301      	adds	r3, #1
 801b730:	4a44      	ldr	r2, [pc, #272]	; (801b844 <parse_value+0x13c>)
 801b732:	4413      	add	r3, r2
 801b734:	781b      	ldrb	r3, [r3, #0]
 801b736:	f003 0308 	and.w	r3, r3, #8
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d1ef      	bne.n	801b71e <parse_value+0x16>
    switch (**string) {
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	781b      	ldrb	r3, [r3, #0]
 801b744:	2b7b      	cmp	r3, #123	; 0x7b
 801b746:	dc77      	bgt.n	801b838 <parse_value+0x130>
 801b748:	2b5b      	cmp	r3, #91	; 0x5b
 801b74a:	da08      	bge.n	801b75e <parse_value+0x56>
 801b74c:	2b39      	cmp	r3, #57	; 0x39
 801b74e:	dc73      	bgt.n	801b838 <parse_value+0x130>
 801b750:	2b30      	cmp	r3, #48	; 0x30
 801b752:	da67      	bge.n	801b824 <parse_value+0x11c>
 801b754:	2b22      	cmp	r3, #34	; 0x22
 801b756:	d05b      	beq.n	801b810 <parse_value+0x108>
 801b758:	2b2d      	cmp	r3, #45	; 0x2d
 801b75a:	d063      	beq.n	801b824 <parse_value+0x11c>
 801b75c:	e06c      	b.n	801b838 <parse_value+0x130>
 801b75e:	3b5b      	subs	r3, #91	; 0x5b
 801b760:	2b20      	cmp	r3, #32
 801b762:	d869      	bhi.n	801b838 <parse_value+0x130>
 801b764:	a201      	add	r2, pc, #4	; (adr r2, 801b76c <parse_value+0x64>)
 801b766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b76a:	bf00      	nop
 801b76c:	0801b801 	.word	0x0801b801
 801b770:	0801b839 	.word	0x0801b839
 801b774:	0801b839 	.word	0x0801b839
 801b778:	0801b839 	.word	0x0801b839
 801b77c:	0801b839 	.word	0x0801b839
 801b780:	0801b839 	.word	0x0801b839
 801b784:	0801b839 	.word	0x0801b839
 801b788:	0801b839 	.word	0x0801b839
 801b78c:	0801b839 	.word	0x0801b839
 801b790:	0801b839 	.word	0x0801b839
 801b794:	0801b839 	.word	0x0801b839
 801b798:	0801b81b 	.word	0x0801b81b
 801b79c:	0801b839 	.word	0x0801b839
 801b7a0:	0801b839 	.word	0x0801b839
 801b7a4:	0801b839 	.word	0x0801b839
 801b7a8:	0801b839 	.word	0x0801b839
 801b7ac:	0801b839 	.word	0x0801b839
 801b7b0:	0801b839 	.word	0x0801b839
 801b7b4:	0801b839 	.word	0x0801b839
 801b7b8:	0801b82f 	.word	0x0801b82f
 801b7bc:	0801b839 	.word	0x0801b839
 801b7c0:	0801b839 	.word	0x0801b839
 801b7c4:	0801b839 	.word	0x0801b839
 801b7c8:	0801b839 	.word	0x0801b839
 801b7cc:	0801b839 	.word	0x0801b839
 801b7d0:	0801b81b 	.word	0x0801b81b
 801b7d4:	0801b839 	.word	0x0801b839
 801b7d8:	0801b839 	.word	0x0801b839
 801b7dc:	0801b839 	.word	0x0801b839
 801b7e0:	0801b839 	.word	0x0801b839
 801b7e4:	0801b839 	.word	0x0801b839
 801b7e8:	0801b839 	.word	0x0801b839
 801b7ec:	0801b7f1 	.word	0x0801b7f1
        case '{':
            return parse_object_value(string, nesting + 1);
 801b7f0:	683b      	ldr	r3, [r7, #0]
 801b7f2:	3301      	adds	r3, #1
 801b7f4:	4619      	mov	r1, r3
 801b7f6:	6878      	ldr	r0, [r7, #4]
 801b7f8:	f000 f826 	bl	801b848 <parse_object_value>
 801b7fc:	4603      	mov	r3, r0
 801b7fe:	e01c      	b.n	801b83a <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 801b800:	683b      	ldr	r3, [r7, #0]
 801b802:	3301      	adds	r3, #1
 801b804:	4619      	mov	r1, r3
 801b806:	6878      	ldr	r0, [r7, #4]
 801b808:	f000 f926 	bl	801ba58 <parse_array_value>
 801b80c:	4603      	mov	r3, r0
 801b80e:	e014      	b.n	801b83a <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 801b810:	6878      	ldr	r0, [r7, #4]
 801b812:	f000 f9e7 	bl	801bbe4 <parse_string_value>
 801b816:	4603      	mov	r3, r0
 801b818:	e00f      	b.n	801b83a <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 801b81a:	6878      	ldr	r0, [r7, #4]
 801b81c:	f000 fa06 	bl	801bc2c <parse_boolean_value>
 801b820:	4603      	mov	r3, r0
 801b822:	e00a      	b.n	801b83a <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 801b824:	6878      	ldr	r0, [r7, #4]
 801b826:	f000 fa3d 	bl	801bca4 <parse_number_value>
 801b82a:	4603      	mov	r3, r0
 801b82c:	e005      	b.n	801b83a <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 801b82e:	6878      	ldr	r0, [r7, #4]
 801b830:	f000 fa72 	bl	801bd18 <parse_null_value>
 801b834:	4603      	mov	r3, r0
 801b836:	e000      	b.n	801b83a <parse_value+0x132>
        default:
            return NULL;
 801b838:	2300      	movs	r3, #0
    }
}
 801b83a:	4618      	mov	r0, r3
 801b83c:	3708      	adds	r7, #8
 801b83e:	46bd      	mov	sp, r7
 801b840:	bd80      	pop	{r7, pc}
 801b842:	bf00      	nop
 801b844:	08022c6c 	.word	0x08022c6c

0801b848 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 801b848:	b580      	push	{r7, lr}
 801b84a:	b086      	sub	sp, #24
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	6078      	str	r0, [r7, #4]
 801b850:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_value = NULL;
 801b852:	2300      	movs	r3, #0
 801b854:	617b      	str	r3, [r7, #20]
 801b856:	2300      	movs	r3, #0
 801b858:	613b      	str	r3, [r7, #16]
    JSON_Object *output_object = NULL;
 801b85a:	2300      	movs	r3, #0
 801b85c:	60fb      	str	r3, [r7, #12]
    char *new_key = NULL;
 801b85e:	2300      	movs	r3, #0
 801b860:	60bb      	str	r3, [r7, #8]
    output_value = json_value_init_object();
 801b862:	f001 fc51 	bl	801d108 <json_value_init_object>
 801b866:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801b868:	697b      	ldr	r3, [r7, #20]
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d101      	bne.n	801b872 <parse_object_value+0x2a>
        return NULL;
 801b86e:	2300      	movs	r3, #0
 801b870:	e0ea      	b.n	801ba48 <parse_object_value+0x200>
    }
    if (**string != '{') {
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	781b      	ldrb	r3, [r3, #0]
 801b878:	2b7b      	cmp	r3, #123	; 0x7b
 801b87a:	d004      	beq.n	801b886 <parse_object_value+0x3e>
        json_value_free(output_value);
 801b87c:	6978      	ldr	r0, [r7, #20]
 801b87e:	f001 fc15 	bl	801d0ac <json_value_free>
        return NULL;
 801b882:	2300      	movs	r3, #0
 801b884:	e0e0      	b.n	801ba48 <parse_object_value+0x200>
    }
    output_object = json_value_get_object(output_value);
 801b886:	6978      	ldr	r0, [r7, #20]
 801b888:	f001 fbab 	bl	801cfe2 <json_value_get_object>
 801b88c:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	1c5a      	adds	r2, r3, #1
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801b898:	e004      	b.n	801b8a4 <parse_object_value+0x5c>
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	681b      	ldr	r3, [r3, #0]
 801b89e:	1c5a      	adds	r2, r3, #1
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	601a      	str	r2, [r3, #0]
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	781b      	ldrb	r3, [r3, #0]
 801b8aa:	3301      	adds	r3, #1
 801b8ac:	4a68      	ldr	r2, [pc, #416]	; (801ba50 <parse_object_value+0x208>)
 801b8ae:	4413      	add	r3, r2
 801b8b0:	781b      	ldrb	r3, [r3, #0]
 801b8b2:	f003 0308 	and.w	r3, r3, #8
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d1ef      	bne.n	801b89a <parse_object_value+0x52>
    if (**string == '}') { /* empty object */
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	781b      	ldrb	r3, [r3, #0]
 801b8c0:	2b7d      	cmp	r3, #125	; 0x7d
 801b8c2:	f040 808c 	bne.w	801b9de <parse_object_value+0x196>
        SKIP_CHAR(string);
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	1c5a      	adds	r2, r3, #1
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	601a      	str	r2, [r3, #0]
        return output_value;
 801b8d0:	697b      	ldr	r3, [r7, #20]
 801b8d2:	e0b9      	b.n	801ba48 <parse_object_value+0x200>
    }
    while (**string != '\0') {
        new_key = get_quoted_string(string);
 801b8d4:	6878      	ldr	r0, [r7, #4]
 801b8d6:	f7ff fef3 	bl	801b6c0 <get_quoted_string>
 801b8da:	60b8      	str	r0, [r7, #8]
        if (new_key == NULL) {
 801b8dc:	68bb      	ldr	r3, [r7, #8]
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d109      	bne.n	801b8f6 <parse_object_value+0xae>
            json_value_free(output_value);
 801b8e2:	6978      	ldr	r0, [r7, #20]
 801b8e4:	f001 fbe2 	bl	801d0ac <json_value_free>
            return NULL;
 801b8e8:	2300      	movs	r3, #0
 801b8ea:	e0ad      	b.n	801ba48 <parse_object_value+0x200>
        }
        SKIP_WHITESPACES(string);
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	1c5a      	adds	r2, r3, #1
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	601a      	str	r2, [r3, #0]
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	781b      	ldrb	r3, [r3, #0]
 801b8fc:	3301      	adds	r3, #1
 801b8fe:	4a54      	ldr	r2, [pc, #336]	; (801ba50 <parse_object_value+0x208>)
 801b900:	4413      	add	r3, r2
 801b902:	781b      	ldrb	r3, [r3, #0]
 801b904:	f003 0308 	and.w	r3, r3, #8
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d1ef      	bne.n	801b8ec <parse_object_value+0xa4>
        if (**string != ':') {
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	781b      	ldrb	r3, [r3, #0]
 801b912:	2b3a      	cmp	r3, #58	; 0x3a
 801b914:	d008      	beq.n	801b928 <parse_object_value+0xe0>
            parson_free(new_key);
 801b916:	4b4f      	ldr	r3, [pc, #316]	; (801ba54 <parse_object_value+0x20c>)
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	68b8      	ldr	r0, [r7, #8]
 801b91c:	4798      	blx	r3
            json_value_free(output_value);
 801b91e:	6978      	ldr	r0, [r7, #20]
 801b920:	f001 fbc4 	bl	801d0ac <json_value_free>
            return NULL;
 801b924:	2300      	movs	r3, #0
 801b926:	e08f      	b.n	801ba48 <parse_object_value+0x200>
        }
        SKIP_CHAR(string);
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	1c5a      	adds	r2, r3, #1
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 801b932:	6839      	ldr	r1, [r7, #0]
 801b934:	6878      	ldr	r0, [r7, #4]
 801b936:	f7ff fee7 	bl	801b708 <parse_value>
 801b93a:	6138      	str	r0, [r7, #16]
        if (new_value == NULL) {
 801b93c:	693b      	ldr	r3, [r7, #16]
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d108      	bne.n	801b954 <parse_object_value+0x10c>
            parson_free(new_key);
 801b942:	4b44      	ldr	r3, [pc, #272]	; (801ba54 <parse_object_value+0x20c>)
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	68b8      	ldr	r0, [r7, #8]
 801b948:	4798      	blx	r3
            json_value_free(output_value);
 801b94a:	6978      	ldr	r0, [r7, #20]
 801b94c:	f001 fbae 	bl	801d0ac <json_value_free>
            return NULL;
 801b950:	2300      	movs	r3, #0
 801b952:	e079      	b.n	801ba48 <parse_object_value+0x200>
        }
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 801b954:	693a      	ldr	r2, [r7, #16]
 801b956:	68b9      	ldr	r1, [r7, #8]
 801b958:	68f8      	ldr	r0, [r7, #12]
 801b95a:	f7ff f997 	bl	801ac8c <json_object_add>
 801b95e:	4603      	mov	r3, r0
 801b960:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b964:	d10b      	bne.n	801b97e <parse_object_value+0x136>
            parson_free(new_key);
 801b966:	4b3b      	ldr	r3, [pc, #236]	; (801ba54 <parse_object_value+0x20c>)
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	68b8      	ldr	r0, [r7, #8]
 801b96c:	4798      	blx	r3
            json_value_free(new_value);
 801b96e:	6938      	ldr	r0, [r7, #16]
 801b970:	f001 fb9c 	bl	801d0ac <json_value_free>
            json_value_free(output_value);
 801b974:	6978      	ldr	r0, [r7, #20]
 801b976:	f001 fb99 	bl	801d0ac <json_value_free>
            return NULL;
 801b97a:	2300      	movs	r3, #0
 801b97c:	e064      	b.n	801ba48 <parse_object_value+0x200>
        }
        parson_free(new_key);
 801b97e:	4b35      	ldr	r3, [pc, #212]	; (801ba54 <parse_object_value+0x20c>)
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	68b8      	ldr	r0, [r7, #8]
 801b984:	4798      	blx	r3
        SKIP_WHITESPACES(string);
 801b986:	e004      	b.n	801b992 <parse_object_value+0x14a>
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	1c5a      	adds	r2, r3, #1
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	601a      	str	r2, [r3, #0]
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	781b      	ldrb	r3, [r3, #0]
 801b998:	3301      	adds	r3, #1
 801b99a:	4a2d      	ldr	r2, [pc, #180]	; (801ba50 <parse_object_value+0x208>)
 801b99c:	4413      	add	r3, r2
 801b99e:	781b      	ldrb	r3, [r3, #0]
 801b9a0:	f003 0308 	and.w	r3, r3, #8
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d1ef      	bne.n	801b988 <parse_object_value+0x140>
        if (**string != ',') {
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	781b      	ldrb	r3, [r3, #0]
 801b9ae:	2b2c      	cmp	r3, #44	; 0x2c
 801b9b0:	d11c      	bne.n	801b9ec <parse_object_value+0x1a4>
            break;
        }
        SKIP_CHAR(string);
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	1c5a      	adds	r2, r3, #1
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801b9bc:	e004      	b.n	801b9c8 <parse_object_value+0x180>
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	1c5a      	adds	r2, r3, #1
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	601a      	str	r2, [r3, #0]
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	781b      	ldrb	r3, [r3, #0]
 801b9ce:	3301      	adds	r3, #1
 801b9d0:	4a1f      	ldr	r2, [pc, #124]	; (801ba50 <parse_object_value+0x208>)
 801b9d2:	4413      	add	r3, r2
 801b9d4:	781b      	ldrb	r3, [r3, #0]
 801b9d6:	f003 0308 	and.w	r3, r3, #8
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d1ef      	bne.n	801b9be <parse_object_value+0x176>
    while (**string != '\0') {
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	781b      	ldrb	r3, [r3, #0]
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	f47f af75 	bne.w	801b8d4 <parse_object_value+0x8c>
 801b9ea:	e006      	b.n	801b9fa <parse_object_value+0x1b2>
            break;
 801b9ec:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801b9ee:	e004      	b.n	801b9fa <parse_object_value+0x1b2>
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	1c5a      	adds	r2, r3, #1
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	601a      	str	r2, [r3, #0]
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	681b      	ldr	r3, [r3, #0]
 801b9fe:	781b      	ldrb	r3, [r3, #0]
 801ba00:	3301      	adds	r3, #1
 801ba02:	4a13      	ldr	r2, [pc, #76]	; (801ba50 <parse_object_value+0x208>)
 801ba04:	4413      	add	r3, r2
 801ba06:	781b      	ldrb	r3, [r3, #0]
 801ba08:	f003 0308 	and.w	r3, r3, #8
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d1ef      	bne.n	801b9f0 <parse_object_value+0x1a8>
    if (**string != '}' || /* Trim object after parsing is over */
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	781b      	ldrb	r3, [r3, #0]
 801ba16:	2b7d      	cmp	r3, #125	; 0x7d
 801ba18:	d10b      	bne.n	801ba32 <parse_object_value+0x1ea>
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
 801ba1a:	68f8      	ldr	r0, [r7, #12]
 801ba1c:	f001 fa3a 	bl	801ce94 <json_object_get_count>
 801ba20:	4603      	mov	r3, r0
 801ba22:	4619      	mov	r1, r3
 801ba24:	68f8      	ldr	r0, [r7, #12]
 801ba26:	f7ff f9b3 	bl	801ad90 <json_object_resize>
 801ba2a:	4603      	mov	r3, r0
    if (**string != '}' || /* Trim object after parsing is over */
 801ba2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba30:	d104      	bne.n	801ba3c <parse_object_value+0x1f4>
            json_value_free(output_value);
 801ba32:	6978      	ldr	r0, [r7, #20]
 801ba34:	f001 fb3a 	bl	801d0ac <json_value_free>
            return NULL;
 801ba38:	2300      	movs	r3, #0
 801ba3a:	e005      	b.n	801ba48 <parse_object_value+0x200>
    }
    SKIP_CHAR(string);
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	1c5a      	adds	r2, r3, #1
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	601a      	str	r2, [r3, #0]
    return output_value;
 801ba46:	697b      	ldr	r3, [r7, #20]
}
 801ba48:	4618      	mov	r0, r3
 801ba4a:	3718      	adds	r7, #24
 801ba4c:	46bd      	mov	sp, r7
 801ba4e:	bd80      	pop	{r7, pc}
 801ba50:	08022c6c 	.word	0x08022c6c
 801ba54:	20000088 	.word	0x20000088

0801ba58 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 801ba58:	b580      	push	{r7, lr}
 801ba5a:	b086      	sub	sp, #24
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	6078      	str	r0, [r7, #4]
 801ba60:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 801ba62:	2300      	movs	r3, #0
 801ba64:	617b      	str	r3, [r7, #20]
 801ba66:	2300      	movs	r3, #0
 801ba68:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 801ba6e:	f001 fb77 	bl	801d160 <json_value_init_array>
 801ba72:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801ba74:	697b      	ldr	r3, [r7, #20]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d101      	bne.n	801ba7e <parse_array_value+0x26>
        return NULL;
 801ba7a:	2300      	movs	r3, #0
 801ba7c:	e0ab      	b.n	801bbd6 <parse_array_value+0x17e>
    }
    if (**string != '[') {
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	781b      	ldrb	r3, [r3, #0]
 801ba84:	2b5b      	cmp	r3, #91	; 0x5b
 801ba86:	d004      	beq.n	801ba92 <parse_array_value+0x3a>
        json_value_free(output_value);
 801ba88:	6978      	ldr	r0, [r7, #20]
 801ba8a:	f001 fb0f 	bl	801d0ac <json_value_free>
        return NULL;
 801ba8e:	2300      	movs	r3, #0
 801ba90:	e0a1      	b.n	801bbd6 <parse_array_value+0x17e>
    }
    output_array = json_value_get_array(output_value);
 801ba92:	6978      	ldr	r0, [r7, #20]
 801ba94:	f001 fab7 	bl	801d006 <json_value_get_array>
 801ba98:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	1c5a      	adds	r2, r3, #1
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801baa4:	e004      	b.n	801bab0 <parse_array_value+0x58>
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	1c5a      	adds	r2, r3, #1
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	601a      	str	r2, [r3, #0]
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	781b      	ldrb	r3, [r3, #0]
 801bab6:	3301      	adds	r3, #1
 801bab8:	4a49      	ldr	r2, [pc, #292]	; (801bbe0 <parse_array_value+0x188>)
 801baba:	4413      	add	r3, r2
 801babc:	781b      	ldrb	r3, [r3, #0]
 801babe:	f003 0308 	and.w	r3, r3, #8
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d1ef      	bne.n	801baa6 <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	781b      	ldrb	r3, [r3, #0]
 801bacc:	2b5d      	cmp	r3, #93	; 0x5d
 801bace:	d14e      	bne.n	801bb6e <parse_array_value+0x116>
        SKIP_CHAR(string);
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	1c5a      	adds	r2, r3, #1
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	601a      	str	r2, [r3, #0]
        return output_value;
 801bada:	697b      	ldr	r3, [r7, #20]
 801badc:	e07b      	b.n	801bbd6 <parse_array_value+0x17e>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 801bade:	6839      	ldr	r1, [r7, #0]
 801bae0:	6878      	ldr	r0, [r7, #4]
 801bae2:	f7ff fe11 	bl	801b708 <parse_value>
 801bae6:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 801bae8:	693b      	ldr	r3, [r7, #16]
 801baea:	2b00      	cmp	r3, #0
 801baec:	d104      	bne.n	801baf8 <parse_array_value+0xa0>
            json_value_free(output_value);
 801baee:	6978      	ldr	r0, [r7, #20]
 801baf0:	f001 fadc 	bl	801d0ac <json_value_free>
            return NULL;
 801baf4:	2300      	movs	r3, #0
 801baf6:	e06e      	b.n	801bbd6 <parse_array_value+0x17e>
        }
        if (json_array_add(output_array, new_array_value) == JSONFailure) {
 801baf8:	6939      	ldr	r1, [r7, #16]
 801bafa:	68f8      	ldr	r0, [r7, #12]
 801bafc:	f7ff fb0c 	bl	801b118 <json_array_add>
 801bb00:	4603      	mov	r3, r0
 801bb02:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb06:	d10c      	bne.n	801bb22 <parse_array_value+0xca>
            json_value_free(new_array_value);
 801bb08:	6938      	ldr	r0, [r7, #16]
 801bb0a:	f001 facf 	bl	801d0ac <json_value_free>
            json_value_free(output_value);
 801bb0e:	6978      	ldr	r0, [r7, #20]
 801bb10:	f001 facc 	bl	801d0ac <json_value_free>
            return NULL;
 801bb14:	2300      	movs	r3, #0
 801bb16:	e05e      	b.n	801bbd6 <parse_array_value+0x17e>
        }
        SKIP_WHITESPACES(string);
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	1c5a      	adds	r2, r3, #1
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	601a      	str	r2, [r3, #0]
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	781b      	ldrb	r3, [r3, #0]
 801bb28:	3301      	adds	r3, #1
 801bb2a:	4a2d      	ldr	r2, [pc, #180]	; (801bbe0 <parse_array_value+0x188>)
 801bb2c:	4413      	add	r3, r2
 801bb2e:	781b      	ldrb	r3, [r3, #0]
 801bb30:	f003 0308 	and.w	r3, r3, #8
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d1ef      	bne.n	801bb18 <parse_array_value+0xc0>
        if (**string != ',') {
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	781b      	ldrb	r3, [r3, #0]
 801bb3e:	2b2c      	cmp	r3, #44	; 0x2c
 801bb40:	d11b      	bne.n	801bb7a <parse_array_value+0x122>
            break;
        }
        SKIP_CHAR(string);
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	681b      	ldr	r3, [r3, #0]
 801bb46:	1c5a      	adds	r2, r3, #1
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801bb4c:	e004      	b.n	801bb58 <parse_array_value+0x100>
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	1c5a      	adds	r2, r3, #1
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	601a      	str	r2, [r3, #0]
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	781b      	ldrb	r3, [r3, #0]
 801bb5e:	3301      	adds	r3, #1
 801bb60:	4a1f      	ldr	r2, [pc, #124]	; (801bbe0 <parse_array_value+0x188>)
 801bb62:	4413      	add	r3, r2
 801bb64:	781b      	ldrb	r3, [r3, #0]
 801bb66:	f003 0308 	and.w	r3, r3, #8
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d1ef      	bne.n	801bb4e <parse_array_value+0xf6>
    while (**string != '\0') {
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	781b      	ldrb	r3, [r3, #0]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d1b2      	bne.n	801bade <parse_array_value+0x86>
 801bb78:	e006      	b.n	801bb88 <parse_array_value+0x130>
            break;
 801bb7a:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801bb7c:	e004      	b.n	801bb88 <parse_array_value+0x130>
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	1c5a      	adds	r2, r3, #1
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	601a      	str	r2, [r3, #0]
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	781b      	ldrb	r3, [r3, #0]
 801bb8e:	3301      	adds	r3, #1
 801bb90:	4a13      	ldr	r2, [pc, #76]	; (801bbe0 <parse_array_value+0x188>)
 801bb92:	4413      	add	r3, r2
 801bb94:	781b      	ldrb	r3, [r3, #0]
 801bb96:	f003 0308 	and.w	r3, r3, #8
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d1ef      	bne.n	801bb7e <parse_array_value+0x126>
    if (**string != ']' || /* Trim array after parsing is over */
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	781b      	ldrb	r3, [r3, #0]
 801bba4:	2b5d      	cmp	r3, #93	; 0x5d
 801bba6:	d10b      	bne.n	801bbc0 <parse_array_value+0x168>
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
 801bba8:	68f8      	ldr	r0, [r7, #12]
 801bbaa:	f001 f9eb 	bl	801cf84 <json_array_get_count>
 801bbae:	4603      	mov	r3, r0
 801bbb0:	4619      	mov	r1, r3
 801bbb2:	68f8      	ldr	r0, [r7, #12]
 801bbb4:	f7ff fae6 	bl	801b184 <json_array_resize>
 801bbb8:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 801bbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bbbe:	d104      	bne.n	801bbca <parse_array_value+0x172>
            json_value_free(output_value);
 801bbc0:	6978      	ldr	r0, [r7, #20]
 801bbc2:	f001 fa73 	bl	801d0ac <json_value_free>
            return NULL;
 801bbc6:	2300      	movs	r3, #0
 801bbc8:	e005      	b.n	801bbd6 <parse_array_value+0x17e>
    }
    SKIP_CHAR(string);
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	1c5a      	adds	r2, r3, #1
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	601a      	str	r2, [r3, #0]
    return output_value;
 801bbd4:	697b      	ldr	r3, [r7, #20]
}
 801bbd6:	4618      	mov	r0, r3
 801bbd8:	3718      	adds	r7, #24
 801bbda:	46bd      	mov	sp, r7
 801bbdc:	bd80      	pop	{r7, pc}
 801bbde:	bf00      	nop
 801bbe0:	08022c6c 	.word	0x08022c6c

0801bbe4 <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 801bbe4:	b580      	push	{r7, lr}
 801bbe6:	b084      	sub	sp, #16
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 801bbec:	2300      	movs	r3, #0
 801bbee:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string);
 801bbf0:	6878      	ldr	r0, [r7, #4]
 801bbf2:	f7ff fd65 	bl	801b6c0 <get_quoted_string>
 801bbf6:	60b8      	str	r0, [r7, #8]
    if (new_string == NULL) {
 801bbf8:	68bb      	ldr	r3, [r7, #8]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d101      	bne.n	801bc02 <parse_string_value+0x1e>
        return NULL;
 801bbfe:	2300      	movs	r3, #0
 801bc00:	e00d      	b.n	801bc1e <parse_string_value+0x3a>
    }
    value = json_value_init_string_no_copy(new_string);
 801bc02:	68b8      	ldr	r0, [r7, #8]
 801bc04:	f7ff fb26 	bl	801b254 <json_value_init_string_no_copy>
 801bc08:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d105      	bne.n	801bc1c <parse_string_value+0x38>
        parson_free(new_string);
 801bc10:	4b05      	ldr	r3, [pc, #20]	; (801bc28 <parse_string_value+0x44>)
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	68b8      	ldr	r0, [r7, #8]
 801bc16:	4798      	blx	r3
        return NULL;
 801bc18:	2300      	movs	r3, #0
 801bc1a:	e000      	b.n	801bc1e <parse_string_value+0x3a>
    }
    return value;
 801bc1c:	68fb      	ldr	r3, [r7, #12]
}
 801bc1e:	4618      	mov	r0, r3
 801bc20:	3710      	adds	r7, #16
 801bc22:	46bd      	mov	sp, r7
 801bc24:	bd80      	pop	{r7, pc}
 801bc26:	bf00      	nop
 801bc28:	20000088 	.word	0x20000088

0801bc2c <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 801bc2c:	b580      	push	{r7, lr}
 801bc2e:	b084      	sub	sp, #16
 801bc30:	af00      	add	r7, sp, #0
 801bc32:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 801bc34:	2304      	movs	r3, #4
 801bc36:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 801bc38:	2305      	movs	r3, #5
 801bc3a:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	68fa      	ldr	r2, [r7, #12]
 801bc42:	4619      	mov	r1, r3
 801bc44:	4815      	ldr	r0, [pc, #84]	; (801bc9c <parse_boolean_value+0x70>)
 801bc46:	f002 ff60 	bl	801eb0a <strncmp>
 801bc4a:	4603      	mov	r3, r0
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d10a      	bne.n	801bc66 <parse_boolean_value+0x3a>
        *string += true_token_size;
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	681a      	ldr	r2, [r3, #0]
 801bc54:	68fb      	ldr	r3, [r7, #12]
 801bc56:	441a      	add	r2, r3
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 801bc5c:	2001      	movs	r0, #1
 801bc5e:	f001 fb33 	bl	801d2c8 <json_value_init_boolean>
 801bc62:	4603      	mov	r3, r0
 801bc64:	e015      	b.n	801bc92 <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	68ba      	ldr	r2, [r7, #8]
 801bc6c:	4619      	mov	r1, r3
 801bc6e:	480c      	ldr	r0, [pc, #48]	; (801bca0 <parse_boolean_value+0x74>)
 801bc70:	f002 ff4b 	bl	801eb0a <strncmp>
 801bc74:	4603      	mov	r3, r0
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d10a      	bne.n	801bc90 <parse_boolean_value+0x64>
        *string += false_token_size;
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	681a      	ldr	r2, [r3, #0]
 801bc7e:	68bb      	ldr	r3, [r7, #8]
 801bc80:	441a      	add	r2, r3
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 801bc86:	2000      	movs	r0, #0
 801bc88:	f001 fb1e 	bl	801d2c8 <json_value_init_boolean>
 801bc8c:	4603      	mov	r3, r0
 801bc8e:	e000      	b.n	801bc92 <parse_boolean_value+0x66>
    }
    return NULL;
 801bc90:	2300      	movs	r3, #0
}
 801bc92:	4618      	mov	r0, r3
 801bc94:	3710      	adds	r7, #16
 801bc96:	46bd      	mov	sp, r7
 801bc98:	bd80      	pop	{r7, pc}
 801bc9a:	bf00      	nop
 801bc9c:	08022630 	.word	0x08022630
 801bca0:	08022638 	.word	0x08022638

0801bca4 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b086      	sub	sp, #24
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 801bcac:	f04f 0200 	mov.w	r2, #0
 801bcb0:	f04f 0300 	mov.w	r3, #0
 801bcb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 801bcb8:	f001 fed0 	bl	801da5c <__errno>
 801bcbc:	4603      	mov	r3, r0
 801bcbe:	2200      	movs	r2, #0
 801bcc0:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	f107 020c 	add.w	r2, r7, #12
 801bcca:	4611      	mov	r1, r2
 801bccc:	4618      	mov	r0, r3
 801bcce:	f003 fd69 	bl	801f7a4 <strtod>
 801bcd2:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno || !is_decimal(*string, end - *string)) {
 801bcd6:	f001 fec1 	bl	801da5c <__errno>
 801bcda:	4603      	mov	r3, r0
 801bcdc:	681b      	ldr	r3, [r3, #0]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d10b      	bne.n	801bcfa <parse_number_value+0x56>
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	6818      	ldr	r0, [r3, #0]
 801bce6:	68fa      	ldr	r2, [r7, #12]
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	1ad3      	subs	r3, r2, r3
 801bcee:	4619      	mov	r1, r3
 801bcf0:	f7fe ff68 	bl	801abc4 <is_decimal>
 801bcf4:	4603      	mov	r3, r0
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d101      	bne.n	801bcfe <parse_number_value+0x5a>
        return NULL;
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	e007      	b.n	801bd0e <parse_number_value+0x6a>
    }
    *string = end;
 801bcfe:	68fa      	ldr	r2, [r7, #12]
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 801bd04:	ed97 0b04 	vldr	d0, [r7, #16]
 801bd08:	f001 fa8c 	bl	801d224 <json_value_init_number>
 801bd0c:	4603      	mov	r3, r0
}
 801bd0e:	4618      	mov	r0, r3
 801bd10:	3718      	adds	r7, #24
 801bd12:	46bd      	mov	sp, r7
 801bd14:	bd80      	pop	{r7, pc}
	...

0801bd18 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 801bd18:	b580      	push	{r7, lr}
 801bd1a:	b084      	sub	sp, #16
 801bd1c:	af00      	add	r7, sp, #0
 801bd1e:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 801bd20:	2304      	movs	r3, #4
 801bd22:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	681b      	ldr	r3, [r3, #0]
 801bd28:	68fa      	ldr	r2, [r7, #12]
 801bd2a:	4619      	mov	r1, r3
 801bd2c:	480a      	ldr	r0, [pc, #40]	; (801bd58 <parse_null_value+0x40>)
 801bd2e:	f002 feec 	bl	801eb0a <strncmp>
 801bd32:	4603      	mov	r3, r0
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d109      	bne.n	801bd4c <parse_null_value+0x34>
        *string += token_size;
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	681a      	ldr	r2, [r3, #0]
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	441a      	add	r2, r3
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 801bd44:	f001 fae4 	bl	801d310 <json_value_init_null>
 801bd48:	4603      	mov	r3, r0
 801bd4a:	e000      	b.n	801bd4e <parse_null_value+0x36>
    }
    return NULL;
 801bd4c:	2300      	movs	r3, #0
}
 801bd4e:	4618      	mov	r0, r3
 801bd50:	3710      	adds	r7, #16
 801bd52:	46bd      	mov	sp, r7
 801bd54:	bd80      	pop	{r7, pc}
 801bd56:	bf00      	nop
 801bd58:	08022640 	.word	0x08022640

0801bd5c <json_serialize_to_buffer_r>:
                                  if (written < 0) { return -1; }\
                                  if (buf != NULL) { buf += written; }\
                                  written_total += written; } while(0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, int is_pretty, char *num_buf)
{
 801bd5c:	b580      	push	{r7, lr}
 801bd5e:	b092      	sub	sp, #72	; 0x48
 801bd60:	af02      	add	r7, sp, #8
 801bd62:	60f8      	str	r0, [r7, #12]
 801bd64:	60b9      	str	r1, [r7, #8]
 801bd66:	607a      	str	r2, [r7, #4]
 801bd68:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 801bd6a:	2300      	movs	r3, #0
 801bd6c:	637b      	str	r3, [r7, #52]	; 0x34
 801bd6e:	2300      	movs	r3, #0
 801bd70:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Value *temp_value = NULL;
 801bd72:	2300      	movs	r3, #0
 801bd74:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Array *array = NULL;
 801bd76:	2300      	movs	r3, #0
 801bd78:	62bb      	str	r3, [r7, #40]	; 0x28
    JSON_Object *object = NULL;
 801bd7a:	2300      	movs	r3, #0
 801bd7c:	627b      	str	r3, [r7, #36]	; 0x24
    size_t i = 0, count = 0;
 801bd7e:	2300      	movs	r3, #0
 801bd80:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bd82:	2300      	movs	r3, #0
 801bd84:	623b      	str	r3, [r7, #32]
    double num = 0.0;
 801bd86:	f04f 0200 	mov.w	r2, #0
 801bd8a:	f04f 0300 	mov.w	r3, #0
 801bd8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 801bd92:	f04f 33ff 	mov.w	r3, #4294967295
 801bd96:	617b      	str	r3, [r7, #20]
 801bd98:	2300      	movs	r3, #0
 801bd9a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (json_value_get_type(value)) {
 801bd9c:	68f8      	ldr	r0, [r7, #12]
 801bd9e:	f001 f90e 	bl	801cfbe <json_value_get_type>
 801bda2:	4603      	mov	r3, r0
 801bda4:	3301      	adds	r3, #1
 801bda6:	2b07      	cmp	r3, #7
 801bda8:	f200 82e4 	bhi.w	801c374 <json_serialize_to_buffer_r+0x618>
 801bdac:	a201      	add	r2, pc, #4	; (adr r2, 801bdb4 <json_serialize_to_buffer_r+0x58>)
 801bdae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bdb2:	bf00      	nop
 801bdb4:	0801c36f 	.word	0x0801c36f
 801bdb8:	0801c375 	.word	0x0801c375
 801bdbc:	0801c33f 	.word	0x0801c33f
 801bdc0:	0801c229 	.word	0x0801c229
 801bdc4:	0801c2d7 	.word	0x0801c2d7
 801bdc8:	0801bfa3 	.word	0x0801bfa3
 801bdcc:	0801bdd5 	.word	0x0801bdd5
 801bdd0:	0801c26d 	.word	0x0801c26d
        case JSONArray:
            array = json_value_get_array(value);
 801bdd4:	68f8      	ldr	r0, [r7, #12]
 801bdd6:	f001 f916 	bl	801d006 <json_value_get_array>
 801bdda:	62b8      	str	r0, [r7, #40]	; 0x28
            count = json_array_get_count(array);
 801bddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bdde:	f001 f8d1 	bl	801cf84 <json_array_get_count>
 801bde2:	6238      	str	r0, [r7, #32]
            APPEND_STRING("[");
 801bde4:	499b      	ldr	r1, [pc, #620]	; (801c054 <json_serialize_to_buffer_r+0x2f8>)
 801bde6:	68b8      	ldr	r0, [r7, #8]
 801bde8:	f000 ff94 	bl	801cd14 <append_string>
 801bdec:	6178      	str	r0, [r7, #20]
 801bdee:	697b      	ldr	r3, [r7, #20]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	da02      	bge.n	801bdfa <json_serialize_to_buffer_r+0x9e>
 801bdf4:	f04f 33ff 	mov.w	r3, #4294967295
 801bdf8:	e2be      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801bdfa:	68bb      	ldr	r3, [r7, #8]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d003      	beq.n	801be08 <json_serialize_to_buffer_r+0xac>
 801be00:	697b      	ldr	r3, [r7, #20]
 801be02:	68ba      	ldr	r2, [r7, #8]
 801be04:	4413      	add	r3, r2
 801be06:	60bb      	str	r3, [r7, #8]
 801be08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be0a:	697b      	ldr	r3, [r7, #20]
 801be0c:	4413      	add	r3, r2
 801be0e:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801be10:	6a3b      	ldr	r3, [r7, #32]
 801be12:	2b00      	cmp	r3, #0
 801be14:	d018      	beq.n	801be48 <json_serialize_to_buffer_r+0xec>
 801be16:	683b      	ldr	r3, [r7, #0]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d015      	beq.n	801be48 <json_serialize_to_buffer_r+0xec>
                APPEND_STRING("\n");
 801be1c:	498e      	ldr	r1, [pc, #568]	; (801c058 <json_serialize_to_buffer_r+0x2fc>)
 801be1e:	68b8      	ldr	r0, [r7, #8]
 801be20:	f000 ff78 	bl	801cd14 <append_string>
 801be24:	6178      	str	r0, [r7, #20]
 801be26:	697b      	ldr	r3, [r7, #20]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	da02      	bge.n	801be32 <json_serialize_to_buffer_r+0xd6>
 801be2c:	f04f 33ff 	mov.w	r3, #4294967295
 801be30:	e2a2      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801be32:	68bb      	ldr	r3, [r7, #8]
 801be34:	2b00      	cmp	r3, #0
 801be36:	d003      	beq.n	801be40 <json_serialize_to_buffer_r+0xe4>
 801be38:	697b      	ldr	r3, [r7, #20]
 801be3a:	68ba      	ldr	r2, [r7, #8]
 801be3c:	4413      	add	r3, r2
 801be3e:	60bb      	str	r3, [r7, #8]
 801be40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be42:	697b      	ldr	r3, [r7, #20]
 801be44:	4413      	add	r3, r2
 801be46:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801be48:	2300      	movs	r3, #0
 801be4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801be4c:	e071      	b.n	801bf32 <json_serialize_to_buffer_r+0x1d6>
                if (is_pretty) {
 801be4e:	683b      	ldr	r3, [r7, #0]
 801be50:	2b00      	cmp	r3, #0
 801be52:	d017      	beq.n	801be84 <json_serialize_to_buffer_r+0x128>
                    APPEND_INDENT(level+1);
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	3301      	adds	r3, #1
 801be58:	4619      	mov	r1, r3
 801be5a:	68b8      	ldr	r0, [r7, #8]
 801be5c:	f000 ff28 	bl	801ccb0 <append_indent>
 801be60:	6178      	str	r0, [r7, #20]
 801be62:	697b      	ldr	r3, [r7, #20]
 801be64:	2b00      	cmp	r3, #0
 801be66:	da02      	bge.n	801be6e <json_serialize_to_buffer_r+0x112>
 801be68:	f04f 33ff 	mov.w	r3, #4294967295
 801be6c:	e284      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801be6e:	68bb      	ldr	r3, [r7, #8]
 801be70:	2b00      	cmp	r3, #0
 801be72:	d003      	beq.n	801be7c <json_serialize_to_buffer_r+0x120>
 801be74:	697b      	ldr	r3, [r7, #20]
 801be76:	68ba      	ldr	r2, [r7, #8]
 801be78:	4413      	add	r3, r2
 801be7a:	60bb      	str	r3, [r7, #8]
 801be7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801be7e:	697b      	ldr	r3, [r7, #20]
 801be80:	4413      	add	r3, r2
 801be82:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_array_get_value(array, i);
 801be84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801be86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801be88:	f001 f84f 	bl	801cf2a <json_array_get_value>
 801be8c:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	1c5a      	adds	r2, r3, #1
 801be92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be94:	9300      	str	r3, [sp, #0]
 801be96:	683b      	ldr	r3, [r7, #0]
 801be98:	68b9      	ldr	r1, [r7, #8]
 801be9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801be9c:	f7ff ff5e 	bl	801bd5c <json_serialize_to_buffer_r>
 801bea0:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801bea2:	697b      	ldr	r3, [r7, #20]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	da02      	bge.n	801beae <json_serialize_to_buffer_r+0x152>
                    return -1;
 801bea8:	f04f 33ff 	mov.w	r3, #4294967295
 801beac:	e264      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801beae:	68bb      	ldr	r3, [r7, #8]
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d003      	beq.n	801bebc <json_serialize_to_buffer_r+0x160>
                    buf += written;
 801beb4:	697b      	ldr	r3, [r7, #20]
 801beb6:	68ba      	ldr	r2, [r7, #8]
 801beb8:	4413      	add	r3, r2
 801beba:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801bebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bebe:	697b      	ldr	r3, [r7, #20]
 801bec0:	4413      	add	r3, r2
 801bec2:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801bec4:	6a3b      	ldr	r3, [r7, #32]
 801bec6:	3b01      	subs	r3, #1
 801bec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801beca:	429a      	cmp	r2, r3
 801becc:	d215      	bcs.n	801befa <json_serialize_to_buffer_r+0x19e>
                    APPEND_STRING(",");
 801bece:	4963      	ldr	r1, [pc, #396]	; (801c05c <json_serialize_to_buffer_r+0x300>)
 801bed0:	68b8      	ldr	r0, [r7, #8]
 801bed2:	f000 ff1f 	bl	801cd14 <append_string>
 801bed6:	6178      	str	r0, [r7, #20]
 801bed8:	697b      	ldr	r3, [r7, #20]
 801beda:	2b00      	cmp	r3, #0
 801bedc:	da02      	bge.n	801bee4 <json_serialize_to_buffer_r+0x188>
 801bede:	f04f 33ff 	mov.w	r3, #4294967295
 801bee2:	e249      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801bee4:	68bb      	ldr	r3, [r7, #8]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d003      	beq.n	801bef2 <json_serialize_to_buffer_r+0x196>
 801beea:	697b      	ldr	r3, [r7, #20]
 801beec:	68ba      	ldr	r2, [r7, #8]
 801beee:	4413      	add	r3, r2
 801bef0:	60bb      	str	r3, [r7, #8]
 801bef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bef4:	697b      	ldr	r3, [r7, #20]
 801bef6:	4413      	add	r3, r2
 801bef8:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801befa:	683b      	ldr	r3, [r7, #0]
 801befc:	2b00      	cmp	r3, #0
 801befe:	d015      	beq.n	801bf2c <json_serialize_to_buffer_r+0x1d0>
                    APPEND_STRING("\n");
 801bf00:	4955      	ldr	r1, [pc, #340]	; (801c058 <json_serialize_to_buffer_r+0x2fc>)
 801bf02:	68b8      	ldr	r0, [r7, #8]
 801bf04:	f000 ff06 	bl	801cd14 <append_string>
 801bf08:	6178      	str	r0, [r7, #20]
 801bf0a:	697b      	ldr	r3, [r7, #20]
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	da02      	bge.n	801bf16 <json_serialize_to_buffer_r+0x1ba>
 801bf10:	f04f 33ff 	mov.w	r3, #4294967295
 801bf14:	e230      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801bf16:	68bb      	ldr	r3, [r7, #8]
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d003      	beq.n	801bf24 <json_serialize_to_buffer_r+0x1c8>
 801bf1c:	697b      	ldr	r3, [r7, #20]
 801bf1e:	68ba      	ldr	r2, [r7, #8]
 801bf20:	4413      	add	r3, r2
 801bf22:	60bb      	str	r3, [r7, #8]
 801bf24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf26:	697b      	ldr	r3, [r7, #20]
 801bf28:	4413      	add	r3, r2
 801bf2a:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801bf2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf2e:	3301      	adds	r3, #1
 801bf30:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bf32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bf34:	6a3b      	ldr	r3, [r7, #32]
 801bf36:	429a      	cmp	r2, r3
 801bf38:	d389      	bcc.n	801be4e <json_serialize_to_buffer_r+0xf2>
                }
            }
            if (count > 0 && is_pretty) {
 801bf3a:	6a3b      	ldr	r3, [r7, #32]
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d018      	beq.n	801bf72 <json_serialize_to_buffer_r+0x216>
 801bf40:	683b      	ldr	r3, [r7, #0]
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d015      	beq.n	801bf72 <json_serialize_to_buffer_r+0x216>
                APPEND_INDENT(level);
 801bf46:	6879      	ldr	r1, [r7, #4]
 801bf48:	68b8      	ldr	r0, [r7, #8]
 801bf4a:	f000 feb1 	bl	801ccb0 <append_indent>
 801bf4e:	6178      	str	r0, [r7, #20]
 801bf50:	697b      	ldr	r3, [r7, #20]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	da02      	bge.n	801bf5c <json_serialize_to_buffer_r+0x200>
 801bf56:	f04f 33ff 	mov.w	r3, #4294967295
 801bf5a:	e20d      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801bf5c:	68bb      	ldr	r3, [r7, #8]
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d003      	beq.n	801bf6a <json_serialize_to_buffer_r+0x20e>
 801bf62:	697b      	ldr	r3, [r7, #20]
 801bf64:	68ba      	ldr	r2, [r7, #8]
 801bf66:	4413      	add	r3, r2
 801bf68:	60bb      	str	r3, [r7, #8]
 801bf6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf6c:	697b      	ldr	r3, [r7, #20]
 801bf6e:	4413      	add	r3, r2
 801bf70:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("]");
 801bf72:	493b      	ldr	r1, [pc, #236]	; (801c060 <json_serialize_to_buffer_r+0x304>)
 801bf74:	68b8      	ldr	r0, [r7, #8]
 801bf76:	f000 fecd 	bl	801cd14 <append_string>
 801bf7a:	6178      	str	r0, [r7, #20]
 801bf7c:	697b      	ldr	r3, [r7, #20]
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	da02      	bge.n	801bf88 <json_serialize_to_buffer_r+0x22c>
 801bf82:	f04f 33ff 	mov.w	r3, #4294967295
 801bf86:	e1f7      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801bf88:	68bb      	ldr	r3, [r7, #8]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d003      	beq.n	801bf96 <json_serialize_to_buffer_r+0x23a>
 801bf8e:	697b      	ldr	r3, [r7, #20]
 801bf90:	68ba      	ldr	r2, [r7, #8]
 801bf92:	4413      	add	r3, r2
 801bf94:	60bb      	str	r3, [r7, #8]
 801bf96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf98:	697b      	ldr	r3, [r7, #20]
 801bf9a:	4413      	add	r3, r2
 801bf9c:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfa0:	e1ea      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
        case JSONObject:
            object = json_value_get_object(value);
 801bfa2:	68f8      	ldr	r0, [r7, #12]
 801bfa4:	f001 f81d 	bl	801cfe2 <json_value_get_object>
 801bfa8:	6278      	str	r0, [r7, #36]	; 0x24
            count  = json_object_get_count(object);
 801bfaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bfac:	f000 ff72 	bl	801ce94 <json_object_get_count>
 801bfb0:	6238      	str	r0, [r7, #32]
            APPEND_STRING("{");
 801bfb2:	492c      	ldr	r1, [pc, #176]	; (801c064 <json_serialize_to_buffer_r+0x308>)
 801bfb4:	68b8      	ldr	r0, [r7, #8]
 801bfb6:	f000 fead 	bl	801cd14 <append_string>
 801bfba:	6178      	str	r0, [r7, #20]
 801bfbc:	697b      	ldr	r3, [r7, #20]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	da02      	bge.n	801bfc8 <json_serialize_to_buffer_r+0x26c>
 801bfc2:	f04f 33ff 	mov.w	r3, #4294967295
 801bfc6:	e1d7      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801bfc8:	68bb      	ldr	r3, [r7, #8]
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d003      	beq.n	801bfd6 <json_serialize_to_buffer_r+0x27a>
 801bfce:	697b      	ldr	r3, [r7, #20]
 801bfd0:	68ba      	ldr	r2, [r7, #8]
 801bfd2:	4413      	add	r3, r2
 801bfd4:	60bb      	str	r3, [r7, #8]
 801bfd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bfd8:	697b      	ldr	r3, [r7, #20]
 801bfda:	4413      	add	r3, r2
 801bfdc:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801bfde:	6a3b      	ldr	r3, [r7, #32]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d018      	beq.n	801c016 <json_serialize_to_buffer_r+0x2ba>
 801bfe4:	683b      	ldr	r3, [r7, #0]
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d015      	beq.n	801c016 <json_serialize_to_buffer_r+0x2ba>
                APPEND_STRING("\n");
 801bfea:	491b      	ldr	r1, [pc, #108]	; (801c058 <json_serialize_to_buffer_r+0x2fc>)
 801bfec:	68b8      	ldr	r0, [r7, #8]
 801bfee:	f000 fe91 	bl	801cd14 <append_string>
 801bff2:	6178      	str	r0, [r7, #20]
 801bff4:	697b      	ldr	r3, [r7, #20]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	da02      	bge.n	801c000 <json_serialize_to_buffer_r+0x2a4>
 801bffa:	f04f 33ff 	mov.w	r3, #4294967295
 801bffe:	e1bb      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801c000:	68bb      	ldr	r3, [r7, #8]
 801c002:	2b00      	cmp	r3, #0
 801c004:	d003      	beq.n	801c00e <json_serialize_to_buffer_r+0x2b2>
 801c006:	697b      	ldr	r3, [r7, #20]
 801c008:	68ba      	ldr	r2, [r7, #8]
 801c00a:	4413      	add	r3, r2
 801c00c:	60bb      	str	r3, [r7, #8]
 801c00e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c010:	697b      	ldr	r3, [r7, #20]
 801c012:	4413      	add	r3, r2
 801c014:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801c016:	2300      	movs	r3, #0
 801c018:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c01a:	e0cc      	b.n	801c1b6 <json_serialize_to_buffer_r+0x45a>
                key = json_object_get_name(object, i);
 801c01c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c01e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c020:	f000 ff49 	bl	801ceb6 <json_object_get_name>
 801c024:	6378      	str	r0, [r7, #52]	; 0x34
                if (key == NULL) {
 801c026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d102      	bne.n	801c032 <json_serialize_to_buffer_r+0x2d6>
                    return -1;
 801c02c:	f04f 33ff 	mov.w	r3, #4294967295
 801c030:	e1a2      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
                }
                if (is_pretty) {
 801c032:	683b      	ldr	r3, [r7, #0]
 801c034:	2b00      	cmp	r3, #0
 801c036:	d022      	beq.n	801c07e <json_serialize_to_buffer_r+0x322>
                    APPEND_INDENT(level+1);
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	3301      	adds	r3, #1
 801c03c:	4619      	mov	r1, r3
 801c03e:	68b8      	ldr	r0, [r7, #8]
 801c040:	f000 fe36 	bl	801ccb0 <append_indent>
 801c044:	6178      	str	r0, [r7, #20]
 801c046:	697b      	ldr	r3, [r7, #20]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	da0d      	bge.n	801c068 <json_serialize_to_buffer_r+0x30c>
 801c04c:	f04f 33ff 	mov.w	r3, #4294967295
 801c050:	e192      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801c052:	bf00      	nop
 801c054:	08022648 	.word	0x08022648
 801c058:	0802264c 	.word	0x0802264c
 801c05c:	08022650 	.word	0x08022650
 801c060:	08022654 	.word	0x08022654
 801c064:	08022658 	.word	0x08022658
 801c068:	68bb      	ldr	r3, [r7, #8]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d003      	beq.n	801c076 <json_serialize_to_buffer_r+0x31a>
 801c06e:	697b      	ldr	r3, [r7, #20]
 801c070:	68ba      	ldr	r2, [r7, #8]
 801c072:	4413      	add	r3, r2
 801c074:	60bb      	str	r3, [r7, #8]
 801c076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c078:	697b      	ldr	r3, [r7, #20]
 801c07a:	4413      	add	r3, r2
 801c07c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                written = json_serialize_string(key, buf);
 801c07e:	68b9      	ldr	r1, [r7, #8]
 801c080:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801c082:	f000 f97f 	bl	801c384 <json_serialize_string>
 801c086:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801c088:	697b      	ldr	r3, [r7, #20]
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	da02      	bge.n	801c094 <json_serialize_to_buffer_r+0x338>
                    return -1;
 801c08e:	f04f 33ff 	mov.w	r3, #4294967295
 801c092:	e171      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801c094:	68bb      	ldr	r3, [r7, #8]
 801c096:	2b00      	cmp	r3, #0
 801c098:	d003      	beq.n	801c0a2 <json_serialize_to_buffer_r+0x346>
                    buf += written;
 801c09a:	697b      	ldr	r3, [r7, #20]
 801c09c:	68ba      	ldr	r2, [r7, #8]
 801c09e:	4413      	add	r3, r2
 801c0a0:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801c0a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c0a4:	697b      	ldr	r3, [r7, #20]
 801c0a6:	4413      	add	r3, r2
 801c0a8:	63bb      	str	r3, [r7, #56]	; 0x38
                APPEND_STRING(":");
 801c0aa:	4996      	ldr	r1, [pc, #600]	; (801c304 <json_serialize_to_buffer_r+0x5a8>)
 801c0ac:	68b8      	ldr	r0, [r7, #8]
 801c0ae:	f000 fe31 	bl	801cd14 <append_string>
 801c0b2:	6178      	str	r0, [r7, #20]
 801c0b4:	697b      	ldr	r3, [r7, #20]
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	da02      	bge.n	801c0c0 <json_serialize_to_buffer_r+0x364>
 801c0ba:	f04f 33ff 	mov.w	r3, #4294967295
 801c0be:	e15b      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801c0c0:	68bb      	ldr	r3, [r7, #8]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d003      	beq.n	801c0ce <json_serialize_to_buffer_r+0x372>
 801c0c6:	697b      	ldr	r3, [r7, #20]
 801c0c8:	68ba      	ldr	r2, [r7, #8]
 801c0ca:	4413      	add	r3, r2
 801c0cc:	60bb      	str	r3, [r7, #8]
 801c0ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c0d0:	697b      	ldr	r3, [r7, #20]
 801c0d2:	4413      	add	r3, r2
 801c0d4:	63bb      	str	r3, [r7, #56]	; 0x38
                if (is_pretty) {
 801c0d6:	683b      	ldr	r3, [r7, #0]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d015      	beq.n	801c108 <json_serialize_to_buffer_r+0x3ac>
                    APPEND_STRING(" ");
 801c0dc:	498a      	ldr	r1, [pc, #552]	; (801c308 <json_serialize_to_buffer_r+0x5ac>)
 801c0de:	68b8      	ldr	r0, [r7, #8]
 801c0e0:	f000 fe18 	bl	801cd14 <append_string>
 801c0e4:	6178      	str	r0, [r7, #20]
 801c0e6:	697b      	ldr	r3, [r7, #20]
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	da02      	bge.n	801c0f2 <json_serialize_to_buffer_r+0x396>
 801c0ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c0f0:	e142      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801c0f2:	68bb      	ldr	r3, [r7, #8]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d003      	beq.n	801c100 <json_serialize_to_buffer_r+0x3a4>
 801c0f8:	697b      	ldr	r3, [r7, #20]
 801c0fa:	68ba      	ldr	r2, [r7, #8]
 801c0fc:	4413      	add	r3, r2
 801c0fe:	60bb      	str	r3, [r7, #8]
 801c100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c102:	697b      	ldr	r3, [r7, #20]
 801c104:	4413      	add	r3, r2
 801c106:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_object_get_value(object, key);
 801c108:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c10a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c10c:	f000 fe40 	bl	801cd90 <json_object_get_value>
 801c110:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	1c5a      	adds	r2, r3, #1
 801c116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c118:	9300      	str	r3, [sp, #0]
 801c11a:	683b      	ldr	r3, [r7, #0]
 801c11c:	68b9      	ldr	r1, [r7, #8]
 801c11e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c120:	f7ff fe1c 	bl	801bd5c <json_serialize_to_buffer_r>
 801c124:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801c126:	697b      	ldr	r3, [r7, #20]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	da02      	bge.n	801c132 <json_serialize_to_buffer_r+0x3d6>
                    return -1;
 801c12c:	f04f 33ff 	mov.w	r3, #4294967295
 801c130:	e122      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801c132:	68bb      	ldr	r3, [r7, #8]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d003      	beq.n	801c140 <json_serialize_to_buffer_r+0x3e4>
                    buf += written;
 801c138:	697b      	ldr	r3, [r7, #20]
 801c13a:	68ba      	ldr	r2, [r7, #8]
 801c13c:	4413      	add	r3, r2
 801c13e:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801c140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c142:	697b      	ldr	r3, [r7, #20]
 801c144:	4413      	add	r3, r2
 801c146:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801c148:	6a3b      	ldr	r3, [r7, #32]
 801c14a:	3b01      	subs	r3, #1
 801c14c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c14e:	429a      	cmp	r2, r3
 801c150:	d215      	bcs.n	801c17e <json_serialize_to_buffer_r+0x422>
                    APPEND_STRING(",");
 801c152:	496e      	ldr	r1, [pc, #440]	; (801c30c <json_serialize_to_buffer_r+0x5b0>)
 801c154:	68b8      	ldr	r0, [r7, #8]
 801c156:	f000 fddd 	bl	801cd14 <append_string>
 801c15a:	6178      	str	r0, [r7, #20]
 801c15c:	697b      	ldr	r3, [r7, #20]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	da02      	bge.n	801c168 <json_serialize_to_buffer_r+0x40c>
 801c162:	f04f 33ff 	mov.w	r3, #4294967295
 801c166:	e107      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801c168:	68bb      	ldr	r3, [r7, #8]
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d003      	beq.n	801c176 <json_serialize_to_buffer_r+0x41a>
 801c16e:	697b      	ldr	r3, [r7, #20]
 801c170:	68ba      	ldr	r2, [r7, #8]
 801c172:	4413      	add	r3, r2
 801c174:	60bb      	str	r3, [r7, #8]
 801c176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c178:	697b      	ldr	r3, [r7, #20]
 801c17a:	4413      	add	r3, r2
 801c17c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801c17e:	683b      	ldr	r3, [r7, #0]
 801c180:	2b00      	cmp	r3, #0
 801c182:	d015      	beq.n	801c1b0 <json_serialize_to_buffer_r+0x454>
                    APPEND_STRING("\n");
 801c184:	4962      	ldr	r1, [pc, #392]	; (801c310 <json_serialize_to_buffer_r+0x5b4>)
 801c186:	68b8      	ldr	r0, [r7, #8]
 801c188:	f000 fdc4 	bl	801cd14 <append_string>
 801c18c:	6178      	str	r0, [r7, #20]
 801c18e:	697b      	ldr	r3, [r7, #20]
 801c190:	2b00      	cmp	r3, #0
 801c192:	da02      	bge.n	801c19a <json_serialize_to_buffer_r+0x43e>
 801c194:	f04f 33ff 	mov.w	r3, #4294967295
 801c198:	e0ee      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801c19a:	68bb      	ldr	r3, [r7, #8]
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d003      	beq.n	801c1a8 <json_serialize_to_buffer_r+0x44c>
 801c1a0:	697b      	ldr	r3, [r7, #20]
 801c1a2:	68ba      	ldr	r2, [r7, #8]
 801c1a4:	4413      	add	r3, r2
 801c1a6:	60bb      	str	r3, [r7, #8]
 801c1a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c1aa:	697b      	ldr	r3, [r7, #20]
 801c1ac:	4413      	add	r3, r2
 801c1ae:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801c1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1b2:	3301      	adds	r3, #1
 801c1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c1b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c1b8:	6a3b      	ldr	r3, [r7, #32]
 801c1ba:	429a      	cmp	r2, r3
 801c1bc:	f4ff af2e 	bcc.w	801c01c <json_serialize_to_buffer_r+0x2c0>
                }
            }
            if (count > 0 && is_pretty) {
 801c1c0:	6a3b      	ldr	r3, [r7, #32]
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d018      	beq.n	801c1f8 <json_serialize_to_buffer_r+0x49c>
 801c1c6:	683b      	ldr	r3, [r7, #0]
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	d015      	beq.n	801c1f8 <json_serialize_to_buffer_r+0x49c>
                APPEND_INDENT(level);
 801c1cc:	6879      	ldr	r1, [r7, #4]
 801c1ce:	68b8      	ldr	r0, [r7, #8]
 801c1d0:	f000 fd6e 	bl	801ccb0 <append_indent>
 801c1d4:	6178      	str	r0, [r7, #20]
 801c1d6:	697b      	ldr	r3, [r7, #20]
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	da02      	bge.n	801c1e2 <json_serialize_to_buffer_r+0x486>
 801c1dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c1e0:	e0ca      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801c1e2:	68bb      	ldr	r3, [r7, #8]
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d003      	beq.n	801c1f0 <json_serialize_to_buffer_r+0x494>
 801c1e8:	697b      	ldr	r3, [r7, #20]
 801c1ea:	68ba      	ldr	r2, [r7, #8]
 801c1ec:	4413      	add	r3, r2
 801c1ee:	60bb      	str	r3, [r7, #8]
 801c1f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c1f2:	697b      	ldr	r3, [r7, #20]
 801c1f4:	4413      	add	r3, r2
 801c1f6:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("}");
 801c1f8:	4946      	ldr	r1, [pc, #280]	; (801c314 <json_serialize_to_buffer_r+0x5b8>)
 801c1fa:	68b8      	ldr	r0, [r7, #8]
 801c1fc:	f000 fd8a 	bl	801cd14 <append_string>
 801c200:	6178      	str	r0, [r7, #20]
 801c202:	697b      	ldr	r3, [r7, #20]
 801c204:	2b00      	cmp	r3, #0
 801c206:	da02      	bge.n	801c20e <json_serialize_to_buffer_r+0x4b2>
 801c208:	f04f 33ff 	mov.w	r3, #4294967295
 801c20c:	e0b4      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801c20e:	68bb      	ldr	r3, [r7, #8]
 801c210:	2b00      	cmp	r3, #0
 801c212:	d003      	beq.n	801c21c <json_serialize_to_buffer_r+0x4c0>
 801c214:	697b      	ldr	r3, [r7, #20]
 801c216:	68ba      	ldr	r2, [r7, #8]
 801c218:	4413      	add	r3, r2
 801c21a:	60bb      	str	r3, [r7, #8]
 801c21c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c21e:	697b      	ldr	r3, [r7, #20]
 801c220:	4413      	add	r3, r2
 801c222:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c226:	e0a7      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
        case JSONString:
            string = json_value_get_string(value);
 801c228:	68f8      	ldr	r0, [r7, #12]
 801c22a:	f000 fefe 	bl	801d02a <json_value_get_string>
 801c22e:	6338      	str	r0, [r7, #48]	; 0x30
            if (string == NULL) {
 801c230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c232:	2b00      	cmp	r3, #0
 801c234:	d102      	bne.n	801c23c <json_serialize_to_buffer_r+0x4e0>
                return -1;
 801c236:	f04f 33ff 	mov.w	r3, #4294967295
 801c23a:	e09d      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
            }
            written = json_serialize_string(string, buf);
 801c23c:	68b9      	ldr	r1, [r7, #8]
 801c23e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c240:	f000 f8a0 	bl	801c384 <json_serialize_string>
 801c244:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801c246:	697b      	ldr	r3, [r7, #20]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	da02      	bge.n	801c252 <json_serialize_to_buffer_r+0x4f6>
                return -1;
 801c24c:	f04f 33ff 	mov.w	r3, #4294967295
 801c250:	e092      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
            }
            if (buf != NULL) {
 801c252:	68bb      	ldr	r3, [r7, #8]
 801c254:	2b00      	cmp	r3, #0
 801c256:	d003      	beq.n	801c260 <json_serialize_to_buffer_r+0x504>
                buf += written;
 801c258:	697b      	ldr	r3, [r7, #20]
 801c25a:	68ba      	ldr	r2, [r7, #8]
 801c25c:	4413      	add	r3, r2
 801c25e:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801c260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c262:	697b      	ldr	r3, [r7, #20]
 801c264:	4413      	add	r3, r2
 801c266:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c26a:	e085      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 801c26c:	68f8      	ldr	r0, [r7, #12]
 801c26e:	f000 ff09 	bl	801d084 <json_value_get_boolean>
 801c272:	4603      	mov	r3, r0
 801c274:	2b00      	cmp	r3, #0
 801c276:	d016      	beq.n	801c2a6 <json_serialize_to_buffer_r+0x54a>
                APPEND_STRING("true");
 801c278:	4927      	ldr	r1, [pc, #156]	; (801c318 <json_serialize_to_buffer_r+0x5bc>)
 801c27a:	68b8      	ldr	r0, [r7, #8]
 801c27c:	f000 fd4a 	bl	801cd14 <append_string>
 801c280:	6178      	str	r0, [r7, #20]
 801c282:	697b      	ldr	r3, [r7, #20]
 801c284:	2b00      	cmp	r3, #0
 801c286:	da02      	bge.n	801c28e <json_serialize_to_buffer_r+0x532>
 801c288:	f04f 33ff 	mov.w	r3, #4294967295
 801c28c:	e074      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801c28e:	68bb      	ldr	r3, [r7, #8]
 801c290:	2b00      	cmp	r3, #0
 801c292:	d003      	beq.n	801c29c <json_serialize_to_buffer_r+0x540>
 801c294:	697b      	ldr	r3, [r7, #20]
 801c296:	68ba      	ldr	r2, [r7, #8]
 801c298:	4413      	add	r3, r2
 801c29a:	60bb      	str	r3, [r7, #8]
 801c29c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c29e:	697b      	ldr	r3, [r7, #20]
 801c2a0:	4413      	add	r3, r2
 801c2a2:	63bb      	str	r3, [r7, #56]	; 0x38
 801c2a4:	e015      	b.n	801c2d2 <json_serialize_to_buffer_r+0x576>
            } else {
                APPEND_STRING("false");
 801c2a6:	491d      	ldr	r1, [pc, #116]	; (801c31c <json_serialize_to_buffer_r+0x5c0>)
 801c2a8:	68b8      	ldr	r0, [r7, #8]
 801c2aa:	f000 fd33 	bl	801cd14 <append_string>
 801c2ae:	6178      	str	r0, [r7, #20]
 801c2b0:	697b      	ldr	r3, [r7, #20]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	da02      	bge.n	801c2bc <json_serialize_to_buffer_r+0x560>
 801c2b6:	f04f 33ff 	mov.w	r3, #4294967295
 801c2ba:	e05d      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801c2bc:	68bb      	ldr	r3, [r7, #8]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d003      	beq.n	801c2ca <json_serialize_to_buffer_r+0x56e>
 801c2c2:	697b      	ldr	r3, [r7, #20]
 801c2c4:	68ba      	ldr	r2, [r7, #8]
 801c2c6:	4413      	add	r3, r2
 801c2c8:	60bb      	str	r3, [r7, #8]
 801c2ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c2cc:	697b      	ldr	r3, [r7, #20]
 801c2ce:	4413      	add	r3, r2
 801c2d0:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            return written_total;
 801c2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2d4:	e050      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
        case JSONNumber:
            num = json_value_get_number(value);
 801c2d6:	68f8      	ldr	r0, [r7, #12]
 801c2d8:	f000 feb9 	bl	801d04e <json_value_get_number>
 801c2dc:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 801c2e0:	68bb      	ldr	r3, [r7, #8]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d001      	beq.n	801c2ea <json_serialize_to_buffer_r+0x58e>
                num_buf = buf;
 801c2e6:	68bb      	ldr	r3, [r7, #8]
 801c2e8:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 801c2ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c2ee:	490c      	ldr	r1, [pc, #48]	; (801c320 <json_serialize_to_buffer_r+0x5c4>)
 801c2f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801c2f2:	f002 fb8b 	bl	801ea0c <siprintf>
 801c2f6:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801c2f8:	697b      	ldr	r3, [r7, #20]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	da12      	bge.n	801c324 <json_serialize_to_buffer_r+0x5c8>
                return -1;
 801c2fe:	f04f 33ff 	mov.w	r3, #4294967295
 801c302:	e039      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801c304:	0802265c 	.word	0x0802265c
 801c308:	08022660 	.word	0x08022660
 801c30c:	08022650 	.word	0x08022650
 801c310:	0802264c 	.word	0x0802264c
 801c314:	08022664 	.word	0x08022664
 801c318:	08022630 	.word	0x08022630
 801c31c:	08022638 	.word	0x08022638
 801c320:	08022668 	.word	0x08022668
            }
            if (buf != NULL) {
 801c324:	68bb      	ldr	r3, [r7, #8]
 801c326:	2b00      	cmp	r3, #0
 801c328:	d003      	beq.n	801c332 <json_serialize_to_buffer_r+0x5d6>
                buf += written;
 801c32a:	697b      	ldr	r3, [r7, #20]
 801c32c:	68ba      	ldr	r2, [r7, #8]
 801c32e:	4413      	add	r3, r2
 801c330:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801c332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c334:	697b      	ldr	r3, [r7, #20]
 801c336:	4413      	add	r3, r2
 801c338:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c33c:	e01c      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
        case JSONNull:
            APPEND_STRING("null");
 801c33e:	4910      	ldr	r1, [pc, #64]	; (801c380 <json_serialize_to_buffer_r+0x624>)
 801c340:	68b8      	ldr	r0, [r7, #8]
 801c342:	f000 fce7 	bl	801cd14 <append_string>
 801c346:	6178      	str	r0, [r7, #20]
 801c348:	697b      	ldr	r3, [r7, #20]
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	da02      	bge.n	801c354 <json_serialize_to_buffer_r+0x5f8>
 801c34e:	f04f 33ff 	mov.w	r3, #4294967295
 801c352:	e011      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
 801c354:	68bb      	ldr	r3, [r7, #8]
 801c356:	2b00      	cmp	r3, #0
 801c358:	d003      	beq.n	801c362 <json_serialize_to_buffer_r+0x606>
 801c35a:	697b      	ldr	r3, [r7, #20]
 801c35c:	68ba      	ldr	r2, [r7, #8]
 801c35e:	4413      	add	r3, r2
 801c360:	60bb      	str	r3, [r7, #8]
 801c362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c364:	697b      	ldr	r3, [r7, #20]
 801c366:	4413      	add	r3, r2
 801c368:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c36c:	e004      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
        case JSONError:
            return -1;
 801c36e:	f04f 33ff 	mov.w	r3, #4294967295
 801c372:	e001      	b.n	801c378 <json_serialize_to_buffer_r+0x61c>
        default:
            return -1;
 801c374:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801c378:	4618      	mov	r0, r3
 801c37a:	3740      	adds	r7, #64	; 0x40
 801c37c:	46bd      	mov	sp, r7
 801c37e:	bd80      	pop	{r7, pc}
 801c380:	08022640 	.word	0x08022640

0801c384 <json_serialize_string>:

static int json_serialize_string(const char *string, char *buf) {
 801c384:	b580      	push	{r7, lr}
 801c386:	b088      	sub	sp, #32
 801c388:	af00      	add	r7, sp, #0
 801c38a:	6078      	str	r0, [r7, #4]
 801c38c:	6039      	str	r1, [r7, #0]
    size_t i = 0, len = strlen(string);
 801c38e:	2300      	movs	r3, #0
 801c390:	61fb      	str	r3, [r7, #28]
 801c392:	6878      	ldr	r0, [r7, #4]
 801c394:	f7e3 ff3e 	bl	8000214 <strlen>
 801c398:	6178      	str	r0, [r7, #20]
    char c = '\0';
 801c39a:	2300      	movs	r3, #0
 801c39c:	74fb      	strb	r3, [r7, #19]
    int written = -1, written_total = 0;
 801c39e:	f04f 33ff 	mov.w	r3, #4294967295
 801c3a2:	60fb      	str	r3, [r7, #12]
 801c3a4:	2300      	movs	r3, #0
 801c3a6:	61bb      	str	r3, [r7, #24]
    APPEND_STRING("\"");
 801c3a8:	49bb      	ldr	r1, [pc, #748]	; (801c698 <json_serialize_string+0x314>)
 801c3aa:	6838      	ldr	r0, [r7, #0]
 801c3ac:	f000 fcb2 	bl	801cd14 <append_string>
 801c3b0:	60f8      	str	r0, [r7, #12]
 801c3b2:	68fb      	ldr	r3, [r7, #12]
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	da03      	bge.n	801c3c0 <json_serialize_string+0x3c>
 801c3b8:	f04f 33ff 	mov.w	r3, #4294967295
 801c3bc:	f000 bc6e 	b.w	801cc9c <json_serialize_string+0x918>
 801c3c0:	683b      	ldr	r3, [r7, #0]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d003      	beq.n	801c3ce <json_serialize_string+0x4a>
 801c3c6:	68fb      	ldr	r3, [r7, #12]
 801c3c8:	683a      	ldr	r2, [r7, #0]
 801c3ca:	4413      	add	r3, r2
 801c3cc:	603b      	str	r3, [r7, #0]
 801c3ce:	69ba      	ldr	r2, [r7, #24]
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	4413      	add	r3, r2
 801c3d4:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 801c3d6:	2300      	movs	r3, #0
 801c3d8:	61fb      	str	r3, [r7, #28]
 801c3da:	f000 bc43 	b.w	801cc64 <json_serialize_string+0x8e0>
        c = string[i];
 801c3de:	687a      	ldr	r2, [r7, #4]
 801c3e0:	69fb      	ldr	r3, [r7, #28]
 801c3e2:	4413      	add	r3, r2
 801c3e4:	781b      	ldrb	r3, [r3, #0]
 801c3e6:	74fb      	strb	r3, [r7, #19]
        switch (c) {
 801c3e8:	7cfb      	ldrb	r3, [r7, #19]
 801c3ea:	2b5c      	cmp	r3, #92	; 0x5c
 801c3ec:	f200 842a 	bhi.w	801cc44 <json_serialize_string+0x8c0>
 801c3f0:	a201      	add	r2, pc, #4	; (adr r2, 801c3f8 <json_serialize_string+0x74>)
 801c3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c3f6:	bf00      	nop
 801c3f8:	0801c6ff 	.word	0x0801c6ff
 801c3fc:	0801c72d 	.word	0x0801c72d
 801c400:	0801c75b 	.word	0x0801c75b
 801c404:	0801c789 	.word	0x0801c789
 801c408:	0801c7b7 	.word	0x0801c7b7
 801c40c:	0801c7e5 	.word	0x0801c7e5
 801c410:	0801c813 	.word	0x0801c813
 801c414:	0801c841 	.word	0x0801c841
 801c418:	0801c5f7 	.word	0x0801c5f7
 801c41c:	0801c6d1 	.word	0x0801c6d1
 801c420:	0801c653 	.word	0x0801c653
 801c424:	0801c86f 	.word	0x0801c86f
 801c428:	0801c625 	.word	0x0801c625
 801c42c:	0801c681 	.word	0x0801c681
 801c430:	0801c89d 	.word	0x0801c89d
 801c434:	0801c8cb 	.word	0x0801c8cb
 801c438:	0801c8f9 	.word	0x0801c8f9
 801c43c:	0801c95d 	.word	0x0801c95d
 801c440:	0801c98b 	.word	0x0801c98b
 801c444:	0801c9b9 	.word	0x0801c9b9
 801c448:	0801c9e7 	.word	0x0801c9e7
 801c44c:	0801ca15 	.word	0x0801ca15
 801c450:	0801ca43 	.word	0x0801ca43
 801c454:	0801ca71 	.word	0x0801ca71
 801c458:	0801ca9f 	.word	0x0801ca9f
 801c45c:	0801cacd 	.word	0x0801cacd
 801c460:	0801cafb 	.word	0x0801cafb
 801c464:	0801cb29 	.word	0x0801cb29
 801c468:	0801cb57 	.word	0x0801cb57
 801c46c:	0801cb85 	.word	0x0801cb85
 801c470:	0801cbe9 	.word	0x0801cbe9
 801c474:	0801cc17 	.word	0x0801cc17
 801c478:	0801cc45 	.word	0x0801cc45
 801c47c:	0801cc45 	.word	0x0801cc45
 801c480:	0801c56d 	.word	0x0801c56d
 801c484:	0801cc45 	.word	0x0801cc45
 801c488:	0801cc45 	.word	0x0801cc45
 801c48c:	0801cc45 	.word	0x0801cc45
 801c490:	0801cc45 	.word	0x0801cc45
 801c494:	0801cc45 	.word	0x0801cc45
 801c498:	0801cc45 	.word	0x0801cc45
 801c49c:	0801cc45 	.word	0x0801cc45
 801c4a0:	0801cc45 	.word	0x0801cc45
 801c4a4:	0801cc45 	.word	0x0801cc45
 801c4a8:	0801cc45 	.word	0x0801cc45
 801c4ac:	0801cc45 	.word	0x0801cc45
 801c4b0:	0801cc45 	.word	0x0801cc45
 801c4b4:	0801c5c9 	.word	0x0801c5c9
 801c4b8:	0801cc45 	.word	0x0801cc45
 801c4bc:	0801cc45 	.word	0x0801cc45
 801c4c0:	0801cc45 	.word	0x0801cc45
 801c4c4:	0801cc45 	.word	0x0801cc45
 801c4c8:	0801cc45 	.word	0x0801cc45
 801c4cc:	0801cc45 	.word	0x0801cc45
 801c4d0:	0801cc45 	.word	0x0801cc45
 801c4d4:	0801cc45 	.word	0x0801cc45
 801c4d8:	0801cc45 	.word	0x0801cc45
 801c4dc:	0801cc45 	.word	0x0801cc45
 801c4e0:	0801cc45 	.word	0x0801cc45
 801c4e4:	0801cc45 	.word	0x0801cc45
 801c4e8:	0801cc45 	.word	0x0801cc45
 801c4ec:	0801cc45 	.word	0x0801cc45
 801c4f0:	0801cc45 	.word	0x0801cc45
 801c4f4:	0801cc45 	.word	0x0801cc45
 801c4f8:	0801cc45 	.word	0x0801cc45
 801c4fc:	0801cc45 	.word	0x0801cc45
 801c500:	0801cc45 	.word	0x0801cc45
 801c504:	0801cc45 	.word	0x0801cc45
 801c508:	0801cc45 	.word	0x0801cc45
 801c50c:	0801cc45 	.word	0x0801cc45
 801c510:	0801cc45 	.word	0x0801cc45
 801c514:	0801cc45 	.word	0x0801cc45
 801c518:	0801cc45 	.word	0x0801cc45
 801c51c:	0801cc45 	.word	0x0801cc45
 801c520:	0801cc45 	.word	0x0801cc45
 801c524:	0801cc45 	.word	0x0801cc45
 801c528:	0801cc45 	.word	0x0801cc45
 801c52c:	0801cc45 	.word	0x0801cc45
 801c530:	0801cc45 	.word	0x0801cc45
 801c534:	0801cc45 	.word	0x0801cc45
 801c538:	0801cc45 	.word	0x0801cc45
 801c53c:	0801cc45 	.word	0x0801cc45
 801c540:	0801cc45 	.word	0x0801cc45
 801c544:	0801cc45 	.word	0x0801cc45
 801c548:	0801cc45 	.word	0x0801cc45
 801c54c:	0801cc45 	.word	0x0801cc45
 801c550:	0801cc45 	.word	0x0801cc45
 801c554:	0801cc45 	.word	0x0801cc45
 801c558:	0801cc45 	.word	0x0801cc45
 801c55c:	0801cc45 	.word	0x0801cc45
 801c560:	0801cc45 	.word	0x0801cc45
 801c564:	0801cc45 	.word	0x0801cc45
 801c568:	0801c59b 	.word	0x0801c59b
            case '\"': APPEND_STRING("\\\""); break;
 801c56c:	494b      	ldr	r1, [pc, #300]	; (801c69c <json_serialize_string+0x318>)
 801c56e:	6838      	ldr	r0, [r7, #0]
 801c570:	f000 fbd0 	bl	801cd14 <append_string>
 801c574:	60f8      	str	r0, [r7, #12]
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	da02      	bge.n	801c582 <json_serialize_string+0x1fe>
 801c57c:	f04f 33ff 	mov.w	r3, #4294967295
 801c580:	e38c      	b.n	801cc9c <json_serialize_string+0x918>
 801c582:	683b      	ldr	r3, [r7, #0]
 801c584:	2b00      	cmp	r3, #0
 801c586:	d003      	beq.n	801c590 <json_serialize_string+0x20c>
 801c588:	68fb      	ldr	r3, [r7, #12]
 801c58a:	683a      	ldr	r2, [r7, #0]
 801c58c:	4413      	add	r3, r2
 801c58e:	603b      	str	r3, [r7, #0]
 801c590:	69ba      	ldr	r2, [r7, #24]
 801c592:	68fb      	ldr	r3, [r7, #12]
 801c594:	4413      	add	r3, r2
 801c596:	61bb      	str	r3, [r7, #24]
 801c598:	e361      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\\': APPEND_STRING("\\\\"); break;
 801c59a:	4941      	ldr	r1, [pc, #260]	; (801c6a0 <json_serialize_string+0x31c>)
 801c59c:	6838      	ldr	r0, [r7, #0]
 801c59e:	f000 fbb9 	bl	801cd14 <append_string>
 801c5a2:	60f8      	str	r0, [r7, #12]
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	da02      	bge.n	801c5b0 <json_serialize_string+0x22c>
 801c5aa:	f04f 33ff 	mov.w	r3, #4294967295
 801c5ae:	e375      	b.n	801cc9c <json_serialize_string+0x918>
 801c5b0:	683b      	ldr	r3, [r7, #0]
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d003      	beq.n	801c5be <json_serialize_string+0x23a>
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	683a      	ldr	r2, [r7, #0]
 801c5ba:	4413      	add	r3, r2
 801c5bc:	603b      	str	r3, [r7, #0]
 801c5be:	69ba      	ldr	r2, [r7, #24]
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	4413      	add	r3, r2
 801c5c4:	61bb      	str	r3, [r7, #24]
 801c5c6:	e34a      	b.n	801cc5e <json_serialize_string+0x8da>
            case '/':  APPEND_STRING("\\/"); break; /* to make json embeddable in xml\/html */
 801c5c8:	4936      	ldr	r1, [pc, #216]	; (801c6a4 <json_serialize_string+0x320>)
 801c5ca:	6838      	ldr	r0, [r7, #0]
 801c5cc:	f000 fba2 	bl	801cd14 <append_string>
 801c5d0:	60f8      	str	r0, [r7, #12]
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	da02      	bge.n	801c5de <json_serialize_string+0x25a>
 801c5d8:	f04f 33ff 	mov.w	r3, #4294967295
 801c5dc:	e35e      	b.n	801cc9c <json_serialize_string+0x918>
 801c5de:	683b      	ldr	r3, [r7, #0]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d003      	beq.n	801c5ec <json_serialize_string+0x268>
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	683a      	ldr	r2, [r7, #0]
 801c5e8:	4413      	add	r3, r2
 801c5ea:	603b      	str	r3, [r7, #0]
 801c5ec:	69ba      	ldr	r2, [r7, #24]
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	4413      	add	r3, r2
 801c5f2:	61bb      	str	r3, [r7, #24]
 801c5f4:	e333      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\b': APPEND_STRING("\\b"); break;
 801c5f6:	492c      	ldr	r1, [pc, #176]	; (801c6a8 <json_serialize_string+0x324>)
 801c5f8:	6838      	ldr	r0, [r7, #0]
 801c5fa:	f000 fb8b 	bl	801cd14 <append_string>
 801c5fe:	60f8      	str	r0, [r7, #12]
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	2b00      	cmp	r3, #0
 801c604:	da02      	bge.n	801c60c <json_serialize_string+0x288>
 801c606:	f04f 33ff 	mov.w	r3, #4294967295
 801c60a:	e347      	b.n	801cc9c <json_serialize_string+0x918>
 801c60c:	683b      	ldr	r3, [r7, #0]
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d003      	beq.n	801c61a <json_serialize_string+0x296>
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	683a      	ldr	r2, [r7, #0]
 801c616:	4413      	add	r3, r2
 801c618:	603b      	str	r3, [r7, #0]
 801c61a:	69ba      	ldr	r2, [r7, #24]
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	4413      	add	r3, r2
 801c620:	61bb      	str	r3, [r7, #24]
 801c622:	e31c      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\f': APPEND_STRING("\\f"); break;
 801c624:	4921      	ldr	r1, [pc, #132]	; (801c6ac <json_serialize_string+0x328>)
 801c626:	6838      	ldr	r0, [r7, #0]
 801c628:	f000 fb74 	bl	801cd14 <append_string>
 801c62c:	60f8      	str	r0, [r7, #12]
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	2b00      	cmp	r3, #0
 801c632:	da02      	bge.n	801c63a <json_serialize_string+0x2b6>
 801c634:	f04f 33ff 	mov.w	r3, #4294967295
 801c638:	e330      	b.n	801cc9c <json_serialize_string+0x918>
 801c63a:	683b      	ldr	r3, [r7, #0]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d003      	beq.n	801c648 <json_serialize_string+0x2c4>
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	683a      	ldr	r2, [r7, #0]
 801c644:	4413      	add	r3, r2
 801c646:	603b      	str	r3, [r7, #0]
 801c648:	69ba      	ldr	r2, [r7, #24]
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	4413      	add	r3, r2
 801c64e:	61bb      	str	r3, [r7, #24]
 801c650:	e305      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\n': APPEND_STRING("\\n"); break;
 801c652:	4917      	ldr	r1, [pc, #92]	; (801c6b0 <json_serialize_string+0x32c>)
 801c654:	6838      	ldr	r0, [r7, #0]
 801c656:	f000 fb5d 	bl	801cd14 <append_string>
 801c65a:	60f8      	str	r0, [r7, #12]
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	2b00      	cmp	r3, #0
 801c660:	da02      	bge.n	801c668 <json_serialize_string+0x2e4>
 801c662:	f04f 33ff 	mov.w	r3, #4294967295
 801c666:	e319      	b.n	801cc9c <json_serialize_string+0x918>
 801c668:	683b      	ldr	r3, [r7, #0]
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	d003      	beq.n	801c676 <json_serialize_string+0x2f2>
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	683a      	ldr	r2, [r7, #0]
 801c672:	4413      	add	r3, r2
 801c674:	603b      	str	r3, [r7, #0]
 801c676:	69ba      	ldr	r2, [r7, #24]
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	4413      	add	r3, r2
 801c67c:	61bb      	str	r3, [r7, #24]
 801c67e:	e2ee      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\r': APPEND_STRING("\\r"); break;
 801c680:	490c      	ldr	r1, [pc, #48]	; (801c6b4 <json_serialize_string+0x330>)
 801c682:	6838      	ldr	r0, [r7, #0]
 801c684:	f000 fb46 	bl	801cd14 <append_string>
 801c688:	60f8      	str	r0, [r7, #12]
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	da13      	bge.n	801c6b8 <json_serialize_string+0x334>
 801c690:	f04f 33ff 	mov.w	r3, #4294967295
 801c694:	e302      	b.n	801cc9c <json_serialize_string+0x918>
 801c696:	bf00      	nop
 801c698:	08022670 	.word	0x08022670
 801c69c:	08022674 	.word	0x08022674
 801c6a0:	08022678 	.word	0x08022678
 801c6a4:	0802267c 	.word	0x0802267c
 801c6a8:	08022680 	.word	0x08022680
 801c6ac:	08022684 	.word	0x08022684
 801c6b0:	08022688 	.word	0x08022688
 801c6b4:	0802268c 	.word	0x0802268c
 801c6b8:	683b      	ldr	r3, [r7, #0]
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d003      	beq.n	801c6c6 <json_serialize_string+0x342>
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	683a      	ldr	r2, [r7, #0]
 801c6c2:	4413      	add	r3, r2
 801c6c4:	603b      	str	r3, [r7, #0]
 801c6c6:	69ba      	ldr	r2, [r7, #24]
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	4413      	add	r3, r2
 801c6cc:	61bb      	str	r3, [r7, #24]
 801c6ce:	e2c6      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\t': APPEND_STRING("\\t"); break;
 801c6d0:	4995      	ldr	r1, [pc, #596]	; (801c928 <json_serialize_string+0x5a4>)
 801c6d2:	6838      	ldr	r0, [r7, #0]
 801c6d4:	f000 fb1e 	bl	801cd14 <append_string>
 801c6d8:	60f8      	str	r0, [r7, #12]
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	da02      	bge.n	801c6e6 <json_serialize_string+0x362>
 801c6e0:	f04f 33ff 	mov.w	r3, #4294967295
 801c6e4:	e2da      	b.n	801cc9c <json_serialize_string+0x918>
 801c6e6:	683b      	ldr	r3, [r7, #0]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d003      	beq.n	801c6f4 <json_serialize_string+0x370>
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	683a      	ldr	r2, [r7, #0]
 801c6f0:	4413      	add	r3, r2
 801c6f2:	603b      	str	r3, [r7, #0]
 801c6f4:	69ba      	ldr	r2, [r7, #24]
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	4413      	add	r3, r2
 801c6fa:	61bb      	str	r3, [r7, #24]
 801c6fc:	e2af      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x00': APPEND_STRING("\\u0000"); break;
 801c6fe:	498b      	ldr	r1, [pc, #556]	; (801c92c <json_serialize_string+0x5a8>)
 801c700:	6838      	ldr	r0, [r7, #0]
 801c702:	f000 fb07 	bl	801cd14 <append_string>
 801c706:	60f8      	str	r0, [r7, #12]
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	da02      	bge.n	801c714 <json_serialize_string+0x390>
 801c70e:	f04f 33ff 	mov.w	r3, #4294967295
 801c712:	e2c3      	b.n	801cc9c <json_serialize_string+0x918>
 801c714:	683b      	ldr	r3, [r7, #0]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d003      	beq.n	801c722 <json_serialize_string+0x39e>
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	683a      	ldr	r2, [r7, #0]
 801c71e:	4413      	add	r3, r2
 801c720:	603b      	str	r3, [r7, #0]
 801c722:	69ba      	ldr	r2, [r7, #24]
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	4413      	add	r3, r2
 801c728:	61bb      	str	r3, [r7, #24]
 801c72a:	e298      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x01': APPEND_STRING("\\u0001"); break;
 801c72c:	4980      	ldr	r1, [pc, #512]	; (801c930 <json_serialize_string+0x5ac>)
 801c72e:	6838      	ldr	r0, [r7, #0]
 801c730:	f000 faf0 	bl	801cd14 <append_string>
 801c734:	60f8      	str	r0, [r7, #12]
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	2b00      	cmp	r3, #0
 801c73a:	da02      	bge.n	801c742 <json_serialize_string+0x3be>
 801c73c:	f04f 33ff 	mov.w	r3, #4294967295
 801c740:	e2ac      	b.n	801cc9c <json_serialize_string+0x918>
 801c742:	683b      	ldr	r3, [r7, #0]
 801c744:	2b00      	cmp	r3, #0
 801c746:	d003      	beq.n	801c750 <json_serialize_string+0x3cc>
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	683a      	ldr	r2, [r7, #0]
 801c74c:	4413      	add	r3, r2
 801c74e:	603b      	str	r3, [r7, #0]
 801c750:	69ba      	ldr	r2, [r7, #24]
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	4413      	add	r3, r2
 801c756:	61bb      	str	r3, [r7, #24]
 801c758:	e281      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x02': APPEND_STRING("\\u0002"); break;
 801c75a:	4976      	ldr	r1, [pc, #472]	; (801c934 <json_serialize_string+0x5b0>)
 801c75c:	6838      	ldr	r0, [r7, #0]
 801c75e:	f000 fad9 	bl	801cd14 <append_string>
 801c762:	60f8      	str	r0, [r7, #12]
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	2b00      	cmp	r3, #0
 801c768:	da02      	bge.n	801c770 <json_serialize_string+0x3ec>
 801c76a:	f04f 33ff 	mov.w	r3, #4294967295
 801c76e:	e295      	b.n	801cc9c <json_serialize_string+0x918>
 801c770:	683b      	ldr	r3, [r7, #0]
 801c772:	2b00      	cmp	r3, #0
 801c774:	d003      	beq.n	801c77e <json_serialize_string+0x3fa>
 801c776:	68fb      	ldr	r3, [r7, #12]
 801c778:	683a      	ldr	r2, [r7, #0]
 801c77a:	4413      	add	r3, r2
 801c77c:	603b      	str	r3, [r7, #0]
 801c77e:	69ba      	ldr	r2, [r7, #24]
 801c780:	68fb      	ldr	r3, [r7, #12]
 801c782:	4413      	add	r3, r2
 801c784:	61bb      	str	r3, [r7, #24]
 801c786:	e26a      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x03': APPEND_STRING("\\u0003"); break;
 801c788:	496b      	ldr	r1, [pc, #428]	; (801c938 <json_serialize_string+0x5b4>)
 801c78a:	6838      	ldr	r0, [r7, #0]
 801c78c:	f000 fac2 	bl	801cd14 <append_string>
 801c790:	60f8      	str	r0, [r7, #12]
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	2b00      	cmp	r3, #0
 801c796:	da02      	bge.n	801c79e <json_serialize_string+0x41a>
 801c798:	f04f 33ff 	mov.w	r3, #4294967295
 801c79c:	e27e      	b.n	801cc9c <json_serialize_string+0x918>
 801c79e:	683b      	ldr	r3, [r7, #0]
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d003      	beq.n	801c7ac <json_serialize_string+0x428>
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	683a      	ldr	r2, [r7, #0]
 801c7a8:	4413      	add	r3, r2
 801c7aa:	603b      	str	r3, [r7, #0]
 801c7ac:	69ba      	ldr	r2, [r7, #24]
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	4413      	add	r3, r2
 801c7b2:	61bb      	str	r3, [r7, #24]
 801c7b4:	e253      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x04': APPEND_STRING("\\u0004"); break;
 801c7b6:	4961      	ldr	r1, [pc, #388]	; (801c93c <json_serialize_string+0x5b8>)
 801c7b8:	6838      	ldr	r0, [r7, #0]
 801c7ba:	f000 faab 	bl	801cd14 <append_string>
 801c7be:	60f8      	str	r0, [r7, #12]
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	da02      	bge.n	801c7cc <json_serialize_string+0x448>
 801c7c6:	f04f 33ff 	mov.w	r3, #4294967295
 801c7ca:	e267      	b.n	801cc9c <json_serialize_string+0x918>
 801c7cc:	683b      	ldr	r3, [r7, #0]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d003      	beq.n	801c7da <json_serialize_string+0x456>
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	683a      	ldr	r2, [r7, #0]
 801c7d6:	4413      	add	r3, r2
 801c7d8:	603b      	str	r3, [r7, #0]
 801c7da:	69ba      	ldr	r2, [r7, #24]
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	4413      	add	r3, r2
 801c7e0:	61bb      	str	r3, [r7, #24]
 801c7e2:	e23c      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x05': APPEND_STRING("\\u0005"); break;
 801c7e4:	4956      	ldr	r1, [pc, #344]	; (801c940 <json_serialize_string+0x5bc>)
 801c7e6:	6838      	ldr	r0, [r7, #0]
 801c7e8:	f000 fa94 	bl	801cd14 <append_string>
 801c7ec:	60f8      	str	r0, [r7, #12]
 801c7ee:	68fb      	ldr	r3, [r7, #12]
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	da02      	bge.n	801c7fa <json_serialize_string+0x476>
 801c7f4:	f04f 33ff 	mov.w	r3, #4294967295
 801c7f8:	e250      	b.n	801cc9c <json_serialize_string+0x918>
 801c7fa:	683b      	ldr	r3, [r7, #0]
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d003      	beq.n	801c808 <json_serialize_string+0x484>
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	683a      	ldr	r2, [r7, #0]
 801c804:	4413      	add	r3, r2
 801c806:	603b      	str	r3, [r7, #0]
 801c808:	69ba      	ldr	r2, [r7, #24]
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	4413      	add	r3, r2
 801c80e:	61bb      	str	r3, [r7, #24]
 801c810:	e225      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x06': APPEND_STRING("\\u0006"); break;
 801c812:	494c      	ldr	r1, [pc, #304]	; (801c944 <json_serialize_string+0x5c0>)
 801c814:	6838      	ldr	r0, [r7, #0]
 801c816:	f000 fa7d 	bl	801cd14 <append_string>
 801c81a:	60f8      	str	r0, [r7, #12]
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	da02      	bge.n	801c828 <json_serialize_string+0x4a4>
 801c822:	f04f 33ff 	mov.w	r3, #4294967295
 801c826:	e239      	b.n	801cc9c <json_serialize_string+0x918>
 801c828:	683b      	ldr	r3, [r7, #0]
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d003      	beq.n	801c836 <json_serialize_string+0x4b2>
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	683a      	ldr	r2, [r7, #0]
 801c832:	4413      	add	r3, r2
 801c834:	603b      	str	r3, [r7, #0]
 801c836:	69ba      	ldr	r2, [r7, #24]
 801c838:	68fb      	ldr	r3, [r7, #12]
 801c83a:	4413      	add	r3, r2
 801c83c:	61bb      	str	r3, [r7, #24]
 801c83e:	e20e      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x07': APPEND_STRING("\\u0007"); break;
 801c840:	4941      	ldr	r1, [pc, #260]	; (801c948 <json_serialize_string+0x5c4>)
 801c842:	6838      	ldr	r0, [r7, #0]
 801c844:	f000 fa66 	bl	801cd14 <append_string>
 801c848:	60f8      	str	r0, [r7, #12]
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	da02      	bge.n	801c856 <json_serialize_string+0x4d2>
 801c850:	f04f 33ff 	mov.w	r3, #4294967295
 801c854:	e222      	b.n	801cc9c <json_serialize_string+0x918>
 801c856:	683b      	ldr	r3, [r7, #0]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d003      	beq.n	801c864 <json_serialize_string+0x4e0>
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	683a      	ldr	r2, [r7, #0]
 801c860:	4413      	add	r3, r2
 801c862:	603b      	str	r3, [r7, #0]
 801c864:	69ba      	ldr	r2, [r7, #24]
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	4413      	add	r3, r2
 801c86a:	61bb      	str	r3, [r7, #24]
 801c86c:	e1f7      	b.n	801cc5e <json_serialize_string+0x8da>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 801c86e:	4937      	ldr	r1, [pc, #220]	; (801c94c <json_serialize_string+0x5c8>)
 801c870:	6838      	ldr	r0, [r7, #0]
 801c872:	f000 fa4f 	bl	801cd14 <append_string>
 801c876:	60f8      	str	r0, [r7, #12]
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	da02      	bge.n	801c884 <json_serialize_string+0x500>
 801c87e:	f04f 33ff 	mov.w	r3, #4294967295
 801c882:	e20b      	b.n	801cc9c <json_serialize_string+0x918>
 801c884:	683b      	ldr	r3, [r7, #0]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d003      	beq.n	801c892 <json_serialize_string+0x50e>
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	683a      	ldr	r2, [r7, #0]
 801c88e:	4413      	add	r3, r2
 801c890:	603b      	str	r3, [r7, #0]
 801c892:	69ba      	ldr	r2, [r7, #24]
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	4413      	add	r3, r2
 801c898:	61bb      	str	r3, [r7, #24]
 801c89a:	e1e0      	b.n	801cc5e <json_serialize_string+0x8da>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 801c89c:	492c      	ldr	r1, [pc, #176]	; (801c950 <json_serialize_string+0x5cc>)
 801c89e:	6838      	ldr	r0, [r7, #0]
 801c8a0:	f000 fa38 	bl	801cd14 <append_string>
 801c8a4:	60f8      	str	r0, [r7, #12]
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	da02      	bge.n	801c8b2 <json_serialize_string+0x52e>
 801c8ac:	f04f 33ff 	mov.w	r3, #4294967295
 801c8b0:	e1f4      	b.n	801cc9c <json_serialize_string+0x918>
 801c8b2:	683b      	ldr	r3, [r7, #0]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d003      	beq.n	801c8c0 <json_serialize_string+0x53c>
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	683a      	ldr	r2, [r7, #0]
 801c8bc:	4413      	add	r3, r2
 801c8be:	603b      	str	r3, [r7, #0]
 801c8c0:	69ba      	ldr	r2, [r7, #24]
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	4413      	add	r3, r2
 801c8c6:	61bb      	str	r3, [r7, #24]
 801c8c8:	e1c9      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 801c8ca:	4922      	ldr	r1, [pc, #136]	; (801c954 <json_serialize_string+0x5d0>)
 801c8cc:	6838      	ldr	r0, [r7, #0]
 801c8ce:	f000 fa21 	bl	801cd14 <append_string>
 801c8d2:	60f8      	str	r0, [r7, #12]
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	da02      	bge.n	801c8e0 <json_serialize_string+0x55c>
 801c8da:	f04f 33ff 	mov.w	r3, #4294967295
 801c8de:	e1dd      	b.n	801cc9c <json_serialize_string+0x918>
 801c8e0:	683b      	ldr	r3, [r7, #0]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d003      	beq.n	801c8ee <json_serialize_string+0x56a>
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	683a      	ldr	r2, [r7, #0]
 801c8ea:	4413      	add	r3, r2
 801c8ec:	603b      	str	r3, [r7, #0]
 801c8ee:	69ba      	ldr	r2, [r7, #24]
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	4413      	add	r3, r2
 801c8f4:	61bb      	str	r3, [r7, #24]
 801c8f6:	e1b2      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x10': APPEND_STRING("\\u0010"); break;
 801c8f8:	4917      	ldr	r1, [pc, #92]	; (801c958 <json_serialize_string+0x5d4>)
 801c8fa:	6838      	ldr	r0, [r7, #0]
 801c8fc:	f000 fa0a 	bl	801cd14 <append_string>
 801c900:	60f8      	str	r0, [r7, #12]
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	2b00      	cmp	r3, #0
 801c906:	da02      	bge.n	801c90e <json_serialize_string+0x58a>
 801c908:	f04f 33ff 	mov.w	r3, #4294967295
 801c90c:	e1c6      	b.n	801cc9c <json_serialize_string+0x918>
 801c90e:	683b      	ldr	r3, [r7, #0]
 801c910:	2b00      	cmp	r3, #0
 801c912:	d003      	beq.n	801c91c <json_serialize_string+0x598>
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	683a      	ldr	r2, [r7, #0]
 801c918:	4413      	add	r3, r2
 801c91a:	603b      	str	r3, [r7, #0]
 801c91c:	69ba      	ldr	r2, [r7, #24]
 801c91e:	68fb      	ldr	r3, [r7, #12]
 801c920:	4413      	add	r3, r2
 801c922:	61bb      	str	r3, [r7, #24]
 801c924:	e19b      	b.n	801cc5e <json_serialize_string+0x8da>
 801c926:	bf00      	nop
 801c928:	08022690 	.word	0x08022690
 801c92c:	08022694 	.word	0x08022694
 801c930:	0802269c 	.word	0x0802269c
 801c934:	080226a4 	.word	0x080226a4
 801c938:	080226ac 	.word	0x080226ac
 801c93c:	080226b4 	.word	0x080226b4
 801c940:	080226bc 	.word	0x080226bc
 801c944:	080226c4 	.word	0x080226c4
 801c948:	080226cc 	.word	0x080226cc
 801c94c:	080226d4 	.word	0x080226d4
 801c950:	080226dc 	.word	0x080226dc
 801c954:	080226e4 	.word	0x080226e4
 801c958:	080226ec 	.word	0x080226ec
            case '\x11': APPEND_STRING("\\u0011"); break;
 801c95c:	4995      	ldr	r1, [pc, #596]	; (801cbb4 <json_serialize_string+0x830>)
 801c95e:	6838      	ldr	r0, [r7, #0]
 801c960:	f000 f9d8 	bl	801cd14 <append_string>
 801c964:	60f8      	str	r0, [r7, #12]
 801c966:	68fb      	ldr	r3, [r7, #12]
 801c968:	2b00      	cmp	r3, #0
 801c96a:	da02      	bge.n	801c972 <json_serialize_string+0x5ee>
 801c96c:	f04f 33ff 	mov.w	r3, #4294967295
 801c970:	e194      	b.n	801cc9c <json_serialize_string+0x918>
 801c972:	683b      	ldr	r3, [r7, #0]
 801c974:	2b00      	cmp	r3, #0
 801c976:	d003      	beq.n	801c980 <json_serialize_string+0x5fc>
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	683a      	ldr	r2, [r7, #0]
 801c97c:	4413      	add	r3, r2
 801c97e:	603b      	str	r3, [r7, #0]
 801c980:	69ba      	ldr	r2, [r7, #24]
 801c982:	68fb      	ldr	r3, [r7, #12]
 801c984:	4413      	add	r3, r2
 801c986:	61bb      	str	r3, [r7, #24]
 801c988:	e169      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x12': APPEND_STRING("\\u0012"); break;
 801c98a:	498b      	ldr	r1, [pc, #556]	; (801cbb8 <json_serialize_string+0x834>)
 801c98c:	6838      	ldr	r0, [r7, #0]
 801c98e:	f000 f9c1 	bl	801cd14 <append_string>
 801c992:	60f8      	str	r0, [r7, #12]
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	2b00      	cmp	r3, #0
 801c998:	da02      	bge.n	801c9a0 <json_serialize_string+0x61c>
 801c99a:	f04f 33ff 	mov.w	r3, #4294967295
 801c99e:	e17d      	b.n	801cc9c <json_serialize_string+0x918>
 801c9a0:	683b      	ldr	r3, [r7, #0]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d003      	beq.n	801c9ae <json_serialize_string+0x62a>
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	683a      	ldr	r2, [r7, #0]
 801c9aa:	4413      	add	r3, r2
 801c9ac:	603b      	str	r3, [r7, #0]
 801c9ae:	69ba      	ldr	r2, [r7, #24]
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	4413      	add	r3, r2
 801c9b4:	61bb      	str	r3, [r7, #24]
 801c9b6:	e152      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x13': APPEND_STRING("\\u0013"); break;
 801c9b8:	4980      	ldr	r1, [pc, #512]	; (801cbbc <json_serialize_string+0x838>)
 801c9ba:	6838      	ldr	r0, [r7, #0]
 801c9bc:	f000 f9aa 	bl	801cd14 <append_string>
 801c9c0:	60f8      	str	r0, [r7, #12]
 801c9c2:	68fb      	ldr	r3, [r7, #12]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	da02      	bge.n	801c9ce <json_serialize_string+0x64a>
 801c9c8:	f04f 33ff 	mov.w	r3, #4294967295
 801c9cc:	e166      	b.n	801cc9c <json_serialize_string+0x918>
 801c9ce:	683b      	ldr	r3, [r7, #0]
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d003      	beq.n	801c9dc <json_serialize_string+0x658>
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	683a      	ldr	r2, [r7, #0]
 801c9d8:	4413      	add	r3, r2
 801c9da:	603b      	str	r3, [r7, #0]
 801c9dc:	69ba      	ldr	r2, [r7, #24]
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	4413      	add	r3, r2
 801c9e2:	61bb      	str	r3, [r7, #24]
 801c9e4:	e13b      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x14': APPEND_STRING("\\u0014"); break;
 801c9e6:	4976      	ldr	r1, [pc, #472]	; (801cbc0 <json_serialize_string+0x83c>)
 801c9e8:	6838      	ldr	r0, [r7, #0]
 801c9ea:	f000 f993 	bl	801cd14 <append_string>
 801c9ee:	60f8      	str	r0, [r7, #12]
 801c9f0:	68fb      	ldr	r3, [r7, #12]
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	da02      	bge.n	801c9fc <json_serialize_string+0x678>
 801c9f6:	f04f 33ff 	mov.w	r3, #4294967295
 801c9fa:	e14f      	b.n	801cc9c <json_serialize_string+0x918>
 801c9fc:	683b      	ldr	r3, [r7, #0]
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d003      	beq.n	801ca0a <json_serialize_string+0x686>
 801ca02:	68fb      	ldr	r3, [r7, #12]
 801ca04:	683a      	ldr	r2, [r7, #0]
 801ca06:	4413      	add	r3, r2
 801ca08:	603b      	str	r3, [r7, #0]
 801ca0a:	69ba      	ldr	r2, [r7, #24]
 801ca0c:	68fb      	ldr	r3, [r7, #12]
 801ca0e:	4413      	add	r3, r2
 801ca10:	61bb      	str	r3, [r7, #24]
 801ca12:	e124      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x15': APPEND_STRING("\\u0015"); break;
 801ca14:	496b      	ldr	r1, [pc, #428]	; (801cbc4 <json_serialize_string+0x840>)
 801ca16:	6838      	ldr	r0, [r7, #0]
 801ca18:	f000 f97c 	bl	801cd14 <append_string>
 801ca1c:	60f8      	str	r0, [r7, #12]
 801ca1e:	68fb      	ldr	r3, [r7, #12]
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	da02      	bge.n	801ca2a <json_serialize_string+0x6a6>
 801ca24:	f04f 33ff 	mov.w	r3, #4294967295
 801ca28:	e138      	b.n	801cc9c <json_serialize_string+0x918>
 801ca2a:	683b      	ldr	r3, [r7, #0]
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d003      	beq.n	801ca38 <json_serialize_string+0x6b4>
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	683a      	ldr	r2, [r7, #0]
 801ca34:	4413      	add	r3, r2
 801ca36:	603b      	str	r3, [r7, #0]
 801ca38:	69ba      	ldr	r2, [r7, #24]
 801ca3a:	68fb      	ldr	r3, [r7, #12]
 801ca3c:	4413      	add	r3, r2
 801ca3e:	61bb      	str	r3, [r7, #24]
 801ca40:	e10d      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x16': APPEND_STRING("\\u0016"); break;
 801ca42:	4961      	ldr	r1, [pc, #388]	; (801cbc8 <json_serialize_string+0x844>)
 801ca44:	6838      	ldr	r0, [r7, #0]
 801ca46:	f000 f965 	bl	801cd14 <append_string>
 801ca4a:	60f8      	str	r0, [r7, #12]
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	da02      	bge.n	801ca58 <json_serialize_string+0x6d4>
 801ca52:	f04f 33ff 	mov.w	r3, #4294967295
 801ca56:	e121      	b.n	801cc9c <json_serialize_string+0x918>
 801ca58:	683b      	ldr	r3, [r7, #0]
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d003      	beq.n	801ca66 <json_serialize_string+0x6e2>
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	683a      	ldr	r2, [r7, #0]
 801ca62:	4413      	add	r3, r2
 801ca64:	603b      	str	r3, [r7, #0]
 801ca66:	69ba      	ldr	r2, [r7, #24]
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	4413      	add	r3, r2
 801ca6c:	61bb      	str	r3, [r7, #24]
 801ca6e:	e0f6      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x17': APPEND_STRING("\\u0017"); break;
 801ca70:	4956      	ldr	r1, [pc, #344]	; (801cbcc <json_serialize_string+0x848>)
 801ca72:	6838      	ldr	r0, [r7, #0]
 801ca74:	f000 f94e 	bl	801cd14 <append_string>
 801ca78:	60f8      	str	r0, [r7, #12]
 801ca7a:	68fb      	ldr	r3, [r7, #12]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	da02      	bge.n	801ca86 <json_serialize_string+0x702>
 801ca80:	f04f 33ff 	mov.w	r3, #4294967295
 801ca84:	e10a      	b.n	801cc9c <json_serialize_string+0x918>
 801ca86:	683b      	ldr	r3, [r7, #0]
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d003      	beq.n	801ca94 <json_serialize_string+0x710>
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	683a      	ldr	r2, [r7, #0]
 801ca90:	4413      	add	r3, r2
 801ca92:	603b      	str	r3, [r7, #0]
 801ca94:	69ba      	ldr	r2, [r7, #24]
 801ca96:	68fb      	ldr	r3, [r7, #12]
 801ca98:	4413      	add	r3, r2
 801ca9a:	61bb      	str	r3, [r7, #24]
 801ca9c:	e0df      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x18': APPEND_STRING("\\u0018"); break;
 801ca9e:	494c      	ldr	r1, [pc, #304]	; (801cbd0 <json_serialize_string+0x84c>)
 801caa0:	6838      	ldr	r0, [r7, #0]
 801caa2:	f000 f937 	bl	801cd14 <append_string>
 801caa6:	60f8      	str	r0, [r7, #12]
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	2b00      	cmp	r3, #0
 801caac:	da02      	bge.n	801cab4 <json_serialize_string+0x730>
 801caae:	f04f 33ff 	mov.w	r3, #4294967295
 801cab2:	e0f3      	b.n	801cc9c <json_serialize_string+0x918>
 801cab4:	683b      	ldr	r3, [r7, #0]
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d003      	beq.n	801cac2 <json_serialize_string+0x73e>
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	683a      	ldr	r2, [r7, #0]
 801cabe:	4413      	add	r3, r2
 801cac0:	603b      	str	r3, [r7, #0]
 801cac2:	69ba      	ldr	r2, [r7, #24]
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	4413      	add	r3, r2
 801cac8:	61bb      	str	r3, [r7, #24]
 801caca:	e0c8      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x19': APPEND_STRING("\\u0019"); break;
 801cacc:	4941      	ldr	r1, [pc, #260]	; (801cbd4 <json_serialize_string+0x850>)
 801cace:	6838      	ldr	r0, [r7, #0]
 801cad0:	f000 f920 	bl	801cd14 <append_string>
 801cad4:	60f8      	str	r0, [r7, #12]
 801cad6:	68fb      	ldr	r3, [r7, #12]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	da02      	bge.n	801cae2 <json_serialize_string+0x75e>
 801cadc:	f04f 33ff 	mov.w	r3, #4294967295
 801cae0:	e0dc      	b.n	801cc9c <json_serialize_string+0x918>
 801cae2:	683b      	ldr	r3, [r7, #0]
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d003      	beq.n	801caf0 <json_serialize_string+0x76c>
 801cae8:	68fb      	ldr	r3, [r7, #12]
 801caea:	683a      	ldr	r2, [r7, #0]
 801caec:	4413      	add	r3, r2
 801caee:	603b      	str	r3, [r7, #0]
 801caf0:	69ba      	ldr	r2, [r7, #24]
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	4413      	add	r3, r2
 801caf6:	61bb      	str	r3, [r7, #24]
 801caf8:	e0b1      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 801cafa:	4937      	ldr	r1, [pc, #220]	; (801cbd8 <json_serialize_string+0x854>)
 801cafc:	6838      	ldr	r0, [r7, #0]
 801cafe:	f000 f909 	bl	801cd14 <append_string>
 801cb02:	60f8      	str	r0, [r7, #12]
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	da02      	bge.n	801cb10 <json_serialize_string+0x78c>
 801cb0a:	f04f 33ff 	mov.w	r3, #4294967295
 801cb0e:	e0c5      	b.n	801cc9c <json_serialize_string+0x918>
 801cb10:	683b      	ldr	r3, [r7, #0]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d003      	beq.n	801cb1e <json_serialize_string+0x79a>
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	683a      	ldr	r2, [r7, #0]
 801cb1a:	4413      	add	r3, r2
 801cb1c:	603b      	str	r3, [r7, #0]
 801cb1e:	69ba      	ldr	r2, [r7, #24]
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	4413      	add	r3, r2
 801cb24:	61bb      	str	r3, [r7, #24]
 801cb26:	e09a      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 801cb28:	492c      	ldr	r1, [pc, #176]	; (801cbdc <json_serialize_string+0x858>)
 801cb2a:	6838      	ldr	r0, [r7, #0]
 801cb2c:	f000 f8f2 	bl	801cd14 <append_string>
 801cb30:	60f8      	str	r0, [r7, #12]
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	da02      	bge.n	801cb3e <json_serialize_string+0x7ba>
 801cb38:	f04f 33ff 	mov.w	r3, #4294967295
 801cb3c:	e0ae      	b.n	801cc9c <json_serialize_string+0x918>
 801cb3e:	683b      	ldr	r3, [r7, #0]
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d003      	beq.n	801cb4c <json_serialize_string+0x7c8>
 801cb44:	68fb      	ldr	r3, [r7, #12]
 801cb46:	683a      	ldr	r2, [r7, #0]
 801cb48:	4413      	add	r3, r2
 801cb4a:	603b      	str	r3, [r7, #0]
 801cb4c:	69ba      	ldr	r2, [r7, #24]
 801cb4e:	68fb      	ldr	r3, [r7, #12]
 801cb50:	4413      	add	r3, r2
 801cb52:	61bb      	str	r3, [r7, #24]
 801cb54:	e083      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x1c': APPEND_STRING("\\u001c"); break;
 801cb56:	4922      	ldr	r1, [pc, #136]	; (801cbe0 <json_serialize_string+0x85c>)
 801cb58:	6838      	ldr	r0, [r7, #0]
 801cb5a:	f000 f8db 	bl	801cd14 <append_string>
 801cb5e:	60f8      	str	r0, [r7, #12]
 801cb60:	68fb      	ldr	r3, [r7, #12]
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	da02      	bge.n	801cb6c <json_serialize_string+0x7e8>
 801cb66:	f04f 33ff 	mov.w	r3, #4294967295
 801cb6a:	e097      	b.n	801cc9c <json_serialize_string+0x918>
 801cb6c:	683b      	ldr	r3, [r7, #0]
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	d003      	beq.n	801cb7a <json_serialize_string+0x7f6>
 801cb72:	68fb      	ldr	r3, [r7, #12]
 801cb74:	683a      	ldr	r2, [r7, #0]
 801cb76:	4413      	add	r3, r2
 801cb78:	603b      	str	r3, [r7, #0]
 801cb7a:	69ba      	ldr	r2, [r7, #24]
 801cb7c:	68fb      	ldr	r3, [r7, #12]
 801cb7e:	4413      	add	r3, r2
 801cb80:	61bb      	str	r3, [r7, #24]
 801cb82:	e06c      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 801cb84:	4917      	ldr	r1, [pc, #92]	; (801cbe4 <json_serialize_string+0x860>)
 801cb86:	6838      	ldr	r0, [r7, #0]
 801cb88:	f000 f8c4 	bl	801cd14 <append_string>
 801cb8c:	60f8      	str	r0, [r7, #12]
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	da02      	bge.n	801cb9a <json_serialize_string+0x816>
 801cb94:	f04f 33ff 	mov.w	r3, #4294967295
 801cb98:	e080      	b.n	801cc9c <json_serialize_string+0x918>
 801cb9a:	683b      	ldr	r3, [r7, #0]
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d003      	beq.n	801cba8 <json_serialize_string+0x824>
 801cba0:	68fb      	ldr	r3, [r7, #12]
 801cba2:	683a      	ldr	r2, [r7, #0]
 801cba4:	4413      	add	r3, r2
 801cba6:	603b      	str	r3, [r7, #0]
 801cba8:	69ba      	ldr	r2, [r7, #24]
 801cbaa:	68fb      	ldr	r3, [r7, #12]
 801cbac:	4413      	add	r3, r2
 801cbae:	61bb      	str	r3, [r7, #24]
 801cbb0:	e055      	b.n	801cc5e <json_serialize_string+0x8da>
 801cbb2:	bf00      	nop
 801cbb4:	080226f4 	.word	0x080226f4
 801cbb8:	080226fc 	.word	0x080226fc
 801cbbc:	08022704 	.word	0x08022704
 801cbc0:	0802270c 	.word	0x0802270c
 801cbc4:	08022714 	.word	0x08022714
 801cbc8:	0802271c 	.word	0x0802271c
 801cbcc:	08022724 	.word	0x08022724
 801cbd0:	0802272c 	.word	0x0802272c
 801cbd4:	08022734 	.word	0x08022734
 801cbd8:	0802273c 	.word	0x0802273c
 801cbdc:	08022744 	.word	0x08022744
 801cbe0:	0802274c 	.word	0x0802274c
 801cbe4:	08022754 	.word	0x08022754
            case '\x1e': APPEND_STRING("\\u001e"); break;
 801cbe8:	492e      	ldr	r1, [pc, #184]	; (801cca4 <json_serialize_string+0x920>)
 801cbea:	6838      	ldr	r0, [r7, #0]
 801cbec:	f000 f892 	bl	801cd14 <append_string>
 801cbf0:	60f8      	str	r0, [r7, #12]
 801cbf2:	68fb      	ldr	r3, [r7, #12]
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	da02      	bge.n	801cbfe <json_serialize_string+0x87a>
 801cbf8:	f04f 33ff 	mov.w	r3, #4294967295
 801cbfc:	e04e      	b.n	801cc9c <json_serialize_string+0x918>
 801cbfe:	683b      	ldr	r3, [r7, #0]
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d003      	beq.n	801cc0c <json_serialize_string+0x888>
 801cc04:	68fb      	ldr	r3, [r7, #12]
 801cc06:	683a      	ldr	r2, [r7, #0]
 801cc08:	4413      	add	r3, r2
 801cc0a:	603b      	str	r3, [r7, #0]
 801cc0c:	69ba      	ldr	r2, [r7, #24]
 801cc0e:	68fb      	ldr	r3, [r7, #12]
 801cc10:	4413      	add	r3, r2
 801cc12:	61bb      	str	r3, [r7, #24]
 801cc14:	e023      	b.n	801cc5e <json_serialize_string+0x8da>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 801cc16:	4924      	ldr	r1, [pc, #144]	; (801cca8 <json_serialize_string+0x924>)
 801cc18:	6838      	ldr	r0, [r7, #0]
 801cc1a:	f000 f87b 	bl	801cd14 <append_string>
 801cc1e:	60f8      	str	r0, [r7, #12]
 801cc20:	68fb      	ldr	r3, [r7, #12]
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	da02      	bge.n	801cc2c <json_serialize_string+0x8a8>
 801cc26:	f04f 33ff 	mov.w	r3, #4294967295
 801cc2a:	e037      	b.n	801cc9c <json_serialize_string+0x918>
 801cc2c:	683b      	ldr	r3, [r7, #0]
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d003      	beq.n	801cc3a <json_serialize_string+0x8b6>
 801cc32:	68fb      	ldr	r3, [r7, #12]
 801cc34:	683a      	ldr	r2, [r7, #0]
 801cc36:	4413      	add	r3, r2
 801cc38:	603b      	str	r3, [r7, #0]
 801cc3a:	69ba      	ldr	r2, [r7, #24]
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	4413      	add	r3, r2
 801cc40:	61bb      	str	r3, [r7, #24]
 801cc42:	e00c      	b.n	801cc5e <json_serialize_string+0x8da>
            default:
                if (buf != NULL) {
 801cc44:	683b      	ldr	r3, [r7, #0]
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d005      	beq.n	801cc56 <json_serialize_string+0x8d2>
                    buf[0] = c;
 801cc4a:	683b      	ldr	r3, [r7, #0]
 801cc4c:	7cfa      	ldrb	r2, [r7, #19]
 801cc4e:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 801cc50:	683b      	ldr	r3, [r7, #0]
 801cc52:	3301      	adds	r3, #1
 801cc54:	603b      	str	r3, [r7, #0]
                }
                written_total += 1;
 801cc56:	69bb      	ldr	r3, [r7, #24]
 801cc58:	3301      	adds	r3, #1
 801cc5a:	61bb      	str	r3, [r7, #24]
                break;
 801cc5c:	bf00      	nop
    for (i = 0; i < len; i++) {
 801cc5e:	69fb      	ldr	r3, [r7, #28]
 801cc60:	3301      	adds	r3, #1
 801cc62:	61fb      	str	r3, [r7, #28]
 801cc64:	69fa      	ldr	r2, [r7, #28]
 801cc66:	697b      	ldr	r3, [r7, #20]
 801cc68:	429a      	cmp	r2, r3
 801cc6a:	f4ff abb8 	bcc.w	801c3de <json_serialize_string+0x5a>
        }
    }
    APPEND_STRING("\"");
 801cc6e:	490f      	ldr	r1, [pc, #60]	; (801ccac <json_serialize_string+0x928>)
 801cc70:	6838      	ldr	r0, [r7, #0]
 801cc72:	f000 f84f 	bl	801cd14 <append_string>
 801cc76:	60f8      	str	r0, [r7, #12]
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	da02      	bge.n	801cc84 <json_serialize_string+0x900>
 801cc7e:	f04f 33ff 	mov.w	r3, #4294967295
 801cc82:	e00b      	b.n	801cc9c <json_serialize_string+0x918>
 801cc84:	683b      	ldr	r3, [r7, #0]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d003      	beq.n	801cc92 <json_serialize_string+0x90e>
 801cc8a:	68fb      	ldr	r3, [r7, #12]
 801cc8c:	683a      	ldr	r2, [r7, #0]
 801cc8e:	4413      	add	r3, r2
 801cc90:	603b      	str	r3, [r7, #0]
 801cc92:	69ba      	ldr	r2, [r7, #24]
 801cc94:	68fb      	ldr	r3, [r7, #12]
 801cc96:	4413      	add	r3, r2
 801cc98:	61bb      	str	r3, [r7, #24]
    return written_total;
 801cc9a:	69bb      	ldr	r3, [r7, #24]
}
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	3720      	adds	r7, #32
 801cca0:	46bd      	mov	sp, r7
 801cca2:	bd80      	pop	{r7, pc}
 801cca4:	0802275c 	.word	0x0802275c
 801cca8:	08022764 	.word	0x08022764
 801ccac:	08022670 	.word	0x08022670

0801ccb0 <append_indent>:

static int append_indent(char *buf, int level) {
 801ccb0:	b580      	push	{r7, lr}
 801ccb2:	b086      	sub	sp, #24
 801ccb4:	af00      	add	r7, sp, #0
 801ccb6:	6078      	str	r0, [r7, #4]
 801ccb8:	6039      	str	r1, [r7, #0]
    int i;
    int written = -1, written_total = 0;
 801ccba:	f04f 33ff 	mov.w	r3, #4294967295
 801ccbe:	60fb      	str	r3, [r7, #12]
 801ccc0:	2300      	movs	r3, #0
 801ccc2:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801ccc4:	2300      	movs	r3, #0
 801ccc6:	617b      	str	r3, [r7, #20]
 801ccc8:	e018      	b.n	801ccfc <append_indent+0x4c>
        APPEND_STRING("    ");
 801ccca:	4911      	ldr	r1, [pc, #68]	; (801cd10 <append_indent+0x60>)
 801cccc:	6878      	ldr	r0, [r7, #4]
 801ccce:	f000 f821 	bl	801cd14 <append_string>
 801ccd2:	60f8      	str	r0, [r7, #12]
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	da02      	bge.n	801cce0 <append_indent+0x30>
 801ccda:	f04f 33ff 	mov.w	r3, #4294967295
 801ccde:	e012      	b.n	801cd06 <append_indent+0x56>
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d003      	beq.n	801ccee <append_indent+0x3e>
 801cce6:	68fb      	ldr	r3, [r7, #12]
 801cce8:	687a      	ldr	r2, [r7, #4]
 801ccea:	4413      	add	r3, r2
 801ccec:	607b      	str	r3, [r7, #4]
 801ccee:	693a      	ldr	r2, [r7, #16]
 801ccf0:	68fb      	ldr	r3, [r7, #12]
 801ccf2:	4413      	add	r3, r2
 801ccf4:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801ccf6:	697b      	ldr	r3, [r7, #20]
 801ccf8:	3301      	adds	r3, #1
 801ccfa:	617b      	str	r3, [r7, #20]
 801ccfc:	697a      	ldr	r2, [r7, #20]
 801ccfe:	683b      	ldr	r3, [r7, #0]
 801cd00:	429a      	cmp	r2, r3
 801cd02:	dbe2      	blt.n	801ccca <append_indent+0x1a>
    }
    return written_total;
 801cd04:	693b      	ldr	r3, [r7, #16]
}
 801cd06:	4618      	mov	r0, r3
 801cd08:	3718      	adds	r7, #24
 801cd0a:	46bd      	mov	sp, r7
 801cd0c:	bd80      	pop	{r7, pc}
 801cd0e:	bf00      	nop
 801cd10:	0802276c 	.word	0x0802276c

0801cd14 <append_string>:

static int append_string(char *buf, const char *string) {
 801cd14:	b580      	push	{r7, lr}
 801cd16:	b082      	sub	sp, #8
 801cd18:	af00      	add	r7, sp, #0
 801cd1a:	6078      	str	r0, [r7, #4]
 801cd1c:	6039      	str	r1, [r7, #0]
    if (buf == NULL) {
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d104      	bne.n	801cd2e <append_string+0x1a>
        return (int)strlen(string);
 801cd24:	6838      	ldr	r0, [r7, #0]
 801cd26:	f7e3 fa75 	bl	8000214 <strlen>
 801cd2a:	4603      	mov	r3, r0
 801cd2c:	e005      	b.n	801cd3a <append_string+0x26>
    }
    return sprintf(buf, "%s", string);
 801cd2e:	683a      	ldr	r2, [r7, #0]
 801cd30:	4904      	ldr	r1, [pc, #16]	; (801cd44 <append_string+0x30>)
 801cd32:	6878      	ldr	r0, [r7, #4]
 801cd34:	f001 fe6a 	bl	801ea0c <siprintf>
 801cd38:	4603      	mov	r3, r0
}
 801cd3a:	4618      	mov	r0, r3
 801cd3c:	3708      	adds	r7, #8
 801cd3e:	46bd      	mov	sp, r7
 801cd40:	bd80      	pop	{r7, pc}
 801cd42:	bf00      	nop
 801cd44:	08022774 	.word	0x08022774

0801cd48 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 801cd48:	b580      	push	{r7, lr}
 801cd4a:	b082      	sub	sp, #8
 801cd4c:	af00      	add	r7, sp, #0
 801cd4e:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 801cd50:	687b      	ldr	r3, [r7, #4]
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	d101      	bne.n	801cd5a <json_parse_string+0x12>
        return NULL;
 801cd56:	2300      	movs	r3, #0
 801cd58:	e016      	b.n	801cd88 <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	781b      	ldrb	r3, [r3, #0]
 801cd5e:	2bef      	cmp	r3, #239	; 0xef
 801cd60:	d10c      	bne.n	801cd7c <json_parse_string+0x34>
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	3301      	adds	r3, #1
 801cd66:	781b      	ldrb	r3, [r3, #0]
 801cd68:	2bbb      	cmp	r3, #187	; 0xbb
 801cd6a:	d107      	bne.n	801cd7c <json_parse_string+0x34>
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	3302      	adds	r3, #2
 801cd70:	781b      	ldrb	r3, [r3, #0]
 801cd72:	2bbf      	cmp	r3, #191	; 0xbf
 801cd74:	d102      	bne.n	801cd7c <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	3303      	adds	r3, #3
 801cd7a:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 801cd7c:	1d3b      	adds	r3, r7, #4
 801cd7e:	2100      	movs	r1, #0
 801cd80:	4618      	mov	r0, r3
 801cd82:	f7fe fcc1 	bl	801b708 <parse_value>
 801cd86:	4603      	mov	r3, r0
}
 801cd88:	4618      	mov	r0, r3
 801cd8a:	3708      	adds	r7, #8
 801cd8c:	46bd      	mov	sp, r7
 801cd8e:	bd80      	pop	{r7, pc}

0801cd90 <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 801cd90:	b580      	push	{r7, lr}
 801cd92:	b082      	sub	sp, #8
 801cd94:	af00      	add	r7, sp, #0
 801cd96:	6078      	str	r0, [r7, #4]
 801cd98:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d002      	beq.n	801cda6 <json_object_get_value+0x16>
 801cda0:	683b      	ldr	r3, [r7, #0]
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d101      	bne.n	801cdaa <json_object_get_value+0x1a>
        return NULL;
 801cda6:	2300      	movs	r3, #0
 801cda8:	e009      	b.n	801cdbe <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 801cdaa:	6838      	ldr	r0, [r7, #0]
 801cdac:	f7e3 fa32 	bl	8000214 <strlen>
 801cdb0:	4603      	mov	r3, r0
 801cdb2:	461a      	mov	r2, r3
 801cdb4:	6839      	ldr	r1, [r7, #0]
 801cdb6:	6878      	ldr	r0, [r7, #4]
 801cdb8:	f7fe f864 	bl	801ae84 <json_object_getn_value>
 801cdbc:	4603      	mov	r3, r0
}
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	3708      	adds	r7, #8
 801cdc2:	46bd      	mov	sp, r7
 801cdc4:	bd80      	pop	{r7, pc}

0801cdc6 <json_object_dotget_value>:

int json_object_get_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_get_value(object, name));
}

JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 801cdc6:	b580      	push	{r7, lr}
 801cdc8:	b084      	sub	sp, #16
 801cdca:	af00      	add	r7, sp, #0
 801cdcc:	6078      	str	r0, [r7, #4]
 801cdce:	6039      	str	r1, [r7, #0]
    const char *dot_position = strchr(name, '.');
 801cdd0:	212e      	movs	r1, #46	; 0x2e
 801cdd2:	6838      	ldr	r0, [r7, #0]
 801cdd4:	f001 fe8c 	bl	801eaf0 <strchr>
 801cdd8:	60f8      	str	r0, [r7, #12]
    if (!dot_position) {
 801cdda:	68fb      	ldr	r3, [r7, #12]
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d105      	bne.n	801cdec <json_object_dotget_value+0x26>
        return json_object_get_value(object, name);
 801cde0:	6839      	ldr	r1, [r7, #0]
 801cde2:	6878      	ldr	r0, [r7, #4]
 801cde4:	f7ff ffd4 	bl	801cd90 <json_object_get_value>
 801cde8:	4603      	mov	r3, r0
 801cdea:	e013      	b.n	801ce14 <json_object_dotget_value+0x4e>
    }
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 801cdec:	68fa      	ldr	r2, [r7, #12]
 801cdee:	683b      	ldr	r3, [r7, #0]
 801cdf0:	1ad3      	subs	r3, r2, r3
 801cdf2:	461a      	mov	r2, r3
 801cdf4:	6839      	ldr	r1, [r7, #0]
 801cdf6:	6878      	ldr	r0, [r7, #4]
 801cdf8:	f7fe f844 	bl	801ae84 <json_object_getn_value>
 801cdfc:	4603      	mov	r3, r0
 801cdfe:	4618      	mov	r0, r3
 801ce00:	f000 f8ef 	bl	801cfe2 <json_value_get_object>
 801ce04:	6078      	str	r0, [r7, #4]
    return json_object_dotget_value(object, dot_position + 1);
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	3301      	adds	r3, #1
 801ce0a:	4619      	mov	r1, r3
 801ce0c:	6878      	ldr	r0, [r7, #4]
 801ce0e:	f7ff ffda 	bl	801cdc6 <json_object_dotget_value>
 801ce12:	4603      	mov	r3, r0
}
 801ce14:	4618      	mov	r0, r3
 801ce16:	3710      	adds	r7, #16
 801ce18:	46bd      	mov	sp, r7
 801ce1a:	bd80      	pop	{r7, pc}

0801ce1c <json_object_dotget_number>:

const char * json_object_dotget_string(const JSON_Object *object, const char *name) {
    return json_value_get_string(json_object_dotget_value(object, name));
}

double json_object_dotget_number(const JSON_Object *object, const char *name) {
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	b082      	sub	sp, #8
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]
 801ce24:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_dotget_value(object, name));
 801ce26:	6839      	ldr	r1, [r7, #0]
 801ce28:	6878      	ldr	r0, [r7, #4]
 801ce2a:	f7ff ffcc 	bl	801cdc6 <json_object_dotget_value>
 801ce2e:	4603      	mov	r3, r0
 801ce30:	4618      	mov	r0, r3
 801ce32:	f000 f90c 	bl	801d04e <json_value_get_number>
 801ce36:	eeb0 7a40 	vmov.f32	s14, s0
 801ce3a:	eef0 7a60 	vmov.f32	s15, s1
}
 801ce3e:	eeb0 0a47 	vmov.f32	s0, s14
 801ce42:	eef0 0a67 	vmov.f32	s1, s15
 801ce46:	3708      	adds	r7, #8
 801ce48:	46bd      	mov	sp, r7
 801ce4a:	bd80      	pop	{r7, pc}

0801ce4c <json_object_dotget_array>:

JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {
    return json_value_get_object(json_object_dotget_value(object, name));
}

JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {
 801ce4c:	b580      	push	{r7, lr}
 801ce4e:	b082      	sub	sp, #8
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	6078      	str	r0, [r7, #4]
 801ce54:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_object_dotget_value(object, name));
 801ce56:	6839      	ldr	r1, [r7, #0]
 801ce58:	6878      	ldr	r0, [r7, #4]
 801ce5a:	f7ff ffb4 	bl	801cdc6 <json_object_dotget_value>
 801ce5e:	4603      	mov	r3, r0
 801ce60:	4618      	mov	r0, r3
 801ce62:	f000 f8d0 	bl	801d006 <json_value_get_array>
 801ce66:	4603      	mov	r3, r0
}
 801ce68:	4618      	mov	r0, r3
 801ce6a:	3708      	adds	r7, #8
 801ce6c:	46bd      	mov	sp, r7
 801ce6e:	bd80      	pop	{r7, pc}

0801ce70 <json_object_dotget_boolean>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
 801ce70:	b580      	push	{r7, lr}
 801ce72:	b082      	sub	sp, #8
 801ce74:	af00      	add	r7, sp, #0
 801ce76:	6078      	str	r0, [r7, #4]
 801ce78:	6039      	str	r1, [r7, #0]
    return json_value_get_boolean(json_object_dotget_value(object, name));
 801ce7a:	6839      	ldr	r1, [r7, #0]
 801ce7c:	6878      	ldr	r0, [r7, #4]
 801ce7e:	f7ff ffa2 	bl	801cdc6 <json_object_dotget_value>
 801ce82:	4603      	mov	r3, r0
 801ce84:	4618      	mov	r0, r3
 801ce86:	f000 f8fd 	bl	801d084 <json_value_get_boolean>
 801ce8a:	4603      	mov	r3, r0
}
 801ce8c:	4618      	mov	r0, r3
 801ce8e:	3708      	adds	r7, #8
 801ce90:	46bd      	mov	sp, r7
 801ce92:	bd80      	pop	{r7, pc}

0801ce94 <json_object_get_count>:

size_t json_object_get_count(const JSON_Object *object) {
 801ce94:	b480      	push	{r7}
 801ce96:	b083      	sub	sp, #12
 801ce98:	af00      	add	r7, sp, #0
 801ce9a:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d002      	beq.n	801cea8 <json_object_get_count+0x14>
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	68db      	ldr	r3, [r3, #12]
 801cea6:	e000      	b.n	801ceaa <json_object_get_count+0x16>
 801cea8:	2300      	movs	r3, #0
}
 801ceaa:	4618      	mov	r0, r3
 801ceac:	370c      	adds	r7, #12
 801ceae:	46bd      	mov	sp, r7
 801ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceb4:	4770      	bx	lr

0801ceb6 <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 801ceb6:	b580      	push	{r7, lr}
 801ceb8:	b082      	sub	sp, #8
 801ceba:	af00      	add	r7, sp, #0
 801cebc:	6078      	str	r0, [r7, #4]
 801cebe:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d006      	beq.n	801ced4 <json_object_get_name+0x1e>
 801cec6:	6878      	ldr	r0, [r7, #4]
 801cec8:	f7ff ffe4 	bl	801ce94 <json_object_get_count>
 801cecc:	4602      	mov	r2, r0
 801cece:	683b      	ldr	r3, [r7, #0]
 801ced0:	4293      	cmp	r3, r2
 801ced2:	d301      	bcc.n	801ced8 <json_object_get_name+0x22>
        return NULL;
 801ced4:	2300      	movs	r3, #0
 801ced6:	e005      	b.n	801cee4 <json_object_get_name+0x2e>
    }
    return object->names[index];
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	685a      	ldr	r2, [r3, #4]
 801cedc:	683b      	ldr	r3, [r7, #0]
 801cede:	009b      	lsls	r3, r3, #2
 801cee0:	4413      	add	r3, r2
 801cee2:	681b      	ldr	r3, [r3, #0]
}
 801cee4:	4618      	mov	r0, r3
 801cee6:	3708      	adds	r7, #8
 801cee8:	46bd      	mov	sp, r7
 801ceea:	bd80      	pop	{r7, pc}

0801ceec <json_object_get_wrapping_value>:
        return NULL;
    }
    return object->values[index];
}

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 801ceec:	b480      	push	{r7}
 801ceee:	b083      	sub	sp, #12
 801cef0:	af00      	add	r7, sp, #0
 801cef2:	6078      	str	r0, [r7, #4]
    return object->wrapping_value;
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	681b      	ldr	r3, [r3, #0]
}
 801cef8:	4618      	mov	r0, r3
 801cefa:	370c      	adds	r7, #12
 801cefc:	46bd      	mov	sp, r7
 801cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf02:	4770      	bx	lr

0801cf04 <json_object_dothas_value>:
int json_object_has_value_of_type(const JSON_Object *object, const char *name, JSON_Value_Type type) {
    JSON_Value *val = json_object_get_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

int json_object_dothas_value (const JSON_Object *object, const char *name) {
 801cf04:	b580      	push	{r7, lr}
 801cf06:	b082      	sub	sp, #8
 801cf08:	af00      	add	r7, sp, #0
 801cf0a:	6078      	str	r0, [r7, #4]
 801cf0c:	6039      	str	r1, [r7, #0]
    return json_object_dotget_value(object, name) != NULL;
 801cf0e:	6839      	ldr	r1, [r7, #0]
 801cf10:	6878      	ldr	r0, [r7, #4]
 801cf12:	f7ff ff58 	bl	801cdc6 <json_object_dotget_value>
 801cf16:	4603      	mov	r3, r0
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	bf14      	ite	ne
 801cf1c:	2301      	movne	r3, #1
 801cf1e:	2300      	moveq	r3, #0
 801cf20:	b2db      	uxtb	r3, r3
}
 801cf22:	4618      	mov	r0, r3
 801cf24:	3708      	adds	r7, #8
 801cf26:	46bd      	mov	sp, r7
 801cf28:	bd80      	pop	{r7, pc}

0801cf2a <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 801cf2a:	b580      	push	{r7, lr}
 801cf2c:	b082      	sub	sp, #8
 801cf2e:	af00      	add	r7, sp, #0
 801cf30:	6078      	str	r0, [r7, #4]
 801cf32:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d006      	beq.n	801cf48 <json_array_get_value+0x1e>
 801cf3a:	6878      	ldr	r0, [r7, #4]
 801cf3c:	f000 f822 	bl	801cf84 <json_array_get_count>
 801cf40:	4602      	mov	r2, r0
 801cf42:	683b      	ldr	r3, [r7, #0]
 801cf44:	4293      	cmp	r3, r2
 801cf46:	d301      	bcc.n	801cf4c <json_array_get_value+0x22>
        return NULL;
 801cf48:	2300      	movs	r3, #0
 801cf4a:	e005      	b.n	801cf58 <json_array_get_value+0x2e>
    }
    return array->items[index];
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	685a      	ldr	r2, [r3, #4]
 801cf50:	683b      	ldr	r3, [r7, #0]
 801cf52:	009b      	lsls	r3, r3, #2
 801cf54:	4413      	add	r3, r2
 801cf56:	681b      	ldr	r3, [r3, #0]
}
 801cf58:	4618      	mov	r0, r3
 801cf5a:	3708      	adds	r7, #8
 801cf5c:	46bd      	mov	sp, r7
 801cf5e:	bd80      	pop	{r7, pc}

0801cf60 <json_array_get_object>:

double json_array_get_number(const JSON_Array *array, size_t index) {
    return json_value_get_number(json_array_get_value(array, index));
}

JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b082      	sub	sp, #8
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	6078      	str	r0, [r7, #4]
 801cf68:	6039      	str	r1, [r7, #0]
    return json_value_get_object(json_array_get_value(array, index));
 801cf6a:	6839      	ldr	r1, [r7, #0]
 801cf6c:	6878      	ldr	r0, [r7, #4]
 801cf6e:	f7ff ffdc 	bl	801cf2a <json_array_get_value>
 801cf72:	4603      	mov	r3, r0
 801cf74:	4618      	mov	r0, r3
 801cf76:	f000 f834 	bl	801cfe2 <json_value_get_object>
 801cf7a:	4603      	mov	r3, r0
}
 801cf7c:	4618      	mov	r0, r3
 801cf7e:	3708      	adds	r7, #8
 801cf80:	46bd      	mov	sp, r7
 801cf82:	bd80      	pop	{r7, pc}

0801cf84 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 801cf84:	b480      	push	{r7}
 801cf86:	b083      	sub	sp, #12
 801cf88:	af00      	add	r7, sp, #0
 801cf8a:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d002      	beq.n	801cf98 <json_array_get_count+0x14>
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	689b      	ldr	r3, [r3, #8]
 801cf96:	e000      	b.n	801cf9a <json_array_get_count+0x16>
 801cf98:	2300      	movs	r3, #0
}
 801cf9a:	4618      	mov	r0, r3
 801cf9c:	370c      	adds	r7, #12
 801cf9e:	46bd      	mov	sp, r7
 801cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfa4:	4770      	bx	lr

0801cfa6 <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 801cfa6:	b480      	push	{r7}
 801cfa8:	b083      	sub	sp, #12
 801cfaa:	af00      	add	r7, sp, #0
 801cfac:	6078      	str	r0, [r7, #4]
    return array->wrapping_value;
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	681b      	ldr	r3, [r3, #0]
}
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	370c      	adds	r7, #12
 801cfb6:	46bd      	mov	sp, r7
 801cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfbc:	4770      	bx	lr

0801cfbe <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 801cfbe:	b480      	push	{r7}
 801cfc0:	b083      	sub	sp, #12
 801cfc2:	af00      	add	r7, sp, #0
 801cfc4:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d002      	beq.n	801cfd2 <json_value_get_type+0x14>
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	685b      	ldr	r3, [r3, #4]
 801cfd0:	e001      	b.n	801cfd6 <json_value_get_type+0x18>
 801cfd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cfd6:	4618      	mov	r0, r3
 801cfd8:	370c      	adds	r7, #12
 801cfda:	46bd      	mov	sp, r7
 801cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfe0:	4770      	bx	lr

0801cfe2 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 801cfe2:	b580      	push	{r7, lr}
 801cfe4:	b082      	sub	sp, #8
 801cfe6:	af00      	add	r7, sp, #0
 801cfe8:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801cfea:	6878      	ldr	r0, [r7, #4]
 801cfec:	f7ff ffe7 	bl	801cfbe <json_value_get_type>
 801cff0:	4603      	mov	r3, r0
 801cff2:	2b04      	cmp	r3, #4
 801cff4:	d102      	bne.n	801cffc <json_value_get_object+0x1a>
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	689b      	ldr	r3, [r3, #8]
 801cffa:	e000      	b.n	801cffe <json_value_get_object+0x1c>
 801cffc:	2300      	movs	r3, #0
}
 801cffe:	4618      	mov	r0, r3
 801d000:	3708      	adds	r7, #8
 801d002:	46bd      	mov	sp, r7
 801d004:	bd80      	pop	{r7, pc}

0801d006 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 801d006:	b580      	push	{r7, lr}
 801d008:	b082      	sub	sp, #8
 801d00a:	af00      	add	r7, sp, #0
 801d00c:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 801d00e:	6878      	ldr	r0, [r7, #4]
 801d010:	f7ff ffd5 	bl	801cfbe <json_value_get_type>
 801d014:	4603      	mov	r3, r0
 801d016:	2b05      	cmp	r3, #5
 801d018:	d102      	bne.n	801d020 <json_value_get_array+0x1a>
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	689b      	ldr	r3, [r3, #8]
 801d01e:	e000      	b.n	801d022 <json_value_get_array+0x1c>
 801d020:	2300      	movs	r3, #0
}
 801d022:	4618      	mov	r0, r3
 801d024:	3708      	adds	r7, #8
 801d026:	46bd      	mov	sp, r7
 801d028:	bd80      	pop	{r7, pc}

0801d02a <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 801d02a:	b580      	push	{r7, lr}
 801d02c:	b082      	sub	sp, #8
 801d02e:	af00      	add	r7, sp, #0
 801d030:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
 801d032:	6878      	ldr	r0, [r7, #4]
 801d034:	f7ff ffc3 	bl	801cfbe <json_value_get_type>
 801d038:	4603      	mov	r3, r0
 801d03a:	2b02      	cmp	r3, #2
 801d03c:	d102      	bne.n	801d044 <json_value_get_string+0x1a>
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	689b      	ldr	r3, [r3, #8]
 801d042:	e000      	b.n	801d046 <json_value_get_string+0x1c>
 801d044:	2300      	movs	r3, #0
}
 801d046:	4618      	mov	r0, r3
 801d048:	3708      	adds	r7, #8
 801d04a:	46bd      	mov	sp, r7
 801d04c:	bd80      	pop	{r7, pc}

0801d04e <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 801d04e:	b580      	push	{r7, lr}
 801d050:	b082      	sub	sp, #8
 801d052:	af00      	add	r7, sp, #0
 801d054:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 801d056:	6878      	ldr	r0, [r7, #4]
 801d058:	f7ff ffb1 	bl	801cfbe <json_value_get_type>
 801d05c:	4603      	mov	r3, r0
 801d05e:	2b03      	cmp	r3, #3
 801d060:	d103      	bne.n	801d06a <json_value_get_number+0x1c>
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801d068:	e003      	b.n	801d072 <json_value_get_number+0x24>
 801d06a:	f04f 0200 	mov.w	r2, #0
 801d06e:	f04f 0300 	mov.w	r3, #0
 801d072:	ec43 2b17 	vmov	d7, r2, r3
}
 801d076:	eeb0 0a47 	vmov.f32	s0, s14
 801d07a:	eef0 0a67 	vmov.f32	s1, s15
 801d07e:	3708      	adds	r7, #8
 801d080:	46bd      	mov	sp, r7
 801d082:	bd80      	pop	{r7, pc}

0801d084 <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 801d084:	b580      	push	{r7, lr}
 801d086:	b082      	sub	sp, #8
 801d088:	af00      	add	r7, sp, #0
 801d08a:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 801d08c:	6878      	ldr	r0, [r7, #4]
 801d08e:	f7ff ff96 	bl	801cfbe <json_value_get_type>
 801d092:	4603      	mov	r3, r0
 801d094:	2b06      	cmp	r3, #6
 801d096:	d102      	bne.n	801d09e <json_value_get_boolean+0x1a>
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	689b      	ldr	r3, [r3, #8]
 801d09c:	e001      	b.n	801d0a2 <json_value_get_boolean+0x1e>
 801d09e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	3708      	adds	r7, #8
 801d0a6:	46bd      	mov	sp, r7
 801d0a8:	bd80      	pop	{r7, pc}
	...

0801d0ac <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 801d0ac:	b580      	push	{r7, lr}
 801d0ae:	b082      	sub	sp, #8
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 801d0b4:	6878      	ldr	r0, [r7, #4]
 801d0b6:	f7ff ff82 	bl	801cfbe <json_value_get_type>
 801d0ba:	4603      	mov	r3, r0
 801d0bc:	2b05      	cmp	r3, #5
 801d0be:	d012      	beq.n	801d0e6 <json_value_free+0x3a>
 801d0c0:	2b05      	cmp	r3, #5
 801d0c2:	dc16      	bgt.n	801d0f2 <json_value_free+0x46>
 801d0c4:	2b02      	cmp	r3, #2
 801d0c6:	d007      	beq.n	801d0d8 <json_value_free+0x2c>
 801d0c8:	2b04      	cmp	r3, #4
 801d0ca:	d112      	bne.n	801d0f2 <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	689b      	ldr	r3, [r3, #8]
 801d0d0:	4618      	mov	r0, r3
 801d0d2:	f7fd ffc7 	bl	801b064 <json_object_free>
            break;
 801d0d6:	e00d      	b.n	801d0f4 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string);
 801d0d8:	4b0a      	ldr	r3, [pc, #40]	; (801d104 <json_value_free+0x58>)
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	687a      	ldr	r2, [r7, #4]
 801d0de:	6892      	ldr	r2, [r2, #8]
 801d0e0:	4610      	mov	r0, r2
 801d0e2:	4798      	blx	r3
            break;
 801d0e4:	e006      	b.n	801d0f4 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	689b      	ldr	r3, [r3, #8]
 801d0ea:	4618      	mov	r0, r3
 801d0ec:	f7fe f88a 	bl	801b204 <json_array_free>
            break;
 801d0f0:	e000      	b.n	801d0f4 <json_value_free+0x48>
        default:
            break;
 801d0f2:	bf00      	nop
    }
    parson_free(value);
 801d0f4:	4b03      	ldr	r3, [pc, #12]	; (801d104 <json_value_free+0x58>)
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	6878      	ldr	r0, [r7, #4]
 801d0fa:	4798      	blx	r3
}
 801d0fc:	bf00      	nop
 801d0fe:	3708      	adds	r7, #8
 801d100:	46bd      	mov	sp, r7
 801d102:	bd80      	pop	{r7, pc}
 801d104:	20000088 	.word	0x20000088

0801d108 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 801d108:	b580      	push	{r7, lr}
 801d10a:	b082      	sub	sp, #8
 801d10c:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d10e:	4b12      	ldr	r3, [pc, #72]	; (801d158 <json_value_init_object+0x50>)
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	2010      	movs	r0, #16
 801d114:	4798      	blx	r3
 801d116:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d101      	bne.n	801d122 <json_value_init_object+0x1a>
        return NULL;
 801d11e:	2300      	movs	r3, #0
 801d120:	e016      	b.n	801d150 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	2200      	movs	r2, #0
 801d126:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	2204      	movs	r2, #4
 801d12c:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_init(new_value);
 801d12e:	6878      	ldr	r0, [r7, #4]
 801d130:	f7fd fd88 	bl	801ac44 <json_object_init>
 801d134:	4602      	mov	r2, r0
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	689b      	ldr	r3, [r3, #8]
 801d13e:	2b00      	cmp	r3, #0
 801d140:	d105      	bne.n	801d14e <json_value_init_object+0x46>
        parson_free(new_value);
 801d142:	4b06      	ldr	r3, [pc, #24]	; (801d15c <json_value_init_object+0x54>)
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	6878      	ldr	r0, [r7, #4]
 801d148:	4798      	blx	r3
        return NULL;
 801d14a:	2300      	movs	r3, #0
 801d14c:	e000      	b.n	801d150 <json_value_init_object+0x48>
    }
    return new_value;
 801d14e:	687b      	ldr	r3, [r7, #4]
}
 801d150:	4618      	mov	r0, r3
 801d152:	3708      	adds	r7, #8
 801d154:	46bd      	mov	sp, r7
 801d156:	bd80      	pop	{r7, pc}
 801d158:	20000084 	.word	0x20000084
 801d15c:	20000088 	.word	0x20000088

0801d160 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 801d160:	b580      	push	{r7, lr}
 801d162:	b082      	sub	sp, #8
 801d164:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d166:	4b12      	ldr	r3, [pc, #72]	; (801d1b0 <json_value_init_array+0x50>)
 801d168:	681b      	ldr	r3, [r3, #0]
 801d16a:	2010      	movs	r0, #16
 801d16c:	4798      	blx	r3
 801d16e:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	2b00      	cmp	r3, #0
 801d174:	d101      	bne.n	801d17a <json_value_init_array+0x1a>
        return NULL;
 801d176:	2300      	movs	r3, #0
 801d178:	e016      	b.n	801d1a8 <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 801d17a:	687b      	ldr	r3, [r7, #4]
 801d17c:	2200      	movs	r2, #0
 801d17e:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	2205      	movs	r2, #5
 801d184:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_init(new_value);
 801d186:	6878      	ldr	r0, [r7, #4]
 801d188:	f7fd ffa4 	bl	801b0d4 <json_array_init>
 801d18c:	4602      	mov	r2, r0
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 801d192:	687b      	ldr	r3, [r7, #4]
 801d194:	689b      	ldr	r3, [r3, #8]
 801d196:	2b00      	cmp	r3, #0
 801d198:	d105      	bne.n	801d1a6 <json_value_init_array+0x46>
        parson_free(new_value);
 801d19a:	4b06      	ldr	r3, [pc, #24]	; (801d1b4 <json_value_init_array+0x54>)
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	6878      	ldr	r0, [r7, #4]
 801d1a0:	4798      	blx	r3
        return NULL;
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	e000      	b.n	801d1a8 <json_value_init_array+0x48>
    }
    return new_value;
 801d1a6:	687b      	ldr	r3, [r7, #4]
}
 801d1a8:	4618      	mov	r0, r3
 801d1aa:	3708      	adds	r7, #8
 801d1ac:	46bd      	mov	sp, r7
 801d1ae:	bd80      	pop	{r7, pc}
 801d1b0:	20000084 	.word	0x20000084
 801d1b4:	20000088 	.word	0x20000088

0801d1b8 <json_value_init_string>:

JSON_Value * json_value_init_string(const char *string) {
 801d1b8:	b580      	push	{r7, lr}
 801d1ba:	b086      	sub	sp, #24
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	6078      	str	r0, [r7, #4]
    char *copy = NULL;
 801d1c0:	2300      	movs	r3, #0
 801d1c2:	617b      	str	r3, [r7, #20]
    JSON_Value *value;
    size_t string_len = 0;
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	613b      	str	r3, [r7, #16]
    if (string == NULL) {
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d101      	bne.n	801d1d2 <json_value_init_string+0x1a>
        return NULL;
 801d1ce:	2300      	movs	r3, #0
 801d1d0:	e022      	b.n	801d218 <json_value_init_string+0x60>
    }
    string_len = strlen(string);
 801d1d2:	6878      	ldr	r0, [r7, #4]
 801d1d4:	f7e3 f81e 	bl	8000214 <strlen>
 801d1d8:	6138      	str	r0, [r7, #16]
    if (!is_valid_utf8(string, string_len)) {
 801d1da:	6939      	ldr	r1, [r7, #16]
 801d1dc:	6878      	ldr	r0, [r7, #4]
 801d1de:	f7fd fccc 	bl	801ab7a <is_valid_utf8>
 801d1e2:	4603      	mov	r3, r0
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d101      	bne.n	801d1ec <json_value_init_string+0x34>
        return NULL;
 801d1e8:	2300      	movs	r3, #0
 801d1ea:	e015      	b.n	801d218 <json_value_init_string+0x60>
    }
    copy = parson_strndup(string, string_len);
 801d1ec:	6939      	ldr	r1, [r7, #16]
 801d1ee:	6878      	ldr	r0, [r7, #4]
 801d1f0:	f7fd fb24 	bl	801a83c <parson_strndup>
 801d1f4:	6178      	str	r0, [r7, #20]
    if (copy == NULL) {
 801d1f6:	697b      	ldr	r3, [r7, #20]
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d101      	bne.n	801d200 <json_value_init_string+0x48>
        return NULL;
 801d1fc:	2300      	movs	r3, #0
 801d1fe:	e00b      	b.n	801d218 <json_value_init_string+0x60>
    }
    value = json_value_init_string_no_copy(copy);
 801d200:	6978      	ldr	r0, [r7, #20]
 801d202:	f7fe f827 	bl	801b254 <json_value_init_string_no_copy>
 801d206:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801d208:	68fb      	ldr	r3, [r7, #12]
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d103      	bne.n	801d216 <json_value_init_string+0x5e>
        parson_free(copy);
 801d20e:	4b04      	ldr	r3, [pc, #16]	; (801d220 <json_value_init_string+0x68>)
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	6978      	ldr	r0, [r7, #20]
 801d214:	4798      	blx	r3
    }
    return value;
 801d216:	68fb      	ldr	r3, [r7, #12]
}
 801d218:	4618      	mov	r0, r3
 801d21a:	3718      	adds	r7, #24
 801d21c:	46bd      	mov	sp, r7
 801d21e:	bd80      	pop	{r7, pc}
 801d220:	20000088 	.word	0x20000088

0801d224 <json_value_init_number>:

JSON_Value * json_value_init_number(double number) {
 801d224:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d226:	b085      	sub	sp, #20
 801d228:	af00      	add	r7, sp, #0
 801d22a:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 801d22e:	2300      	movs	r3, #0
 801d230:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 801d232:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d236:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d23a:	f7e3 fc9f 	bl	8000b7c <__aeabi_dcmpun>
 801d23e:	4603      	mov	r3, r0
 801d240:	2b00      	cmp	r3, #0
 801d242:	d121      	bne.n	801d288 <json_value_init_number+0x64>
 801d244:	683c      	ldr	r4, [r7, #0]
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801d24c:	2301      	movs	r3, #1
 801d24e:	461e      	mov	r6, r3
 801d250:	f04f 32ff 	mov.w	r2, #4294967295
 801d254:	4b1a      	ldr	r3, [pc, #104]	; (801d2c0 <json_value_init_number+0x9c>)
 801d256:	4620      	mov	r0, r4
 801d258:	4629      	mov	r1, r5
 801d25a:	f7e3 fc8f 	bl	8000b7c <__aeabi_dcmpun>
 801d25e:	4603      	mov	r3, r0
 801d260:	2b00      	cmp	r3, #0
 801d262:	d10b      	bne.n	801d27c <json_value_init_number+0x58>
 801d264:	f04f 32ff 	mov.w	r2, #4294967295
 801d268:	4b15      	ldr	r3, [pc, #84]	; (801d2c0 <json_value_init_number+0x9c>)
 801d26a:	4620      	mov	r0, r4
 801d26c:	4629      	mov	r1, r5
 801d26e:	f7e3 fc67 	bl	8000b40 <__aeabi_dcmple>
 801d272:	4603      	mov	r3, r0
 801d274:	2b00      	cmp	r3, #0
 801d276:	d101      	bne.n	801d27c <json_value_init_number+0x58>
 801d278:	2300      	movs	r3, #0
 801d27a:	461e      	mov	r6, r3
 801d27c:	b2f3      	uxtb	r3, r6
 801d27e:	f083 0301 	eor.w	r3, r3, #1
 801d282:	b2db      	uxtb	r3, r3
 801d284:	2b00      	cmp	r3, #0
 801d286:	d001      	beq.n	801d28c <json_value_init_number+0x68>
        return NULL;
 801d288:	2300      	movs	r3, #0
 801d28a:	e015      	b.n	801d2b8 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d28c:	4b0d      	ldr	r3, [pc, #52]	; (801d2c4 <json_value_init_number+0xa0>)
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	2010      	movs	r0, #16
 801d292:	4798      	blx	r3
 801d294:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 801d296:	68fb      	ldr	r3, [r7, #12]
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d101      	bne.n	801d2a0 <json_value_init_number+0x7c>
        return NULL;
 801d29c:	2300      	movs	r3, #0
 801d29e:	e00b      	b.n	801d2b8 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 801d2a0:	68fb      	ldr	r3, [r7, #12]
 801d2a2:	2200      	movs	r2, #0
 801d2a4:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 801d2a6:	68fb      	ldr	r3, [r7, #12]
 801d2a8:	2203      	movs	r2, #3
 801d2aa:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 801d2ac:	68f9      	ldr	r1, [r7, #12]
 801d2ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d2b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 801d2b6:	68fb      	ldr	r3, [r7, #12]
}
 801d2b8:	4618      	mov	r0, r3
 801d2ba:	3714      	adds	r7, #20
 801d2bc:	46bd      	mov	sp, r7
 801d2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2c0:	7fefffff 	.word	0x7fefffff
 801d2c4:	20000084 	.word	0x20000084

0801d2c8 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 801d2c8:	b580      	push	{r7, lr}
 801d2ca:	b084      	sub	sp, #16
 801d2cc:	af00      	add	r7, sp, #0
 801d2ce:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d2d0:	4b0e      	ldr	r3, [pc, #56]	; (801d30c <json_value_init_boolean+0x44>)
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	2010      	movs	r0, #16
 801d2d6:	4798      	blx	r3
 801d2d8:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d101      	bne.n	801d2e4 <json_value_init_boolean+0x1c>
        return NULL;
 801d2e0:	2300      	movs	r3, #0
 801d2e2:	e00f      	b.n	801d304 <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	2200      	movs	r2, #0
 801d2e8:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 801d2ea:	68fb      	ldr	r3, [r7, #12]
 801d2ec:	2206      	movs	r2, #6
 801d2ee:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	bf14      	ite	ne
 801d2f6:	2301      	movne	r3, #1
 801d2f8:	2300      	moveq	r3, #0
 801d2fa:	b2db      	uxtb	r3, r3
 801d2fc:	461a      	mov	r2, r3
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	609a      	str	r2, [r3, #8]
    return new_value;
 801d302:	68fb      	ldr	r3, [r7, #12]
}
 801d304:	4618      	mov	r0, r3
 801d306:	3710      	adds	r7, #16
 801d308:	46bd      	mov	sp, r7
 801d30a:	bd80      	pop	{r7, pc}
 801d30c:	20000084 	.word	0x20000084

0801d310 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 801d310:	b580      	push	{r7, lr}
 801d312:	b082      	sub	sp, #8
 801d314:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d316:	4b0a      	ldr	r3, [pc, #40]	; (801d340 <json_value_init_null+0x30>)
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	2010      	movs	r0, #16
 801d31c:	4798      	blx	r3
 801d31e:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	2b00      	cmp	r3, #0
 801d324:	d101      	bne.n	801d32a <json_value_init_null+0x1a>
        return NULL;
 801d326:	2300      	movs	r3, #0
 801d328:	e006      	b.n	801d338 <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	2200      	movs	r2, #0
 801d32e:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	2201      	movs	r2, #1
 801d334:	605a      	str	r2, [r3, #4]
    return new_value;
 801d336:	687b      	ldr	r3, [r7, #4]
}
 801d338:	4618      	mov	r0, r3
 801d33a:	3708      	adds	r7, #8
 801d33c:	46bd      	mov	sp, r7
 801d33e:	bd80      	pop	{r7, pc}
 801d340:	20000084 	.word	0x20000084

0801d344 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 801d344:	b580      	push	{r7, lr}
 801d346:	b096      	sub	sp, #88	; 0x58
 801d348:	af02      	add	r7, sp, #8
 801d34a:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 801d34c:	f107 030c 	add.w	r3, r7, #12
 801d350:	9300      	str	r3, [sp, #0]
 801d352:	2300      	movs	r3, #0
 801d354:	2200      	movs	r2, #0
 801d356:	2100      	movs	r1, #0
 801d358:	6878      	ldr	r0, [r7, #4]
 801d35a:	f7fe fcff 	bl	801bd5c <json_serialize_to_buffer_r>
 801d35e:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801d360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d362:	2b00      	cmp	r3, #0
 801d364:	db02      	blt.n	801d36c <json_serialization_size+0x28>
 801d366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d368:	3301      	adds	r3, #1
 801d36a:	e000      	b.n	801d36e <json_serialization_size+0x2a>
 801d36c:	2300      	movs	r3, #0
}
 801d36e:	4618      	mov	r0, r3
 801d370:	3750      	adds	r7, #80	; 0x50
 801d372:	46bd      	mov	sp, r7
 801d374:	bd80      	pop	{r7, pc}

0801d376 <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801d376:	b580      	push	{r7, lr}
 801d378:	b088      	sub	sp, #32
 801d37a:	af02      	add	r7, sp, #8
 801d37c:	60f8      	str	r0, [r7, #12]
 801d37e:	60b9      	str	r1, [r7, #8]
 801d380:	607a      	str	r2, [r7, #4]
    int written = -1;
 801d382:	f04f 33ff 	mov.w	r3, #4294967295
 801d386:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 801d388:	68f8      	ldr	r0, [r7, #12]
 801d38a:	f7ff ffdb 	bl	801d344 <json_serialization_size>
 801d38e:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801d390:	693b      	ldr	r3, [r7, #16]
 801d392:	2b00      	cmp	r3, #0
 801d394:	d003      	beq.n	801d39e <json_serialize_to_buffer+0x28>
 801d396:	687a      	ldr	r2, [r7, #4]
 801d398:	693b      	ldr	r3, [r7, #16]
 801d39a:	429a      	cmp	r2, r3
 801d39c:	d202      	bcs.n	801d3a4 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 801d39e:	f04f 33ff 	mov.w	r3, #4294967295
 801d3a2:	e00f      	b.n	801d3c4 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 0, NULL);
 801d3a4:	2300      	movs	r3, #0
 801d3a6:	9300      	str	r3, [sp, #0]
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	2200      	movs	r2, #0
 801d3ac:	68b9      	ldr	r1, [r7, #8]
 801d3ae:	68f8      	ldr	r0, [r7, #12]
 801d3b0:	f7fe fcd4 	bl	801bd5c <json_serialize_to_buffer_r>
 801d3b4:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801d3b6:	697b      	ldr	r3, [r7, #20]
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	da02      	bge.n	801d3c2 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 801d3bc:	f04f 33ff 	mov.w	r3, #4294967295
 801d3c0:	e000      	b.n	801d3c4 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 801d3c2:	2300      	movs	r3, #0
}
 801d3c4:	4618      	mov	r0, r3
 801d3c6:	3718      	adds	r7, #24
 801d3c8:	46bd      	mov	sp, r7
 801d3ca:	bd80      	pop	{r7, pc}

0801d3cc <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 801d3cc:	b580      	push	{r7, lr}
 801d3ce:	b086      	sub	sp, #24
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801d3d4:	f04f 33ff 	mov.w	r3, #4294967295
 801d3d8:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 801d3da:	6878      	ldr	r0, [r7, #4]
 801d3dc:	f7ff ffb2 	bl	801d344 <json_serialization_size>
 801d3e0:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801d3e2:	2300      	movs	r3, #0
 801d3e4:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801d3e6:	693b      	ldr	r3, [r7, #16]
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d101      	bne.n	801d3f0 <json_serialize_to_string+0x24>
        return NULL;
 801d3ec:	2300      	movs	r3, #0
 801d3ee:	e019      	b.n	801d424 <json_serialize_to_string+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801d3f0:	4b0e      	ldr	r3, [pc, #56]	; (801d42c <json_serialize_to_string+0x60>)
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	6938      	ldr	r0, [r7, #16]
 801d3f6:	4798      	blx	r3
 801d3f8:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801d3fa:	68fb      	ldr	r3, [r7, #12]
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	d101      	bne.n	801d404 <json_serialize_to_string+0x38>
        return NULL;
 801d400:	2300      	movs	r3, #0
 801d402:	e00f      	b.n	801d424 <json_serialize_to_string+0x58>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 801d404:	693a      	ldr	r2, [r7, #16]
 801d406:	68f9      	ldr	r1, [r7, #12]
 801d408:	6878      	ldr	r0, [r7, #4]
 801d40a:	f7ff ffb4 	bl	801d376 <json_serialize_to_buffer>
 801d40e:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801d410:	697b      	ldr	r3, [r7, #20]
 801d412:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d416:	d104      	bne.n	801d422 <json_serialize_to_string+0x56>
        json_free_serialized_string(buf);
 801d418:	68f8      	ldr	r0, [r7, #12]
 801d41a:	f000 f87f 	bl	801d51c <json_free_serialized_string>
        return NULL;
 801d41e:	2300      	movs	r3, #0
 801d420:	e000      	b.n	801d424 <json_serialize_to_string+0x58>
    }
    return buf;
 801d422:	68fb      	ldr	r3, [r7, #12]
}
 801d424:	4618      	mov	r0, r3
 801d426:	3718      	adds	r7, #24
 801d428:	46bd      	mov	sp, r7
 801d42a:	bd80      	pop	{r7, pc}
 801d42c:	20000084 	.word	0x20000084

0801d430 <json_serialization_size_pretty>:

size_t json_serialization_size_pretty(const JSON_Value *value) {
 801d430:	b580      	push	{r7, lr}
 801d432:	b096      	sub	sp, #88	; 0x58
 801d434:	af02      	add	r7, sp, #8
 801d436:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 1, num_buf);
 801d438:	f107 030c 	add.w	r3, r7, #12
 801d43c:	9300      	str	r3, [sp, #0]
 801d43e:	2301      	movs	r3, #1
 801d440:	2200      	movs	r2, #0
 801d442:	2100      	movs	r1, #0
 801d444:	6878      	ldr	r0, [r7, #4]
 801d446:	f7fe fc89 	bl	801bd5c <json_serialize_to_buffer_r>
 801d44a:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801d44c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d44e:	2b00      	cmp	r3, #0
 801d450:	db02      	blt.n	801d458 <json_serialization_size_pretty+0x28>
 801d452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d454:	3301      	adds	r3, #1
 801d456:	e000      	b.n	801d45a <json_serialization_size_pretty+0x2a>
 801d458:	2300      	movs	r3, #0
}
 801d45a:	4618      	mov	r0, r3
 801d45c:	3750      	adds	r7, #80	; 0x50
 801d45e:	46bd      	mov	sp, r7
 801d460:	bd80      	pop	{r7, pc}

0801d462 <json_serialize_to_buffer_pretty>:

JSON_Status json_serialize_to_buffer_pretty(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801d462:	b580      	push	{r7, lr}
 801d464:	b088      	sub	sp, #32
 801d466:	af02      	add	r7, sp, #8
 801d468:	60f8      	str	r0, [r7, #12]
 801d46a:	60b9      	str	r1, [r7, #8]
 801d46c:	607a      	str	r2, [r7, #4]
    int written = -1;
 801d46e:	f04f 33ff 	mov.w	r3, #4294967295
 801d472:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size_pretty(value);
 801d474:	68f8      	ldr	r0, [r7, #12]
 801d476:	f7ff ffdb 	bl	801d430 <json_serialization_size_pretty>
 801d47a:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801d47c:	693b      	ldr	r3, [r7, #16]
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d003      	beq.n	801d48a <json_serialize_to_buffer_pretty+0x28>
 801d482:	687a      	ldr	r2, [r7, #4]
 801d484:	693b      	ldr	r3, [r7, #16]
 801d486:	429a      	cmp	r2, r3
 801d488:	d202      	bcs.n	801d490 <json_serialize_to_buffer_pretty+0x2e>
        return JSONFailure;
 801d48a:	f04f 33ff 	mov.w	r3, #4294967295
 801d48e:	e00f      	b.n	801d4b0 <json_serialize_to_buffer_pretty+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 1, NULL);
 801d490:	2300      	movs	r3, #0
 801d492:	9300      	str	r3, [sp, #0]
 801d494:	2301      	movs	r3, #1
 801d496:	2200      	movs	r2, #0
 801d498:	68b9      	ldr	r1, [r7, #8]
 801d49a:	68f8      	ldr	r0, [r7, #12]
 801d49c:	f7fe fc5e 	bl	801bd5c <json_serialize_to_buffer_r>
 801d4a0:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801d4a2:	697b      	ldr	r3, [r7, #20]
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	da02      	bge.n	801d4ae <json_serialize_to_buffer_pretty+0x4c>
        return JSONFailure;
 801d4a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d4ac:	e000      	b.n	801d4b0 <json_serialize_to_buffer_pretty+0x4e>
    }
    return JSONSuccess;
 801d4ae:	2300      	movs	r3, #0
}
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	3718      	adds	r7, #24
 801d4b4:	46bd      	mov	sp, r7
 801d4b6:	bd80      	pop	{r7, pc}

0801d4b8 <json_serialize_to_string_pretty>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string_pretty(const JSON_Value *value) {
 801d4b8:	b580      	push	{r7, lr}
 801d4ba:	b086      	sub	sp, #24
 801d4bc:	af00      	add	r7, sp, #0
 801d4be:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801d4c0:	f04f 33ff 	mov.w	r3, #4294967295
 801d4c4:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size_pretty(value);
 801d4c6:	6878      	ldr	r0, [r7, #4]
 801d4c8:	f7ff ffb2 	bl	801d430 <json_serialization_size_pretty>
 801d4cc:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801d4ce:	2300      	movs	r3, #0
 801d4d0:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801d4d2:	693b      	ldr	r3, [r7, #16]
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	d101      	bne.n	801d4dc <json_serialize_to_string_pretty+0x24>
        return NULL;
 801d4d8:	2300      	movs	r3, #0
 801d4da:	e019      	b.n	801d510 <json_serialize_to_string_pretty+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801d4dc:	4b0e      	ldr	r3, [pc, #56]	; (801d518 <json_serialize_to_string_pretty+0x60>)
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	6938      	ldr	r0, [r7, #16]
 801d4e2:	4798      	blx	r3
 801d4e4:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801d4e6:	68fb      	ldr	r3, [r7, #12]
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	d101      	bne.n	801d4f0 <json_serialize_to_string_pretty+0x38>
        return NULL;
 801d4ec:	2300      	movs	r3, #0
 801d4ee:	e00f      	b.n	801d510 <json_serialize_to_string_pretty+0x58>
    }
    serialization_result = json_serialize_to_buffer_pretty(value, buf, buf_size_bytes);
 801d4f0:	693a      	ldr	r2, [r7, #16]
 801d4f2:	68f9      	ldr	r1, [r7, #12]
 801d4f4:	6878      	ldr	r0, [r7, #4]
 801d4f6:	f7ff ffb4 	bl	801d462 <json_serialize_to_buffer_pretty>
 801d4fa:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801d4fc:	697b      	ldr	r3, [r7, #20]
 801d4fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d502:	d104      	bne.n	801d50e <json_serialize_to_string_pretty+0x56>
        json_free_serialized_string(buf);
 801d504:	68f8      	ldr	r0, [r7, #12]
 801d506:	f000 f809 	bl	801d51c <json_free_serialized_string>
        return NULL;
 801d50a:	2300      	movs	r3, #0
 801d50c:	e000      	b.n	801d510 <json_serialize_to_string_pretty+0x58>
    }
    return buf;
 801d50e:	68fb      	ldr	r3, [r7, #12]
}
 801d510:	4618      	mov	r0, r3
 801d512:	3718      	adds	r7, #24
 801d514:	46bd      	mov	sp, r7
 801d516:	bd80      	pop	{r7, pc}
 801d518:	20000084 	.word	0x20000084

0801d51c <json_free_serialized_string>:

void json_free_serialized_string(char *string) {
 801d51c:	b580      	push	{r7, lr}
 801d51e:	b082      	sub	sp, #8
 801d520:	af00      	add	r7, sp, #0
 801d522:	6078      	str	r0, [r7, #4]
    parson_free(string);
 801d524:	4b03      	ldr	r3, [pc, #12]	; (801d534 <json_free_serialized_string+0x18>)
 801d526:	681b      	ldr	r3, [r3, #0]
 801d528:	6878      	ldr	r0, [r7, #4]
 801d52a:	4798      	blx	r3
}
 801d52c:	bf00      	nop
 801d52e:	3708      	adds	r7, #8
 801d530:	46bd      	mov	sp, r7
 801d532:	bd80      	pop	{r7, pc}
 801d534:	20000088 	.word	0x20000088

0801d538 <json_array_append_value>:
    }
    array->count = 0;
    return JSONSuccess;
}

JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {
 801d538:	b580      	push	{r7, lr}
 801d53a:	b082      	sub	sp, #8
 801d53c:	af00      	add	r7, sp, #0
 801d53e:	6078      	str	r0, [r7, #4]
 801d540:	6039      	str	r1, [r7, #0]
    if (array == NULL || value == NULL || value->parent != NULL) {
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	2b00      	cmp	r3, #0
 801d546:	d006      	beq.n	801d556 <json_array_append_value+0x1e>
 801d548:	683b      	ldr	r3, [r7, #0]
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d003      	beq.n	801d556 <json_array_append_value+0x1e>
 801d54e:	683b      	ldr	r3, [r7, #0]
 801d550:	681b      	ldr	r3, [r3, #0]
 801d552:	2b00      	cmp	r3, #0
 801d554:	d002      	beq.n	801d55c <json_array_append_value+0x24>
        return JSONFailure;
 801d556:	f04f 33ff 	mov.w	r3, #4294967295
 801d55a:	e004      	b.n	801d566 <json_array_append_value+0x2e>
    }
    return json_array_add(array, value);
 801d55c:	6839      	ldr	r1, [r7, #0]
 801d55e:	6878      	ldr	r0, [r7, #4]
 801d560:	f7fd fdda 	bl	801b118 <json_array_add>
 801d564:	4603      	mov	r3, r0
}
 801d566:	4618      	mov	r0, r3
 801d568:	3708      	adds	r7, #8
 801d56a:	46bd      	mov	sp, r7
 801d56c:	bd80      	pop	{r7, pc}

0801d56e <json_array_append_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_array_append_number(JSON_Array *array, double number) {
 801d56e:	b580      	push	{r7, lr}
 801d570:	b086      	sub	sp, #24
 801d572:	af00      	add	r7, sp, #0
 801d574:	60f8      	str	r0, [r7, #12]
 801d576:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801d57a:	ed97 0b00 	vldr	d0, [r7]
 801d57e:	f7ff fe51 	bl	801d224 <json_value_init_number>
 801d582:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801d584:	697b      	ldr	r3, [r7, #20]
 801d586:	2b00      	cmp	r3, #0
 801d588:	d102      	bne.n	801d590 <json_array_append_number+0x22>
        return JSONFailure;
 801d58a:	f04f 33ff 	mov.w	r3, #4294967295
 801d58e:	e00e      	b.n	801d5ae <json_array_append_number+0x40>
    }
    if (json_array_append_value(array, value) == JSONFailure) {
 801d590:	6979      	ldr	r1, [r7, #20]
 801d592:	68f8      	ldr	r0, [r7, #12]
 801d594:	f7ff ffd0 	bl	801d538 <json_array_append_value>
 801d598:	4603      	mov	r3, r0
 801d59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d59e:	d105      	bne.n	801d5ac <json_array_append_number+0x3e>
        json_value_free(value);
 801d5a0:	6978      	ldr	r0, [r7, #20]
 801d5a2:	f7ff fd83 	bl	801d0ac <json_value_free>
        return JSONFailure;
 801d5a6:	f04f 33ff 	mov.w	r3, #4294967295
 801d5aa:	e000      	b.n	801d5ae <json_array_append_number+0x40>
    }
    return JSONSuccess;
 801d5ac:	2300      	movs	r3, #0
}
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	3718      	adds	r7, #24
 801d5b2:	46bd      	mov	sp, r7
 801d5b4:	bd80      	pop	{r7, pc}

0801d5b6 <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801d5b6:	b580      	push	{r7, lr}
 801d5b8:	b086      	sub	sp, #24
 801d5ba:	af00      	add	r7, sp, #0
 801d5bc:	60f8      	str	r0, [r7, #12]
 801d5be:	60b9      	str	r1, [r7, #8]
 801d5c0:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	617b      	str	r3, [r7, #20]
    JSON_Value *old_value;
    if (object == NULL || name == NULL || value == NULL || value->parent != NULL) {
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	d009      	beq.n	801d5e0 <json_object_set_value+0x2a>
 801d5cc:	68bb      	ldr	r3, [r7, #8]
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	d006      	beq.n	801d5e0 <json_object_set_value+0x2a>
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d003      	beq.n	801d5e0 <json_object_set_value+0x2a>
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	d002      	beq.n	801d5e6 <json_object_set_value+0x30>
        return JSONFailure;
 801d5e0:	f04f 33ff 	mov.w	r3, #4294967295
 801d5e4:	e039      	b.n	801d65a <json_object_set_value+0xa4>
    }
    old_value = json_object_get_value(object, name);
 801d5e6:	68b9      	ldr	r1, [r7, #8]
 801d5e8:	68f8      	ldr	r0, [r7, #12]
 801d5ea:	f7ff fbd1 	bl	801cd90 <json_object_get_value>
 801d5ee:	6138      	str	r0, [r7, #16]
    if (old_value != NULL) { /* free and overwrite old value */
 801d5f0:	693b      	ldr	r3, [r7, #16]
 801d5f2:	2b00      	cmp	r3, #0
 801d5f4:	d02b      	beq.n	801d64e <json_object_set_value+0x98>
        json_value_free(old_value);
 801d5f6:	6938      	ldr	r0, [r7, #16]
 801d5f8:	f7ff fd58 	bl	801d0ac <json_value_free>
        for (i = 0; i < json_object_get_count(object); i++) {
 801d5fc:	2300      	movs	r3, #0
 801d5fe:	617b      	str	r3, [r7, #20]
 801d600:	e01e      	b.n	801d640 <json_object_set_value+0x8a>
            if (strcmp(object->names[i], name) == 0) {
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	685a      	ldr	r2, [r3, #4]
 801d606:	697b      	ldr	r3, [r7, #20]
 801d608:	009b      	lsls	r3, r3, #2
 801d60a:	4413      	add	r3, r2
 801d60c:	681b      	ldr	r3, [r3, #0]
 801d60e:	68b9      	ldr	r1, [r7, #8]
 801d610:	4618      	mov	r0, r3
 801d612:	f7e2 fdf5 	bl	8000200 <strcmp>
 801d616:	4603      	mov	r3, r0
 801d618:	2b00      	cmp	r3, #0
 801d61a:	d10e      	bne.n	801d63a <json_object_set_value+0x84>
                value->parent = json_object_get_wrapping_value(object);
 801d61c:	68f8      	ldr	r0, [r7, #12]
 801d61e:	f7ff fc65 	bl	801ceec <json_object_get_wrapping_value>
 801d622:	4602      	mov	r2, r0
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	601a      	str	r2, [r3, #0]
                object->values[i] = value;
 801d628:	68fb      	ldr	r3, [r7, #12]
 801d62a:	689a      	ldr	r2, [r3, #8]
 801d62c:	697b      	ldr	r3, [r7, #20]
 801d62e:	009b      	lsls	r3, r3, #2
 801d630:	4413      	add	r3, r2
 801d632:	687a      	ldr	r2, [r7, #4]
 801d634:	601a      	str	r2, [r3, #0]
                return JSONSuccess;
 801d636:	2300      	movs	r3, #0
 801d638:	e00f      	b.n	801d65a <json_object_set_value+0xa4>
        for (i = 0; i < json_object_get_count(object); i++) {
 801d63a:	697b      	ldr	r3, [r7, #20]
 801d63c:	3301      	adds	r3, #1
 801d63e:	617b      	str	r3, [r7, #20]
 801d640:	68f8      	ldr	r0, [r7, #12]
 801d642:	f7ff fc27 	bl	801ce94 <json_object_get_count>
 801d646:	4602      	mov	r2, r0
 801d648:	697b      	ldr	r3, [r7, #20]
 801d64a:	4293      	cmp	r3, r2
 801d64c:	d3d9      	bcc.n	801d602 <json_object_set_value+0x4c>
            }
        }
    }
    /* add new key value pair */
    return json_object_add(object, name, value);
 801d64e:	687a      	ldr	r2, [r7, #4]
 801d650:	68b9      	ldr	r1, [r7, #8]
 801d652:	68f8      	ldr	r0, [r7, #12]
 801d654:	f7fd fb1a 	bl	801ac8c <json_object_add>
 801d658:	4603      	mov	r3, r0
}
 801d65a:	4618      	mov	r0, r3
 801d65c:	3718      	adds	r7, #24
 801d65e:	46bd      	mov	sp, r7
 801d660:	bd80      	pop	{r7, pc}

0801d662 <json_object_dotset_value>:

JSON_Status json_object_set_null(JSON_Object *object, const char *name) {
    return json_object_set_value(object, name, json_value_init_null());
}

JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801d662:	b580      	push	{r7, lr}
 801d664:	b08c      	sub	sp, #48	; 0x30
 801d666:	af00      	add	r7, sp, #0
 801d668:	60f8      	str	r0, [r7, #12]
 801d66a:	60b9      	str	r1, [r7, #8]
 801d66c:	607a      	str	r2, [r7, #4]
    const char *dot_pos = NULL;
 801d66e:	2300      	movs	r3, #0
 801d670:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Value *temp_value = NULL, *new_value = NULL;
 801d672:	2300      	movs	r3, #0
 801d674:	62bb      	str	r3, [r7, #40]	; 0x28
 801d676:	2300      	movs	r3, #0
 801d678:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Object *temp_object = NULL, *new_object = NULL;
 801d67a:	2300      	movs	r3, #0
 801d67c:	623b      	str	r3, [r7, #32]
 801d67e:	2300      	movs	r3, #0
 801d680:	61fb      	str	r3, [r7, #28]
    JSON_Status status = JSONFailure;
 801d682:	f04f 33ff 	mov.w	r3, #4294967295
 801d686:	61bb      	str	r3, [r7, #24]
    size_t name_len = 0;
 801d688:	2300      	movs	r3, #0
 801d68a:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801d68c:	68fb      	ldr	r3, [r7, #12]
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d005      	beq.n	801d69e <json_object_dotset_value+0x3c>
 801d692:	68bb      	ldr	r3, [r7, #8]
 801d694:	2b00      	cmp	r3, #0
 801d696:	d002      	beq.n	801d69e <json_object_dotset_value+0x3c>
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d102      	bne.n	801d6a4 <json_object_dotset_value+0x42>
        return JSONFailure;
 801d69e:	f04f 33ff 	mov.w	r3, #4294967295
 801d6a2:	e067      	b.n	801d774 <json_object_dotset_value+0x112>
    }
    dot_pos = strchr(name, '.');
 801d6a4:	212e      	movs	r1, #46	; 0x2e
 801d6a6:	68b8      	ldr	r0, [r7, #8]
 801d6a8:	f001 fa22 	bl	801eaf0 <strchr>
 801d6ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (dot_pos == NULL) {
 801d6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d106      	bne.n	801d6c2 <json_object_dotset_value+0x60>
        return json_object_set_value(object, name, value);
 801d6b4:	687a      	ldr	r2, [r7, #4]
 801d6b6:	68b9      	ldr	r1, [r7, #8]
 801d6b8:	68f8      	ldr	r0, [r7, #12]
 801d6ba:	f7ff ff7c 	bl	801d5b6 <json_object_set_value>
 801d6be:	4603      	mov	r3, r0
 801d6c0:	e058      	b.n	801d774 <json_object_dotset_value+0x112>
    }
    name_len = dot_pos - name;
 801d6c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d6c4:	68bb      	ldr	r3, [r7, #8]
 801d6c6:	1ad3      	subs	r3, r2, r3
 801d6c8:	617b      	str	r3, [r7, #20]
    temp_value = json_object_getn_value(object, name, name_len);
 801d6ca:	697a      	ldr	r2, [r7, #20]
 801d6cc:	68b9      	ldr	r1, [r7, #8]
 801d6ce:	68f8      	ldr	r0, [r7, #12]
 801d6d0:	f7fd fbd8 	bl	801ae84 <json_object_getn_value>
 801d6d4:	62b8      	str	r0, [r7, #40]	; 0x28
    if (temp_value) {
 801d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	d015      	beq.n	801d708 <json_object_dotset_value+0xa6>
        /* Don't overwrite existing non-object (unlike json_object_set_value, but it shouldn't be changed at this point) */
        if (json_value_get_type(temp_value) != JSONObject) {
 801d6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d6de:	f7ff fc6e 	bl	801cfbe <json_value_get_type>
 801d6e2:	4603      	mov	r3, r0
 801d6e4:	2b04      	cmp	r3, #4
 801d6e6:	d002      	beq.n	801d6ee <json_object_dotset_value+0x8c>
            return JSONFailure;
 801d6e8:	f04f 33ff 	mov.w	r3, #4294967295
 801d6ec:	e042      	b.n	801d774 <json_object_dotset_value+0x112>
        }
        temp_object = json_value_get_object(temp_value);
 801d6ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d6f0:	f7ff fc77 	bl	801cfe2 <json_value_get_object>
 801d6f4:	6238      	str	r0, [r7, #32]
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 801d6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6f8:	3301      	adds	r3, #1
 801d6fa:	687a      	ldr	r2, [r7, #4]
 801d6fc:	4619      	mov	r1, r3
 801d6fe:	6a38      	ldr	r0, [r7, #32]
 801d700:	f7ff ffaf 	bl	801d662 <json_object_dotset_value>
 801d704:	4603      	mov	r3, r0
 801d706:	e035      	b.n	801d774 <json_object_dotset_value+0x112>
    }
    new_value = json_value_init_object();
 801d708:	f7ff fcfe 	bl	801d108 <json_value_init_object>
 801d70c:	6278      	str	r0, [r7, #36]	; 0x24
    if (new_value == NULL) {
 801d70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d710:	2b00      	cmp	r3, #0
 801d712:	d102      	bne.n	801d71a <json_object_dotset_value+0xb8>
        return JSONFailure;
 801d714:	f04f 33ff 	mov.w	r3, #4294967295
 801d718:	e02c      	b.n	801d774 <json_object_dotset_value+0x112>
    }
    new_object = json_value_get_object(new_value);
 801d71a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d71c:	f7ff fc61 	bl	801cfe2 <json_value_get_object>
 801d720:	61f8      	str	r0, [r7, #28]
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 801d722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d724:	3301      	adds	r3, #1
 801d726:	687a      	ldr	r2, [r7, #4]
 801d728:	4619      	mov	r1, r3
 801d72a:	69f8      	ldr	r0, [r7, #28]
 801d72c:	f7ff ff99 	bl	801d662 <json_object_dotset_value>
 801d730:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801d732:	69bb      	ldr	r3, [r7, #24]
 801d734:	2b00      	cmp	r3, #0
 801d736:	d005      	beq.n	801d744 <json_object_dotset_value+0xe2>
        json_value_free(new_value);
 801d738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d73a:	f7ff fcb7 	bl	801d0ac <json_value_free>
        return JSONFailure;
 801d73e:	f04f 33ff 	mov.w	r3, #4294967295
 801d742:	e017      	b.n	801d774 <json_object_dotset_value+0x112>
    }
    status = json_object_addn(object, name, name_len, new_value);
 801d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d746:	697a      	ldr	r2, [r7, #20]
 801d748:	68b9      	ldr	r1, [r7, #8]
 801d74a:	68f8      	ldr	r0, [r7, #12]
 801d74c:	f7fd fab8 	bl	801acc0 <json_object_addn>
 801d750:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801d752:	69bb      	ldr	r3, [r7, #24]
 801d754:	2b00      	cmp	r3, #0
 801d756:	d00c      	beq.n	801d772 <json_object_dotset_value+0x110>
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 801d758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d75a:	3301      	adds	r3, #1
 801d75c:	2200      	movs	r2, #0
 801d75e:	4619      	mov	r1, r3
 801d760:	69f8      	ldr	r0, [r7, #28]
 801d762:	f7fd fc43 	bl	801afec <json_object_dotremove_internal>
        json_value_free(new_value);
 801d766:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d768:	f7ff fca0 	bl	801d0ac <json_value_free>
        return JSONFailure;
 801d76c:	f04f 33ff 	mov.w	r3, #4294967295
 801d770:	e000      	b.n	801d774 <json_object_dotset_value+0x112>
    }
    return JSONSuccess;
 801d772:	2300      	movs	r3, #0
}
 801d774:	4618      	mov	r0, r3
 801d776:	3730      	adds	r7, #48	; 0x30
 801d778:	46bd      	mov	sp, r7
 801d77a:	bd80      	pop	{r7, pc}

0801d77c <json_object_dotset_string>:

JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 801d77c:	b580      	push	{r7, lr}
 801d77e:	b086      	sub	sp, #24
 801d780:	af00      	add	r7, sp, #0
 801d782:	60f8      	str	r0, [r7, #12]
 801d784:	60b9      	str	r1, [r7, #8]
 801d786:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_string(string);
 801d788:	6878      	ldr	r0, [r7, #4]
 801d78a:	f7ff fd15 	bl	801d1b8 <json_value_init_string>
 801d78e:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801d790:	697b      	ldr	r3, [r7, #20]
 801d792:	2b00      	cmp	r3, #0
 801d794:	d102      	bne.n	801d79c <json_object_dotset_string+0x20>
        return JSONFailure;
 801d796:	f04f 33ff 	mov.w	r3, #4294967295
 801d79a:	e00f      	b.n	801d7bc <json_object_dotset_string+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801d79c:	697a      	ldr	r2, [r7, #20]
 801d79e:	68b9      	ldr	r1, [r7, #8]
 801d7a0:	68f8      	ldr	r0, [r7, #12]
 801d7a2:	f7ff ff5e 	bl	801d662 <json_object_dotset_value>
 801d7a6:	4603      	mov	r3, r0
 801d7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d7ac:	d105      	bne.n	801d7ba <json_object_dotset_string+0x3e>
        json_value_free(value);
 801d7ae:	6978      	ldr	r0, [r7, #20]
 801d7b0:	f7ff fc7c 	bl	801d0ac <json_value_free>
        return JSONFailure;
 801d7b4:	f04f 33ff 	mov.w	r3, #4294967295
 801d7b8:	e000      	b.n	801d7bc <json_object_dotset_string+0x40>
    }
    return JSONSuccess;
 801d7ba:	2300      	movs	r3, #0
}
 801d7bc:	4618      	mov	r0, r3
 801d7be:	3718      	adds	r7, #24
 801d7c0:	46bd      	mov	sp, r7
 801d7c2:	bd80      	pop	{r7, pc}

0801d7c4 <json_object_dotset_number>:

JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {
 801d7c4:	b580      	push	{r7, lr}
 801d7c6:	b086      	sub	sp, #24
 801d7c8:	af00      	add	r7, sp, #0
 801d7ca:	60f8      	str	r0, [r7, #12]
 801d7cc:	60b9      	str	r1, [r7, #8]
 801d7ce:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801d7d2:	ed97 0b00 	vldr	d0, [r7]
 801d7d6:	f7ff fd25 	bl	801d224 <json_value_init_number>
 801d7da:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801d7dc:	697b      	ldr	r3, [r7, #20]
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	d102      	bne.n	801d7e8 <json_object_dotset_number+0x24>
        return JSONFailure;
 801d7e2:	f04f 33ff 	mov.w	r3, #4294967295
 801d7e6:	e00f      	b.n	801d808 <json_object_dotset_number+0x44>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801d7e8:	697a      	ldr	r2, [r7, #20]
 801d7ea:	68b9      	ldr	r1, [r7, #8]
 801d7ec:	68f8      	ldr	r0, [r7, #12]
 801d7ee:	f7ff ff38 	bl	801d662 <json_object_dotset_value>
 801d7f2:	4603      	mov	r3, r0
 801d7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d7f8:	d105      	bne.n	801d806 <json_object_dotset_number+0x42>
        json_value_free(value);
 801d7fa:	6978      	ldr	r0, [r7, #20]
 801d7fc:	f7ff fc56 	bl	801d0ac <json_value_free>
        return JSONFailure;
 801d800:	f04f 33ff 	mov.w	r3, #4294967295
 801d804:	e000      	b.n	801d808 <json_object_dotset_number+0x44>
    }
    return JSONSuccess;
 801d806:	2300      	movs	r3, #0
}
 801d808:	4618      	mov	r0, r3
 801d80a:	3718      	adds	r7, #24
 801d80c:	46bd      	mov	sp, r7
 801d80e:	bd80      	pop	{r7, pc}

0801d810 <json_object_dotset_boolean>:

JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {
 801d810:	b580      	push	{r7, lr}
 801d812:	b086      	sub	sp, #24
 801d814:	af00      	add	r7, sp, #0
 801d816:	60f8      	str	r0, [r7, #12]
 801d818:	60b9      	str	r1, [r7, #8]
 801d81a:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_boolean(boolean);
 801d81c:	6878      	ldr	r0, [r7, #4]
 801d81e:	f7ff fd53 	bl	801d2c8 <json_value_init_boolean>
 801d822:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801d824:	697b      	ldr	r3, [r7, #20]
 801d826:	2b00      	cmp	r3, #0
 801d828:	d102      	bne.n	801d830 <json_object_dotset_boolean+0x20>
        return JSONFailure;
 801d82a:	f04f 33ff 	mov.w	r3, #4294967295
 801d82e:	e00f      	b.n	801d850 <json_object_dotset_boolean+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801d830:	697a      	ldr	r2, [r7, #20]
 801d832:	68b9      	ldr	r1, [r7, #8]
 801d834:	68f8      	ldr	r0, [r7, #12]
 801d836:	f7ff ff14 	bl	801d662 <json_object_dotset_value>
 801d83a:	4603      	mov	r3, r0
 801d83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d840:	d105      	bne.n	801d84e <json_object_dotset_boolean+0x3e>
        json_value_free(value);
 801d842:	6978      	ldr	r0, [r7, #20]
 801d844:	f7ff fc32 	bl	801d0ac <json_value_free>
        return JSONFailure;
 801d848:	f04f 33ff 	mov.w	r3, #4294967295
 801d84c:	e000      	b.n	801d850 <json_object_dotset_boolean+0x40>
    }
    return JSONSuccess;
 801d84e:	2300      	movs	r3, #0
}
 801d850:	4618      	mov	r0, r3
 801d852:	3718      	adds	r7, #24
 801d854:	46bd      	mov	sp, r7
 801d856:	bd80      	pop	{r7, pc}

0801d858 <json_set_allocation_functions>:

int json_boolean(const JSON_Value *value) {
    return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {
 801d858:	b480      	push	{r7}
 801d85a:	b083      	sub	sp, #12
 801d85c:	af00      	add	r7, sp, #0
 801d85e:	6078      	str	r0, [r7, #4]
 801d860:	6039      	str	r1, [r7, #0]
    parson_malloc = malloc_fun;
 801d862:	4a06      	ldr	r2, [pc, #24]	; (801d87c <json_set_allocation_functions+0x24>)
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	6013      	str	r3, [r2, #0]
    parson_free = free_fun;
 801d868:	4a05      	ldr	r2, [pc, #20]	; (801d880 <json_set_allocation_functions+0x28>)
 801d86a:	683b      	ldr	r3, [r7, #0]
 801d86c:	6013      	str	r3, [r2, #0]
}
 801d86e:	bf00      	nop
 801d870:	370c      	adds	r7, #12
 801d872:	46bd      	mov	sp, r7
 801d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d878:	4770      	bx	lr
 801d87a:	bf00      	nop
 801d87c:	20000084 	.word	0x20000084
 801d880:	20000088 	.word	0x20000088

0801d884 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801d884:	480d      	ldr	r0, [pc, #52]	; (801d8bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801d886:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 801d888:	f7e8 f900 	bl	8005a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801d88c:	480c      	ldr	r0, [pc, #48]	; (801d8c0 <LoopForever+0x6>)
  ldr r1, =_edata
 801d88e:	490d      	ldr	r1, [pc, #52]	; (801d8c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 801d890:	4a0d      	ldr	r2, [pc, #52]	; (801d8c8 <LoopForever+0xe>)
  movs r3, #0
 801d892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801d894:	e002      	b.n	801d89c <LoopCopyDataInit>

0801d896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801d896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801d898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801d89a:	3304      	adds	r3, #4

0801d89c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801d89c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801d89e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801d8a0:	d3f9      	bcc.n	801d896 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801d8a2:	4a0a      	ldr	r2, [pc, #40]	; (801d8cc <LoopForever+0x12>)
  ldr r4, =_ebss
 801d8a4:	4c0a      	ldr	r4, [pc, #40]	; (801d8d0 <LoopForever+0x16>)
  movs r3, #0
 801d8a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 801d8a8:	e001      	b.n	801d8ae <LoopFillZerobss>

0801d8aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801d8aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801d8ac:	3204      	adds	r2, #4

0801d8ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801d8ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801d8b0:	d3fb      	bcc.n	801d8aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 801d8b2:	f000 fa91 	bl	801ddd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801d8b6:	f7e6 f807 	bl	80038c8 <main>

0801d8ba <LoopForever>:

LoopForever:
    b LoopForever
 801d8ba:	e7fe      	b.n	801d8ba <LoopForever>
  ldr   r0, =_estack
 801d8bc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 801d8c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801d8c4:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 801d8c8:	0802314c 	.word	0x0802314c
  ldr r2, =_sbss
 801d8cc:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 801d8d0:	20019224 	.word	0x20019224

0801d8d4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 801d8d4:	e7fe      	b.n	801d8d4 <ADC1_IRQHandler>
	...

0801d8d8 <_sbrk>:




caddr_t _sbrk(int incr)
{
 801d8d8:	b580      	push	{r7, lr}
 801d8da:	b084      	sub	sp, #16
 801d8dc:	af00      	add	r7, sp, #0
 801d8de:	6078      	str	r0, [r7, #4]
	char *prev_heap_end;
#ifdef FreeRTOS
	char *min_stack_ptr;
#endif

	if (heap_end == 0)
 801d8e0:	4b15      	ldr	r3, [pc, #84]	; (801d938 <_sbrk+0x60>)
 801d8e2:	681b      	ldr	r3, [r3, #0]
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d102      	bne.n	801d8ee <_sbrk+0x16>
		heap_end = &end;
 801d8e8:	4b13      	ldr	r3, [pc, #76]	; (801d938 <_sbrk+0x60>)
 801d8ea:	4a14      	ldr	r2, [pc, #80]	; (801d93c <_sbrk+0x64>)
 801d8ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801d8ee:	4b12      	ldr	r3, [pc, #72]	; (801d938 <_sbrk+0x60>)
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	60fb      	str	r3, [r7, #12]

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 801d8f4:	4b12      	ldr	r3, [pc, #72]	; (801d940 <_sbrk+0x68>)
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	681b      	ldr	r3, [r3, #0]
 801d8fa:	60bb      	str	r3, [r7, #8]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 801d8fc:	68bb      	ldr	r3, [r7, #8]
 801d8fe:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 801d902:	60bb      	str	r3, [r7, #8]

	if (heap_end + incr > min_stack_ptr)
 801d904:	4b0c      	ldr	r3, [pc, #48]	; (801d938 <_sbrk+0x60>)
 801d906:	681a      	ldr	r2, [r3, #0]
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	4413      	add	r3, r2
 801d90c:	68ba      	ldr	r2, [r7, #8]
 801d90e:	429a      	cmp	r2, r3
 801d910:	d207      	bcs.n	801d922 <_sbrk+0x4a>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801d912:	f000 f8a3 	bl	801da5c <__errno>
 801d916:	4603      	mov	r3, r0
 801d918:	220c      	movs	r2, #12
 801d91a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 801d91c:	f04f 33ff 	mov.w	r3, #4294967295
 801d920:	e006      	b.n	801d930 <_sbrk+0x58>
	}

	heap_end += incr;
 801d922:	4b05      	ldr	r3, [pc, #20]	; (801d938 <_sbrk+0x60>)
 801d924:	681a      	ldr	r2, [r3, #0]
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	4413      	add	r3, r2
 801d92a:	4a03      	ldr	r2, [pc, #12]	; (801d938 <_sbrk+0x60>)
 801d92c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801d92e:	68fb      	ldr	r3, [r7, #12]
}
 801d930:	4618      	mov	r0, r3
 801d932:	3710      	adds	r7, #16
 801d934:	46bd      	mov	sp, r7
 801d936:	bd80      	pop	{r7, pc}
 801d938:	2000fe6c 	.word	0x2000fe6c
 801d93c:	20019228 	.word	0x20019228
 801d940:	e000ed08 	.word	0xe000ed08

0801d944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801d944:	b480      	push	{r7}
 801d946:	af00      	add	r7, sp, #0
	return 1;
 801d948:	2301      	movs	r3, #1
}
 801d94a:	4618      	mov	r0, r3
 801d94c:	46bd      	mov	sp, r7
 801d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d952:	4770      	bx	lr

0801d954 <_kill>:

int _kill(int pid, int sig)
{
 801d954:	b580      	push	{r7, lr}
 801d956:	b082      	sub	sp, #8
 801d958:	af00      	add	r7, sp, #0
 801d95a:	6078      	str	r0, [r7, #4]
 801d95c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801d95e:	f000 f87d 	bl	801da5c <__errno>
 801d962:	4603      	mov	r3, r0
 801d964:	2216      	movs	r2, #22
 801d966:	601a      	str	r2, [r3, #0]
	return -1;
 801d968:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d96c:	4618      	mov	r0, r3
 801d96e:	3708      	adds	r7, #8
 801d970:	46bd      	mov	sp, r7
 801d972:	bd80      	pop	{r7, pc}

0801d974 <_exit>:

void _exit (int status)
{
 801d974:	b580      	push	{r7, lr}
 801d976:	b082      	sub	sp, #8
 801d978:	af00      	add	r7, sp, #0
 801d97a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801d97c:	f04f 31ff 	mov.w	r1, #4294967295
 801d980:	6878      	ldr	r0, [r7, #4]
 801d982:	f7ff ffe7 	bl	801d954 <_kill>
	while (1) {}
 801d986:	e7fe      	b.n	801d986 <_exit+0x12>

0801d988 <_write>:
}

int _write(int file, char *ptr, int len)
{
 801d988:	b580      	push	{r7, lr}
 801d98a:	b086      	sub	sp, #24
 801d98c:	af00      	add	r7, sp, #0
 801d98e:	60f8      	str	r0, [r7, #12]
 801d990:	60b9      	str	r1, [r7, #8]
 801d992:	607a      	str	r2, [r7, #4]
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801d994:	2300      	movs	r3, #0
 801d996:	617b      	str	r3, [r7, #20]
 801d998:	e009      	b.n	801d9ae <_write+0x26>
		{
		   __io_putchar( *ptr++ );
 801d99a:	68bb      	ldr	r3, [r7, #8]
 801d99c:	1c5a      	adds	r2, r3, #1
 801d99e:	60ba      	str	r2, [r7, #8]
 801d9a0:	781b      	ldrb	r3, [r3, #0]
 801d9a2:	4618      	mov	r0, r3
 801d9a4:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801d9a8:	697b      	ldr	r3, [r7, #20]
 801d9aa:	3301      	adds	r3, #1
 801d9ac:	617b      	str	r3, [r7, #20]
 801d9ae:	697a      	ldr	r2, [r7, #20]
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	429a      	cmp	r2, r3
 801d9b4:	dbf1      	blt.n	801d99a <_write+0x12>
		}
	return len;
 801d9b6:	687b      	ldr	r3, [r7, #4]
}
 801d9b8:	4618      	mov	r0, r3
 801d9ba:	3718      	adds	r7, #24
 801d9bc:	46bd      	mov	sp, r7
 801d9be:	bd80      	pop	{r7, pc}

0801d9c0 <_close>:

int _close(int file)
{
 801d9c0:	b480      	push	{r7}
 801d9c2:	b083      	sub	sp, #12
 801d9c4:	af00      	add	r7, sp, #0
 801d9c6:	6078      	str	r0, [r7, #4]
	return -1;
 801d9c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d9cc:	4618      	mov	r0, r3
 801d9ce:	370c      	adds	r7, #12
 801d9d0:	46bd      	mov	sp, r7
 801d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9d6:	4770      	bx	lr

0801d9d8 <_fstat>:

int _fstat(int file, struct stat *st)
{
 801d9d8:	b480      	push	{r7}
 801d9da:	b083      	sub	sp, #12
 801d9dc:	af00      	add	r7, sp, #0
 801d9de:	6078      	str	r0, [r7, #4]
 801d9e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801d9e2:	683b      	ldr	r3, [r7, #0]
 801d9e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801d9e8:	605a      	str	r2, [r3, #4]
	return 0;
 801d9ea:	2300      	movs	r3, #0
}
 801d9ec:	4618      	mov	r0, r3
 801d9ee:	370c      	adds	r7, #12
 801d9f0:	46bd      	mov	sp, r7
 801d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9f6:	4770      	bx	lr

0801d9f8 <_isatty>:

int _isatty(int file)
{
 801d9f8:	b480      	push	{r7}
 801d9fa:	b083      	sub	sp, #12
 801d9fc:	af00      	add	r7, sp, #0
 801d9fe:	6078      	str	r0, [r7, #4]
	return 1;
 801da00:	2301      	movs	r3, #1
}
 801da02:	4618      	mov	r0, r3
 801da04:	370c      	adds	r7, #12
 801da06:	46bd      	mov	sp, r7
 801da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da0c:	4770      	bx	lr

0801da0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801da0e:	b480      	push	{r7}
 801da10:	b085      	sub	sp, #20
 801da12:	af00      	add	r7, sp, #0
 801da14:	60f8      	str	r0, [r7, #12]
 801da16:	60b9      	str	r1, [r7, #8]
 801da18:	607a      	str	r2, [r7, #4]
	return 0;
 801da1a:	2300      	movs	r3, #0
}
 801da1c:	4618      	mov	r0, r3
 801da1e:	3714      	adds	r7, #20
 801da20:	46bd      	mov	sp, r7
 801da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da26:	4770      	bx	lr

0801da28 <_read>:

int _read(int file, char *ptr, int len)
{
 801da28:	b580      	push	{r7, lr}
 801da2a:	b084      	sub	sp, #16
 801da2c:	af00      	add	r7, sp, #0
 801da2e:	60f8      	str	r0, [r7, #12]
 801da30:	60b9      	str	r1, [r7, #8]
 801da32:	607a      	str	r2, [r7, #4]
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 801da34:	f3af 8000 	nop.w
 801da38:	4603      	mov	r3, r0
 801da3a:	b2da      	uxtb	r2, r3
 801da3c:	68bb      	ldr	r3, [r7, #8]
 801da3e:	701a      	strb	r2, [r3, #0]
	return 1;
 801da40:	2301      	movs	r3, #1
}
 801da42:	4618      	mov	r0, r3
 801da44:	3710      	adds	r7, #16
 801da46:	46bd      	mov	sp, r7
 801da48:	bd80      	pop	{r7, pc}
	...

0801da4c <calloc>:
 801da4c:	4b02      	ldr	r3, [pc, #8]	; (801da58 <calloc+0xc>)
 801da4e:	460a      	mov	r2, r1
 801da50:	4601      	mov	r1, r0
 801da52:	6818      	ldr	r0, [r3, #0]
 801da54:	f000 baa6 	b.w	801dfa4 <_calloc_r>
 801da58:	2000008c 	.word	0x2000008c

0801da5c <__errno>:
 801da5c:	4b01      	ldr	r3, [pc, #4]	; (801da64 <__errno+0x8>)
 801da5e:	6818      	ldr	r0, [r3, #0]
 801da60:	4770      	bx	lr
 801da62:	bf00      	nop
 801da64:	2000008c 	.word	0x2000008c

0801da68 <__sflush_r>:
 801da68:	898a      	ldrh	r2, [r1, #12]
 801da6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da6e:	4605      	mov	r5, r0
 801da70:	0710      	lsls	r0, r2, #28
 801da72:	460c      	mov	r4, r1
 801da74:	d458      	bmi.n	801db28 <__sflush_r+0xc0>
 801da76:	684b      	ldr	r3, [r1, #4]
 801da78:	2b00      	cmp	r3, #0
 801da7a:	dc05      	bgt.n	801da88 <__sflush_r+0x20>
 801da7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801da7e:	2b00      	cmp	r3, #0
 801da80:	dc02      	bgt.n	801da88 <__sflush_r+0x20>
 801da82:	2000      	movs	r0, #0
 801da84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801da8a:	2e00      	cmp	r6, #0
 801da8c:	d0f9      	beq.n	801da82 <__sflush_r+0x1a>
 801da8e:	2300      	movs	r3, #0
 801da90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801da94:	682f      	ldr	r7, [r5, #0]
 801da96:	602b      	str	r3, [r5, #0]
 801da98:	d032      	beq.n	801db00 <__sflush_r+0x98>
 801da9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801da9c:	89a3      	ldrh	r3, [r4, #12]
 801da9e:	075a      	lsls	r2, r3, #29
 801daa0:	d505      	bpl.n	801daae <__sflush_r+0x46>
 801daa2:	6863      	ldr	r3, [r4, #4]
 801daa4:	1ac0      	subs	r0, r0, r3
 801daa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801daa8:	b10b      	cbz	r3, 801daae <__sflush_r+0x46>
 801daaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801daac:	1ac0      	subs	r0, r0, r3
 801daae:	2300      	movs	r3, #0
 801dab0:	4602      	mov	r2, r0
 801dab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dab4:	6a21      	ldr	r1, [r4, #32]
 801dab6:	4628      	mov	r0, r5
 801dab8:	47b0      	blx	r6
 801daba:	1c43      	adds	r3, r0, #1
 801dabc:	89a3      	ldrh	r3, [r4, #12]
 801dabe:	d106      	bne.n	801dace <__sflush_r+0x66>
 801dac0:	6829      	ldr	r1, [r5, #0]
 801dac2:	291d      	cmp	r1, #29
 801dac4:	d82c      	bhi.n	801db20 <__sflush_r+0xb8>
 801dac6:	4a2a      	ldr	r2, [pc, #168]	; (801db70 <__sflush_r+0x108>)
 801dac8:	40ca      	lsrs	r2, r1
 801daca:	07d6      	lsls	r6, r2, #31
 801dacc:	d528      	bpl.n	801db20 <__sflush_r+0xb8>
 801dace:	2200      	movs	r2, #0
 801dad0:	6062      	str	r2, [r4, #4]
 801dad2:	04d9      	lsls	r1, r3, #19
 801dad4:	6922      	ldr	r2, [r4, #16]
 801dad6:	6022      	str	r2, [r4, #0]
 801dad8:	d504      	bpl.n	801dae4 <__sflush_r+0x7c>
 801dada:	1c42      	adds	r2, r0, #1
 801dadc:	d101      	bne.n	801dae2 <__sflush_r+0x7a>
 801dade:	682b      	ldr	r3, [r5, #0]
 801dae0:	b903      	cbnz	r3, 801dae4 <__sflush_r+0x7c>
 801dae2:	6560      	str	r0, [r4, #84]	; 0x54
 801dae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dae6:	602f      	str	r7, [r5, #0]
 801dae8:	2900      	cmp	r1, #0
 801daea:	d0ca      	beq.n	801da82 <__sflush_r+0x1a>
 801daec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801daf0:	4299      	cmp	r1, r3
 801daf2:	d002      	beq.n	801dafa <__sflush_r+0x92>
 801daf4:	4628      	mov	r0, r5
 801daf6:	f000 fa65 	bl	801dfc4 <_free_r>
 801dafa:	2000      	movs	r0, #0
 801dafc:	6360      	str	r0, [r4, #52]	; 0x34
 801dafe:	e7c1      	b.n	801da84 <__sflush_r+0x1c>
 801db00:	6a21      	ldr	r1, [r4, #32]
 801db02:	2301      	movs	r3, #1
 801db04:	4628      	mov	r0, r5
 801db06:	47b0      	blx	r6
 801db08:	1c41      	adds	r1, r0, #1
 801db0a:	d1c7      	bne.n	801da9c <__sflush_r+0x34>
 801db0c:	682b      	ldr	r3, [r5, #0]
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d0c4      	beq.n	801da9c <__sflush_r+0x34>
 801db12:	2b1d      	cmp	r3, #29
 801db14:	d001      	beq.n	801db1a <__sflush_r+0xb2>
 801db16:	2b16      	cmp	r3, #22
 801db18:	d101      	bne.n	801db1e <__sflush_r+0xb6>
 801db1a:	602f      	str	r7, [r5, #0]
 801db1c:	e7b1      	b.n	801da82 <__sflush_r+0x1a>
 801db1e:	89a3      	ldrh	r3, [r4, #12]
 801db20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db24:	81a3      	strh	r3, [r4, #12]
 801db26:	e7ad      	b.n	801da84 <__sflush_r+0x1c>
 801db28:	690f      	ldr	r7, [r1, #16]
 801db2a:	2f00      	cmp	r7, #0
 801db2c:	d0a9      	beq.n	801da82 <__sflush_r+0x1a>
 801db2e:	0793      	lsls	r3, r2, #30
 801db30:	680e      	ldr	r6, [r1, #0]
 801db32:	bf08      	it	eq
 801db34:	694b      	ldreq	r3, [r1, #20]
 801db36:	600f      	str	r7, [r1, #0]
 801db38:	bf18      	it	ne
 801db3a:	2300      	movne	r3, #0
 801db3c:	eba6 0807 	sub.w	r8, r6, r7
 801db40:	608b      	str	r3, [r1, #8]
 801db42:	f1b8 0f00 	cmp.w	r8, #0
 801db46:	dd9c      	ble.n	801da82 <__sflush_r+0x1a>
 801db48:	6a21      	ldr	r1, [r4, #32]
 801db4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801db4c:	4643      	mov	r3, r8
 801db4e:	463a      	mov	r2, r7
 801db50:	4628      	mov	r0, r5
 801db52:	47b0      	blx	r6
 801db54:	2800      	cmp	r0, #0
 801db56:	dc06      	bgt.n	801db66 <__sflush_r+0xfe>
 801db58:	89a3      	ldrh	r3, [r4, #12]
 801db5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db5e:	81a3      	strh	r3, [r4, #12]
 801db60:	f04f 30ff 	mov.w	r0, #4294967295
 801db64:	e78e      	b.n	801da84 <__sflush_r+0x1c>
 801db66:	4407      	add	r7, r0
 801db68:	eba8 0800 	sub.w	r8, r8, r0
 801db6c:	e7e9      	b.n	801db42 <__sflush_r+0xda>
 801db6e:	bf00      	nop
 801db70:	20400001 	.word	0x20400001

0801db74 <_fflush_r>:
 801db74:	b538      	push	{r3, r4, r5, lr}
 801db76:	690b      	ldr	r3, [r1, #16]
 801db78:	4605      	mov	r5, r0
 801db7a:	460c      	mov	r4, r1
 801db7c:	b913      	cbnz	r3, 801db84 <_fflush_r+0x10>
 801db7e:	2500      	movs	r5, #0
 801db80:	4628      	mov	r0, r5
 801db82:	bd38      	pop	{r3, r4, r5, pc}
 801db84:	b118      	cbz	r0, 801db8e <_fflush_r+0x1a>
 801db86:	6983      	ldr	r3, [r0, #24]
 801db88:	b90b      	cbnz	r3, 801db8e <_fflush_r+0x1a>
 801db8a:	f000 f887 	bl	801dc9c <__sinit>
 801db8e:	4b14      	ldr	r3, [pc, #80]	; (801dbe0 <_fflush_r+0x6c>)
 801db90:	429c      	cmp	r4, r3
 801db92:	d11b      	bne.n	801dbcc <_fflush_r+0x58>
 801db94:	686c      	ldr	r4, [r5, #4]
 801db96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	d0ef      	beq.n	801db7e <_fflush_r+0xa>
 801db9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dba0:	07d0      	lsls	r0, r2, #31
 801dba2:	d404      	bmi.n	801dbae <_fflush_r+0x3a>
 801dba4:	0599      	lsls	r1, r3, #22
 801dba6:	d402      	bmi.n	801dbae <_fflush_r+0x3a>
 801dba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dbaa:	f000 f954 	bl	801de56 <__retarget_lock_acquire_recursive>
 801dbae:	4628      	mov	r0, r5
 801dbb0:	4621      	mov	r1, r4
 801dbb2:	f7ff ff59 	bl	801da68 <__sflush_r>
 801dbb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dbb8:	07da      	lsls	r2, r3, #31
 801dbba:	4605      	mov	r5, r0
 801dbbc:	d4e0      	bmi.n	801db80 <_fflush_r+0xc>
 801dbbe:	89a3      	ldrh	r3, [r4, #12]
 801dbc0:	059b      	lsls	r3, r3, #22
 801dbc2:	d4dd      	bmi.n	801db80 <_fflush_r+0xc>
 801dbc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dbc6:	f000 f947 	bl	801de58 <__retarget_lock_release_recursive>
 801dbca:	e7d9      	b.n	801db80 <_fflush_r+0xc>
 801dbcc:	4b05      	ldr	r3, [pc, #20]	; (801dbe4 <_fflush_r+0x70>)
 801dbce:	429c      	cmp	r4, r3
 801dbd0:	d101      	bne.n	801dbd6 <_fflush_r+0x62>
 801dbd2:	68ac      	ldr	r4, [r5, #8]
 801dbd4:	e7df      	b.n	801db96 <_fflush_r+0x22>
 801dbd6:	4b04      	ldr	r3, [pc, #16]	; (801dbe8 <_fflush_r+0x74>)
 801dbd8:	429c      	cmp	r4, r3
 801dbda:	bf08      	it	eq
 801dbdc:	68ec      	ldreq	r4, [r5, #12]
 801dbde:	e7da      	b.n	801db96 <_fflush_r+0x22>
 801dbe0:	08022d90 	.word	0x08022d90
 801dbe4:	08022db0 	.word	0x08022db0
 801dbe8:	08022d70 	.word	0x08022d70

0801dbec <std>:
 801dbec:	2300      	movs	r3, #0
 801dbee:	b510      	push	{r4, lr}
 801dbf0:	4604      	mov	r4, r0
 801dbf2:	e9c0 3300 	strd	r3, r3, [r0]
 801dbf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dbfa:	6083      	str	r3, [r0, #8]
 801dbfc:	8181      	strh	r1, [r0, #12]
 801dbfe:	6643      	str	r3, [r0, #100]	; 0x64
 801dc00:	81c2      	strh	r2, [r0, #14]
 801dc02:	6183      	str	r3, [r0, #24]
 801dc04:	4619      	mov	r1, r3
 801dc06:	2208      	movs	r2, #8
 801dc08:	305c      	adds	r0, #92	; 0x5c
 801dc0a:	f000 f9c3 	bl	801df94 <memset>
 801dc0e:	4b05      	ldr	r3, [pc, #20]	; (801dc24 <std+0x38>)
 801dc10:	6263      	str	r3, [r4, #36]	; 0x24
 801dc12:	4b05      	ldr	r3, [pc, #20]	; (801dc28 <std+0x3c>)
 801dc14:	62a3      	str	r3, [r4, #40]	; 0x28
 801dc16:	4b05      	ldr	r3, [pc, #20]	; (801dc2c <std+0x40>)
 801dc18:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dc1a:	4b05      	ldr	r3, [pc, #20]	; (801dc30 <std+0x44>)
 801dc1c:	6224      	str	r4, [r4, #32]
 801dc1e:	6323      	str	r3, [r4, #48]	; 0x30
 801dc20:	bd10      	pop	{r4, pc}
 801dc22:	bf00      	nop
 801dc24:	0801ea4d 	.word	0x0801ea4d
 801dc28:	0801ea6f 	.word	0x0801ea6f
 801dc2c:	0801eaa7 	.word	0x0801eaa7
 801dc30:	0801eacb 	.word	0x0801eacb

0801dc34 <_cleanup_r>:
 801dc34:	4901      	ldr	r1, [pc, #4]	; (801dc3c <_cleanup_r+0x8>)
 801dc36:	f000 b8af 	b.w	801dd98 <_fwalk_reent>
 801dc3a:	bf00      	nop
 801dc3c:	0801db75 	.word	0x0801db75

0801dc40 <__sfmoreglue>:
 801dc40:	b570      	push	{r4, r5, r6, lr}
 801dc42:	1e4a      	subs	r2, r1, #1
 801dc44:	2568      	movs	r5, #104	; 0x68
 801dc46:	4355      	muls	r5, r2
 801dc48:	460e      	mov	r6, r1
 801dc4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dc4e:	f000 fa09 	bl	801e064 <_malloc_r>
 801dc52:	4604      	mov	r4, r0
 801dc54:	b140      	cbz	r0, 801dc68 <__sfmoreglue+0x28>
 801dc56:	2100      	movs	r1, #0
 801dc58:	e9c0 1600 	strd	r1, r6, [r0]
 801dc5c:	300c      	adds	r0, #12
 801dc5e:	60a0      	str	r0, [r4, #8]
 801dc60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dc64:	f000 f996 	bl	801df94 <memset>
 801dc68:	4620      	mov	r0, r4
 801dc6a:	bd70      	pop	{r4, r5, r6, pc}

0801dc6c <__sfp_lock_acquire>:
 801dc6c:	4801      	ldr	r0, [pc, #4]	; (801dc74 <__sfp_lock_acquire+0x8>)
 801dc6e:	f000 b8f2 	b.w	801de56 <__retarget_lock_acquire_recursive>
 801dc72:	bf00      	nop
 801dc74:	20019218 	.word	0x20019218

0801dc78 <__sfp_lock_release>:
 801dc78:	4801      	ldr	r0, [pc, #4]	; (801dc80 <__sfp_lock_release+0x8>)
 801dc7a:	f000 b8ed 	b.w	801de58 <__retarget_lock_release_recursive>
 801dc7e:	bf00      	nop
 801dc80:	20019218 	.word	0x20019218

0801dc84 <__sinit_lock_acquire>:
 801dc84:	4801      	ldr	r0, [pc, #4]	; (801dc8c <__sinit_lock_acquire+0x8>)
 801dc86:	f000 b8e6 	b.w	801de56 <__retarget_lock_acquire_recursive>
 801dc8a:	bf00      	nop
 801dc8c:	20019217 	.word	0x20019217

0801dc90 <__sinit_lock_release>:
 801dc90:	4801      	ldr	r0, [pc, #4]	; (801dc98 <__sinit_lock_release+0x8>)
 801dc92:	f000 b8e1 	b.w	801de58 <__retarget_lock_release_recursive>
 801dc96:	bf00      	nop
 801dc98:	20019217 	.word	0x20019217

0801dc9c <__sinit>:
 801dc9c:	b510      	push	{r4, lr}
 801dc9e:	4604      	mov	r4, r0
 801dca0:	f7ff fff0 	bl	801dc84 <__sinit_lock_acquire>
 801dca4:	69a3      	ldr	r3, [r4, #24]
 801dca6:	b11b      	cbz	r3, 801dcb0 <__sinit+0x14>
 801dca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcac:	f7ff bff0 	b.w	801dc90 <__sinit_lock_release>
 801dcb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801dcb4:	6523      	str	r3, [r4, #80]	; 0x50
 801dcb6:	4b13      	ldr	r3, [pc, #76]	; (801dd04 <__sinit+0x68>)
 801dcb8:	4a13      	ldr	r2, [pc, #76]	; (801dd08 <__sinit+0x6c>)
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	62a2      	str	r2, [r4, #40]	; 0x28
 801dcbe:	42a3      	cmp	r3, r4
 801dcc0:	bf04      	itt	eq
 801dcc2:	2301      	moveq	r3, #1
 801dcc4:	61a3      	streq	r3, [r4, #24]
 801dcc6:	4620      	mov	r0, r4
 801dcc8:	f000 f820 	bl	801dd0c <__sfp>
 801dccc:	6060      	str	r0, [r4, #4]
 801dcce:	4620      	mov	r0, r4
 801dcd0:	f000 f81c 	bl	801dd0c <__sfp>
 801dcd4:	60a0      	str	r0, [r4, #8]
 801dcd6:	4620      	mov	r0, r4
 801dcd8:	f000 f818 	bl	801dd0c <__sfp>
 801dcdc:	2200      	movs	r2, #0
 801dcde:	60e0      	str	r0, [r4, #12]
 801dce0:	2104      	movs	r1, #4
 801dce2:	6860      	ldr	r0, [r4, #4]
 801dce4:	f7ff ff82 	bl	801dbec <std>
 801dce8:	68a0      	ldr	r0, [r4, #8]
 801dcea:	2201      	movs	r2, #1
 801dcec:	2109      	movs	r1, #9
 801dcee:	f7ff ff7d 	bl	801dbec <std>
 801dcf2:	68e0      	ldr	r0, [r4, #12]
 801dcf4:	2202      	movs	r2, #2
 801dcf6:	2112      	movs	r1, #18
 801dcf8:	f7ff ff78 	bl	801dbec <std>
 801dcfc:	2301      	movs	r3, #1
 801dcfe:	61a3      	str	r3, [r4, #24]
 801dd00:	e7d2      	b.n	801dca8 <__sinit+0xc>
 801dd02:	bf00      	nop
 801dd04:	08022dd0 	.word	0x08022dd0
 801dd08:	0801dc35 	.word	0x0801dc35

0801dd0c <__sfp>:
 801dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd0e:	4607      	mov	r7, r0
 801dd10:	f7ff ffac 	bl	801dc6c <__sfp_lock_acquire>
 801dd14:	4b1e      	ldr	r3, [pc, #120]	; (801dd90 <__sfp+0x84>)
 801dd16:	681e      	ldr	r6, [r3, #0]
 801dd18:	69b3      	ldr	r3, [r6, #24]
 801dd1a:	b913      	cbnz	r3, 801dd22 <__sfp+0x16>
 801dd1c:	4630      	mov	r0, r6
 801dd1e:	f7ff ffbd 	bl	801dc9c <__sinit>
 801dd22:	3648      	adds	r6, #72	; 0x48
 801dd24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dd28:	3b01      	subs	r3, #1
 801dd2a:	d503      	bpl.n	801dd34 <__sfp+0x28>
 801dd2c:	6833      	ldr	r3, [r6, #0]
 801dd2e:	b30b      	cbz	r3, 801dd74 <__sfp+0x68>
 801dd30:	6836      	ldr	r6, [r6, #0]
 801dd32:	e7f7      	b.n	801dd24 <__sfp+0x18>
 801dd34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dd38:	b9d5      	cbnz	r5, 801dd70 <__sfp+0x64>
 801dd3a:	4b16      	ldr	r3, [pc, #88]	; (801dd94 <__sfp+0x88>)
 801dd3c:	60e3      	str	r3, [r4, #12]
 801dd3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dd42:	6665      	str	r5, [r4, #100]	; 0x64
 801dd44:	f000 f886 	bl	801de54 <__retarget_lock_init_recursive>
 801dd48:	f7ff ff96 	bl	801dc78 <__sfp_lock_release>
 801dd4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dd50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dd54:	6025      	str	r5, [r4, #0]
 801dd56:	61a5      	str	r5, [r4, #24]
 801dd58:	2208      	movs	r2, #8
 801dd5a:	4629      	mov	r1, r5
 801dd5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dd60:	f000 f918 	bl	801df94 <memset>
 801dd64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dd68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dd6c:	4620      	mov	r0, r4
 801dd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd70:	3468      	adds	r4, #104	; 0x68
 801dd72:	e7d9      	b.n	801dd28 <__sfp+0x1c>
 801dd74:	2104      	movs	r1, #4
 801dd76:	4638      	mov	r0, r7
 801dd78:	f7ff ff62 	bl	801dc40 <__sfmoreglue>
 801dd7c:	4604      	mov	r4, r0
 801dd7e:	6030      	str	r0, [r6, #0]
 801dd80:	2800      	cmp	r0, #0
 801dd82:	d1d5      	bne.n	801dd30 <__sfp+0x24>
 801dd84:	f7ff ff78 	bl	801dc78 <__sfp_lock_release>
 801dd88:	230c      	movs	r3, #12
 801dd8a:	603b      	str	r3, [r7, #0]
 801dd8c:	e7ee      	b.n	801dd6c <__sfp+0x60>
 801dd8e:	bf00      	nop
 801dd90:	08022dd0 	.word	0x08022dd0
 801dd94:	ffff0001 	.word	0xffff0001

0801dd98 <_fwalk_reent>:
 801dd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd9c:	4606      	mov	r6, r0
 801dd9e:	4688      	mov	r8, r1
 801dda0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dda4:	2700      	movs	r7, #0
 801dda6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ddaa:	f1b9 0901 	subs.w	r9, r9, #1
 801ddae:	d505      	bpl.n	801ddbc <_fwalk_reent+0x24>
 801ddb0:	6824      	ldr	r4, [r4, #0]
 801ddb2:	2c00      	cmp	r4, #0
 801ddb4:	d1f7      	bne.n	801dda6 <_fwalk_reent+0xe>
 801ddb6:	4638      	mov	r0, r7
 801ddb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ddbc:	89ab      	ldrh	r3, [r5, #12]
 801ddbe:	2b01      	cmp	r3, #1
 801ddc0:	d907      	bls.n	801ddd2 <_fwalk_reent+0x3a>
 801ddc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ddc6:	3301      	adds	r3, #1
 801ddc8:	d003      	beq.n	801ddd2 <_fwalk_reent+0x3a>
 801ddca:	4629      	mov	r1, r5
 801ddcc:	4630      	mov	r0, r6
 801ddce:	47c0      	blx	r8
 801ddd0:	4307      	orrs	r7, r0
 801ddd2:	3568      	adds	r5, #104	; 0x68
 801ddd4:	e7e9      	b.n	801ddaa <_fwalk_reent+0x12>
	...

0801ddd8 <__libc_init_array>:
 801ddd8:	b570      	push	{r4, r5, r6, lr}
 801ddda:	4d0d      	ldr	r5, [pc, #52]	; (801de10 <__libc_init_array+0x38>)
 801dddc:	4c0d      	ldr	r4, [pc, #52]	; (801de14 <__libc_init_array+0x3c>)
 801ddde:	1b64      	subs	r4, r4, r5
 801dde0:	10a4      	asrs	r4, r4, #2
 801dde2:	2600      	movs	r6, #0
 801dde4:	42a6      	cmp	r6, r4
 801dde6:	d109      	bne.n	801ddfc <__libc_init_array+0x24>
 801dde8:	4d0b      	ldr	r5, [pc, #44]	; (801de18 <__libc_init_array+0x40>)
 801ddea:	4c0c      	ldr	r4, [pc, #48]	; (801de1c <__libc_init_array+0x44>)
 801ddec:	f004 f91a 	bl	8022024 <_init>
 801ddf0:	1b64      	subs	r4, r4, r5
 801ddf2:	10a4      	asrs	r4, r4, #2
 801ddf4:	2600      	movs	r6, #0
 801ddf6:	42a6      	cmp	r6, r4
 801ddf8:	d105      	bne.n	801de06 <__libc_init_array+0x2e>
 801ddfa:	bd70      	pop	{r4, r5, r6, pc}
 801ddfc:	f855 3b04 	ldr.w	r3, [r5], #4
 801de00:	4798      	blx	r3
 801de02:	3601      	adds	r6, #1
 801de04:	e7ee      	b.n	801dde4 <__libc_init_array+0xc>
 801de06:	f855 3b04 	ldr.w	r3, [r5], #4
 801de0a:	4798      	blx	r3
 801de0c:	3601      	adds	r6, #1
 801de0e:	e7f2      	b.n	801ddf6 <__libc_init_array+0x1e>
 801de10:	08023144 	.word	0x08023144
 801de14:	08023144 	.word	0x08023144
 801de18:	08023144 	.word	0x08023144
 801de1c:	08023148 	.word	0x08023148

0801de20 <__itoa>:
 801de20:	1e93      	subs	r3, r2, #2
 801de22:	2b22      	cmp	r3, #34	; 0x22
 801de24:	b510      	push	{r4, lr}
 801de26:	460c      	mov	r4, r1
 801de28:	d904      	bls.n	801de34 <__itoa+0x14>
 801de2a:	2300      	movs	r3, #0
 801de2c:	700b      	strb	r3, [r1, #0]
 801de2e:	461c      	mov	r4, r3
 801de30:	4620      	mov	r0, r4
 801de32:	bd10      	pop	{r4, pc}
 801de34:	2a0a      	cmp	r2, #10
 801de36:	d109      	bne.n	801de4c <__itoa+0x2c>
 801de38:	2800      	cmp	r0, #0
 801de3a:	da07      	bge.n	801de4c <__itoa+0x2c>
 801de3c:	232d      	movs	r3, #45	; 0x2d
 801de3e:	700b      	strb	r3, [r1, #0]
 801de40:	4240      	negs	r0, r0
 801de42:	2101      	movs	r1, #1
 801de44:	4421      	add	r1, r4
 801de46:	f001 fd47 	bl	801f8d8 <__utoa>
 801de4a:	e7f1      	b.n	801de30 <__itoa+0x10>
 801de4c:	2100      	movs	r1, #0
 801de4e:	e7f9      	b.n	801de44 <__itoa+0x24>

0801de50 <itoa>:
 801de50:	f7ff bfe6 	b.w	801de20 <__itoa>

0801de54 <__retarget_lock_init_recursive>:
 801de54:	4770      	bx	lr

0801de56 <__retarget_lock_acquire_recursive>:
 801de56:	4770      	bx	lr

0801de58 <__retarget_lock_release_recursive>:
 801de58:	4770      	bx	lr

0801de5a <__swhatbuf_r>:
 801de5a:	b570      	push	{r4, r5, r6, lr}
 801de5c:	460e      	mov	r6, r1
 801de5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de62:	2900      	cmp	r1, #0
 801de64:	b096      	sub	sp, #88	; 0x58
 801de66:	4614      	mov	r4, r2
 801de68:	461d      	mov	r5, r3
 801de6a:	da07      	bge.n	801de7c <__swhatbuf_r+0x22>
 801de6c:	2300      	movs	r3, #0
 801de6e:	602b      	str	r3, [r5, #0]
 801de70:	89b3      	ldrh	r3, [r6, #12]
 801de72:	061a      	lsls	r2, r3, #24
 801de74:	d410      	bmi.n	801de98 <__swhatbuf_r+0x3e>
 801de76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801de7a:	e00e      	b.n	801de9a <__swhatbuf_r+0x40>
 801de7c:	466a      	mov	r2, sp
 801de7e:	f002 fcc7 	bl	8020810 <_fstat_r>
 801de82:	2800      	cmp	r0, #0
 801de84:	dbf2      	blt.n	801de6c <__swhatbuf_r+0x12>
 801de86:	9a01      	ldr	r2, [sp, #4]
 801de88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801de8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801de90:	425a      	negs	r2, r3
 801de92:	415a      	adcs	r2, r3
 801de94:	602a      	str	r2, [r5, #0]
 801de96:	e7ee      	b.n	801de76 <__swhatbuf_r+0x1c>
 801de98:	2340      	movs	r3, #64	; 0x40
 801de9a:	2000      	movs	r0, #0
 801de9c:	6023      	str	r3, [r4, #0]
 801de9e:	b016      	add	sp, #88	; 0x58
 801dea0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dea4 <__smakebuf_r>:
 801dea4:	898b      	ldrh	r3, [r1, #12]
 801dea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dea8:	079d      	lsls	r5, r3, #30
 801deaa:	4606      	mov	r6, r0
 801deac:	460c      	mov	r4, r1
 801deae:	d507      	bpl.n	801dec0 <__smakebuf_r+0x1c>
 801deb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801deb4:	6023      	str	r3, [r4, #0]
 801deb6:	6123      	str	r3, [r4, #16]
 801deb8:	2301      	movs	r3, #1
 801deba:	6163      	str	r3, [r4, #20]
 801debc:	b002      	add	sp, #8
 801debe:	bd70      	pop	{r4, r5, r6, pc}
 801dec0:	ab01      	add	r3, sp, #4
 801dec2:	466a      	mov	r2, sp
 801dec4:	f7ff ffc9 	bl	801de5a <__swhatbuf_r>
 801dec8:	9900      	ldr	r1, [sp, #0]
 801deca:	4605      	mov	r5, r0
 801decc:	4630      	mov	r0, r6
 801dece:	f000 f8c9 	bl	801e064 <_malloc_r>
 801ded2:	b948      	cbnz	r0, 801dee8 <__smakebuf_r+0x44>
 801ded4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ded8:	059a      	lsls	r2, r3, #22
 801deda:	d4ef      	bmi.n	801debc <__smakebuf_r+0x18>
 801dedc:	f023 0303 	bic.w	r3, r3, #3
 801dee0:	f043 0302 	orr.w	r3, r3, #2
 801dee4:	81a3      	strh	r3, [r4, #12]
 801dee6:	e7e3      	b.n	801deb0 <__smakebuf_r+0xc>
 801dee8:	4b0d      	ldr	r3, [pc, #52]	; (801df20 <__smakebuf_r+0x7c>)
 801deea:	62b3      	str	r3, [r6, #40]	; 0x28
 801deec:	89a3      	ldrh	r3, [r4, #12]
 801deee:	6020      	str	r0, [r4, #0]
 801def0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801def4:	81a3      	strh	r3, [r4, #12]
 801def6:	9b00      	ldr	r3, [sp, #0]
 801def8:	6163      	str	r3, [r4, #20]
 801defa:	9b01      	ldr	r3, [sp, #4]
 801defc:	6120      	str	r0, [r4, #16]
 801defe:	b15b      	cbz	r3, 801df18 <__smakebuf_r+0x74>
 801df00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df04:	4630      	mov	r0, r6
 801df06:	f003 f805 	bl	8020f14 <_isatty_r>
 801df0a:	b128      	cbz	r0, 801df18 <__smakebuf_r+0x74>
 801df0c:	89a3      	ldrh	r3, [r4, #12]
 801df0e:	f023 0303 	bic.w	r3, r3, #3
 801df12:	f043 0301 	orr.w	r3, r3, #1
 801df16:	81a3      	strh	r3, [r4, #12]
 801df18:	89a0      	ldrh	r0, [r4, #12]
 801df1a:	4305      	orrs	r5, r0
 801df1c:	81a5      	strh	r5, [r4, #12]
 801df1e:	e7cd      	b.n	801debc <__smakebuf_r+0x18>
 801df20:	0801dc35 	.word	0x0801dc35

0801df24 <malloc>:
 801df24:	4b02      	ldr	r3, [pc, #8]	; (801df30 <malloc+0xc>)
 801df26:	4601      	mov	r1, r0
 801df28:	6818      	ldr	r0, [r3, #0]
 801df2a:	f000 b89b 	b.w	801e064 <_malloc_r>
 801df2e:	bf00      	nop
 801df30:	2000008c 	.word	0x2000008c

0801df34 <free>:
 801df34:	4b02      	ldr	r3, [pc, #8]	; (801df40 <free+0xc>)
 801df36:	4601      	mov	r1, r0
 801df38:	6818      	ldr	r0, [r3, #0]
 801df3a:	f000 b843 	b.w	801dfc4 <_free_r>
 801df3e:	bf00      	nop
 801df40:	2000008c 	.word	0x2000008c

0801df44 <memcpy>:
 801df44:	440a      	add	r2, r1
 801df46:	4291      	cmp	r1, r2
 801df48:	f100 33ff 	add.w	r3, r0, #4294967295
 801df4c:	d100      	bne.n	801df50 <memcpy+0xc>
 801df4e:	4770      	bx	lr
 801df50:	b510      	push	{r4, lr}
 801df52:	f811 4b01 	ldrb.w	r4, [r1], #1
 801df56:	f803 4f01 	strb.w	r4, [r3, #1]!
 801df5a:	4291      	cmp	r1, r2
 801df5c:	d1f9      	bne.n	801df52 <memcpy+0xe>
 801df5e:	bd10      	pop	{r4, pc}

0801df60 <memmove>:
 801df60:	4288      	cmp	r0, r1
 801df62:	b510      	push	{r4, lr}
 801df64:	eb01 0402 	add.w	r4, r1, r2
 801df68:	d902      	bls.n	801df70 <memmove+0x10>
 801df6a:	4284      	cmp	r4, r0
 801df6c:	4623      	mov	r3, r4
 801df6e:	d807      	bhi.n	801df80 <memmove+0x20>
 801df70:	1e43      	subs	r3, r0, #1
 801df72:	42a1      	cmp	r1, r4
 801df74:	d008      	beq.n	801df88 <memmove+0x28>
 801df76:	f811 2b01 	ldrb.w	r2, [r1], #1
 801df7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801df7e:	e7f8      	b.n	801df72 <memmove+0x12>
 801df80:	4402      	add	r2, r0
 801df82:	4601      	mov	r1, r0
 801df84:	428a      	cmp	r2, r1
 801df86:	d100      	bne.n	801df8a <memmove+0x2a>
 801df88:	bd10      	pop	{r4, pc}
 801df8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801df8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801df92:	e7f7      	b.n	801df84 <memmove+0x24>

0801df94 <memset>:
 801df94:	4402      	add	r2, r0
 801df96:	4603      	mov	r3, r0
 801df98:	4293      	cmp	r3, r2
 801df9a:	d100      	bne.n	801df9e <memset+0xa>
 801df9c:	4770      	bx	lr
 801df9e:	f803 1b01 	strb.w	r1, [r3], #1
 801dfa2:	e7f9      	b.n	801df98 <memset+0x4>

0801dfa4 <_calloc_r>:
 801dfa4:	b513      	push	{r0, r1, r4, lr}
 801dfa6:	434a      	muls	r2, r1
 801dfa8:	4611      	mov	r1, r2
 801dfaa:	9201      	str	r2, [sp, #4]
 801dfac:	f000 f85a 	bl	801e064 <_malloc_r>
 801dfb0:	4604      	mov	r4, r0
 801dfb2:	b118      	cbz	r0, 801dfbc <_calloc_r+0x18>
 801dfb4:	9a01      	ldr	r2, [sp, #4]
 801dfb6:	2100      	movs	r1, #0
 801dfb8:	f7ff ffec 	bl	801df94 <memset>
 801dfbc:	4620      	mov	r0, r4
 801dfbe:	b002      	add	sp, #8
 801dfc0:	bd10      	pop	{r4, pc}
	...

0801dfc4 <_free_r>:
 801dfc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dfc6:	2900      	cmp	r1, #0
 801dfc8:	d048      	beq.n	801e05c <_free_r+0x98>
 801dfca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dfce:	9001      	str	r0, [sp, #4]
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	f1a1 0404 	sub.w	r4, r1, #4
 801dfd6:	bfb8      	it	lt
 801dfd8:	18e4      	addlt	r4, r4, r3
 801dfda:	f002 ffd3 	bl	8020f84 <__malloc_lock>
 801dfde:	4a20      	ldr	r2, [pc, #128]	; (801e060 <_free_r+0x9c>)
 801dfe0:	9801      	ldr	r0, [sp, #4]
 801dfe2:	6813      	ldr	r3, [r2, #0]
 801dfe4:	4615      	mov	r5, r2
 801dfe6:	b933      	cbnz	r3, 801dff6 <_free_r+0x32>
 801dfe8:	6063      	str	r3, [r4, #4]
 801dfea:	6014      	str	r4, [r2, #0]
 801dfec:	b003      	add	sp, #12
 801dfee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dff2:	f002 bfcd 	b.w	8020f90 <__malloc_unlock>
 801dff6:	42a3      	cmp	r3, r4
 801dff8:	d90b      	bls.n	801e012 <_free_r+0x4e>
 801dffa:	6821      	ldr	r1, [r4, #0]
 801dffc:	1862      	adds	r2, r4, r1
 801dffe:	4293      	cmp	r3, r2
 801e000:	bf04      	itt	eq
 801e002:	681a      	ldreq	r2, [r3, #0]
 801e004:	685b      	ldreq	r3, [r3, #4]
 801e006:	6063      	str	r3, [r4, #4]
 801e008:	bf04      	itt	eq
 801e00a:	1852      	addeq	r2, r2, r1
 801e00c:	6022      	streq	r2, [r4, #0]
 801e00e:	602c      	str	r4, [r5, #0]
 801e010:	e7ec      	b.n	801dfec <_free_r+0x28>
 801e012:	461a      	mov	r2, r3
 801e014:	685b      	ldr	r3, [r3, #4]
 801e016:	b10b      	cbz	r3, 801e01c <_free_r+0x58>
 801e018:	42a3      	cmp	r3, r4
 801e01a:	d9fa      	bls.n	801e012 <_free_r+0x4e>
 801e01c:	6811      	ldr	r1, [r2, #0]
 801e01e:	1855      	adds	r5, r2, r1
 801e020:	42a5      	cmp	r5, r4
 801e022:	d10b      	bne.n	801e03c <_free_r+0x78>
 801e024:	6824      	ldr	r4, [r4, #0]
 801e026:	4421      	add	r1, r4
 801e028:	1854      	adds	r4, r2, r1
 801e02a:	42a3      	cmp	r3, r4
 801e02c:	6011      	str	r1, [r2, #0]
 801e02e:	d1dd      	bne.n	801dfec <_free_r+0x28>
 801e030:	681c      	ldr	r4, [r3, #0]
 801e032:	685b      	ldr	r3, [r3, #4]
 801e034:	6053      	str	r3, [r2, #4]
 801e036:	4421      	add	r1, r4
 801e038:	6011      	str	r1, [r2, #0]
 801e03a:	e7d7      	b.n	801dfec <_free_r+0x28>
 801e03c:	d902      	bls.n	801e044 <_free_r+0x80>
 801e03e:	230c      	movs	r3, #12
 801e040:	6003      	str	r3, [r0, #0]
 801e042:	e7d3      	b.n	801dfec <_free_r+0x28>
 801e044:	6825      	ldr	r5, [r4, #0]
 801e046:	1961      	adds	r1, r4, r5
 801e048:	428b      	cmp	r3, r1
 801e04a:	bf04      	itt	eq
 801e04c:	6819      	ldreq	r1, [r3, #0]
 801e04e:	685b      	ldreq	r3, [r3, #4]
 801e050:	6063      	str	r3, [r4, #4]
 801e052:	bf04      	itt	eq
 801e054:	1949      	addeq	r1, r1, r5
 801e056:	6021      	streq	r1, [r4, #0]
 801e058:	6054      	str	r4, [r2, #4]
 801e05a:	e7c7      	b.n	801dfec <_free_r+0x28>
 801e05c:	b003      	add	sp, #12
 801e05e:	bd30      	pop	{r4, r5, pc}
 801e060:	2000fe70 	.word	0x2000fe70

0801e064 <_malloc_r>:
 801e064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e066:	1ccd      	adds	r5, r1, #3
 801e068:	f025 0503 	bic.w	r5, r5, #3
 801e06c:	3508      	adds	r5, #8
 801e06e:	2d0c      	cmp	r5, #12
 801e070:	bf38      	it	cc
 801e072:	250c      	movcc	r5, #12
 801e074:	2d00      	cmp	r5, #0
 801e076:	4606      	mov	r6, r0
 801e078:	db01      	blt.n	801e07e <_malloc_r+0x1a>
 801e07a:	42a9      	cmp	r1, r5
 801e07c:	d903      	bls.n	801e086 <_malloc_r+0x22>
 801e07e:	230c      	movs	r3, #12
 801e080:	6033      	str	r3, [r6, #0]
 801e082:	2000      	movs	r0, #0
 801e084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e086:	f002 ff7d 	bl	8020f84 <__malloc_lock>
 801e08a:	4921      	ldr	r1, [pc, #132]	; (801e110 <_malloc_r+0xac>)
 801e08c:	680a      	ldr	r2, [r1, #0]
 801e08e:	4614      	mov	r4, r2
 801e090:	b99c      	cbnz	r4, 801e0ba <_malloc_r+0x56>
 801e092:	4f20      	ldr	r7, [pc, #128]	; (801e114 <_malloc_r+0xb0>)
 801e094:	683b      	ldr	r3, [r7, #0]
 801e096:	b923      	cbnz	r3, 801e0a2 <_malloc_r+0x3e>
 801e098:	4621      	mov	r1, r4
 801e09a:	4630      	mov	r0, r6
 801e09c:	f000 fca6 	bl	801e9ec <_sbrk_r>
 801e0a0:	6038      	str	r0, [r7, #0]
 801e0a2:	4629      	mov	r1, r5
 801e0a4:	4630      	mov	r0, r6
 801e0a6:	f000 fca1 	bl	801e9ec <_sbrk_r>
 801e0aa:	1c43      	adds	r3, r0, #1
 801e0ac:	d123      	bne.n	801e0f6 <_malloc_r+0x92>
 801e0ae:	230c      	movs	r3, #12
 801e0b0:	6033      	str	r3, [r6, #0]
 801e0b2:	4630      	mov	r0, r6
 801e0b4:	f002 ff6c 	bl	8020f90 <__malloc_unlock>
 801e0b8:	e7e3      	b.n	801e082 <_malloc_r+0x1e>
 801e0ba:	6823      	ldr	r3, [r4, #0]
 801e0bc:	1b5b      	subs	r3, r3, r5
 801e0be:	d417      	bmi.n	801e0f0 <_malloc_r+0x8c>
 801e0c0:	2b0b      	cmp	r3, #11
 801e0c2:	d903      	bls.n	801e0cc <_malloc_r+0x68>
 801e0c4:	6023      	str	r3, [r4, #0]
 801e0c6:	441c      	add	r4, r3
 801e0c8:	6025      	str	r5, [r4, #0]
 801e0ca:	e004      	b.n	801e0d6 <_malloc_r+0x72>
 801e0cc:	6863      	ldr	r3, [r4, #4]
 801e0ce:	42a2      	cmp	r2, r4
 801e0d0:	bf0c      	ite	eq
 801e0d2:	600b      	streq	r3, [r1, #0]
 801e0d4:	6053      	strne	r3, [r2, #4]
 801e0d6:	4630      	mov	r0, r6
 801e0d8:	f002 ff5a 	bl	8020f90 <__malloc_unlock>
 801e0dc:	f104 000b 	add.w	r0, r4, #11
 801e0e0:	1d23      	adds	r3, r4, #4
 801e0e2:	f020 0007 	bic.w	r0, r0, #7
 801e0e6:	1ac2      	subs	r2, r0, r3
 801e0e8:	d0cc      	beq.n	801e084 <_malloc_r+0x20>
 801e0ea:	1a1b      	subs	r3, r3, r0
 801e0ec:	50a3      	str	r3, [r4, r2]
 801e0ee:	e7c9      	b.n	801e084 <_malloc_r+0x20>
 801e0f0:	4622      	mov	r2, r4
 801e0f2:	6864      	ldr	r4, [r4, #4]
 801e0f4:	e7cc      	b.n	801e090 <_malloc_r+0x2c>
 801e0f6:	1cc4      	adds	r4, r0, #3
 801e0f8:	f024 0403 	bic.w	r4, r4, #3
 801e0fc:	42a0      	cmp	r0, r4
 801e0fe:	d0e3      	beq.n	801e0c8 <_malloc_r+0x64>
 801e100:	1a21      	subs	r1, r4, r0
 801e102:	4630      	mov	r0, r6
 801e104:	f000 fc72 	bl	801e9ec <_sbrk_r>
 801e108:	3001      	adds	r0, #1
 801e10a:	d1dd      	bne.n	801e0c8 <_malloc_r+0x64>
 801e10c:	e7cf      	b.n	801e0ae <_malloc_r+0x4a>
 801e10e:	bf00      	nop
 801e110:	2000fe70 	.word	0x2000fe70
 801e114:	2000fe74 	.word	0x2000fe74

0801e118 <__cvt>:
 801e118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e11c:	ec55 4b10 	vmov	r4, r5, d0
 801e120:	2d00      	cmp	r5, #0
 801e122:	460e      	mov	r6, r1
 801e124:	4619      	mov	r1, r3
 801e126:	462b      	mov	r3, r5
 801e128:	bfbb      	ittet	lt
 801e12a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801e12e:	461d      	movlt	r5, r3
 801e130:	2300      	movge	r3, #0
 801e132:	232d      	movlt	r3, #45	; 0x2d
 801e134:	700b      	strb	r3, [r1, #0]
 801e136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e138:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801e13c:	4691      	mov	r9, r2
 801e13e:	f023 0820 	bic.w	r8, r3, #32
 801e142:	bfbc      	itt	lt
 801e144:	4622      	movlt	r2, r4
 801e146:	4614      	movlt	r4, r2
 801e148:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e14c:	d005      	beq.n	801e15a <__cvt+0x42>
 801e14e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801e152:	d100      	bne.n	801e156 <__cvt+0x3e>
 801e154:	3601      	adds	r6, #1
 801e156:	2102      	movs	r1, #2
 801e158:	e000      	b.n	801e15c <__cvt+0x44>
 801e15a:	2103      	movs	r1, #3
 801e15c:	ab03      	add	r3, sp, #12
 801e15e:	9301      	str	r3, [sp, #4]
 801e160:	ab02      	add	r3, sp, #8
 801e162:	9300      	str	r3, [sp, #0]
 801e164:	ec45 4b10 	vmov	d0, r4, r5
 801e168:	4653      	mov	r3, sl
 801e16a:	4632      	mov	r2, r6
 801e16c:	f001 fd64 	bl	801fc38 <_dtoa_r>
 801e170:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e174:	4607      	mov	r7, r0
 801e176:	d102      	bne.n	801e17e <__cvt+0x66>
 801e178:	f019 0f01 	tst.w	r9, #1
 801e17c:	d022      	beq.n	801e1c4 <__cvt+0xac>
 801e17e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e182:	eb07 0906 	add.w	r9, r7, r6
 801e186:	d110      	bne.n	801e1aa <__cvt+0x92>
 801e188:	783b      	ldrb	r3, [r7, #0]
 801e18a:	2b30      	cmp	r3, #48	; 0x30
 801e18c:	d10a      	bne.n	801e1a4 <__cvt+0x8c>
 801e18e:	2200      	movs	r2, #0
 801e190:	2300      	movs	r3, #0
 801e192:	4620      	mov	r0, r4
 801e194:	4629      	mov	r1, r5
 801e196:	f7e2 fcbf 	bl	8000b18 <__aeabi_dcmpeq>
 801e19a:	b918      	cbnz	r0, 801e1a4 <__cvt+0x8c>
 801e19c:	f1c6 0601 	rsb	r6, r6, #1
 801e1a0:	f8ca 6000 	str.w	r6, [sl]
 801e1a4:	f8da 3000 	ldr.w	r3, [sl]
 801e1a8:	4499      	add	r9, r3
 801e1aa:	2200      	movs	r2, #0
 801e1ac:	2300      	movs	r3, #0
 801e1ae:	4620      	mov	r0, r4
 801e1b0:	4629      	mov	r1, r5
 801e1b2:	f7e2 fcb1 	bl	8000b18 <__aeabi_dcmpeq>
 801e1b6:	b108      	cbz	r0, 801e1bc <__cvt+0xa4>
 801e1b8:	f8cd 900c 	str.w	r9, [sp, #12]
 801e1bc:	2230      	movs	r2, #48	; 0x30
 801e1be:	9b03      	ldr	r3, [sp, #12]
 801e1c0:	454b      	cmp	r3, r9
 801e1c2:	d307      	bcc.n	801e1d4 <__cvt+0xbc>
 801e1c4:	9b03      	ldr	r3, [sp, #12]
 801e1c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e1c8:	1bdb      	subs	r3, r3, r7
 801e1ca:	4638      	mov	r0, r7
 801e1cc:	6013      	str	r3, [r2, #0]
 801e1ce:	b004      	add	sp, #16
 801e1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1d4:	1c59      	adds	r1, r3, #1
 801e1d6:	9103      	str	r1, [sp, #12]
 801e1d8:	701a      	strb	r2, [r3, #0]
 801e1da:	e7f0      	b.n	801e1be <__cvt+0xa6>

0801e1dc <__exponent>:
 801e1dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e1de:	4603      	mov	r3, r0
 801e1e0:	2900      	cmp	r1, #0
 801e1e2:	bfb8      	it	lt
 801e1e4:	4249      	neglt	r1, r1
 801e1e6:	f803 2b02 	strb.w	r2, [r3], #2
 801e1ea:	bfb4      	ite	lt
 801e1ec:	222d      	movlt	r2, #45	; 0x2d
 801e1ee:	222b      	movge	r2, #43	; 0x2b
 801e1f0:	2909      	cmp	r1, #9
 801e1f2:	7042      	strb	r2, [r0, #1]
 801e1f4:	dd2a      	ble.n	801e24c <__exponent+0x70>
 801e1f6:	f10d 0407 	add.w	r4, sp, #7
 801e1fa:	46a4      	mov	ip, r4
 801e1fc:	270a      	movs	r7, #10
 801e1fe:	46a6      	mov	lr, r4
 801e200:	460a      	mov	r2, r1
 801e202:	fb91 f6f7 	sdiv	r6, r1, r7
 801e206:	fb07 1516 	mls	r5, r7, r6, r1
 801e20a:	3530      	adds	r5, #48	; 0x30
 801e20c:	2a63      	cmp	r2, #99	; 0x63
 801e20e:	f104 34ff 	add.w	r4, r4, #4294967295
 801e212:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e216:	4631      	mov	r1, r6
 801e218:	dcf1      	bgt.n	801e1fe <__exponent+0x22>
 801e21a:	3130      	adds	r1, #48	; 0x30
 801e21c:	f1ae 0502 	sub.w	r5, lr, #2
 801e220:	f804 1c01 	strb.w	r1, [r4, #-1]
 801e224:	1c44      	adds	r4, r0, #1
 801e226:	4629      	mov	r1, r5
 801e228:	4561      	cmp	r1, ip
 801e22a:	d30a      	bcc.n	801e242 <__exponent+0x66>
 801e22c:	f10d 0209 	add.w	r2, sp, #9
 801e230:	eba2 020e 	sub.w	r2, r2, lr
 801e234:	4565      	cmp	r5, ip
 801e236:	bf88      	it	hi
 801e238:	2200      	movhi	r2, #0
 801e23a:	4413      	add	r3, r2
 801e23c:	1a18      	subs	r0, r3, r0
 801e23e:	b003      	add	sp, #12
 801e240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e242:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e246:	f804 2f01 	strb.w	r2, [r4, #1]!
 801e24a:	e7ed      	b.n	801e228 <__exponent+0x4c>
 801e24c:	2330      	movs	r3, #48	; 0x30
 801e24e:	3130      	adds	r1, #48	; 0x30
 801e250:	7083      	strb	r3, [r0, #2]
 801e252:	70c1      	strb	r1, [r0, #3]
 801e254:	1d03      	adds	r3, r0, #4
 801e256:	e7f1      	b.n	801e23c <__exponent+0x60>

0801e258 <_printf_float>:
 801e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e25c:	ed2d 8b02 	vpush	{d8}
 801e260:	b08d      	sub	sp, #52	; 0x34
 801e262:	460c      	mov	r4, r1
 801e264:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e268:	4616      	mov	r6, r2
 801e26a:	461f      	mov	r7, r3
 801e26c:	4605      	mov	r5, r0
 801e26e:	f002 fe61 	bl	8020f34 <_localeconv_r>
 801e272:	f8d0 a000 	ldr.w	sl, [r0]
 801e276:	4650      	mov	r0, sl
 801e278:	f7e1 ffcc 	bl	8000214 <strlen>
 801e27c:	2300      	movs	r3, #0
 801e27e:	930a      	str	r3, [sp, #40]	; 0x28
 801e280:	6823      	ldr	r3, [r4, #0]
 801e282:	9305      	str	r3, [sp, #20]
 801e284:	f8d8 3000 	ldr.w	r3, [r8]
 801e288:	f894 b018 	ldrb.w	fp, [r4, #24]
 801e28c:	3307      	adds	r3, #7
 801e28e:	f023 0307 	bic.w	r3, r3, #7
 801e292:	f103 0208 	add.w	r2, r3, #8
 801e296:	f8c8 2000 	str.w	r2, [r8]
 801e29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e29e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801e2a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801e2a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e2aa:	9307      	str	r3, [sp, #28]
 801e2ac:	f8cd 8018 	str.w	r8, [sp, #24]
 801e2b0:	ee08 0a10 	vmov	s16, r0
 801e2b4:	4b9f      	ldr	r3, [pc, #636]	; (801e534 <_printf_float+0x2dc>)
 801e2b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e2ba:	f04f 32ff 	mov.w	r2, #4294967295
 801e2be:	f7e2 fc5d 	bl	8000b7c <__aeabi_dcmpun>
 801e2c2:	bb88      	cbnz	r0, 801e328 <_printf_float+0xd0>
 801e2c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e2c8:	4b9a      	ldr	r3, [pc, #616]	; (801e534 <_printf_float+0x2dc>)
 801e2ca:	f04f 32ff 	mov.w	r2, #4294967295
 801e2ce:	f7e2 fc37 	bl	8000b40 <__aeabi_dcmple>
 801e2d2:	bb48      	cbnz	r0, 801e328 <_printf_float+0xd0>
 801e2d4:	2200      	movs	r2, #0
 801e2d6:	2300      	movs	r3, #0
 801e2d8:	4640      	mov	r0, r8
 801e2da:	4649      	mov	r1, r9
 801e2dc:	f7e2 fc26 	bl	8000b2c <__aeabi_dcmplt>
 801e2e0:	b110      	cbz	r0, 801e2e8 <_printf_float+0x90>
 801e2e2:	232d      	movs	r3, #45	; 0x2d
 801e2e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e2e8:	4b93      	ldr	r3, [pc, #588]	; (801e538 <_printf_float+0x2e0>)
 801e2ea:	4894      	ldr	r0, [pc, #592]	; (801e53c <_printf_float+0x2e4>)
 801e2ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801e2f0:	bf94      	ite	ls
 801e2f2:	4698      	movls	r8, r3
 801e2f4:	4680      	movhi	r8, r0
 801e2f6:	2303      	movs	r3, #3
 801e2f8:	6123      	str	r3, [r4, #16]
 801e2fa:	9b05      	ldr	r3, [sp, #20]
 801e2fc:	f023 0204 	bic.w	r2, r3, #4
 801e300:	6022      	str	r2, [r4, #0]
 801e302:	f04f 0900 	mov.w	r9, #0
 801e306:	9700      	str	r7, [sp, #0]
 801e308:	4633      	mov	r3, r6
 801e30a:	aa0b      	add	r2, sp, #44	; 0x2c
 801e30c:	4621      	mov	r1, r4
 801e30e:	4628      	mov	r0, r5
 801e310:	f000 f9d8 	bl	801e6c4 <_printf_common>
 801e314:	3001      	adds	r0, #1
 801e316:	f040 8090 	bne.w	801e43a <_printf_float+0x1e2>
 801e31a:	f04f 30ff 	mov.w	r0, #4294967295
 801e31e:	b00d      	add	sp, #52	; 0x34
 801e320:	ecbd 8b02 	vpop	{d8}
 801e324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e328:	4642      	mov	r2, r8
 801e32a:	464b      	mov	r3, r9
 801e32c:	4640      	mov	r0, r8
 801e32e:	4649      	mov	r1, r9
 801e330:	f7e2 fc24 	bl	8000b7c <__aeabi_dcmpun>
 801e334:	b140      	cbz	r0, 801e348 <_printf_float+0xf0>
 801e336:	464b      	mov	r3, r9
 801e338:	2b00      	cmp	r3, #0
 801e33a:	bfbc      	itt	lt
 801e33c:	232d      	movlt	r3, #45	; 0x2d
 801e33e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e342:	487f      	ldr	r0, [pc, #508]	; (801e540 <_printf_float+0x2e8>)
 801e344:	4b7f      	ldr	r3, [pc, #508]	; (801e544 <_printf_float+0x2ec>)
 801e346:	e7d1      	b.n	801e2ec <_printf_float+0x94>
 801e348:	6863      	ldr	r3, [r4, #4]
 801e34a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e34e:	9206      	str	r2, [sp, #24]
 801e350:	1c5a      	adds	r2, r3, #1
 801e352:	d13f      	bne.n	801e3d4 <_printf_float+0x17c>
 801e354:	2306      	movs	r3, #6
 801e356:	6063      	str	r3, [r4, #4]
 801e358:	9b05      	ldr	r3, [sp, #20]
 801e35a:	6861      	ldr	r1, [r4, #4]
 801e35c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801e360:	2300      	movs	r3, #0
 801e362:	9303      	str	r3, [sp, #12]
 801e364:	ab0a      	add	r3, sp, #40	; 0x28
 801e366:	e9cd b301 	strd	fp, r3, [sp, #4]
 801e36a:	ab09      	add	r3, sp, #36	; 0x24
 801e36c:	ec49 8b10 	vmov	d0, r8, r9
 801e370:	9300      	str	r3, [sp, #0]
 801e372:	6022      	str	r2, [r4, #0]
 801e374:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e378:	4628      	mov	r0, r5
 801e37a:	f7ff fecd 	bl	801e118 <__cvt>
 801e37e:	9b06      	ldr	r3, [sp, #24]
 801e380:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e382:	2b47      	cmp	r3, #71	; 0x47
 801e384:	4680      	mov	r8, r0
 801e386:	d108      	bne.n	801e39a <_printf_float+0x142>
 801e388:	1cc8      	adds	r0, r1, #3
 801e38a:	db02      	blt.n	801e392 <_printf_float+0x13a>
 801e38c:	6863      	ldr	r3, [r4, #4]
 801e38e:	4299      	cmp	r1, r3
 801e390:	dd41      	ble.n	801e416 <_printf_float+0x1be>
 801e392:	f1ab 0b02 	sub.w	fp, fp, #2
 801e396:	fa5f fb8b 	uxtb.w	fp, fp
 801e39a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e39e:	d820      	bhi.n	801e3e2 <_printf_float+0x18a>
 801e3a0:	3901      	subs	r1, #1
 801e3a2:	465a      	mov	r2, fp
 801e3a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e3a8:	9109      	str	r1, [sp, #36]	; 0x24
 801e3aa:	f7ff ff17 	bl	801e1dc <__exponent>
 801e3ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e3b0:	1813      	adds	r3, r2, r0
 801e3b2:	2a01      	cmp	r2, #1
 801e3b4:	4681      	mov	r9, r0
 801e3b6:	6123      	str	r3, [r4, #16]
 801e3b8:	dc02      	bgt.n	801e3c0 <_printf_float+0x168>
 801e3ba:	6822      	ldr	r2, [r4, #0]
 801e3bc:	07d2      	lsls	r2, r2, #31
 801e3be:	d501      	bpl.n	801e3c4 <_printf_float+0x16c>
 801e3c0:	3301      	adds	r3, #1
 801e3c2:	6123      	str	r3, [r4, #16]
 801e3c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d09c      	beq.n	801e306 <_printf_float+0xae>
 801e3cc:	232d      	movs	r3, #45	; 0x2d
 801e3ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e3d2:	e798      	b.n	801e306 <_printf_float+0xae>
 801e3d4:	9a06      	ldr	r2, [sp, #24]
 801e3d6:	2a47      	cmp	r2, #71	; 0x47
 801e3d8:	d1be      	bne.n	801e358 <_printf_float+0x100>
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	d1bc      	bne.n	801e358 <_printf_float+0x100>
 801e3de:	2301      	movs	r3, #1
 801e3e0:	e7b9      	b.n	801e356 <_printf_float+0xfe>
 801e3e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801e3e6:	d118      	bne.n	801e41a <_printf_float+0x1c2>
 801e3e8:	2900      	cmp	r1, #0
 801e3ea:	6863      	ldr	r3, [r4, #4]
 801e3ec:	dd0b      	ble.n	801e406 <_printf_float+0x1ae>
 801e3ee:	6121      	str	r1, [r4, #16]
 801e3f0:	b913      	cbnz	r3, 801e3f8 <_printf_float+0x1a0>
 801e3f2:	6822      	ldr	r2, [r4, #0]
 801e3f4:	07d0      	lsls	r0, r2, #31
 801e3f6:	d502      	bpl.n	801e3fe <_printf_float+0x1a6>
 801e3f8:	3301      	adds	r3, #1
 801e3fa:	440b      	add	r3, r1
 801e3fc:	6123      	str	r3, [r4, #16]
 801e3fe:	65a1      	str	r1, [r4, #88]	; 0x58
 801e400:	f04f 0900 	mov.w	r9, #0
 801e404:	e7de      	b.n	801e3c4 <_printf_float+0x16c>
 801e406:	b913      	cbnz	r3, 801e40e <_printf_float+0x1b6>
 801e408:	6822      	ldr	r2, [r4, #0]
 801e40a:	07d2      	lsls	r2, r2, #31
 801e40c:	d501      	bpl.n	801e412 <_printf_float+0x1ba>
 801e40e:	3302      	adds	r3, #2
 801e410:	e7f4      	b.n	801e3fc <_printf_float+0x1a4>
 801e412:	2301      	movs	r3, #1
 801e414:	e7f2      	b.n	801e3fc <_printf_float+0x1a4>
 801e416:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801e41a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e41c:	4299      	cmp	r1, r3
 801e41e:	db05      	blt.n	801e42c <_printf_float+0x1d4>
 801e420:	6823      	ldr	r3, [r4, #0]
 801e422:	6121      	str	r1, [r4, #16]
 801e424:	07d8      	lsls	r0, r3, #31
 801e426:	d5ea      	bpl.n	801e3fe <_printf_float+0x1a6>
 801e428:	1c4b      	adds	r3, r1, #1
 801e42a:	e7e7      	b.n	801e3fc <_printf_float+0x1a4>
 801e42c:	2900      	cmp	r1, #0
 801e42e:	bfd4      	ite	le
 801e430:	f1c1 0202 	rsble	r2, r1, #2
 801e434:	2201      	movgt	r2, #1
 801e436:	4413      	add	r3, r2
 801e438:	e7e0      	b.n	801e3fc <_printf_float+0x1a4>
 801e43a:	6823      	ldr	r3, [r4, #0]
 801e43c:	055a      	lsls	r2, r3, #21
 801e43e:	d407      	bmi.n	801e450 <_printf_float+0x1f8>
 801e440:	6923      	ldr	r3, [r4, #16]
 801e442:	4642      	mov	r2, r8
 801e444:	4631      	mov	r1, r6
 801e446:	4628      	mov	r0, r5
 801e448:	47b8      	blx	r7
 801e44a:	3001      	adds	r0, #1
 801e44c:	d12c      	bne.n	801e4a8 <_printf_float+0x250>
 801e44e:	e764      	b.n	801e31a <_printf_float+0xc2>
 801e450:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e454:	f240 80e0 	bls.w	801e618 <_printf_float+0x3c0>
 801e458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e45c:	2200      	movs	r2, #0
 801e45e:	2300      	movs	r3, #0
 801e460:	f7e2 fb5a 	bl	8000b18 <__aeabi_dcmpeq>
 801e464:	2800      	cmp	r0, #0
 801e466:	d034      	beq.n	801e4d2 <_printf_float+0x27a>
 801e468:	4a37      	ldr	r2, [pc, #220]	; (801e548 <_printf_float+0x2f0>)
 801e46a:	2301      	movs	r3, #1
 801e46c:	4631      	mov	r1, r6
 801e46e:	4628      	mov	r0, r5
 801e470:	47b8      	blx	r7
 801e472:	3001      	adds	r0, #1
 801e474:	f43f af51 	beq.w	801e31a <_printf_float+0xc2>
 801e478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e47c:	429a      	cmp	r2, r3
 801e47e:	db02      	blt.n	801e486 <_printf_float+0x22e>
 801e480:	6823      	ldr	r3, [r4, #0]
 801e482:	07d8      	lsls	r0, r3, #31
 801e484:	d510      	bpl.n	801e4a8 <_printf_float+0x250>
 801e486:	ee18 3a10 	vmov	r3, s16
 801e48a:	4652      	mov	r2, sl
 801e48c:	4631      	mov	r1, r6
 801e48e:	4628      	mov	r0, r5
 801e490:	47b8      	blx	r7
 801e492:	3001      	adds	r0, #1
 801e494:	f43f af41 	beq.w	801e31a <_printf_float+0xc2>
 801e498:	f04f 0800 	mov.w	r8, #0
 801e49c:	f104 091a 	add.w	r9, r4, #26
 801e4a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e4a2:	3b01      	subs	r3, #1
 801e4a4:	4543      	cmp	r3, r8
 801e4a6:	dc09      	bgt.n	801e4bc <_printf_float+0x264>
 801e4a8:	6823      	ldr	r3, [r4, #0]
 801e4aa:	079b      	lsls	r3, r3, #30
 801e4ac:	f100 8105 	bmi.w	801e6ba <_printf_float+0x462>
 801e4b0:	68e0      	ldr	r0, [r4, #12]
 801e4b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e4b4:	4298      	cmp	r0, r3
 801e4b6:	bfb8      	it	lt
 801e4b8:	4618      	movlt	r0, r3
 801e4ba:	e730      	b.n	801e31e <_printf_float+0xc6>
 801e4bc:	2301      	movs	r3, #1
 801e4be:	464a      	mov	r2, r9
 801e4c0:	4631      	mov	r1, r6
 801e4c2:	4628      	mov	r0, r5
 801e4c4:	47b8      	blx	r7
 801e4c6:	3001      	adds	r0, #1
 801e4c8:	f43f af27 	beq.w	801e31a <_printf_float+0xc2>
 801e4cc:	f108 0801 	add.w	r8, r8, #1
 801e4d0:	e7e6      	b.n	801e4a0 <_printf_float+0x248>
 801e4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	dc39      	bgt.n	801e54c <_printf_float+0x2f4>
 801e4d8:	4a1b      	ldr	r2, [pc, #108]	; (801e548 <_printf_float+0x2f0>)
 801e4da:	2301      	movs	r3, #1
 801e4dc:	4631      	mov	r1, r6
 801e4de:	4628      	mov	r0, r5
 801e4e0:	47b8      	blx	r7
 801e4e2:	3001      	adds	r0, #1
 801e4e4:	f43f af19 	beq.w	801e31a <_printf_float+0xc2>
 801e4e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e4ec:	4313      	orrs	r3, r2
 801e4ee:	d102      	bne.n	801e4f6 <_printf_float+0x29e>
 801e4f0:	6823      	ldr	r3, [r4, #0]
 801e4f2:	07d9      	lsls	r1, r3, #31
 801e4f4:	d5d8      	bpl.n	801e4a8 <_printf_float+0x250>
 801e4f6:	ee18 3a10 	vmov	r3, s16
 801e4fa:	4652      	mov	r2, sl
 801e4fc:	4631      	mov	r1, r6
 801e4fe:	4628      	mov	r0, r5
 801e500:	47b8      	blx	r7
 801e502:	3001      	adds	r0, #1
 801e504:	f43f af09 	beq.w	801e31a <_printf_float+0xc2>
 801e508:	f04f 0900 	mov.w	r9, #0
 801e50c:	f104 0a1a 	add.w	sl, r4, #26
 801e510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e512:	425b      	negs	r3, r3
 801e514:	454b      	cmp	r3, r9
 801e516:	dc01      	bgt.n	801e51c <_printf_float+0x2c4>
 801e518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e51a:	e792      	b.n	801e442 <_printf_float+0x1ea>
 801e51c:	2301      	movs	r3, #1
 801e51e:	4652      	mov	r2, sl
 801e520:	4631      	mov	r1, r6
 801e522:	4628      	mov	r0, r5
 801e524:	47b8      	blx	r7
 801e526:	3001      	adds	r0, #1
 801e528:	f43f aef7 	beq.w	801e31a <_printf_float+0xc2>
 801e52c:	f109 0901 	add.w	r9, r9, #1
 801e530:	e7ee      	b.n	801e510 <_printf_float+0x2b8>
 801e532:	bf00      	nop
 801e534:	7fefffff 	.word	0x7fefffff
 801e538:	08022dd4 	.word	0x08022dd4
 801e53c:	08022dd8 	.word	0x08022dd8
 801e540:	08022de0 	.word	0x08022de0
 801e544:	08022ddc 	.word	0x08022ddc
 801e548:	08022de4 	.word	0x08022de4
 801e54c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e54e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e550:	429a      	cmp	r2, r3
 801e552:	bfa8      	it	ge
 801e554:	461a      	movge	r2, r3
 801e556:	2a00      	cmp	r2, #0
 801e558:	4691      	mov	r9, r2
 801e55a:	dc37      	bgt.n	801e5cc <_printf_float+0x374>
 801e55c:	f04f 0b00 	mov.w	fp, #0
 801e560:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e564:	f104 021a 	add.w	r2, r4, #26
 801e568:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e56a:	9305      	str	r3, [sp, #20]
 801e56c:	eba3 0309 	sub.w	r3, r3, r9
 801e570:	455b      	cmp	r3, fp
 801e572:	dc33      	bgt.n	801e5dc <_printf_float+0x384>
 801e574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e578:	429a      	cmp	r2, r3
 801e57a:	db3b      	blt.n	801e5f4 <_printf_float+0x39c>
 801e57c:	6823      	ldr	r3, [r4, #0]
 801e57e:	07da      	lsls	r2, r3, #31
 801e580:	d438      	bmi.n	801e5f4 <_printf_float+0x39c>
 801e582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e584:	9b05      	ldr	r3, [sp, #20]
 801e586:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e588:	1ad3      	subs	r3, r2, r3
 801e58a:	eba2 0901 	sub.w	r9, r2, r1
 801e58e:	4599      	cmp	r9, r3
 801e590:	bfa8      	it	ge
 801e592:	4699      	movge	r9, r3
 801e594:	f1b9 0f00 	cmp.w	r9, #0
 801e598:	dc35      	bgt.n	801e606 <_printf_float+0x3ae>
 801e59a:	f04f 0800 	mov.w	r8, #0
 801e59e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e5a2:	f104 0a1a 	add.w	sl, r4, #26
 801e5a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e5aa:	1a9b      	subs	r3, r3, r2
 801e5ac:	eba3 0309 	sub.w	r3, r3, r9
 801e5b0:	4543      	cmp	r3, r8
 801e5b2:	f77f af79 	ble.w	801e4a8 <_printf_float+0x250>
 801e5b6:	2301      	movs	r3, #1
 801e5b8:	4652      	mov	r2, sl
 801e5ba:	4631      	mov	r1, r6
 801e5bc:	4628      	mov	r0, r5
 801e5be:	47b8      	blx	r7
 801e5c0:	3001      	adds	r0, #1
 801e5c2:	f43f aeaa 	beq.w	801e31a <_printf_float+0xc2>
 801e5c6:	f108 0801 	add.w	r8, r8, #1
 801e5ca:	e7ec      	b.n	801e5a6 <_printf_float+0x34e>
 801e5cc:	4613      	mov	r3, r2
 801e5ce:	4631      	mov	r1, r6
 801e5d0:	4642      	mov	r2, r8
 801e5d2:	4628      	mov	r0, r5
 801e5d4:	47b8      	blx	r7
 801e5d6:	3001      	adds	r0, #1
 801e5d8:	d1c0      	bne.n	801e55c <_printf_float+0x304>
 801e5da:	e69e      	b.n	801e31a <_printf_float+0xc2>
 801e5dc:	2301      	movs	r3, #1
 801e5de:	4631      	mov	r1, r6
 801e5e0:	4628      	mov	r0, r5
 801e5e2:	9205      	str	r2, [sp, #20]
 801e5e4:	47b8      	blx	r7
 801e5e6:	3001      	adds	r0, #1
 801e5e8:	f43f ae97 	beq.w	801e31a <_printf_float+0xc2>
 801e5ec:	9a05      	ldr	r2, [sp, #20]
 801e5ee:	f10b 0b01 	add.w	fp, fp, #1
 801e5f2:	e7b9      	b.n	801e568 <_printf_float+0x310>
 801e5f4:	ee18 3a10 	vmov	r3, s16
 801e5f8:	4652      	mov	r2, sl
 801e5fa:	4631      	mov	r1, r6
 801e5fc:	4628      	mov	r0, r5
 801e5fe:	47b8      	blx	r7
 801e600:	3001      	adds	r0, #1
 801e602:	d1be      	bne.n	801e582 <_printf_float+0x32a>
 801e604:	e689      	b.n	801e31a <_printf_float+0xc2>
 801e606:	9a05      	ldr	r2, [sp, #20]
 801e608:	464b      	mov	r3, r9
 801e60a:	4442      	add	r2, r8
 801e60c:	4631      	mov	r1, r6
 801e60e:	4628      	mov	r0, r5
 801e610:	47b8      	blx	r7
 801e612:	3001      	adds	r0, #1
 801e614:	d1c1      	bne.n	801e59a <_printf_float+0x342>
 801e616:	e680      	b.n	801e31a <_printf_float+0xc2>
 801e618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e61a:	2a01      	cmp	r2, #1
 801e61c:	dc01      	bgt.n	801e622 <_printf_float+0x3ca>
 801e61e:	07db      	lsls	r3, r3, #31
 801e620:	d538      	bpl.n	801e694 <_printf_float+0x43c>
 801e622:	2301      	movs	r3, #1
 801e624:	4642      	mov	r2, r8
 801e626:	4631      	mov	r1, r6
 801e628:	4628      	mov	r0, r5
 801e62a:	47b8      	blx	r7
 801e62c:	3001      	adds	r0, #1
 801e62e:	f43f ae74 	beq.w	801e31a <_printf_float+0xc2>
 801e632:	ee18 3a10 	vmov	r3, s16
 801e636:	4652      	mov	r2, sl
 801e638:	4631      	mov	r1, r6
 801e63a:	4628      	mov	r0, r5
 801e63c:	47b8      	blx	r7
 801e63e:	3001      	adds	r0, #1
 801e640:	f43f ae6b 	beq.w	801e31a <_printf_float+0xc2>
 801e644:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e648:	2200      	movs	r2, #0
 801e64a:	2300      	movs	r3, #0
 801e64c:	f7e2 fa64 	bl	8000b18 <__aeabi_dcmpeq>
 801e650:	b9d8      	cbnz	r0, 801e68a <_printf_float+0x432>
 801e652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e654:	f108 0201 	add.w	r2, r8, #1
 801e658:	3b01      	subs	r3, #1
 801e65a:	4631      	mov	r1, r6
 801e65c:	4628      	mov	r0, r5
 801e65e:	47b8      	blx	r7
 801e660:	3001      	adds	r0, #1
 801e662:	d10e      	bne.n	801e682 <_printf_float+0x42a>
 801e664:	e659      	b.n	801e31a <_printf_float+0xc2>
 801e666:	2301      	movs	r3, #1
 801e668:	4652      	mov	r2, sl
 801e66a:	4631      	mov	r1, r6
 801e66c:	4628      	mov	r0, r5
 801e66e:	47b8      	blx	r7
 801e670:	3001      	adds	r0, #1
 801e672:	f43f ae52 	beq.w	801e31a <_printf_float+0xc2>
 801e676:	f108 0801 	add.w	r8, r8, #1
 801e67a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e67c:	3b01      	subs	r3, #1
 801e67e:	4543      	cmp	r3, r8
 801e680:	dcf1      	bgt.n	801e666 <_printf_float+0x40e>
 801e682:	464b      	mov	r3, r9
 801e684:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e688:	e6dc      	b.n	801e444 <_printf_float+0x1ec>
 801e68a:	f04f 0800 	mov.w	r8, #0
 801e68e:	f104 0a1a 	add.w	sl, r4, #26
 801e692:	e7f2      	b.n	801e67a <_printf_float+0x422>
 801e694:	2301      	movs	r3, #1
 801e696:	4642      	mov	r2, r8
 801e698:	e7df      	b.n	801e65a <_printf_float+0x402>
 801e69a:	2301      	movs	r3, #1
 801e69c:	464a      	mov	r2, r9
 801e69e:	4631      	mov	r1, r6
 801e6a0:	4628      	mov	r0, r5
 801e6a2:	47b8      	blx	r7
 801e6a4:	3001      	adds	r0, #1
 801e6a6:	f43f ae38 	beq.w	801e31a <_printf_float+0xc2>
 801e6aa:	f108 0801 	add.w	r8, r8, #1
 801e6ae:	68e3      	ldr	r3, [r4, #12]
 801e6b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e6b2:	1a5b      	subs	r3, r3, r1
 801e6b4:	4543      	cmp	r3, r8
 801e6b6:	dcf0      	bgt.n	801e69a <_printf_float+0x442>
 801e6b8:	e6fa      	b.n	801e4b0 <_printf_float+0x258>
 801e6ba:	f04f 0800 	mov.w	r8, #0
 801e6be:	f104 0919 	add.w	r9, r4, #25
 801e6c2:	e7f4      	b.n	801e6ae <_printf_float+0x456>

0801e6c4 <_printf_common>:
 801e6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e6c8:	4616      	mov	r6, r2
 801e6ca:	4699      	mov	r9, r3
 801e6cc:	688a      	ldr	r2, [r1, #8]
 801e6ce:	690b      	ldr	r3, [r1, #16]
 801e6d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e6d4:	4293      	cmp	r3, r2
 801e6d6:	bfb8      	it	lt
 801e6d8:	4613      	movlt	r3, r2
 801e6da:	6033      	str	r3, [r6, #0]
 801e6dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e6e0:	4607      	mov	r7, r0
 801e6e2:	460c      	mov	r4, r1
 801e6e4:	b10a      	cbz	r2, 801e6ea <_printf_common+0x26>
 801e6e6:	3301      	adds	r3, #1
 801e6e8:	6033      	str	r3, [r6, #0]
 801e6ea:	6823      	ldr	r3, [r4, #0]
 801e6ec:	0699      	lsls	r1, r3, #26
 801e6ee:	bf42      	ittt	mi
 801e6f0:	6833      	ldrmi	r3, [r6, #0]
 801e6f2:	3302      	addmi	r3, #2
 801e6f4:	6033      	strmi	r3, [r6, #0]
 801e6f6:	6825      	ldr	r5, [r4, #0]
 801e6f8:	f015 0506 	ands.w	r5, r5, #6
 801e6fc:	d106      	bne.n	801e70c <_printf_common+0x48>
 801e6fe:	f104 0a19 	add.w	sl, r4, #25
 801e702:	68e3      	ldr	r3, [r4, #12]
 801e704:	6832      	ldr	r2, [r6, #0]
 801e706:	1a9b      	subs	r3, r3, r2
 801e708:	42ab      	cmp	r3, r5
 801e70a:	dc26      	bgt.n	801e75a <_printf_common+0x96>
 801e70c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e710:	1e13      	subs	r3, r2, #0
 801e712:	6822      	ldr	r2, [r4, #0]
 801e714:	bf18      	it	ne
 801e716:	2301      	movne	r3, #1
 801e718:	0692      	lsls	r2, r2, #26
 801e71a:	d42b      	bmi.n	801e774 <_printf_common+0xb0>
 801e71c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e720:	4649      	mov	r1, r9
 801e722:	4638      	mov	r0, r7
 801e724:	47c0      	blx	r8
 801e726:	3001      	adds	r0, #1
 801e728:	d01e      	beq.n	801e768 <_printf_common+0xa4>
 801e72a:	6823      	ldr	r3, [r4, #0]
 801e72c:	68e5      	ldr	r5, [r4, #12]
 801e72e:	6832      	ldr	r2, [r6, #0]
 801e730:	f003 0306 	and.w	r3, r3, #6
 801e734:	2b04      	cmp	r3, #4
 801e736:	bf08      	it	eq
 801e738:	1aad      	subeq	r5, r5, r2
 801e73a:	68a3      	ldr	r3, [r4, #8]
 801e73c:	6922      	ldr	r2, [r4, #16]
 801e73e:	bf0c      	ite	eq
 801e740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e744:	2500      	movne	r5, #0
 801e746:	4293      	cmp	r3, r2
 801e748:	bfc4      	itt	gt
 801e74a:	1a9b      	subgt	r3, r3, r2
 801e74c:	18ed      	addgt	r5, r5, r3
 801e74e:	2600      	movs	r6, #0
 801e750:	341a      	adds	r4, #26
 801e752:	42b5      	cmp	r5, r6
 801e754:	d11a      	bne.n	801e78c <_printf_common+0xc8>
 801e756:	2000      	movs	r0, #0
 801e758:	e008      	b.n	801e76c <_printf_common+0xa8>
 801e75a:	2301      	movs	r3, #1
 801e75c:	4652      	mov	r2, sl
 801e75e:	4649      	mov	r1, r9
 801e760:	4638      	mov	r0, r7
 801e762:	47c0      	blx	r8
 801e764:	3001      	adds	r0, #1
 801e766:	d103      	bne.n	801e770 <_printf_common+0xac>
 801e768:	f04f 30ff 	mov.w	r0, #4294967295
 801e76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e770:	3501      	adds	r5, #1
 801e772:	e7c6      	b.n	801e702 <_printf_common+0x3e>
 801e774:	18e1      	adds	r1, r4, r3
 801e776:	1c5a      	adds	r2, r3, #1
 801e778:	2030      	movs	r0, #48	; 0x30
 801e77a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e77e:	4422      	add	r2, r4
 801e780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e788:	3302      	adds	r3, #2
 801e78a:	e7c7      	b.n	801e71c <_printf_common+0x58>
 801e78c:	2301      	movs	r3, #1
 801e78e:	4622      	mov	r2, r4
 801e790:	4649      	mov	r1, r9
 801e792:	4638      	mov	r0, r7
 801e794:	47c0      	blx	r8
 801e796:	3001      	adds	r0, #1
 801e798:	d0e6      	beq.n	801e768 <_printf_common+0xa4>
 801e79a:	3601      	adds	r6, #1
 801e79c:	e7d9      	b.n	801e752 <_printf_common+0x8e>
	...

0801e7a0 <_printf_i>:
 801e7a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e7a4:	460c      	mov	r4, r1
 801e7a6:	4691      	mov	r9, r2
 801e7a8:	7e27      	ldrb	r7, [r4, #24]
 801e7aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e7ac:	2f78      	cmp	r7, #120	; 0x78
 801e7ae:	4680      	mov	r8, r0
 801e7b0:	469a      	mov	sl, r3
 801e7b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e7b6:	d807      	bhi.n	801e7c8 <_printf_i+0x28>
 801e7b8:	2f62      	cmp	r7, #98	; 0x62
 801e7ba:	d80a      	bhi.n	801e7d2 <_printf_i+0x32>
 801e7bc:	2f00      	cmp	r7, #0
 801e7be:	f000 80d8 	beq.w	801e972 <_printf_i+0x1d2>
 801e7c2:	2f58      	cmp	r7, #88	; 0x58
 801e7c4:	f000 80a3 	beq.w	801e90e <_printf_i+0x16e>
 801e7c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e7cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e7d0:	e03a      	b.n	801e848 <_printf_i+0xa8>
 801e7d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e7d6:	2b15      	cmp	r3, #21
 801e7d8:	d8f6      	bhi.n	801e7c8 <_printf_i+0x28>
 801e7da:	a001      	add	r0, pc, #4	; (adr r0, 801e7e0 <_printf_i+0x40>)
 801e7dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801e7e0:	0801e839 	.word	0x0801e839
 801e7e4:	0801e84d 	.word	0x0801e84d
 801e7e8:	0801e7c9 	.word	0x0801e7c9
 801e7ec:	0801e7c9 	.word	0x0801e7c9
 801e7f0:	0801e7c9 	.word	0x0801e7c9
 801e7f4:	0801e7c9 	.word	0x0801e7c9
 801e7f8:	0801e84d 	.word	0x0801e84d
 801e7fc:	0801e7c9 	.word	0x0801e7c9
 801e800:	0801e7c9 	.word	0x0801e7c9
 801e804:	0801e7c9 	.word	0x0801e7c9
 801e808:	0801e7c9 	.word	0x0801e7c9
 801e80c:	0801e959 	.word	0x0801e959
 801e810:	0801e87d 	.word	0x0801e87d
 801e814:	0801e93b 	.word	0x0801e93b
 801e818:	0801e7c9 	.word	0x0801e7c9
 801e81c:	0801e7c9 	.word	0x0801e7c9
 801e820:	0801e97b 	.word	0x0801e97b
 801e824:	0801e7c9 	.word	0x0801e7c9
 801e828:	0801e87d 	.word	0x0801e87d
 801e82c:	0801e7c9 	.word	0x0801e7c9
 801e830:	0801e7c9 	.word	0x0801e7c9
 801e834:	0801e943 	.word	0x0801e943
 801e838:	680b      	ldr	r3, [r1, #0]
 801e83a:	1d1a      	adds	r2, r3, #4
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	600a      	str	r2, [r1, #0]
 801e840:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e848:	2301      	movs	r3, #1
 801e84a:	e0a3      	b.n	801e994 <_printf_i+0x1f4>
 801e84c:	6825      	ldr	r5, [r4, #0]
 801e84e:	6808      	ldr	r0, [r1, #0]
 801e850:	062e      	lsls	r6, r5, #24
 801e852:	f100 0304 	add.w	r3, r0, #4
 801e856:	d50a      	bpl.n	801e86e <_printf_i+0xce>
 801e858:	6805      	ldr	r5, [r0, #0]
 801e85a:	600b      	str	r3, [r1, #0]
 801e85c:	2d00      	cmp	r5, #0
 801e85e:	da03      	bge.n	801e868 <_printf_i+0xc8>
 801e860:	232d      	movs	r3, #45	; 0x2d
 801e862:	426d      	negs	r5, r5
 801e864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e868:	485e      	ldr	r0, [pc, #376]	; (801e9e4 <_printf_i+0x244>)
 801e86a:	230a      	movs	r3, #10
 801e86c:	e019      	b.n	801e8a2 <_printf_i+0x102>
 801e86e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801e872:	6805      	ldr	r5, [r0, #0]
 801e874:	600b      	str	r3, [r1, #0]
 801e876:	bf18      	it	ne
 801e878:	b22d      	sxthne	r5, r5
 801e87a:	e7ef      	b.n	801e85c <_printf_i+0xbc>
 801e87c:	680b      	ldr	r3, [r1, #0]
 801e87e:	6825      	ldr	r5, [r4, #0]
 801e880:	1d18      	adds	r0, r3, #4
 801e882:	6008      	str	r0, [r1, #0]
 801e884:	0628      	lsls	r0, r5, #24
 801e886:	d501      	bpl.n	801e88c <_printf_i+0xec>
 801e888:	681d      	ldr	r5, [r3, #0]
 801e88a:	e002      	b.n	801e892 <_printf_i+0xf2>
 801e88c:	0669      	lsls	r1, r5, #25
 801e88e:	d5fb      	bpl.n	801e888 <_printf_i+0xe8>
 801e890:	881d      	ldrh	r5, [r3, #0]
 801e892:	4854      	ldr	r0, [pc, #336]	; (801e9e4 <_printf_i+0x244>)
 801e894:	2f6f      	cmp	r7, #111	; 0x6f
 801e896:	bf0c      	ite	eq
 801e898:	2308      	moveq	r3, #8
 801e89a:	230a      	movne	r3, #10
 801e89c:	2100      	movs	r1, #0
 801e89e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e8a2:	6866      	ldr	r6, [r4, #4]
 801e8a4:	60a6      	str	r6, [r4, #8]
 801e8a6:	2e00      	cmp	r6, #0
 801e8a8:	bfa2      	ittt	ge
 801e8aa:	6821      	ldrge	r1, [r4, #0]
 801e8ac:	f021 0104 	bicge.w	r1, r1, #4
 801e8b0:	6021      	strge	r1, [r4, #0]
 801e8b2:	b90d      	cbnz	r5, 801e8b8 <_printf_i+0x118>
 801e8b4:	2e00      	cmp	r6, #0
 801e8b6:	d04d      	beq.n	801e954 <_printf_i+0x1b4>
 801e8b8:	4616      	mov	r6, r2
 801e8ba:	fbb5 f1f3 	udiv	r1, r5, r3
 801e8be:	fb03 5711 	mls	r7, r3, r1, r5
 801e8c2:	5dc7      	ldrb	r7, [r0, r7]
 801e8c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e8c8:	462f      	mov	r7, r5
 801e8ca:	42bb      	cmp	r3, r7
 801e8cc:	460d      	mov	r5, r1
 801e8ce:	d9f4      	bls.n	801e8ba <_printf_i+0x11a>
 801e8d0:	2b08      	cmp	r3, #8
 801e8d2:	d10b      	bne.n	801e8ec <_printf_i+0x14c>
 801e8d4:	6823      	ldr	r3, [r4, #0]
 801e8d6:	07df      	lsls	r7, r3, #31
 801e8d8:	d508      	bpl.n	801e8ec <_printf_i+0x14c>
 801e8da:	6923      	ldr	r3, [r4, #16]
 801e8dc:	6861      	ldr	r1, [r4, #4]
 801e8de:	4299      	cmp	r1, r3
 801e8e0:	bfde      	ittt	le
 801e8e2:	2330      	movle	r3, #48	; 0x30
 801e8e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e8e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e8ec:	1b92      	subs	r2, r2, r6
 801e8ee:	6122      	str	r2, [r4, #16]
 801e8f0:	f8cd a000 	str.w	sl, [sp]
 801e8f4:	464b      	mov	r3, r9
 801e8f6:	aa03      	add	r2, sp, #12
 801e8f8:	4621      	mov	r1, r4
 801e8fa:	4640      	mov	r0, r8
 801e8fc:	f7ff fee2 	bl	801e6c4 <_printf_common>
 801e900:	3001      	adds	r0, #1
 801e902:	d14c      	bne.n	801e99e <_printf_i+0x1fe>
 801e904:	f04f 30ff 	mov.w	r0, #4294967295
 801e908:	b004      	add	sp, #16
 801e90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e90e:	4835      	ldr	r0, [pc, #212]	; (801e9e4 <_printf_i+0x244>)
 801e910:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e914:	6823      	ldr	r3, [r4, #0]
 801e916:	680e      	ldr	r6, [r1, #0]
 801e918:	061f      	lsls	r7, r3, #24
 801e91a:	f856 5b04 	ldr.w	r5, [r6], #4
 801e91e:	600e      	str	r6, [r1, #0]
 801e920:	d514      	bpl.n	801e94c <_printf_i+0x1ac>
 801e922:	07d9      	lsls	r1, r3, #31
 801e924:	bf44      	itt	mi
 801e926:	f043 0320 	orrmi.w	r3, r3, #32
 801e92a:	6023      	strmi	r3, [r4, #0]
 801e92c:	b91d      	cbnz	r5, 801e936 <_printf_i+0x196>
 801e92e:	6823      	ldr	r3, [r4, #0]
 801e930:	f023 0320 	bic.w	r3, r3, #32
 801e934:	6023      	str	r3, [r4, #0]
 801e936:	2310      	movs	r3, #16
 801e938:	e7b0      	b.n	801e89c <_printf_i+0xfc>
 801e93a:	6823      	ldr	r3, [r4, #0]
 801e93c:	f043 0320 	orr.w	r3, r3, #32
 801e940:	6023      	str	r3, [r4, #0]
 801e942:	2378      	movs	r3, #120	; 0x78
 801e944:	4828      	ldr	r0, [pc, #160]	; (801e9e8 <_printf_i+0x248>)
 801e946:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e94a:	e7e3      	b.n	801e914 <_printf_i+0x174>
 801e94c:	065e      	lsls	r6, r3, #25
 801e94e:	bf48      	it	mi
 801e950:	b2ad      	uxthmi	r5, r5
 801e952:	e7e6      	b.n	801e922 <_printf_i+0x182>
 801e954:	4616      	mov	r6, r2
 801e956:	e7bb      	b.n	801e8d0 <_printf_i+0x130>
 801e958:	680b      	ldr	r3, [r1, #0]
 801e95a:	6826      	ldr	r6, [r4, #0]
 801e95c:	6960      	ldr	r0, [r4, #20]
 801e95e:	1d1d      	adds	r5, r3, #4
 801e960:	600d      	str	r5, [r1, #0]
 801e962:	0635      	lsls	r5, r6, #24
 801e964:	681b      	ldr	r3, [r3, #0]
 801e966:	d501      	bpl.n	801e96c <_printf_i+0x1cc>
 801e968:	6018      	str	r0, [r3, #0]
 801e96a:	e002      	b.n	801e972 <_printf_i+0x1d2>
 801e96c:	0671      	lsls	r1, r6, #25
 801e96e:	d5fb      	bpl.n	801e968 <_printf_i+0x1c8>
 801e970:	8018      	strh	r0, [r3, #0]
 801e972:	2300      	movs	r3, #0
 801e974:	6123      	str	r3, [r4, #16]
 801e976:	4616      	mov	r6, r2
 801e978:	e7ba      	b.n	801e8f0 <_printf_i+0x150>
 801e97a:	680b      	ldr	r3, [r1, #0]
 801e97c:	1d1a      	adds	r2, r3, #4
 801e97e:	600a      	str	r2, [r1, #0]
 801e980:	681e      	ldr	r6, [r3, #0]
 801e982:	6862      	ldr	r2, [r4, #4]
 801e984:	2100      	movs	r1, #0
 801e986:	4630      	mov	r0, r6
 801e988:	f7e1 fc52 	bl	8000230 <memchr>
 801e98c:	b108      	cbz	r0, 801e992 <_printf_i+0x1f2>
 801e98e:	1b80      	subs	r0, r0, r6
 801e990:	6060      	str	r0, [r4, #4]
 801e992:	6863      	ldr	r3, [r4, #4]
 801e994:	6123      	str	r3, [r4, #16]
 801e996:	2300      	movs	r3, #0
 801e998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e99c:	e7a8      	b.n	801e8f0 <_printf_i+0x150>
 801e99e:	6923      	ldr	r3, [r4, #16]
 801e9a0:	4632      	mov	r2, r6
 801e9a2:	4649      	mov	r1, r9
 801e9a4:	4640      	mov	r0, r8
 801e9a6:	47d0      	blx	sl
 801e9a8:	3001      	adds	r0, #1
 801e9aa:	d0ab      	beq.n	801e904 <_printf_i+0x164>
 801e9ac:	6823      	ldr	r3, [r4, #0]
 801e9ae:	079b      	lsls	r3, r3, #30
 801e9b0:	d413      	bmi.n	801e9da <_printf_i+0x23a>
 801e9b2:	68e0      	ldr	r0, [r4, #12]
 801e9b4:	9b03      	ldr	r3, [sp, #12]
 801e9b6:	4298      	cmp	r0, r3
 801e9b8:	bfb8      	it	lt
 801e9ba:	4618      	movlt	r0, r3
 801e9bc:	e7a4      	b.n	801e908 <_printf_i+0x168>
 801e9be:	2301      	movs	r3, #1
 801e9c0:	4632      	mov	r2, r6
 801e9c2:	4649      	mov	r1, r9
 801e9c4:	4640      	mov	r0, r8
 801e9c6:	47d0      	blx	sl
 801e9c8:	3001      	adds	r0, #1
 801e9ca:	d09b      	beq.n	801e904 <_printf_i+0x164>
 801e9cc:	3501      	adds	r5, #1
 801e9ce:	68e3      	ldr	r3, [r4, #12]
 801e9d0:	9903      	ldr	r1, [sp, #12]
 801e9d2:	1a5b      	subs	r3, r3, r1
 801e9d4:	42ab      	cmp	r3, r5
 801e9d6:	dcf2      	bgt.n	801e9be <_printf_i+0x21e>
 801e9d8:	e7eb      	b.n	801e9b2 <_printf_i+0x212>
 801e9da:	2500      	movs	r5, #0
 801e9dc:	f104 0619 	add.w	r6, r4, #25
 801e9e0:	e7f5      	b.n	801e9ce <_printf_i+0x22e>
 801e9e2:	bf00      	nop
 801e9e4:	08022de6 	.word	0x08022de6
 801e9e8:	08022df7 	.word	0x08022df7

0801e9ec <_sbrk_r>:
 801e9ec:	b538      	push	{r3, r4, r5, lr}
 801e9ee:	4d06      	ldr	r5, [pc, #24]	; (801ea08 <_sbrk_r+0x1c>)
 801e9f0:	2300      	movs	r3, #0
 801e9f2:	4604      	mov	r4, r0
 801e9f4:	4608      	mov	r0, r1
 801e9f6:	602b      	str	r3, [r5, #0]
 801e9f8:	f7fe ff6e 	bl	801d8d8 <_sbrk>
 801e9fc:	1c43      	adds	r3, r0, #1
 801e9fe:	d102      	bne.n	801ea06 <_sbrk_r+0x1a>
 801ea00:	682b      	ldr	r3, [r5, #0]
 801ea02:	b103      	cbz	r3, 801ea06 <_sbrk_r+0x1a>
 801ea04:	6023      	str	r3, [r4, #0]
 801ea06:	bd38      	pop	{r3, r4, r5, pc}
 801ea08:	20019220 	.word	0x20019220

0801ea0c <siprintf>:
 801ea0c:	b40e      	push	{r1, r2, r3}
 801ea0e:	b500      	push	{lr}
 801ea10:	b09c      	sub	sp, #112	; 0x70
 801ea12:	ab1d      	add	r3, sp, #116	; 0x74
 801ea14:	9002      	str	r0, [sp, #8]
 801ea16:	9006      	str	r0, [sp, #24]
 801ea18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ea1c:	4809      	ldr	r0, [pc, #36]	; (801ea44 <siprintf+0x38>)
 801ea1e:	9107      	str	r1, [sp, #28]
 801ea20:	9104      	str	r1, [sp, #16]
 801ea22:	4909      	ldr	r1, [pc, #36]	; (801ea48 <siprintf+0x3c>)
 801ea24:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea28:	9105      	str	r1, [sp, #20]
 801ea2a:	6800      	ldr	r0, [r0, #0]
 801ea2c:	9301      	str	r3, [sp, #4]
 801ea2e:	a902      	add	r1, sp, #8
 801ea30:	f002 ffca 	bl	80219c8 <_svfiprintf_r>
 801ea34:	9b02      	ldr	r3, [sp, #8]
 801ea36:	2200      	movs	r2, #0
 801ea38:	701a      	strb	r2, [r3, #0]
 801ea3a:	b01c      	add	sp, #112	; 0x70
 801ea3c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea40:	b003      	add	sp, #12
 801ea42:	4770      	bx	lr
 801ea44:	2000008c 	.word	0x2000008c
 801ea48:	ffff0208 	.word	0xffff0208

0801ea4c <__sread>:
 801ea4c:	b510      	push	{r4, lr}
 801ea4e:	460c      	mov	r4, r1
 801ea50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea54:	f003 f8b8 	bl	8021bc8 <_read_r>
 801ea58:	2800      	cmp	r0, #0
 801ea5a:	bfab      	itete	ge
 801ea5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ea5e:	89a3      	ldrhlt	r3, [r4, #12]
 801ea60:	181b      	addge	r3, r3, r0
 801ea62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ea66:	bfac      	ite	ge
 801ea68:	6563      	strge	r3, [r4, #84]	; 0x54
 801ea6a:	81a3      	strhlt	r3, [r4, #12]
 801ea6c:	bd10      	pop	{r4, pc}

0801ea6e <__swrite>:
 801ea6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea72:	461f      	mov	r7, r3
 801ea74:	898b      	ldrh	r3, [r1, #12]
 801ea76:	05db      	lsls	r3, r3, #23
 801ea78:	4605      	mov	r5, r0
 801ea7a:	460c      	mov	r4, r1
 801ea7c:	4616      	mov	r6, r2
 801ea7e:	d505      	bpl.n	801ea8c <__swrite+0x1e>
 801ea80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea84:	2302      	movs	r3, #2
 801ea86:	2200      	movs	r2, #0
 801ea88:	f002 fa58 	bl	8020f3c <_lseek_r>
 801ea8c:	89a3      	ldrh	r3, [r4, #12]
 801ea8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ea92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ea96:	81a3      	strh	r3, [r4, #12]
 801ea98:	4632      	mov	r2, r6
 801ea9a:	463b      	mov	r3, r7
 801ea9c:	4628      	mov	r0, r5
 801ea9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eaa2:	f000 bfad 	b.w	801fa00 <_write_r>

0801eaa6 <__sseek>:
 801eaa6:	b510      	push	{r4, lr}
 801eaa8:	460c      	mov	r4, r1
 801eaaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eaae:	f002 fa45 	bl	8020f3c <_lseek_r>
 801eab2:	1c43      	adds	r3, r0, #1
 801eab4:	89a3      	ldrh	r3, [r4, #12]
 801eab6:	bf15      	itete	ne
 801eab8:	6560      	strne	r0, [r4, #84]	; 0x54
 801eaba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801eabe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801eac2:	81a3      	strheq	r3, [r4, #12]
 801eac4:	bf18      	it	ne
 801eac6:	81a3      	strhne	r3, [r4, #12]
 801eac8:	bd10      	pop	{r4, pc}

0801eaca <__sclose>:
 801eaca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eace:	f001 b817 	b.w	801fb00 <_close_r>

0801ead2 <strcat>:
 801ead2:	b510      	push	{r4, lr}
 801ead4:	4602      	mov	r2, r0
 801ead6:	7814      	ldrb	r4, [r2, #0]
 801ead8:	4613      	mov	r3, r2
 801eada:	3201      	adds	r2, #1
 801eadc:	2c00      	cmp	r4, #0
 801eade:	d1fa      	bne.n	801ead6 <strcat+0x4>
 801eae0:	3b01      	subs	r3, #1
 801eae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801eae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801eaea:	2a00      	cmp	r2, #0
 801eaec:	d1f9      	bne.n	801eae2 <strcat+0x10>
 801eaee:	bd10      	pop	{r4, pc}

0801eaf0 <strchr>:
 801eaf0:	b2c9      	uxtb	r1, r1
 801eaf2:	4603      	mov	r3, r0
 801eaf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eaf8:	b11a      	cbz	r2, 801eb02 <strchr+0x12>
 801eafa:	428a      	cmp	r2, r1
 801eafc:	d1f9      	bne.n	801eaf2 <strchr+0x2>
 801eafe:	4618      	mov	r0, r3
 801eb00:	4770      	bx	lr
 801eb02:	2900      	cmp	r1, #0
 801eb04:	bf18      	it	ne
 801eb06:	2300      	movne	r3, #0
 801eb08:	e7f9      	b.n	801eafe <strchr+0xe>

0801eb0a <strncmp>:
 801eb0a:	b510      	push	{r4, lr}
 801eb0c:	b16a      	cbz	r2, 801eb2a <strncmp+0x20>
 801eb0e:	3901      	subs	r1, #1
 801eb10:	1884      	adds	r4, r0, r2
 801eb12:	f810 3b01 	ldrb.w	r3, [r0], #1
 801eb16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801eb1a:	4293      	cmp	r3, r2
 801eb1c:	d103      	bne.n	801eb26 <strncmp+0x1c>
 801eb1e:	42a0      	cmp	r0, r4
 801eb20:	d001      	beq.n	801eb26 <strncmp+0x1c>
 801eb22:	2b00      	cmp	r3, #0
 801eb24:	d1f5      	bne.n	801eb12 <strncmp+0x8>
 801eb26:	1a98      	subs	r0, r3, r2
 801eb28:	bd10      	pop	{r4, pc}
 801eb2a:	4610      	mov	r0, r2
 801eb2c:	e7fc      	b.n	801eb28 <strncmp+0x1e>

0801eb2e <strncpy>:
 801eb2e:	b510      	push	{r4, lr}
 801eb30:	3901      	subs	r1, #1
 801eb32:	4603      	mov	r3, r0
 801eb34:	b132      	cbz	r2, 801eb44 <strncpy+0x16>
 801eb36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801eb3a:	f803 4b01 	strb.w	r4, [r3], #1
 801eb3e:	3a01      	subs	r2, #1
 801eb40:	2c00      	cmp	r4, #0
 801eb42:	d1f7      	bne.n	801eb34 <strncpy+0x6>
 801eb44:	441a      	add	r2, r3
 801eb46:	2100      	movs	r1, #0
 801eb48:	4293      	cmp	r3, r2
 801eb4a:	d100      	bne.n	801eb4e <strncpy+0x20>
 801eb4c:	bd10      	pop	{r4, pc}
 801eb4e:	f803 1b01 	strb.w	r1, [r3], #1
 801eb52:	e7f9      	b.n	801eb48 <strncpy+0x1a>

0801eb54 <sulp>:
 801eb54:	b570      	push	{r4, r5, r6, lr}
 801eb56:	4604      	mov	r4, r0
 801eb58:	460d      	mov	r5, r1
 801eb5a:	ec45 4b10 	vmov	d0, r4, r5
 801eb5e:	4616      	mov	r6, r2
 801eb60:	f002 fd88 	bl	8021674 <__ulp>
 801eb64:	ec51 0b10 	vmov	r0, r1, d0
 801eb68:	b17e      	cbz	r6, 801eb8a <sulp+0x36>
 801eb6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801eb6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	dd09      	ble.n	801eb8a <sulp+0x36>
 801eb76:	051b      	lsls	r3, r3, #20
 801eb78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801eb7c:	2400      	movs	r4, #0
 801eb7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801eb82:	4622      	mov	r2, r4
 801eb84:	462b      	mov	r3, r5
 801eb86:	f7e1 fd5f 	bl	8000648 <__aeabi_dmul>
 801eb8a:	bd70      	pop	{r4, r5, r6, pc}
 801eb8c:	0000      	movs	r0, r0
	...

0801eb90 <_strtod_l>:
 801eb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb94:	b0a3      	sub	sp, #140	; 0x8c
 801eb96:	461f      	mov	r7, r3
 801eb98:	2300      	movs	r3, #0
 801eb9a:	931e      	str	r3, [sp, #120]	; 0x78
 801eb9c:	4ba4      	ldr	r3, [pc, #656]	; (801ee30 <_strtod_l+0x2a0>)
 801eb9e:	9219      	str	r2, [sp, #100]	; 0x64
 801eba0:	681b      	ldr	r3, [r3, #0]
 801eba2:	9307      	str	r3, [sp, #28]
 801eba4:	4604      	mov	r4, r0
 801eba6:	4618      	mov	r0, r3
 801eba8:	4688      	mov	r8, r1
 801ebaa:	f7e1 fb33 	bl	8000214 <strlen>
 801ebae:	f04f 0a00 	mov.w	sl, #0
 801ebb2:	4605      	mov	r5, r0
 801ebb4:	f04f 0b00 	mov.w	fp, #0
 801ebb8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ebbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ebbe:	781a      	ldrb	r2, [r3, #0]
 801ebc0:	2a2b      	cmp	r2, #43	; 0x2b
 801ebc2:	d04c      	beq.n	801ec5e <_strtod_l+0xce>
 801ebc4:	d839      	bhi.n	801ec3a <_strtod_l+0xaa>
 801ebc6:	2a0d      	cmp	r2, #13
 801ebc8:	d832      	bhi.n	801ec30 <_strtod_l+0xa0>
 801ebca:	2a08      	cmp	r2, #8
 801ebcc:	d832      	bhi.n	801ec34 <_strtod_l+0xa4>
 801ebce:	2a00      	cmp	r2, #0
 801ebd0:	d03c      	beq.n	801ec4c <_strtod_l+0xbc>
 801ebd2:	2300      	movs	r3, #0
 801ebd4:	930e      	str	r3, [sp, #56]	; 0x38
 801ebd6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ebd8:	7833      	ldrb	r3, [r6, #0]
 801ebda:	2b30      	cmp	r3, #48	; 0x30
 801ebdc:	f040 80b4 	bne.w	801ed48 <_strtod_l+0x1b8>
 801ebe0:	7873      	ldrb	r3, [r6, #1]
 801ebe2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ebe6:	2b58      	cmp	r3, #88	; 0x58
 801ebe8:	d16c      	bne.n	801ecc4 <_strtod_l+0x134>
 801ebea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ebec:	9301      	str	r3, [sp, #4]
 801ebee:	ab1e      	add	r3, sp, #120	; 0x78
 801ebf0:	9702      	str	r7, [sp, #8]
 801ebf2:	9300      	str	r3, [sp, #0]
 801ebf4:	4a8f      	ldr	r2, [pc, #572]	; (801ee34 <_strtod_l+0x2a4>)
 801ebf6:	ab1f      	add	r3, sp, #124	; 0x7c
 801ebf8:	a91d      	add	r1, sp, #116	; 0x74
 801ebfa:	4620      	mov	r0, r4
 801ebfc:	f001 fe82 	bl	8020904 <__gethex>
 801ec00:	f010 0707 	ands.w	r7, r0, #7
 801ec04:	4605      	mov	r5, r0
 801ec06:	d005      	beq.n	801ec14 <_strtod_l+0x84>
 801ec08:	2f06      	cmp	r7, #6
 801ec0a:	d12a      	bne.n	801ec62 <_strtod_l+0xd2>
 801ec0c:	3601      	adds	r6, #1
 801ec0e:	2300      	movs	r3, #0
 801ec10:	961d      	str	r6, [sp, #116]	; 0x74
 801ec12:	930e      	str	r3, [sp, #56]	; 0x38
 801ec14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	f040 8596 	bne.w	801f748 <_strtod_l+0xbb8>
 801ec1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec1e:	b1db      	cbz	r3, 801ec58 <_strtod_l+0xc8>
 801ec20:	4652      	mov	r2, sl
 801ec22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ec26:	ec43 2b10 	vmov	d0, r2, r3
 801ec2a:	b023      	add	sp, #140	; 0x8c
 801ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec30:	2a20      	cmp	r2, #32
 801ec32:	d1ce      	bne.n	801ebd2 <_strtod_l+0x42>
 801ec34:	3301      	adds	r3, #1
 801ec36:	931d      	str	r3, [sp, #116]	; 0x74
 801ec38:	e7c0      	b.n	801ebbc <_strtod_l+0x2c>
 801ec3a:	2a2d      	cmp	r2, #45	; 0x2d
 801ec3c:	d1c9      	bne.n	801ebd2 <_strtod_l+0x42>
 801ec3e:	2201      	movs	r2, #1
 801ec40:	920e      	str	r2, [sp, #56]	; 0x38
 801ec42:	1c5a      	adds	r2, r3, #1
 801ec44:	921d      	str	r2, [sp, #116]	; 0x74
 801ec46:	785b      	ldrb	r3, [r3, #1]
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	d1c4      	bne.n	801ebd6 <_strtod_l+0x46>
 801ec4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ec4e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	f040 8576 	bne.w	801f744 <_strtod_l+0xbb4>
 801ec58:	4652      	mov	r2, sl
 801ec5a:	465b      	mov	r3, fp
 801ec5c:	e7e3      	b.n	801ec26 <_strtod_l+0x96>
 801ec5e:	2200      	movs	r2, #0
 801ec60:	e7ee      	b.n	801ec40 <_strtod_l+0xb0>
 801ec62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ec64:	b13a      	cbz	r2, 801ec76 <_strtod_l+0xe6>
 801ec66:	2135      	movs	r1, #53	; 0x35
 801ec68:	a820      	add	r0, sp, #128	; 0x80
 801ec6a:	f002 fe0e 	bl	802188a <__copybits>
 801ec6e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ec70:	4620      	mov	r0, r4
 801ec72:	f002 f9d3 	bl	802101c <_Bfree>
 801ec76:	3f01      	subs	r7, #1
 801ec78:	2f05      	cmp	r7, #5
 801ec7a:	d807      	bhi.n	801ec8c <_strtod_l+0xfc>
 801ec7c:	e8df f007 	tbb	[pc, r7]
 801ec80:	1d180b0e 	.word	0x1d180b0e
 801ec84:	030e      	.short	0x030e
 801ec86:	f04f 0b00 	mov.w	fp, #0
 801ec8a:	46da      	mov	sl, fp
 801ec8c:	0728      	lsls	r0, r5, #28
 801ec8e:	d5c1      	bpl.n	801ec14 <_strtod_l+0x84>
 801ec90:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801ec94:	e7be      	b.n	801ec14 <_strtod_l+0x84>
 801ec96:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801ec9a:	e7f7      	b.n	801ec8c <_strtod_l+0xfc>
 801ec9c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801eca0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801eca2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801eca6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ecaa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ecae:	e7ed      	b.n	801ec8c <_strtod_l+0xfc>
 801ecb0:	f8df b184 	ldr.w	fp, [pc, #388]	; 801ee38 <_strtod_l+0x2a8>
 801ecb4:	f04f 0a00 	mov.w	sl, #0
 801ecb8:	e7e8      	b.n	801ec8c <_strtod_l+0xfc>
 801ecba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ecbe:	f04f 3aff 	mov.w	sl, #4294967295
 801ecc2:	e7e3      	b.n	801ec8c <_strtod_l+0xfc>
 801ecc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ecc6:	1c5a      	adds	r2, r3, #1
 801ecc8:	921d      	str	r2, [sp, #116]	; 0x74
 801ecca:	785b      	ldrb	r3, [r3, #1]
 801eccc:	2b30      	cmp	r3, #48	; 0x30
 801ecce:	d0f9      	beq.n	801ecc4 <_strtod_l+0x134>
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	d09f      	beq.n	801ec14 <_strtod_l+0x84>
 801ecd4:	2301      	movs	r3, #1
 801ecd6:	f04f 0900 	mov.w	r9, #0
 801ecda:	9304      	str	r3, [sp, #16]
 801ecdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ecde:	930a      	str	r3, [sp, #40]	; 0x28
 801ece0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ece4:	464f      	mov	r7, r9
 801ece6:	220a      	movs	r2, #10
 801ece8:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ecea:	7806      	ldrb	r6, [r0, #0]
 801ecec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ecf0:	b2d9      	uxtb	r1, r3
 801ecf2:	2909      	cmp	r1, #9
 801ecf4:	d92a      	bls.n	801ed4c <_strtod_l+0x1bc>
 801ecf6:	9907      	ldr	r1, [sp, #28]
 801ecf8:	462a      	mov	r2, r5
 801ecfa:	f7ff ff06 	bl	801eb0a <strncmp>
 801ecfe:	b398      	cbz	r0, 801ed68 <_strtod_l+0x1d8>
 801ed00:	2000      	movs	r0, #0
 801ed02:	4633      	mov	r3, r6
 801ed04:	463d      	mov	r5, r7
 801ed06:	9007      	str	r0, [sp, #28]
 801ed08:	4602      	mov	r2, r0
 801ed0a:	2b65      	cmp	r3, #101	; 0x65
 801ed0c:	d001      	beq.n	801ed12 <_strtod_l+0x182>
 801ed0e:	2b45      	cmp	r3, #69	; 0x45
 801ed10:	d118      	bne.n	801ed44 <_strtod_l+0x1b4>
 801ed12:	b91d      	cbnz	r5, 801ed1c <_strtod_l+0x18c>
 801ed14:	9b04      	ldr	r3, [sp, #16]
 801ed16:	4303      	orrs	r3, r0
 801ed18:	d098      	beq.n	801ec4c <_strtod_l+0xbc>
 801ed1a:	2500      	movs	r5, #0
 801ed1c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801ed20:	f108 0301 	add.w	r3, r8, #1
 801ed24:	931d      	str	r3, [sp, #116]	; 0x74
 801ed26:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ed2a:	2b2b      	cmp	r3, #43	; 0x2b
 801ed2c:	d075      	beq.n	801ee1a <_strtod_l+0x28a>
 801ed2e:	2b2d      	cmp	r3, #45	; 0x2d
 801ed30:	d07b      	beq.n	801ee2a <_strtod_l+0x29a>
 801ed32:	f04f 0c00 	mov.w	ip, #0
 801ed36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801ed3a:	2909      	cmp	r1, #9
 801ed3c:	f240 8082 	bls.w	801ee44 <_strtod_l+0x2b4>
 801ed40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ed44:	2600      	movs	r6, #0
 801ed46:	e09d      	b.n	801ee84 <_strtod_l+0x2f4>
 801ed48:	2300      	movs	r3, #0
 801ed4a:	e7c4      	b.n	801ecd6 <_strtod_l+0x146>
 801ed4c:	2f08      	cmp	r7, #8
 801ed4e:	bfd8      	it	le
 801ed50:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801ed52:	f100 0001 	add.w	r0, r0, #1
 801ed56:	bfda      	itte	le
 801ed58:	fb02 3301 	mlale	r3, r2, r1, r3
 801ed5c:	9309      	strle	r3, [sp, #36]	; 0x24
 801ed5e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801ed62:	3701      	adds	r7, #1
 801ed64:	901d      	str	r0, [sp, #116]	; 0x74
 801ed66:	e7bf      	b.n	801ece8 <_strtod_l+0x158>
 801ed68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ed6a:	195a      	adds	r2, r3, r5
 801ed6c:	921d      	str	r2, [sp, #116]	; 0x74
 801ed6e:	5d5b      	ldrb	r3, [r3, r5]
 801ed70:	2f00      	cmp	r7, #0
 801ed72:	d037      	beq.n	801ede4 <_strtod_l+0x254>
 801ed74:	9007      	str	r0, [sp, #28]
 801ed76:	463d      	mov	r5, r7
 801ed78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801ed7c:	2a09      	cmp	r2, #9
 801ed7e:	d912      	bls.n	801eda6 <_strtod_l+0x216>
 801ed80:	2201      	movs	r2, #1
 801ed82:	e7c2      	b.n	801ed0a <_strtod_l+0x17a>
 801ed84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ed86:	1c5a      	adds	r2, r3, #1
 801ed88:	921d      	str	r2, [sp, #116]	; 0x74
 801ed8a:	785b      	ldrb	r3, [r3, #1]
 801ed8c:	3001      	adds	r0, #1
 801ed8e:	2b30      	cmp	r3, #48	; 0x30
 801ed90:	d0f8      	beq.n	801ed84 <_strtod_l+0x1f4>
 801ed92:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801ed96:	2a08      	cmp	r2, #8
 801ed98:	f200 84db 	bhi.w	801f752 <_strtod_l+0xbc2>
 801ed9c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ed9e:	9007      	str	r0, [sp, #28]
 801eda0:	2000      	movs	r0, #0
 801eda2:	920a      	str	r2, [sp, #40]	; 0x28
 801eda4:	4605      	mov	r5, r0
 801eda6:	3b30      	subs	r3, #48	; 0x30
 801eda8:	f100 0201 	add.w	r2, r0, #1
 801edac:	d014      	beq.n	801edd8 <_strtod_l+0x248>
 801edae:	9907      	ldr	r1, [sp, #28]
 801edb0:	4411      	add	r1, r2
 801edb2:	9107      	str	r1, [sp, #28]
 801edb4:	462a      	mov	r2, r5
 801edb6:	eb00 0e05 	add.w	lr, r0, r5
 801edba:	210a      	movs	r1, #10
 801edbc:	4572      	cmp	r2, lr
 801edbe:	d113      	bne.n	801ede8 <_strtod_l+0x258>
 801edc0:	182a      	adds	r2, r5, r0
 801edc2:	2a08      	cmp	r2, #8
 801edc4:	f105 0501 	add.w	r5, r5, #1
 801edc8:	4405      	add	r5, r0
 801edca:	dc1c      	bgt.n	801ee06 <_strtod_l+0x276>
 801edcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801edce:	220a      	movs	r2, #10
 801edd0:	fb02 3301 	mla	r3, r2, r1, r3
 801edd4:	9309      	str	r3, [sp, #36]	; 0x24
 801edd6:	2200      	movs	r2, #0
 801edd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801edda:	1c59      	adds	r1, r3, #1
 801eddc:	911d      	str	r1, [sp, #116]	; 0x74
 801edde:	785b      	ldrb	r3, [r3, #1]
 801ede0:	4610      	mov	r0, r2
 801ede2:	e7c9      	b.n	801ed78 <_strtod_l+0x1e8>
 801ede4:	4638      	mov	r0, r7
 801ede6:	e7d2      	b.n	801ed8e <_strtod_l+0x1fe>
 801ede8:	2a08      	cmp	r2, #8
 801edea:	dc04      	bgt.n	801edf6 <_strtod_l+0x266>
 801edec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801edee:	434e      	muls	r6, r1
 801edf0:	9609      	str	r6, [sp, #36]	; 0x24
 801edf2:	3201      	adds	r2, #1
 801edf4:	e7e2      	b.n	801edbc <_strtod_l+0x22c>
 801edf6:	f102 0c01 	add.w	ip, r2, #1
 801edfa:	f1bc 0f10 	cmp.w	ip, #16
 801edfe:	bfd8      	it	le
 801ee00:	fb01 f909 	mulle.w	r9, r1, r9
 801ee04:	e7f5      	b.n	801edf2 <_strtod_l+0x262>
 801ee06:	2d10      	cmp	r5, #16
 801ee08:	bfdc      	itt	le
 801ee0a:	220a      	movle	r2, #10
 801ee0c:	fb02 3909 	mlale	r9, r2, r9, r3
 801ee10:	e7e1      	b.n	801edd6 <_strtod_l+0x246>
 801ee12:	2300      	movs	r3, #0
 801ee14:	9307      	str	r3, [sp, #28]
 801ee16:	2201      	movs	r2, #1
 801ee18:	e77c      	b.n	801ed14 <_strtod_l+0x184>
 801ee1a:	f04f 0c00 	mov.w	ip, #0
 801ee1e:	f108 0302 	add.w	r3, r8, #2
 801ee22:	931d      	str	r3, [sp, #116]	; 0x74
 801ee24:	f898 3002 	ldrb.w	r3, [r8, #2]
 801ee28:	e785      	b.n	801ed36 <_strtod_l+0x1a6>
 801ee2a:	f04f 0c01 	mov.w	ip, #1
 801ee2e:	e7f6      	b.n	801ee1e <_strtod_l+0x28e>
 801ee30:	08022f7c 	.word	0x08022f7c
 801ee34:	08022e08 	.word	0x08022e08
 801ee38:	7ff00000 	.word	0x7ff00000
 801ee3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ee3e:	1c59      	adds	r1, r3, #1
 801ee40:	911d      	str	r1, [sp, #116]	; 0x74
 801ee42:	785b      	ldrb	r3, [r3, #1]
 801ee44:	2b30      	cmp	r3, #48	; 0x30
 801ee46:	d0f9      	beq.n	801ee3c <_strtod_l+0x2ac>
 801ee48:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801ee4c:	2908      	cmp	r1, #8
 801ee4e:	f63f af79 	bhi.w	801ed44 <_strtod_l+0x1b4>
 801ee52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801ee56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ee58:	9308      	str	r3, [sp, #32]
 801ee5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ee5c:	1c59      	adds	r1, r3, #1
 801ee5e:	911d      	str	r1, [sp, #116]	; 0x74
 801ee60:	785b      	ldrb	r3, [r3, #1]
 801ee62:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801ee66:	2e09      	cmp	r6, #9
 801ee68:	d937      	bls.n	801eeda <_strtod_l+0x34a>
 801ee6a:	9e08      	ldr	r6, [sp, #32]
 801ee6c:	1b89      	subs	r1, r1, r6
 801ee6e:	2908      	cmp	r1, #8
 801ee70:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801ee74:	dc02      	bgt.n	801ee7c <_strtod_l+0x2ec>
 801ee76:	4576      	cmp	r6, lr
 801ee78:	bfa8      	it	ge
 801ee7a:	4676      	movge	r6, lr
 801ee7c:	f1bc 0f00 	cmp.w	ip, #0
 801ee80:	d000      	beq.n	801ee84 <_strtod_l+0x2f4>
 801ee82:	4276      	negs	r6, r6
 801ee84:	2d00      	cmp	r5, #0
 801ee86:	d14f      	bne.n	801ef28 <_strtod_l+0x398>
 801ee88:	9904      	ldr	r1, [sp, #16]
 801ee8a:	4301      	orrs	r1, r0
 801ee8c:	f47f aec2 	bne.w	801ec14 <_strtod_l+0x84>
 801ee90:	2a00      	cmp	r2, #0
 801ee92:	f47f aedb 	bne.w	801ec4c <_strtod_l+0xbc>
 801ee96:	2b69      	cmp	r3, #105	; 0x69
 801ee98:	d027      	beq.n	801eeea <_strtod_l+0x35a>
 801ee9a:	dc24      	bgt.n	801eee6 <_strtod_l+0x356>
 801ee9c:	2b49      	cmp	r3, #73	; 0x49
 801ee9e:	d024      	beq.n	801eeea <_strtod_l+0x35a>
 801eea0:	2b4e      	cmp	r3, #78	; 0x4e
 801eea2:	f47f aed3 	bne.w	801ec4c <_strtod_l+0xbc>
 801eea6:	499e      	ldr	r1, [pc, #632]	; (801f120 <_strtod_l+0x590>)
 801eea8:	a81d      	add	r0, sp, #116	; 0x74
 801eeaa:	f001 ff83 	bl	8020db4 <__match>
 801eeae:	2800      	cmp	r0, #0
 801eeb0:	f43f aecc 	beq.w	801ec4c <_strtod_l+0xbc>
 801eeb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801eeb6:	781b      	ldrb	r3, [r3, #0]
 801eeb8:	2b28      	cmp	r3, #40	; 0x28
 801eeba:	d12d      	bne.n	801ef18 <_strtod_l+0x388>
 801eebc:	4999      	ldr	r1, [pc, #612]	; (801f124 <_strtod_l+0x594>)
 801eebe:	aa20      	add	r2, sp, #128	; 0x80
 801eec0:	a81d      	add	r0, sp, #116	; 0x74
 801eec2:	f001 ff8b 	bl	8020ddc <__hexnan>
 801eec6:	2805      	cmp	r0, #5
 801eec8:	d126      	bne.n	801ef18 <_strtod_l+0x388>
 801eeca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eecc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801eed0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801eed4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801eed8:	e69c      	b.n	801ec14 <_strtod_l+0x84>
 801eeda:	210a      	movs	r1, #10
 801eedc:	fb01 3e0e 	mla	lr, r1, lr, r3
 801eee0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801eee4:	e7b9      	b.n	801ee5a <_strtod_l+0x2ca>
 801eee6:	2b6e      	cmp	r3, #110	; 0x6e
 801eee8:	e7db      	b.n	801eea2 <_strtod_l+0x312>
 801eeea:	498f      	ldr	r1, [pc, #572]	; (801f128 <_strtod_l+0x598>)
 801eeec:	a81d      	add	r0, sp, #116	; 0x74
 801eeee:	f001 ff61 	bl	8020db4 <__match>
 801eef2:	2800      	cmp	r0, #0
 801eef4:	f43f aeaa 	beq.w	801ec4c <_strtod_l+0xbc>
 801eef8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801eefa:	498c      	ldr	r1, [pc, #560]	; (801f12c <_strtod_l+0x59c>)
 801eefc:	3b01      	subs	r3, #1
 801eefe:	a81d      	add	r0, sp, #116	; 0x74
 801ef00:	931d      	str	r3, [sp, #116]	; 0x74
 801ef02:	f001 ff57 	bl	8020db4 <__match>
 801ef06:	b910      	cbnz	r0, 801ef0e <_strtod_l+0x37e>
 801ef08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ef0a:	3301      	adds	r3, #1
 801ef0c:	931d      	str	r3, [sp, #116]	; 0x74
 801ef0e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801f13c <_strtod_l+0x5ac>
 801ef12:	f04f 0a00 	mov.w	sl, #0
 801ef16:	e67d      	b.n	801ec14 <_strtod_l+0x84>
 801ef18:	4885      	ldr	r0, [pc, #532]	; (801f130 <_strtod_l+0x5a0>)
 801ef1a:	f002 fe69 	bl	8021bf0 <nan>
 801ef1e:	ed8d 0b04 	vstr	d0, [sp, #16]
 801ef22:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801ef26:	e675      	b.n	801ec14 <_strtod_l+0x84>
 801ef28:	9b07      	ldr	r3, [sp, #28]
 801ef2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ef2c:	1af3      	subs	r3, r6, r3
 801ef2e:	2f00      	cmp	r7, #0
 801ef30:	bf08      	it	eq
 801ef32:	462f      	moveq	r7, r5
 801ef34:	2d10      	cmp	r5, #16
 801ef36:	9308      	str	r3, [sp, #32]
 801ef38:	46a8      	mov	r8, r5
 801ef3a:	bfa8      	it	ge
 801ef3c:	f04f 0810 	movge.w	r8, #16
 801ef40:	f7e1 fb08 	bl	8000554 <__aeabi_ui2d>
 801ef44:	2d09      	cmp	r5, #9
 801ef46:	4682      	mov	sl, r0
 801ef48:	468b      	mov	fp, r1
 801ef4a:	dd13      	ble.n	801ef74 <_strtod_l+0x3e4>
 801ef4c:	4b79      	ldr	r3, [pc, #484]	; (801f134 <_strtod_l+0x5a4>)
 801ef4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ef52:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ef56:	f7e1 fb77 	bl	8000648 <__aeabi_dmul>
 801ef5a:	4682      	mov	sl, r0
 801ef5c:	4648      	mov	r0, r9
 801ef5e:	468b      	mov	fp, r1
 801ef60:	f7e1 faf8 	bl	8000554 <__aeabi_ui2d>
 801ef64:	4602      	mov	r2, r0
 801ef66:	460b      	mov	r3, r1
 801ef68:	4650      	mov	r0, sl
 801ef6a:	4659      	mov	r1, fp
 801ef6c:	f7e1 f9b6 	bl	80002dc <__adddf3>
 801ef70:	4682      	mov	sl, r0
 801ef72:	468b      	mov	fp, r1
 801ef74:	2d0f      	cmp	r5, #15
 801ef76:	dc38      	bgt.n	801efea <_strtod_l+0x45a>
 801ef78:	9b08      	ldr	r3, [sp, #32]
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	f43f ae4a 	beq.w	801ec14 <_strtod_l+0x84>
 801ef80:	dd24      	ble.n	801efcc <_strtod_l+0x43c>
 801ef82:	2b16      	cmp	r3, #22
 801ef84:	dc0b      	bgt.n	801ef9e <_strtod_l+0x40e>
 801ef86:	4d6b      	ldr	r5, [pc, #428]	; (801f134 <_strtod_l+0x5a4>)
 801ef88:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801ef8c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801ef90:	4652      	mov	r2, sl
 801ef92:	465b      	mov	r3, fp
 801ef94:	f7e1 fb58 	bl	8000648 <__aeabi_dmul>
 801ef98:	4682      	mov	sl, r0
 801ef9a:	468b      	mov	fp, r1
 801ef9c:	e63a      	b.n	801ec14 <_strtod_l+0x84>
 801ef9e:	9a08      	ldr	r2, [sp, #32]
 801efa0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801efa4:	4293      	cmp	r3, r2
 801efa6:	db20      	blt.n	801efea <_strtod_l+0x45a>
 801efa8:	4c62      	ldr	r4, [pc, #392]	; (801f134 <_strtod_l+0x5a4>)
 801efaa:	f1c5 050f 	rsb	r5, r5, #15
 801efae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801efb2:	4652      	mov	r2, sl
 801efb4:	465b      	mov	r3, fp
 801efb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801efba:	f7e1 fb45 	bl	8000648 <__aeabi_dmul>
 801efbe:	9b08      	ldr	r3, [sp, #32]
 801efc0:	1b5d      	subs	r5, r3, r5
 801efc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801efc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801efca:	e7e3      	b.n	801ef94 <_strtod_l+0x404>
 801efcc:	9b08      	ldr	r3, [sp, #32]
 801efce:	3316      	adds	r3, #22
 801efd0:	db0b      	blt.n	801efea <_strtod_l+0x45a>
 801efd2:	9b07      	ldr	r3, [sp, #28]
 801efd4:	4a57      	ldr	r2, [pc, #348]	; (801f134 <_strtod_l+0x5a4>)
 801efd6:	1b9e      	subs	r6, r3, r6
 801efd8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801efdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801efe0:	4650      	mov	r0, sl
 801efe2:	4659      	mov	r1, fp
 801efe4:	f7e1 fc5a 	bl	800089c <__aeabi_ddiv>
 801efe8:	e7d6      	b.n	801ef98 <_strtod_l+0x408>
 801efea:	9b08      	ldr	r3, [sp, #32]
 801efec:	eba5 0808 	sub.w	r8, r5, r8
 801eff0:	4498      	add	r8, r3
 801eff2:	f1b8 0f00 	cmp.w	r8, #0
 801eff6:	dd71      	ble.n	801f0dc <_strtod_l+0x54c>
 801eff8:	f018 030f 	ands.w	r3, r8, #15
 801effc:	d00a      	beq.n	801f014 <_strtod_l+0x484>
 801effe:	494d      	ldr	r1, [pc, #308]	; (801f134 <_strtod_l+0x5a4>)
 801f000:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801f004:	4652      	mov	r2, sl
 801f006:	465b      	mov	r3, fp
 801f008:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f00c:	f7e1 fb1c 	bl	8000648 <__aeabi_dmul>
 801f010:	4682      	mov	sl, r0
 801f012:	468b      	mov	fp, r1
 801f014:	f038 080f 	bics.w	r8, r8, #15
 801f018:	d04d      	beq.n	801f0b6 <_strtod_l+0x526>
 801f01a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801f01e:	dd22      	ble.n	801f066 <_strtod_l+0x4d6>
 801f020:	2500      	movs	r5, #0
 801f022:	462e      	mov	r6, r5
 801f024:	9509      	str	r5, [sp, #36]	; 0x24
 801f026:	9507      	str	r5, [sp, #28]
 801f028:	2322      	movs	r3, #34	; 0x22
 801f02a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801f13c <_strtod_l+0x5ac>
 801f02e:	6023      	str	r3, [r4, #0]
 801f030:	f04f 0a00 	mov.w	sl, #0
 801f034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f036:	2b00      	cmp	r3, #0
 801f038:	f43f adec 	beq.w	801ec14 <_strtod_l+0x84>
 801f03c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f03e:	4620      	mov	r0, r4
 801f040:	f001 ffec 	bl	802101c <_Bfree>
 801f044:	9907      	ldr	r1, [sp, #28]
 801f046:	4620      	mov	r0, r4
 801f048:	f001 ffe8 	bl	802101c <_Bfree>
 801f04c:	4631      	mov	r1, r6
 801f04e:	4620      	mov	r0, r4
 801f050:	f001 ffe4 	bl	802101c <_Bfree>
 801f054:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f056:	4620      	mov	r0, r4
 801f058:	f001 ffe0 	bl	802101c <_Bfree>
 801f05c:	4629      	mov	r1, r5
 801f05e:	4620      	mov	r0, r4
 801f060:	f001 ffdc 	bl	802101c <_Bfree>
 801f064:	e5d6      	b.n	801ec14 <_strtod_l+0x84>
 801f066:	2300      	movs	r3, #0
 801f068:	ea4f 1828 	mov.w	r8, r8, asr #4
 801f06c:	4650      	mov	r0, sl
 801f06e:	4659      	mov	r1, fp
 801f070:	4699      	mov	r9, r3
 801f072:	f1b8 0f01 	cmp.w	r8, #1
 801f076:	dc21      	bgt.n	801f0bc <_strtod_l+0x52c>
 801f078:	b10b      	cbz	r3, 801f07e <_strtod_l+0x4ee>
 801f07a:	4682      	mov	sl, r0
 801f07c:	468b      	mov	fp, r1
 801f07e:	4b2e      	ldr	r3, [pc, #184]	; (801f138 <_strtod_l+0x5a8>)
 801f080:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801f084:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801f088:	4652      	mov	r2, sl
 801f08a:	465b      	mov	r3, fp
 801f08c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801f090:	f7e1 fada 	bl	8000648 <__aeabi_dmul>
 801f094:	4b29      	ldr	r3, [pc, #164]	; (801f13c <_strtod_l+0x5ac>)
 801f096:	460a      	mov	r2, r1
 801f098:	400b      	ands	r3, r1
 801f09a:	4929      	ldr	r1, [pc, #164]	; (801f140 <_strtod_l+0x5b0>)
 801f09c:	428b      	cmp	r3, r1
 801f09e:	4682      	mov	sl, r0
 801f0a0:	d8be      	bhi.n	801f020 <_strtod_l+0x490>
 801f0a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801f0a6:	428b      	cmp	r3, r1
 801f0a8:	bf86      	itte	hi
 801f0aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801f144 <_strtod_l+0x5b4>
 801f0ae:	f04f 3aff 	movhi.w	sl, #4294967295
 801f0b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801f0b6:	2300      	movs	r3, #0
 801f0b8:	9304      	str	r3, [sp, #16]
 801f0ba:	e081      	b.n	801f1c0 <_strtod_l+0x630>
 801f0bc:	f018 0f01 	tst.w	r8, #1
 801f0c0:	d007      	beq.n	801f0d2 <_strtod_l+0x542>
 801f0c2:	4b1d      	ldr	r3, [pc, #116]	; (801f138 <_strtod_l+0x5a8>)
 801f0c4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801f0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0cc:	f7e1 fabc 	bl	8000648 <__aeabi_dmul>
 801f0d0:	2301      	movs	r3, #1
 801f0d2:	f109 0901 	add.w	r9, r9, #1
 801f0d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 801f0da:	e7ca      	b.n	801f072 <_strtod_l+0x4e2>
 801f0dc:	d0eb      	beq.n	801f0b6 <_strtod_l+0x526>
 801f0de:	f1c8 0800 	rsb	r8, r8, #0
 801f0e2:	f018 020f 	ands.w	r2, r8, #15
 801f0e6:	d00a      	beq.n	801f0fe <_strtod_l+0x56e>
 801f0e8:	4b12      	ldr	r3, [pc, #72]	; (801f134 <_strtod_l+0x5a4>)
 801f0ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f0ee:	4650      	mov	r0, sl
 801f0f0:	4659      	mov	r1, fp
 801f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0f6:	f7e1 fbd1 	bl	800089c <__aeabi_ddiv>
 801f0fa:	4682      	mov	sl, r0
 801f0fc:	468b      	mov	fp, r1
 801f0fe:	ea5f 1828 	movs.w	r8, r8, asr #4
 801f102:	d0d8      	beq.n	801f0b6 <_strtod_l+0x526>
 801f104:	f1b8 0f1f 	cmp.w	r8, #31
 801f108:	dd1e      	ble.n	801f148 <_strtod_l+0x5b8>
 801f10a:	2500      	movs	r5, #0
 801f10c:	462e      	mov	r6, r5
 801f10e:	9509      	str	r5, [sp, #36]	; 0x24
 801f110:	9507      	str	r5, [sp, #28]
 801f112:	2322      	movs	r3, #34	; 0x22
 801f114:	f04f 0a00 	mov.w	sl, #0
 801f118:	f04f 0b00 	mov.w	fp, #0
 801f11c:	6023      	str	r3, [r4, #0]
 801f11e:	e789      	b.n	801f034 <_strtod_l+0x4a4>
 801f120:	08022de1 	.word	0x08022de1
 801f124:	08022e1c 	.word	0x08022e1c
 801f128:	08022dd9 	.word	0x08022dd9
 801f12c:	08022e80 	.word	0x08022e80
 801f130:	08023138 	.word	0x08023138
 801f134:	08023018 	.word	0x08023018
 801f138:	08022ff0 	.word	0x08022ff0
 801f13c:	7ff00000 	.word	0x7ff00000
 801f140:	7ca00000 	.word	0x7ca00000
 801f144:	7fefffff 	.word	0x7fefffff
 801f148:	f018 0310 	ands.w	r3, r8, #16
 801f14c:	bf18      	it	ne
 801f14e:	236a      	movne	r3, #106	; 0x6a
 801f150:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801f508 <_strtod_l+0x978>
 801f154:	9304      	str	r3, [sp, #16]
 801f156:	4650      	mov	r0, sl
 801f158:	4659      	mov	r1, fp
 801f15a:	2300      	movs	r3, #0
 801f15c:	f018 0f01 	tst.w	r8, #1
 801f160:	d004      	beq.n	801f16c <_strtod_l+0x5dc>
 801f162:	e9d9 2300 	ldrd	r2, r3, [r9]
 801f166:	f7e1 fa6f 	bl	8000648 <__aeabi_dmul>
 801f16a:	2301      	movs	r3, #1
 801f16c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801f170:	f109 0908 	add.w	r9, r9, #8
 801f174:	d1f2      	bne.n	801f15c <_strtod_l+0x5cc>
 801f176:	b10b      	cbz	r3, 801f17c <_strtod_l+0x5ec>
 801f178:	4682      	mov	sl, r0
 801f17a:	468b      	mov	fp, r1
 801f17c:	9b04      	ldr	r3, [sp, #16]
 801f17e:	b1bb      	cbz	r3, 801f1b0 <_strtod_l+0x620>
 801f180:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801f184:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f188:	2b00      	cmp	r3, #0
 801f18a:	4659      	mov	r1, fp
 801f18c:	dd10      	ble.n	801f1b0 <_strtod_l+0x620>
 801f18e:	2b1f      	cmp	r3, #31
 801f190:	f340 8128 	ble.w	801f3e4 <_strtod_l+0x854>
 801f194:	2b34      	cmp	r3, #52	; 0x34
 801f196:	bfde      	ittt	le
 801f198:	3b20      	suble	r3, #32
 801f19a:	f04f 32ff 	movle.w	r2, #4294967295
 801f19e:	fa02 f303 	lslle.w	r3, r2, r3
 801f1a2:	f04f 0a00 	mov.w	sl, #0
 801f1a6:	bfcc      	ite	gt
 801f1a8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801f1ac:	ea03 0b01 	andle.w	fp, r3, r1
 801f1b0:	2200      	movs	r2, #0
 801f1b2:	2300      	movs	r3, #0
 801f1b4:	4650      	mov	r0, sl
 801f1b6:	4659      	mov	r1, fp
 801f1b8:	f7e1 fcae 	bl	8000b18 <__aeabi_dcmpeq>
 801f1bc:	2800      	cmp	r0, #0
 801f1be:	d1a4      	bne.n	801f10a <_strtod_l+0x57a>
 801f1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1c2:	9300      	str	r3, [sp, #0]
 801f1c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f1c6:	462b      	mov	r3, r5
 801f1c8:	463a      	mov	r2, r7
 801f1ca:	4620      	mov	r0, r4
 801f1cc:	f001 ff92 	bl	80210f4 <__s2b>
 801f1d0:	9009      	str	r0, [sp, #36]	; 0x24
 801f1d2:	2800      	cmp	r0, #0
 801f1d4:	f43f af24 	beq.w	801f020 <_strtod_l+0x490>
 801f1d8:	9b07      	ldr	r3, [sp, #28]
 801f1da:	1b9e      	subs	r6, r3, r6
 801f1dc:	9b08      	ldr	r3, [sp, #32]
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	bfb4      	ite	lt
 801f1e2:	4633      	movlt	r3, r6
 801f1e4:	2300      	movge	r3, #0
 801f1e6:	9310      	str	r3, [sp, #64]	; 0x40
 801f1e8:	9b08      	ldr	r3, [sp, #32]
 801f1ea:	2500      	movs	r5, #0
 801f1ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f1f0:	9318      	str	r3, [sp, #96]	; 0x60
 801f1f2:	462e      	mov	r6, r5
 801f1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1f6:	4620      	mov	r0, r4
 801f1f8:	6859      	ldr	r1, [r3, #4]
 801f1fa:	f001 fecf 	bl	8020f9c <_Balloc>
 801f1fe:	9007      	str	r0, [sp, #28]
 801f200:	2800      	cmp	r0, #0
 801f202:	f43f af11 	beq.w	801f028 <_strtod_l+0x498>
 801f206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f208:	691a      	ldr	r2, [r3, #16]
 801f20a:	3202      	adds	r2, #2
 801f20c:	f103 010c 	add.w	r1, r3, #12
 801f210:	0092      	lsls	r2, r2, #2
 801f212:	300c      	adds	r0, #12
 801f214:	f7fe fe96 	bl	801df44 <memcpy>
 801f218:	ec4b ab10 	vmov	d0, sl, fp
 801f21c:	aa20      	add	r2, sp, #128	; 0x80
 801f21e:	a91f      	add	r1, sp, #124	; 0x7c
 801f220:	4620      	mov	r0, r4
 801f222:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801f226:	f002 faa1 	bl	802176c <__d2b>
 801f22a:	901e      	str	r0, [sp, #120]	; 0x78
 801f22c:	2800      	cmp	r0, #0
 801f22e:	f43f aefb 	beq.w	801f028 <_strtod_l+0x498>
 801f232:	2101      	movs	r1, #1
 801f234:	4620      	mov	r0, r4
 801f236:	f001 fff7 	bl	8021228 <__i2b>
 801f23a:	4606      	mov	r6, r0
 801f23c:	2800      	cmp	r0, #0
 801f23e:	f43f aef3 	beq.w	801f028 <_strtod_l+0x498>
 801f242:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f244:	9904      	ldr	r1, [sp, #16]
 801f246:	2b00      	cmp	r3, #0
 801f248:	bfab      	itete	ge
 801f24a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801f24c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801f24e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801f250:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801f254:	bfac      	ite	ge
 801f256:	eb03 0902 	addge.w	r9, r3, r2
 801f25a:	1ad7      	sublt	r7, r2, r3
 801f25c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f25e:	eba3 0801 	sub.w	r8, r3, r1
 801f262:	4490      	add	r8, r2
 801f264:	4ba3      	ldr	r3, [pc, #652]	; (801f4f4 <_strtod_l+0x964>)
 801f266:	f108 38ff 	add.w	r8, r8, #4294967295
 801f26a:	4598      	cmp	r8, r3
 801f26c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801f270:	f280 80cc 	bge.w	801f40c <_strtod_l+0x87c>
 801f274:	eba3 0308 	sub.w	r3, r3, r8
 801f278:	2b1f      	cmp	r3, #31
 801f27a:	eba2 0203 	sub.w	r2, r2, r3
 801f27e:	f04f 0101 	mov.w	r1, #1
 801f282:	f300 80b6 	bgt.w	801f3f2 <_strtod_l+0x862>
 801f286:	fa01 f303 	lsl.w	r3, r1, r3
 801f28a:	9311      	str	r3, [sp, #68]	; 0x44
 801f28c:	2300      	movs	r3, #0
 801f28e:	930c      	str	r3, [sp, #48]	; 0x30
 801f290:	eb09 0802 	add.w	r8, r9, r2
 801f294:	9b04      	ldr	r3, [sp, #16]
 801f296:	45c1      	cmp	r9, r8
 801f298:	4417      	add	r7, r2
 801f29a:	441f      	add	r7, r3
 801f29c:	464b      	mov	r3, r9
 801f29e:	bfa8      	it	ge
 801f2a0:	4643      	movge	r3, r8
 801f2a2:	42bb      	cmp	r3, r7
 801f2a4:	bfa8      	it	ge
 801f2a6:	463b      	movge	r3, r7
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	bfc2      	ittt	gt
 801f2ac:	eba8 0803 	subgt.w	r8, r8, r3
 801f2b0:	1aff      	subgt	r7, r7, r3
 801f2b2:	eba9 0903 	subgt.w	r9, r9, r3
 801f2b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	dd17      	ble.n	801f2ec <_strtod_l+0x75c>
 801f2bc:	4631      	mov	r1, r6
 801f2be:	461a      	mov	r2, r3
 801f2c0:	4620      	mov	r0, r4
 801f2c2:	f002 f86d 	bl	80213a0 <__pow5mult>
 801f2c6:	4606      	mov	r6, r0
 801f2c8:	2800      	cmp	r0, #0
 801f2ca:	f43f aead 	beq.w	801f028 <_strtod_l+0x498>
 801f2ce:	4601      	mov	r1, r0
 801f2d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f2d2:	4620      	mov	r0, r4
 801f2d4:	f001 ffbe 	bl	8021254 <__multiply>
 801f2d8:	900f      	str	r0, [sp, #60]	; 0x3c
 801f2da:	2800      	cmp	r0, #0
 801f2dc:	f43f aea4 	beq.w	801f028 <_strtod_l+0x498>
 801f2e0:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f2e2:	4620      	mov	r0, r4
 801f2e4:	f001 fe9a 	bl	802101c <_Bfree>
 801f2e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f2ea:	931e      	str	r3, [sp, #120]	; 0x78
 801f2ec:	f1b8 0f00 	cmp.w	r8, #0
 801f2f0:	f300 8091 	bgt.w	801f416 <_strtod_l+0x886>
 801f2f4:	9b08      	ldr	r3, [sp, #32]
 801f2f6:	2b00      	cmp	r3, #0
 801f2f8:	dd08      	ble.n	801f30c <_strtod_l+0x77c>
 801f2fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f2fc:	9907      	ldr	r1, [sp, #28]
 801f2fe:	4620      	mov	r0, r4
 801f300:	f002 f84e 	bl	80213a0 <__pow5mult>
 801f304:	9007      	str	r0, [sp, #28]
 801f306:	2800      	cmp	r0, #0
 801f308:	f43f ae8e 	beq.w	801f028 <_strtod_l+0x498>
 801f30c:	2f00      	cmp	r7, #0
 801f30e:	dd08      	ble.n	801f322 <_strtod_l+0x792>
 801f310:	9907      	ldr	r1, [sp, #28]
 801f312:	463a      	mov	r2, r7
 801f314:	4620      	mov	r0, r4
 801f316:	f002 f89d 	bl	8021454 <__lshift>
 801f31a:	9007      	str	r0, [sp, #28]
 801f31c:	2800      	cmp	r0, #0
 801f31e:	f43f ae83 	beq.w	801f028 <_strtod_l+0x498>
 801f322:	f1b9 0f00 	cmp.w	r9, #0
 801f326:	dd08      	ble.n	801f33a <_strtod_l+0x7aa>
 801f328:	4631      	mov	r1, r6
 801f32a:	464a      	mov	r2, r9
 801f32c:	4620      	mov	r0, r4
 801f32e:	f002 f891 	bl	8021454 <__lshift>
 801f332:	4606      	mov	r6, r0
 801f334:	2800      	cmp	r0, #0
 801f336:	f43f ae77 	beq.w	801f028 <_strtod_l+0x498>
 801f33a:	9a07      	ldr	r2, [sp, #28]
 801f33c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f33e:	4620      	mov	r0, r4
 801f340:	f002 f910 	bl	8021564 <__mdiff>
 801f344:	4605      	mov	r5, r0
 801f346:	2800      	cmp	r0, #0
 801f348:	f43f ae6e 	beq.w	801f028 <_strtod_l+0x498>
 801f34c:	68c3      	ldr	r3, [r0, #12]
 801f34e:	930f      	str	r3, [sp, #60]	; 0x3c
 801f350:	2300      	movs	r3, #0
 801f352:	60c3      	str	r3, [r0, #12]
 801f354:	4631      	mov	r1, r6
 801f356:	f002 f8e9 	bl	802152c <__mcmp>
 801f35a:	2800      	cmp	r0, #0
 801f35c:	da65      	bge.n	801f42a <_strtod_l+0x89a>
 801f35e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f360:	ea53 030a 	orrs.w	r3, r3, sl
 801f364:	f040 8087 	bne.w	801f476 <_strtod_l+0x8e6>
 801f368:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f36c:	2b00      	cmp	r3, #0
 801f36e:	f040 8082 	bne.w	801f476 <_strtod_l+0x8e6>
 801f372:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f376:	0d1b      	lsrs	r3, r3, #20
 801f378:	051b      	lsls	r3, r3, #20
 801f37a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801f37e:	d97a      	bls.n	801f476 <_strtod_l+0x8e6>
 801f380:	696b      	ldr	r3, [r5, #20]
 801f382:	b913      	cbnz	r3, 801f38a <_strtod_l+0x7fa>
 801f384:	692b      	ldr	r3, [r5, #16]
 801f386:	2b01      	cmp	r3, #1
 801f388:	dd75      	ble.n	801f476 <_strtod_l+0x8e6>
 801f38a:	4629      	mov	r1, r5
 801f38c:	2201      	movs	r2, #1
 801f38e:	4620      	mov	r0, r4
 801f390:	f002 f860 	bl	8021454 <__lshift>
 801f394:	4631      	mov	r1, r6
 801f396:	4605      	mov	r5, r0
 801f398:	f002 f8c8 	bl	802152c <__mcmp>
 801f39c:	2800      	cmp	r0, #0
 801f39e:	dd6a      	ble.n	801f476 <_strtod_l+0x8e6>
 801f3a0:	9904      	ldr	r1, [sp, #16]
 801f3a2:	4a55      	ldr	r2, [pc, #340]	; (801f4f8 <_strtod_l+0x968>)
 801f3a4:	465b      	mov	r3, fp
 801f3a6:	2900      	cmp	r1, #0
 801f3a8:	f000 8085 	beq.w	801f4b6 <_strtod_l+0x926>
 801f3ac:	ea02 010b 	and.w	r1, r2, fp
 801f3b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801f3b4:	dc7f      	bgt.n	801f4b6 <_strtod_l+0x926>
 801f3b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801f3ba:	f77f aeaa 	ble.w	801f112 <_strtod_l+0x582>
 801f3be:	4a4f      	ldr	r2, [pc, #316]	; (801f4fc <_strtod_l+0x96c>)
 801f3c0:	2300      	movs	r3, #0
 801f3c2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801f3c6:	4650      	mov	r0, sl
 801f3c8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801f3cc:	4659      	mov	r1, fp
 801f3ce:	f7e1 f93b 	bl	8000648 <__aeabi_dmul>
 801f3d2:	460b      	mov	r3, r1
 801f3d4:	4303      	orrs	r3, r0
 801f3d6:	bf08      	it	eq
 801f3d8:	2322      	moveq	r3, #34	; 0x22
 801f3da:	4682      	mov	sl, r0
 801f3dc:	468b      	mov	fp, r1
 801f3de:	bf08      	it	eq
 801f3e0:	6023      	streq	r3, [r4, #0]
 801f3e2:	e62b      	b.n	801f03c <_strtod_l+0x4ac>
 801f3e4:	f04f 32ff 	mov.w	r2, #4294967295
 801f3e8:	fa02 f303 	lsl.w	r3, r2, r3
 801f3ec:	ea03 0a0a 	and.w	sl, r3, sl
 801f3f0:	e6de      	b.n	801f1b0 <_strtod_l+0x620>
 801f3f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801f3f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801f3fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801f3fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801f402:	fa01 f308 	lsl.w	r3, r1, r8
 801f406:	930c      	str	r3, [sp, #48]	; 0x30
 801f408:	9111      	str	r1, [sp, #68]	; 0x44
 801f40a:	e741      	b.n	801f290 <_strtod_l+0x700>
 801f40c:	2300      	movs	r3, #0
 801f40e:	930c      	str	r3, [sp, #48]	; 0x30
 801f410:	2301      	movs	r3, #1
 801f412:	9311      	str	r3, [sp, #68]	; 0x44
 801f414:	e73c      	b.n	801f290 <_strtod_l+0x700>
 801f416:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f418:	4642      	mov	r2, r8
 801f41a:	4620      	mov	r0, r4
 801f41c:	f002 f81a 	bl	8021454 <__lshift>
 801f420:	901e      	str	r0, [sp, #120]	; 0x78
 801f422:	2800      	cmp	r0, #0
 801f424:	f47f af66 	bne.w	801f2f4 <_strtod_l+0x764>
 801f428:	e5fe      	b.n	801f028 <_strtod_l+0x498>
 801f42a:	465f      	mov	r7, fp
 801f42c:	d16e      	bne.n	801f50c <_strtod_l+0x97c>
 801f42e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f430:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f434:	b342      	cbz	r2, 801f488 <_strtod_l+0x8f8>
 801f436:	4a32      	ldr	r2, [pc, #200]	; (801f500 <_strtod_l+0x970>)
 801f438:	4293      	cmp	r3, r2
 801f43a:	d128      	bne.n	801f48e <_strtod_l+0x8fe>
 801f43c:	9b04      	ldr	r3, [sp, #16]
 801f43e:	4650      	mov	r0, sl
 801f440:	b1eb      	cbz	r3, 801f47e <_strtod_l+0x8ee>
 801f442:	4a2d      	ldr	r2, [pc, #180]	; (801f4f8 <_strtod_l+0x968>)
 801f444:	403a      	ands	r2, r7
 801f446:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801f44a:	f04f 31ff 	mov.w	r1, #4294967295
 801f44e:	d819      	bhi.n	801f484 <_strtod_l+0x8f4>
 801f450:	0d12      	lsrs	r2, r2, #20
 801f452:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801f456:	fa01 f303 	lsl.w	r3, r1, r3
 801f45a:	4298      	cmp	r0, r3
 801f45c:	d117      	bne.n	801f48e <_strtod_l+0x8fe>
 801f45e:	4b29      	ldr	r3, [pc, #164]	; (801f504 <_strtod_l+0x974>)
 801f460:	429f      	cmp	r7, r3
 801f462:	d102      	bne.n	801f46a <_strtod_l+0x8da>
 801f464:	3001      	adds	r0, #1
 801f466:	f43f addf 	beq.w	801f028 <_strtod_l+0x498>
 801f46a:	4b23      	ldr	r3, [pc, #140]	; (801f4f8 <_strtod_l+0x968>)
 801f46c:	403b      	ands	r3, r7
 801f46e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801f472:	f04f 0a00 	mov.w	sl, #0
 801f476:	9b04      	ldr	r3, [sp, #16]
 801f478:	2b00      	cmp	r3, #0
 801f47a:	d1a0      	bne.n	801f3be <_strtod_l+0x82e>
 801f47c:	e5de      	b.n	801f03c <_strtod_l+0x4ac>
 801f47e:	f04f 33ff 	mov.w	r3, #4294967295
 801f482:	e7ea      	b.n	801f45a <_strtod_l+0x8ca>
 801f484:	460b      	mov	r3, r1
 801f486:	e7e8      	b.n	801f45a <_strtod_l+0x8ca>
 801f488:	ea53 030a 	orrs.w	r3, r3, sl
 801f48c:	d088      	beq.n	801f3a0 <_strtod_l+0x810>
 801f48e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f490:	b1db      	cbz	r3, 801f4ca <_strtod_l+0x93a>
 801f492:	423b      	tst	r3, r7
 801f494:	d0ef      	beq.n	801f476 <_strtod_l+0x8e6>
 801f496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f498:	9a04      	ldr	r2, [sp, #16]
 801f49a:	4650      	mov	r0, sl
 801f49c:	4659      	mov	r1, fp
 801f49e:	b1c3      	cbz	r3, 801f4d2 <_strtod_l+0x942>
 801f4a0:	f7ff fb58 	bl	801eb54 <sulp>
 801f4a4:	4602      	mov	r2, r0
 801f4a6:	460b      	mov	r3, r1
 801f4a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f4ac:	f7e0 ff16 	bl	80002dc <__adddf3>
 801f4b0:	4682      	mov	sl, r0
 801f4b2:	468b      	mov	fp, r1
 801f4b4:	e7df      	b.n	801f476 <_strtod_l+0x8e6>
 801f4b6:	4013      	ands	r3, r2
 801f4b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801f4bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801f4c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801f4c4:	f04f 3aff 	mov.w	sl, #4294967295
 801f4c8:	e7d5      	b.n	801f476 <_strtod_l+0x8e6>
 801f4ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f4cc:	ea13 0f0a 	tst.w	r3, sl
 801f4d0:	e7e0      	b.n	801f494 <_strtod_l+0x904>
 801f4d2:	f7ff fb3f 	bl	801eb54 <sulp>
 801f4d6:	4602      	mov	r2, r0
 801f4d8:	460b      	mov	r3, r1
 801f4da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f4de:	f7e0 fefb 	bl	80002d8 <__aeabi_dsub>
 801f4e2:	2200      	movs	r2, #0
 801f4e4:	2300      	movs	r3, #0
 801f4e6:	4682      	mov	sl, r0
 801f4e8:	468b      	mov	fp, r1
 801f4ea:	f7e1 fb15 	bl	8000b18 <__aeabi_dcmpeq>
 801f4ee:	2800      	cmp	r0, #0
 801f4f0:	d0c1      	beq.n	801f476 <_strtod_l+0x8e6>
 801f4f2:	e60e      	b.n	801f112 <_strtod_l+0x582>
 801f4f4:	fffffc02 	.word	0xfffffc02
 801f4f8:	7ff00000 	.word	0x7ff00000
 801f4fc:	39500000 	.word	0x39500000
 801f500:	000fffff 	.word	0x000fffff
 801f504:	7fefffff 	.word	0x7fefffff
 801f508:	08022e30 	.word	0x08022e30
 801f50c:	4631      	mov	r1, r6
 801f50e:	4628      	mov	r0, r5
 801f510:	f002 f988 	bl	8021824 <__ratio>
 801f514:	ec59 8b10 	vmov	r8, r9, d0
 801f518:	ee10 0a10 	vmov	r0, s0
 801f51c:	2200      	movs	r2, #0
 801f51e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f522:	4649      	mov	r1, r9
 801f524:	f7e1 fb0c 	bl	8000b40 <__aeabi_dcmple>
 801f528:	2800      	cmp	r0, #0
 801f52a:	d07c      	beq.n	801f626 <_strtod_l+0xa96>
 801f52c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f52e:	2b00      	cmp	r3, #0
 801f530:	d04c      	beq.n	801f5cc <_strtod_l+0xa3c>
 801f532:	4b95      	ldr	r3, [pc, #596]	; (801f788 <_strtod_l+0xbf8>)
 801f534:	2200      	movs	r2, #0
 801f536:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801f53a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801f788 <_strtod_l+0xbf8>
 801f53e:	f04f 0800 	mov.w	r8, #0
 801f542:	4b92      	ldr	r3, [pc, #584]	; (801f78c <_strtod_l+0xbfc>)
 801f544:	403b      	ands	r3, r7
 801f546:	9311      	str	r3, [sp, #68]	; 0x44
 801f548:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f54a:	4b91      	ldr	r3, [pc, #580]	; (801f790 <_strtod_l+0xc00>)
 801f54c:	429a      	cmp	r2, r3
 801f54e:	f040 80b2 	bne.w	801f6b6 <_strtod_l+0xb26>
 801f552:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f556:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f55a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801f55e:	ec4b ab10 	vmov	d0, sl, fp
 801f562:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801f566:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801f56a:	f002 f883 	bl	8021674 <__ulp>
 801f56e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f572:	ec53 2b10 	vmov	r2, r3, d0
 801f576:	f7e1 f867 	bl	8000648 <__aeabi_dmul>
 801f57a:	4652      	mov	r2, sl
 801f57c:	465b      	mov	r3, fp
 801f57e:	f7e0 fead 	bl	80002dc <__adddf3>
 801f582:	460b      	mov	r3, r1
 801f584:	4981      	ldr	r1, [pc, #516]	; (801f78c <_strtod_l+0xbfc>)
 801f586:	4a83      	ldr	r2, [pc, #524]	; (801f794 <_strtod_l+0xc04>)
 801f588:	4019      	ands	r1, r3
 801f58a:	4291      	cmp	r1, r2
 801f58c:	4682      	mov	sl, r0
 801f58e:	d95e      	bls.n	801f64e <_strtod_l+0xabe>
 801f590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f592:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801f596:	4293      	cmp	r3, r2
 801f598:	d103      	bne.n	801f5a2 <_strtod_l+0xa12>
 801f59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f59c:	3301      	adds	r3, #1
 801f59e:	f43f ad43 	beq.w	801f028 <_strtod_l+0x498>
 801f5a2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801f7a0 <_strtod_l+0xc10>
 801f5a6:	f04f 3aff 	mov.w	sl, #4294967295
 801f5aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f5ac:	4620      	mov	r0, r4
 801f5ae:	f001 fd35 	bl	802101c <_Bfree>
 801f5b2:	9907      	ldr	r1, [sp, #28]
 801f5b4:	4620      	mov	r0, r4
 801f5b6:	f001 fd31 	bl	802101c <_Bfree>
 801f5ba:	4631      	mov	r1, r6
 801f5bc:	4620      	mov	r0, r4
 801f5be:	f001 fd2d 	bl	802101c <_Bfree>
 801f5c2:	4629      	mov	r1, r5
 801f5c4:	4620      	mov	r0, r4
 801f5c6:	f001 fd29 	bl	802101c <_Bfree>
 801f5ca:	e613      	b.n	801f1f4 <_strtod_l+0x664>
 801f5cc:	f1ba 0f00 	cmp.w	sl, #0
 801f5d0:	d11b      	bne.n	801f60a <_strtod_l+0xa7a>
 801f5d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f5d6:	b9f3      	cbnz	r3, 801f616 <_strtod_l+0xa86>
 801f5d8:	4b6b      	ldr	r3, [pc, #428]	; (801f788 <_strtod_l+0xbf8>)
 801f5da:	2200      	movs	r2, #0
 801f5dc:	4640      	mov	r0, r8
 801f5de:	4649      	mov	r1, r9
 801f5e0:	f7e1 faa4 	bl	8000b2c <__aeabi_dcmplt>
 801f5e4:	b9d0      	cbnz	r0, 801f61c <_strtod_l+0xa8c>
 801f5e6:	4640      	mov	r0, r8
 801f5e8:	4649      	mov	r1, r9
 801f5ea:	4b6b      	ldr	r3, [pc, #428]	; (801f798 <_strtod_l+0xc08>)
 801f5ec:	2200      	movs	r2, #0
 801f5ee:	f7e1 f82b 	bl	8000648 <__aeabi_dmul>
 801f5f2:	4680      	mov	r8, r0
 801f5f4:	4689      	mov	r9, r1
 801f5f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801f5fa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801f5fe:	931b      	str	r3, [sp, #108]	; 0x6c
 801f600:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801f604:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801f608:	e79b      	b.n	801f542 <_strtod_l+0x9b2>
 801f60a:	f1ba 0f01 	cmp.w	sl, #1
 801f60e:	d102      	bne.n	801f616 <_strtod_l+0xa86>
 801f610:	2f00      	cmp	r7, #0
 801f612:	f43f ad7e 	beq.w	801f112 <_strtod_l+0x582>
 801f616:	4b61      	ldr	r3, [pc, #388]	; (801f79c <_strtod_l+0xc0c>)
 801f618:	2200      	movs	r2, #0
 801f61a:	e78c      	b.n	801f536 <_strtod_l+0x9a6>
 801f61c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801f798 <_strtod_l+0xc08>
 801f620:	f04f 0800 	mov.w	r8, #0
 801f624:	e7e7      	b.n	801f5f6 <_strtod_l+0xa66>
 801f626:	4b5c      	ldr	r3, [pc, #368]	; (801f798 <_strtod_l+0xc08>)
 801f628:	4640      	mov	r0, r8
 801f62a:	4649      	mov	r1, r9
 801f62c:	2200      	movs	r2, #0
 801f62e:	f7e1 f80b 	bl	8000648 <__aeabi_dmul>
 801f632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f634:	4680      	mov	r8, r0
 801f636:	4689      	mov	r9, r1
 801f638:	b933      	cbnz	r3, 801f648 <_strtod_l+0xab8>
 801f63a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f63e:	9012      	str	r0, [sp, #72]	; 0x48
 801f640:	9313      	str	r3, [sp, #76]	; 0x4c
 801f642:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801f646:	e7dd      	b.n	801f604 <_strtod_l+0xa74>
 801f648:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801f64c:	e7f9      	b.n	801f642 <_strtod_l+0xab2>
 801f64e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801f652:	9b04      	ldr	r3, [sp, #16]
 801f654:	2b00      	cmp	r3, #0
 801f656:	d1a8      	bne.n	801f5aa <_strtod_l+0xa1a>
 801f658:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f65c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f65e:	0d1b      	lsrs	r3, r3, #20
 801f660:	051b      	lsls	r3, r3, #20
 801f662:	429a      	cmp	r2, r3
 801f664:	d1a1      	bne.n	801f5aa <_strtod_l+0xa1a>
 801f666:	4640      	mov	r0, r8
 801f668:	4649      	mov	r1, r9
 801f66a:	f7e1 fb4d 	bl	8000d08 <__aeabi_d2lz>
 801f66e:	f7e0 ffbd 	bl	80005ec <__aeabi_l2d>
 801f672:	4602      	mov	r2, r0
 801f674:	460b      	mov	r3, r1
 801f676:	4640      	mov	r0, r8
 801f678:	4649      	mov	r1, r9
 801f67a:	f7e0 fe2d 	bl	80002d8 <__aeabi_dsub>
 801f67e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f680:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f684:	ea43 030a 	orr.w	r3, r3, sl
 801f688:	4313      	orrs	r3, r2
 801f68a:	4680      	mov	r8, r0
 801f68c:	4689      	mov	r9, r1
 801f68e:	d053      	beq.n	801f738 <_strtod_l+0xba8>
 801f690:	a335      	add	r3, pc, #212	; (adr r3, 801f768 <_strtod_l+0xbd8>)
 801f692:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f696:	f7e1 fa49 	bl	8000b2c <__aeabi_dcmplt>
 801f69a:	2800      	cmp	r0, #0
 801f69c:	f47f acce 	bne.w	801f03c <_strtod_l+0x4ac>
 801f6a0:	a333      	add	r3, pc, #204	; (adr r3, 801f770 <_strtod_l+0xbe0>)
 801f6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6a6:	4640      	mov	r0, r8
 801f6a8:	4649      	mov	r1, r9
 801f6aa:	f7e1 fa5d 	bl	8000b68 <__aeabi_dcmpgt>
 801f6ae:	2800      	cmp	r0, #0
 801f6b0:	f43f af7b 	beq.w	801f5aa <_strtod_l+0xa1a>
 801f6b4:	e4c2      	b.n	801f03c <_strtod_l+0x4ac>
 801f6b6:	9b04      	ldr	r3, [sp, #16]
 801f6b8:	b333      	cbz	r3, 801f708 <_strtod_l+0xb78>
 801f6ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f6bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801f6c0:	d822      	bhi.n	801f708 <_strtod_l+0xb78>
 801f6c2:	a32d      	add	r3, pc, #180	; (adr r3, 801f778 <_strtod_l+0xbe8>)
 801f6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6c8:	4640      	mov	r0, r8
 801f6ca:	4649      	mov	r1, r9
 801f6cc:	f7e1 fa38 	bl	8000b40 <__aeabi_dcmple>
 801f6d0:	b1a0      	cbz	r0, 801f6fc <_strtod_l+0xb6c>
 801f6d2:	4649      	mov	r1, r9
 801f6d4:	4640      	mov	r0, r8
 801f6d6:	f7e1 fa8f 	bl	8000bf8 <__aeabi_d2uiz>
 801f6da:	2801      	cmp	r0, #1
 801f6dc:	bf38      	it	cc
 801f6de:	2001      	movcc	r0, #1
 801f6e0:	f7e0 ff38 	bl	8000554 <__aeabi_ui2d>
 801f6e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f6e6:	4680      	mov	r8, r0
 801f6e8:	4689      	mov	r9, r1
 801f6ea:	bb13      	cbnz	r3, 801f732 <_strtod_l+0xba2>
 801f6ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f6f0:	9014      	str	r0, [sp, #80]	; 0x50
 801f6f2:	9315      	str	r3, [sp, #84]	; 0x54
 801f6f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801f6f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801f6fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f6fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f700:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801f704:	1a9b      	subs	r3, r3, r2
 801f706:	930d      	str	r3, [sp, #52]	; 0x34
 801f708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f70c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801f710:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801f714:	f001 ffae 	bl	8021674 <__ulp>
 801f718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801f71c:	ec53 2b10 	vmov	r2, r3, d0
 801f720:	f7e0 ff92 	bl	8000648 <__aeabi_dmul>
 801f724:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f728:	f7e0 fdd8 	bl	80002dc <__adddf3>
 801f72c:	4682      	mov	sl, r0
 801f72e:	468b      	mov	fp, r1
 801f730:	e78f      	b.n	801f652 <_strtod_l+0xac2>
 801f732:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801f736:	e7dd      	b.n	801f6f4 <_strtod_l+0xb64>
 801f738:	a311      	add	r3, pc, #68	; (adr r3, 801f780 <_strtod_l+0xbf0>)
 801f73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f73e:	f7e1 f9f5 	bl	8000b2c <__aeabi_dcmplt>
 801f742:	e7b4      	b.n	801f6ae <_strtod_l+0xb1e>
 801f744:	2300      	movs	r3, #0
 801f746:	930e      	str	r3, [sp, #56]	; 0x38
 801f748:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f74a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f74c:	6013      	str	r3, [r2, #0]
 801f74e:	f7ff ba65 	b.w	801ec1c <_strtod_l+0x8c>
 801f752:	2b65      	cmp	r3, #101	; 0x65
 801f754:	f43f ab5d 	beq.w	801ee12 <_strtod_l+0x282>
 801f758:	2b45      	cmp	r3, #69	; 0x45
 801f75a:	f43f ab5a 	beq.w	801ee12 <_strtod_l+0x282>
 801f75e:	2201      	movs	r2, #1
 801f760:	f7ff bb92 	b.w	801ee88 <_strtod_l+0x2f8>
 801f764:	f3af 8000 	nop.w
 801f768:	94a03595 	.word	0x94a03595
 801f76c:	3fdfffff 	.word	0x3fdfffff
 801f770:	35afe535 	.word	0x35afe535
 801f774:	3fe00000 	.word	0x3fe00000
 801f778:	ffc00000 	.word	0xffc00000
 801f77c:	41dfffff 	.word	0x41dfffff
 801f780:	94a03595 	.word	0x94a03595
 801f784:	3fcfffff 	.word	0x3fcfffff
 801f788:	3ff00000 	.word	0x3ff00000
 801f78c:	7ff00000 	.word	0x7ff00000
 801f790:	7fe00000 	.word	0x7fe00000
 801f794:	7c9fffff 	.word	0x7c9fffff
 801f798:	3fe00000 	.word	0x3fe00000
 801f79c:	bff00000 	.word	0xbff00000
 801f7a0:	7fefffff 	.word	0x7fefffff

0801f7a4 <strtod>:
 801f7a4:	460a      	mov	r2, r1
 801f7a6:	4601      	mov	r1, r0
 801f7a8:	4802      	ldr	r0, [pc, #8]	; (801f7b4 <strtod+0x10>)
 801f7aa:	4b03      	ldr	r3, [pc, #12]	; (801f7b8 <strtod+0x14>)
 801f7ac:	6800      	ldr	r0, [r0, #0]
 801f7ae:	f7ff b9ef 	b.w	801eb90 <_strtod_l>
 801f7b2:	bf00      	nop
 801f7b4:	2000008c 	.word	0x2000008c
 801f7b8:	200000f4 	.word	0x200000f4

0801f7bc <_strtol_l.isra.0>:
 801f7bc:	2b01      	cmp	r3, #1
 801f7be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f7c2:	d001      	beq.n	801f7c8 <_strtol_l.isra.0+0xc>
 801f7c4:	2b24      	cmp	r3, #36	; 0x24
 801f7c6:	d906      	bls.n	801f7d6 <_strtol_l.isra.0+0x1a>
 801f7c8:	f7fe f948 	bl	801da5c <__errno>
 801f7cc:	2316      	movs	r3, #22
 801f7ce:	6003      	str	r3, [r0, #0]
 801f7d0:	2000      	movs	r0, #0
 801f7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f7d6:	4f3a      	ldr	r7, [pc, #232]	; (801f8c0 <_strtol_l.isra.0+0x104>)
 801f7d8:	468e      	mov	lr, r1
 801f7da:	4676      	mov	r6, lr
 801f7dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f7e0:	5de5      	ldrb	r5, [r4, r7]
 801f7e2:	f015 0508 	ands.w	r5, r5, #8
 801f7e6:	d1f8      	bne.n	801f7da <_strtol_l.isra.0+0x1e>
 801f7e8:	2c2d      	cmp	r4, #45	; 0x2d
 801f7ea:	d134      	bne.n	801f856 <_strtol_l.isra.0+0x9a>
 801f7ec:	f89e 4000 	ldrb.w	r4, [lr]
 801f7f0:	f04f 0801 	mov.w	r8, #1
 801f7f4:	f106 0e02 	add.w	lr, r6, #2
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	d05c      	beq.n	801f8b6 <_strtol_l.isra.0+0xfa>
 801f7fc:	2b10      	cmp	r3, #16
 801f7fe:	d10c      	bne.n	801f81a <_strtol_l.isra.0+0x5e>
 801f800:	2c30      	cmp	r4, #48	; 0x30
 801f802:	d10a      	bne.n	801f81a <_strtol_l.isra.0+0x5e>
 801f804:	f89e 4000 	ldrb.w	r4, [lr]
 801f808:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f80c:	2c58      	cmp	r4, #88	; 0x58
 801f80e:	d14d      	bne.n	801f8ac <_strtol_l.isra.0+0xf0>
 801f810:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801f814:	2310      	movs	r3, #16
 801f816:	f10e 0e02 	add.w	lr, lr, #2
 801f81a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801f81e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f822:	2600      	movs	r6, #0
 801f824:	fbbc f9f3 	udiv	r9, ip, r3
 801f828:	4635      	mov	r5, r6
 801f82a:	fb03 ca19 	mls	sl, r3, r9, ip
 801f82e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801f832:	2f09      	cmp	r7, #9
 801f834:	d818      	bhi.n	801f868 <_strtol_l.isra.0+0xac>
 801f836:	463c      	mov	r4, r7
 801f838:	42a3      	cmp	r3, r4
 801f83a:	dd24      	ble.n	801f886 <_strtol_l.isra.0+0xca>
 801f83c:	2e00      	cmp	r6, #0
 801f83e:	db1f      	blt.n	801f880 <_strtol_l.isra.0+0xc4>
 801f840:	45a9      	cmp	r9, r5
 801f842:	d31d      	bcc.n	801f880 <_strtol_l.isra.0+0xc4>
 801f844:	d101      	bne.n	801f84a <_strtol_l.isra.0+0x8e>
 801f846:	45a2      	cmp	sl, r4
 801f848:	db1a      	blt.n	801f880 <_strtol_l.isra.0+0xc4>
 801f84a:	fb05 4503 	mla	r5, r5, r3, r4
 801f84e:	2601      	movs	r6, #1
 801f850:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801f854:	e7eb      	b.n	801f82e <_strtol_l.isra.0+0x72>
 801f856:	2c2b      	cmp	r4, #43	; 0x2b
 801f858:	bf08      	it	eq
 801f85a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801f85e:	46a8      	mov	r8, r5
 801f860:	bf08      	it	eq
 801f862:	f106 0e02 	addeq.w	lr, r6, #2
 801f866:	e7c7      	b.n	801f7f8 <_strtol_l.isra.0+0x3c>
 801f868:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801f86c:	2f19      	cmp	r7, #25
 801f86e:	d801      	bhi.n	801f874 <_strtol_l.isra.0+0xb8>
 801f870:	3c37      	subs	r4, #55	; 0x37
 801f872:	e7e1      	b.n	801f838 <_strtol_l.isra.0+0x7c>
 801f874:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801f878:	2f19      	cmp	r7, #25
 801f87a:	d804      	bhi.n	801f886 <_strtol_l.isra.0+0xca>
 801f87c:	3c57      	subs	r4, #87	; 0x57
 801f87e:	e7db      	b.n	801f838 <_strtol_l.isra.0+0x7c>
 801f880:	f04f 36ff 	mov.w	r6, #4294967295
 801f884:	e7e4      	b.n	801f850 <_strtol_l.isra.0+0x94>
 801f886:	2e00      	cmp	r6, #0
 801f888:	da05      	bge.n	801f896 <_strtol_l.isra.0+0xda>
 801f88a:	2322      	movs	r3, #34	; 0x22
 801f88c:	6003      	str	r3, [r0, #0]
 801f88e:	4665      	mov	r5, ip
 801f890:	b942      	cbnz	r2, 801f8a4 <_strtol_l.isra.0+0xe8>
 801f892:	4628      	mov	r0, r5
 801f894:	e79d      	b.n	801f7d2 <_strtol_l.isra.0+0x16>
 801f896:	f1b8 0f00 	cmp.w	r8, #0
 801f89a:	d000      	beq.n	801f89e <_strtol_l.isra.0+0xe2>
 801f89c:	426d      	negs	r5, r5
 801f89e:	2a00      	cmp	r2, #0
 801f8a0:	d0f7      	beq.n	801f892 <_strtol_l.isra.0+0xd6>
 801f8a2:	b10e      	cbz	r6, 801f8a8 <_strtol_l.isra.0+0xec>
 801f8a4:	f10e 31ff 	add.w	r1, lr, #4294967295
 801f8a8:	6011      	str	r1, [r2, #0]
 801f8aa:	e7f2      	b.n	801f892 <_strtol_l.isra.0+0xd6>
 801f8ac:	2430      	movs	r4, #48	; 0x30
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	d1b3      	bne.n	801f81a <_strtol_l.isra.0+0x5e>
 801f8b2:	2308      	movs	r3, #8
 801f8b4:	e7b1      	b.n	801f81a <_strtol_l.isra.0+0x5e>
 801f8b6:	2c30      	cmp	r4, #48	; 0x30
 801f8b8:	d0a4      	beq.n	801f804 <_strtol_l.isra.0+0x48>
 801f8ba:	230a      	movs	r3, #10
 801f8bc:	e7ad      	b.n	801f81a <_strtol_l.isra.0+0x5e>
 801f8be:	bf00      	nop
 801f8c0:	08022c6d 	.word	0x08022c6d

0801f8c4 <strtol>:
 801f8c4:	4613      	mov	r3, r2
 801f8c6:	460a      	mov	r2, r1
 801f8c8:	4601      	mov	r1, r0
 801f8ca:	4802      	ldr	r0, [pc, #8]	; (801f8d4 <strtol+0x10>)
 801f8cc:	6800      	ldr	r0, [r0, #0]
 801f8ce:	f7ff bf75 	b.w	801f7bc <_strtol_l.isra.0>
 801f8d2:	bf00      	nop
 801f8d4:	2000008c 	.word	0x2000008c

0801f8d8 <__utoa>:
 801f8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f8da:	4c1f      	ldr	r4, [pc, #124]	; (801f958 <__utoa+0x80>)
 801f8dc:	b08b      	sub	sp, #44	; 0x2c
 801f8de:	4605      	mov	r5, r0
 801f8e0:	460b      	mov	r3, r1
 801f8e2:	466e      	mov	r6, sp
 801f8e4:	f104 0c20 	add.w	ip, r4, #32
 801f8e8:	6820      	ldr	r0, [r4, #0]
 801f8ea:	6861      	ldr	r1, [r4, #4]
 801f8ec:	4637      	mov	r7, r6
 801f8ee:	c703      	stmia	r7!, {r0, r1}
 801f8f0:	3408      	adds	r4, #8
 801f8f2:	4564      	cmp	r4, ip
 801f8f4:	463e      	mov	r6, r7
 801f8f6:	d1f7      	bne.n	801f8e8 <__utoa+0x10>
 801f8f8:	7921      	ldrb	r1, [r4, #4]
 801f8fa:	7139      	strb	r1, [r7, #4]
 801f8fc:	1e91      	subs	r1, r2, #2
 801f8fe:	6820      	ldr	r0, [r4, #0]
 801f900:	6038      	str	r0, [r7, #0]
 801f902:	2922      	cmp	r1, #34	; 0x22
 801f904:	f04f 0100 	mov.w	r1, #0
 801f908:	d904      	bls.n	801f914 <__utoa+0x3c>
 801f90a:	7019      	strb	r1, [r3, #0]
 801f90c:	460b      	mov	r3, r1
 801f90e:	4618      	mov	r0, r3
 801f910:	b00b      	add	sp, #44	; 0x2c
 801f912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f914:	1e58      	subs	r0, r3, #1
 801f916:	4684      	mov	ip, r0
 801f918:	fbb5 f7f2 	udiv	r7, r5, r2
 801f91c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801f920:	fb02 5617 	mls	r6, r2, r7, r5
 801f924:	4476      	add	r6, lr
 801f926:	460c      	mov	r4, r1
 801f928:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801f92c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801f930:	462e      	mov	r6, r5
 801f932:	42b2      	cmp	r2, r6
 801f934:	f101 0101 	add.w	r1, r1, #1
 801f938:	463d      	mov	r5, r7
 801f93a:	d9ed      	bls.n	801f918 <__utoa+0x40>
 801f93c:	2200      	movs	r2, #0
 801f93e:	545a      	strb	r2, [r3, r1]
 801f940:	1919      	adds	r1, r3, r4
 801f942:	1aa5      	subs	r5, r4, r2
 801f944:	42aa      	cmp	r2, r5
 801f946:	dae2      	bge.n	801f90e <__utoa+0x36>
 801f948:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801f94c:	780e      	ldrb	r6, [r1, #0]
 801f94e:	7006      	strb	r6, [r0, #0]
 801f950:	3201      	adds	r2, #1
 801f952:	f801 5901 	strb.w	r5, [r1], #-1
 801f956:	e7f4      	b.n	801f942 <__utoa+0x6a>
 801f958:	08022e58 	.word	0x08022e58

0801f95c <__swbuf_r>:
 801f95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f95e:	460e      	mov	r6, r1
 801f960:	4614      	mov	r4, r2
 801f962:	4605      	mov	r5, r0
 801f964:	b118      	cbz	r0, 801f96e <__swbuf_r+0x12>
 801f966:	6983      	ldr	r3, [r0, #24]
 801f968:	b90b      	cbnz	r3, 801f96e <__swbuf_r+0x12>
 801f96a:	f7fe f997 	bl	801dc9c <__sinit>
 801f96e:	4b21      	ldr	r3, [pc, #132]	; (801f9f4 <__swbuf_r+0x98>)
 801f970:	429c      	cmp	r4, r3
 801f972:	d12b      	bne.n	801f9cc <__swbuf_r+0x70>
 801f974:	686c      	ldr	r4, [r5, #4]
 801f976:	69a3      	ldr	r3, [r4, #24]
 801f978:	60a3      	str	r3, [r4, #8]
 801f97a:	89a3      	ldrh	r3, [r4, #12]
 801f97c:	071a      	lsls	r2, r3, #28
 801f97e:	d52f      	bpl.n	801f9e0 <__swbuf_r+0x84>
 801f980:	6923      	ldr	r3, [r4, #16]
 801f982:	b36b      	cbz	r3, 801f9e0 <__swbuf_r+0x84>
 801f984:	6923      	ldr	r3, [r4, #16]
 801f986:	6820      	ldr	r0, [r4, #0]
 801f988:	1ac0      	subs	r0, r0, r3
 801f98a:	6963      	ldr	r3, [r4, #20]
 801f98c:	b2f6      	uxtb	r6, r6
 801f98e:	4283      	cmp	r3, r0
 801f990:	4637      	mov	r7, r6
 801f992:	dc04      	bgt.n	801f99e <__swbuf_r+0x42>
 801f994:	4621      	mov	r1, r4
 801f996:	4628      	mov	r0, r5
 801f998:	f7fe f8ec 	bl	801db74 <_fflush_r>
 801f99c:	bb30      	cbnz	r0, 801f9ec <__swbuf_r+0x90>
 801f99e:	68a3      	ldr	r3, [r4, #8]
 801f9a0:	3b01      	subs	r3, #1
 801f9a2:	60a3      	str	r3, [r4, #8]
 801f9a4:	6823      	ldr	r3, [r4, #0]
 801f9a6:	1c5a      	adds	r2, r3, #1
 801f9a8:	6022      	str	r2, [r4, #0]
 801f9aa:	701e      	strb	r6, [r3, #0]
 801f9ac:	6963      	ldr	r3, [r4, #20]
 801f9ae:	3001      	adds	r0, #1
 801f9b0:	4283      	cmp	r3, r0
 801f9b2:	d004      	beq.n	801f9be <__swbuf_r+0x62>
 801f9b4:	89a3      	ldrh	r3, [r4, #12]
 801f9b6:	07db      	lsls	r3, r3, #31
 801f9b8:	d506      	bpl.n	801f9c8 <__swbuf_r+0x6c>
 801f9ba:	2e0a      	cmp	r6, #10
 801f9bc:	d104      	bne.n	801f9c8 <__swbuf_r+0x6c>
 801f9be:	4621      	mov	r1, r4
 801f9c0:	4628      	mov	r0, r5
 801f9c2:	f7fe f8d7 	bl	801db74 <_fflush_r>
 801f9c6:	b988      	cbnz	r0, 801f9ec <__swbuf_r+0x90>
 801f9c8:	4638      	mov	r0, r7
 801f9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f9cc:	4b0a      	ldr	r3, [pc, #40]	; (801f9f8 <__swbuf_r+0x9c>)
 801f9ce:	429c      	cmp	r4, r3
 801f9d0:	d101      	bne.n	801f9d6 <__swbuf_r+0x7a>
 801f9d2:	68ac      	ldr	r4, [r5, #8]
 801f9d4:	e7cf      	b.n	801f976 <__swbuf_r+0x1a>
 801f9d6:	4b09      	ldr	r3, [pc, #36]	; (801f9fc <__swbuf_r+0xa0>)
 801f9d8:	429c      	cmp	r4, r3
 801f9da:	bf08      	it	eq
 801f9dc:	68ec      	ldreq	r4, [r5, #12]
 801f9de:	e7ca      	b.n	801f976 <__swbuf_r+0x1a>
 801f9e0:	4621      	mov	r1, r4
 801f9e2:	4628      	mov	r0, r5
 801f9e4:	f000 f81e 	bl	801fa24 <__swsetup_r>
 801f9e8:	2800      	cmp	r0, #0
 801f9ea:	d0cb      	beq.n	801f984 <__swbuf_r+0x28>
 801f9ec:	f04f 37ff 	mov.w	r7, #4294967295
 801f9f0:	e7ea      	b.n	801f9c8 <__swbuf_r+0x6c>
 801f9f2:	bf00      	nop
 801f9f4:	08022d90 	.word	0x08022d90
 801f9f8:	08022db0 	.word	0x08022db0
 801f9fc:	08022d70 	.word	0x08022d70

0801fa00 <_write_r>:
 801fa00:	b538      	push	{r3, r4, r5, lr}
 801fa02:	4d07      	ldr	r5, [pc, #28]	; (801fa20 <_write_r+0x20>)
 801fa04:	4604      	mov	r4, r0
 801fa06:	4608      	mov	r0, r1
 801fa08:	4611      	mov	r1, r2
 801fa0a:	2200      	movs	r2, #0
 801fa0c:	602a      	str	r2, [r5, #0]
 801fa0e:	461a      	mov	r2, r3
 801fa10:	f7fd ffba 	bl	801d988 <_write>
 801fa14:	1c43      	adds	r3, r0, #1
 801fa16:	d102      	bne.n	801fa1e <_write_r+0x1e>
 801fa18:	682b      	ldr	r3, [r5, #0]
 801fa1a:	b103      	cbz	r3, 801fa1e <_write_r+0x1e>
 801fa1c:	6023      	str	r3, [r4, #0]
 801fa1e:	bd38      	pop	{r3, r4, r5, pc}
 801fa20:	20019220 	.word	0x20019220

0801fa24 <__swsetup_r>:
 801fa24:	4b32      	ldr	r3, [pc, #200]	; (801faf0 <__swsetup_r+0xcc>)
 801fa26:	b570      	push	{r4, r5, r6, lr}
 801fa28:	681d      	ldr	r5, [r3, #0]
 801fa2a:	4606      	mov	r6, r0
 801fa2c:	460c      	mov	r4, r1
 801fa2e:	b125      	cbz	r5, 801fa3a <__swsetup_r+0x16>
 801fa30:	69ab      	ldr	r3, [r5, #24]
 801fa32:	b913      	cbnz	r3, 801fa3a <__swsetup_r+0x16>
 801fa34:	4628      	mov	r0, r5
 801fa36:	f7fe f931 	bl	801dc9c <__sinit>
 801fa3a:	4b2e      	ldr	r3, [pc, #184]	; (801faf4 <__swsetup_r+0xd0>)
 801fa3c:	429c      	cmp	r4, r3
 801fa3e:	d10f      	bne.n	801fa60 <__swsetup_r+0x3c>
 801fa40:	686c      	ldr	r4, [r5, #4]
 801fa42:	89a3      	ldrh	r3, [r4, #12]
 801fa44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fa48:	0719      	lsls	r1, r3, #28
 801fa4a:	d42c      	bmi.n	801faa6 <__swsetup_r+0x82>
 801fa4c:	06dd      	lsls	r5, r3, #27
 801fa4e:	d411      	bmi.n	801fa74 <__swsetup_r+0x50>
 801fa50:	2309      	movs	r3, #9
 801fa52:	6033      	str	r3, [r6, #0]
 801fa54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fa58:	81a3      	strh	r3, [r4, #12]
 801fa5a:	f04f 30ff 	mov.w	r0, #4294967295
 801fa5e:	e03e      	b.n	801fade <__swsetup_r+0xba>
 801fa60:	4b25      	ldr	r3, [pc, #148]	; (801faf8 <__swsetup_r+0xd4>)
 801fa62:	429c      	cmp	r4, r3
 801fa64:	d101      	bne.n	801fa6a <__swsetup_r+0x46>
 801fa66:	68ac      	ldr	r4, [r5, #8]
 801fa68:	e7eb      	b.n	801fa42 <__swsetup_r+0x1e>
 801fa6a:	4b24      	ldr	r3, [pc, #144]	; (801fafc <__swsetup_r+0xd8>)
 801fa6c:	429c      	cmp	r4, r3
 801fa6e:	bf08      	it	eq
 801fa70:	68ec      	ldreq	r4, [r5, #12]
 801fa72:	e7e6      	b.n	801fa42 <__swsetup_r+0x1e>
 801fa74:	0758      	lsls	r0, r3, #29
 801fa76:	d512      	bpl.n	801fa9e <__swsetup_r+0x7a>
 801fa78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fa7a:	b141      	cbz	r1, 801fa8e <__swsetup_r+0x6a>
 801fa7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fa80:	4299      	cmp	r1, r3
 801fa82:	d002      	beq.n	801fa8a <__swsetup_r+0x66>
 801fa84:	4630      	mov	r0, r6
 801fa86:	f7fe fa9d 	bl	801dfc4 <_free_r>
 801fa8a:	2300      	movs	r3, #0
 801fa8c:	6363      	str	r3, [r4, #52]	; 0x34
 801fa8e:	89a3      	ldrh	r3, [r4, #12]
 801fa90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fa94:	81a3      	strh	r3, [r4, #12]
 801fa96:	2300      	movs	r3, #0
 801fa98:	6063      	str	r3, [r4, #4]
 801fa9a:	6923      	ldr	r3, [r4, #16]
 801fa9c:	6023      	str	r3, [r4, #0]
 801fa9e:	89a3      	ldrh	r3, [r4, #12]
 801faa0:	f043 0308 	orr.w	r3, r3, #8
 801faa4:	81a3      	strh	r3, [r4, #12]
 801faa6:	6923      	ldr	r3, [r4, #16]
 801faa8:	b94b      	cbnz	r3, 801fabe <__swsetup_r+0x9a>
 801faaa:	89a3      	ldrh	r3, [r4, #12]
 801faac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fab4:	d003      	beq.n	801fabe <__swsetup_r+0x9a>
 801fab6:	4621      	mov	r1, r4
 801fab8:	4630      	mov	r0, r6
 801faba:	f7fe f9f3 	bl	801dea4 <__smakebuf_r>
 801fabe:	89a0      	ldrh	r0, [r4, #12]
 801fac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fac4:	f010 0301 	ands.w	r3, r0, #1
 801fac8:	d00a      	beq.n	801fae0 <__swsetup_r+0xbc>
 801faca:	2300      	movs	r3, #0
 801facc:	60a3      	str	r3, [r4, #8]
 801face:	6963      	ldr	r3, [r4, #20]
 801fad0:	425b      	negs	r3, r3
 801fad2:	61a3      	str	r3, [r4, #24]
 801fad4:	6923      	ldr	r3, [r4, #16]
 801fad6:	b943      	cbnz	r3, 801faea <__swsetup_r+0xc6>
 801fad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fadc:	d1ba      	bne.n	801fa54 <__swsetup_r+0x30>
 801fade:	bd70      	pop	{r4, r5, r6, pc}
 801fae0:	0781      	lsls	r1, r0, #30
 801fae2:	bf58      	it	pl
 801fae4:	6963      	ldrpl	r3, [r4, #20]
 801fae6:	60a3      	str	r3, [r4, #8]
 801fae8:	e7f4      	b.n	801fad4 <__swsetup_r+0xb0>
 801faea:	2000      	movs	r0, #0
 801faec:	e7f7      	b.n	801fade <__swsetup_r+0xba>
 801faee:	bf00      	nop
 801faf0:	2000008c 	.word	0x2000008c
 801faf4:	08022d90 	.word	0x08022d90
 801faf8:	08022db0 	.word	0x08022db0
 801fafc:	08022d70 	.word	0x08022d70

0801fb00 <_close_r>:
 801fb00:	b538      	push	{r3, r4, r5, lr}
 801fb02:	4d06      	ldr	r5, [pc, #24]	; (801fb1c <_close_r+0x1c>)
 801fb04:	2300      	movs	r3, #0
 801fb06:	4604      	mov	r4, r0
 801fb08:	4608      	mov	r0, r1
 801fb0a:	602b      	str	r3, [r5, #0]
 801fb0c:	f7fd ff58 	bl	801d9c0 <_close>
 801fb10:	1c43      	adds	r3, r0, #1
 801fb12:	d102      	bne.n	801fb1a <_close_r+0x1a>
 801fb14:	682b      	ldr	r3, [r5, #0]
 801fb16:	b103      	cbz	r3, 801fb1a <_close_r+0x1a>
 801fb18:	6023      	str	r3, [r4, #0]
 801fb1a:	bd38      	pop	{r3, r4, r5, pc}
 801fb1c:	20019220 	.word	0x20019220

0801fb20 <quorem>:
 801fb20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb24:	6903      	ldr	r3, [r0, #16]
 801fb26:	690c      	ldr	r4, [r1, #16]
 801fb28:	42a3      	cmp	r3, r4
 801fb2a:	4607      	mov	r7, r0
 801fb2c:	f2c0 8081 	blt.w	801fc32 <quorem+0x112>
 801fb30:	3c01      	subs	r4, #1
 801fb32:	f101 0814 	add.w	r8, r1, #20
 801fb36:	f100 0514 	add.w	r5, r0, #20
 801fb3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fb3e:	9301      	str	r3, [sp, #4]
 801fb40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801fb44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fb48:	3301      	adds	r3, #1
 801fb4a:	429a      	cmp	r2, r3
 801fb4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801fb50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fb54:	fbb2 f6f3 	udiv	r6, r2, r3
 801fb58:	d331      	bcc.n	801fbbe <quorem+0x9e>
 801fb5a:	f04f 0e00 	mov.w	lr, #0
 801fb5e:	4640      	mov	r0, r8
 801fb60:	46ac      	mov	ip, r5
 801fb62:	46f2      	mov	sl, lr
 801fb64:	f850 2b04 	ldr.w	r2, [r0], #4
 801fb68:	b293      	uxth	r3, r2
 801fb6a:	fb06 e303 	mla	r3, r6, r3, lr
 801fb6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801fb72:	b29b      	uxth	r3, r3
 801fb74:	ebaa 0303 	sub.w	r3, sl, r3
 801fb78:	0c12      	lsrs	r2, r2, #16
 801fb7a:	f8dc a000 	ldr.w	sl, [ip]
 801fb7e:	fb06 e202 	mla	r2, r6, r2, lr
 801fb82:	fa13 f38a 	uxtah	r3, r3, sl
 801fb86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fb8a:	fa1f fa82 	uxth.w	sl, r2
 801fb8e:	f8dc 2000 	ldr.w	r2, [ip]
 801fb92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801fb96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fb9a:	b29b      	uxth	r3, r3
 801fb9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fba0:	4581      	cmp	r9, r0
 801fba2:	f84c 3b04 	str.w	r3, [ip], #4
 801fba6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801fbaa:	d2db      	bcs.n	801fb64 <quorem+0x44>
 801fbac:	f855 300b 	ldr.w	r3, [r5, fp]
 801fbb0:	b92b      	cbnz	r3, 801fbbe <quorem+0x9e>
 801fbb2:	9b01      	ldr	r3, [sp, #4]
 801fbb4:	3b04      	subs	r3, #4
 801fbb6:	429d      	cmp	r5, r3
 801fbb8:	461a      	mov	r2, r3
 801fbba:	d32e      	bcc.n	801fc1a <quorem+0xfa>
 801fbbc:	613c      	str	r4, [r7, #16]
 801fbbe:	4638      	mov	r0, r7
 801fbc0:	f001 fcb4 	bl	802152c <__mcmp>
 801fbc4:	2800      	cmp	r0, #0
 801fbc6:	db24      	blt.n	801fc12 <quorem+0xf2>
 801fbc8:	3601      	adds	r6, #1
 801fbca:	4628      	mov	r0, r5
 801fbcc:	f04f 0c00 	mov.w	ip, #0
 801fbd0:	f858 2b04 	ldr.w	r2, [r8], #4
 801fbd4:	f8d0 e000 	ldr.w	lr, [r0]
 801fbd8:	b293      	uxth	r3, r2
 801fbda:	ebac 0303 	sub.w	r3, ip, r3
 801fbde:	0c12      	lsrs	r2, r2, #16
 801fbe0:	fa13 f38e 	uxtah	r3, r3, lr
 801fbe4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801fbe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fbec:	b29b      	uxth	r3, r3
 801fbee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fbf2:	45c1      	cmp	r9, r8
 801fbf4:	f840 3b04 	str.w	r3, [r0], #4
 801fbf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801fbfc:	d2e8      	bcs.n	801fbd0 <quorem+0xb0>
 801fbfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fc02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fc06:	b922      	cbnz	r2, 801fc12 <quorem+0xf2>
 801fc08:	3b04      	subs	r3, #4
 801fc0a:	429d      	cmp	r5, r3
 801fc0c:	461a      	mov	r2, r3
 801fc0e:	d30a      	bcc.n	801fc26 <quorem+0x106>
 801fc10:	613c      	str	r4, [r7, #16]
 801fc12:	4630      	mov	r0, r6
 801fc14:	b003      	add	sp, #12
 801fc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc1a:	6812      	ldr	r2, [r2, #0]
 801fc1c:	3b04      	subs	r3, #4
 801fc1e:	2a00      	cmp	r2, #0
 801fc20:	d1cc      	bne.n	801fbbc <quorem+0x9c>
 801fc22:	3c01      	subs	r4, #1
 801fc24:	e7c7      	b.n	801fbb6 <quorem+0x96>
 801fc26:	6812      	ldr	r2, [r2, #0]
 801fc28:	3b04      	subs	r3, #4
 801fc2a:	2a00      	cmp	r2, #0
 801fc2c:	d1f0      	bne.n	801fc10 <quorem+0xf0>
 801fc2e:	3c01      	subs	r4, #1
 801fc30:	e7eb      	b.n	801fc0a <quorem+0xea>
 801fc32:	2000      	movs	r0, #0
 801fc34:	e7ee      	b.n	801fc14 <quorem+0xf4>
	...

0801fc38 <_dtoa_r>:
 801fc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc3c:	ed2d 8b02 	vpush	{d8}
 801fc40:	ec57 6b10 	vmov	r6, r7, d0
 801fc44:	b095      	sub	sp, #84	; 0x54
 801fc46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801fc48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801fc4c:	9105      	str	r1, [sp, #20]
 801fc4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801fc52:	4604      	mov	r4, r0
 801fc54:	9209      	str	r2, [sp, #36]	; 0x24
 801fc56:	930f      	str	r3, [sp, #60]	; 0x3c
 801fc58:	b975      	cbnz	r5, 801fc78 <_dtoa_r+0x40>
 801fc5a:	2010      	movs	r0, #16
 801fc5c:	f7fe f962 	bl	801df24 <malloc>
 801fc60:	4602      	mov	r2, r0
 801fc62:	6260      	str	r0, [r4, #36]	; 0x24
 801fc64:	b920      	cbnz	r0, 801fc70 <_dtoa_r+0x38>
 801fc66:	4bb2      	ldr	r3, [pc, #712]	; (801ff30 <_dtoa_r+0x2f8>)
 801fc68:	21ea      	movs	r1, #234	; 0xea
 801fc6a:	48b2      	ldr	r0, [pc, #712]	; (801ff34 <_dtoa_r+0x2fc>)
 801fc6c:	f001 ffd6 	bl	8021c1c <__assert_func>
 801fc70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801fc74:	6005      	str	r5, [r0, #0]
 801fc76:	60c5      	str	r5, [r0, #12]
 801fc78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fc7a:	6819      	ldr	r1, [r3, #0]
 801fc7c:	b151      	cbz	r1, 801fc94 <_dtoa_r+0x5c>
 801fc7e:	685a      	ldr	r2, [r3, #4]
 801fc80:	604a      	str	r2, [r1, #4]
 801fc82:	2301      	movs	r3, #1
 801fc84:	4093      	lsls	r3, r2
 801fc86:	608b      	str	r3, [r1, #8]
 801fc88:	4620      	mov	r0, r4
 801fc8a:	f001 f9c7 	bl	802101c <_Bfree>
 801fc8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fc90:	2200      	movs	r2, #0
 801fc92:	601a      	str	r2, [r3, #0]
 801fc94:	1e3b      	subs	r3, r7, #0
 801fc96:	bfb9      	ittee	lt
 801fc98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801fc9c:	9303      	strlt	r3, [sp, #12]
 801fc9e:	2300      	movge	r3, #0
 801fca0:	f8c8 3000 	strge.w	r3, [r8]
 801fca4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801fca8:	4ba3      	ldr	r3, [pc, #652]	; (801ff38 <_dtoa_r+0x300>)
 801fcaa:	bfbc      	itt	lt
 801fcac:	2201      	movlt	r2, #1
 801fcae:	f8c8 2000 	strlt.w	r2, [r8]
 801fcb2:	ea33 0309 	bics.w	r3, r3, r9
 801fcb6:	d11b      	bne.n	801fcf0 <_dtoa_r+0xb8>
 801fcb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fcba:	f242 730f 	movw	r3, #9999	; 0x270f
 801fcbe:	6013      	str	r3, [r2, #0]
 801fcc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fcc4:	4333      	orrs	r3, r6
 801fcc6:	f000 857a 	beq.w	80207be <_dtoa_r+0xb86>
 801fcca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fccc:	b963      	cbnz	r3, 801fce8 <_dtoa_r+0xb0>
 801fcce:	4b9b      	ldr	r3, [pc, #620]	; (801ff3c <_dtoa_r+0x304>)
 801fcd0:	e024      	b.n	801fd1c <_dtoa_r+0xe4>
 801fcd2:	4b9b      	ldr	r3, [pc, #620]	; (801ff40 <_dtoa_r+0x308>)
 801fcd4:	9300      	str	r3, [sp, #0]
 801fcd6:	3308      	adds	r3, #8
 801fcd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fcda:	6013      	str	r3, [r2, #0]
 801fcdc:	9800      	ldr	r0, [sp, #0]
 801fcde:	b015      	add	sp, #84	; 0x54
 801fce0:	ecbd 8b02 	vpop	{d8}
 801fce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fce8:	4b94      	ldr	r3, [pc, #592]	; (801ff3c <_dtoa_r+0x304>)
 801fcea:	9300      	str	r3, [sp, #0]
 801fcec:	3303      	adds	r3, #3
 801fcee:	e7f3      	b.n	801fcd8 <_dtoa_r+0xa0>
 801fcf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801fcf4:	2200      	movs	r2, #0
 801fcf6:	ec51 0b17 	vmov	r0, r1, d7
 801fcfa:	2300      	movs	r3, #0
 801fcfc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801fd00:	f7e0 ff0a 	bl	8000b18 <__aeabi_dcmpeq>
 801fd04:	4680      	mov	r8, r0
 801fd06:	b158      	cbz	r0, 801fd20 <_dtoa_r+0xe8>
 801fd08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fd0a:	2301      	movs	r3, #1
 801fd0c:	6013      	str	r3, [r2, #0]
 801fd0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	f000 8551 	beq.w	80207b8 <_dtoa_r+0xb80>
 801fd16:	488b      	ldr	r0, [pc, #556]	; (801ff44 <_dtoa_r+0x30c>)
 801fd18:	6018      	str	r0, [r3, #0]
 801fd1a:	1e43      	subs	r3, r0, #1
 801fd1c:	9300      	str	r3, [sp, #0]
 801fd1e:	e7dd      	b.n	801fcdc <_dtoa_r+0xa4>
 801fd20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801fd24:	aa12      	add	r2, sp, #72	; 0x48
 801fd26:	a913      	add	r1, sp, #76	; 0x4c
 801fd28:	4620      	mov	r0, r4
 801fd2a:	f001 fd1f 	bl	802176c <__d2b>
 801fd2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801fd32:	4683      	mov	fp, r0
 801fd34:	2d00      	cmp	r5, #0
 801fd36:	d07c      	beq.n	801fe32 <_dtoa_r+0x1fa>
 801fd38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801fd3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fd42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801fd46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801fd4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801fd4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801fd52:	4b7d      	ldr	r3, [pc, #500]	; (801ff48 <_dtoa_r+0x310>)
 801fd54:	2200      	movs	r2, #0
 801fd56:	4630      	mov	r0, r6
 801fd58:	4639      	mov	r1, r7
 801fd5a:	f7e0 fabd 	bl	80002d8 <__aeabi_dsub>
 801fd5e:	a36e      	add	r3, pc, #440	; (adr r3, 801ff18 <_dtoa_r+0x2e0>)
 801fd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd64:	f7e0 fc70 	bl	8000648 <__aeabi_dmul>
 801fd68:	a36d      	add	r3, pc, #436	; (adr r3, 801ff20 <_dtoa_r+0x2e8>)
 801fd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd6e:	f7e0 fab5 	bl	80002dc <__adddf3>
 801fd72:	4606      	mov	r6, r0
 801fd74:	4628      	mov	r0, r5
 801fd76:	460f      	mov	r7, r1
 801fd78:	f7e0 fbfc 	bl	8000574 <__aeabi_i2d>
 801fd7c:	a36a      	add	r3, pc, #424	; (adr r3, 801ff28 <_dtoa_r+0x2f0>)
 801fd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd82:	f7e0 fc61 	bl	8000648 <__aeabi_dmul>
 801fd86:	4602      	mov	r2, r0
 801fd88:	460b      	mov	r3, r1
 801fd8a:	4630      	mov	r0, r6
 801fd8c:	4639      	mov	r1, r7
 801fd8e:	f7e0 faa5 	bl	80002dc <__adddf3>
 801fd92:	4606      	mov	r6, r0
 801fd94:	460f      	mov	r7, r1
 801fd96:	f7e0 ff07 	bl	8000ba8 <__aeabi_d2iz>
 801fd9a:	2200      	movs	r2, #0
 801fd9c:	4682      	mov	sl, r0
 801fd9e:	2300      	movs	r3, #0
 801fda0:	4630      	mov	r0, r6
 801fda2:	4639      	mov	r1, r7
 801fda4:	f7e0 fec2 	bl	8000b2c <__aeabi_dcmplt>
 801fda8:	b148      	cbz	r0, 801fdbe <_dtoa_r+0x186>
 801fdaa:	4650      	mov	r0, sl
 801fdac:	f7e0 fbe2 	bl	8000574 <__aeabi_i2d>
 801fdb0:	4632      	mov	r2, r6
 801fdb2:	463b      	mov	r3, r7
 801fdb4:	f7e0 feb0 	bl	8000b18 <__aeabi_dcmpeq>
 801fdb8:	b908      	cbnz	r0, 801fdbe <_dtoa_r+0x186>
 801fdba:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fdbe:	f1ba 0f16 	cmp.w	sl, #22
 801fdc2:	d854      	bhi.n	801fe6e <_dtoa_r+0x236>
 801fdc4:	4b61      	ldr	r3, [pc, #388]	; (801ff4c <_dtoa_r+0x314>)
 801fdc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801fdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801fdd2:	f7e0 feab 	bl	8000b2c <__aeabi_dcmplt>
 801fdd6:	2800      	cmp	r0, #0
 801fdd8:	d04b      	beq.n	801fe72 <_dtoa_r+0x23a>
 801fdda:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fdde:	2300      	movs	r3, #0
 801fde0:	930e      	str	r3, [sp, #56]	; 0x38
 801fde2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fde4:	1b5d      	subs	r5, r3, r5
 801fde6:	1e6b      	subs	r3, r5, #1
 801fde8:	9304      	str	r3, [sp, #16]
 801fdea:	bf43      	ittte	mi
 801fdec:	2300      	movmi	r3, #0
 801fdee:	f1c5 0801 	rsbmi	r8, r5, #1
 801fdf2:	9304      	strmi	r3, [sp, #16]
 801fdf4:	f04f 0800 	movpl.w	r8, #0
 801fdf8:	f1ba 0f00 	cmp.w	sl, #0
 801fdfc:	db3b      	blt.n	801fe76 <_dtoa_r+0x23e>
 801fdfe:	9b04      	ldr	r3, [sp, #16]
 801fe00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801fe04:	4453      	add	r3, sl
 801fe06:	9304      	str	r3, [sp, #16]
 801fe08:	2300      	movs	r3, #0
 801fe0a:	9306      	str	r3, [sp, #24]
 801fe0c:	9b05      	ldr	r3, [sp, #20]
 801fe0e:	2b09      	cmp	r3, #9
 801fe10:	d869      	bhi.n	801fee6 <_dtoa_r+0x2ae>
 801fe12:	2b05      	cmp	r3, #5
 801fe14:	bfc4      	itt	gt
 801fe16:	3b04      	subgt	r3, #4
 801fe18:	9305      	strgt	r3, [sp, #20]
 801fe1a:	9b05      	ldr	r3, [sp, #20]
 801fe1c:	f1a3 0302 	sub.w	r3, r3, #2
 801fe20:	bfcc      	ite	gt
 801fe22:	2500      	movgt	r5, #0
 801fe24:	2501      	movle	r5, #1
 801fe26:	2b03      	cmp	r3, #3
 801fe28:	d869      	bhi.n	801fefe <_dtoa_r+0x2c6>
 801fe2a:	e8df f003 	tbb	[pc, r3]
 801fe2e:	4e2c      	.short	0x4e2c
 801fe30:	5a4c      	.short	0x5a4c
 801fe32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801fe36:	441d      	add	r5, r3
 801fe38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801fe3c:	2b20      	cmp	r3, #32
 801fe3e:	bfc1      	itttt	gt
 801fe40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801fe44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801fe48:	fa09 f303 	lslgt.w	r3, r9, r3
 801fe4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 801fe50:	bfda      	itte	le
 801fe52:	f1c3 0320 	rsble	r3, r3, #32
 801fe56:	fa06 f003 	lslle.w	r0, r6, r3
 801fe5a:	4318      	orrgt	r0, r3
 801fe5c:	f7e0 fb7a 	bl	8000554 <__aeabi_ui2d>
 801fe60:	2301      	movs	r3, #1
 801fe62:	4606      	mov	r6, r0
 801fe64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801fe68:	3d01      	subs	r5, #1
 801fe6a:	9310      	str	r3, [sp, #64]	; 0x40
 801fe6c:	e771      	b.n	801fd52 <_dtoa_r+0x11a>
 801fe6e:	2301      	movs	r3, #1
 801fe70:	e7b6      	b.n	801fde0 <_dtoa_r+0x1a8>
 801fe72:	900e      	str	r0, [sp, #56]	; 0x38
 801fe74:	e7b5      	b.n	801fde2 <_dtoa_r+0x1aa>
 801fe76:	f1ca 0300 	rsb	r3, sl, #0
 801fe7a:	9306      	str	r3, [sp, #24]
 801fe7c:	2300      	movs	r3, #0
 801fe7e:	eba8 080a 	sub.w	r8, r8, sl
 801fe82:	930d      	str	r3, [sp, #52]	; 0x34
 801fe84:	e7c2      	b.n	801fe0c <_dtoa_r+0x1d4>
 801fe86:	2300      	movs	r3, #0
 801fe88:	9308      	str	r3, [sp, #32]
 801fe8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	dc39      	bgt.n	801ff04 <_dtoa_r+0x2cc>
 801fe90:	f04f 0901 	mov.w	r9, #1
 801fe94:	f8cd 9004 	str.w	r9, [sp, #4]
 801fe98:	464b      	mov	r3, r9
 801fe9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801fe9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fea0:	2200      	movs	r2, #0
 801fea2:	6042      	str	r2, [r0, #4]
 801fea4:	2204      	movs	r2, #4
 801fea6:	f102 0614 	add.w	r6, r2, #20
 801feaa:	429e      	cmp	r6, r3
 801feac:	6841      	ldr	r1, [r0, #4]
 801feae:	d92f      	bls.n	801ff10 <_dtoa_r+0x2d8>
 801feb0:	4620      	mov	r0, r4
 801feb2:	f001 f873 	bl	8020f9c <_Balloc>
 801feb6:	9000      	str	r0, [sp, #0]
 801feb8:	2800      	cmp	r0, #0
 801feba:	d14b      	bne.n	801ff54 <_dtoa_r+0x31c>
 801febc:	4b24      	ldr	r3, [pc, #144]	; (801ff50 <_dtoa_r+0x318>)
 801febe:	4602      	mov	r2, r0
 801fec0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801fec4:	e6d1      	b.n	801fc6a <_dtoa_r+0x32>
 801fec6:	2301      	movs	r3, #1
 801fec8:	e7de      	b.n	801fe88 <_dtoa_r+0x250>
 801feca:	2300      	movs	r3, #0
 801fecc:	9308      	str	r3, [sp, #32]
 801fece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fed0:	eb0a 0903 	add.w	r9, sl, r3
 801fed4:	f109 0301 	add.w	r3, r9, #1
 801fed8:	2b01      	cmp	r3, #1
 801feda:	9301      	str	r3, [sp, #4]
 801fedc:	bfb8      	it	lt
 801fede:	2301      	movlt	r3, #1
 801fee0:	e7dd      	b.n	801fe9e <_dtoa_r+0x266>
 801fee2:	2301      	movs	r3, #1
 801fee4:	e7f2      	b.n	801fecc <_dtoa_r+0x294>
 801fee6:	2501      	movs	r5, #1
 801fee8:	2300      	movs	r3, #0
 801feea:	9305      	str	r3, [sp, #20]
 801feec:	9508      	str	r5, [sp, #32]
 801feee:	f04f 39ff 	mov.w	r9, #4294967295
 801fef2:	2200      	movs	r2, #0
 801fef4:	f8cd 9004 	str.w	r9, [sp, #4]
 801fef8:	2312      	movs	r3, #18
 801fefa:	9209      	str	r2, [sp, #36]	; 0x24
 801fefc:	e7cf      	b.n	801fe9e <_dtoa_r+0x266>
 801fefe:	2301      	movs	r3, #1
 801ff00:	9308      	str	r3, [sp, #32]
 801ff02:	e7f4      	b.n	801feee <_dtoa_r+0x2b6>
 801ff04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ff08:	f8cd 9004 	str.w	r9, [sp, #4]
 801ff0c:	464b      	mov	r3, r9
 801ff0e:	e7c6      	b.n	801fe9e <_dtoa_r+0x266>
 801ff10:	3101      	adds	r1, #1
 801ff12:	6041      	str	r1, [r0, #4]
 801ff14:	0052      	lsls	r2, r2, #1
 801ff16:	e7c6      	b.n	801fea6 <_dtoa_r+0x26e>
 801ff18:	636f4361 	.word	0x636f4361
 801ff1c:	3fd287a7 	.word	0x3fd287a7
 801ff20:	8b60c8b3 	.word	0x8b60c8b3
 801ff24:	3fc68a28 	.word	0x3fc68a28
 801ff28:	509f79fb 	.word	0x509f79fb
 801ff2c:	3fd34413 	.word	0x3fd34413
 801ff30:	08022e8a 	.word	0x08022e8a
 801ff34:	08022ea1 	.word	0x08022ea1
 801ff38:	7ff00000 	.word	0x7ff00000
 801ff3c:	08022e86 	.word	0x08022e86
 801ff40:	08022e7d 	.word	0x08022e7d
 801ff44:	08022de5 	.word	0x08022de5
 801ff48:	3ff80000 	.word	0x3ff80000
 801ff4c:	08023018 	.word	0x08023018
 801ff50:	08022f00 	.word	0x08022f00
 801ff54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ff56:	9a00      	ldr	r2, [sp, #0]
 801ff58:	601a      	str	r2, [r3, #0]
 801ff5a:	9b01      	ldr	r3, [sp, #4]
 801ff5c:	2b0e      	cmp	r3, #14
 801ff5e:	f200 80ad 	bhi.w	80200bc <_dtoa_r+0x484>
 801ff62:	2d00      	cmp	r5, #0
 801ff64:	f000 80aa 	beq.w	80200bc <_dtoa_r+0x484>
 801ff68:	f1ba 0f00 	cmp.w	sl, #0
 801ff6c:	dd36      	ble.n	801ffdc <_dtoa_r+0x3a4>
 801ff6e:	4ac3      	ldr	r2, [pc, #780]	; (802027c <_dtoa_r+0x644>)
 801ff70:	f00a 030f 	and.w	r3, sl, #15
 801ff74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801ff78:	ed93 7b00 	vldr	d7, [r3]
 801ff7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801ff80:	ea4f 172a 	mov.w	r7, sl, asr #4
 801ff84:	eeb0 8a47 	vmov.f32	s16, s14
 801ff88:	eef0 8a67 	vmov.f32	s17, s15
 801ff8c:	d016      	beq.n	801ffbc <_dtoa_r+0x384>
 801ff8e:	4bbc      	ldr	r3, [pc, #752]	; (8020280 <_dtoa_r+0x648>)
 801ff90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ff94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ff98:	f7e0 fc80 	bl	800089c <__aeabi_ddiv>
 801ff9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ffa0:	f007 070f 	and.w	r7, r7, #15
 801ffa4:	2503      	movs	r5, #3
 801ffa6:	4eb6      	ldr	r6, [pc, #728]	; (8020280 <_dtoa_r+0x648>)
 801ffa8:	b957      	cbnz	r7, 801ffc0 <_dtoa_r+0x388>
 801ffaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ffae:	ec53 2b18 	vmov	r2, r3, d8
 801ffb2:	f7e0 fc73 	bl	800089c <__aeabi_ddiv>
 801ffb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ffba:	e029      	b.n	8020010 <_dtoa_r+0x3d8>
 801ffbc:	2502      	movs	r5, #2
 801ffbe:	e7f2      	b.n	801ffa6 <_dtoa_r+0x36e>
 801ffc0:	07f9      	lsls	r1, r7, #31
 801ffc2:	d508      	bpl.n	801ffd6 <_dtoa_r+0x39e>
 801ffc4:	ec51 0b18 	vmov	r0, r1, d8
 801ffc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ffcc:	f7e0 fb3c 	bl	8000648 <__aeabi_dmul>
 801ffd0:	ec41 0b18 	vmov	d8, r0, r1
 801ffd4:	3501      	adds	r5, #1
 801ffd6:	107f      	asrs	r7, r7, #1
 801ffd8:	3608      	adds	r6, #8
 801ffda:	e7e5      	b.n	801ffa8 <_dtoa_r+0x370>
 801ffdc:	f000 80a6 	beq.w	802012c <_dtoa_r+0x4f4>
 801ffe0:	f1ca 0600 	rsb	r6, sl, #0
 801ffe4:	4ba5      	ldr	r3, [pc, #660]	; (802027c <_dtoa_r+0x644>)
 801ffe6:	4fa6      	ldr	r7, [pc, #664]	; (8020280 <_dtoa_r+0x648>)
 801ffe8:	f006 020f 	and.w	r2, r6, #15
 801ffec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fff4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801fff8:	f7e0 fb26 	bl	8000648 <__aeabi_dmul>
 801fffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020000:	1136      	asrs	r6, r6, #4
 8020002:	2300      	movs	r3, #0
 8020004:	2502      	movs	r5, #2
 8020006:	2e00      	cmp	r6, #0
 8020008:	f040 8085 	bne.w	8020116 <_dtoa_r+0x4de>
 802000c:	2b00      	cmp	r3, #0
 802000e:	d1d2      	bne.n	801ffb6 <_dtoa_r+0x37e>
 8020010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020012:	2b00      	cmp	r3, #0
 8020014:	f000 808c 	beq.w	8020130 <_dtoa_r+0x4f8>
 8020018:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802001c:	4b99      	ldr	r3, [pc, #612]	; (8020284 <_dtoa_r+0x64c>)
 802001e:	2200      	movs	r2, #0
 8020020:	4630      	mov	r0, r6
 8020022:	4639      	mov	r1, r7
 8020024:	f7e0 fd82 	bl	8000b2c <__aeabi_dcmplt>
 8020028:	2800      	cmp	r0, #0
 802002a:	f000 8081 	beq.w	8020130 <_dtoa_r+0x4f8>
 802002e:	9b01      	ldr	r3, [sp, #4]
 8020030:	2b00      	cmp	r3, #0
 8020032:	d07d      	beq.n	8020130 <_dtoa_r+0x4f8>
 8020034:	f1b9 0f00 	cmp.w	r9, #0
 8020038:	dd3c      	ble.n	80200b4 <_dtoa_r+0x47c>
 802003a:	f10a 33ff 	add.w	r3, sl, #4294967295
 802003e:	9307      	str	r3, [sp, #28]
 8020040:	2200      	movs	r2, #0
 8020042:	4b91      	ldr	r3, [pc, #580]	; (8020288 <_dtoa_r+0x650>)
 8020044:	4630      	mov	r0, r6
 8020046:	4639      	mov	r1, r7
 8020048:	f7e0 fafe 	bl	8000648 <__aeabi_dmul>
 802004c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020050:	3501      	adds	r5, #1
 8020052:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8020056:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802005a:	4628      	mov	r0, r5
 802005c:	f7e0 fa8a 	bl	8000574 <__aeabi_i2d>
 8020060:	4632      	mov	r2, r6
 8020062:	463b      	mov	r3, r7
 8020064:	f7e0 faf0 	bl	8000648 <__aeabi_dmul>
 8020068:	4b88      	ldr	r3, [pc, #544]	; (802028c <_dtoa_r+0x654>)
 802006a:	2200      	movs	r2, #0
 802006c:	f7e0 f936 	bl	80002dc <__adddf3>
 8020070:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8020074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020078:	9303      	str	r3, [sp, #12]
 802007a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802007c:	2b00      	cmp	r3, #0
 802007e:	d15c      	bne.n	802013a <_dtoa_r+0x502>
 8020080:	4b83      	ldr	r3, [pc, #524]	; (8020290 <_dtoa_r+0x658>)
 8020082:	2200      	movs	r2, #0
 8020084:	4630      	mov	r0, r6
 8020086:	4639      	mov	r1, r7
 8020088:	f7e0 f926 	bl	80002d8 <__aeabi_dsub>
 802008c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020090:	4606      	mov	r6, r0
 8020092:	460f      	mov	r7, r1
 8020094:	f7e0 fd68 	bl	8000b68 <__aeabi_dcmpgt>
 8020098:	2800      	cmp	r0, #0
 802009a:	f040 8296 	bne.w	80205ca <_dtoa_r+0x992>
 802009e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80200a2:	4630      	mov	r0, r6
 80200a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80200a8:	4639      	mov	r1, r7
 80200aa:	f7e0 fd3f 	bl	8000b2c <__aeabi_dcmplt>
 80200ae:	2800      	cmp	r0, #0
 80200b0:	f040 8288 	bne.w	80205c4 <_dtoa_r+0x98c>
 80200b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80200b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80200bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80200be:	2b00      	cmp	r3, #0
 80200c0:	f2c0 8158 	blt.w	8020374 <_dtoa_r+0x73c>
 80200c4:	f1ba 0f0e 	cmp.w	sl, #14
 80200c8:	f300 8154 	bgt.w	8020374 <_dtoa_r+0x73c>
 80200cc:	4b6b      	ldr	r3, [pc, #428]	; (802027c <_dtoa_r+0x644>)
 80200ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80200d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80200d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200d8:	2b00      	cmp	r3, #0
 80200da:	f280 80e3 	bge.w	80202a4 <_dtoa_r+0x66c>
 80200de:	9b01      	ldr	r3, [sp, #4]
 80200e0:	2b00      	cmp	r3, #0
 80200e2:	f300 80df 	bgt.w	80202a4 <_dtoa_r+0x66c>
 80200e6:	f040 826d 	bne.w	80205c4 <_dtoa_r+0x98c>
 80200ea:	4b69      	ldr	r3, [pc, #420]	; (8020290 <_dtoa_r+0x658>)
 80200ec:	2200      	movs	r2, #0
 80200ee:	4640      	mov	r0, r8
 80200f0:	4649      	mov	r1, r9
 80200f2:	f7e0 faa9 	bl	8000648 <__aeabi_dmul>
 80200f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80200fa:	f7e0 fd2b 	bl	8000b54 <__aeabi_dcmpge>
 80200fe:	9e01      	ldr	r6, [sp, #4]
 8020100:	4637      	mov	r7, r6
 8020102:	2800      	cmp	r0, #0
 8020104:	f040 8243 	bne.w	802058e <_dtoa_r+0x956>
 8020108:	9d00      	ldr	r5, [sp, #0]
 802010a:	2331      	movs	r3, #49	; 0x31
 802010c:	f805 3b01 	strb.w	r3, [r5], #1
 8020110:	f10a 0a01 	add.w	sl, sl, #1
 8020114:	e23f      	b.n	8020596 <_dtoa_r+0x95e>
 8020116:	07f2      	lsls	r2, r6, #31
 8020118:	d505      	bpl.n	8020126 <_dtoa_r+0x4ee>
 802011a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802011e:	f7e0 fa93 	bl	8000648 <__aeabi_dmul>
 8020122:	3501      	adds	r5, #1
 8020124:	2301      	movs	r3, #1
 8020126:	1076      	asrs	r6, r6, #1
 8020128:	3708      	adds	r7, #8
 802012a:	e76c      	b.n	8020006 <_dtoa_r+0x3ce>
 802012c:	2502      	movs	r5, #2
 802012e:	e76f      	b.n	8020010 <_dtoa_r+0x3d8>
 8020130:	9b01      	ldr	r3, [sp, #4]
 8020132:	f8cd a01c 	str.w	sl, [sp, #28]
 8020136:	930c      	str	r3, [sp, #48]	; 0x30
 8020138:	e78d      	b.n	8020056 <_dtoa_r+0x41e>
 802013a:	9900      	ldr	r1, [sp, #0]
 802013c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802013e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020140:	4b4e      	ldr	r3, [pc, #312]	; (802027c <_dtoa_r+0x644>)
 8020142:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020146:	4401      	add	r1, r0
 8020148:	9102      	str	r1, [sp, #8]
 802014a:	9908      	ldr	r1, [sp, #32]
 802014c:	eeb0 8a47 	vmov.f32	s16, s14
 8020150:	eef0 8a67 	vmov.f32	s17, s15
 8020154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020158:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802015c:	2900      	cmp	r1, #0
 802015e:	d045      	beq.n	80201ec <_dtoa_r+0x5b4>
 8020160:	494c      	ldr	r1, [pc, #304]	; (8020294 <_dtoa_r+0x65c>)
 8020162:	2000      	movs	r0, #0
 8020164:	f7e0 fb9a 	bl	800089c <__aeabi_ddiv>
 8020168:	ec53 2b18 	vmov	r2, r3, d8
 802016c:	f7e0 f8b4 	bl	80002d8 <__aeabi_dsub>
 8020170:	9d00      	ldr	r5, [sp, #0]
 8020172:	ec41 0b18 	vmov	d8, r0, r1
 8020176:	4639      	mov	r1, r7
 8020178:	4630      	mov	r0, r6
 802017a:	f7e0 fd15 	bl	8000ba8 <__aeabi_d2iz>
 802017e:	900c      	str	r0, [sp, #48]	; 0x30
 8020180:	f7e0 f9f8 	bl	8000574 <__aeabi_i2d>
 8020184:	4602      	mov	r2, r0
 8020186:	460b      	mov	r3, r1
 8020188:	4630      	mov	r0, r6
 802018a:	4639      	mov	r1, r7
 802018c:	f7e0 f8a4 	bl	80002d8 <__aeabi_dsub>
 8020190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020192:	3330      	adds	r3, #48	; 0x30
 8020194:	f805 3b01 	strb.w	r3, [r5], #1
 8020198:	ec53 2b18 	vmov	r2, r3, d8
 802019c:	4606      	mov	r6, r0
 802019e:	460f      	mov	r7, r1
 80201a0:	f7e0 fcc4 	bl	8000b2c <__aeabi_dcmplt>
 80201a4:	2800      	cmp	r0, #0
 80201a6:	d165      	bne.n	8020274 <_dtoa_r+0x63c>
 80201a8:	4632      	mov	r2, r6
 80201aa:	463b      	mov	r3, r7
 80201ac:	4935      	ldr	r1, [pc, #212]	; (8020284 <_dtoa_r+0x64c>)
 80201ae:	2000      	movs	r0, #0
 80201b0:	f7e0 f892 	bl	80002d8 <__aeabi_dsub>
 80201b4:	ec53 2b18 	vmov	r2, r3, d8
 80201b8:	f7e0 fcb8 	bl	8000b2c <__aeabi_dcmplt>
 80201bc:	2800      	cmp	r0, #0
 80201be:	f040 80b9 	bne.w	8020334 <_dtoa_r+0x6fc>
 80201c2:	9b02      	ldr	r3, [sp, #8]
 80201c4:	429d      	cmp	r5, r3
 80201c6:	f43f af75 	beq.w	80200b4 <_dtoa_r+0x47c>
 80201ca:	4b2f      	ldr	r3, [pc, #188]	; (8020288 <_dtoa_r+0x650>)
 80201cc:	ec51 0b18 	vmov	r0, r1, d8
 80201d0:	2200      	movs	r2, #0
 80201d2:	f7e0 fa39 	bl	8000648 <__aeabi_dmul>
 80201d6:	4b2c      	ldr	r3, [pc, #176]	; (8020288 <_dtoa_r+0x650>)
 80201d8:	ec41 0b18 	vmov	d8, r0, r1
 80201dc:	2200      	movs	r2, #0
 80201de:	4630      	mov	r0, r6
 80201e0:	4639      	mov	r1, r7
 80201e2:	f7e0 fa31 	bl	8000648 <__aeabi_dmul>
 80201e6:	4606      	mov	r6, r0
 80201e8:	460f      	mov	r7, r1
 80201ea:	e7c4      	b.n	8020176 <_dtoa_r+0x53e>
 80201ec:	ec51 0b17 	vmov	r0, r1, d7
 80201f0:	f7e0 fa2a 	bl	8000648 <__aeabi_dmul>
 80201f4:	9b02      	ldr	r3, [sp, #8]
 80201f6:	9d00      	ldr	r5, [sp, #0]
 80201f8:	930c      	str	r3, [sp, #48]	; 0x30
 80201fa:	ec41 0b18 	vmov	d8, r0, r1
 80201fe:	4639      	mov	r1, r7
 8020200:	4630      	mov	r0, r6
 8020202:	f7e0 fcd1 	bl	8000ba8 <__aeabi_d2iz>
 8020206:	9011      	str	r0, [sp, #68]	; 0x44
 8020208:	f7e0 f9b4 	bl	8000574 <__aeabi_i2d>
 802020c:	4602      	mov	r2, r0
 802020e:	460b      	mov	r3, r1
 8020210:	4630      	mov	r0, r6
 8020212:	4639      	mov	r1, r7
 8020214:	f7e0 f860 	bl	80002d8 <__aeabi_dsub>
 8020218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802021a:	3330      	adds	r3, #48	; 0x30
 802021c:	f805 3b01 	strb.w	r3, [r5], #1
 8020220:	9b02      	ldr	r3, [sp, #8]
 8020222:	429d      	cmp	r5, r3
 8020224:	4606      	mov	r6, r0
 8020226:	460f      	mov	r7, r1
 8020228:	f04f 0200 	mov.w	r2, #0
 802022c:	d134      	bne.n	8020298 <_dtoa_r+0x660>
 802022e:	4b19      	ldr	r3, [pc, #100]	; (8020294 <_dtoa_r+0x65c>)
 8020230:	ec51 0b18 	vmov	r0, r1, d8
 8020234:	f7e0 f852 	bl	80002dc <__adddf3>
 8020238:	4602      	mov	r2, r0
 802023a:	460b      	mov	r3, r1
 802023c:	4630      	mov	r0, r6
 802023e:	4639      	mov	r1, r7
 8020240:	f7e0 fc92 	bl	8000b68 <__aeabi_dcmpgt>
 8020244:	2800      	cmp	r0, #0
 8020246:	d175      	bne.n	8020334 <_dtoa_r+0x6fc>
 8020248:	ec53 2b18 	vmov	r2, r3, d8
 802024c:	4911      	ldr	r1, [pc, #68]	; (8020294 <_dtoa_r+0x65c>)
 802024e:	2000      	movs	r0, #0
 8020250:	f7e0 f842 	bl	80002d8 <__aeabi_dsub>
 8020254:	4602      	mov	r2, r0
 8020256:	460b      	mov	r3, r1
 8020258:	4630      	mov	r0, r6
 802025a:	4639      	mov	r1, r7
 802025c:	f7e0 fc66 	bl	8000b2c <__aeabi_dcmplt>
 8020260:	2800      	cmp	r0, #0
 8020262:	f43f af27 	beq.w	80200b4 <_dtoa_r+0x47c>
 8020266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020268:	1e6b      	subs	r3, r5, #1
 802026a:	930c      	str	r3, [sp, #48]	; 0x30
 802026c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020270:	2b30      	cmp	r3, #48	; 0x30
 8020272:	d0f8      	beq.n	8020266 <_dtoa_r+0x62e>
 8020274:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020278:	e04a      	b.n	8020310 <_dtoa_r+0x6d8>
 802027a:	bf00      	nop
 802027c:	08023018 	.word	0x08023018
 8020280:	08022ff0 	.word	0x08022ff0
 8020284:	3ff00000 	.word	0x3ff00000
 8020288:	40240000 	.word	0x40240000
 802028c:	401c0000 	.word	0x401c0000
 8020290:	40140000 	.word	0x40140000
 8020294:	3fe00000 	.word	0x3fe00000
 8020298:	4baf      	ldr	r3, [pc, #700]	; (8020558 <_dtoa_r+0x920>)
 802029a:	f7e0 f9d5 	bl	8000648 <__aeabi_dmul>
 802029e:	4606      	mov	r6, r0
 80202a0:	460f      	mov	r7, r1
 80202a2:	e7ac      	b.n	80201fe <_dtoa_r+0x5c6>
 80202a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80202a8:	9d00      	ldr	r5, [sp, #0]
 80202aa:	4642      	mov	r2, r8
 80202ac:	464b      	mov	r3, r9
 80202ae:	4630      	mov	r0, r6
 80202b0:	4639      	mov	r1, r7
 80202b2:	f7e0 faf3 	bl	800089c <__aeabi_ddiv>
 80202b6:	f7e0 fc77 	bl	8000ba8 <__aeabi_d2iz>
 80202ba:	9002      	str	r0, [sp, #8]
 80202bc:	f7e0 f95a 	bl	8000574 <__aeabi_i2d>
 80202c0:	4642      	mov	r2, r8
 80202c2:	464b      	mov	r3, r9
 80202c4:	f7e0 f9c0 	bl	8000648 <__aeabi_dmul>
 80202c8:	4602      	mov	r2, r0
 80202ca:	460b      	mov	r3, r1
 80202cc:	4630      	mov	r0, r6
 80202ce:	4639      	mov	r1, r7
 80202d0:	f7e0 f802 	bl	80002d8 <__aeabi_dsub>
 80202d4:	9e02      	ldr	r6, [sp, #8]
 80202d6:	9f01      	ldr	r7, [sp, #4]
 80202d8:	3630      	adds	r6, #48	; 0x30
 80202da:	f805 6b01 	strb.w	r6, [r5], #1
 80202de:	9e00      	ldr	r6, [sp, #0]
 80202e0:	1bae      	subs	r6, r5, r6
 80202e2:	42b7      	cmp	r7, r6
 80202e4:	4602      	mov	r2, r0
 80202e6:	460b      	mov	r3, r1
 80202e8:	d137      	bne.n	802035a <_dtoa_r+0x722>
 80202ea:	f7df fff7 	bl	80002dc <__adddf3>
 80202ee:	4642      	mov	r2, r8
 80202f0:	464b      	mov	r3, r9
 80202f2:	4606      	mov	r6, r0
 80202f4:	460f      	mov	r7, r1
 80202f6:	f7e0 fc37 	bl	8000b68 <__aeabi_dcmpgt>
 80202fa:	b9c8      	cbnz	r0, 8020330 <_dtoa_r+0x6f8>
 80202fc:	4642      	mov	r2, r8
 80202fe:	464b      	mov	r3, r9
 8020300:	4630      	mov	r0, r6
 8020302:	4639      	mov	r1, r7
 8020304:	f7e0 fc08 	bl	8000b18 <__aeabi_dcmpeq>
 8020308:	b110      	cbz	r0, 8020310 <_dtoa_r+0x6d8>
 802030a:	9b02      	ldr	r3, [sp, #8]
 802030c:	07d9      	lsls	r1, r3, #31
 802030e:	d40f      	bmi.n	8020330 <_dtoa_r+0x6f8>
 8020310:	4620      	mov	r0, r4
 8020312:	4659      	mov	r1, fp
 8020314:	f000 fe82 	bl	802101c <_Bfree>
 8020318:	2300      	movs	r3, #0
 802031a:	702b      	strb	r3, [r5, #0]
 802031c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802031e:	f10a 0001 	add.w	r0, sl, #1
 8020322:	6018      	str	r0, [r3, #0]
 8020324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020326:	2b00      	cmp	r3, #0
 8020328:	f43f acd8 	beq.w	801fcdc <_dtoa_r+0xa4>
 802032c:	601d      	str	r5, [r3, #0]
 802032e:	e4d5      	b.n	801fcdc <_dtoa_r+0xa4>
 8020330:	f8cd a01c 	str.w	sl, [sp, #28]
 8020334:	462b      	mov	r3, r5
 8020336:	461d      	mov	r5, r3
 8020338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802033c:	2a39      	cmp	r2, #57	; 0x39
 802033e:	d108      	bne.n	8020352 <_dtoa_r+0x71a>
 8020340:	9a00      	ldr	r2, [sp, #0]
 8020342:	429a      	cmp	r2, r3
 8020344:	d1f7      	bne.n	8020336 <_dtoa_r+0x6fe>
 8020346:	9a07      	ldr	r2, [sp, #28]
 8020348:	9900      	ldr	r1, [sp, #0]
 802034a:	3201      	adds	r2, #1
 802034c:	9207      	str	r2, [sp, #28]
 802034e:	2230      	movs	r2, #48	; 0x30
 8020350:	700a      	strb	r2, [r1, #0]
 8020352:	781a      	ldrb	r2, [r3, #0]
 8020354:	3201      	adds	r2, #1
 8020356:	701a      	strb	r2, [r3, #0]
 8020358:	e78c      	b.n	8020274 <_dtoa_r+0x63c>
 802035a:	4b7f      	ldr	r3, [pc, #508]	; (8020558 <_dtoa_r+0x920>)
 802035c:	2200      	movs	r2, #0
 802035e:	f7e0 f973 	bl	8000648 <__aeabi_dmul>
 8020362:	2200      	movs	r2, #0
 8020364:	2300      	movs	r3, #0
 8020366:	4606      	mov	r6, r0
 8020368:	460f      	mov	r7, r1
 802036a:	f7e0 fbd5 	bl	8000b18 <__aeabi_dcmpeq>
 802036e:	2800      	cmp	r0, #0
 8020370:	d09b      	beq.n	80202aa <_dtoa_r+0x672>
 8020372:	e7cd      	b.n	8020310 <_dtoa_r+0x6d8>
 8020374:	9a08      	ldr	r2, [sp, #32]
 8020376:	2a00      	cmp	r2, #0
 8020378:	f000 80c4 	beq.w	8020504 <_dtoa_r+0x8cc>
 802037c:	9a05      	ldr	r2, [sp, #20]
 802037e:	2a01      	cmp	r2, #1
 8020380:	f300 80a8 	bgt.w	80204d4 <_dtoa_r+0x89c>
 8020384:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020386:	2a00      	cmp	r2, #0
 8020388:	f000 80a0 	beq.w	80204cc <_dtoa_r+0x894>
 802038c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020390:	9e06      	ldr	r6, [sp, #24]
 8020392:	4645      	mov	r5, r8
 8020394:	9a04      	ldr	r2, [sp, #16]
 8020396:	2101      	movs	r1, #1
 8020398:	441a      	add	r2, r3
 802039a:	4620      	mov	r0, r4
 802039c:	4498      	add	r8, r3
 802039e:	9204      	str	r2, [sp, #16]
 80203a0:	f000 ff42 	bl	8021228 <__i2b>
 80203a4:	4607      	mov	r7, r0
 80203a6:	2d00      	cmp	r5, #0
 80203a8:	dd0b      	ble.n	80203c2 <_dtoa_r+0x78a>
 80203aa:	9b04      	ldr	r3, [sp, #16]
 80203ac:	2b00      	cmp	r3, #0
 80203ae:	dd08      	ble.n	80203c2 <_dtoa_r+0x78a>
 80203b0:	42ab      	cmp	r3, r5
 80203b2:	9a04      	ldr	r2, [sp, #16]
 80203b4:	bfa8      	it	ge
 80203b6:	462b      	movge	r3, r5
 80203b8:	eba8 0803 	sub.w	r8, r8, r3
 80203bc:	1aed      	subs	r5, r5, r3
 80203be:	1ad3      	subs	r3, r2, r3
 80203c0:	9304      	str	r3, [sp, #16]
 80203c2:	9b06      	ldr	r3, [sp, #24]
 80203c4:	b1fb      	cbz	r3, 8020406 <_dtoa_r+0x7ce>
 80203c6:	9b08      	ldr	r3, [sp, #32]
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	f000 809f 	beq.w	802050c <_dtoa_r+0x8d4>
 80203ce:	2e00      	cmp	r6, #0
 80203d0:	dd11      	ble.n	80203f6 <_dtoa_r+0x7be>
 80203d2:	4639      	mov	r1, r7
 80203d4:	4632      	mov	r2, r6
 80203d6:	4620      	mov	r0, r4
 80203d8:	f000 ffe2 	bl	80213a0 <__pow5mult>
 80203dc:	465a      	mov	r2, fp
 80203de:	4601      	mov	r1, r0
 80203e0:	4607      	mov	r7, r0
 80203e2:	4620      	mov	r0, r4
 80203e4:	f000 ff36 	bl	8021254 <__multiply>
 80203e8:	4659      	mov	r1, fp
 80203ea:	9007      	str	r0, [sp, #28]
 80203ec:	4620      	mov	r0, r4
 80203ee:	f000 fe15 	bl	802101c <_Bfree>
 80203f2:	9b07      	ldr	r3, [sp, #28]
 80203f4:	469b      	mov	fp, r3
 80203f6:	9b06      	ldr	r3, [sp, #24]
 80203f8:	1b9a      	subs	r2, r3, r6
 80203fa:	d004      	beq.n	8020406 <_dtoa_r+0x7ce>
 80203fc:	4659      	mov	r1, fp
 80203fe:	4620      	mov	r0, r4
 8020400:	f000 ffce 	bl	80213a0 <__pow5mult>
 8020404:	4683      	mov	fp, r0
 8020406:	2101      	movs	r1, #1
 8020408:	4620      	mov	r0, r4
 802040a:	f000 ff0d 	bl	8021228 <__i2b>
 802040e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020410:	2b00      	cmp	r3, #0
 8020412:	4606      	mov	r6, r0
 8020414:	dd7c      	ble.n	8020510 <_dtoa_r+0x8d8>
 8020416:	461a      	mov	r2, r3
 8020418:	4601      	mov	r1, r0
 802041a:	4620      	mov	r0, r4
 802041c:	f000 ffc0 	bl	80213a0 <__pow5mult>
 8020420:	9b05      	ldr	r3, [sp, #20]
 8020422:	2b01      	cmp	r3, #1
 8020424:	4606      	mov	r6, r0
 8020426:	dd76      	ble.n	8020516 <_dtoa_r+0x8de>
 8020428:	2300      	movs	r3, #0
 802042a:	9306      	str	r3, [sp, #24]
 802042c:	6933      	ldr	r3, [r6, #16]
 802042e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8020432:	6918      	ldr	r0, [r3, #16]
 8020434:	f000 fea8 	bl	8021188 <__hi0bits>
 8020438:	f1c0 0020 	rsb	r0, r0, #32
 802043c:	9b04      	ldr	r3, [sp, #16]
 802043e:	4418      	add	r0, r3
 8020440:	f010 001f 	ands.w	r0, r0, #31
 8020444:	f000 8086 	beq.w	8020554 <_dtoa_r+0x91c>
 8020448:	f1c0 0320 	rsb	r3, r0, #32
 802044c:	2b04      	cmp	r3, #4
 802044e:	dd7f      	ble.n	8020550 <_dtoa_r+0x918>
 8020450:	f1c0 001c 	rsb	r0, r0, #28
 8020454:	9b04      	ldr	r3, [sp, #16]
 8020456:	4403      	add	r3, r0
 8020458:	4480      	add	r8, r0
 802045a:	4405      	add	r5, r0
 802045c:	9304      	str	r3, [sp, #16]
 802045e:	f1b8 0f00 	cmp.w	r8, #0
 8020462:	dd05      	ble.n	8020470 <_dtoa_r+0x838>
 8020464:	4659      	mov	r1, fp
 8020466:	4642      	mov	r2, r8
 8020468:	4620      	mov	r0, r4
 802046a:	f000 fff3 	bl	8021454 <__lshift>
 802046e:	4683      	mov	fp, r0
 8020470:	9b04      	ldr	r3, [sp, #16]
 8020472:	2b00      	cmp	r3, #0
 8020474:	dd05      	ble.n	8020482 <_dtoa_r+0x84a>
 8020476:	4631      	mov	r1, r6
 8020478:	461a      	mov	r2, r3
 802047a:	4620      	mov	r0, r4
 802047c:	f000 ffea 	bl	8021454 <__lshift>
 8020480:	4606      	mov	r6, r0
 8020482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020484:	2b00      	cmp	r3, #0
 8020486:	d069      	beq.n	802055c <_dtoa_r+0x924>
 8020488:	4631      	mov	r1, r6
 802048a:	4658      	mov	r0, fp
 802048c:	f001 f84e 	bl	802152c <__mcmp>
 8020490:	2800      	cmp	r0, #0
 8020492:	da63      	bge.n	802055c <_dtoa_r+0x924>
 8020494:	2300      	movs	r3, #0
 8020496:	4659      	mov	r1, fp
 8020498:	220a      	movs	r2, #10
 802049a:	4620      	mov	r0, r4
 802049c:	f000 fde0 	bl	8021060 <__multadd>
 80204a0:	9b08      	ldr	r3, [sp, #32]
 80204a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80204a6:	4683      	mov	fp, r0
 80204a8:	2b00      	cmp	r3, #0
 80204aa:	f000 818f 	beq.w	80207cc <_dtoa_r+0xb94>
 80204ae:	4639      	mov	r1, r7
 80204b0:	2300      	movs	r3, #0
 80204b2:	220a      	movs	r2, #10
 80204b4:	4620      	mov	r0, r4
 80204b6:	f000 fdd3 	bl	8021060 <__multadd>
 80204ba:	f1b9 0f00 	cmp.w	r9, #0
 80204be:	4607      	mov	r7, r0
 80204c0:	f300 808e 	bgt.w	80205e0 <_dtoa_r+0x9a8>
 80204c4:	9b05      	ldr	r3, [sp, #20]
 80204c6:	2b02      	cmp	r3, #2
 80204c8:	dc50      	bgt.n	802056c <_dtoa_r+0x934>
 80204ca:	e089      	b.n	80205e0 <_dtoa_r+0x9a8>
 80204cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80204ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80204d2:	e75d      	b.n	8020390 <_dtoa_r+0x758>
 80204d4:	9b01      	ldr	r3, [sp, #4]
 80204d6:	1e5e      	subs	r6, r3, #1
 80204d8:	9b06      	ldr	r3, [sp, #24]
 80204da:	42b3      	cmp	r3, r6
 80204dc:	bfbf      	itttt	lt
 80204de:	9b06      	ldrlt	r3, [sp, #24]
 80204e0:	9606      	strlt	r6, [sp, #24]
 80204e2:	1af2      	sublt	r2, r6, r3
 80204e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80204e6:	bfb6      	itet	lt
 80204e8:	189b      	addlt	r3, r3, r2
 80204ea:	1b9e      	subge	r6, r3, r6
 80204ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80204ee:	9b01      	ldr	r3, [sp, #4]
 80204f0:	bfb8      	it	lt
 80204f2:	2600      	movlt	r6, #0
 80204f4:	2b00      	cmp	r3, #0
 80204f6:	bfb5      	itete	lt
 80204f8:	eba8 0503 	sublt.w	r5, r8, r3
 80204fc:	9b01      	ldrge	r3, [sp, #4]
 80204fe:	2300      	movlt	r3, #0
 8020500:	4645      	movge	r5, r8
 8020502:	e747      	b.n	8020394 <_dtoa_r+0x75c>
 8020504:	9e06      	ldr	r6, [sp, #24]
 8020506:	9f08      	ldr	r7, [sp, #32]
 8020508:	4645      	mov	r5, r8
 802050a:	e74c      	b.n	80203a6 <_dtoa_r+0x76e>
 802050c:	9a06      	ldr	r2, [sp, #24]
 802050e:	e775      	b.n	80203fc <_dtoa_r+0x7c4>
 8020510:	9b05      	ldr	r3, [sp, #20]
 8020512:	2b01      	cmp	r3, #1
 8020514:	dc18      	bgt.n	8020548 <_dtoa_r+0x910>
 8020516:	9b02      	ldr	r3, [sp, #8]
 8020518:	b9b3      	cbnz	r3, 8020548 <_dtoa_r+0x910>
 802051a:	9b03      	ldr	r3, [sp, #12]
 802051c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020520:	b9a3      	cbnz	r3, 802054c <_dtoa_r+0x914>
 8020522:	9b03      	ldr	r3, [sp, #12]
 8020524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020528:	0d1b      	lsrs	r3, r3, #20
 802052a:	051b      	lsls	r3, r3, #20
 802052c:	b12b      	cbz	r3, 802053a <_dtoa_r+0x902>
 802052e:	9b04      	ldr	r3, [sp, #16]
 8020530:	3301      	adds	r3, #1
 8020532:	9304      	str	r3, [sp, #16]
 8020534:	f108 0801 	add.w	r8, r8, #1
 8020538:	2301      	movs	r3, #1
 802053a:	9306      	str	r3, [sp, #24]
 802053c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802053e:	2b00      	cmp	r3, #0
 8020540:	f47f af74 	bne.w	802042c <_dtoa_r+0x7f4>
 8020544:	2001      	movs	r0, #1
 8020546:	e779      	b.n	802043c <_dtoa_r+0x804>
 8020548:	2300      	movs	r3, #0
 802054a:	e7f6      	b.n	802053a <_dtoa_r+0x902>
 802054c:	9b02      	ldr	r3, [sp, #8]
 802054e:	e7f4      	b.n	802053a <_dtoa_r+0x902>
 8020550:	d085      	beq.n	802045e <_dtoa_r+0x826>
 8020552:	4618      	mov	r0, r3
 8020554:	301c      	adds	r0, #28
 8020556:	e77d      	b.n	8020454 <_dtoa_r+0x81c>
 8020558:	40240000 	.word	0x40240000
 802055c:	9b01      	ldr	r3, [sp, #4]
 802055e:	2b00      	cmp	r3, #0
 8020560:	dc38      	bgt.n	80205d4 <_dtoa_r+0x99c>
 8020562:	9b05      	ldr	r3, [sp, #20]
 8020564:	2b02      	cmp	r3, #2
 8020566:	dd35      	ble.n	80205d4 <_dtoa_r+0x99c>
 8020568:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802056c:	f1b9 0f00 	cmp.w	r9, #0
 8020570:	d10d      	bne.n	802058e <_dtoa_r+0x956>
 8020572:	4631      	mov	r1, r6
 8020574:	464b      	mov	r3, r9
 8020576:	2205      	movs	r2, #5
 8020578:	4620      	mov	r0, r4
 802057a:	f000 fd71 	bl	8021060 <__multadd>
 802057e:	4601      	mov	r1, r0
 8020580:	4606      	mov	r6, r0
 8020582:	4658      	mov	r0, fp
 8020584:	f000 ffd2 	bl	802152c <__mcmp>
 8020588:	2800      	cmp	r0, #0
 802058a:	f73f adbd 	bgt.w	8020108 <_dtoa_r+0x4d0>
 802058e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020590:	9d00      	ldr	r5, [sp, #0]
 8020592:	ea6f 0a03 	mvn.w	sl, r3
 8020596:	f04f 0800 	mov.w	r8, #0
 802059a:	4631      	mov	r1, r6
 802059c:	4620      	mov	r0, r4
 802059e:	f000 fd3d 	bl	802101c <_Bfree>
 80205a2:	2f00      	cmp	r7, #0
 80205a4:	f43f aeb4 	beq.w	8020310 <_dtoa_r+0x6d8>
 80205a8:	f1b8 0f00 	cmp.w	r8, #0
 80205ac:	d005      	beq.n	80205ba <_dtoa_r+0x982>
 80205ae:	45b8      	cmp	r8, r7
 80205b0:	d003      	beq.n	80205ba <_dtoa_r+0x982>
 80205b2:	4641      	mov	r1, r8
 80205b4:	4620      	mov	r0, r4
 80205b6:	f000 fd31 	bl	802101c <_Bfree>
 80205ba:	4639      	mov	r1, r7
 80205bc:	4620      	mov	r0, r4
 80205be:	f000 fd2d 	bl	802101c <_Bfree>
 80205c2:	e6a5      	b.n	8020310 <_dtoa_r+0x6d8>
 80205c4:	2600      	movs	r6, #0
 80205c6:	4637      	mov	r7, r6
 80205c8:	e7e1      	b.n	802058e <_dtoa_r+0x956>
 80205ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80205cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80205d0:	4637      	mov	r7, r6
 80205d2:	e599      	b.n	8020108 <_dtoa_r+0x4d0>
 80205d4:	9b08      	ldr	r3, [sp, #32]
 80205d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80205da:	2b00      	cmp	r3, #0
 80205dc:	f000 80fd 	beq.w	80207da <_dtoa_r+0xba2>
 80205e0:	2d00      	cmp	r5, #0
 80205e2:	dd05      	ble.n	80205f0 <_dtoa_r+0x9b8>
 80205e4:	4639      	mov	r1, r7
 80205e6:	462a      	mov	r2, r5
 80205e8:	4620      	mov	r0, r4
 80205ea:	f000 ff33 	bl	8021454 <__lshift>
 80205ee:	4607      	mov	r7, r0
 80205f0:	9b06      	ldr	r3, [sp, #24]
 80205f2:	2b00      	cmp	r3, #0
 80205f4:	d05c      	beq.n	80206b0 <_dtoa_r+0xa78>
 80205f6:	6879      	ldr	r1, [r7, #4]
 80205f8:	4620      	mov	r0, r4
 80205fa:	f000 fccf 	bl	8020f9c <_Balloc>
 80205fe:	4605      	mov	r5, r0
 8020600:	b928      	cbnz	r0, 802060e <_dtoa_r+0x9d6>
 8020602:	4b80      	ldr	r3, [pc, #512]	; (8020804 <_dtoa_r+0xbcc>)
 8020604:	4602      	mov	r2, r0
 8020606:	f240 21ea 	movw	r1, #746	; 0x2ea
 802060a:	f7ff bb2e 	b.w	801fc6a <_dtoa_r+0x32>
 802060e:	693a      	ldr	r2, [r7, #16]
 8020610:	3202      	adds	r2, #2
 8020612:	0092      	lsls	r2, r2, #2
 8020614:	f107 010c 	add.w	r1, r7, #12
 8020618:	300c      	adds	r0, #12
 802061a:	f7fd fc93 	bl	801df44 <memcpy>
 802061e:	2201      	movs	r2, #1
 8020620:	4629      	mov	r1, r5
 8020622:	4620      	mov	r0, r4
 8020624:	f000 ff16 	bl	8021454 <__lshift>
 8020628:	9b00      	ldr	r3, [sp, #0]
 802062a:	3301      	adds	r3, #1
 802062c:	9301      	str	r3, [sp, #4]
 802062e:	9b00      	ldr	r3, [sp, #0]
 8020630:	444b      	add	r3, r9
 8020632:	9307      	str	r3, [sp, #28]
 8020634:	9b02      	ldr	r3, [sp, #8]
 8020636:	f003 0301 	and.w	r3, r3, #1
 802063a:	46b8      	mov	r8, r7
 802063c:	9306      	str	r3, [sp, #24]
 802063e:	4607      	mov	r7, r0
 8020640:	9b01      	ldr	r3, [sp, #4]
 8020642:	4631      	mov	r1, r6
 8020644:	3b01      	subs	r3, #1
 8020646:	4658      	mov	r0, fp
 8020648:	9302      	str	r3, [sp, #8]
 802064a:	f7ff fa69 	bl	801fb20 <quorem>
 802064e:	4603      	mov	r3, r0
 8020650:	3330      	adds	r3, #48	; 0x30
 8020652:	9004      	str	r0, [sp, #16]
 8020654:	4641      	mov	r1, r8
 8020656:	4658      	mov	r0, fp
 8020658:	9308      	str	r3, [sp, #32]
 802065a:	f000 ff67 	bl	802152c <__mcmp>
 802065e:	463a      	mov	r2, r7
 8020660:	4681      	mov	r9, r0
 8020662:	4631      	mov	r1, r6
 8020664:	4620      	mov	r0, r4
 8020666:	f000 ff7d 	bl	8021564 <__mdiff>
 802066a:	68c2      	ldr	r2, [r0, #12]
 802066c:	9b08      	ldr	r3, [sp, #32]
 802066e:	4605      	mov	r5, r0
 8020670:	bb02      	cbnz	r2, 80206b4 <_dtoa_r+0xa7c>
 8020672:	4601      	mov	r1, r0
 8020674:	4658      	mov	r0, fp
 8020676:	f000 ff59 	bl	802152c <__mcmp>
 802067a:	9b08      	ldr	r3, [sp, #32]
 802067c:	4602      	mov	r2, r0
 802067e:	4629      	mov	r1, r5
 8020680:	4620      	mov	r0, r4
 8020682:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8020686:	f000 fcc9 	bl	802101c <_Bfree>
 802068a:	9b05      	ldr	r3, [sp, #20]
 802068c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802068e:	9d01      	ldr	r5, [sp, #4]
 8020690:	ea43 0102 	orr.w	r1, r3, r2
 8020694:	9b06      	ldr	r3, [sp, #24]
 8020696:	430b      	orrs	r3, r1
 8020698:	9b08      	ldr	r3, [sp, #32]
 802069a:	d10d      	bne.n	80206b8 <_dtoa_r+0xa80>
 802069c:	2b39      	cmp	r3, #57	; 0x39
 802069e:	d029      	beq.n	80206f4 <_dtoa_r+0xabc>
 80206a0:	f1b9 0f00 	cmp.w	r9, #0
 80206a4:	dd01      	ble.n	80206aa <_dtoa_r+0xa72>
 80206a6:	9b04      	ldr	r3, [sp, #16]
 80206a8:	3331      	adds	r3, #49	; 0x31
 80206aa:	9a02      	ldr	r2, [sp, #8]
 80206ac:	7013      	strb	r3, [r2, #0]
 80206ae:	e774      	b.n	802059a <_dtoa_r+0x962>
 80206b0:	4638      	mov	r0, r7
 80206b2:	e7b9      	b.n	8020628 <_dtoa_r+0x9f0>
 80206b4:	2201      	movs	r2, #1
 80206b6:	e7e2      	b.n	802067e <_dtoa_r+0xa46>
 80206b8:	f1b9 0f00 	cmp.w	r9, #0
 80206bc:	db06      	blt.n	80206cc <_dtoa_r+0xa94>
 80206be:	9905      	ldr	r1, [sp, #20]
 80206c0:	ea41 0909 	orr.w	r9, r1, r9
 80206c4:	9906      	ldr	r1, [sp, #24]
 80206c6:	ea59 0101 	orrs.w	r1, r9, r1
 80206ca:	d120      	bne.n	802070e <_dtoa_r+0xad6>
 80206cc:	2a00      	cmp	r2, #0
 80206ce:	ddec      	ble.n	80206aa <_dtoa_r+0xa72>
 80206d0:	4659      	mov	r1, fp
 80206d2:	2201      	movs	r2, #1
 80206d4:	4620      	mov	r0, r4
 80206d6:	9301      	str	r3, [sp, #4]
 80206d8:	f000 febc 	bl	8021454 <__lshift>
 80206dc:	4631      	mov	r1, r6
 80206de:	4683      	mov	fp, r0
 80206e0:	f000 ff24 	bl	802152c <__mcmp>
 80206e4:	2800      	cmp	r0, #0
 80206e6:	9b01      	ldr	r3, [sp, #4]
 80206e8:	dc02      	bgt.n	80206f0 <_dtoa_r+0xab8>
 80206ea:	d1de      	bne.n	80206aa <_dtoa_r+0xa72>
 80206ec:	07da      	lsls	r2, r3, #31
 80206ee:	d5dc      	bpl.n	80206aa <_dtoa_r+0xa72>
 80206f0:	2b39      	cmp	r3, #57	; 0x39
 80206f2:	d1d8      	bne.n	80206a6 <_dtoa_r+0xa6e>
 80206f4:	9a02      	ldr	r2, [sp, #8]
 80206f6:	2339      	movs	r3, #57	; 0x39
 80206f8:	7013      	strb	r3, [r2, #0]
 80206fa:	462b      	mov	r3, r5
 80206fc:	461d      	mov	r5, r3
 80206fe:	3b01      	subs	r3, #1
 8020700:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8020704:	2a39      	cmp	r2, #57	; 0x39
 8020706:	d050      	beq.n	80207aa <_dtoa_r+0xb72>
 8020708:	3201      	adds	r2, #1
 802070a:	701a      	strb	r2, [r3, #0]
 802070c:	e745      	b.n	802059a <_dtoa_r+0x962>
 802070e:	2a00      	cmp	r2, #0
 8020710:	dd03      	ble.n	802071a <_dtoa_r+0xae2>
 8020712:	2b39      	cmp	r3, #57	; 0x39
 8020714:	d0ee      	beq.n	80206f4 <_dtoa_r+0xabc>
 8020716:	3301      	adds	r3, #1
 8020718:	e7c7      	b.n	80206aa <_dtoa_r+0xa72>
 802071a:	9a01      	ldr	r2, [sp, #4]
 802071c:	9907      	ldr	r1, [sp, #28]
 802071e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020722:	428a      	cmp	r2, r1
 8020724:	d02a      	beq.n	802077c <_dtoa_r+0xb44>
 8020726:	4659      	mov	r1, fp
 8020728:	2300      	movs	r3, #0
 802072a:	220a      	movs	r2, #10
 802072c:	4620      	mov	r0, r4
 802072e:	f000 fc97 	bl	8021060 <__multadd>
 8020732:	45b8      	cmp	r8, r7
 8020734:	4683      	mov	fp, r0
 8020736:	f04f 0300 	mov.w	r3, #0
 802073a:	f04f 020a 	mov.w	r2, #10
 802073e:	4641      	mov	r1, r8
 8020740:	4620      	mov	r0, r4
 8020742:	d107      	bne.n	8020754 <_dtoa_r+0xb1c>
 8020744:	f000 fc8c 	bl	8021060 <__multadd>
 8020748:	4680      	mov	r8, r0
 802074a:	4607      	mov	r7, r0
 802074c:	9b01      	ldr	r3, [sp, #4]
 802074e:	3301      	adds	r3, #1
 8020750:	9301      	str	r3, [sp, #4]
 8020752:	e775      	b.n	8020640 <_dtoa_r+0xa08>
 8020754:	f000 fc84 	bl	8021060 <__multadd>
 8020758:	4639      	mov	r1, r7
 802075a:	4680      	mov	r8, r0
 802075c:	2300      	movs	r3, #0
 802075e:	220a      	movs	r2, #10
 8020760:	4620      	mov	r0, r4
 8020762:	f000 fc7d 	bl	8021060 <__multadd>
 8020766:	4607      	mov	r7, r0
 8020768:	e7f0      	b.n	802074c <_dtoa_r+0xb14>
 802076a:	f1b9 0f00 	cmp.w	r9, #0
 802076e:	9a00      	ldr	r2, [sp, #0]
 8020770:	bfcc      	ite	gt
 8020772:	464d      	movgt	r5, r9
 8020774:	2501      	movle	r5, #1
 8020776:	4415      	add	r5, r2
 8020778:	f04f 0800 	mov.w	r8, #0
 802077c:	4659      	mov	r1, fp
 802077e:	2201      	movs	r2, #1
 8020780:	4620      	mov	r0, r4
 8020782:	9301      	str	r3, [sp, #4]
 8020784:	f000 fe66 	bl	8021454 <__lshift>
 8020788:	4631      	mov	r1, r6
 802078a:	4683      	mov	fp, r0
 802078c:	f000 fece 	bl	802152c <__mcmp>
 8020790:	2800      	cmp	r0, #0
 8020792:	dcb2      	bgt.n	80206fa <_dtoa_r+0xac2>
 8020794:	d102      	bne.n	802079c <_dtoa_r+0xb64>
 8020796:	9b01      	ldr	r3, [sp, #4]
 8020798:	07db      	lsls	r3, r3, #31
 802079a:	d4ae      	bmi.n	80206fa <_dtoa_r+0xac2>
 802079c:	462b      	mov	r3, r5
 802079e:	461d      	mov	r5, r3
 80207a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80207a4:	2a30      	cmp	r2, #48	; 0x30
 80207a6:	d0fa      	beq.n	802079e <_dtoa_r+0xb66>
 80207a8:	e6f7      	b.n	802059a <_dtoa_r+0x962>
 80207aa:	9a00      	ldr	r2, [sp, #0]
 80207ac:	429a      	cmp	r2, r3
 80207ae:	d1a5      	bne.n	80206fc <_dtoa_r+0xac4>
 80207b0:	f10a 0a01 	add.w	sl, sl, #1
 80207b4:	2331      	movs	r3, #49	; 0x31
 80207b6:	e779      	b.n	80206ac <_dtoa_r+0xa74>
 80207b8:	4b13      	ldr	r3, [pc, #76]	; (8020808 <_dtoa_r+0xbd0>)
 80207ba:	f7ff baaf 	b.w	801fd1c <_dtoa_r+0xe4>
 80207be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	f47f aa86 	bne.w	801fcd2 <_dtoa_r+0x9a>
 80207c6:	4b11      	ldr	r3, [pc, #68]	; (802080c <_dtoa_r+0xbd4>)
 80207c8:	f7ff baa8 	b.w	801fd1c <_dtoa_r+0xe4>
 80207cc:	f1b9 0f00 	cmp.w	r9, #0
 80207d0:	dc03      	bgt.n	80207da <_dtoa_r+0xba2>
 80207d2:	9b05      	ldr	r3, [sp, #20]
 80207d4:	2b02      	cmp	r3, #2
 80207d6:	f73f aec9 	bgt.w	802056c <_dtoa_r+0x934>
 80207da:	9d00      	ldr	r5, [sp, #0]
 80207dc:	4631      	mov	r1, r6
 80207de:	4658      	mov	r0, fp
 80207e0:	f7ff f99e 	bl	801fb20 <quorem>
 80207e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80207e8:	f805 3b01 	strb.w	r3, [r5], #1
 80207ec:	9a00      	ldr	r2, [sp, #0]
 80207ee:	1aaa      	subs	r2, r5, r2
 80207f0:	4591      	cmp	r9, r2
 80207f2:	ddba      	ble.n	802076a <_dtoa_r+0xb32>
 80207f4:	4659      	mov	r1, fp
 80207f6:	2300      	movs	r3, #0
 80207f8:	220a      	movs	r2, #10
 80207fa:	4620      	mov	r0, r4
 80207fc:	f000 fc30 	bl	8021060 <__multadd>
 8020800:	4683      	mov	fp, r0
 8020802:	e7eb      	b.n	80207dc <_dtoa_r+0xba4>
 8020804:	08022f00 	.word	0x08022f00
 8020808:	08022de4 	.word	0x08022de4
 802080c:	08022e7d 	.word	0x08022e7d

08020810 <_fstat_r>:
 8020810:	b538      	push	{r3, r4, r5, lr}
 8020812:	4d07      	ldr	r5, [pc, #28]	; (8020830 <_fstat_r+0x20>)
 8020814:	2300      	movs	r3, #0
 8020816:	4604      	mov	r4, r0
 8020818:	4608      	mov	r0, r1
 802081a:	4611      	mov	r1, r2
 802081c:	602b      	str	r3, [r5, #0]
 802081e:	f7fd f8db 	bl	801d9d8 <_fstat>
 8020822:	1c43      	adds	r3, r0, #1
 8020824:	d102      	bne.n	802082c <_fstat_r+0x1c>
 8020826:	682b      	ldr	r3, [r5, #0]
 8020828:	b103      	cbz	r3, 802082c <_fstat_r+0x1c>
 802082a:	6023      	str	r3, [r4, #0]
 802082c:	bd38      	pop	{r3, r4, r5, pc}
 802082e:	bf00      	nop
 8020830:	20019220 	.word	0x20019220

08020834 <rshift>:
 8020834:	6903      	ldr	r3, [r0, #16]
 8020836:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802083a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802083e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8020842:	f100 0414 	add.w	r4, r0, #20
 8020846:	dd45      	ble.n	80208d4 <rshift+0xa0>
 8020848:	f011 011f 	ands.w	r1, r1, #31
 802084c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8020850:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8020854:	d10c      	bne.n	8020870 <rshift+0x3c>
 8020856:	f100 0710 	add.w	r7, r0, #16
 802085a:	4629      	mov	r1, r5
 802085c:	42b1      	cmp	r1, r6
 802085e:	d334      	bcc.n	80208ca <rshift+0x96>
 8020860:	1a9b      	subs	r3, r3, r2
 8020862:	009b      	lsls	r3, r3, #2
 8020864:	1eea      	subs	r2, r5, #3
 8020866:	4296      	cmp	r6, r2
 8020868:	bf38      	it	cc
 802086a:	2300      	movcc	r3, #0
 802086c:	4423      	add	r3, r4
 802086e:	e015      	b.n	802089c <rshift+0x68>
 8020870:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8020874:	f1c1 0820 	rsb	r8, r1, #32
 8020878:	40cf      	lsrs	r7, r1
 802087a:	f105 0e04 	add.w	lr, r5, #4
 802087e:	46a1      	mov	r9, r4
 8020880:	4576      	cmp	r6, lr
 8020882:	46f4      	mov	ip, lr
 8020884:	d815      	bhi.n	80208b2 <rshift+0x7e>
 8020886:	1a9b      	subs	r3, r3, r2
 8020888:	009a      	lsls	r2, r3, #2
 802088a:	3a04      	subs	r2, #4
 802088c:	3501      	adds	r5, #1
 802088e:	42ae      	cmp	r6, r5
 8020890:	bf38      	it	cc
 8020892:	2200      	movcc	r2, #0
 8020894:	18a3      	adds	r3, r4, r2
 8020896:	50a7      	str	r7, [r4, r2]
 8020898:	b107      	cbz	r7, 802089c <rshift+0x68>
 802089a:	3304      	adds	r3, #4
 802089c:	1b1a      	subs	r2, r3, r4
 802089e:	42a3      	cmp	r3, r4
 80208a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80208a4:	bf08      	it	eq
 80208a6:	2300      	moveq	r3, #0
 80208a8:	6102      	str	r2, [r0, #16]
 80208aa:	bf08      	it	eq
 80208ac:	6143      	streq	r3, [r0, #20]
 80208ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80208b2:	f8dc c000 	ldr.w	ip, [ip]
 80208b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80208ba:	ea4c 0707 	orr.w	r7, ip, r7
 80208be:	f849 7b04 	str.w	r7, [r9], #4
 80208c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80208c6:	40cf      	lsrs	r7, r1
 80208c8:	e7da      	b.n	8020880 <rshift+0x4c>
 80208ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80208ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80208d2:	e7c3      	b.n	802085c <rshift+0x28>
 80208d4:	4623      	mov	r3, r4
 80208d6:	e7e1      	b.n	802089c <rshift+0x68>

080208d8 <__hexdig_fun>:
 80208d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80208dc:	2b09      	cmp	r3, #9
 80208de:	d802      	bhi.n	80208e6 <__hexdig_fun+0xe>
 80208e0:	3820      	subs	r0, #32
 80208e2:	b2c0      	uxtb	r0, r0
 80208e4:	4770      	bx	lr
 80208e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80208ea:	2b05      	cmp	r3, #5
 80208ec:	d801      	bhi.n	80208f2 <__hexdig_fun+0x1a>
 80208ee:	3847      	subs	r0, #71	; 0x47
 80208f0:	e7f7      	b.n	80208e2 <__hexdig_fun+0xa>
 80208f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80208f6:	2b05      	cmp	r3, #5
 80208f8:	d801      	bhi.n	80208fe <__hexdig_fun+0x26>
 80208fa:	3827      	subs	r0, #39	; 0x27
 80208fc:	e7f1      	b.n	80208e2 <__hexdig_fun+0xa>
 80208fe:	2000      	movs	r0, #0
 8020900:	4770      	bx	lr
	...

08020904 <__gethex>:
 8020904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020908:	ed2d 8b02 	vpush	{d8}
 802090c:	b089      	sub	sp, #36	; 0x24
 802090e:	ee08 0a10 	vmov	s16, r0
 8020912:	9304      	str	r3, [sp, #16]
 8020914:	4bbc      	ldr	r3, [pc, #752]	; (8020c08 <__gethex+0x304>)
 8020916:	681b      	ldr	r3, [r3, #0]
 8020918:	9301      	str	r3, [sp, #4]
 802091a:	4618      	mov	r0, r3
 802091c:	468b      	mov	fp, r1
 802091e:	4690      	mov	r8, r2
 8020920:	f7df fc78 	bl	8000214 <strlen>
 8020924:	9b01      	ldr	r3, [sp, #4]
 8020926:	f8db 2000 	ldr.w	r2, [fp]
 802092a:	4403      	add	r3, r0
 802092c:	4682      	mov	sl, r0
 802092e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8020932:	9305      	str	r3, [sp, #20]
 8020934:	1c93      	adds	r3, r2, #2
 8020936:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802093a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802093e:	32fe      	adds	r2, #254	; 0xfe
 8020940:	18d1      	adds	r1, r2, r3
 8020942:	461f      	mov	r7, r3
 8020944:	f813 0b01 	ldrb.w	r0, [r3], #1
 8020948:	9100      	str	r1, [sp, #0]
 802094a:	2830      	cmp	r0, #48	; 0x30
 802094c:	d0f8      	beq.n	8020940 <__gethex+0x3c>
 802094e:	f7ff ffc3 	bl	80208d8 <__hexdig_fun>
 8020952:	4604      	mov	r4, r0
 8020954:	2800      	cmp	r0, #0
 8020956:	d13a      	bne.n	80209ce <__gethex+0xca>
 8020958:	9901      	ldr	r1, [sp, #4]
 802095a:	4652      	mov	r2, sl
 802095c:	4638      	mov	r0, r7
 802095e:	f7fe f8d4 	bl	801eb0a <strncmp>
 8020962:	4605      	mov	r5, r0
 8020964:	2800      	cmp	r0, #0
 8020966:	d168      	bne.n	8020a3a <__gethex+0x136>
 8020968:	f817 000a 	ldrb.w	r0, [r7, sl]
 802096c:	eb07 060a 	add.w	r6, r7, sl
 8020970:	f7ff ffb2 	bl	80208d8 <__hexdig_fun>
 8020974:	2800      	cmp	r0, #0
 8020976:	d062      	beq.n	8020a3e <__gethex+0x13a>
 8020978:	4633      	mov	r3, r6
 802097a:	7818      	ldrb	r0, [r3, #0]
 802097c:	2830      	cmp	r0, #48	; 0x30
 802097e:	461f      	mov	r7, r3
 8020980:	f103 0301 	add.w	r3, r3, #1
 8020984:	d0f9      	beq.n	802097a <__gethex+0x76>
 8020986:	f7ff ffa7 	bl	80208d8 <__hexdig_fun>
 802098a:	2301      	movs	r3, #1
 802098c:	fab0 f480 	clz	r4, r0
 8020990:	0964      	lsrs	r4, r4, #5
 8020992:	4635      	mov	r5, r6
 8020994:	9300      	str	r3, [sp, #0]
 8020996:	463a      	mov	r2, r7
 8020998:	4616      	mov	r6, r2
 802099a:	3201      	adds	r2, #1
 802099c:	7830      	ldrb	r0, [r6, #0]
 802099e:	f7ff ff9b 	bl	80208d8 <__hexdig_fun>
 80209a2:	2800      	cmp	r0, #0
 80209a4:	d1f8      	bne.n	8020998 <__gethex+0x94>
 80209a6:	9901      	ldr	r1, [sp, #4]
 80209a8:	4652      	mov	r2, sl
 80209aa:	4630      	mov	r0, r6
 80209ac:	f7fe f8ad 	bl	801eb0a <strncmp>
 80209b0:	b980      	cbnz	r0, 80209d4 <__gethex+0xd0>
 80209b2:	b94d      	cbnz	r5, 80209c8 <__gethex+0xc4>
 80209b4:	eb06 050a 	add.w	r5, r6, sl
 80209b8:	462a      	mov	r2, r5
 80209ba:	4616      	mov	r6, r2
 80209bc:	3201      	adds	r2, #1
 80209be:	7830      	ldrb	r0, [r6, #0]
 80209c0:	f7ff ff8a 	bl	80208d8 <__hexdig_fun>
 80209c4:	2800      	cmp	r0, #0
 80209c6:	d1f8      	bne.n	80209ba <__gethex+0xb6>
 80209c8:	1bad      	subs	r5, r5, r6
 80209ca:	00ad      	lsls	r5, r5, #2
 80209cc:	e004      	b.n	80209d8 <__gethex+0xd4>
 80209ce:	2400      	movs	r4, #0
 80209d0:	4625      	mov	r5, r4
 80209d2:	e7e0      	b.n	8020996 <__gethex+0x92>
 80209d4:	2d00      	cmp	r5, #0
 80209d6:	d1f7      	bne.n	80209c8 <__gethex+0xc4>
 80209d8:	7833      	ldrb	r3, [r6, #0]
 80209da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80209de:	2b50      	cmp	r3, #80	; 0x50
 80209e0:	d13b      	bne.n	8020a5a <__gethex+0x156>
 80209e2:	7873      	ldrb	r3, [r6, #1]
 80209e4:	2b2b      	cmp	r3, #43	; 0x2b
 80209e6:	d02c      	beq.n	8020a42 <__gethex+0x13e>
 80209e8:	2b2d      	cmp	r3, #45	; 0x2d
 80209ea:	d02e      	beq.n	8020a4a <__gethex+0x146>
 80209ec:	1c71      	adds	r1, r6, #1
 80209ee:	f04f 0900 	mov.w	r9, #0
 80209f2:	7808      	ldrb	r0, [r1, #0]
 80209f4:	f7ff ff70 	bl	80208d8 <__hexdig_fun>
 80209f8:	1e43      	subs	r3, r0, #1
 80209fa:	b2db      	uxtb	r3, r3
 80209fc:	2b18      	cmp	r3, #24
 80209fe:	d82c      	bhi.n	8020a5a <__gethex+0x156>
 8020a00:	f1a0 0210 	sub.w	r2, r0, #16
 8020a04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020a08:	f7ff ff66 	bl	80208d8 <__hexdig_fun>
 8020a0c:	1e43      	subs	r3, r0, #1
 8020a0e:	b2db      	uxtb	r3, r3
 8020a10:	2b18      	cmp	r3, #24
 8020a12:	d91d      	bls.n	8020a50 <__gethex+0x14c>
 8020a14:	f1b9 0f00 	cmp.w	r9, #0
 8020a18:	d000      	beq.n	8020a1c <__gethex+0x118>
 8020a1a:	4252      	negs	r2, r2
 8020a1c:	4415      	add	r5, r2
 8020a1e:	f8cb 1000 	str.w	r1, [fp]
 8020a22:	b1e4      	cbz	r4, 8020a5e <__gethex+0x15a>
 8020a24:	9b00      	ldr	r3, [sp, #0]
 8020a26:	2b00      	cmp	r3, #0
 8020a28:	bf14      	ite	ne
 8020a2a:	2700      	movne	r7, #0
 8020a2c:	2706      	moveq	r7, #6
 8020a2e:	4638      	mov	r0, r7
 8020a30:	b009      	add	sp, #36	; 0x24
 8020a32:	ecbd 8b02 	vpop	{d8}
 8020a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a3a:	463e      	mov	r6, r7
 8020a3c:	4625      	mov	r5, r4
 8020a3e:	2401      	movs	r4, #1
 8020a40:	e7ca      	b.n	80209d8 <__gethex+0xd4>
 8020a42:	f04f 0900 	mov.w	r9, #0
 8020a46:	1cb1      	adds	r1, r6, #2
 8020a48:	e7d3      	b.n	80209f2 <__gethex+0xee>
 8020a4a:	f04f 0901 	mov.w	r9, #1
 8020a4e:	e7fa      	b.n	8020a46 <__gethex+0x142>
 8020a50:	230a      	movs	r3, #10
 8020a52:	fb03 0202 	mla	r2, r3, r2, r0
 8020a56:	3a10      	subs	r2, #16
 8020a58:	e7d4      	b.n	8020a04 <__gethex+0x100>
 8020a5a:	4631      	mov	r1, r6
 8020a5c:	e7df      	b.n	8020a1e <__gethex+0x11a>
 8020a5e:	1bf3      	subs	r3, r6, r7
 8020a60:	3b01      	subs	r3, #1
 8020a62:	4621      	mov	r1, r4
 8020a64:	2b07      	cmp	r3, #7
 8020a66:	dc0b      	bgt.n	8020a80 <__gethex+0x17c>
 8020a68:	ee18 0a10 	vmov	r0, s16
 8020a6c:	f000 fa96 	bl	8020f9c <_Balloc>
 8020a70:	4604      	mov	r4, r0
 8020a72:	b940      	cbnz	r0, 8020a86 <__gethex+0x182>
 8020a74:	4b65      	ldr	r3, [pc, #404]	; (8020c0c <__gethex+0x308>)
 8020a76:	4602      	mov	r2, r0
 8020a78:	21de      	movs	r1, #222	; 0xde
 8020a7a:	4865      	ldr	r0, [pc, #404]	; (8020c10 <__gethex+0x30c>)
 8020a7c:	f001 f8ce 	bl	8021c1c <__assert_func>
 8020a80:	3101      	adds	r1, #1
 8020a82:	105b      	asrs	r3, r3, #1
 8020a84:	e7ee      	b.n	8020a64 <__gethex+0x160>
 8020a86:	f100 0914 	add.w	r9, r0, #20
 8020a8a:	f04f 0b00 	mov.w	fp, #0
 8020a8e:	f1ca 0301 	rsb	r3, sl, #1
 8020a92:	f8cd 9008 	str.w	r9, [sp, #8]
 8020a96:	f8cd b000 	str.w	fp, [sp]
 8020a9a:	9306      	str	r3, [sp, #24]
 8020a9c:	42b7      	cmp	r7, r6
 8020a9e:	d340      	bcc.n	8020b22 <__gethex+0x21e>
 8020aa0:	9802      	ldr	r0, [sp, #8]
 8020aa2:	9b00      	ldr	r3, [sp, #0]
 8020aa4:	f840 3b04 	str.w	r3, [r0], #4
 8020aa8:	eba0 0009 	sub.w	r0, r0, r9
 8020aac:	1080      	asrs	r0, r0, #2
 8020aae:	0146      	lsls	r6, r0, #5
 8020ab0:	6120      	str	r0, [r4, #16]
 8020ab2:	4618      	mov	r0, r3
 8020ab4:	f000 fb68 	bl	8021188 <__hi0bits>
 8020ab8:	1a30      	subs	r0, r6, r0
 8020aba:	f8d8 6000 	ldr.w	r6, [r8]
 8020abe:	42b0      	cmp	r0, r6
 8020ac0:	dd63      	ble.n	8020b8a <__gethex+0x286>
 8020ac2:	1b87      	subs	r7, r0, r6
 8020ac4:	4639      	mov	r1, r7
 8020ac6:	4620      	mov	r0, r4
 8020ac8:	f000 ff02 	bl	80218d0 <__any_on>
 8020acc:	4682      	mov	sl, r0
 8020ace:	b1a8      	cbz	r0, 8020afc <__gethex+0x1f8>
 8020ad0:	1e7b      	subs	r3, r7, #1
 8020ad2:	1159      	asrs	r1, r3, #5
 8020ad4:	f003 021f 	and.w	r2, r3, #31
 8020ad8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8020adc:	f04f 0a01 	mov.w	sl, #1
 8020ae0:	fa0a f202 	lsl.w	r2, sl, r2
 8020ae4:	420a      	tst	r2, r1
 8020ae6:	d009      	beq.n	8020afc <__gethex+0x1f8>
 8020ae8:	4553      	cmp	r3, sl
 8020aea:	dd05      	ble.n	8020af8 <__gethex+0x1f4>
 8020aec:	1eb9      	subs	r1, r7, #2
 8020aee:	4620      	mov	r0, r4
 8020af0:	f000 feee 	bl	80218d0 <__any_on>
 8020af4:	2800      	cmp	r0, #0
 8020af6:	d145      	bne.n	8020b84 <__gethex+0x280>
 8020af8:	f04f 0a02 	mov.w	sl, #2
 8020afc:	4639      	mov	r1, r7
 8020afe:	4620      	mov	r0, r4
 8020b00:	f7ff fe98 	bl	8020834 <rshift>
 8020b04:	443d      	add	r5, r7
 8020b06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020b0a:	42ab      	cmp	r3, r5
 8020b0c:	da4c      	bge.n	8020ba8 <__gethex+0x2a4>
 8020b0e:	ee18 0a10 	vmov	r0, s16
 8020b12:	4621      	mov	r1, r4
 8020b14:	f000 fa82 	bl	802101c <_Bfree>
 8020b18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020b1a:	2300      	movs	r3, #0
 8020b1c:	6013      	str	r3, [r2, #0]
 8020b1e:	27a3      	movs	r7, #163	; 0xa3
 8020b20:	e785      	b.n	8020a2e <__gethex+0x12a>
 8020b22:	1e73      	subs	r3, r6, #1
 8020b24:	9a05      	ldr	r2, [sp, #20]
 8020b26:	9303      	str	r3, [sp, #12]
 8020b28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8020b2c:	4293      	cmp	r3, r2
 8020b2e:	d019      	beq.n	8020b64 <__gethex+0x260>
 8020b30:	f1bb 0f20 	cmp.w	fp, #32
 8020b34:	d107      	bne.n	8020b46 <__gethex+0x242>
 8020b36:	9b02      	ldr	r3, [sp, #8]
 8020b38:	9a00      	ldr	r2, [sp, #0]
 8020b3a:	f843 2b04 	str.w	r2, [r3], #4
 8020b3e:	9302      	str	r3, [sp, #8]
 8020b40:	2300      	movs	r3, #0
 8020b42:	9300      	str	r3, [sp, #0]
 8020b44:	469b      	mov	fp, r3
 8020b46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8020b4a:	f7ff fec5 	bl	80208d8 <__hexdig_fun>
 8020b4e:	9b00      	ldr	r3, [sp, #0]
 8020b50:	f000 000f 	and.w	r0, r0, #15
 8020b54:	fa00 f00b 	lsl.w	r0, r0, fp
 8020b58:	4303      	orrs	r3, r0
 8020b5a:	9300      	str	r3, [sp, #0]
 8020b5c:	f10b 0b04 	add.w	fp, fp, #4
 8020b60:	9b03      	ldr	r3, [sp, #12]
 8020b62:	e00d      	b.n	8020b80 <__gethex+0x27c>
 8020b64:	9b03      	ldr	r3, [sp, #12]
 8020b66:	9a06      	ldr	r2, [sp, #24]
 8020b68:	4413      	add	r3, r2
 8020b6a:	42bb      	cmp	r3, r7
 8020b6c:	d3e0      	bcc.n	8020b30 <__gethex+0x22c>
 8020b6e:	4618      	mov	r0, r3
 8020b70:	9901      	ldr	r1, [sp, #4]
 8020b72:	9307      	str	r3, [sp, #28]
 8020b74:	4652      	mov	r2, sl
 8020b76:	f7fd ffc8 	bl	801eb0a <strncmp>
 8020b7a:	9b07      	ldr	r3, [sp, #28]
 8020b7c:	2800      	cmp	r0, #0
 8020b7e:	d1d7      	bne.n	8020b30 <__gethex+0x22c>
 8020b80:	461e      	mov	r6, r3
 8020b82:	e78b      	b.n	8020a9c <__gethex+0x198>
 8020b84:	f04f 0a03 	mov.w	sl, #3
 8020b88:	e7b8      	b.n	8020afc <__gethex+0x1f8>
 8020b8a:	da0a      	bge.n	8020ba2 <__gethex+0x29e>
 8020b8c:	1a37      	subs	r7, r6, r0
 8020b8e:	4621      	mov	r1, r4
 8020b90:	ee18 0a10 	vmov	r0, s16
 8020b94:	463a      	mov	r2, r7
 8020b96:	f000 fc5d 	bl	8021454 <__lshift>
 8020b9a:	1bed      	subs	r5, r5, r7
 8020b9c:	4604      	mov	r4, r0
 8020b9e:	f100 0914 	add.w	r9, r0, #20
 8020ba2:	f04f 0a00 	mov.w	sl, #0
 8020ba6:	e7ae      	b.n	8020b06 <__gethex+0x202>
 8020ba8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8020bac:	42a8      	cmp	r0, r5
 8020bae:	dd72      	ble.n	8020c96 <__gethex+0x392>
 8020bb0:	1b45      	subs	r5, r0, r5
 8020bb2:	42ae      	cmp	r6, r5
 8020bb4:	dc36      	bgt.n	8020c24 <__gethex+0x320>
 8020bb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020bba:	2b02      	cmp	r3, #2
 8020bbc:	d02a      	beq.n	8020c14 <__gethex+0x310>
 8020bbe:	2b03      	cmp	r3, #3
 8020bc0:	d02c      	beq.n	8020c1c <__gethex+0x318>
 8020bc2:	2b01      	cmp	r3, #1
 8020bc4:	d115      	bne.n	8020bf2 <__gethex+0x2ee>
 8020bc6:	42ae      	cmp	r6, r5
 8020bc8:	d113      	bne.n	8020bf2 <__gethex+0x2ee>
 8020bca:	2e01      	cmp	r6, #1
 8020bcc:	d10b      	bne.n	8020be6 <__gethex+0x2e2>
 8020bce:	9a04      	ldr	r2, [sp, #16]
 8020bd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8020bd4:	6013      	str	r3, [r2, #0]
 8020bd6:	2301      	movs	r3, #1
 8020bd8:	6123      	str	r3, [r4, #16]
 8020bda:	f8c9 3000 	str.w	r3, [r9]
 8020bde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020be0:	2762      	movs	r7, #98	; 0x62
 8020be2:	601c      	str	r4, [r3, #0]
 8020be4:	e723      	b.n	8020a2e <__gethex+0x12a>
 8020be6:	1e71      	subs	r1, r6, #1
 8020be8:	4620      	mov	r0, r4
 8020bea:	f000 fe71 	bl	80218d0 <__any_on>
 8020bee:	2800      	cmp	r0, #0
 8020bf0:	d1ed      	bne.n	8020bce <__gethex+0x2ca>
 8020bf2:	ee18 0a10 	vmov	r0, s16
 8020bf6:	4621      	mov	r1, r4
 8020bf8:	f000 fa10 	bl	802101c <_Bfree>
 8020bfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020bfe:	2300      	movs	r3, #0
 8020c00:	6013      	str	r3, [r2, #0]
 8020c02:	2750      	movs	r7, #80	; 0x50
 8020c04:	e713      	b.n	8020a2e <__gethex+0x12a>
 8020c06:	bf00      	nop
 8020c08:	08022f7c 	.word	0x08022f7c
 8020c0c:	08022f00 	.word	0x08022f00
 8020c10:	08022f11 	.word	0x08022f11
 8020c14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d1eb      	bne.n	8020bf2 <__gethex+0x2ee>
 8020c1a:	e7d8      	b.n	8020bce <__gethex+0x2ca>
 8020c1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020c1e:	2b00      	cmp	r3, #0
 8020c20:	d1d5      	bne.n	8020bce <__gethex+0x2ca>
 8020c22:	e7e6      	b.n	8020bf2 <__gethex+0x2ee>
 8020c24:	1e6f      	subs	r7, r5, #1
 8020c26:	f1ba 0f00 	cmp.w	sl, #0
 8020c2a:	d131      	bne.n	8020c90 <__gethex+0x38c>
 8020c2c:	b127      	cbz	r7, 8020c38 <__gethex+0x334>
 8020c2e:	4639      	mov	r1, r7
 8020c30:	4620      	mov	r0, r4
 8020c32:	f000 fe4d 	bl	80218d0 <__any_on>
 8020c36:	4682      	mov	sl, r0
 8020c38:	117b      	asrs	r3, r7, #5
 8020c3a:	2101      	movs	r1, #1
 8020c3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8020c40:	f007 071f 	and.w	r7, r7, #31
 8020c44:	fa01 f707 	lsl.w	r7, r1, r7
 8020c48:	421f      	tst	r7, r3
 8020c4a:	4629      	mov	r1, r5
 8020c4c:	4620      	mov	r0, r4
 8020c4e:	bf18      	it	ne
 8020c50:	f04a 0a02 	orrne.w	sl, sl, #2
 8020c54:	1b76      	subs	r6, r6, r5
 8020c56:	f7ff fded 	bl	8020834 <rshift>
 8020c5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020c5e:	2702      	movs	r7, #2
 8020c60:	f1ba 0f00 	cmp.w	sl, #0
 8020c64:	d048      	beq.n	8020cf8 <__gethex+0x3f4>
 8020c66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020c6a:	2b02      	cmp	r3, #2
 8020c6c:	d015      	beq.n	8020c9a <__gethex+0x396>
 8020c6e:	2b03      	cmp	r3, #3
 8020c70:	d017      	beq.n	8020ca2 <__gethex+0x39e>
 8020c72:	2b01      	cmp	r3, #1
 8020c74:	d109      	bne.n	8020c8a <__gethex+0x386>
 8020c76:	f01a 0f02 	tst.w	sl, #2
 8020c7a:	d006      	beq.n	8020c8a <__gethex+0x386>
 8020c7c:	f8d9 0000 	ldr.w	r0, [r9]
 8020c80:	ea4a 0a00 	orr.w	sl, sl, r0
 8020c84:	f01a 0f01 	tst.w	sl, #1
 8020c88:	d10e      	bne.n	8020ca8 <__gethex+0x3a4>
 8020c8a:	f047 0710 	orr.w	r7, r7, #16
 8020c8e:	e033      	b.n	8020cf8 <__gethex+0x3f4>
 8020c90:	f04f 0a01 	mov.w	sl, #1
 8020c94:	e7d0      	b.n	8020c38 <__gethex+0x334>
 8020c96:	2701      	movs	r7, #1
 8020c98:	e7e2      	b.n	8020c60 <__gethex+0x35c>
 8020c9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020c9c:	f1c3 0301 	rsb	r3, r3, #1
 8020ca0:	9315      	str	r3, [sp, #84]	; 0x54
 8020ca2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	d0f0      	beq.n	8020c8a <__gethex+0x386>
 8020ca8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8020cac:	f104 0314 	add.w	r3, r4, #20
 8020cb0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8020cb4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8020cb8:	f04f 0c00 	mov.w	ip, #0
 8020cbc:	4618      	mov	r0, r3
 8020cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8020cc2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8020cc6:	d01c      	beq.n	8020d02 <__gethex+0x3fe>
 8020cc8:	3201      	adds	r2, #1
 8020cca:	6002      	str	r2, [r0, #0]
 8020ccc:	2f02      	cmp	r7, #2
 8020cce:	f104 0314 	add.w	r3, r4, #20
 8020cd2:	d13f      	bne.n	8020d54 <__gethex+0x450>
 8020cd4:	f8d8 2000 	ldr.w	r2, [r8]
 8020cd8:	3a01      	subs	r2, #1
 8020cda:	42b2      	cmp	r2, r6
 8020cdc:	d10a      	bne.n	8020cf4 <__gethex+0x3f0>
 8020cde:	1171      	asrs	r1, r6, #5
 8020ce0:	2201      	movs	r2, #1
 8020ce2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020ce6:	f006 061f 	and.w	r6, r6, #31
 8020cea:	fa02 f606 	lsl.w	r6, r2, r6
 8020cee:	421e      	tst	r6, r3
 8020cf0:	bf18      	it	ne
 8020cf2:	4617      	movne	r7, r2
 8020cf4:	f047 0720 	orr.w	r7, r7, #32
 8020cf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020cfa:	601c      	str	r4, [r3, #0]
 8020cfc:	9b04      	ldr	r3, [sp, #16]
 8020cfe:	601d      	str	r5, [r3, #0]
 8020d00:	e695      	b.n	8020a2e <__gethex+0x12a>
 8020d02:	4299      	cmp	r1, r3
 8020d04:	f843 cc04 	str.w	ip, [r3, #-4]
 8020d08:	d8d8      	bhi.n	8020cbc <__gethex+0x3b8>
 8020d0a:	68a3      	ldr	r3, [r4, #8]
 8020d0c:	459b      	cmp	fp, r3
 8020d0e:	db19      	blt.n	8020d44 <__gethex+0x440>
 8020d10:	6861      	ldr	r1, [r4, #4]
 8020d12:	ee18 0a10 	vmov	r0, s16
 8020d16:	3101      	adds	r1, #1
 8020d18:	f000 f940 	bl	8020f9c <_Balloc>
 8020d1c:	4681      	mov	r9, r0
 8020d1e:	b918      	cbnz	r0, 8020d28 <__gethex+0x424>
 8020d20:	4b1a      	ldr	r3, [pc, #104]	; (8020d8c <__gethex+0x488>)
 8020d22:	4602      	mov	r2, r0
 8020d24:	2184      	movs	r1, #132	; 0x84
 8020d26:	e6a8      	b.n	8020a7a <__gethex+0x176>
 8020d28:	6922      	ldr	r2, [r4, #16]
 8020d2a:	3202      	adds	r2, #2
 8020d2c:	f104 010c 	add.w	r1, r4, #12
 8020d30:	0092      	lsls	r2, r2, #2
 8020d32:	300c      	adds	r0, #12
 8020d34:	f7fd f906 	bl	801df44 <memcpy>
 8020d38:	4621      	mov	r1, r4
 8020d3a:	ee18 0a10 	vmov	r0, s16
 8020d3e:	f000 f96d 	bl	802101c <_Bfree>
 8020d42:	464c      	mov	r4, r9
 8020d44:	6923      	ldr	r3, [r4, #16]
 8020d46:	1c5a      	adds	r2, r3, #1
 8020d48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020d4c:	6122      	str	r2, [r4, #16]
 8020d4e:	2201      	movs	r2, #1
 8020d50:	615a      	str	r2, [r3, #20]
 8020d52:	e7bb      	b.n	8020ccc <__gethex+0x3c8>
 8020d54:	6922      	ldr	r2, [r4, #16]
 8020d56:	455a      	cmp	r2, fp
 8020d58:	dd0b      	ble.n	8020d72 <__gethex+0x46e>
 8020d5a:	2101      	movs	r1, #1
 8020d5c:	4620      	mov	r0, r4
 8020d5e:	f7ff fd69 	bl	8020834 <rshift>
 8020d62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020d66:	3501      	adds	r5, #1
 8020d68:	42ab      	cmp	r3, r5
 8020d6a:	f6ff aed0 	blt.w	8020b0e <__gethex+0x20a>
 8020d6e:	2701      	movs	r7, #1
 8020d70:	e7c0      	b.n	8020cf4 <__gethex+0x3f0>
 8020d72:	f016 061f 	ands.w	r6, r6, #31
 8020d76:	d0fa      	beq.n	8020d6e <__gethex+0x46a>
 8020d78:	449a      	add	sl, r3
 8020d7a:	f1c6 0620 	rsb	r6, r6, #32
 8020d7e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8020d82:	f000 fa01 	bl	8021188 <__hi0bits>
 8020d86:	42b0      	cmp	r0, r6
 8020d88:	dbe7      	blt.n	8020d5a <__gethex+0x456>
 8020d8a:	e7f0      	b.n	8020d6e <__gethex+0x46a>
 8020d8c:	08022f00 	.word	0x08022f00

08020d90 <L_shift>:
 8020d90:	f1c2 0208 	rsb	r2, r2, #8
 8020d94:	0092      	lsls	r2, r2, #2
 8020d96:	b570      	push	{r4, r5, r6, lr}
 8020d98:	f1c2 0620 	rsb	r6, r2, #32
 8020d9c:	6843      	ldr	r3, [r0, #4]
 8020d9e:	6804      	ldr	r4, [r0, #0]
 8020da0:	fa03 f506 	lsl.w	r5, r3, r6
 8020da4:	432c      	orrs	r4, r5
 8020da6:	40d3      	lsrs	r3, r2
 8020da8:	6004      	str	r4, [r0, #0]
 8020daa:	f840 3f04 	str.w	r3, [r0, #4]!
 8020dae:	4288      	cmp	r0, r1
 8020db0:	d3f4      	bcc.n	8020d9c <L_shift+0xc>
 8020db2:	bd70      	pop	{r4, r5, r6, pc}

08020db4 <__match>:
 8020db4:	b530      	push	{r4, r5, lr}
 8020db6:	6803      	ldr	r3, [r0, #0]
 8020db8:	3301      	adds	r3, #1
 8020dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020dbe:	b914      	cbnz	r4, 8020dc6 <__match+0x12>
 8020dc0:	6003      	str	r3, [r0, #0]
 8020dc2:	2001      	movs	r0, #1
 8020dc4:	bd30      	pop	{r4, r5, pc}
 8020dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020dca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8020dce:	2d19      	cmp	r5, #25
 8020dd0:	bf98      	it	ls
 8020dd2:	3220      	addls	r2, #32
 8020dd4:	42a2      	cmp	r2, r4
 8020dd6:	d0f0      	beq.n	8020dba <__match+0x6>
 8020dd8:	2000      	movs	r0, #0
 8020dda:	e7f3      	b.n	8020dc4 <__match+0x10>

08020ddc <__hexnan>:
 8020ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020de0:	680b      	ldr	r3, [r1, #0]
 8020de2:	6801      	ldr	r1, [r0, #0]
 8020de4:	115e      	asrs	r6, r3, #5
 8020de6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8020dea:	f013 031f 	ands.w	r3, r3, #31
 8020dee:	b087      	sub	sp, #28
 8020df0:	bf18      	it	ne
 8020df2:	3604      	addne	r6, #4
 8020df4:	2500      	movs	r5, #0
 8020df6:	1f37      	subs	r7, r6, #4
 8020df8:	4682      	mov	sl, r0
 8020dfa:	4690      	mov	r8, r2
 8020dfc:	9301      	str	r3, [sp, #4]
 8020dfe:	f846 5c04 	str.w	r5, [r6, #-4]
 8020e02:	46b9      	mov	r9, r7
 8020e04:	463c      	mov	r4, r7
 8020e06:	9502      	str	r5, [sp, #8]
 8020e08:	46ab      	mov	fp, r5
 8020e0a:	784a      	ldrb	r2, [r1, #1]
 8020e0c:	1c4b      	adds	r3, r1, #1
 8020e0e:	9303      	str	r3, [sp, #12]
 8020e10:	b342      	cbz	r2, 8020e64 <__hexnan+0x88>
 8020e12:	4610      	mov	r0, r2
 8020e14:	9105      	str	r1, [sp, #20]
 8020e16:	9204      	str	r2, [sp, #16]
 8020e18:	f7ff fd5e 	bl	80208d8 <__hexdig_fun>
 8020e1c:	2800      	cmp	r0, #0
 8020e1e:	d14f      	bne.n	8020ec0 <__hexnan+0xe4>
 8020e20:	9a04      	ldr	r2, [sp, #16]
 8020e22:	9905      	ldr	r1, [sp, #20]
 8020e24:	2a20      	cmp	r2, #32
 8020e26:	d818      	bhi.n	8020e5a <__hexnan+0x7e>
 8020e28:	9b02      	ldr	r3, [sp, #8]
 8020e2a:	459b      	cmp	fp, r3
 8020e2c:	dd13      	ble.n	8020e56 <__hexnan+0x7a>
 8020e2e:	454c      	cmp	r4, r9
 8020e30:	d206      	bcs.n	8020e40 <__hexnan+0x64>
 8020e32:	2d07      	cmp	r5, #7
 8020e34:	dc04      	bgt.n	8020e40 <__hexnan+0x64>
 8020e36:	462a      	mov	r2, r5
 8020e38:	4649      	mov	r1, r9
 8020e3a:	4620      	mov	r0, r4
 8020e3c:	f7ff ffa8 	bl	8020d90 <L_shift>
 8020e40:	4544      	cmp	r4, r8
 8020e42:	d950      	bls.n	8020ee6 <__hexnan+0x10a>
 8020e44:	2300      	movs	r3, #0
 8020e46:	f1a4 0904 	sub.w	r9, r4, #4
 8020e4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8020e4e:	f8cd b008 	str.w	fp, [sp, #8]
 8020e52:	464c      	mov	r4, r9
 8020e54:	461d      	mov	r5, r3
 8020e56:	9903      	ldr	r1, [sp, #12]
 8020e58:	e7d7      	b.n	8020e0a <__hexnan+0x2e>
 8020e5a:	2a29      	cmp	r2, #41	; 0x29
 8020e5c:	d156      	bne.n	8020f0c <__hexnan+0x130>
 8020e5e:	3102      	adds	r1, #2
 8020e60:	f8ca 1000 	str.w	r1, [sl]
 8020e64:	f1bb 0f00 	cmp.w	fp, #0
 8020e68:	d050      	beq.n	8020f0c <__hexnan+0x130>
 8020e6a:	454c      	cmp	r4, r9
 8020e6c:	d206      	bcs.n	8020e7c <__hexnan+0xa0>
 8020e6e:	2d07      	cmp	r5, #7
 8020e70:	dc04      	bgt.n	8020e7c <__hexnan+0xa0>
 8020e72:	462a      	mov	r2, r5
 8020e74:	4649      	mov	r1, r9
 8020e76:	4620      	mov	r0, r4
 8020e78:	f7ff ff8a 	bl	8020d90 <L_shift>
 8020e7c:	4544      	cmp	r4, r8
 8020e7e:	d934      	bls.n	8020eea <__hexnan+0x10e>
 8020e80:	f1a8 0204 	sub.w	r2, r8, #4
 8020e84:	4623      	mov	r3, r4
 8020e86:	f853 1b04 	ldr.w	r1, [r3], #4
 8020e8a:	f842 1f04 	str.w	r1, [r2, #4]!
 8020e8e:	429f      	cmp	r7, r3
 8020e90:	d2f9      	bcs.n	8020e86 <__hexnan+0xaa>
 8020e92:	1b3b      	subs	r3, r7, r4
 8020e94:	f023 0303 	bic.w	r3, r3, #3
 8020e98:	3304      	adds	r3, #4
 8020e9a:	3401      	adds	r4, #1
 8020e9c:	3e03      	subs	r6, #3
 8020e9e:	42b4      	cmp	r4, r6
 8020ea0:	bf88      	it	hi
 8020ea2:	2304      	movhi	r3, #4
 8020ea4:	4443      	add	r3, r8
 8020ea6:	2200      	movs	r2, #0
 8020ea8:	f843 2b04 	str.w	r2, [r3], #4
 8020eac:	429f      	cmp	r7, r3
 8020eae:	d2fb      	bcs.n	8020ea8 <__hexnan+0xcc>
 8020eb0:	683b      	ldr	r3, [r7, #0]
 8020eb2:	b91b      	cbnz	r3, 8020ebc <__hexnan+0xe0>
 8020eb4:	4547      	cmp	r7, r8
 8020eb6:	d127      	bne.n	8020f08 <__hexnan+0x12c>
 8020eb8:	2301      	movs	r3, #1
 8020eba:	603b      	str	r3, [r7, #0]
 8020ebc:	2005      	movs	r0, #5
 8020ebe:	e026      	b.n	8020f0e <__hexnan+0x132>
 8020ec0:	3501      	adds	r5, #1
 8020ec2:	2d08      	cmp	r5, #8
 8020ec4:	f10b 0b01 	add.w	fp, fp, #1
 8020ec8:	dd06      	ble.n	8020ed8 <__hexnan+0xfc>
 8020eca:	4544      	cmp	r4, r8
 8020ecc:	d9c3      	bls.n	8020e56 <__hexnan+0x7a>
 8020ece:	2300      	movs	r3, #0
 8020ed0:	f844 3c04 	str.w	r3, [r4, #-4]
 8020ed4:	2501      	movs	r5, #1
 8020ed6:	3c04      	subs	r4, #4
 8020ed8:	6822      	ldr	r2, [r4, #0]
 8020eda:	f000 000f 	and.w	r0, r0, #15
 8020ede:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8020ee2:	6022      	str	r2, [r4, #0]
 8020ee4:	e7b7      	b.n	8020e56 <__hexnan+0x7a>
 8020ee6:	2508      	movs	r5, #8
 8020ee8:	e7b5      	b.n	8020e56 <__hexnan+0x7a>
 8020eea:	9b01      	ldr	r3, [sp, #4]
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d0df      	beq.n	8020eb0 <__hexnan+0xd4>
 8020ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8020ef4:	f1c3 0320 	rsb	r3, r3, #32
 8020ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8020efc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020f00:	401a      	ands	r2, r3
 8020f02:	f846 2c04 	str.w	r2, [r6, #-4]
 8020f06:	e7d3      	b.n	8020eb0 <__hexnan+0xd4>
 8020f08:	3f04      	subs	r7, #4
 8020f0a:	e7d1      	b.n	8020eb0 <__hexnan+0xd4>
 8020f0c:	2004      	movs	r0, #4
 8020f0e:	b007      	add	sp, #28
 8020f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020f14 <_isatty_r>:
 8020f14:	b538      	push	{r3, r4, r5, lr}
 8020f16:	4d06      	ldr	r5, [pc, #24]	; (8020f30 <_isatty_r+0x1c>)
 8020f18:	2300      	movs	r3, #0
 8020f1a:	4604      	mov	r4, r0
 8020f1c:	4608      	mov	r0, r1
 8020f1e:	602b      	str	r3, [r5, #0]
 8020f20:	f7fc fd6a 	bl	801d9f8 <_isatty>
 8020f24:	1c43      	adds	r3, r0, #1
 8020f26:	d102      	bne.n	8020f2e <_isatty_r+0x1a>
 8020f28:	682b      	ldr	r3, [r5, #0]
 8020f2a:	b103      	cbz	r3, 8020f2e <_isatty_r+0x1a>
 8020f2c:	6023      	str	r3, [r4, #0]
 8020f2e:	bd38      	pop	{r3, r4, r5, pc}
 8020f30:	20019220 	.word	0x20019220

08020f34 <_localeconv_r>:
 8020f34:	4800      	ldr	r0, [pc, #0]	; (8020f38 <_localeconv_r+0x4>)
 8020f36:	4770      	bx	lr
 8020f38:	200001e4 	.word	0x200001e4

08020f3c <_lseek_r>:
 8020f3c:	b538      	push	{r3, r4, r5, lr}
 8020f3e:	4d07      	ldr	r5, [pc, #28]	; (8020f5c <_lseek_r+0x20>)
 8020f40:	4604      	mov	r4, r0
 8020f42:	4608      	mov	r0, r1
 8020f44:	4611      	mov	r1, r2
 8020f46:	2200      	movs	r2, #0
 8020f48:	602a      	str	r2, [r5, #0]
 8020f4a:	461a      	mov	r2, r3
 8020f4c:	f7fc fd5f 	bl	801da0e <_lseek>
 8020f50:	1c43      	adds	r3, r0, #1
 8020f52:	d102      	bne.n	8020f5a <_lseek_r+0x1e>
 8020f54:	682b      	ldr	r3, [r5, #0]
 8020f56:	b103      	cbz	r3, 8020f5a <_lseek_r+0x1e>
 8020f58:	6023      	str	r3, [r4, #0]
 8020f5a:	bd38      	pop	{r3, r4, r5, pc}
 8020f5c:	20019220 	.word	0x20019220

08020f60 <__ascii_mbtowc>:
 8020f60:	b082      	sub	sp, #8
 8020f62:	b901      	cbnz	r1, 8020f66 <__ascii_mbtowc+0x6>
 8020f64:	a901      	add	r1, sp, #4
 8020f66:	b142      	cbz	r2, 8020f7a <__ascii_mbtowc+0x1a>
 8020f68:	b14b      	cbz	r3, 8020f7e <__ascii_mbtowc+0x1e>
 8020f6a:	7813      	ldrb	r3, [r2, #0]
 8020f6c:	600b      	str	r3, [r1, #0]
 8020f6e:	7812      	ldrb	r2, [r2, #0]
 8020f70:	1e10      	subs	r0, r2, #0
 8020f72:	bf18      	it	ne
 8020f74:	2001      	movne	r0, #1
 8020f76:	b002      	add	sp, #8
 8020f78:	4770      	bx	lr
 8020f7a:	4610      	mov	r0, r2
 8020f7c:	e7fb      	b.n	8020f76 <__ascii_mbtowc+0x16>
 8020f7e:	f06f 0001 	mvn.w	r0, #1
 8020f82:	e7f8      	b.n	8020f76 <__ascii_mbtowc+0x16>

08020f84 <__malloc_lock>:
 8020f84:	4801      	ldr	r0, [pc, #4]	; (8020f8c <__malloc_lock+0x8>)
 8020f86:	f7fc bf66 	b.w	801de56 <__retarget_lock_acquire_recursive>
 8020f8a:	bf00      	nop
 8020f8c:	20019214 	.word	0x20019214

08020f90 <__malloc_unlock>:
 8020f90:	4801      	ldr	r0, [pc, #4]	; (8020f98 <__malloc_unlock+0x8>)
 8020f92:	f7fc bf61 	b.w	801de58 <__retarget_lock_release_recursive>
 8020f96:	bf00      	nop
 8020f98:	20019214 	.word	0x20019214

08020f9c <_Balloc>:
 8020f9c:	b570      	push	{r4, r5, r6, lr}
 8020f9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020fa0:	4604      	mov	r4, r0
 8020fa2:	460d      	mov	r5, r1
 8020fa4:	b976      	cbnz	r6, 8020fc4 <_Balloc+0x28>
 8020fa6:	2010      	movs	r0, #16
 8020fa8:	f7fc ffbc 	bl	801df24 <malloc>
 8020fac:	4602      	mov	r2, r0
 8020fae:	6260      	str	r0, [r4, #36]	; 0x24
 8020fb0:	b920      	cbnz	r0, 8020fbc <_Balloc+0x20>
 8020fb2:	4b18      	ldr	r3, [pc, #96]	; (8021014 <_Balloc+0x78>)
 8020fb4:	4818      	ldr	r0, [pc, #96]	; (8021018 <_Balloc+0x7c>)
 8020fb6:	2166      	movs	r1, #102	; 0x66
 8020fb8:	f000 fe30 	bl	8021c1c <__assert_func>
 8020fbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020fc0:	6006      	str	r6, [r0, #0]
 8020fc2:	60c6      	str	r6, [r0, #12]
 8020fc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020fc6:	68f3      	ldr	r3, [r6, #12]
 8020fc8:	b183      	cbz	r3, 8020fec <_Balloc+0x50>
 8020fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020fcc:	68db      	ldr	r3, [r3, #12]
 8020fce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020fd2:	b9b8      	cbnz	r0, 8021004 <_Balloc+0x68>
 8020fd4:	2101      	movs	r1, #1
 8020fd6:	fa01 f605 	lsl.w	r6, r1, r5
 8020fda:	1d72      	adds	r2, r6, #5
 8020fdc:	0092      	lsls	r2, r2, #2
 8020fde:	4620      	mov	r0, r4
 8020fe0:	f7fc ffe0 	bl	801dfa4 <_calloc_r>
 8020fe4:	b160      	cbz	r0, 8021000 <_Balloc+0x64>
 8020fe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020fea:	e00e      	b.n	802100a <_Balloc+0x6e>
 8020fec:	2221      	movs	r2, #33	; 0x21
 8020fee:	2104      	movs	r1, #4
 8020ff0:	4620      	mov	r0, r4
 8020ff2:	f7fc ffd7 	bl	801dfa4 <_calloc_r>
 8020ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020ff8:	60f0      	str	r0, [r6, #12]
 8020ffa:	68db      	ldr	r3, [r3, #12]
 8020ffc:	2b00      	cmp	r3, #0
 8020ffe:	d1e4      	bne.n	8020fca <_Balloc+0x2e>
 8021000:	2000      	movs	r0, #0
 8021002:	bd70      	pop	{r4, r5, r6, pc}
 8021004:	6802      	ldr	r2, [r0, #0]
 8021006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802100a:	2300      	movs	r3, #0
 802100c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021010:	e7f7      	b.n	8021002 <_Balloc+0x66>
 8021012:	bf00      	nop
 8021014:	08022e8a 	.word	0x08022e8a
 8021018:	08022f90 	.word	0x08022f90

0802101c <_Bfree>:
 802101c:	b570      	push	{r4, r5, r6, lr}
 802101e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021020:	4605      	mov	r5, r0
 8021022:	460c      	mov	r4, r1
 8021024:	b976      	cbnz	r6, 8021044 <_Bfree+0x28>
 8021026:	2010      	movs	r0, #16
 8021028:	f7fc ff7c 	bl	801df24 <malloc>
 802102c:	4602      	mov	r2, r0
 802102e:	6268      	str	r0, [r5, #36]	; 0x24
 8021030:	b920      	cbnz	r0, 802103c <_Bfree+0x20>
 8021032:	4b09      	ldr	r3, [pc, #36]	; (8021058 <_Bfree+0x3c>)
 8021034:	4809      	ldr	r0, [pc, #36]	; (802105c <_Bfree+0x40>)
 8021036:	218a      	movs	r1, #138	; 0x8a
 8021038:	f000 fdf0 	bl	8021c1c <__assert_func>
 802103c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021040:	6006      	str	r6, [r0, #0]
 8021042:	60c6      	str	r6, [r0, #12]
 8021044:	b13c      	cbz	r4, 8021056 <_Bfree+0x3a>
 8021046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8021048:	6862      	ldr	r2, [r4, #4]
 802104a:	68db      	ldr	r3, [r3, #12]
 802104c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021050:	6021      	str	r1, [r4, #0]
 8021052:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021056:	bd70      	pop	{r4, r5, r6, pc}
 8021058:	08022e8a 	.word	0x08022e8a
 802105c:	08022f90 	.word	0x08022f90

08021060 <__multadd>:
 8021060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021064:	690e      	ldr	r6, [r1, #16]
 8021066:	4607      	mov	r7, r0
 8021068:	4698      	mov	r8, r3
 802106a:	460c      	mov	r4, r1
 802106c:	f101 0014 	add.w	r0, r1, #20
 8021070:	2300      	movs	r3, #0
 8021072:	6805      	ldr	r5, [r0, #0]
 8021074:	b2a9      	uxth	r1, r5
 8021076:	fb02 8101 	mla	r1, r2, r1, r8
 802107a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802107e:	0c2d      	lsrs	r5, r5, #16
 8021080:	fb02 c505 	mla	r5, r2, r5, ip
 8021084:	b289      	uxth	r1, r1
 8021086:	3301      	adds	r3, #1
 8021088:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 802108c:	429e      	cmp	r6, r3
 802108e:	f840 1b04 	str.w	r1, [r0], #4
 8021092:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8021096:	dcec      	bgt.n	8021072 <__multadd+0x12>
 8021098:	f1b8 0f00 	cmp.w	r8, #0
 802109c:	d022      	beq.n	80210e4 <__multadd+0x84>
 802109e:	68a3      	ldr	r3, [r4, #8]
 80210a0:	42b3      	cmp	r3, r6
 80210a2:	dc19      	bgt.n	80210d8 <__multadd+0x78>
 80210a4:	6861      	ldr	r1, [r4, #4]
 80210a6:	4638      	mov	r0, r7
 80210a8:	3101      	adds	r1, #1
 80210aa:	f7ff ff77 	bl	8020f9c <_Balloc>
 80210ae:	4605      	mov	r5, r0
 80210b0:	b928      	cbnz	r0, 80210be <__multadd+0x5e>
 80210b2:	4602      	mov	r2, r0
 80210b4:	4b0d      	ldr	r3, [pc, #52]	; (80210ec <__multadd+0x8c>)
 80210b6:	480e      	ldr	r0, [pc, #56]	; (80210f0 <__multadd+0x90>)
 80210b8:	21b5      	movs	r1, #181	; 0xb5
 80210ba:	f000 fdaf 	bl	8021c1c <__assert_func>
 80210be:	6922      	ldr	r2, [r4, #16]
 80210c0:	3202      	adds	r2, #2
 80210c2:	f104 010c 	add.w	r1, r4, #12
 80210c6:	0092      	lsls	r2, r2, #2
 80210c8:	300c      	adds	r0, #12
 80210ca:	f7fc ff3b 	bl	801df44 <memcpy>
 80210ce:	4621      	mov	r1, r4
 80210d0:	4638      	mov	r0, r7
 80210d2:	f7ff ffa3 	bl	802101c <_Bfree>
 80210d6:	462c      	mov	r4, r5
 80210d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80210dc:	3601      	adds	r6, #1
 80210de:	f8c3 8014 	str.w	r8, [r3, #20]
 80210e2:	6126      	str	r6, [r4, #16]
 80210e4:	4620      	mov	r0, r4
 80210e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210ea:	bf00      	nop
 80210ec:	08022f00 	.word	0x08022f00
 80210f0:	08022f90 	.word	0x08022f90

080210f4 <__s2b>:
 80210f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80210f8:	460c      	mov	r4, r1
 80210fa:	4615      	mov	r5, r2
 80210fc:	461f      	mov	r7, r3
 80210fe:	2209      	movs	r2, #9
 8021100:	3308      	adds	r3, #8
 8021102:	4606      	mov	r6, r0
 8021104:	fb93 f3f2 	sdiv	r3, r3, r2
 8021108:	2100      	movs	r1, #0
 802110a:	2201      	movs	r2, #1
 802110c:	429a      	cmp	r2, r3
 802110e:	db09      	blt.n	8021124 <__s2b+0x30>
 8021110:	4630      	mov	r0, r6
 8021112:	f7ff ff43 	bl	8020f9c <_Balloc>
 8021116:	b940      	cbnz	r0, 802112a <__s2b+0x36>
 8021118:	4602      	mov	r2, r0
 802111a:	4b19      	ldr	r3, [pc, #100]	; (8021180 <__s2b+0x8c>)
 802111c:	4819      	ldr	r0, [pc, #100]	; (8021184 <__s2b+0x90>)
 802111e:	21ce      	movs	r1, #206	; 0xce
 8021120:	f000 fd7c 	bl	8021c1c <__assert_func>
 8021124:	0052      	lsls	r2, r2, #1
 8021126:	3101      	adds	r1, #1
 8021128:	e7f0      	b.n	802110c <__s2b+0x18>
 802112a:	9b08      	ldr	r3, [sp, #32]
 802112c:	6143      	str	r3, [r0, #20]
 802112e:	2d09      	cmp	r5, #9
 8021130:	f04f 0301 	mov.w	r3, #1
 8021134:	6103      	str	r3, [r0, #16]
 8021136:	dd16      	ble.n	8021166 <__s2b+0x72>
 8021138:	f104 0909 	add.w	r9, r4, #9
 802113c:	46c8      	mov	r8, r9
 802113e:	442c      	add	r4, r5
 8021140:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021144:	4601      	mov	r1, r0
 8021146:	3b30      	subs	r3, #48	; 0x30
 8021148:	220a      	movs	r2, #10
 802114a:	4630      	mov	r0, r6
 802114c:	f7ff ff88 	bl	8021060 <__multadd>
 8021150:	45a0      	cmp	r8, r4
 8021152:	d1f5      	bne.n	8021140 <__s2b+0x4c>
 8021154:	f1a5 0408 	sub.w	r4, r5, #8
 8021158:	444c      	add	r4, r9
 802115a:	1b2d      	subs	r5, r5, r4
 802115c:	1963      	adds	r3, r4, r5
 802115e:	42bb      	cmp	r3, r7
 8021160:	db04      	blt.n	802116c <__s2b+0x78>
 8021162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021166:	340a      	adds	r4, #10
 8021168:	2509      	movs	r5, #9
 802116a:	e7f6      	b.n	802115a <__s2b+0x66>
 802116c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021170:	4601      	mov	r1, r0
 8021172:	3b30      	subs	r3, #48	; 0x30
 8021174:	220a      	movs	r2, #10
 8021176:	4630      	mov	r0, r6
 8021178:	f7ff ff72 	bl	8021060 <__multadd>
 802117c:	e7ee      	b.n	802115c <__s2b+0x68>
 802117e:	bf00      	nop
 8021180:	08022f00 	.word	0x08022f00
 8021184:	08022f90 	.word	0x08022f90

08021188 <__hi0bits>:
 8021188:	0c03      	lsrs	r3, r0, #16
 802118a:	041b      	lsls	r3, r3, #16
 802118c:	b9d3      	cbnz	r3, 80211c4 <__hi0bits+0x3c>
 802118e:	0400      	lsls	r0, r0, #16
 8021190:	2310      	movs	r3, #16
 8021192:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021196:	bf04      	itt	eq
 8021198:	0200      	lsleq	r0, r0, #8
 802119a:	3308      	addeq	r3, #8
 802119c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80211a0:	bf04      	itt	eq
 80211a2:	0100      	lsleq	r0, r0, #4
 80211a4:	3304      	addeq	r3, #4
 80211a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80211aa:	bf04      	itt	eq
 80211ac:	0080      	lsleq	r0, r0, #2
 80211ae:	3302      	addeq	r3, #2
 80211b0:	2800      	cmp	r0, #0
 80211b2:	db05      	blt.n	80211c0 <__hi0bits+0x38>
 80211b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80211b8:	f103 0301 	add.w	r3, r3, #1
 80211bc:	bf08      	it	eq
 80211be:	2320      	moveq	r3, #32
 80211c0:	4618      	mov	r0, r3
 80211c2:	4770      	bx	lr
 80211c4:	2300      	movs	r3, #0
 80211c6:	e7e4      	b.n	8021192 <__hi0bits+0xa>

080211c8 <__lo0bits>:
 80211c8:	6803      	ldr	r3, [r0, #0]
 80211ca:	f013 0207 	ands.w	r2, r3, #7
 80211ce:	4601      	mov	r1, r0
 80211d0:	d00b      	beq.n	80211ea <__lo0bits+0x22>
 80211d2:	07da      	lsls	r2, r3, #31
 80211d4:	d424      	bmi.n	8021220 <__lo0bits+0x58>
 80211d6:	0798      	lsls	r0, r3, #30
 80211d8:	bf49      	itett	mi
 80211da:	085b      	lsrmi	r3, r3, #1
 80211dc:	089b      	lsrpl	r3, r3, #2
 80211de:	2001      	movmi	r0, #1
 80211e0:	600b      	strmi	r3, [r1, #0]
 80211e2:	bf5c      	itt	pl
 80211e4:	600b      	strpl	r3, [r1, #0]
 80211e6:	2002      	movpl	r0, #2
 80211e8:	4770      	bx	lr
 80211ea:	b298      	uxth	r0, r3
 80211ec:	b9b0      	cbnz	r0, 802121c <__lo0bits+0x54>
 80211ee:	0c1b      	lsrs	r3, r3, #16
 80211f0:	2010      	movs	r0, #16
 80211f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80211f6:	bf04      	itt	eq
 80211f8:	0a1b      	lsreq	r3, r3, #8
 80211fa:	3008      	addeq	r0, #8
 80211fc:	071a      	lsls	r2, r3, #28
 80211fe:	bf04      	itt	eq
 8021200:	091b      	lsreq	r3, r3, #4
 8021202:	3004      	addeq	r0, #4
 8021204:	079a      	lsls	r2, r3, #30
 8021206:	bf04      	itt	eq
 8021208:	089b      	lsreq	r3, r3, #2
 802120a:	3002      	addeq	r0, #2
 802120c:	07da      	lsls	r2, r3, #31
 802120e:	d403      	bmi.n	8021218 <__lo0bits+0x50>
 8021210:	085b      	lsrs	r3, r3, #1
 8021212:	f100 0001 	add.w	r0, r0, #1
 8021216:	d005      	beq.n	8021224 <__lo0bits+0x5c>
 8021218:	600b      	str	r3, [r1, #0]
 802121a:	4770      	bx	lr
 802121c:	4610      	mov	r0, r2
 802121e:	e7e8      	b.n	80211f2 <__lo0bits+0x2a>
 8021220:	2000      	movs	r0, #0
 8021222:	4770      	bx	lr
 8021224:	2020      	movs	r0, #32
 8021226:	4770      	bx	lr

08021228 <__i2b>:
 8021228:	b510      	push	{r4, lr}
 802122a:	460c      	mov	r4, r1
 802122c:	2101      	movs	r1, #1
 802122e:	f7ff feb5 	bl	8020f9c <_Balloc>
 8021232:	4602      	mov	r2, r0
 8021234:	b928      	cbnz	r0, 8021242 <__i2b+0x1a>
 8021236:	4b05      	ldr	r3, [pc, #20]	; (802124c <__i2b+0x24>)
 8021238:	4805      	ldr	r0, [pc, #20]	; (8021250 <__i2b+0x28>)
 802123a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802123e:	f000 fced 	bl	8021c1c <__assert_func>
 8021242:	2301      	movs	r3, #1
 8021244:	6144      	str	r4, [r0, #20]
 8021246:	6103      	str	r3, [r0, #16]
 8021248:	bd10      	pop	{r4, pc}
 802124a:	bf00      	nop
 802124c:	08022f00 	.word	0x08022f00
 8021250:	08022f90 	.word	0x08022f90

08021254 <__multiply>:
 8021254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021258:	4614      	mov	r4, r2
 802125a:	690a      	ldr	r2, [r1, #16]
 802125c:	6923      	ldr	r3, [r4, #16]
 802125e:	429a      	cmp	r2, r3
 8021260:	bfb8      	it	lt
 8021262:	460b      	movlt	r3, r1
 8021264:	460d      	mov	r5, r1
 8021266:	bfbc      	itt	lt
 8021268:	4625      	movlt	r5, r4
 802126a:	461c      	movlt	r4, r3
 802126c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8021270:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021274:	68ab      	ldr	r3, [r5, #8]
 8021276:	6869      	ldr	r1, [r5, #4]
 8021278:	eb0a 0709 	add.w	r7, sl, r9
 802127c:	42bb      	cmp	r3, r7
 802127e:	b085      	sub	sp, #20
 8021280:	bfb8      	it	lt
 8021282:	3101      	addlt	r1, #1
 8021284:	f7ff fe8a 	bl	8020f9c <_Balloc>
 8021288:	b930      	cbnz	r0, 8021298 <__multiply+0x44>
 802128a:	4602      	mov	r2, r0
 802128c:	4b42      	ldr	r3, [pc, #264]	; (8021398 <__multiply+0x144>)
 802128e:	4843      	ldr	r0, [pc, #268]	; (802139c <__multiply+0x148>)
 8021290:	f240 115d 	movw	r1, #349	; 0x15d
 8021294:	f000 fcc2 	bl	8021c1c <__assert_func>
 8021298:	f100 0614 	add.w	r6, r0, #20
 802129c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80212a0:	4633      	mov	r3, r6
 80212a2:	2200      	movs	r2, #0
 80212a4:	4543      	cmp	r3, r8
 80212a6:	d31e      	bcc.n	80212e6 <__multiply+0x92>
 80212a8:	f105 0c14 	add.w	ip, r5, #20
 80212ac:	f104 0314 	add.w	r3, r4, #20
 80212b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80212b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80212b8:	9202      	str	r2, [sp, #8]
 80212ba:	ebac 0205 	sub.w	r2, ip, r5
 80212be:	3a15      	subs	r2, #21
 80212c0:	f022 0203 	bic.w	r2, r2, #3
 80212c4:	3204      	adds	r2, #4
 80212c6:	f105 0115 	add.w	r1, r5, #21
 80212ca:	458c      	cmp	ip, r1
 80212cc:	bf38      	it	cc
 80212ce:	2204      	movcc	r2, #4
 80212d0:	9201      	str	r2, [sp, #4]
 80212d2:	9a02      	ldr	r2, [sp, #8]
 80212d4:	9303      	str	r3, [sp, #12]
 80212d6:	429a      	cmp	r2, r3
 80212d8:	d808      	bhi.n	80212ec <__multiply+0x98>
 80212da:	2f00      	cmp	r7, #0
 80212dc:	dc55      	bgt.n	802138a <__multiply+0x136>
 80212de:	6107      	str	r7, [r0, #16]
 80212e0:	b005      	add	sp, #20
 80212e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212e6:	f843 2b04 	str.w	r2, [r3], #4
 80212ea:	e7db      	b.n	80212a4 <__multiply+0x50>
 80212ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80212f0:	f1ba 0f00 	cmp.w	sl, #0
 80212f4:	d020      	beq.n	8021338 <__multiply+0xe4>
 80212f6:	f105 0e14 	add.w	lr, r5, #20
 80212fa:	46b1      	mov	r9, r6
 80212fc:	2200      	movs	r2, #0
 80212fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8021302:	f8d9 b000 	ldr.w	fp, [r9]
 8021306:	b2a1      	uxth	r1, r4
 8021308:	fa1f fb8b 	uxth.w	fp, fp
 802130c:	fb0a b101 	mla	r1, sl, r1, fp
 8021310:	4411      	add	r1, r2
 8021312:	f8d9 2000 	ldr.w	r2, [r9]
 8021316:	0c24      	lsrs	r4, r4, #16
 8021318:	0c12      	lsrs	r2, r2, #16
 802131a:	fb0a 2404 	mla	r4, sl, r4, r2
 802131e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8021322:	b289      	uxth	r1, r1
 8021324:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8021328:	45f4      	cmp	ip, lr
 802132a:	f849 1b04 	str.w	r1, [r9], #4
 802132e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8021332:	d8e4      	bhi.n	80212fe <__multiply+0xaa>
 8021334:	9901      	ldr	r1, [sp, #4]
 8021336:	5072      	str	r2, [r6, r1]
 8021338:	9a03      	ldr	r2, [sp, #12]
 802133a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802133e:	3304      	adds	r3, #4
 8021340:	f1b9 0f00 	cmp.w	r9, #0
 8021344:	d01f      	beq.n	8021386 <__multiply+0x132>
 8021346:	6834      	ldr	r4, [r6, #0]
 8021348:	f105 0114 	add.w	r1, r5, #20
 802134c:	46b6      	mov	lr, r6
 802134e:	f04f 0a00 	mov.w	sl, #0
 8021352:	880a      	ldrh	r2, [r1, #0]
 8021354:	f8be b002 	ldrh.w	fp, [lr, #2]
 8021358:	fb09 b202 	mla	r2, r9, r2, fp
 802135c:	4492      	add	sl, r2
 802135e:	b2a4      	uxth	r4, r4
 8021360:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8021364:	f84e 4b04 	str.w	r4, [lr], #4
 8021368:	f851 4b04 	ldr.w	r4, [r1], #4
 802136c:	f8be 2000 	ldrh.w	r2, [lr]
 8021370:	0c24      	lsrs	r4, r4, #16
 8021372:	fb09 2404 	mla	r4, r9, r4, r2
 8021376:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 802137a:	458c      	cmp	ip, r1
 802137c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8021380:	d8e7      	bhi.n	8021352 <__multiply+0xfe>
 8021382:	9a01      	ldr	r2, [sp, #4]
 8021384:	50b4      	str	r4, [r6, r2]
 8021386:	3604      	adds	r6, #4
 8021388:	e7a3      	b.n	80212d2 <__multiply+0x7e>
 802138a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802138e:	2b00      	cmp	r3, #0
 8021390:	d1a5      	bne.n	80212de <__multiply+0x8a>
 8021392:	3f01      	subs	r7, #1
 8021394:	e7a1      	b.n	80212da <__multiply+0x86>
 8021396:	bf00      	nop
 8021398:	08022f00 	.word	0x08022f00
 802139c:	08022f90 	.word	0x08022f90

080213a0 <__pow5mult>:
 80213a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80213a4:	4615      	mov	r5, r2
 80213a6:	f012 0203 	ands.w	r2, r2, #3
 80213aa:	4606      	mov	r6, r0
 80213ac:	460f      	mov	r7, r1
 80213ae:	d007      	beq.n	80213c0 <__pow5mult+0x20>
 80213b0:	4c25      	ldr	r4, [pc, #148]	; (8021448 <__pow5mult+0xa8>)
 80213b2:	3a01      	subs	r2, #1
 80213b4:	2300      	movs	r3, #0
 80213b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80213ba:	f7ff fe51 	bl	8021060 <__multadd>
 80213be:	4607      	mov	r7, r0
 80213c0:	10ad      	asrs	r5, r5, #2
 80213c2:	d03d      	beq.n	8021440 <__pow5mult+0xa0>
 80213c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80213c6:	b97c      	cbnz	r4, 80213e8 <__pow5mult+0x48>
 80213c8:	2010      	movs	r0, #16
 80213ca:	f7fc fdab 	bl	801df24 <malloc>
 80213ce:	4602      	mov	r2, r0
 80213d0:	6270      	str	r0, [r6, #36]	; 0x24
 80213d2:	b928      	cbnz	r0, 80213e0 <__pow5mult+0x40>
 80213d4:	4b1d      	ldr	r3, [pc, #116]	; (802144c <__pow5mult+0xac>)
 80213d6:	481e      	ldr	r0, [pc, #120]	; (8021450 <__pow5mult+0xb0>)
 80213d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80213dc:	f000 fc1e 	bl	8021c1c <__assert_func>
 80213e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80213e4:	6004      	str	r4, [r0, #0]
 80213e6:	60c4      	str	r4, [r0, #12]
 80213e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80213ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80213f0:	b94c      	cbnz	r4, 8021406 <__pow5mult+0x66>
 80213f2:	f240 2171 	movw	r1, #625	; 0x271
 80213f6:	4630      	mov	r0, r6
 80213f8:	f7ff ff16 	bl	8021228 <__i2b>
 80213fc:	2300      	movs	r3, #0
 80213fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8021402:	4604      	mov	r4, r0
 8021404:	6003      	str	r3, [r0, #0]
 8021406:	f04f 0900 	mov.w	r9, #0
 802140a:	07eb      	lsls	r3, r5, #31
 802140c:	d50a      	bpl.n	8021424 <__pow5mult+0x84>
 802140e:	4639      	mov	r1, r7
 8021410:	4622      	mov	r2, r4
 8021412:	4630      	mov	r0, r6
 8021414:	f7ff ff1e 	bl	8021254 <__multiply>
 8021418:	4639      	mov	r1, r7
 802141a:	4680      	mov	r8, r0
 802141c:	4630      	mov	r0, r6
 802141e:	f7ff fdfd 	bl	802101c <_Bfree>
 8021422:	4647      	mov	r7, r8
 8021424:	106d      	asrs	r5, r5, #1
 8021426:	d00b      	beq.n	8021440 <__pow5mult+0xa0>
 8021428:	6820      	ldr	r0, [r4, #0]
 802142a:	b938      	cbnz	r0, 802143c <__pow5mult+0x9c>
 802142c:	4622      	mov	r2, r4
 802142e:	4621      	mov	r1, r4
 8021430:	4630      	mov	r0, r6
 8021432:	f7ff ff0f 	bl	8021254 <__multiply>
 8021436:	6020      	str	r0, [r4, #0]
 8021438:	f8c0 9000 	str.w	r9, [r0]
 802143c:	4604      	mov	r4, r0
 802143e:	e7e4      	b.n	802140a <__pow5mult+0x6a>
 8021440:	4638      	mov	r0, r7
 8021442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021446:	bf00      	nop
 8021448:	080230e0 	.word	0x080230e0
 802144c:	08022e8a 	.word	0x08022e8a
 8021450:	08022f90 	.word	0x08022f90

08021454 <__lshift>:
 8021454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021458:	460c      	mov	r4, r1
 802145a:	6849      	ldr	r1, [r1, #4]
 802145c:	6923      	ldr	r3, [r4, #16]
 802145e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021462:	68a3      	ldr	r3, [r4, #8]
 8021464:	4607      	mov	r7, r0
 8021466:	4691      	mov	r9, r2
 8021468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802146c:	f108 0601 	add.w	r6, r8, #1
 8021470:	42b3      	cmp	r3, r6
 8021472:	db0b      	blt.n	802148c <__lshift+0x38>
 8021474:	4638      	mov	r0, r7
 8021476:	f7ff fd91 	bl	8020f9c <_Balloc>
 802147a:	4605      	mov	r5, r0
 802147c:	b948      	cbnz	r0, 8021492 <__lshift+0x3e>
 802147e:	4602      	mov	r2, r0
 8021480:	4b28      	ldr	r3, [pc, #160]	; (8021524 <__lshift+0xd0>)
 8021482:	4829      	ldr	r0, [pc, #164]	; (8021528 <__lshift+0xd4>)
 8021484:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021488:	f000 fbc8 	bl	8021c1c <__assert_func>
 802148c:	3101      	adds	r1, #1
 802148e:	005b      	lsls	r3, r3, #1
 8021490:	e7ee      	b.n	8021470 <__lshift+0x1c>
 8021492:	2300      	movs	r3, #0
 8021494:	f100 0114 	add.w	r1, r0, #20
 8021498:	f100 0210 	add.w	r2, r0, #16
 802149c:	4618      	mov	r0, r3
 802149e:	4553      	cmp	r3, sl
 80214a0:	db33      	blt.n	802150a <__lshift+0xb6>
 80214a2:	6920      	ldr	r0, [r4, #16]
 80214a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80214a8:	f104 0314 	add.w	r3, r4, #20
 80214ac:	f019 091f 	ands.w	r9, r9, #31
 80214b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80214b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80214b8:	d02b      	beq.n	8021512 <__lshift+0xbe>
 80214ba:	f1c9 0e20 	rsb	lr, r9, #32
 80214be:	468a      	mov	sl, r1
 80214c0:	2200      	movs	r2, #0
 80214c2:	6818      	ldr	r0, [r3, #0]
 80214c4:	fa00 f009 	lsl.w	r0, r0, r9
 80214c8:	4302      	orrs	r2, r0
 80214ca:	f84a 2b04 	str.w	r2, [sl], #4
 80214ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80214d2:	459c      	cmp	ip, r3
 80214d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80214d8:	d8f3      	bhi.n	80214c2 <__lshift+0x6e>
 80214da:	ebac 0304 	sub.w	r3, ip, r4
 80214de:	3b15      	subs	r3, #21
 80214e0:	f023 0303 	bic.w	r3, r3, #3
 80214e4:	3304      	adds	r3, #4
 80214e6:	f104 0015 	add.w	r0, r4, #21
 80214ea:	4584      	cmp	ip, r0
 80214ec:	bf38      	it	cc
 80214ee:	2304      	movcc	r3, #4
 80214f0:	50ca      	str	r2, [r1, r3]
 80214f2:	b10a      	cbz	r2, 80214f8 <__lshift+0xa4>
 80214f4:	f108 0602 	add.w	r6, r8, #2
 80214f8:	3e01      	subs	r6, #1
 80214fa:	4638      	mov	r0, r7
 80214fc:	612e      	str	r6, [r5, #16]
 80214fe:	4621      	mov	r1, r4
 8021500:	f7ff fd8c 	bl	802101c <_Bfree>
 8021504:	4628      	mov	r0, r5
 8021506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802150a:	f842 0f04 	str.w	r0, [r2, #4]!
 802150e:	3301      	adds	r3, #1
 8021510:	e7c5      	b.n	802149e <__lshift+0x4a>
 8021512:	3904      	subs	r1, #4
 8021514:	f853 2b04 	ldr.w	r2, [r3], #4
 8021518:	f841 2f04 	str.w	r2, [r1, #4]!
 802151c:	459c      	cmp	ip, r3
 802151e:	d8f9      	bhi.n	8021514 <__lshift+0xc0>
 8021520:	e7ea      	b.n	80214f8 <__lshift+0xa4>
 8021522:	bf00      	nop
 8021524:	08022f00 	.word	0x08022f00
 8021528:	08022f90 	.word	0x08022f90

0802152c <__mcmp>:
 802152c:	b530      	push	{r4, r5, lr}
 802152e:	6902      	ldr	r2, [r0, #16]
 8021530:	690c      	ldr	r4, [r1, #16]
 8021532:	1b12      	subs	r2, r2, r4
 8021534:	d10e      	bne.n	8021554 <__mcmp+0x28>
 8021536:	f100 0314 	add.w	r3, r0, #20
 802153a:	3114      	adds	r1, #20
 802153c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021540:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021544:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021548:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802154c:	42a5      	cmp	r5, r4
 802154e:	d003      	beq.n	8021558 <__mcmp+0x2c>
 8021550:	d305      	bcc.n	802155e <__mcmp+0x32>
 8021552:	2201      	movs	r2, #1
 8021554:	4610      	mov	r0, r2
 8021556:	bd30      	pop	{r4, r5, pc}
 8021558:	4283      	cmp	r3, r0
 802155a:	d3f3      	bcc.n	8021544 <__mcmp+0x18>
 802155c:	e7fa      	b.n	8021554 <__mcmp+0x28>
 802155e:	f04f 32ff 	mov.w	r2, #4294967295
 8021562:	e7f7      	b.n	8021554 <__mcmp+0x28>

08021564 <__mdiff>:
 8021564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021568:	460c      	mov	r4, r1
 802156a:	4606      	mov	r6, r0
 802156c:	4611      	mov	r1, r2
 802156e:	4620      	mov	r0, r4
 8021570:	4617      	mov	r7, r2
 8021572:	f7ff ffdb 	bl	802152c <__mcmp>
 8021576:	1e05      	subs	r5, r0, #0
 8021578:	d110      	bne.n	802159c <__mdiff+0x38>
 802157a:	4629      	mov	r1, r5
 802157c:	4630      	mov	r0, r6
 802157e:	f7ff fd0d 	bl	8020f9c <_Balloc>
 8021582:	b930      	cbnz	r0, 8021592 <__mdiff+0x2e>
 8021584:	4b39      	ldr	r3, [pc, #228]	; (802166c <__mdiff+0x108>)
 8021586:	4602      	mov	r2, r0
 8021588:	f240 2132 	movw	r1, #562	; 0x232
 802158c:	4838      	ldr	r0, [pc, #224]	; (8021670 <__mdiff+0x10c>)
 802158e:	f000 fb45 	bl	8021c1c <__assert_func>
 8021592:	2301      	movs	r3, #1
 8021594:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802159c:	bfa4      	itt	ge
 802159e:	463b      	movge	r3, r7
 80215a0:	4627      	movge	r7, r4
 80215a2:	4630      	mov	r0, r6
 80215a4:	6879      	ldr	r1, [r7, #4]
 80215a6:	bfa6      	itte	ge
 80215a8:	461c      	movge	r4, r3
 80215aa:	2500      	movge	r5, #0
 80215ac:	2501      	movlt	r5, #1
 80215ae:	f7ff fcf5 	bl	8020f9c <_Balloc>
 80215b2:	b920      	cbnz	r0, 80215be <__mdiff+0x5a>
 80215b4:	4b2d      	ldr	r3, [pc, #180]	; (802166c <__mdiff+0x108>)
 80215b6:	4602      	mov	r2, r0
 80215b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80215bc:	e7e6      	b.n	802158c <__mdiff+0x28>
 80215be:	693e      	ldr	r6, [r7, #16]
 80215c0:	60c5      	str	r5, [r0, #12]
 80215c2:	6925      	ldr	r5, [r4, #16]
 80215c4:	f107 0114 	add.w	r1, r7, #20
 80215c8:	f104 0914 	add.w	r9, r4, #20
 80215cc:	f100 0e14 	add.w	lr, r0, #20
 80215d0:	f107 0210 	add.w	r2, r7, #16
 80215d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80215d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80215dc:	46f2      	mov	sl, lr
 80215de:	2700      	movs	r7, #0
 80215e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80215e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80215e8:	fa1f f883 	uxth.w	r8, r3
 80215ec:	fa17 f78b 	uxtah	r7, r7, fp
 80215f0:	0c1b      	lsrs	r3, r3, #16
 80215f2:	eba7 0808 	sub.w	r8, r7, r8
 80215f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80215fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80215fe:	fa1f f888 	uxth.w	r8, r8
 8021602:	141f      	asrs	r7, r3, #16
 8021604:	454d      	cmp	r5, r9
 8021606:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802160a:	f84a 3b04 	str.w	r3, [sl], #4
 802160e:	d8e7      	bhi.n	80215e0 <__mdiff+0x7c>
 8021610:	1b2b      	subs	r3, r5, r4
 8021612:	3b15      	subs	r3, #21
 8021614:	f023 0303 	bic.w	r3, r3, #3
 8021618:	3304      	adds	r3, #4
 802161a:	3415      	adds	r4, #21
 802161c:	42a5      	cmp	r5, r4
 802161e:	bf38      	it	cc
 8021620:	2304      	movcc	r3, #4
 8021622:	4419      	add	r1, r3
 8021624:	4473      	add	r3, lr
 8021626:	469e      	mov	lr, r3
 8021628:	460d      	mov	r5, r1
 802162a:	4565      	cmp	r5, ip
 802162c:	d30e      	bcc.n	802164c <__mdiff+0xe8>
 802162e:	f10c 0203 	add.w	r2, ip, #3
 8021632:	1a52      	subs	r2, r2, r1
 8021634:	f022 0203 	bic.w	r2, r2, #3
 8021638:	3903      	subs	r1, #3
 802163a:	458c      	cmp	ip, r1
 802163c:	bf38      	it	cc
 802163e:	2200      	movcc	r2, #0
 8021640:	441a      	add	r2, r3
 8021642:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021646:	b17b      	cbz	r3, 8021668 <__mdiff+0x104>
 8021648:	6106      	str	r6, [r0, #16]
 802164a:	e7a5      	b.n	8021598 <__mdiff+0x34>
 802164c:	f855 8b04 	ldr.w	r8, [r5], #4
 8021650:	fa17 f488 	uxtah	r4, r7, r8
 8021654:	1422      	asrs	r2, r4, #16
 8021656:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 802165a:	b2a4      	uxth	r4, r4
 802165c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8021660:	f84e 4b04 	str.w	r4, [lr], #4
 8021664:	1417      	asrs	r7, r2, #16
 8021666:	e7e0      	b.n	802162a <__mdiff+0xc6>
 8021668:	3e01      	subs	r6, #1
 802166a:	e7ea      	b.n	8021642 <__mdiff+0xde>
 802166c:	08022f00 	.word	0x08022f00
 8021670:	08022f90 	.word	0x08022f90

08021674 <__ulp>:
 8021674:	b082      	sub	sp, #8
 8021676:	ed8d 0b00 	vstr	d0, [sp]
 802167a:	9b01      	ldr	r3, [sp, #4]
 802167c:	4912      	ldr	r1, [pc, #72]	; (80216c8 <__ulp+0x54>)
 802167e:	4019      	ands	r1, r3
 8021680:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8021684:	2900      	cmp	r1, #0
 8021686:	dd05      	ble.n	8021694 <__ulp+0x20>
 8021688:	2200      	movs	r2, #0
 802168a:	460b      	mov	r3, r1
 802168c:	ec43 2b10 	vmov	d0, r2, r3
 8021690:	b002      	add	sp, #8
 8021692:	4770      	bx	lr
 8021694:	4249      	negs	r1, r1
 8021696:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802169a:	ea4f 5021 	mov.w	r0, r1, asr #20
 802169e:	f04f 0200 	mov.w	r2, #0
 80216a2:	f04f 0300 	mov.w	r3, #0
 80216a6:	da04      	bge.n	80216b2 <__ulp+0x3e>
 80216a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80216ac:	fa41 f300 	asr.w	r3, r1, r0
 80216b0:	e7ec      	b.n	802168c <__ulp+0x18>
 80216b2:	f1a0 0114 	sub.w	r1, r0, #20
 80216b6:	291e      	cmp	r1, #30
 80216b8:	bfda      	itte	le
 80216ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80216be:	fa20 f101 	lsrle.w	r1, r0, r1
 80216c2:	2101      	movgt	r1, #1
 80216c4:	460a      	mov	r2, r1
 80216c6:	e7e1      	b.n	802168c <__ulp+0x18>
 80216c8:	7ff00000 	.word	0x7ff00000

080216cc <__b2d>:
 80216cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216ce:	6905      	ldr	r5, [r0, #16]
 80216d0:	f100 0714 	add.w	r7, r0, #20
 80216d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80216d8:	1f2e      	subs	r6, r5, #4
 80216da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80216de:	4620      	mov	r0, r4
 80216e0:	f7ff fd52 	bl	8021188 <__hi0bits>
 80216e4:	f1c0 0320 	rsb	r3, r0, #32
 80216e8:	280a      	cmp	r0, #10
 80216ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8021768 <__b2d+0x9c>
 80216ee:	600b      	str	r3, [r1, #0]
 80216f0:	dc14      	bgt.n	802171c <__b2d+0x50>
 80216f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80216f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80216fa:	42b7      	cmp	r7, r6
 80216fc:	ea41 030c 	orr.w	r3, r1, ip
 8021700:	bf34      	ite	cc
 8021702:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8021706:	2100      	movcs	r1, #0
 8021708:	3015      	adds	r0, #21
 802170a:	fa04 f000 	lsl.w	r0, r4, r0
 802170e:	fa21 f10e 	lsr.w	r1, r1, lr
 8021712:	ea40 0201 	orr.w	r2, r0, r1
 8021716:	ec43 2b10 	vmov	d0, r2, r3
 802171a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802171c:	42b7      	cmp	r7, r6
 802171e:	bf3a      	itte	cc
 8021720:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8021724:	f1a5 0608 	subcc.w	r6, r5, #8
 8021728:	2100      	movcs	r1, #0
 802172a:	380b      	subs	r0, #11
 802172c:	d017      	beq.n	802175e <__b2d+0x92>
 802172e:	f1c0 0c20 	rsb	ip, r0, #32
 8021732:	fa04 f500 	lsl.w	r5, r4, r0
 8021736:	42be      	cmp	r6, r7
 8021738:	fa21 f40c 	lsr.w	r4, r1, ip
 802173c:	ea45 0504 	orr.w	r5, r5, r4
 8021740:	bf8c      	ite	hi
 8021742:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8021746:	2400      	movls	r4, #0
 8021748:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802174c:	fa01 f000 	lsl.w	r0, r1, r0
 8021750:	fa24 f40c 	lsr.w	r4, r4, ip
 8021754:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8021758:	ea40 0204 	orr.w	r2, r0, r4
 802175c:	e7db      	b.n	8021716 <__b2d+0x4a>
 802175e:	ea44 030c 	orr.w	r3, r4, ip
 8021762:	460a      	mov	r2, r1
 8021764:	e7d7      	b.n	8021716 <__b2d+0x4a>
 8021766:	bf00      	nop
 8021768:	3ff00000 	.word	0x3ff00000

0802176c <__d2b>:
 802176c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021770:	4689      	mov	r9, r1
 8021772:	2101      	movs	r1, #1
 8021774:	ec57 6b10 	vmov	r6, r7, d0
 8021778:	4690      	mov	r8, r2
 802177a:	f7ff fc0f 	bl	8020f9c <_Balloc>
 802177e:	4604      	mov	r4, r0
 8021780:	b930      	cbnz	r0, 8021790 <__d2b+0x24>
 8021782:	4602      	mov	r2, r0
 8021784:	4b25      	ldr	r3, [pc, #148]	; (802181c <__d2b+0xb0>)
 8021786:	4826      	ldr	r0, [pc, #152]	; (8021820 <__d2b+0xb4>)
 8021788:	f240 310a 	movw	r1, #778	; 0x30a
 802178c:	f000 fa46 	bl	8021c1c <__assert_func>
 8021790:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021794:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021798:	bb35      	cbnz	r5, 80217e8 <__d2b+0x7c>
 802179a:	2e00      	cmp	r6, #0
 802179c:	9301      	str	r3, [sp, #4]
 802179e:	d028      	beq.n	80217f2 <__d2b+0x86>
 80217a0:	4668      	mov	r0, sp
 80217a2:	9600      	str	r6, [sp, #0]
 80217a4:	f7ff fd10 	bl	80211c8 <__lo0bits>
 80217a8:	9900      	ldr	r1, [sp, #0]
 80217aa:	b300      	cbz	r0, 80217ee <__d2b+0x82>
 80217ac:	9a01      	ldr	r2, [sp, #4]
 80217ae:	f1c0 0320 	rsb	r3, r0, #32
 80217b2:	fa02 f303 	lsl.w	r3, r2, r3
 80217b6:	430b      	orrs	r3, r1
 80217b8:	40c2      	lsrs	r2, r0
 80217ba:	6163      	str	r3, [r4, #20]
 80217bc:	9201      	str	r2, [sp, #4]
 80217be:	9b01      	ldr	r3, [sp, #4]
 80217c0:	61a3      	str	r3, [r4, #24]
 80217c2:	2b00      	cmp	r3, #0
 80217c4:	bf14      	ite	ne
 80217c6:	2202      	movne	r2, #2
 80217c8:	2201      	moveq	r2, #1
 80217ca:	6122      	str	r2, [r4, #16]
 80217cc:	b1d5      	cbz	r5, 8021804 <__d2b+0x98>
 80217ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80217d2:	4405      	add	r5, r0
 80217d4:	f8c9 5000 	str.w	r5, [r9]
 80217d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80217dc:	f8c8 0000 	str.w	r0, [r8]
 80217e0:	4620      	mov	r0, r4
 80217e2:	b003      	add	sp, #12
 80217e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80217e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80217ec:	e7d5      	b.n	802179a <__d2b+0x2e>
 80217ee:	6161      	str	r1, [r4, #20]
 80217f0:	e7e5      	b.n	80217be <__d2b+0x52>
 80217f2:	a801      	add	r0, sp, #4
 80217f4:	f7ff fce8 	bl	80211c8 <__lo0bits>
 80217f8:	9b01      	ldr	r3, [sp, #4]
 80217fa:	6163      	str	r3, [r4, #20]
 80217fc:	2201      	movs	r2, #1
 80217fe:	6122      	str	r2, [r4, #16]
 8021800:	3020      	adds	r0, #32
 8021802:	e7e3      	b.n	80217cc <__d2b+0x60>
 8021804:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021808:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802180c:	f8c9 0000 	str.w	r0, [r9]
 8021810:	6918      	ldr	r0, [r3, #16]
 8021812:	f7ff fcb9 	bl	8021188 <__hi0bits>
 8021816:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802181a:	e7df      	b.n	80217dc <__d2b+0x70>
 802181c:	08022f00 	.word	0x08022f00
 8021820:	08022f90 	.word	0x08022f90

08021824 <__ratio>:
 8021824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021828:	4688      	mov	r8, r1
 802182a:	4669      	mov	r1, sp
 802182c:	4681      	mov	r9, r0
 802182e:	f7ff ff4d 	bl	80216cc <__b2d>
 8021832:	a901      	add	r1, sp, #4
 8021834:	4640      	mov	r0, r8
 8021836:	ec55 4b10 	vmov	r4, r5, d0
 802183a:	f7ff ff47 	bl	80216cc <__b2d>
 802183e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021842:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8021846:	eba3 0c02 	sub.w	ip, r3, r2
 802184a:	e9dd 3200 	ldrd	r3, r2, [sp]
 802184e:	1a9b      	subs	r3, r3, r2
 8021850:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8021854:	ec51 0b10 	vmov	r0, r1, d0
 8021858:	2b00      	cmp	r3, #0
 802185a:	bfd6      	itet	le
 802185c:	460a      	movle	r2, r1
 802185e:	462a      	movgt	r2, r5
 8021860:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8021864:	468b      	mov	fp, r1
 8021866:	462f      	mov	r7, r5
 8021868:	bfd4      	ite	le
 802186a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802186e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8021872:	4620      	mov	r0, r4
 8021874:	ee10 2a10 	vmov	r2, s0
 8021878:	465b      	mov	r3, fp
 802187a:	4639      	mov	r1, r7
 802187c:	f7df f80e 	bl	800089c <__aeabi_ddiv>
 8021880:	ec41 0b10 	vmov	d0, r0, r1
 8021884:	b003      	add	sp, #12
 8021886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802188a <__copybits>:
 802188a:	3901      	subs	r1, #1
 802188c:	b570      	push	{r4, r5, r6, lr}
 802188e:	1149      	asrs	r1, r1, #5
 8021890:	6914      	ldr	r4, [r2, #16]
 8021892:	3101      	adds	r1, #1
 8021894:	f102 0314 	add.w	r3, r2, #20
 8021898:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802189c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80218a0:	1f05      	subs	r5, r0, #4
 80218a2:	42a3      	cmp	r3, r4
 80218a4:	d30c      	bcc.n	80218c0 <__copybits+0x36>
 80218a6:	1aa3      	subs	r3, r4, r2
 80218a8:	3b11      	subs	r3, #17
 80218aa:	f023 0303 	bic.w	r3, r3, #3
 80218ae:	3211      	adds	r2, #17
 80218b0:	42a2      	cmp	r2, r4
 80218b2:	bf88      	it	hi
 80218b4:	2300      	movhi	r3, #0
 80218b6:	4418      	add	r0, r3
 80218b8:	2300      	movs	r3, #0
 80218ba:	4288      	cmp	r0, r1
 80218bc:	d305      	bcc.n	80218ca <__copybits+0x40>
 80218be:	bd70      	pop	{r4, r5, r6, pc}
 80218c0:	f853 6b04 	ldr.w	r6, [r3], #4
 80218c4:	f845 6f04 	str.w	r6, [r5, #4]!
 80218c8:	e7eb      	b.n	80218a2 <__copybits+0x18>
 80218ca:	f840 3b04 	str.w	r3, [r0], #4
 80218ce:	e7f4      	b.n	80218ba <__copybits+0x30>

080218d0 <__any_on>:
 80218d0:	f100 0214 	add.w	r2, r0, #20
 80218d4:	6900      	ldr	r0, [r0, #16]
 80218d6:	114b      	asrs	r3, r1, #5
 80218d8:	4298      	cmp	r0, r3
 80218da:	b510      	push	{r4, lr}
 80218dc:	db11      	blt.n	8021902 <__any_on+0x32>
 80218de:	dd0a      	ble.n	80218f6 <__any_on+0x26>
 80218e0:	f011 011f 	ands.w	r1, r1, #31
 80218e4:	d007      	beq.n	80218f6 <__any_on+0x26>
 80218e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80218ea:	fa24 f001 	lsr.w	r0, r4, r1
 80218ee:	fa00 f101 	lsl.w	r1, r0, r1
 80218f2:	428c      	cmp	r4, r1
 80218f4:	d10b      	bne.n	802190e <__any_on+0x3e>
 80218f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80218fa:	4293      	cmp	r3, r2
 80218fc:	d803      	bhi.n	8021906 <__any_on+0x36>
 80218fe:	2000      	movs	r0, #0
 8021900:	bd10      	pop	{r4, pc}
 8021902:	4603      	mov	r3, r0
 8021904:	e7f7      	b.n	80218f6 <__any_on+0x26>
 8021906:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802190a:	2900      	cmp	r1, #0
 802190c:	d0f5      	beq.n	80218fa <__any_on+0x2a>
 802190e:	2001      	movs	r0, #1
 8021910:	e7f6      	b.n	8021900 <__any_on+0x30>

08021912 <__ssputs_r>:
 8021912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021916:	688e      	ldr	r6, [r1, #8]
 8021918:	429e      	cmp	r6, r3
 802191a:	4682      	mov	sl, r0
 802191c:	460c      	mov	r4, r1
 802191e:	4690      	mov	r8, r2
 8021920:	461f      	mov	r7, r3
 8021922:	d838      	bhi.n	8021996 <__ssputs_r+0x84>
 8021924:	898a      	ldrh	r2, [r1, #12]
 8021926:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802192a:	d032      	beq.n	8021992 <__ssputs_r+0x80>
 802192c:	6825      	ldr	r5, [r4, #0]
 802192e:	6909      	ldr	r1, [r1, #16]
 8021930:	eba5 0901 	sub.w	r9, r5, r1
 8021934:	6965      	ldr	r5, [r4, #20]
 8021936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802193a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802193e:	3301      	adds	r3, #1
 8021940:	444b      	add	r3, r9
 8021942:	106d      	asrs	r5, r5, #1
 8021944:	429d      	cmp	r5, r3
 8021946:	bf38      	it	cc
 8021948:	461d      	movcc	r5, r3
 802194a:	0553      	lsls	r3, r2, #21
 802194c:	d531      	bpl.n	80219b2 <__ssputs_r+0xa0>
 802194e:	4629      	mov	r1, r5
 8021950:	f7fc fb88 	bl	801e064 <_malloc_r>
 8021954:	4606      	mov	r6, r0
 8021956:	b950      	cbnz	r0, 802196e <__ssputs_r+0x5c>
 8021958:	230c      	movs	r3, #12
 802195a:	f8ca 3000 	str.w	r3, [sl]
 802195e:	89a3      	ldrh	r3, [r4, #12]
 8021960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021964:	81a3      	strh	r3, [r4, #12]
 8021966:	f04f 30ff 	mov.w	r0, #4294967295
 802196a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802196e:	6921      	ldr	r1, [r4, #16]
 8021970:	464a      	mov	r2, r9
 8021972:	f7fc fae7 	bl	801df44 <memcpy>
 8021976:	89a3      	ldrh	r3, [r4, #12]
 8021978:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802197c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021980:	81a3      	strh	r3, [r4, #12]
 8021982:	6126      	str	r6, [r4, #16]
 8021984:	6165      	str	r5, [r4, #20]
 8021986:	444e      	add	r6, r9
 8021988:	eba5 0509 	sub.w	r5, r5, r9
 802198c:	6026      	str	r6, [r4, #0]
 802198e:	60a5      	str	r5, [r4, #8]
 8021990:	463e      	mov	r6, r7
 8021992:	42be      	cmp	r6, r7
 8021994:	d900      	bls.n	8021998 <__ssputs_r+0x86>
 8021996:	463e      	mov	r6, r7
 8021998:	4632      	mov	r2, r6
 802199a:	6820      	ldr	r0, [r4, #0]
 802199c:	4641      	mov	r1, r8
 802199e:	f7fc fadf 	bl	801df60 <memmove>
 80219a2:	68a3      	ldr	r3, [r4, #8]
 80219a4:	6822      	ldr	r2, [r4, #0]
 80219a6:	1b9b      	subs	r3, r3, r6
 80219a8:	4432      	add	r2, r6
 80219aa:	60a3      	str	r3, [r4, #8]
 80219ac:	6022      	str	r2, [r4, #0]
 80219ae:	2000      	movs	r0, #0
 80219b0:	e7db      	b.n	802196a <__ssputs_r+0x58>
 80219b2:	462a      	mov	r2, r5
 80219b4:	f000 f962 	bl	8021c7c <_realloc_r>
 80219b8:	4606      	mov	r6, r0
 80219ba:	2800      	cmp	r0, #0
 80219bc:	d1e1      	bne.n	8021982 <__ssputs_r+0x70>
 80219be:	6921      	ldr	r1, [r4, #16]
 80219c0:	4650      	mov	r0, sl
 80219c2:	f7fc faff 	bl	801dfc4 <_free_r>
 80219c6:	e7c7      	b.n	8021958 <__ssputs_r+0x46>

080219c8 <_svfiprintf_r>:
 80219c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219cc:	4698      	mov	r8, r3
 80219ce:	898b      	ldrh	r3, [r1, #12]
 80219d0:	061b      	lsls	r3, r3, #24
 80219d2:	b09d      	sub	sp, #116	; 0x74
 80219d4:	4607      	mov	r7, r0
 80219d6:	460d      	mov	r5, r1
 80219d8:	4614      	mov	r4, r2
 80219da:	d50e      	bpl.n	80219fa <_svfiprintf_r+0x32>
 80219dc:	690b      	ldr	r3, [r1, #16]
 80219de:	b963      	cbnz	r3, 80219fa <_svfiprintf_r+0x32>
 80219e0:	2140      	movs	r1, #64	; 0x40
 80219e2:	f7fc fb3f 	bl	801e064 <_malloc_r>
 80219e6:	6028      	str	r0, [r5, #0]
 80219e8:	6128      	str	r0, [r5, #16]
 80219ea:	b920      	cbnz	r0, 80219f6 <_svfiprintf_r+0x2e>
 80219ec:	230c      	movs	r3, #12
 80219ee:	603b      	str	r3, [r7, #0]
 80219f0:	f04f 30ff 	mov.w	r0, #4294967295
 80219f4:	e0d1      	b.n	8021b9a <_svfiprintf_r+0x1d2>
 80219f6:	2340      	movs	r3, #64	; 0x40
 80219f8:	616b      	str	r3, [r5, #20]
 80219fa:	2300      	movs	r3, #0
 80219fc:	9309      	str	r3, [sp, #36]	; 0x24
 80219fe:	2320      	movs	r3, #32
 8021a00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8021a08:	2330      	movs	r3, #48	; 0x30
 8021a0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021bb4 <_svfiprintf_r+0x1ec>
 8021a0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021a12:	f04f 0901 	mov.w	r9, #1
 8021a16:	4623      	mov	r3, r4
 8021a18:	469a      	mov	sl, r3
 8021a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021a1e:	b10a      	cbz	r2, 8021a24 <_svfiprintf_r+0x5c>
 8021a20:	2a25      	cmp	r2, #37	; 0x25
 8021a22:	d1f9      	bne.n	8021a18 <_svfiprintf_r+0x50>
 8021a24:	ebba 0b04 	subs.w	fp, sl, r4
 8021a28:	d00b      	beq.n	8021a42 <_svfiprintf_r+0x7a>
 8021a2a:	465b      	mov	r3, fp
 8021a2c:	4622      	mov	r2, r4
 8021a2e:	4629      	mov	r1, r5
 8021a30:	4638      	mov	r0, r7
 8021a32:	f7ff ff6e 	bl	8021912 <__ssputs_r>
 8021a36:	3001      	adds	r0, #1
 8021a38:	f000 80aa 	beq.w	8021b90 <_svfiprintf_r+0x1c8>
 8021a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a3e:	445a      	add	r2, fp
 8021a40:	9209      	str	r2, [sp, #36]	; 0x24
 8021a42:	f89a 3000 	ldrb.w	r3, [sl]
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	f000 80a2 	beq.w	8021b90 <_svfiprintf_r+0x1c8>
 8021a4c:	2300      	movs	r3, #0
 8021a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8021a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021a56:	f10a 0a01 	add.w	sl, sl, #1
 8021a5a:	9304      	str	r3, [sp, #16]
 8021a5c:	9307      	str	r3, [sp, #28]
 8021a5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021a62:	931a      	str	r3, [sp, #104]	; 0x68
 8021a64:	4654      	mov	r4, sl
 8021a66:	2205      	movs	r2, #5
 8021a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021a6c:	4851      	ldr	r0, [pc, #324]	; (8021bb4 <_svfiprintf_r+0x1ec>)
 8021a6e:	f7de fbdf 	bl	8000230 <memchr>
 8021a72:	9a04      	ldr	r2, [sp, #16]
 8021a74:	b9d8      	cbnz	r0, 8021aae <_svfiprintf_r+0xe6>
 8021a76:	06d0      	lsls	r0, r2, #27
 8021a78:	bf44      	itt	mi
 8021a7a:	2320      	movmi	r3, #32
 8021a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021a80:	0711      	lsls	r1, r2, #28
 8021a82:	bf44      	itt	mi
 8021a84:	232b      	movmi	r3, #43	; 0x2b
 8021a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8021a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8021a90:	d015      	beq.n	8021abe <_svfiprintf_r+0xf6>
 8021a92:	9a07      	ldr	r2, [sp, #28]
 8021a94:	4654      	mov	r4, sl
 8021a96:	2000      	movs	r0, #0
 8021a98:	f04f 0c0a 	mov.w	ip, #10
 8021a9c:	4621      	mov	r1, r4
 8021a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021aa2:	3b30      	subs	r3, #48	; 0x30
 8021aa4:	2b09      	cmp	r3, #9
 8021aa6:	d94e      	bls.n	8021b46 <_svfiprintf_r+0x17e>
 8021aa8:	b1b0      	cbz	r0, 8021ad8 <_svfiprintf_r+0x110>
 8021aaa:	9207      	str	r2, [sp, #28]
 8021aac:	e014      	b.n	8021ad8 <_svfiprintf_r+0x110>
 8021aae:	eba0 0308 	sub.w	r3, r0, r8
 8021ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8021ab6:	4313      	orrs	r3, r2
 8021ab8:	9304      	str	r3, [sp, #16]
 8021aba:	46a2      	mov	sl, r4
 8021abc:	e7d2      	b.n	8021a64 <_svfiprintf_r+0x9c>
 8021abe:	9b03      	ldr	r3, [sp, #12]
 8021ac0:	1d19      	adds	r1, r3, #4
 8021ac2:	681b      	ldr	r3, [r3, #0]
 8021ac4:	9103      	str	r1, [sp, #12]
 8021ac6:	2b00      	cmp	r3, #0
 8021ac8:	bfbb      	ittet	lt
 8021aca:	425b      	neglt	r3, r3
 8021acc:	f042 0202 	orrlt.w	r2, r2, #2
 8021ad0:	9307      	strge	r3, [sp, #28]
 8021ad2:	9307      	strlt	r3, [sp, #28]
 8021ad4:	bfb8      	it	lt
 8021ad6:	9204      	strlt	r2, [sp, #16]
 8021ad8:	7823      	ldrb	r3, [r4, #0]
 8021ada:	2b2e      	cmp	r3, #46	; 0x2e
 8021adc:	d10c      	bne.n	8021af8 <_svfiprintf_r+0x130>
 8021ade:	7863      	ldrb	r3, [r4, #1]
 8021ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8021ae2:	d135      	bne.n	8021b50 <_svfiprintf_r+0x188>
 8021ae4:	9b03      	ldr	r3, [sp, #12]
 8021ae6:	1d1a      	adds	r2, r3, #4
 8021ae8:	681b      	ldr	r3, [r3, #0]
 8021aea:	9203      	str	r2, [sp, #12]
 8021aec:	2b00      	cmp	r3, #0
 8021aee:	bfb8      	it	lt
 8021af0:	f04f 33ff 	movlt.w	r3, #4294967295
 8021af4:	3402      	adds	r4, #2
 8021af6:	9305      	str	r3, [sp, #20]
 8021af8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021bc4 <_svfiprintf_r+0x1fc>
 8021afc:	7821      	ldrb	r1, [r4, #0]
 8021afe:	2203      	movs	r2, #3
 8021b00:	4650      	mov	r0, sl
 8021b02:	f7de fb95 	bl	8000230 <memchr>
 8021b06:	b140      	cbz	r0, 8021b1a <_svfiprintf_r+0x152>
 8021b08:	2340      	movs	r3, #64	; 0x40
 8021b0a:	eba0 000a 	sub.w	r0, r0, sl
 8021b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8021b12:	9b04      	ldr	r3, [sp, #16]
 8021b14:	4303      	orrs	r3, r0
 8021b16:	3401      	adds	r4, #1
 8021b18:	9304      	str	r3, [sp, #16]
 8021b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021b1e:	4826      	ldr	r0, [pc, #152]	; (8021bb8 <_svfiprintf_r+0x1f0>)
 8021b20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021b24:	2206      	movs	r2, #6
 8021b26:	f7de fb83 	bl	8000230 <memchr>
 8021b2a:	2800      	cmp	r0, #0
 8021b2c:	d038      	beq.n	8021ba0 <_svfiprintf_r+0x1d8>
 8021b2e:	4b23      	ldr	r3, [pc, #140]	; (8021bbc <_svfiprintf_r+0x1f4>)
 8021b30:	bb1b      	cbnz	r3, 8021b7a <_svfiprintf_r+0x1b2>
 8021b32:	9b03      	ldr	r3, [sp, #12]
 8021b34:	3307      	adds	r3, #7
 8021b36:	f023 0307 	bic.w	r3, r3, #7
 8021b3a:	3308      	adds	r3, #8
 8021b3c:	9303      	str	r3, [sp, #12]
 8021b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b40:	4433      	add	r3, r6
 8021b42:	9309      	str	r3, [sp, #36]	; 0x24
 8021b44:	e767      	b.n	8021a16 <_svfiprintf_r+0x4e>
 8021b46:	fb0c 3202 	mla	r2, ip, r2, r3
 8021b4a:	460c      	mov	r4, r1
 8021b4c:	2001      	movs	r0, #1
 8021b4e:	e7a5      	b.n	8021a9c <_svfiprintf_r+0xd4>
 8021b50:	2300      	movs	r3, #0
 8021b52:	3401      	adds	r4, #1
 8021b54:	9305      	str	r3, [sp, #20]
 8021b56:	4619      	mov	r1, r3
 8021b58:	f04f 0c0a 	mov.w	ip, #10
 8021b5c:	4620      	mov	r0, r4
 8021b5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021b62:	3a30      	subs	r2, #48	; 0x30
 8021b64:	2a09      	cmp	r2, #9
 8021b66:	d903      	bls.n	8021b70 <_svfiprintf_r+0x1a8>
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d0c5      	beq.n	8021af8 <_svfiprintf_r+0x130>
 8021b6c:	9105      	str	r1, [sp, #20]
 8021b6e:	e7c3      	b.n	8021af8 <_svfiprintf_r+0x130>
 8021b70:	fb0c 2101 	mla	r1, ip, r1, r2
 8021b74:	4604      	mov	r4, r0
 8021b76:	2301      	movs	r3, #1
 8021b78:	e7f0      	b.n	8021b5c <_svfiprintf_r+0x194>
 8021b7a:	ab03      	add	r3, sp, #12
 8021b7c:	9300      	str	r3, [sp, #0]
 8021b7e:	462a      	mov	r2, r5
 8021b80:	4b0f      	ldr	r3, [pc, #60]	; (8021bc0 <_svfiprintf_r+0x1f8>)
 8021b82:	a904      	add	r1, sp, #16
 8021b84:	4638      	mov	r0, r7
 8021b86:	f7fc fb67 	bl	801e258 <_printf_float>
 8021b8a:	1c42      	adds	r2, r0, #1
 8021b8c:	4606      	mov	r6, r0
 8021b8e:	d1d6      	bne.n	8021b3e <_svfiprintf_r+0x176>
 8021b90:	89ab      	ldrh	r3, [r5, #12]
 8021b92:	065b      	lsls	r3, r3, #25
 8021b94:	f53f af2c 	bmi.w	80219f0 <_svfiprintf_r+0x28>
 8021b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021b9a:	b01d      	add	sp, #116	; 0x74
 8021b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ba0:	ab03      	add	r3, sp, #12
 8021ba2:	9300      	str	r3, [sp, #0]
 8021ba4:	462a      	mov	r2, r5
 8021ba6:	4b06      	ldr	r3, [pc, #24]	; (8021bc0 <_svfiprintf_r+0x1f8>)
 8021ba8:	a904      	add	r1, sp, #16
 8021baa:	4638      	mov	r0, r7
 8021bac:	f7fc fdf8 	bl	801e7a0 <_printf_i>
 8021bb0:	e7eb      	b.n	8021b8a <_svfiprintf_r+0x1c2>
 8021bb2:	bf00      	nop
 8021bb4:	080230ec 	.word	0x080230ec
 8021bb8:	080230f6 	.word	0x080230f6
 8021bbc:	0801e259 	.word	0x0801e259
 8021bc0:	08021913 	.word	0x08021913
 8021bc4:	080230f2 	.word	0x080230f2

08021bc8 <_read_r>:
 8021bc8:	b538      	push	{r3, r4, r5, lr}
 8021bca:	4d07      	ldr	r5, [pc, #28]	; (8021be8 <_read_r+0x20>)
 8021bcc:	4604      	mov	r4, r0
 8021bce:	4608      	mov	r0, r1
 8021bd0:	4611      	mov	r1, r2
 8021bd2:	2200      	movs	r2, #0
 8021bd4:	602a      	str	r2, [r5, #0]
 8021bd6:	461a      	mov	r2, r3
 8021bd8:	f7fb ff26 	bl	801da28 <_read>
 8021bdc:	1c43      	adds	r3, r0, #1
 8021bde:	d102      	bne.n	8021be6 <_read_r+0x1e>
 8021be0:	682b      	ldr	r3, [r5, #0]
 8021be2:	b103      	cbz	r3, 8021be6 <_read_r+0x1e>
 8021be4:	6023      	str	r3, [r4, #0]
 8021be6:	bd38      	pop	{r3, r4, r5, pc}
 8021be8:	20019220 	.word	0x20019220
 8021bec:	00000000 	.word	0x00000000

08021bf0 <nan>:
 8021bf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8021bf8 <nan+0x8>
 8021bf4:	4770      	bx	lr
 8021bf6:	bf00      	nop
 8021bf8:	00000000 	.word	0x00000000
 8021bfc:	7ff80000 	.word	0x7ff80000

08021c00 <__ascii_wctomb>:
 8021c00:	b149      	cbz	r1, 8021c16 <__ascii_wctomb+0x16>
 8021c02:	2aff      	cmp	r2, #255	; 0xff
 8021c04:	bf85      	ittet	hi
 8021c06:	238a      	movhi	r3, #138	; 0x8a
 8021c08:	6003      	strhi	r3, [r0, #0]
 8021c0a:	700a      	strbls	r2, [r1, #0]
 8021c0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8021c10:	bf98      	it	ls
 8021c12:	2001      	movls	r0, #1
 8021c14:	4770      	bx	lr
 8021c16:	4608      	mov	r0, r1
 8021c18:	4770      	bx	lr
	...

08021c1c <__assert_func>:
 8021c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021c1e:	4614      	mov	r4, r2
 8021c20:	461a      	mov	r2, r3
 8021c22:	4b09      	ldr	r3, [pc, #36]	; (8021c48 <__assert_func+0x2c>)
 8021c24:	681b      	ldr	r3, [r3, #0]
 8021c26:	4605      	mov	r5, r0
 8021c28:	68d8      	ldr	r0, [r3, #12]
 8021c2a:	b14c      	cbz	r4, 8021c40 <__assert_func+0x24>
 8021c2c:	4b07      	ldr	r3, [pc, #28]	; (8021c4c <__assert_func+0x30>)
 8021c2e:	9100      	str	r1, [sp, #0]
 8021c30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021c34:	4906      	ldr	r1, [pc, #24]	; (8021c50 <__assert_func+0x34>)
 8021c36:	462b      	mov	r3, r5
 8021c38:	f000 f80e 	bl	8021c58 <fiprintf>
 8021c3c:	f000 f99e 	bl	8021f7c <abort>
 8021c40:	4b04      	ldr	r3, [pc, #16]	; (8021c54 <__assert_func+0x38>)
 8021c42:	461c      	mov	r4, r3
 8021c44:	e7f3      	b.n	8021c2e <__assert_func+0x12>
 8021c46:	bf00      	nop
 8021c48:	2000008c 	.word	0x2000008c
 8021c4c:	080230fd 	.word	0x080230fd
 8021c50:	0802310a 	.word	0x0802310a
 8021c54:	08023138 	.word	0x08023138

08021c58 <fiprintf>:
 8021c58:	b40e      	push	{r1, r2, r3}
 8021c5a:	b503      	push	{r0, r1, lr}
 8021c5c:	4601      	mov	r1, r0
 8021c5e:	ab03      	add	r3, sp, #12
 8021c60:	4805      	ldr	r0, [pc, #20]	; (8021c78 <fiprintf+0x20>)
 8021c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8021c66:	6800      	ldr	r0, [r0, #0]
 8021c68:	9301      	str	r3, [sp, #4]
 8021c6a:	f000 f857 	bl	8021d1c <_vfiprintf_r>
 8021c6e:	b002      	add	sp, #8
 8021c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8021c74:	b003      	add	sp, #12
 8021c76:	4770      	bx	lr
 8021c78:	2000008c 	.word	0x2000008c

08021c7c <_realloc_r>:
 8021c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c7e:	4607      	mov	r7, r0
 8021c80:	4614      	mov	r4, r2
 8021c82:	460e      	mov	r6, r1
 8021c84:	b921      	cbnz	r1, 8021c90 <_realloc_r+0x14>
 8021c86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021c8a:	4611      	mov	r1, r2
 8021c8c:	f7fc b9ea 	b.w	801e064 <_malloc_r>
 8021c90:	b922      	cbnz	r2, 8021c9c <_realloc_r+0x20>
 8021c92:	f7fc f997 	bl	801dfc4 <_free_r>
 8021c96:	4625      	mov	r5, r4
 8021c98:	4628      	mov	r0, r5
 8021c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c9c:	f000 f975 	bl	8021f8a <_malloc_usable_size_r>
 8021ca0:	42a0      	cmp	r0, r4
 8021ca2:	d20f      	bcs.n	8021cc4 <_realloc_r+0x48>
 8021ca4:	4621      	mov	r1, r4
 8021ca6:	4638      	mov	r0, r7
 8021ca8:	f7fc f9dc 	bl	801e064 <_malloc_r>
 8021cac:	4605      	mov	r5, r0
 8021cae:	2800      	cmp	r0, #0
 8021cb0:	d0f2      	beq.n	8021c98 <_realloc_r+0x1c>
 8021cb2:	4631      	mov	r1, r6
 8021cb4:	4622      	mov	r2, r4
 8021cb6:	f7fc f945 	bl	801df44 <memcpy>
 8021cba:	4631      	mov	r1, r6
 8021cbc:	4638      	mov	r0, r7
 8021cbe:	f7fc f981 	bl	801dfc4 <_free_r>
 8021cc2:	e7e9      	b.n	8021c98 <_realloc_r+0x1c>
 8021cc4:	4635      	mov	r5, r6
 8021cc6:	e7e7      	b.n	8021c98 <_realloc_r+0x1c>

08021cc8 <__sfputc_r>:
 8021cc8:	6893      	ldr	r3, [r2, #8]
 8021cca:	3b01      	subs	r3, #1
 8021ccc:	2b00      	cmp	r3, #0
 8021cce:	b410      	push	{r4}
 8021cd0:	6093      	str	r3, [r2, #8]
 8021cd2:	da08      	bge.n	8021ce6 <__sfputc_r+0x1e>
 8021cd4:	6994      	ldr	r4, [r2, #24]
 8021cd6:	42a3      	cmp	r3, r4
 8021cd8:	db01      	blt.n	8021cde <__sfputc_r+0x16>
 8021cda:	290a      	cmp	r1, #10
 8021cdc:	d103      	bne.n	8021ce6 <__sfputc_r+0x1e>
 8021cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021ce2:	f7fd be3b 	b.w	801f95c <__swbuf_r>
 8021ce6:	6813      	ldr	r3, [r2, #0]
 8021ce8:	1c58      	adds	r0, r3, #1
 8021cea:	6010      	str	r0, [r2, #0]
 8021cec:	7019      	strb	r1, [r3, #0]
 8021cee:	4608      	mov	r0, r1
 8021cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021cf4:	4770      	bx	lr

08021cf6 <__sfputs_r>:
 8021cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021cf8:	4606      	mov	r6, r0
 8021cfa:	460f      	mov	r7, r1
 8021cfc:	4614      	mov	r4, r2
 8021cfe:	18d5      	adds	r5, r2, r3
 8021d00:	42ac      	cmp	r4, r5
 8021d02:	d101      	bne.n	8021d08 <__sfputs_r+0x12>
 8021d04:	2000      	movs	r0, #0
 8021d06:	e007      	b.n	8021d18 <__sfputs_r+0x22>
 8021d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d0c:	463a      	mov	r2, r7
 8021d0e:	4630      	mov	r0, r6
 8021d10:	f7ff ffda 	bl	8021cc8 <__sfputc_r>
 8021d14:	1c43      	adds	r3, r0, #1
 8021d16:	d1f3      	bne.n	8021d00 <__sfputs_r+0xa>
 8021d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021d1c <_vfiprintf_r>:
 8021d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d20:	460d      	mov	r5, r1
 8021d22:	b09d      	sub	sp, #116	; 0x74
 8021d24:	4614      	mov	r4, r2
 8021d26:	4698      	mov	r8, r3
 8021d28:	4606      	mov	r6, r0
 8021d2a:	b118      	cbz	r0, 8021d34 <_vfiprintf_r+0x18>
 8021d2c:	6983      	ldr	r3, [r0, #24]
 8021d2e:	b90b      	cbnz	r3, 8021d34 <_vfiprintf_r+0x18>
 8021d30:	f7fb ffb4 	bl	801dc9c <__sinit>
 8021d34:	4b89      	ldr	r3, [pc, #548]	; (8021f5c <_vfiprintf_r+0x240>)
 8021d36:	429d      	cmp	r5, r3
 8021d38:	d11b      	bne.n	8021d72 <_vfiprintf_r+0x56>
 8021d3a:	6875      	ldr	r5, [r6, #4]
 8021d3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021d3e:	07d9      	lsls	r1, r3, #31
 8021d40:	d405      	bmi.n	8021d4e <_vfiprintf_r+0x32>
 8021d42:	89ab      	ldrh	r3, [r5, #12]
 8021d44:	059a      	lsls	r2, r3, #22
 8021d46:	d402      	bmi.n	8021d4e <_vfiprintf_r+0x32>
 8021d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021d4a:	f7fc f884 	bl	801de56 <__retarget_lock_acquire_recursive>
 8021d4e:	89ab      	ldrh	r3, [r5, #12]
 8021d50:	071b      	lsls	r3, r3, #28
 8021d52:	d501      	bpl.n	8021d58 <_vfiprintf_r+0x3c>
 8021d54:	692b      	ldr	r3, [r5, #16]
 8021d56:	b9eb      	cbnz	r3, 8021d94 <_vfiprintf_r+0x78>
 8021d58:	4629      	mov	r1, r5
 8021d5a:	4630      	mov	r0, r6
 8021d5c:	f7fd fe62 	bl	801fa24 <__swsetup_r>
 8021d60:	b1c0      	cbz	r0, 8021d94 <_vfiprintf_r+0x78>
 8021d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021d64:	07dc      	lsls	r4, r3, #31
 8021d66:	d50e      	bpl.n	8021d86 <_vfiprintf_r+0x6a>
 8021d68:	f04f 30ff 	mov.w	r0, #4294967295
 8021d6c:	b01d      	add	sp, #116	; 0x74
 8021d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d72:	4b7b      	ldr	r3, [pc, #492]	; (8021f60 <_vfiprintf_r+0x244>)
 8021d74:	429d      	cmp	r5, r3
 8021d76:	d101      	bne.n	8021d7c <_vfiprintf_r+0x60>
 8021d78:	68b5      	ldr	r5, [r6, #8]
 8021d7a:	e7df      	b.n	8021d3c <_vfiprintf_r+0x20>
 8021d7c:	4b79      	ldr	r3, [pc, #484]	; (8021f64 <_vfiprintf_r+0x248>)
 8021d7e:	429d      	cmp	r5, r3
 8021d80:	bf08      	it	eq
 8021d82:	68f5      	ldreq	r5, [r6, #12]
 8021d84:	e7da      	b.n	8021d3c <_vfiprintf_r+0x20>
 8021d86:	89ab      	ldrh	r3, [r5, #12]
 8021d88:	0598      	lsls	r0, r3, #22
 8021d8a:	d4ed      	bmi.n	8021d68 <_vfiprintf_r+0x4c>
 8021d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021d8e:	f7fc f863 	bl	801de58 <__retarget_lock_release_recursive>
 8021d92:	e7e9      	b.n	8021d68 <_vfiprintf_r+0x4c>
 8021d94:	2300      	movs	r3, #0
 8021d96:	9309      	str	r3, [sp, #36]	; 0x24
 8021d98:	2320      	movs	r3, #32
 8021d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8021da2:	2330      	movs	r3, #48	; 0x30
 8021da4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021f68 <_vfiprintf_r+0x24c>
 8021da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021dac:	f04f 0901 	mov.w	r9, #1
 8021db0:	4623      	mov	r3, r4
 8021db2:	469a      	mov	sl, r3
 8021db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021db8:	b10a      	cbz	r2, 8021dbe <_vfiprintf_r+0xa2>
 8021dba:	2a25      	cmp	r2, #37	; 0x25
 8021dbc:	d1f9      	bne.n	8021db2 <_vfiprintf_r+0x96>
 8021dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8021dc2:	d00b      	beq.n	8021ddc <_vfiprintf_r+0xc0>
 8021dc4:	465b      	mov	r3, fp
 8021dc6:	4622      	mov	r2, r4
 8021dc8:	4629      	mov	r1, r5
 8021dca:	4630      	mov	r0, r6
 8021dcc:	f7ff ff93 	bl	8021cf6 <__sfputs_r>
 8021dd0:	3001      	adds	r0, #1
 8021dd2:	f000 80aa 	beq.w	8021f2a <_vfiprintf_r+0x20e>
 8021dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021dd8:	445a      	add	r2, fp
 8021dda:	9209      	str	r2, [sp, #36]	; 0x24
 8021ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	f000 80a2 	beq.w	8021f2a <_vfiprintf_r+0x20e>
 8021de6:	2300      	movs	r3, #0
 8021de8:	f04f 32ff 	mov.w	r2, #4294967295
 8021dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021df0:	f10a 0a01 	add.w	sl, sl, #1
 8021df4:	9304      	str	r3, [sp, #16]
 8021df6:	9307      	str	r3, [sp, #28]
 8021df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8021dfe:	4654      	mov	r4, sl
 8021e00:	2205      	movs	r2, #5
 8021e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021e06:	4858      	ldr	r0, [pc, #352]	; (8021f68 <_vfiprintf_r+0x24c>)
 8021e08:	f7de fa12 	bl	8000230 <memchr>
 8021e0c:	9a04      	ldr	r2, [sp, #16]
 8021e0e:	b9d8      	cbnz	r0, 8021e48 <_vfiprintf_r+0x12c>
 8021e10:	06d1      	lsls	r1, r2, #27
 8021e12:	bf44      	itt	mi
 8021e14:	2320      	movmi	r3, #32
 8021e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021e1a:	0713      	lsls	r3, r2, #28
 8021e1c:	bf44      	itt	mi
 8021e1e:	232b      	movmi	r3, #43	; 0x2b
 8021e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021e24:	f89a 3000 	ldrb.w	r3, [sl]
 8021e28:	2b2a      	cmp	r3, #42	; 0x2a
 8021e2a:	d015      	beq.n	8021e58 <_vfiprintf_r+0x13c>
 8021e2c:	9a07      	ldr	r2, [sp, #28]
 8021e2e:	4654      	mov	r4, sl
 8021e30:	2000      	movs	r0, #0
 8021e32:	f04f 0c0a 	mov.w	ip, #10
 8021e36:	4621      	mov	r1, r4
 8021e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021e3c:	3b30      	subs	r3, #48	; 0x30
 8021e3e:	2b09      	cmp	r3, #9
 8021e40:	d94e      	bls.n	8021ee0 <_vfiprintf_r+0x1c4>
 8021e42:	b1b0      	cbz	r0, 8021e72 <_vfiprintf_r+0x156>
 8021e44:	9207      	str	r2, [sp, #28]
 8021e46:	e014      	b.n	8021e72 <_vfiprintf_r+0x156>
 8021e48:	eba0 0308 	sub.w	r3, r0, r8
 8021e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8021e50:	4313      	orrs	r3, r2
 8021e52:	9304      	str	r3, [sp, #16]
 8021e54:	46a2      	mov	sl, r4
 8021e56:	e7d2      	b.n	8021dfe <_vfiprintf_r+0xe2>
 8021e58:	9b03      	ldr	r3, [sp, #12]
 8021e5a:	1d19      	adds	r1, r3, #4
 8021e5c:	681b      	ldr	r3, [r3, #0]
 8021e5e:	9103      	str	r1, [sp, #12]
 8021e60:	2b00      	cmp	r3, #0
 8021e62:	bfbb      	ittet	lt
 8021e64:	425b      	neglt	r3, r3
 8021e66:	f042 0202 	orrlt.w	r2, r2, #2
 8021e6a:	9307      	strge	r3, [sp, #28]
 8021e6c:	9307      	strlt	r3, [sp, #28]
 8021e6e:	bfb8      	it	lt
 8021e70:	9204      	strlt	r2, [sp, #16]
 8021e72:	7823      	ldrb	r3, [r4, #0]
 8021e74:	2b2e      	cmp	r3, #46	; 0x2e
 8021e76:	d10c      	bne.n	8021e92 <_vfiprintf_r+0x176>
 8021e78:	7863      	ldrb	r3, [r4, #1]
 8021e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8021e7c:	d135      	bne.n	8021eea <_vfiprintf_r+0x1ce>
 8021e7e:	9b03      	ldr	r3, [sp, #12]
 8021e80:	1d1a      	adds	r2, r3, #4
 8021e82:	681b      	ldr	r3, [r3, #0]
 8021e84:	9203      	str	r2, [sp, #12]
 8021e86:	2b00      	cmp	r3, #0
 8021e88:	bfb8      	it	lt
 8021e8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8021e8e:	3402      	adds	r4, #2
 8021e90:	9305      	str	r3, [sp, #20]
 8021e92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021f78 <_vfiprintf_r+0x25c>
 8021e96:	7821      	ldrb	r1, [r4, #0]
 8021e98:	2203      	movs	r2, #3
 8021e9a:	4650      	mov	r0, sl
 8021e9c:	f7de f9c8 	bl	8000230 <memchr>
 8021ea0:	b140      	cbz	r0, 8021eb4 <_vfiprintf_r+0x198>
 8021ea2:	2340      	movs	r3, #64	; 0x40
 8021ea4:	eba0 000a 	sub.w	r0, r0, sl
 8021ea8:	fa03 f000 	lsl.w	r0, r3, r0
 8021eac:	9b04      	ldr	r3, [sp, #16]
 8021eae:	4303      	orrs	r3, r0
 8021eb0:	3401      	adds	r4, #1
 8021eb2:	9304      	str	r3, [sp, #16]
 8021eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021eb8:	482c      	ldr	r0, [pc, #176]	; (8021f6c <_vfiprintf_r+0x250>)
 8021eba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021ebe:	2206      	movs	r2, #6
 8021ec0:	f7de f9b6 	bl	8000230 <memchr>
 8021ec4:	2800      	cmp	r0, #0
 8021ec6:	d03f      	beq.n	8021f48 <_vfiprintf_r+0x22c>
 8021ec8:	4b29      	ldr	r3, [pc, #164]	; (8021f70 <_vfiprintf_r+0x254>)
 8021eca:	bb1b      	cbnz	r3, 8021f14 <_vfiprintf_r+0x1f8>
 8021ecc:	9b03      	ldr	r3, [sp, #12]
 8021ece:	3307      	adds	r3, #7
 8021ed0:	f023 0307 	bic.w	r3, r3, #7
 8021ed4:	3308      	adds	r3, #8
 8021ed6:	9303      	str	r3, [sp, #12]
 8021ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021eda:	443b      	add	r3, r7
 8021edc:	9309      	str	r3, [sp, #36]	; 0x24
 8021ede:	e767      	b.n	8021db0 <_vfiprintf_r+0x94>
 8021ee0:	fb0c 3202 	mla	r2, ip, r2, r3
 8021ee4:	460c      	mov	r4, r1
 8021ee6:	2001      	movs	r0, #1
 8021ee8:	e7a5      	b.n	8021e36 <_vfiprintf_r+0x11a>
 8021eea:	2300      	movs	r3, #0
 8021eec:	3401      	adds	r4, #1
 8021eee:	9305      	str	r3, [sp, #20]
 8021ef0:	4619      	mov	r1, r3
 8021ef2:	f04f 0c0a 	mov.w	ip, #10
 8021ef6:	4620      	mov	r0, r4
 8021ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021efc:	3a30      	subs	r2, #48	; 0x30
 8021efe:	2a09      	cmp	r2, #9
 8021f00:	d903      	bls.n	8021f0a <_vfiprintf_r+0x1ee>
 8021f02:	2b00      	cmp	r3, #0
 8021f04:	d0c5      	beq.n	8021e92 <_vfiprintf_r+0x176>
 8021f06:	9105      	str	r1, [sp, #20]
 8021f08:	e7c3      	b.n	8021e92 <_vfiprintf_r+0x176>
 8021f0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8021f0e:	4604      	mov	r4, r0
 8021f10:	2301      	movs	r3, #1
 8021f12:	e7f0      	b.n	8021ef6 <_vfiprintf_r+0x1da>
 8021f14:	ab03      	add	r3, sp, #12
 8021f16:	9300      	str	r3, [sp, #0]
 8021f18:	462a      	mov	r2, r5
 8021f1a:	4b16      	ldr	r3, [pc, #88]	; (8021f74 <_vfiprintf_r+0x258>)
 8021f1c:	a904      	add	r1, sp, #16
 8021f1e:	4630      	mov	r0, r6
 8021f20:	f7fc f99a 	bl	801e258 <_printf_float>
 8021f24:	4607      	mov	r7, r0
 8021f26:	1c78      	adds	r0, r7, #1
 8021f28:	d1d6      	bne.n	8021ed8 <_vfiprintf_r+0x1bc>
 8021f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021f2c:	07d9      	lsls	r1, r3, #31
 8021f2e:	d405      	bmi.n	8021f3c <_vfiprintf_r+0x220>
 8021f30:	89ab      	ldrh	r3, [r5, #12]
 8021f32:	059a      	lsls	r2, r3, #22
 8021f34:	d402      	bmi.n	8021f3c <_vfiprintf_r+0x220>
 8021f36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021f38:	f7fb ff8e 	bl	801de58 <__retarget_lock_release_recursive>
 8021f3c:	89ab      	ldrh	r3, [r5, #12]
 8021f3e:	065b      	lsls	r3, r3, #25
 8021f40:	f53f af12 	bmi.w	8021d68 <_vfiprintf_r+0x4c>
 8021f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021f46:	e711      	b.n	8021d6c <_vfiprintf_r+0x50>
 8021f48:	ab03      	add	r3, sp, #12
 8021f4a:	9300      	str	r3, [sp, #0]
 8021f4c:	462a      	mov	r2, r5
 8021f4e:	4b09      	ldr	r3, [pc, #36]	; (8021f74 <_vfiprintf_r+0x258>)
 8021f50:	a904      	add	r1, sp, #16
 8021f52:	4630      	mov	r0, r6
 8021f54:	f7fc fc24 	bl	801e7a0 <_printf_i>
 8021f58:	e7e4      	b.n	8021f24 <_vfiprintf_r+0x208>
 8021f5a:	bf00      	nop
 8021f5c:	08022d90 	.word	0x08022d90
 8021f60:	08022db0 	.word	0x08022db0
 8021f64:	08022d70 	.word	0x08022d70
 8021f68:	080230ec 	.word	0x080230ec
 8021f6c:	080230f6 	.word	0x080230f6
 8021f70:	0801e259 	.word	0x0801e259
 8021f74:	08021cf7 	.word	0x08021cf7
 8021f78:	080230f2 	.word	0x080230f2

08021f7c <abort>:
 8021f7c:	b508      	push	{r3, lr}
 8021f7e:	2006      	movs	r0, #6
 8021f80:	f000 f834 	bl	8021fec <raise>
 8021f84:	2001      	movs	r0, #1
 8021f86:	f7fb fcf5 	bl	801d974 <_exit>

08021f8a <_malloc_usable_size_r>:
 8021f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021f8e:	1f18      	subs	r0, r3, #4
 8021f90:	2b00      	cmp	r3, #0
 8021f92:	bfbc      	itt	lt
 8021f94:	580b      	ldrlt	r3, [r1, r0]
 8021f96:	18c0      	addlt	r0, r0, r3
 8021f98:	4770      	bx	lr

08021f9a <_raise_r>:
 8021f9a:	291f      	cmp	r1, #31
 8021f9c:	b538      	push	{r3, r4, r5, lr}
 8021f9e:	4604      	mov	r4, r0
 8021fa0:	460d      	mov	r5, r1
 8021fa2:	d904      	bls.n	8021fae <_raise_r+0x14>
 8021fa4:	2316      	movs	r3, #22
 8021fa6:	6003      	str	r3, [r0, #0]
 8021fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8021fac:	bd38      	pop	{r3, r4, r5, pc}
 8021fae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021fb0:	b112      	cbz	r2, 8021fb8 <_raise_r+0x1e>
 8021fb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021fb6:	b94b      	cbnz	r3, 8021fcc <_raise_r+0x32>
 8021fb8:	4620      	mov	r0, r4
 8021fba:	f000 f831 	bl	8022020 <_getpid_r>
 8021fbe:	462a      	mov	r2, r5
 8021fc0:	4601      	mov	r1, r0
 8021fc2:	4620      	mov	r0, r4
 8021fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021fc8:	f000 b818 	b.w	8021ffc <_kill_r>
 8021fcc:	2b01      	cmp	r3, #1
 8021fce:	d00a      	beq.n	8021fe6 <_raise_r+0x4c>
 8021fd0:	1c59      	adds	r1, r3, #1
 8021fd2:	d103      	bne.n	8021fdc <_raise_r+0x42>
 8021fd4:	2316      	movs	r3, #22
 8021fd6:	6003      	str	r3, [r0, #0]
 8021fd8:	2001      	movs	r0, #1
 8021fda:	e7e7      	b.n	8021fac <_raise_r+0x12>
 8021fdc:	2400      	movs	r4, #0
 8021fde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021fe2:	4628      	mov	r0, r5
 8021fe4:	4798      	blx	r3
 8021fe6:	2000      	movs	r0, #0
 8021fe8:	e7e0      	b.n	8021fac <_raise_r+0x12>
	...

08021fec <raise>:
 8021fec:	4b02      	ldr	r3, [pc, #8]	; (8021ff8 <raise+0xc>)
 8021fee:	4601      	mov	r1, r0
 8021ff0:	6818      	ldr	r0, [r3, #0]
 8021ff2:	f7ff bfd2 	b.w	8021f9a <_raise_r>
 8021ff6:	bf00      	nop
 8021ff8:	2000008c 	.word	0x2000008c

08021ffc <_kill_r>:
 8021ffc:	b538      	push	{r3, r4, r5, lr}
 8021ffe:	4d07      	ldr	r5, [pc, #28]	; (802201c <_kill_r+0x20>)
 8022000:	2300      	movs	r3, #0
 8022002:	4604      	mov	r4, r0
 8022004:	4608      	mov	r0, r1
 8022006:	4611      	mov	r1, r2
 8022008:	602b      	str	r3, [r5, #0]
 802200a:	f7fb fca3 	bl	801d954 <_kill>
 802200e:	1c43      	adds	r3, r0, #1
 8022010:	d102      	bne.n	8022018 <_kill_r+0x1c>
 8022012:	682b      	ldr	r3, [r5, #0]
 8022014:	b103      	cbz	r3, 8022018 <_kill_r+0x1c>
 8022016:	6023      	str	r3, [r4, #0]
 8022018:	bd38      	pop	{r3, r4, r5, pc}
 802201a:	bf00      	nop
 802201c:	20019220 	.word	0x20019220

08022020 <_getpid_r>:
 8022020:	f7fb bc90 	b.w	801d944 <_getpid>

08022024 <_init>:
 8022024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022026:	bf00      	nop
 8022028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802202a:	bc08      	pop	{r3}
 802202c:	469e      	mov	lr, r3
 802202e:	4770      	bx	lr

08022030 <_fini>:
 8022030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022032:	bf00      	nop
 8022034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022036:	bc08      	pop	{r3}
 8022038:	469e      	mov	lr, r3
 802203a:	4770      	bx	lr
