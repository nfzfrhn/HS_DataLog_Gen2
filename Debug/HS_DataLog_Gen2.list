
HS_DataLog_Gen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021ef4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a4  080220b8  080220b8  000320b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802315c  0802315c  0004048c  2**0
                  CONTENTS
  4 .ARM          00000000  0802315c  0802315c  0004048c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802315c  0802315c  0004048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802315c  0802315c  0003315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023160  08023160  00033160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000048c  20000000  08023164  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0004048c  2**0
                  CONTENTS
 10 .bss          0001cfe0  20000490  20000490  00040490  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2001d470  2001d470  00040490  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004048c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00079ae5  00000000  00000000  000404bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ad72  00000000  00000000  000b9fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003e10  00000000  00000000  000c4d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003a20  00000000  00000000  000c8b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000486f9  00000000  00000000  000cc548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00055be0  00000000  00000000  00114c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e128  00000000  00000000  0016a821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002d8949  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0001192c  00000000  00000000  002d899c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000490 	.word	0x20000490
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0802209c 	.word	0x0802209c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000494 	.word	0x20000494
 80001fc:	0802209c 	.word	0x0802209c

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <HSD_JSON_set_allocation_functions>:
* @param  malloc_function: malloc() implementation
* @param  free_function: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_set_allocation_functions(void * (*malloc_function)(size_t), void (*free_function)(void *))
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  json_set_allocation_functions(malloc_function, free_function);
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f01d ff7b 	bl	801ec4c <json_set_allocation_functions>
  JSON_free_function = free_function;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HSD_JSON_set_allocation_functions+0x24>)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	6013      	str	r3, [r2, #0]
  return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200004ac 	.word	0x200004ac

08000d6c <HSD_JSON_free>:

int32_t HSD_JSON_free(void * mem)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  JSON_free_function(mem);
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <HSD_JSON_free+0x1c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	4798      	blx	r3
  return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200004ac 	.word	0x200004ac

08000d8c <HSD_JSON_serialize_Device>:
* @param  Device: COM_Device_t struct instance to be serialized 
* @param  SerializedJSON: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_serialize_Device(COM_Device_t *Device, char **SerializedJSON, uint8_t pretty)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	4613      	mov	r3, r2
 8000d98:	71fb      	strb	r3, [r7, #7]
  return get_JSON_from_Device(Device, SerializedJSON, pretty);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 f875 	bl	8000e90 <get_JSON_from_Device>
 8000da6:	4603      	mov	r3, r0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HSD_JSON_serialize_DeviceInfo>:

int32_t HSD_JSON_serialize_DeviceInfo(COM_DeviceDescriptor_t *DeviceInfo, char **SerializedJSON)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  return get_JSON_from_DeviceInfo(DeviceInfo, SerializedJSON);
 8000dba:	6839      	ldr	r1, [r7, #0]
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f8e1 	bl	8000f84 <get_JSON_from_DeviceInfo>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HSD_JSON_serialize_SensorDescriptor>:
{
  return get_JSON_from_Sensor(Sensor, SerializedJSON);
}

int32_t HSD_JSON_serialize_SensorDescriptor(COM_SensorDescriptor_t *SensorDescriptor, char **SerializedJSON)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  return get_JSON_from_SensorDescriptor(SensorDescriptor, SerializedJSON);
 8000dd6:	6839      	ldr	r1, [r7, #0]
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f8f4 	bl	8000fc6 <get_JSON_from_SensorDescriptor>
 8000dde:	4603      	mov	r3, r0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HSD_JSON_serialize_SensorStatus>:

int32_t HSD_JSON_serialize_SensorStatus(COM_SensorStatus_t *SensorStatus, char **SerializedJSON)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  return get_JSON_from_SensorStatus(SensorStatus, SerializedJSON);
 8000df2:	6839      	ldr	r1, [r7, #0]
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f907 	bl	8001008 <get_JSON_from_SensorStatus>
 8000dfa:	4603      	mov	r3, r0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HSD_JSON_serialize_SubSensorDescriptor>:

int32_t HSD_JSON_serialize_SubSensorDescriptor(COM_SubSensorDescriptor_t *SubSensorDescriptor, char **SerializedJSON)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  return get_JSON_from_SubSensorDescriptor(SubSensorDescriptor, SerializedJSON);
 8000e0e:	6839      	ldr	r1, [r7, #0]
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f91a 	bl	800104a <get_JSON_from_SubSensorDescriptor>
 8000e16:	4603      	mov	r3, r0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HSD_JSON_serialize_SubSensorStatus>:

int32_t HSD_JSON_serialize_SubSensorStatus(COM_SubSensorStatus_t *SubSensorStatus, char **SerializedJSON)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  return get_JSON_from_SubSensorStatus(SubSensorStatus, SerializedJSON);
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f92d 	bl	800108c <get_JSON_from_SubSensorStatus>
 8000e32:	4603      	mov	r3, r0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HSD_JSON_parse_Device>:

int32_t HSD_JSON_parse_Device(char *SerializedJSON, COM_Device_t *Device)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  return parse_Device_from_JSON(SerializedJSON, Device);
 8000e46:	6839      	ldr	r1, [r7, #0]
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 f941 	bl	80010d0 <parse_Device_from_JSON>
 8000e4e:	4603      	mov	r3, r0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HSD_JSON_parse_Command>:

int32_t HSD_JSON_parse_Command(char *SerializedJSON, COM_Command_t *Command)
{ 
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  return parse_Command_from_JSON(SerializedJSON, Command);
 8000e62:	6839      	ldr	r1, [r7, #0]
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f987 	bl	8001178 <parse_Command_from_JSON>
 8000e6a:	4603      	mov	r3, r0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HSD_JSON_parse_Status>:

int32_t HSD_JSON_parse_Status(char *SerializedJSON, COM_SensorStatus_t *SensorStatus)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  return parse_Status_from_JSON(SerializedJSON, SensorStatus);
 8000e7e:	6839      	ldr	r1, [r7, #0]
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 fa75 	bl	8001370 <parse_Status_from_JSON>
 8000e86:	4603      	mov	r3, r0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <get_JSON_from_Device>:


/* Private function ----------------------------------------------------------*/
static int32_t get_JSON_from_Device(COM_Device_t *device, char **serialized_string, uint8_t pretty)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	71fb      	strb	r3, [r7, #7]
  JSON_Object *JSON_Device;
  JSON_Array *JSON_SensorArray;
  uint32_t size;
  uint32_t i;
  
  tempJSON = json_value_init_object();
 8000e9e:	f01d fb2d 	bl	801e4fc <json_value_init_object>
 8000ea2:	61f8      	str	r0, [r7, #28]
  JSON_Device = json_value_get_object(tempJSON);
 8000ea4:	69f8      	ldr	r0, [r7, #28]
 8000ea6:	f01d fa96 	bl	801e3d6 <json_value_get_object>
 8000eaa:	61b8      	str	r0, [r7, #24]
  
  json_object_dotset_string(JSON_Device, "device.deviceInfo.serialNumber", device->deviceDescriptor.serialNumber);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4930      	ldr	r1, [pc, #192]	; (8000f74 <get_JSON_from_Device+0xe4>)
 8000eb2:	69b8      	ldr	r0, [r7, #24]
 8000eb4:	f01d fe5c 	bl	801eb70 <json_object_dotset_string>
  json_object_dotset_string(JSON_Device, "device.deviceInfo.alias", device->deviceDescriptor.alias);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3315      	adds	r3, #21
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	492e      	ldr	r1, [pc, #184]	; (8000f78 <get_JSON_from_Device+0xe8>)
 8000ec0:	69b8      	ldr	r0, [r7, #24]
 8000ec2:	f01d fe55 	bl	801eb70 <json_object_dotset_string>
  json_object_dotset_number(JSON_Device, "device.deviceInfo.nSensor", device->deviceDescriptor.nSensor);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fb42 	bl	8000554 <__aeabi_ui2d>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	ec43 2b10 	vmov	d0, r2, r3
 8000ed8:	4928      	ldr	r1, [pc, #160]	; (8000f7c <get_JSON_from_Device+0xec>)
 8000eda:	69b8      	ldr	r0, [r7, #24]
 8000edc:	f01d fe6c 	bl	801ebb8 <json_object_dotset_number>
  
  json_object_dotset_value(JSON_Device, "device.sensor", json_value_init_array());
 8000ee0:	f01d fb38 	bl	801e554 <json_value_init_array>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4925      	ldr	r1, [pc, #148]	; (8000f80 <get_JSON_from_Device+0xf0>)
 8000eea:	69b8      	ldr	r0, [r7, #24]
 8000eec:	f01d fdb3 	bl	801ea56 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_Device, "device.sensor");
 8000ef0:	4923      	ldr	r1, [pc, #140]	; (8000f80 <get_JSON_from_Device+0xf0>)
 8000ef2:	69b8      	ldr	r0, [r7, #24]
 8000ef4:	f01d f9a4 	bl	801e240 <json_object_dotget_array>
 8000ef8:	6178      	str	r0, [r7, #20]
  
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
 8000efe:	e013      	b.n	8000f28 <get_JSON_from_Device+0x98>
  {        
    tempJSON1 = json_value_init_object();  
 8000f00:	f01d fafc 	bl	801e4fc <json_value_init_object>
 8000f04:	6138      	str	r0, [r7, #16]
    create_JSON_Sensor(device->sensors[i], tempJSON1);    
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	330a      	adds	r3, #10
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	6939      	ldr	r1, [r7, #16]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fb9d 	bl	8001654 <create_JSON_Sensor>
    json_array_append_value(JSON_SensorArray,tempJSON1);
 8000f1a:	6939      	ldr	r1, [r7, #16]
 8000f1c:	6978      	ldr	r0, [r7, #20]
 8000f1e:	f01d fd05 	bl	801e92c <json_array_append_value>
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	3301      	adds	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	6a3a      	ldr	r2, [r7, #32]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d3e6      	bcc.n	8000f00 <get_JSON_from_Device+0x70>
  }  
  
  /* convert to a json string and write to file */
  if (pretty == 1)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d10a      	bne.n	8000f4e <get_JSON_from_Device+0xbe>
  {
    *serialized_string = json_serialize_to_string_pretty(tempJSON);
 8000f38:	69f8      	ldr	r0, [r7, #28]
 8000f3a:	f01d fcb7 	bl	801e8ac <json_serialize_to_string_pretty>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	601a      	str	r2, [r3, #0]
    size = json_serialization_size_pretty(tempJSON);    
 8000f44:	69f8      	ldr	r0, [r7, #28]
 8000f46:	f01d fc6d 	bl	801e824 <json_serialization_size_pretty>
 8000f4a:	6278      	str	r0, [r7, #36]	; 0x24
 8000f4c:	e009      	b.n	8000f62 <get_JSON_from_Device+0xd2>
  }
  else
  {
    *serialized_string = json_serialize_to_string(tempJSON);
 8000f4e:	69f8      	ldr	r0, [r7, #28]
 8000f50:	f01d fc36 	bl	801e7c0 <json_serialize_to_string>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	601a      	str	r2, [r3, #0]
    size = json_serialization_size(tempJSON);    
 8000f5a:	69f8      	ldr	r0, [r7, #28]
 8000f5c:	f01d fbec 	bl	801e738 <json_serialization_size>
 8000f60:	6278      	str	r0, [r7, #36]	; 0x24
  }
  
  json_value_free(tempJSON);
 8000f62:	69f8      	ldr	r0, [r7, #28]
 8000f64:	f01d fa9c 	bl	801e4a0 <json_value_free>
  
  return size;    
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	080220b8 	.word	0x080220b8
 8000f78:	080220d8 	.word	0x080220d8
 8000f7c:	080220f0 	.word	0x080220f0
 8000f80:	0802210c 	.word	0x0802210c

08000f84 <get_JSON_from_DeviceInfo>:


static int32_t get_JSON_from_DeviceInfo(COM_DeviceDescriptor_t *device_descriptor, char **serialized_string)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 8000f92:	f01d fab3 	bl	801e4fc <json_value_init_object>
 8000f96:	60b8      	str	r0, [r7, #8]
  create_JSON_DeviceInfo(device_descriptor, tempJSON);
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 fb2c 	bl	80015f8 <create_JSON_DeviceInfo>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	f01d fc0d 	bl	801e7c0 <json_serialize_to_string>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f01d fbc3 	bl	801e738 <json_serialization_size>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 8000fb6:	68b8      	ldr	r0, [r7, #8]
 8000fb8:	f01d fa72 	bl	801e4a0 <json_value_free>
  
  return size;    
 8000fbc:	68fb      	ldr	r3, [r7, #12]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <get_JSON_from_SensorDescriptor>:
  return size;     
}


static int32_t get_JSON_from_SensorDescriptor(COM_SensorDescriptor_t *sensor_descriptor, char **serialized_string)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 8000fd4:	f01d fa92 	bl	801e4fc <json_value_init_object>
 8000fd8:	60b8      	str	r0, [r7, #8]
  create_JSON_SensorDescriptor(sensor_descriptor, tempJSON);
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 fbdd 	bl	800179c <create_JSON_SensorDescriptor>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 8000fe2:	68b8      	ldr	r0, [r7, #8]
 8000fe4:	f01d fbec 	bl	801e7c0 <json_serialize_to_string>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 8000fee:	68b8      	ldr	r0, [r7, #8]
 8000ff0:	f01d fba2 	bl	801e738 <json_serialization_size>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 8000ff8:	68b8      	ldr	r0, [r7, #8]
 8000ffa:	f01d fa51 	bl	801e4a0 <json_value_free>
  
  return size;    
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <get_JSON_from_SensorStatus>:


static int32_t get_JSON_from_SensorStatus(COM_SensorStatus_t *sensor_status, char **serialized_string)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 8001016:	f01d fa71 	bl	801e4fc <json_value_init_object>
 800101a:	60b8      	str	r0, [r7, #8]
  create_JSON_SensorStatus(sensor_status, tempJSON);
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 fcb4 	bl	800198c <create_JSON_SensorStatus>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 8001024:	68b8      	ldr	r0, [r7, #8]
 8001026:	f01d fbcb 	bl	801e7c0 <json_serialize_to_string>
 800102a:	4602      	mov	r2, r0
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 8001030:	68b8      	ldr	r0, [r7, #8]
 8001032:	f01d fb81 	bl	801e738 <json_serialization_size>
 8001036:	4603      	mov	r3, r0
 8001038:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 800103a:	68b8      	ldr	r0, [r7, #8]
 800103c:	f01d fa30 	bl	801e4a0 <json_value_free>
  
  return size;  
 8001040:	68fb      	ldr	r3, [r7, #12]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <get_JSON_from_SubSensorDescriptor>:


static int32_t get_JSON_from_SubSensorDescriptor(COM_SubSensorDescriptor_t *sub_sensor_descriptor, char **serialized_string)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 8001058:	f01d fa50 	bl	801e4fc <json_value_init_object>
 800105c:	60b8      	str	r0, [r7, #8]
  create_JSON_SubSensorDescriptor(sub_sensor_descriptor, tempJSON);
 800105e:	68b9      	ldr	r1, [r7, #8]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fd13 	bl	8001a8c <create_JSON_SubSensorDescriptor>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 8001066:	68b8      	ldr	r0, [r7, #8]
 8001068:	f01d fbaa 	bl	801e7c0 <json_serialize_to_string>
 800106c:	4602      	mov	r2, r0
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 8001072:	68b8      	ldr	r0, [r7, #8]
 8001074:	f01d fb60 	bl	801e738 <json_serialization_size>
 8001078:	4603      	mov	r3, r0
 800107a:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f01d fa0f 	bl	801e4a0 <json_value_free>
  
  return size;  
 8001082:	68fb      	ldr	r3, [r7, #12]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <get_JSON_from_SubSensorStatus>:


static int32_t get_JSON_from_SubSensorStatus(COM_SubSensorStatus_t *sub_sensor_status, char **serialized_string)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  int32_t size = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  
  JSON_Value *tempJSON = json_value_init_object();
 800109a:	f01d fa2f 	bl	801e4fc <json_value_init_object>
 800109e:	60b8      	str	r0, [r7, #8]
  create_JSON_SubSensorStatus(sub_sensor_status, tempJSON);
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fdbc 	bl	8001c20 <create_JSON_SubSensorStatus>
  
  /* convert to a json string and write as string */
  *serialized_string = json_serialize_to_string(tempJSON);
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f01d fb89 	bl	801e7c0 <json_serialize_to_string>
 80010ae:	4602      	mov	r2, r0
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	601a      	str	r2, [r3, #0]
  size = json_serialization_size(tempJSON); 
 80010b4:	68b8      	ldr	r0, [r7, #8]
 80010b6:	f01d fb3f 	bl	801e738 <json_serialization_size>
 80010ba:	4603      	mov	r3, r0
 80010bc:	60fb      	str	r3, [r7, #12]
  
  json_value_free(tempJSON); 
 80010be:	68b8      	ldr	r0, [r7, #8]
 80010c0:	f01d f9ee 	bl	801e4a0 <json_value_free>
  
  return size;
 80010c4:	68fb      	ldr	r3, [r7, #12]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <parse_Device_from_JSON>:


static int32_t parse_Device_from_JSON(char *SerializedJSON, COM_Device_t* Device)
{  
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  char *StatusText;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f01d f81c 	bl	801e118 <json_parse_string>
 80010e0:	6238      	str	r0, [r7, #32]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80010e2:	6a38      	ldr	r0, [r7, #32]
 80010e4:	f01d f977 	bl	801e3d6 <json_value_get_object>
 80010e8:	61f8      	str	r0, [r7, #28]
  
  if (json_object_dothas_value(JSON_ParseHandler,"device.sensor"))
 80010ea:	4921      	ldr	r1, [pc, #132]	; (8001170 <parse_Device_from_JSON+0xa0>)
 80010ec:	69f8      	ldr	r0, [r7, #28]
 80010ee:	f01d f903 	bl	801e2f8 <json_object_dothas_value>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d033      	beq.n	8001160 <parse_Device_from_JSON+0x90>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "device.sensor");    
 80010f8:	491d      	ldr	r1, [pc, #116]	; (8001170 <parse_Device_from_JSON+0xa0>)
 80010fa:	69f8      	ldr	r0, [r7, #28]
 80010fc:	f01d f8a0 	bl	801e240 <json_object_dotget_array>
 8001100:	61b8      	str	r0, [r7, #24]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 8001102:	69b8      	ldr	r0, [r7, #24]
 8001104:	f01d f938 	bl	801e378 <json_array_get_count>
 8001108:	6178      	str	r0, [r7, #20]
    
    for (ii = 0; ii < size; ii++)
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
 800110e:	e023      	b.n	8001158 <parse_Device_from_JSON+0x88>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);
 8001110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001112:	69b8      	ldr	r0, [r7, #24]
 8001114:	f01d f91e 	bl	801e354 <json_array_get_object>
 8001118:	6138      	str	r0, [r7, #16]
      if (json_object_dothas_value(JSON_subSensorObj,"sensorStatus"))
 800111a:	4916      	ldr	r1, [pc, #88]	; (8001174 <parse_Device_from_JSON+0xa4>)
 800111c:	6938      	ldr	r0, [r7, #16]
 800111e:	f01d f8eb 	bl	801e2f8 <json_object_dothas_value>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d014      	beq.n	8001152 <parse_Device_from_JSON+0x82>
      {
        StatusText = json_serialize_to_string(json_object_get_value(JSON_subSensorObj,"sensorStatus"));
 8001128:	4912      	ldr	r1, [pc, #72]	; (8001174 <parse_Device_from_JSON+0xa4>)
 800112a:	6938      	ldr	r0, [r7, #16]
 800112c:	f01d f818 	bl	801e160 <json_object_get_value>
 8001130:	4603      	mov	r3, r0
 8001132:	4618      	mov	r0, r3
 8001134:	f01d fb44 	bl	801e7c0 <json_serialize_to_string>
 8001138:	60f8      	str	r0, [r7, #12]
        parse_Status_from_JSON(StatusText, &Device->sensors[ii]->sensorStatus);
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	330a      	adds	r3, #10
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800114a:	4619      	mov	r1, r3
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 f90f 	bl	8001370 <parse_Status_from_JSON>
    for (ii = 0; ii < size; ii++)
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	3301      	adds	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
 8001158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	429a      	cmp	r2, r3
 800115e:	d3d7      	bcc.n	8001110 <parse_Device_from_JSON+0x40>
      }
    }
  }
  
  json_value_free(tempJSON);
 8001160:	6a38      	ldr	r0, [r7, #32]
 8001162:	f01d f99d 	bl	801e4a0 <json_value_free>
  
  return 0;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3728      	adds	r7, #40	; 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	0802210c 	.word	0x0802210c
 8001174:	0802211c 	.word	0x0802211c

08001178 <parse_Command_from_JSON>:

static int32_t parse_Command_from_JSON(char *SerializedJSON, COM_Command_t * outCommand)
{  
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f01c ffc8 	bl	801e118 <json_parse_string>
 8001188:	60f8      	str	r0, [r7, #12]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f01d f923 	bl	801e3d6 <json_value_get_object>
 8001190:	60b8      	str	r0, [r7, #8]
  
  if (json_object_dothas_value(JSON_ParseHandler,"command"))
 8001192:	496b      	ldr	r1, [pc, #428]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 8001194:	68b8      	ldr	r0, [r7, #8]
 8001196:	f01d f8af 	bl	801e2f8 <json_object_dothas_value>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d043      	beq.n	8001228 <parse_Command_from_JSON+0xb0>
  {
    if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"GET") == 0)
 80011a0:	4967      	ldr	r1, [pc, #412]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 80011a2:	68b8      	ldr	r0, [r7, #8]
 80011a4:	f01d f822 	bl	801e1ec <json_object_dotget_string>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4966      	ldr	r1, [pc, #408]	; (8001344 <parse_Command_from_JSON+0x1cc>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f827 	bl	8000200 <strcmp>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <parse_Command_from_JSON+0x48>
    {
      outCommand->command = COM_COMMAND_GET;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2201      	movs	r2, #1
 80011bc:	701a      	strb	r2, [r3, #0]
 80011be:	e036      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"SET") == 0)
 80011c0:	495f      	ldr	r1, [pc, #380]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 80011c2:	68b8      	ldr	r0, [r7, #8]
 80011c4:	f01d f812 	bl	801e1ec <json_object_dotget_string>
 80011c8:	4603      	mov	r3, r0
 80011ca:	495f      	ldr	r1, [pc, #380]	; (8001348 <parse_Command_from_JSON+0x1d0>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f817 	bl	8000200 <strcmp>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d103      	bne.n	80011e0 <parse_Command_from_JSON+0x68>
    {
      outCommand->command = COM_COMMAND_SET;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e026      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"START") == 0)
 80011e0:	4957      	ldr	r1, [pc, #348]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 80011e2:	68b8      	ldr	r0, [r7, #8]
 80011e4:	f01d f802 	bl	801e1ec <json_object_dotget_string>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4958      	ldr	r1, [pc, #352]	; (800134c <parse_Command_from_JSON+0x1d4>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f807 	bl	8000200 <strcmp>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d103      	bne.n	8001200 <parse_Command_from_JSON+0x88>
    {
      outCommand->command = COM_COMMAND_START;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2202      	movs	r2, #2
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e016      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"command"),"STOP") == 0)
 8001200:	494f      	ldr	r1, [pc, #316]	; (8001340 <parse_Command_from_JSON+0x1c8>)
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	f01c fff2 	bl	801e1ec <json_object_dotget_string>
 8001208:	4603      	mov	r3, r0
 800120a:	4951      	ldr	r1, [pc, #324]	; (8001350 <parse_Command_from_JSON+0x1d8>)
 800120c:	4618      	mov	r0, r3
 800120e:	f7fe fff7 	bl	8000200 <strcmp>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d103      	bne.n	8001220 <parse_Command_from_JSON+0xa8>
    {
      outCommand->command = COM_COMMAND_STOP;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2203      	movs	r2, #3
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e006      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
    else
    {
      outCommand->command = COM_COMMAND_ERROR;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	22ff      	movs	r2, #255	; 0xff
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	e002      	b.n	800122e <parse_Command_from_JSON+0xb6>
    }
  }
  else
  {
    return COM_COMMAND_ERROR;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	e083      	b.n	8001336 <parse_Command_from_JSON+0x1be>
  }
  
  if (json_object_dothas_value(JSON_ParseHandler,"request"))
 800122e:	4949      	ldr	r1, [pc, #292]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 8001230:	68b8      	ldr	r0, [r7, #8]
 8001232:	f01d f861 	bl	801e2f8 <json_object_dothas_value>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d043      	beq.n	80012c4 <parse_Command_from_JSON+0x14c>
  {
    if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"device") == 0)
 800123c:	4945      	ldr	r1, [pc, #276]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 800123e:	68b8      	ldr	r0, [r7, #8]
 8001240:	f01c ffd4 	bl	801e1ec <json_object_dotget_string>
 8001244:	4603      	mov	r3, r0
 8001246:	4944      	ldr	r1, [pc, #272]	; (8001358 <parse_Command_from_JSON+0x1e0>)
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffd9 	bl	8000200 <strcmp>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <parse_Command_from_JSON+0xe4>
    {
      outCommand->request = COM_REQUEST_DEVICE;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	705a      	strb	r2, [r3, #1]
 800125a:	e036      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"deviceInfo") == 0)
 800125c:	493d      	ldr	r1, [pc, #244]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 800125e:	68b8      	ldr	r0, [r7, #8]
 8001260:	f01c ffc4 	bl	801e1ec <json_object_dotget_string>
 8001264:	4603      	mov	r3, r0
 8001266:	493d      	ldr	r1, [pc, #244]	; (800135c <parse_Command_from_JSON+0x1e4>)
 8001268:	4618      	mov	r0, r3
 800126a:	f7fe ffc9 	bl	8000200 <strcmp>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d103      	bne.n	800127c <parse_Command_from_JSON+0x104>
    {
      outCommand->request = COM_REQUEST_DEVICE_INFO;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2201      	movs	r2, #1
 8001278:	705a      	strb	r2, [r3, #1]
 800127a:	e026      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"descriptor") == 0)
 800127c:	4935      	ldr	r1, [pc, #212]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f01c ffb4 	bl	801e1ec <json_object_dotget_string>
 8001284:	4603      	mov	r3, r0
 8001286:	4936      	ldr	r1, [pc, #216]	; (8001360 <parse_Command_from_JSON+0x1e8>)
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ffb9 	bl	8000200 <strcmp>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d103      	bne.n	800129c <parse_Command_from_JSON+0x124>
    {
      outCommand->request = COM_REQUEST_DESCRIPTOR;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2202      	movs	r2, #2
 8001298:	705a      	strb	r2, [r3, #1]
 800129a:	e016      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
    else if (strcmp(json_object_dotget_string(JSON_ParseHandler,"request"),"status") == 0)
 800129c:	492d      	ldr	r1, [pc, #180]	; (8001354 <parse_Command_from_JSON+0x1dc>)
 800129e:	68b8      	ldr	r0, [r7, #8]
 80012a0:	f01c ffa4 	bl	801e1ec <json_object_dotget_string>
 80012a4:	4603      	mov	r3, r0
 80012a6:	492f      	ldr	r1, [pc, #188]	; (8001364 <parse_Command_from_JSON+0x1ec>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7fe ffa9 	bl	8000200 <strcmp>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d103      	bne.n	80012bc <parse_Command_from_JSON+0x144>
    {
      outCommand->request = COM_REQUEST_STATUS;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2203      	movs	r2, #3
 80012b8:	705a      	strb	r2, [r3, #1]
 80012ba:	e006      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
    else
    {
      outCommand->request = COM_COMMAND_ERROR;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	22ff      	movs	r2, #255	; 0xff
 80012c0:	705a      	strb	r2, [r3, #1]
 80012c2:	e002      	b.n	80012ca <parse_Command_from_JSON+0x152>
    }
  }
  else
  {
    outCommand->request = COM_COMMAND_ERROR;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	22ff      	movs	r2, #255	; 0xff
 80012c8:	705a      	strb	r2, [r3, #1]
  }  
  
  if (json_object_dothas_value(JSON_ParseHandler,"sensorId"))
 80012ca:	4927      	ldr	r1, [pc, #156]	; (8001368 <parse_Command_from_JSON+0x1f0>)
 80012cc:	68b8      	ldr	r0, [r7, #8]
 80012ce:	f01d f813 	bl	801e2f8 <json_object_dothas_value>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00e      	beq.n	80012f6 <parse_Command_from_JSON+0x17e>
  {
    outCommand->sensorId = (int8_t)json_object_dotget_number(JSON_ParseHandler, "sensorId");
 80012d8:	4923      	ldr	r1, [pc, #140]	; (8001368 <parse_Command_from_JSON+0x1f0>)
 80012da:	68b8      	ldr	r0, [r7, #8]
 80012dc:	f01c ff98 	bl	801e210 <json_object_dotget_number>
 80012e0:	ec53 2b10 	vmov	r2, r3, d0
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc5e 	bl	8000ba8 <__aeabi_d2iz>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b25a      	sxtb	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	709a      	strb	r2, [r3, #2]
 80012f4:	e002      	b.n	80012fc <parse_Command_from_JSON+0x184>
  }
  else
  {
    outCommand->sensorId = COM_COMMAND_ERROR;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	709a      	strb	r2, [r3, #2]
  }    
  
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorId"))
 80012fc:	491b      	ldr	r1, [pc, #108]	; (800136c <parse_Command_from_JSON+0x1f4>)
 80012fe:	68b8      	ldr	r0, [r7, #8]
 8001300:	f01c fffa 	bl	801e2f8 <json_object_dothas_value>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00e      	beq.n	8001328 <parse_Command_from_JSON+0x1b0>
  {
    outCommand->subSensorId = (int8_t)json_object_dotget_number(JSON_ParseHandler, "subSensorId");
 800130a:	4918      	ldr	r1, [pc, #96]	; (800136c <parse_Command_from_JSON+0x1f4>)
 800130c:	68b8      	ldr	r0, [r7, #8]
 800130e:	f01c ff7f 	bl	801e210 <json_object_dotget_number>
 8001312:	ec53 2b10 	vmov	r2, r3, d0
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fc45 	bl	8000ba8 <__aeabi_d2iz>
 800131e:	4603      	mov	r3, r0
 8001320:	b25a      	sxtb	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	70da      	strb	r2, [r3, #3]
 8001326:	e002      	b.n	800132e <parse_Command_from_JSON+0x1b6>
  }
  else
  {
    outCommand->subSensorId = COM_COMMAND_ERROR;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	22ff      	movs	r2, #255	; 0xff
 800132c:	70da      	strb	r2, [r3, #3]
  }   
  
  json_value_free(tempJSON);
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f01d f8b6 	bl	801e4a0 <json_value_free>
  
  return 0;  
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	0802212c 	.word	0x0802212c
 8001344:	08022134 	.word	0x08022134
 8001348:	08022138 	.word	0x08022138
 800134c:	0802213c 	.word	0x0802213c
 8001350:	08022144 	.word	0x08022144
 8001354:	0802214c 	.word	0x0802214c
 8001358:	08022154 	.word	0x08022154
 800135c:	0802215c 	.word	0x0802215c
 8001360:	08022168 	.word	0x08022168
 8001364:	08022174 	.word	0x08022174
 8001368:	0802217c 	.word	0x0802217c
 800136c:	08022188 	.word	0x08022188

08001370 <parse_Status_from_JSON>:
volatile  int8_t subid = -1;
static int32_t parse_Status_from_JSON(char *SerializedJSON, COM_SensorStatus_t * sensorStatus)
{  
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f01c fecc 	bl	801e118 <json_parse_string>
 8001380:	61b8      	str	r0, [r7, #24]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 8001382:	69b8      	ldr	r0, [r7, #24]
 8001384:	f01d f827 	bl	801e3d6 <json_value_get_object>
 8001388:	6178      	str	r0, [r7, #20]
  
  if (json_object_dothas_value(JSON_ParseHandler,"odr"))
 800138a:	4990      	ldr	r1, [pc, #576]	; (80015cc <parse_Status_from_JSON+0x25c>)
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f01c ffb3 	bl	801e2f8 <json_object_dothas_value>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00c      	beq.n	80013b2 <parse_Status_from_JSON+0x42>
  {
    sensorStatus->ODR = json_object_dotget_number(JSON_ParseHandler, "odr");
 8001398:	498c      	ldr	r1, [pc, #560]	; (80015cc <parse_Status_from_JSON+0x25c>)
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f01c ff38 	bl	801e210 <json_object_dotget_number>
 80013a0:	ec53 2b10 	vmov	r2, r3, d0
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fc46 	bl	8000c38 <__aeabi_d2f>
 80013ac:	4602      	mov	r2, r0
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	601a      	str	r2, [r3, #0]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"usbDataPacketSize"))
 80013b2:	4987      	ldr	r1, [pc, #540]	; (80015d0 <parse_Status_from_JSON+0x260>)
 80013b4:	6978      	ldr	r0, [r7, #20]
 80013b6:	f01c ff9f 	bl	801e2f8 <json_object_dothas_value>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00d      	beq.n	80013dc <parse_Status_from_JSON+0x6c>
  {
    sensorStatus->usbDataPacketSize = (uint16_t) json_object_dotget_number(JSON_ParseHandler, "usbDataPacketSize");
 80013c0:	4983      	ldr	r1, [pc, #524]	; (80015d0 <parse_Status_from_JSON+0x260>)
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f01c ff24 	bl	801e210 <json_object_dotget_number>
 80013c8:	ec53 2b10 	vmov	r2, r3, d0
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fc12 	bl	8000bf8 <__aeabi_d2uiz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	821a      	strh	r2, [r3, #16]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"sdWriteBufferSize"))
 80013dc:	497d      	ldr	r1, [pc, #500]	; (80015d4 <parse_Status_from_JSON+0x264>)
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f01c ff8a 	bl	801e2f8 <json_object_dothas_value>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00c      	beq.n	8001404 <parse_Status_from_JSON+0x94>
  {
    sensorStatus->sdWriteBufferSize = (uint32_t) json_object_dotget_number(JSON_ParseHandler, "sdWriteBufferSize");
 80013ea:	497a      	ldr	r1, [pc, #488]	; (80015d4 <parse_Status_from_JSON+0x264>)
 80013ec:	6978      	ldr	r0, [r7, #20]
 80013ee:	f01c ff0f 	bl	801e210 <json_object_dotget_number>
 80013f2:	ec53 2b10 	vmov	r2, r3, d0
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fbfd 	bl	8000bf8 <__aeabi_d2uiz>
 80013fe:	4602      	mov	r2, r0
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	615a      	str	r2, [r3, #20]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"comChannelNumber"))
 8001404:	4974      	ldr	r1, [pc, #464]	; (80015d8 <parse_Status_from_JSON+0x268>)
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f01c ff76 	bl	801e2f8 <json_object_dothas_value>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00d      	beq.n	800142e <parse_Status_from_JSON+0xbe>
  {
    sensorStatus->comChannelNumber = (int16_t) json_object_dotget_number(JSON_ParseHandler, "comChannelNumber");
 8001412:	4971      	ldr	r1, [pc, #452]	; (80015d8 <parse_Status_from_JSON+0x268>)
 8001414:	6978      	ldr	r0, [r7, #20]
 8001416:	f01c fefb 	bl	801e210 <json_object_dotget_number>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fbc1 	bl	8000ba8 <__aeabi_d2iz>
 8001426:	4603      	mov	r3, r0
 8001428:	b21a      	sxth	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	831a      	strh	r2, [r3, #24]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"samplesPerTs"))
 800142e:	496b      	ldr	r1, [pc, #428]	; (80015dc <parse_Status_from_JSON+0x26c>)
 8001430:	6978      	ldr	r0, [r7, #20]
 8001432:	f01c ff61 	bl	801e2f8 <json_object_dothas_value>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00d      	beq.n	8001458 <parse_Status_from_JSON+0xe8>
  {
    sensorStatus->samplesPerTimestamp = (uint16_t)json_object_dotget_number(JSON_ParseHandler, "samplesPerTs");
 800143c:	4967      	ldr	r1, [pc, #412]	; (80015dc <parse_Status_from_JSON+0x26c>)
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f01c fee6 	bl	801e210 <json_object_dotget_number>
 8001444:	ec53 2b10 	vmov	r2, r3, d0
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fbd4 	bl	8000bf8 <__aeabi_d2uiz>
 8001450:	4603      	mov	r3, r0
 8001452:	b29a      	uxth	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	819a      	strh	r2, [r3, #12]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"isActive"))
 8001458:	4961      	ldr	r1, [pc, #388]	; (80015e0 <parse_Status_from_JSON+0x270>)
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f01c ff4c 	bl	801e2f8 <json_object_dothas_value>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00d      	beq.n	8001482 <parse_Status_from_JSON+0x112>
  {
    if (json_object_dotget_boolean(JSON_ParseHandler,"isActive") == 1)
 8001466:	495e      	ldr	r1, [pc, #376]	; (80015e0 <parse_Status_from_JSON+0x270>)
 8001468:	6978      	ldr	r0, [r7, #20]
 800146a:	f01c fefb 	bl	801e264 <json_object_dotget_boolean>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	d103      	bne.n	800147c <parse_Status_from_JSON+0x10c>
    {
      sensorStatus->isActive = 1;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2201      	movs	r2, #1
 8001478:	739a      	strb	r2, [r3, #14]
 800147a:	e002      	b.n	8001482 <parse_Status_from_JSON+0x112>
    }
    else 
    {
      sensorStatus->isActive = 0;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2200      	movs	r2, #0
 8001480:	739a      	strb	r2, [r3, #14]
    }
  }
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorStatus"))
 8001482:	4958      	ldr	r1, [pc, #352]	; (80015e4 <parse_Status_from_JSON+0x274>)
 8001484:	6978      	ldr	r0, [r7, #20]
 8001486:	f01c ff37 	bl	801e2f8 <json_object_dothas_value>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 8094 	beq.w	80015ba <parse_Status_from_JSON+0x24a>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "subSensorStatus");    
 8001492:	4954      	ldr	r1, [pc, #336]	; (80015e4 <parse_Status_from_JSON+0x274>)
 8001494:	6978      	ldr	r0, [r7, #20]
 8001496:	f01c fed3 	bl	801e240 <json_object_dotget_array>
 800149a:	6138      	str	r0, [r7, #16]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 800149c:	6938      	ldr	r0, [r7, #16]
 800149e:	f01c ff6b 	bl	801e378 <json_array_get_count>
 80014a2:	60f8      	str	r0, [r7, #12]
    
    for (ii = 0; ii < size; ii++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	e082      	b.n	80015b0 <parse_Status_from_JSON+0x240>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);      
 80014aa:	69f9      	ldr	r1, [r7, #28]
 80014ac:	6938      	ldr	r0, [r7, #16]
 80014ae:	f01c ff51 	bl	801e354 <json_array_get_object>
 80014b2:	60b8      	str	r0, [r7, #8]
      
      if (json_object_dothas_value(JSON_subSensorObj,"id"))  
 80014b4:	494c      	ldr	r1, [pc, #304]	; (80015e8 <parse_Status_from_JSON+0x278>)
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	f01c ff1e 	bl	801e2f8 <json_object_dothas_value>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00e      	beq.n	80014e0 <parse_Status_from_JSON+0x170>
      {
        subid = (int8_t)json_object_dotget_number(JSON_subSensorObj, "id");
 80014c2:	4949      	ldr	r1, [pc, #292]	; (80015e8 <parse_Status_from_JSON+0x278>)
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f01c fea3 	bl	801e210 <json_object_dotget_number>
 80014ca:	ec53 2b10 	vmov	r2, r3, d0
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fb69 	bl	8000ba8 <__aeabi_d2iz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	4b44      	ldr	r3, [pc, #272]	; (80015ec <parse_Status_from_JSON+0x27c>)
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e003      	b.n	80014e8 <parse_Status_from_JSON+0x178>
      }
      else
      {
        subid = ii;
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	4b41      	ldr	r3, [pc, #260]	; (80015ec <parse_Status_from_JSON+0x27c>)
 80014e6:	701a      	strb	r2, [r3, #0]
      }
      
      if (json_object_dothas_value(JSON_subSensorObj,"fs"))
 80014e8:	4941      	ldr	r1, [pc, #260]	; (80015f0 <parse_Status_from_JSON+0x280>)
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f01c ff04 	bl	801e2f8 <json_object_dothas_value>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d014      	beq.n	8001520 <parse_Status_from_JSON+0x1b0>
      {
        sensorStatus->subSensorStatus[subid].FS = json_object_dotget_number(JSON_subSensorObj, "fs");
 80014f6:	493e      	ldr	r1, [pc, #248]	; (80015f0 <parse_Status_from_JSON+0x280>)
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	f01c fe89 	bl	801e210 <json_object_dotget_number>
 80014fe:	ec51 0b10 	vmov	r0, r1, d0
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <parse_Status_from_JSON+0x27c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b25b      	sxtb	r3, r3
 8001508:	461c      	mov	r4, r3
 800150a:	f7ff fb95 	bl	8000c38 <__aeabi_d2f>
 800150e:	4601      	mov	r1, r0
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	4623      	mov	r3, r4
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4423      	add	r3, r4
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	331c      	adds	r3, #28
 800151e:	6019      	str	r1, [r3, #0]
      }
      if (json_object_dothas_value(JSON_subSensorObj,"sensitivity"))
 8001520:	4934      	ldr	r1, [pc, #208]	; (80015f4 <parse_Status_from_JSON+0x284>)
 8001522:	68b8      	ldr	r0, [r7, #8]
 8001524:	f01c fee8 	bl	801e2f8 <json_object_dothas_value>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d014      	beq.n	8001558 <parse_Status_from_JSON+0x1e8>
      {
        sensorStatus->subSensorStatus[subid].sensitivity = json_object_dotget_number(JSON_subSensorObj, "sensitivity");
 800152e:	4931      	ldr	r1, [pc, #196]	; (80015f4 <parse_Status_from_JSON+0x284>)
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f01c fe6d 	bl	801e210 <json_object_dotget_number>
 8001536:	ec51 0b10 	vmov	r0, r1, d0
 800153a:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <parse_Status_from_JSON+0x27c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b25b      	sxtb	r3, r3
 8001540:	461c      	mov	r4, r3
 8001542:	f7ff fb79 	bl	8000c38 <__aeabi_d2f>
 8001546:	4601      	mov	r1, r0
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	4623      	mov	r3, r4
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4423      	add	r3, r4
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3320      	adds	r3, #32
 8001556:	6019      	str	r1, [r3, #0]
      }      
      if (json_object_dothas_value(JSON_subSensorObj,"isActive"))
 8001558:	4921      	ldr	r1, [pc, #132]	; (80015e0 <parse_Status_from_JSON+0x270>)
 800155a:	68b8      	ldr	r0, [r7, #8]
 800155c:	f01c fecc 	bl	801e2f8 <json_object_dothas_value>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d021      	beq.n	80015aa <parse_Status_from_JSON+0x23a>
      {
        if (json_object_dotget_boolean(JSON_subSensorObj,"isActive") == 1)
 8001566:	491e      	ldr	r1, [pc, #120]	; (80015e0 <parse_Status_from_JSON+0x270>)
 8001568:	68b8      	ldr	r0, [r7, #8]
 800156a:	f01c fe7b 	bl	801e264 <json_object_dotget_boolean>
 800156e:	4603      	mov	r3, r0
 8001570:	2b01      	cmp	r3, #1
 8001572:	d10d      	bne.n	8001590 <parse_Status_from_JSON+0x220>
        {
          sensorStatus->subSensorStatus[subid].isActive = 1;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <parse_Status_from_JSON+0x27c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b25b      	sxtb	r3, r3
 800157a:	4619      	mov	r1, r3
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	460b      	mov	r3, r1
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	440b      	add	r3, r1
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3324      	adds	r3, #36	; 0x24
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	e00c      	b.n	80015aa <parse_Status_from_JSON+0x23a>
        }
        else 
        {
          sensorStatus->subSensorStatus[subid].isActive = 0;
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <parse_Status_from_JSON+0x27c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b25b      	sxtb	r3, r3
 8001596:	4619      	mov	r1, r3
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	460b      	mov	r3, r1
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	440b      	add	r3, r1
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	3324      	adds	r3, #36	; 0x24
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
    for (ii = 0; ii < size; ii++)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	f4ff af78 	bcc.w	80014aa <parse_Status_from_JSON+0x13a>
        }
      }
    }
  }  
  json_value_free(tempJSON);
 80015ba:	69b8      	ldr	r0, [r7, #24]
 80015bc:	f01c ff70 	bl	801e4a0 <json_value_free>
  
  return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd90      	pop	{r4, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	08022194 	.word	0x08022194
 80015d0:	08022198 	.word	0x08022198
 80015d4:	080221ac 	.word	0x080221ac
 80015d8:	080221c0 	.word	0x080221c0
 80015dc:	080221d4 	.word	0x080221d4
 80015e0:	080221e4 	.word	0x080221e4
 80015e4:	080221f0 	.word	0x080221f0
 80015e8:	08022200 	.word	0x08022200
 80015ec:	20000000 	.word	0x20000000
 80015f0:	08022204 	.word	0x08022204
 80015f4:	08022208 	.word	0x08022208

080015f8 <create_JSON_DeviceInfo>:

static void create_JSON_DeviceInfo(COM_DeviceDescriptor_t *device_descriptor, JSON_Value *tempJSON)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_DeviceHandler = json_value_get_object(tempJSON);
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f01c fee7 	bl	801e3d6 <json_value_get_object>
 8001608:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_string(JSON_DeviceHandler, "serialNumber", device_descriptor->serialNumber);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	461a      	mov	r2, r3
 800160e:	490e      	ldr	r1, [pc, #56]	; (8001648 <create_JSON_DeviceInfo+0x50>)
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f01d faad 	bl	801eb70 <json_object_dotset_string>
  json_object_dotset_string(JSON_DeviceHandler, "alias", device_descriptor->alias);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3315      	adds	r3, #21
 800161a:	461a      	mov	r2, r3
 800161c:	490b      	ldr	r1, [pc, #44]	; (800164c <create_JSON_DeviceInfo+0x54>)
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f01d faa6 	bl	801eb70 <json_object_dotset_string>
  json_object_dotset_number(JSON_DeviceHandler, "nSensor", device_descriptor->nSensor);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff93 	bl	8000554 <__aeabi_ui2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	ec43 2b10 	vmov	d0, r2, r3
 8001636:	4906      	ldr	r1, [pc, #24]	; (8001650 <create_JSON_DeviceInfo+0x58>)
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f01d fabd 	bl	801ebb8 <json_object_dotset_number>
  
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	08022214 	.word	0x08022214
 800164c:	08022224 	.word	0x08022224
 8001650:	0802222c 	.word	0x0802222c

08001654 <create_JSON_Sensor>:


static void create_JSON_Sensor(COM_Sensor_t *sensor, JSON_Value *tempJSON)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  JSON_Value *tempJSON1;
  JSON_Value *tempJSON2;
  JSON_Array *JSON_SensorArray1;
  JSON_Array *JSON_SensorArray2;
  uint32_t ii = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t nSubSensors = sensor->sensorDescriptor.nSubSensors; 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t nSensor = sensor->sensorDescriptor.id;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  
  JSON_Object *JSON_Sensor = json_value_get_object(tempJSON);
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f01c feae 	bl	801e3d6 <json_value_get_object>
 800167a:	6278      	str	r0, [r7, #36]	; 0x24
  
  json_object_dotset_number(JSON_Sensor, "id", nSensor);
 800167c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff67 	bl	8000554 <__aeabi_ui2d>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	ec43 2b10 	vmov	d0, r2, r3
 800168e:	493e      	ldr	r1, [pc, #248]	; (8001788 <create_JSON_Sensor+0x134>)
 8001690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001692:	f01d fa91 	bl	801ebb8 <json_object_dotset_number>
  
  JSON_Value *DescriptorJSON = json_value_init_object();
 8001696:	f01c ff31 	bl	801e4fc <json_value_init_object>
 800169a:	6238      	str	r0, [r7, #32]
  json_object_set_value(JSON_Sensor, "sensorDescriptor", DescriptorJSON);
 800169c:	6a3a      	ldr	r2, [r7, #32]
 800169e:	493b      	ldr	r1, [pc, #236]	; (800178c <create_JSON_Sensor+0x138>)
 80016a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016a2:	f01d f982 	bl	801e9aa <json_object_set_value>
  create_JSON_SensorDescriptor(&sensor->sensorDescriptor, DescriptorJSON); 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a39      	ldr	r1, [r7, #32]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f876 	bl	800179c <create_JSON_SensorDescriptor>
  
  json_object_dotset_value(JSON_Sensor, "sensorDescriptor.subSensorDescriptor", json_value_init_array());
 80016b0:	f01c ff50 	bl	801e554 <json_value_init_array>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	4935      	ldr	r1, [pc, #212]	; (8001790 <create_JSON_Sensor+0x13c>)
 80016ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016bc:	f01d f9cb 	bl	801ea56 <json_object_dotset_value>
  
  JSON_SensorArray1 = json_object_dotget_array(JSON_Sensor, "sensorDescriptor.subSensorDescriptor"); 
 80016c0:	4933      	ldr	r1, [pc, #204]	; (8001790 <create_JSON_Sensor+0x13c>)
 80016c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016c4:	f01c fdbc 	bl	801e240 <json_object_dotget_array>
 80016c8:	61f8      	str	r0, [r7, #28]
  for (ii = 0; ii < nSubSensors; ii++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ce:	e015      	b.n	80016fc <create_JSON_Sensor+0xa8>
  {
    tempJSON1 = json_value_init_object();  
 80016d0:	f01c ff14 	bl	801e4fc <json_value_init_object>
 80016d4:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor->sensorDescriptor.subSensorDescriptor[ii], tempJSON1);  
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	2254      	movs	r2, #84	; 0x54
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	3358      	adds	r3, #88	; 0x58
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	3304      	adds	r3, #4
 80016e6:	68f9      	ldr	r1, [r7, #12]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f9cf 	bl	8001a8c <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 80016ee:	68f9      	ldr	r1, [r7, #12]
 80016f0:	69f8      	ldr	r0, [r7, #28]
 80016f2:	f01d f91b 	bl	801e92c <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	3301      	adds	r3, #1
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001702:	429a      	cmp	r2, r3
 8001704:	d3e4      	bcc.n	80016d0 <create_JSON_Sensor+0x7c>
  }
  
  JSON_Value *statusJSON = json_value_init_object();
 8001706:	f01c fef9 	bl	801e4fc <json_value_init_object>
 800170a:	61b8      	str	r0, [r7, #24]
  json_object_set_value(JSON_Sensor, "sensorStatus", statusJSON);
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4921      	ldr	r1, [pc, #132]	; (8001794 <create_JSON_Sensor+0x140>)
 8001710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001712:	f01d f94a 	bl	801e9aa <json_object_set_value>
  create_JSON_SensorStatus(&sensor->sensorStatus, statusJSON); 
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800171c:	69b9      	ldr	r1, [r7, #24]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f934 	bl	800198c <create_JSON_SensorStatus>
  
  json_object_dotset_value(JSON_Sensor, "sensorStatus.subSensorStatus", json_value_init_array());
 8001724:	f01c ff16 	bl	801e554 <json_value_init_array>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	491a      	ldr	r1, [pc, #104]	; (8001798 <create_JSON_Sensor+0x144>)
 800172e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001730:	f01d f991 	bl	801ea56 <json_object_dotset_value>
  JSON_SensorArray2= json_object_dotget_array(JSON_Sensor, "sensorStatus.subSensorStatus"); 
 8001734:	4918      	ldr	r1, [pc, #96]	; (8001798 <create_JSON_Sensor+0x144>)
 8001736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001738:	f01c fd82 	bl	801e240 <json_object_dotget_array>
 800173c:	6178      	str	r0, [r7, #20]
  for (ii = 0; ii < nSubSensors; ii++)
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001742:	e017      	b.n	8001774 <create_JSON_Sensor+0x120>
  {
    tempJSON2 = json_value_init_object();  
 8001744:	f01c feda 	bl	801e4fc <json_value_init_object>
 8001748:	6138      	str	r0, [r7, #16]
    create_JSON_SubSensorStatus(&sensor->sensorStatus.subSensorStatus[ii], tempJSON2);    
 800174a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	3308      	adds	r3, #8
 800175e:	6939      	ldr	r1, [r7, #16]
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fa5d 	bl	8001c20 <create_JSON_SubSensorStatus>
    json_array_append_value(JSON_SensorArray2,tempJSON2);
 8001766:	6939      	ldr	r1, [r7, #16]
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	f01d f8df 	bl	801e92c <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	3301      	adds	r3, #1
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001774:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177a:	429a      	cmp	r2, r3
 800177c:	d3e2      	bcc.n	8001744 <create_JSON_Sensor+0xf0>
  }
}
 800177e:	bf00      	nop
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	08022200 	.word	0x08022200
 800178c:	08022234 	.word	0x08022234
 8001790:	08022248 	.word	0x08022248
 8001794:	0802211c 	.word	0x0802211c
 8001798:	08022270 	.word	0x08022270

0800179c <create_JSON_SensorDescriptor>:


static void create_JSON_SensorDescriptor(COM_SensorDescriptor_t *sensor_descriptor, JSON_Value *tempJSON)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  
  JSON_Object *JSON_SensorDescriptor = json_value_get_object(tempJSON);
 80017aa:	6838      	ldr	r0, [r7, #0]
 80017ac:	f01c fe13 	bl	801e3d6 <json_value_get_object>
 80017b0:	61b8      	str	r0, [r7, #24]
  JSON_Array *JSON_SensorArray1;
  JSON_Value *tempJSON1;
  
  json_object_dotset_string(JSON_SensorDescriptor, "name", sensor_descriptor->name);  
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3301      	adds	r3, #1
 80017b6:	461a      	mov	r2, r3
 80017b8:	4965      	ldr	r1, [pc, #404]	; (8001950 <create_JSON_SensorDescriptor+0x1b4>)
 80017ba:	69b8      	ldr	r0, [r7, #24]
 80017bc:	f01d f9d8 	bl	801eb70 <json_object_dotset_string>
  
  switch (sensor_descriptor->dataType)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7c5b      	ldrb	r3, [r3, #17]
 80017c4:	2b06      	cmp	r3, #6
 80017c6:	d83b      	bhi.n	8001840 <create_JSON_SensorDescriptor+0xa4>
 80017c8:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <create_JSON_SensorDescriptor+0x34>)
 80017ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ce:	bf00      	nop
 80017d0:	080017ed 	.word	0x080017ed
 80017d4:	080017f9 	.word	0x080017f9
 80017d8:	08001805 	.word	0x08001805
 80017dc:	08001811 	.word	0x08001811
 80017e0:	0800181d 	.word	0x0800181d
 80017e4:	08001829 	.word	0x08001829
 80017e8:	08001835 	.word	0x08001835
  {
  case DATA_TYPE_UINT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint8_t");
 80017ec:	4a59      	ldr	r2, [pc, #356]	; (8001954 <create_JSON_SensorDescriptor+0x1b8>)
 80017ee:	495a      	ldr	r1, [pc, #360]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 80017f0:	69b8      	ldr	r0, [r7, #24]
 80017f2:	f01d f9bd 	bl	801eb70 <json_object_dotset_string>
    break;
 80017f6:	e029      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int8_t");
 80017f8:	4a58      	ldr	r2, [pc, #352]	; (800195c <create_JSON_SensorDescriptor+0x1c0>)
 80017fa:	4957      	ldr	r1, [pc, #348]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 80017fc:	69b8      	ldr	r0, [r7, #24]
 80017fe:	f01d f9b7 	bl	801eb70 <json_object_dotset_string>
    break;
 8001802:	e023      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint16_t");
 8001804:	4a56      	ldr	r2, [pc, #344]	; (8001960 <create_JSON_SensorDescriptor+0x1c4>)
 8001806:	4954      	ldr	r1, [pc, #336]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001808:	69b8      	ldr	r0, [r7, #24]
 800180a:	f01d f9b1 	bl	801eb70 <json_object_dotset_string>
    break;
 800180e:	e01d      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int16_t");
 8001810:	4a54      	ldr	r2, [pc, #336]	; (8001964 <create_JSON_SensorDescriptor+0x1c8>)
 8001812:	4951      	ldr	r1, [pc, #324]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001814:	69b8      	ldr	r0, [r7, #24]
 8001816:	f01d f9ab 	bl	801eb70 <json_object_dotset_string>
    break;
 800181a:	e017      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint32_t");
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <create_JSON_SensorDescriptor+0x1cc>)
 800181e:	494e      	ldr	r1, [pc, #312]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001820:	69b8      	ldr	r0, [r7, #24]
 8001822:	f01d f9a5 	bl	801eb70 <json_object_dotset_string>
    break;
 8001826:	e011      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int32_t");
 8001828:	4a50      	ldr	r2, [pc, #320]	; (800196c <create_JSON_SensorDescriptor+0x1d0>)
 800182a:	494b      	ldr	r1, [pc, #300]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 800182c:	69b8      	ldr	r0, [r7, #24]
 800182e:	f01d f99f 	bl	801eb70 <json_object_dotset_string>
    break;
 8001832:	e00b      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_FLOAT:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "float");
 8001834:	4a4e      	ldr	r2, [pc, #312]	; (8001970 <create_JSON_SensorDescriptor+0x1d4>)
 8001836:	4948      	ldr	r1, [pc, #288]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001838:	69b8      	ldr	r0, [r7, #24]
 800183a:	f01d f999 	bl	801eb70 <json_object_dotset_string>
    break;
 800183e:	e005      	b.n	800184c <create_JSON_SensorDescriptor+0xb0>
  default:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "NA");
 8001840:	4a4c      	ldr	r2, [pc, #304]	; (8001974 <create_JSON_SensorDescriptor+0x1d8>)
 8001842:	4945      	ldr	r1, [pc, #276]	; (8001958 <create_JSON_SensorDescriptor+0x1bc>)
 8001844:	69b8      	ldr	r0, [r7, #24]
 8001846:	f01d f993 	bl	801eb70 <json_object_dotset_string>
    break;
 800184a:	bf00      	nop
  }  
  
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.min", sensor_descriptor->samplesPerTimestamp[0]);  
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe7e 	bl	8000554 <__aeabi_ui2d>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	ec43 2b10 	vmov	d0, r2, r3
 8001860:	4945      	ldr	r1, [pc, #276]	; (8001978 <create_JSON_SensorDescriptor+0x1dc>)
 8001862:	69b8      	ldr	r0, [r7, #24]
 8001864:	f01d f9a8 	bl	801ebb8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.max", sensor_descriptor->samplesPerTimestamp[1]);  
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe70 	bl	8000554 <__aeabi_ui2d>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	ec43 2b10 	vmov	d0, r2, r3
 800187c:	493f      	ldr	r1, [pc, #252]	; (800197c <create_JSON_SensorDescriptor+0x1e0>)
 800187e:	69b8      	ldr	r0, [r7, #24]
 8001880:	f01d f99a 	bl	801ebb8 <json_object_dotset_number>
  json_object_dotset_string(JSON_SensorDescriptor, "samplesPerTs.dataType", "int16_t");  
 8001884:	4a37      	ldr	r2, [pc, #220]	; (8001964 <create_JSON_SensorDescriptor+0x1c8>)
 8001886:	493e      	ldr	r1, [pc, #248]	; (8001980 <create_JSON_SensorDescriptor+0x1e4>)
 8001888:	69b8      	ldr	r0, [r7, #24]
 800188a:	f01d f971 	bl	801eb70 <json_object_dotset_string>
  
  json_object_dotset_value(JSON_SensorDescriptor, "odr.values", json_value_init_array());
 800188e:	f01c fe61 	bl	801e554 <json_value_init_array>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	493b      	ldr	r1, [pc, #236]	; (8001984 <create_JSON_SensorDescriptor+0x1e8>)
 8001898:	69b8      	ldr	r0, [r7, #24]
 800189a:	f01d f8dc 	bl	801ea56 <json_object_dotset_value>
  JSON_Array *JSON_SensorArray = json_object_dotget_array(JSON_SensorDescriptor, "odr.values");
 800189e:	4939      	ldr	r1, [pc, #228]	; (8001984 <create_JSON_SensorDescriptor+0x1e8>)
 80018a0:	69b8      	ldr	r0, [r7, #24]
 80018a2:	f01c fccd 	bl	801e240 <json_object_dotget_array>
 80018a6:	6178      	str	r0, [r7, #20]
  
  while (sensor_descriptor->ODR[ii] > 0)
 80018a8:	e013      	b.n	80018d2 <create_JSON_SensorDescriptor+0x136>
  {
    json_array_append_number(JSON_SensorArray, sensor_descriptor->ODR[ii]);
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3304      	adds	r3, #4
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	3304      	adds	r3, #4
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe6d 	bl	8000598 <__aeabi_f2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	ec43 2b10 	vmov	d0, r2, r3
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f01d f84b 	bl	801e962 <json_array_append_number>
    ii++;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	3301      	adds	r3, #1
 80018d0:	61fb      	str	r3, [r7, #28]
  while (sensor_descriptor->ODR[ii] > 0)
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	3304      	adds	r3, #4
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	3304      	adds	r3, #4
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	dcde      	bgt.n	80018aa <create_JSON_SensorDescriptor+0x10e>
  }
  
  json_object_dotset_value(JSON_SensorDescriptor, "subSensorDescriptor", json_value_init_array());  
 80018ec:	f01c fe32 	bl	801e554 <json_value_init_array>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	4924      	ldr	r1, [pc, #144]	; (8001988 <create_JSON_SensorDescriptor+0x1ec>)
 80018f6:	69b8      	ldr	r0, [r7, #24]
 80018f8:	f01d f8ad 	bl	801ea56 <json_object_dotset_value>
  JSON_SensorArray1 = json_object_dotget_array(JSON_SensorDescriptor, "subSensorDescriptor"); 
 80018fc:	4922      	ldr	r1, [pc, #136]	; (8001988 <create_JSON_SensorDescriptor+0x1ec>)
 80018fe:	69b8      	ldr	r0, [r7, #24]
 8001900:	f01c fc9e 	bl	801e240 <json_object_dotget_array>
 8001904:	6138      	str	r0, [r7, #16]
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e015      	b.n	8001938 <create_JSON_SensorDescriptor+0x19c>
  {
    tempJSON1 = json_value_init_object();  
 800190c:	f01c fdf6 	bl	801e4fc <json_value_init_object>
 8001910:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor_descriptor->subSensorDescriptor[ii], tempJSON1);  
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	2254      	movs	r2, #84	; 0x54
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	3358      	adds	r3, #88	; 0x58
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	3304      	adds	r3, #4
 8001922:	68f9      	ldr	r1, [r7, #12]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f8b1 	bl	8001a8c <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 800192a:	68f9      	ldr	r1, [r7, #12]
 800192c:	6938      	ldr	r0, [r7, #16]
 800192e:	f01c fffd 	bl	801e92c <json_array_append_value>
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3301      	adds	r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800193e:	461a      	mov	r2, r3
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4293      	cmp	r3, r2
 8001944:	d3e2      	bcc.n	800190c <create_JSON_SensorDescriptor+0x170>
  }  
}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	08022290 	.word	0x08022290
 8001954:	08022298 	.word	0x08022298
 8001958:	080222a0 	.word	0x080222a0
 800195c:	080222ac 	.word	0x080222ac
 8001960:	080222b4 	.word	0x080222b4
 8001964:	080222c0 	.word	0x080222c0
 8001968:	080222c8 	.word	0x080222c8
 800196c:	080222d4 	.word	0x080222d4
 8001970:	080222dc 	.word	0x080222dc
 8001974:	080222e4 	.word	0x080222e4
 8001978:	080222e8 	.word	0x080222e8
 800197c:	080222fc 	.word	0x080222fc
 8001980:	08022310 	.word	0x08022310
 8001984:	08022328 	.word	0x08022328
 8001988:	08022334 	.word	0x08022334

0800198c <create_JSON_SensorStatus>:


static void create_JSON_SensorStatus(COM_SensorStatus_t *sensor_status, JSON_Value *tempJSON)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SensorStatus= json_value_get_object(tempJSON);
 8001996:	6838      	ldr	r0, [r7, #0]
 8001998:	f01c fd1d 	bl	801e3d6 <json_value_get_object>
 800199c:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SensorStatus, "odr", sensor_status->ODR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdf8 	bl	8000598 <__aeabi_f2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	ec43 2b10 	vmov	d0, r2, r3
 80019b0:	492e      	ldr	r1, [pc, #184]	; (8001a6c <create_JSON_SensorStatus+0xe0>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f01d f900 	bl	801ebb8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "odrMeasured", sensor_status->measuredODR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdeb 	bl	8000598 <__aeabi_f2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ec43 2b10 	vmov	d0, r2, r3
 80019ca:	4929      	ldr	r1, [pc, #164]	; (8001a70 <create_JSON_SensorStatus+0xe4>)
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f01d f8f3 	bl	801ebb8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "initialOffset", sensor_status->initialOffset);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdde 	bl	8000598 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	ec43 2b10 	vmov	d0, r2, r3
 80019e4:	4923      	ldr	r1, [pc, #140]	; (8001a74 <create_JSON_SensorStatus+0xe8>)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f01d f8e6 	bl	801ebb8 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SensorStatus, "isActive", sensor_status->isActive);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7b9b      	ldrb	r3, [r3, #14]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4921      	ldr	r1, [pc, #132]	; (8001a78 <create_JSON_SensorStatus+0xec>)
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f01d f905 	bl	801ec04 <json_object_dotset_boolean>
  json_object_dotset_number(JSON_SensorStatus, "samplesPerTs", sensor_status->samplesPerTimestamp);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	899b      	ldrh	r3, [r3, #12]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fda8 	bl	8000554 <__aeabi_ui2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	ec43 2b10 	vmov	d0, r2, r3
 8001a0c:	491b      	ldr	r1, [pc, #108]	; (8001a7c <create_JSON_SensorStatus+0xf0>)
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f01d f8d2 	bl	801ebb8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "usbDataPacketSize", sensor_status->usbDataPacketSize);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	8a1b      	ldrh	r3, [r3, #16]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd9b 	bl	8000554 <__aeabi_ui2d>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	ec43 2b10 	vmov	d0, r2, r3
 8001a26:	4916      	ldr	r1, [pc, #88]	; (8001a80 <create_JSON_SensorStatus+0xf4>)
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f01d f8c5 	bl	801ebb8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "sdWriteBufferSize", sensor_status->sdWriteBufferSize);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd8e 	bl	8000554 <__aeabi_ui2d>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	ec43 2b10 	vmov	d0, r2, r3
 8001a40:	4910      	ldr	r1, [pc, #64]	; (8001a84 <create_JSON_SensorStatus+0xf8>)
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f01d f8b8 	bl	801ebb8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "comChannelNumber", sensor_status->comChannelNumber);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd90 	bl	8000574 <__aeabi_i2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ec43 2b10 	vmov	d0, r2, r3
 8001a5c:	490a      	ldr	r1, [pc, #40]	; (8001a88 <create_JSON_SensorStatus+0xfc>)
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f01d f8aa 	bl	801ebb8 <json_object_dotset_number>
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	08022194 	.word	0x08022194
 8001a70:	08022348 	.word	0x08022348
 8001a74:	08022354 	.word	0x08022354
 8001a78:	080221e4 	.word	0x080221e4
 8001a7c:	080221d4 	.word	0x080221d4
 8001a80:	08022198 	.word	0x08022198
 8001a84:	080221ac 	.word	0x080221ac
 8001a88:	080221c0 	.word	0x080221c0

08001a8c <create_JSON_SubSensorDescriptor>:


static void create_JSON_SubSensorDescriptor(COM_SubSensorDescriptor_t *sub_sensor_descriptor, JSON_Value *tempJSON)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  
  JSON_Value *tempJSONarray = json_value_init_object();
 8001a9a:	f01c fd2f 	bl	801e4fc <json_value_init_object>
 8001a9e:	6138      	str	r0, [r7, #16]
  JSON_Array *JSON_SensorArray = json_value_get_array(tempJSONarray);
 8001aa0:	6938      	ldr	r0, [r7, #16]
 8001aa2:	f01c fcaa 	bl	801e3fa <json_value_get_array>
 8001aa6:	60f8      	str	r0, [r7, #12]
  JSON_Object *JSON_SubSensorDescriptor= json_value_get_object(tempJSON);
 8001aa8:	6838      	ldr	r0, [r7, #0]
 8001aaa:	f01c fc94 	bl	801e3d6 <json_value_get_object>
 8001aae:	60b8      	str	r0, [r7, #8]
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "id", sub_sensor_descriptor->id);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd4d 	bl	8000554 <__aeabi_ui2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	ec43 2b10 	vmov	d0, r2, r3
 8001ac2:	494a      	ldr	r1, [pc, #296]	; (8001bec <create_JSON_SubSensorDescriptor+0x160>)
 8001ac4:	68b8      	ldr	r0, [r7, #8]
 8001ac6:	f01d f877 	bl	801ebb8 <json_object_dotset_number>
  
  switch (sub_sensor_descriptor->sensorType)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	2b06      	cmp	r3, #6
 8001ad2:	d83b      	bhi.n	8001b4c <create_JSON_SubSensorDescriptor+0xc0>
 8001ad4:	a201      	add	r2, pc, #4	; (adr r2, 8001adc <create_JSON_SubSensorDescriptor+0x50>)
 8001ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ada:	bf00      	nop
 8001adc:	08001af9 	.word	0x08001af9
 8001ae0:	08001b05 	.word	0x08001b05
 8001ae4:	08001b11 	.word	0x08001b11
 8001ae8:	08001b1d 	.word	0x08001b1d
 8001aec:	08001b29 	.word	0x08001b29
 8001af0:	08001b35 	.word	0x08001b35
 8001af4:	08001b41 	.word	0x08001b41
  {
  case COM_TYPE_ACC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "ACC");
 8001af8:	4a3d      	ldr	r2, [pc, #244]	; (8001bf0 <create_JSON_SubSensorDescriptor+0x164>)
 8001afa:	493e      	ldr	r1, [pc, #248]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001afc:	68b8      	ldr	r0, [r7, #8]
 8001afe:	f01d f837 	bl	801eb70 <json_object_dotset_string>
    break;
 8001b02:	e029      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MAG:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MAG");
 8001b04:	4a3c      	ldr	r2, [pc, #240]	; (8001bf8 <create_JSON_SubSensorDescriptor+0x16c>)
 8001b06:	493b      	ldr	r1, [pc, #236]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b08:	68b8      	ldr	r0, [r7, #8]
 8001b0a:	f01d f831 	bl	801eb70 <json_object_dotset_string>
    break;
 8001b0e:	e023      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_GYRO:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "GYRO");
 8001b10:	4a3a      	ldr	r2, [pc, #232]	; (8001bfc <create_JSON_SubSensorDescriptor+0x170>)
 8001b12:	4938      	ldr	r1, [pc, #224]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b14:	68b8      	ldr	r0, [r7, #8]
 8001b16:	f01d f82b 	bl	801eb70 <json_object_dotset_string>
    break;
 8001b1a:	e01d      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_TEMP:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "TEMP");
 8001b1c:	4a38      	ldr	r2, [pc, #224]	; (8001c00 <create_JSON_SubSensorDescriptor+0x174>)
 8001b1e:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b20:	68b8      	ldr	r0, [r7, #8]
 8001b22:	f01d f825 	bl	801eb70 <json_object_dotset_string>
    break;
 8001b26:	e017      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_PRESS:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "PRESS");
 8001b28:	4a36      	ldr	r2, [pc, #216]	; (8001c04 <create_JSON_SubSensorDescriptor+0x178>)
 8001b2a:	4932      	ldr	r1, [pc, #200]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b2c:	68b8      	ldr	r0, [r7, #8]
 8001b2e:	f01d f81f 	bl	801eb70 <json_object_dotset_string>
    break;
 8001b32:	e011      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_HUM:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "HUM");
 8001b34:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <create_JSON_SubSensorDescriptor+0x17c>)
 8001b36:	492f      	ldr	r1, [pc, #188]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b38:	68b8      	ldr	r0, [r7, #8]
 8001b3a:	f01d f819 	bl	801eb70 <json_object_dotset_string>
    break;
 8001b3e:	e00b      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MIC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MIC");
 8001b40:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <create_JSON_SubSensorDescriptor+0x180>)
 8001b42:	492c      	ldr	r1, [pc, #176]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b44:	68b8      	ldr	r0, [r7, #8]
 8001b46:	f01d f813 	bl	801eb70 <json_object_dotset_string>
    break;
 8001b4a:	e005      	b.n	8001b58 <create_JSON_SubSensorDescriptor+0xcc>
  default:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "NA");
 8001b4c:	4a30      	ldr	r2, [pc, #192]	; (8001c10 <create_JSON_SubSensorDescriptor+0x184>)
 8001b4e:	4929      	ldr	r1, [pc, #164]	; (8001bf4 <create_JSON_SubSensorDescriptor+0x168>)
 8001b50:	68b8      	ldr	r0, [r7, #8]
 8001b52:	f01d f80d 	bl	801eb70 <json_object_dotset_string>
    break;      
 8001b56:	bf00      	nop
  }
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "dataPerSample", sub_sensor_descriptor->dataPerSample);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	789b      	ldrb	r3, [r3, #2]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcf9 	bl	8000554 <__aeabi_ui2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	ec43 2b10 	vmov	d0, r2, r3
 8001b6a:	492a      	ldr	r1, [pc, #168]	; (8001c14 <create_JSON_SubSensorDescriptor+0x188>)
 8001b6c:	68b8      	ldr	r0, [r7, #8]
 8001b6e:	f01d f823 	bl	801ebb8 <json_object_dotset_number>
  json_object_dotset_string(JSON_SubSensorDescriptor, "unit", sub_sensor_descriptor->unit);  
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3303      	adds	r3, #3
 8001b76:	461a      	mov	r2, r3
 8001b78:	4927      	ldr	r1, [pc, #156]	; (8001c18 <create_JSON_SubSensorDescriptor+0x18c>)
 8001b7a:	68b8      	ldr	r0, [r7, #8]
 8001b7c:	f01c fff8 	bl	801eb70 <json_object_dotset_string>
  json_object_dotset_value(JSON_SubSensorDescriptor, "fs.values", json_value_init_array());
 8001b80:	f01c fce8 	bl	801e554 <json_value_init_array>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4924      	ldr	r1, [pc, #144]	; (8001c1c <create_JSON_SubSensorDescriptor+0x190>)
 8001b8a:	68b8      	ldr	r0, [r7, #8]
 8001b8c:	f01c ff63 	bl	801ea56 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_SubSensorDescriptor, "fs.values");
 8001b90:	4922      	ldr	r1, [pc, #136]	; (8001c1c <create_JSON_SubSensorDescriptor+0x190>)
 8001b92:	68b8      	ldr	r0, [r7, #8]
 8001b94:	f01c fb54 	bl	801e240 <json_object_dotget_array>
 8001b98:	60f8      	str	r0, [r7, #12]
  
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001b9a:	e013      	b.n	8001bc4 <create_JSON_SubSensorDescriptor+0x138>
  {
    json_array_append_number(JSON_SensorArray, sub_sensor_descriptor->FS[ii]);
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcf4 	bl	8000598 <__aeabi_f2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	ec43 2b10 	vmov	d0, r2, r3
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f01c fed2 	bl	801e962 <json_array_append_number>
    ii++;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	3304      	adds	r3, #4
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	dcde      	bgt.n	8001b9c <create_JSON_SubSensorDescriptor+0x110>
  }  
  json_value_free(tempJSONarray);
 8001bde:	6938      	ldr	r0, [r7, #16]
 8001be0:	f01c fc5e 	bl	801e4a0 <json_value_free>
}
 8001be4:	bf00      	nop
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	08022200 	.word	0x08022200
 8001bf0:	08022364 	.word	0x08022364
 8001bf4:	08022368 	.word	0x08022368
 8001bf8:	08022374 	.word	0x08022374
 8001bfc:	08022378 	.word	0x08022378
 8001c00:	08022380 	.word	0x08022380
 8001c04:	08022388 	.word	0x08022388
 8001c08:	08022390 	.word	0x08022390
 8001c0c:	08022394 	.word	0x08022394
 8001c10:	080222e4 	.word	0x080222e4
 8001c14:	08022398 	.word	0x08022398
 8001c18:	080223a8 	.word	0x080223a8
 8001c1c:	080223b0 	.word	0x080223b0

08001c20 <create_JSON_SubSensorStatus>:


static void create_JSON_SubSensorStatus(COM_SubSensorStatus_t *sub_sensor_status, JSON_Value *tempJSON)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SubSensorStatus = json_value_get_object(tempJSON);
 8001c2a:	6838      	ldr	r0, [r7, #0]
 8001c2c:	f01c fbd3 	bl	801e3d6 <json_value_get_object>
 8001c30:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SubSensorStatus, "fs", sub_sensor_status->FS);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fcae 	bl	8000598 <__aeabi_f2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	ec43 2b10 	vmov	d0, r2, r3
 8001c44:	490d      	ldr	r1, [pc, #52]	; (8001c7c <create_JSON_SubSensorStatus+0x5c>)
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f01c ffb6 	bl	801ebb8 <json_object_dotset_number>
  json_object_dotset_number(JSON_SubSensorStatus, "sensitivity", sub_sensor_status->sensitivity);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fca1 	bl	8000598 <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	ec43 2b10 	vmov	d0, r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <create_JSON_SubSensorStatus+0x60>)
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f01c ffa9 	bl	801ebb8 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SubSensorStatus, "isActive", sub_sensor_status->isActive);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7a1b      	ldrb	r3, [r3, #8]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4905      	ldr	r1, [pc, #20]	; (8001c84 <create_JSON_SubSensorStatus+0x64>)
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f01c ffc8 	bl	801ec04 <json_object_dotset_boolean>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	08022204 	.word	0x08022204
 8001c80:	08022208 	.word	0x08022208
 8001c84:	080221e4 	.word	0x080221e4

08001c88 <COM_AddSensor>:
* @brief Add Sensor to Db
* @param None
* @retval Sensor unique sID
*/
int32_t COM_AddSensor(void)
{  
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  uint32_t ii = COM_device.deviceDescriptor.nSensor;
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <COM_AddSensor+0x68>)
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	607b      	str	r3, [r7, #4]
  
  COM_device.sensors[ii] = calloc(1, sizeof(COM_Sensor_t));   
 8001c94:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f01d f8d1 	bl	801ee40 <calloc>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <COM_AddSensor+0x68>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	330a      	adds	r3, #10
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	6059      	str	r1, [r3, #4]
  
  if(COM_device.sensors[ii] == NULL)
 8001cae:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <COM_AddSensor+0x68>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	330a      	adds	r3, #10
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <COM_AddSensor+0x3c>
    return -1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e010      	b.n	8001ce6 <COM_AddSensor+0x5e>
  
  COM_device.sensors[ii]->sensorDescriptor.id = ii;
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <COM_AddSensor+0x68>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	330a      	adds	r3, #10
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]
  COM_device.deviceDescriptor.nSensor++;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <COM_AddSensor+0x68>)
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	3301      	adds	r3, #1
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <COM_AddSensor+0x68>)
 8001cde:	6293      	str	r3, [r2, #40]	; 0x28
  return COM_device.deviceDescriptor.nSensor - 1;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <COM_AddSensor+0x68>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	3b01      	subs	r3, #1
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200004b0 	.word	0x200004b0

08001cf4 <COM_GetDevice>:
* @brief Get Device Struct
* @param None
* @retval whole device Structure
*/
COM_Device_t * COM_GetDevice(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return (COM_Device_t *)&COM_device;
 8001cf8:	4b02      	ldr	r3, [pc, #8]	; (8001d04 <COM_GetDevice+0x10>)
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	200004b0 	.word	0x200004b0

08001d08 <COM_GetDeviceDescriptor>:
* @brief Get Device Descriptor
* @param None
* @retval Device Descriptor
*/
COM_DeviceDescriptor_t * COM_GetDeviceDescriptor(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return (COM_DeviceDescriptor_t *)&(COM_device.deviceDescriptor);
 8001d0c:	4b02      	ldr	r3, [pc, #8]	; (8001d18 <COM_GetDeviceDescriptor+0x10>)
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	200004b0 	.word	0x200004b0

08001d1c <COM_GetSensor>:
* @brief Get Sensor 
* @param None
* @retval Sensor unique sID
*/
COM_Sensor_t * COM_GetSensor(uint8_t sID)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  return COM_device.sensors[sID];
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <COM_GetSensor+0x24>)
 8001d2a:	330a      	adds	r3, #10
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	685b      	ldr	r3, [r3, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200004b0 	.word	0x200004b0

08001d44 <COM_GetSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SensorDescriptor_t * COM_GetSensorDescriptor(uint8_t sID)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorDescriptor);  
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <COM_GetSensorDescriptor+0x24>)
 8001d52:	330a      	adds	r3, #10
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	685b      	ldr	r3, [r3, #4]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	200004b0 	.word	0x200004b0

08001d6c <COM_GetSensorStatus>:
* @brief Get Sensor Status
* @param None
* @retval Sensor unique sID
*/
COM_SensorStatus_t * COM_GetSensorStatus(uint8_t sID)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorStatus);  
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4a06      	ldr	r2, [pc, #24]	; (8001d94 <COM_GetSensorStatus+0x28>)
 8001d7a:	330a      	adds	r3, #10
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200004b0 	.word	0x200004b0

08001d98 <COM_GetSubSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SubSensorDescriptor_t * COM_GetSubSensorDescriptor(uint8_t sID, uint8_t ssID)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	460a      	mov	r2, r1
 8001da2:	71fb      	strb	r3, [r7, #7]
 8001da4:	4613      	mov	r3, r2
 8001da6:	71bb      	strb	r3, [r7, #6]
    return &(COM_device.sensors[sID]->sensorDescriptor.subSensorDescriptor[ssID]);  
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <COM_GetSubSensorDescriptor+0x38>)
 8001dac:	330a      	adds	r3, #10
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	79bb      	ldrb	r3, [r7, #6]
 8001db6:	2154      	movs	r1, #84	; 0x54
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	3358      	adds	r3, #88	; 0x58
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3304      	adds	r3, #4
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	200004b0 	.word	0x200004b0

08001dd4 <COM_GetSubSensorStatus>:
* @brief Get Sensor Status
* @param None
* @retval Sensor unique sID
*/
COM_SubSensorStatus_t * COM_GetSubSensorStatus(uint8_t sID, uint8_t ssID)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	460a      	mov	r2, r1
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	4613      	mov	r3, r2
 8001de2:	71bb      	strb	r3, [r7, #6]
    return &(COM_device.sensors[sID]->sensorStatus.subSensorStatus[ssID]);  
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <COM_GetSubSensorStatus+0x3c>)
 8001de8:	330a      	adds	r3, #10
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	79ba      	ldrb	r2, [r7, #6]
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8001dfe:	440b      	add	r3, r1
 8001e00:	3308      	adds	r3, #8
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200004b0 	.word	0x200004b0

08001e14 <COM_GetSubSensorNumber>:
* @brief Get Sensor Status
* @param Sensor unique sID
* @retval number of subsensors
*/
uint8_t COM_GetSubSensorNumber(uint8_t sID)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
    return COM_device.sensors[sID]->sensorDescriptor.nSubSensors;  
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <COM_GetSubSensorNumber+0x28>)
 8001e22:	330a      	adds	r3, #10
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200004b0 	.word	0x200004b0

08001e40 <COM_IsOdrLegal>:
  
  return ret;
}

uint8_t COM_IsOdrLegal(float value, uint8_t sID)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	70fb      	strb	r3, [r7, #3]
  uint16_t i = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	737b      	strb	r3, [r7, #13]
  float * list = COM_device.sensors[sID]->sensorDescriptor.ODR;
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <COM_IsOdrLegal+0x74>)
 8001e5a:	330a      	adds	r3, #10
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	3314      	adds	r3, #20
 8001e64:	60bb      	str	r3, [r7, #8]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001e66:	e011      	b.n	8001e8c <COM_IsOdrLegal+0x4c>
  {
    if(list[i] == value)
 8001e68:	89fb      	ldrh	r3, [r7, #14]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	4413      	add	r3, r2
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e78:	eeb4 7a67 	vcmp.f32	s14, s15
 8001e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e80:	d101      	bne.n	8001e86 <COM_IsOdrLegal+0x46>
      ret = 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	737b      	strb	r3, [r7, #13]
    i++;
 8001e86:	89fb      	ldrh	r3, [r7, #14]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	81fb      	strh	r3, [r7, #14]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e9c:	eef4 7a47 	vcmp.f32	s15, s14
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	d1e0      	bne.n	8001e68 <COM_IsOdrLegal+0x28>
  }
  
  return ret;
 8001ea6:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	200004b0 	.word	0x200004b0

08001eb8 <get_unique_id>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


static void get_unique_id(char * id)
{ 
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t deviceserial[3];
  
  deviceserial[0] = *(uint32_t*)DEVICE_ID_REG_1;
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <get_unique_id+0xd4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
  deviceserial[1] = *(uint32_t*)DEVICE_ID_REG_2;
 8001ec6:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <get_unique_id+0xd8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	613b      	str	r3, [r7, #16]
  deviceserial[2] = *(uint32_t*)DEVICE_ID_REG_3; 
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <get_unique_id+0xdc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	617b      	str	r3, [r7, #20]
  
  uint16_t y = (deviceserial[0] & 0xFFFF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t x = ((deviceserial[0] >> 16) & 0xFFFF);  
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint8_t waf_num = (deviceserial[1] & 0xFF);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
  id[0] = (deviceserial[1]>>8) & 0xFF;
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	701a      	strb	r2, [r3, #0]
  id[1] = (deviceserial[1]>>16) & 0xFF;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	0c1a      	lsrs	r2, r3, #16
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]
  id[2] = (deviceserial[1]>>24) & 0xFF;  
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	0e1a      	lsrs	r2, r3, #24
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3302      	adds	r3, #2
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]
  id[3] = (deviceserial[2]) & 0xFF;
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3303      	adds	r3, #3
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]
  id[4] = (deviceserial[2]>>8) & 0xFF;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	0a1a      	lsrs	r2, r3, #8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3304      	adds	r3, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]
  id[5] = (deviceserial[2]>>16) & 0xFF;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	0c1a      	lsrs	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3305      	adds	r3, #5
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
  id[6] = (deviceserial[2]>>24) & 0xFF;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	0e1a      	lsrs	r2, r3, #24
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3306      	adds	r3, #6
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]
  
  int n;
  char * p = &id[7];
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3307      	adds	r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%03u", waf_num);
 8001f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4916      	ldr	r1, [pc, #88]	; (8001f98 <get_unique_id+0xe0>)
 8001f40:	69f8      	ldr	r0, [r7, #28]
 8001f42:	f01d fad9 	bl	801f4f8 <siprintf>
 8001f46:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", x);
 8001f50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f52:	461a      	mov	r2, r3
 8001f54:	4911      	ldr	r1, [pc, #68]	; (8001f9c <get_unique_id+0xe4>)
 8001f56:	69f8      	ldr	r0, [r7, #28]
 8001f58:	f01d face 	bl	801f4f8 <siprintf>
 8001f5c:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	4413      	add	r3, r2
 8001f64:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", y);
 8001f66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f68:	461a      	mov	r2, r3
 8001f6a:	490c      	ldr	r1, [pc, #48]	; (8001f9c <get_unique_id+0xe4>)
 8001f6c:	69f8      	ldr	r0, [r7, #28]
 8001f6e:	f01d fac3 	bl	801f4f8 <siprintf>
 8001f72:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	61fb      	str	r3, [r7, #28]
  
  *p = '\0';
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
  /*OUT: | LOT NUMBER [7] | WAF NUMBER [3] | X ON WAF [5] | Y ON WAF [5] | */  
}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	; 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	1fff7590 	.word	0x1fff7590
 8001f90:	1fff7594 	.word	0x1fff7594
 8001f94:	1fff7598 	.word	0x1fff7598
 8001f98:	080223bc 	.word	0x080223bc
 8001f9c:	080223c4 	.word	0x080223c4

08001fa0 <set_default_description>:
* @brief Set default device description
* @param None
* @retval None
*/
void set_default_description(void)
{  
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;
  COM_DeviceDescriptor_t * tempDeviceDescriptor;
  tempDeviceDescriptor = COM_GetDeviceDescriptor();
 8001fa6:	f7ff feaf 	bl	8001d08 <COM_GetDeviceDescriptor>
 8001faa:	6078      	str	r0, [r7, #4]
  
  get_unique_id(tempDeviceDescriptor->serialNumber);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff82 	bl	8001eb8 <get_unique_id>
  strcpy(tempDeviceDescriptor->alias, "STWIN_001"); 
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3315      	adds	r3, #21
 8001fb8:	49ba      	ldr	r1, [pc, #744]	; (80022a4 <set_default_description+0x304>)
 8001fba:	461a      	mov	r2, r3
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	cb03      	ldmia	r3!, {r0, r1}
 8001fc0:	6010      	str	r0, [r2, #0]
 8001fc2:	6051      	str	r1, [r2, #4]
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	8113      	strh	r3, [r2, #8]
    
  /***** IIS3DWB *****/
  iis3dwb_com_id = COM_AddSensor();
 8001fc8:	f7ff fe5e 	bl	8001c88 <COM_AddSensor>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4bb5      	ldr	r3, [pc, #724]	; (80022a8 <set_default_description+0x308>)
 8001fd2:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);
 8001fd4:	4bb4      	ldr	r3, [pc, #720]	; (80022a8 <set_default_description+0x308>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fe9f 	bl	8001d1c <COM_GetSensor>
 8001fde:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS3DWB"); 
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	49b1      	ldr	r1, [pc, #708]	; (80022ac <set_default_description+0x30c>)
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	460b      	mov	r3, r1
 8001fea:	cb03      	ldmia	r3!, {r0, r1}
 8001fec:	6010      	str	r0, [r2, #0]
 8001fee:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 26667.0f;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	4aad      	ldr	r2, [pc, #692]	; (80022b0 <set_default_description+0x310>)
 8001ffa:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  /* Terminate list */
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4aad      	ldr	r2, [pc, #692]	; (80022b4 <set_default_description+0x314>)
 8002000:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002010:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 26667.0f;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4aa4      	ldr	r2, [pc, #656]	; (80022b0 <set_default_description+0x310>)
 8002020:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800203e:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 3000;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002050:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS3DWB;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800205a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002064:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2203      	movs	r2, #3
 800207c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	335f      	adds	r3, #95	; 0x5f
 8002084:	4a8c      	ldr	r2, [pc, #560]	; (80022b8 <set_default_description+0x318>)
 8002086:	8811      	ldrh	r1, [r2, #0]
 8002088:	7892      	ldrb	r2, [r2, #2]
 800208a:	8019      	strh	r1, [r3, #0]
 800208c:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002094:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800209c:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80020a4:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80020ac:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	4a80      	ldr	r2, [pc, #512]	; (80022b4 <set_default_description+0x314>)
 80020b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80020bc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 80020ce:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80022bc <set_default_description+0x31c>
 80020d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc

  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80020ea:	4a75      	ldr	r2, [pc, #468]	; (80022c0 <set_default_description+0x320>)
 80020ec:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80020f4:	4a72      	ldr	r2, [pc, #456]	; (80022c0 <set_default_description+0x320>)
 80020f6:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80020fe:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <set_default_description+0x320>)
 8002100:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis3dwb_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS3DWB / (uint32_t)(IIS3DWB_Init_Param.ODR * 6); 
 8002102:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <set_default_description+0x320>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800210c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002114:	ee17 2a90 	vmov	r2, s15
 8002118:	4b63      	ldr	r3, [pc, #396]	; (80022a8 <set_default_description+0x308>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	4b69      	ldr	r3, [pc, #420]	; (80022c4 <set_default_description+0x324>)
 8002120:	fbb3 f3f2 	udiv	r3, r3, r2
 8002124:	4a68      	ldr	r2, [pc, #416]	; (80022c8 <set_default_description+0x328>)
 8002126:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /*****                                                                 *****/ 
  
  /***** HTS221 *****/
  hts221_com_id = COM_AddSensor();
 800212a:	f7ff fdad 	bl	8001c88 <COM_AddSensor>
 800212e:	4603      	mov	r3, r0
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b66      	ldr	r3, [pc, #408]	; (80022cc <set_default_description+0x32c>)
 8002134:	701a      	strb	r2, [r3, #0]
  tempSensor = COM_GetSensor(hts221_com_id);
 8002136:	4b65      	ldr	r3, [pc, #404]	; (80022cc <set_default_description+0x32c>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fdee 	bl	8001d1c <COM_GetSensor>
 8002140:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "HTS221"); 
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	4a62      	ldr	r2, [pc, #392]	; (80022d0 <set_default_description+0x330>)
 8002148:	6810      	ldr	r0, [r2, #0]
 800214a:	6018      	str	r0, [r3, #0]
 800214c:	8891      	ldrh	r1, [r2, #4]
 800214e:	7992      	ldrb	r2, [r2, #6]
 8002150:	8099      	strh	r1, [r3, #4]
 8002152:	719a      	strb	r2, [r3, #6]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2206      	movs	r2, #6
 8002158:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002160:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 7.0f;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	4a5b      	ldr	r2, [pc, #364]	; (80022d4 <set_default_description+0x334>)
 8002166:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 12.5f;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4a5b      	ldr	r2, [pc, #364]	; (80022d8 <set_default_description+0x338>)
 800216c:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = COM_END_OF_LIST_FLOAT;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <set_default_description+0x314>)
 8002172:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002182:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2202      	movs	r2, #2
 800218a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 12.5f;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	4a51      	ldr	r2, [pc, #324]	; (80022d8 <set_default_description+0x338>)
 8002192:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 50;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2232      	movs	r2, #50	; 0x32
 80021ae:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 16;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2210      	movs	r2, #16
 80021be:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_HTS221;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021c8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d2:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_TEMP; 
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2204      	movs	r2, #4
 80021e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	335f      	adds	r3, #95	; 0x5f
 80021f2:	493a      	ldr	r1, [pc, #232]	; (80022dc <set_default_description+0x33c>)
 80021f4:	461a      	mov	r2, r3
 80021f6:	460b      	mov	r3, r1
 80021f8:	cb03      	ldmia	r3!, {r0, r1}
 80021fa:	6010      	str	r0, [r2, #0]
 80021fc:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 120.0f; 
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	4a37      	ldr	r2, [pc, #220]	; (80022e0 <set_default_description+0x340>)
 8002202:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4a2b      	ldr	r2, [pc, #172]	; (80022b4 <set_default_description+0x314>)
 8002208:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 120.0f;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <set_default_description+0x340>)
 800220e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0f;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002220:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_HUM; 
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2206      	movs	r2, #6
 8002230:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 1;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "%");
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	33b3      	adds	r3, #179	; 0xb3
 8002240:	4928      	ldr	r1, [pc, #160]	; (80022e4 <set_default_description+0x344>)
 8002242:	461a      	mov	r2, r3
 8002244:	460b      	mov	r3, r1
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	8013      	strh	r3, [r2, #0]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 100.0f; 
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <set_default_description+0x348>)
 800224e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = COM_END_OF_LIST_FLOAT;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <set_default_description+0x314>)
 8002256:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 100.0f;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	4a22      	ldr	r2, [pc, #136]	; (80022e8 <set_default_description+0x348>)
 800225e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 1.0f;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002270:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
  
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <set_default_description+0x34c>)
 800227c:	6013      	str	r3, [r2, #0]
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <set_default_description+0x34c>)
 8002286:	6053      	str	r3, [r2, #4]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800228e:	4a17      	ldr	r2, [pc, #92]	; (80022ec <set_default_description+0x34c>)
 8002290:	6093      	str	r3, [r2, #8]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <set_default_description+0x34c>)
 800229a:	751a      	strb	r2, [r3, #20]
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80022a2:	e025      	b.n	80022f0 <set_default_description+0x350>
 80022a4:	080223cc 	.word	0x080223cc
 80022a8:	200163a4 	.word	0x200163a4
 80022ac:	080223d8 	.word	0x080223d8
 80022b0:	46d05600 	.word	0x46d05600
 80022b4:	bf800000 	.word	0xbf800000
 80022b8:	080223e0 	.word	0x080223e0
 80022bc:	3d79db23 	.word	0x3d79db23
 80022c0:	200102ec 	.word	0x200102ec
 80022c4:	01e84800 	.word	0x01e84800
 80022c8:	20016684 	.word	0x20016684
 80022cc:	200166b8 	.word	0x200166b8
 80022d0:	080223e4 	.word	0x080223e4
 80022d4:	40e00000 	.word	0x40e00000
 80022d8:	41480000 	.word	0x41480000
 80022dc:	080223ec 	.word	0x080223ec
 80022e0:	42f00000 	.word	0x42f00000
 80022e4:	080223f4 	.word	0x080223f4
 80022e8:	42c80000 	.word	0x42c80000
 80022ec:	2001025c 	.word	0x2001025c
 80022f0:	4b5e      	ldr	r3, [pc, #376]	; (800246c <set_default_description+0x4cc>)
 80022f2:	755a      	strb	r2, [r3, #21]
  
  maxWriteTimeSensor[hts221_com_id] = 1000 * WRITE_BUFFER_SIZE_HTS221 / (uint32_t)(HTS221_Init_Param.ODR * 8); 
 80022f4:	4b5d      	ldr	r3, [pc, #372]	; (800246c <set_default_description+0x4cc>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002306:	ee17 2a90 	vmov	r2, s15
 800230a:	4b59      	ldr	r3, [pc, #356]	; (8002470 <set_default_description+0x4d0>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	4619      	mov	r1, r3
 8002310:	4b58      	ldr	r3, [pc, #352]	; (8002474 <set_default_description+0x4d4>)
 8002312:	fbb3 f3f2 	udiv	r3, r3, r2
 8002316:	4a58      	ldr	r2, [pc, #352]	; (8002478 <set_default_description+0x4d8>)
 8002318:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /*****                                                                  *****/ 
    
  /***** IIS2DH *****/
  iis2dh_com_id = COM_AddSensor();
 800231c:	f7ff fcb4 	bl	8001c88 <COM_AddSensor>
 8002320:	4603      	mov	r3, r0
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b55      	ldr	r3, [pc, #340]	; (800247c <set_default_description+0x4dc>)
 8002326:	701a      	strb	r2, [r3, #0]
  tempSensor = COM_GetSensor(iis2dh_com_id);
 8002328:	4b54      	ldr	r3, [pc, #336]	; (800247c <set_default_description+0x4dc>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fcf5 	bl	8001d1c <COM_GetSensor>
 8002332:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS2DH"); 
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	4a51      	ldr	r2, [pc, #324]	; (8002480 <set_default_description+0x4e0>)
 800233a:	6810      	ldr	r0, [r2, #0]
 800233c:	6018      	str	r0, [r3, #0]
 800233e:	8891      	ldrh	r1, [r2, #4]
 8002340:	7992      	ldrb	r2, [r2, #6]
 8002342:	8099      	strh	r1, [r3, #4]
 8002344:	719a      	strb	r2, [r3, #6]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2203      	movs	r2, #3
 800234a:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002352:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 10.0f;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4a4b      	ldr	r2, [pc, #300]	; (8002484 <set_default_description+0x4e4>)
 8002358:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 25.0f;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	4a4a      	ldr	r2, [pc, #296]	; (8002488 <set_default_description+0x4e8>)
 800235e:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 50.0f;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4a4a      	ldr	r2, [pc, #296]	; (800248c <set_default_description+0x4ec>)
 8002364:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 100.0f;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	4a49      	ldr	r2, [pc, #292]	; (8002490 <set_default_description+0x4f0>)
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[5] = 200.0f;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4a49      	ldr	r2, [pc, #292]	; (8002494 <set_default_description+0x4f4>)
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 400.0f;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	4a48      	ldr	r2, [pc, #288]	; (8002498 <set_default_description+0x4f8>)
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = 1344.0f;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4a48      	ldr	r2, [pc, #288]	; (800249c <set_default_description+0x4fc>)
 800237c:	631a      	str	r2, [r3, #48]	; 0x30
  tempSensor->sensorDescriptor.ODR[8] = COM_END_OF_LIST_FLOAT;  
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	4a47      	ldr	r2, [pc, #284]	; (80024a0 <set_default_description+0x500>)
 8002382:	635a      	str	r2, [r3, #52]	; 0x34
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002392:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 1344.0f;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4a3e      	ldr	r2, [pc, #248]	; (800249c <set_default_description+0x4fc>)
 80023a2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023c0:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 2400;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80023d2:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS2DH;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80023dc:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e6:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	335f      	adds	r3, #95	; 0x5f
 8002406:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <set_default_description+0x504>)
 8002408:	8811      	ldrh	r1, [r2, #0]
 800240a:	7892      	ldrb	r2, [r2, #2]
 800240c:	8019      	strh	r1, [r3, #0]
 800240e:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002416:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800241e:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8002426:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800242e:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <set_default_description+0x500>)
 8002434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800243e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  if (tempSensor->sensorStatus.subSensorStatus[0].FS == 16.0f)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8002450:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002454:	eef4 7a47 	vcmp.f32	s15, s14
 8002458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245c:	d126      	bne.n	80024ac <set_default_description+0x50c>
  {
    tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.75f;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002464:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8002468:	e02e      	b.n	80024c8 <set_default_description+0x528>
 800246a:	bf00      	nop
 800246c:	2001025c 	.word	0x2001025c
 8002470:	200166b8 	.word	0x200166b8
 8002474:	0007a120 	.word	0x0007a120
 8002478:	20016684 	.word	0x20016684
 800247c:	200166c8 	.word	0x200166c8
 8002480:	080223f8 	.word	0x080223f8
 8002484:	41200000 	.word	0x41200000
 8002488:	41c80000 	.word	0x41c80000
 800248c:	42480000 	.word	0x42480000
 8002490:	42c80000 	.word	0x42c80000
 8002494:	43480000 	.word	0x43480000
 8002498:	43c80000 	.word	0x43c80000
 800249c:	44a80000 	.word	0x44a80000
 80024a0:	bf800000 	.word	0xbf800000
 80024a4:	080223e0 	.word	0x080223e0
 80024a8:	3d800000 	.word	0x3d800000
  }
  else
  {
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.0625f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 80024b2:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80024a8 <set_default_description+0x508>
 80024b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
  }
  
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80024ce:	4ab8      	ldr	r2, [pc, #736]	; (80027b0 <set_default_description+0x810>)
 80024d0:	6013      	str	r3, [r2, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80024d8:	4ab5      	ldr	r2, [pc, #724]	; (80027b0 <set_default_description+0x810>)
 80024da:	6053      	str	r3, [r2, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80024e2:	4bb3      	ldr	r3, [pc, #716]	; (80027b0 <set_default_description+0x810>)
 80024e4:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis2dh_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2DH / (uint32_t)(IIS2DH_Init_Param.ODR * 6);
 80024e6:	4bb2      	ldr	r3, [pc, #712]	; (80027b0 <set_default_description+0x810>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80024f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f8:	ee17 2a90 	vmov	r2, s15
 80024fc:	4bad      	ldr	r3, [pc, #692]	; (80027b4 <set_default_description+0x814>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	4bad      	ldr	r3, [pc, #692]	; (80027b8 <set_default_description+0x818>)
 8002504:	fbb3 f3f2 	udiv	r3, r3, r2
 8002508:	4aac      	ldr	r2, [pc, #688]	; (80027bc <set_default_description+0x81c>)
 800250a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* IIS2MDC */
  iis2mdc_com_id = COM_AddSensor();  
 800250e:	f7ff fbbb 	bl	8001c88 <COM_AddSensor>
 8002512:	4603      	mov	r3, r0
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4baa      	ldr	r3, [pc, #680]	; (80027c0 <set_default_description+0x820>)
 8002518:	701a      	strb	r2, [r3, #0]
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 800251a:	4ba9      	ldr	r3, [pc, #676]	; (80027c0 <set_default_description+0x820>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fbfc 	bl	8001d1c <COM_GetSensor>
 8002524:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS2MDC"); 
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	49a6      	ldr	r1, [pc, #664]	; (80027c4 <set_default_description+0x824>)
 800252c:	461a      	mov	r2, r3
 800252e:	460b      	mov	r3, r1
 8002530:	cb03      	ldmia	r3!, {r0, r1}
 8002532:	6010      	str	r0, [r2, #0]
 8002534:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2203      	movs	r2, #3
 800253a:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 10.0f;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4aa2      	ldr	r2, [pc, #648]	; (80027c8 <set_default_description+0x828>)
 8002540:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 20.0f;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	4aa1      	ldr	r2, [pc, #644]	; (80027cc <set_default_description+0x82c>)
 8002546:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 50.0f;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4aa1      	ldr	r2, [pc, #644]	; (80027d0 <set_default_description+0x830>)
 800254c:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 100.0f;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	4aa0      	ldr	r2, [pc, #640]	; (80027d4 <set_default_description+0x834>)
 8002552:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = COM_END_OF_LIST_FLOAT;  
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4aa0      	ldr	r2, [pc, #640]	; (80027d8 <set_default_description+0x838>)
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002568:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 100.0f;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4a97      	ldr	r2, [pc, #604]	; (80027d4 <set_default_description+0x834>)
 8002578:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 100;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2264      	movs	r2, #100	; 0x64
 8002594:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 600;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80025a6:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS2MDC;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80025b0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ba:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MAG; 
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2202      	movs	r2, #2
 80025ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2203      	movs	r2, #3
 80025d2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "gauss");
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	335f      	adds	r3, #95	; 0x5f
 80025da:	4a80      	ldr	r2, [pc, #512]	; (80027dc <set_default_description+0x83c>)
 80025dc:	6810      	ldr	r0, [r2, #0]
 80025de:	6018      	str	r0, [r3, #0]
 80025e0:	8892      	ldrh	r2, [r2, #4]
 80025e2:	809a      	strh	r2, [r3, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 50.0f; 
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4a7a      	ldr	r2, [pc, #488]	; (80027d0 <set_default_description+0x830>)
 80025e8:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	4a7a      	ldr	r2, [pc, #488]	; (80027d8 <set_default_description+0x838>)
 80025ee:	675a      	str	r2, [r3, #116]	; 0x74

  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 50.0f;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4a77      	ldr	r2, [pc, #476]	; (80027d0 <set_default_description+0x830>)
 80025f4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.5;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002606:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002610:	4a73      	ldr	r2, [pc, #460]	; (80027e0 <set_default_description+0x840>)
 8002612:	6013      	str	r3, [r2, #0]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800261a:	4a71      	ldr	r2, [pc, #452]	; (80027e0 <set_default_description+0x840>)
 800261c:	6053      	str	r3, [r2, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002624:	4b6e      	ldr	r3, [pc, #440]	; (80027e0 <set_default_description+0x840>)
 8002626:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis2mdc_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS2MDC / (uint32_t)(IIS2MDC_Init_Param.ODR * 6); 
 8002628:	4b6d      	ldr	r3, [pc, #436]	; (80027e0 <set_default_description+0x840>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263a:	ee17 2a90 	vmov	r2, s15
 800263e:	4b60      	ldr	r3, [pc, #384]	; (80027c0 <set_default_description+0x820>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <set_default_description+0x844>)
 8002646:	fbb3 f3f2 	udiv	r3, r3, r2
 800264a:	4a5c      	ldr	r2, [pc, #368]	; (80027bc <set_default_description+0x81c>)
 800264c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* IMP34DT05 */
  imp34dt05_com_id = COM_AddSensor();
 8002650:	f7ff fb1a 	bl	8001c88 <COM_AddSensor>
 8002654:	4603      	mov	r3, r0
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <set_default_description+0x848>)
 800265a:	701a      	strb	r2, [r3, #0]
   
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 800265c:	4b62      	ldr	r3, [pc, #392]	; (80027e8 <set_default_description+0x848>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fb5b 	bl	8001d1c <COM_GetSensor>
 8002666:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IMP34DT05"); 
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	495f      	ldr	r1, [pc, #380]	; (80027ec <set_default_description+0x84c>)
 800266e:	461a      	mov	r2, r3
 8002670:	460b      	mov	r3, r1
 8002672:	cb03      	ldmia	r3!, {r0, r1}
 8002674:	6010      	str	r0, [r2, #0]
 8002676:	6051      	str	r1, [r2, #4]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	8113      	strh	r3, [r2, #8]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2203      	movs	r2, #3
 8002680:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 48000.0f;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	4a5a      	ldr	r2, [pc, #360]	; (80027f0 <set_default_description+0x850>)
 8002686:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4a53      	ldr	r2, [pc, #332]	; (80027d8 <set_default_description+0x838>)
 800268c:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800269c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 48000.0f;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4a51      	ldr	r2, [pc, #324]	; (80027f0 <set_default_description+0x850>)
 80026ac:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026ca:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 4096;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026dc:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IMP34DT05;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80026e6:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f0:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;  
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MIC; 
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2207      	movs	r2, #7
 8002700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	335f      	adds	r3, #95	; 0x5f
 8002710:	4938      	ldr	r1, [pc, #224]	; (80027f4 <set_default_description+0x854>)
 8002712:	461a      	mov	r2, r3
 8002714:	460b      	mov	r3, r1
 8002716:	cb03      	ldmia	r3!, {r0, r1}
 8002718:	6010      	str	r0, [r2, #0]
 800271a:	6051      	str	r1, [r2, #4]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	7213      	strb	r3, [r2, #8]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 122.5f; 
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4a35      	ldr	r2, [pc, #212]	; (80027f8 <set_default_description+0x858>)
 8002724:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <set_default_description+0x838>)
 800272a:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 122.5f;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4a32      	ldr	r2, [pc, #200]	; (80027f8 <set_default_description+0x858>)
 8002730:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002742:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800274c:	4a2b      	ldr	r2, [pc, #172]	; (80027fc <set_default_description+0x85c>)
 800274e:	6013      	str	r3, [r2, #0]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002756:	4a29      	ldr	r2, [pc, #164]	; (80027fc <set_default_description+0x85c>)
 8002758:	6053      	str	r3, [r2, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <set_default_description+0x85c>)
 8002762:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[imp34dt05_com_id] = 1000 * WRITE_BUFFER_SIZE_IMP34DT05 / (uint32_t)(IMP34DT05_Init_Param.ODR * 2); 
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <set_default_description+0x85c>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800276e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002772:	ee17 2a90 	vmov	r2, s15
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <set_default_description+0x848>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	4619      	mov	r1, r3
 800277c:	4b20      	ldr	r3, [pc, #128]	; (8002800 <set_default_description+0x860>)
 800277e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <set_default_description+0x81c>)
 8002784:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
/**********/ 
  
  /* ISM330DHCX */
  ism330dhcx_com_id = COM_AddSensor();
 8002788:	f7ff fa7e 	bl	8001c88 <COM_AddSensor>
 800278c:	4603      	mov	r3, r0
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <set_default_description+0x864>)
 8002792:	701a      	strb	r2, [r3, #0]
  
    tempSensor = COM_GetSensor(ism330dhcx_com_id);
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <set_default_description+0x864>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fabf 	bl	8001d1c <COM_GetSensor>
 800279e:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "ISM330DHCX"); 
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	4918      	ldr	r1, [pc, #96]	; (8002808 <set_default_description+0x868>)
 80027a6:	461a      	mov	r2, r3
 80027a8:	460b      	mov	r3, r1
 80027aa:	cb03      	ldmia	r3!, {r0, r1}
 80027ac:	e02e      	b.n	800280c <set_default_description+0x86c>
 80027ae:	bf00      	nop
 80027b0:	20010288 	.word	0x20010288
 80027b4:	200166c8 	.word	0x200166c8
 80027b8:	007a1200 	.word	0x007a1200
 80027bc:	20016684 	.word	0x20016684
 80027c0:	20016679 	.word	0x20016679
 80027c4:	08022400 	.word	0x08022400
 80027c8:	41200000 	.word	0x41200000
 80027cc:	41a00000 	.word	0x41a00000
 80027d0:	42480000 	.word	0x42480000
 80027d4:	42c80000 	.word	0x42c80000
 80027d8:	bf800000 	.word	0xbf800000
 80027dc:	08022408 	.word	0x08022408
 80027e0:	200102c0 	.word	0x200102c0
 80027e4:	001e8480 	.word	0x001e8480
 80027e8:	200166c0 	.word	0x200166c0
 80027ec:	08022410 	.word	0x08022410
 80027f0:	473b8000 	.word	0x473b8000
 80027f4:	0802241c 	.word	0x0802241c
 80027f8:	42f50000 	.word	0x42f50000
 80027fc:	2001523c 	.word	0x2001523c
 8002800:	01e84800 	.word	0x01e84800
 8002804:	200166b9 	.word	0x200166b9
 8002808:	08022428 	.word	0x08022428
 800280c:	6010      	str	r0, [r2, #0]
 800280e:	6051      	str	r1, [r2, #4]
 8002810:	8819      	ldrh	r1, [r3, #0]
 8002812:	789b      	ldrb	r3, [r3, #2]
 8002814:	8111      	strh	r1, [r2, #8]
 8002816:	7293      	strb	r3, [r2, #10]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2203      	movs	r2, #3
 800281c:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 12.5f;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	4ab3      	ldr	r2, [pc, #716]	; (8002af0 <set_default_description+0xb50>)
 8002822:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 26.0f;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4ab3      	ldr	r2, [pc, #716]	; (8002af4 <set_default_description+0xb54>)
 8002828:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 52.0f;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	4ab2      	ldr	r2, [pc, #712]	; (8002af8 <set_default_description+0xb58>)
 800282e:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 104.0f;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4ab2      	ldr	r2, [pc, #712]	; (8002afc <set_default_description+0xb5c>)
 8002834:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 208.0f;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	4ab1      	ldr	r2, [pc, #708]	; (8002b00 <set_default_description+0xb60>)
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[5] = 417.0f;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4ab1      	ldr	r2, [pc, #708]	; (8002b04 <set_default_description+0xb64>)
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 833.0f;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	4ab0      	ldr	r2, [pc, #704]	; (8002b08 <set_default_description+0xb68>)
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = 1667.0f;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4ab0      	ldr	r2, [pc, #704]	; (8002b0c <set_default_description+0xb6c>)
 800284c:	631a      	str	r2, [r3, #48]	; 0x30
  tempSensor->sensorDescriptor.ODR[8] = 3333.0f;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	4aaf      	ldr	r2, [pc, #700]	; (8002b10 <set_default_description+0xb70>)
 8002852:	635a      	str	r2, [r3, #52]	; 0x34
  tempSensor->sensorDescriptor.ODR[9] = 6667.0f;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4aaf      	ldr	r2, [pc, #700]	; (8002b14 <set_default_description+0xb74>)
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
  tempSensor->sensorDescriptor.ODR[10] = COM_END_OF_LIST_FLOAT;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	4aae      	ldr	r2, [pc, #696]	; (8002b18 <set_default_description+0xb78>)
 800285e:	63da      	str	r2, [r3, #60]	; 0x3c
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800286e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 6667.0f;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	4aa5      	ldr	r2, [pc, #660]	; (8002b14 <set_default_description+0xb74>)
 800287e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800289c:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 2048;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ae:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_ISM330DHCX;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80028b8:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c2:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2203      	movs	r2, #3
 80028da:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg");
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	335f      	adds	r3, #95	; 0x5f
 80028e2:	4a8e      	ldr	r2, [pc, #568]	; (8002b1c <set_default_description+0xb7c>)
 80028e4:	8811      	ldrh	r1, [r2, #0]
 80028e6:	7892      	ldrb	r2, [r2, #2]
 80028e8:	8019      	strh	r1, [r3, #0]
 80028ea:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028f2:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80028fa:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8002902:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800290a:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_LIST_SEPARATOR_FLOAT;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8002912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800291c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f * tempSensor->sensorStatus.subSensorStatus[0].FS/2.0f;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 800292e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002b20 <set_default_description+0xb80>
 8002932:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002936:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800293a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_GYRO; 
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2203      	movs	r2, #3
 8002950:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 3;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2203      	movs	r2, #3
 8002958:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "mdps");
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	33b3      	adds	r3, #179	; 0xb3
 8002960:	4a70      	ldr	r2, [pc, #448]	; (8002b24 <set_default_description+0xb84>)
 8002962:	6810      	ldr	r0, [r2, #0]
 8002964:	6018      	str	r0, [r3, #0]
 8002966:	7912      	ldrb	r2, [r2, #4]
 8002968:	711a      	strb	r2, [r3, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 125.0f; 
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	4a6e      	ldr	r2, [pc, #440]	; (8002b28 <set_default_description+0xb88>)
 800296e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = 250.0f; 
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	4a6d      	ldr	r2, [pc, #436]	; (8002b2c <set_default_description+0xb8c>)
 8002976:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[2] = 500.0f; 
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	4a6c      	ldr	r2, [pc, #432]	; (8002b30 <set_default_description+0xb90>)
 800297e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[3] = 1000.0f; 
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	4a6b      	ldr	r2, [pc, #428]	; (8002b34 <set_default_description+0xb94>)
 8002986:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[4] = 2000.0f; 
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	4a6a      	ldr	r2, [pc, #424]	; (8002b38 <set_default_description+0xb98>)
 800298e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[5] = 4000.0f; 
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	4a69      	ldr	r2, [pc, #420]	; (8002b3c <set_default_description+0xb9c>)
 8002996:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[6] = COM_END_OF_LIST_FLOAT; 
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	4a5e      	ldr	r2, [pc, #376]	; (8002b18 <set_default_description+0xb78>)
 800299e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 4000.0f;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4a65      	ldr	r2, [pc, #404]	; (8002b3c <set_default_description+0xb9c>)
 80029a6:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 4.375f * tempSensor->sensorStatus.subSensorStatus[1].FS/125.0f;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80029b8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002b40 <set_default_description+0xba0>
 80029bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029c0:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002b44 <set_default_description+0xba4>
 80029c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	edc3 7a76 	vstr	s15, [r3, #472]	; 0x1d8
  
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80029d4:	4a5c      	ldr	r2, [pc, #368]	; (8002b48 <set_default_description+0xba8>)
 80029d6:	6013      	str	r3, [r2, #0]
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80029de:	4a5a      	ldr	r2, [pc, #360]	; (8002b48 <set_default_description+0xba8>)
 80029e0:	6053      	str	r3, [r2, #4]
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80029e8:	4a57      	ldr	r2, [pc, #348]	; (8002b48 <set_default_description+0xba8>)
 80029ea:	6093      	str	r3, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80029f2:	4b55      	ldr	r3, [pc, #340]	; (8002b48 <set_default_description+0xba8>)
 80029f4:	751a      	strb	r2, [r3, #20]
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80029fc:	4b52      	ldr	r3, [pc, #328]	; (8002b48 <set_default_description+0xba8>)
 80029fe:	755a      	strb	r2, [r3, #21]
  
  maxWriteTimeSensor[ism330dhcx_com_id] = 1000 * WRITE_BUFFER_SIZE_ISM330DHCX / (uint32_t)(ISM330DHCX_Init_Param.ODR * 12); 
 8002a00:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <set_default_description+0xba8>)
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a12:	ee17 2a90 	vmov	r2, s15
 8002a16:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <set_default_description+0xbac>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <set_default_description+0xbb0>)
 8002a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a22:	4a4c      	ldr	r2, [pc, #304]	; (8002b54 <set_default_description+0xbb4>)
 8002a24:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* LPS22HH */
  lps22hh_com_id = COM_AddSensor();
 8002a28:	f7ff f92e 	bl	8001c88 <COM_AddSensor>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	4b49      	ldr	r3, [pc, #292]	; (8002b58 <set_default_description+0xbb8>)
 8002a32:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(lps22hh_com_id);
 8002a34:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <set_default_description+0xbb8>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f96f 	bl	8001d1c <COM_GetSensor>
 8002a3e:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "LPS22HH"); 
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	4945      	ldr	r1, [pc, #276]	; (8002b5c <set_default_description+0xbbc>)
 8002a46:	461a      	mov	r2, r3
 8002a48:	460b      	mov	r3, r1
 8002a4a:	cb03      	ldmia	r3!, {r0, r1}
 8002a4c:	6010      	str	r0, [r2, #0]
 8002a4e:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2206      	movs	r2, #6
 8002a54:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a5c:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 10.0f;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	4a3f      	ldr	r2, [pc, #252]	; (8002b60 <set_default_description+0xbc0>)
 8002a62:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 25.0f;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4a3f      	ldr	r2, [pc, #252]	; (8002b64 <set_default_description+0xbc4>)
 8002a68:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = 50.0f;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	4a3e      	ldr	r2, [pc, #248]	; (8002b68 <set_default_description+0xbc8>)
 8002a6e:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.ODR[4] = 75.0f;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4a3e      	ldr	r2, [pc, #248]	; (8002b6c <set_default_description+0xbcc>)
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24
  tempSensor->sensorDescriptor.ODR[5] = 100.0f;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	4a3d      	ldr	r2, [pc, #244]	; (8002b70 <set_default_description+0xbd0>)
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
  tempSensor->sensorDescriptor.ODR[6] = 200.0f;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4a3d      	ldr	r2, [pc, #244]	; (8002b74 <set_default_description+0xbd4>)
 8002a80:	62da      	str	r2, [r3, #44]	; 0x2c
  tempSensor->sensorDescriptor.ODR[7] = COM_END_OF_LIST_FLOAT; 
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <set_default_description+0xb78>)
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30

  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 2;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 200.0f;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <set_default_description+0xbd4>)
 8002aa6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 200;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	22c8      	movs	r2, #200	; 0xc8
 8002ac2:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 1600;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002ad4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_LPS22HH;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002ade:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ae8:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 8002aec:	e044      	b.n	8002b78 <set_default_description+0xbd8>
 8002aee:	bf00      	nop
 8002af0:	41480000 	.word	0x41480000
 8002af4:	41d00000 	.word	0x41d00000
 8002af8:	42500000 	.word	0x42500000
 8002afc:	42d00000 	.word	0x42d00000
 8002b00:	43500000 	.word	0x43500000
 8002b04:	43d08000 	.word	0x43d08000
 8002b08:	44504000 	.word	0x44504000
 8002b0c:	44d06000 	.word	0x44d06000
 8002b10:	45505000 	.word	0x45505000
 8002b14:	45d05800 	.word	0x45d05800
 8002b18:	bf800000 	.word	0xbf800000
 8002b1c:	080223e0 	.word	0x080223e0
 8002b20:	3d79db23 	.word	0x3d79db23
 8002b24:	08022434 	.word	0x08022434
 8002b28:	42fa0000 	.word	0x42fa0000
 8002b2c:	437a0000 	.word	0x437a0000
 8002b30:	43fa0000 	.word	0x43fa0000
 8002b34:	447a0000 	.word	0x447a0000
 8002b38:	44fa0000 	.word	0x44fa0000
 8002b3c:	457a0000 	.word	0x457a0000
 8002b40:	408c0000 	.word	0x408c0000
 8002b44:	42fa0000 	.word	0x42fa0000
 8002b48:	20016370 	.word	0x20016370
 8002b4c:	200166b9 	.word	0x200166b9
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	20016684 	.word	0x20016684
 8002b58:	200166d1 	.word	0x200166d1
 8002b5c:	0802243c 	.word	0x0802243c
 8002b60:	41200000 	.word	0x41200000
 8002b64:	41c80000 	.word	0x41c80000
 8002b68:	42480000 	.word	0x42480000
 8002b6c:	42960000 	.word	0x42960000
 8002b70:	42c80000 	.word	0x42c80000
 8002b74:	43480000 	.word	0x43480000
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_PRESS; 
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2205      	movs	r2, #5
 8002b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "hPa");
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	335f      	adds	r3, #95	; 0x5f
 8002b94:	4aba      	ldr	r2, [pc, #744]	; (8002e80 <set_default_description+0xee0>)
 8002b96:	6810      	ldr	r0, [r2, #0]
 8002b98:	6018      	str	r0, [r3, #0]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 1260.0f; 
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	4ab9      	ldr	r2, [pc, #740]	; (8002e84 <set_default_description+0xee4>)
 8002b9e:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4ab9      	ldr	r2, [pc, #740]	; (8002e88 <set_default_description+0xee8>)
 8002ba4:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 1260.0f;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	4ab6      	ldr	r2, [pc, #728]	; (8002e84 <set_default_description+0xee4>)
 8002baa:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0f;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002bbc:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
    /* SUBSENSOR 1 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[1].id = 1;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  tempSensor->sensorDescriptor.subSensorDescriptor[1].sensorType = COM_TYPE_TEMP; 
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  tempSensor->sensorDescriptor.subSensorDescriptor[1].dataPerSample = 1;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[1].unit, "Celsius");
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	33b3      	adds	r3, #179	; 0xb3
 8002bdc:	49ab      	ldr	r1, [pc, #684]	; (8002e8c <set_default_description+0xeec>)
 8002bde:	461a      	mov	r2, r3
 8002be0:	460b      	mov	r3, r1
 8002be2:	cb03      	ldmia	r3!, {r0, r1}
 8002be4:	6010      	str	r0, [r2, #0]
 8002be6:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[0] = 85.0f; 
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4aa9      	ldr	r2, [pc, #676]	; (8002e90 <set_default_description+0xef0>)
 8002bec:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  tempSensor->sensorDescriptor.subSensorDescriptor[1].FS[1] = COM_END_OF_LIST_FLOAT;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4aa5      	ldr	r2, [pc, #660]	; (8002e88 <set_default_description+0xee8>)
 8002bf4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  
  /* SUBSENSOR 1 STATUS */
  tempSensor->sensorStatus.subSensorStatus[1].FS = 85.0f;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4aa5      	ldr	r2, [pc, #660]	; (8002e90 <set_default_description+0xef0>)
 8002bfc:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  tempSensor->sensorStatus.subSensorStatus[1].isActive = 1;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
  tempSensor->sensorStatus.subSensorStatus[1].sensitivity = 1.0f;   
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c0e:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
  
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002c18:	4a9e      	ldr	r2, [pc, #632]	; (8002e94 <set_default_description+0xef4>)
 8002c1a:	6013      	str	r3, [r2, #0]
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002c22:	4a9c      	ldr	r2, [pc, #624]	; (8002e94 <set_default_description+0xef4>)
 8002c24:	6053      	str	r3, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002c2c:	4a99      	ldr	r2, [pc, #612]	; (8002e94 <set_default_description+0xef4>)
 8002c2e:	6093      	str	r3, [r2, #8]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002c36:	4b97      	ldr	r3, [pc, #604]	; (8002e94 <set_default_description+0xef4>)
 8002c38:	751a      	strb	r2, [r3, #20]
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;  
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8002c40:	4b94      	ldr	r3, [pc, #592]	; (8002e94 <set_default_description+0xef4>)
 8002c42:	755a      	strb	r2, [r3, #21]
  
  maxWriteTimeSensor[lps22hh_com_id] = 1000 * WRITE_BUFFER_SIZE_LPS22HH / (uint32_t)(LPS22HH_Init_Param.ODR * 8); 
 8002c44:	4b93      	ldr	r3, [pc, #588]	; (8002e94 <set_default_description+0xef4>)
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c56:	ee17 2a90 	vmov	r2, s15
 8002c5a:	4b8f      	ldr	r3, [pc, #572]	; (8002e98 <set_default_description+0xef8>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4b8e      	ldr	r3, [pc, #568]	; (8002e9c <set_default_description+0xefc>)
 8002c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c66:	4a8e      	ldr	r2, [pc, #568]	; (8002ea0 <set_default_description+0xf00>)
 8002c68:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* MP23ABS1 */
  mp23abs1_com_id = COM_AddSensor();
 8002c6c:	f7ff f80c 	bl	8001c88 <COM_AddSensor>
 8002c70:	4603      	mov	r3, r0
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b8b      	ldr	r3, [pc, #556]	; (8002ea4 <set_default_description+0xf04>)
 8002c76:	701a      	strb	r2, [r3, #0]
  
   tempSensor = COM_GetSensor(mp23abs1_com_id);
 8002c78:	4b8a      	ldr	r3, [pc, #552]	; (8002ea4 <set_default_description+0xf04>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff f84d 	bl	8001d1c <COM_GetSensor>
 8002c82:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "MP23ABS1"); 
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	3301      	adds	r3, #1
 8002c88:	4987      	ldr	r1, [pc, #540]	; (8002ea8 <set_default_description+0xf08>)
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	cb03      	ldmia	r3!, {r0, r1}
 8002c90:	6010      	str	r0, [r2, #0]
 8002c92:	6051      	str	r1, [r2, #4]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	7213      	strb	r3, [r2, #8]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;  
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 192000.0f;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	4a82      	ldr	r2, [pc, #520]	; (8002eac <set_default_description+0xf0c>)
 8002ca2:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4a78      	ldr	r2, [pc, #480]	; (8002e88 <set_default_description+0xee8>)
 8002ca8:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 192000.0f;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4a79      	ldr	r2, [pc, #484]	; (8002eac <set_default_description+0xf0c>)
 8002cc8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ce6:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 4096;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cf8:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_MP23ABS1;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002d02:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d0c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_MIC; 
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Waveform");
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	335f      	adds	r3, #95	; 0x5f
 8002d2c:	4960      	ldr	r1, [pc, #384]	; (8002eb0 <set_default_description+0xf10>)
 8002d2e:	461a      	mov	r2, r3
 8002d30:	460b      	mov	r3, r1
 8002d32:	cb03      	ldmia	r3!, {r0, r1}
 8002d34:	6010      	str	r0, [r2, #0]
 8002d36:	6051      	str	r1, [r2, #4]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	7213      	strb	r3, [r2, #8]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 130.0f; 
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4a5d      	ldr	r2, [pc, #372]	; (8002eb4 <set_default_description+0xf14>)
 8002d40:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	4a50      	ldr	r2, [pc, #320]	; (8002e88 <set_default_description+0xee8>)
 8002d46:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 130.0f;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4a5a      	ldr	r2, [pc, #360]	; (8002eb4 <set_default_description+0xf14>)
 8002d4c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d5e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002d68:	4a53      	ldr	r2, [pc, #332]	; (8002eb8 <set_default_description+0xf18>)
 8002d6a:	6013      	str	r3, [r2, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002d72:	4a51      	ldr	r2, [pc, #324]	; (8002eb8 <set_default_description+0xf18>)
 8002d74:	6053      	str	r3, [r2, #4]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002d7c:	4b4e      	ldr	r3, [pc, #312]	; (8002eb8 <set_default_description+0xf18>)
 8002d7e:	751a      	strb	r2, [r3, #20]
    
  maxWriteTimeSensor[mp23abs1_com_id] = 1000 * WRITE_BUFFER_SIZE_MP23ABS1 / (uint32_t)(MP23ABS1_Init_Param.ODR * 2); 
 8002d80:	4b4d      	ldr	r3, [pc, #308]	; (8002eb8 <set_default_description+0xf18>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d8e:	ee17 2a90 	vmov	r2, s15
 8002d92:	4b44      	ldr	r3, [pc, #272]	; (8002ea4 <set_default_description+0xf04>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	4619      	mov	r1, r3
 8002d98:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <set_default_description+0xf1c>)
 8002d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d9e:	4a40      	ldr	r2, [pc, #256]	; (8002ea0 <set_default_description+0xf00>)
 8002da0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  /**********/ 
  
  /* STTS751 */
  stts751_com_id = COM_AddSensor();
 8002da4:	f7fe ff70 	bl	8001c88 <COM_AddSensor>
 8002da8:	4603      	mov	r3, r0
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b44      	ldr	r3, [pc, #272]	; (8002ec0 <set_default_description+0xf20>)
 8002dae:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(stts751_com_id);
 8002db0:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <set_default_description+0xf20>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe ffb1 	bl	8001d1c <COM_GetSensor>
 8002dba:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "STTS751"); 
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	4940      	ldr	r1, [pc, #256]	; (8002ec4 <set_default_description+0xf24>)
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	cb03      	ldmia	r3!, {r0, r1}
 8002dc8:	6010      	str	r0, [r2, #0]
 8002dca:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_FLOAT;  
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2206      	movs	r2, #6
 8002dd0:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 1.0f;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002dd8:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = 2.0f; 
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002de0:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.ODR[2] = 4.0f; 
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002de8:	61da      	str	r2, [r3, #28]
  tempSensor->sensorDescriptor.ODR[3] = COM_END_OF_LIST_FLOAT;  
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	4a26      	ldr	r2, [pc, #152]	; (8002e88 <set_default_description+0xee8>)
 8002dee:	621a      	str	r2, [r3, #32]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 4.0f;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002e10:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 20;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2214      	movs	r2, #20
 8002e2c:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 0;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 16;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_STTS751;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2264      	movs	r2, #100	; 0x64
 8002e44:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e4e:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_TEMP; 
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 1;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "Celsius");
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	335f      	adds	r3, #95	; 0x5f
 8002e6e:	4907      	ldr	r1, [pc, #28]	; (8002e8c <set_default_description+0xeec>)
 8002e70:	461a      	mov	r2, r3
 8002e72:	460b      	mov	r3, r1
 8002e74:	cb03      	ldmia	r3!, {r0, r1}
 8002e76:	6010      	str	r0, [r2, #0]
 8002e78:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 100.0f; 
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	e024      	b.n	8002ec8 <set_default_description+0xf28>
 8002e7e:	bf00      	nop
 8002e80:	08022444 	.word	0x08022444
 8002e84:	449d8000 	.word	0x449d8000
 8002e88:	bf800000 	.word	0xbf800000
 8002e8c:	080223ec 	.word	0x080223ec
 8002e90:	42aa0000 	.word	0x42aa0000
 8002e94:	2001638c 	.word	0x2001638c
 8002e98:	200166d1 	.word	0x200166d1
 8002e9c:	007a1200 	.word	0x007a1200
 8002ea0:	20016684 	.word	0x20016684
 8002ea4:	20016678 	.word	0x20016678
 8002ea8:	08022448 	.word	0x08022448
 8002eac:	483b8000 	.word	0x483b8000
 8002eb0:	0802241c 	.word	0x0802241c
 8002eb4:	43020000 	.word	0x43020000
 8002eb8:	2001681c 	.word	0x2001681c
 8002ebc:	03dfd240 	.word	0x03dfd240
 8002ec0:	200166d0 	.word	0x200166d0
 8002ec4:	08022454 	.word	0x08022454
 8002ec8:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <set_default_description+0xf9c>)
 8002eca:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = COM_END_OF_LIST_FLOAT;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <set_default_description+0xfa0>)
 8002ed0:	675a      	str	r2, [r3, #116]	; 0x74
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 100.0f;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <set_default_description+0xf9c>)
 8002ed6:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 1.0;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ee8:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <set_default_description+0xfa4>)
 8002ef4:	6013      	str	r3, [r2, #0]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002efc:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <set_default_description+0xfa4>)
 8002efe:	6053      	str	r3, [r2, #4]
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <set_default_description+0xfa4>)
 8002f08:	751a      	strb	r2, [r3, #20]

  maxWriteTimeSensor[stts751_com_id] = 1000 * WRITE_BUFFER_SIZE_STTS751 / (uint32_t)(STTS751_Init_Param.ODR * 4); 
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <set_default_description+0xfa4>)
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f1c:	ee17 2a90 	vmov	r2, s15
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <set_default_description+0xfa8>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <set_default_description+0xfac>)
 8002f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f2c:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <set_default_description+0xfb0>)
 8002f2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	42c80000 	.word	0x42c80000
 8002f40:	bf800000 	.word	0xbf800000
 8002f44:	20018b18 	.word	0x20018b18
 8002f48:	200166d0 	.word	0x200166d0
 8002f4c:	000186a0 	.word	0x000186a0
 8002f50:	20016684 	.word	0x20016684

08002f54 <update_sensorStatus>:

void update_sensorStatus(COM_SensorStatus_t * oldSensorStatus, COM_SensorStatus_t * newSensorStatus, uint8_t sID)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	71fb      	strb	r3, [r7, #7]
  /* Check differencies between oldSensorStatus and newSensorStatus, act properly*/
  /* ODR */
  if(oldSensorStatus->ODR != newSensorStatus->ODR)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	ed93 7a00 	vldr	s14, [r3]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f76:	d00f      	beq.n	8002f98 <update_sensorStatus+0x44>
  {
    if(COM_IsOdrLegal(newSensorStatus->ODR, sID))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	4618      	mov	r0, r3
 8002f82:	eeb0 0a67 	vmov.f32	s0, s15
 8002f86:	f7fe ff5b 	bl	8001e40 <COM_IsOdrLegal>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <update_sensorStatus+0x44>
    {
      oldSensorStatus->ODR = newSensorStatus->ODR; /* Todo Setters and getters */
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* isActive */
  if(oldSensorStatus->isActive != newSensorStatus->isActive)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	7b9a      	ldrb	r2, [r3, #14]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	7b9b      	ldrb	r3, [r3, #14]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d003      	beq.n	8002fac <update_sensorStatus+0x58>
  {
    oldSensorStatus->isActive = newSensorStatus->isActive;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	7b9a      	ldrb	r2, [r3, #14]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	739a      	strb	r2, [r3, #14]
  }
  
  /* subsensor: FS, is Active*/
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e054      	b.n	800305c <update_sensorStatus+0x108>
  {
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	331c      	adds	r3, #28
 8002fc2:	ed93 7a00 	vldr	s14, [r3]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	331c      	adds	r3, #28
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	eeb4 7a67 	vcmp.f32	s14, s15
 8002fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe2:	d011      	beq.n	8003008 <update_sensorStatus+0xb4>
    {
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	331c      	adds	r3, #28
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4403      	add	r3, r0
 8003004:	331c      	adds	r3, #28
 8003006:	6019      	str	r1, [r3, #0]
    }
    
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3324      	adds	r3, #36	; 0x24
 8003018:	7819      	ldrb	r1, [r3, #0]
 800301a:	68b8      	ldr	r0, [r7, #8]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4403      	add	r3, r0
 8003028:	3324      	adds	r3, #36	; 0x24
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	4299      	cmp	r1, r3
 800302e:	d012      	beq.n	8003056 <update_sensorStatus+0x102>
    {
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	3324      	adds	r3, #36	; 0x24
 8003040:	7818      	ldrb	r0, [r3, #0]
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3324      	adds	r3, #36	; 0x24
 8003052:	4602      	mov	r2, r0
 8003054:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3301      	adds	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fed8 	bl	8001e14 <COM_GetSubSensorNumber>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4293      	cmp	r3, r2
 800306c:	dba1      	blt.n	8002fb2 <update_sensorStatus+0x5e>
    }
  }
  
  if (sID == iis3dwb_com_id)
 800306e:	4b39      	ldr	r3, [pc, #228]	; (8003154 <update_sensorStatus+0x200>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	79fa      	ldrb	r2, [r7, #7]
 8003074:	429a      	cmp	r2, r3
 8003076:	d10e      	bne.n	8003096 <update_sensorStatus+0x142>
  {
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	edd3 7a07 	vldr	s15, [r3, #28]
 800307e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003158 <update_sensorStatus+0x204>
 8003082:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003086:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800308a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	edc3 7a08 	vstr	s15, [r3, #32]
 8003094:	e043      	b.n	800311e <update_sensorStatus+0x1ca>
  }
  else if (sID == iis2dh_com_id)
 8003096:	4b31      	ldr	r3, [pc, #196]	; (800315c <update_sensorStatus+0x208>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	79fa      	ldrb	r2, [r7, #7]
 800309c:	429a      	cmp	r2, r3
 800309e:	d11d      	bne.n	80030dc <update_sensorStatus+0x188>
  {    
    if (oldSensorStatus->subSensorStatus[0].FS == 16.0f)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80030a6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80030aa:	eef4 7a47 	vcmp.f32	s15, s14
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	d104      	bne.n	80030be <update_sensorStatus+0x16a>
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.75f;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80030ba:	621a      	str	r2, [r3, #32]
 80030bc:	e02f      	b.n	800311e <update_sensorStatus+0x1ca>
    }
    else
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.0625f *  oldSensorStatus->subSensorStatus[0].FS/2;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80030c4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003160 <update_sensorStatus+0x20c>
 80030c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	edc3 7a08 	vstr	s15, [r3, #32]
 80030da:	e020      	b.n	800311e <update_sensorStatus+0x1ca>
    }
  }
  else if (sID == ism330dhcx_com_id)
 80030dc:	4b21      	ldr	r3, [pc, #132]	; (8003164 <update_sensorStatus+0x210>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	79fa      	ldrb	r2, [r7, #7]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d11b      	bne.n	800311e <update_sensorStatus+0x1ca>
  {        
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	edd3 7a07 	vldr	s15, [r3, #28]
 80030ec:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003158 <update_sensorStatus+0x204>
 80030f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	edc3 7a08 	vstr	s15, [r3, #32]
    oldSensorStatus->subSensorStatus[1].sensitivity = 4.375f * oldSensorStatus->subSensorStatus[1].FS/125.0f;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003108:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003168 <update_sensorStatus+0x214>
 800310c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003110:	eddf 6a16 	vldr	s13, [pc, #88]	; 800316c <update_sensorStatus+0x218>
 8003114:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  }
  
  /* CHANNEL NUMBER */
  if(oldSensorStatus->comChannelNumber != newSensorStatus->comChannelNumber)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800312a:	429a      	cmp	r2, r3
 800312c:	d004      	beq.n	8003138 <update_sensorStatus+0x1e4>
  {
    oldSensorStatus->comChannelNumber = newSensorStatus->comChannelNumber; /* Todo Setters and getters */         
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	831a      	strh	r2, [r3, #24]
  }  
  
   /* CHANNEL NUMBER */
  if(oldSensorStatus->samplesPerTimestamp != newSensorStatus->samplesPerTimestamp)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	899a      	ldrh	r2, [r3, #12]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	899b      	ldrh	r3, [r3, #12]
 8003140:	429a      	cmp	r2, r3
 8003142:	d003      	beq.n	800314c <update_sensorStatus+0x1f8>
  {
    oldSensorStatus->samplesPerTimestamp = newSensorStatus->samplesPerTimestamp; /* Todo Setters and getters */         
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	899a      	ldrh	r2, [r3, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	819a      	strh	r2, [r3, #12]
  }  
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	200163a4 	.word	0x200163a4
 8003158:	3d79db23 	.word	0x3d79db23
 800315c:	200166c8 	.word	0x200166c8
 8003160:	3d800000 	.word	0x3d800000
 8003164:	200166b9 	.word	0x200166b9
 8003168:	408c0000 	.word	0x408c0000
 800316c:	42fa0000 	.word	0x42fa0000

08003170 <update_sensors_config>:

void update_sensors_config(void)
{  
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;  
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);  
 8003176:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <update_sensors_config+0x1c4>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fdce 	bl	8001d1c <COM_GetSensor>
 8003180:	6078      	str	r0, [r7, #4]
  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003188:	4a6b      	ldr	r2, [pc, #428]	; (8003338 <update_sensors_config+0x1c8>)
 800318a:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003192:	4a69      	ldr	r2, [pc, #420]	; (8003338 <update_sensors_config+0x1c8>)
 8003194:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800319c:	4b66      	ldr	r3, [pc, #408]	; (8003338 <update_sensors_config+0x1c8>)
 800319e:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(hts221_com_id);
 80031a0:	4b66      	ldr	r3, [pc, #408]	; (800333c <update_sensors_config+0x1cc>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fdb9 	bl	8001d1c <COM_GetSensor>
 80031aa:	6078      	str	r0, [r7, #4]
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80031b2:	4a63      	ldr	r2, [pc, #396]	; (8003340 <update_sensors_config+0x1d0>)
 80031b4:	6013      	str	r3, [r2, #0]
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80031bc:	4a60      	ldr	r2, [pc, #384]	; (8003340 <update_sensors_config+0x1d0>)
 80031be:	6053      	str	r3, [r2, #4]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80031c6:	4a5e      	ldr	r2, [pc, #376]	; (8003340 <update_sensors_config+0x1d0>)
 80031c8:	6093      	str	r3, [r2, #8]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80031d0:	4b5b      	ldr	r3, [pc, #364]	; (8003340 <update_sensors_config+0x1d0>)
 80031d2:	751a      	strb	r2, [r3, #20]
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80031da:	4b59      	ldr	r3, [pc, #356]	; (8003340 <update_sensors_config+0x1d0>)
 80031dc:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(iis2dh_com_id);
 80031de:	4b59      	ldr	r3, [pc, #356]	; (8003344 <update_sensors_config+0x1d4>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fd9a 	bl	8001d1c <COM_GetSensor>
 80031e8:	6078      	str	r0, [r7, #4]
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80031f0:	4a55      	ldr	r2, [pc, #340]	; (8003348 <update_sensors_config+0x1d8>)
 80031f2:	6013      	str	r3, [r2, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80031fa:	4a53      	ldr	r2, [pc, #332]	; (8003348 <update_sensors_config+0x1d8>)
 80031fc:	6053      	str	r3, [r2, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <update_sensors_config+0x1d8>)
 8003206:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 8003208:	4b50      	ldr	r3, [pc, #320]	; (800334c <update_sensors_config+0x1dc>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe fd85 	bl	8001d1c <COM_GetSensor>
 8003212:	6078      	str	r0, [r7, #4]
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800321a:	4a4d      	ldr	r2, [pc, #308]	; (8003350 <update_sensors_config+0x1e0>)
 800321c:	6013      	str	r3, [r2, #0]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003224:	4a4a      	ldr	r2, [pc, #296]	; (8003350 <update_sensors_config+0x1e0>)
 8003226:	6053      	str	r3, [r2, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800322e:	4b48      	ldr	r3, [pc, #288]	; (8003350 <update_sensors_config+0x1e0>)
 8003230:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 8003232:	4b48      	ldr	r3, [pc, #288]	; (8003354 <update_sensors_config+0x1e4>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fd70 	bl	8001d1c <COM_GetSensor>
 800323c:	6078      	str	r0, [r7, #4]
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003244:	4a44      	ldr	r2, [pc, #272]	; (8003358 <update_sensors_config+0x1e8>)
 8003246:	6013      	str	r3, [r2, #0]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800324e:	4a42      	ldr	r2, [pc, #264]	; (8003358 <update_sensors_config+0x1e8>)
 8003250:	6053      	str	r3, [r2, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003258:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <update_sensors_config+0x1e8>)
 800325a:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(ism330dhcx_com_id);
 800325c:	4b3f      	ldr	r3, [pc, #252]	; (800335c <update_sensors_config+0x1ec>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fd5b 	bl	8001d1c <COM_GetSensor>
 8003266:	6078      	str	r0, [r7, #4]
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800326e:	4a3c      	ldr	r2, [pc, #240]	; (8003360 <update_sensors_config+0x1f0>)
 8003270:	6013      	str	r3, [r2, #0]
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003278:	4a39      	ldr	r2, [pc, #228]	; (8003360 <update_sensors_config+0x1f0>)
 800327a:	6053      	str	r3, [r2, #4]
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8003282:	4a37      	ldr	r2, [pc, #220]	; (8003360 <update_sensors_config+0x1f0>)
 8003284:	6093      	str	r3, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800328c:	4b34      	ldr	r3, [pc, #208]	; (8003360 <update_sensors_config+0x1f0>)
 800328e:	751a      	strb	r2, [r3, #20]
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8003296:	4b32      	ldr	r3, [pc, #200]	; (8003360 <update_sensors_config+0x1f0>)
 8003298:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(lps22hh_com_id);
 800329a:	4b32      	ldr	r3, [pc, #200]	; (8003364 <update_sensors_config+0x1f4>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fd3c 	bl	8001d1c <COM_GetSensor>
 80032a4:	6078      	str	r0, [r7, #4]
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80032ac:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <update_sensors_config+0x1f8>)
 80032ae:	6013      	str	r3, [r2, #0]
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80032b6:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <update_sensors_config+0x1f8>)
 80032b8:	6053      	str	r3, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80032c0:	4a29      	ldr	r2, [pc, #164]	; (8003368 <update_sensors_config+0x1f8>)
 80032c2:	6093      	str	r3, [r2, #8]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <update_sensors_config+0x1f8>)
 80032cc:	751a      	strb	r2, [r3, #20]
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive; 
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <update_sensors_config+0x1f8>)
 80032d6:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(mp23abs1_com_id);
 80032d8:	4b24      	ldr	r3, [pc, #144]	; (800336c <update_sensors_config+0x1fc>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fd1d 	bl	8001d1c <COM_GetSensor>
 80032e2:	6078      	str	r0, [r7, #4]
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80032ea:	4a21      	ldr	r2, [pc, #132]	; (8003370 <update_sensors_config+0x200>)
 80032ec:	6013      	str	r3, [r2, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80032f4:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <update_sensors_config+0x200>)
 80032f6:	6053      	str	r3, [r2, #4]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80032fe:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <update_sensors_config+0x200>)
 8003300:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(stts751_com_id);
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <update_sensors_config+0x204>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fd08 	bl	8001d1c <COM_GetSensor>
 800330c:	6078      	str	r0, [r7, #4]
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003314:	4a18      	ldr	r2, [pc, #96]	; (8003378 <update_sensors_config+0x208>)
 8003316:	6013      	str	r3, [r2, #0]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800331e:	4a16      	ldr	r2, [pc, #88]	; (8003378 <update_sensors_config+0x208>)
 8003320:	6053      	str	r3, [r2, #4]
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8003328:	4b13      	ldr	r3, [pc, #76]	; (8003378 <update_sensors_config+0x208>)
 800332a:	751a      	strb	r2, [r3, #20]
  
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200163a4 	.word	0x200163a4
 8003338:	200102ec 	.word	0x200102ec
 800333c:	200166b8 	.word	0x200166b8
 8003340:	2001025c 	.word	0x2001025c
 8003344:	200166c8 	.word	0x200166c8
 8003348:	20010288 	.word	0x20010288
 800334c:	20016679 	.word	0x20016679
 8003350:	200102c0 	.word	0x200102c0
 8003354:	200166c0 	.word	0x200166c0
 8003358:	2001523c 	.word	0x2001523c
 800335c:	200166b9 	.word	0x200166b9
 8003360:	20016370 	.word	0x20016370
 8003364:	200166d1 	.word	0x200166d1
 8003368:	2001638c 	.word	0x2001638c
 800336c:	20016678 	.word	0x20016678
 8003370:	2001681c 	.word	0x2001681c
 8003374:	200166d0 	.word	0x200166d0
 8003378:	20018b18 	.word	0x20018b18

0800337c <HTS221_Set_State>:
  
  osSemaphoreRelease(hts221_data_ready_sem_id);    
}

void HTS221_Set_State(SM_Sensor_State_t newState)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
  HTS221_Sensor_State = newState;
 8003386:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HTS221_Set_State+0x1c>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	7013      	strb	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000001 	.word	0x20000001

0800339c <HTS221_Start>:
  HTS221_Init_Param.FS[0] = newFS1;
  HTS221_Init_Param.FS[0] = newFS2;
}

void HTS221_Start(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80033a0:	2003      	movs	r0, #3
 80033a2:	f7ff ffeb 	bl	800337c <HTS221_Set_State>
  osThreadResume(HTS221_Thread_Id);
 80033a6:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HTS221_Start+0x18>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f015 fbc8 	bl	8018b40 <osThreadResume>
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	2001027c 	.word	0x2001027c

080033b8 <HTS221_Stop>:

void HTS221_Stop(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_SUSPENDING);
 80033bc:	2001      	movs	r0, #1
 80033be:	f7ff ffdd 	bl	800337c <HTS221_Set_State>
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <IIS2DH_Set_State>:
{
  osSemaphoreRelease( iis2dh_DreadySem_id);    
}

void IIS2DH_Set_State(SM_Sensor_State_t newState)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  IIS2DH_Sensor_State = newState;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <IIS2DH_Set_State+0x1c>)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	7013      	strb	r3, [r2, #0]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	20000002 	.word	0x20000002

080033e8 <IIS2DH_Start>:
  IIS2DH_Init_Param.FS[0] = newFS1;
  IIS2DH_Init_Param.FS[0] = newFS2;
}

void IIS2DH_Start(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80033ec:	2003      	movs	r0, #3
 80033ee:	f7ff ffeb 	bl	80033c8 <IIS2DH_Set_State>
  osThreadResume(IIS2DH_Thread_Id);
 80033f2:	4b03      	ldr	r3, [pc, #12]	; (8003400 <IIS2DH_Start+0x18>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f015 fba2 	bl	8018b40 <osThreadResume>
}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200102a4 	.word	0x200102a4

08003404 <IIS2DH_Stop>:

void IIS2DH_Stop(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003408:	2001      	movs	r0, #1
 800340a:	f7ff ffdd 	bl	80033c8 <IIS2DH_Set_State>
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <IIS2MDC_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(iis2mdc_data_ready_sem_id);    
}

void IIS2MDC_Set_State(SM_Sensor_State_t newState)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  IIS2MDC_Sensor_State = newState;
 800341e:	4a04      	ldr	r2, [pc, #16]	; (8003430 <IIS2MDC_Set_State+0x1c>)
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	7013      	strb	r3, [r2, #0]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	20000003 	.word	0x20000003

08003434 <IIS2MDC_Start>:
  IIS2MDC_Init_Param.FS[0] = newFS1;
  IIS2MDC_Init_Param.FS[0] = newFS2;
}

void IIS2MDC_Start(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003438:	2003      	movs	r0, #3
 800343a:	f7ff ffeb 	bl	8003414 <IIS2MDC_Set_State>
  osThreadResume(IIS2MDC_Thread_Id);
 800343e:	4b03      	ldr	r3, [pc, #12]	; (800344c <IIS2MDC_Start+0x18>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f015 fb7c 	bl	8018b40 <osThreadResume>
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	200102d8 	.word	0x200102d8

08003450 <IIS2MDC_Stop>:

void IIS2MDC_Stop(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003454:	2001      	movs	r0, #1
 8003456:	f7ff ffdd 	bl	8003414 <IIS2MDC_Set_State>
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <IIS3DWB_Peripheral_Init>:
* @brief IIS3DWB GPIO Initialization Function
* @param None
* @retval None
*/
void IIS3DWB_Peripheral_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003466:	f107 0314 	add.w	r3, r7, #20
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	60da      	str	r2, [r3, #12]
 8003474:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
//  __HAL_RCC_GPIOE_CLK_ENABLE();
//  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();		//SPI2_CS
 8003476:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	4a3d      	ldr	r2, [pc, #244]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003482:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();		//SPI2_MOSI,SPI2_INT
 800348e:	4b38      	ldr	r3, [pc, #224]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	4a37      	ldr	r2, [pc, #220]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 8003494:	f043 0304 	orr.w	r3, r3, #4
 8003498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800349a:	4b35      	ldr	r3, [pc, #212]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 800349c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();		//SPI2_CLK,SPI2_MISO
 80034a6:	4b32      	ldr	r3, [pc, #200]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 80034a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034aa:	4a31      	ldr	r2, [pc, #196]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 80034ac:	f043 0308 	orr.w	r3, r3, #8
 80034b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034b2:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();		//SEL_3_4
 80034be:	4b2c      	ldr	r3, [pc, #176]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	4a2b      	ldr	r2, [pc, #172]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 80034c4:	f043 0320 	orr.w	r3, r3, #32
 80034c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ca:	4b29      	ldr	r3, [pc, #164]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 80034cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	607b      	str	r3, [r7, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();		//SEL_1_2
 80034d6:	4b26      	ldr	r3, [pc, #152]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	4a25      	ldr	r2, [pc, #148]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 80034dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034e2:	4b23      	ldr	r3, [pc, #140]	; (8003570 <IIS3DWB_Peripheral_Init+0x110>)
 80034e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);
 80034ee:	2201      	movs	r2, #1
 80034f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034f4:	481f      	ldr	r0, [pc, #124]	; (8003574 <IIS3DWB_Peripheral_Init+0x114>)
 80034f6:	f006 fabd 	bl	8009a74 <HAL_GPIO_WritePin>
  
  //Configure GPIO pin Output Level of 1_2_SEL and 3_4_SEL
  HAL_GPIO_WritePin(IIS3DWB_1_2_SEL_GPIO_Port, IIS3DWB_1_2_SEL_Pin, GPIO_PIN_RESET);
 80034fa:	2200      	movs	r2, #0
 80034fc:	2101      	movs	r1, #1
 80034fe:	481e      	ldr	r0, [pc, #120]	; (8003578 <IIS3DWB_Peripheral_Init+0x118>)
 8003500:	f006 fab8 	bl	8009a74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IIS3DWB_3_4_SEL_GPIO_Port, IIS3DWB_3_4_SEL_Pin, GPIO_PIN_SET);
 8003504:	2201      	movs	r2, #1
 8003506:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800350a:	481c      	ldr	r0, [pc, #112]	; (800357c <IIS3DWB_Peripheral_Init+0x11c>)
 800350c:	f006 fab2 	bl	8009a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IIS3DWB_SPI_CS_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 8003510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003516:	2301      	movs	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800351e:	2302      	movs	r3, #2
 8003520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8003522:	f107 0314 	add.w	r3, r7, #20
 8003526:	4619      	mov	r1, r3
 8003528:	4812      	ldr	r0, [pc, #72]	; (8003574 <IIS3DWB_Peripheral_Init+0x114>)
 800352a:	f006 f8f9 	bl	8009720 <HAL_GPIO_Init>
  
  /*Configure GPIO pins : STTS751_INT_Pin IIS3DWB_INT1_Pin */
  GPIO_InitStruct.Pin =  IIS3DWB_INT1_Pin ;
 800352e:	2320      	movs	r3, #32
 8003530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <IIS3DWB_Peripheral_Init+0x120>)
 8003534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);  
 800353a:	f107 0314 	add.w	r3, r7, #20
 800353e:	4619      	mov	r1, r3
 8003540:	4810      	ldr	r0, [pc, #64]	; (8003584 <IIS3DWB_Peripheral_Init+0x124>)
 8003542:	f006 f8ed 	bl	8009720 <HAL_GPIO_Init>
  
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2105      	movs	r1, #5
 800354a:	2017      	movs	r0, #23
 800354c:	f005 fe31 	bl	80091b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003550:	2017      	movs	r0, #23
 8003552:	f005 fe4a 	bl	80091ea <HAL_NVIC_EnableIRQ>
  HAL_EXTI_GetHandle(&iis3dwb_exti, EXTI_LINE_5);
 8003556:	490c      	ldr	r1, [pc, #48]	; (8003588 <IIS3DWB_Peripheral_Init+0x128>)
 8003558:	480c      	ldr	r0, [pc, #48]	; (800358c <IIS3DWB_Peripheral_Init+0x12c>)
 800355a:	f006 f89d 	bl	8009698 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&iis3dwb_exti,  HAL_EXTI_COMMON_CB_ID, IIS3DWB_Int_Callback);
 800355e:	4a0c      	ldr	r2, [pc, #48]	; (8003590 <IIS3DWB_Peripheral_Init+0x130>)
 8003560:	2100      	movs	r1, #0
 8003562:	480a      	ldr	r0, [pc, #40]	; (800358c <IIS3DWB_Peripheral_Init+0x12c>)
 8003564:	f006 f87e 	bl	8009664 <HAL_EXTI_RegisterCallback>
  
}
 8003568:	bf00      	nop
 800356a:	3728      	adds	r7, #40	; 0x28
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	48000400 	.word	0x48000400
 8003578:	48001800 	.word	0x48001800
 800357c:	48001400 	.word	0x48001400
 8003580:	10110000 	.word	0x10110000
 8003584:	48001000 	.word	0x48001000
 8003588:	16000005 	.word	0x16000005
 800358c:	20010304 	.word	0x20010304
 8003590:	08003939 	.word	0x08003939

08003594 <IIS3DWB_OS_Init>:
* @brief IIS3DWB Threads Creation
* @param None
* @retval None
*/
void IIS3DWB_OS_Init(void)
{  
 8003594:	b5b0      	push	{r4, r5, r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
  /* Data read complete semaphore initialization */  
  iis3dwb_data_read_cmplt_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_read_cmplt_sem), 1);
 800359a:	2101      	movs	r1, #1
 800359c:	481f      	ldr	r0, [pc, #124]	; (800361c <IIS3DWB_OS_Init+0x88>)
 800359e:	f015 f849 	bl	8018634 <osSemaphoreCreate>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <IIS3DWB_OS_Init+0x8c>)
 80035a6:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_read_cmplt_sem_id, "iis3dwb_data_read_cmplt_sem_id" );
 80035a8:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <IIS3DWB_OS_Init+0x8c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	491d      	ldr	r1, [pc, #116]	; (8003624 <IIS3DWB_OS_Init+0x90>)
 80035ae:	4618      	mov	r0, r3
 80035b0:	f016 fa4e 	bl	8019a50 <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_read_cmplt_sem_id,osWaitForever);
 80035b4:	4b1a      	ldr	r3, [pc, #104]	; (8003620 <IIS3DWB_OS_Init+0x8c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f04f 31ff 	mov.w	r1, #4294967295
 80035bc:	4618      	mov	r0, r3
 80035be:	f015 f85d 	bl	801867c <osSemaphoreWait>
  
  /* Data ready interrupt semaphore initialization */  
  iis3dwb_data_ready_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_ready_sem), 1);
 80035c2:	2101      	movs	r1, #1
 80035c4:	4818      	ldr	r0, [pc, #96]	; (8003628 <IIS3DWB_OS_Init+0x94>)
 80035c6:	f015 f835 	bl	8018634 <osSemaphoreCreate>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4a17      	ldr	r2, [pc, #92]	; (800362c <IIS3DWB_OS_Init+0x98>)
 80035ce:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_ready_sem_id, "iis3dwb_data_ready_sem_id" );
 80035d0:	4b16      	ldr	r3, [pc, #88]	; (800362c <IIS3DWB_OS_Init+0x98>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4916      	ldr	r1, [pc, #88]	; (8003630 <IIS3DWB_OS_Init+0x9c>)
 80035d6:	4618      	mov	r0, r3
 80035d8:	f016 fa3a 	bl	8019a50 <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);
 80035dc:	4b13      	ldr	r3, [pc, #76]	; (800362c <IIS3DWB_OS_Init+0x98>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f04f 31ff 	mov.w	r1, #4294967295
 80035e4:	4618      	mov	r0, r3
 80035e6:	f015 f849 	bl	801867c <osSemaphoreWait>
  

  /* Thread definition: read data */  
  osThreadDef(IIS3DWB_Acquisition_Thread, IIS3DWB_Thread, IIS3DWB_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);  
 80035ea:	4b12      	ldr	r3, [pc, #72]	; (8003634 <IIS3DWB_OS_Init+0xa0>)
 80035ec:	1d3c      	adds	r4, r7, #4
 80035ee:	461d      	mov	r5, r3
 80035f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  IIS3DWB_Thread_Id = osThreadCreate(osThread(IIS3DWB_Acquisition_Thread), NULL); 
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f014 fff2 	bl	80185e6 <osThreadCreate>
 8003602:	4603      	mov	r3, r0
 8003604:	4a0c      	ldr	r2, [pc, #48]	; (8003638 <IIS3DWB_OS_Init+0xa4>)
 8003606:	6013      	str	r3, [r2, #0]
  osThreadSuspend(IIS3DWB_Thread_Id);
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <IIS3DWB_OS_Init+0xa4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f015 fa8a 	bl	8018b26 <osThreadSuspend>
}
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bdb0      	pop	{r4, r5, r7, pc}
 800361a:	bf00      	nop
 800361c:	0802282c 	.word	0x0802282c
 8003620:	2000050c 	.word	0x2000050c
 8003624:	08022478 	.word	0x08022478
 8003628:	08022828 	.word	0x08022828
 800362c:	20000508 	.word	0x20000508
 8003630:	08022498 	.word	0x08022498
 8003634:	080224b4 	.word	0x080224b4
 8003638:	200102e8 	.word	0x200102e8

0800363c <IIS3DWB_Thread>:


static void IIS3DWB_Thread(void const *argument)
{
 800363c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003640:	b088      	sub	sp, #32
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  (void) argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_IIS3DWB_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_IIS3DWB_DEBUG_PIN );
 8003646:	2101      	movs	r1, #1
 8003648:	2000      	movs	r0, #0
 800364a:	f016 fefd 	bl	801a448 <vTaskSetApplicationTaskTag>
#endif
  
  uint8_t reg0;
  uint8_t reg1;
  
  volatile uint16_t fifo_level = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	823b      	strh	r3, [r7, #16]
  
  for (;;)
  {
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 8003652:	4bae      	ldr	r3, [pc, #696]	; (800390c <IIS3DWB_Thread+0x2d0>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b03      	cmp	r3, #3
 8003658:	f040 8094 	bne.w	8003784 <IIS3DWB_Thread+0x148>
    {  
      ts_iis3dwb = 0;
 800365c:	49ac      	ldr	r1, [pc, #688]	; (8003910 <IIS3DWB_Thread+0x2d4>)
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	e9c1 2300 	strd	r2, r3, [r1]
      tim_value_old = 0;
 800366a:	4baa      	ldr	r3, [pc, #680]	; (8003914 <IIS3DWB_Thread+0x2d8>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
      
      iis3dwb_device_id_get( &iis3dwb_ctx_instance, (uint8_t *)&reg0);
 8003670:	f107 0313 	add.w	r3, r7, #19
 8003674:	4619      	mov	r1, r3
 8003676:	48a8      	ldr	r0, [pc, #672]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 8003678:	f003 fa3b 	bl	8006af2 <iis3dwb_device_id_get>
      iis3dwb_reset_set(&iis3dwb_ctx_instance, 1);
 800367c:	2101      	movs	r1, #1
 800367e:	48a6      	ldr	r0, [pc, #664]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 8003680:	f003 fa48 	bl	8006b14 <iis3dwb_reset_set>
      iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 8003684:	f107 0213 	add.w	r2, r7, #19
 8003688:	2301      	movs	r3, #1
 800368a:	2110      	movs	r1, #16
 800368c:	48a2      	ldr	r0, [pc, #648]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 800368e:	f003 f9b4 	bl	80069fa <iis3dwb_read_reg>
      reg0 |= 0xA0;
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8003698:	b2db      	uxtb	r3, r3
 800369a:	74fb      	strb	r3, [r7, #19]
      iis3dwb_write_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 800369c:	f107 0213 	add.w	r2, r7, #19
 80036a0:	2301      	movs	r3, #1
 80036a2:	2110      	movs	r1, #16
 80036a4:	489c      	ldr	r0, [pc, #624]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 80036a6:	f003 f9c0 	bl	8006a2a <iis3dwb_write_reg>
      /*Set fifo in continuous / stream mode*/
      iis3dwb_i2c_interface_set(&iis3dwb_ctx_instance, IIS3DWB_I2C_DISABLE); 
 80036aa:	2101      	movs	r1, #1
 80036ac:	489a      	ldr	r0, [pc, #616]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 80036ae:	f003 faaf 	bl	8006c10 <iis3dwb_i2c_interface_set>
      iis3dwb_fifo_mode_set(&iis3dwb_ctx_instance, IIS3DWB_STREAM_MODE); 
 80036b2:	2106      	movs	r1, #6
 80036b4:	4898      	ldr	r0, [pc, #608]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 80036b6:	f003 fb49 	bl	8006d4c <iis3dwb_fifo_mode_set>
      /*Set watermark*/
      iis3dwb_fifo_watermark_set(&iis3dwb_ctx_instance, IIS3DWB_WTM_LEVEL);
 80036ba:	2180      	movs	r1, #128	; 0x80
 80036bc:	4896      	ldr	r0, [pc, #600]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 80036be:	f003 fae9 	bl	8006c94 <iis3dwb_fifo_watermark_set>
      /*Data Ready pulse mode*/
      iis3dwb_data_ready_mode_set(&iis3dwb_ctx_instance, IIS3DWB_DRDY_PULSED);
 80036c2:	2101      	movs	r1, #1
 80036c4:	4894      	ldr	r0, [pc, #592]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 80036c6:	f003 f9ee 	bl	8006aa6 <iis3dwb_data_ready_mode_set>
      /*Set full scale*/
      if(IIS3DWB_Init_Param.FS[0] < 3.0f)
 80036ca:	4b94      	ldr	r3, [pc, #592]	; (800391c <IIS3DWB_Thread+0x2e0>)
 80036cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80036d0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80036d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036dc:	d504      	bpl.n	80036e8 <IIS3DWB_Thread+0xac>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_2g);
 80036de:	2100      	movs	r1, #0
 80036e0:	488d      	ldr	r0, [pc, #564]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 80036e2:	f003 f9ba 	bl	8006a5a <iis3dwb_xl_full_scale_set>
 80036e6:	e02b      	b.n	8003740 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 5.0f)
 80036e8:	4b8c      	ldr	r3, [pc, #560]	; (800391c <IIS3DWB_Thread+0x2e0>)
 80036ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80036ee:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80036f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fa:	d504      	bpl.n	8003706 <IIS3DWB_Thread+0xca>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_4g);
 80036fc:	2102      	movs	r1, #2
 80036fe:	4886      	ldr	r0, [pc, #536]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 8003700:	f003 f9ab 	bl	8006a5a <iis3dwb_xl_full_scale_set>
 8003704:	e01c      	b.n	8003740 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 9.0f)
 8003706:	4b85      	ldr	r3, [pc, #532]	; (800391c <IIS3DWB_Thread+0x2e0>)
 8003708:	edd3 7a01 	vldr	s15, [r3, #4]
 800370c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003718:	d504      	bpl.n	8003724 <IIS3DWB_Thread+0xe8>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_8g);
 800371a:	2103      	movs	r1, #3
 800371c:	487e      	ldr	r0, [pc, #504]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 800371e:	f003 f99c 	bl	8006a5a <iis3dwb_xl_full_scale_set>
 8003722:	e00d      	b.n	8003740 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 17.0f)
 8003724:	4b7d      	ldr	r3, [pc, #500]	; (800391c <IIS3DWB_Thread+0x2e0>)
 8003726:	edd3 7a01 	vldr	s15, [r3, #4]
 800372a:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 800372e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003736:	d503      	bpl.n	8003740 <IIS3DWB_Thread+0x104>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_16g);
 8003738:	2101      	movs	r1, #1
 800373a:	4877      	ldr	r0, [pc, #476]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 800373c:	f003 f98d 	bl	8006a5a <iis3dwb_xl_full_scale_set>
      
      /*Set 2nd stage filter*/
      iis3dwb_xl_hp_path_on_out_set(&iis3dwb_ctx_instance,IIS3DWB_LP_5kHz);
 8003740:	2100      	movs	r1, #0
 8003742:	4875      	ldr	r0, [pc, #468]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 8003744:	f003 fa0c 	bl	8006b60 <iis3dwb_xl_hp_path_on_out_set>
      /* FIFO_WTM_IA routing on pin INT1 */
      iis3dwb_pin_int1_route_t pin_int1_route;
      *(uint8_t*)&(pin_int1_route.int1_ctrl) = 0;
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
      *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
 8003750:	f107 030c 	add.w	r3, r7, #12
 8003754:	3301      	adds	r3, #1
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
      pin_int1_route.int1_ctrl.int1_fifo_th = 1;
 800375a:	7b3b      	ldrb	r3, [r7, #12]
 800375c:	f043 0308 	orr.w	r3, r3, #8
 8003760:	733b      	strb	r3, [r7, #12]
      iis3dwb_pin_int1_route_set(&iis3dwb_ctx_instance, &pin_int1_route);
 8003762:	f107 030c 	add.w	r3, r7, #12
 8003766:	4619      	mov	r1, r3
 8003768:	486b      	ldr	r0, [pc, #428]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 800376a:	f003 fa77 	bl	8006c5c <iis3dwb_pin_int1_route_set>
      
      /*Enable writing to FIFO*/
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_BATCHED_AT_26k7Hz);
 800376e:	210a      	movs	r1, #10
 8003770:	4869      	ldr	r0, [pc, #420]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 8003772:	f003 fac5 	bl	8006d00 <iis3dwb_fifo_xl_batch_set>
      
      HAL_NVIC_EnableIRQ(IIS3DWB_INT1_EXTI_IRQn); 
 8003776:	2017      	movs	r0, #23
 8003778:	f005 fd37 	bl	80091ea <HAL_NVIC_EnableIRQ>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_RUNNING;      
 800377c:	4b63      	ldr	r3, [pc, #396]	; (800390c <IIS3DWB_Thread+0x2d0>)
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	e766      	b.n	8003652 <IIS3DWB_Thread+0x16>
    }
    else if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING)
 8003784:	4b61      	ldr	r3, [pc, #388]	; (800390c <IIS3DWB_Thread+0x2d0>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f040 80ad 	bne.w	80038e8 <IIS3DWB_Thread+0x2ac>
    {  
      osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);     
 800378e:	4b64      	ldr	r3, [pc, #400]	; (8003920 <IIS3DWB_Thread+0x2e4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f04f 31ff 	mov.w	r1, #4294967295
 8003796:	4618      	mov	r0, r3
 8003798:	f014 ff70 	bl	801867c <osSemaphoreWait>
      
      if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING) /* Change of state can happen while task blocked */
 800379c:	4b5b      	ldr	r3, [pc, #364]	; (800390c <IIS3DWB_Thread+0x2d0>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f47f af56 	bne.w	8003652 <IIS3DWB_Thread+0x16>
      {
        /* Check FIFO_WTM_IA anf fifo level. We do not use PID in order to avoid reading one register twice */
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS1, &reg0, 1);
 80037a6:	f107 0213 	add.w	r2, r7, #19
 80037aa:	2301      	movs	r3, #1
 80037ac:	213a      	movs	r1, #58	; 0x3a
 80037ae:	485a      	ldr	r0, [pc, #360]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 80037b0:	f003 f923 	bl	80069fa <iis3dwb_read_reg>
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS2, &reg1, 1);        
 80037b4:	f107 0212 	add.w	r2, r7, #18
 80037b8:	2301      	movs	r3, #1
 80037ba:	213b      	movs	r1, #59	; 0x3b
 80037bc:	4856      	ldr	r0, [pc, #344]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 80037be:	f003 f91c 	bl	80069fa <iis3dwb_read_reg>
        fifo_level = ((reg1 & 0x03) << 8) + reg0; 
 80037c2:	7cbb      	ldrb	r3, [r7, #18]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	823b      	strh	r3, [r7, #16]
        if((reg1) & 0x80  && (fifo_level>=IIS3DWB_SAMPLES_PER_IT) )
 80037d8:	7cbb      	ldrb	r3, [r7, #18]
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f6bf af38 	bge.w	8003652 <IIS3DWB_Thread+0x16>
 80037e2:	8a3b      	ldrh	r3, [r7, #16]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b7f      	cmp	r3, #127	; 0x7f
 80037e8:	f67f af33 	bls.w	8003652 <IIS3DWB_Thread+0x16>
        {        
          if(tim_value >= tim_value_old)
 80037ec:	4b4d      	ldr	r3, [pc, #308]	; (8003924 <IIS3DWB_Thread+0x2e8>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b48      	ldr	r3, [pc, #288]	; (8003914 <IIS3DWB_Thread+0x2d8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d307      	bcc.n	8003808 <IIS3DWB_Thread+0x1cc>
          {
            period = tim_value - tim_value_old;
 80037f8:	4b4a      	ldr	r3, [pc, #296]	; (8003924 <IIS3DWB_Thread+0x2e8>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b45      	ldr	r3, [pc, #276]	; (8003914 <IIS3DWB_Thread+0x2d8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	4a49      	ldr	r2, [pc, #292]	; (8003928 <IIS3DWB_Thread+0x2ec>)
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e007      	b.n	8003818 <IIS3DWB_Thread+0x1dc>
          }
          else
          {
            period = tim_value + (0xFFFFFFFF - tim_value_old);
 8003808:	4b46      	ldr	r3, [pc, #280]	; (8003924 <IIS3DWB_Thread+0x2e8>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b41      	ldr	r3, [pc, #260]	; (8003914 <IIS3DWB_Thread+0x2d8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	4a44      	ldr	r2, [pc, #272]	; (8003928 <IIS3DWB_Thread+0x2ec>)
 8003816:	6013      	str	r3, [r2, #0]
          }
          
          tim_value_old = tim_value;
 8003818:	4b42      	ldr	r3, [pc, #264]	; (8003924 <IIS3DWB_Thread+0x2e8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a3d      	ldr	r2, [pc, #244]	; (8003914 <IIS3DWB_Thread+0x2d8>)
 800381e:	6013      	str	r3, [r2, #0]
          ts_iis3dwb +=  period;
 8003820:	4b41      	ldr	r3, [pc, #260]	; (8003928 <IIS3DWB_Thread+0x2ec>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	4b39      	ldr	r3, [pc, #228]	; (8003910 <IIS3DWB_Thread+0x2d4>)
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	1884      	adds	r4, r0, r2
 8003832:	eb41 0503 	adc.w	r5, r1, r3
 8003836:	4b36      	ldr	r3, [pc, #216]	; (8003910 <IIS3DWB_Thread+0x2d4>)
 8003838:	e9c3 4500 	strd	r4, r5, [r3]
          
          uint16_t i = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	83fb      	strh	r3, [r7, #30]
          iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_DATA_OUT_TAG, (uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 7);
 8003840:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003844:	4a39      	ldr	r2, [pc, #228]	; (800392c <IIS3DWB_Thread+0x2f0>)
 8003846:	2178      	movs	r1, #120	; 0x78
 8003848:	4833      	ldr	r0, [pc, #204]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 800384a:	f003 f8d6 	bl	80069fa <iis3dwb_read_reg>
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
          }
#else
          int16_t * p16src = (int16_t *)iis3dwb_mem;
 800384e:	4b37      	ldr	r3, [pc, #220]	; (800392c <IIS3DWB_Thread+0x2f0>)
 8003850:	61bb      	str	r3, [r7, #24]
          int16_t * p16dest = (int16_t *)iis3dwb_mem;
 8003852:	4b36      	ldr	r3, [pc, #216]	; (800392c <IIS3DWB_Thread+0x2f0>)
 8003854:	617b      	str	r3, [r7, #20]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 8003856:	2300      	movs	r3, #0
 8003858:	83fb      	strh	r3, [r7, #30]
 800385a:	e020      	b.n	800389e <IIS3DWB_Thread+0x262>
          {      
            p16src = (int16_t *)&((uint8_t *)(p16src))[1];          
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	3301      	adds	r3, #1
 8003860:	61bb      	str	r3, [r7, #24]
            *p16dest++ = *p16src++;
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	1c93      	adds	r3, r2, #2
 8003866:	61bb      	str	r3, [r7, #24]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	1c99      	adds	r1, r3, #2
 800386c:	6179      	str	r1, [r7, #20]
 800386e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003872:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	1c93      	adds	r3, r2, #2
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	1c99      	adds	r1, r3, #2
 800387e:	6179      	str	r1, [r7, #20]
 8003880:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003884:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	1c93      	adds	r3, r2, #2
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	1c99      	adds	r1, r3, #2
 8003890:	6179      	str	r1, [r7, #20]
 8003892:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003896:	801a      	strh	r2, [r3, #0]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 8003898:	8bfb      	ldrh	r3, [r7, #30]
 800389a:	3301      	adds	r3, #1
 800389c:	83fb      	strh	r3, [r7, #30]
 800389e:	8bfb      	ldrh	r3, [r7, #30]
 80038a0:	2b7f      	cmp	r3, #127	; 0x7f
 80038a2:	d9db      	bls.n	800385c <IIS3DWB_Thread+0x220>
          }
#endif  
          IIS3DWB_Data_Ready((uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 6, (double)ts_iis3dwb/(double)SystemCoreClock);        
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <IIS3DWB_Thread+0x2d4>)
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	f7fc fe95 	bl	80005dc <__aeabi_ul2d>
 80038b2:	4680      	mov	r8, r0
 80038b4:	4689      	mov	r9, r1
 80038b6:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <IIS3DWB_Thread+0x2f4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fc fe4a 	bl	8000554 <__aeabi_ui2d>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4640      	mov	r0, r8
 80038c6:	4649      	mov	r1, r9
 80038c8:	f7fc ffe8 	bl	800089c <__aeabi_ddiv>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	ec43 2b17 	vmov	d7, r2, r3
 80038d4:	eeb0 0a47 	vmov.f32	s0, s14
 80038d8:	eef0 0a67 	vmov.f32	s1, s15
 80038dc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80038e0:	4812      	ldr	r0, [pc, #72]	; (800392c <IIS3DWB_Thread+0x2f0>)
 80038e2:	f000 fc7b 	bl	80041dc <IIS3DWB_Data_Ready>
 80038e6:	e6b4      	b.n	8003652 <IIS3DWB_Thread+0x16>
        }
      }
    }
    else if ( IIS3DWB_Sensor_State == SM_SENSOR_STATE_SUSPENDING)
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <IIS3DWB_Thread+0x2d0>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	f47f aeb0 	bne.w	8003652 <IIS3DWB_Thread+0x16>
    {
#ifdef DATA_TEST
      usbTestData = 0;
#endif      
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_NOT_BATCHED);
 80038f2:	2100      	movs	r1, #0
 80038f4:	4808      	ldr	r0, [pc, #32]	; (8003918 <IIS3DWB_Thread+0x2dc>)
 80038f6:	f003 fa03 	bl	8006d00 <iis3dwb_fifo_xl_batch_set>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_SUSPENDED;
 80038fa:	4b04      	ldr	r3, [pc, #16]	; (800390c <IIS3DWB_Thread+0x2d0>)
 80038fc:	2202      	movs	r2, #2
 80038fe:	701a      	strb	r2, [r3, #0]
      osThreadSuspend(IIS3DWB_Thread_Id);
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <IIS3DWB_Thread+0x2f8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f015 f90e 	bl	8018b26 <osThreadSuspend>
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 800390a:	e6a2      	b.n	8003652 <IIS3DWB_Thread+0x16>
 800390c:	20000004 	.word	0x20000004
 8003910:	200008a0 	.word	0x200008a0
 8003914:	20000894 	.word	0x20000894
 8003918:	20000018 	.word	0x20000018
 800391c:	200102ec 	.word	0x200102ec
 8003920:	20000508 	.word	0x20000508
 8003924:	20000890 	.word	0x20000890
 8003928:	20000898 	.word	0x20000898
 800392c:	20000510 	.word	0x20000510
 8003930:	20000038 	.word	0x20000038
 8003934:	200102e8 	.word	0x200102e8

08003938 <IIS3DWB_Int_Callback>:
}



static void IIS3DWB_Int_Callback(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  tim_value = hsm_tim.Instance->CNT;
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <IIS3DWB_Int_Callback+0x1c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	4a05      	ldr	r2, [pc, #20]	; (8003958 <IIS3DWB_Int_Callback+0x20>)
 8003944:	6013      	str	r3, [r2, #0]
  osSemaphoreRelease(iis3dwb_data_ready_sem_id);
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <IIS3DWB_Int_Callback+0x24>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f014 fee4 	bl	8018718 <osSemaphoreRelease>
}
 8003950:	bf00      	nop
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20018900 	.word	0x20018900
 8003958:	20000890 	.word	0x20000890
 800395c:	20000508 	.word	0x20000508

08003960 <IIS3DWB_Set_State>:


void IIS3DWB_Set_State(SM_Sensor_State_t newState)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  IIS3DWB_Sensor_State = newState;
 800396a:	4a04      	ldr	r2, [pc, #16]	; (800397c <IIS3DWB_Set_State+0x1c>)
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	7013      	strb	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	20000004 	.word	0x20000004

08003980 <IIS3DWB_Start>:
  IIS3DWB_Init_Param.FS[0] = newFS1;
  IIS3DWB_Init_Param.FS[0] = newFS2;
}

void IIS3DWB_Start(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003984:	2003      	movs	r0, #3
 8003986:	f7ff ffeb 	bl	8003960 <IIS3DWB_Set_State>
  osThreadResume(IIS3DWB_Thread_Id);
 800398a:	4b03      	ldr	r3, [pc, #12]	; (8003998 <IIS3DWB_Start+0x18>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f015 f8d6 	bl	8018b40 <osThreadResume>
}
 8003994:	bf00      	nop
 8003996:	bd80      	pop	{r7, pc}
 8003998:	200102e8 	.word	0x200102e8

0800399c <IIS3DWB_Stop>:

void IIS3DWB_Stop(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_SUSPENDING);  
 80039a0:	2001      	movs	r0, #1
 80039a2:	f7ff ffdd 	bl	8003960 <IIS3DWB_Set_State>
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <IMP34DT05_Set_State>:
  
}


void IMP34DT05_Set_State(SM_Sensor_State_t newState)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  IMP34DT05_Sensor_State = newState;
 80039b6:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <IMP34DT05_Set_State+0x1c>)
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	7013      	strb	r3, [r2, #0]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	20000024 	.word	0x20000024

080039cc <IMP34DT05_Start>:
  IMP34DT05_Init_Param.FS[0] = newFS1;
  IMP34DT05_Init_Param.FS[0] = newFS2;
}

void IMP34DT05_Start(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80039d0:	2003      	movs	r0, #3
 80039d2:	f7ff ffeb 	bl	80039ac <IMP34DT05_Set_State>
  osThreadResume(IMP34DT05_Thread_Id);
 80039d6:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <IMP34DT05_Start+0x18>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f015 f8b0 	bl	8018b40 <osThreadResume>
}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	2001030c 	.word	0x2001030c

080039e8 <IMP34DT05_Stop>:

void IMP34DT05_Stop(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_SUSPENDING);
 80039ec:	2001      	movs	r0, #1
 80039ee:	f7ff ffdd 	bl	80039ac <IMP34DT05_Set_State>
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <ISM330DHCX_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(ism330dhcx_DreadySem_id);    
}

void ISM330DHCX_Set_State(SM_Sensor_State_t newState)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  ISM330DHCX_Sensor_State = newState;
 8003a02:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <ISM330DHCX_Set_State+0x1c>)
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	7013      	strb	r3, [r2, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	20000025 	.word	0x20000025

08003a18 <ISM330DHCX_Start>:
  ISM330DHCX_Init_Param.FS[0] = newFS1;
  ISM330DHCX_Init_Param.FS[0] = newFS2;
}

void ISM330DHCX_Start(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003a1c:	2003      	movs	r0, #3
 8003a1e:	f7ff ffeb 	bl	80039f8 <ISM330DHCX_Set_State>
  osThreadResume(ISM330DHCX_Thread_Id);
 8003a22:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <ISM330DHCX_Start+0x18>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f015 f88a 	bl	8018b40 <osThreadResume>
}
 8003a2c:	bf00      	nop
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20016264 	.word	0x20016264

08003a34 <ISM330DHCX_Stop>:

void ISM330DHCX_Stop(void)
{  
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003a38:	2001      	movs	r0, #1
 8003a3a:	f7ff ffdd 	bl	80039f8 <ISM330DHCX_Set_State>
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <LPS22HH_Set_State>:
    }    
  }     
}

void LPS22HH_Set_State(SM_Sensor_State_t newState)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
  LPS22HH_Sensor_State = newState;
 8003a4e:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <LPS22HH_Set_State+0x1c>)
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	7013      	strb	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	20000026 	.word	0x20000026

08003a64 <LPS22HH_Start>:
  LPS22HH_Init_Param.FS[0] = newFS1;
  LPS22HH_Init_Param.FS[0] = newFS2;
}

void LPS22HH_Start(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003a68:	2003      	movs	r0, #3
 8003a6a:	f7ff ffeb 	bl	8003a44 <LPS22HH_Set_State>
  osThreadResume(LPS22HH_Thread_Id);
 8003a6e:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <LPS22HH_Start+0x18>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f015 f864 	bl	8018b40 <osThreadResume>
}
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20016388 	.word	0x20016388

08003a80 <LPS22HH_Stop>:

void LPS22HH_Stop(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8003a84:	2001      	movs	r0, #1
 8003a86:	f7ff ffdd 	bl	8003a44 <LPS22HH_Set_State>
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <main>:
* @brief  Main program
* @param  None
* @retval None
*/  
int main(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
  HAL_Init();
 8003a96:	f003 ff55 	bl	8007944 <HAL_Init>
  
  SystemClock_Config();
 8003a9a:	f000 f867 	bl	8003b6c <SystemClock_Config>
    
  /* Enable Power Clock*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <main+0x98>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <main+0x98>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aaa:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <main+0x98>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB(); 
 8003ab6:	f008 fe47 	bl	800c748 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8003aba:	f008 fe55 	bl	800c768 <HAL_PWREx_EnableVddIO2>
  BSP_Enable_DCDC2();
 8003abe:	f003 fa2b 	bl	8006f18 <BSP_Enable_DCDC2>
  
  /* Configure the Battery Charger */
  BattChrg_Init();
 8003ac2:	f000 f8eb 	bl	8003c9c <BattChrg_Init>
  
  /* Configure Power Voltage Detector(PVD) to detect if battery voltage is low */
  PVD_Config();
 8003ac6:	f000 f91d 	bl	8003d04 <PVD_Config>
  
  /* Configure DEBUG PIN and LED */
//  BSP_DEBUG_PIN_Init_All();
  BSP_LED_Init(LED1);
 8003aca:	2000      	movs	r0, #0
 8003acc:	f003 faa2 	bl	8007014 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f003 fa9f 	bl	8007014 <BSP_LED_Init>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad6:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <main+0x98>)
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <main+0x98>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <main+0x98>)
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]
   
  HSD_JSON_set_allocation_functions(HSD_malloc, HSD_free);  
 8003aee:	490f      	ldr	r1, [pc, #60]	; (8003b2c <main+0x9c>)
 8003af0:	480f      	ldr	r0, [pc, #60]	; (8003b30 <main+0xa0>)
 8003af2:	f7fd f927 	bl	8000d44 <HSD_JSON_set_allocation_functions>
  
  /* Start USB */  
  MX_USB_DEVICE_Init();
 8003af6:	f000 f81d 	bl	8003b34 <MX_USB_DEVICE_Init>
  
  /* Set default device description */
  set_default_description();
 8003afa:	f7fe fa51 	bl	8001fa0 <set_default_description>
  
  /* USER Button initialization */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003afe:	2101      	movs	r1, #1
 8003b00:	2000      	movs	r0, #0
 8003b02:	f003 fa35 	bl	8006f70 <BSP_PB_Init>
  BSP_PB_PWR_Init();
 8003b06:	f003 f9d7 	bl	8006eb8 <BSP_PB_PWR_Init>
  
  /* Sensor Manager initilization, only using PID (Platform Indepentent Drivers) */
  SM_Peripheral_Init();
 8003b0a:	f001 fe91 	bl	8005830 <SM_Peripheral_Init>
  SM_OS_Init();
 8003b0e:	f001 fca9 	bl	8005464 <SM_OS_Init>
  
  Peripheral_MSP_Init_All();  
 8003b12:	f000 fb7b 	bl	800420c <Peripheral_MSP_Init_All>
  SDM_Peripheral_Init();
 8003b16:	f000 ff1b 	bl	8004950 <SDM_Peripheral_Init>
  
  Peripheral_OS_Init_All();  
 8003b1a:	f000 fb7d 	bl	8004218 <Peripheral_OS_Init_All>
  SDM_OS_Init();
 8003b1e:	f000 ff1d 	bl	800495c <SDM_OS_Init>
  
  /* Start scheduler */
  osKernelStart();
 8003b22:	f014 fd59 	bl	80185d8 <osKernelStart>
  
  while(1);  
 8003b26:	e7fe      	b.n	8003b26 <main+0x96>
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	0801f2f5 	.word	0x0801f2f5
 8003b30:	0801f2e5 	.word	0x0801f2e5

08003b34 <MX_USB_DEVICE_Init>:
/**
* Init USB device Library, add supported class and start the library
* @retval None
*/
void MX_USB_DEVICE_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  USBD_Init(&USBD_Device, &WCID_STREAMING_Desc, 0);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	4908      	ldr	r1, [pc, #32]	; (8003b5c <MX_USB_DEVICE_Init+0x28>)
 8003b3c:	4808      	ldr	r0, [pc, #32]	; (8003b60 <MX_USB_DEVICE_Init+0x2c>)
 8003b3e:	f00f ff91 	bl	8013a64 <USBD_Init>
  /* Add Supported Class */
  USBD_RegisterClass(&USBD_Device, USBD_WCID_STREAMING_CLASS);
 8003b42:	4908      	ldr	r1, [pc, #32]	; (8003b64 <MX_USB_DEVICE_Init+0x30>)
 8003b44:	4806      	ldr	r0, [pc, #24]	; (8003b60 <MX_USB_DEVICE_Init+0x2c>)
 8003b46:	f00f ffb8 	bl	8013aba <USBD_RegisterClass>
  /* Add Interface callbacks for AUDIO and CDC Class */
  USBD_WCID_STREAMING_RegisterInterface(&USBD_Device, &USBD_WCID_STREAMING_fops);
 8003b4a:	4907      	ldr	r1, [pc, #28]	; (8003b68 <MX_USB_DEVICE_Init+0x34>)
 8003b4c:	4804      	ldr	r0, [pc, #16]	; (8003b60 <MX_USB_DEVICE_Init+0x2c>)
 8003b4e:	f00f fe20 	bl	8013792 <USBD_WCID_STREAMING_RegisterInterface>
  /* Start Device Process */  
  USBD_Start(&USBD_Device);
 8003b52:	4803      	ldr	r0, [pc, #12]	; (8003b60 <MX_USB_DEVICE_Init+0x2c>)
 8003b54:	f00f ffcb 	bl	8013aee <USBD_Start>
}
 8003b58:	bf00      	nop
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	2000003c 	.word	0x2000003c
 8003b60:	200163b4 	.word	0x200163b4
 8003b64:	200001bc 	.word	0x200001bc
 8003b68:	2000008c 	.word	0x2000008c

08003b6c <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b0be      	sub	sp, #248	; 0xf8
 8003b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b76:	2244      	movs	r2, #68	; 0x44
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f01b fbea 	bl	801f354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b80:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b90:	1d3b      	adds	r3, r7, #4
 8003b92:	229c      	movs	r2, #156	; 0x9c
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f01b fbdc 	bl	801f354 <memset>
  
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	f008 fd2f 	bl	800c600 <HAL_PWREx_ControlVoltageScaling>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <SystemClock_Config+0x40>
  {
    Error_Handler();
 8003ba8:	f000 fb3c 	bl	8004224 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003bac:	2321      	movs	r3, #33	; 0x21
 8003bae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 30;
 8003bd2:	231e      	movs	r3, #30
 8003bd4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8003bd8:	2305      	movs	r3, #5
 8003bda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003bde:	2302      	movs	r3, #2
 8003be0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003be4:	2302      	movs	r3, #2
 8003be6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f008 fe24 	bl	800c83c <HAL_RCC_OscConfig>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003bfa:	f000 fb13 	bl	8004224 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bfe:	230f      	movs	r3, #15
 8003c00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c04:	2303      	movs	r3, #3
 8003c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c1c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c20:	2105      	movs	r1, #5
 8003c22:	4618      	mov	r0, r3
 8003c24:	f009 fa30 	bl	800d088 <HAL_RCC_ClockConfig>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003c2e:	f000 faf9 	bl	8004224 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <SystemClock_Config+0x128>)
 8003c34:	607b      	str	r3, [r7, #4]
    |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
      |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_DFSDM1AUDIO;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003c36:	2300      	movs	r3, #0
 8003c38:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003c3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003c52:	2300      	movs	r3, #0
 8003c54:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8003c56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8003c60:	2305      	movs	r3, #5
 8003c62:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8003c64:	2360      	movs	r3, #96	; 0x60
 8003c66:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8003c68:	2319      	movs	r3, #25
 8003c6a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8003c70:	2304      	movs	r3, #4
 8003c72:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <SystemClock_Config+0x12c>)
 8003c76:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c78:	1d3b      	adds	r3, r7, #4
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f009 fc9c 	bl	800d5b8 <HAL_RCCEx_PeriphCLKConfig>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8003c86:	f000 facd 	bl	8004224 <Error_Handler>
  }  
}
 8003c8a:	bf00      	nop
 8003c8c:	37f8      	adds	r7, #248	; 0xf8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	00296880 	.word	0x00296880
 8003c98:	01010000 	.word	0x01010000

08003c9c <BattChrg_Init>:


void BattChrg_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  BSP_BC_Init();
 8003ca0:	f003 fa2e 	bl	8007100 <BSP_BC_Init>
  BSP_BC_BatMS_Init();
 8003ca4:	f003 fa70 	bl	8007188 <BSP_BC_BatMS_Init>
  BSP_BC_CmdSend(BATMS_ON);  
 8003ca8:	200a      	movs	r0, #10
 8003caa:	f003 fa31 	bl	8007110 <BSP_BC_CmdSend>
  
  HAL_EXTI_GetHandle(&BC_exti, EXTI_LINE_10);  
 8003cae:	4908      	ldr	r1, [pc, #32]	; (8003cd0 <BattChrg_Init+0x34>)
 8003cb0:	4808      	ldr	r0, [pc, #32]	; (8003cd4 <BattChrg_Init+0x38>)
 8003cb2:	f005 fcf1 	bl	8009698 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&BC_exti,  HAL_EXTI_COMMON_CB_ID, BC_Int_Callback);
 8003cb6:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <BattChrg_Init+0x3c>)
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4806      	ldr	r0, [pc, #24]	; (8003cd4 <BattChrg_Init+0x38>)
 8003cbc:	f005 fcd2 	bl	8009664 <HAL_EXTI_RegisterCallback>
  
  t_stwin = HAL_GetTick(); 
 8003cc0:	f003 feac 	bl	8007a1c <HAL_GetTick>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4a05      	ldr	r2, [pc, #20]	; (8003cdc <BattChrg_Init+0x40>)
 8003cc8:	6013      	str	r3, [r2, #0]
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	1600000a 	.word	0x1600000a
 8003cd4:	2001667c 	.word	0x2001667c
 8003cd8:	08003ce1 	.word	0x08003ce1
 8003cdc:	20000948 	.word	0x20000948

08003ce0 <BC_Int_Callback>:
* @brief  Battery Charger Interrupt callback
* @param  None
* @retval None
*/
void BC_Int_Callback(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  if(HAL_GetTick() - t_stwin > 4000)
 8003ce4:	f003 fe9a 	bl	8007a1c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <BC_Int_Callback+0x20>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003cf4:	d902      	bls.n	8003cfc <BC_Int_Callback+0x1c>
  {
    BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8003cf6:	2017      	movs	r0, #23
 8003cf8:	f003 fa0a 	bl	8007110 <BSP_BC_CmdSend>
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000948 	.word	0x20000948

08003d04 <PVD_Config>:
* @brief  Configures the PVD resources.
* @param  None
* @retval None
*/
void PVD_Config(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD;
  
  /*##-1- Enable Power Clock #################################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <PVD_Config+0x50>)
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	4a11      	ldr	r2, [pc, #68]	; (8003d54 <PVD_Config+0x50>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d14:	6593      	str	r3, [r2, #88]	; 0x58
 8003d16:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <PVD_Config+0x50>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	607b      	str	r3, [r7, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
  
  /*##-2- Configure the NVIC for PVD #########################################*/
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8003d22:	2200      	movs	r2, #0
 8003d24:	2100      	movs	r1, #0
 8003d26:	2001      	movs	r0, #1
 8003d28:	f005 fa43 	bl	80091b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	f005 fa5c 	bl	80091ea <HAL_NVIC_EnableIRQ>
  
  /* Configure the PVD Level to 6 and generate an interrupt on falling
  edge(PVD detection level set to 2.9V, refer to the electrical characteristics
  of you device datasheet for more details) */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8003d32:	230c      	movs	r3, #12
 8003d34:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8003d36:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003d3a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003d3c:	f107 0308 	add.w	r3, r7, #8
 8003d40:	4618      	mov	r0, r3
 8003d42:	f008 fbcd 	bl	800c4e0 <HAL_PWR_ConfigPVD>
  
  /* Enable the PVD Output */
  HAL_PWR_EnablePVD();
 8003d46:	f008 fc2b 	bl	800c5a0 <HAL_PWR_EnablePVD>
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000

08003d58 <vApplicationIdleHook>:


void vApplicationIdleHook( void )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT) 
  if(SD_Logging_Enabled)
 8003d5c:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <vApplicationIdleHook+0xfc>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <vApplicationIdleHook+0x10>
  {
    SDM_AutosaveFile();
 8003d64:	f001 fad8 	bl	8005318 <SDM_AutosaveFile>
  }
#endif
  
  if (!SD_Logging_Active)
 8003d68:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <vApplicationIdleHook+0x100>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d16f      	bne.n	8003e50 <vApplicationIdleHook+0xf8>
  {
    if(com_status == HS_DATALOG_USB_STARTED)
 8003d70:	4b3a      	ldr	r3, [pc, #232]	; (8003e5c <vApplicationIdleHook+0x104>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d121      	bne.n	8003dbe <vApplicationIdleHook+0x66>
    {
        if(!(HAL_GetTick()%100)) 
 8003d7a:	f003 fe4f 	bl	8007a1c <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <vApplicationIdleHook+0x108>)
 8003d82:	fba3 1302 	umull	r1, r3, r3, r2
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2164      	movs	r1, #100	; 0x64
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d103      	bne.n	8003d9c <vApplicationIdleHook+0x44>
        {
          BSP_LED_On(LED_ORANGE);
 8003d94:	2001      	movs	r0, #1
 8003d96:	f003 f97f 	bl	8007098 <BSP_LED_On>
          }
        }
      }
    }
  }
}
 8003d9a:	e059      	b.n	8003e50 <vApplicationIdleHook+0xf8>
          if(!(HAL_GetTick()%50)) 
 8003d9c:	f003 fe3e 	bl	8007a1c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b2f      	ldr	r3, [pc, #188]	; (8003e60 <vApplicationIdleHook+0x108>)
 8003da4:	fba3 1302 	umull	r1, r3, r3, r2
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	2132      	movs	r1, #50	; 0x32
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d14c      	bne.n	8003e50 <vApplicationIdleHook+0xf8>
            BSP_LED_Off(LED_ORANGE);
 8003db6:	2001      	movs	r0, #1
 8003db8:	f003 f988 	bl	80070cc <BSP_LED_Off>
}
 8003dbc:	e048      	b.n	8003e50 <vApplicationIdleHook+0xf8>
      if (!BSP_SD_IsDetected())
 8003dbe:	f003 fce5 	bl	800778c <BSP_SD_IsDetected>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d121      	bne.n	8003e0c <vApplicationIdleHook+0xb4>
        if(!(HAL_GetTick()%200)) 
 8003dc8:	f003 fe28 	bl	8007a1c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <vApplicationIdleHook+0x108>)
 8003dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	21c8      	movs	r1, #200	; 0xc8
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <vApplicationIdleHook+0x92>
          BSP_LED_On(LED_ORANGE);
 8003de2:	2001      	movs	r0, #1
 8003de4:	f003 f958 	bl	8007098 <BSP_LED_On>
}
 8003de8:	e032      	b.n	8003e50 <vApplicationIdleHook+0xf8>
          if(!(HAL_GetTick()%100)) 
 8003dea:	f003 fe17 	bl	8007a1c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <vApplicationIdleHook+0x108>)
 8003df2:	fba3 1302 	umull	r1, r3, r3, r2
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	2164      	movs	r1, #100	; 0x64
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d125      	bne.n	8003e50 <vApplicationIdleHook+0xf8>
            BSP_LED_Off(LED_ORANGE);
 8003e04:	2001      	movs	r0, #1
 8003e06:	f003 f961 	bl	80070cc <BSP_LED_Off>
}
 8003e0a:	e021      	b.n	8003e50 <vApplicationIdleHook+0xf8>
        if(!(HAL_GetTick()%1000)) 
 8003e0c:	f003 fe06 	bl	8007a1c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <vApplicationIdleHook+0x10c>)
 8003e14:	fba3 1302 	umull	r1, r3, r3, r2
 8003e18:	099b      	lsrs	r3, r3, #6
 8003e1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d103      	bne.n	8003e30 <vApplicationIdleHook+0xd8>
          BSP_LED_On(LED_ORANGE);
 8003e28:	2001      	movs	r0, #1
 8003e2a:	f003 f935 	bl	8007098 <BSP_LED_On>
}
 8003e2e:	e00f      	b.n	8003e50 <vApplicationIdleHook+0xf8>
          if(!(HAL_GetTick()%50)) 
 8003e30:	f003 fdf4 	bl	8007a1c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <vApplicationIdleHook+0x108>)
 8003e38:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	2132      	movs	r1, #50	; 0x32
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <vApplicationIdleHook+0xf8>
            BSP_LED_Off(LED_ORANGE);
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f003 f93e 	bl	80070cc <BSP_LED_Off>
}
 8003e50:	bf00      	nop
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000990 	.word	0x20000990
 8003e58:	2000097c 	.word	0x2000097c
 8003e5c:	20000504 	.word	0x20000504
 8003e60:	51eb851f 	.word	0x51eb851f
 8003e64:	10624dd3 	.word	0x10624dd3

08003e68 <SENSOR_Generic_Data_Ready>:
* @param  size: input data buffer size [bytes]
* @param  timeStamp: timestamp of the latest sample in the input buffer
* @retval 
*/
void SENSOR_Generic_Data_Ready(uint16_t sId, uint8_t *buf, uint16_t size, double timeStamp)
{ 
 8003e68:	b5b0      	push	{r4, r5, r7, lr}
 8003e6a:	b08c      	sub	sp, #48	; 0x30
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	ed87 0b00 	vstr	d0, [r7]
 8003e76:	81fb      	strh	r3, [r7, #14]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	81bb      	strh	r3, [r7, #12]
  COM_SensorStatus_t * tempStatus = COM_GetSensorStatus(sId);    
 8003e7c:	89fb      	ldrh	r3, [r7, #14]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fd ff73 	bl	8001d6c <COM_GetSensorStatus>
 8003e86:	6238      	str	r0, [r7, #32]
  COM_SensorDescriptor_t * tempDescriptor = COM_GetSensorDescriptor(sId); 
 8003e88:	89fb      	ldrh	r3, [r7, #14]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fd ff59 	bl	8001d44 <COM_GetSensorDescriptor>
 8003e92:	61f8      	str	r0, [r7, #28]
  COM_SubSensorDescriptor_t *tempSubSensorDescriptor; 
  uint16_t toSend = 0, nBytesPerSample = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003e98:	2300      	movs	r3, #0
 8003e9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  
  if (sensor_first_dataReady[sId]) // Discard first set of sensor data
 8003e9c:	89fb      	ldrh	r3, [r7, #14]
 8003e9e:	4a89      	ldr	r2, [pc, #548]	; (80040c4 <SENSOR_Generic_Data_Ready+0x25c>)
 8003ea0:	5cd3      	ldrb	r3, [r2, r3]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d020      	beq.n	8003ee8 <SENSOR_Generic_Data_Ready+0x80>
  {
    sensor_first_dataReady[sId] = 0;    
 8003ea6:	89fb      	ldrh	r3, [r7, #14]
 8003ea8:	4a86      	ldr	r2, [pc, #536]	; (80040c4 <SENSOR_Generic_Data_Ready+0x25c>)
 8003eaa:	2100      	movs	r1, #0
 8003eac:	54d1      	strb	r1, [r2, r3]
    sensor_n_samples_acc[sId] = 0.0f;    
 8003eae:	89fb      	ldrh	r3, [r7, #14]
 8003eb0:	4a85      	ldr	r2, [pc, #532]	; (80040c8 <SENSOR_Generic_Data_Ready+0x260>)
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
    tempStatus->initialOffset = (float)timeStamp;
 8003ebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ec0:	f7fc feba 	bl	8000c38 <__aeabi_d2f>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	609a      	str	r2, [r3, #8]
    old_time_stamp[sId] = timeStamp;
 8003eca:	89fb      	ldrh	r3, [r7, #14]
 8003ecc:	4a7f      	ldr	r2, [pc, #508]	; (80040cc <SENSOR_Generic_Data_Ready+0x264>)
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	18d1      	adds	r1, r2, r3
 8003ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ed6:	e9c1 2300 	strd	r2, r3, [r1]
    sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;
 8003eda:	89fb      	ldrh	r3, [r7, #14]
 8003edc:	6a3a      	ldr	r2, [r7, #32]
 8003ede:	8991      	ldrh	r1, [r2, #12]
 8003ee0:	4a7b      	ldr	r2, [pc, #492]	; (80040d0 <SENSOR_Generic_Data_Ready+0x268>)
 8003ee2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
      }      
    }    
  }    
}
 8003ee6:	e16c      	b.n	80041c2 <SENSOR_Generic_Data_Ready+0x35a>
    if(tempDescriptor->dataType == DATA_TYPE_FLOAT || tempDescriptor->dataType == DATA_TYPE_INT32 || tempDescriptor->dataType == DATA_TYPE_UINT32) 
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	7c5b      	ldrb	r3, [r3, #17]
 8003eec:	2b06      	cmp	r3, #6
 8003eee:	d007      	beq.n	8003f00 <SENSOR_Generic_Data_Ready+0x98>
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	7c5b      	ldrb	r3, [r3, #17]
 8003ef4:	2b05      	cmp	r3, #5
 8003ef6:	d003      	beq.n	8003f00 <SENSOR_Generic_Data_Ready+0x98>
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	7c5b      	ldrb	r3, [r3, #17]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d102      	bne.n	8003f06 <SENSOR_Generic_Data_Ready+0x9e>
      nBytesPerSample = 4;
 8003f00:	2304      	movs	r3, #4
 8003f02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f04:	e014      	b.n	8003f30 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT16 || tempDescriptor->dataType == DATA_TYPE_INT16) 
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	7c5b      	ldrb	r3, [r3, #17]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d003      	beq.n	8003f16 <SENSOR_Generic_Data_Ready+0xae>
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	7c5b      	ldrb	r3, [r3, #17]
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d102      	bne.n	8003f1c <SENSOR_Generic_Data_Ready+0xb4>
      nBytesPerSample = 2;
 8003f16:	2302      	movs	r3, #2
 8003f18:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f1a:	e009      	b.n	8003f30 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT8 || tempDescriptor->dataType == DATA_TYPE_INT8) 
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	7c5b      	ldrb	r3, [r3, #17]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <SENSOR_Generic_Data_Ready+0xc4>
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	7c5b      	ldrb	r3, [r3, #17]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <SENSOR_Generic_Data_Ready+0xc8>
      nBytesPerSample = 1;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint8_t totalDataPerSample = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003f36:	2300      	movs	r3, #0
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3a:	e01d      	b.n	8003f78 <SENSOR_Generic_Data_Ready+0x110>
      if (tempStatus->subSensorStatus[i].isActive)
 8003f3c:	6a39      	ldr	r1, [r7, #32]
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f40:	4613      	mov	r3, r2
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	3324      	adds	r3, #36	; 0x24
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00f      	beq.n	8003f72 <SENSOR_Generic_Data_Ready+0x10a>
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 8003f52:	89fb      	ldrh	r3, [r7, #14]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fd ff1b 	bl	8001d98 <COM_GetSubSensorDescriptor>
 8003f62:	61b8      	str	r0, [r7, #24]
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	789a      	ldrb	r2, [r3, #2]
 8003f68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	3301      	adds	r3, #1
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f7e:	461a      	mov	r2, r3
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	4293      	cmp	r3, r2
 8003f84:	dbda      	blt.n	8003f3c <SENSOR_Generic_Data_Ready+0xd4>
    nBytesPerSample *= totalDataPerSample;
 8003f86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003f8e:	fb12 f303 	smulbb	r3, r2, r3
 8003f92:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sensor_n_samples_acc[sId] = (float)(size / nBytesPerSample);
 8003f94:	89ba      	ldrh	r2, [r7, #12]
 8003f96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	89fb      	ldrh	r3, [r7, #14]
 8003fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa8:	4a47      	ldr	r2, [pc, #284]	; (80040c8 <SENSOR_Generic_Data_Ready+0x260>)
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	edc3 7a00 	vstr	s15, [r3]
    tempStatus->measuredODR = sensor_n_samples_acc[sId]/(timeStamp - old_time_stamp[sId]);
 8003fb2:	89fb      	ldrh	r3, [r7, #14]
 8003fb4:	4a44      	ldr	r2, [pc, #272]	; (80040c8 <SENSOR_Generic_Data_Ready+0x260>)
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc faeb 	bl	8000598 <__aeabi_f2d>
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	460d      	mov	r5, r1
 8003fc6:	89fb      	ldrh	r3, [r7, #14]
 8003fc8:	4a40      	ldr	r2, [pc, #256]	; (80040cc <SENSOR_Generic_Data_Ready+0x264>)
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fd6:	f7fc f97f 	bl	80002d8 <__aeabi_dsub>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4620      	mov	r0, r4
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	f7fc fc5b 	bl	800089c <__aeabi_ddiv>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4610      	mov	r0, r2
 8003fec:	4619      	mov	r1, r3
 8003fee:	f7fc fe23 	bl	8000c38 <__aeabi_d2f>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	605a      	str	r2, [r3, #4]
    old_time_stamp[sId] = timeStamp;
 8003ff8:	89fb      	ldrh	r3, [r7, #14]
 8003ffa:	4a34      	ldr	r2, [pc, #208]	; (80040cc <SENSOR_Generic_Data_Ready+0x264>)
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	18d1      	adds	r1, r2, r3
 8004000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004004:	e9c1 2300 	strd	r2, r3, [r1]
    toSend = size/nBytesPerSample;
 8004008:	89ba      	ldrh	r2, [r7, #12]
 800400a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800400c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004010:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while(toSend > 0)
 8004012:	e0d2      	b.n	80041ba <SENSOR_Generic_Data_Ready+0x352>
      if(toSend < sensor_n_samples_to_timestamp[sId] || sensor_n_samples_to_timestamp[sId] == 0)
 8004014:	89fb      	ldrh	r3, [r7, #14]
 8004016:	4a2e      	ldr	r2, [pc, #184]	; (80040d0 <SENSOR_Generic_Data_Ready+0x268>)
 8004018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800401c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800401e:	429a      	cmp	r2, r3
 8004020:	d305      	bcc.n	800402e <SENSOR_Generic_Data_Ready+0x1c6>
 8004022:	89fb      	ldrh	r3, [r7, #14]
 8004024:	4a2a      	ldr	r2, [pc, #168]	; (80040d0 <SENSOR_Generic_Data_Ready+0x268>)
 8004026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d135      	bne.n	800409a <SENSOR_Generic_Data_Ready+0x232>
        if(com_status == HS_DATALOG_SD_STARTED)
 800402e:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <SENSOR_Generic_Data_Ready+0x26c>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d10b      	bne.n	8004050 <SENSOR_Generic_Data_Ready+0x1e8>
          SDM_Fill_Buffer(sId , (uint8_t *)buf, toSend * nBytesPerSample);
 8004038:	89fb      	ldrh	r3, [r7, #14]
 800403a:	b2d8      	uxtb	r0, r3
 800403c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800403e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004040:	fb12 f303 	smulbb	r3, r2, r3
 8004044:	b29b      	uxth	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	f000 ff69 	bl	8004f20 <SDM_Fill_Buffer>
 800404e:	e010      	b.n	8004072 <SENSOR_Generic_Data_Ready+0x20a>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8004050:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <SENSOR_Generic_Data_Ready+0x26c>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b01      	cmp	r3, #1
 8004058:	d10b      	bne.n	8004072 <SENSOR_Generic_Data_Ready+0x20a>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber  , (uint8_t *)buf, toSend * nBytesPerSample);
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004060:	b2d9      	uxtb	r1, r3
 8004062:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004064:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	481a      	ldr	r0, [pc, #104]	; (80040d8 <SENSOR_Generic_Data_Ready+0x270>)
 800406e:	f00f fba7 	bl	80137c0 <USBD_WCID_STREAMING_FillTxDataBuffer>
        if(sensor_n_samples_to_timestamp[sId] != 0)
 8004072:	89fb      	ldrh	r3, [r7, #14]
 8004074:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <SENSOR_Generic_Data_Ready+0x268>)
 8004076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <SENSOR_Generic_Data_Ready+0x22c>
          sensor_n_samples_to_timestamp[sId] -= toSend;
 800407e:	89fb      	ldrh	r3, [r7, #14]
 8004080:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <SENSOR_Generic_Data_Ready+0x268>)
 8004082:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004086:	89fb      	ldrh	r3, [r7, #14]
 8004088:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800408a:	1a8a      	subs	r2, r1, r2
 800408c:	b291      	uxth	r1, r2
 800408e:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <SENSOR_Generic_Data_Ready+0x268>)
 8004090:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        toSend = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004098:	e08f      	b.n	80041ba <SENSOR_Generic_Data_Ready+0x352>
        if(com_status == HS_DATALOG_SD_STARTED)
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <SENSOR_Generic_Data_Ready+0x26c>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d11b      	bne.n	80040dc <SENSOR_Generic_Data_Ready+0x274>
          SDM_Fill_Buffer(sId, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 80040a4:	89fb      	ldrh	r3, [r7, #14]
 80040a6:	b2d8      	uxtb	r0, r3
 80040a8:	89fb      	ldrh	r3, [r7, #14]
 80040aa:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <SENSOR_Generic_Data_Ready+0x268>)
 80040ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040b0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80040b2:	fb12 f303 	smulbb	r3, r2, r3
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	f000 ff30 	bl	8004f20 <SDM_Fill_Buffer>
 80040c0:	e021      	b.n	8004106 <SENSOR_Generic_Data_Ready+0x29e>
 80040c2:	bf00      	nop
 80040c4:	20000028 	.word	0x20000028
 80040c8:	200008a8 	.word	0x200008a8
 80040cc:	200008d8 	.word	0x200008d8
 80040d0:	20000930 	.word	0x20000930
 80040d4:	20000504 	.word	0x20000504
 80040d8:	200163b4 	.word	0x200163b4
        else if (com_status == HS_DATALOG_USB_STARTED )
 80040dc:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <SENSOR_Generic_Data_Ready+0x364>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10f      	bne.n	8004106 <SENSOR_Generic_Data_Ready+0x29e>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80040ec:	b2d9      	uxtb	r1, r3
 80040ee:	89fb      	ldrh	r3, [r7, #14]
 80040f0:	4a37      	ldr	r2, [pc, #220]	; (80041d0 <SENSOR_Generic_Data_Ready+0x368>)
 80040f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040f6:	461a      	mov	r2, r3
 80040f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80040fa:	fb03 f302 	mul.w	r3, r3, r2
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4834      	ldr	r0, [pc, #208]	; (80041d4 <SENSOR_Generic_Data_Ready+0x36c>)
 8004102:	f00f fb5d 	bl	80137c0 <USBD_WCID_STREAMING_FillTxDataBuffer>
        buf+=sensor_n_samples_to_timestamp[sId] * nBytesPerSample;
 8004106:	89fb      	ldrh	r3, [r7, #14]
 8004108:	4a31      	ldr	r2, [pc, #196]	; (80041d0 <SENSOR_Generic_Data_Ready+0x368>)
 800410a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800410e:	461a      	mov	r2, r3
 8004110:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004112:	fb03 f302 	mul.w	r3, r3, r2
 8004116:	461a      	mov	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4413      	add	r3, r2
 800411c:	60bb      	str	r3, [r7, #8]
        toSend -= sensor_n_samples_to_timestamp[sId];
 800411e:	89fb      	ldrh	r3, [r7, #14]
 8004120:	4a2b      	ldr	r2, [pc, #172]	; (80041d0 <SENSOR_Generic_Data_Ready+0x368>)
 8004122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004126:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	85fb      	strh	r3, [r7, #46]	; 0x2e
        double newTS = timeStamp - ((1.0 / (double)tempStatus->measuredODR) * toSend);   
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc fa31 	bl	8000598 <__aeabi_f2d>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	f04f 0000 	mov.w	r0, #0
 800413e:	4926      	ldr	r1, [pc, #152]	; (80041d8 <SENSOR_Generic_Data_Ready+0x370>)
 8004140:	f7fc fbac 	bl	800089c <__aeabi_ddiv>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4614      	mov	r4, r2
 800414a:	461d      	mov	r5, r3
 800414c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc fa10 	bl	8000574 <__aeabi_i2d>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4620      	mov	r0, r4
 800415a:	4629      	mov	r1, r5
 800415c:	f7fc fa74 	bl	8000648 <__aeabi_dmul>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004168:	f7fc f8b6 	bl	80002d8 <__aeabi_dsub>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if(com_status == HS_DATALOG_SD_STARTED)
 8004174:	4b15      	ldr	r3, [pc, #84]	; (80041cc <SENSOR_Generic_Data_Ready+0x364>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d108      	bne.n	8004190 <SENSOR_Generic_Data_Ready+0x328>
          SDM_Fill_Buffer(sId, (uint8_t *)&newTS, 8);
 800417e:	89fb      	ldrh	r3, [r7, #14]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f107 0110 	add.w	r1, r7, #16
 8004186:	2208      	movs	r2, #8
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fec9 	bl	8004f20 <SDM_Fill_Buffer>
 800418e:	e00e      	b.n	80041ae <SENSOR_Generic_Data_Ready+0x346>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8004190:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <SENSOR_Generic_Data_Ready+0x364>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d109      	bne.n	80041ae <SENSOR_Generic_Data_Ready+0x346>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)&newTS, 8);
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80041a0:	b2d9      	uxtb	r1, r3
 80041a2:	f107 0210 	add.w	r2, r7, #16
 80041a6:	2308      	movs	r3, #8
 80041a8:	480a      	ldr	r0, [pc, #40]	; (80041d4 <SENSOR_Generic_Data_Ready+0x36c>)
 80041aa:	f00f fb09 	bl	80137c0 <USBD_WCID_STREAMING_FillTxDataBuffer>
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
 80041ae:	89fb      	ldrh	r3, [r7, #14]
 80041b0:	6a3a      	ldr	r2, [r7, #32]
 80041b2:	8991      	ldrh	r1, [r2, #12]
 80041b4:	4a06      	ldr	r2, [pc, #24]	; (80041d0 <SENSOR_Generic_Data_Ready+0x368>)
 80041b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    while(toSend > 0)
 80041ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f47f af29 	bne.w	8004014 <SENSOR_Generic_Data_Ready+0x1ac>
}
 80041c2:	bf00      	nop
 80041c4:	3730      	adds	r7, #48	; 0x30
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bdb0      	pop	{r4, r5, r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000504 	.word	0x20000504
 80041d0:	20000930 	.word	0x20000930
 80041d4:	200163b4 	.word	0x200163b4
 80041d8:	3ff00000 	.word	0x3ff00000

080041dc <IIS3DWB_Data_Ready>:


/*  ---------- Sensors data ready functions ----------- */
void IIS3DWB_Data_Ready(uint8_t * buf, uint16_t size, double timeStamp)
{  
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	460b      	mov	r3, r1
 80041e6:	ed87 0b00 	vstr	d0, [r7]
 80041ea:	817b      	strh	r3, [r7, #10]
  SENSOR_Generic_Data_Ready(iis3dwb_com_id, buf, size, timeStamp);
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <IIS3DWB_Data_Ready+0x2c>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	897a      	ldrh	r2, [r7, #10]
 80041f4:	ed97 0b00 	vldr	d0, [r7]
 80041f8:	68f9      	ldr	r1, [r7, #12]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fe34 	bl	8003e68 <SENSOR_Generic_Data_Ready>
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	200163a4 	.word	0x200163a4

0800420c <Peripheral_MSP_Init_All>:
}



void Peripheral_MSP_Init_All(void)
{  
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  HTS221_Peripheral_Init();
  IMP34DT05_Peripheral_Init();
  MP23ABS1_Peripheral_Init();
  ISM330DHCX_Peripheral_Init();
#endif
  IIS3DWB_Peripheral_Init();
 8004210:	f7ff f926 	bl	8003460 <IIS3DWB_Peripheral_Init>
#if 0
  IIS2DH_Peripheral_Init();
#endif
}
 8004214:	bf00      	nop
 8004216:	bd80      	pop	{r7, pc}

08004218 <Peripheral_OS_Init_All>:


void Peripheral_OS_Init_All(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  HTS221_OS_Init();
  IMP34DT05_OS_Init();
  MP23ABS1_OS_Init();
  ISM330DHCX_OS_Init();
#endif
  IIS3DWB_OS_Init();
 800421c:	f7ff f9ba 	bl	8003594 <IIS3DWB_OS_Init>
#if 0
  IIS2DH_OS_Init();
#endif
}
 8004220:	bf00      	nop
 8004222:	bd80      	pop	{r7, pc}

08004224 <Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void Error_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  while(1);
 8004228:	e7fe      	b.n	8004228 <Error_Handler+0x4>
	...

0800422c <MP23ABS1_Set_State>:
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }
}

void MP23ABS1_Set_State(SM_Sensor_State_t newState)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
  MP23ABS1_Sensor_State = newState;
 8004236:	4a04      	ldr	r2, [pc, #16]	; (8004248 <MP23ABS1_Set_State+0x1c>)
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	7013      	strb	r3, [r2, #0]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	20000033 	.word	0x20000033

0800424c <MP23ABS1_Start>:
  MP23ABS1_Init_Param.FS[0] = newFS1;
  MP23ABS1_Init_Param.FS[0] = newFS2;
}

void MP23ABS1_Start(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8004250:	2003      	movs	r0, #3
 8004252:	f7ff ffeb 	bl	800422c <MP23ABS1_Set_State>
  osThreadResume(MP23ABS1_Thread_Id);
 8004256:	4b03      	ldr	r3, [pc, #12]	; (8004264 <MP23ABS1_Start+0x18>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f014 fc70 	bl	8018b40 <osThreadResume>
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}
 8004264:	200166d8 	.word	0x200166d8

08004268 <MP23ABS1_Stop>:

void MP23ABS1_Stop(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_SUSPENDING);
 800426c:	2001      	movs	r0, #1
 800426e:	f7ff ffdd 	bl	800422c <MP23ABS1_Set_State>
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <SD_CheckStatus+0x38>)
 8004284:	2201      	movs	r2, #1
 8004286:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004288:	f003 fb2a 	bl	80078e0 <BSP_SD_GetCardState>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <SD_CheckStatus+0x38>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	b2da      	uxtb	r2, r3
 800429e:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <SD_CheckStatus+0x38>)
 80042a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80042a2:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <SD_CheckStatus+0x38>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000034 	.word	0x20000034

080042b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <SD_initialize+0x38>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80042c4:	f003 fa0a 	bl	80076dc <BSP_SD_Init>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d107      	bne.n	80042de <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff ffd1 	bl	8004278 <SD_CheckStatus>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461a      	mov	r2, r3
 80042da:	4b04      	ldr	r3, [pc, #16]	; (80042ec <SD_initialize+0x38>)
 80042dc:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80042de:	4b03      	ldr	r3, [pc, #12]	; (80042ec <SD_initialize+0x38>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b2db      	uxtb	r3, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20000034 	.word	0x20000034

080042f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ffbb 	bl	8004278 <SD_CheckStatus>
 8004302:	4603      	mov	r3, r0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4603      	mov	r3, r0
 800431a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]
  ReadStatus = 0;
 8004320:	4b1f      	ldr	r3, [pc, #124]	; (80043a0 <SD_read+0x94>)
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	68b8      	ldr	r0, [r7, #8]
 800432c:	f003 fa48 	bl	80077c0 <BSP_SD_ReadBlocks_DMA>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d12f      	bne.n	8004396 <SD_read+0x8a>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 8004336:	f003 fb71 	bl	8007a1c <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800433c:	bf00      	nop
 800433e:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <SD_read+0x94>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d108      	bne.n	8004358 <SD_read+0x4c>
 8004346:	f003 fb69 	bl	8007a1c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f247 522f 	movw	r2, #29999	; 0x752f
 8004354:	4293      	cmp	r3, r2
 8004356:	d9f2      	bls.n	800433e <SD_read+0x32>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 8004358:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <SD_read+0x94>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d102      	bne.n	8004366 <SD_read+0x5a>
    {
      res = RES_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	75fb      	strb	r3, [r7, #23]
 8004364:	e017      	b.n	8004396 <SD_read+0x8a>
    }
    else
    {
      ReadStatus = 0;
 8004366:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <SD_read+0x94>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 800436c:	f003 fb56 	bl	8007a1c <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004372:	e007      	b.n	8004384 <SD_read+0x78>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004374:	f003 fab4 	bl	80078e0 <BSP_SD_GetCardState>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <SD_read+0x78>
        {
          res = RES_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	75fb      	strb	r3, [r7, #23]
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
           break;
 8004382:	e008      	b.n	8004396 <SD_read+0x8a>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004384:	f003 fb4a 	bl	8007a1c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f247 522f 	movw	r2, #29999	; 0x752f
 8004392:	4293      	cmp	r3, r2
 8004394:	d9ee      	bls.n	8004374 <SD_read+0x68>
        }
      }
    }
  }

  return res;
 8004396:	7dfb      	ldrb	r3, [r7, #23]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000950 	.word	0x20000950

080043a4 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	4603      	mov	r3, r0
 80043b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	75fb      	strb	r3, [r7, #23]
  WriteStatus = 0;
 80043b8:	4b1c      	ldr	r3, [pc, #112]	; (800442c <SD_write+0x88>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	f003 fa16 	bl	80077f4 <BSP_SD_WriteBlocks_DMA>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d128      	bne.n	8004420 <SD_write+0x7c>
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */
//    BSP_DBG_On(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
    timeout = HAL_GetTick();
 80043ce:	f003 fb25 	bl	8007a1c <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]
    osSemaphoreWait(sdioSem_id, SD_TIMEOUT);
 80043d4:	4b16      	ldr	r3, [pc, #88]	; (8004430 <SD_write+0x8c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f247 5130 	movw	r1, #30000	; 0x7530
 80043dc:	4618      	mov	r0, r3
 80043de:	f014 f94d 	bl	801867c <osSemaphoreWait>
//    {
//    }
//    BSP_DBG_Off(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <SD_write+0x88>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <SD_write+0x4c>
    {
      res = RES_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
 80043ee:	e017      	b.n	8004420 <SD_write+0x7c>
    }
    else
    {
      WriteStatus = 0;
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <SD_write+0x88>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 80043f6:	f003 fb11 	bl	8007a1c <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80043fc:	e007      	b.n	800440e <SD_write+0x6a>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80043fe:	f003 fa6f 	bl	80078e0 <BSP_SD_GetCardState>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d102      	bne.n	800440e <SD_write+0x6a>
        {
          res = RES_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	75fb      	strb	r3, [r7, #23]
          break;
 800440c:	e008      	b.n	8004420 <SD_write+0x7c>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800440e:	f003 fb05 	bl	8007a1c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f247 522f 	movw	r2, #29999	; 0x752f
 800441c:	4293      	cmp	r3, r2
 800441e:	d9ee      	bls.n	80043fe <SD_write+0x5a>
        }
      }
    }
  }

  return res;
 8004420:	7dfb      	ldrb	r3, [r7, #23]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	2000094c 	.word	0x2000094c
 8004430:	2001882c 	.word	0x2001882c

08004434 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08c      	sub	sp, #48	; 0x30
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	603a      	str	r2, [r7, #0]
 800443e:	71fb      	strb	r3, [r7, #7]
 8004440:	460b      	mov	r3, r1
 8004442:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800444a:	4b25      	ldr	r3, [pc, #148]	; (80044e0 <SD_ioctl+0xac>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <SD_ioctl+0x28>
 8004458:	2303      	movs	r3, #3
 800445a:	e03c      	b.n	80044d6 <SD_ioctl+0xa2>

  switch (cmd)
 800445c:	79bb      	ldrb	r3, [r7, #6]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d834      	bhi.n	80044cc <SD_ioctl+0x98>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <SD_ioctl+0x34>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004479 	.word	0x08004479
 800446c:	08004481 	.word	0x08004481
 8004470:	08004499 	.word	0x08004499
 8004474:	080044b3 	.word	0x080044b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800447e:	e028      	b.n	80044d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	4618      	mov	r0, r3
 8004486:	f003 fa3b 	bl	8007900 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800448a:	6a3a      	ldr	r2, [r7, #32]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004496:	e01c      	b.n	80044d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004498:	f107 0308 	add.w	r3, r7, #8
 800449c:	4618      	mov	r0, r3
 800449e:	f003 fa2f 	bl	8007900 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80044b0:	e00f      	b.n	80044d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80044b2:	f107 0308 	add.w	r3, r7, #8
 80044b6:	4618      	mov	r0, r3
 80044b8:	f003 fa22 	bl	8007900 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	0a5a      	lsrs	r2, r3, #9
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80044ca:	e002      	b.n	80044d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80044cc:	2304      	movs	r3, #4
 80044ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80044d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3730      	adds	r7, #48	; 0x30
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000034 	.word	0x20000034

080044e4 <BSP_SD_WriteCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  WriteStatus = 1;
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <BSP_SD_WriteCpltCallback+0x18>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
  osSemaphoreRelease(sdioSem_id);
 80044ee:	4b04      	ldr	r3, [pc, #16]	; (8004500 <BSP_SD_WriteCpltCallback+0x1c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f014 f910 	bl	8018718 <osSemaphoreRelease>
}
 80044f8:	bf00      	nop
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	2000094c 	.word	0x2000094c
 8004500:	2001882c 	.word	0x2001882c

08004504 <BSP_SD_ReadCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8004508:	4b03      	ldr	r3, [pc, #12]	; (8004518 <BSP_SD_ReadCpltCallback+0x14>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]
}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	20000950 	.word	0x20000950

0800451c <Enable_Sensors>:
uint32_t SD_Logging_Enabled = 0;
#endif

/*----------------------------------------------------------------------------*/
void Enable_Sensors(void)
{  
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Comment or uncomment each of the following lines
  * to chose which sensor you want to log.         */
  
  Activate_Sensor(iis3dwb_com_id);
 8004520:	4b17      	ldr	r3, [pc, #92]	; (8004580 <Enable_Sensors+0x64>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f83d 	bl	80045a4 <Activate_Sensor>
  Activate_Sensor(hts221_com_id);
 800452a:	4b16      	ldr	r3, [pc, #88]	; (8004584 <Enable_Sensors+0x68>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f838 	bl	80045a4 <Activate_Sensor>
  Activate_Sensor(iis2dh_com_id);
 8004534:	4b14      	ldr	r3, [pc, #80]	; (8004588 <Enable_Sensors+0x6c>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f833 	bl	80045a4 <Activate_Sensor>
  Activate_Sensor(iis2mdc_com_id);
 800453e:	4b13      	ldr	r3, [pc, #76]	; (800458c <Enable_Sensors+0x70>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f000 f82e 	bl	80045a4 <Activate_Sensor>
  Activate_Sensor(imp34dt05_com_id);
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <Enable_Sensors+0x74>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f000 f829 	bl	80045a4 <Activate_Sensor>
  Activate_Sensor(mp23abs1_com_id);
 8004552:	4b10      	ldr	r3, [pc, #64]	; (8004594 <Enable_Sensors+0x78>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f824 	bl	80045a4 <Activate_Sensor>
  Activate_Sensor(ism330dhcx_com_id);
 800455c:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <Enable_Sensors+0x7c>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f81f 	bl	80045a4 <Activate_Sensor>
  Activate_Sensor(lps22hh_com_id);
 8004566:	4b0d      	ldr	r3, [pc, #52]	; (800459c <Enable_Sensors+0x80>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f81a 	bl	80045a4 <Activate_Sensor>
  Activate_Sensor(stts751_com_id);
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <Enable_Sensors+0x84>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f815 	bl	80045a4 <Activate_Sensor>
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	200163a4 	.word	0x200163a4
 8004584:	200166b8 	.word	0x200166b8
 8004588:	200166c8 	.word	0x200166c8
 800458c:	20016679 	.word	0x20016679
 8004590:	200166c0 	.word	0x200166c0
 8004594:	20016678 	.word	0x20016678
 8004598:	200166b9 	.word	0x200166b9
 800459c:	200166d1 	.word	0x200166d1
 80045a0:	200166d0 	.word	0x200166d0

080045a4 <Activate_Sensor>:


void Activate_Sensor(uint32_t id)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fd fbdb 	bl	8001d6c <COM_GetSensorStatus>
 80045b6:	60f8      	str	r0, [r7, #12]
  sensor_status->isActive = 1;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	739a      	strb	r2, [r3, #14]
}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <SDM_Thread>:



/*----------------------------------------------------------------------------*/
static void SDM_Thread(void const *argument)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b09a      	sub	sp, #104	; 0x68
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  (void)argument;
  osEvent evt;
  DIR dir;
  static FILINFO fno;
  int isJSON = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	667b      	str	r3, [r7, #100]	; 0x64
  
  if (BSP_SD_IsDetected())
 80045d4:	f003 f8da 	bl	800778c <BSP_SD_IsDetected>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d063      	beq.n	80046a6 <SDM_Thread+0xde>
  {        
    if (init_SD_peripheral != 1)
 80045de:	4b91      	ldr	r3, [pc, #580]	; (8004824 <SDM_Thread+0x25c>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d004      	beq.n	80045f0 <SDM_Thread+0x28>
    {
      SDM_SD_Init();
 80045e6:	f000 f9f9 	bl	80049dc <SDM_SD_Init>
      init_SD_peripheral = 1;
 80045ea:	4b8e      	ldr	r3, [pc, #568]	; (8004824 <SDM_Thread+0x25c>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
    }
    
    /* Check if a custom configuration JSON is available in the root folder of the SD Card*/   
    (void)f_opendir(&dir, "/"); /* Open the root directory */
 80045f0:	f107 030c 	add.w	r3, r7, #12
 80045f4:	498c      	ldr	r1, [pc, #560]	; (8004828 <SDM_Thread+0x260>)
 80045f6:	4618      	mov	r0, r3
 80045f8:	f013 fc38 	bl	8017e6c <f_opendir>
    
    for (;;) 
    {
      (void)f_readdir(&dir, &fno); /* Read files in root folder */
 80045fc:	f107 030c 	add.w	r3, r7, #12
 8004600:	498a      	ldr	r1, [pc, #552]	; (800482c <SDM_Thread+0x264>)
 8004602:	4618      	mov	r0, r3
 8004604:	f013 fccb 	bl	8017f9e <f_readdir>
      if (fno.fname[0] == 0) break;
 8004608:	4b88      	ldr	r3, [pc, #544]	; (800482c <SDM_Thread+0x264>)
 800460a:	7d9b      	ldrb	r3, [r3, #22]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d034      	beq.n	800467a <SDM_Thread+0xb2>
      if (fno.fattrib & AM_ARC) /* It is a file. */
 8004610:	4b86      	ldr	r3, [pc, #536]	; (800482c <SDM_Thread+0x264>)
 8004612:	7a1b      	ldrb	r3, [r3, #8]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0ef      	beq.n	80045fc <SDM_Thread+0x34>
      {
        isJSON = strcmp(".json",fno.fname);
 800461c:	4984      	ldr	r1, [pc, #528]	; (8004830 <SDM_Thread+0x268>)
 800461e:	4885      	ldr	r0, [pc, #532]	; (8004834 <SDM_Thread+0x26c>)
 8004620:	f7fb fdee 	bl	8000200 <strcmp>
 8004624:	6678      	str	r0, [r7, #100]	; 0x64
        if (isJSON)
 8004626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004628:	2b00      	cmp	r3, #0
 800462a:	d028      	beq.n	800467e <SDM_Thread+0xb6>
        {
          if(f_open(&FileConfigJSON, fno.fname, FA_OPEN_EXISTING | FA_READ) == FR_OK)
 800462c:	2201      	movs	r2, #1
 800462e:	4980      	ldr	r1, [pc, #512]	; (8004830 <SDM_Thread+0x268>)
 8004630:	4881      	ldr	r0, [pc, #516]	; (8004838 <SDM_Thread+0x270>)
 8004632:	f012 ff01 	bl	8017438 <f_open>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d120      	bne.n	800467e <SDM_Thread+0xb6>
          {  
            char* config_JSON_string = NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	663b      	str	r3, [r7, #96]	; 0x60
            int sizeFile;
            uint32_t br;  
            sizeFile = f_size(&FileConfigJSON)+1;
 8004640:	4b7d      	ldr	r3, [pc, #500]	; (8004838 <SDM_Thread+0x270>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	3301      	adds	r3, #1
 8004646:	65fb      	str	r3, [r7, #92]	; 0x5c
            config_JSON_string = HSD_malloc(sizeFile);
 8004648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800464a:	4618      	mov	r0, r3
 800464c:	f01a fe4a 	bl	801f2e4 <malloc>
 8004650:	4603      	mov	r3, r0
 8004652:	663b      	str	r3, [r7, #96]	; 0x60
            f_read (&FileConfigJSON, config_JSON_string, sizeFile, &br);
 8004654:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004656:	f107 0308 	add.w	r3, r7, #8
 800465a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800465c:	4876      	ldr	r0, [pc, #472]	; (8004838 <SDM_Thread+0x270>)
 800465e:	f013 f8a9 	bl	80177b4 <f_read>
            SDM_ReadJSON(config_JSON_string);
 8004662:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004664:	f000 fdba 	bl	80051dc <SDM_ReadJSON>
            HSD_JSON_free(config_JSON_string);
 8004668:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800466a:	f7fc fb7f 	bl	8000d6c <HSD_JSON_free>
            config_JSON_string = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	663b      	str	r3, [r7, #96]	; 0x60
            f_close(&FileConfigJSON);
 8004672:	4871      	ldr	r0, [pc, #452]	; (8004838 <SDM_Thread+0x270>)
 8004674:	f013 fbd0 	bl	8017e18 <f_close>
          }
        }
        break; 
 8004678:	e001      	b.n	800467e <SDM_Thread+0xb6>
      if (fno.fname[0] == 0) break;
 800467a:	bf00      	nop
 800467c:	e000      	b.n	8004680 <SDM_Thread+0xb8>
        break; 
 800467e:	bf00      	nop
      }
    }
    f_closedir(&dir);
 8004680:	f107 030c 	add.w	r3, r7, #12
 8004684:	4618      	mov	r0, r3
 8004686:	f013 fc64 	bl	8017f52 <f_closedir>
    
    if (isJSON == 0)
 800468a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <SDM_Thread+0xcc>
    {
      Enable_Sensors();    
 8004690:	f7ff ff44 	bl	800451c <Enable_Sensors>
    }
    
    if (init_SD_peripheral != 0)
 8004694:	4b63      	ldr	r3, [pc, #396]	; (8004824 <SDM_Thread+0x25c>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <SDM_Thread+0xde>
    {
      SDM_SD_DeInit();
 800469c:	f000 f9c6 	bl	8004a2c <SDM_SD_DeInit>
      init_SD_peripheral = 0;
 80046a0:	4b60      	ldr	r3, [pc, #384]	; (8004824 <SDM_Thread+0x25c>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
    }   
  }
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SDM_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SDM_DEBUG_PIN );
 80046a6:	2102      	movs	r1, #2
 80046a8:	2000      	movs	r0, #0
 80046aa:	f015 fecd 	bl	801a448 <vTaskSetApplicationTaskTag>
#endif
  for (;;)
  {
    BSP_LED_Off(LED1); 
 80046ae:	2000      	movs	r0, #0
 80046b0:	f002 fd0c 	bl	80070cc <BSP_LED_Off>
    
    /* If the battery is too low close the file and turn off the system */
    if(BatteryLow == 1)
 80046b4:	4b61      	ldr	r3, [pc, #388]	; (800483c <SDM_Thread+0x274>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d117      	bne.n	80046ee <SDM_Thread+0x126>
    {
#ifdef LOG_ERROR
      batt_error();
#endif      
      SM_TIM_Stop();
 80046be:	f001 fa0d 	bl	8005adc <SM_TIM_Stop>
      if(SDM_CloseFiles() == 0)
 80046c2:	f000 fb07 	bl	8004cd4 <SDM_CloseFiles>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d102      	bne.n	80046d2 <SDM_Thread+0x10a>
      {
        SD_Logging_Active = 0;
 80046cc:	4b5c      	ldr	r3, [pc, #368]	; (8004840 <SDM_Thread+0x278>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	701a      	strb	r2, [r3, #0]
      }
      SDM_Memory_Deinit();
 80046d2:	f000 f909 	bl	80048e8 <SDM_Memory_Deinit>
      
      if (init_SD_peripheral != 0)
 80046d6:	4b53      	ldr	r3, [pc, #332]	; (8004824 <SDM_Thread+0x25c>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <SDM_Thread+0x120>
      {
        SDM_SD_DeInit();
 80046de:	f000 f9a5 	bl	8004a2c <SDM_SD_DeInit>
        init_SD_peripheral = 0;
 80046e2:	4b50      	ldr	r3, [pc, #320]	; (8004824 <SDM_Thread+0x25c>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
      }
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 80046e8:	2017      	movs	r0, #23
 80046ea:	f002 fd11 	bl	8007110 <BSP_BC_CmdSend>
    }      
    
    evt = osMessageGet(sdThreadQueue_id, osWaitForever);  // wait for message      
 80046ee:	4b55      	ldr	r3, [pc, #340]	; (8004844 <SDM_Thread+0x27c>)
 80046f0:	6819      	ldr	r1, [r3, #0]
 80046f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046f6:	f04f 32ff 	mov.w	r2, #4294967295
 80046fa:	4618      	mov	r0, r3
 80046fc:	f014 f994 	bl	8018a28 <osMessageGet>
    
    if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 8004700:	4b51      	ldr	r3, [pc, #324]	; (8004848 <SDM_Thread+0x280>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <SDM_Thread+0x14c>
 800470a:	4b4f      	ldr	r3, [pc, #316]	; (8004848 <SDM_Thread+0x280>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d1cc      	bne.n	80046ae <SDM_Thread+0xe6>
    {      
      BSP_LED_On(LED1);
 8004714:	2000      	movs	r0, #0
 8004716:	f002 fcbf 	bl	8007098 <BSP_LED_On>
      
      if (evt.status == osEventMessage)
 800471a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471c:	2b10      	cmp	r3, #16
 800471e:	d1c6      	bne.n	80046ae <SDM_Thread+0xe6>
      {
        if(evt.value.v == SDM_START_STOP)
 8004720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004722:	f248 0201 	movw	r2, #32769	; 0x8001
 8004726:	4293      	cmp	r3, r2
 8004728:	d14b      	bne.n	80047c2 <SDM_Thread+0x1fa>
        {
          if(SD_Logging_Active == 0)
 800472a:	4b45      	ldr	r3, [pc, #276]	; (8004840 <SDM_Thread+0x278>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d12a      	bne.n	8004788 <SDM_Thread+0x1c0>
          {
            com_status = HS_DATALOG_SD_STARTED;            
 8004732:	4b45      	ldr	r3, [pc, #276]	; (8004848 <SDM_Thread+0x280>)
 8004734:	2202      	movs	r2, #2
 8004736:	701a      	strb	r2, [r3, #0]
            SM_TIM_Start();
 8004738:	f001 f9c6 	bl	8005ac8 <SM_TIM_Start>
            if (BSP_SD_IsDetected())
 800473c:	f003 f826 	bl	800778c <BSP_SD_IsDetected>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01c      	beq.n	8004780 <SDM_Thread+0x1b8>
            {              
              if (init_SD_peripheral != 1)
 8004746:	4b37      	ldr	r3, [pc, #220]	; (8004824 <SDM_Thread+0x25c>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d004      	beq.n	8004758 <SDM_Thread+0x190>
              {
                SDM_SD_Init();
 800474e:	f000 f945 	bl	80049dc <SDM_SD_Init>
                init_SD_peripheral = 1;
 8004752:	4b34      	ldr	r3, [pc, #208]	; (8004824 <SDM_Thread+0x25c>)
 8004754:	2201      	movs	r2, #1
 8004756:	701a      	strb	r2, [r3, #0]
              }
              SD_present = 1;
 8004758:	4b3c      	ldr	r3, [pc, #240]	; (800484c <SDM_Thread+0x284>)
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
              if(SDM_InitFiles() == 0)
 800475e:	f000 fa41 	bl	8004be4 <SDM_InitFiles>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <SDM_Thread+0x1ac>
              {
                SD_Logging_Active = 1;
 8004768:	4b35      	ldr	r3, [pc, #212]	; (8004840 <SDM_Thread+0x278>)
 800476a:	2201      	movs	r2, #1
 800476c:	701a      	strb	r2, [r3, #0]
                BSP_LED_Off(LED_ORANGE);
 800476e:	2001      	movs	r0, #1
 8004770:	f002 fcac 	bl	80070cc <BSP_LED_Off>
              }
              testTime = HAL_GetTick();
 8004774:	f003 f952 	bl	8007a1c <HAL_GetTick>
 8004778:	4603      	mov	r3, r0
 800477a:	4a35      	ldr	r2, [pc, #212]	; (8004850 <SDM_Thread+0x288>)
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e796      	b.n	80046ae <SDM_Thread+0xe6>
            }
            else
            {
              SD_present = 0;
 8004780:	4b32      	ldr	r3, [pc, #200]	; (800484c <SDM_Thread+0x284>)
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	e792      	b.n	80046ae <SDM_Thread+0xe6>
            }
          }
          else if (SD_Logging_Active == 1)
 8004788:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <SDM_Thread+0x278>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d18e      	bne.n	80046ae <SDM_Thread+0xe6>
          {      
            SM_TIM_Stop();
 8004790:	f001 f9a4 	bl	8005adc <SM_TIM_Stop>
            
            if(SDM_CloseFiles() == 0)
 8004794:	f000 fa9e 	bl	8004cd4 <SDM_CloseFiles>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <SDM_Thread+0x1dc>
            {
              SD_Logging_Active = 0;
 800479e:	4b28      	ldr	r3, [pc, #160]	; (8004840 <SDM_Thread+0x278>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
            }
            SDM_Memory_Deinit();
 80047a4:	f000 f8a0 	bl	80048e8 <SDM_Memory_Deinit>
            
            if (init_SD_peripheral != 0)
 80047a8:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <SDM_Thread+0x25c>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d004      	beq.n	80047ba <SDM_Thread+0x1f2>
            {
              SDM_SD_DeInit();
 80047b0:	f000 f93c 	bl	8004a2c <SDM_SD_DeInit>
              init_SD_peripheral = 0;
 80047b4:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <SDM_Thread+0x25c>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
            }
            com_status = HS_DATALOG_IDLE;
 80047ba:	4b23      	ldr	r3, [pc, #140]	; (8004848 <SDM_Thread+0x280>)
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	e775      	b.n	80046ae <SDM_Thread+0xe6>
          }
        }
        else
        {
          if(evt.value.v & SDM_DATA_READY_MASK)
 80047c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f43f af70 	beq.w	80046ae <SDM_Thread+0xe6>
          {
            COM_SensorStatus_t * sensor_status; 
            uint32_t buf_size;
            uint8_t sensor_id = (uint8_t)(evt.value.v & SDM_SENSOR_ID_MASK);
 80047ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            {
              oldTime[sensor_id] = HAL_GetTick();
            }
#endif          
            
            sensor_status = COM_GetSensorStatus(sensor_id);
 80047d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fd fac7 	bl	8001d6c <COM_GetSensorStatus>
 80047de:	6578      	str	r0, [r7, #84]	; 0x54
            buf_size = sensor_status->sdWriteBufferSize;
 80047e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	653b      	str	r3, [r7, #80]	; 0x50
            
            if(evt.value.v & SDM_DATA_FIRST_HALF_MASK) // Data available on first half of the circular buffer
 80047e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <SDM_Thread+0x240>
            {
              SDM_WriteBuffer(sensor_id, SD_WriteBuffer[sensor_id], buf_size);
 80047f0:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 80047f4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80047f8:	4a16      	ldr	r2, [pc, #88]	; (8004854 <SDM_Thread+0x28c>)
 80047fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004800:	4619      	mov	r1, r3
 8004802:	f000 fb0d 	bl	8004e20 <SDM_WriteBuffer>
 8004806:	e752      	b.n	80046ae <SDM_Thread+0xe6>
            }
            else // Data available on second half of the circular buffer
            {
              SDM_WriteBuffer(sensor_id, (uint8_t *)(SD_WriteBuffer[sensor_id]+buf_size), buf_size);
 8004808:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 800480c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004810:	4a10      	ldr	r2, [pc, #64]	; (8004854 <SDM_Thread+0x28c>)
 8004812:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004818:	4413      	add	r3, r2
 800481a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800481c:	4619      	mov	r1, r3
 800481e:	f000 faff 	bl	8004e20 <SDM_WriteBuffer>
    BSP_LED_Off(LED1); 
 8004822:	e744      	b.n	80046ae <SDM_Thread+0xe6>
 8004824:	2000097e 	.word	0x2000097e
 8004828:	080224dc 	.word	0x080224dc
 800482c:	20000994 	.word	0x20000994
 8004830:	200009aa 	.word	0x200009aa
 8004834:	080224e0 	.word	0x080224e0
 8004838:	200185a8 	.word	0x200185a8
 800483c:	20000988 	.word	0x20000988
 8004840:	2000097c 	.word	0x2000097c
 8004844:	200185a0 	.word	0x200185a0
 8004848:	20000504 	.word	0x20000504
 800484c:	2000097d 	.word	0x2000097d
 8004850:	20000984 	.word	0x20000984
 8004854:	20018804 	.word	0x20018804

08004858 <HAL_PWR_PVDCallback>:
* @brief  PWR PVD interrupt callback
* @param  None 
* @retval None
*/
void HAL_PWR_PVDCallback(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  BatteryLow = 1;
 800485c:	4b03      	ldr	r3, [pc, #12]	; (800486c <HAL_PWR_PVDCallback+0x14>)
 800485e:	2201      	movs	r2, #1
 8004860:	701a      	strb	r2, [r3, #0]
}
 8004862:	bf00      	nop
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	20000988 	.word	0x20000988

08004870 <SDM_Memory_Init>:
*         the SD_WriteBuffer associated to each active sensor.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Init(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 8004876:	f7fd fa47 	bl	8001d08 <COM_GetDeviceDescriptor>
 800487a:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	e026      	b.n	80048d0 <SDM_Memory_Init+0x60>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	4618      	mov	r0, r3
 8004888:	f7fd fa70 	bl	8001d6c <COM_GetSensorStatus>
 800488c:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	7b9b      	ldrb	r3, [r3, #14]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d014      	beq.n	80048c0 <SDM_Memory_Init+0x50>
    {
      SD_WriteBuffer[i] = HSD_malloc(sensor_status->sdWriteBufferSize*2);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	4618      	mov	r0, r3
 800489e:	f01a fd21 	bl	801f2e4 <malloc>
 80048a2:	4603      	mov	r3, r0
 80048a4:	4619      	mov	r1, r3
 80048a6:	4a0f      	ldr	r2, [pc, #60]	; (80048e4 <SDM_Memory_Init+0x74>)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      if(!SD_WriteBuffer[i])
 80048ae:	4a0d      	ldr	r2, [pc, #52]	; (80048e4 <SDM_Memory_Init+0x74>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d107      	bne.n	80048ca <SDM_Memory_Init+0x5a>
      {
        _Error_Handler();
 80048ba:	f000 fd7f 	bl	80053bc <_Error_Handler>
 80048be:	e004      	b.n	80048ca <SDM_Memory_Init+0x5a>
      }
    }
    else
    {
      SD_WriteBuffer[i] = 0;
 80048c0:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <SDM_Memory_Init+0x74>)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2100      	movs	r1, #0
 80048c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d3d3      	bcc.n	8004882 <SDM_Memory_Init+0x12>
    }
  }
  return 1;
 80048da:	2301      	movs	r3, #1
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20018804 	.word	0x20018804

080048e8 <SDM_Memory_Deinit>:
* @brief  SD Card Manager memory De-initialization.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Deinit(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 80048ee:	f7fd fa0b 	bl	8001d08 <COM_GetDeviceDescriptor>
 80048f2:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e01e      	b.n	8004938 <SDM_Memory_Deinit+0x50>
  {
    sensor_status = COM_GetSensorStatus(i);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fa34 	bl	8001d6c <COM_GetSensorStatus>
 8004904:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive && SD_WriteBuffer[i]!=0)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	7b9b      	ldrb	r3, [r3, #14]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d011      	beq.n	8004932 <SDM_Memory_Deinit+0x4a>
 800490e:	4a0f      	ldr	r2, [pc, #60]	; (800494c <SDM_Memory_Deinit+0x64>)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00b      	beq.n	8004932 <SDM_Memory_Deinit+0x4a>
    {
      HSD_free(SD_WriteBuffer[i]);
 800491a:	4a0c      	ldr	r2, [pc, #48]	; (800494c <SDM_Memory_Deinit+0x64>)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004922:	4618      	mov	r0, r3
 8004924:	f01a fce6 	bl	801f2f4 <free>
      SD_WriteBuffer[i] = NULL;
 8004928:	4a08      	ldr	r2, [pc, #32]	; (800494c <SDM_Memory_Deinit+0x64>)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2100      	movs	r1, #0
 800492e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3301      	adds	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	429a      	cmp	r2, r3
 8004940:	d3db      	bcc.n	80048fa <SDM_Memory_Deinit+0x12>
    }
  }
  return 1;
 8004942:	2301      	movs	r3, #1
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20018804 	.word	0x20018804

08004950 <SDM_Peripheral_Init>:


void SDM_Peripheral_Init(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  BSP_SD_Detect_Init();   
 8004954:	f002 fef4 	bl	8007740 <BSP_SD_Detect_Init>
}
 8004958:	bf00      	nop
 800495a:	bd80      	pop	{r7, pc}

0800495c <SDM_OS_Init>:
* @brief  Initialize SD Card Manager thread and queue
* @param  None
* @retval None
*/
void SDM_OS_Init(void)
{
 800495c:	b5b0      	push	{r4, r5, r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
  sdioSem_id = osSemaphoreCreate(osSemaphore(sdioSem), 1);
 8004962:	2101      	movs	r1, #1
 8004964:	4816      	ldr	r0, [pc, #88]	; (80049c0 <SDM_OS_Init+0x64>)
 8004966:	f013 fe65 	bl	8018634 <osSemaphoreCreate>
 800496a:	4603      	mov	r3, r0
 800496c:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <SDM_OS_Init+0x68>)
 800496e:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(sdioSem_id, osWaitForever);
 8004970:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <SDM_OS_Init+0x68>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f04f 31ff 	mov.w	r1, #4294967295
 8004978:	4618      	mov	r0, r3
 800497a:	f013 fe7f 	bl	801867c <osSemaphoreWait>
  
  sdThreadQueue_id = osMessageCreate(osMessageQ(sdThreadQueue), NULL);
 800497e:	2100      	movs	r1, #0
 8004980:	4811      	ldr	r0, [pc, #68]	; (80049c8 <SDM_OS_Init+0x6c>)
 8004982:	f013 ffff 	bl	8018984 <osMessageCreate>
 8004986:	4603      	mov	r3, r0
 8004988:	4a10      	ldr	r2, [pc, #64]	; (80049cc <SDM_OS_Init+0x70>)
 800498a:	6013      	str	r3, [r2, #0]
  
  vQueueAddToRegistry( sdThreadQueue_id, "sdThreadQueue_id" );
 800498c:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <SDM_OS_Init+0x70>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	490f      	ldr	r1, [pc, #60]	; (80049d0 <SDM_OS_Init+0x74>)
 8004992:	4618      	mov	r0, r3
 8004994:	f015 f85c 	bl	8019a50 <vQueueAddToRegistry>
  
  /* Thread definition: read data */
  osThreadDef(SDM_On_Off_Thread, SDM_Thread, SD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE*4);
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <SDM_OS_Init+0x78>)
 800499a:	1d3c      	adds	r4, r7, #4
 800499c:	461d      	mov	r5, r3
 800499e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  SDM_Thread_Id = osThreadCreate(osThread(SDM_On_Off_Thread), NULL);
 80049a6:	1d3b      	adds	r3, r7, #4
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f013 fe1b 	bl	80185e6 <osThreadCreate>
 80049b0:	4603      	mov	r3, r0
 80049b2:	4a09      	ldr	r2, [pc, #36]	; (80049d8 <SDM_OS_Init+0x7c>)
 80049b4:	6013      	str	r3, [r2, #0]
}
 80049b6:	bf00      	nop
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bdb0      	pop	{r4, r5, r7, pc}
 80049be:	bf00      	nop
 80049c0:	08022844 	.word	0x08022844
 80049c4:	2001882c 	.word	0x2001882c
 80049c8:	08022848 	.word	0x08022848
 80049cc:	200185a0 	.word	0x200185a0
 80049d0:	08022518 	.word	0x08022518
 80049d4:	0802252c 	.word	0x0802252c
 80049d8:	20018800 	.word	0x20018800

080049dc <SDM_SD_Init>:
* @brief  Initialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_Init(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80049e0:	490f      	ldr	r1, [pc, #60]	; (8004a20 <SDM_SD_Init+0x44>)
 80049e2:	4810      	ldr	r0, [pc, #64]	; (8004a24 <SDM_SD_Init+0x48>)
 80049e4:	f013 fcb2 	bl	801834c <FATFS_LinkDriver>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d115      	bne.n	8004a1a <SDM_SD_Init+0x3e>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 80049ee:	2200      	movs	r2, #0
 80049f0:	490b      	ldr	r1, [pc, #44]	; (8004a20 <SDM_SD_Init+0x44>)
 80049f2:	480d      	ldr	r0, [pc, #52]	; (8004a28 <SDM_SD_Init+0x4c>)
 80049f4:	f012 fcda 	bl	80173ac <f_mount>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <SDM_SD_Init+0x3e>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 80049fe:	2000      	movs	r0, #0
 8004a00:	f002 fb4a 	bl	8007098 <BSP_LED_On>
        HAL_Delay(500);
 8004a04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a08:	f003 f814 	bl	8007a34 <HAL_Delay>
        BSP_LED_Off(LED1);
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f002 fb5d 	bl	80070cc <BSP_LED_Off>
        HAL_Delay(100);
 8004a12:	2064      	movs	r0, #100	; 0x64
 8004a14:	f003 f80e 	bl	8007a34 <HAL_Delay>
        BSP_LED_On(LED1);
 8004a18:	e7f1      	b.n	80049fe <SDM_SD_Init+0x22>
      }
    }
  }
}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	200185a4 	.word	0x200185a4
 8004a24:	08022830 	.word	0x08022830
 8004a28:	2001692c 	.word	0x2001692c

08004a2c <SDM_SD_DeInit>:
* @brief  Deinitialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_DeInit(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  if(FATFS_UnLinkDriver(SDPath) == 0)
 8004a30:	480e      	ldr	r0, [pc, #56]	; (8004a6c <SDM_SD_DeInit+0x40>)
 8004a32:	f013 fcd3 	bl	80183dc <FATFS_UnLinkDriver>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d115      	bne.n	8004a68 <SDM_SD_DeInit+0x3c>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(NULL, (TCHAR const*)SDPath, 0) != FR_OK)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	490b      	ldr	r1, [pc, #44]	; (8004a6c <SDM_SD_DeInit+0x40>)
 8004a40:	2000      	movs	r0, #0
 8004a42:	f012 fcb3 	bl	80173ac <f_mount>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <SDM_SD_DeInit+0x3c>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	f002 fb23 	bl	8007098 <BSP_LED_On>
        HAL_Delay(500);
 8004a52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a56:	f002 ffed 	bl	8007a34 <HAL_Delay>
        BSP_LED_Off(LED1);
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f002 fb36 	bl	80070cc <BSP_LED_Off>
        HAL_Delay(100);
 8004a60:	2064      	movs	r0, #100	; 0x64
 8004a62:	f002 ffe7 	bl	8007a34 <HAL_Delay>
        BSP_LED_On(LED1);
 8004a66:	e7f1      	b.n	8004a4c <SDM_SD_DeInit+0x20>
      }
    }
  }
}
 8004a68:	bf00      	nop
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	200185a4 	.word	0x200185a4

08004a70 <SDM_OpenFile>:
  return 0; // OK
}


uint8_t SDM_OpenFile(uint32_t id, const char *sensorName)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b090      	sub	sp, #64	; 0x40
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  char file_name[50];
  
  sprintf(file_name, "%s%s", sensorName, ".dat");
 8004a7a:	f107 000c 	add.w	r0, r7, #12
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <SDM_OpenFile+0x48>)
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	490e      	ldr	r1, [pc, #56]	; (8004abc <SDM_OpenFile+0x4c>)
 8004a84:	f01a fd38 	bl	801f4f8 <siprintf>
  
  if(f_open(&FileHandler[id], (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	4a0b      	ldr	r2, [pc, #44]	; (8004ac0 <SDM_OpenFile+0x50>)
 8004a94:	4413      	add	r3, r2
 8004a96:	f107 010c 	add.w	r1, r7, #12
 8004a9a:	220a      	movs	r2, #10
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f012 fccb 	bl	8017438 <f_open>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <SDM_OpenFile+0x3c>
  {
    return 1;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <SDM_OpenFile+0x3e>
  }
  
  return 0; // OK
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3740      	adds	r7, #64	; 0x40
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	08022574 	.word	0x08022574
 8004abc:	0802257c 	.word	0x0802257c
 8004ac0:	20016fc0 	.word	0x20016fc0

08004ac4 <SDM_CloseFile>:


uint8_t SDM_CloseFile(uint32_t id)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  return f_close(&FileHandler[id]);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	4a05      	ldr	r2, [pc, #20]	; (8004aec <SDM_CloseFile+0x28>)
 8004ad8:	4413      	add	r3, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f013 f99c 	bl	8017e18 <f_close>
 8004ae0:	4603      	mov	r3, r0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20016fc0 	.word	0x20016fc0

08004af0 <SDM_GetLastDirNumber>:
* @brief  Scan SD Card file system to find the latest directory number that includes to the LOG_DIR_PREFIX
* @param  None
* @retval 
*/
uint32_t SDM_GetLastDirNumber(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b0da      	sub	sp, #360	; 0x168
 8004af4:	af00      	add	r7, sp, #0
  FRESULT fr;     /* Return value */
  DIR dj;         /* Directory search object */
  FILINFO fno;    /* File information */
  int dir_n = 0, tmp;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  char dir_name[sizeof(LOG_DIR_PREFIX)+1] = LOG_DIR_PREFIX;
 8004afc:	1d3a      	adds	r2, r7, #4
 8004afe:	4937      	ldr	r1, [pc, #220]	; (8004bdc <SDM_GetLastDirNumber+0xec>)
 8004b00:	4613      	mov	r3, r2
 8004b02:	c903      	ldmia	r1, {r0, r1}
 8004b04:	6018      	str	r0, [r3, #0]
 8004b06:	3304      	adds	r3, #4
 8004b08:	8019      	strh	r1, [r3, #0]
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	0c09      	lsrs	r1, r1, #16
 8004b0e:	7019      	strb	r1, [r3, #0]
 8004b10:	2300      	movs	r3, #0
 8004b12:	71d3      	strb	r3, [r2, #7]
  
  dir_name[sizeof(LOG_DIR_PREFIX)-1] = '*';  /* wildcard */
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	222a      	movs	r2, #42	; 0x2a
 8004b18:	719a      	strb	r2, [r3, #6]
  dir_name[sizeof(LOG_DIR_PREFIX)] = 0;
 8004b1a:	1d3b      	adds	r3, r7, #4
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	71da      	strb	r2, [r3, #7]
  
  fr = f_findfirst(&dj, &fno, "", dir_name);  /* Start to search for matching directories */
 8004b20:	1d3b      	adds	r3, r7, #4
 8004b22:	f107 010c 	add.w	r1, r7, #12
 8004b26:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8004b2a:	4a2d      	ldr	r2, [pc, #180]	; (8004be0 <SDM_GetLastDirNumber+0xf0>)
 8004b2c:	f013 fa9c 	bl	8018068 <f_findfirst>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  if(fno.fname[0])
 8004b36:	f107 030c 	add.w	r3, r7, #12
 8004b3a:	7d9b      	ldrb	r3, [r3, #22]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d038      	beq.n	8004bb2 <SDM_GetLastDirNumber+0xc2>
  {
    tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8004b40:	f107 030c 	add.w	r3, r7, #12
 8004b44:	331d      	adds	r3, #29
 8004b46:	220a      	movs	r2, #10
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f01b fc22 	bl	8020394 <strtol>
 8004b50:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    if(dir_n<tmp)
 8004b54:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8004b58:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	da28      	bge.n	8004bb2 <SDM_GetLastDirNumber+0xc2>
    {
      dir_n = tmp;
 8004b60:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004b64:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    }
  }
  
  /* Repeat while an item is found */
  while (fr == FR_OK && fno.fname[0])
 8004b68:	e023      	b.n	8004bb2 <SDM_GetLastDirNumber+0xc2>
  {
    fr = f_findnext(&dj, &fno);   /* Search for next item */
 8004b6a:	f107 020c 	add.w	r2, r7, #12
 8004b6e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f013 fa4f 	bl	8018018 <f_findnext>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    if(fno.fname[0])
 8004b80:	f107 030c 	add.w	r3, r7, #12
 8004b84:	7d9b      	ldrb	r3, [r3, #22]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d013      	beq.n	8004bb2 <SDM_GetLastDirNumber+0xc2>
    {
      tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8004b8a:	f107 030c 	add.w	r3, r7, #12
 8004b8e:	331d      	adds	r3, #29
 8004b90:	220a      	movs	r2, #10
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f01b fbfd 	bl	8020394 <strtol>
 8004b9a:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
      if(tmp > dir_n)
 8004b9e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004ba2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	dd03      	ble.n	8004bb2 <SDM_GetLastDirNumber+0xc2>
      {
        dir_n = tmp;
 8004baa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004bae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  while (fr == FR_OK && fno.fname[0])
 8004bb2:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <SDM_GetLastDirNumber+0xd4>
 8004bba:	f107 030c 	add.w	r3, r7, #12
 8004bbe:	7d9b      	ldrb	r3, [r3, #22]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1d2      	bne.n	8004b6a <SDM_GetLastDirNumber+0x7a>
      }
    }
  }
  
  f_closedir(&dj);
 8004bc4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f013 f9c2 	bl	8017f52 <f_closedir>
  return (uint32_t)dir_n;
 8004bce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	08022588 	.word	0x08022588
 8004be0:	08022584 	.word	0x08022584

08004be4 <SDM_InitFiles>:
* @brief  Open one file for each sensor to store raw data and a JSON file with the device configuration
* @param  None
* @retval None
*/
uint8_t SDM_InitFiles(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b096      	sub	sp, #88	; 0x58
 8004be8:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  COM_SensorDescriptor_t * sensor_descriptor; 
  
  uint32_t i = 0, dir_n = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	657b      	str	r3, [r7, #84]	; 0x54
 8004bee:	2300      	movs	r3, #0
 8004bf0:	653b      	str	r3, [r7, #80]	; 0x50
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  
  device_descriptor = COM_GetDeviceDescriptor();  
 8004bf2:	f7fd f889 	bl	8001d08 <COM_GetDeviceDescriptor>
 8004bf6:	64f8      	str	r0, [r7, #76]	; 0x4c
  dir_n = SDM_GetLastDirNumber();
 8004bf8:	f7ff ff7a 	bl	8004af0 <SDM_GetLastDirNumber>
 8004bfc:	6538      	str	r0, [r7, #80]	; 0x50
  dir_n++;
 8004bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c00:	3301      	adds	r3, #1
 8004c02:	653b      	str	r3, [r7, #80]	; 0x50
  
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8004c04:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0a:	4a2f      	ldr	r2, [pc, #188]	; (8004cc8 <SDM_InitFiles+0xe4>)
 8004c0c:	492f      	ldr	r1, [pc, #188]	; (8004ccc <SDM_InitFiles+0xe8>)
 8004c0e:	f01a fc73 	bl	801f4f8 <siprintf>
  
  FRESULT test = f_mkdir(dir_name);
 8004c12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c16:	4618      	mov	r0, r3
 8004c18:	f013 fa44 	bl	80180a4 <f_mkdir>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  if(test != FR_OK)
 8004c22:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <SDM_InitFiles+0x4a>
  {
    return 1;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e047      	b.n	8004cbe <SDM_InitFiles+0xda>
  {
    return 1;    
  }
#endif
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	657b      	str	r3, [r7, #84]	; 0x54
 8004c32:	e024      	b.n	8004c7e <SDM_InitFiles+0x9a>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fd f897 	bl	8001d6c <COM_GetSensorStatus>
 8004c3e:	6478      	str	r0, [r7, #68]	; 0x44
    
    if(sensor_status->isActive)
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	7b9b      	ldrb	r3, [r3, #14]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d017      	beq.n	8004c78 <SDM_InitFiles+0x94>
    {
      sensor_descriptor = COM_GetSensorDescriptor(i);
 8004c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fd f879 	bl	8001d44 <COM_GetSensorDescriptor>
 8004c52:	6438      	str	r0, [r7, #64]	; 0x40
      sprintf(file_name, "%s/%s", dir_name, sensor_descriptor->name);
 8004c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c56:	3301      	adds	r3, #1
 8004c58:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	491c      	ldr	r1, [pc, #112]	; (8004cd0 <SDM_InitFiles+0xec>)
 8004c60:	f01a fc4a 	bl	801f4f8 <siprintf>
      
      if(SDM_OpenFile(i, file_name)!=0)
 8004c64:	463b      	mov	r3, r7
 8004c66:	4619      	mov	r1, r3
 8004c68:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004c6a:	f7ff ff01 	bl	8004a70 <SDM_OpenFile>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <SDM_InitFiles+0x94>
      {
        return 1;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e022      	b.n	8004cbe <SDM_InitFiles+0xda>
  for(i=0;i<device_descriptor->nSensor;i++)
 8004c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3d5      	bcc.n	8004c34 <SDM_InitFiles+0x50>
      }
    }
  }
  
  SDM_Memory_Init();
 8004c88:	f7ff fdf2 	bl	8004870 <SDM_Memory_Init>
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c90:	e00f      	b.n	8004cb2 <SDM_InitFiles+0xce>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fd f868 	bl	8001d6c <COM_GetSensorStatus>
 8004c9c:	6478      	str	r0, [r7, #68]	; 0x44
    
    if(sensor_status->isActive)
 8004c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca0:	7b9b      	ldrb	r3, [r3, #14]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <SDM_InitFiles+0xc8>
    {
      SDM_StartSensorThread(i);
 8004ca6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004ca8:	f000 f9b4 	bl	8005014 <SDM_StartSensorThread>
  for(i=0;i<device_descriptor->nSensor;i++)
 8004cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cae:	3301      	adds	r3, #1
 8004cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8004cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d3ea      	bcc.n	8004c92 <SDM_InitFiles+0xae>
    }
  }  
  
  return 0;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3758      	adds	r7, #88	; 0x58
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	08022590 	.word	0x08022590
 8004ccc:	08022598 	.word	0x08022598
 8004cd0:	080225a0 	.word	0x080225a0

08004cd4 <SDM_CloseFiles>:

uint8_t SDM_CloseFiles(void)
{
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b097      	sub	sp, #92	; 0x5c
 8004cd8:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t id = 0, dir_n = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	657b      	str	r3, [r7, #84]	; 0x54
 8004cde:	2300      	movs	r3, #0
 8004ce0:	653b      	str	r3, [r7, #80]	; 0x50
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  char* JSON_string = NULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
  
  device_descriptor = COM_GetDeviceDescriptor();
 8004ce6:	f7fd f80f 	bl	8001d08 <COM_GetDeviceDescriptor>
 8004cea:	64f8      	str	r0, [r7, #76]	; 0x4c
  
  /* Put all the sensors in "SUSPENDED" mode */
  for(id=0;id<device_descriptor->nSensor;id++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	657b      	str	r3, [r7, #84]	; 0x54
 8004cf0:	e00f      	b.n	8004d12 <SDM_CloseFiles+0x3e>
  {
    sensor_status = COM_GetSensorStatus(id);
 8004cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fd f838 	bl	8001d6c <COM_GetSensorStatus>
 8004cfc:	64b8      	str	r0, [r7, #72]	; 0x48
    
    if(sensor_status->isActive)
 8004cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d00:	7b9b      	ldrb	r3, [r3, #14]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <SDM_CloseFiles+0x38>
    {
      SDM_StopSensorThread(id);
 8004d06:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004d08:	f000 f9f6 	bl	80050f8 <SDM_StopSensorThread>
  for(id=0;id<device_descriptor->nSensor;id++)
 8004d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d0e:	3301      	adds	r3, #1
 8004d10:	657b      	str	r3, [r7, #84]	; 0x54
 8004d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d3ea      	bcc.n	8004cf2 <SDM_CloseFiles+0x1e>
    }
  }
  
  /* Flush remaining data and close the files  */
  for(id=0;id<device_descriptor->nSensor;id++)
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d20:	e017      	b.n	8004d52 <SDM_CloseFiles+0x7e>
  {
    sensor_status = COM_GetSensorStatus(id);
 8004d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fd f820 	bl	8001d6c <COM_GetSensorStatus>
 8004d2c:	64b8      	str	r0, [r7, #72]	; 0x48
    
    if(sensor_status->isActive)
 8004d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d30:	7b9b      	ldrb	r3, [r3, #14]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <SDM_CloseFiles+0x78>
    {
      SDM_Flush_Buffer(id);
 8004d36:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004d38:	f000 f892 	bl	8004e60 <SDM_Flush_Buffer>
      if(SDM_CloseFile(id)!=0)
 8004d3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004d3e:	f7ff fec1 	bl	8004ac4 <SDM_CloseFile>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <SDM_CloseFiles+0x78>
      {
        return 1;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e042      	b.n	8004dd2 <SDM_CloseFiles+0xfe>
  for(id=0;id<device_descriptor->nSensor;id++)
 8004d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d4e:	3301      	adds	r3, #1
 8004d50:	657b      	str	r3, [r7, #84]	; 0x54
 8004d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d3e2      	bcc.n	8004d22 <SDM_CloseFiles+0x4e>
  {
    return 1;
  }  
#endif
  
  dir_n = SDM_GetLastDirNumber();
 8004d5c:	f7ff fec8 	bl	8004af0 <SDM_GetLastDirNumber>
 8004d60:	6538      	str	r0, [r7, #80]	; 0x50
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8004d62:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d68:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <SDM_CloseFiles+0x108>)
 8004d6a:	491d      	ldr	r1, [pc, #116]	; (8004de0 <SDM_CloseFiles+0x10c>)
 8004d6c:	f01a fbc4 	bl	801f4f8 <siprintf>
  sprintf(file_name, "%s/DeviceConfig.json", dir_name);
 8004d70:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d74:	f107 0308 	add.w	r3, r7, #8
 8004d78:	491a      	ldr	r1, [pc, #104]	; (8004de4 <SDM_CloseFiles+0x110>)
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f01a fbbc 	bl	801f4f8 <siprintf>
  
  if(f_open(&FileConfigHandler, (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8004d80:	f107 0308 	add.w	r3, r7, #8
 8004d84:	220a      	movs	r2, #10
 8004d86:	4619      	mov	r1, r3
 8004d88:	4817      	ldr	r0, [pc, #92]	; (8004de8 <SDM_CloseFiles+0x114>)
 8004d8a:	f012 fb55 	bl	8017438 <f_open>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <SDM_CloseFiles+0xc4>
  {
    return 1;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e01c      	b.n	8004dd2 <SDM_CloseFiles+0xfe>
  }
  
  (void)SDM_CreateJSON(&JSON_string);
 8004d98:	1d3b      	adds	r3, r7, #4
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fa58 	bl	8005250 <SDM_CreateJSON>
  SDM_WriteConfigBuffer((uint8_t*)JSON_string, strlen(JSON_string));  
 8004da0:	687c      	ldr	r4, [r7, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fb fa35 	bl	8000214 <strlen>
 8004daa:	4603      	mov	r3, r0
 8004dac:	4619      	mov	r1, r3
 8004dae:	4620      	mov	r0, r4
 8004db0:	f000 f81c 	bl	8004dec <SDM_WriteConfigBuffer>
  
  if (f_close(&FileConfigHandler)!= FR_OK)
 8004db4:	480c      	ldr	r0, [pc, #48]	; (8004de8 <SDM_CloseFiles+0x114>)
 8004db6:	f013 f82f 	bl	8017e18 <f_close>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <SDM_CloseFiles+0xf0>
  {
    return 1;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e006      	b.n	8004dd2 <SDM_CloseFiles+0xfe>
  }
  
  HSD_JSON_free(JSON_string);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fb ffd0 	bl	8000d6c <HSD_JSON_free>
  JSON_string = NULL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	607b      	str	r3, [r7, #4]
  
  return 0;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	375c      	adds	r7, #92	; 0x5c
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd90      	pop	{r4, r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	08022590 	.word	0x08022590
 8004de0:	08022598 	.word	0x08022598
 8004de4:	080225a8 	.word	0x080225a8
 8004de8:	20016d90 	.word	0x20016d90

08004dec <SDM_WriteConfigBuffer>:


uint8_t SDM_WriteConfigBuffer(uint8_t *buffer, uint32_t size)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t byteswritten;
  FRESULT returnWrite;
  
  returnWrite = f_write(&FileConfigHandler, buffer, size, (void *)&byteswritten);
 8004df6:	f107 0308 	add.w	r3, r7, #8
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4807      	ldr	r0, [pc, #28]	; (8004e1c <SDM_WriteConfigBuffer+0x30>)
 8004e00:	f012 fe17 	bl	8017a32 <f_write>
 8004e04:	4603      	mov	r3, r0
 8004e06:	73fb      	strb	r3, [r7, #15]
  if(returnWrite != FR_OK)
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <SDM_WriteConfigBuffer+0x26>
  {
    return 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e000      	b.n	8004e14 <SDM_WriteConfigBuffer+0x28>
  }  
  return 1;
 8004e12:	2301      	movs	r3, #1
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20016d90 	.word	0x20016d90

08004e20 <SDM_WriteBuffer>:


uint8_t SDM_WriteBuffer(uint32_t id, uint8_t *buffer, uint32_t size)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  uint32_t byteswritten;
  
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	4a09      	ldr	r2, [pc, #36]	; (8004e5c <SDM_WriteBuffer+0x3c>)
 8004e38:	1898      	adds	r0, r3, r2
 8004e3a:	f107 0314 	add.w	r3, r7, #20
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	f012 fdf6 	bl	8017a32 <f_write>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <SDM_WriteBuffer+0x30>
  {
    return 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e000      	b.n	8004e52 <SDM_WriteBuffer+0x32>
  }  
  return 1;
 8004e50:	2301      	movs	r3, #1
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20016fc0 	.word	0x20016fc0

08004e60 <SDM_Flush_Buffer>:

/* Write remaining data to file */
uint8_t SDM_Flush_Buffer(uint32_t id)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint8_t ret = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	75fb      	strb	r3, [r7, #23]
  uint32_t buf_size;
  COM_SensorStatus_t * sensor_status;   
  
  sensor_status = COM_GetSensorStatus(id);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fc ff7b 	bl	8001d6c <COM_GetSensorStatus>
 8004e76:	6138      	str	r0, [r7, #16]
  buf_size = sensor_status->sdWriteBufferSize;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	60fb      	str	r3, [r7, #12]
  
  if(SD_WriteBufferIdx[id]>0 && SD_WriteBufferIdx[id]<(buf_size-1))
 8004e7e:	4a26      	ldr	r2, [pc, #152]	; (8004f18 <SDM_Flush_Buffer+0xb8>)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d017      	beq.n	8004eba <SDM_Flush_Buffer+0x5a>
 8004e8a:	4a23      	ldr	r2, [pc, #140]	; (8004f18 <SDM_Flush_Buffer+0xb8>)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d20f      	bcs.n	8004eba <SDM_Flush_Buffer+0x5a>
  {
    /* flush from the beginning */
    ret = SDM_WriteBuffer(id, SD_WriteBuffer[id], SD_WriteBufferIdx[id]+1);
 8004e9a:	4a20      	ldr	r2, [pc, #128]	; (8004f1c <SDM_Flush_Buffer+0xbc>)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ea2:	4a1d      	ldr	r2, [pc, #116]	; (8004f18 <SDM_Flush_Buffer+0xb8>)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	461a      	mov	r2, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff ffb6 	bl	8004e20 <SDM_WriteBuffer>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	75fb      	strb	r3, [r7, #23]
 8004eb8:	e023      	b.n	8004f02 <SDM_Flush_Buffer+0xa2>
  }
  else if (SD_WriteBufferIdx[id]>(buf_size-1) && SD_WriteBufferIdx[id]<(buf_size*2-1))
 8004eba:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <SDM_Flush_Buffer+0xb8>)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d91b      	bls.n	8004f02 <SDM_Flush_Buffer+0xa2>
 8004eca:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <SDM_Flush_Buffer+0xb8>)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d212      	bcs.n	8004f02 <SDM_Flush_Buffer+0xa2>
  {
    /* flush from half buffer */
    ret =  SDM_WriteBuffer(id, (uint8_t *)(SD_WriteBuffer[id]+buf_size), SD_WriteBufferIdx[id]+1-buf_size);
 8004edc:	4a0f      	ldr	r2, [pc, #60]	; (8004f1c <SDM_Flush_Buffer+0xbc>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	18d1      	adds	r1, r2, r3
 8004ee8:	4a0b      	ldr	r2, [pc, #44]	; (8004f18 <SDM_Flush_Buffer+0xb8>)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff ff91 	bl	8004e20 <SDM_WriteBuffer>
 8004efe:	4603      	mov	r3, r0
 8004f00:	75fb      	strb	r3, [r7, #23]
  }
  
  SD_WriteBufferIdx[id] = 0;
 8004f02:	4a05      	ldr	r2, [pc, #20]	; (8004f18 <SDM_Flush_Buffer+0xb8>)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2100      	movs	r1, #0
 8004f08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  return ret;
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000954 	.word	0x20000954
 8004f1c:	20018804 	.word	0x20018804

08004f20 <SDM_Fill_Buffer>:

/* Fill SD buffer with new data */
uint8_t SDM_Fill_Buffer(uint8_t id, uint8_t *src, uint16_t srcSize)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	6039      	str	r1, [r7, #0]
 8004f2a:	71fb      	strb	r3, [r7, #7]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	80bb      	strh	r3, [r7, #4]
  uint8_t *dst;
  uint32_t dstP, srcP=0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	61bb      	str	r3, [r7, #24]
  COM_SensorStatus_t * sensor_status; 
  uint32_t dstSize, sdBufSize;
  
  
  sensor_status = COM_GetSensorStatus(id);
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fc ff18 	bl	8001d6c <COM_GetSensorStatus>
 8004f3c:	6178      	str	r0, [r7, #20]
  dst = SD_WriteBuffer[id];
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	4a31      	ldr	r2, [pc, #196]	; (8005008 <SDM_Fill_Buffer+0xe8>)
 8004f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f46:	613b      	str	r3, [r7, #16]
  dstP = SD_WriteBufferIdx[id];
 8004f48:	79fb      	ldrb	r3, [r7, #7]
 8004f4a:	4a30      	ldr	r2, [pc, #192]	; (800500c <SDM_Fill_Buffer+0xec>)
 8004f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f50:	61fb      	str	r3, [r7, #28]
  sdBufSize = sensor_status->sdWriteBufferSize;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	60fb      	str	r3, [r7, #12]
  dstSize = sdBufSize*2;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	60bb      	str	r3, [r7, #8]
  
  /* byte per byte copy */
  while(srcP < srcSize)
 8004f5e:	e013      	b.n	8004f88 <SDM_Fill_Buffer+0x68>
  {
    dst[dstP] = src[srcP];
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	441a      	add	r2, r3
 8004f66:	6939      	ldr	r1, [r7, #16]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	440b      	add	r3, r1
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	701a      	strb	r2, [r3, #0]
    dstP++;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	3301      	adds	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
    srcP++;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	61bb      	str	r3, [r7, #24]
    if(dstP>=dstSize)
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d301      	bcc.n	8004f88 <SDM_Fill_Buffer+0x68>
    {
      dstP=0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]
  while(srcP < srcSize)
 8004f88:	88bb      	ldrh	r3, [r7, #4]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d3e7      	bcc.n	8004f60 <SDM_Fill_Buffer+0x40>
    }
  }
  
  if(SD_WriteBufferIdx[id]<(dstSize/2) && dstP>=(dstSize/2)) // first half full
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	4a1e      	ldr	r2, [pc, #120]	; (800500c <SDM_Fill_Buffer+0xec>)
 8004f94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d213      	bcs.n	8004fc8 <SDM_Fill_Buffer+0xa8>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d30e      	bcc.n	8004fc8 <SDM_Fill_Buffer+0xa8>
  {           
    // unlock write task
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 8004faa:	4b19      	ldr	r3, [pc, #100]	; (8005010 <SDM_Fill_Buffer+0xf0>)
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f013 fcf6 	bl	80189a8 <osMessagePut>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d017      	beq.n	8004ff2 <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 8004fc2:	f000 f9fb 	bl	80053bc <_Error_Handler>
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 8004fc6:	e014      	b.n	8004ff2 <SDM_Fill_Buffer+0xd2>
    }
    
    // check for buffer consistency
  }
  else if(dstP<SD_WriteBufferIdx[id])  // second half full
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	4a10      	ldr	r2, [pc, #64]	; (800500c <SDM_Fill_Buffer+0xec>)
 8004fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d20d      	bcs.n	8004ff2 <SDM_Fill_Buffer+0xd2>
  {
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_SECOND_HALF_MASK, 0) != osOK)
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <SDM_Fill_Buffer+0xf0>)
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	f013 fce0 	bl	80189a8 <osMessagePut>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 8004fee:	f000 f9e5 	bl	80053bc <_Error_Handler>
    }
  }
  SD_WriteBufferIdx[id] = dstP;
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	4905      	ldr	r1, [pc, #20]	; (800500c <SDM_Fill_Buffer+0xec>)
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  return 0;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20018804 	.word	0x20018804
 800500c:	20000954 	.word	0x20000954
 8005010:	200185a0 	.word	0x200185a0

08005014 <SDM_StartSensorThread>:
* @brief  Start sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StartSensorThread(uint32_t id)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 800501c:	4b2c      	ldr	r3, [pc, #176]	; (80050d0 <SDM_StartSensorThread+0xbc>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4293      	cmp	r3, r2
 8005026:	d102      	bne.n	800502e <SDM_StartSensorThread+0x1a>
  {
    IIS3DWB_Start();
 8005028:	f7fe fcaa 	bl	8003980 <IIS3DWB_Start>
 800502c:	e046      	b.n	80050bc <SDM_StartSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 800502e:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <SDM_StartSensorThread+0xc0>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4293      	cmp	r3, r2
 8005038:	d102      	bne.n	8005040 <SDM_StartSensorThread+0x2c>
  {
    HTS221_Start();
 800503a:	f7fe f9af 	bl	800339c <HTS221_Start>
 800503e:	e03d      	b.n	80050bc <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 8005040:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <SDM_StartSensorThread+0xc4>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4293      	cmp	r3, r2
 800504a:	d102      	bne.n	8005052 <SDM_StartSensorThread+0x3e>
  {
    IIS2DH_Start();
 800504c:	f7fe f9cc 	bl	80033e8 <IIS2DH_Start>
 8005050:	e034      	b.n	80050bc <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 8005052:	4b22      	ldr	r3, [pc, #136]	; (80050dc <SDM_StartSensorThread+0xc8>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4293      	cmp	r3, r2
 800505c:	d102      	bne.n	8005064 <SDM_StartSensorThread+0x50>
  {
    IIS2MDC_Start();
 800505e:	f7fe f9e9 	bl	8003434 <IIS2MDC_Start>
 8005062:	e02b      	b.n	80050bc <SDM_StartSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 8005064:	4b1e      	ldr	r3, [pc, #120]	; (80050e0 <SDM_StartSensorThread+0xcc>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4293      	cmp	r3, r2
 800506e:	d102      	bne.n	8005076 <SDM_StartSensorThread+0x62>
  {
    IMP34DT05_Start();
 8005070:	f7fe fcac 	bl	80039cc <IMP34DT05_Start>
 8005074:	e022      	b.n	80050bc <SDM_StartSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 8005076:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <SDM_StartSensorThread+0xd0>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4293      	cmp	r3, r2
 8005080:	d102      	bne.n	8005088 <SDM_StartSensorThread+0x74>
  {
    MP23ABS1_Start();
 8005082:	f7ff f8e3 	bl	800424c <MP23ABS1_Start>
 8005086:	e019      	b.n	80050bc <SDM_StartSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 8005088:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <SDM_StartSensorThread+0xd4>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4293      	cmp	r3, r2
 8005092:	d102      	bne.n	800509a <SDM_StartSensorThread+0x86>
  {
    ISM330DHCX_Start();
 8005094:	f7fe fcc0 	bl	8003a18 <ISM330DHCX_Start>
 8005098:	e010      	b.n	80050bc <SDM_StartSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 800509a:	4b14      	ldr	r3, [pc, #80]	; (80050ec <SDM_StartSensorThread+0xd8>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d102      	bne.n	80050ac <SDM_StartSensorThread+0x98>
  {
    LPS22HH_Start();
 80050a6:	f7fe fcdd 	bl	8003a64 <LPS22HH_Start>
 80050aa:	e007      	b.n	80050bc <SDM_StartSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 80050ac:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <SDM_StartSensorThread+0xdc>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d101      	bne.n	80050bc <SDM_StartSensorThread+0xa8>
  {
    STTS751_Start();
 80050b8:	f000 fdb2 	bl	8005c20 <STTS751_Start>
  }
  sensor_first_dataReady[id] = 1;
 80050bc:	4a0d      	ldr	r2, [pc, #52]	; (80050f4 <SDM_StartSensorThread+0xe0>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	2201      	movs	r2, #1
 80050c4:	701a      	strb	r2, [r3, #0]
  
  return 0;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	200163a4 	.word	0x200163a4
 80050d4:	200166b8 	.word	0x200166b8
 80050d8:	200166c8 	.word	0x200166c8
 80050dc:	20016679 	.word	0x20016679
 80050e0:	200166c0 	.word	0x200166c0
 80050e4:	20016678 	.word	0x20016678
 80050e8:	200166b9 	.word	0x200166b9
 80050ec:	200166d1 	.word	0x200166d1
 80050f0:	200166d0 	.word	0x200166d0
 80050f4:	20000028 	.word	0x20000028

080050f8 <SDM_StopSensorThread>:
* @brief  Stop sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StopSensorThread(uint32_t id)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 8005100:	4b2c      	ldr	r3, [pc, #176]	; (80051b4 <SDM_StopSensorThread+0xbc>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4293      	cmp	r3, r2
 800510a:	d102      	bne.n	8005112 <SDM_StopSensorThread+0x1a>
  {
    IIS3DWB_Stop();
 800510c:	f7fe fc46 	bl	800399c <IIS3DWB_Stop>
 8005110:	e046      	b.n	80051a0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 8005112:	4b29      	ldr	r3, [pc, #164]	; (80051b8 <SDM_StopSensorThread+0xc0>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4293      	cmp	r3, r2
 800511c:	d102      	bne.n	8005124 <SDM_StopSensorThread+0x2c>
  {
    HTS221_Stop();
 800511e:	f7fe f94b 	bl	80033b8 <HTS221_Stop>
 8005122:	e03d      	b.n	80051a0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 8005124:	4b25      	ldr	r3, [pc, #148]	; (80051bc <SDM_StopSensorThread+0xc4>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4293      	cmp	r3, r2
 800512e:	d102      	bne.n	8005136 <SDM_StopSensorThread+0x3e>
  {
    IIS2DH_Stop();
 8005130:	f7fe f968 	bl	8003404 <IIS2DH_Stop>
 8005134:	e034      	b.n	80051a0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 8005136:	4b22      	ldr	r3, [pc, #136]	; (80051c0 <SDM_StopSensorThread+0xc8>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4293      	cmp	r3, r2
 8005140:	d102      	bne.n	8005148 <SDM_StopSensorThread+0x50>
  {
    IIS2MDC_Stop();
 8005142:	f7fe f985 	bl	8003450 <IIS2MDC_Stop>
 8005146:	e02b      	b.n	80051a0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 8005148:	4b1e      	ldr	r3, [pc, #120]	; (80051c4 <SDM_StopSensorThread+0xcc>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4293      	cmp	r3, r2
 8005152:	d102      	bne.n	800515a <SDM_StopSensorThread+0x62>
  {
    IMP34DT05_Stop();
 8005154:	f7fe fc48 	bl	80039e8 <IMP34DT05_Stop>
 8005158:	e022      	b.n	80051a0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <SDM_StopSensorThread+0xd0>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4293      	cmp	r3, r2
 8005164:	d102      	bne.n	800516c <SDM_StopSensorThread+0x74>
  {
    MP23ABS1_Stop();
 8005166:	f7ff f87f 	bl	8004268 <MP23ABS1_Stop>
 800516a:	e019      	b.n	80051a0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 800516c:	4b17      	ldr	r3, [pc, #92]	; (80051cc <SDM_StopSensorThread+0xd4>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4293      	cmp	r3, r2
 8005176:	d102      	bne.n	800517e <SDM_StopSensorThread+0x86>
  {
    ISM330DHCX_Stop();
 8005178:	f7fe fc5c 	bl	8003a34 <ISM330DHCX_Stop>
 800517c:	e010      	b.n	80051a0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 800517e:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <SDM_StopSensorThread+0xd8>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4293      	cmp	r3, r2
 8005188:	d102      	bne.n	8005190 <SDM_StopSensorThread+0x98>
  {
    LPS22HH_Stop();
 800518a:	f7fe fc79 	bl	8003a80 <LPS22HH_Stop>
 800518e:	e007      	b.n	80051a0 <SDM_StopSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 8005190:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <SDM_StopSensorThread+0xdc>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4293      	cmp	r3, r2
 800519a:	d101      	bne.n	80051a0 <SDM_StopSensorThread+0xa8>
  {
    STTS751_Stop();
 800519c:	f000 fd4e 	bl	8005c3c <STTS751_Stop>
  }
  sensor_first_dataReady[id] = 0;
 80051a0:	4a0d      	ldr	r2, [pc, #52]	; (80051d8 <SDM_StopSensorThread+0xe0>)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4413      	add	r3, r2
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
  return 0;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	200163a4 	.word	0x200163a4
 80051b8:	200166b8 	.word	0x200166b8
 80051bc:	200166c8 	.word	0x200166c8
 80051c0:	20016679 	.word	0x20016679
 80051c4:	200166c0 	.word	0x200166c0
 80051c8:	20016678 	.word	0x20016678
 80051cc:	200166b9 	.word	0x200166b9
 80051d0:	200166d1 	.word	0x200166d1
 80051d4:	200166d0 	.word	0x200166d0
 80051d8:	20000028 	.word	0x20000028

080051dc <SDM_ReadJSON>:



uint32_t SDM_ReadJSON(char *serialized_string)
{  
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  static COM_Device_t JSON_device; 
  COM_Device_t *local_device; 
  uint8_t ii;
  uint32_t size;
  
  local_device = COM_GetDevice();  
 80051e4:	f7fc fd86 	bl	8001cf4 <COM_GetDevice>
 80051e8:	6138      	str	r0, [r7, #16]
  size = sizeof(COM_Device_t);
 80051ea:	2354      	movs	r3, #84	; 0x54
 80051ec:	60fb      	str	r3, [r7, #12]
  
  memcpy(&JSON_device, local_device, size);       
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	6939      	ldr	r1, [r7, #16]
 80051f2:	4816      	ldr	r0, [pc, #88]	; (800524c <SDM_ReadJSON+0x70>)
 80051f4:	f01a f886 	bl	801f304 <memcpy>
  HSD_JSON_parse_Device(serialized_string, &JSON_device);      
 80051f8:	4914      	ldr	r1, [pc, #80]	; (800524c <SDM_ReadJSON+0x70>)
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fb fe1e 	bl	8000e3c <HSD_JSON_parse_Device>
  
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 8005200:	2300      	movs	r3, #0
 8005202:	75fb      	strb	r3, [r7, #23]
 8005204:	e016      	b.n	8005234 <SDM_ReadJSON+0x58>
  {
    update_sensorStatus(&local_device->sensors[ii]->sensorStatus, &JSON_device.sensors[ii]->sensorStatus, ii);
 8005206:	7dfb      	ldrb	r3, [r7, #23]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	330a      	adds	r3, #10
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	4a0c      	ldr	r2, [pc, #48]	; (800524c <SDM_ReadJSON+0x70>)
 800521a:	330a      	adds	r3, #10
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005226:	7dfa      	ldrb	r2, [r7, #23]
 8005228:	4619      	mov	r1, r3
 800522a:	f7fd fe93 	bl	8002f54 <update_sensorStatus>
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	3301      	adds	r3, #1
 8005232:	75fb      	strb	r3, [r7, #23]
 8005234:	7dfa      	ldrb	r2, [r7, #23]
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <SDM_ReadJSON+0x70>)
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	429a      	cmp	r2, r3
 800523c:	d3e3      	bcc.n	8005206 <SDM_ReadJSON+0x2a>
  }
  
  update_sensors_config();  
 800523e:	f7fd ff97 	bl	8003170 <update_sensors_config>
  
  return 0;  
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000aac 	.word	0x20000aac

08005250 <SDM_CreateJSON>:

uint32_t SDM_CreateJSON(char **serialized_string)
{  
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  COM_Device_t *device; 
  uint32_t size;
  
  device = COM_GetDevice();  
 8005258:	f7fc fd4c 	bl	8001cf4 <COM_GetDevice>
 800525c:	60f8      	str	r0, [r7, #12]
  size = HSD_JSON_serialize_Device(device, serialized_string, PRETTY_JSON);
 800525e:	2201      	movs	r2, #1
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7fb fd92 	bl	8000d8c <HSD_JSON_serialize_Device>
 8005268:	4603      	mov	r3, r0
 800526a:	60bb      	str	r3, [r7, #8]
  
  return size;
 800526c:	68bb      	ldr	r3, [r7, #8]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d138      	bne.n	80052fa <HAL_GPIO_EXTI_Callback+0x82>
  {
  case USER_BUTTON_PIN:
    if( HAL_GetTick() - t_start > 1000 )
 8005288:	f002 fbc8 	bl	8007a1c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005298:	d92f      	bls.n	80052fa <HAL_GPIO_EXTI_Callback+0x82>
    {
      if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 800529a:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <HAL_GPIO_EXTI_Callback+0x90>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <HAL_GPIO_EXTI_Callback+0x36>
 80052a4:	4b18      	ldr	r3, [pc, #96]	; (8005308 <HAL_GPIO_EXTI_Callback+0x90>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d125      	bne.n	80052fa <HAL_GPIO_EXTI_Callback+0x82>
      {  		
        // Cannot wait since we are in an ISR
        if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 80052ae:	4b17      	ldr	r3, [pc, #92]	; (800530c <HAL_GPIO_EXTI_Callback+0x94>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f248 0101 	movw	r1, #32769	; 0x8001
 80052b8:	4618      	mov	r0, r3
 80052ba:	f013 fb75 	bl	80189a8 <osMessagePut>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_GPIO_EXTI_Callback+0x50>
        {
          _Error_Handler();
 80052c4:	f000 f87a 	bl	80053bc <_Error_Handler>
        }
        
        t_start = HAL_GetTick();
 80052c8:	f002 fba8 	bl	8007a1c <HAL_GetTick>
 80052cc:	4603      	mov	r3, r0
 80052ce:	4a0d      	ldr	r2, [pc, #52]	; (8005304 <HAL_GPIO_EXTI_Callback+0x8c>)
 80052d0:	6013      	str	r3, [r2, #0]
        
#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
        t_start = SD_Logging_Time_Start = HAL_GetTick();
 80052d2:	f002 fba3 	bl	8007a1c <HAL_GetTick>
 80052d6:	4603      	mov	r3, r0
 80052d8:	4a0d      	ldr	r2, [pc, #52]	; (8005310 <HAL_GPIO_EXTI_Callback+0x98>)
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <HAL_GPIO_EXTI_Callback+0x98>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a08      	ldr	r2, [pc, #32]	; (8005304 <HAL_GPIO_EXTI_Callback+0x8c>)
 80052e2:	6013      	str	r3, [r2, #0]
        
        if (SD_Logging_Enabled == 1)
 80052e4:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <HAL_GPIO_EXTI_Callback+0x9c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d103      	bne.n	80052f4 <HAL_GPIO_EXTI_Callback+0x7c>
          SD_Logging_Enabled = 0;
 80052ec:	4b09      	ldr	r3, [pc, #36]	; (8005314 <HAL_GPIO_EXTI_Callback+0x9c>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
#endif        
      }
    }
    
  default:
    break;
 80052f2:	e002      	b.n	80052fa <HAL_GPIO_EXTI_Callback+0x82>
          SD_Logging_Enabled = 1;
 80052f4:	4b07      	ldr	r3, [pc, #28]	; (8005314 <HAL_GPIO_EXTI_Callback+0x9c>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
    break;
 80052fa:	bf00      	nop
  }
}
 80052fc:	bf00      	nop
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000980 	.word	0x20000980
 8005308:	20000504 	.word	0x20000504
 800530c:	200185a0 	.word	0x200185a0
 8005310:	2000098c 	.word	0x2000098c
 8005314:	20000990 	.word	0x20000990

08005318 <SDM_AutosaveFile>:


#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
void SDM_AutosaveFile(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  if (SD_Logging_Active)
 800531c:	4b23      	ldr	r3, [pc, #140]	; (80053ac <SDM_AutosaveFile+0x94>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d020      	beq.n	8005366 <SDM_AutosaveFile+0x4e>
  {
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_ACTIVE*1000 )
 8005324:	f002 fb7a 	bl	8007a1c <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	4b21      	ldr	r3, [pc, #132]	; (80053b0 <SDM_AutosaveFile+0x98>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005334:	4293      	cmp	r3, r2
 8005336:	d936      	bls.n	80053a6 <SDM_AutosaveFile+0x8e>
    {
      // Cannot wait since we are in an ISR
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 8005338:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <SDM_AutosaveFile+0x9c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2200      	movs	r2, #0
 800533e:	f248 0101 	movw	r1, #32769	; 0x8001
 8005342:	4618      	mov	r0, r3
 8005344:	f013 fb30 	bl	80189a8 <osMessagePut>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <SDM_AutosaveFile+0x3a>
      {
        _Error_Handler();
 800534e:	f000 f835 	bl	80053bc <_Error_Handler>
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 8005352:	f002 fb63 	bl	8007a1c <HAL_GetTick>
 8005356:	4603      	mov	r3, r0
 8005358:	4a15      	ldr	r2, [pc, #84]	; (80053b0 <SDM_AutosaveFile+0x98>)
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <SDM_AutosaveFile+0x98>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <SDM_AutosaveFile+0xa0>)
 8005362:	6013      	str	r3, [r2, #0]
        _Error_Handler();
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
    }
  }
}
 8005364:	e01f      	b.n	80053a6 <SDM_AutosaveFile+0x8e>
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_IDLE*1000 )
 8005366:	f002 fb59 	bl	8007a1c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <SDM_AutosaveFile+0x98>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	f242 7210 	movw	r2, #10000	; 0x2710
 8005376:	4293      	cmp	r3, r2
 8005378:	d915      	bls.n	80053a6 <SDM_AutosaveFile+0x8e>
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 800537a:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <SDM_AutosaveFile+0x9c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2200      	movs	r2, #0
 8005380:	f248 0101 	movw	r1, #32769	; 0x8001
 8005384:	4618      	mov	r0, r3
 8005386:	f013 fb0f 	bl	80189a8 <osMessagePut>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <SDM_AutosaveFile+0x7c>
        _Error_Handler();
 8005390:	f000 f814 	bl	80053bc <_Error_Handler>
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 8005394:	f002 fb42 	bl	8007a1c <HAL_GetTick>
 8005398:	4603      	mov	r3, r0
 800539a:	4a05      	ldr	r2, [pc, #20]	; (80053b0 <SDM_AutosaveFile+0x98>)
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <SDM_AutosaveFile+0x98>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a05      	ldr	r2, [pc, #20]	; (80053b8 <SDM_AutosaveFile+0xa0>)
 80053a4:	6013      	str	r3, [r2, #0]
}
 80053a6:	bf00      	nop
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	2000097c 	.word	0x2000097c
 80053b0:	2000098c 	.word	0x2000098c
 80053b4:	200185a0 	.word	0x200185a0
 80053b8:	20000980 	.word	0x20000980

080053bc <_Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void _Error_Handler( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  while (1)
 80053c0:	e7fe      	b.n	80053c0 <_Error_Handler+0x4>
	...

080053c4 <SM_SPI_Init>:
* @param None
* @retval None
* @note callbacks to the MSP
*/
static void SM_SPI_Init(void)
{  
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* SPI3 parameter configuration*/
  hsm_spi.Instance = SM_SPI_x;
 80053c8:	4b20      	ldr	r3, [pc, #128]	; (800544c <SM_SPI_Init+0x88>)
 80053ca:	4a21      	ldr	r2, [pc, #132]	; (8005450 <SM_SPI_Init+0x8c>)
 80053cc:	601a      	str	r2, [r3, #0]
  hsm_spi.Init.Mode = SPI_MODE_MASTER;
 80053ce:	4b1f      	ldr	r3, [pc, #124]	; (800544c <SM_SPI_Init+0x88>)
 80053d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80053d4:	605a      	str	r2, [r3, #4]
  hsm_spi.Init.Direction = SPI_DIRECTION_2LINES;
 80053d6:	4b1d      	ldr	r3, [pc, #116]	; (800544c <SM_SPI_Init+0x88>)
 80053d8:	2200      	movs	r2, #0
 80053da:	609a      	str	r2, [r3, #8]
  hsm_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 80053dc:	4b1b      	ldr	r3, [pc, #108]	; (800544c <SM_SPI_Init+0x88>)
 80053de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80053e2:	60da      	str	r2, [r3, #12]
  hsm_spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80053e4:	4b19      	ldr	r3, [pc, #100]	; (800544c <SM_SPI_Init+0x88>)
 80053e6:	2202      	movs	r2, #2
 80053e8:	611a      	str	r2, [r3, #16]
  hsm_spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 80053ea:	4b18      	ldr	r3, [pc, #96]	; (800544c <SM_SPI_Init+0x88>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	615a      	str	r2, [r3, #20]
  hsm_spi.Init.NSS = SPI_NSS_SOFT;
 80053f0:	4b16      	ldr	r3, [pc, #88]	; (800544c <SM_SPI_Init+0x88>)
 80053f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f6:	619a      	str	r2, [r3, #24]
  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /*SPI running @ 10 MHz */ /*stwin*/
 80053f8:	4b14      	ldr	r3, [pc, #80]	; (800544c <SM_SPI_Init+0x88>)
 80053fa:	2218      	movs	r2, #24
 80053fc:	61da      	str	r2, [r3, #28]
  hsm_spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80053fe:	4b13      	ldr	r3, [pc, #76]	; (800544c <SM_SPI_Init+0x88>)
 8005400:	2200      	movs	r2, #0
 8005402:	621a      	str	r2, [r3, #32]
  hsm_spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8005404:	4b11      	ldr	r3, [pc, #68]	; (800544c <SM_SPI_Init+0x88>)
 8005406:	2200      	movs	r2, #0
 8005408:	625a      	str	r2, [r3, #36]	; 0x24
  hsm_spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800540a:	4b10      	ldr	r3, [pc, #64]	; (800544c <SM_SPI_Init+0x88>)
 800540c:	2200      	movs	r2, #0
 800540e:	629a      	str	r2, [r3, #40]	; 0x28
  hsm_spi.Init.CRCPolynomial = 7;
 8005410:	4b0e      	ldr	r3, [pc, #56]	; (800544c <SM_SPI_Init+0x88>)
 8005412:	2207      	movs	r2, #7
 8005414:	62da      	str	r2, [r3, #44]	; 0x2c
  hsm_spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <SM_SPI_Init+0x88>)
 8005418:	2200      	movs	r2, #0
 800541a:	631a      	str	r2, [r3, #48]	; 0x30
  hsm_spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <SM_SPI_Init+0x88>)
 800541e:	2200      	movs	r2, #0
 8005420:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Register MSP Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_MSPINIT_CB_ID, SM_SPI_MspInit);
 8005422:	4a0c      	ldr	r2, [pc, #48]	; (8005454 <SM_SPI_Init+0x90>)
 8005424:	2108      	movs	r1, #8
 8005426:	4809      	ldr	r0, [pc, #36]	; (800544c <SM_SPI_Init+0x88>)
 8005428:	f00a fb86 	bl	800fb38 <HAL_SPI_RegisterCallback>
  
  if (HAL_SPI_Init(&hsm_spi) != HAL_OK)
 800542c:	4807      	ldr	r0, [pc, #28]	; (800544c <SM_SPI_Init+0x88>)
 800542e:	f00a fab9 	bl	800f9a4 <HAL_SPI_Init>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <SM_SPI_Init+0x78>
  {
    SM_Error_Handler();
 8005438:	f000 f810 	bl	800545c <SM_Error_Handler>
  }
  
  /* Register SPI DMA complete Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_TX_RX_COMPLETE_CB_ID, SM_SPI_TxRxCpltCallback);
 800543c:	4a06      	ldr	r2, [pc, #24]	; (8005458 <SM_SPI_Init+0x94>)
 800543e:	2102      	movs	r1, #2
 8005440:	4802      	ldr	r0, [pc, #8]	; (800544c <SM_SPI_Init+0x88>)
 8005442:	f00a fb79 	bl	800fb38 <HAL_SPI_RegisterCallback>
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20018940 	.word	0x20018940
 8005450:	40003800 	.word	0x40003800
 8005454:	080058e1 	.word	0x080058e1
 8005458:	08005735 	.word	0x08005735

0800545c <SM_Error_Handler>:

void SM_Error_Handler( void )
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  while (1)
 8005460:	e7fe      	b.n	8005460 <SM_Error_Handler+0x4>
	...

08005464 <SM_OS_Init>:
*        read requests and a semaphore used to wait for DMA transfer complete
* @param None
* @retval None
*/
void SM_OS_Init(void)
{
 8005464:	b5b0      	push	{r4, r5, r7, lr}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	af00      	add	r7, sp, #0
  /* Bus read semaphores */
  spiThreadSem_id = osSemaphoreCreate(osSemaphore(spiThreadSem), 1);
 800546a:	2101      	movs	r1, #1
 800546c:	482f      	ldr	r0, [pc, #188]	; (800552c <SM_OS_Init+0xc8>)
 800546e:	f013 f8e1 	bl	8018634 <osSemaphoreCreate>
 8005472:	4603      	mov	r3, r0
 8005474:	4a2e      	ldr	r2, [pc, #184]	; (8005530 <SM_OS_Init+0xcc>)
 8005476:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(spiThreadSem_id,osWaitForever);
 8005478:	4b2d      	ldr	r3, [pc, #180]	; (8005530 <SM_OS_Init+0xcc>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f04f 31ff 	mov.w	r1, #4294967295
 8005480:	4618      	mov	r0, r3
 8005482:	f013 f8fb 	bl	801867c <osSemaphoreWait>
  i2cThreadSem_id = osSemaphoreCreate(osSemaphore(i2cThreadSem), 1);
 8005486:	2101      	movs	r1, #1
 8005488:	482a      	ldr	r0, [pc, #168]	; (8005534 <SM_OS_Init+0xd0>)
 800548a:	f013 f8d3 	bl	8018634 <osSemaphoreCreate>
 800548e:	4603      	mov	r3, r0
 8005490:	4a29      	ldr	r2, [pc, #164]	; (8005538 <SM_OS_Init+0xd4>)
 8005492:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(i2cThreadSem_id,osWaitForever);    
 8005494:	4b28      	ldr	r3, [pc, #160]	; (8005538 <SM_OS_Init+0xd4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f04f 31ff 	mov.w	r1, #4294967295
 800549c:	4618      	mov	r0, r3
 800549e:	f013 f8ed 	bl	801867c <osSemaphoreWait>
  
  /* Bus read functions memory pools */  
  spiPool_id = osPoolCreate(osPool(spiPool));  
 80054a2:	4826      	ldr	r0, [pc, #152]	; (800553c <SM_OS_Init+0xd8>)
 80054a4:	f013 f96e 	bl	8018784 <osPoolCreate>
 80054a8:	4603      	mov	r3, r0
 80054aa:	4a25      	ldr	r2, [pc, #148]	; (8005540 <SM_OS_Init+0xdc>)
 80054ac:	6013      	str	r3, [r2, #0]
  i2cPool_id = osPoolCreate(osPool(i2cPool));    
 80054ae:	4825      	ldr	r0, [pc, #148]	; (8005544 <SM_OS_Init+0xe0>)
 80054b0:	f013 f968 	bl	8018784 <osPoolCreate>
 80054b4:	4603      	mov	r3, r0
 80054b6:	4a24      	ldr	r2, [pc, #144]	; (8005548 <SM_OS_Init+0xe4>)
 80054b8:	6013      	str	r3, [r2, #0]
  
  /* Bus read queues */
  spiReqQueue_id = osMessageCreate(osMessageQ(spireqqueue), NULL);
 80054ba:	2100      	movs	r1, #0
 80054bc:	4823      	ldr	r0, [pc, #140]	; (800554c <SM_OS_Init+0xe8>)
 80054be:	f013 fa61 	bl	8018984 <osMessageCreate>
 80054c2:	4603      	mov	r3, r0
 80054c4:	4a22      	ldr	r2, [pc, #136]	; (8005550 <SM_OS_Init+0xec>)
 80054c6:	6013      	str	r3, [r2, #0]
  i2cReqQueue_id = osMessageCreate(osMessageQ(i2creqqueue), NULL);
 80054c8:	2100      	movs	r1, #0
 80054ca:	4822      	ldr	r0, [pc, #136]	; (8005554 <SM_OS_Init+0xf0>)
 80054cc:	f013 fa5a 	bl	8018984 <osMessageCreate>
 80054d0:	4603      	mov	r3, r0
 80054d2:	4a21      	ldr	r2, [pc, #132]	; (8005558 <SM_OS_Init+0xf4>)
 80054d4:	6013      	str	r3, [r2, #0]
  
  vQueueAddToRegistry( spiReqQueue_id, "spiReqQueue_id" );
 80054d6:	4b1e      	ldr	r3, [pc, #120]	; (8005550 <SM_OS_Init+0xec>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4920      	ldr	r1, [pc, #128]	; (800555c <SM_OS_Init+0xf8>)
 80054dc:	4618      	mov	r0, r3
 80054de:	f014 fab7 	bl	8019a50 <vQueueAddToRegistry>
  
  /* SPI read Thread*/
  osThreadDef(SPI_THREAD, spi_Thread, SPI_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 80054e2:	4b1f      	ldr	r3, [pc, #124]	; (8005560 <SM_OS_Init+0xfc>)
 80054e4:	f107 0414 	add.w	r4, r7, #20
 80054e8:	461d      	mov	r5, r3
 80054ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054ee:	682b      	ldr	r3, [r5, #0]
 80054f0:	6023      	str	r3, [r4, #0]
  /* SPI read Thread*/
  osThreadDef(I2C_THREAD, i2c_Thread, I2C_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 80054f2:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <SM_OS_Init+0x100>)
 80054f4:	463c      	mov	r4, r7
 80054f6:	461d      	mov	r5, r3
 80054f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	6023      	str	r3, [r4, #0]
  
  /* Start SPI read Thread */
  spiThreadId = osThreadCreate(osThread(SPI_THREAD), NULL);
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	2100      	movs	r1, #0
 8005506:	4618      	mov	r0, r3
 8005508:	f013 f86d 	bl	80185e6 <osThreadCreate>
 800550c:	4603      	mov	r3, r0
 800550e:	4a16      	ldr	r2, [pc, #88]	; (8005568 <SM_OS_Init+0x104>)
 8005510:	6013      	str	r3, [r2, #0]
  /* Start I2C read Thread */
  i2cThreadId = osThreadCreate(osThread(I2C_THREAD), NULL);  
 8005512:	463b      	mov	r3, r7
 8005514:	2100      	movs	r1, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f013 f865 	bl	80185e6 <osThreadCreate>
 800551c:	4603      	mov	r3, r0
 800551e:	4a13      	ldr	r2, [pc, #76]	; (800556c <SM_OS_Init+0x108>)
 8005520:	6013      	str	r3, [r2, #0]
}
 8005522:	bf00      	nop
 8005524:	3728      	adds	r7, #40	; 0x28
 8005526:	46bd      	mov	sp, r7
 8005528:	bdb0      	pop	{r4, r5, r7, pc}
 800552a:	bf00      	nop
 800552c:	08022850 	.word	0x08022850
 8005530:	2001883c 	.word	0x2001883c
 8005534:	08022854 	.word	0x08022854
 8005538:	20018a4c 	.word	0x20018a4c
 800553c:	08022868 	.word	0x08022868
 8005540:	20018834 	.word	0x20018834
 8005544:	08022874 	.word	0x08022874
 8005548:	200189cc 	.word	0x200189cc
 800554c:	08022858 	.word	0x08022858
 8005550:	20018830 	.word	0x20018830
 8005554:	08022860 	.word	0x08022860
 8005558:	20018b14 	.word	0x20018b14
 800555c:	080225d8 	.word	0x080225d8
 8005560:	080225e8 	.word	0x080225e8
 8005564:	080225fc 	.word	0x080225fc
 8005568:	20018838 	.word	0x20018838
 800556c:	20018a50 	.word	0x20018a50

08005570 <SM_SPI_Read_Os>:
* @note when the function is used and linked to the sensor context, all the calls made by the PID driver will result in a
*       call to this function. If this is the case, be sure to make all the calls to the PID driver functions from a freeRTOS thread
* @retval None
*/
int32_t SM_SPI_Read_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	461a      	mov	r2, r3
 800557c:	460b      	mov	r3, r1
 800557e:	72fb      	strb	r3, [r7, #11]
 8005580:	4613      	mov	r3, r2
 8005582:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 8005584:	2300      	movs	r3, #0
 8005586:	75fb      	strb	r3, [r7, #23]
  SM_Message_t * msg;
  
  msg = osPoolAlloc(spiPool_id);
 8005588:	4b1a      	ldr	r3, [pc, #104]	; (80055f4 <SM_SPI_Read_Os+0x84>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f013 f956 	bl	801883e <osPoolAlloc>
 8005592:	6138      	str	r0, [r7, #16]
  
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b33      	cmp	r3, #51	; 0x33
 800559a:	d104      	bne.n	80055a6 <SM_SPI_Read_Os+0x36>
 800559c:	893b      	ldrh	r3, [r7, #8]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d901      	bls.n	80055a6 <SM_SPI_Read_Os+0x36>
  {
    autoInc = 0x40;
 80055a2:	2340      	movs	r3, #64	; 0x40
 80055a4:	75fb      	strb	r3, [r7, #23]
  }
  
  msg->sensorHandler = handle;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg | 0x80 | autoInc;
 80055ac:	7afa      	ldrb	r2, [r7, #11]
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	893a      	ldrh	r2, [r7, #8]
 80055c2:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 80055ca:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <SM_SPI_Read_Os+0x88>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6939      	ldr	r1, [r7, #16]
 80055d0:	f04f 32ff 	mov.w	r2, #4294967295
 80055d4:	4618      	mov	r0, r3
 80055d6:	f013 f9e7 	bl	80189a8 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f04f 31ff 	mov.w	r1, #4294967295
 80055e4:	4618      	mov	r0, r3
 80055e6:	f013 f849 	bl	801867c <osSemaphoreWait>
  
  return 0;  
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20018834 	.word	0x20018834
 80055f8:	20018830 	.word	0x20018830

080055fc <SM_SPI_Write_Os>:

int32_t SM_SPI_Write_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	607a      	str	r2, [r7, #4]
 8005606:	461a      	mov	r2, r3
 8005608:	460b      	mov	r3, r1
 800560a:	72fb      	strb	r3, [r7, #11]
 800560c:	4613      	mov	r3, r2
 800560e:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 8005610:	2300      	movs	r3, #0
 8005612:	75fb      	strb	r3, [r7, #23]

  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b33      	cmp	r3, #51	; 0x33
 800561a:	d104      	bne.n	8005626 <SM_SPI_Write_Os+0x2a>
 800561c:	893b      	ldrh	r3, [r7, #8]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d901      	bls.n	8005626 <SM_SPI_Write_Os+0x2a>
  {
    autoInc = 0x40;
 8005622:	2340      	movs	r3, #64	; 0x40
 8005624:	75fb      	strb	r3, [r7, #23]
  }
  
  SM_Message_t * msg;  
  msg = osPoolAlloc(spiPool_id);
 8005626:	4b15      	ldr	r3, [pc, #84]	; (800567c <SM_SPI_Write_Os+0x80>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f013 f907 	bl	801883e <osPoolAlloc>
 8005630:	6138      	str	r0, [r7, #16]
  msg->sensorHandler = handle;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg|autoInc ;
 8005638:	7afa      	ldrb	r2, [r7, #11]
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	4313      	orrs	r3, r2
 800563e:	b2da      	uxtb	r2, r3
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	893a      	ldrh	r2, [r7, #8]
 8005648:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 8005650:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <SM_SPI_Write_Os+0x84>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6939      	ldr	r1, [r7, #16]
 8005656:	f04f 32ff 	mov.w	r2, #4294967295
 800565a:	4618      	mov	r0, r3
 800565c:	f013 f9a4 	bl	80189a8 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f04f 31ff 	mov.w	r1, #4294967295
 800566a:	4618      	mov	r0, r3
 800566c:	f013 f806 	bl	801867c <osSemaphoreWait>
  
  return 0;  
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20018834 	.word	0x20018834
 8005680:	20018830 	.word	0x20018830

08005684 <spi_Thread>:
*         the thread which made the request at the end of the read.
* @param  argument not used
* @retval None
*/
static void spi_Thread(void const *argument)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  (void)argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SM_SPI_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_SPI_DEBUG_PIN );
 800568c:	210a      	movs	r1, #10
 800568e:	2000      	movs	r0, #0
 8005690:	f014 feda 	bl	801a448 <vTaskSetApplicationTaskTag>
#endif

  osEvent evt;
  for (;;)
  {    
    evt = osMessageGet(spiReqQueue_id, osWaitForever); 
 8005694:	4b23      	ldr	r3, [pc, #140]	; (8005724 <spi_Thread+0xa0>)
 8005696:	6819      	ldr	r1, [r3, #0]
 8005698:	f107 030c 	add.w	r3, r7, #12
 800569c:	f04f 32ff 	mov.w	r2, #4294967295
 80056a0:	4618      	mov	r0, r3
 80056a2:	f013 f9c1 	bl	8018a28 <osMessageGet>

    SM_Message_t * msg = evt.value.p;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_RESET);
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6858      	ldr	r0, [r3, #4]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	891b      	ldrh	r3, [r3, #8]
 80056b6:	2200      	movs	r2, #0
 80056b8:	4619      	mov	r1, r3
 80056ba:	f004 f9db 	bl	8009a74 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hsm_spi, &msg->regAddr, 1, 1000);
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	f103 010c 	add.w	r1, r3, #12
 80056c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056c8:	2201      	movs	r2, #1
 80056ca:	4817      	ldr	r0, [pc, #92]	; (8005728 <spi_Thread+0xa4>)
 80056cc:	f00a fada 	bl	800fc84 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive_DMA(&hsm_spi, msg->dataPtr, msg->dataPtr, msg->readSize);
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	6899      	ldr	r1, [r3, #8]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	89db      	ldrh	r3, [r3, #14]
 80056dc:	4812      	ldr	r0, [pc, #72]	; (8005728 <spi_Thread+0xa4>)
 80056de:	f00a fc37 	bl	800ff50 <HAL_SPI_TransmitReceive_DMA>
    
    osSemaphoreWait(spiThreadSem_id, osWaitForever);
 80056e2:	4b12      	ldr	r3, [pc, #72]	; (800572c <spi_Thread+0xa8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f04f 31ff 	mov.w	r1, #4294967295
 80056ea:	4618      	mov	r0, r3
 80056ec:	f012 ffc6 	bl	801867c <osSemaphoreWait>
    
    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_SET); 
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6858      	ldr	r0, [r3, #4]
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	891b      	ldrh	r3, [r3, #8]
 80056fc:	2201      	movs	r2, #1
 80056fe:	4619      	mov	r1, r3
 8005700:	f004 f9b8 	bl	8009a74 <HAL_GPIO_WritePin>

    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	61bb      	str	r3, [r7, #24]
    osPoolFree(spiPool_id, msg);
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <spi_Thread+0xac>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69f9      	ldr	r1, [r7, #28]
 8005712:	4618      	mov	r0, r3
 8005714:	f013 f8f5 	bl	8018902 <osPoolFree>
    osSemaphoreRelease(*sem);
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f012 fffb 	bl	8018718 <osSemaphoreRelease>
  {    
 8005722:	e7b7      	b.n	8005694 <spi_Thread+0x10>
 8005724:	20018830 	.word	0x20018830
 8005728:	20018940 	.word	0x20018940
 800572c:	2001883c 	.word	0x2001883c
 8005730:	20018834 	.word	0x20018834

08005734 <SM_SPI_TxRxCpltCallback>:
  }
}

static void SM_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(spiThreadSem_id);    
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <SM_SPI_TxRxCpltCallback+0x1c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4618      	mov	r0, r3
 8005742:	f012 ffe9 	bl	8018718 <osSemaphoreRelease>
}
 8005746:	bf00      	nop
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	2001883c 	.word	0x2001883c

08005754 <i2c_Thread>:
*         unlocks the thread which made the request at the end of the read.
* @param  argument not used
* @retval None
*/
static void i2c_Thread(void const *argument)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	; 0x28
 8005758:	af02      	add	r7, sp, #8
 800575a:	6078      	str	r0, [r7, #4]
  (void)argument;

#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SM_I2C_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_I2C_DEBUG_PIN );
 800575c:	210b      	movs	r1, #11
 800575e:	2000      	movs	r0, #0
 8005760:	f014 fe72 	bl	801a448 <vTaskSetApplicationTaskTag>
#endif

  osEvent evt;
  for (;;)
  {
    evt = osMessageGet(i2cReqQueue_id, osWaitForever);
 8005764:	4b2e      	ldr	r3, [pc, #184]	; (8005820 <i2c_Thread+0xcc>)
 8005766:	6819      	ldr	r1, [r3, #0]
 8005768:	f107 0308 	add.w	r3, r7, #8
 800576c:	f04f 32ff 	mov.w	r2, #4294967295
 8005770:	4618      	mov	r0, r3
 8005772:	f013 f959 	bl	8018a28 <osMessageGet>
    uint8_t autoInc = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	77fb      	strb	r3, [r7, #31]
    
    SM_Message_t * msg = evt.value.p;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	61bb      	str	r3, [r7, #24]
    if (msg->sensorHandler->WhoAmI == 0xBCU && msg->readSize > 1)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2bbc      	cmp	r3, #188	; 0xbc
 8005786:	d105      	bne.n	8005794 <i2c_Thread+0x40>
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	89db      	ldrh	r3, [r3, #14]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d901      	bls.n	8005794 <i2c_Thread+0x40>
    {
      autoInc = 0x80;
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	77fb      	strb	r3, [r7, #31]
    }

    if (msg->isRead)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	791b      	ldrb	r3, [r3, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d015      	beq.n	80057c8 <i2c_Thread+0x74>
    {
      HAL_I2C_Mem_Read_DMA( &hsm_i2c,  ((sensor_handle_t *)msg->sensorHandler)->I2C_address, ( uint16_t )msg->regAddr|autoInc, I2C_MEMADD_SIZE_8BIT, msg->dataPtr, msg->readSize);
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	785b      	ldrb	r3, [r3, #1]
 80057a2:	b299      	uxth	r1, r3
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	7b1a      	ldrb	r2, [r3, #12]
 80057a8:	7ffb      	ldrb	r3, [r7, #31]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	b298      	uxth	r0, r3
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	89d2      	ldrh	r2, [r2, #14]
 80057b8:	9201      	str	r2, [sp, #4]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	2301      	movs	r3, #1
 80057be:	4602      	mov	r2, r0
 80057c0:	4818      	ldr	r0, [pc, #96]	; (8005824 <i2c_Thread+0xd0>)
 80057c2:	f004 fa97 	bl	8009cf4 <HAL_I2C_Mem_Read_DMA>
 80057c6:	e014      	b.n	80057f2 <i2c_Thread+0x9e>
    }
    else
    {
      HAL_I2C_Mem_Write_DMA( &hsm_i2c,  ((sensor_handle_t *)msg->sensorHandler)->I2C_address, ( uint16_t )msg->regAddr|autoInc, I2C_MEMADD_SIZE_8BIT, msg->dataPtr, msg->readSize);
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	b299      	uxth	r1, r3
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	7b1a      	ldrb	r2, [r3, #12]
 80057d4:	7ffb      	ldrb	r3, [r7, #31]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	b298      	uxth	r0, r3
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	89d2      	ldrh	r2, [r2, #14]
 80057e4:	9201      	str	r2, [sp, #4]
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	2301      	movs	r3, #1
 80057ea:	4602      	mov	r2, r0
 80057ec:	480d      	ldr	r0, [pc, #52]	; (8005824 <i2c_Thread+0xd0>)
 80057ee:	f004 f98b 	bl	8009b08 <HAL_I2C_Mem_Write_DMA>
    }
    osSemaphoreWait(i2cThreadSem_id, osWaitForever);  
 80057f2:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <i2c_Thread+0xd4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f04f 31ff 	mov.w	r1, #4294967295
 80057fa:	4618      	mov	r0, r3
 80057fc:	f012 ff3e 	bl	801867c <osSemaphoreWait>
    
    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	617b      	str	r3, [r7, #20]
    osPoolFree(i2cPool_id, msg);
 8005808:	4b08      	ldr	r3, [pc, #32]	; (800582c <i2c_Thread+0xd8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	69b9      	ldr	r1, [r7, #24]
 800580e:	4618      	mov	r0, r3
 8005810:	f013 f877 	bl	8018902 <osPoolFree>
    
    osSemaphoreRelease(*sem);           
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f012 ff7d 	bl	8018718 <osSemaphoreRelease>
  {
 800581e:	e7a1      	b.n	8005764 <i2c_Thread+0x10>
 8005820:	20018b14 	.word	0x20018b14
 8005824:	200189d0 	.word	0x200189d0
 8005828:	20018a4c 	.word	0x20018a4c
 800582c:	200189cc 	.word	0x200189cc

08005830 <SM_Peripheral_Init>:
{
  errors++;
}

void SM_Peripheral_Init(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  SM_DMA_Init();
 8005834:	f000 f806 	bl	8005844 <SM_DMA_Init>
//  SM_I2C_Init();
  SM_SPI_Init();
 8005838:	f7ff fdc4 	bl	80053c4 <SM_SPI_Init>
  SM_TIM_Init();
 800583c:	f000 f914 	bl	8005a68 <SM_TIM_Init>
}
 8005840:	bf00      	nop
 8005842:	bd80      	pop	{r7, pc}

08005844 <SM_DMA_Init>:

/** 
* Enable DMA controller clock
*/
static void SM_DMA_Init(void) 
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800584a:	4b24      	ldr	r3, [pc, #144]	; (80058dc <SM_DMA_Init+0x98>)
 800584c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584e:	4a23      	ldr	r2, [pc, #140]	; (80058dc <SM_DMA_Init+0x98>)
 8005850:	f043 0304 	orr.w	r3, r3, #4
 8005854:	6493      	str	r3, [r2, #72]	; 0x48
 8005856:	4b21      	ldr	r3, [pc, #132]	; (80058dc <SM_DMA_Init+0x98>)
 8005858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
  SM_SPIx_DMA_CLK_ENABLE();
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <SM_DMA_Init+0x98>)
 8005864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005866:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <SM_DMA_Init+0x98>)
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	6493      	str	r3, [r2, #72]	; 0x48
 800586e:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <SM_DMA_Init+0x98>)
 8005870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	60bb      	str	r3, [r7, #8]
 8005878:	68bb      	ldr	r3, [r7, #8]
  SM_I2Cx_DMA_CLK_ENABLE();
 800587a:	4b18      	ldr	r3, [pc, #96]	; (80058dc <SM_DMA_Init+0x98>)
 800587c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587e:	4a17      	ldr	r2, [pc, #92]	; (80058dc <SM_DMA_Init+0x98>)
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	6493      	str	r3, [r2, #72]	; 0x48
 8005886:	4b15      	ldr	r3, [pc, #84]	; (80058dc <SM_DMA_Init+0x98>)
 8005888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	607b      	str	r3, [r7, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
  
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_I2C_TX_DMA_IRQn, 3, 0);
 8005892:	2200      	movs	r2, #0
 8005894:	2103      	movs	r1, #3
 8005896:	200e      	movs	r0, #14
 8005898:	f003 fc8b 	bl	80091b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_I2C_TX_DMA_IRQn);
 800589c:	200e      	movs	r0, #14
 800589e:	f003 fca4 	bl	80091ea <HAL_NVIC_EnableIRQ>

  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_I2C_RX_DMA_IRQn, 3, 0);
 80058a2:	2200      	movs	r2, #0
 80058a4:	2103      	movs	r1, #3
 80058a6:	200d      	movs	r0, #13
 80058a8:	f003 fc83 	bl	80091b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_I2C_RX_DMA_IRQn);
 80058ac:	200d      	movs	r0, #13
 80058ae:	f003 fc9c 	bl	80091ea <HAL_NVIC_EnableIRQ>

  /* SM_SPI_RX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_RX_DMA_IRQn, 3, 0);
 80058b2:	2200      	movs	r2, #0
 80058b4:	2103      	movs	r1, #3
 80058b6:	200b      	movs	r0, #11
 80058b8:	f003 fc7b 	bl	80091b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_RX_DMA_IRQn);
 80058bc:	200b      	movs	r0, #11
 80058be:	f003 fc94 	bl	80091ea <HAL_NVIC_EnableIRQ>
  
  /* SM_SPI_TX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_TX_DMA_IRQn, 3, 0);
 80058c2:	2200      	movs	r2, #0
 80058c4:	2103      	movs	r1, #3
 80058c6:	200c      	movs	r0, #12
 80058c8:	f003 fc73 	bl	80091b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_TX_DMA_IRQn);
 80058cc:	200c      	movs	r0, #12
 80058ce:	f003 fc8c 	bl	80091ea <HAL_NVIC_EnableIRQ>
}
 80058d2:	bf00      	nop
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000

080058e0 <SM_SPI_MspInit>:

static void SM_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08c      	sub	sp, #48	; 0x30
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058e8:	f107 031c 	add.w	r3, r7, #28
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	60da      	str	r2, [r3, #12]
 80058f6:	611a      	str	r2, [r3, #16]
  
  SM_SPI_CLK_PIN_CLK_ENABLE(); 
 80058f8:	4b54      	ldr	r3, [pc, #336]	; (8005a4c <SM_SPI_MspInit+0x16c>)
 80058fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fc:	4a53      	ldr	r2, [pc, #332]	; (8005a4c <SM_SPI_MspInit+0x16c>)
 80058fe:	f043 0308 	orr.w	r3, r3, #8
 8005902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005904:	4b51      	ldr	r3, [pc, #324]	; (8005a4c <SM_SPI_MspInit+0x16c>)
 8005906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	69bb      	ldr	r3, [r7, #24]
  SM_SPI_MISO_PIN_CLK_ENABLE(); 
 8005910:	4b4e      	ldr	r3, [pc, #312]	; (8005a4c <SM_SPI_MspInit+0x16c>)
 8005912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005914:	4a4d      	ldr	r2, [pc, #308]	; (8005a4c <SM_SPI_MspInit+0x16c>)
 8005916:	f043 0308 	orr.w	r3, r3, #8
 800591a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800591c:	4b4b      	ldr	r3, [pc, #300]	; (8005a4c <SM_SPI_MspInit+0x16c>)
 800591e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	697b      	ldr	r3, [r7, #20]
  SM_SPI_MOSI_PIN_CLK_ENABLE(); 
 8005928:	4b48      	ldr	r3, [pc, #288]	; (8005a4c <SM_SPI_MspInit+0x16c>)
 800592a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592c:	4a47      	ldr	r2, [pc, #284]	; (8005a4c <SM_SPI_MspInit+0x16c>)
 800592e:	f043 0304 	orr.w	r3, r3, #4
 8005932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005934:	4b45      	ldr	r3, [pc, #276]	; (8005a4c <SM_SPI_MspInit+0x16c>)
 8005936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	693b      	ldr	r3, [r7, #16]
  
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005940:	2302      	movs	r3, #2
 8005942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005944:	2300      	movs	r3, #0
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005948:	2303      	movs	r3, #3
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  GPIO_InitStruct.Alternate = SM_SPI_CLK_AF;
 800594c:	2305      	movs	r3, #5
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pin = SM_SPI_CLK_PIN;
 8005950:	2302      	movs	r3, #2
 8005952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_SPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8005954:	f107 031c 	add.w	r3, r7, #28
 8005958:	4619      	mov	r1, r3
 800595a:	483d      	ldr	r0, [pc, #244]	; (8005a50 <SM_SPI_MspInit+0x170>)
 800595c:	f003 fee0 	bl	8009720 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MISO_AF;
 8005960:	2305      	movs	r3, #5
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pin = SM_SPI_MISO_PIN;
 8005964:	2308      	movs	r3, #8
 8005966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005968:	f107 031c 	add.w	r3, r7, #28
 800596c:	4619      	mov	r1, r3
 800596e:	4838      	ldr	r0, [pc, #224]	; (8005a50 <SM_SPI_MspInit+0x170>)
 8005970:	f003 fed6 	bl	8009720 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MOSI_AF;
 8005974:	2305      	movs	r3, #5
 8005976:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pin = SM_SPI_MOSI_PIN;
 8005978:	2308      	movs	r3, #8
 800597a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SM_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800597c:	f107 031c 	add.w	r3, r7, #28
 8005980:	4619      	mov	r1, r3
 8005982:	4834      	ldr	r0, [pc, #208]	; (8005a54 <SM_SPI_MspInit+0x174>)
 8005984:	f003 fecc 	bl	8009720 <HAL_GPIO_Init>
  
  SM_SPIx_CLK_ENABLE();
 8005988:	4b30      	ldr	r3, [pc, #192]	; (8005a4c <SM_SPI_MspInit+0x16c>)
 800598a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598c:	4a2f      	ldr	r2, [pc, #188]	; (8005a4c <SM_SPI_MspInit+0x16c>)
 800598e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005992:	6593      	str	r3, [r2, #88]	; 0x58
 8005994:	4b2d      	ldr	r3, [pc, #180]	; (8005a4c <SM_SPI_MspInit+0x16c>)
 8005996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
    
  /* SPI DMA Init */
  /* SPI_RX Init */
  hdma_sm_spi_rx.Instance = SM_SPI_RX_DMA_CHANNEL;
 80059a0:	4b2d      	ldr	r3, [pc, #180]	; (8005a58 <SM_SPI_MspInit+0x178>)
 80059a2:	4a2e      	ldr	r2, [pc, #184]	; (8005a5c <SM_SPI_MspInit+0x17c>)
 80059a4:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_rx.Init.Request = SM_SPI_RX_DMA_REQUEST;
 80059a6:	4b2c      	ldr	r3, [pc, #176]	; (8005a58 <SM_SPI_MspInit+0x178>)
 80059a8:	220c      	movs	r2, #12
 80059aa:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059ac:	4b2a      	ldr	r3, [pc, #168]	; (8005a58 <SM_SPI_MspInit+0x178>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059b2:	4b29      	ldr	r3, [pc, #164]	; (8005a58 <SM_SPI_MspInit+0x178>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059b8:	4b27      	ldr	r3, [pc, #156]	; (8005a58 <SM_SPI_MspInit+0x178>)
 80059ba:	2280      	movs	r2, #128	; 0x80
 80059bc:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059be:	4b26      	ldr	r3, [pc, #152]	; (8005a58 <SM_SPI_MspInit+0x178>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059c4:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <SM_SPI_MspInit+0x178>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_rx.Init.Mode = DMA_NORMAL;
 80059ca:	4b23      	ldr	r3, [pc, #140]	; (8005a58 <SM_SPI_MspInit+0x178>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059d0:	4b21      	ldr	r3, [pc, #132]	; (8005a58 <SM_SPI_MspInit+0x178>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_rx) != HAL_OK)
 80059d6:	4820      	ldr	r0, [pc, #128]	; (8005a58 <SM_SPI_MspInit+0x178>)
 80059d8:	f003 fc22 	bl	8009220 <HAL_DMA_Init>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <SM_SPI_MspInit+0x106>
  {
    SM_Error_Handler();
 80059e2:	f7ff fd3b 	bl	800545c <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmarx,hdma_sm_spi_rx);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <SM_SPI_MspInit+0x178>)
 80059ea:	659a      	str	r2, [r3, #88]	; 0x58
 80059ec:	4a1a      	ldr	r2, [pc, #104]	; (8005a58 <SM_SPI_MspInit+0x178>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6293      	str	r3, [r2, #40]	; 0x28
  
  /* SPI_TX Init */
  hdma_sm_spi_tx.Instance = SM_SPI_TX_DMA_CHANNEL;
 80059f2:	4b1b      	ldr	r3, [pc, #108]	; (8005a60 <SM_SPI_MspInit+0x180>)
 80059f4:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <SM_SPI_MspInit+0x184>)
 80059f6:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_tx.Init.Request = SM_SPI_TX_DMA_REQUEST;
 80059f8:	4b19      	ldr	r3, [pc, #100]	; (8005a60 <SM_SPI_MspInit+0x180>)
 80059fa:	220d      	movs	r2, #13
 80059fc:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059fe:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <SM_SPI_MspInit+0x180>)
 8005a00:	2210      	movs	r2, #16
 8005a02:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a04:	4b16      	ldr	r3, [pc, #88]	; (8005a60 <SM_SPI_MspInit+0x180>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a0a:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <SM_SPI_MspInit+0x180>)
 8005a0c:	2280      	movs	r2, #128	; 0x80
 8005a0e:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a10:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <SM_SPI_MspInit+0x180>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a16:	4b12      	ldr	r3, [pc, #72]	; (8005a60 <SM_SPI_MspInit+0x180>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_tx.Init.Mode = DMA_NORMAL;
 8005a1c:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <SM_SPI_MspInit+0x180>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a22:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <SM_SPI_MspInit+0x180>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_tx) != HAL_OK)
 8005a28:	480d      	ldr	r0, [pc, #52]	; (8005a60 <SM_SPI_MspInit+0x180>)
 8005a2a:	f003 fbf9 	bl	8009220 <HAL_DMA_Init>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <SM_SPI_MspInit+0x158>
  {
    SM_Error_Handler();
 8005a34:	f7ff fd12 	bl	800545c <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmatx,hdma_sm_spi_tx);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <SM_SPI_MspInit+0x180>)
 8005a3c:	655a      	str	r2, [r3, #84]	; 0x54
 8005a3e:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <SM_SPI_MspInit+0x180>)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005a44:	bf00      	nop
 8005a46:	3730      	adds	r7, #48	; 0x30
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	48000c00 	.word	0x48000c00
 8005a54:	48000800 	.word	0x48000800
 8005a58:	20018840 	.word	0x20018840
 8005a5c:	40020008 	.word	0x40020008
 8005a60:	20018ab4 	.word	0x20018ab4
 8005a64:	4002001c 	.word	0x4002001c

08005a68 <SM_TIM_Init>:
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 4, 0);
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);  
}

void SM_TIM_Init(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
  SM_TIMx_CLK_ENABLE();
 8005a6e:	4b13      	ldr	r3, [pc, #76]	; (8005abc <SM_TIM_Init+0x54>)
 8005a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a72:	4a12      	ldr	r2, [pc, #72]	; (8005abc <SM_TIM_Init+0x54>)
 8005a74:	f043 0308 	orr.w	r3, r3, #8
 8005a78:	6593      	str	r3, [r2, #88]	; 0x58
 8005a7a:	4b10      	ldr	r3, [pc, #64]	; (8005abc <SM_TIM_Init+0x54>)
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	607b      	str	r3, [r7, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
  /* Set TIMx instance */
  hsm_tim.Instance = SM_TIMx;
 8005a86:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <SM_TIM_Init+0x58>)
 8005a88:	4a0e      	ldr	r2, [pc, #56]	; (8005ac4 <SM_TIM_Init+0x5c>)
 8005a8a:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = (SystemCoreClock/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  hsm_tim.Init.Period            = 0xFFFFFFFF;
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <SM_TIM_Init+0x58>)
 8005a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a92:	60da      	str	r2, [r3, #12]
  hsm_tim.Init.Prescaler         = 0;
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <SM_TIM_Init+0x58>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	605a      	str	r2, [r3, #4]
  hsm_tim.Init.ClockDivision     = 0;
 8005a9a:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <SM_TIM_Init+0x58>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	611a      	str	r2, [r3, #16]
  hsm_tim.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8005aa0:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <SM_TIM_Init+0x58>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	609a      	str	r2, [r3, #8]
  hsm_tim.Init.RepetitionCounter = 0;
 8005aa6:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <SM_TIM_Init+0x58>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	615a      	str	r2, [r3, #20]

  if (HAL_TIM_Base_Init(&hsm_tim) != HAL_OK)
 8005aac:	4804      	ldr	r0, [pc, #16]	; (8005ac0 <SM_TIM_Init+0x58>)
 8005aae:	f00a fe6d 	bl	801078c <HAL_TIM_Base_Init>
  {
    /* Initialization Error */
//    Error_Handler();
  }
}
 8005ab2:	bf00      	nop
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	20018900 	.word	0x20018900
 8005ac4:	40000c00 	.word	0x40000c00

08005ac8 <SM_TIM_Start>:

void SM_TIM_Start(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Start(&hsm_tim) != HAL_OK)
 8005acc:	4802      	ldr	r0, [pc, #8]	; (8005ad8 <SM_TIM_Start+0x10>)
 8005ace:	f00a fe93 	bl	80107f8 <HAL_TIM_Base_Start>
  {
    /* Starting Error */
//    Error_Handler();
  }
}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20018900 	.word	0x20018900

08005adc <SM_TIM_Stop>:

void SM_TIM_Stop(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Stop(&hsm_tim) != HAL_OK)
 8005ae0:	4804      	ldr	r0, [pc, #16]	; (8005af4 <SM_TIM_Stop+0x18>)
 8005ae2:	f00a feb3 	bl	801084c <HAL_TIM_Base_Stop>
  {
    /* Starting Error */
//    Error_Handler();
  }
  hsm_tim.Instance->CNT = 0;
 8005ae6:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <SM_TIM_Stop+0x18>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2200      	movs	r2, #0
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005aee:	bf00      	nop
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20018900 	.word	0x20018900

08005af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005afc:	bf00      	nop
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b06:	b480      	push	{r7}
 8005b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b0a:	e7fe      	b.n	8005b0a <HardFault_Handler+0x4>

08005b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b10:	e7fe      	b.n	8005b10 <MemManage_Handler+0x4>

08005b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b12:	b480      	push	{r7}
 8005b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b16:	e7fe      	b.n	8005b16 <BusFault_Handler+0x4>

08005b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b1c:	e7fe      	b.n	8005b1c <UsageFault_Handler+0x4>

08005b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	af00      	add	r7, sp, #0

}
 8005b22:	bf00      	nop
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
 HAL_IncTick();
 8005b30:	f001 ff62 	bl	80079f8 <HAL_IncTick>
 osSystickHandler();
 8005b34:	f012 ffec 	bl	8018b10 <osSystickHandler>
}
 8005b38:	bf00      	nop
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <PVD_PVM_IRQHandler>:
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/
void PVD_PVM_IRQHandler(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  HAL_PWREx_PVD_PVM_IRQHandler();
 8005b40:	f006 fe22 	bl	800c788 <HAL_PWREx_PVD_PVM_IRQHandler>
}
 8005b44:	bf00      	nop
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line[0] interrupts.
  */
void EXTI0_IRQHandler(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	f003 ffc3 	bl	8009ad8 <HAL_GPIO_EXTI_IRQHandler>
}
 8005b52:	bf00      	nop
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
   HAL_EXTI_IRQHandler(&hts221_exti);  
 8005b5c:	4805      	ldr	r0, [pc, #20]	; (8005b74 <EXTI9_5_IRQHandler+0x1c>)
 8005b5e:	f003 fdaf 	bl	80096c0 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&ism330dhcx_exti);  
 8005b62:	4805      	ldr	r0, [pc, #20]	; (8005b78 <EXTI9_5_IRQHandler+0x20>)
 8005b64:	f003 fdac 	bl	80096c0 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&iis2mdc_exti);
 8005b68:	4804      	ldr	r0, [pc, #16]	; (8005b7c <EXTI9_5_IRQHandler+0x24>)
 8005b6a:	f003 fda9 	bl	80096c0 <HAL_EXTI_IRQHandler>
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20010274 	.word	0x20010274
 8005b78:	2001625c 	.word	0x2001625c
 8005b7c:	200102dc 	.word	0x200102dc

08005b80 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hsm_i2c);
 8005b84:	4802      	ldr	r0, [pc, #8]	; (8005b90 <I2C2_EV_IRQHandler+0x10>)
 8005b86:	f004 f9ad 	bl	8009ee4 <HAL_I2C_EV_IRQHandler>
}
 8005b8a:	bf00      	nop
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	200189d0 	.word	0x200189d0

08005b94 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hsm_i2c);
 8005b98:	4802      	ldr	r0, [pc, #8]	; (8005ba4 <I2C2_ER_IRQHandler+0x10>)
 8005b9a:	f004 f9bd 	bl	8009f18 <HAL_I2C_ER_IRQHandler>
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200189d0 	.word	0x200189d0

08005ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&iis3dwb_exti);  
 8005bac:	4803      	ldr	r0, [pc, #12]	; (8005bbc <EXTI15_10_IRQHandler+0x14>)
 8005bae:	f003 fd87 	bl	80096c0 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&BC_exti);
 8005bb2:	4803      	ldr	r0, [pc, #12]	; (8005bc0 <EXTI15_10_IRQHandler+0x18>)
 8005bb4:	f003 fd84 	bl	80096c0 <HAL_EXTI_IRQHandler>
}
 8005bb8:	bf00      	nop
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20010304 	.word	0x20010304
 8005bc0:	2001667c 	.word	0x2001667c

08005bc4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI2_IRQHandler(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&iis2dh_exti);
 8005bc8:	4802      	ldr	r0, [pc, #8]	; (8005bd4 <EXTI2_IRQHandler+0x10>)
 8005bca:	f003 fd79 	bl	80096c0 <HAL_EXTI_IRQHandler>
}
 8005bce:	bf00      	nop
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200102b8 	.word	0x200102b8

08005bd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005bdc:	4802      	ldr	r0, [pc, #8]	; (8005be8 <OTG_FS_IRQHandler+0x10>)
 8005bde:	f005 fd27 	bl	800b630 <HAL_PCD_IRQHandler>
}
 8005be2:	bf00      	nop
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20018b3c 	.word	0x20018b3c

08005bec <SDMMC1_IRQHandler>:

void SDMMC1_IRQHandler(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd1);
 8005bf0:	4802      	ldr	r0, [pc, #8]	; (8005bfc <SDMMC1_IRQHandler+0x10>)
 8005bf2:	f008 fcbf 	bl	800e574 <HAL_SD_IRQHandler>
}
 8005bf6:	bf00      	nop
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	200168ac 	.word	0x200168ac

08005c00 <STTS751_Set_State>:
    }      
  }
}

void STTS751_Set_State(SM_Sensor_State_t newState)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	71fb      	strb	r3, [r7, #7]
  STTS751_Sensor_State = newState;
 8005c0a:	4a04      	ldr	r2, [pc, #16]	; (8005c1c <STTS751_Set_State+0x1c>)
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	7013      	strb	r3, [r2, #0]
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	20000035 	.word	0x20000035

08005c20 <STTS751_Start>:
  STTS751_Init_Param.FS[0] = newFS1;
  STTS751_Init_Param.FS[0] = newFS2;
}

void STTS751_Start(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8005c24:	2003      	movs	r0, #3
 8005c26:	f7ff ffeb 	bl	8005c00 <STTS751_Set_State>
  osThreadResume(STTS751_Thread_Id);
 8005c2a:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <STTS751_Start+0x18>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f012 ff86 	bl	8018b40 <osThreadResume>
}
 8005c34:	bf00      	nop
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	20018b38 	.word	0x20018b38

08005c3c <STTS751_Stop>:

void STTS751_Stop(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8005c40:	2001      	movs	r0, #1
 8005c42:	f7ff ffdd 	bl	8005c00 <STTS751_Set_State>
}
 8005c46:	bf00      	nop
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <SystemInit>:
#define VECTOR_TABLE 0x08000000
#endif


void SystemInit(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c50:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <SystemInit+0x64>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c56:	4a16      	ldr	r2, [pc, #88]	; (8005cb0 <SystemInit+0x64>)
 8005c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005c60:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <SystemInit+0x68>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a13      	ldr	r2, [pc, #76]	; (8005cb4 <SystemInit+0x68>)
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c6c:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <SystemInit+0x68>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8005c72:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <SystemInit+0x68>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a0f      	ldr	r2, [pc, #60]	; (8005cb4 <SystemInit+0x68>)
 8005c78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005c7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005c80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8005c82:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <SystemInit+0x68>)
 8005c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <SystemInit+0x68>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a09      	ldr	r2, [pc, #36]	; (8005cb4 <SystemInit+0x68>)
 8005c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005c96:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <SystemInit+0x68>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <SystemInit+0x64>)
 8005c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ca2:	609a      	str	r2, [r3, #8]
#endif
}
 8005ca4:	bf00      	nop
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	e000ed00 	.word	0xe000ed00
 8005cb4:	40021000 	.word	0x40021000

08005cb8 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cc0:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <HAL_PCD_MspInit+0x74>)
 8005cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc4:	4a19      	ldr	r2, [pc, #100]	; (8005d2c <HAL_PCD_MspInit+0x74>)
 8005cc6:	f043 0301 	orr.w	r3, r3, #1
 8005cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ccc:	4b17      	ldr	r3, [pc, #92]	; (8005d2c <HAL_PCD_MspInit+0x74>)
 8005cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	693b      	ldr	r3, [r7, #16]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8005cd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cde:	2302      	movs	r3, #2
 8005ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005cea:	230a      	movs	r3, #10
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8005cee:	f107 0314 	add.w	r3, r7, #20
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cf8:	f003 fd12 	bl	8009720 <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <HAL_PCD_MspInit+0x74>)
 8005cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d00:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <HAL_PCD_MspInit+0x74>)
 8005d02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d08:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <HAL_PCD_MspInit+0x74>)
 8005d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	68fb      	ldr	r3, [r7, #12]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 8005d14:	2200      	movs	r2, #0
 8005d16:	2102      	movs	r1, #2
 8005d18:	2043      	movs	r0, #67	; 0x43
 8005d1a:	f003 fa4a 	bl	80091b2 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005d1e:	2043      	movs	r0, #67	; 0x43
 8005d20:	f003 fa63 	bl	80091ea <HAL_NVIC_EnableIRQ>
    
}
 8005d24:	bf00      	nop
 8005d26:	3728      	adds	r7, #40	; 0x28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40021000 	.word	0x40021000

08005d30 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f00d ff1a 	bl	8013b80 <USBD_LL_SetupStage>
}
 8005d4c:	bf00      	nop
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005d66:	78fa      	ldrb	r2, [r7, #3]
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	440b      	add	r3, r1
 8005d74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	f00d ff4c 	bl	8013c1a <USBD_LL_DataOutStage>
}
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005d9c:	78fa      	ldrb	r2, [r7, #3]
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	1a9b      	subs	r3, r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	3348      	adds	r3, #72	; 0x48
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	78fb      	ldrb	r3, [r7, #3]
 8005db0:	4619      	mov	r1, r3
 8005db2:	f00d ffa3 	bl	8013cfc <USBD_LL_DataInStage>
}
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f00e f8b6 	bl	8013f3e <USBD_LL_SOF>
}
 8005dd2:	bf00      	nop
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005de8:	4618      	mov	r0, r3
 8005dea:	f00e f82c 	bl	8013e46 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005df4:	2101      	movs	r1, #1
 8005df6:	4618      	mov	r0, r3
 8005df8:	f00e f866 	bl	8013ec8 <USBD_LL_SetSpeed>
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e12:	4618      	mov	r0, r3
 8005e14:	f00e f868 	bl	8013ee8 <USBD_LL_Suspend>
}
 8005e18:	bf00      	nop
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f00e f86f 	bl	8013f12 <USBD_LL_Resume>
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e4e:	78fa      	ldrb	r2, [r7, #3]
 8005e50:	4611      	mov	r1, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f00e f89a 	bl	8013f8c <USBD_LL_IsoOUTIncomplete>
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e72:	78fa      	ldrb	r2, [r7, #3]
 8005e74:	4611      	mov	r1, r2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f00e f87b 	bl	8013f72 <USBD_LL_IsoINIncomplete>
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e92:	4618      	mov	r0, r3
 8005e94:	f00e f887 	bl	8013fa6 <USBD_LL_DevConnected>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f00e f884 	bl	8013fbc <USBD_LL_DevDisconnected>
}
 8005eb4:	bf00      	nop
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Set LL Driver parameters */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005ec4:	4b2e      	ldr	r3, [pc, #184]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005ec6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005eca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 8;
 8005ecc:	4b2c      	ldr	r3, [pc, #176]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005ece:	2208      	movs	r2, #8
 8005ed0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = 0;
 8005ed2:	4b2b      	ldr	r3, [pc, #172]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.ep0_mps = 0x40;
 8005ed8:	4b29      	ldr	r3, [pc, #164]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005eda:	2240      	movs	r2, #64	; 0x40
 8005edc:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.dma_enable = 0;
 8005ede:	4b28      	ldr	r3, [pc, #160]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.low_power_enable = 0;
 8005ee4:	4b26      	ldr	r3, [pc, #152]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = 0;
 8005eea:	4b25      	ldr	r3, [pc, #148]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = 0;
 8005ef0:	4b23      	ldr	r3, [pc, #140]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005ef6:	4b22      	ldr	r3, [pc, #136]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005ef8:	2202      	movs	r2, #2
 8005efa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = 1;
 8005efc:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005f02:	4b1f      	ldr	r3, [pc, #124]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005f04:	2202      	movs	r2, #2
 8005f06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = 0;
 8005f08:	4b1d      	ldr	r3, [pc, #116]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd_USB_OTG_FS.pData = pdev;
 8005f0e:	4a1c      	ldr	r2, [pc, #112]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a19      	ldr	r2, [pc, #100]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005f1a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd_USB_OTG_FS);
 8005f1e:	4818      	ldr	r0, [pc, #96]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005f20:	f005 fa33 	bl	800b38a <HAL_PCD_Init>
  
  HAL_PCD_SetRxFiFo(&hpcd_USB_OTG_FS, 0x40);
 8005f24:	2140      	movs	r1, #64	; 0x40
 8005f26:	4816      	ldr	r0, [pc, #88]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005f28:	f006 fa99 	bl	800c45e <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005f2c:	2240      	movs	r2, #64	; 0x40
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4813      	ldr	r0, [pc, #76]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005f32:	f006 fa4d 	bl	800c3d0 <HAL_PCDEx_SetTxFiFo>
  
  /*FIFO allocation: equally divided respect to the endpoints
  This may be not the optimal solution, depending on the 
  datarate flowing on each eandpoint */
  
  uint16_t fifoSizePerEp = (320 - 2*(0x40)) / (N_IN_ENDPOINTS);
 8005f36:	2326      	movs	r3, #38	; 0x26
 8005f38:	81fb      	strh	r3, [r7, #14]

  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 1, fifoSizePerEp);
 8005f3a:	89fb      	ldrh	r3, [r7, #14]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	2101      	movs	r1, #1
 8005f40:	480f      	ldr	r0, [pc, #60]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005f42:	f006 fa45 	bl	800c3d0 <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >1)  
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 2, fifoSizePerEp);
 8005f46:	89fb      	ldrh	r3, [r7, #14]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	2102      	movs	r1, #2
 8005f4c:	480c      	ldr	r0, [pc, #48]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005f4e:	f006 fa3f 	bl	800c3d0 <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >2)    
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 3, fifoSizePerEp);
 8005f52:	89fb      	ldrh	r3, [r7, #14]
 8005f54:	461a      	mov	r2, r3
 8005f56:	2103      	movs	r1, #3
 8005f58:	4809      	ldr	r0, [pc, #36]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005f5a:	f006 fa39 	bl	800c3d0 <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >3)  
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 4, fifoSizePerEp);
 8005f5e:	89fb      	ldrh	r3, [r7, #14]
 8005f60:	461a      	mov	r2, r3
 8005f62:	2104      	movs	r1, #4
 8005f64:	4806      	ldr	r0, [pc, #24]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005f66:	f006 fa33 	bl	800c3d0 <HAL_PCDEx_SetTxFiFo>
#if (N_IN_ENDPOINTS >4)  
  HAL_PCD_SetTxFiFo(&hpcd_USB_OTG_FS, 5, fifoSizePerEp);
 8005f6a:	89fb      	ldrh	r3, [r7, #14]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2105      	movs	r1, #5
 8005f70:	4803      	ldr	r0, [pc, #12]	; (8005f80 <USBD_LL_Init+0xc4>)
 8005f72:	f006 fa2d 	bl	800c3d0 <HAL_PCDEx_SetTxFiFo>
#endif
#endif  
#endif
#endif

  return USBD_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20018b3c 	.word	0x20018b3c

08005f84 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f92:	4618      	mov	r0, r3
 8005f94:	f005 fb1d 	bl	800b5d2 <HAL_PCD_Start>
  return USBD_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b082      	sub	sp, #8
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	4608      	mov	r0, r1
 8005fac:	4611      	mov	r1, r2
 8005fae:	461a      	mov	r2, r3
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	70fb      	strb	r3, [r7, #3]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70bb      	strb	r3, [r7, #2]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005fc2:	78bb      	ldrb	r3, [r7, #2]
 8005fc4:	883a      	ldrh	r2, [r7, #0]
 8005fc6:	78f9      	ldrb	r1, [r7, #3]
 8005fc8:	f005 fefb 	bl	800bdc2 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fe8:	78fa      	ldrb	r2, [r7, #3]
 8005fea:	4611      	mov	r1, r2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f005 ff50 	bl	800be92 <HAL_PCD_EP_Close>
  return USBD_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800600e:	78fa      	ldrb	r2, [r7, #3]
 8006010:	4611      	mov	r1, r2
 8006012:	4618      	mov	r0, r3
 8006014:	f006 f81a 	bl	800c04c <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	460b      	mov	r3, r1
 800602c:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	4611      	mov	r1, r2
 8006038:	4618      	mov	r0, r3
 800603a:	f006 f869 	bl	800c110 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800605a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800605c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006060:	2b00      	cmp	r3, #0
 8006062:	da0b      	bge.n	800607c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800606a:	68f9      	ldr	r1, [r7, #12]
 800606c:	4613      	mov	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	333e      	adds	r3, #62	; 0x3e
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	e00b      	b.n	8006094 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006082:	68f9      	ldr	r1, [r7, #12]
 8006084:	4613      	mov	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	1a9b      	subs	r3, r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006092:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060b2:	78fa      	ldrb	r2, [r7, #3]
 80060b4:	4611      	mov	r1, r2
 80060b6:	4618      	mov	r0, r3
 80060b8:	f005 fe5e 	bl	800bd78 <HAL_PCD_SetAddress>
  return USBD_OK; 
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	461a      	mov	r2, r3
 80060d2:	460b      	mov	r3, r1
 80060d4:	72fb      	strb	r3, [r7, #11]
 80060d6:	4613      	mov	r3, r2
 80060d8:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80060e0:	893b      	ldrh	r3, [r7, #8]
 80060e2:	7af9      	ldrb	r1, [r7, #11]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	f005 ff74 	bl	800bfd2 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	607a      	str	r2, [r7, #4]
 80060fe:	461a      	mov	r2, r3
 8006100:	460b      	mov	r3, r1
 8006102:	72fb      	strb	r3, [r7, #11]
 8006104:	4613      	mov	r3, r2
 8006106:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800610e:	893b      	ldrh	r3, [r7, #8]
 8006110:	7af9      	ldrb	r1, [r7, #11]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	f005 ff07 	bl	800bf26 <HAL_PCD_EP_Receive>
  return USBD_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006134:	78fa      	ldrb	r2, [r7, #3]
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f005 ff32 	bl	800bfa2 <HAL_PCD_EP_GetRxCount>
 800613e:	4603      	mov	r3, r0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USBD_WCID_STREAMING_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	6039      	str	r1, [r7, #0]
 8006152:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2212      	movs	r2, #18
 8006158:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_DeviceDesc;
 800615a:	4b03      	ldr	r3, [pc, #12]	; (8006168 <USBD_WCID_STREAMING_DeviceDescriptor+0x20>)
}
 800615c:	4618      	mov	r0, r3
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	20000058 	.word	0x20000058

0800616c <USBD_WCID_STREAMING_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	6039      	str	r1, [r7, #0]
 8006176:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);  
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2204      	movs	r2, #4
 800617c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 800617e:	4b03      	ldr	r3, [pc, #12]	; (800618c <USBD_WCID_STREAMING_LangIDStrDescriptor+0x20>)
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	2000006c 	.word	0x2000006c

08006190 <USBD_WCID_STREAMING_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{  
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	6039      	str	r1, [r7, #0]
 800619a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	4904      	ldr	r1, [pc, #16]	; (80061b0 <USBD_WCID_STREAMING_ProductStrDescriptor+0x20>)
 80061a0:	4804      	ldr	r0, [pc, #16]	; (80061b4 <USBD_WCID_STREAMING_ProductStrDescriptor+0x24>)
 80061a2:	f00e fc70 	bl	8014a86 <USBD_GetString>
  return USBD_StrDesc;
 80061a6:	4b02      	ldr	r3, [pc, #8]	; (80061b0 <USBD_WCID_STREAMING_ProductStrDescriptor+0x20>)
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20018f44 	.word	0x20018f44
 80061b4:	08022610 	.word	0x08022610

080061b8 <USBD_WCID_STREAMING_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	6039      	str	r1, [r7, #0]
 80061c2:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	4904      	ldr	r1, [pc, #16]	; (80061d8 <USBD_WCID_STREAMING_ManufacturerStrDescriptor+0x20>)
 80061c8:	4804      	ldr	r0, [pc, #16]	; (80061dc <USBD_WCID_STREAMING_ManufacturerStrDescriptor+0x24>)
 80061ca:	f00e fc5c 	bl	8014a86 <USBD_GetString>
  return USBD_StrDesc;
 80061ce:	4b02      	ldr	r3, [pc, #8]	; (80061d8 <USBD_WCID_STREAMING_ManufacturerStrDescriptor+0x20>)
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20018f44 	.word	0x20018f44
 80061dc:	08022630 	.word	0x08022630

080061e0 <USBD_WCID_STREAMING_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	6039      	str	r1, [r7, #0]
 80061ea:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	221a      	movs	r2, #26
 80061f0:	801a      	strh	r2, [r3, #0]
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 80061f2:	f000 f82f 	bl	8006254 <Get_SerialNum>
  
  return (uint8_t*)USBD_StringSerial;
 80061f6:	4b02      	ldr	r3, [pc, #8]	; (8006200 <USBD_WCID_STREAMING_SerialStrDescriptor+0x20>)
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20000070 	.word	0x20000070

08006204 <USBD_WCID_STREAMING_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{ 
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	4603      	mov	r3, r0
 800620c:	6039      	str	r1, [r7, #0]
 800620e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	4904      	ldr	r1, [pc, #16]	; (8006224 <USBD_WCID_STREAMING_ConfigStrDescriptor+0x20>)
 8006214:	4804      	ldr	r0, [pc, #16]	; (8006228 <USBD_WCID_STREAMING_ConfigStrDescriptor+0x24>)
 8006216:	f00e fc36 	bl	8014a86 <USBD_GetString>
  return USBD_StrDesc;  
 800621a:	4b02      	ldr	r3, [pc, #8]	; (8006224 <USBD_WCID_STREAMING_ConfigStrDescriptor+0x20>)
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20018f44 	.word	0x20018f44
 8006228:	08022644 	.word	0x08022644

0800622c <USBD_WCID_STREAMING_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_WCID_STREAMING_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	4603      	mov	r3, r0
 8006234:	6039      	str	r1, [r7, #0]
 8006236:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	4904      	ldr	r1, [pc, #16]	; (800624c <USBD_WCID_STREAMING_InterfaceStrDescriptor+0x20>)
 800623c:	4804      	ldr	r0, [pc, #16]	; (8006250 <USBD_WCID_STREAMING_InterfaceStrDescriptor+0x24>)
 800623e:	f00e fc22 	bl	8014a86 <USBD_GetString>
  return USBD_StrDesc;  
 8006242:	4b02      	ldr	r3, [pc, #8]	; (800624c <USBD_WCID_STREAMING_InterfaceStrDescriptor+0x20>)
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20018f44 	.word	0x20018f44
 8006250:	08022654 	.word	0x08022654

08006254 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800625a:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <Get_SerialNum+0x44>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8006260:	4b0e      	ldr	r3, [pc, #56]	; (800629c <Get_SerialNum+0x48>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8006266:	4b0e      	ldr	r3, [pc, #56]	; (80062a0 <Get_SerialNum+0x4c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	607b      	str	r3, [r7, #4]
  
  deviceserial0 += deviceserial2;
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4413      	add	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  
  if (deviceserial0 != 0)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <Get_SerialNum+0x3a>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800627a:	2208      	movs	r2, #8
 800627c:	4909      	ldr	r1, [pc, #36]	; (80062a4 <Get_SerialNum+0x50>)
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f814 	bl	80062ac <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8006284:	2204      	movs	r2, #4
 8006286:	4908      	ldr	r1, [pc, #32]	; (80062a8 <Get_SerialNum+0x54>)
 8006288:	68b8      	ldr	r0, [r7, #8]
 800628a:	f000 f80f 	bl	80062ac <IntToUnicode>
  }
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	1fff7590 	.word	0x1fff7590
 800629c:	1fff7594 	.word	0x1fff7594
 80062a0:	1fff7598 	.word	0x1fff7598
 80062a4:	20000072 	.word	0x20000072
 80062a8:	20000082 	.word	0x20000082

080062ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	75fb      	strb	r3, [r7, #23]
  
  for( idx = 0 ; idx < len ; idx ++)
 80062be:	2300      	movs	r3, #0
 80062c0:	75fb      	strb	r3, [r7, #23]
 80062c2:	e027      	b.n	8006314 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	0f1b      	lsrs	r3, r3, #28
 80062c8:	2b09      	cmp	r3, #9
 80062ca:	d80b      	bhi.n	80062e4 <IntToUnicode+0x38>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	0f1b      	lsrs	r3, r3, #28
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4619      	mov	r1, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	440b      	add	r3, r1
 80062dc:	3230      	adds	r2, #48	; 0x30
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	e00a      	b.n	80062fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	0f1b      	lsrs	r3, r3, #28
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	4619      	mov	r1, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	440b      	add	r3, r1
 80062f4:	3237      	adds	r2, #55	; 0x37
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	3301      	adds	r3, #1
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	4413      	add	r3, r2
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
  for( idx = 0 ; idx < len ; idx ++)
 800630e:	7dfb      	ldrb	r3, [r7, #23]
 8006310:	3301      	adds	r3, #1
 8006312:	75fb      	strb	r3, [r7, #23]
 8006314:	7dfa      	ldrb	r2, [r7, #23]
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	429a      	cmp	r2, r3
 800631a:	d3d3      	bcc.n	80062c4 <IntToUnicode+0x18>
  }
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <WCID_STREAMING_Itf_Init>:
*         Initializes the WCID media low layer
* @param  None
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_Init(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /*ToDo : add state variable, check for allocation success */
  USB_RxBuffer = HSD_calloc(512, sizeof(uint8_t));
 8006330:	2101      	movs	r1, #1
 8006332:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006336:	f018 fd83 	bl	801ee40 <calloc>
 800633a:	4603      	mov	r3, r0
 800633c:	461a      	mov	r2, r3
 800633e:	4b05      	ldr	r3, [pc, #20]	; (8006354 <WCID_STREAMING_Itf_Init+0x28>)
 8006340:	601a      	str	r2, [r3, #0]
  if(USB_RxBuffer == NULL)
  {
    /* Error */
  }    
  
  USBD_WCID_STREAMING_SetRxDataBuffer(&USBD_Device, (uint8_t *)USB_RxBuffer);  
 8006342:	4b04      	ldr	r3, [pc, #16]	; (8006354 <WCID_STREAMING_Itf_Init+0x28>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4619      	mov	r1, r3
 8006348:	4803      	ldr	r0, [pc, #12]	; (8006358 <WCID_STREAMING_Itf_Init+0x2c>)
 800634a:	f00d f91d 	bl	8013588 <USBD_WCID_STREAMING_SetRxDataBuffer>
  return (USBD_OK);
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000b00 	.word	0x20000b00
 8006358:	200163b4 	.word	0x200163b4

0800635c <WCID_STREAMING_Itf_DeInit>:
*         DeInitializes the WCID media low layer
* @param  None
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_DeInit(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
  /*ToDo : add state variable, check for allocation success */  
  if( USB_RxBuffer != NULL)
 8006360:	4b07      	ldr	r3, [pc, #28]	; (8006380 <WCID_STREAMING_Itf_DeInit+0x24>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <WCID_STREAMING_Itf_DeInit+0x1c>
  {
    HSD_free(USB_RxBuffer);
 8006368:	4b05      	ldr	r3, [pc, #20]	; (8006380 <WCID_STREAMING_Itf_DeInit+0x24>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4618      	mov	r0, r3
 800636e:	f018 ffc1 	bl	801f2f4 <free>
    USB_RxBuffer = NULL;
 8006372:	4b03      	ldr	r3, [pc, #12]	; (8006380 <WCID_STREAMING_Itf_DeInit+0x24>)
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]
  }
  
  return (USBD_OK);
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000b00 	.word	0x20000b00

08006384 <WCID_STREAMING_Itf_Control>:
* @param  Buf: Buffer containing command data (request parameters)
* @param  Len: Number of data to be sent (in bytes)
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_Control (uint8_t isHostToDevice, uint8_t cmd, uint16_t wValue, uint16_t wIndex, uint8_t* pbuf, uint16_t length)
{ 
 8006384:	b590      	push	{r4, r7, lr}
 8006386:	b08f      	sub	sp, #60	; 0x3c
 8006388:	af00      	add	r7, sp, #0
 800638a:	4604      	mov	r4, r0
 800638c:	4608      	mov	r0, r1
 800638e:	4611      	mov	r1, r2
 8006390:	461a      	mov	r2, r3
 8006392:	4623      	mov	r3, r4
 8006394:	71fb      	strb	r3, [r7, #7]
 8006396:	4603      	mov	r3, r0
 8006398:	71bb      	strb	r3, [r7, #6]
 800639a:	460b      	mov	r3, r1
 800639c:	80bb      	strh	r3, [r7, #4]
 800639e:	4613      	mov	r3, r2
 80063a0:	807b      	strh	r3, [r7, #2]
  if (com_status != HS_DATALOG_IDLE && com_status != HS_DATALOG_USB_STARTED )
 80063a2:	4baa      	ldr	r3, [pc, #680]	; (800664c <WCID_STREAMING_Itf_Control+0x2c8>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d006      	beq.n	80063ba <WCID_STREAMING_Itf_Control+0x36>
 80063ac:	4ba7      	ldr	r3, [pc, #668]	; (800664c <WCID_STREAMING_Itf_Control+0x2c8>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d001      	beq.n	80063ba <WCID_STREAMING_Itf_Control+0x36>
    return USBD_FAIL;
 80063b6:	2302      	movs	r3, #2
 80063b8:	e304      	b.n	80069c4 <WCID_STREAMING_Itf_Control+0x640>
  
  uint32_t i = 0;  
 80063ba:	2300      	movs	r3, #0
 80063bc:	637b      	str	r3, [r7, #52]	; 0x34
  COM_SensorStatus_t * myStatus;
  COM_DeviceDescriptor_t * myDeviceDescriptor;
  
  static uint8_t state = STATE_WAITING;
  
  if(isHostToDevice)
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8205 	beq.w	80067d0 <WCID_STREAMING_Itf_Control+0x44c>
  {
    switch(state)
 80063c6:	4ba2      	ldr	r3, [pc, #648]	; (8006650 <WCID_STREAMING_Itf_Control+0x2cc>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <WCID_STREAMING_Itf_Control+0x50>
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	d01b      	beq.n	800640a <WCID_STREAMING_Itf_Control+0x86>
 80063d2:	e2f6      	b.n	80069c2 <WCID_STREAMING_Itf_Control+0x63e>
    {
    case STATE_WAITING:
      
      if(cmd != CMD_SIZE_SET)
 80063d4:	79bb      	ldrb	r3, [r7, #6]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d002      	beq.n	80063e0 <WCID_STREAMING_Itf_Control+0x5c>
        return -1; /* error */      
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
 80063de:	e2f1      	b.n	80069c4 <WCID_STREAMING_Itf_Control+0x640>
      
      size = *(uint16_t *)pbuf;
 80063e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e2:	881a      	ldrh	r2, [r3, #0]
 80063e4:	4b9b      	ldr	r3, [pc, #620]	; (8006654 <WCID_STREAMING_Itf_Control+0x2d0>)
 80063e6:	801a      	strh	r2, [r3, #0]
      serialized = HSD_malloc(size);
 80063e8:	4b9a      	ldr	r3, [pc, #616]	; (8006654 <WCID_STREAMING_Itf_Control+0x2d0>)
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f018 ff79 	bl	801f2e4 <malloc>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	4b98      	ldr	r3, [pc, #608]	; (8006658 <WCID_STREAMING_Itf_Control+0x2d4>)
 80063f8:	601a      	str	r2, [r3, #0]
      p = serialized;
 80063fa:	4b97      	ldr	r3, [pc, #604]	; (8006658 <WCID_STREAMING_Itf_Control+0x2d4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a97      	ldr	r2, [pc, #604]	; (800665c <WCID_STREAMING_Itf_Control+0x2d8>)
 8006400:	6013      	str	r3, [r2, #0]
      state = STATE_SIZE_RCVD;     
 8006402:	4b93      	ldr	r3, [pc, #588]	; (8006650 <WCID_STREAMING_Itf_Control+0x2cc>)
 8006404:	2205      	movs	r2, #5
 8006406:	701a      	strb	r2, [r3, #0]
      
      break;
 8006408:	e2db      	b.n	80069c2 <WCID_STREAMING_Itf_Control+0x63e>
    case STATE_SIZE_RCVD:
      if(cmd != CMD_DATA_SET)
 800640a:	79bb      	ldrb	r3, [r7, #6]
 800640c:	2b04      	cmp	r3, #4
 800640e:	d002      	beq.n	8006416 <WCID_STREAMING_Itf_Control+0x92>
        return -1; /* error */ 
 8006410:	f04f 33ff 	mov.w	r3, #4294967295
 8006414:	e2d6      	b.n	80069c4 <WCID_STREAMING_Itf_Control+0x640>
      
      for (i = 0; i < length; i ++)
 8006416:	2300      	movs	r3, #0
 8006418:	637b      	str	r3, [r7, #52]	; 0x34
 800641a:	e012      	b.n	8006442 <WCID_STREAMING_Itf_Control+0xbe>
      {
        *p++ = pbuf[i];
 800641c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800641e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006420:	441a      	add	r2, r3
 8006422:	4b8e      	ldr	r3, [pc, #568]	; (800665c <WCID_STREAMING_Itf_Control+0x2d8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	1c59      	adds	r1, r3, #1
 8006428:	488c      	ldr	r0, [pc, #560]	; (800665c <WCID_STREAMING_Itf_Control+0x2d8>)
 800642a:	6001      	str	r1, [r0, #0]
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	701a      	strb	r2, [r3, #0]
        size--;        
 8006430:	4b88      	ldr	r3, [pc, #544]	; (8006654 <WCID_STREAMING_Itf_Control+0x2d0>)
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	4b86      	ldr	r3, [pc, #536]	; (8006654 <WCID_STREAMING_Itf_Control+0x2d0>)
 800643a:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < length; i ++)
 800643c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643e:	3301      	adds	r3, #1
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
 8006442:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006448:	429a      	cmp	r2, r3
 800644a:	d3e7      	bcc.n	800641c <WCID_STREAMING_Itf_Control+0x98>
      }
      
      if (size == 0)
 800644c:	4b81      	ldr	r3, [pc, #516]	; (8006654 <WCID_STREAMING_Itf_Control+0x2d0>)
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f040 82b3 	bne.w	80069bc <WCID_STREAMING_Itf_Control+0x638>
      {
        
        HSD_JSON_parse_Command((char *)serialized, &outCommand);
 8006456:	4b80      	ldr	r3, [pc, #512]	; (8006658 <WCID_STREAMING_Itf_Control+0x2d4>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4981      	ldr	r1, [pc, #516]	; (8006660 <WCID_STREAMING_Itf_Control+0x2dc>)
 800645c:	4618      	mov	r0, r3
 800645e:	f7fa fcfb 	bl	8000e58 <HSD_JSON_parse_Command>
        state = STATE_REQUEST_SET;     
 8006462:	4b7b      	ldr	r3, [pc, #492]	; (8006650 <WCID_STREAMING_Itf_Control+0x2cc>)
 8006464:	2201      	movs	r2, #1
 8006466:	701a      	strb	r2, [r3, #0]
        
        
        if(outCommand.command == COM_COMMAND_SET) 
 8006468:	4b7d      	ldr	r3, [pc, #500]	; (8006660 <WCID_STREAMING_Itf_Control+0x2dc>)
 800646a:	f993 3000 	ldrsb.w	r3, [r3]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d126      	bne.n	80064c0 <WCID_STREAMING_Itf_Control+0x13c>
        {
          myStatus = COM_GetSensorStatus(outCommand.sensorId);
 8006472:	4b7b      	ldr	r3, [pc, #492]	; (8006660 <WCID_STREAMING_Itf_Control+0x2dc>)
 8006474:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	4618      	mov	r0, r3
 800647c:	f7fb fc76 	bl	8001d6c <COM_GetSensorStatus>
 8006480:	60b8      	str	r0, [r7, #8]
          memcpy(&tempSensor.sensorStatus, myStatus, sizeof(COM_SensorStatus_t));               
 8006482:	224c      	movs	r2, #76	; 0x4c
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	4877      	ldr	r0, [pc, #476]	; (8006664 <WCID_STREAMING_Itf_Control+0x2e0>)
 8006488:	f018 ff3c 	bl	801f304 <memcpy>
          HSD_JSON_parse_Status((char *)serialized, &tempSensor.sensorStatus);    
 800648c:	4b72      	ldr	r3, [pc, #456]	; (8006658 <WCID_STREAMING_Itf_Control+0x2d4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4974      	ldr	r1, [pc, #464]	; (8006664 <WCID_STREAMING_Itf_Control+0x2e0>)
 8006492:	4618      	mov	r0, r3
 8006494:	f7fa fcee 	bl	8000e74 <HSD_JSON_parse_Status>
          HSD_JSON_free(serialized);
 8006498:	4b6f      	ldr	r3, [pc, #444]	; (8006658 <WCID_STREAMING_Itf_Control+0x2d4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4618      	mov	r0, r3
 800649e:	f7fa fc65 	bl	8000d6c <HSD_JSON_free>
          
          update_sensorStatus(myStatus, &tempSensor.sensorStatus, outCommand.sensorId);
 80064a2:	4b6f      	ldr	r3, [pc, #444]	; (8006660 <WCID_STREAMING_Itf_Control+0x2dc>)
 80064a4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	496d      	ldr	r1, [pc, #436]	; (8006664 <WCID_STREAMING_Itf_Control+0x2e0>)
 80064ae:	68b8      	ldr	r0, [r7, #8]
 80064b0:	f7fc fd50 	bl	8002f54 <update_sensorStatus>
          
          
          /* Update the sensor-specific config structure */
          update_sensors_config();        
 80064b4:	f7fc fe5c 	bl	8003170 <update_sensors_config>
          
          state = STATE_WAITING;
 80064b8:	4b65      	ldr	r3, [pc, #404]	; (8006650 <WCID_STREAMING_Itf_Control+0x2cc>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
          
          SM_TIM_Stop(); 
          state = STATE_WAITING;
        }
      }
      break;
 80064be:	e27d      	b.n	80069bc <WCID_STREAMING_Itf_Control+0x638>
        else if(outCommand.command == COM_COMMAND_START) 
 80064c0:	4b67      	ldr	r3, [pc, #412]	; (8006660 <WCID_STREAMING_Itf_Control+0x2dc>)
 80064c2:	f993 3000 	ldrsb.w	r3, [r3]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	f040 80e6 	bne.w	8006698 <WCID_STREAMING_Itf_Control+0x314>
          com_status = HS_DATALOG_USB_STARTED;
 80064cc:	4b5f      	ldr	r3, [pc, #380]	; (800664c <WCID_STREAMING_Itf_Control+0x2c8>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	701a      	strb	r2, [r3, #0]
          myDeviceDescriptor = COM_GetDeviceDescriptor();
 80064d2:	f7fb fc19 	bl	8001d08 <COM_GetDeviceDescriptor>
 80064d6:	60f8      	str	r0, [r7, #12]
          SM_TIM_Start();
 80064d8:	f7ff faf6 	bl	8005ac8 <SM_TIM_Start>
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 80064dc:	2300      	movs	r3, #0
 80064de:	633b      	str	r3, [r7, #48]	; 0x30
 80064e0:	e0a6      	b.n	8006630 <WCID_STREAMING_Itf_Control+0x2ac>
            myStatus = COM_GetSensorStatus(i);  
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fb fc40 	bl	8001d6c <COM_GetSensorStatus>
 80064ec:	60b8      	str	r0, [r7, #8]
            if(myStatus->comChannelNumber != -1 && myStatus->isActive)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f8:	f000 8097 	beq.w	800662a <WCID_STREAMING_Itf_Control+0x2a6>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	7b9b      	ldrb	r3, [r3, #14]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 8092 	beq.w	800662a <WCID_STREAMING_Itf_Control+0x2a6>
              TxBuffer[myStatus->comChannelNumber] = NULL;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800650c:	4619      	mov	r1, r3
 800650e:	4b56      	ldr	r3, [pc, #344]	; (8006668 <WCID_STREAMING_Itf_Control+0x2e4>)
 8006510:	2200      	movs	r2, #0
 8006512:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
              TxBuffer[myStatus->comChannelNumber] = HSD_calloc((myStatus->usbDataPacketSize *2 +2), sizeof(uint8_t));
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	8a1b      	ldrh	r3, [r3, #16]
 800651a:	3301      	adds	r3, #1
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	461a      	mov	r2, r3
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006526:	461c      	mov	r4, r3
 8006528:	2101      	movs	r1, #1
 800652a:	4610      	mov	r0, r2
 800652c:	f018 fc88 	bl	801ee40 <calloc>
 8006530:	4603      	mov	r3, r0
 8006532:	461a      	mov	r2, r3
 8006534:	4b4c      	ldr	r3, [pc, #304]	; (8006668 <WCID_STREAMING_Itf_Control+0x2e4>)
 8006536:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
              if(TxBuffer[myStatus->comChannelNumber] == NULL)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006540:	461a      	mov	r2, r3
 8006542:	4b49      	ldr	r3, [pc, #292]	; (8006668 <WCID_STREAMING_Itf_Control+0x2e4>)
 8006544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <WCID_STREAMING_Itf_Control+0x1cc>
                _Error_Handler();
 800654c:	f000 fa52 	bl	80069f4 <_Error_Handler>
              USBD_WCID_STREAMING_SetTxDataBuffer(&USBD_Device, myStatus->comChannelNumber, TxBuffer[myStatus->comChannelNumber], myStatus->usbDataPacketSize);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006556:	b2d9      	uxtb	r1, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800655e:	461a      	mov	r2, r3
 8006560:	4b41      	ldr	r3, [pc, #260]	; (8006668 <WCID_STREAMING_Itf_Control+0x2e4>)
 8006562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	8a1b      	ldrh	r3, [r3, #16]
 800656a:	4840      	ldr	r0, [pc, #256]	; (800666c <WCID_STREAMING_Itf_Control+0x2e8>)
 800656c:	f00d f9f2 	bl	8013954 <USBD_WCID_STREAMING_SetTxDataBuffer>
              USBD_WCID_STREAMING_CleanTxDataBuffer(&USBD_Device, myStatus->comChannelNumber);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	4619      	mov	r1, r3
 800657a:	483c      	ldr	r0, [pc, #240]	; (800666c <WCID_STREAMING_Itf_Control+0x2e8>)
 800657c:	f00d f9d0 	bl	8013920 <USBD_WCID_STREAMING_CleanTxDataBuffer>
              if(i == iis3dwb_com_id)
 8006580:	4b3b      	ldr	r3, [pc, #236]	; (8006670 <WCID_STREAMING_Itf_Control+0x2ec>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	4293      	cmp	r3, r2
 800658a:	d102      	bne.n	8006592 <WCID_STREAMING_Itf_Control+0x20e>
                IIS3DWB_Start();
 800658c:	f7fd f9f8 	bl	8003980 <IIS3DWB_Start>
 8006590:	e046      	b.n	8006620 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == hts221_com_id)
 8006592:	4b38      	ldr	r3, [pc, #224]	; (8006674 <WCID_STREAMING_Itf_Control+0x2f0>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	4293      	cmp	r3, r2
 800659c:	d102      	bne.n	80065a4 <WCID_STREAMING_Itf_Control+0x220>
                HTS221_Start();
 800659e:	f7fc fefd 	bl	800339c <HTS221_Start>
 80065a2:	e03d      	b.n	8006620 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == iis2dh_com_id)
 80065a4:	4b34      	ldr	r3, [pc, #208]	; (8006678 <WCID_STREAMING_Itf_Control+0x2f4>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d102      	bne.n	80065b6 <WCID_STREAMING_Itf_Control+0x232>
                IIS2DH_Start();
 80065b0:	f7fc ff1a 	bl	80033e8 <IIS2DH_Start>
 80065b4:	e034      	b.n	8006620 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == iis2mdc_com_id)
 80065b6:	4b31      	ldr	r3, [pc, #196]	; (800667c <WCID_STREAMING_Itf_Control+0x2f8>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	4293      	cmp	r3, r2
 80065c0:	d102      	bne.n	80065c8 <WCID_STREAMING_Itf_Control+0x244>
                IIS2MDC_Start();
 80065c2:	f7fc ff37 	bl	8003434 <IIS2MDC_Start>
 80065c6:	e02b      	b.n	8006620 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == imp34dt05_com_id)
 80065c8:	4b2d      	ldr	r3, [pc, #180]	; (8006680 <WCID_STREAMING_Itf_Control+0x2fc>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d102      	bne.n	80065da <WCID_STREAMING_Itf_Control+0x256>
                IMP34DT05_Start();
 80065d4:	f7fd f9fa 	bl	80039cc <IMP34DT05_Start>
 80065d8:	e022      	b.n	8006620 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == mp23abs1_com_id)
 80065da:	4b2a      	ldr	r3, [pc, #168]	; (8006684 <WCID_STREAMING_Itf_Control+0x300>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d102      	bne.n	80065ec <WCID_STREAMING_Itf_Control+0x268>
                MP23ABS1_Start();
 80065e6:	f7fd fe31 	bl	800424c <MP23ABS1_Start>
 80065ea:	e019      	b.n	8006620 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == ism330dhcx_com_id)
 80065ec:	4b26      	ldr	r3, [pc, #152]	; (8006688 <WCID_STREAMING_Itf_Control+0x304>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d102      	bne.n	80065fe <WCID_STREAMING_Itf_Control+0x27a>
                ISM330DHCX_Start();
 80065f8:	f7fd fa0e 	bl	8003a18 <ISM330DHCX_Start>
 80065fc:	e010      	b.n	8006620 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == lps22hh_com_id)
 80065fe:	4b23      	ldr	r3, [pc, #140]	; (800668c <WCID_STREAMING_Itf_Control+0x308>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	4293      	cmp	r3, r2
 8006608:	d102      	bne.n	8006610 <WCID_STREAMING_Itf_Control+0x28c>
                LPS22HH_Start();
 800660a:	f7fd fa2b 	bl	8003a64 <LPS22HH_Start>
 800660e:	e007      	b.n	8006620 <WCID_STREAMING_Itf_Control+0x29c>
              else if(i == stts751_com_id)
 8006610:	4b1f      	ldr	r3, [pc, #124]	; (8006690 <WCID_STREAMING_Itf_Control+0x30c>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	4293      	cmp	r3, r2
 800661a:	d101      	bne.n	8006620 <WCID_STREAMING_Itf_Control+0x29c>
                STTS751_Start();          
 800661c:	f7ff fb00 	bl	8005c20 <STTS751_Start>
              sensor_first_dataReady[i] = 1;
 8006620:	4a1c      	ldr	r2, [pc, #112]	; (8006694 <WCID_STREAMING_Itf_Control+0x310>)
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	4413      	add	r3, r2
 8006626:	2201      	movs	r2, #1
 8006628:	701a      	strb	r2, [r3, #0]
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	3301      	adds	r3, #1
 800662e:	633b      	str	r3, [r7, #48]	; 0x30
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	429a      	cmp	r2, r3
 8006638:	f63f af53 	bhi.w	80064e2 <WCID_STREAMING_Itf_Control+0x15e>
          USBD_WCID_STREAMING_StartStreaming(&USBD_Device);
 800663c:	480b      	ldr	r0, [pc, #44]	; (800666c <WCID_STREAMING_Itf_Control+0x2e8>)
 800663e:	f00d f9d5 	bl	80139ec <USBD_WCID_STREAMING_StartStreaming>
          state = STATE_WAITING;
 8006642:	4b03      	ldr	r3, [pc, #12]	; (8006650 <WCID_STREAMING_Itf_Control+0x2cc>)
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
      break;
 8006648:	e1b8      	b.n	80069bc <WCID_STREAMING_Itf_Control+0x638>
 800664a:	bf00      	nop
 800664c:	20000504 	.word	0x20000504
 8006650:	20000b04 	.word	0x20000b04
 8006654:	20000b06 	.word	0x20000b06
 8006658:	20000b08 	.word	0x20000b08
 800665c:	20000b0c 	.word	0x20000b0c
 8006660:	20000b10 	.word	0x20000b10
 8006664:	20000cc0 	.word	0x20000cc0
 8006668:	2001d044 	.word	0x2001d044
 800666c:	200163b4 	.word	0x200163b4
 8006670:	200163a4 	.word	0x200163a4
 8006674:	200166b8 	.word	0x200166b8
 8006678:	200166c8 	.word	0x200166c8
 800667c:	20016679 	.word	0x20016679
 8006680:	200166c0 	.word	0x200166c0
 8006684:	20016678 	.word	0x20016678
 8006688:	200166b9 	.word	0x200166b9
 800668c:	200166d1 	.word	0x200166d1
 8006690:	200166d0 	.word	0x200166d0
 8006694:	20000028 	.word	0x20000028
        else if(outCommand.command == COM_COMMAND_STOP) 
 8006698:	4ba2      	ldr	r3, [pc, #648]	; (8006924 <WCID_STREAMING_Itf_Control+0x5a0>)
 800669a:	f993 3000 	ldrsb.w	r3, [r3]
 800669e:	2b03      	cmp	r3, #3
 80066a0:	f040 818c 	bne.w	80069bc <WCID_STREAMING_Itf_Control+0x638>
          USBD_WCID_STREAMING_StopStreaming(&USBD_Device);
 80066a4:	48a0      	ldr	r0, [pc, #640]	; (8006928 <WCID_STREAMING_Itf_Control+0x5a4>)
 80066a6:	f00d f9c9 	bl	8013a3c <USBD_WCID_STREAMING_StopStreaming>
          com_status = HS_DATALOG_IDLE;
 80066aa:	4ba0      	ldr	r3, [pc, #640]	; (800692c <WCID_STREAMING_Itf_Control+0x5a8>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	701a      	strb	r2, [r3, #0]
          for (int i = 0; i < N_CHANNELS_MAX; i++)
 80066b0:	2300      	movs	r3, #0
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b4:	e014      	b.n	80066e0 <WCID_STREAMING_Itf_Control+0x35c>
            if( TxBuffer[i] != NULL)
 80066b6:	4a9e      	ldr	r2, [pc, #632]	; (8006930 <WCID_STREAMING_Itf_Control+0x5ac>)
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <WCID_STREAMING_Itf_Control+0x356>
              HSD_free(TxBuffer[i]);
 80066c2:	4a9b      	ldr	r2, [pc, #620]	; (8006930 <WCID_STREAMING_Itf_Control+0x5ac>)
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f018 fe12 	bl	801f2f4 <free>
              TxBuffer[i] = NULL;
 80066d0:	4a97      	ldr	r2, [pc, #604]	; (8006930 <WCID_STREAMING_Itf_Control+0x5ac>)
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	2100      	movs	r1, #0
 80066d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          for (int i = 0; i < N_CHANNELS_MAX; i++)
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	3301      	adds	r3, #1
 80066de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	2b08      	cmp	r3, #8
 80066e4:	dde7      	ble.n	80066b6 <WCID_STREAMING_Itf_Control+0x332>
          myDeviceDescriptor = COM_GetDeviceDescriptor();
 80066e6:	f7fb fb0f 	bl	8001d08 <COM_GetDeviceDescriptor>
 80066ea:	60f8      	str	r0, [r7, #12]
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 80066ec:	2300      	movs	r3, #0
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f0:	e063      	b.n	80067ba <WCID_STREAMING_Itf_Control+0x436>
            myStatus = COM_GetSensorStatus(i);  
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fb fb38 	bl	8001d6c <COM_GetSensorStatus>
 80066fc:	60b8      	str	r0, [r7, #8]
            if(myStatus->comChannelNumber != -1)
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8006704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006708:	d054      	beq.n	80067b4 <WCID_STREAMING_Itf_Control+0x430>
              if(i == iis3dwb_com_id)
 800670a:	4b8a      	ldr	r3, [pc, #552]	; (8006934 <WCID_STREAMING_Itf_Control+0x5b0>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	4293      	cmp	r3, r2
 8006714:	d102      	bne.n	800671c <WCID_STREAMING_Itf_Control+0x398>
                IIS3DWB_Stop();
 8006716:	f7fd f941 	bl	800399c <IIS3DWB_Stop>
 800671a:	e046      	b.n	80067aa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == hts221_com_id)
 800671c:	4b86      	ldr	r3, [pc, #536]	; (8006938 <WCID_STREAMING_Itf_Control+0x5b4>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	4293      	cmp	r3, r2
 8006726:	d102      	bne.n	800672e <WCID_STREAMING_Itf_Control+0x3aa>
                HTS221_Stop();
 8006728:	f7fc fe46 	bl	80033b8 <HTS221_Stop>
 800672c:	e03d      	b.n	80067aa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == iis2dh_com_id)
 800672e:	4b83      	ldr	r3, [pc, #524]	; (800693c <WCID_STREAMING_Itf_Control+0x5b8>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	4293      	cmp	r3, r2
 8006738:	d102      	bne.n	8006740 <WCID_STREAMING_Itf_Control+0x3bc>
                IIS2DH_Stop();
 800673a:	f7fc fe63 	bl	8003404 <IIS2DH_Stop>
 800673e:	e034      	b.n	80067aa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == iis2mdc_com_id)
 8006740:	4b7f      	ldr	r3, [pc, #508]	; (8006940 <WCID_STREAMING_Itf_Control+0x5bc>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	4293      	cmp	r3, r2
 800674a:	d102      	bne.n	8006752 <WCID_STREAMING_Itf_Control+0x3ce>
                IIS2MDC_Stop();
 800674c:	f7fc fe80 	bl	8003450 <IIS2MDC_Stop>
 8006750:	e02b      	b.n	80067aa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == imp34dt05_com_id)
 8006752:	4b7c      	ldr	r3, [pc, #496]	; (8006944 <WCID_STREAMING_Itf_Control+0x5c0>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	4293      	cmp	r3, r2
 800675c:	d102      	bne.n	8006764 <WCID_STREAMING_Itf_Control+0x3e0>
                IMP34DT05_Stop();
 800675e:	f7fd f943 	bl	80039e8 <IMP34DT05_Stop>
 8006762:	e022      	b.n	80067aa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == mp23abs1_com_id)
 8006764:	4b78      	ldr	r3, [pc, #480]	; (8006948 <WCID_STREAMING_Itf_Control+0x5c4>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	4293      	cmp	r3, r2
 800676e:	d102      	bne.n	8006776 <WCID_STREAMING_Itf_Control+0x3f2>
                MP23ABS1_Stop();              
 8006770:	f7fd fd7a 	bl	8004268 <MP23ABS1_Stop>
 8006774:	e019      	b.n	80067aa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == ism330dhcx_com_id)
 8006776:	4b75      	ldr	r3, [pc, #468]	; (800694c <WCID_STREAMING_Itf_Control+0x5c8>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	4293      	cmp	r3, r2
 8006780:	d102      	bne.n	8006788 <WCID_STREAMING_Itf_Control+0x404>
                ISM330DHCX_Stop();
 8006782:	f7fd f957 	bl	8003a34 <ISM330DHCX_Stop>
 8006786:	e010      	b.n	80067aa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == lps22hh_com_id)
 8006788:	4b71      	ldr	r3, [pc, #452]	; (8006950 <WCID_STREAMING_Itf_Control+0x5cc>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006790:	4293      	cmp	r3, r2
 8006792:	d102      	bne.n	800679a <WCID_STREAMING_Itf_Control+0x416>
                LPS22HH_Stop();              
 8006794:	f7fd f974 	bl	8003a80 <LPS22HH_Stop>
 8006798:	e007      	b.n	80067aa <WCID_STREAMING_Itf_Control+0x426>
              else if(i == stts751_com_id)
 800679a:	4b6e      	ldr	r3, [pc, #440]	; (8006954 <WCID_STREAMING_Itf_Control+0x5d0>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d101      	bne.n	80067aa <WCID_STREAMING_Itf_Control+0x426>
                STTS751_Stop();          
 80067a6:	f7ff fa49 	bl	8005c3c <STTS751_Stop>
              sensor_first_dataReady[i] = 0;
 80067aa:	4a6b      	ldr	r2, [pc, #428]	; (8006958 <WCID_STREAMING_Itf_Control+0x5d4>)
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	4413      	add	r3, r2
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
          for (int i = 0; i < myDeviceDescriptor->nSensor; i++)
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	3301      	adds	r3, #1
 80067b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d896      	bhi.n	80066f2 <WCID_STREAMING_Itf_Control+0x36e>
          SM_TIM_Stop(); 
 80067c4:	f7ff f98a 	bl	8005adc <SM_TIM_Stop>
          state = STATE_WAITING;
 80067c8:	4b64      	ldr	r3, [pc, #400]	; (800695c <WCID_STREAMING_Itf_Control+0x5d8>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	701a      	strb	r2, [r3, #0]
      break;
 80067ce:	e0f5      	b.n	80069bc <WCID_STREAMING_Itf_Control+0x638>
    }     
  }
  else /* Device to host */
  {
    switch(state)
 80067d0:	4b62      	ldr	r3, [pc, #392]	; (800695c <WCID_STREAMING_Itf_Control+0x5d8>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d003      	beq.n	80067e0 <WCID_STREAMING_Itf_Control+0x45c>
 80067d8:	2b02      	cmp	r3, #2
 80067da:	f000 809a 	beq.w	8006912 <WCID_STREAMING_Itf_Control+0x58e>
 80067de:	e0f0      	b.n	80069c2 <WCID_STREAMING_Itf_Control+0x63e>
    {
    case STATE_REQUEST_SET: /* Host needs size */
      
      if(cmd != CMD_SIZE_GET)
 80067e0:	79bb      	ldrb	r3, [r7, #6]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d002      	beq.n	80067ec <WCID_STREAMING_Itf_Control+0x468>
        return -1; /* error*/       
 80067e6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ea:	e0eb      	b.n	80069c4 <WCID_STREAMING_Itf_Control+0x640>
      
      HSD_JSON_free(serialized);
 80067ec:	4b5c      	ldr	r3, [pc, #368]	; (8006960 <WCID_STREAMING_Itf_Control+0x5dc>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fa fabb 	bl	8000d6c <HSD_JSON_free>
      
      switch(outCommand.request)
 80067f6:	4b4b      	ldr	r3, [pc, #300]	; (8006924 <WCID_STREAMING_Itf_Control+0x5a0>)
 80067f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d87c      	bhi.n	80068fa <WCID_STREAMING_Itf_Control+0x576>
 8006800:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <WCID_STREAMING_Itf_Control+0x484>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	08006819 	.word	0x08006819
 800680c:	08006833 	.word	0x08006833
 8006810:	0800684b 	.word	0x0800684b
 8006814:	080068a3 	.word	0x080068a3
      {
        COM_Device_t * myDevice;
        COM_DeviceDescriptor_t * myDeviceDescriptor;
      case COM_REQUEST_DEVICE:
        myDevice = COM_GetDevice();
 8006818:	f7fb fa6c 	bl	8001cf4 <COM_GetDevice>
 800681c:	6138      	str	r0, [r7, #16]
        size = HSD_JSON_serialize_Device(myDevice, &serialized, SHORT_JSON);
 800681e:	2200      	movs	r2, #0
 8006820:	494f      	ldr	r1, [pc, #316]	; (8006960 <WCID_STREAMING_Itf_Control+0x5dc>)
 8006822:	6938      	ldr	r0, [r7, #16]
 8006824:	f7fa fab2 	bl	8000d8c <HSD_JSON_serialize_Device>
 8006828:	4603      	mov	r3, r0
 800682a:	b29a      	uxth	r2, r3
 800682c:	4b4d      	ldr	r3, [pc, #308]	; (8006964 <WCID_STREAMING_Itf_Control+0x5e0>)
 800682e:	801a      	strh	r2, [r3, #0]
        break;
 8006830:	e063      	b.n	80068fa <WCID_STREAMING_Itf_Control+0x576>
        
      case COM_REQUEST_DEVICE_INFO:
        myDeviceDescriptor = COM_GetDeviceDescriptor();
 8006832:	f7fb fa69 	bl	8001d08 <COM_GetDeviceDescriptor>
 8006836:	6178      	str	r0, [r7, #20]
        size = HSD_JSON_serialize_DeviceInfo(myDeviceDescriptor, &serialized);
 8006838:	4949      	ldr	r1, [pc, #292]	; (8006960 <WCID_STREAMING_Itf_Control+0x5dc>)
 800683a:	6978      	ldr	r0, [r7, #20]
 800683c:	f7fa fab8 	bl	8000db0 <HSD_JSON_serialize_DeviceInfo>
 8006840:	4603      	mov	r3, r0
 8006842:	b29a      	uxth	r2, r3
 8006844:	4b47      	ldr	r3, [pc, #284]	; (8006964 <WCID_STREAMING_Itf_Control+0x5e0>)
 8006846:	801a      	strh	r2, [r3, #0]
        break;       
 8006848:	e057      	b.n	80068fa <WCID_STREAMING_Itf_Control+0x576>
        
      case COM_REQUEST_DESCRIPTOR:
        if (outCommand.subSensorId < 0) /* Request is for Sensor, since subSensor was not present in the Json */
 800684a:	4b36      	ldr	r3, [pc, #216]	; (8006924 <WCID_STREAMING_Itf_Control+0x5a0>)
 800684c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8006850:	2b00      	cmp	r3, #0
 8006852:	da10      	bge.n	8006876 <WCID_STREAMING_Itf_Control+0x4f2>
        {
          COM_SensorDescriptor_t * mySensorDescriptor =  COM_GetSensorDescriptor(outCommand.sensorId);
 8006854:	4b33      	ldr	r3, [pc, #204]	; (8006924 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006856:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	4618      	mov	r0, r3
 800685e:	f7fb fa71 	bl	8001d44 <COM_GetSensorDescriptor>
 8006862:	61b8      	str	r0, [r7, #24]
          size = HSD_JSON_serialize_SensorDescriptor(mySensorDescriptor, &serialized);           
 8006864:	493e      	ldr	r1, [pc, #248]	; (8006960 <WCID_STREAMING_Itf_Control+0x5dc>)
 8006866:	69b8      	ldr	r0, [r7, #24]
 8006868:	f7fa fab0 	bl	8000dcc <HSD_JSON_serialize_SensorDescriptor>
 800686c:	4603      	mov	r3, r0
 800686e:	b29a      	uxth	r2, r3
 8006870:	4b3c      	ldr	r3, [pc, #240]	; (8006964 <WCID_STREAMING_Itf_Control+0x5e0>)
 8006872:	801a      	strh	r2, [r3, #0]
        else
        {      
          COM_SubSensorDescriptor_t * mySubSensorDescriptor =  COM_GetSubSensorDescriptor(outCommand.sensorId, outCommand.subSensorId);
          size = HSD_JSON_serialize_SubSensorDescriptor(mySubSensorDescriptor, &serialized);
        }       
        break;       
 8006874:	e041      	b.n	80068fa <WCID_STREAMING_Itf_Control+0x576>
          COM_SubSensorDescriptor_t * mySubSensorDescriptor =  COM_GetSubSensorDescriptor(outCommand.sensorId, outCommand.subSensorId);
 8006876:	4b2b      	ldr	r3, [pc, #172]	; (8006924 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006878:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	4a29      	ldr	r2, [pc, #164]	; (8006924 <WCID_STREAMING_Itf_Control+0x5a0>)
 8006880:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	4611      	mov	r1, r2
 8006888:	4618      	mov	r0, r3
 800688a:	f7fb fa85 	bl	8001d98 <COM_GetSubSensorDescriptor>
 800688e:	61f8      	str	r0, [r7, #28]
          size = HSD_JSON_serialize_SubSensorDescriptor(mySubSensorDescriptor, &serialized);
 8006890:	4933      	ldr	r1, [pc, #204]	; (8006960 <WCID_STREAMING_Itf_Control+0x5dc>)
 8006892:	69f8      	ldr	r0, [r7, #28]
 8006894:	f7fa fab6 	bl	8000e04 <HSD_JSON_serialize_SubSensorDescriptor>
 8006898:	4603      	mov	r3, r0
 800689a:	b29a      	uxth	r2, r3
 800689c:	4b31      	ldr	r3, [pc, #196]	; (8006964 <WCID_STREAMING_Itf_Control+0x5e0>)
 800689e:	801a      	strh	r2, [r3, #0]
        break;       
 80068a0:	e02b      	b.n	80068fa <WCID_STREAMING_Itf_Control+0x576>
      case COM_REQUEST_STATUS:
        if (outCommand.subSensorId < 0) /* Request is for Sensor, since subSensor was not present in the Json */
 80068a2:	4b20      	ldr	r3, [pc, #128]	; (8006924 <WCID_STREAMING_Itf_Control+0x5a0>)
 80068a4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	da10      	bge.n	80068ce <WCID_STREAMING_Itf_Control+0x54a>
        {
          COM_SensorStatus_t * mySensorStatus =  COM_GetSensorStatus(outCommand.sensorId);
 80068ac:	4b1d      	ldr	r3, [pc, #116]	; (8006924 <WCID_STREAMING_Itf_Control+0x5a0>)
 80068ae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fb fa59 	bl	8001d6c <COM_GetSensorStatus>
 80068ba:	6238      	str	r0, [r7, #32]
          size = HSD_JSON_serialize_SensorStatus(mySensorStatus, &serialized);
 80068bc:	4928      	ldr	r1, [pc, #160]	; (8006960 <WCID_STREAMING_Itf_Control+0x5dc>)
 80068be:	6a38      	ldr	r0, [r7, #32]
 80068c0:	f7fa fa92 	bl	8000de8 <HSD_JSON_serialize_SensorStatus>
 80068c4:	4603      	mov	r3, r0
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	4b26      	ldr	r3, [pc, #152]	; (8006964 <WCID_STREAMING_Itf_Control+0x5e0>)
 80068ca:	801a      	strh	r2, [r3, #0]
        else
        {
          COM_SubSensorStatus_t * mySubSensorStatus = COM_GetSubSensorStatus(outCommand.sensorId, outCommand.subSensorId);           
          size = HSD_JSON_serialize_SubSensorStatus(mySubSensorStatus, &serialized);     
        }
        break;         
 80068cc:	e014      	b.n	80068f8 <WCID_STREAMING_Itf_Control+0x574>
          COM_SubSensorStatus_t * mySubSensorStatus = COM_GetSubSensorStatus(outCommand.sensorId, outCommand.subSensorId);           
 80068ce:	4b15      	ldr	r3, [pc, #84]	; (8006924 <WCID_STREAMING_Itf_Control+0x5a0>)
 80068d0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	4a13      	ldr	r2, [pc, #76]	; (8006924 <WCID_STREAMING_Itf_Control+0x5a0>)
 80068d8:	f992 2003 	ldrsb.w	r2, [r2, #3]
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	4611      	mov	r1, r2
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fb fa77 	bl	8001dd4 <COM_GetSubSensorStatus>
 80068e6:	6278      	str	r0, [r7, #36]	; 0x24
          size = HSD_JSON_serialize_SubSensorStatus(mySubSensorStatus, &serialized);     
 80068e8:	491d      	ldr	r1, [pc, #116]	; (8006960 <WCID_STREAMING_Itf_Control+0x5dc>)
 80068ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068ec:	f7fa fa98 	bl	8000e20 <HSD_JSON_serialize_SubSensorStatus>
 80068f0:	4603      	mov	r3, r0
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	4b1b      	ldr	r3, [pc, #108]	; (8006964 <WCID_STREAMING_Itf_Control+0x5e0>)
 80068f6:	801a      	strh	r2, [r3, #0]
        break;         
 80068f8:	bf00      	nop
      }
      
      *(uint16_t *)pbuf = size;           
 80068fa:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <WCID_STREAMING_Itf_Control+0x5e0>)
 80068fc:	881a      	ldrh	r2, [r3, #0]
 80068fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006900:	801a      	strh	r2, [r3, #0]
      p = serialized;       
 8006902:	4b17      	ldr	r3, [pc, #92]	; (8006960 <WCID_STREAMING_Itf_Control+0x5dc>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a18      	ldr	r2, [pc, #96]	; (8006968 <WCID_STREAMING_Itf_Control+0x5e4>)
 8006908:	6013      	str	r3, [r2, #0]
      
      state = STATE_SIZE_SENT;       
 800690a:	4b14      	ldr	r3, [pc, #80]	; (800695c <WCID_STREAMING_Itf_Control+0x5d8>)
 800690c:	2202      	movs	r2, #2
 800690e:	701a      	strb	r2, [r3, #0]
      break;
 8006910:	e057      	b.n	80069c2 <WCID_STREAMING_Itf_Control+0x63e>
    case STATE_SIZE_SENT:
      
      if(cmd != CMD_DATA_GET)
 8006912:	79bb      	ldrb	r3, [r7, #6]
 8006914:	2b02      	cmp	r3, #2
 8006916:	d002      	beq.n	800691e <WCID_STREAMING_Itf_Control+0x59a>
        return -1; /* error*/ 
 8006918:	f04f 33ff 	mov.w	r3, #4294967295
 800691c:	e052      	b.n	80069c4 <WCID_STREAMING_Itf_Control+0x640>
      
      for (i = 0; i < length; i++)
 800691e:	2300      	movs	r3, #0
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
 8006922:	e036      	b.n	8006992 <WCID_STREAMING_Itf_Control+0x60e>
 8006924:	20000b10 	.word	0x20000b10
 8006928:	200163b4 	.word	0x200163b4
 800692c:	20000504 	.word	0x20000504
 8006930:	2001d044 	.word	0x2001d044
 8006934:	200163a4 	.word	0x200163a4
 8006938:	200166b8 	.word	0x200166b8
 800693c:	200166c8 	.word	0x200166c8
 8006940:	20016679 	.word	0x20016679
 8006944:	200166c0 	.word	0x200166c0
 8006948:	20016678 	.word	0x20016678
 800694c:	200166b9 	.word	0x200166b9
 8006950:	200166d1 	.word	0x200166d1
 8006954:	200166d0 	.word	0x200166d0
 8006958:	20000028 	.word	0x20000028
 800695c:	20000b04 	.word	0x20000b04
 8006960:	20000b08 	.word	0x20000b08
 8006964:	20000b06 	.word	0x20000b06
 8006968:	20000b0c 	.word	0x20000b0c
      {
        pbuf[i] = *p++;
 800696c:	4b17      	ldr	r3, [pc, #92]	; (80069cc <WCID_STREAMING_Itf_Control+0x648>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	4916      	ldr	r1, [pc, #88]	; (80069cc <WCID_STREAMING_Itf_Control+0x648>)
 8006974:	600a      	str	r2, [r1, #0]
 8006976:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800697a:	440a      	add	r2, r1
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	7013      	strb	r3, [r2, #0]
        size--;          
 8006980:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <WCID_STREAMING_Itf_Control+0x64c>)
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <WCID_STREAMING_Itf_Control+0x64c>)
 800698a:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < length; i++)
 800698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698e:	3301      	adds	r3, #1
 8006990:	637b      	str	r3, [r7, #52]	; 0x34
 8006992:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006998:	429a      	cmp	r2, r3
 800699a:	d3e7      	bcc.n	800696c <WCID_STREAMING_Itf_Control+0x5e8>
      }
      if(size == 0)
 800699c:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <WCID_STREAMING_Itf_Control+0x64c>)
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10d      	bne.n	80069c0 <WCID_STREAMING_Itf_Control+0x63c>
      {
        HSD_JSON_free(serialized);
 80069a4:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <WCID_STREAMING_Itf_Control+0x650>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fa f9df 	bl	8000d6c <HSD_JSON_free>
        serialized = NULL;
 80069ae:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <WCID_STREAMING_Itf_Control+0x650>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
        state = STATE_WAITING;         
 80069b4:	4b08      	ldr	r3, [pc, #32]	; (80069d8 <WCID_STREAMING_Itf_Control+0x654>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	701a      	strb	r2, [r3, #0]
      }       
      break;    
 80069ba:	e001      	b.n	80069c0 <WCID_STREAMING_Itf_Control+0x63c>
      break;
 80069bc:	bf00      	nop
 80069be:	e000      	b.n	80069c2 <WCID_STREAMING_Itf_Control+0x63e>
      break;    
 80069c0:	bf00      	nop
    }
  }
  
  return (USBD_OK);
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	373c      	adds	r7, #60	; 0x3c
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd90      	pop	{r4, r7, pc}
 80069cc:	20000b0c 	.word	0x20000b0c
 80069d0:	20000b06 	.word	0x20000b06
 80069d4:	20000b08 	.word	0x20000b08
 80069d8:	20000b04 	.word	0x20000b04

080069dc <WCID_STREAMING_Itf_Receive>:
* @param  Buf: Buffer of data to be transmitted
* @param  Len: Number of data received (in bytes)
* @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
*/
static int8_t WCID_STREAMING_Itf_Receive(uint8_t* Buf, uint32_t Len)
{  
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  return (USBD_OK);
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <_Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void _Error_Handler( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  while (1)
 80069f8:	e7fe      	b.n	80069f8 <_Error_Handler+0x4>

080069fa <iis3dwb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 80069fa:	b590      	push	{r4, r7, lr}
 80069fc:	b087      	sub	sp, #28
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	461a      	mov	r2, r3
 8006a06:	460b      	mov	r3, r1
 8006a08:	72fb      	strb	r3, [r7, #11]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	685c      	ldr	r4, [r3, #4]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6898      	ldr	r0, [r3, #8]
 8006a16:	893b      	ldrh	r3, [r7, #8]
 8006a18:	7af9      	ldrb	r1, [r7, #11]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	47a0      	blx	r4
 8006a1e:	6178      	str	r0, [r7, #20]
  return ret;
 8006a20:	697b      	ldr	r3, [r7, #20]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd90      	pop	{r4, r7, pc}

08006a2a <iis3dwb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 8006a2a:	b590      	push	{r4, r7, lr}
 8006a2c:	b087      	sub	sp, #28
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	461a      	mov	r2, r3
 8006a36:	460b      	mov	r3, r1
 8006a38:	72fb      	strb	r3, [r7, #11]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681c      	ldr	r4, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6898      	ldr	r0, [r3, #8]
 8006a46:	893b      	ldrh	r3, [r7, #8]
 8006a48:	7af9      	ldrb	r1, [r7, #11]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	47a0      	blx	r4
 8006a4e:	6178      	str	r0, [r7, #20]
  return ret;
 8006a50:	697b      	ldr	r3, [r7, #20]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd90      	pop	{r4, r7, pc}

08006a5a <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    iis3dwb_fs_xl_t val)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006a66:	f107 0208 	add.w	r2, r7, #8
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	2110      	movs	r1, #16
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff ffc3 	bl	80069fa <iis3dwb_read_reg>
 8006a74:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10f      	bne.n	8006a9c <iis3dwb_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	7a3b      	ldrb	r3, [r7, #8]
 8006a86:	f362 0383 	bfi	r3, r2, #2, #2
 8006a8a:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8006a8c:	f107 0208 	add.w	r2, r7, #8
 8006a90:	2301      	movs	r3, #1
 8006a92:	2110      	movs	r1, #16
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ffc8 	bl	8006a2a <iis3dwb_write_reg>
 8006a9a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                      iis3dwb_dataready_pulsed_t val)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 8006ab2:	f107 0208 	add.w	r2, r7, #8
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	210b      	movs	r1, #11
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff ff9d 	bl	80069fa <iis3dwb_read_reg>
 8006ac0:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&counter_bdr_reg1, 1);
  if(ret == 0){
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10f      	bne.n	8006ae8 <iis3dwb_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed= (uint8_t)val;
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	7a3b      	ldrb	r3, [r7, #8]
 8006ad2:	f362 13c7 	bfi	r3, r2, #7, #1
 8006ad6:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 8006ad8:	f107 0208 	add.w	r2, r7, #8
 8006adc:	2301      	movs	r3, #1
 8006ade:	210b      	movs	r1, #11
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ffa2 	bl	8006a2a <iis3dwb_write_reg>
 8006ae6:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&counter_bdr_reg1, 1);
  }
  return ret;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 8006afc:	2301      	movs	r3, #1
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	210f      	movs	r1, #15
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff ff79 	bl	80069fa <iis3dwb_read_reg>
 8006b08:	60f8      	str	r0, [r7, #12]
  return ret;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8006b20:	f107 0208 	add.w	r2, r7, #8
 8006b24:	2301      	movs	r3, #1
 8006b26:	2112      	movs	r1, #18
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff ff66 	bl	80069fa <iis3dwb_read_reg>
 8006b2e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10f      	bne.n	8006b56 <iis3dwb_reset_set+0x42>
    ctrl3_c.sw_reset= (uint8_t)val;
 8006b36:	78fb      	ldrb	r3, [r7, #3]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	7a3b      	ldrb	r3, [r7, #8]
 8006b40:	f362 0300 	bfi	r3, r2, #0, #1
 8006b44:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8006b46:	f107 0208 	add.w	r2, r7, #8
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	2112      	movs	r1, #18
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff ff6b 	bl	8006a2a <iis3dwb_write_reg>
 8006b54:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006b56:	68fb      	ldr	r3, [r7, #12]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <iis3dwb_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_hp_slope_xl_en_t val)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006b6c:	f107 0210 	add.w	r2, r7, #16
 8006b70:	2301      	movs	r3, #1
 8006b72:	2110      	movs	r1, #16
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff ff40 	bl	80069fa <iis3dwb_read_reg>
 8006b7a:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d111      	bne.n	8006ba6 <iis3dwb_xl_hp_path_on_out_set+0x46>
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	09db      	lsrs	r3, r3, #7
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	7c3b      	ldrb	r3, [r7, #16]
 8006b90:	f362 0341 	bfi	r3, r2, #1, #1
 8006b94:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8006b96:	f107 0210 	add.w	r2, r7, #16
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	2110      	movs	r1, #16
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff ff43 	bl	8006a2a <iis3dwb_write_reg>
 8006ba4:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d107      	bne.n	8006bbc <iis3dwb_xl_hp_path_on_out_set+0x5c>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8006bac:	f107 020c 	add.w	r2, r7, #12
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	2117      	movs	r1, #23
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ff20 	bl	80069fa <iis3dwb_read_reg>
 8006bba:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d121      	bne.n	8006c06 <iis3dwb_xl_hp_path_on_out_set+0xa6>
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 8006bc2:	78fb      	ldrb	r3, [r7, #3]
 8006bc4:	091b      	lsrs	r3, r3, #4
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	7b3b      	ldrb	r3, [r7, #12]
 8006bce:	f362 0382 	bfi	r3, r2, #2, #1
 8006bd2:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	7b3b      	ldrb	r3, [r7, #12]
 8006be0:	f362 1304 	bfi	r3, r2, #4, #1
 8006be4:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	7b3b      	ldrb	r3, [r7, #12]
 8006bf0:	f362 1347 	bfi	r3, r2, #5, #3
 8006bf4:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8006bf6:	f107 020c 	add.w	r2, r7, #12
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	2117      	movs	r1, #23
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff ff13 	bl	8006a2a <iis3dwb_write_reg>
 8006c04:	6178      	str	r0, [r7, #20]
  }
  return ret;
 8006c06:	697b      	ldr	r3, [r7, #20]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                    iis3dwb_i2c_disable_t val)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8006c1c:	f107 0208 	add.w	r2, r7, #8
 8006c20:	2301      	movs	r3, #1
 8006c22:	2113      	movs	r1, #19
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff fee8 	bl	80069fa <iis3dwb_read_reg>
 8006c2a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10f      	bne.n	8006c52 <iis3dwb_i2c_interface_set+0x42>
    ctrl4_c.i2c_disable= (uint8_t)val;
 8006c32:	78fb      	ldrb	r3, [r7, #3]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	7a3b      	ldrb	r3, [r7, #8]
 8006c3c:	f362 0382 	bfi	r3, r2, #2, #1
 8006c40:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8006c42:	f107 0208 	add.w	r2, r7, #8
 8006c46:	2301      	movs	r3, #1
 8006c48:	2113      	movs	r1, #19
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7ff feed 	bl	8006a2a <iis3dwb_write_reg>
 8006c50:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006c52:	68fb      	ldr	r3, [r7, #12]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <iis3dwb_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                     iis3dwb_pin_int1_route_t *val)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
                            (uint8_t*)&val->int1_ctrl, 1);
 8006c66:	683a      	ldr	r2, [r7, #0]
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
 8006c68:	2301      	movs	r3, #1
 8006c6a:	210d      	movs	r1, #13
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff fedc 	bl	8006a2a <iis3dwb_write_reg>
 8006c72:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d107      	bne.n	8006c8a <iis3dwb_pin_int1_route_set+0x2e>
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
                              (uint8_t*)&val->md1_cfg, 1);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	1c5a      	adds	r2, r3, #1
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
 8006c7e:	2301      	movs	r3, #1
 8006c80:	215e      	movs	r1, #94	; 0x5e
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff fed1 	bl	8006a2a <iis3dwb_write_reg>
 8006c88:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	807b      	strh	r3, [r7, #2]
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8006ca0:	f107 020c 	add.w	r2, r7, #12
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	2108      	movs	r1, #8
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7ff fea6 	bl	80069fa <iis3dwb_read_reg>
 8006cae:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_ctrl2, 1);
  if(ret == 0){
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <iis3dwb_fifo_watermark_set+0x38>
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 8006cb6:	887b      	ldrh	r3, [r7, #2]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
 8006cbc:	f107 0210 	add.w	r2, r7, #16
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	2107      	movs	r1, #7
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff feb0 	bl	8006a2a <iis3dwb_write_reg>
 8006cca:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl1, 1);
  }
  if(ret == 0){
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d111      	bne.n	8006cf6 <iis3dwb_fifo_watermark_set+0x62>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 8006cd2:	887b      	ldrh	r3, [r7, #2]
 8006cd4:	0a1b      	lsrs	r3, r3, #8
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	7b3b      	ldrb	r3, [r7, #12]
 8006ce0:	f362 0300 	bfi	r3, r2, #0, #1
 8006ce4:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8006ce6:	f107 020c 	add.w	r2, r7, #12
 8006cea:	2301      	movs	r3, #1
 8006cec:	2108      	movs	r1, #8
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff fe9b 	bl	8006a2a <iis3dwb_write_reg>
 8006cf4:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
  }
  return ret;
 8006cf6:	697b      	ldr	r3, [r7, #20]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                    iis3dwb_bdr_xl_t val)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8006d0c:	f107 0208 	add.w	r2, r7, #8
 8006d10:	2301      	movs	r3, #1
 8006d12:	2109      	movs	r1, #9
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff fe70 	bl	80069fa <iis3dwb_read_reg>
 8006d1a:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl3, 1);
  if(ret == 0){
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10f      	bne.n	8006d42 <iis3dwb_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl= (uint8_t)val;
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	7a3b      	ldrb	r3, [r7, #8]
 8006d2c:	f362 0303 	bfi	r3, r2, #0, #4
 8006d30:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8006d32:	f107 0208 	add.w	r2, r7, #8
 8006d36:	2301      	movs	r3, #1
 8006d38:	2109      	movs	r1, #9
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff fe75 	bl	8006a2a <iis3dwb_write_reg>
 8006d40:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 8006d42:	68fb      	ldr	r3, [r7, #12]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                                iis3dwb_fifo_mode_t val)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8006d58:	f107 0208 	add.w	r2, r7, #8
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	210a      	movs	r1, #10
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff fe4a 	bl	80069fa <iis3dwb_read_reg>
 8006d66:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10f      	bne.n	8006d8e <iis3dwb_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	7a3b      	ldrb	r3, [r7, #8]
 8006d78:	f362 0302 	bfi	r3, r2, #0, #3
 8006d7c:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8006d7e:	f107 0208 	add.w	r2, r7, #8
 8006d82:	2301      	movs	r3, #1
 8006d84:	210a      	movs	r1, #10
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff fe4f 	bl	8006a2a <iis3dwb_write_reg>
 8006d8c:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	71fb      	strb	r3, [r7, #7]
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 8006da2:	4b31      	ldr	r3, [pc, #196]	; (8006e68 <BSP_ADC1_Initialization+0xd0>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d152      	bne.n	8006e50 <BSP_ADC1_Initialization+0xb8>
   
    /**Common config */
    ADC1_Handle.Instance = ADC1;
 8006daa:	4b30      	ldr	r3, [pc, #192]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006dac:	4a30      	ldr	r2, [pc, #192]	; (8006e70 <BSP_ADC1_Initialization+0xd8>)
 8006dae:	601a      	str	r2, [r3, #0]
    ADC1_Handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006db0:	4b2e      	ldr	r3, [pc, #184]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	605a      	str	r2, [r3, #4]
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 8006db6:	4b2d      	ldr	r3, [pc, #180]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	609a      	str	r2, [r3, #8]
    ADC1_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006dbc:	4b2b      	ldr	r3, [pc, #172]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	60da      	str	r2, [r3, #12]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 8006dc2:	4b2a      	ldr	r3, [pc, #168]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	611a      	str	r2, [r3, #16]
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006dc8:	4b28      	ldr	r3, [pc, #160]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006dca:	2204      	movs	r2, #4
 8006dcc:	615a      	str	r2, [r3, #20]
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 8006dce:	4b27      	ldr	r3, [pc, #156]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	761a      	strb	r2, [r3, #24]
    ADC1_Handle.Init.ContinuousConvMode = ENABLE;
 8006dd4:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	765a      	strb	r2, [r3, #25]
    ADC1_Handle.Init.NbrOfConversion = 1; 
 8006dda:	4b24      	ldr	r3, [pc, #144]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	61da      	str	r2, [r3, #28]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 8006de0:	4b22      	ldr	r3, [pc, #136]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	625a      	str	r2, [r3, #36]	; 0x24
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 8006de6:	4b21      	ldr	r3, [pc, #132]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2020 	strb.w	r2, [r3, #32]
    ADC1_Handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006dee:	4b1f      	ldr	r3, [pc, #124]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006df4:	4b1d      	ldr	r3, [pc, #116]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 8006dfa:	4b1c      	ldr	r3, [pc, #112]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006e02:	4b1a      	ldr	r3, [pc, #104]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e08:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Oversampling enabled */
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 8006e0a:	4b18      	ldr	r3, [pc, #96]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    
    ADC1_Handle.Init.Oversampling.RightBitShift         = ADC_RIGHTBITSHIFT_NONE;         /* Right shift of the oversampled summation */
 8006e12:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	641a      	str	r2, [r3, #64]	; 0x40
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 8006e18:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	645a      	str	r2, [r3, #68]	; 0x44
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */    
 8006e1e:	4b13      	ldr	r3, [pc, #76]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006e20:	2201      	movs	r2, #1
 8006e22:	649a      	str	r2, [r3, #72]	; 0x48
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8006e24:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006e26:	2204      	movs	r2, #4
 8006e28:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 8006e2a:	4810      	ldr	r0, [pc, #64]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006e2c:	f000 ff36 	bl	8007c9c <HAL_ADC_Init>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <BSP_ADC1_Initialization+0xa4>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8006e36:	f06f 0303 	mvn.w	r3, #3
 8006e3a:	e011      	b.n	8006e60 <BSP_ADC1_Initialization+0xc8>
    }

    /* ### Start calibration ############################################ */
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 8006e3c:	217f      	movs	r1, #127	; 0x7f
 8006e3e:	480b      	ldr	r0, [pc, #44]	; (8006e6c <BSP_ADC1_Initialization+0xd4>)
 8006e40:	f001 fc18 	bl	8008674 <HAL_ADCEx_Calibration_Start>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <BSP_ADC1_Initialization+0xb8>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8006e4a:	f06f 0303 	mvn.w	r3, #3
 8006e4e:	e007      	b.n	8006e60 <BSP_ADC1_Initialization+0xc8>
    } 
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 8006e50:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <BSP_ADC1_Initialization+0xd0>)
 8006e52:	781a      	ldrb	r2, [r3, #0]
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <BSP_ADC1_Initialization+0xd0>)
 8006e5c:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20000d0c 	.word	0x20000d0c
 8006e6c:	2001d068 	.word	0x2001d068
 8006e70:	50040000 	.word	0x50040000

08006e74 <HAL_ADC_MspInit>:
* @brief  Initialize the ADC MSP.
* @param  hDfsdmFilter ADC handle
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 8006e7c:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <HAL_ADC_MspInit+0x40>)
 8006e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e80:	4a0c      	ldr	r2, [pc, #48]	; (8006eb4 <HAL_ADC_MspInit+0x40>)
 8006e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e88:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <HAL_ADC_MspInit+0x40>)
 8006e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 8006e94:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <HAL_ADC_MspInit+0x40>)
 8006e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006e9e:	4a05      	ldr	r2, [pc, #20]	; (8006eb4 <HAL_ADC_MspInit+0x40>)
 8006ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8006ea8:	bf00      	nop
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	40021000 	.word	0x40021000

08006eb8 <BSP_PB_PWR_Init>:
* @brief  Initialize the Power button PWR.
* @param  None
* @retval None
*/
void BSP_PB_PWR_Init(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8006ebe:	4b13      	ldr	r3, [pc, #76]	; (8006f0c <BSP_PB_PWR_Init+0x54>)
 8006ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec2:	4a12      	ldr	r2, [pc, #72]	; (8006f0c <BSP_PB_PWR_Init+0x54>)
 8006ec4:	f043 0308 	orr.w	r3, r3, #8
 8006ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006eca:	4b10      	ldr	r3, [pc, #64]	; (8006f0c <BSP_PB_PWR_Init+0x54>)
 8006ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	683b      	ldr	r3, [r7, #0]
  
  /* Configure Button pin as input with External interrupt */
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 8006ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8006edc:	2302      	movs	r3, #2
 8006ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006ee4:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <BSP_PB_PWR_Init+0x58>)
 8006ee6:	60bb      	str	r3, [r7, #8]
  
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8006ee8:	1d3b      	adds	r3, r7, #4
 8006eea:	4619      	mov	r1, r3
 8006eec:	4809      	ldr	r0, [pc, #36]	; (8006f14 <BSP_PB_PWR_Init+0x5c>)
 8006eee:	f002 fc17 	bl	8009720 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type) POWER_BUTTON_EXTI_IRQn, 0x0F, 0x00);
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	210f      	movs	r1, #15
 8006ef6:	2028      	movs	r0, #40	; 0x28
 8006ef8:	f002 f95b 	bl	80091b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) POWER_BUTTON_EXTI_IRQn);
 8006efc:	2028      	movs	r0, #40	; 0x28
 8006efe:	f002 f974 	bl	80091ea <HAL_NVIC_EnableIRQ>
  
}
 8006f02:	bf00      	nop
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	10110000 	.word	0x10110000
 8006f14:	48000c00 	.word	0x48000c00

08006f18 <BSP_Enable_DCDC2>:
* @brief  Initialize the DCDC MSP.
* @param  None
* @retval None
*/
void BSP_Enable_DCDC2(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f1e:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <BSP_Enable_DCDC2+0x50>)
 8006f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f22:	4a11      	ldr	r2, [pc, #68]	; (8006f68 <BSP_Enable_DCDC2+0x50>)
 8006f24:	f043 0310 	orr.w	r3, r3, #16
 8006f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f2a:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <BSP_Enable_DCDC2+0x50>)
 8006f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2e:	f003 0310 	and.w	r3, r3, #16
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	683b      	ldr	r3, [r7, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8006f44:	2302      	movs	r3, #2
 8006f46:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f48:	1d3b      	adds	r3, r7, #4
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4807      	ldr	r0, [pc, #28]	; (8006f6c <BSP_Enable_DCDC2+0x54>)
 8006f4e:	f002 fbe7 	bl	8009720 <HAL_GPIO_Init>
  
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8006f52:	2201      	movs	r2, #1
 8006f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f58:	4804      	ldr	r0, [pc, #16]	; (8006f6c <BSP_Enable_DCDC2+0x54>)
 8006f5a:	f002 fd8b 	bl	8009a74 <HAL_GPIO_WritePin>
}
 8006f5e:	bf00      	nop
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	48001000 	.word	0x48001000

08006f70 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	4603      	mov	r3, r0
 8006f78:	460a      	mov	r2, r1
 8006f7a:	71fb      	strb	r3, [r7, #7]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8006f80:	4b21      	ldr	r3, [pc, #132]	; (8007008 <BSP_PB_Init+0x98>)
 8006f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f84:	4a20      	ldr	r2, [pc, #128]	; (8007008 <BSP_PB_Init+0x98>)
 8006f86:	f043 0310 	orr.w	r3, r3, #16
 8006f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f8c:	4b1e      	ldr	r3, [pc, #120]	; (8007008 <BSP_PB_Init+0x98>)
 8006f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	60bb      	str	r3, [r7, #8]
 8006f96:	68bb      	ldr	r3, [r7, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8006f98:	79bb      	ldrb	r3, [r7, #6]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d112      	bne.n	8006fc4 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006faa:	2302      	movs	r3, #2
 8006fac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	4a16      	ldr	r2, [pc, #88]	; (800700c <BSP_PB_Init+0x9c>)
 8006fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fb6:	f107 020c 	add.w	r2, r7, #12
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f002 fbaf 	bl	8009720 <HAL_GPIO_Init>
 8006fc2:	e01b      	b.n	8006ffc <BSP_PB_Init+0x8c>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006fcc:	4b10      	ldr	r3, [pc, #64]	; (8007010 <BSP_PB_Init+0xa0>)
 8006fce:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	4a0e      	ldr	r2, [pc, #56]	; (800700c <BSP_PB_Init+0x9c>)
 8006fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd8:	f107 020c 	add.w	r2, r7, #12
 8006fdc:	4611      	mov	r1, r2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f002 fb9e 	bl	8009720 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8006fe4:	2306      	movs	r3, #6
 8006fe6:	b25b      	sxtb	r3, r3
 8006fe8:	2200      	movs	r2, #0
 8006fea:	210f      	movs	r1, #15
 8006fec:	4618      	mov	r0, r3
 8006fee:	f002 f8e0 	bl	80091b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8006ff2:	2306      	movs	r3, #6
 8006ff4:	b25b      	sxtb	r3, r3
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f002 f8f7 	bl	80091ea <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;  
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	40021000 	.word	0x40021000
 800700c:	2000009c 	.word	0x2000009c
 8007010:	10210000 	.word	0x10210000

08007014 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10c      	bne.n	800703e <BSP_LED_Init+0x2a>
 8007024:	4b19      	ldr	r3, [pc, #100]	; (800708c <BSP_LED_Init+0x78>)
 8007026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007028:	4a18      	ldr	r2, [pc, #96]	; (800708c <BSP_LED_Init+0x78>)
 800702a:	f043 0310 	orr.w	r3, r3, #16
 800702e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007030:	4b16      	ldr	r3, [pc, #88]	; (800708c <BSP_LED_Init+0x78>)
 8007032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	e00b      	b.n	8007056 <BSP_LED_Init+0x42>
 800703e:	4b13      	ldr	r3, [pc, #76]	; (800708c <BSP_LED_Init+0x78>)
 8007040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007042:	4a12      	ldr	r2, [pc, #72]	; (800708c <BSP_LED_Init+0x78>)
 8007044:	f043 0308 	orr.w	r3, r3, #8
 8007048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800704a:	4b10      	ldr	r3, [pc, #64]	; (800708c <BSP_LED_Init+0x78>)
 800704c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704e:	f003 0308 	and.w	r3, r3, #8
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	4a0d      	ldr	r2, [pc, #52]	; (8007090 <BSP_LED_Init+0x7c>)
 800705a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800705e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007060:	2301      	movs	r3, #1
 8007062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007064:	2300      	movs	r3, #0
 8007066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8007068:	2302      	movs	r3, #2
 800706a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	4a09      	ldr	r2, [pc, #36]	; (8007094 <BSP_LED_Init+0x80>)
 8007070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007074:	f107 0214 	add.w	r2, r7, #20
 8007078:	4611      	mov	r1, r2
 800707a:	4618      	mov	r0, r3
 800707c:	f002 fb50 	bl	8009720 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3728      	adds	r7, #40	; 0x28
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	40021000 	.word	0x40021000
 8007090:	080228c8 	.word	0x080228c8
 8007094:	200000a0 	.word	0x200000a0

08007098 <BSP_LED_On>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80070a2:	79fb      	ldrb	r3, [r7, #7]
 80070a4:	4a07      	ldr	r2, [pc, #28]	; (80070c4 <BSP_LED_On+0x2c>)
 80070a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	4a06      	ldr	r2, [pc, #24]	; (80070c8 <BSP_LED_On+0x30>)
 80070ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b2:	2201      	movs	r2, #1
 80070b4:	4619      	mov	r1, r3
 80070b6:	f002 fcdd 	bl	8009a74 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	200000a0 	.word	0x200000a0
 80070c8:	080228c8 	.word	0x080228c8

080070cc <BSP_LED_Off>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80070d6:	79fb      	ldrb	r3, [r7, #7]
 80070d8:	4a07      	ldr	r2, [pc, #28]	; (80070f8 <BSP_LED_Off+0x2c>)
 80070da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	4a06      	ldr	r2, [pc, #24]	; (80070fc <BSP_LED_Off+0x30>)
 80070e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e6:	2200      	movs	r2, #0
 80070e8:	4619      	mov	r1, r3
 80070ea:	f002 fcc3 	bl	8009a74 <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	200000a0 	.word	0x200000a0
 80070fc:	080228c8 	.word	0x080228c8

08007100 <BSP_BC_Init>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BSP_BC_Init(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  BC_InitCommon();
 8007104:	f000 f84a 	bl	800719c <BC_InitCommon>
  /* Init the related GPIOs */
  BC_IO_Init();
 8007108:	f000 f84e 	bl	80071a8 <BC_IO_Init>
}
 800710c:	bf00      	nop
 800710e:	bd80      	pop	{r7, pc}

08007110 <BSP_BC_CmdSend>:
  * @param stbc02_SwCmd The command to be sent
  * @retval 0 in case of success
  * @retval 1 in case of failure
  */
int32_t BSP_BC_CmdSend(stbc02_SwCmd_TypeDef stbc02_SwCmd)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	71fb      	strb	r3, [r7, #7]
  uint32_t tk = STBC02_GetTick();
 800711a:	f000 fc7f 	bl	8007a1c <HAL_GetTick>
 800711e:	60f8      	str	r0, [r7, #12]
  
  stbc02_SwCmdSel = stbc02_SwCmd;
 8007120:	4a0f      	ldr	r2, [pc, #60]	; (8007160 <BSP_BC_CmdSend+0x50>)
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	7013      	strb	r3, [r2, #0]
  stbc02_SwState = start;
 8007126:	4b0f      	ldr	r3, [pc, #60]	; (8007164 <BSP_BC_CmdSend+0x54>)
 8007128:	2201      	movs	r2, #1
 800712a:	701a      	strb	r2, [r3, #0]
  
  /* Start the time base */
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 800712c:	480e      	ldr	r0, [pc, #56]	; (8007168 <BSP_BC_CmdSend+0x58>)
 800712e:	f009 fbb9 	bl	80108a4 <HAL_TIM_Base_Start_IT>
    
  while(stbc02_SwState != idle)
 8007132:	e008      	b.n	8007146 <BSP_BC_CmdSend+0x36>
  {
    if ( (STBC02_GetTick() - tk) > 10U )
 8007134:	f000 fc72 	bl	8007a1c <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b0a      	cmp	r3, #10
 8007140:	d901      	bls.n	8007146 <BSP_BC_CmdSend+0x36>
    {
      return 1;
 8007142:	2301      	movs	r3, #1
 8007144:	e007      	b.n	8007156 <BSP_BC_CmdSend+0x46>
  while(stbc02_SwState != idle)
 8007146:	4b07      	ldr	r3, [pc, #28]	; (8007164 <BSP_BC_CmdSend+0x54>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1f2      	bne.n	8007134 <BSP_BC_CmdSend+0x24>
    }
  }
    /* Stop the time base */
  (void)HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 800714e:	4806      	ldr	r0, [pc, #24]	; (8007168 <BSP_BC_CmdSend+0x58>)
 8007150:	f009 fbd2 	bl	80108f8 <HAL_TIM_Base_Stop_IT>
  
  return 0;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20000d0d 	.word	0x20000d0d
 8007164:	20000d0e 	.word	0x20000d0e
 8007168:	2001d0fc 	.word	0x2001d0fc

0800716c <BSP_BC_ChgPinHasToggled>:
  * @brief Call the function for measuring the toggling frequency of the charging pin of the STBC02
  * @note Must be called when the charging pin of the STBC02 has toggled
  * @retval None
  */
void BSP_BC_ChgPinHasToggled(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  BC_ChgPinFreqGet();
 8007170:	f000 f908 	bl	8007384 <BC_ChgPinFreqGet>
  stbc02_ChgPinToggledTime = STBC02_GetTick();
 8007174:	f000 fc52 	bl	8007a1c <HAL_GetTick>
 8007178:	4603      	mov	r3, r0
 800717a:	4a02      	ldr	r2, [pc, #8]	; (8007184 <BSP_BC_ChgPinHasToggled+0x18>)
 800717c:	6013      	str	r3, [r2, #0]
}
 800717e:	bf00      	nop
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000d10 	.word	0x20000d10

08007188 <BSP_BC_BatMS_Init>:
* @param  None
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_BatMS_Init(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
   /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 800718c:	2002      	movs	r0, #2
 800718e:	f7ff fe03 	bl	8006d98 <BSP_ADC1_Initialization>
  /* Configure the Injection Channel for Voltage ADC convertion */
  (void)Channel_ADC1_Init();
 8007192:	f000 f9ef 	bl	8007574 <Channel_ADC1_Init>
  return 0;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	bd80      	pop	{r7, pc}

0800719c <BC_InitCommon>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BC_InitCommon(void)
{  
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* Init the time base */
  BC_TIMx_Init();
 80071a0:	f000 f93a 	bl	8007418 <BC_TIMx_Init>
}
 80071a4:	bf00      	nop
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <BC_IO_Init>:
/**
  * @brief  Initializes the GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_Init(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  BC_IO_SW_SEL_Init();
 80071ac:	f000 f802 	bl	80071b4 <BC_IO_SW_SEL_Init>
}
 80071b0:	bf00      	nop
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <BC_IO_SW_SEL_Init>:
/**
  * @brief  Initializes the SW_SEL GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_SW_SEL_Init(void)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 80071ba:	4b11      	ldr	r3, [pc, #68]	; (8007200 <BC_IO_SW_SEL_Init+0x4c>)
 80071bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071be:	4a10      	ldr	r2, [pc, #64]	; (8007200 <BC_IO_SW_SEL_Init+0x4c>)
 80071c0:	f043 0320 	orr.w	r3, r3, #32
 80071c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80071c6:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <BC_IO_SW_SEL_Init+0x4c>)
 80071c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 80071d2:	2340      	movs	r3, #64	; 0x40
 80071d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071d6:	2301      	movs	r3, #1
 80071d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80071de:	2302      	movs	r3, #2
 80071e0:	613b      	str	r3, [r7, #16]

  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 80071e2:	2200      	movs	r2, #0
 80071e4:	2140      	movs	r1, #64	; 0x40
 80071e6:	4807      	ldr	r0, [pc, #28]	; (8007204 <BC_IO_SW_SEL_Init+0x50>)
 80071e8:	f002 fc44 	bl	8009a74 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 80071ec:	1d3b      	adds	r3, r7, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4804      	ldr	r0, [pc, #16]	; (8007204 <BC_IO_SW_SEL_Init+0x50>)
 80071f2:	f002 fa95 	bl	8009720 <HAL_GPIO_Init>
}
 80071f6:	bf00      	nop
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40021000 	.word	0x40021000
 8007204:	48001400 	.word	0x48001400

08007208 <BC_CmdMng>:
  * @brief Single wire command manager for the STBC02
  * @note This function have to be called every 5 us
  * @retval None
  */
void BC_CmdMng(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
  static uint16_t TIMx_Pulse = 0;                           //! Actual timer pulse number
  static uint16_t TIMx_PulseTCS = 0;                        //! Timer pulse number to change state
  static stbc02_SwState_TypeDef stbc02_sw_state_prv = idle; //! Previous state
  static uint8_t CmdPulse = 0;                              //! Cmd pulse number

  TIMx_Pulse++;
 800720c:	4b56      	ldr	r3, [pc, #344]	; (8007368 <BC_CmdMng+0x160>)
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	b29a      	uxth	r2, r3
 8007214:	4b54      	ldr	r3, [pc, #336]	; (8007368 <BC_CmdMng+0x160>)
 8007216:	801a      	strh	r2, [r3, #0]
  switch (stbc02_SwState)
 8007218:	4b54      	ldr	r3, [pc, #336]	; (800736c <BC_CmdMng+0x164>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b06      	cmp	r3, #6
 800721e:	f200 809e 	bhi.w	800735e <BC_CmdMng+0x156>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <BC_CmdMng+0x20>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	0800735f 	.word	0x0800735f
 800722c:	08007245 	.word	0x08007245
 8007230:	08007269 	.word	0x08007269
 8007234:	0800728d 	.word	0x0800728d
 8007238:	080072b1 	.word	0x080072b1
 800723c:	080072d5 	.word	0x080072d5
 8007240:	080072f9 	.word	0x080072f9
  {
  case idle:
    break;
  case start:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8007244:	2140      	movs	r1, #64	; 0x40
 8007246:	484a      	ldr	r0, [pc, #296]	; (8007370 <BC_CmdMng+0x168>)
 8007248:	f002 fc2c 	bl	8009aa4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 800724c:	4b46      	ldr	r3, [pc, #280]	; (8007368 <BC_CmdMng+0x160>)
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	3346      	adds	r3, #70	; 0x46
 8007252:	b29a      	uxth	r2, r3
 8007254:	4b47      	ldr	r3, [pc, #284]	; (8007374 <BC_CmdMng+0x16c>)
 8007256:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8007258:	4b44      	ldr	r3, [pc, #272]	; (800736c <BC_CmdMng+0x164>)
 800725a:	781a      	ldrb	r2, [r3, #0]
 800725c:	4b46      	ldr	r3, [pc, #280]	; (8007378 <BC_CmdMng+0x170>)
 800725e:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8007260:	4b42      	ldr	r3, [pc, #264]	; (800736c <BC_CmdMng+0x164>)
 8007262:	2206      	movs	r2, #6
 8007264:	701a      	strb	r2, [r3, #0]
    break;
 8007266:	e07d      	b.n	8007364 <BC_CmdMng+0x15c>
  case pulse_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8007268:	2140      	movs	r1, #64	; 0x40
 800726a:	4841      	ldr	r0, [pc, #260]	; (8007370 <BC_CmdMng+0x168>)
 800726c:	f002 fc1a 	bl	8009aa4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8007270:	4b3d      	ldr	r3, [pc, #244]	; (8007368 <BC_CmdMng+0x160>)
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	3314      	adds	r3, #20
 8007276:	b29a      	uxth	r2, r3
 8007278:	4b3e      	ldr	r3, [pc, #248]	; (8007374 <BC_CmdMng+0x16c>)
 800727a:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 800727c:	4b3b      	ldr	r3, [pc, #236]	; (800736c <BC_CmdMng+0x164>)
 800727e:	781a      	ldrb	r2, [r3, #0]
 8007280:	4b3d      	ldr	r3, [pc, #244]	; (8007378 <BC_CmdMng+0x170>)
 8007282:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8007284:	4b39      	ldr	r3, [pc, #228]	; (800736c <BC_CmdMng+0x164>)
 8007286:	2206      	movs	r2, #6
 8007288:	701a      	strb	r2, [r3, #0]
    break;
 800728a:	e06b      	b.n	8007364 <BC_CmdMng+0x15c>
  case pulse_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 800728c:	2140      	movs	r1, #64	; 0x40
 800728e:	4838      	ldr	r0, [pc, #224]	; (8007370 <BC_CmdMng+0x168>)
 8007290:	f002 fc08 	bl	8009aa4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8007294:	4b34      	ldr	r3, [pc, #208]	; (8007368 <BC_CmdMng+0x160>)
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	3314      	adds	r3, #20
 800729a:	b29a      	uxth	r2, r3
 800729c:	4b35      	ldr	r3, [pc, #212]	; (8007374 <BC_CmdMng+0x16c>)
 800729e:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 80072a0:	4b32      	ldr	r3, [pc, #200]	; (800736c <BC_CmdMng+0x164>)
 80072a2:	781a      	ldrb	r2, [r3, #0]
 80072a4:	4b34      	ldr	r3, [pc, #208]	; (8007378 <BC_CmdMng+0x170>)
 80072a6:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 80072a8:	4b30      	ldr	r3, [pc, #192]	; (800736c <BC_CmdMng+0x164>)
 80072aa:	2206      	movs	r2, #6
 80072ac:	701a      	strb	r2, [r3, #0]
    break;
 80072ae:	e059      	b.n	8007364 <BC_CmdMng+0x15c>
  case stop_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80072b0:	2140      	movs	r1, #64	; 0x40
 80072b2:	482f      	ldr	r0, [pc, #188]	; (8007370 <BC_CmdMng+0x168>)
 80072b4:	f002 fbf6 	bl	8009aa4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 80072b8:	4b2b      	ldr	r3, [pc, #172]	; (8007368 <BC_CmdMng+0x160>)
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	3314      	adds	r3, #20
 80072be:	b29a      	uxth	r2, r3
 80072c0:	4b2c      	ldr	r3, [pc, #176]	; (8007374 <BC_CmdMng+0x16c>)
 80072c2:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 80072c4:	4b29      	ldr	r3, [pc, #164]	; (800736c <BC_CmdMng+0x164>)
 80072c6:	781a      	ldrb	r2, [r3, #0]
 80072c8:	4b2b      	ldr	r3, [pc, #172]	; (8007378 <BC_CmdMng+0x170>)
 80072ca:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 80072cc:	4b27      	ldr	r3, [pc, #156]	; (800736c <BC_CmdMng+0x164>)
 80072ce:	2206      	movs	r2, #6
 80072d0:	701a      	strb	r2, [r3, #0]
    break;
 80072d2:	e047      	b.n	8007364 <BC_CmdMng+0x15c>
  case stop_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 80072d4:	2140      	movs	r1, #64	; 0x40
 80072d6:	4826      	ldr	r0, [pc, #152]	; (8007370 <BC_CmdMng+0x168>)
 80072d8:	f002 fbe4 	bl	8009aa4 <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 80072dc:	4b22      	ldr	r3, [pc, #136]	; (8007368 <BC_CmdMng+0x160>)
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	3364      	adds	r3, #100	; 0x64
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	4b23      	ldr	r3, [pc, #140]	; (8007374 <BC_CmdMng+0x16c>)
 80072e6:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 80072e8:	4b20      	ldr	r3, [pc, #128]	; (800736c <BC_CmdMng+0x164>)
 80072ea:	781a      	ldrb	r2, [r3, #0]
 80072ec:	4b22      	ldr	r3, [pc, #136]	; (8007378 <BC_CmdMng+0x170>)
 80072ee:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 80072f0:	4b1e      	ldr	r3, [pc, #120]	; (800736c <BC_CmdMng+0x164>)
 80072f2:	2206      	movs	r2, #6
 80072f4:	701a      	strb	r2, [r3, #0]
    break;
 80072f6:	e035      	b.n	8007364 <BC_CmdMng+0x15c>
  case wait:
    if ( TIMx_Pulse > TIMx_PulseTCS )
 80072f8:	4b1b      	ldr	r3, [pc, #108]	; (8007368 <BC_CmdMng+0x160>)
 80072fa:	881a      	ldrh	r2, [r3, #0]
 80072fc:	4b1d      	ldr	r3, [pc, #116]	; (8007374 <BC_CmdMng+0x16c>)
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	d92e      	bls.n	8007362 <BC_CmdMng+0x15a>
    {
      if ( stbc02_sw_state_prv == stop_h )
 8007304:	4b1c      	ldr	r3, [pc, #112]	; (8007378 <BC_CmdMng+0x170>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b05      	cmp	r3, #5
 800730a:	d10b      	bne.n	8007324 <BC_CmdMng+0x11c>
      {
        CmdPulse = 0;
 800730c:	4b1b      	ldr	r3, [pc, #108]	; (800737c <BC_CmdMng+0x174>)
 800730e:	2200      	movs	r2, #0
 8007310:	701a      	strb	r2, [r3, #0]
        stbc02_SwState = idle;
 8007312:	4b16      	ldr	r3, [pc, #88]	; (800736c <BC_CmdMng+0x164>)
 8007314:	2200      	movs	r2, #0
 8007316:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8007318:	2200      	movs	r2, #0
 800731a:	2140      	movs	r1, #64	; 0x40
 800731c:	4814      	ldr	r0, [pc, #80]	; (8007370 <BC_CmdMng+0x168>)
 800731e:	f002 fba9 	bl	8009a74 <HAL_GPIO_WritePin>
        }
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
        __NOP();
      }
    }
    break;
 8007322:	e01e      	b.n	8007362 <BC_CmdMng+0x15a>
        if ( stbc02_sw_state_prv == pulse_h )
 8007324:	4b14      	ldr	r3, [pc, #80]	; (8007378 <BC_CmdMng+0x170>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	2b03      	cmp	r3, #3
 800732a:	d110      	bne.n	800734e <BC_CmdMng+0x146>
          CmdPulse++;
 800732c:	4b13      	ldr	r3, [pc, #76]	; (800737c <BC_CmdMng+0x174>)
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	b2da      	uxtb	r2, r3
 8007334:	4b11      	ldr	r3, [pc, #68]	; (800737c <BC_CmdMng+0x174>)
 8007336:	701a      	strb	r2, [r3, #0]
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8007338:	4b10      	ldr	r3, [pc, #64]	; (800737c <BC_CmdMng+0x174>)
 800733a:	781a      	ldrb	r2, [r3, #0]
 800733c:	4b10      	ldr	r3, [pc, #64]	; (8007380 <BC_CmdMng+0x178>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d203      	bcs.n	800734c <BC_CmdMng+0x144>
            stbc02_sw_state_prv = start;
 8007344:	4b0c      	ldr	r3, [pc, #48]	; (8007378 <BC_CmdMng+0x170>)
 8007346:	2201      	movs	r2, #1
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	e000      	b.n	800734e <BC_CmdMng+0x146>
            __NOP();
 800734c:	bf00      	nop
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
 800734e:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <BC_CmdMng+0x170>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	3301      	adds	r3, #1
 8007354:	b2da      	uxtb	r2, r3
 8007356:	4b05      	ldr	r3, [pc, #20]	; (800736c <BC_CmdMng+0x164>)
 8007358:	701a      	strb	r2, [r3, #0]
        __NOP();
 800735a:	bf00      	nop
    break;
 800735c:	e001      	b.n	8007362 <BC_CmdMng+0x15a>
  default:
    break;
 800735e:	bf00      	nop
 8007360:	e000      	b.n	8007364 <BC_CmdMng+0x15c>
    break;
 8007362:	bf00      	nop
  }
}
 8007364:	bf00      	nop
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20000d68 	.word	0x20000d68
 800736c:	20000d0e 	.word	0x20000d0e
 8007370:	48001400 	.word	0x48001400
 8007374:	20000d6a 	.word	0x20000d6a
 8007378:	20000d6c 	.word	0x20000d6c
 800737c:	20000d6d 	.word	0x20000d6d
 8007380:	20000d0d 	.word	0x20000d0d

08007384 <BC_ChgPinFreqGet>:
* @brief Measure the toggling frequency of the charging pin of the STBC02
* @note This function works with 1 ms as time base
* @retval None
*/
void BC_ChgPinFreqGet(void)
{  
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
  if(uhCaptureIndex == 0U)
 8007388:	4b1d      	ldr	r3, [pc, #116]	; (8007400 <BC_ChgPinFreqGet+0x7c>)
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d107      	bne.n	80073a0 <BC_ChgPinFreqGet+0x1c>
  {
    /* Get the 1st Input Capture value */
    uwIC2Value1 = HAL_GetTick();
 8007390:	f000 fb44 	bl	8007a1c <HAL_GetTick>
 8007394:	4603      	mov	r3, r0
 8007396:	4a1b      	ldr	r2, [pc, #108]	; (8007404 <BC_ChgPinFreqGet+0x80>)
 8007398:	6013      	str	r3, [r2, #0]
    uhCaptureIndex = 1;
 800739a:	4b19      	ldr	r3, [pc, #100]	; (8007400 <BC_ChgPinFreqGet+0x7c>)
 800739c:	2201      	movs	r2, #1
 800739e:	801a      	strh	r2, [r3, #0]
  }
   if(uhCaptureIndex == 1U)
 80073a0:	4b17      	ldr	r3, [pc, #92]	; (8007400 <BC_ChgPinFreqGet+0x7c>)
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d128      	bne.n	80073fa <BC_ChgPinFreqGet+0x76>
  {
    /* Get the 2nd Input Capture value */
    uwIC2Value2 = HAL_GetTick();
 80073a8:	f000 fb38 	bl	8007a1c <HAL_GetTick>
 80073ac:	4603      	mov	r3, r0
 80073ae:	4a16      	ldr	r2, [pc, #88]	; (8007408 <BC_ChgPinFreqGet+0x84>)
 80073b0:	6013      	str	r3, [r2, #0]
    
    /* Capture computation */
    if (uwIC2Value2 > uwIC2Value1)
 80073b2:	4b15      	ldr	r3, [pc, #84]	; (8007408 <BC_ChgPinFreqGet+0x84>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	4b13      	ldr	r3, [pc, #76]	; (8007404 <BC_ChgPinFreqGet+0x80>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d907      	bls.n	80073ce <BC_ChgPinFreqGet+0x4a>
    {
      uwDiffCapture = (uwIC2Value2 - uwIC2Value1); 
 80073be:	4b12      	ldr	r3, [pc, #72]	; (8007408 <BC_ChgPinFreqGet+0x84>)
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b10      	ldr	r3, [pc, #64]	; (8007404 <BC_ChgPinFreqGet+0x80>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	4a10      	ldr	r2, [pc, #64]	; (800740c <BC_ChgPinFreqGet+0x88>)
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	e006      	b.n	80073dc <BC_ChgPinFreqGet+0x58>
    }
    else
    {
      uwDiffCapture = ((0xFFFFFFFF - uwIC2Value1) + uwIC2Value2) + 1U;
 80073ce:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <BC_ChgPinFreqGet+0x84>)
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <BC_ChgPinFreqGet+0x80>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	4a0c      	ldr	r2, [pc, #48]	; (800740c <BC_ChgPinFreqGet+0x88>)
 80073da:	6013      	str	r3, [r2, #0]
    }
    
    if (uwDiffCapture != 0U)
 80073dc:	4b0b      	ldr	r3, [pc, #44]	; (800740c <BC_ChgPinFreqGet+0x88>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <BC_ChgPinFreqGet+0x76>
    {
      /* Frequency computation */      
      uwFrequency = 10000U / uwDiffCapture;
 80073e4:	4b09      	ldr	r3, [pc, #36]	; (800740c <BC_ChgPinFreqGet+0x88>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80073ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f0:	4a07      	ldr	r2, [pc, #28]	; (8007410 <BC_ChgPinFreqGet+0x8c>)
 80073f2:	6013      	str	r3, [r2, #0]
      uhCaptureIndex = 0U;
 80073f4:	4b02      	ldr	r3, [pc, #8]	; (8007400 <BC_ChgPinFreqGet+0x7c>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80073fa:	bf00      	nop
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000d60 	.word	0x20000d60
 8007404:	20000d54 	.word	0x20000d54
 8007408:	20000d58 	.word	0x20000d58
 800740c:	20000d5c 	.word	0x20000d5c
 8007410:	20000d64 	.word	0x20000d64
 8007414:	00000000 	.word	0x00000000

08007418 <BC_TIMx_Init>:
/**
  * @brief  Initializes the used timer
  * @retval None
  */
void BC_TIMx_Init(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800741e:	463b      	mov	r3, r7
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	605a      	str	r2, [r3, #4]
 8007426:	609a      	str	r2, [r3, #8]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8007428:	f005 fff0 	bl	800d40c <HAL_RCC_GetPCLK1Freq>
 800742c:	4602      	mov	r2, r0
 800742e:	4b26      	ldr	r3, [pc, #152]	; (80074c8 <BC_TIMx_Init+0xb0>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <BC_TIMx_Init+0x26>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <BC_TIMx_Init+0x28>
 800743e:	2302      	movs	r3, #2
 8007440:	fb02 f303 	mul.w	r3, r2, r3
 8007444:	613b      	str	r3, [r7, #16]
  uint32_t prescaler = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]
  uint32_t period;
  
  do
  {
    prescaler++;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	3301      	adds	r3, #1
 800744e:	617b      	str	r3, [r7, #20]
    period = (uint32_t)(freq/(prescaler) * STBC02_USED_TIM_PERIOD);
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	fbb2 f3f3 	udiv	r3, r2, r3
 8007458:	4618      	mov	r0, r3
 800745a:	f7f9 f87b 	bl	8000554 <__aeabi_ui2d>
 800745e:	a318      	add	r3, pc, #96	; (adr r3, 80074c0 <BC_TIMx_Init+0xa8>)
 8007460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007464:	f7f9 f8f0 	bl	8000648 <__aeabi_dmul>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4610      	mov	r0, r2
 800746e:	4619      	mov	r1, r3
 8007470:	f7f9 fbc2 	bl	8000bf8 <__aeabi_d2uiz>
 8007474:	4603      	mov	r3, r0
 8007476:	60fb      	str	r3, [r7, #12]
  } while (period > 65535U);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800747e:	d2e4      	bcs.n	800744a <BC_TIMx_Init+0x32>

  hstbc02_UsedTim.Instance = STBC02_USED_TIM;
 8007480:	4b12      	ldr	r3, [pc, #72]	; (80074cc <BC_TIMx_Init+0xb4>)
 8007482:	4a13      	ldr	r2, [pc, #76]	; (80074d0 <BC_TIMx_Init+0xb8>)
 8007484:	601a      	str	r2, [r3, #0]
  hstbc02_UsedTim.Init.Prescaler = (prescaler-1U);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	3b01      	subs	r3, #1
 800748a:	4a10      	ldr	r2, [pc, #64]	; (80074cc <BC_TIMx_Init+0xb4>)
 800748c:	6053      	str	r3, [r2, #4]
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800748e:	4b0f      	ldr	r3, [pc, #60]	; (80074cc <BC_TIMx_Init+0xb4>)
 8007490:	2200      	movs	r2, #0
 8007492:	609a      	str	r2, [r3, #8]
  hstbc02_UsedTim.Init.Period = period;
 8007494:	4a0d      	ldr	r2, [pc, #52]	; (80074cc <BC_TIMx_Init+0xb4>)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	60d3      	str	r3, [r2, #12]
#if USE_TIM_AUTORELOAD_PRELOAD
  hstbc02_UsedTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
#endif //USE_TIM_AUTORELOAD_PRELOAD
  
  HAL_TIM_BC_MspInit(&hstbc02_UsedTim);    
 800749a:	480c      	ldr	r0, [pc, #48]	; (80074cc <BC_TIMx_Init+0xb4>)
 800749c:	f000 f81a 	bl	80074d4 <HAL_TIM_BC_MspInit>
  (void)HAL_TIM_Base_Init(&hstbc02_UsedTim);
 80074a0:	480a      	ldr	r0, [pc, #40]	; (80074cc <BC_TIMx_Init+0xb4>)
 80074a2:	f009 f973 	bl	801078c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074a6:	2300      	movs	r3, #0
 80074a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 80074ae:	463b      	mov	r3, r7
 80074b0:	4619      	mov	r1, r3
 80074b2:	4806      	ldr	r0, [pc, #24]	; (80074cc <BC_TIMx_Init+0xb4>)
 80074b4:	f009 fc22 	bl	8010cfc <HAL_TIMEx_MasterConfigSynchronization>
}
 80074b8:	bf00      	nop
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	88e368f1 	.word	0x88e368f1
 80074c4:	3ed4f8b5 	.word	0x3ed4f8b5
 80074c8:	40021000 	.word	0x40021000
 80074cc:	2001d0fc 	.word	0x2001d0fc
 80074d0:	40001400 	.word	0x40001400

080074d4 <HAL_TIM_BC_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_BC_MspInit(TIM_HandleTypeDef *htim)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]

  if(htim->Instance==STBC02_USED_TIM)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a0d      	ldr	r2, [pc, #52]	; (8007518 <HAL_TIM_BC_MspInit+0x44>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d113      	bne.n	800750e <HAL_TIM_BC_MspInit+0x3a>
  {
    /* STBC02_USED_TIM clock enable */
    STBC02_USED_TIM_CLK_ENABLE();
 80074e6:	4b0d      	ldr	r3, [pc, #52]	; (800751c <HAL_TIM_BC_MspInit+0x48>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ea:	4a0c      	ldr	r2, [pc, #48]	; (800751c <HAL_TIM_BC_MspInit+0x48>)
 80074ec:	f043 0320 	orr.w	r3, r3, #32
 80074f0:	6593      	str	r3, [r2, #88]	; 0x58
 80074f2:	4b0a      	ldr	r3, [pc, #40]	; (800751c <HAL_TIM_BC_MspInit+0x48>)
 80074f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]

    /* STBC02_USED_TIM interrupt Init */
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 80074fe:	2200      	movs	r2, #0
 8007500:	2103      	movs	r1, #3
 8007502:	2037      	movs	r0, #55	; 0x37
 8007504:	f001 fe55 	bl	80091b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 8007508:	2037      	movs	r0, #55	; 0x37
 800750a:	f001 fe6e 	bl	80091ea <HAL_NVIC_EnableIRQ>
  }
}
 800750e:	bf00      	nop
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	40001400 	.word	0x40001400
 800751c:	40021000 	.word	0x40021000

08007520 <HAL_ADC_BC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param BC_AdcHandle ADC handle
  * @retval None
  */
void HAL_ADC_BC_MspInit()
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007526:	1d3b      	adds	r3, r7, #4
 8007528:	2200      	movs	r2, #0
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	605a      	str	r2, [r3, #4]
 800752e:	609a      	str	r2, [r3, #8]
 8007530:	60da      	str	r2, [r3, #12]
 8007532:	611a      	str	r2, [r3, #16]
  
  /* STBC02_USED_ADC GPIO Configuration */
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8007534:	4b0d      	ldr	r3, [pc, #52]	; (800756c <HAL_ADC_BC_MspInit+0x4c>)
 8007536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007538:	4a0c      	ldr	r2, [pc, #48]	; (800756c <HAL_ADC_BC_MspInit+0x4c>)
 800753a:	f043 0304 	orr.w	r3, r3, #4
 800753e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <HAL_ADC_BC_MspInit+0x4c>)
 8007542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	603b      	str	r3, [r7, #0]
 800754a:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 800754c:	2310      	movs	r3, #16
 800754e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 8007550:	230b      	movs	r3, #11
 8007552:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8007558:	1d3b      	adds	r3, r7, #4
 800755a:	4619      	mov	r1, r3
 800755c:	4804      	ldr	r0, [pc, #16]	; (8007570 <HAL_ADC_BC_MspInit+0x50>)
 800755e:	f002 f8df 	bl	8009720 <HAL_GPIO_Init>
  
}
 8007562:	bf00      	nop
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	40021000 	.word	0x40021000
 8007570:	48000800 	.word	0x48000800

08007574 <Channel_ADC1_Init>:
  * @brief  Initializes the used ADC
  * @retval 0 in case of success
  * @retval 1 in case of failure
*/
static int32_t Channel_ADC1_Init(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08e      	sub	sp, #56	; 0x38
 8007578:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800757a:	463b      	mov	r3, r7
 800757c:	2234      	movs	r2, #52	; 0x34
 800757e:	2100      	movs	r1, #0
 8007580:	4618      	mov	r0, r3
 8007582:	f017 fee7 	bl	801f354 <memset>
  static uint8_t ADC_stopped=0;
  uint32_t ADC_Status;
  
  
  ADC_Status= HAL_ADC_GetState(&ADC1_Handle);
 8007586:	481e      	ldr	r0, [pc, #120]	; (8007600 <Channel_ADC1_Init+0x8c>)
 8007588:	f000 fdcc 	bl	8008124 <HAL_ADC_GetState>
 800758c:	6378      	str	r0, [r7, #52]	; 0x34
  if ((ADC_Status & HAL_ADC_STATE_REG_BUSY) == HAL_ADC_STATE_REG_BUSY)
 800758e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <Channel_ADC1_Init+0x30>
  {
    (void)HAL_ADC_Stop(&ADC1_Handle);
 8007598:	4819      	ldr	r0, [pc, #100]	; (8007600 <Channel_ADC1_Init+0x8c>)
 800759a:	f000 fd68 	bl	800806e <HAL_ADC_Stop>
    ADC_stopped=1;
 800759e:	4b19      	ldr	r3, [pc, #100]	; (8007604 <Channel_ADC1_Init+0x90>)
 80075a0:	2201      	movs	r2, #1
 80075a2:	701a      	strb	r2, [r3, #0]
  }

    
  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 80075a4:	4b18      	ldr	r3, [pc, #96]	; (8007608 <Channel_ADC1_Init+0x94>)
 80075a6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80075a8:	2308      	movs	r3, #8
 80075aa:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80075ac:	2307      	movs	r3, #7
 80075ae:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80075b0:	237f      	movs	r3, #127	; 0x7f
 80075b2:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80075b4:	2304      	movs	r3, #4
 80075b6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80075bc:	2301      	movs	r3, #1
 80075be:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80075c0:	2300      	movs	r3, #0
 80075c2:	773b      	strb	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	777b      	strb	r3, [r7, #29]
  sConfigInjected.QueueInjectedContext = DISABLE;
 80075c8:	2300      	movs	r3, #0
 80075ca:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80075cc:	2300      	movs	r3, #0
 80075ce:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjecOversamplingMode = DISABLE; 
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  
  HAL_ADC_BC_MspInit();
 80075da:	f7ff ffa1 	bl	8007520 <HAL_ADC_BC_MspInit>
  
  
  (void)HAL_ADCEx_InjectedConfigChannel(&ADC1_Handle, &sConfigInjected);
 80075de:	463b      	mov	r3, r7
 80075e0:	4619      	mov	r1, r3
 80075e2:	4807      	ldr	r0, [pc, #28]	; (8007600 <Channel_ADC1_Init+0x8c>)
 80075e4:	f001 f8d8 	bl	8008798 <HAL_ADCEx_InjectedConfigChannel>
    
  if (ADC_stopped == 1U)
 80075e8:	4b06      	ldr	r3, [pc, #24]	; (8007604 <Channel_ADC1_Init+0x90>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d102      	bne.n	80075f6 <Channel_ADC1_Init+0x82>
  {
    (void)HAL_ADC_Start(&ADC1_Handle);
 80075f0:	4803      	ldr	r0, [pc, #12]	; (8007600 <Channel_ADC1_Init+0x8c>)
 80075f2:	f000 fcd9 	bl	8007fa8 <HAL_ADC_Start>
  }
  
  return 0;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3738      	adds	r7, #56	; 0x38
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	2001d068 	.word	0x2001d068
 8007604:	20000d6e 	.word	0x20000d6e
 8007608:	36902000 	.word	0x36902000

0800760c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  if (htim->Instance == STBC02_USED_TIM)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a04      	ldr	r2, [pc, #16]	; (800762c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d101      	bne.n	8007622 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    BC_CmdMng();
 800761e:	f7ff fdf3 	bl	8007208 <BC_CmdMng>
  }
}
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	40001400 	.word	0x40001400

08007630 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  htim : hadc handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	7f1b      	ldrb	r3, [r3, #28]
 800763c:	2b04      	cmp	r3, #4
 800763e:	d101      	bne.n	8007644 <HAL_TIM_IC_CaptureCallback+0x14>
  {
    BSP_BC_ChgPinHasToggled();
 8007640:	f7ff fd94 	bl	800716c <BSP_BC_ChgPinHasToggled>
  }
}
 8007644:	bf00      	nop
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <TIM7_IRQHandler>:
 */
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 8007650:	4802      	ldr	r0, [pc, #8]	; (800765c <TIM7_IRQHandler+0x10>)
 8007652:	f009 f97c 	bl	801094e <HAL_TIM_IRQHandler>
}
 8007656:	bf00      	nop
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	2001d0fc 	.word	0x2001d0fc

08007660 <TIM3_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimBCHandle);
 8007664:	4802      	ldr	r0, [pc, #8]	; (8007670 <TIM3_IRQHandler+0x10>)
 8007666:	f009 f972 	bl	801094e <HAL_TIM_IRQHandler>
}
 800766a:	bf00      	nop
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000d14 	.word	0x20000d14

08007674 <BSP_DEBUG_PIN_On>:
  HAL_GPIO_DeInit(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin]);
  DEBUG_PINx_GPIO_CLK_DISABLE(Pin);
}

void BSP_DEBUG_PIN_On(Debug_Pin_TypeDef Pin)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_SET);
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	4a07      	ldr	r2, [pc, #28]	; (80076a0 <BSP_DEBUG_PIN_On+0x2c>)
 8007682:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	4a06      	ldr	r2, [pc, #24]	; (80076a4 <BSP_DEBUG_PIN_On+0x30>)
 800768a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800768e:	2201      	movs	r2, #1
 8007690:	4619      	mov	r1, r3
 8007692:	f002 f9ef 	bl	8009a74 <HAL_GPIO_WritePin>
}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	200000a8 	.word	0x200000a8
 80076a4:	080228cc 	.word	0x080228cc

080076a8 <BSP_DEBUG_PIN_Off>:

void BSP_DEBUG_PIN_Off(Debug_Pin_TypeDef Pin)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_RESET);
 80076b2:	79fb      	ldrb	r3, [r7, #7]
 80076b4:	4a07      	ldr	r2, [pc, #28]	; (80076d4 <BSP_DEBUG_PIN_Off+0x2c>)
 80076b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	4a06      	ldr	r2, [pc, #24]	; (80076d8 <BSP_DEBUG_PIN_Off+0x30>)
 80076be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076c2:	2200      	movs	r2, #0
 80076c4:	4619      	mov	r1, r3
 80076c6:	f002 f9d5 	bl	8009a74 <HAL_GPIO_WritePin>
}
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	200000a8 	.word	0x200000a8
 80076d8:	080228cc 	.word	0x080228cc

080076dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
  uint8_t sd_state;
  /* Check if the SD card is plugged in the slot */
  
  /* Initialize all configured peripherals */

  hsd1.Instance = SDMMC1;
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <BSP_SD_Init+0x5c>)
 80076e4:	4a15      	ldr	r2, [pc, #84]	; (800773c <BSP_SD_Init+0x60>)
 80076e6:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80076e8:	4b13      	ldr	r3, [pc, #76]	; (8007738 <BSP_SD_Init+0x5c>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80076ee:	4b12      	ldr	r3, [pc, #72]	; (8007738 <BSP_SD_Init+0x5c>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80076f4:	4b10      	ldr	r3, [pc, #64]	; (8007738 <BSP_SD_Init+0x5c>)
 80076f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80076fa:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80076fc:	4b0e      	ldr	r3, [pc, #56]	; (8007738 <BSP_SD_Init+0x5c>)
 80076fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007702:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 8007704:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <BSP_SD_Init+0x5c>)
 8007706:	2201      	movs	r2, #1
 8007708:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800770a:	4b0b      	ldr	r3, [pc, #44]	; (8007738 <BSP_SD_Init+0x5c>)
 800770c:	2200      	movs	r2, #0
 800770e:	619a      	str	r2, [r3, #24]
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&hsd1);
 8007710:	4809      	ldr	r0, [pc, #36]	; (8007738 <BSP_SD_Init+0x5c>)
 8007712:	f000 f889 	bl	8007828 <BSP_SD_MspInit>
  
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007716:	f000 f839 	bl	800778c <BSP_SD_IsDetected>
 800771a:	4603      	mov	r3, r0
 800771c:	2b01      	cmp	r3, #1
 800771e:	d001      	beq.n	8007724 <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007720:	2302      	movs	r3, #2
 8007722:	e005      	b.n	8007730 <BSP_SD_Init+0x54>
  }
  /* HAL SD initialization */
  sd_state = (uint8_t)HAL_SD_Init(&hsd1);
 8007724:	4804      	ldr	r0, [pc, #16]	; (8007738 <BSP_SD_Init+0x5c>)
 8007726:	f006 fcbf 	bl	800e0a8 <HAL_SD_Init>
 800772a:	4603      	mov	r3, r0
 800772c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800772e:	79fb      	ldrb	r3, [r7, #7]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	200168ac 	.word	0x200168ac
 800773c:	50062400 	.word	0x50062400

08007740 <BSP_SD_Detect_Init>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
void BSP_SD_Detect_Init(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
  
  SD_DETECT_GPIO_CLK_ENABLE();
 8007746:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <BSP_SD_Detect_Init+0x44>)
 8007748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774a:	4a0e      	ldr	r2, [pc, #56]	; (8007784 <BSP_SD_Detect_Init+0x44>)
 800774c:	f043 0302 	orr.w	r3, r3, #2
 8007750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007752:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <BSP_SD_Detect_Init+0x44>)
 8007754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	683b      	ldr	r3, [r7, #0]

  /* Configure MFX Interrupt GPIO */
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 800775e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007762:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8007764:	2301      	movs	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_LOW;
 8007768:	2300      	movs	r3, #0
 800776a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode  = GPIO_MODE_INPUT;
 800776c:	2300      	movs	r3, #0
 800776e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8007770:	1d3b      	adds	r3, r7, #4
 8007772:	4619      	mov	r1, r3
 8007774:	4804      	ldr	r0, [pc, #16]	; (8007788 <BSP_SD_Detect_Init+0x48>)
 8007776:	f001 ffd3 	bl	8009720 <HAL_GPIO_Init>
}
 800777a:	bf00      	nop
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40021000 	.word	0x40021000
 8007788:	48000400 	.word	0x48000400

0800778c <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 8007790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007794:	4808      	ldr	r0, [pc, #32]	; (80077b8 <BSP_SD_IsDetected+0x2c>)
 8007796:	f002 f955 	bl	8009a44 <HAL_GPIO_ReadPin>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d103      	bne.n	80077a8 <BSP_SD_IsDetected+0x1c>
  {
    SD_Status = SD_NOT_PRESENT;
 80077a0:	4b06      	ldr	r3, [pc, #24]	; (80077bc <BSP_SD_IsDetected+0x30>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	e002      	b.n	80077ae <BSP_SD_IsDetected+0x22>
  }
  else
  {
    SD_Status = SD_PRESENT;
 80077a8:	4b04      	ldr	r3, [pc, #16]	; (80077bc <BSP_SD_IsDetected+0x30>)
 80077aa:	2201      	movs	r2, #1
 80077ac:	701a      	strb	r2, [r3, #0]
  }
  
  return SD_Status;
 80077ae:	4b03      	ldr	r3, [pc, #12]	; (80077bc <BSP_SD_IsDetected+0x30>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	b2db      	uxtb	r3, r3
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	48000400 	.word	0x48000400
 80077bc:	20000d6f 	.word	0x20000d6f

080077c0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	68f9      	ldr	r1, [r7, #12]
 80077d6:	4806      	ldr	r0, [pc, #24]	; (80077f0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80077d8:	f006 fd7c 	bl	800e2d4 <HAL_SD_ReadBlocks_DMA>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	200168ac 	.word	0x200168ac

080077f4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	68f9      	ldr	r1, [r7, #12]
 800780a:	4806      	ldr	r0, [pc, #24]	; (8007824 <BSP_SD_WriteBlocks_DMA+0x30>)
 800780c:	f006 fe0a 	bl	800e424 <HAL_SD_WriteBlocks_DMA>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800781a:	7dfb      	ldrb	r3, [r7, #23]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	200168ac 	.word	0x200168ac

08007828 <BSP_SD_MspInit>:

  return sd_state; 
}

void BSP_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08a      	sub	sp, #40	; 0x28
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  GPIO_InitTypeDef gpioinitstruct = {0};
 8007830:	f107 0314 	add.w	r3, r7, #20
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	605a      	str	r2, [r3, #4]
 800783a:	609a      	str	r2, [r3, #8]
 800783c:	60da      	str	r2, [r3, #12]
 800783e:	611a      	str	r2, [r3, #16]
  
  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007840:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <BSP_SD_MspInit+0xac>)
 8007842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007844:	4a23      	ldr	r2, [pc, #140]	; (80078d4 <BSP_SD_MspInit+0xac>)
 8007846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800784a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800784c:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <BSP_SD_MspInit+0xac>)
 800784e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007854:	613b      	str	r3, [r7, #16]
 8007856:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007858:	4b1e      	ldr	r3, [pc, #120]	; (80078d4 <BSP_SD_MspInit+0xac>)
 800785a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785c:	4a1d      	ldr	r2, [pc, #116]	; (80078d4 <BSP_SD_MspInit+0xac>)
 800785e:	f043 0304 	orr.w	r3, r3, #4
 8007862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007864:	4b1b      	ldr	r3, [pc, #108]	; (80078d4 <BSP_SD_MspInit+0xac>)
 8007866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007870:	4b18      	ldr	r3, [pc, #96]	; (80078d4 <BSP_SD_MspInit+0xac>)
 8007872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007874:	4a17      	ldr	r2, [pc, #92]	; (80078d4 <BSP_SD_MspInit+0xac>)
 8007876:	f043 0308 	orr.w	r3, r3, #8
 800787a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800787c:	4b15      	ldr	r3, [pc, #84]	; (80078d4 <BSP_SD_MspInit+0xac>)
 800787e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	60bb      	str	r3, [r7, #8]
 8007886:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 8007888:	2302      	movs	r3, #2
 800788a:	61bb      	str	r3, [r7, #24]
  gpioinitstruct.Pull      = GPIO_PULLUP;
 800788c:	2301      	movs	r3, #1
 800788e:	61fb      	str	r3, [r7, #28]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007890:	2303      	movs	r3, #3
 8007892:	623b      	str	r3, [r7, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8007894:	230c      	movs	r3, #12
 8007896:	627b      	str	r3, [r7, #36]	; 0x24

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8007898:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800789c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800789e:	f107 0314 	add.w	r3, r7, #20
 80078a2:	4619      	mov	r1, r3
 80078a4:	480c      	ldr	r0, [pc, #48]	; (80078d8 <BSP_SD_MspInit+0xb0>)
 80078a6:	f001 ff3b 	bl	8009720 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 80078aa:	2304      	movs	r3, #4
 80078ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80078ae:	f107 0314 	add.w	r3, r7, #20
 80078b2:	4619      	mov	r1, r3
 80078b4:	4809      	ldr	r0, [pc, #36]	; (80078dc <BSP_SD_MspInit+0xb4>)
 80078b6:	f001 ff33 	bl	8009720 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 80078ba:	2200      	movs	r2, #0
 80078bc:	2105      	movs	r1, #5
 80078be:	2031      	movs	r0, #49	; 0x31
 80078c0:	f001 fc77 	bl	80091b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 80078c4:	2031      	movs	r0, #49	; 0x31
 80078c6:	f001 fc90 	bl	80091ea <HAL_NVIC_EnableIRQ>


}
 80078ca:	bf00      	nop
 80078cc:	3728      	adds	r7, #40	; 0x28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	40021000 	.word	0x40021000
 80078d8:	48000800 	.word	0x48000800
 80078dc:	48000c00 	.word	0x48000c00

080078e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80078e4:	4805      	ldr	r0, [pc, #20]	; (80078fc <BSP_SD_GetCardState+0x1c>)
 80078e6:	f007 fb35 	bl	800ef54 <HAL_SD_GetCardState>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	bf14      	ite	ne
 80078f0:	2301      	movne	r3, #1
 80078f2:	2300      	moveq	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	200168ac 	.word	0x200168ac

08007900 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  (void)HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007908:	6879      	ldr	r1, [r7, #4]
 800790a:	4803      	ldr	r0, [pc, #12]	; (8007918 <BSP_SD_GetCardInfo+0x18>)
 800790c:	f007 fa4c 	bl	800eda8 <HAL_SD_GetCardInfo>
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	200168ac 	.word	0x200168ac

0800791c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_WriteCpltCallback();
 8007924:	f7fc fdde 	bl	80044e4 <BSP_SD_WriteCpltCallback>
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_ReadCpltCallback();
 8007938:	f7fc fde4 	bl	8004504 <BSP_SD_ReadCpltCallback>
}
 800793c:	bf00      	nop
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800794e:	2003      	movs	r0, #3
 8007950:	f001 fc24 	bl	800919c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007954:	2000      	movs	r0, #0
 8007956:	f000 f815 	bl	8007984 <HAL_InitTick>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	71fb      	strb	r3, [r7, #7]
 8007964:	e001      	b.n	800796a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007966:	f000 f805 	bl	8007974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800796a:	79fb      	ldrb	r3, [r7, #7]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
	...

08007984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007990:	4b16      	ldr	r3, [pc, #88]	; (80079ec <HAL_InitTick+0x68>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d022      	beq.n	80079de <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <HAL_InitTick+0x6c>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	4b13      	ldr	r3, [pc, #76]	; (80079ec <HAL_InitTick+0x68>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80079a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80079a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ac:	4618      	mov	r0, r3
 80079ae:	f001 fc2a 	bl	8009206 <HAL_SYSTICK_Config>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10f      	bne.n	80079d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b0f      	cmp	r3, #15
 80079bc:	d809      	bhi.n	80079d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80079be:	2200      	movs	r2, #0
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	f04f 30ff 	mov.w	r0, #4294967295
 80079c6:	f001 fbf4 	bl	80091b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80079ca:	4a0a      	ldr	r2, [pc, #40]	; (80079f4 <HAL_InitTick+0x70>)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	e007      	b.n	80079e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	73fb      	strb	r3, [r7, #15]
 80079d6:	e004      	b.n	80079e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
 80079dc:	e001      	b.n	80079e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	200000dc 	.word	0x200000dc
 80079f0:	20000038 	.word	0x20000038
 80079f4:	200000d8 	.word	0x200000d8

080079f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80079fc:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <HAL_IncTick+0x1c>)
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <HAL_IncTick+0x20>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	4a03      	ldr	r2, [pc, #12]	; (8007a14 <HAL_IncTick+0x1c>)
 8007a08:	6013      	str	r3, [r2, #0]
}
 8007a0a:	bf00      	nop
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	2001d13c 	.word	0x2001d13c
 8007a18:	200000dc 	.word	0x200000dc

08007a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8007a20:	4b03      	ldr	r3, [pc, #12]	; (8007a30 <HAL_GetTick+0x14>)
 8007a22:	681b      	ldr	r3, [r3, #0]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	2001d13c 	.word	0x2001d13c

08007a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a3c:	f7ff ffee 	bl	8007a1c <HAL_GetTick>
 8007a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4c:	d004      	beq.n	8007a58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a4e:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <HAL_Delay+0x40>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007a58:	bf00      	nop
 8007a5a:	f7ff ffdf 	bl	8007a1c <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d8f7      	bhi.n	8007a5a <HAL_Delay+0x26>
  {
  }
}
 8007a6a:	bf00      	nop
 8007a6c:	bf00      	nop
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	200000dc 	.word	0x200000dc

08007a78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	609a      	str	r2, [r3, #8]
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007aae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6093      	str	r3, [r2, #8]
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ad6:	d101      	bne.n	8007adc <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007afa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007afe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b26:	d101      	bne.n	8007b2c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e000      	b.n	8007b2e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b4e:	f043 0201 	orr.w	r2, r3, #1
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b76:	f043 0202 	orr.w	r2, r3, #2
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007b7e:	bf00      	nop
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d101      	bne.n	8007ba2 <LL_ADC_IsEnabled+0x18>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e000      	b.n	8007ba4 <LL_ADC_IsEnabled+0x1a>
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d101      	bne.n	8007bc8 <LL_ADC_IsDisableOngoing+0x18>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e000      	b.n	8007bca <LL_ADC_IsDisableOngoing+0x1a>
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007be6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007bea:	f043 0204 	orr.w	r2, r3, #4
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c12:	f043 0210 	orr.w	r2, r3, #16
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d101      	bne.n	8007c3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c60:	f043 0220 	orr.w	r2, r3, #32
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f003 0308 	and.w	r3, r3, #8
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d101      	bne.n	8007c8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e000      	b.n	8007c8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
	...

08007c9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e174      	b.n	8007fa0 <HAL_ADC_Init+0x304>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d132      	bne.n	8007d2a <HAL_ADC_Init+0x8e>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a9a      	ldr	r2, [pc, #616]	; (8007f30 <HAL_ADC_Init+0x294>)
 8007cc8:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a99      	ldr	r2, [pc, #612]	; (8007f34 <HAL_ADC_Init+0x298>)
 8007cce:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a99      	ldr	r2, [pc, #612]	; (8007f38 <HAL_ADC_Init+0x29c>)
 8007cd4:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a98      	ldr	r2, [pc, #608]	; (8007f3c <HAL_ADC_Init+0x2a0>)
 8007cda:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a98      	ldr	r2, [pc, #608]	; (8007f40 <HAL_ADC_Init+0x2a4>)
 8007ce0:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a97      	ldr	r2, [pc, #604]	; (8007f44 <HAL_ADC_Init+0x2a8>)
 8007ce6:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a97      	ldr	r2, [pc, #604]	; (8007f48 <HAL_ADC_Init+0x2ac>)
 8007cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a96      	ldr	r2, [pc, #600]	; (8007f4c <HAL_ADC_Init+0x2b0>)
 8007cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a95      	ldr	r2, [pc, #596]	; (8007f50 <HAL_ADC_Init+0x2b4>)
 8007cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (hadc->MspInitCallback == NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d103      	bne.n	8007d12 <HAL_ADC_Init+0x76>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a91      	ldr	r2, [pc, #580]	; (8007f54 <HAL_ADC_Init+0x2b8>)
 8007d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff fec7 	bl	8007ac2 <LL_ADC_IsDeepPowerDownEnabled>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <HAL_ADC_Init+0xa8>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff fead 	bl	8007a9e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff fee2 	bl	8007b12 <LL_ADC_IsInternalRegulatorEnabled>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d113      	bne.n	8007d7c <HAL_ADC_Init+0xe0>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff fec6 	bl	8007aea <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007d5e:	4b7e      	ldr	r3, [pc, #504]	; (8007f58 <HAL_ADC_Init+0x2bc>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	099b      	lsrs	r3, r3, #6
 8007d64:	4a7d      	ldr	r2, [pc, #500]	; (8007f5c <HAL_ADC_Init+0x2c0>)
 8007d66:	fba2 2303 	umull	r2, r3, r2, r3
 8007d6a:	099b      	lsrs	r3, r3, #6
 8007d6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007d6e:	e002      	b.n	8007d76 <HAL_ADC_Init+0xda>
    {
      wait_loop_index--;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1f9      	bne.n	8007d70 <HAL_ADC_Init+0xd4>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7ff fec6 	bl	8007b12 <LL_ADC_IsInternalRegulatorEnabled>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10d      	bne.n	8007da8 <HAL_ADC_Init+0x10c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d90:	f043 0210 	orr.w	r2, r3, #16
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d9c:	f043 0201 	orr.w	r2, r3, #1
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff ff3a 	bl	8007c26 <LL_ADC_REG_IsConversionOngoing>
 8007db2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db8:	f003 0310 	and.w	r3, r3, #16
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f040 80e6 	bne.w	8007f8e <HAL_ADC_Init+0x2f2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f040 80e2 	bne.w	8007f8e <HAL_ADC_Init+0x2f2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dce:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007dd2:	f043 0202 	orr.w	r2, r3, #2
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff fed3 	bl	8007b8a <LL_ADC_IsEnabled>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10b      	bne.n	8007e02 <HAL_ADC_Init+0x166>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007dea:	485d      	ldr	r0, [pc, #372]	; (8007f60 <HAL_ADC_Init+0x2c4>)
 8007dec:	f7ff fecd 	bl	8007b8a <LL_ADC_IsEnabled>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d105      	bne.n	8007e02 <HAL_ADC_Init+0x166>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4859      	ldr	r0, [pc, #356]	; (8007f64 <HAL_ADC_Init+0x2c8>)
 8007dfe:	f7ff fe3b 	bl	8007a78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7e5b      	ldrb	r3, [r3, #25]
 8007e06:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e0c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007e12:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007e18:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e20:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e22:	4313      	orrs	r3, r2
 8007e24:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d106      	bne.n	8007e3e <HAL_ADC_Init+0x1a2>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	3b01      	subs	r3, #1
 8007e36:	045b      	lsls	r3, r3, #17
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <HAL_ADC_Init+0x1be>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e52:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	4b41      	ldr	r3, [pc, #260]	; (8007f68 <HAL_ADC_Init+0x2cc>)
 8007e62:	4013      	ands	r3, r2
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6812      	ldr	r2, [r2, #0]
 8007e68:	69b9      	ldr	r1, [r7, #24]
 8007e6a:	430b      	orrs	r3, r1
 8007e6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fed7 	bl	8007c26 <LL_ADC_REG_IsConversionOngoing>
 8007e78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7ff fef8 	bl	8007c74 <LL_ADC_INJ_IsConversionOngoing>
 8007e84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d140      	bne.n	8007f0e <HAL_ADC_Init+0x272>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d13d      	bne.n	8007f0e <HAL_ADC_Init+0x272>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	7e1b      	ldrb	r3, [r3, #24]
 8007e9a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007e9c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ea4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eb4:	f023 0306 	bic.w	r3, r3, #6
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6812      	ldr	r2, [r2, #0]
 8007ebc:	69b9      	ldr	r1, [r7, #24]
 8007ebe:	430b      	orrs	r3, r1
 8007ec0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d118      	bne.n	8007efe <HAL_ADC_Init+0x262>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ed6:	f023 0304 	bic.w	r3, r3, #4
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007ee2:	4311      	orrs	r1, r2
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007ee8:	4311      	orrs	r1, r2
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	611a      	str	r2, [r3, #16]
 8007efc:	e007      	b.n	8007f0e <HAL_ADC_Init+0x272>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0201 	bic.w	r2, r2, #1
 8007f0c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d12a      	bne.n	8007f6c <HAL_ADC_Init+0x2d0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1c:	f023 010f 	bic.w	r1, r3, #15
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	1e5a      	subs	r2, r3, #1
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8007f2e:	e025      	b.n	8007f7c <HAL_ADC_Init+0x2e0>
 8007f30:	080080d5 	.word	0x080080d5
 8007f34:	080080e9 	.word	0x080080e9
 8007f38:	080080fd 	.word	0x080080fd
 8007f3c:	08008111 	.word	0x08008111
 8007f40:	08008735 	.word	0x08008735
 8007f44:	08008749 	.word	0x08008749
 8007f48:	0800875d 	.word	0x0800875d
 8007f4c:	08008771 	.word	0x08008771
 8007f50:	08008785 	.word	0x08008785
 8007f54:	08006e75 	.word	0x08006e75
 8007f58:	20000038 	.word	0x20000038
 8007f5c:	053e2d63 	.word	0x053e2d63
 8007f60:	50040000 	.word	0x50040000
 8007f64:	50040300 	.word	0x50040300
 8007f68:	fff0c007 	.word	0xfff0c007
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 020f 	bic.w	r2, r2, #15
 8007f7a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f80:	f023 0303 	bic.w	r3, r3, #3
 8007f84:	f043 0201 	orr.w	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	659a      	str	r2, [r3, #88]	; 0x58
 8007f8c:	e007      	b.n	8007f9e <HAL_ADC_Init+0x302>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f92:	f043 0210 	orr.w	r2, r3, #16
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007f9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3720      	adds	r7, #32
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fe36 	bl	8007c26 <LL_ADC_REG_IsConversionOngoing>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d14f      	bne.n	8008060 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d101      	bne.n	8007fce <HAL_ADC_Start+0x26>
 8007fca:	2302      	movs	r3, #2
 8007fcc:	e04b      	b.n	8008066 <HAL_ADC_Start+0xbe>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f964 	bl	80082a4 <ADC_Enable>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d137      	bne.n	8008056 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007fee:	f023 0301 	bic.w	r3, r3, #1
 8007ff2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008006:	d106      	bne.n	8008016 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800c:	f023 0206 	bic.w	r2, r3, #6
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	65da      	str	r2, [r3, #92]	; 0x5c
 8008014:	e002      	b.n	800801c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	221c      	movs	r2, #28
 8008022:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d007      	beq.n	800804a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800803e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008042:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff fdc1 	bl	8007bd6 <LL_ADC_REG_StartConversion>
 8008054:	e006      	b.n	8008064 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800805e:	e001      	b.n	8008064 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008060:	2302      	movs	r3, #2
 8008062:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8008064:	7bfb      	ldrb	r3, [r7, #15]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800807c:	2b01      	cmp	r3, #1
 800807e:	d101      	bne.n	8008084 <HAL_ADC_Stop+0x16>
 8008080:	2302      	movs	r3, #2
 8008082:	e023      	b.n	80080cc <HAL_ADC_Stop+0x5e>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800808c:	2103      	movs	r1, #3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f854 	bl	800813c <ADC_ConversionStop>
 8008094:	4603      	mov	r3, r0
 8008096:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d111      	bne.n	80080c2 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f95a 	bl	8008358 <ADC_Disable>
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d109      	bne.n	80080c2 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80080b6:	f023 0301 	bic.w	r3, r3, #1
 80080ba:	f043 0201 	orr.w	r2, r3, #1
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008146:	2300      	movs	r3, #0
 8008148:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fd67 	bl	8007c26 <LL_ADC_REG_IsConversionOngoing>
 8008158:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4618      	mov	r0, r3
 8008160:	f7ff fd88 	bl	8007c74 <LL_ADC_INJ_IsConversionOngoing>
 8008164:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d103      	bne.n	8008174 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 8091 	beq.w	8008296 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d02a      	beq.n	80081d8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	7e5b      	ldrb	r3, [r3, #25]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d126      	bne.n	80081d8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	7e1b      	ldrb	r3, [r3, #24]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d122      	bne.n	80081d8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008192:	2301      	movs	r3, #1
 8008194:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008196:	e014      	b.n	80081c2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	4a41      	ldr	r2, [pc, #260]	; (80082a0 <ADC_ConversionStop+0x164>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d90d      	bls.n	80081bc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a4:	f043 0210 	orr.w	r2, r3, #16
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b0:	f043 0201 	orr.w	r2, r3, #1
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e06d      	b.n	8008298 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	3301      	adds	r3, #1
 80081c0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081cc:	2b40      	cmp	r3, #64	; 0x40
 80081ce:	d1e3      	bne.n	8008198 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2240      	movs	r2, #64	; 0x40
 80081d6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d014      	beq.n	8008208 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff fd1f 	bl	8007c26 <LL_ADC_REG_IsConversionOngoing>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00c      	beq.n	8008208 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff fcdc 	bl	8007bb0 <LL_ADC_IsDisableOngoing>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d104      	bne.n	8008208 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4618      	mov	r0, r3
 8008204:	f7ff fcfb 	bl	8007bfe <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d014      	beq.n	8008238 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fd2e 	bl	8007c74 <LL_ADC_INJ_IsConversionOngoing>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00c      	beq.n	8008238 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff fcc4 	bl	8007bb0 <LL_ADC_IsDisableOngoing>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d104      	bne.n	8008238 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff fd0a 	bl	8007c4c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d005      	beq.n	800824a <ADC_ConversionStop+0x10e>
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	2b03      	cmp	r3, #3
 8008242:	d105      	bne.n	8008250 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008244:	230c      	movs	r3, #12
 8008246:	617b      	str	r3, [r7, #20]
        break;
 8008248:	e005      	b.n	8008256 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800824a:	2308      	movs	r3, #8
 800824c:	617b      	str	r3, [r7, #20]
        break;
 800824e:	e002      	b.n	8008256 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008250:	2304      	movs	r3, #4
 8008252:	617b      	str	r3, [r7, #20]
        break;
 8008254:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008256:	f7ff fbe1 	bl	8007a1c <HAL_GetTick>
 800825a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800825c:	e014      	b.n	8008288 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800825e:	f7ff fbdd 	bl	8007a1c <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b05      	cmp	r3, #5
 800826a:	d90d      	bls.n	8008288 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008270:	f043 0210 	orr.w	r2, r3, #16
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800827c:	f043 0201 	orr.w	r2, r3, #1
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e007      	b.n	8008298 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	4013      	ands	r3, r2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1e3      	bne.n	800825e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	a33fffff 	.word	0xa33fffff

080082a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff fc6a 	bl	8007b8a <LL_ADC_IsEnabled>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d146      	bne.n	800834a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	4b24      	ldr	r3, [pc, #144]	; (8008354 <ADC_Enable+0xb0>)
 80082c4:	4013      	ands	r3, r2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00d      	beq.n	80082e6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ce:	f043 0210 	orr.w	r2, r3, #16
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082da:	f043 0201 	orr.w	r2, r3, #1
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e032      	b.n	800834c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7ff fc25 	bl	8007b3a <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80082f0:	f7ff fb94 	bl	8007a1c <HAL_GetTick>
 80082f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80082f6:	e021      	b.n	800833c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7ff fc44 	bl	8007b8a <LL_ADC_IsEnabled>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d104      	bne.n	8008312 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff fc14 	bl	8007b3a <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008312:	f7ff fb83 	bl	8007a1c <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	2b02      	cmp	r3, #2
 800831e:	d90d      	bls.n	800833c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008324:	f043 0210 	orr.w	r2, r3, #16
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008330:	f043 0201 	orr.w	r2, r3, #1
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e007      	b.n	800834c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b01      	cmp	r3, #1
 8008348:	d1d6      	bne.n	80082f8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	8000003f 	.word	0x8000003f

08008358 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fc23 	bl	8007bb0 <LL_ADC_IsDisableOngoing>
 800836a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4618      	mov	r0, r3
 8008372:	f7ff fc0a 	bl	8007b8a <LL_ADC_IsEnabled>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d040      	beq.n	80083fe <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d13d      	bne.n	80083fe <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f003 030d 	and.w	r3, r3, #13
 800838c:	2b01      	cmp	r3, #1
 800838e:	d10c      	bne.n	80083aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff fbe4 	bl	8007b62 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2203      	movs	r2, #3
 80083a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80083a2:	f7ff fb3b 	bl	8007a1c <HAL_GetTick>
 80083a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80083a8:	e022      	b.n	80083f0 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ae:	f043 0210 	orr.w	r2, r3, #16
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ba:	f043 0201 	orr.w	r2, r3, #1
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e01c      	b.n	8008400 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80083c6:	f7ff fb29 	bl	8007a1c <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d90d      	bls.n	80083f0 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d8:	f043 0210 	orr.w	r2, r3, #16
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e4:	f043 0201 	orr.w	r2, r3, #1
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e007      	b.n	8008400 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e3      	bne.n	80083c6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <LL_ADC_SetCommonPathInternalCh>:
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	431a      	orrs	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	609a      	str	r2, [r3, #8]
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <LL_ADC_GetCommonPathInternalCh>:
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800843e:	4618      	mov	r0, r3
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
	...

0800844c <LL_ADC_SetOffset>:
{
 800844c:	b490      	push	{r4, r7}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3360      	adds	r3, #96	; 0x60
 800845e:	461a      	mov	r2, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8008468:	6822      	ldr	r2, [r4, #0]
 800846a:	4b08      	ldr	r3, [pc, #32]	; (800848c <LL_ADC_SetOffset+0x40>)
 800846c:	4013      	ands	r3, r2
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	4313      	orrs	r3, r2
 800847a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800847e:	6023      	str	r3, [r4, #0]
}
 8008480:	bf00      	nop
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bc90      	pop	{r4, r7}
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	03fff000 	.word	0x03fff000

08008490 <LL_ADC_GetOffsetChannel>:
{
 8008490:	b490      	push	{r4, r7}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	3360      	adds	r3, #96	; 0x60
 800849e:	461a      	mov	r2, r3
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc90      	pop	{r4, r7}
 80084b6:	4770      	bx	lr

080084b8 <LL_ADC_SetOffsetState>:
{
 80084b8:	b490      	push	{r4, r7}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	3360      	adds	r3, #96	; 0x60
 80084c8:	461a      	mov	r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4313      	orrs	r3, r2
 80084dc:	6023      	str	r3, [r4, #0]
}
 80084de:	bf00      	nop
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bc90      	pop	{r4, r7}
 80084e6:	4770      	bx	lr

080084e8 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	431a      	orrs	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	615a      	str	r2, [r3, #20]
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <LL_ADC_SetChannelSamplingTime>:
{
 800850e:	b490      	push	{r4, r7}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3314      	adds	r3, #20
 800851e:	461a      	mov	r2, r3
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	0e5b      	lsrs	r3, r3, #25
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	4413      	add	r3, r2
 800852c:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800852e:	6822      	ldr	r2, [r4, #0]
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	0d1b      	lsrs	r3, r3, #20
 8008534:	f003 031f 	and.w	r3, r3, #31
 8008538:	2107      	movs	r1, #7
 800853a:	fa01 f303 	lsl.w	r3, r1, r3
 800853e:	43db      	mvns	r3, r3
 8008540:	401a      	ands	r2, r3
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	0d1b      	lsrs	r3, r3, #20
 8008546:	f003 031f 	and.w	r3, r3, #31
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	fa01 f303 	lsl.w	r3, r1, r3
 8008550:	4313      	orrs	r3, r2
 8008552:	6023      	str	r3, [r4, #0]
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bc90      	pop	{r4, r7}
 800855c:	4770      	bx	lr
	...

08008560 <LL_ADC_SetChannelSingleDiff>:
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008578:	43db      	mvns	r3, r3
 800857a:	401a      	ands	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f003 0318 	and.w	r3, r3, #24
 8008582:	4908      	ldr	r1, [pc, #32]	; (80085a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008584:	40d9      	lsrs	r1, r3
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	400b      	ands	r3, r1
 800858a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800858e:	431a      	orrs	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008596:	bf00      	nop
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	0007ffff 	.word	0x0007ffff

080085a8 <LL_ADC_IsEnabled>:
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d101      	bne.n	80085c0 <LL_ADC_IsEnabled+0x18>
 80085bc:	2301      	movs	r3, #1
 80085be:	e000      	b.n	80085c2 <LL_ADC_IsEnabled+0x1a>
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <LL_ADC_StartCalibration>:
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80085e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80085ea:	4313      	orrs	r3, r2
 80085ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	609a      	str	r2, [r3, #8]
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <LL_ADC_IsCalibrationOnGoing>:
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008614:	d101      	bne.n	800861a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008616:	2301      	movs	r3, #1
 8008618:	e000      	b.n	800861c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <LL_ADC_REG_IsConversionOngoing>:
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b04      	cmp	r3, #4
 800863a:	d101      	bne.n	8008640 <LL_ADC_REG_IsConversionOngoing+0x18>
 800863c:	2301      	movs	r3, #1
 800863e:	e000      	b.n	8008642 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <LL_ADC_INJ_IsConversionOngoing>:
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b08      	cmp	r3, #8
 8008660:	d101      	bne.n	8008666 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008662:	2301      	movs	r3, #1
 8008664:	e000      	b.n	8008668 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800867e:	2300      	movs	r3, #0
 8008680:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008688:	2b01      	cmp	r3, #1
 800868a:	d101      	bne.n	8008690 <HAL_ADCEx_Calibration_Start+0x1c>
 800868c:	2302      	movs	r3, #2
 800868e:	e04d      	b.n	800872c <HAL_ADCEx_Calibration_Start+0xb8>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff fe5d 	bl	8008358 <ADC_Disable>
 800869e:	4603      	mov	r3, r0
 80086a0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d136      	bne.n	8008716 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80086b0:	f023 0302 	bic.w	r3, r3, #2
 80086b4:	f043 0202 	orr.w	r2, r3, #2
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7ff ff83 	bl	80085ce <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80086c8:	e014      	b.n	80086f4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	3301      	adds	r3, #1
 80086ce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80086d6:	d30d      	bcc.n	80086f4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086dc:	f023 0312 	bic.w	r3, r3, #18
 80086e0:	f043 0210 	orr.w	r2, r3, #16
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e01b      	b.n	800872c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff ff81 	bl	8008600 <LL_ADC_IsCalibrationOnGoing>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e2      	bne.n	80086ca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008708:	f023 0303 	bic.w	r3, r3, #3
 800870c:	f043 0201 	orr.w	r2, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	659a      	str	r2, [r3, #88]	; 0x58
 8008714:	e005      	b.n	8008722 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871a:	f043 0210 	orr.w	r2, r3, #16
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800872a:	7bfb      	ldrb	r3, [r7, #15]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b0a8      	sub	sp, #160	; 0xa0
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d102      	bne.n	80087c2 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 80087bc:	2302      	movs	r3, #2
 80087be:	f000 bc13 	b.w	8008fe8 <HAL_ADCEx_InjectedConfigChannel+0x850>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d130      	bne.n	800883c <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d179      	bne.n	80088d6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d010      	beq.n	800880c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	0e9b      	lsrs	r3, r3, #26
 80087f0:	021b      	lsls	r3, r3, #8
 80087f2:	f403 52f8 	and.w	r2, r3, #7936	; 0x1f00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80087fe:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8008804:	4313      	orrs	r3, r2
 8008806:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800880a:	e007      	b.n	800881c <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	0e9b      	lsrs	r3, r3, #26
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8008818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008822:	4ba1      	ldr	r3, [pc, #644]	; (8008aa8 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 8008824:	4013      	ands	r3, r2
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	6812      	ldr	r2, [r2, #0]
 800882a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800882e:	430b      	orrs	r3, r1
 8008830:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008838:	661a      	str	r2, [r3, #96]	; 0x60
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800883a:	e04c      	b.n	80088d6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008840:	2b00      	cmp	r3, #0
 8008842:	d11d      	bne.n	8008880 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	699a      	ldr	r2, [r3, #24]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	665a      	str	r2, [r3, #100]	; 0x64
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	661a      	str	r2, [r3, #96]	; 0x60
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00d      	beq.n	8008876 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008868:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800886e:	4313      	orrs	r3, r2
 8008870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008874:	e004      	b.n	8008880 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	3b01      	subs	r3, #1
 800887c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	0e9b      	lsrs	r3, r3, #26
 8008886:	f003 021f 	and.w	r2, r3, #31
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f003 031f 	and.w	r3, r3, #31
 8008892:	fa02 f303 	lsl.w	r3, r2, r3
 8008896:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088a4:	1e5a      	subs	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	665a      	str	r2, [r3, #100]	; 0x64

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80088ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10a      	bne.n	80088d6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088c6:	4b78      	ldr	r3, [pc, #480]	; (8008aa8 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 80088c8:	4013      	ands	r3, r2
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	6812      	ldr	r2, [r2, #0]
 80088d2:	430b      	orrs	r3, r1
 80088d4:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4618      	mov	r0, r3
 80088dc:	f7ff feb7 	bl	800864e <LL_ADC_INJ_IsConversionOngoing>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d120      	bne.n	8008928 <HAL_ADCEx_InjectedConfigChannel+0x190>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	7f5b      	ldrb	r3, [r3, #29]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d110      	bne.n	8008910 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	7f9b      	ldrb	r3, [r3, #30]
 80088fc:	055a      	lsls	r2, r3, #21
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	7f1b      	ldrb	r3, [r3, #28]
 8008902:	051b      	lsls	r3, r3, #20
 8008904:	431a      	orrs	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	60da      	str	r2, [r3, #12]
 800890e:	e00b      	b.n	8008928 <HAL_ADCEx_InjectedConfigChannel+0x190>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	7f9b      	ldrb	r3, [r3, #30]
 800891e:	055a      	lsls	r2, r3, #21
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f7ff fe7b 	bl	8008628 <LL_ADC_REG_IsConversionOngoing>
 8008932:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff fe87 	bl	800864e <LL_ADC_INJ_IsConversionOngoing>
 8008940:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008944:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008948:	2b00      	cmp	r3, #0
 800894a:	f040 81b9 	bne.w	8008cc0 <HAL_ADCEx_InjectedConfigChannel+0x528>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800894e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008952:	2b00      	cmp	r3, #0
 8008954:	f040 81b4 	bne.w	8008cc0 <HAL_ADCEx_InjectedConfigChannel+0x528>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	6a1b      	ldr	r3, [r3, #32]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d003      	beq.n	8008968 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	2b00      	cmp	r3, #0
 8008966:	d115      	bne.n	8008994 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	7f5b      	ldrb	r3, [r3, #29]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d108      	bne.n	8008982 <HAL_ADCEx_InjectedConfigChannel+0x1ea>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800897e:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8008980:	e01e      	b.n	80089c0 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68da      	ldr	r2, [r3, #12]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008990:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8008992:	e015      	b.n	80089c0 <HAL_ADCEx_InjectedConfigChannel+0x228>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	7f5b      	ldrb	r3, [r3, #29]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d109      	bne.n	80089b0 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a0:	f043 0220 	orr.w	r2, r3, #32
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	659a      	str	r2, [r3, #88]	; 0x58

        tmp_hal_status = HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80089ae:	e007      	b.n	80089c0 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68da      	ldr	r2, [r3, #12]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80089be:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d110      	bne.n	80089ec <HAL_ADCEx_InjectedConfigChannel+0x254>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089dc:	430b      	orrs	r3, r1
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f042 0202 	orr.w	r2, r2, #2
 80089e8:	611a      	str	r2, [r3, #16]
 80089ea:	e007      	b.n	80089fc <HAL_ADCEx_InjectedConfigChannel+0x264>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	691a      	ldr	r2, [r3, #16]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 0202 	bic.w	r2, r2, #2
 80089fa:	611a      	str	r2, [r3, #16]
    }

#if defined(ADC_SMPR1_SMPPLUS)
    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a04:	d10f      	bne.n	8008a26 <HAL_ADCEx_InjectedConfigChannel+0x28e>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4619      	mov	r1, r3
 8008a12:	f7ff fd7c 	bl	800850e <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7ff fd62 	bl	80084e8 <LL_ADC_SetSamplingTimeCommonConfig>
 8008a24:	e00e      	b.n	8008a44 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6818      	ldr	r0, [r3, #0]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	6819      	ldr	r1, [r3, #0]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	461a      	mov	r2, r3
 8008a34:	f7ff fd6b 	bl	800850e <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7ff fd52 	bl	80084e8 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	695a      	ldr	r2, [r3, #20]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	08db      	lsrs	r3, r3, #3
 8008a50:	f003 0303 	and.w	r3, r3, #3
 8008a54:	005b      	lsls	r3, r3, #1
 8008a56:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d00a      	beq.n	8008a7c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6818      	ldr	r0, [r3, #0]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	6919      	ldr	r1, [r3, #16]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a76:	f7ff fce9 	bl	800844c <LL_ADC_SetOffset>
 8008a7a:	e121      	b.n	8008cc0 <HAL_ADCEx_InjectedConfigChannel+0x528>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2100      	movs	r1, #0
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7ff fd04 	bl	8008490 <LL_ADC_GetOffsetChannel>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10c      	bne.n	8008aac <HAL_ADCEx_InjectedConfigChannel+0x314>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2100      	movs	r1, #0
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7ff fcf9 	bl	8008490 <LL_ADC_GetOffsetChannel>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	0e9b      	lsrs	r3, r3, #26
 8008aa2:	f003 021f 	and.w	r2, r3, #31
 8008aa6:	e016      	b.n	8008ad6 <HAL_ADCEx_InjectedConfigChannel+0x33e>
 8008aa8:	82082000 	.word	0x82082000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7ff fcec 	bl	8008490 <LL_ADC_GetOffsetChannel>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ac2:	fa93 f3a3 	rbit	r3, r3
 8008ac6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008aca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ace:	fab3 f383 	clz	r3, r3
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d105      	bne.n	8008aee <HAL_ADCEx_InjectedConfigChannel+0x356>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	0e9b      	lsrs	r3, r3, #26
 8008ae8:	f003 031f 	and.w	r3, r3, #31
 8008aec:	e00a      	b.n	8008b04 <HAL_ADCEx_InjectedConfigChannel+0x36c>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008af4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008af6:	fa93 f3a3 	rbit	r3, r3
 8008afa:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8008afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008afe:	fab3 f383 	clz	r3, r3
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d106      	bne.n	8008b16 <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2100      	movs	r1, #0
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7ff fcd1 	bl	80084b8 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff fcb7 	bl	8008490 <LL_ADC_GetOffsetChannel>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10a      	bne.n	8008b42 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2101      	movs	r1, #1
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7ff fcac 	bl	8008490 <LL_ADC_GetOffsetChannel>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	0e9b      	lsrs	r3, r3, #26
 8008b3c:	f003 021f 	and.w	r2, r3, #31
 8008b40:	e010      	b.n	8008b64 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2101      	movs	r1, #1
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7ff fca1 	bl	8008490 <LL_ADC_GetOffsetChannel>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b54:	fa93 f3a3 	rbit	r3, r3
 8008b58:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b5c:	fab3 f383 	clz	r3, r3
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	461a      	mov	r2, r3
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d105      	bne.n	8008b7c <HAL_ADCEx_InjectedConfigChannel+0x3e4>
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	0e9b      	lsrs	r3, r3, #26
 8008b76:	f003 031f 	and.w	r3, r3, #31
 8008b7a:	e00a      	b.n	8008b92 <HAL_ADCEx_InjectedConfigChannel+0x3fa>
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b84:	fa93 f3a3 	rbit	r3, r3
 8008b88:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8008b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b8c:	fab3 f383 	clz	r3, r3
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d106      	bne.n	8008ba4 <HAL_ADCEx_InjectedConfigChannel+0x40c>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7ff fc8a 	bl	80084b8 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2102      	movs	r1, #2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7ff fc70 	bl	8008490 <LL_ADC_GetOffsetChannel>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10a      	bne.n	8008bd0 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2102      	movs	r1, #2
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7ff fc65 	bl	8008490 <LL_ADC_GetOffsetChannel>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	0e9b      	lsrs	r3, r3, #26
 8008bca:	f003 021f 	and.w	r2, r3, #31
 8008bce:	e010      	b.n	8008bf2 <HAL_ADCEx_InjectedConfigChannel+0x45a>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff fc5a 	bl	8008490 <LL_ADC_GetOffsetChannel>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008be2:	fa93 f3a3 	rbit	r3, r3
 8008be6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8008be8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bea:	fab3 f383 	clz	r3, r3
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d105      	bne.n	8008c0a <HAL_ADCEx_InjectedConfigChannel+0x472>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	0e9b      	lsrs	r3, r3, #26
 8008c04:	f003 031f 	and.w	r3, r3, #31
 8008c08:	e00a      	b.n	8008c20 <HAL_ADCEx_InjectedConfigChannel+0x488>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c12:	fa93 f3a3 	rbit	r3, r3
 8008c16:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c1a:	fab3 f383 	clz	r3, r3
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d106      	bne.n	8008c32 <HAL_ADCEx_InjectedConfigChannel+0x49a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	2102      	movs	r1, #2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7ff fc43 	bl	80084b8 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2103      	movs	r1, #3
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7ff fc29 	bl	8008490 <LL_ADC_GetOffsetChannel>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2103      	movs	r1, #3
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7ff fc1e 	bl	8008490 <LL_ADC_GetOffsetChannel>
 8008c54:	4603      	mov	r3, r0
 8008c56:	0e9b      	lsrs	r3, r3, #26
 8008c58:	f003 021f 	and.w	r2, r3, #31
 8008c5c:	e010      	b.n	8008c80 <HAL_ADCEx_InjectedConfigChannel+0x4e8>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2103      	movs	r1, #3
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fc13 	bl	8008490 <LL_ADC_GetOffsetChannel>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c70:	fa93 f3a3 	rbit	r3, r3
 8008c74:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8008c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c78:	fab3 f383 	clz	r3, r3
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	461a      	mov	r2, r3
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d105      	bne.n	8008c98 <HAL_ADCEx_InjectedConfigChannel+0x500>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	0e9b      	lsrs	r3, r3, #26
 8008c92:	f003 031f 	and.w	r3, r3, #31
 8008c96:	e00a      	b.n	8008cae <HAL_ADCEx_InjectedConfigChannel+0x516>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca0:	fa93 f3a3 	rbit	r3, r3
 8008ca4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8008ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca8:	fab3 f383 	clz	r3, r3
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d106      	bne.n	8008cc0 <HAL_ADCEx_InjectedConfigChannel+0x528>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	2103      	movs	r1, #3
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff fbfc 	bl	80084b8 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7ff fc6f 	bl	80085a8 <LL_ADC_IsEnabled>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f040 810c 	bne.w	8008eea <HAL_ADCEx_InjectedConfigChannel+0x752>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6818      	ldr	r0, [r3, #0]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	6819      	ldr	r1, [r3, #0]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f7ff fc3e 	bl	8008560 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	4aa8      	ldr	r2, [pc, #672]	; (8008f8c <HAL_ADCEx_InjectedConfigChannel+0x7f4>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	f040 80fd 	bne.w	8008eea <HAL_ADCEx_InjectedConfigChannel+0x752>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10b      	bne.n	8008d18 <HAL_ADCEx_InjectedConfigChannel+0x580>
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	0e9b      	lsrs	r3, r3, #26
 8008d06:	3301      	adds	r3, #1
 8008d08:	f003 031f 	and.w	r3, r3, #31
 8008d0c:	2b09      	cmp	r3, #9
 8008d0e:	bf94      	ite	ls
 8008d10:	2301      	movls	r3, #1
 8008d12:	2300      	movhi	r3, #0
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	e012      	b.n	8008d3e <HAL_ADCEx_InjectedConfigChannel+0x5a6>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d20:	fa93 f3a3 	rbit	r3, r3
 8008d24:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d28:	fab3 f383 	clz	r3, r3
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	3301      	adds	r3, #1
 8008d30:	f003 031f 	and.w	r3, r3, #31
 8008d34:	2b09      	cmp	r3, #9
 8008d36:	bf94      	ite	ls
 8008d38:	2301      	movls	r3, #1
 8008d3a:	2300      	movhi	r3, #0
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d064      	beq.n	8008e0c <HAL_ADCEx_InjectedConfigChannel+0x674>
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d107      	bne.n	8008d5e <HAL_ADCEx_InjectedConfigChannel+0x5c6>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	0e9b      	lsrs	r3, r3, #26
 8008d54:	3301      	adds	r3, #1
 8008d56:	069b      	lsls	r3, r3, #26
 8008d58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d5c:	e00e      	b.n	8008d7c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d66:	fa93 f3a3 	rbit	r3, r3
 8008d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	fab3 f383 	clz	r3, r3
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	3301      	adds	r3, #1
 8008d76:	069b      	lsls	r3, r3, #26
 8008d78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d109      	bne.n	8008d9c <HAL_ADCEx_InjectedConfigChannel+0x604>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	0e9b      	lsrs	r3, r3, #26
 8008d8e:	3301      	adds	r3, #1
 8008d90:	f003 031f 	and.w	r3, r3, #31
 8008d94:	2101      	movs	r1, #1
 8008d96:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9a:	e010      	b.n	8008dbe <HAL_ADCEx_InjectedConfigChannel+0x626>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da4:	fa93 f3a3 	rbit	r3, r3
 8008da8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	fab3 f383 	clz	r3, r3
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	3301      	adds	r3, #1
 8008db4:	f003 031f 	and.w	r3, r3, #31
 8008db8:	2101      	movs	r1, #1
 8008dba:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbe:	ea42 0103 	orr.w	r1, r2, r3
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <HAL_ADCEx_InjectedConfigChannel+0x64c>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	0e9b      	lsrs	r3, r3, #26
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	f003 021f 	and.w	r2, r3, #31
 8008dda:	4613      	mov	r3, r2
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	4413      	add	r3, r2
 8008de0:	051b      	lsls	r3, r3, #20
 8008de2:	e011      	b.n	8008e08 <HAL_ADCEx_InjectedConfigChannel+0x670>
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dec:	fa93 f3a3 	rbit	r3, r3
 8008df0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df4:	fab3 f383 	clz	r3, r3
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	f003 021f 	and.w	r2, r3, #31
 8008e00:	4613      	mov	r3, r2
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	4413      	add	r3, r2
 8008e06:	051b      	lsls	r3, r3, #20
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	e069      	b.n	8008ee0 <HAL_ADCEx_InjectedConfigChannel+0x748>
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d107      	bne.n	8008e28 <HAL_ADCEx_InjectedConfigChannel+0x690>
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	0e9b      	lsrs	r3, r3, #26
 8008e1e:	3301      	adds	r3, #1
 8008e20:	069b      	lsls	r3, r3, #26
 8008e22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008e26:	e00e      	b.n	8008e46 <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	fa93 f3a3 	rbit	r3, r3
 8008e34:	623b      	str	r3, [r7, #32]
  return result;
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	fab3 f383 	clz	r3, r3
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	3301      	adds	r3, #1
 8008e40:	069b      	lsls	r3, r3, #26
 8008e42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d109      	bne.n	8008e66 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	0e9b      	lsrs	r3, r3, #26
 8008e58:	3301      	adds	r3, #1
 8008e5a:	f003 031f 	and.w	r3, r3, #31
 8008e5e:	2101      	movs	r1, #1
 8008e60:	fa01 f303 	lsl.w	r3, r1, r3
 8008e64:	e010      	b.n	8008e88 <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	fa93 f3a3 	rbit	r3, r3
 8008e72:	61bb      	str	r3, [r7, #24]
  return result;
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	fab3 f383 	clz	r3, r3
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	f003 031f 	and.w	r3, r3, #31
 8008e82:	2101      	movs	r1, #1
 8008e84:	fa01 f303 	lsl.w	r3, r1, r3
 8008e88:	ea42 0103 	orr.w	r1, r2, r3
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10d      	bne.n	8008eb4 <HAL_ADCEx_InjectedConfigChannel+0x71c>
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	0e9b      	lsrs	r3, r3, #26
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	f003 021f 	and.w	r2, r3, #31
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	005b      	lsls	r3, r3, #1
 8008ea8:	4413      	add	r3, r2
 8008eaa:	3b1e      	subs	r3, #30
 8008eac:	051b      	lsls	r3, r3, #20
 8008eae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008eb2:	e014      	b.n	8008ede <HAL_ADCEx_InjectedConfigChannel+0x746>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	fa93 f3a3 	rbit	r3, r3
 8008ec0:	613b      	str	r3, [r7, #16]
  return result;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	fab3 f383 	clz	r3, r3
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	3301      	adds	r3, #1
 8008ecc:	f003 021f 	and.w	r2, r3, #31
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	4413      	add	r3, r2
 8008ed6:	3b1e      	subs	r3, #30
 8008ed8:	051b      	lsls	r3, r3, #20
 8008eda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ede:	430b      	orrs	r3, r1
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	6892      	ldr	r2, [r2, #8]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	f7ff fb12 	bl	800850e <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	4b28      	ldr	r3, [pc, #160]	; (8008f90 <HAL_ADCEx_InjectedConfigChannel+0x7f8>)
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d072      	beq.n	8008fdc <HAL_ADCEx_InjectedConfigChannel+0x844>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008ef6:	4827      	ldr	r0, [pc, #156]	; (8008f94 <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8008ef8:	f7ff fa99 	bl	800842e <LL_ADC_GetCommonPathInternalCh>
 8008efc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a24      	ldr	r2, [pc, #144]	; (8008f98 <HAL_ADCEx_InjectedConfigChannel+0x800>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d126      	bne.n	8008f58 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d120      	bne.n	8008f58 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a20      	ldr	r2, [pc, #128]	; (8008f9c <HAL_ADCEx_InjectedConfigChannel+0x804>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d15d      	bne.n	8008fdc <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f28:	4619      	mov	r1, r3
 8008f2a:	481a      	ldr	r0, [pc, #104]	; (8008f94 <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8008f2c:	f7ff fa6c 	bl	8008408 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008f30:	4b1b      	ldr	r3, [pc, #108]	; (8008fa0 <HAL_ADCEx_InjectedConfigChannel+0x808>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	099b      	lsrs	r3, r3, #6
 8008f36:	4a1b      	ldr	r2, [pc, #108]	; (8008fa4 <HAL_ADCEx_InjectedConfigChannel+0x80c>)
 8008f38:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3c:	099a      	lsrs	r2, r3, #6
 8008f3e:	4613      	mov	r3, r2
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	4413      	add	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8008f48:	e002      	b.n	8008f50 <HAL_ADCEx_InjectedConfigChannel+0x7b8>
        {
          wait_loop_index--;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1f9      	bne.n	8008f4a <HAL_ADCEx_InjectedConfigChannel+0x7b2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f56:	e041      	b.n	8008fdc <HAL_ADCEx_InjectedConfigChannel+0x844>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a12      	ldr	r2, [pc, #72]	; (8008fa8 <HAL_ADCEx_InjectedConfigChannel+0x810>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d124      	bne.n	8008fac <HAL_ADCEx_InjectedConfigChannel+0x814>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008f62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d11e      	bne.n	8008fac <HAL_ADCEx_InjectedConfigChannel+0x814>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a0a      	ldr	r2, [pc, #40]	; (8008f9c <HAL_ADCEx_InjectedConfigChannel+0x804>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d131      	bne.n	8008fdc <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f80:	4619      	mov	r1, r3
 8008f82:	4804      	ldr	r0, [pc, #16]	; (8008f94 <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8008f84:	f7ff fa40 	bl	8008408 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f88:	e028      	b.n	8008fdc <HAL_ADCEx_InjectedConfigChannel+0x844>
 8008f8a:	bf00      	nop
 8008f8c:	407f0000 	.word	0x407f0000
 8008f90:	80080000 	.word	0x80080000
 8008f94:	50040300 	.word	0x50040300
 8008f98:	c7520000 	.word	0xc7520000
 8008f9c:	50040000 	.word	0x50040000
 8008fa0:	20000038 	.word	0x20000038
 8008fa4:	053e2d63 	.word	0x053e2d63
 8008fa8:	cb840000 	.word	0xcb840000
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a0f      	ldr	r2, [pc, #60]	; (8008ff0 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d112      	bne.n	8008fdc <HAL_ADCEx_InjectedConfigChannel+0x844>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10c      	bne.n	8008fdc <HAL_ADCEx_InjectedConfigChannel+0x844>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a0b      	ldr	r2, [pc, #44]	; (8008ff4 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d107      	bne.n	8008fdc <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4808      	ldr	r0, [pc, #32]	; (8008ff8 <HAL_ADCEx_InjectedConfigChannel+0x860>)
 8008fd8:	f7ff fa16 	bl	8008408 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8008fe4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	37a0      	adds	r7, #160	; 0xa0
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	80000001 	.word	0x80000001
 8008ff4:	50040000 	.word	0x50040000
 8008ff8:	50040300 	.word	0x50040300

08008ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f003 0307 	and.w	r3, r3, #7
 800900a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800900c:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <__NVIC_SetPriorityGrouping+0x44>)
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009018:	4013      	ands	r3, r2
 800901a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800902c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800902e:	4a04      	ldr	r2, [pc, #16]	; (8009040 <__NVIC_SetPriorityGrouping+0x44>)
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	60d3      	str	r3, [r2, #12]
}
 8009034:	bf00      	nop
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	e000ed00 	.word	0xe000ed00

08009044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009048:	4b04      	ldr	r3, [pc, #16]	; (800905c <__NVIC_GetPriorityGrouping+0x18>)
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	0a1b      	lsrs	r3, r3, #8
 800904e:	f003 0307 	and.w	r3, r3, #7
}
 8009052:	4618      	mov	r0, r3
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	e000ed00 	.word	0xe000ed00

08009060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	4603      	mov	r3, r0
 8009068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800906a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800906e:	2b00      	cmp	r3, #0
 8009070:	db0b      	blt.n	800908a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009072:	79fb      	ldrb	r3, [r7, #7]
 8009074:	f003 021f 	and.w	r2, r3, #31
 8009078:	4907      	ldr	r1, [pc, #28]	; (8009098 <__NVIC_EnableIRQ+0x38>)
 800907a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800907e:	095b      	lsrs	r3, r3, #5
 8009080:	2001      	movs	r0, #1
 8009082:	fa00 f202 	lsl.w	r2, r0, r2
 8009086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800908a:	bf00      	nop
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	e000e100 	.word	0xe000e100

0800909c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	4603      	mov	r3, r0
 80090a4:	6039      	str	r1, [r7, #0]
 80090a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	db0a      	blt.n	80090c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	490c      	ldr	r1, [pc, #48]	; (80090e8 <__NVIC_SetPriority+0x4c>)
 80090b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090ba:	0112      	lsls	r2, r2, #4
 80090bc:	b2d2      	uxtb	r2, r2
 80090be:	440b      	add	r3, r1
 80090c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80090c4:	e00a      	b.n	80090dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	4908      	ldr	r1, [pc, #32]	; (80090ec <__NVIC_SetPriority+0x50>)
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	f003 030f 	and.w	r3, r3, #15
 80090d2:	3b04      	subs	r3, #4
 80090d4:	0112      	lsls	r2, r2, #4
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	440b      	add	r3, r1
 80090da:	761a      	strb	r2, [r3, #24]
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr
 80090e8:	e000e100 	.word	0xe000e100
 80090ec:	e000ed00 	.word	0xe000ed00

080090f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b089      	sub	sp, #36	; 0x24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f003 0307 	and.w	r3, r3, #7
 8009102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	f1c3 0307 	rsb	r3, r3, #7
 800910a:	2b04      	cmp	r3, #4
 800910c:	bf28      	it	cs
 800910e:	2304      	movcs	r3, #4
 8009110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	3304      	adds	r3, #4
 8009116:	2b06      	cmp	r3, #6
 8009118:	d902      	bls.n	8009120 <NVIC_EncodePriority+0x30>
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	3b03      	subs	r3, #3
 800911e:	e000      	b.n	8009122 <NVIC_EncodePriority+0x32>
 8009120:	2300      	movs	r3, #0
 8009122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009124:	f04f 32ff 	mov.w	r2, #4294967295
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	fa02 f303 	lsl.w	r3, r2, r3
 800912e:	43da      	mvns	r2, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	401a      	ands	r2, r3
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009138:	f04f 31ff 	mov.w	r1, #4294967295
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	fa01 f303 	lsl.w	r3, r1, r3
 8009142:	43d9      	mvns	r1, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009148:	4313      	orrs	r3, r2
         );
}
 800914a:	4618      	mov	r0, r3
 800914c:	3724      	adds	r7, #36	; 0x24
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
	...

08009158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3b01      	subs	r3, #1
 8009164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009168:	d301      	bcc.n	800916e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800916a:	2301      	movs	r3, #1
 800916c:	e00f      	b.n	800918e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800916e:	4a0a      	ldr	r2, [pc, #40]	; (8009198 <SysTick_Config+0x40>)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3b01      	subs	r3, #1
 8009174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009176:	210f      	movs	r1, #15
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	f7ff ff8e 	bl	800909c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009180:	4b05      	ldr	r3, [pc, #20]	; (8009198 <SysTick_Config+0x40>)
 8009182:	2200      	movs	r2, #0
 8009184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009186:	4b04      	ldr	r3, [pc, #16]	; (8009198 <SysTick_Config+0x40>)
 8009188:	2207      	movs	r2, #7
 800918a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	e000e010 	.word	0xe000e010

0800919c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff ff29 	bl	8008ffc <__NVIC_SetPriorityGrouping>
}
 80091aa:	bf00      	nop
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b086      	sub	sp, #24
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	4603      	mov	r3, r0
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	607a      	str	r2, [r7, #4]
 80091be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80091c0:	2300      	movs	r3, #0
 80091c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80091c4:	f7ff ff3e 	bl	8009044 <__NVIC_GetPriorityGrouping>
 80091c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	6978      	ldr	r0, [r7, #20]
 80091d0:	f7ff ff8e 	bl	80090f0 <NVIC_EncodePriority>
 80091d4:	4602      	mov	r2, r0
 80091d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091da:	4611      	mov	r1, r2
 80091dc:	4618      	mov	r0, r3
 80091de:	f7ff ff5d 	bl	800909c <__NVIC_SetPriority>
}
 80091e2:	bf00      	nop
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	4603      	mov	r3, r0
 80091f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80091f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff ff31 	bl	8009060 <__NVIC_EnableIRQ>
}
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7ff ffa2 	bl	8009158 <SysTick_Config>
 8009214:	4603      	mov	r3, r0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
	...

08009220 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e08d      	b.n	800934e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	4b47      	ldr	r3, [pc, #284]	; (8009358 <HAL_DMA_Init+0x138>)
 800923a:	429a      	cmp	r2, r3
 800923c:	d80f      	bhi.n	800925e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	4b45      	ldr	r3, [pc, #276]	; (800935c <HAL_DMA_Init+0x13c>)
 8009246:	4413      	add	r3, r2
 8009248:	4a45      	ldr	r2, [pc, #276]	; (8009360 <HAL_DMA_Init+0x140>)
 800924a:	fba2 2303 	umull	r2, r3, r2, r3
 800924e:	091b      	lsrs	r3, r3, #4
 8009250:	009a      	lsls	r2, r3, #2
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a42      	ldr	r2, [pc, #264]	; (8009364 <HAL_DMA_Init+0x144>)
 800925a:	641a      	str	r2, [r3, #64]	; 0x40
 800925c:	e00e      	b.n	800927c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	4b40      	ldr	r3, [pc, #256]	; (8009368 <HAL_DMA_Init+0x148>)
 8009266:	4413      	add	r3, r2
 8009268:	4a3d      	ldr	r2, [pc, #244]	; (8009360 <HAL_DMA_Init+0x140>)
 800926a:	fba2 2303 	umull	r2, r3, r2, r3
 800926e:	091b      	lsrs	r3, r3, #4
 8009270:	009a      	lsls	r2, r3, #2
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a3c      	ldr	r2, [pc, #240]	; (800936c <HAL_DMA_Init+0x14c>)
 800927a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009296:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80092a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f966 	bl	80095a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092dc:	d102      	bne.n	80092e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ec:	b2d2      	uxtb	r2, r2
 80092ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80092f8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d010      	beq.n	8009324 <HAL_DMA_Init+0x104>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2b04      	cmp	r3, #4
 8009308:	d80c      	bhi.n	8009324 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f986 	bl	800961c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009314:	2200      	movs	r2, #0
 8009316:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009320:	605a      	str	r2, [r3, #4]
 8009322:	e008      	b.n	8009336 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	40020407 	.word	0x40020407
 800935c:	bffdfff8 	.word	0xbffdfff8
 8009360:	cccccccd 	.word	0xcccccccd
 8009364:	40020000 	.word	0x40020000
 8009368:	bffdfbf8 	.word	0xbffdfbf8
 800936c:	40020400 	.word	0x40020400

08009370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
 800937c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009388:	2b01      	cmp	r3, #1
 800938a:	d101      	bne.n	8009390 <HAL_DMA_Start_IT+0x20>
 800938c:	2302      	movs	r3, #2
 800938e:	e066      	b.n	800945e <HAL_DMA_Start_IT+0xee>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d155      	bne.n	8009450 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2202      	movs	r2, #2
 80093a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f022 0201 	bic.w	r2, r2, #1
 80093c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	68b9      	ldr	r1, [r7, #8]
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f000 f8ab 	bl	8009524 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d008      	beq.n	80093e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f042 020e 	orr.w	r2, r2, #14
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	e00f      	b.n	8009408 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f022 0204 	bic.w	r2, r2, #4
 80093f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f042 020a 	orr.w	r2, r2, #10
 8009406:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009412:	2b00      	cmp	r3, #0
 8009414:	d007      	beq.n	8009426 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009424:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942a:	2b00      	cmp	r3, #0
 800942c:	d007      	beq.n	800943e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800943c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f042 0201 	orr.w	r2, r2, #1
 800944c:	601a      	str	r2, [r3, #0]
 800944e:	e005      	b.n	800945c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009458:	2302      	movs	r3, #2
 800945a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800945c:	7dfb      	ldrb	r3, [r7, #23]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b02      	cmp	r3, #2
 800947c:	d005      	beq.n	800948a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2204      	movs	r2, #4
 8009482:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	73fb      	strb	r3, [r7, #15]
 8009488:	e047      	b.n	800951a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f022 020e 	bic.w	r2, r2, #14
 8009498:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f022 0201 	bic.w	r2, r2, #1
 80094a8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094be:	f003 021c 	and.w	r2, r3, #28
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c6:	2101      	movs	r1, #1
 80094c8:	fa01 f202 	lsl.w	r2, r1, r2
 80094cc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80094d6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00c      	beq.n	80094fa <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80094f8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	4798      	blx	r3
    }
  }
  return status;
 800951a:	7bfb      	ldrb	r3, [r7, #15]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
 8009530:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800953a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009540:	2b00      	cmp	r3, #0
 8009542:	d004      	beq.n	800954e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800954c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009552:	f003 021c 	and.w	r2, r3, #28
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955a:	2101      	movs	r1, #1
 800955c:	fa01 f202 	lsl.w	r2, r1, r2
 8009560:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	2b10      	cmp	r3, #16
 8009570:	d108      	bne.n	8009584 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009582:	e007      	b.n	8009594 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	60da      	str	r2, [r3, #12]
}
 8009594:	bf00      	nop
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	461a      	mov	r2, r3
 80095ae:	4b17      	ldr	r3, [pc, #92]	; (800960c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d80a      	bhi.n	80095ca <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b8:	089b      	lsrs	r3, r3, #2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095c0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	6493      	str	r3, [r2, #72]	; 0x48
 80095c8:	e007      	b.n	80095da <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ce:	089b      	lsrs	r3, r3, #2
 80095d0:	009a      	lsls	r2, r3, #2
 80095d2:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80095d4:	4413      	add	r3, r2
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	3b08      	subs	r3, #8
 80095e2:	4a0c      	ldr	r2, [pc, #48]	; (8009614 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80095e4:	fba2 2303 	umull	r2, r3, r2, r3
 80095e8:	091b      	lsrs	r3, r3, #4
 80095ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a0a      	ldr	r2, [pc, #40]	; (8009618 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80095f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f003 031f 	and.w	r3, r3, #31
 80095f8:	2201      	movs	r2, #1
 80095fa:	409a      	lsls	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009600:	bf00      	nop
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	40020407 	.word	0x40020407
 8009610:	4002081c 	.word	0x4002081c
 8009614:	cccccccd 	.word	0xcccccccd
 8009618:	40020880 	.word	0x40020880

0800961c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	b2db      	uxtb	r3, r3
 800962a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	4b0b      	ldr	r3, [pc, #44]	; (800965c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	461a      	mov	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a08      	ldr	r2, [pc, #32]	; (8009660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800963e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3b01      	subs	r3, #1
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	2201      	movs	r2, #1
 800964a:	409a      	lsls	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009650:	bf00      	nop
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	1000823f 	.word	0x1000823f
 8009660:	40020940 	.word	0x40020940

08009664 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009664:	b480      	push	{r7}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	460b      	mov	r3, r1
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009676:	7afb      	ldrb	r3, [r7, #11]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d103      	bne.n	8009684 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	605a      	str	r2, [r3, #4]
      break;
 8009682:	e002      	b.n	800968a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	75fb      	strb	r3, [r7, #23]
      break;
 8009688:	bf00      	nop
  }

  return status;
 800968a:	7dfb      	ldrb	r3, [r7, #23]
}
 800968c:	4618      	mov	r0, r3
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e003      	b.n	80096b4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80096b2:	2300      	movs	r3, #0
  }
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	0c1b      	lsrs	r3, r3, #16
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	2201      	movs	r2, #1
 80096de:	fa02 f303 	lsl.w	r3, r2, r3
 80096e2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	4b0c      	ldr	r3, [pc, #48]	; (800971c <HAL_EXTI_IRQHandler+0x5c>)
 80096ea:	4413      	add	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	4013      	ands	r3, r2
 80096f6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	4798      	blx	r3
    }
  }
}
 8009712:	bf00      	nop
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	40010414 	.word	0x40010414

08009720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800972e:	e166      	b.n	80099fe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	2101      	movs	r1, #1
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	fa01 f303 	lsl.w	r3, r1, r3
 800973c:	4013      	ands	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 8158 	beq.w	80099f8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	2b02      	cmp	r3, #2
 800974e:	d003      	beq.n	8009758 <HAL_GPIO_Init+0x38>
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2b12      	cmp	r3, #18
 8009756:	d123      	bne.n	80097a0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	08da      	lsrs	r2, r3, #3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	3208      	adds	r2, #8
 8009760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009764:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	220f      	movs	r2, #15
 8009770:	fa02 f303 	lsl.w	r3, r2, r3
 8009774:	43db      	mvns	r3, r3
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	4013      	ands	r3, r2
 800977a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	691a      	ldr	r2, [r3, #16]
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	f003 0307 	and.w	r3, r3, #7
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	fa02 f303 	lsl.w	r3, r2, r3
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	4313      	orrs	r3, r2
 8009790:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	08da      	lsrs	r2, r3, #3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	3208      	adds	r2, #8
 800979a:	6939      	ldr	r1, [r7, #16]
 800979c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	2203      	movs	r2, #3
 80097ac:	fa02 f303 	lsl.w	r3, r2, r3
 80097b0:	43db      	mvns	r3, r3
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	4013      	ands	r3, r2
 80097b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	f003 0203 	and.w	r2, r3, #3
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	005b      	lsls	r3, r3, #1
 80097c4:	fa02 f303 	lsl.w	r3, r2, r3
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d00b      	beq.n	80097f4 <HAL_GPIO_Init+0xd4>
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d007      	beq.n	80097f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80097e8:	2b11      	cmp	r3, #17
 80097ea:	d003      	beq.n	80097f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	2b12      	cmp	r3, #18
 80097f2:	d130      	bne.n	8009856 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	2203      	movs	r2, #3
 8009800:	fa02 f303 	lsl.w	r3, r2, r3
 8009804:	43db      	mvns	r3, r3
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	4013      	ands	r3, r2
 800980a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	68da      	ldr	r2, [r3, #12]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	fa02 f303 	lsl.w	r3, r2, r3
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	4313      	orrs	r3, r2
 800981c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800982a:	2201      	movs	r2, #1
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	fa02 f303 	lsl.w	r3, r2, r3
 8009832:	43db      	mvns	r3, r3
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	4013      	ands	r3, r2
 8009838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	091b      	lsrs	r3, r3, #4
 8009840:	f003 0201 	and.w	r2, r3, #1
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	fa02 f303 	lsl.w	r3, r2, r3
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	4313      	orrs	r3, r2
 800984e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	2203      	movs	r2, #3
 8009862:	fa02 f303 	lsl.w	r3, r2, r3
 8009866:	43db      	mvns	r3, r3
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	4013      	ands	r3, r2
 800986c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	689a      	ldr	r2, [r3, #8]
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	fa02 f303 	lsl.w	r3, r2, r3
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	4313      	orrs	r3, r2
 800987e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 80b2 	beq.w	80099f8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009894:	4b61      	ldr	r3, [pc, #388]	; (8009a1c <HAL_GPIO_Init+0x2fc>)
 8009896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009898:	4a60      	ldr	r2, [pc, #384]	; (8009a1c <HAL_GPIO_Init+0x2fc>)
 800989a:	f043 0301 	orr.w	r3, r3, #1
 800989e:	6613      	str	r3, [r2, #96]	; 0x60
 80098a0:	4b5e      	ldr	r3, [pc, #376]	; (8009a1c <HAL_GPIO_Init+0x2fc>)
 80098a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098a4:	f003 0301 	and.w	r3, r3, #1
 80098a8:	60bb      	str	r3, [r7, #8]
 80098aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80098ac:	4a5c      	ldr	r2, [pc, #368]	; (8009a20 <HAL_GPIO_Init+0x300>)
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	089b      	lsrs	r3, r3, #2
 80098b2:	3302      	adds	r3, #2
 80098b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f003 0303 	and.w	r3, r3, #3
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	220f      	movs	r2, #15
 80098c4:	fa02 f303 	lsl.w	r3, r2, r3
 80098c8:	43db      	mvns	r3, r3
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	4013      	ands	r3, r2
 80098ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80098d6:	d02b      	beq.n	8009930 <HAL_GPIO_Init+0x210>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a52      	ldr	r2, [pc, #328]	; (8009a24 <HAL_GPIO_Init+0x304>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d025      	beq.n	800992c <HAL_GPIO_Init+0x20c>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a51      	ldr	r2, [pc, #324]	; (8009a28 <HAL_GPIO_Init+0x308>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d01f      	beq.n	8009928 <HAL_GPIO_Init+0x208>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a50      	ldr	r2, [pc, #320]	; (8009a2c <HAL_GPIO_Init+0x30c>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d019      	beq.n	8009924 <HAL_GPIO_Init+0x204>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a4f      	ldr	r2, [pc, #316]	; (8009a30 <HAL_GPIO_Init+0x310>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d013      	beq.n	8009920 <HAL_GPIO_Init+0x200>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a4e      	ldr	r2, [pc, #312]	; (8009a34 <HAL_GPIO_Init+0x314>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d00d      	beq.n	800991c <HAL_GPIO_Init+0x1fc>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a4d      	ldr	r2, [pc, #308]	; (8009a38 <HAL_GPIO_Init+0x318>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d007      	beq.n	8009918 <HAL_GPIO_Init+0x1f8>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a4c      	ldr	r2, [pc, #304]	; (8009a3c <HAL_GPIO_Init+0x31c>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d101      	bne.n	8009914 <HAL_GPIO_Init+0x1f4>
 8009910:	2307      	movs	r3, #7
 8009912:	e00e      	b.n	8009932 <HAL_GPIO_Init+0x212>
 8009914:	2308      	movs	r3, #8
 8009916:	e00c      	b.n	8009932 <HAL_GPIO_Init+0x212>
 8009918:	2306      	movs	r3, #6
 800991a:	e00a      	b.n	8009932 <HAL_GPIO_Init+0x212>
 800991c:	2305      	movs	r3, #5
 800991e:	e008      	b.n	8009932 <HAL_GPIO_Init+0x212>
 8009920:	2304      	movs	r3, #4
 8009922:	e006      	b.n	8009932 <HAL_GPIO_Init+0x212>
 8009924:	2303      	movs	r3, #3
 8009926:	e004      	b.n	8009932 <HAL_GPIO_Init+0x212>
 8009928:	2302      	movs	r3, #2
 800992a:	e002      	b.n	8009932 <HAL_GPIO_Init+0x212>
 800992c:	2301      	movs	r3, #1
 800992e:	e000      	b.n	8009932 <HAL_GPIO_Init+0x212>
 8009930:	2300      	movs	r3, #0
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	f002 0203 	and.w	r2, r2, #3
 8009938:	0092      	lsls	r2, r2, #2
 800993a:	4093      	lsls	r3, r2
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	4313      	orrs	r3, r2
 8009940:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009942:	4937      	ldr	r1, [pc, #220]	; (8009a20 <HAL_GPIO_Init+0x300>)
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	089b      	lsrs	r3, r3, #2
 8009948:	3302      	adds	r3, #2
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009950:	4b3b      	ldr	r3, [pc, #236]	; (8009a40 <HAL_GPIO_Init+0x320>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	43db      	mvns	r3, r3
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	4013      	ands	r3, r2
 800995e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	4313      	orrs	r3, r2
 8009972:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009974:	4a32      	ldr	r2, [pc, #200]	; (8009a40 <HAL_GPIO_Init+0x320>)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800997a:	4b31      	ldr	r3, [pc, #196]	; (8009a40 <HAL_GPIO_Init+0x320>)
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	43db      	mvns	r3, r3
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	4013      	ands	r3, r2
 8009988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8009996:	693a      	ldr	r2, [r7, #16]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4313      	orrs	r3, r2
 800999c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800999e:	4a28      	ldr	r2, [pc, #160]	; (8009a40 <HAL_GPIO_Init+0x320>)
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80099a4:	4b26      	ldr	r3, [pc, #152]	; (8009a40 <HAL_GPIO_Init+0x320>)
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	43db      	mvns	r3, r3
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	4013      	ands	r3, r2
 80099b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80099c8:	4a1d      	ldr	r2, [pc, #116]	; (8009a40 <HAL_GPIO_Init+0x320>)
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80099ce:	4b1c      	ldr	r3, [pc, #112]	; (8009a40 <HAL_GPIO_Init+0x320>)
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	43db      	mvns	r3, r3
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	4013      	ands	r3, r2
 80099dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80099f2:	4a13      	ldr	r2, [pc, #76]	; (8009a40 <HAL_GPIO_Init+0x320>)
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	3301      	adds	r3, #1
 80099fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	fa22 f303 	lsr.w	r3, r2, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f47f ae91 	bne.w	8009730 <HAL_GPIO_Init+0x10>
  }
}
 8009a0e:	bf00      	nop
 8009a10:	bf00      	nop
 8009a12:	371c      	adds	r7, #28
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	40021000 	.word	0x40021000
 8009a20:	40010000 	.word	0x40010000
 8009a24:	48000400 	.word	0x48000400
 8009a28:	48000800 	.word	0x48000800
 8009a2c:	48000c00 	.word	0x48000c00
 8009a30:	48001000 	.word	0x48001000
 8009a34:	48001400 	.word	0x48001400
 8009a38:	48001800 	.word	0x48001800
 8009a3c:	48001c00 	.word	0x48001c00
 8009a40:	40010400 	.word	0x40010400

08009a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	691a      	ldr	r2, [r3, #16]
 8009a54:	887b      	ldrh	r3, [r7, #2]
 8009a56:	4013      	ands	r3, r2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	73fb      	strb	r3, [r7, #15]
 8009a60:	e001      	b.n	8009a66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009a62:	2300      	movs	r3, #0
 8009a64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	807b      	strh	r3, [r7, #2]
 8009a80:	4613      	mov	r3, r2
 8009a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009a84:	787b      	ldrb	r3, [r7, #1]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009a8a:	887a      	ldrh	r2, [r7, #2]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009a90:	e002      	b.n	8009a98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009a92:	887a      	ldrh	r2, [r7, #2]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	460b      	mov	r3, r1
 8009aae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	695a      	ldr	r2, [r3, #20]
 8009ab4:	887b      	ldrh	r3, [r7, #2]
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d003      	beq.n	8009ac4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009abc:	887a      	ldrh	r2, [r7, #2]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8009ac2:	e002      	b.n	8009aca <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009ac4:	887a      	ldrh	r2, [r7, #2]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	619a      	str	r2, [r3, #24]
}
 8009aca:	bf00      	nop
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
	...

08009ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009ae2:	4b08      	ldr	r3, [pc, #32]	; (8009b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009ae4:	695a      	ldr	r2, [r3, #20]
 8009ae6:	88fb      	ldrh	r3, [r7, #6]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d006      	beq.n	8009afc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009aee:	4a05      	ldr	r2, [pc, #20]	; (8009b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009af0:	88fb      	ldrh	r3, [r7, #6]
 8009af2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009af4:	88fb      	ldrh	r3, [r7, #6]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fb fbbe 	bl	8005278 <HAL_GPIO_EXTI_Callback>
  }
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	40010400 	.word	0x40010400

08009b08 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08a      	sub	sp, #40	; 0x28
 8009b0c:	af02      	add	r7, sp, #8
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	4608      	mov	r0, r1
 8009b12:	4611      	mov	r1, r2
 8009b14:	461a      	mov	r2, r3
 8009b16:	4603      	mov	r3, r0
 8009b18:	817b      	strh	r3, [r7, #10]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	813b      	strh	r3, [r7, #8]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	f040 80d5 	bne.w	8009cda <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <HAL_I2C_Mem_Write_DMA+0x34>
 8009b36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d105      	bne.n	8009b48 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e0c9      	b.n	8009cdc <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b56:	d101      	bne.n	8009b5c <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8009b58:	2302      	movs	r3, #2
 8009b5a:	e0bf      	b.n	8009cdc <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d101      	bne.n	8009b6a <HAL_I2C_Mem_Write_DMA+0x62>
 8009b66:	2302      	movs	r3, #2
 8009b68:	e0b8      	b.n	8009cdc <HAL_I2C_Mem_Write_DMA+0x1d4>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009b72:	f7fd ff53 	bl	8007a1c <HAL_GetTick>
 8009b76:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2221      	movs	r2, #33	; 0x21
 8009b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2240      	movs	r2, #64	; 0x40
 8009b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009b98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	4a51      	ldr	r2, [pc, #324]	; (8009ce4 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8009b9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	4a51      	ldr	r2, [pc, #324]	; (8009ce8 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8009ba4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	2bff      	cmp	r3, #255	; 0xff
 8009bae:	d906      	bls.n	8009bbe <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	22ff      	movs	r2, #255	; 0xff
 8009bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009bb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bba:	61fb      	str	r3, [r7, #28]
 8009bbc:	e007      	b.n	8009bce <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bcc:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8009bce:	88f8      	ldrh	r0, [r7, #6]
 8009bd0:	893a      	ldrh	r2, [r7, #8]
 8009bd2:	8979      	ldrh	r1, [r7, #10]
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	2319      	movs	r3, #25
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	4603      	mov	r3, r0
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f000 fcba 	bl	800a558 <I2C_RequestMemoryWrite>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d005      	beq.n	8009bf6 <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e072      	b.n	8009cdc <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d020      	beq.n	8009c40 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c02:	4a3a      	ldr	r2, [pc, #232]	; (8009cec <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8009c04:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	4a39      	ldr	r2, [pc, #228]	; (8009cf0 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8009c0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c12:	2200      	movs	r2, #0
 8009c14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3328      	adds	r3, #40	; 0x28
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c30:	f7ff fb9e 	bl	8009370 <HAL_DMA_Start_IT>
 8009c34:	4603      	mov	r3, r0
 8009c36:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d139      	bne.n	8009cb2 <HAL_I2C_Mem_Write_DMA+0x1aa>
 8009c3e:	e013      	b.n	8009c68 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2220      	movs	r2, #32
 8009c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e039      	b.n	8009cdc <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	8979      	ldrh	r1, [r7, #10]
 8009c70:	2300      	movs	r3, #0
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f001 fa86 	bl	800b188 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009c96:	2111      	movs	r1, #17
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f001 faa3 	bl	800b1e4 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cac:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e014      	b.n	8009cdc <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2220      	movs	r2, #32
 8009cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc6:	f043 0210 	orr.w	r2, r3, #16
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e000      	b.n	8009cdc <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8009cda:	2302      	movs	r3, #2
  }
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3720      	adds	r7, #32
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	ffff0000 	.word	0xffff0000
 8009ce8:	0800a1e1 	.word	0x0800a1e1
 8009cec:	0800ae15 	.word	0x0800ae15
 8009cf0:	0800af41 	.word	0x0800af41

08009cf4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b08a      	sub	sp, #40	; 0x28
 8009cf8:	af02      	add	r7, sp, #8
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	4608      	mov	r0, r1
 8009cfe:	4611      	mov	r1, r2
 8009d00:	461a      	mov	r2, r3
 8009d02:	4603      	mov	r3, r0
 8009d04:	817b      	strh	r3, [r7, #10]
 8009d06:	460b      	mov	r3, r1
 8009d08:	813b      	strh	r3, [r7, #8]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b20      	cmp	r3, #32
 8009d18:	f040 80d5 	bne.w	8009ec6 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <HAL_I2C_Mem_Read_DMA+0x34>
 8009d22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d105      	bne.n	8009d34 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e0c9      	b.n	8009ec8 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d42:	d101      	bne.n	8009d48 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8009d44:	2302      	movs	r3, #2
 8009d46:	e0bf      	b.n	8009ec8 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d101      	bne.n	8009d56 <HAL_I2C_Mem_Read_DMA+0x62>
 8009d52:	2302      	movs	r3, #2
 8009d54:	e0b8      	b.n	8009ec8 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009d5e:	f7fd fe5d 	bl	8007a1c <HAL_GetTick>
 8009d62:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2222      	movs	r2, #34	; 0x22
 8009d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2240      	movs	r2, #64	; 0x40
 8009d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009d84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	4a51      	ldr	r2, [pc, #324]	; (8009ed0 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8009d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4a51      	ldr	r2, [pc, #324]	; (8009ed4 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8009d90:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	2bff      	cmp	r3, #255	; 0xff
 8009d9a:	d906      	bls.n	8009daa <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	22ff      	movs	r2, #255	; 0xff
 8009da0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009da2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009da6:	61fb      	str	r3, [r7, #28]
 8009da8:	e007      	b.n	8009dba <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009db4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009db8:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8009dba:	88f8      	ldrh	r0, [r7, #6]
 8009dbc:	893a      	ldrh	r2, [r7, #8]
 8009dbe:	8979      	ldrh	r1, [r7, #10]
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	9301      	str	r3, [sp, #4]
 8009dc4:	2319      	movs	r3, #25
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	4603      	mov	r3, r0
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f000 fc18 	bl	800a600 <I2C_RequestMemoryRead>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d005      	beq.n	8009de2 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e072      	b.n	8009ec8 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d020      	beq.n	8009e2c <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dee:	4a3a      	ldr	r2, [pc, #232]	; (8009ed8 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8009df0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df6:	4a39      	ldr	r2, [pc, #228]	; (8009edc <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8009df8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dfe:	2200      	movs	r2, #0
 8009e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e06:	2200      	movs	r2, #0
 8009e08:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3324      	adds	r3, #36	; 0x24
 8009e14:	4619      	mov	r1, r3
 8009e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e1c:	f7ff faa8 	bl	8009370 <HAL_DMA_Start_IT>
 8009e20:	4603      	mov	r3, r0
 8009e22:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d139      	bne.n	8009e9e <HAL_I2C_Mem_Read_DMA+0x1aa>
 8009e2a:	e013      	b.n	8009e54 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2220      	movs	r2, #32
 8009e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	e039      	b.n	8009ec8 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	8979      	ldrh	r1, [r7, #10]
 8009e5c:	4b20      	ldr	r3, [pc, #128]	; (8009ee0 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f001 f990 	bl	800b188 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009e82:	2111      	movs	r1, #17
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f001 f9ad 	bl	800b1e4 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e98:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	e014      	b.n	8009ec8 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2220      	movs	r2, #32
 8009ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb2:	f043 0210 	orr.w	r2, r3, #16
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e000      	b.n	8009ec8 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8009ec6:	2302      	movs	r3, #2
  }
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3720      	adds	r7, #32
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	ffff0000 	.word	0xffff0000
 8009ed4:	0800a1e1 	.word	0x0800a1e1
 8009ed8:	0800aeab 	.word	0x0800aeab
 8009edc:	0800af41 	.word	0x0800af41
 8009ee0:	80002400 	.word	0x80002400

08009ee4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d005      	beq.n	8009f10 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	68f9      	ldr	r1, [r7, #12]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	4798      	blx	r3
  }
}
 8009f10:	bf00      	nop
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	0a1b      	lsrs	r3, r3, #8
 8009f34:	f003 0301 	and.w	r3, r3, #1
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d010      	beq.n	8009f5e <HAL_I2C_ER_IRQHandler+0x46>
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	09db      	lsrs	r3, r3, #7
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00a      	beq.n	8009f5e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f4c:	f043 0201 	orr.w	r2, r3, #1
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f5c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	0a9b      	lsrs	r3, r3, #10
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d010      	beq.n	8009f8c <HAL_I2C_ER_IRQHandler+0x74>
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	09db      	lsrs	r3, r3, #7
 8009f6e:	f003 0301 	and.w	r3, r3, #1
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00a      	beq.n	8009f8c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f7a:	f043 0208 	orr.w	r2, r3, #8
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f8a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	0a5b      	lsrs	r3, r3, #9
 8009f90:	f003 0301 	and.w	r3, r3, #1
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d010      	beq.n	8009fba <HAL_I2C_ER_IRQHandler+0xa2>
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	09db      	lsrs	r3, r3, #7
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00a      	beq.n	8009fba <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa8:	f043 0202 	orr.w	r2, r3, #2
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fb8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f003 030b 	and.w	r3, r3, #11
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d003      	beq.n	8009fd2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8009fca:	68f9      	ldr	r1, [r7, #12]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fe3b 	bl	800ac48 <I2C_ITError>
  }
}
 8009fd2:	bf00      	nop
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b086      	sub	sp, #24
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fea:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d101      	bne.n	8009ffe <I2C_Slave_ISR_IT+0x24>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	e0ec      	b.n	800a1d8 <I2C_Slave_ISR_IT+0x1fe>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	095b      	lsrs	r3, r3, #5
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d009      	beq.n	800a026 <I2C_Slave_ISR_IT+0x4c>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	095b      	lsrs	r3, r3, #5
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a01e:	6939      	ldr	r1, [r7, #16]
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 fce1 	bl	800a9e8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	091b      	lsrs	r3, r3, #4
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d04d      	beq.n	800a0ce <I2C_Slave_ISR_IT+0xf4>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	091b      	lsrs	r3, r3, #4
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d047      	beq.n	800a0ce <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a042:	b29b      	uxth	r3, r3
 800a044:	2b00      	cmp	r3, #0
 800a046:	d128      	bne.n	800a09a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b28      	cmp	r3, #40	; 0x28
 800a052:	d108      	bne.n	800a066 <I2C_Slave_ISR_IT+0x8c>
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a05a:	d104      	bne.n	800a066 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a05c:	6939      	ldr	r1, [r7, #16]
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 fd9c 	bl	800ab9c <I2C_ITListenCplt>
 800a064:	e032      	b.n	800a0cc <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b29      	cmp	r3, #41	; 0x29
 800a070:	d10e      	bne.n	800a090 <I2C_Slave_ISR_IT+0xb6>
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a078:	d00a      	beq.n	800a090 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2210      	movs	r2, #16
 800a080:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 fea2 	bl	800adcc <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 fbce 	bl	800a82a <I2C_ITSlaveSeqCplt>
 800a08e:	e01d      	b.n	800a0cc <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2210      	movs	r2, #16
 800a096:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a098:	e096      	b.n	800a1c8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2210      	movs	r2, #16
 800a0a0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a6:	f043 0204 	orr.w	r2, r3, #4
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d004      	beq.n	800a0be <I2C_Slave_ISR_IT+0xe4>
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0ba:	f040 8085 	bne.w	800a1c8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 fdbf 	bl	800ac48 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a0ca:	e07d      	b.n	800a1c8 <I2C_Slave_ISR_IT+0x1ee>
 800a0cc:	e07c      	b.n	800a1c8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	089b      	lsrs	r3, r3, #2
 800a0d2:	f003 0301 	and.w	r3, r3, #1
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d030      	beq.n	800a13c <I2C_Slave_ISR_IT+0x162>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	089b      	lsrs	r3, r3, #2
 800a0de:	f003 0301 	and.w	r3, r3, #1
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d02a      	beq.n	800a13c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d018      	beq.n	800a122 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fa:	b2d2      	uxtb	r2, r2
 800a0fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a10c:	3b01      	subs	r3, #1
 800a10e:	b29a      	uxth	r2, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a118:	b29b      	uxth	r3, r3
 800a11a:	3b01      	subs	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a126:	b29b      	uxth	r3, r3
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d14f      	bne.n	800a1cc <I2C_Slave_ISR_IT+0x1f2>
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a132:	d04b      	beq.n	800a1cc <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f000 fb78 	bl	800a82a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a13a:	e047      	b.n	800a1cc <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	08db      	lsrs	r3, r3, #3
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00a      	beq.n	800a15e <I2C_Slave_ISR_IT+0x184>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	08db      	lsrs	r3, r3, #3
 800a14c:	f003 0301 	and.w	r3, r3, #1
 800a150:	2b00      	cmp	r3, #0
 800a152:	d004      	beq.n	800a15e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a154:	6939      	ldr	r1, [r7, #16]
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f000 faa6 	bl	800a6a8 <I2C_ITAddrCplt>
 800a15c:	e037      	b.n	800a1ce <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	085b      	lsrs	r3, r3, #1
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	d031      	beq.n	800a1ce <I2C_Slave_ISR_IT+0x1f4>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	085b      	lsrs	r3, r3, #1
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b00      	cmp	r3, #0
 800a174:	d02b      	beq.n	800a1ce <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d018      	beq.n	800a1b2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a184:	781a      	ldrb	r2, [r3, #0]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	3b01      	subs	r3, #1
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	851a      	strh	r2, [r3, #40]	; 0x28
 800a1b0:	e00d      	b.n	800a1ce <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1b8:	d002      	beq.n	800a1c0 <I2C_Slave_ISR_IT+0x1e6>
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d106      	bne.n	800a1ce <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f000 fb32 	bl	800a82a <I2C_ITSlaveSeqCplt>
 800a1c6:	e002      	b.n	800a1ce <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800a1c8:	bf00      	nop
 800a1ca:	e000      	b.n	800a1ce <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800a1cc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3718      	adds	r7, #24
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b088      	sub	sp, #32
 800a1e4:	af02      	add	r7, sp, #8
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d101      	bne.n	800a1fa <I2C_Master_ISR_DMA+0x1a>
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	e0e1      	b.n	800a3be <I2C_Master_ISR_DMA+0x1de>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	091b      	lsrs	r3, r3, #4
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d017      	beq.n	800a23e <I2C_Master_ISR_DMA+0x5e>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	091b      	lsrs	r3, r3, #4
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	2b00      	cmp	r3, #0
 800a218:	d011      	beq.n	800a23e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2210      	movs	r2, #16
 800a220:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a226:	f043 0204 	orr.w	r2, r3, #4
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a22e:	2112      	movs	r1, #18
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f000 ffd7 	bl	800b1e4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f000 fdc8 	bl	800adcc <I2C_Flush_TXDR>
 800a23c:	e0ba      	b.n	800a3b4 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	09db      	lsrs	r3, r3, #7
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	2b00      	cmp	r3, #0
 800a248:	d072      	beq.n	800a330 <I2C_Master_ISR_DMA+0x150>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	099b      	lsrs	r3, r3, #6
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	d06c      	beq.n	800a330 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a264:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d04e      	beq.n	800a30e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	b29b      	uxth	r3, r3
 800a278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a27c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a282:	b29b      	uxth	r3, r3
 800a284:	2bff      	cmp	r3, #255	; 0xff
 800a286:	d906      	bls.n	800a296 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	22ff      	movs	r2, #255	; 0xff
 800a28c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800a28e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a292:	617b      	str	r3, [r7, #20]
 800a294:	e010      	b.n	800a2b8 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a2a8:	d003      	beq.n	800a2b2 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	617b      	str	r3, [r7, #20]
 800a2b0:	e002      	b.n	800a2b8 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800a2b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2b6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	8a79      	ldrh	r1, [r7, #18]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f000 ff5e 	bl	800b188 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b22      	cmp	r3, #34	; 0x22
 800a2e8:	d108      	bne.n	800a2fc <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a2fa:	e05b      	b.n	800a3b4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a30a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a30c:	e052      	b.n	800a3b4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a318:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a31c:	d003      	beq.n	800a326 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f000 fa44 	bl	800a7ac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800a324:	e046      	b.n	800a3b4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a326:	2140      	movs	r1, #64	; 0x40
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 fc8d 	bl	800ac48 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a32e:	e041      	b.n	800a3b4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	099b      	lsrs	r3, r3, #6
 800a334:	f003 0301 	and.w	r3, r3, #1
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d029      	beq.n	800a390 <I2C_Master_ISR_DMA+0x1b0>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	099b      	lsrs	r3, r3, #6
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	d023      	beq.n	800a390 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d119      	bne.n	800a386 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a35c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a360:	d027      	beq.n	800a3b2 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a366:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a36a:	d108      	bne.n	800a37e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a37a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800a37c:	e019      	b.n	800a3b2 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 fa14 	bl	800a7ac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800a384:	e015      	b.n	800a3b2 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a386:	2140      	movs	r1, #64	; 0x40
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 fc5d 	bl	800ac48 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a38e:	e010      	b.n	800a3b2 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	095b      	lsrs	r3, r3, #5
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00b      	beq.n	800a3b4 <I2C_Master_ISR_DMA+0x1d4>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	095b      	lsrs	r3, r3, #5
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d005      	beq.n	800a3b4 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a3a8:	68b9      	ldr	r1, [r7, #8]
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 fa7c 	bl	800a8a8 <I2C_ITMasterCplt>
 800a3b0:	e000      	b.n	800a3b4 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800a3b2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b086      	sub	sp, #24
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d6:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d101      	bne.n	800a3ea <I2C_Slave_ISR_DMA+0x24>
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	e0b1      	b.n	800a54e <I2C_Slave_ISR_DMA+0x188>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	095b      	lsrs	r3, r3, #5
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d009      	beq.n	800a412 <I2C_Slave_ISR_DMA+0x4c>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	095b      	lsrs	r3, r3, #5
 800a402:	f003 0301 	and.w	r3, r3, #1
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800a40a:	68b9      	ldr	r1, [r7, #8]
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f000 faeb 	bl	800a9e8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	091b      	lsrs	r3, r3, #4
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f000 8082 	beq.w	800a524 <I2C_Slave_ISR_DMA+0x15e>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	091b      	lsrs	r3, r3, #4
 800a424:	f003 0301 	and.w	r3, r3, #1
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d07b      	beq.n	800a524 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	0b9b      	lsrs	r3, r3, #14
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d105      	bne.n	800a444 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	0bdb      	lsrs	r3, r3, #15
 800a43c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a440:	2b00      	cmp	r3, #0
 800a442:	d068      	beq.n	800a516 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00d      	beq.n	800a468 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	0bdb      	lsrs	r3, r3, #15
 800a450:	f003 0301 	and.w	r3, r3, #1
 800a454:	2b00      	cmp	r3, #0
 800a456:	d007      	beq.n	800a468 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 800a464:	2301      	movs	r3, #1
 800a466:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00d      	beq.n	800a48c <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	0b9b      	lsrs	r3, r3, #14
 800a474:	f003 0301 	and.w	r3, r3, #1
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d007      	beq.n	800a48c <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d101      	bne.n	800a48c <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 800a488:	2301      	movs	r3, #1
 800a48a:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d128      	bne.n	800a4e4 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b28      	cmp	r3, #40	; 0x28
 800a49c:	d108      	bne.n	800a4b0 <I2C_Slave_ISR_DMA+0xea>
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4a4:	d104      	bne.n	800a4b0 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 fb77 	bl	800ab9c <I2C_ITListenCplt>
 800a4ae:	e031      	b.n	800a514 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	2b29      	cmp	r3, #41	; 0x29
 800a4ba:	d10e      	bne.n	800a4da <I2C_Slave_ISR_DMA+0x114>
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a4c2:	d00a      	beq.n	800a4da <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2210      	movs	r2, #16
 800a4ca:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 fc7d 	bl	800adcc <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 f9a9 	bl	800a82a <I2C_ITSlaveSeqCplt>
 800a4d8:	e01c      	b.n	800a514 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2210      	movs	r2, #16
 800a4e0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800a4e2:	e01d      	b.n	800a520 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2210      	movs	r2, #16
 800a4ea:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f0:	f043 0204 	orr.w	r2, r3, #4
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d003      	beq.n	800a506 <I2C_Slave_ISR_DMA+0x140>
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a504:	d10c      	bne.n	800a520 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a50a:	4619      	mov	r1, r3
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f000 fb9b 	bl	800ac48 <I2C_ITError>
      if (treatdmanack == 1U)
 800a512:	e005      	b.n	800a520 <I2C_Slave_ISR_DMA+0x15a>
 800a514:	e004      	b.n	800a520 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2210      	movs	r2, #16
 800a51c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a51e:	e011      	b.n	800a544 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 800a520:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a522:	e00f      	b.n	800a544 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	08db      	lsrs	r3, r3, #3
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d009      	beq.n	800a544 <I2C_Slave_ISR_DMA+0x17e>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	08db      	lsrs	r3, r3, #3
 800a534:	f003 0301 	and.w	r3, r3, #1
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800a53c:	68b9      	ldr	r1, [r7, #8]
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f000 f8b2 	bl	800a6a8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
	...

0800a558 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af02      	add	r7, sp, #8
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	4608      	mov	r0, r1
 800a562:	4611      	mov	r1, r2
 800a564:	461a      	mov	r2, r3
 800a566:	4603      	mov	r3, r0
 800a568:	817b      	strh	r3, [r7, #10]
 800a56a:	460b      	mov	r3, r1
 800a56c:	813b      	strh	r3, [r7, #8]
 800a56e:	4613      	mov	r3, r2
 800a570:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a572:	88fb      	ldrh	r3, [r7, #6]
 800a574:	b2da      	uxtb	r2, r3
 800a576:	8979      	ldrh	r1, [r7, #10]
 800a578:	4b20      	ldr	r3, [pc, #128]	; (800a5fc <I2C_RequestMemoryWrite+0xa4>)
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f000 fe01 	bl	800b188 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a586:	69fa      	ldr	r2, [r7, #28]
 800a588:	69b9      	ldr	r1, [r7, #24]
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 fd55 	bl	800b03a <I2C_WaitOnTXISFlagUntilTimeout>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e02c      	b.n	800a5f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a59a:	88fb      	ldrh	r3, [r7, #6]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d105      	bne.n	800a5ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5a0:	893b      	ldrh	r3, [r7, #8]
 800a5a2:	b2da      	uxtb	r2, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	629a      	str	r2, [r3, #40]	; 0x28
 800a5aa:	e015      	b.n	800a5d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a5ac:	893b      	ldrh	r3, [r7, #8]
 800a5ae:	0a1b      	lsrs	r3, r3, #8
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5ba:	69fa      	ldr	r2, [r7, #28]
 800a5bc:	69b9      	ldr	r1, [r7, #24]
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 fd3b 	bl	800b03a <I2C_WaitOnTXISFlagUntilTimeout>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e012      	b.n	800a5f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5ce:	893b      	ldrh	r3, [r7, #8]
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	2180      	movs	r1, #128	; 0x80
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f000 fce9 	bl	800afba <I2C_WaitOnFlagUntilTimeout>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e000      	b.n	800a5f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	80002000 	.word	0x80002000

0800a600 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af02      	add	r7, sp, #8
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	4608      	mov	r0, r1
 800a60a:	4611      	mov	r1, r2
 800a60c:	461a      	mov	r2, r3
 800a60e:	4603      	mov	r3, r0
 800a610:	817b      	strh	r3, [r7, #10]
 800a612:	460b      	mov	r3, r1
 800a614:	813b      	strh	r3, [r7, #8]
 800a616:	4613      	mov	r3, r2
 800a618:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a61a:	88fb      	ldrh	r3, [r7, #6]
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	8979      	ldrh	r1, [r7, #10]
 800a620:	4b20      	ldr	r3, [pc, #128]	; (800a6a4 <I2C_RequestMemoryRead+0xa4>)
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	2300      	movs	r3, #0
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f000 fdae 	bl	800b188 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a62c:	69fa      	ldr	r2, [r7, #28]
 800a62e:	69b9      	ldr	r1, [r7, #24]
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f000 fd02 	bl	800b03a <I2C_WaitOnTXISFlagUntilTimeout>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e02c      	b.n	800a69a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a640:	88fb      	ldrh	r3, [r7, #6]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d105      	bne.n	800a652 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a646:	893b      	ldrh	r3, [r7, #8]
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	629a      	str	r2, [r3, #40]	; 0x28
 800a650:	e015      	b.n	800a67e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a652:	893b      	ldrh	r3, [r7, #8]
 800a654:	0a1b      	lsrs	r3, r3, #8
 800a656:	b29b      	uxth	r3, r3
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a660:	69fa      	ldr	r2, [r7, #28]
 800a662:	69b9      	ldr	r1, [r7, #24]
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f000 fce8 	bl	800b03a <I2C_WaitOnTXISFlagUntilTimeout>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e012      	b.n	800a69a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a674:	893b      	ldrh	r3, [r7, #8]
 800a676:	b2da      	uxtb	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	2200      	movs	r2, #0
 800a686:	2140      	movs	r1, #64	; 0x40
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 fc96 	bl	800afba <I2C_WaitOnFlagUntilTimeout>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e000      	b.n	800a69a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	80002000 	.word	0x80002000

0800a6a8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a6be:	2b28      	cmp	r3, #40	; 0x28
 800a6c0:	d168      	bne.n	800a794 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	0c1b      	lsrs	r3, r3, #16
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	0c1b      	lsrs	r3, r3, #16
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a6e0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6ee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a6fc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	2b02      	cmp	r3, #2
 800a704:	d137      	bne.n	800a776 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800a706:	897b      	ldrh	r3, [r7, #10]
 800a708:	09db      	lsrs	r3, r3, #7
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	89bb      	ldrh	r3, [r7, #12]
 800a70e:	4053      	eors	r3, r2
 800a710:	b29b      	uxth	r3, r3
 800a712:	f003 0306 	and.w	r3, r3, #6
 800a716:	2b00      	cmp	r3, #0
 800a718:	d11c      	bne.n	800a754 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a71a:	897b      	ldrh	r3, [r7, #10]
 800a71c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d139      	bne.n	800a7a4 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2208      	movs	r2, #8
 800a73c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a74a:	89ba      	ldrh	r2, [r7, #12]
 800a74c:	7bf9      	ldrb	r1, [r7, #15]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a752:	e027      	b.n	800a7a4 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800a754:	893b      	ldrh	r3, [r7, #8]
 800a756:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a758:	2104      	movs	r1, #4
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fdb0 	bl	800b2c0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a76c:	89ba      	ldrh	r2, [r7, #12]
 800a76e:	7bf9      	ldrb	r1, [r7, #15]
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	4798      	blx	r3
}
 800a774:	e016      	b.n	800a7a4 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a776:	2104      	movs	r1, #4
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fda1 	bl	800b2c0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a78a:	89ba      	ldrh	r2, [r7, #12]
 800a78c:	7bf9      	ldrb	r1, [r7, #15]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	4798      	blx	r3
}
 800a792:	e007      	b.n	800a7a4 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2208      	movs	r2, #8
 800a79a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a7a4:	bf00      	nop
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b21      	cmp	r3, #33	; 0x21
 800a7c6:	d116      	bne.n	800a7f6 <I2C_ITMasterSeqCplt+0x4a>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2211      	movs	r2, #17
 800a7d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a7dc:	2101      	movs	r1, #1
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fd6e 	bl	800b2c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a7f4:	e015      	b.n	800a822 <I2C_ITMasterSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2220      	movs	r2, #32
 800a7fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2212      	movs	r2, #18
 800a802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a80a:	2102      	movs	r1, #2
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fd57 	bl	800b2c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->MasterRxCpltCallback(hi2c);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	4798      	blx	r3
}
 800a822:	bf00      	nop
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b082      	sub	sp, #8
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b29      	cmp	r3, #41	; 0x29
 800a844:	d113      	bne.n	800a86e <I2C_ITSlaveSeqCplt+0x44>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2228      	movs	r2, #40	; 0x28
 800a84a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2221      	movs	r2, #33	; 0x21
 800a852:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a854:	2101      	movs	r1, #1
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fd32 	bl	800b2c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 800a86c:	e018      	b.n	800a8a0 <I2C_ITSlaveSeqCplt+0x76>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b2a      	cmp	r3, #42	; 0x2a
 800a878:	d112      	bne.n	800a8a0 <I2C_ITSlaveSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2228      	movs	r2, #40	; 0x28
 800a87e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2222      	movs	r2, #34	; 0x22
 800a886:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a888:	2102      	movs	r1, #2
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fd18 	bl	800b2c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	4798      	blx	r3
}
 800a8a0:	bf00      	nop
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2220      	movs	r2, #32
 800a8b8:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6859      	ldr	r1, [r3, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	4b46      	ldr	r3, [pc, #280]	; (800a9e0 <I2C_ITMasterCplt+0x138>)
 800a8c6:	400b      	ands	r3, r1
 800a8c8:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a42      	ldr	r2, [pc, #264]	; (800a9e4 <I2C_ITMasterCplt+0x13c>)
 800a8da:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	091b      	lsrs	r3, r3, #4
 800a8e0:	f003 0301 	and.w	r3, r3, #1
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d009      	beq.n	800a8fc <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2210      	movs	r2, #16
 800a8ee:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f4:	f043 0204 	orr.w	r2, r3, #4
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fa65 	bl	800adcc <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a902:	2103      	movs	r1, #3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 fcdb 	bl	800b2c0 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b60      	cmp	r3, #96	; 0x60
 800a91a:	d002      	beq.n	800a922 <I2C_ITMasterCplt+0x7a>
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d006      	beq.n	800a930 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f98d 	bl	800ac48 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a92e:	e052      	b.n	800a9d6 <I2C_ITMasterCplt+0x12e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b21      	cmp	r3, #33	; 0x21
 800a93a:	d123      	bne.n	800a984 <I2C_ITMasterCplt+0xdc>
    hi2c->State = HAL_I2C_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2220      	movs	r2, #32
 800a940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b40      	cmp	r3, #64	; 0x40
 800a94e:	d10c      	bne.n	800a96a <I2C_ITMasterCplt+0xc2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemTxCpltCallback(hi2c);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	4798      	blx	r3
}
 800a968:	e035      	b.n	800a9d6 <I2C_ITMasterCplt+0x12e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterTxCpltCallback(hi2c);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	4798      	blx	r3
}
 800a982:	e028      	b.n	800a9d6 <I2C_ITMasterCplt+0x12e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	2b22      	cmp	r3, #34	; 0x22
 800a98e:	d122      	bne.n	800a9d6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2220      	movs	r2, #32
 800a994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b40      	cmp	r3, #64	; 0x40
 800a9a2:	d10c      	bne.n	800a9be <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MemRxCpltCallback(hi2c);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	4798      	blx	r3
}
 800a9bc:	e00b      	b.n	800a9d6 <I2C_ITMasterCplt+0x12e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->MasterRxCpltCallback(hi2c);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	4798      	blx	r3
}
 800a9d6:	bf00      	nop
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	fe00e800 	.word	0xfe00e800
 800a9e4:	ffff0000 	.word	0xffff0000

0800a9e8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2220      	movs	r2, #32
 800aa04:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800aa06:	2107      	movs	r1, #7
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fc59 	bl	800b2c0 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	685a      	ldr	r2, [r3, #4]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa1c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	6859      	ldr	r1, [r3, #4]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	4b5a      	ldr	r3, [pc, #360]	; (800ab94 <I2C_ITSlaveCplt+0x1ac>)
 800aa2a:	400b      	ands	r3, r1
 800aa2c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f9cc 	bl	800adcc <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	0b9b      	lsrs	r3, r3, #14
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d018      	beq.n	800aa7a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa56:	e010      	b.n	800aa7a <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	0bdb      	lsrs	r3, r3, #15
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00a      	beq.n	800aa7a <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d006      	beq.n	800aa7a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	089b      	lsrs	r3, r3, #2
 800aa7e:	f003 0301 	and.w	r3, r3, #1
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d020      	beq.n	800aac8 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f023 0304 	bic.w	r3, r3, #4
 800aa8c:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa98:	b2d2      	uxtb	r2, r2
 800aa9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00c      	beq.n	800aac8 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aab2:	3b01      	subs	r3, #1
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	3b01      	subs	r3, #1
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aacc:	b29b      	uxth	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d005      	beq.n	800aade <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad6:	f043 0204 	orr.w	r2, r3, #4
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d010      	beq.n	800ab1c <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f8a1 	bl	800ac48 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b28      	cmp	r3, #40	; 0x28
 800ab10:	d13b      	bne.n	800ab8a <I2C_ITSlaveCplt+0x1a2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ab12:	68f9      	ldr	r1, [r7, #12]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f841 	bl	800ab9c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ab1a:	e036      	b.n	800ab8a <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ab24:	d012      	beq.n	800ab4c <I2C_ITSlaveCplt+0x164>
    I2C_ITSlaveSeqCplt(hi2c);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff fe7f 	bl	800a82a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a1a      	ldr	r2, [pc, #104]	; (800ab98 <I2C_ITSlaveCplt+0x1b0>)
 800ab30:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	4798      	blx	r3
}
 800ab4a:	e01e      	b.n	800ab8a <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b22      	cmp	r3, #34	; 0x22
 800ab56:	d10c      	bne.n	800ab72 <I2C_ITSlaveCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	4798      	blx	r3
}
 800ab70:	e00b      	b.n	800ab8a <I2C_ITSlaveCplt+0x1a2>
    hi2c->State = HAL_I2C_STATE_READY;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2220      	movs	r2, #32
 800ab76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	4798      	blx	r3
}
 800ab8a:	bf00      	nop
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	fe00e800 	.word	0xfe00e800
 800ab98:	ffff0000 	.word	0xffff0000

0800ab9c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a26      	ldr	r2, [pc, #152]	; (800ac44 <I2C_ITListenCplt+0xa8>)
 800abaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2220      	movs	r2, #32
 800abb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	089b      	lsrs	r3, r3, #2
 800abcc:	f003 0301 	and.w	r3, r3, #1
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d022      	beq.n	800ac1a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abde:	b2d2      	uxtb	r2, r2
 800abe0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	1c5a      	adds	r2, r3, #1
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d012      	beq.n	800ac1a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abf8:	3b01      	subs	r3, #1
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	3b01      	subs	r3, #1
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac12:	f043 0204 	orr.w	r2, r3, #4
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ac1a:	2107      	movs	r1, #7
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fb4f 	bl	800b2c0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2210      	movs	r2, #16
 800ac28:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ac3a:	bf00      	nop
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	ffff0000 	.word	0xffff0000

0800ac48 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac58:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a56      	ldr	r2, [pc, #344]	; (800adc0 <I2C_ITError+0x178>)
 800ac66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	431a      	orrs	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
 800ac7c:	2b28      	cmp	r3, #40	; 0x28
 800ac7e:	d005      	beq.n	800ac8c <I2C_ITError+0x44>
 800ac80:	7bfb      	ldrb	r3, [r7, #15]
 800ac82:	2b29      	cmp	r3, #41	; 0x29
 800ac84:	d002      	beq.n	800ac8c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	2b2a      	cmp	r3, #42	; 0x2a
 800ac8a:	d10e      	bne.n	800acaa <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ac8c:	2103      	movs	r1, #3
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fb16 	bl	800b2c0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2228      	movs	r2, #40	; 0x28
 800ac98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a47      	ldr	r2, [pc, #284]	; (800adc4 <I2C_ITError+0x17c>)
 800aca6:	635a      	str	r2, [r3, #52]	; 0x34
 800aca8:	e013      	b.n	800acd2 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800acaa:	2107      	movs	r1, #7
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fb07 	bl	800b2c0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	2b60      	cmp	r3, #96	; 0x60
 800acbc:	d003      	beq.n	800acc6 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2220      	movs	r2, #32
 800acc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ace0:	d123      	bne.n	800ad2a <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800acf0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d05e      	beq.n	800adb8 <I2C_ITError+0x170>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfe:	4a32      	ldr	r2, [pc, #200]	; (800adc8 <I2C_ITError+0x180>)
 800ad00:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fe fba9 	bl	8009466 <HAL_DMA_Abort_IT>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d04e      	beq.n	800adb8 <I2C_ITError+0x170>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ad24:	4610      	mov	r0, r2
 800ad26:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ad28:	e046      	b.n	800adb8 <I2C_ITError+0x170>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad38:	d123      	bne.n	800ad82 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad48:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d032      	beq.n	800adb8 <I2C_ITError+0x170>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad56:	4a1c      	ldr	r2, [pc, #112]	; (800adc8 <I2C_ITError+0x180>)
 800ad58:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe fb7d 	bl	8009466 <HAL_DMA_Abort_IT>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d022      	beq.n	800adb8 <I2C_ITError+0x170>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4798      	blx	r3
}
 800ad80:	e01a      	b.n	800adb8 <I2C_ITError+0x170>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b60      	cmp	r3, #96	; 0x60
 800ad8c:	d10c      	bne.n	800ada8 <I2C_ITError+0x160>
    hi2c->State = HAL_I2C_STATE_READY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2220      	movs	r2, #32
 800ad92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->AbortCpltCallback(hi2c);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	4798      	blx	r3
}
 800ada6:	e007      	b.n	800adb8 <I2C_ITError+0x170>
    __HAL_UNLOCK(hi2c);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	4798      	blx	r3
}
 800adb8:	bf00      	nop
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	ffff0000 	.word	0xffff0000
 800adc4:	08009fdb 	.word	0x08009fdb
 800adc8:	0800af6f 	.word	0x0800af6f

0800adcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	f003 0302 	and.w	r3, r3, #2
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d103      	bne.n	800adea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2200      	movs	r2, #0
 800ade8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d007      	beq.n	800ae08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	699a      	ldr	r2, [r3, #24]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f042 0201 	orr.w	r2, r2, #1
 800ae06:	619a      	str	r2, [r3, #24]
  }
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae20:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ae30:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d104      	bne.n	800ae46 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ae3c:	2112      	movs	r1, #18
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f000 f9d0 	bl	800b1e4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ae44:	e02d      	b.n	800aea2 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ae4e:	441a      	add	r2, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	2bff      	cmp	r3, #255	; 0xff
 800ae5c:	d903      	bls.n	800ae66 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	22ff      	movs	r2, #255	; 0xff
 800ae62:	851a      	strh	r2, [r3, #40]	; 0x28
 800ae64:	e004      	b.n	800ae70 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae78:	4619      	mov	r1, r3
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	3328      	adds	r3, #40	; 0x28
 800ae80:	461a      	mov	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae86:	f7fe fa73 	bl	8009370 <HAL_DMA_Start_IT>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d004      	beq.n	800ae9a <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ae90:	2110      	movs	r1, #16
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f7ff fed8 	bl	800ac48 <I2C_ITError>
}
 800ae98:	e003      	b.n	800aea2 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ae9a:	2112      	movs	r1, #18
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f000 f9a1 	bl	800b1e4 <I2C_Enable_IRQ>
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b084      	sub	sp, #16
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aec6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aecc:	b29b      	uxth	r3, r3
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d104      	bne.n	800aedc <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800aed2:	2112      	movs	r1, #18
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f000 f985 	bl	800b1e4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800aeda:	e02d      	b.n	800af38 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800aee4:	441a      	add	r2, r3
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	2bff      	cmp	r3, #255	; 0xff
 800aef2:	d903      	bls.n	800aefc <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	22ff      	movs	r2, #255	; 0xff
 800aef8:	851a      	strh	r2, [r3, #40]	; 0x28
 800aefa:	e004      	b.n	800af06 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af00:	b29a      	uxth	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3324      	adds	r3, #36	; 0x24
 800af10:	4619      	mov	r1, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af16:	461a      	mov	r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af1c:	f7fe fa28 	bl	8009370 <HAL_DMA_Start_IT>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d004      	beq.n	800af30 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800af26:	2110      	movs	r1, #16
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f7ff fe8d 	bl	800ac48 <I2C_ITError>
}
 800af2e:	e003      	b.n	800af38 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800af30:	2112      	movs	r1, #18
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f000 f956 	bl	800b1e4 <I2C_Enable_IRQ>
}
 800af38:	bf00      	nop
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	685a      	ldr	r2, [r3, #4]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af5c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800af5e:	2110      	movs	r1, #16
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f7ff fe71 	bl	800ac48 <I2C_ITError>
}
 800af66:	bf00      	nop
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b084      	sub	sp, #16
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af80:	2200      	movs	r2, #0
 800af82:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af88:	2200      	movs	r2, #0
 800af8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b60      	cmp	r3, #96	; 0x60
 800af96:	d108      	bne.n	800afaa <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2220      	movs	r2, #32
 800af9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800afa8:	e003      	b.n	800afb2 <I2C_DMAAbort+0x44>
    hi2c->ErrorCallback(hi2c);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	4798      	blx	r3
}
 800afb2:	bf00      	nop
 800afb4:	3710      	adds	r7, #16
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b084      	sub	sp, #16
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	60f8      	str	r0, [r7, #12]
 800afc2:	60b9      	str	r1, [r7, #8]
 800afc4:	603b      	str	r3, [r7, #0]
 800afc6:	4613      	mov	r3, r2
 800afc8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afca:	e022      	b.n	800b012 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd2:	d01e      	beq.n	800b012 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afd4:	f7fc fd22 	bl	8007a1c <HAL_GetTick>
 800afd8:	4602      	mov	r2, r0
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d302      	bcc.n	800afea <I2C_WaitOnFlagUntilTimeout+0x30>
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d113      	bne.n	800b012 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afee:	f043 0220 	orr.w	r2, r3, #32
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2220      	movs	r2, #32
 800affa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	e00f      	b.n	800b032 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	699a      	ldr	r2, [r3, #24]
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	4013      	ands	r3, r2
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	429a      	cmp	r2, r3
 800b020:	bf0c      	ite	eq
 800b022:	2301      	moveq	r3, #1
 800b024:	2300      	movne	r3, #0
 800b026:	b2db      	uxtb	r3, r3
 800b028:	461a      	mov	r2, r3
 800b02a:	79fb      	ldrb	r3, [r7, #7]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d0cd      	beq.n	800afcc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b084      	sub	sp, #16
 800b03e:	af00      	add	r7, sp, #0
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	60b9      	str	r1, [r7, #8]
 800b044:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b046:	e02c      	b.n	800b0a2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	68b9      	ldr	r1, [r7, #8]
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f000 f835 	bl	800b0bc <I2C_IsAcknowledgeFailed>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e02a      	b.n	800b0b2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b062:	d01e      	beq.n	800b0a2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b064:	f7fc fcda 	bl	8007a1c <HAL_GetTick>
 800b068:	4602      	mov	r2, r0
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	429a      	cmp	r2, r3
 800b072:	d302      	bcc.n	800b07a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d113      	bne.n	800b0a2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07e:	f043 0220 	orr.w	r2, r3, #32
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2220      	movs	r2, #32
 800b08a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e007      	b.n	800b0b2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	f003 0302 	and.w	r3, r3, #2
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d1cb      	bne.n	800b048 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
	...

0800b0bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	f003 0310 	and.w	r3, r3, #16
 800b0d2:	2b10      	cmp	r3, #16
 800b0d4:	d151      	bne.n	800b17a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0d6:	e022      	b.n	800b11e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0de:	d01e      	beq.n	800b11e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0e0:	f7fc fc9c 	bl	8007a1c <HAL_GetTick>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d302      	bcc.n	800b0f6 <I2C_IsAcknowledgeFailed+0x3a>
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d113      	bne.n	800b11e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0fa:	f043 0220 	orr.w	r2, r3, #32
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2220      	movs	r2, #32
 800b106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e02e      	b.n	800b17c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	f003 0320 	and.w	r3, r3, #32
 800b128:	2b20      	cmp	r3, #32
 800b12a:	d1d5      	bne.n	800b0d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2210      	movs	r2, #16
 800b132:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2220      	movs	r2, #32
 800b13a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f7ff fe45 	bl	800adcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	6859      	ldr	r1, [r3, #4]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	4b0d      	ldr	r3, [pc, #52]	; (800b184 <I2C_IsAcknowledgeFailed+0xc8>)
 800b14e:	400b      	ands	r3, r1
 800b150:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b156:	f043 0204 	orr.w	r2, r3, #4
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2220      	movs	r2, #32
 800b162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	e000      	b.n	800b17c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	fe00e800 	.word	0xfe00e800

0800b188 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	607b      	str	r3, [r7, #4]
 800b192:	460b      	mov	r3, r1
 800b194:	817b      	strh	r3, [r7, #10]
 800b196:	4613      	mov	r3, r2
 800b198:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	0d5b      	lsrs	r3, r3, #21
 800b1a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b1a8:	4b0d      	ldr	r3, [pc, #52]	; (800b1e0 <I2C_TransferConfig+0x58>)
 800b1aa:	430b      	orrs	r3, r1
 800b1ac:	43db      	mvns	r3, r3
 800b1ae:	ea02 0103 	and.w	r1, r2, r3
 800b1b2:	897b      	ldrh	r3, [r7, #10]
 800b1b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b1b8:	7a7b      	ldrb	r3, [r7, #9]
 800b1ba:	041b      	lsls	r3, r3, #16
 800b1bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	431a      	orrs	r2, r3
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	431a      	orrs	r2, r3
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b1d2:	bf00      	nop
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	03ff63ff 	.word	0x03ff63ff

0800b1e4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f8:	4a2f      	ldr	r2, [pc, #188]	; (800b2b8 <I2C_Enable_IRQ+0xd4>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d004      	beq.n	800b208 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b202:	4a2e      	ldr	r2, [pc, #184]	; (800b2bc <I2C_Enable_IRQ+0xd8>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d124      	bne.n	800b252 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b208:	887b      	ldrh	r3, [r7, #2]
 800b20a:	f003 0304 	and.w	r3, r3, #4
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b218:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800b21a:	887b      	ldrh	r3, [r7, #2]
 800b21c:	f003 0311 	and.w	r3, r3, #17
 800b220:	2b11      	cmp	r3, #17
 800b222:	d103      	bne.n	800b22c <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b22a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800b22c:	887b      	ldrh	r3, [r7, #2]
 800b22e:	f003 0312 	and.w	r3, r3, #18
 800b232:	2b12      	cmp	r3, #18
 800b234:	d103      	bne.n	800b23e <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f043 0320 	orr.w	r3, r3, #32
 800b23c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800b23e:	887b      	ldrh	r3, [r7, #2]
 800b240:	f003 0312 	and.w	r3, r3, #18
 800b244:	2b12      	cmp	r3, #18
 800b246:	d128      	bne.n	800b29a <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b24e:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800b250:	e023      	b.n	800b29a <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b252:	887b      	ldrh	r3, [r7, #2]
 800b254:	f003 0304 	and.w	r3, r3, #4
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d003      	beq.n	800b264 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b262:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b264:	887b      	ldrh	r3, [r7, #2]
 800b266:	f003 0301 	and.w	r3, r3, #1
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d003      	beq.n	800b276 <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b274:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b276:	887b      	ldrh	r3, [r7, #2]
 800b278:	f003 0302 	and.w	r3, r3, #2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d003      	beq.n	800b288 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b286:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800b288:	887b      	ldrh	r3, [r7, #2]
 800b28a:	f003 0312 	and.w	r3, r3, #18
 800b28e:	2b12      	cmp	r3, #18
 800b290:	d103      	bne.n	800b29a <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f043 0320 	orr.w	r3, r3, #32
 800b298:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	6819      	ldr	r1, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	601a      	str	r2, [r3, #0]
}
 800b2aa:	bf00      	nop
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	0800a1e1 	.word	0x0800a1e1
 800b2bc:	0800a3c7 	.word	0x0800a3c7

0800b2c0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b2d0:	887b      	ldrh	r3, [r7, #2]
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00f      	beq.n	800b2fa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b2e0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b2ee:	2b28      	cmp	r3, #40	; 0x28
 800b2f0:	d003      	beq.n	800b2fa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b2f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b2fa:	887b      	ldrh	r3, [r7, #2]
 800b2fc:	f003 0302 	and.w	r3, r3, #2
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00f      	beq.n	800b324 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b30a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b312:	b2db      	uxtb	r3, r3
 800b314:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b318:	2b28      	cmp	r3, #40	; 0x28
 800b31a:	d003      	beq.n	800b324 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b322:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b324:	887b      	ldrh	r3, [r7, #2]
 800b326:	f003 0304 	and.w	r3, r3, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b334:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800b336:	887b      	ldrh	r3, [r7, #2]
 800b338:	f003 0311 	and.w	r3, r3, #17
 800b33c:	2b11      	cmp	r3, #17
 800b33e:	d103      	bne.n	800b348 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b346:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800b348:	887b      	ldrh	r3, [r7, #2]
 800b34a:	f003 0312 	and.w	r3, r3, #18
 800b34e:	2b12      	cmp	r3, #18
 800b350:	d103      	bne.n	800b35a <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f043 0320 	orr.w	r3, r3, #32
 800b358:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800b35a:	887b      	ldrh	r3, [r7, #2]
 800b35c:	f003 0312 	and.w	r3, r3, #18
 800b360:	2b12      	cmp	r3, #18
 800b362:	d103      	bne.n	800b36c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b36a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	6819      	ldr	r1, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	43da      	mvns	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	400a      	ands	r2, r1
 800b37c:	601a      	str	r2, [r3, #0]
}
 800b37e:	bf00      	nop
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b38a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b38c:	b08f      	sub	sp, #60	; 0x3c
 800b38e:	af0a      	add	r7, sp, #40	; 0x28
 800b390:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d101      	bne.n	800b39c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	e116      	b.n	800b5ca <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d106      	bne.n	800b3bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7fa fc7e 	bl	8005cb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2203      	movs	r2, #3
 800b3c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d102      	bne.n	800b3d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f006 fc09 	bl	8011bf2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	603b      	str	r3, [r7, #0]
 800b3e6:	687e      	ldr	r6, [r7, #4]
 800b3e8:	466d      	mov	r5, sp
 800b3ea:	f106 0410 	add.w	r4, r6, #16
 800b3ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b3f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b3f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b3fa:	e885 0003 	stmia.w	r5, {r0, r1}
 800b3fe:	1d33      	adds	r3, r6, #4
 800b400:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b402:	6838      	ldr	r0, [r7, #0]
 800b404:	f006 faf6 	bl	80119f4 <USB_CoreInit>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d005      	beq.n	800b41a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2202      	movs	r2, #2
 800b412:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	e0d7      	b.n	800b5ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2100      	movs	r1, #0
 800b420:	4618      	mov	r0, r3
 800b422:	f006 fbf7 	bl	8011c14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b426:	2300      	movs	r3, #0
 800b428:	73fb      	strb	r3, [r7, #15]
 800b42a:	e04a      	b.n	800b4c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b42c:	7bfa      	ldrb	r2, [r7, #15]
 800b42e:	6879      	ldr	r1, [r7, #4]
 800b430:	4613      	mov	r3, r2
 800b432:	00db      	lsls	r3, r3, #3
 800b434:	1a9b      	subs	r3, r3, r2
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	440b      	add	r3, r1
 800b43a:	333d      	adds	r3, #61	; 0x3d
 800b43c:	2201      	movs	r2, #1
 800b43e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b440:	7bfa      	ldrb	r2, [r7, #15]
 800b442:	6879      	ldr	r1, [r7, #4]
 800b444:	4613      	mov	r3, r2
 800b446:	00db      	lsls	r3, r3, #3
 800b448:	1a9b      	subs	r3, r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	440b      	add	r3, r1
 800b44e:	333c      	adds	r3, #60	; 0x3c
 800b450:	7bfa      	ldrb	r2, [r7, #15]
 800b452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b454:	7bfa      	ldrb	r2, [r7, #15]
 800b456:	7bfb      	ldrb	r3, [r7, #15]
 800b458:	b298      	uxth	r0, r3
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	4613      	mov	r3, r2
 800b45e:	00db      	lsls	r3, r3, #3
 800b460:	1a9b      	subs	r3, r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	440b      	add	r3, r1
 800b466:	3342      	adds	r3, #66	; 0x42
 800b468:	4602      	mov	r2, r0
 800b46a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b46c:	7bfa      	ldrb	r2, [r7, #15]
 800b46e:	6879      	ldr	r1, [r7, #4]
 800b470:	4613      	mov	r3, r2
 800b472:	00db      	lsls	r3, r3, #3
 800b474:	1a9b      	subs	r3, r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	440b      	add	r3, r1
 800b47a:	333f      	adds	r3, #63	; 0x3f
 800b47c:	2200      	movs	r2, #0
 800b47e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b480:	7bfa      	ldrb	r2, [r7, #15]
 800b482:	6879      	ldr	r1, [r7, #4]
 800b484:	4613      	mov	r3, r2
 800b486:	00db      	lsls	r3, r3, #3
 800b488:	1a9b      	subs	r3, r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	440b      	add	r3, r1
 800b48e:	3344      	adds	r3, #68	; 0x44
 800b490:	2200      	movs	r2, #0
 800b492:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b494:	7bfa      	ldrb	r2, [r7, #15]
 800b496:	6879      	ldr	r1, [r7, #4]
 800b498:	4613      	mov	r3, r2
 800b49a:	00db      	lsls	r3, r3, #3
 800b49c:	1a9b      	subs	r3, r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	440b      	add	r3, r1
 800b4a2:	3348      	adds	r3, #72	; 0x48
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b4a8:	7bfa      	ldrb	r2, [r7, #15]
 800b4aa:	6879      	ldr	r1, [r7, #4]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	00db      	lsls	r3, r3, #3
 800b4b0:	1a9b      	subs	r3, r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	440b      	add	r3, r1
 800b4b6:	3350      	adds	r3, #80	; 0x50
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	73fb      	strb	r3, [r7, #15]
 800b4c2:	7bfa      	ldrb	r2, [r7, #15]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d3af      	bcc.n	800b42c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	73fb      	strb	r3, [r7, #15]
 800b4d0:	e044      	b.n	800b55c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b4d2:	7bfa      	ldrb	r2, [r7, #15]
 800b4d4:	6879      	ldr	r1, [r7, #4]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	00db      	lsls	r3, r3, #3
 800b4da:	1a9b      	subs	r3, r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	440b      	add	r3, r1
 800b4e0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b4e8:	7bfa      	ldrb	r2, [r7, #15]
 800b4ea:	6879      	ldr	r1, [r7, #4]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	1a9b      	subs	r3, r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	440b      	add	r3, r1
 800b4f6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b4fa:	7bfa      	ldrb	r2, [r7, #15]
 800b4fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b4fe:	7bfa      	ldrb	r2, [r7, #15]
 800b500:	6879      	ldr	r1, [r7, #4]
 800b502:	4613      	mov	r3, r2
 800b504:	00db      	lsls	r3, r3, #3
 800b506:	1a9b      	subs	r3, r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	440b      	add	r3, r1
 800b50c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b510:	2200      	movs	r2, #0
 800b512:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b514:	7bfa      	ldrb	r2, [r7, #15]
 800b516:	6879      	ldr	r1, [r7, #4]
 800b518:	4613      	mov	r3, r2
 800b51a:	00db      	lsls	r3, r3, #3
 800b51c:	1a9b      	subs	r3, r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	440b      	add	r3, r1
 800b522:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b526:	2200      	movs	r2, #0
 800b528:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b52a:	7bfa      	ldrb	r2, [r7, #15]
 800b52c:	6879      	ldr	r1, [r7, #4]
 800b52e:	4613      	mov	r3, r2
 800b530:	00db      	lsls	r3, r3, #3
 800b532:	1a9b      	subs	r3, r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	440b      	add	r3, r1
 800b538:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b53c:	2200      	movs	r2, #0
 800b53e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b540:	7bfa      	ldrb	r2, [r7, #15]
 800b542:	6879      	ldr	r1, [r7, #4]
 800b544:	4613      	mov	r3, r2
 800b546:	00db      	lsls	r3, r3, #3
 800b548:	1a9b      	subs	r3, r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	440b      	add	r3, r1
 800b54e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b552:	2200      	movs	r2, #0
 800b554:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	3301      	adds	r3, #1
 800b55a:	73fb      	strb	r3, [r7, #15]
 800b55c:	7bfa      	ldrb	r2, [r7, #15]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	429a      	cmp	r2, r3
 800b564:	d3b5      	bcc.n	800b4d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	603b      	str	r3, [r7, #0]
 800b56c:	687e      	ldr	r6, [r7, #4]
 800b56e:	466d      	mov	r5, sp
 800b570:	f106 0410 	add.w	r4, r6, #16
 800b574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b57a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b57c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b580:	e885 0003 	stmia.w	r5, {r0, r1}
 800b584:	1d33      	adds	r3, r6, #4
 800b586:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b588:	6838      	ldr	r0, [r7, #0]
 800b58a:	f006 fb6d 	bl	8011c68 <USB_DevInit>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d005      	beq.n	800b5a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2202      	movs	r2, #2
 800b598:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	e014      	b.n	800b5ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d102      	bne.n	800b5be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 ff61 	bl	800c480 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f007 fae6 	bl	8012b94 <USB_DevDisconnect>

  return HAL_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3714      	adds	r7, #20
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b084      	sub	sp, #16
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d101      	bne.n	800b5ee <HAL_PCD_Start+0x1c>
 800b5ea:	2302      	movs	r3, #2
 800b5ec:	e01c      	b.n	800b628 <HAL_PCD_Start+0x56>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d105      	bne.n	800b60a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b602:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4618      	mov	r0, r3
 800b610:	f007 faa8 	bl	8012b64 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4618      	mov	r0, r3
 800b61a:	f006 fad9 	bl	8011bd0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b630:	b590      	push	{r4, r7, lr}
 800b632:	b08d      	sub	sp, #52	; 0x34
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4618      	mov	r0, r3
 800b648:	f007 fb4f 	bl	8012cea <USB_GetMode>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f040 838f 	bne.w	800bd72 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4618      	mov	r0, r3
 800b65a:	f007 fab3 	bl	8012bc4 <USB_ReadInterrupts>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 8385 	beq.w	800bd70 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f007 faaa 	bl	8012bc4 <USB_ReadInterrupts>
 800b670:	4603      	mov	r3, r0
 800b672:	f003 0302 	and.w	r3, r3, #2
 800b676:	2b02      	cmp	r3, #2
 800b678:	d107      	bne.n	800b68a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	695a      	ldr	r2, [r3, #20]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f002 0202 	and.w	r2, r2, #2
 800b688:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4618      	mov	r0, r3
 800b690:	f007 fa98 	bl	8012bc4 <USB_ReadInterrupts>
 800b694:	4603      	mov	r3, r0
 800b696:	f003 0310 	and.w	r3, r3, #16
 800b69a:	2b10      	cmp	r3, #16
 800b69c:	d161      	bne.n	800b762 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	699a      	ldr	r2, [r3, #24]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f022 0210 	bic.w	r2, r2, #16
 800b6ac:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800b6ae:	6a3b      	ldr	r3, [r7, #32]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	f003 020f 	and.w	r2, r3, #15
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	00db      	lsls	r3, r3, #3
 800b6be:	1a9b      	subs	r3, r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	0c5b      	lsrs	r3, r3, #17
 800b6d2:	f003 030f 	and.w	r3, r3, #15
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d124      	bne.n	800b724 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b6da:	69ba      	ldr	r2, [r7, #24]
 800b6dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d035      	beq.n	800b752 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	091b      	lsrs	r3, r3, #4
 800b6ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b6f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	6a38      	ldr	r0, [r7, #32]
 800b6fa:	f007 f910 	bl	801291e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	68da      	ldr	r2, [r3, #12]
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	091b      	lsrs	r3, r3, #4
 800b706:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b70a:	441a      	add	r2, r3
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	699a      	ldr	r2, [r3, #24]
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	091b      	lsrs	r3, r3, #4
 800b718:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b71c:	441a      	add	r2, r3
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	619a      	str	r2, [r3, #24]
 800b722:	e016      	b.n	800b752 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	0c5b      	lsrs	r3, r3, #17
 800b728:	f003 030f 	and.w	r3, r3, #15
 800b72c:	2b06      	cmp	r3, #6
 800b72e:	d110      	bne.n	800b752 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b736:	2208      	movs	r2, #8
 800b738:	4619      	mov	r1, r3
 800b73a:	6a38      	ldr	r0, [r7, #32]
 800b73c:	f007 f8ef 	bl	801291e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	699a      	ldr	r2, [r3, #24]
 800b744:	69bb      	ldr	r3, [r7, #24]
 800b746:	091b      	lsrs	r3, r3, #4
 800b748:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b74c:	441a      	add	r2, r3
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	699a      	ldr	r2, [r3, #24]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f042 0210 	orr.w	r2, r2, #16
 800b760:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4618      	mov	r0, r3
 800b768:	f007 fa2c 	bl	8012bc4 <USB_ReadInterrupts>
 800b76c:	4603      	mov	r3, r0
 800b76e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b772:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b776:	d16e      	bne.n	800b856 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b778:	2300      	movs	r3, #0
 800b77a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4618      	mov	r0, r3
 800b782:	f007 fa32 	bl	8012bea <USB_ReadDevAllOutEpInterrupt>
 800b786:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b788:	e062      	b.n	800b850 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78c:	f003 0301 	and.w	r3, r3, #1
 800b790:	2b00      	cmp	r3, #0
 800b792:	d057      	beq.n	800b844 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b79a:	b2d2      	uxtb	r2, r2
 800b79c:	4611      	mov	r1, r2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f007 fa57 	bl	8012c52 <USB_ReadDevOutEPInterrupt>
 800b7a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00c      	beq.n	800b7ca <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	015a      	lsls	r2, r3, #5
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7bc:	461a      	mov	r2, r3
 800b7be:	2301      	movs	r3, #1
 800b7c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b7c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fd81 	bl	800c2cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	f003 0308 	and.w	r3, r3, #8
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00c      	beq.n	800b7ee <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	2308      	movs	r3, #8
 800b7e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b7e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fdbd 	bl	800c368 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f003 0310 	and.w	r3, r3, #16
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d008      	beq.n	800b80a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fa:	015a      	lsls	r2, r3, #5
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	4413      	add	r3, r2
 800b800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b804:	461a      	mov	r2, r3
 800b806:	2310      	movs	r3, #16
 800b808:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	f003 0320 	and.w	r3, r3, #32
 800b810:	2b00      	cmp	r3, #0
 800b812:	d008      	beq.n	800b826 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	015a      	lsls	r2, r3, #5
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	4413      	add	r3, r2
 800b81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b820:	461a      	mov	r2, r3
 800b822:	2320      	movs	r3, #32
 800b824:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d009      	beq.n	800b844 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	015a      	lsls	r2, r3, #5
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	4413      	add	r3, r2
 800b838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b83c:	461a      	mov	r2, r3
 800b83e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b842:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	3301      	adds	r3, #1
 800b848:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84c:	085b      	lsrs	r3, r3, #1
 800b84e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	2b00      	cmp	r3, #0
 800b854:	d199      	bne.n	800b78a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f007 f9b2 	bl	8012bc4 <USB_ReadInterrupts>
 800b860:	4603      	mov	r3, r0
 800b862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b866:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b86a:	f040 8087 	bne.w	800b97c <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4618      	mov	r0, r3
 800b874:	f007 f9d3 	bl	8012c1e <USB_ReadDevAllInEpInterrupt>
 800b878:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b87a:	2300      	movs	r3, #0
 800b87c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b87e:	e07a      	b.n	800b976 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	d06f      	beq.n	800b96a <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b890:	b2d2      	uxtb	r2, r2
 800b892:	4611      	mov	r1, r2
 800b894:	4618      	mov	r0, r3
 800b896:	f007 f9fa 	bl	8012c8e <USB_ReadDevInEPInterrupt>
 800b89a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	f003 0301 	and.w	r3, r3, #1
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d020      	beq.n	800b8e8 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	f003 030f 	and.w	r3, r3, #15
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	43db      	mvns	r3, r3
 800b8c0:	69f9      	ldr	r1, [r7, #28]
 800b8c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	015a      	lsls	r2, r3, #5
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	2301      	movs	r3, #1
 800b8da:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f7fa fa51 	bl	8005d8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	f003 0308 	and.w	r3, r3, #8
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d008      	beq.n	800b904 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f4:	015a      	lsls	r2, r3, #5
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8fe:	461a      	mov	r2, r3
 800b900:	2308      	movs	r3, #8
 800b902:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	f003 0310 	and.w	r3, r3, #16
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d008      	beq.n	800b920 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b910:	015a      	lsls	r2, r3, #5
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	4413      	add	r3, r2
 800b916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b91a:	461a      	mov	r2, r3
 800b91c:	2310      	movs	r3, #16
 800b91e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b926:	2b00      	cmp	r3, #0
 800b928:	d008      	beq.n	800b93c <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	4413      	add	r3, r2
 800b932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b936:	461a      	mov	r2, r3
 800b938:	2340      	movs	r3, #64	; 0x40
 800b93a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	f003 0302 	and.w	r3, r3, #2
 800b942:	2b00      	cmp	r3, #0
 800b944:	d008      	beq.n	800b958 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b948:	015a      	lsls	r2, r3, #5
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	4413      	add	r3, r2
 800b94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b952:	461a      	mov	r2, r3
 800b954:	2302      	movs	r3, #2
 800b956:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d003      	beq.n	800b96a <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fc29 	bl	800c1bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	3301      	adds	r3, #1
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b972:	085b      	lsrs	r3, r3, #1
 800b974:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d181      	bne.n	800b880 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4618      	mov	r0, r3
 800b982:	f007 f91f 	bl	8012bc4 <USB_ReadInterrupts>
 800b986:	4603      	mov	r3, r0
 800b988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b98c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b990:	d122      	bne.n	800b9d8 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	69fa      	ldr	r2, [r7, #28]
 800b99c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9a0:	f023 0301 	bic.w	r3, r3, #1
 800b9a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d108      	bne.n	800b9c2 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fd84 	bl	800c4c8 <HAL_PCDEx_LPM_Callback>
 800b9c0:	e002      	b.n	800b9c8 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7fa fa2c 	bl	8005e20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	695a      	ldr	r2, [r3, #20]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b9d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f007 f8f1 	bl	8012bc4 <USB_ReadInterrupts>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9ec:	d112      	bne.n	800ba14 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	f003 0301 	and.w	r3, r3, #1
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d102      	bne.n	800ba04 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7fa fa00 	bl	8005e04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	695a      	ldr	r2, [r3, #20]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ba12:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f007 f8d3 	bl	8012bc4 <USB_ReadInterrupts>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba28:	d121      	bne.n	800ba6e <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	695a      	ldr	r2, [r3, #20]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800ba38:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d111      	bne.n	800ba68 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba52:	089b      	lsrs	r3, r3, #2
 800ba54:	f003 020f 	and.w	r2, r3, #15
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ba5e:	2101      	movs	r1, #1
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fd31 	bl	800c4c8 <HAL_PCDEx_LPM_Callback>
 800ba66:	e002      	b.n	800ba6e <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f7fa f9cb 	bl	8005e04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f007 f8a6 	bl	8012bc4 <USB_ReadInterrupts>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba82:	f040 80c5 	bne.w	800bc10 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	69fa      	ldr	r2, [r7, #28]
 800ba90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba94:	f023 0301 	bic.w	r3, r3, #1
 800ba98:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2110      	movs	r1, #16
 800baa0:	4618      	mov	r0, r3
 800baa2:	f006 fa2d 	bl	8011f00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800baa6:	2300      	movs	r3, #0
 800baa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baaa:	e056      	b.n	800bb5a <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800baac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baae:	015a      	lsls	r2, r3, #5
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	4413      	add	r3, r2
 800bab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab8:	461a      	mov	r2, r3
 800baba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800babe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac2:	015a      	lsls	r2, r3, #5
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	4413      	add	r3, r2
 800bac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bad0:	0151      	lsls	r1, r2, #5
 800bad2:	69fa      	ldr	r2, [r7, #28]
 800bad4:	440a      	add	r2, r1
 800bad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bada:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bade:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae2:	015a      	lsls	r2, r3, #5
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	4413      	add	r3, r2
 800bae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baf0:	0151      	lsls	r1, r2, #5
 800baf2:	69fa      	ldr	r2, [r7, #28]
 800baf4:	440a      	add	r2, r1
 800baf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bafa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bafe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb02:	015a      	lsls	r2, r3, #5
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	4413      	add	r3, r2
 800bb08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb12:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb16:	015a      	lsls	r2, r3, #5
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb24:	0151      	lsls	r1, r2, #5
 800bb26:	69fa      	ldr	r2, [r7, #28]
 800bb28:	440a      	add	r2, r1
 800bb2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb36:	015a      	lsls	r2, r3, #5
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb44:	0151      	lsls	r1, r2, #5
 800bb46:	69fa      	ldr	r2, [r7, #28]
 800bb48:	440a      	add	r2, r1
 800bb4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb52:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb56:	3301      	adds	r3, #1
 800bb58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d3a3      	bcc.n	800baac <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	69fa      	ldr	r2, [r7, #28]
 800bb6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb72:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800bb76:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d016      	beq.n	800bbae <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb8a:	69fa      	ldr	r2, [r7, #28]
 800bb8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb90:	f043 030b 	orr.w	r3, r3, #11
 800bb94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba0:	69fa      	ldr	r2, [r7, #28]
 800bba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bba6:	f043 030b 	orr.w	r3, r3, #11
 800bbaa:	6453      	str	r3, [r2, #68]	; 0x44
 800bbac:	e015      	b.n	800bbda <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbb4:	695b      	ldr	r3, [r3, #20]
 800bbb6:	69fa      	ldr	r2, [r7, #28]
 800bbb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bbc0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800bbc4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	69fa      	ldr	r2, [r7, #28]
 800bbd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbd4:	f043 030b 	orr.w	r3, r3, #11
 800bbd8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	69fa      	ldr	r2, [r7, #28]
 800bbe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbe8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bbec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	4610      	mov	r0, r2
 800bbfc:	f007 f8a6 	bl	8012d4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	695a      	ldr	r2, [r3, #20]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800bc0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f006 ffd5 	bl	8012bc4 <USB_ReadInterrupts>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc24:	d124      	bne.n	800bc70 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f007 f86b 	bl	8012d06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4618      	mov	r0, r3
 800bc36:	f006 f9c4 	bl	8011fc2 <USB_GetDevSpeed>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681c      	ldr	r4, [r3, #0]
 800bc46:	f001 fbd5 	bl	800d3f4 <HAL_RCC_GetHCLKFreq>
 800bc4a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	461a      	mov	r2, r3
 800bc54:	4620      	mov	r0, r4
 800bc56:	f005 ff1f 	bl	8011a98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7fa f8bd 	bl	8005dda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	695a      	ldr	r2, [r3, #20]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800bc6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4618      	mov	r0, r3
 800bc76:	f006 ffa5 	bl	8012bc4 <USB_ReadInterrupts>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	f003 0308 	and.w	r3, r3, #8
 800bc80:	2b08      	cmp	r3, #8
 800bc82:	d10a      	bne.n	800bc9a <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f7fa f89a 	bl	8005dbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	695a      	ldr	r2, [r3, #20]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f002 0208 	and.w	r2, r2, #8
 800bc98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f006 ff90 	bl	8012bc4 <USB_ReadInterrupts>
 800bca4:	4603      	mov	r3, r0
 800bca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcae:	d10f      	bne.n	800bcd0 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	4619      	mov	r1, r3
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f7fa f8d0 	bl	8005e60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	695a      	ldr	r2, [r3, #20]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800bcce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f006 ff75 	bl	8012bc4 <USB_ReadInterrupts>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bce4:	d10f      	bne.n	800bd06 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800bce6:	2300      	movs	r3, #0
 800bce8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800bcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7fa f8a3 	bl	8005e3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	695a      	ldr	r2, [r3, #20]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800bd04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f006 ff5a 	bl	8012bc4 <USB_ReadInterrupts>
 800bd10:	4603      	mov	r3, r0
 800bd12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd1a:	d10a      	bne.n	800bd32 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7fa f8b1 	bl	8005e84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	695a      	ldr	r2, [r3, #20]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800bd30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f006 ff44 	bl	8012bc4 <USB_ReadInterrupts>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	f003 0304 	and.w	r3, r3, #4
 800bd42:	2b04      	cmp	r3, #4
 800bd44:	d115      	bne.n	800bd72 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	f003 0304 	and.w	r3, r3, #4
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d002      	beq.n	800bd5e <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7fa f8a1 	bl	8005ea0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	6859      	ldr	r1, [r3, #4]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	69ba      	ldr	r2, [r7, #24]
 800bd6a:	430a      	orrs	r2, r1
 800bd6c:	605a      	str	r2, [r3, #4]
 800bd6e:	e000      	b.n	800bd72 <HAL_PCD_IRQHandler+0x742>
      return;
 800bd70:	bf00      	nop
    }
  }
}
 800bd72:	3734      	adds	r7, #52	; 0x34
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd90      	pop	{r4, r7, pc}

0800bd78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	460b      	mov	r3, r1
 800bd82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d101      	bne.n	800bd92 <HAL_PCD_SetAddress+0x1a>
 800bd8e:	2302      	movs	r3, #2
 800bd90:	e013      	b.n	800bdba <HAL_PCD_SetAddress+0x42>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2201      	movs	r2, #1
 800bd96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	78fa      	ldrb	r2, [r7, #3]
 800bd9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	78fa      	ldrb	r2, [r7, #3]
 800bda8:	4611      	mov	r1, r2
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f006 feb4 	bl	8012b18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b084      	sub	sp, #16
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	4608      	mov	r0, r1
 800bdcc:	4611      	mov	r1, r2
 800bdce:	461a      	mov	r2, r3
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	70fb      	strb	r3, [r7, #3]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	803b      	strh	r3, [r7, #0]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bde0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	da0f      	bge.n	800be08 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bde8:	78fb      	ldrb	r3, [r7, #3]
 800bdea:	f003 020f 	and.w	r2, r3, #15
 800bdee:	4613      	mov	r3, r2
 800bdf0:	00db      	lsls	r3, r3, #3
 800bdf2:	1a9b      	subs	r3, r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	3338      	adds	r3, #56	; 0x38
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3304      	adds	r3, #4
 800bdfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2201      	movs	r2, #1
 800be04:	705a      	strb	r2, [r3, #1]
 800be06:	e00f      	b.n	800be28 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be08:	78fb      	ldrb	r3, [r7, #3]
 800be0a:	f003 020f 	and.w	r2, r3, #15
 800be0e:	4613      	mov	r3, r2
 800be10:	00db      	lsls	r3, r3, #3
 800be12:	1a9b      	subs	r3, r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	4413      	add	r3, r2
 800be1e:	3304      	adds	r3, #4
 800be20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800be28:	78fb      	ldrb	r3, [r7, #3]
 800be2a:	f003 030f 	and.w	r3, r3, #15
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800be34:	883a      	ldrh	r2, [r7, #0]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	78ba      	ldrb	r2, [r7, #2]
 800be3e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	785b      	ldrb	r3, [r3, #1]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d004      	beq.n	800be52 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800be52:	78bb      	ldrb	r3, [r7, #2]
 800be54:	2b02      	cmp	r3, #2
 800be56:	d102      	bne.n	800be5e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800be64:	2b01      	cmp	r3, #1
 800be66:	d101      	bne.n	800be6c <HAL_PCD_EP_Open+0xaa>
 800be68:	2302      	movs	r3, #2
 800be6a:	e00e      	b.n	800be8a <HAL_PCD_EP_Open+0xc8>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68f9      	ldr	r1, [r7, #12]
 800be7a:	4618      	mov	r0, r3
 800be7c:	f006 f8c0 	bl	8012000 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800be88:	7afb      	ldrb	r3, [r7, #11]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b084      	sub	sp, #16
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
 800be9a:	460b      	mov	r3, r1
 800be9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800be9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	da0f      	bge.n	800bec6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bea6:	78fb      	ldrb	r3, [r7, #3]
 800bea8:	f003 020f 	and.w	r2, r3, #15
 800beac:	4613      	mov	r3, r2
 800beae:	00db      	lsls	r3, r3, #3
 800beb0:	1a9b      	subs	r3, r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	3338      	adds	r3, #56	; 0x38
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	4413      	add	r3, r2
 800beba:	3304      	adds	r3, #4
 800bebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2201      	movs	r2, #1
 800bec2:	705a      	strb	r2, [r3, #1]
 800bec4:	e00f      	b.n	800bee6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bec6:	78fb      	ldrb	r3, [r7, #3]
 800bec8:	f003 020f 	and.w	r2, r3, #15
 800becc:	4613      	mov	r3, r2
 800bece:	00db      	lsls	r3, r3, #3
 800bed0:	1a9b      	subs	r3, r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	4413      	add	r3, r2
 800bedc:	3304      	adds	r3, #4
 800bede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800bee6:	78fb      	ldrb	r3, [r7, #3]
 800bee8:	f003 030f 	and.w	r3, r3, #15
 800beec:	b2da      	uxtb	r2, r3
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d101      	bne.n	800bf00 <HAL_PCD_EP_Close+0x6e>
 800befc:	2302      	movs	r3, #2
 800befe:	e00e      	b.n	800bf1e <HAL_PCD_EP_Close+0x8c>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68f9      	ldr	r1, [r7, #12]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f006 f8fe 	bl	8012110 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b086      	sub	sp, #24
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	607a      	str	r2, [r7, #4]
 800bf30:	603b      	str	r3, [r7, #0]
 800bf32:	460b      	mov	r3, r1
 800bf34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf36:	7afb      	ldrb	r3, [r7, #11]
 800bf38:	f003 020f 	and.w	r2, r3, #15
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	1a9b      	subs	r3, r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	2200      	movs	r2, #0
 800bf66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bf68:	7afb      	ldrb	r3, [r7, #11]
 800bf6a:	f003 030f 	and.w	r3, r3, #15
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bf74:	7afb      	ldrb	r3, [r7, #11]
 800bf76:	f003 030f 	and.w	r3, r3, #15
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d106      	bne.n	800bf8c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6979      	ldr	r1, [r7, #20]
 800bf84:	4618      	mov	r0, r3
 800bf86:	f006 fb7b 	bl	8012680 <USB_EP0StartXfer>
 800bf8a:	e005      	b.n	800bf98 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6979      	ldr	r1, [r7, #20]
 800bf92:	4618      	mov	r0, r3
 800bf94:	f006 f998 	bl	80122c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3718      	adds	r7, #24
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bfa2:	b480      	push	{r7}
 800bfa4:	b083      	sub	sp, #12
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
 800bfaa:	460b      	mov	r3, r1
 800bfac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bfae:	78fb      	ldrb	r3, [r7, #3]
 800bfb0:	f003 020f 	and.w	r2, r3, #15
 800bfb4:	6879      	ldr	r1, [r7, #4]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	00db      	lsls	r3, r3, #3
 800bfba:	1a9b      	subs	r3, r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	440b      	add	r3, r1
 800bfc0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bfc4:	681b      	ldr	r3, [r3, #0]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	370c      	adds	r7, #12
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b086      	sub	sp, #24
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	60f8      	str	r0, [r7, #12]
 800bfda:	607a      	str	r2, [r7, #4]
 800bfdc:	603b      	str	r3, [r7, #0]
 800bfde:	460b      	mov	r3, r1
 800bfe0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bfe2:	7afb      	ldrb	r3, [r7, #11]
 800bfe4:	f003 020f 	and.w	r2, r3, #15
 800bfe8:	4613      	mov	r3, r2
 800bfea:	00db      	lsls	r3, r3, #3
 800bfec:	1a9b      	subs	r3, r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	3338      	adds	r3, #56	; 0x38
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	4413      	add	r3, r2
 800bff6:	3304      	adds	r3, #4
 800bff8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	2200      	movs	r2, #0
 800c00a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	2201      	movs	r2, #1
 800c010:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c012:	7afb      	ldrb	r3, [r7, #11]
 800c014:	f003 030f 	and.w	r3, r3, #15
 800c018:	b2da      	uxtb	r2, r3
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c01e:	7afb      	ldrb	r3, [r7, #11]
 800c020:	f003 030f 	and.w	r3, r3, #15
 800c024:	2b00      	cmp	r3, #0
 800c026:	d106      	bne.n	800c036 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	6979      	ldr	r1, [r7, #20]
 800c02e:	4618      	mov	r0, r3
 800c030:	f006 fb26 	bl	8012680 <USB_EP0StartXfer>
 800c034:	e005      	b.n	800c042 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	6979      	ldr	r1, [r7, #20]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f006 f943 	bl	80122c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c042:	2300      	movs	r3, #0
}
 800c044:	4618      	mov	r0, r3
 800c046:	3718      	adds	r7, #24
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	460b      	mov	r3, r1
 800c056:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c058:	78fb      	ldrb	r3, [r7, #3]
 800c05a:	f003 020f 	and.w	r2, r3, #15
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	429a      	cmp	r2, r3
 800c064:	d901      	bls.n	800c06a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c066:	2301      	movs	r3, #1
 800c068:	e04e      	b.n	800c108 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c06a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	da0f      	bge.n	800c092 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c072:	78fb      	ldrb	r3, [r7, #3]
 800c074:	f003 020f 	and.w	r2, r3, #15
 800c078:	4613      	mov	r3, r2
 800c07a:	00db      	lsls	r3, r3, #3
 800c07c:	1a9b      	subs	r3, r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	3338      	adds	r3, #56	; 0x38
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	4413      	add	r3, r2
 800c086:	3304      	adds	r3, #4
 800c088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2201      	movs	r2, #1
 800c08e:	705a      	strb	r2, [r3, #1]
 800c090:	e00d      	b.n	800c0ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c092:	78fa      	ldrb	r2, [r7, #3]
 800c094:	4613      	mov	r3, r2
 800c096:	00db      	lsls	r3, r3, #3
 800c098:	1a9b      	subs	r3, r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0b4:	78fb      	ldrb	r3, [r7, #3]
 800c0b6:	f003 030f 	and.w	r3, r3, #15
 800c0ba:	b2da      	uxtb	r2, r3
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d101      	bne.n	800c0ce <HAL_PCD_EP_SetStall+0x82>
 800c0ca:	2302      	movs	r3, #2
 800c0cc:	e01c      	b.n	800c108 <HAL_PCD_EP_SetStall+0xbc>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68f9      	ldr	r1, [r7, #12]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f006 fc47 	bl	8012970 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c0e2:	78fb      	ldrb	r3, [r7, #3]
 800c0e4:	f003 030f 	and.w	r3, r3, #15
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d108      	bne.n	800c0fe <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	f006 fe27 	bl	8012d4c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	460b      	mov	r3, r1
 800c11a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c11c:	78fb      	ldrb	r3, [r7, #3]
 800c11e:	f003 020f 	and.w	r2, r3, #15
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	429a      	cmp	r2, r3
 800c128:	d901      	bls.n	800c12e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	e042      	b.n	800c1b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c12e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c132:	2b00      	cmp	r3, #0
 800c134:	da0f      	bge.n	800c156 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c136:	78fb      	ldrb	r3, [r7, #3]
 800c138:	f003 020f 	and.w	r2, r3, #15
 800c13c:	4613      	mov	r3, r2
 800c13e:	00db      	lsls	r3, r3, #3
 800c140:	1a9b      	subs	r3, r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	3338      	adds	r3, #56	; 0x38
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	4413      	add	r3, r2
 800c14a:	3304      	adds	r3, #4
 800c14c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2201      	movs	r2, #1
 800c152:	705a      	strb	r2, [r3, #1]
 800c154:	e00f      	b.n	800c176 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c156:	78fb      	ldrb	r3, [r7, #3]
 800c158:	f003 020f 	and.w	r2, r3, #15
 800c15c:	4613      	mov	r3, r2
 800c15e:	00db      	lsls	r3, r3, #3
 800c160:	1a9b      	subs	r3, r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	4413      	add	r3, r2
 800c16c:	3304      	adds	r3, #4
 800c16e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2200      	movs	r2, #0
 800c174:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c17c:	78fb      	ldrb	r3, [r7, #3]
 800c17e:	f003 030f 	and.w	r3, r3, #15
 800c182:	b2da      	uxtb	r2, r3
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d101      	bne.n	800c196 <HAL_PCD_EP_ClrStall+0x86>
 800c192:	2302      	movs	r3, #2
 800c194:	e00e      	b.n	800c1b4 <HAL_PCD_EP_ClrStall+0xa4>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68f9      	ldr	r1, [r7, #12]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f006 fc51 	bl	8012a4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b088      	sub	sp, #32
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	00db      	lsls	r3, r3, #3
 800c1d6:	1a9b      	subs	r3, r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	3338      	adds	r3, #56	; 0x38
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	4413      	add	r3, r2
 800c1e0:	3304      	adds	r3, #4
 800c1e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	699a      	ldr	r2, [r3, #24]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	695b      	ldr	r3, [r3, #20]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d901      	bls.n	800c1f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e067      	b.n	800c2c4 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	695a      	ldr	r2, [r3, #20]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	699b      	ldr	r3, [r3, #24]
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	69fa      	ldr	r2, [r7, #28]
 800c206:	429a      	cmp	r2, r3
 800c208:	d902      	bls.n	800c210 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	3303      	adds	r3, #3
 800c214:	089b      	lsrs	r3, r3, #2
 800c216:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c218:	e026      	b.n	800c268 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	695a      	ldr	r2, [r3, #20]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	69fa      	ldr	r2, [r7, #28]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d902      	bls.n	800c236 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	3303      	adds	r3, #3
 800c23a:	089b      	lsrs	r3, r3, #2
 800c23c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	68d9      	ldr	r1, [r3, #12]
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	b2da      	uxtb	r2, r3
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	b29b      	uxth	r3, r3
 800c24a:	6978      	ldr	r0, [r7, #20]
 800c24c:	f006 fb36 	bl	80128bc <USB_WritePacket>

    ep->xfer_buff  += len;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	68da      	ldr	r2, [r3, #12]
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	441a      	add	r2, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	699a      	ldr	r2, [r3, #24]
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	441a      	add	r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	015a      	lsls	r2, r3, #5
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	4413      	add	r3, r2
 800c270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	b29b      	uxth	r3, r3
 800c278:	69ba      	ldr	r2, [r7, #24]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d809      	bhi.n	800c292 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	699a      	ldr	r2, [r3, #24]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c286:	429a      	cmp	r2, r3
 800c288:	d203      	bcs.n	800c292 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	695b      	ldr	r3, [r3, #20]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1c3      	bne.n	800c21a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	695a      	ldr	r2, [r3, #20]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d811      	bhi.n	800c2c2 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	f003 030f 	and.w	r3, r3, #15
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	43db      	mvns	r3, r3
 800c2b8:	6939      	ldr	r1, [r7, #16]
 800c2ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2be:	4013      	ands	r3, r2
 800c2c0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3720      	adds	r7, #32
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	333c      	adds	r3, #60	; 0x3c
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	015a      	lsls	r2, r3, #5
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	4a19      	ldr	r2, [pc, #100]	; (800c364 <PCD_EP_OutXfrComplete_int+0x98>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d124      	bne.n	800c34c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00a      	beq.n	800c322 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	015a      	lsls	r2, r3, #5
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	4413      	add	r3, r2
 800c314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c318:	461a      	mov	r2, r3
 800c31a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c31e:	6093      	str	r3, [r2, #8]
 800c320:	e01a      	b.n	800c358 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	f003 0320 	and.w	r3, r3, #32
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d008      	beq.n	800c33e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	4413      	add	r3, r2
 800c334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c338:	461a      	mov	r2, r3
 800c33a:	2320      	movs	r3, #32
 800c33c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	b2db      	uxtb	r3, r3
 800c342:	4619      	mov	r1, r3
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7f9 fd05 	bl	8005d54 <HAL_PCD_DataOutStageCallback>
 800c34a:	e005      	b.n	800c358 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	4619      	mov	r1, r3
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7f9 fcfe 	bl	8005d54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3718      	adds	r7, #24
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	4f54310a 	.word	0x4f54310a

0800c368 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b086      	sub	sp, #24
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	333c      	adds	r3, #60	; 0x3c
 800c380:	3304      	adds	r3, #4
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	015a      	lsls	r2, r3, #5
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	4413      	add	r3, r2
 800c38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	4a0c      	ldr	r2, [pc, #48]	; (800c3cc <PCD_EP_OutSetupPacket_int+0x64>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d90e      	bls.n	800c3bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d009      	beq.n	800c3bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	015a      	lsls	r2, r3, #5
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f7f9 fcb7 	bl	8005d30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800c3c2:	2300      	movs	r3, #0
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3718      	adds	r7, #24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	4f54300a 	.word	0x4f54300a

0800c3d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	70fb      	strb	r3, [r7, #3]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c3e8:	78fb      	ldrb	r3, [r7, #3]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d107      	bne.n	800c3fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c3ee:	883b      	ldrh	r3, [r7, #0]
 800c3f0:	0419      	lsls	r1, r3, #16
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68ba      	ldr	r2, [r7, #8]
 800c3f8:	430a      	orrs	r2, r1
 800c3fa:	629a      	str	r2, [r3, #40]	; 0x28
 800c3fc:	e028      	b.n	800c450 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c404:	0c1b      	lsrs	r3, r3, #16
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	4413      	add	r3, r2
 800c40a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c40c:	2300      	movs	r3, #0
 800c40e:	73fb      	strb	r3, [r7, #15]
 800c410:	e00d      	b.n	800c42e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	3340      	adds	r3, #64	; 0x40
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	0c1b      	lsrs	r3, r3, #16
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	4413      	add	r3, r2
 800c426:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c428:	7bfb      	ldrb	r3, [r7, #15]
 800c42a:	3301      	adds	r3, #1
 800c42c:	73fb      	strb	r3, [r7, #15]
 800c42e:	7bfa      	ldrb	r2, [r7, #15]
 800c430:	78fb      	ldrb	r3, [r7, #3]
 800c432:	3b01      	subs	r3, #1
 800c434:	429a      	cmp	r2, r3
 800c436:	d3ec      	bcc.n	800c412 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c438:	883b      	ldrh	r3, [r7, #0]
 800c43a:	0418      	lsls	r0, r3, #16
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6819      	ldr	r1, [r3, #0]
 800c440:	78fb      	ldrb	r3, [r7, #3]
 800c442:	3b01      	subs	r3, #1
 800c444:	68ba      	ldr	r2, [r7, #8]
 800c446:	4302      	orrs	r2, r0
 800c448:	3340      	adds	r3, #64	; 0x40
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	440b      	add	r3, r1
 800c44e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3714      	adds	r7, #20
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr

0800c45e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c45e:	b480      	push	{r7}
 800c460:	b083      	sub	sp, #12
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	460b      	mov	r3, r1
 800c468:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	887a      	ldrh	r2, [r7, #2]
 800c470:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2201      	movs	r2, #1
 800c492:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4b2:	f043 0303 	orr.w	r3, r3, #3
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3714      	adds	r7, #20
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800c4e8:	4b2b      	ldr	r3, [pc, #172]	; (800c598 <HAL_PWR_ConfigPVD+0xb8>)
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	f023 020e 	bic.w	r2, r3, #14
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4928      	ldr	r1, [pc, #160]	; (800c598 <HAL_PWR_ConfigPVD+0xb8>)
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800c4fa:	4b28      	ldr	r3, [pc, #160]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	4a27      	ldr	r2, [pc, #156]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c504:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800c506:	4b25      	ldr	r3, [pc, #148]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a24      	ldr	r2, [pc, #144]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c50c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c510:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800c512:	4b22      	ldr	r3, [pc, #136]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	4a21      	ldr	r2, [pc, #132]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c51c:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800c51e:	4b1f      	ldr	r3, [pc, #124]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	4a1e      	ldr	r2, [pc, #120]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c528:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c532:	2b00      	cmp	r3, #0
 800c534:	d005      	beq.n	800c542 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800c536:	4b19      	ldr	r3, [pc, #100]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a18      	ldr	r2, [pc, #96]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c53c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c540:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d005      	beq.n	800c55a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800c54e:	4b13      	ldr	r3, [pc, #76]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	4a12      	ldr	r2, [pc, #72]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c558:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	2b00      	cmp	r3, #0
 800c564:	d005      	beq.n	800c572 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800c566:	4b0d      	ldr	r3, [pc, #52]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	4a0c      	ldr	r2, [pc, #48]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c56c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c570:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	f003 0302 	and.w	r3, r3, #2
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d005      	beq.n	800c58a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800c57e:	4b07      	ldr	r3, [pc, #28]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	4a06      	ldr	r2, [pc, #24]	; (800c59c <HAL_PWR_ConfigPVD+0xbc>)
 800c584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c588:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr
 800c598:	40007000 	.word	0x40007000
 800c59c:	40010400 	.word	0x40010400

0800c5a0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800c5a4:	4b05      	ldr	r3, [pc, #20]	; (800c5bc <HAL_PWR_EnablePVD+0x1c>)
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	4a04      	ldr	r2, [pc, #16]	; (800c5bc <HAL_PWR_EnablePVD+0x1c>)
 800c5aa:	f043 0301 	orr.w	r3, r3, #1
 800c5ae:	6053      	str	r3, [r2, #4]
}
 800c5b0:	bf00      	nop
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	40007000 	.word	0x40007000

0800c5c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c5c4:	4b0d      	ldr	r3, [pc, #52]	; (800c5fc <HAL_PWREx_GetVoltageRange+0x3c>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c5cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5d0:	d102      	bne.n	800c5d8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800c5d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5d6:	e00b      	b.n	800c5f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800c5d8:	4b08      	ldr	r3, [pc, #32]	; (800c5fc <HAL_PWREx_GetVoltageRange+0x3c>)
 800c5da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5e6:	d102      	bne.n	800c5ee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800c5e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5ec:	e000      	b.n	800c5f0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800c5ee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	40007000 	.word	0x40007000

0800c600 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c600:	b480      	push	{r7}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d141      	bne.n	800c692 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c60e:	4b4b      	ldr	r3, [pc, #300]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c61a:	d131      	bne.n	800c680 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c61c:	4b47      	ldr	r3, [pc, #284]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c622:	4a46      	ldr	r2, [pc, #280]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c628:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c62c:	4b43      	ldr	r3, [pc, #268]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c634:	4a41      	ldr	r2, [pc, #260]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c63a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800c63c:	4b40      	ldr	r3, [pc, #256]	; (800c740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2232      	movs	r2, #50	; 0x32
 800c642:	fb02 f303 	mul.w	r3, r2, r3
 800c646:	4a3f      	ldr	r2, [pc, #252]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c648:	fba2 2303 	umull	r2, r3, r2, r3
 800c64c:	0c9b      	lsrs	r3, r3, #18
 800c64e:	3301      	adds	r3, #1
 800c650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c652:	e002      	b.n	800c65a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	3b01      	subs	r3, #1
 800c658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c65a:	4b38      	ldr	r3, [pc, #224]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c65c:	695b      	ldr	r3, [r3, #20]
 800c65e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c666:	d102      	bne.n	800c66e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1f2      	bne.n	800c654 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c66e:	4b33      	ldr	r3, [pc, #204]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c670:	695b      	ldr	r3, [r3, #20]
 800c672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c67a:	d158      	bne.n	800c72e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c67c:	2303      	movs	r3, #3
 800c67e:	e057      	b.n	800c730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c680:	4b2e      	ldr	r3, [pc, #184]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c686:	4a2d      	ldr	r2, [pc, #180]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c68c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c690:	e04d      	b.n	800c72e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c698:	d141      	bne.n	800c71e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c69a:	4b28      	ldr	r3, [pc, #160]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c6a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6a6:	d131      	bne.n	800c70c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c6a8:	4b24      	ldr	r3, [pc, #144]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6ae:	4a23      	ldr	r2, [pc, #140]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c6b8:	4b20      	ldr	r3, [pc, #128]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c6c0:	4a1e      	ldr	r2, [pc, #120]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c6c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800c6c8:	4b1d      	ldr	r3, [pc, #116]	; (800c740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2232      	movs	r2, #50	; 0x32
 800c6ce:	fb02 f303 	mul.w	r3, r2, r3
 800c6d2:	4a1c      	ldr	r2, [pc, #112]	; (800c744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c6d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c6d8:	0c9b      	lsrs	r3, r3, #18
 800c6da:	3301      	adds	r3, #1
 800c6dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c6de:	e002      	b.n	800c6e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	3b01      	subs	r3, #1
 800c6e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c6e6:	4b15      	ldr	r3, [pc, #84]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6e8:	695b      	ldr	r3, [r3, #20]
 800c6ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6f2:	d102      	bne.n	800c6fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1f2      	bne.n	800c6e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c6fa:	4b10      	ldr	r3, [pc, #64]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c706:	d112      	bne.n	800c72e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c708:	2303      	movs	r3, #3
 800c70a:	e011      	b.n	800c730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c70c:	4b0b      	ldr	r3, [pc, #44]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c712:	4a0a      	ldr	r2, [pc, #40]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c718:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c71c:	e007      	b.n	800c72e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c71e:	4b07      	ldr	r3, [pc, #28]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c726:	4a05      	ldr	r2, [pc, #20]	; (800c73c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c72c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3714      	adds	r7, #20
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr
 800c73c:	40007000 	.word	0x40007000
 800c740:	20000038 	.word	0x20000038
 800c744:	431bde83 	.word	0x431bde83

0800c748 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800c748:	b480      	push	{r7}
 800c74a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800c74c:	4b05      	ldr	r3, [pc, #20]	; (800c764 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	4a04      	ldr	r2, [pc, #16]	; (800c764 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c756:	6053      	str	r3, [r2, #4]
}
 800c758:	bf00      	nop
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	40007000 	.word	0x40007000

0800c768 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800c768:	b480      	push	{r7}
 800c76a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800c76c:	4b05      	ldr	r3, [pc, #20]	; (800c784 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	4a04      	ldr	r2, [pc, #16]	; (800c784 <HAL_PWREx_EnableVddIO2+0x1c>)
 800c772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c776:	6053      	str	r3, [r2, #4]
}
 800c778:	bf00      	nop
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	40007000 	.word	0x40007000

0800c788 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 800c78c:	4b1c      	ldr	r3, [pc, #112]	; (800c800 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c78e:	695b      	ldr	r3, [r3, #20]
 800c790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c794:	2b00      	cmp	r3, #0
 800c796:	d005      	beq.n	800c7a4 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800c798:	f7f8 f85e 	bl	8004858 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800c79c:	4b18      	ldr	r3, [pc, #96]	; (800c800 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c79e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c7a2:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 800c7a4:	4b16      	ldr	r3, [pc, #88]	; (800c800 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7a8:	f003 0308 	and.w	r3, r3, #8
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d004      	beq.n	800c7ba <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800c7b0:	f000 f828 	bl	800c804 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800c7b4:	4b12      	ldr	r3, [pc, #72]	; (800c800 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7b6:	2208      	movs	r2, #8
 800c7b8:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 800c7ba:	4b11      	ldr	r3, [pc, #68]	; (800c800 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7be:	f003 0310 	and.w	r3, r3, #16
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d004      	beq.n	800c7d0 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 800c7c6:	f000 f824 	bl	800c812 <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800c7ca:	4b0d      	ldr	r3, [pc, #52]	; (800c800 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7cc:	2210      	movs	r2, #16
 800c7ce:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 800c7d0:	4b0b      	ldr	r3, [pc, #44]	; (800c800 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7d4:	f003 0320 	and.w	r3, r3, #32
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d004      	beq.n	800c7e6 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800c7dc:	f000 f820 	bl	800c820 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800c7e0:	4b07      	ldr	r3, [pc, #28]	; (800c800 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7e2:	2220      	movs	r2, #32
 800c7e4:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 800c7e6:	4b06      	ldr	r3, [pc, #24]	; (800c800 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d004      	beq.n	800c7fc <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 800c7f2:	f000 f81c 	bl	800c82e <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800c7f6:	4b02      	ldr	r3, [pc, #8]	; (800c800 <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800c7f8:	2240      	movs	r2, #64	; 0x40
 800c7fa:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800c7fc:	bf00      	nop
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	40010400 	.word	0x40010400

0800c804 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800c804:	b480      	push	{r7}
 800c806:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800c808:	bf00      	nop
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr

0800c812 <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 800c812:	b480      	push	{r7}
 800c814:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 800c816:	bf00      	nop
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800c820:	b480      	push	{r7}
 800c822:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800c824:	bf00      	nop
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr

0800c82e <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800c82e:	b480      	push	{r7}
 800c830:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800c832:	bf00      	nop
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d102      	bne.n	800c850 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c84a:	2301      	movs	r3, #1
 800c84c:	f000 bc16 	b.w	800d07c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c850:	4ba0      	ldr	r3, [pc, #640]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	f003 030c 	and.w	r3, r3, #12
 800c858:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c85a:	4b9e      	ldr	r3, [pc, #632]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	f003 0303 	and.w	r3, r3, #3
 800c862:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f003 0310 	and.w	r3, r3, #16
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 80e4 	beq.w	800ca3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d007      	beq.n	800c888 <HAL_RCC_OscConfig+0x4c>
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	2b0c      	cmp	r3, #12
 800c87c:	f040 808b 	bne.w	800c996 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	2b01      	cmp	r3, #1
 800c884:	f040 8087 	bne.w	800c996 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c888:	4b92      	ldr	r3, [pc, #584]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f003 0302 	and.w	r3, r3, #2
 800c890:	2b00      	cmp	r3, #0
 800c892:	d005      	beq.n	800c8a0 <HAL_RCC_OscConfig+0x64>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d101      	bne.n	800c8a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800c89c:	2301      	movs	r3, #1
 800c89e:	e3ed      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a1a      	ldr	r2, [r3, #32]
 800c8a4:	4b8b      	ldr	r3, [pc, #556]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 0308 	and.w	r3, r3, #8
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d004      	beq.n	800c8ba <HAL_RCC_OscConfig+0x7e>
 800c8b0:	4b88      	ldr	r3, [pc, #544]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8b8:	e005      	b.n	800c8c6 <HAL_RCC_OscConfig+0x8a>
 800c8ba:	4b86      	ldr	r3, [pc, #536]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c8bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8c0:	091b      	lsrs	r3, r3, #4
 800c8c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d223      	bcs.n	800c912 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f000 fdb2 	bl	800d438 <RCC_SetFlashLatencyFromMSIRange>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d001      	beq.n	800c8de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e3ce      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c8de:	4b7d      	ldr	r3, [pc, #500]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a7c      	ldr	r2, [pc, #496]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c8e4:	f043 0308 	orr.w	r3, r3, #8
 800c8e8:	6013      	str	r3, [r2, #0]
 800c8ea:	4b7a      	ldr	r3, [pc, #488]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a1b      	ldr	r3, [r3, #32]
 800c8f6:	4977      	ldr	r1, [pc, #476]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c8fc:	4b75      	ldr	r3, [pc, #468]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	69db      	ldr	r3, [r3, #28]
 800c908:	021b      	lsls	r3, r3, #8
 800c90a:	4972      	ldr	r1, [pc, #456]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c90c:	4313      	orrs	r3, r2
 800c90e:	604b      	str	r3, [r1, #4]
 800c910:	e025      	b.n	800c95e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c912:	4b70      	ldr	r3, [pc, #448]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a6f      	ldr	r2, [pc, #444]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c918:	f043 0308 	orr.w	r3, r3, #8
 800c91c:	6013      	str	r3, [r2, #0]
 800c91e:	4b6d      	ldr	r3, [pc, #436]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a1b      	ldr	r3, [r3, #32]
 800c92a:	496a      	ldr	r1, [pc, #424]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c92c:	4313      	orrs	r3, r2
 800c92e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c930:	4b68      	ldr	r3, [pc, #416]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	69db      	ldr	r3, [r3, #28]
 800c93c:	021b      	lsls	r3, r3, #8
 800c93e:	4965      	ldr	r1, [pc, #404]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c940:	4313      	orrs	r3, r2
 800c942:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d109      	bne.n	800c95e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	4618      	mov	r0, r3
 800c950:	f000 fd72 	bl	800d438 <RCC_SetFlashLatencyFromMSIRange>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d001      	beq.n	800c95e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800c95a:	2301      	movs	r3, #1
 800c95c:	e38e      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c95e:	f000 fcbf 	bl	800d2e0 <HAL_RCC_GetSysClockFreq>
 800c962:	4602      	mov	r2, r0
 800c964:	4b5b      	ldr	r3, [pc, #364]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	091b      	lsrs	r3, r3, #4
 800c96a:	f003 030f 	and.w	r3, r3, #15
 800c96e:	495a      	ldr	r1, [pc, #360]	; (800cad8 <HAL_RCC_OscConfig+0x29c>)
 800c970:	5ccb      	ldrb	r3, [r1, r3]
 800c972:	f003 031f 	and.w	r3, r3, #31
 800c976:	fa22 f303 	lsr.w	r3, r2, r3
 800c97a:	4a58      	ldr	r2, [pc, #352]	; (800cadc <HAL_RCC_OscConfig+0x2a0>)
 800c97c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c97e:	4b58      	ldr	r3, [pc, #352]	; (800cae0 <HAL_RCC_OscConfig+0x2a4>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4618      	mov	r0, r3
 800c984:	f7fa fffe 	bl	8007984 <HAL_InitTick>
 800c988:	4603      	mov	r3, r0
 800c98a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d052      	beq.n	800ca38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c992:	7bfb      	ldrb	r3, [r7, #15]
 800c994:	e372      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	699b      	ldr	r3, [r3, #24]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d032      	beq.n	800ca04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c99e:	4b4d      	ldr	r3, [pc, #308]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a4c      	ldr	r2, [pc, #304]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c9a4:	f043 0301 	orr.w	r3, r3, #1
 800c9a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c9aa:	f7fb f837 	bl	8007a1c <HAL_GetTick>
 800c9ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c9b0:	e008      	b.n	800c9c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c9b2:	f7fb f833 	bl	8007a1c <HAL_GetTick>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	1ad3      	subs	r3, r2, r3
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d901      	bls.n	800c9c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e35b      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c9c4:	4b43      	ldr	r3, [pc, #268]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 0302 	and.w	r3, r3, #2
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d0f0      	beq.n	800c9b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c9d0:	4b40      	ldr	r3, [pc, #256]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a3f      	ldr	r2, [pc, #252]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c9d6:	f043 0308 	orr.w	r3, r3, #8
 800c9da:	6013      	str	r3, [r2, #0]
 800c9dc:	4b3d      	ldr	r3, [pc, #244]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a1b      	ldr	r3, [r3, #32]
 800c9e8:	493a      	ldr	r1, [pc, #232]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c9ee:	4b39      	ldr	r3, [pc, #228]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	69db      	ldr	r3, [r3, #28]
 800c9fa:	021b      	lsls	r3, r3, #8
 800c9fc:	4935      	ldr	r1, [pc, #212]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	604b      	str	r3, [r1, #4]
 800ca02:	e01a      	b.n	800ca3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ca04:	4b33      	ldr	r3, [pc, #204]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a32      	ldr	r2, [pc, #200]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800ca0a:	f023 0301 	bic.w	r3, r3, #1
 800ca0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ca10:	f7fb f804 	bl	8007a1c <HAL_GetTick>
 800ca14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ca16:	e008      	b.n	800ca2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ca18:	f7fb f800 	bl	8007a1c <HAL_GetTick>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	1ad3      	subs	r3, r2, r3
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d901      	bls.n	800ca2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800ca26:	2303      	movs	r3, #3
 800ca28:	e328      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ca2a:	4b2a      	ldr	r3, [pc, #168]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f003 0302 	and.w	r3, r3, #2
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1f0      	bne.n	800ca18 <HAL_RCC_OscConfig+0x1dc>
 800ca36:	e000      	b.n	800ca3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ca38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d073      	beq.n	800cb2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	2b08      	cmp	r3, #8
 800ca4a:	d005      	beq.n	800ca58 <HAL_RCC_OscConfig+0x21c>
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	2b0c      	cmp	r3, #12
 800ca50:	d10e      	bne.n	800ca70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	2b03      	cmp	r3, #3
 800ca56:	d10b      	bne.n	800ca70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca58:	4b1e      	ldr	r3, [pc, #120]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d063      	beq.n	800cb2c <HAL_RCC_OscConfig+0x2f0>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d15f      	bne.n	800cb2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e305      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca78:	d106      	bne.n	800ca88 <HAL_RCC_OscConfig+0x24c>
 800ca7a:	4b16      	ldr	r3, [pc, #88]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a15      	ldr	r2, [pc, #84]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800ca80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca84:	6013      	str	r3, [r2, #0]
 800ca86:	e01d      	b.n	800cac4 <HAL_RCC_OscConfig+0x288>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca90:	d10c      	bne.n	800caac <HAL_RCC_OscConfig+0x270>
 800ca92:	4b10      	ldr	r3, [pc, #64]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4a0f      	ldr	r2, [pc, #60]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800ca98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca9c:	6013      	str	r3, [r2, #0]
 800ca9e:	4b0d      	ldr	r3, [pc, #52]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a0c      	ldr	r2, [pc, #48]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800caa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800caa8:	6013      	str	r3, [r2, #0]
 800caaa:	e00b      	b.n	800cac4 <HAL_RCC_OscConfig+0x288>
 800caac:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a08      	ldr	r2, [pc, #32]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800cab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cab6:	6013      	str	r3, [r2, #0]
 800cab8:	4b06      	ldr	r3, [pc, #24]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a05      	ldr	r2, [pc, #20]	; (800cad4 <HAL_RCC_OscConfig+0x298>)
 800cabe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01b      	beq.n	800cb04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cacc:	f7fa ffa6 	bl	8007a1c <HAL_GetTick>
 800cad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cad2:	e010      	b.n	800caf6 <HAL_RCC_OscConfig+0x2ba>
 800cad4:	40021000 	.word	0x40021000
 800cad8:	08022880 	.word	0x08022880
 800cadc:	20000038 	.word	0x20000038
 800cae0:	200000d8 	.word	0x200000d8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cae4:	f7fa ff9a 	bl	8007a1c <HAL_GetTick>
 800cae8:	4602      	mov	r2, r0
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	1ad3      	subs	r3, r2, r3
 800caee:	2b64      	cmp	r3, #100	; 0x64
 800caf0:	d901      	bls.n	800caf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800caf2:	2303      	movs	r3, #3
 800caf4:	e2c2      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800caf6:	4baf      	ldr	r3, [pc, #700]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d0f0      	beq.n	800cae4 <HAL_RCC_OscConfig+0x2a8>
 800cb02:	e014      	b.n	800cb2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb04:	f7fa ff8a 	bl	8007a1c <HAL_GetTick>
 800cb08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cb0a:	e008      	b.n	800cb1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb0c:	f7fa ff86 	bl	8007a1c <HAL_GetTick>
 800cb10:	4602      	mov	r2, r0
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	2b64      	cmp	r3, #100	; 0x64
 800cb18:	d901      	bls.n	800cb1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800cb1a:	2303      	movs	r3, #3
 800cb1c:	e2ae      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cb1e:	4ba5      	ldr	r3, [pc, #660]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1f0      	bne.n	800cb0c <HAL_RCC_OscConfig+0x2d0>
 800cb2a:	e000      	b.n	800cb2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0302 	and.w	r3, r3, #2
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d060      	beq.n	800cbfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	2b04      	cmp	r3, #4
 800cb3e:	d005      	beq.n	800cb4c <HAL_RCC_OscConfig+0x310>
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	2b0c      	cmp	r3, #12
 800cb44:	d119      	bne.n	800cb7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	d116      	bne.n	800cb7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb4c:	4b99      	ldr	r3, [pc, #612]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d005      	beq.n	800cb64 <HAL_RCC_OscConfig+0x328>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d101      	bne.n	800cb64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800cb60:	2301      	movs	r3, #1
 800cb62:	e28b      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb64:	4b93      	ldr	r3, [pc, #588]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	061b      	lsls	r3, r3, #24
 800cb72:	4990      	ldr	r1, [pc, #576]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cb74:	4313      	orrs	r3, r2
 800cb76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb78:	e040      	b.n	800cbfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d023      	beq.n	800cbca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb82:	4b8c      	ldr	r3, [pc, #560]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a8b      	ldr	r2, [pc, #556]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cb88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb8e:	f7fa ff45 	bl	8007a1c <HAL_GetTick>
 800cb92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cb94:	e008      	b.n	800cba8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb96:	f7fa ff41 	bl	8007a1c <HAL_GetTick>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	1ad3      	subs	r3, r2, r3
 800cba0:	2b02      	cmp	r3, #2
 800cba2:	d901      	bls.n	800cba8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800cba4:	2303      	movs	r3, #3
 800cba6:	e269      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cba8:	4b82      	ldr	r3, [pc, #520]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d0f0      	beq.n	800cb96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbb4:	4b7f      	ldr	r3, [pc, #508]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	691b      	ldr	r3, [r3, #16]
 800cbc0:	061b      	lsls	r3, r3, #24
 800cbc2:	497c      	ldr	r1, [pc, #496]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	604b      	str	r3, [r1, #4]
 800cbc8:	e018      	b.n	800cbfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cbca:	4b7a      	ldr	r3, [pc, #488]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a79      	ldr	r2, [pc, #484]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cbd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbd6:	f7fa ff21 	bl	8007a1c <HAL_GetTick>
 800cbda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cbdc:	e008      	b.n	800cbf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cbde:	f7fa ff1d 	bl	8007a1c <HAL_GetTick>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	1ad3      	subs	r3, r2, r3
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d901      	bls.n	800cbf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800cbec:	2303      	movs	r3, #3
 800cbee:	e245      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cbf0:	4b70      	ldr	r3, [pc, #448]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1f0      	bne.n	800cbde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f003 0308 	and.w	r3, r3, #8
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d03c      	beq.n	800cc82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d01c      	beq.n	800cc4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cc10:	4b68      	ldr	r3, [pc, #416]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cc12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc16:	4a67      	ldr	r2, [pc, #412]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cc18:	f043 0301 	orr.w	r3, r3, #1
 800cc1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc20:	f7fa fefc 	bl	8007a1c <HAL_GetTick>
 800cc24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cc26:	e008      	b.n	800cc3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc28:	f7fa fef8 	bl	8007a1c <HAL_GetTick>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	2b02      	cmp	r3, #2
 800cc34:	d901      	bls.n	800cc3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800cc36:	2303      	movs	r3, #3
 800cc38:	e220      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cc3a:	4b5e      	ldr	r3, [pc, #376]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cc3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc40:	f003 0302 	and.w	r3, r3, #2
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d0ef      	beq.n	800cc28 <HAL_RCC_OscConfig+0x3ec>
 800cc48:	e01b      	b.n	800cc82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc4a:	4b5a      	ldr	r3, [pc, #360]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cc4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc50:	4a58      	ldr	r2, [pc, #352]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cc52:	f023 0301 	bic.w	r3, r3, #1
 800cc56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc5a:	f7fa fedf 	bl	8007a1c <HAL_GetTick>
 800cc5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cc60:	e008      	b.n	800cc74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc62:	f7fa fedb 	bl	8007a1c <HAL_GetTick>
 800cc66:	4602      	mov	r2, r0
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	d901      	bls.n	800cc74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800cc70:	2303      	movs	r3, #3
 800cc72:	e203      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cc74:	4b4f      	ldr	r3, [pc, #316]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cc76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc7a:	f003 0302 	and.w	r3, r3, #2
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1ef      	bne.n	800cc62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 0304 	and.w	r3, r3, #4
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	f000 80a6 	beq.w	800cddc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc90:	2300      	movs	r3, #0
 800cc92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800cc94:	4b47      	ldr	r3, [pc, #284]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cc96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10d      	bne.n	800ccbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cca0:	4b44      	ldr	r3, [pc, #272]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cca4:	4a43      	ldr	r2, [pc, #268]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccaa:	6593      	str	r3, [r2, #88]	; 0x58
 800ccac:	4b41      	ldr	r3, [pc, #260]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800ccae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccb4:	60bb      	str	r3, [r7, #8]
 800ccb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ccbc:	4b3e      	ldr	r3, [pc, #248]	; (800cdb8 <HAL_RCC_OscConfig+0x57c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d118      	bne.n	800ccfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ccc8:	4b3b      	ldr	r3, [pc, #236]	; (800cdb8 <HAL_RCC_OscConfig+0x57c>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a3a      	ldr	r2, [pc, #232]	; (800cdb8 <HAL_RCC_OscConfig+0x57c>)
 800ccce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ccd4:	f7fa fea2 	bl	8007a1c <HAL_GetTick>
 800ccd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ccda:	e008      	b.n	800ccee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ccdc:	f7fa fe9e 	bl	8007a1c <HAL_GetTick>
 800cce0:	4602      	mov	r2, r0
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d901      	bls.n	800ccee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ccea:	2303      	movs	r3, #3
 800ccec:	e1c6      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ccee:	4b32      	ldr	r3, [pc, #200]	; (800cdb8 <HAL_RCC_OscConfig+0x57c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d0f0      	beq.n	800ccdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	689b      	ldr	r3, [r3, #8]
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d108      	bne.n	800cd14 <HAL_RCC_OscConfig+0x4d8>
 800cd02:	4b2c      	ldr	r3, [pc, #176]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cd04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd08:	4a2a      	ldr	r2, [pc, #168]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cd0a:	f043 0301 	orr.w	r3, r3, #1
 800cd0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd12:	e024      	b.n	800cd5e <HAL_RCC_OscConfig+0x522>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	2b05      	cmp	r3, #5
 800cd1a:	d110      	bne.n	800cd3e <HAL_RCC_OscConfig+0x502>
 800cd1c:	4b25      	ldr	r3, [pc, #148]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cd1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd22:	4a24      	ldr	r2, [pc, #144]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cd24:	f043 0304 	orr.w	r3, r3, #4
 800cd28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd2c:	4b21      	ldr	r3, [pc, #132]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cd2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd32:	4a20      	ldr	r2, [pc, #128]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cd34:	f043 0301 	orr.w	r3, r3, #1
 800cd38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd3c:	e00f      	b.n	800cd5e <HAL_RCC_OscConfig+0x522>
 800cd3e:	4b1d      	ldr	r3, [pc, #116]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cd40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd44:	4a1b      	ldr	r2, [pc, #108]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cd46:	f023 0301 	bic.w	r3, r3, #1
 800cd4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cd4e:	4b19      	ldr	r3, [pc, #100]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cd50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd54:	4a17      	ldr	r2, [pc, #92]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cd56:	f023 0304 	bic.w	r3, r3, #4
 800cd5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d016      	beq.n	800cd94 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd66:	f7fa fe59 	bl	8007a1c <HAL_GetTick>
 800cd6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd6c:	e00a      	b.n	800cd84 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd6e:	f7fa fe55 	bl	8007a1c <HAL_GetTick>
 800cd72:	4602      	mov	r2, r0
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d901      	bls.n	800cd84 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800cd80:	2303      	movs	r3, #3
 800cd82:	e17b      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd84:	4b0b      	ldr	r3, [pc, #44]	; (800cdb4 <HAL_RCC_OscConfig+0x578>)
 800cd86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd8a:	f003 0302 	and.w	r3, r3, #2
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d0ed      	beq.n	800cd6e <HAL_RCC_OscConfig+0x532>
 800cd92:	e01a      	b.n	800cdca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd94:	f7fa fe42 	bl	8007a1c <HAL_GetTick>
 800cd98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cd9a:	e00f      	b.n	800cdbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd9c:	f7fa fe3e 	bl	8007a1c <HAL_GetTick>
 800cda0:	4602      	mov	r2, r0
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d906      	bls.n	800cdbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800cdae:	2303      	movs	r3, #3
 800cdb0:	e164      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
 800cdb2:	bf00      	nop
 800cdb4:	40021000 	.word	0x40021000
 800cdb8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cdbc:	4ba8      	ldr	r3, [pc, #672]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cdbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdc2:	f003 0302 	and.w	r3, r3, #2
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1e8      	bne.n	800cd9c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cdca:	7ffb      	ldrb	r3, [r7, #31]
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d105      	bne.n	800cddc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cdd0:	4ba3      	ldr	r3, [pc, #652]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cdd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdd4:	4aa2      	ldr	r2, [pc, #648]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cdd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f003 0320 	and.w	r3, r3, #32
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d03c      	beq.n	800ce62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d01c      	beq.n	800ce2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cdf0:	4b9b      	ldr	r3, [pc, #620]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cdf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cdf6:	4a9a      	ldr	r2, [pc, #616]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cdf8:	f043 0301 	orr.w	r3, r3, #1
 800cdfc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce00:	f7fa fe0c 	bl	8007a1c <HAL_GetTick>
 800ce04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ce06:	e008      	b.n	800ce1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce08:	f7fa fe08 	bl	8007a1c <HAL_GetTick>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	1ad3      	subs	r3, r2, r3
 800ce12:	2b02      	cmp	r3, #2
 800ce14:	d901      	bls.n	800ce1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800ce16:	2303      	movs	r3, #3
 800ce18:	e130      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ce1a:	4b91      	ldr	r3, [pc, #580]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800ce1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce20:	f003 0302 	and.w	r3, r3, #2
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d0ef      	beq.n	800ce08 <HAL_RCC_OscConfig+0x5cc>
 800ce28:	e01b      	b.n	800ce62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ce2a:	4b8d      	ldr	r3, [pc, #564]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800ce2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce30:	4a8b      	ldr	r2, [pc, #556]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800ce32:	f023 0301 	bic.w	r3, r3, #1
 800ce36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce3a:	f7fa fdef 	bl	8007a1c <HAL_GetTick>
 800ce3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ce40:	e008      	b.n	800ce54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce42:	f7fa fdeb 	bl	8007a1c <HAL_GetTick>
 800ce46:	4602      	mov	r2, r0
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	1ad3      	subs	r3, r2, r3
 800ce4c:	2b02      	cmp	r3, #2
 800ce4e:	d901      	bls.n	800ce54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800ce50:	2303      	movs	r3, #3
 800ce52:	e113      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ce54:	4b82      	ldr	r3, [pc, #520]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800ce56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce5a:	f003 0302 	and.w	r3, r3, #2
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1ef      	bne.n	800ce42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f000 8107 	beq.w	800d07a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	f040 80cb 	bne.w	800d00c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ce76:	4b7a      	ldr	r3, [pc, #488]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	f003 0203 	and.w	r2, r3, #3
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d12c      	bne.n	800cee4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce94:	3b01      	subs	r3, #1
 800ce96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d123      	bne.n	800cee4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d11b      	bne.n	800cee4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d113      	bne.n	800cee4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cec6:	085b      	lsrs	r3, r3, #1
 800cec8:	3b01      	subs	r3, #1
 800ceca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cecc:	429a      	cmp	r2, r3
 800cece:	d109      	bne.n	800cee4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceda:	085b      	lsrs	r3, r3, #1
 800cedc:	3b01      	subs	r3, #1
 800cede:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d06d      	beq.n	800cfc0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	2b0c      	cmp	r3, #12
 800cee8:	d068      	beq.n	800cfbc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ceea:	4b5d      	ldr	r3, [pc, #372]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d105      	bne.n	800cf02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800cef6:	4b5a      	ldr	r3, [pc, #360]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d001      	beq.n	800cf06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e0ba      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800cf06:	4b56      	ldr	r3, [pc, #344]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a55      	ldr	r2, [pc, #340]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cf0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cf12:	f7fa fd83 	bl	8007a1c <HAL_GetTick>
 800cf16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf18:	e008      	b.n	800cf2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf1a:	f7fa fd7f 	bl	8007a1c <HAL_GetTick>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d901      	bls.n	800cf2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	e0a7      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf2c:	4b4c      	ldr	r3, [pc, #304]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1f0      	bne.n	800cf1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cf38:	4b49      	ldr	r3, [pc, #292]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cf3a:	68da      	ldr	r2, [r3, #12]
 800cf3c:	4b49      	ldr	r3, [pc, #292]	; (800d064 <HAL_RCC_OscConfig+0x828>)
 800cf3e:	4013      	ands	r3, r2
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cf48:	3a01      	subs	r2, #1
 800cf4a:	0112      	lsls	r2, r2, #4
 800cf4c:	4311      	orrs	r1, r2
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cf52:	0212      	lsls	r2, r2, #8
 800cf54:	4311      	orrs	r1, r2
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cf5a:	0852      	lsrs	r2, r2, #1
 800cf5c:	3a01      	subs	r2, #1
 800cf5e:	0552      	lsls	r2, r2, #21
 800cf60:	4311      	orrs	r1, r2
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cf66:	0852      	lsrs	r2, r2, #1
 800cf68:	3a01      	subs	r2, #1
 800cf6a:	0652      	lsls	r2, r2, #25
 800cf6c:	4311      	orrs	r1, r2
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cf72:	06d2      	lsls	r2, r2, #27
 800cf74:	430a      	orrs	r2, r1
 800cf76:	493a      	ldr	r1, [pc, #232]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800cf7c:	4b38      	ldr	r3, [pc, #224]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a37      	ldr	r2, [pc, #220]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cf82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cf88:	4b35      	ldr	r3, [pc, #212]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	4a34      	ldr	r2, [pc, #208]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cf8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cf94:	f7fa fd42 	bl	8007a1c <HAL_GetTick>
 800cf98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf9a:	e008      	b.n	800cfae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf9c:	f7fa fd3e 	bl	8007a1c <HAL_GetTick>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	d901      	bls.n	800cfae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800cfaa:	2303      	movs	r3, #3
 800cfac:	e066      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cfae:	4b2c      	ldr	r3, [pc, #176]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d0f0      	beq.n	800cf9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cfba:	e05e      	b.n	800d07a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e05d      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cfc0:	4b27      	ldr	r3, [pc, #156]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d156      	bne.n	800d07a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800cfcc:	4b24      	ldr	r3, [pc, #144]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a23      	ldr	r2, [pc, #140]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cfd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cfd8:	4b21      	ldr	r3, [pc, #132]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	4a20      	ldr	r2, [pc, #128]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800cfde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfe2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cfe4:	f7fa fd1a 	bl	8007a1c <HAL_GetTick>
 800cfe8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cfea:	e008      	b.n	800cffe <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cfec:	f7fa fd16 	bl	8007a1c <HAL_GetTick>
 800cff0:	4602      	mov	r2, r0
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	2b02      	cmp	r3, #2
 800cff8:	d901      	bls.n	800cffe <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800cffa:	2303      	movs	r3, #3
 800cffc:	e03e      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cffe:	4b18      	ldr	r3, [pc, #96]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d006:	2b00      	cmp	r3, #0
 800d008:	d0f0      	beq.n	800cfec <HAL_RCC_OscConfig+0x7b0>
 800d00a:	e036      	b.n	800d07a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	2b0c      	cmp	r3, #12
 800d010:	d031      	beq.n	800d076 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d012:	4b13      	ldr	r3, [pc, #76]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a12      	ldr	r2, [pc, #72]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800d018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d01c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800d01e:	4b10      	ldr	r3, [pc, #64]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800d026:	2b00      	cmp	r3, #0
 800d028:	d105      	bne.n	800d036 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d02a:	4b0d      	ldr	r3, [pc, #52]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	4a0c      	ldr	r2, [pc, #48]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800d030:	f023 0303 	bic.w	r3, r3, #3
 800d034:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800d036:	4b0a      	ldr	r3, [pc, #40]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	4a09      	ldr	r2, [pc, #36]	; (800d060 <HAL_RCC_OscConfig+0x824>)
 800d03c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d044:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d046:	f7fa fce9 	bl	8007a1c <HAL_GetTick>
 800d04a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d04c:	e00c      	b.n	800d068 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d04e:	f7fa fce5 	bl	8007a1c <HAL_GetTick>
 800d052:	4602      	mov	r2, r0
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	1ad3      	subs	r3, r2, r3
 800d058:	2b02      	cmp	r3, #2
 800d05a:	d905      	bls.n	800d068 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800d05c:	2303      	movs	r3, #3
 800d05e:	e00d      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
 800d060:	40021000 	.word	0x40021000
 800d064:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d068:	4b06      	ldr	r3, [pc, #24]	; (800d084 <HAL_RCC_OscConfig+0x848>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1ec      	bne.n	800d04e <HAL_RCC_OscConfig+0x812>
 800d074:	e001      	b.n	800d07a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	e000      	b.n	800d07c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3720      	adds	r7, #32
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	40021000 	.word	0x40021000

0800d088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d092:	2300      	movs	r3, #0
 800d094:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d101      	bne.n	800d0a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d09c:	2301      	movs	r3, #1
 800d09e:	e10f      	b.n	800d2c0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d0a0:	4b89      	ldr	r3, [pc, #548]	; (800d2c8 <HAL_RCC_ClockConfig+0x240>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f003 030f 	and.w	r3, r3, #15
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d910      	bls.n	800d0d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d0ae:	4b86      	ldr	r3, [pc, #536]	; (800d2c8 <HAL_RCC_ClockConfig+0x240>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f023 020f 	bic.w	r2, r3, #15
 800d0b6:	4984      	ldr	r1, [pc, #528]	; (800d2c8 <HAL_RCC_ClockConfig+0x240>)
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0be:	4b82      	ldr	r3, [pc, #520]	; (800d2c8 <HAL_RCC_ClockConfig+0x240>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f003 030f 	and.w	r3, r3, #15
 800d0c6:	683a      	ldr	r2, [r7, #0]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d001      	beq.n	800d0d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	e0f7      	b.n	800d2c0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f003 0301 	and.w	r3, r3, #1
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f000 8089 	beq.w	800d1f0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	2b03      	cmp	r3, #3
 800d0e4:	d133      	bne.n	800d14e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d0e6:	4b79      	ldr	r3, [pc, #484]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d101      	bne.n	800d0f6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e0e4      	b.n	800d2c0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800d0f6:	f000 f9f9 	bl	800d4ec <RCC_GetSysClockFreqFromPLLSource>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	4a74      	ldr	r2, [pc, #464]	; (800d2d0 <HAL_RCC_ClockConfig+0x248>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d955      	bls.n	800d1ae <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800d102:	4b72      	ldr	r3, [pc, #456]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10a      	bne.n	800d124 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d10e:	4b6f      	ldr	r3, [pc, #444]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d116:	4a6d      	ldr	r2, [pc, #436]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d11c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d11e:	2380      	movs	r3, #128	; 0x80
 800d120:	617b      	str	r3, [r7, #20]
 800d122:	e044      	b.n	800d1ae <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f003 0302 	and.w	r3, r3, #2
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d03e      	beq.n	800d1ae <HAL_RCC_ClockConfig+0x126>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d13a      	bne.n	800d1ae <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d138:	4b64      	ldr	r3, [pc, #400]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d140:	4a62      	ldr	r2, [pc, #392]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d146:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d148:	2380      	movs	r3, #128	; 0x80
 800d14a:	617b      	str	r3, [r7, #20]
 800d14c:	e02f      	b.n	800d1ae <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	2b02      	cmp	r3, #2
 800d154:	d107      	bne.n	800d166 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d156:	4b5d      	ldr	r3, [pc, #372]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d115      	bne.n	800d18e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800d162:	2301      	movs	r3, #1
 800d164:	e0ac      	b.n	800d2c0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d107      	bne.n	800d17e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d16e:	4b57      	ldr	r3, [pc, #348]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f003 0302 	and.w	r3, r3, #2
 800d176:	2b00      	cmp	r3, #0
 800d178:	d109      	bne.n	800d18e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800d17a:	2301      	movs	r3, #1
 800d17c:	e0a0      	b.n	800d2c0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d17e:	4b53      	ldr	r3, [pc, #332]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d186:	2b00      	cmp	r3, #0
 800d188:	d101      	bne.n	800d18e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800d18a:	2301      	movs	r3, #1
 800d18c:	e098      	b.n	800d2c0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800d18e:	f000 f8a7 	bl	800d2e0 <HAL_RCC_GetSysClockFreq>
 800d192:	4603      	mov	r3, r0
 800d194:	4a4e      	ldr	r2, [pc, #312]	; (800d2d0 <HAL_RCC_ClockConfig+0x248>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d909      	bls.n	800d1ae <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d19a:	4b4c      	ldr	r3, [pc, #304]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d1a2:	4a4a      	ldr	r2, [pc, #296]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d1a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d1aa:	2380      	movs	r3, #128	; 0x80
 800d1ac:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d1ae:	4b47      	ldr	r3, [pc, #284]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f023 0203 	bic.w	r2, r3, #3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	4944      	ldr	r1, [pc, #272]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1c0:	f7fa fc2c 	bl	8007a1c <HAL_GetTick>
 800d1c4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d1c6:	e00a      	b.n	800d1de <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d1c8:	f7fa fc28 	bl	8007a1c <HAL_GetTick>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d901      	bls.n	800d1de <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800d1da:	2303      	movs	r3, #3
 800d1dc:	e070      	b.n	800d2c0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d1de:	4b3b      	ldr	r3, [pc, #236]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f003 020c 	and.w	r2, r3, #12
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d1eb      	bne.n	800d1c8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f003 0302 	and.w	r3, r3, #2
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d009      	beq.n	800d210 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d1fc:	4b33      	ldr	r3, [pc, #204]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	4930      	ldr	r1, [pc, #192]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d20a:	4313      	orrs	r3, r2
 800d20c:	608b      	str	r3, [r1, #8]
 800d20e:	e008      	b.n	800d222 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	2b80      	cmp	r3, #128	; 0x80
 800d214:	d105      	bne.n	800d222 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d216:	4b2d      	ldr	r3, [pc, #180]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	4a2c      	ldr	r2, [pc, #176]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d21c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d220:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d222:	4b29      	ldr	r3, [pc, #164]	; (800d2c8 <HAL_RCC_ClockConfig+0x240>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f003 030f 	and.w	r3, r3, #15
 800d22a:	683a      	ldr	r2, [r7, #0]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d210      	bcs.n	800d252 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d230:	4b25      	ldr	r3, [pc, #148]	; (800d2c8 <HAL_RCC_ClockConfig+0x240>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f023 020f 	bic.w	r2, r3, #15
 800d238:	4923      	ldr	r1, [pc, #140]	; (800d2c8 <HAL_RCC_ClockConfig+0x240>)
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	4313      	orrs	r3, r2
 800d23e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d240:	4b21      	ldr	r3, [pc, #132]	; (800d2c8 <HAL_RCC_ClockConfig+0x240>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 030f 	and.w	r3, r3, #15
 800d248:	683a      	ldr	r2, [r7, #0]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d001      	beq.n	800d252 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	e036      	b.n	800d2c0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f003 0304 	and.w	r3, r3, #4
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d008      	beq.n	800d270 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d25e:	4b1b      	ldr	r3, [pc, #108]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	4918      	ldr	r1, [pc, #96]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d26c:	4313      	orrs	r3, r2
 800d26e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f003 0308 	and.w	r3, r3, #8
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d009      	beq.n	800d290 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d27c:	4b13      	ldr	r3, [pc, #76]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	00db      	lsls	r3, r3, #3
 800d28a:	4910      	ldr	r1, [pc, #64]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d28c:	4313      	orrs	r3, r2
 800d28e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d290:	f000 f826 	bl	800d2e0 <HAL_RCC_GetSysClockFreq>
 800d294:	4602      	mov	r2, r0
 800d296:	4b0d      	ldr	r3, [pc, #52]	; (800d2cc <HAL_RCC_ClockConfig+0x244>)
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	091b      	lsrs	r3, r3, #4
 800d29c:	f003 030f 	and.w	r3, r3, #15
 800d2a0:	490c      	ldr	r1, [pc, #48]	; (800d2d4 <HAL_RCC_ClockConfig+0x24c>)
 800d2a2:	5ccb      	ldrb	r3, [r1, r3]
 800d2a4:	f003 031f 	and.w	r3, r3, #31
 800d2a8:	fa22 f303 	lsr.w	r3, r2, r3
 800d2ac:	4a0a      	ldr	r2, [pc, #40]	; (800d2d8 <HAL_RCC_ClockConfig+0x250>)
 800d2ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d2b0:	4b0a      	ldr	r3, [pc, #40]	; (800d2dc <HAL_RCC_ClockConfig+0x254>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7fa fb65 	bl	8007984 <HAL_InitTick>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	73fb      	strb	r3, [r7, #15]

  return status;
 800d2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3718      	adds	r7, #24
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	40022000 	.word	0x40022000
 800d2cc:	40021000 	.word	0x40021000
 800d2d0:	04c4b400 	.word	0x04c4b400
 800d2d4:	08022880 	.word	0x08022880
 800d2d8:	20000038 	.word	0x20000038
 800d2dc:	200000d8 	.word	0x200000d8

0800d2e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b089      	sub	sp, #36	; 0x24
 800d2e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	61fb      	str	r3, [r7, #28]
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d2ee:	4b3e      	ldr	r3, [pc, #248]	; (800d3e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	f003 030c 	and.w	r3, r3, #12
 800d2f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d2f8:	4b3b      	ldr	r3, [pc, #236]	; (800d3e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	f003 0303 	and.w	r3, r3, #3
 800d300:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d005      	beq.n	800d314 <HAL_RCC_GetSysClockFreq+0x34>
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	2b0c      	cmp	r3, #12
 800d30c:	d121      	bne.n	800d352 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2b01      	cmp	r3, #1
 800d312:	d11e      	bne.n	800d352 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d314:	4b34      	ldr	r3, [pc, #208]	; (800d3e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f003 0308 	and.w	r3, r3, #8
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d107      	bne.n	800d330 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d320:	4b31      	ldr	r3, [pc, #196]	; (800d3e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d326:	0a1b      	lsrs	r3, r3, #8
 800d328:	f003 030f 	and.w	r3, r3, #15
 800d32c:	61fb      	str	r3, [r7, #28]
 800d32e:	e005      	b.n	800d33c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d330:	4b2d      	ldr	r3, [pc, #180]	; (800d3e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	091b      	lsrs	r3, r3, #4
 800d336:	f003 030f 	and.w	r3, r3, #15
 800d33a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d33c:	4a2b      	ldr	r2, [pc, #172]	; (800d3ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d344:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10d      	bne.n	800d368 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d350:	e00a      	b.n	800d368 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	2b04      	cmp	r3, #4
 800d356:	d102      	bne.n	800d35e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d358:	4b25      	ldr	r3, [pc, #148]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800d35a:	61bb      	str	r3, [r7, #24]
 800d35c:	e004      	b.n	800d368 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	2b08      	cmp	r3, #8
 800d362:	d101      	bne.n	800d368 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d364:	4b22      	ldr	r3, [pc, #136]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800d366:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	2b0c      	cmp	r3, #12
 800d36c:	d134      	bne.n	800d3d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d36e:	4b1e      	ldr	r3, [pc, #120]	; (800d3e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	f003 0303 	and.w	r3, r3, #3
 800d376:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	2b02      	cmp	r3, #2
 800d37c:	d003      	beq.n	800d386 <HAL_RCC_GetSysClockFreq+0xa6>
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	2b03      	cmp	r3, #3
 800d382:	d003      	beq.n	800d38c <HAL_RCC_GetSysClockFreq+0xac>
 800d384:	e005      	b.n	800d392 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800d386:	4b1a      	ldr	r3, [pc, #104]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800d388:	617b      	str	r3, [r7, #20]
      break;
 800d38a:	e005      	b.n	800d398 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800d38c:	4b18      	ldr	r3, [pc, #96]	; (800d3f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800d38e:	617b      	str	r3, [r7, #20]
      break;
 800d390:	e002      	b.n	800d398 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	617b      	str	r3, [r7, #20]
      break;
 800d396:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d398:	4b13      	ldr	r3, [pc, #76]	; (800d3e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	091b      	lsrs	r3, r3, #4
 800d39e:	f003 030f 	and.w	r3, r3, #15
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d3a6:	4b10      	ldr	r3, [pc, #64]	; (800d3e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	0a1b      	lsrs	r3, r3, #8
 800d3ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3b0:	697a      	ldr	r2, [r7, #20]
 800d3b2:	fb02 f203 	mul.w	r2, r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d3be:	4b0a      	ldr	r3, [pc, #40]	; (800d3e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	0e5b      	lsrs	r3, r3, #25
 800d3c4:	f003 0303 	and.w	r3, r3, #3
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	005b      	lsls	r3, r3, #1
 800d3cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800d3ce:	697a      	ldr	r2, [r7, #20]
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800d3d8:	69bb      	ldr	r3, [r7, #24]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3724      	adds	r7, #36	; 0x24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	40021000 	.word	0x40021000
 800d3ec:	08022898 	.word	0x08022898
 800d3f0:	00f42400 	.word	0x00f42400

0800d3f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d3f8:	4b03      	ldr	r3, [pc, #12]	; (800d408 <HAL_RCC_GetHCLKFreq+0x14>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	20000038 	.word	0x20000038

0800d40c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d410:	f7ff fff0 	bl	800d3f4 <HAL_RCC_GetHCLKFreq>
 800d414:	4602      	mov	r2, r0
 800d416:	4b06      	ldr	r3, [pc, #24]	; (800d430 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	0a1b      	lsrs	r3, r3, #8
 800d41c:	f003 0307 	and.w	r3, r3, #7
 800d420:	4904      	ldr	r1, [pc, #16]	; (800d434 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d422:	5ccb      	ldrb	r3, [r1, r3]
 800d424:	f003 031f 	and.w	r3, r3, #31
 800d428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	40021000 	.word	0x40021000
 800d434:	08022890 	.word	0x08022890

0800d438 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b086      	sub	sp, #24
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d440:	2300      	movs	r3, #0
 800d442:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d444:	4b27      	ldr	r3, [pc, #156]	; (800d4e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d003      	beq.n	800d458 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d450:	f7ff f8b6 	bl	800c5c0 <HAL_PWREx_GetVoltageRange>
 800d454:	6178      	str	r0, [r7, #20]
 800d456:	e014      	b.n	800d482 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d458:	4b22      	ldr	r3, [pc, #136]	; (800d4e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d45c:	4a21      	ldr	r2, [pc, #132]	; (800d4e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d45e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d462:	6593      	str	r3, [r2, #88]	; 0x58
 800d464:	4b1f      	ldr	r3, [pc, #124]	; (800d4e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d46c:	60fb      	str	r3, [r7, #12]
 800d46e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d470:	f7ff f8a6 	bl	800c5c0 <HAL_PWREx_GetVoltageRange>
 800d474:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d476:	4b1b      	ldr	r3, [pc, #108]	; (800d4e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d47a:	4a1a      	ldr	r2, [pc, #104]	; (800d4e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800d47c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d480:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d488:	d10b      	bne.n	800d4a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2b80      	cmp	r3, #128	; 0x80
 800d48e:	d913      	bls.n	800d4b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2ba0      	cmp	r3, #160	; 0xa0
 800d494:	d902      	bls.n	800d49c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d496:	2302      	movs	r3, #2
 800d498:	613b      	str	r3, [r7, #16]
 800d49a:	e00d      	b.n	800d4b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d49c:	2301      	movs	r3, #1
 800d49e:	613b      	str	r3, [r7, #16]
 800d4a0:	e00a      	b.n	800d4b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2b7f      	cmp	r3, #127	; 0x7f
 800d4a6:	d902      	bls.n	800d4ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	613b      	str	r3, [r7, #16]
 800d4ac:	e004      	b.n	800d4b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2b70      	cmp	r3, #112	; 0x70
 800d4b2:	d101      	bne.n	800d4b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d4b8:	4b0b      	ldr	r3, [pc, #44]	; (800d4e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f023 020f 	bic.w	r2, r3, #15
 800d4c0:	4909      	ldr	r1, [pc, #36]	; (800d4e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d4c8:	4b07      	ldr	r3, [pc, #28]	; (800d4e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f003 030f 	and.w	r3, r3, #15
 800d4d0:	693a      	ldr	r2, [r7, #16]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d001      	beq.n	800d4da <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e000      	b.n	800d4dc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3718      	adds	r7, #24
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	40021000 	.word	0x40021000
 800d4e8:	40022000 	.word	0x40022000

0800d4ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b087      	sub	sp, #28
 800d4f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800d4f6:	4b2d      	ldr	r3, [pc, #180]	; (800d5ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d4f8:	68db      	ldr	r3, [r3, #12]
 800d4fa:	f003 0303 	and.w	r3, r3, #3
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d118      	bne.n	800d534 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d502:	4b2a      	ldr	r3, [pc, #168]	; (800d5ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f003 0308 	and.w	r3, r3, #8
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d107      	bne.n	800d51e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d50e:	4b27      	ldr	r3, [pc, #156]	; (800d5ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d514:	0a1b      	lsrs	r3, r3, #8
 800d516:	f003 030f 	and.w	r3, r3, #15
 800d51a:	617b      	str	r3, [r7, #20]
 800d51c:	e005      	b.n	800d52a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d51e:	4b23      	ldr	r3, [pc, #140]	; (800d5ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	091b      	lsrs	r3, r3, #4
 800d524:	f003 030f 	and.w	r3, r3, #15
 800d528:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d52a:	4a21      	ldr	r2, [pc, #132]	; (800d5b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d532:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d534:	4b1d      	ldr	r3, [pc, #116]	; (800d5ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	f003 0303 	and.w	r3, r3, #3
 800d53c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2b02      	cmp	r3, #2
 800d542:	d003      	beq.n	800d54c <RCC_GetSysClockFreqFromPLLSource+0x60>
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2b03      	cmp	r3, #3
 800d548:	d003      	beq.n	800d552 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800d54a:	e005      	b.n	800d558 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800d54c:	4b19      	ldr	r3, [pc, #100]	; (800d5b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800d54e:	613b      	str	r3, [r7, #16]
    break;
 800d550:	e005      	b.n	800d55e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800d552:	4b18      	ldr	r3, [pc, #96]	; (800d5b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800d554:	613b      	str	r3, [r7, #16]
    break;
 800d556:	e002      	b.n	800d55e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	613b      	str	r3, [r7, #16]
    break;
 800d55c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d55e:	4b13      	ldr	r3, [pc, #76]	; (800d5ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	091b      	lsrs	r3, r3, #4
 800d564:	f003 030f 	and.w	r3, r3, #15
 800d568:	3301      	adds	r3, #1
 800d56a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d56c:	4b0f      	ldr	r3, [pc, #60]	; (800d5ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	0a1b      	lsrs	r3, r3, #8
 800d572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d576:	693a      	ldr	r2, [r7, #16]
 800d578:	fb02 f203 	mul.w	r2, r2, r3
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d582:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d584:	4b09      	ldr	r3, [pc, #36]	; (800d5ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	0e5b      	lsrs	r3, r3, #25
 800d58a:	f003 0303 	and.w	r3, r3, #3
 800d58e:	3301      	adds	r3, #1
 800d590:	005b      	lsls	r3, r3, #1
 800d592:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800d594:	693a      	ldr	r2, [r7, #16]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	fbb2 f3f3 	udiv	r3, r2, r3
 800d59c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800d59e:	683b      	ldr	r3, [r7, #0]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	371c      	adds	r7, #28
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	40021000 	.word	0x40021000
 800d5b0:	08022898 	.word	0x08022898
 800d5b4:	00f42400 	.word	0x00f42400

0800d5b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b086      	sub	sp, #24
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d040      	beq.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5d8:	2b80      	cmp	r3, #128	; 0x80
 800d5da:	d02a      	beq.n	800d632 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d5dc:	2b80      	cmp	r3, #128	; 0x80
 800d5de:	d825      	bhi.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800d5e0:	2b60      	cmp	r3, #96	; 0x60
 800d5e2:	d026      	beq.n	800d632 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d5e4:	2b60      	cmp	r3, #96	; 0x60
 800d5e6:	d821      	bhi.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800d5e8:	2b40      	cmp	r3, #64	; 0x40
 800d5ea:	d006      	beq.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 800d5ec:	2b40      	cmp	r3, #64	; 0x40
 800d5ee:	d81d      	bhi.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d009      	beq.n	800d608 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800d5f4:	2b20      	cmp	r3, #32
 800d5f6:	d010      	beq.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x62>
 800d5f8:	e018      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d5fa:	4b89      	ldr	r3, [pc, #548]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	4a88      	ldr	r2, [pc, #544]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d604:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d606:	e015      	b.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	3304      	adds	r3, #4
 800d60c:	2100      	movs	r1, #0
 800d60e:	4618      	mov	r0, r3
 800d610:	f000 fb62 	bl	800dcd8 <RCCEx_PLLSAI1_Config>
 800d614:	4603      	mov	r3, r0
 800d616:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d618:	e00c      	b.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	3320      	adds	r3, #32
 800d61e:	2100      	movs	r1, #0
 800d620:	4618      	mov	r0, r3
 800d622:	f000 fc4d 	bl	800dec0 <RCCEx_PLLSAI2_Config>
 800d626:	4603      	mov	r3, r0
 800d628:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d62a:	e003      	b.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	74fb      	strb	r3, [r7, #19]
      break;
 800d630:	e000      	b.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800d632:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d634:	7cfb      	ldrb	r3, [r7, #19]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10b      	bne.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d63a:	4b79      	ldr	r3, [pc, #484]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d63c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d640:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d648:	4975      	ldr	r1, [pc, #468]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d64a:	4313      	orrs	r3, r2
 800d64c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800d650:	e001      	b.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d652:	7cfb      	ldrb	r3, [r7, #19]
 800d654:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d047      	beq.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d66a:	d030      	beq.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800d66c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d670:	d82a      	bhi.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800d672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d676:	d02a      	beq.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800d678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d67c:	d824      	bhi.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800d67e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d682:	d008      	beq.n	800d696 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800d684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d688:	d81e      	bhi.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00a      	beq.n	800d6a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800d68e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d692:	d010      	beq.n	800d6b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d694:	e018      	b.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d696:	4b62      	ldr	r3, [pc, #392]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	4a61      	ldr	r2, [pc, #388]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d69c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6a0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d6a2:	e015      	b.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	3304      	adds	r3, #4
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f000 fb14 	bl	800dcd8 <RCCEx_PLLSAI1_Config>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d6b4:	e00c      	b.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	3320      	adds	r3, #32
 800d6ba:	2100      	movs	r1, #0
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 fbff 	bl	800dec0 <RCCEx_PLLSAI2_Config>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d6c6:	e003      	b.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	74fb      	strb	r3, [r7, #19]
      break;
 800d6cc:	e000      	b.n	800d6d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800d6ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d6d0:	7cfb      	ldrb	r3, [r7, #19]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d10b      	bne.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d6d6:	4b52      	ldr	r3, [pc, #328]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d6d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d6dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6e4:	494e      	ldr	r1, [pc, #312]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800d6ec:	e001      	b.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6ee:	7cfb      	ldrb	r3, [r7, #19]
 800d6f0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f000 809f 	beq.w	800d83e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d700:	2300      	movs	r3, #0
 800d702:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d704:	4b46      	ldr	r3, [pc, #280]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800d710:	2301      	movs	r3, #1
 800d712:	e000      	b.n	800d716 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800d714:	2300      	movs	r3, #0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00d      	beq.n	800d736 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d71a:	4b41      	ldr	r3, [pc, #260]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d71c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d71e:	4a40      	ldr	r2, [pc, #256]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d724:	6593      	str	r3, [r2, #88]	; 0x58
 800d726:	4b3e      	ldr	r3, [pc, #248]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d72a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d72e:	60bb      	str	r3, [r7, #8]
 800d730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d732:	2301      	movs	r3, #1
 800d734:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d736:	4b3b      	ldr	r3, [pc, #236]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a3a      	ldr	r2, [pc, #232]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800d73c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d740:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d742:	f7fa f96b 	bl	8007a1c <HAL_GetTick>
 800d746:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d748:	e009      	b.n	800d75e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d74a:	f7fa f967 	bl	8007a1c <HAL_GetTick>
 800d74e:	4602      	mov	r2, r0
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	2b02      	cmp	r3, #2
 800d756:	d902      	bls.n	800d75e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800d758:	2303      	movs	r3, #3
 800d75a:	74fb      	strb	r3, [r7, #19]
        break;
 800d75c:	e005      	b.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d75e:	4b31      	ldr	r3, [pc, #196]	; (800d824 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d766:	2b00      	cmp	r3, #0
 800d768:	d0ef      	beq.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800d76a:	7cfb      	ldrb	r3, [r7, #19]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d15b      	bne.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d770:	4b2b      	ldr	r3, [pc, #172]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d77a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d01f      	beq.n	800d7c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d788:	697a      	ldr	r2, [r7, #20]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d019      	beq.n	800d7c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d78e:	4b24      	ldr	r3, [pc, #144]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d798:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d79a:	4b21      	ldr	r3, [pc, #132]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7a0:	4a1f      	ldr	r2, [pc, #124]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d7a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d7a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d7aa:	4b1d      	ldr	r3, [pc, #116]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7b0:	4a1b      	ldr	r2, [pc, #108]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d7b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d7ba:	4a19      	ldr	r2, [pc, #100]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d016      	beq.n	800d7fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7cc:	f7fa f926 	bl	8007a1c <HAL_GetTick>
 800d7d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d7d2:	e00b      	b.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d7d4:	f7fa f922 	bl	8007a1c <HAL_GetTick>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	1ad3      	subs	r3, r2, r3
 800d7de:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d902      	bls.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	74fb      	strb	r3, [r7, #19]
            break;
 800d7ea:	e006      	b.n	800d7fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d7ec:	4b0c      	ldr	r3, [pc, #48]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7f2:	f003 0302 	and.w	r3, r3, #2
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d0ec      	beq.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800d7fa:	7cfb      	ldrb	r3, [r7, #19]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10c      	bne.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d800:	4b07      	ldr	r3, [pc, #28]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d806:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d810:	4903      	ldr	r1, [pc, #12]	; (800d820 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800d812:	4313      	orrs	r3, r2
 800d814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d818:	e008      	b.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d81a:	7cfb      	ldrb	r3, [r7, #19]
 800d81c:	74bb      	strb	r3, [r7, #18]
 800d81e:	e005      	b.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x274>
 800d820:	40021000 	.word	0x40021000
 800d824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d828:	7cfb      	ldrb	r3, [r7, #19]
 800d82a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d82c:	7c7b      	ldrb	r3, [r7, #17]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d105      	bne.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d832:	4ba0      	ldr	r3, [pc, #640]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d836:	4a9f      	ldr	r2, [pc, #636]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d83c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f003 0301 	and.w	r3, r3, #1
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00a      	beq.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d84a:	4b9a      	ldr	r3, [pc, #616]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d850:	f023 0203 	bic.w	r2, r3, #3
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d858:	4996      	ldr	r1, [pc, #600]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d85a:	4313      	orrs	r3, r2
 800d85c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f003 0302 	and.w	r3, r3, #2
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00a      	beq.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d86c:	4b91      	ldr	r3, [pc, #580]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d86e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d872:	f023 020c 	bic.w	r2, r3, #12
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87a:	498e      	ldr	r1, [pc, #568]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d87c:	4313      	orrs	r3, r2
 800d87e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f003 0304 	and.w	r3, r3, #4
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00a      	beq.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d88e:	4b89      	ldr	r3, [pc, #548]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d894:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d89c:	4985      	ldr	r1, [pc, #532]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f003 0308 	and.w	r3, r3, #8
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00a      	beq.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d8b0:	4b80      	ldr	r3, [pc, #512]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8be:	497d      	ldr	r1, [pc, #500]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f003 0310 	and.w	r3, r3, #16
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00a      	beq.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d8d2:	4b78      	ldr	r3, [pc, #480]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8e0:	4974      	ldr	r1, [pc, #464]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f003 0320 	and.w	r3, r3, #32
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d00a      	beq.n	800d90a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d8f4:	4b6f      	ldr	r3, [pc, #444]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d902:	496c      	ldr	r1, [pc, #432]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d904:	4313      	orrs	r3, r2
 800d906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00a      	beq.n	800d92c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d916:	4b67      	ldr	r3, [pc, #412]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d91c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d924:	4963      	ldr	r1, [pc, #396]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d926:	4313      	orrs	r3, r2
 800d928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00a      	beq.n	800d94e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d938:	4b5e      	ldr	r3, [pc, #376]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d93e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d946:	495b      	ldr	r1, [pc, #364]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d948:	4313      	orrs	r3, r2
 800d94a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d956:	2b00      	cmp	r3, #0
 800d958:	d00a      	beq.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d95a:	4b56      	ldr	r3, [pc, #344]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d95c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d960:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d968:	4952      	ldr	r1, [pc, #328]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d96a:	4313      	orrs	r3, r2
 800d96c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00a      	beq.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d97c:	4b4d      	ldr	r3, [pc, #308]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d97e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d982:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d98a:	494a      	ldr	r1, [pc, #296]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d98c:	4313      	orrs	r3, r2
 800d98e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00a      	beq.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d99e:	4b45      	ldr	r3, [pc, #276]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9ac:	4941      	ldr	r1, [pc, #260]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00a      	beq.n	800d9d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d9c0:	4b3c      	ldr	r3, [pc, #240]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d9c6:	f023 0203 	bic.w	r2, r3, #3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9ce:	4939      	ldr	r1, [pc, #228]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d028      	beq.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d9e2:	4b34      	ldr	r3, [pc, #208]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9f0:	4930      	ldr	r1, [pc, #192]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da00:	d106      	bne.n	800da10 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da02:	4b2c      	ldr	r3, [pc, #176]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	4a2b      	ldr	r2, [pc, #172]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da0c:	60d3      	str	r3, [r2, #12]
 800da0e:	e011      	b.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da18:	d10c      	bne.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	3304      	adds	r3, #4
 800da1e:	2101      	movs	r1, #1
 800da20:	4618      	mov	r0, r3
 800da22:	f000 f959 	bl	800dcd8 <RCCEx_PLLSAI1_Config>
 800da26:	4603      	mov	r3, r0
 800da28:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800da2a:	7cfb      	ldrb	r3, [r7, #19]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d001      	beq.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800da30:	7cfb      	ldrb	r3, [r7, #19]
 800da32:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d04d      	beq.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da48:	d108      	bne.n	800da5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800da4a:	4b1a      	ldr	r3, [pc, #104]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800da50:	4a18      	ldr	r2, [pc, #96]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800da56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800da5a:	e012      	b.n	800da82 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800da5c:	4b15      	ldr	r3, [pc, #84]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800da62:	4a14      	ldr	r2, [pc, #80]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da68:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800da6c:	4b11      	ldr	r3, [pc, #68]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da7a:	490e      	ldr	r1, [pc, #56]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da7c:	4313      	orrs	r3, r2
 800da7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800da8a:	d106      	bne.n	800da9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da8c:	4b09      	ldr	r3, [pc, #36]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	4a08      	ldr	r2, [pc, #32]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800da92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da96:	60d3      	str	r3, [r2, #12]
 800da98:	e020      	b.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800daa2:	d109      	bne.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800daa4:	4b03      	ldr	r3, [pc, #12]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	4a02      	ldr	r2, [pc, #8]	; (800dab4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800daaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800daae:	60d3      	str	r3, [r2, #12]
 800dab0:	e014      	b.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x524>
 800dab2:	bf00      	nop
 800dab4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dabc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dac0:	d10c      	bne.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	3304      	adds	r3, #4
 800dac6:	2101      	movs	r1, #1
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 f905 	bl	800dcd8 <RCCEx_PLLSAI1_Config>
 800dace:	4603      	mov	r3, r0
 800dad0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800dad2:	7cfb      	ldrb	r3, [r7, #19]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d001      	beq.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800dad8:	7cfb      	ldrb	r3, [r7, #19]
 800dada:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d028      	beq.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dae8:	4b7a      	ldr	r3, [pc, #488]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800daea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800daf6:	4977      	ldr	r1, [pc, #476]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800daf8:	4313      	orrs	r3, r2
 800dafa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db06:	d106      	bne.n	800db16 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800db08:	4b72      	ldr	r3, [pc, #456]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	4a71      	ldr	r2, [pc, #452]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800db0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db12:	60d3      	str	r3, [r2, #12]
 800db14:	e011      	b.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800db1e:	d10c      	bne.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	3304      	adds	r3, #4
 800db24:	2101      	movs	r1, #1
 800db26:	4618      	mov	r0, r3
 800db28:	f000 f8d6 	bl	800dcd8 <RCCEx_PLLSAI1_Config>
 800db2c:	4603      	mov	r3, r0
 800db2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800db30:	7cfb      	ldrb	r3, [r7, #19]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d001      	beq.n	800db3a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800db36:	7cfb      	ldrb	r3, [r7, #19]
 800db38:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db42:	2b00      	cmp	r3, #0
 800db44:	d01e      	beq.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800db46:	4b63      	ldr	r3, [pc, #396]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800db48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db56:	495f      	ldr	r1, [pc, #380]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800db58:	4313      	orrs	r3, r2
 800db5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db68:	d10c      	bne.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	3304      	adds	r3, #4
 800db6e:	2102      	movs	r1, #2
 800db70:	4618      	mov	r0, r3
 800db72:	f000 f8b1 	bl	800dcd8 <RCCEx_PLLSAI1_Config>
 800db76:	4603      	mov	r3, r0
 800db78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800db7a:	7cfb      	ldrb	r3, [r7, #19]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d001      	beq.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800db80:	7cfb      	ldrb	r3, [r7, #19]
 800db82:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00b      	beq.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800db90:	4b50      	ldr	r3, [pc, #320]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800db92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800db96:	f023 0204 	bic.w	r2, r3, #4
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dba0:	494c      	ldr	r1, [pc, #304]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dba2:	4313      	orrs	r3, r2
 800dba4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00b      	beq.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800dbb4:	4b47      	ldr	r3, [pc, #284]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dbb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dbba:	f023 0218 	bic.w	r2, r3, #24
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbc4:	4943      	ldr	r1, [pc, #268]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d035      	beq.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800dbd8:	4b3e      	ldr	r3, [pc, #248]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a3d      	ldr	r2, [pc, #244]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dbde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dbe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbe4:	f7f9 ff1a 	bl	8007a1c <HAL_GetTick>
 800dbe8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800dbea:	e009      	b.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800dbec:	f7f9 ff16 	bl	8007a1c <HAL_GetTick>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d902      	bls.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800dbfa:	2303      	movs	r3, #3
 800dbfc:	74fb      	strb	r3, [r7, #19]
        break;
 800dbfe:	e005      	b.n	800dc0c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800dc00:	4b34      	ldr	r3, [pc, #208]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d1ef      	bne.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800dc0c:	7cfb      	ldrb	r3, [r7, #19]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d113      	bne.n	800dc3a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800dc12:	4b30      	ldr	r3, [pc, #192]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dc14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dc18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc22:	492c      	ldr	r1, [pc, #176]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dc24:	4313      	orrs	r3, r2
 800dc26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	3320      	adds	r3, #32
 800dc2e:	2102      	movs	r1, #2
 800dc30:	4618      	mov	r0, r3
 800dc32:	f000 f945 	bl	800dec0 <RCCEx_PLLSAI2_Config>
 800dc36:	4603      	mov	r3, r0
 800dc38:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800dc3a:	7cfb      	ldrb	r3, [r7, #19]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d001      	beq.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800dc40:	7cfb      	ldrb	r3, [r7, #19]
 800dc42:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d01e      	beq.n	800dc8e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800dc50:	4b20      	ldr	r3, [pc, #128]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dc52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dc56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc60:	491c      	ldr	r1, [pc, #112]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dc62:	4313      	orrs	r3, r2
 800dc64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc72:	d10c      	bne.n	800dc8e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	3320      	adds	r3, #32
 800dc78:	2101      	movs	r1, #1
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f000 f920 	bl	800dec0 <RCCEx_PLLSAI2_Config>
 800dc80:	4603      	mov	r3, r0
 800dc82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800dc84:	7cfb      	ldrb	r3, [r7, #19]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d001      	beq.n	800dc8e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800dc8a:	7cfb      	ldrb	r3, [r7, #19]
 800dc8c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d017      	beq.n	800dcca <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800dc9a:	4b0e      	ldr	r3, [pc, #56]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dc9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dcaa:	490a      	ldr	r1, [pc, #40]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dcac:	4313      	orrs	r3, r2
 800dcae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dcb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dcbc:	d105      	bne.n	800dcca <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dcbe:	4b05      	ldr	r3, [pc, #20]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	4a04      	ldr	r2, [pc, #16]	; (800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800dcc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcc8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800dcca:	7cbb      	ldrb	r3, [r7, #18]
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3718      	adds	r7, #24
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	40021000 	.word	0x40021000

0800dcd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800dce6:	4b72      	ldr	r3, [pc, #456]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	f003 0303 	and.w	r3, r3, #3
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00e      	beq.n	800dd10 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800dcf2:	4b6f      	ldr	r3, [pc, #444]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dcf4:	68db      	ldr	r3, [r3, #12]
 800dcf6:	f003 0203 	and.w	r2, r3, #3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d103      	bne.n	800dd0a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
       ||
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d142      	bne.n	800dd90 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	73fb      	strb	r3, [r7, #15]
 800dd0e:	e03f      	b.n	800dd90 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2b03      	cmp	r3, #3
 800dd16:	d018      	beq.n	800dd4a <RCCEx_PLLSAI1_Config+0x72>
 800dd18:	2b03      	cmp	r3, #3
 800dd1a:	d825      	bhi.n	800dd68 <RCCEx_PLLSAI1_Config+0x90>
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d002      	beq.n	800dd26 <RCCEx_PLLSAI1_Config+0x4e>
 800dd20:	2b02      	cmp	r3, #2
 800dd22:	d009      	beq.n	800dd38 <RCCEx_PLLSAI1_Config+0x60>
 800dd24:	e020      	b.n	800dd68 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800dd26:	4b62      	ldr	r3, [pc, #392]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f003 0302 	and.w	r3, r3, #2
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d11d      	bne.n	800dd6e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800dd32:	2301      	movs	r3, #1
 800dd34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dd36:	e01a      	b.n	800dd6e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800dd38:	4b5d      	ldr	r3, [pc, #372]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d116      	bne.n	800dd72 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800dd44:	2301      	movs	r3, #1
 800dd46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800dd48:	e013      	b.n	800dd72 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800dd4a:	4b59      	ldr	r3, [pc, #356]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d10f      	bne.n	800dd76 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800dd56:	4b56      	ldr	r3, [pc, #344]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d109      	bne.n	800dd76 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800dd62:	2301      	movs	r3, #1
 800dd64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dd66:	e006      	b.n	800dd76 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	73fb      	strb	r3, [r7, #15]
      break;
 800dd6c:	e004      	b.n	800dd78 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800dd6e:	bf00      	nop
 800dd70:	e002      	b.n	800dd78 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800dd72:	bf00      	nop
 800dd74:	e000      	b.n	800dd78 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800dd76:	bf00      	nop
    }

    if(status == HAL_OK)
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d108      	bne.n	800dd90 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800dd7e:	4b4c      	ldr	r3, [pc, #304]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	f023 0203 	bic.w	r2, r3, #3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4949      	ldr	r1, [pc, #292]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800dd90:	7bfb      	ldrb	r3, [r7, #15]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	f040 8086 	bne.w	800dea4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800dd98:	4b45      	ldr	r3, [pc, #276]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a44      	ldr	r2, [pc, #272]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dd9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dda2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dda4:	f7f9 fe3a 	bl	8007a1c <HAL_GetTick>
 800dda8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ddaa:	e009      	b.n	800ddc0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ddac:	f7f9 fe36 	bl	8007a1c <HAL_GetTick>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	1ad3      	subs	r3, r2, r3
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	d902      	bls.n	800ddc0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800ddba:	2303      	movs	r3, #3
 800ddbc:	73fb      	strb	r3, [r7, #15]
        break;
 800ddbe:	e005      	b.n	800ddcc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ddc0:	4b3b      	ldr	r3, [pc, #236]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d1ef      	bne.n	800ddac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d168      	bne.n	800dea4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d113      	bne.n	800de00 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ddd8:	4b35      	ldr	r3, [pc, #212]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ddda:	691a      	ldr	r2, [r3, #16]
 800dddc:	4b35      	ldr	r3, [pc, #212]	; (800deb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800ddde:	4013      	ands	r3, r2
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	6892      	ldr	r2, [r2, #8]
 800dde4:	0211      	lsls	r1, r2, #8
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	68d2      	ldr	r2, [r2, #12]
 800ddea:	06d2      	lsls	r2, r2, #27
 800ddec:	4311      	orrs	r1, r2
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	6852      	ldr	r2, [r2, #4]
 800ddf2:	3a01      	subs	r2, #1
 800ddf4:	0112      	lsls	r2, r2, #4
 800ddf6:	430a      	orrs	r2, r1
 800ddf8:	492d      	ldr	r1, [pc, #180]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	610b      	str	r3, [r1, #16]
 800ddfe:	e02d      	b.n	800de5c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	2b01      	cmp	r3, #1
 800de04:	d115      	bne.n	800de32 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800de06:	4b2a      	ldr	r3, [pc, #168]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de08:	691a      	ldr	r2, [r3, #16]
 800de0a:	4b2b      	ldr	r3, [pc, #172]	; (800deb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800de0c:	4013      	ands	r3, r2
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	6892      	ldr	r2, [r2, #8]
 800de12:	0211      	lsls	r1, r2, #8
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	6912      	ldr	r2, [r2, #16]
 800de18:	0852      	lsrs	r2, r2, #1
 800de1a:	3a01      	subs	r2, #1
 800de1c:	0552      	lsls	r2, r2, #21
 800de1e:	4311      	orrs	r1, r2
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	6852      	ldr	r2, [r2, #4]
 800de24:	3a01      	subs	r2, #1
 800de26:	0112      	lsls	r2, r2, #4
 800de28:	430a      	orrs	r2, r1
 800de2a:	4921      	ldr	r1, [pc, #132]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de2c:	4313      	orrs	r3, r2
 800de2e:	610b      	str	r3, [r1, #16]
 800de30:	e014      	b.n	800de5c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800de32:	4b1f      	ldr	r3, [pc, #124]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de34:	691a      	ldr	r2, [r3, #16]
 800de36:	4b21      	ldr	r3, [pc, #132]	; (800debc <RCCEx_PLLSAI1_Config+0x1e4>)
 800de38:	4013      	ands	r3, r2
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	6892      	ldr	r2, [r2, #8]
 800de3e:	0211      	lsls	r1, r2, #8
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	6952      	ldr	r2, [r2, #20]
 800de44:	0852      	lsrs	r2, r2, #1
 800de46:	3a01      	subs	r2, #1
 800de48:	0652      	lsls	r2, r2, #25
 800de4a:	4311      	orrs	r1, r2
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	6852      	ldr	r2, [r2, #4]
 800de50:	3a01      	subs	r2, #1
 800de52:	0112      	lsls	r2, r2, #4
 800de54:	430a      	orrs	r2, r1
 800de56:	4916      	ldr	r1, [pc, #88]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de58:	4313      	orrs	r3, r2
 800de5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800de5c:	4b14      	ldr	r3, [pc, #80]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a13      	ldr	r2, [pc, #76]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800de66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de68:	f7f9 fdd8 	bl	8007a1c <HAL_GetTick>
 800de6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800de6e:	e009      	b.n	800de84 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800de70:	f7f9 fdd4 	bl	8007a1c <HAL_GetTick>
 800de74:	4602      	mov	r2, r0
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	1ad3      	subs	r3, r2, r3
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	d902      	bls.n	800de84 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800de7e:	2303      	movs	r3, #3
 800de80:	73fb      	strb	r3, [r7, #15]
          break;
 800de82:	e005      	b.n	800de90 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800de84:	4b0a      	ldr	r3, [pc, #40]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d0ef      	beq.n	800de70 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800de90:	7bfb      	ldrb	r3, [r7, #15]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d106      	bne.n	800dea4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800de96:	4b06      	ldr	r3, [pc, #24]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800de98:	691a      	ldr	r2, [r3, #16]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	699b      	ldr	r3, [r3, #24]
 800de9e:	4904      	ldr	r1, [pc, #16]	; (800deb0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800dea0:	4313      	orrs	r3, r2
 800dea2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800dea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3710      	adds	r7, #16
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	40021000 	.word	0x40021000
 800deb4:	07ff800f 	.word	0x07ff800f
 800deb8:	ff9f800f 	.word	0xff9f800f
 800debc:	f9ff800f 	.word	0xf9ff800f

0800dec0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800deca:	2300      	movs	r3, #0
 800decc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800dece:	4b72      	ldr	r3, [pc, #456]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	f003 0303 	and.w	r3, r3, #3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00e      	beq.n	800def8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800deda:	4b6f      	ldr	r3, [pc, #444]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	f003 0203 	and.w	r2, r3, #3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d103      	bne.n	800def2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
       ||
 800deee:	2b00      	cmp	r3, #0
 800def0:	d142      	bne.n	800df78 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800def2:	2301      	movs	r3, #1
 800def4:	73fb      	strb	r3, [r7, #15]
 800def6:	e03f      	b.n	800df78 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b03      	cmp	r3, #3
 800defe:	d018      	beq.n	800df32 <RCCEx_PLLSAI2_Config+0x72>
 800df00:	2b03      	cmp	r3, #3
 800df02:	d825      	bhi.n	800df50 <RCCEx_PLLSAI2_Config+0x90>
 800df04:	2b01      	cmp	r3, #1
 800df06:	d002      	beq.n	800df0e <RCCEx_PLLSAI2_Config+0x4e>
 800df08:	2b02      	cmp	r3, #2
 800df0a:	d009      	beq.n	800df20 <RCCEx_PLLSAI2_Config+0x60>
 800df0c:	e020      	b.n	800df50 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800df0e:	4b62      	ldr	r3, [pc, #392]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f003 0302 	and.w	r3, r3, #2
 800df16:	2b00      	cmp	r3, #0
 800df18:	d11d      	bne.n	800df56 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800df1a:	2301      	movs	r3, #1
 800df1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800df1e:	e01a      	b.n	800df56 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800df20:	4b5d      	ldr	r3, [pc, #372]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d116      	bne.n	800df5a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800df2c:	2301      	movs	r3, #1
 800df2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800df30:	e013      	b.n	800df5a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800df32:	4b59      	ldr	r3, [pc, #356]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d10f      	bne.n	800df5e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800df3e:	4b56      	ldr	r3, [pc, #344]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df46:	2b00      	cmp	r3, #0
 800df48:	d109      	bne.n	800df5e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800df4a:	2301      	movs	r3, #1
 800df4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800df4e:	e006      	b.n	800df5e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800df50:	2301      	movs	r3, #1
 800df52:	73fb      	strb	r3, [r7, #15]
      break;
 800df54:	e004      	b.n	800df60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800df56:	bf00      	nop
 800df58:	e002      	b.n	800df60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800df5a:	bf00      	nop
 800df5c:	e000      	b.n	800df60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800df5e:	bf00      	nop
    }

    if(status == HAL_OK)
 800df60:	7bfb      	ldrb	r3, [r7, #15]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d108      	bne.n	800df78 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800df66:	4b4c      	ldr	r3, [pc, #304]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	f023 0203 	bic.w	r2, r3, #3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4949      	ldr	r1, [pc, #292]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df74:	4313      	orrs	r3, r2
 800df76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800df78:	7bfb      	ldrb	r3, [r7, #15]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f040 8086 	bne.w	800e08c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800df80:	4b45      	ldr	r3, [pc, #276]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a44      	ldr	r2, [pc, #272]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800df86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df8c:	f7f9 fd46 	bl	8007a1c <HAL_GetTick>
 800df90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800df92:	e009      	b.n	800dfa8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800df94:	f7f9 fd42 	bl	8007a1c <HAL_GetTick>
 800df98:	4602      	mov	r2, r0
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	2b02      	cmp	r3, #2
 800dfa0:	d902      	bls.n	800dfa8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800dfa2:	2303      	movs	r3, #3
 800dfa4:	73fb      	strb	r3, [r7, #15]
        break;
 800dfa6:	e005      	b.n	800dfb4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800dfa8:	4b3b      	ldr	r3, [pc, #236]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1ef      	bne.n	800df94 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d168      	bne.n	800e08c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d113      	bne.n	800dfe8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800dfc0:	4b35      	ldr	r3, [pc, #212]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dfc2:	695a      	ldr	r2, [r3, #20]
 800dfc4:	4b35      	ldr	r3, [pc, #212]	; (800e09c <RCCEx_PLLSAI2_Config+0x1dc>)
 800dfc6:	4013      	ands	r3, r2
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	6892      	ldr	r2, [r2, #8]
 800dfcc:	0211      	lsls	r1, r2, #8
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	68d2      	ldr	r2, [r2, #12]
 800dfd2:	06d2      	lsls	r2, r2, #27
 800dfd4:	4311      	orrs	r1, r2
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	6852      	ldr	r2, [r2, #4]
 800dfda:	3a01      	subs	r2, #1
 800dfdc:	0112      	lsls	r2, r2, #4
 800dfde:	430a      	orrs	r2, r1
 800dfe0:	492d      	ldr	r1, [pc, #180]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	614b      	str	r3, [r1, #20]
 800dfe6:	e02d      	b.n	800e044 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d115      	bne.n	800e01a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800dfee:	4b2a      	ldr	r3, [pc, #168]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800dff0:	695a      	ldr	r2, [r3, #20]
 800dff2:	4b2b      	ldr	r3, [pc, #172]	; (800e0a0 <RCCEx_PLLSAI2_Config+0x1e0>)
 800dff4:	4013      	ands	r3, r2
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	6892      	ldr	r2, [r2, #8]
 800dffa:	0211      	lsls	r1, r2, #8
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	6912      	ldr	r2, [r2, #16]
 800e000:	0852      	lsrs	r2, r2, #1
 800e002:	3a01      	subs	r2, #1
 800e004:	0552      	lsls	r2, r2, #21
 800e006:	4311      	orrs	r1, r2
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	6852      	ldr	r2, [r2, #4]
 800e00c:	3a01      	subs	r2, #1
 800e00e:	0112      	lsls	r2, r2, #4
 800e010:	430a      	orrs	r2, r1
 800e012:	4921      	ldr	r1, [pc, #132]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e014:	4313      	orrs	r3, r2
 800e016:	614b      	str	r3, [r1, #20]
 800e018:	e014      	b.n	800e044 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800e01a:	4b1f      	ldr	r3, [pc, #124]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e01c:	695a      	ldr	r2, [r3, #20]
 800e01e:	4b21      	ldr	r3, [pc, #132]	; (800e0a4 <RCCEx_PLLSAI2_Config+0x1e4>)
 800e020:	4013      	ands	r3, r2
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	6892      	ldr	r2, [r2, #8]
 800e026:	0211      	lsls	r1, r2, #8
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	6952      	ldr	r2, [r2, #20]
 800e02c:	0852      	lsrs	r2, r2, #1
 800e02e:	3a01      	subs	r2, #1
 800e030:	0652      	lsls	r2, r2, #25
 800e032:	4311      	orrs	r1, r2
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	6852      	ldr	r2, [r2, #4]
 800e038:	3a01      	subs	r2, #1
 800e03a:	0112      	lsls	r2, r2, #4
 800e03c:	430a      	orrs	r2, r1
 800e03e:	4916      	ldr	r1, [pc, #88]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e040:	4313      	orrs	r3, r2
 800e042:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800e044:	4b14      	ldr	r3, [pc, #80]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4a13      	ldr	r2, [pc, #76]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e04a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e04e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e050:	f7f9 fce4 	bl	8007a1c <HAL_GetTick>
 800e054:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e056:	e009      	b.n	800e06c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800e058:	f7f9 fce0 	bl	8007a1c <HAL_GetTick>
 800e05c:	4602      	mov	r2, r0
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	2b02      	cmp	r3, #2
 800e064:	d902      	bls.n	800e06c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800e066:	2303      	movs	r3, #3
 800e068:	73fb      	strb	r3, [r7, #15]
          break;
 800e06a:	e005      	b.n	800e078 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e06c:	4b0a      	ldr	r3, [pc, #40]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e074:	2b00      	cmp	r3, #0
 800e076:	d0ef      	beq.n	800e058 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800e078:	7bfb      	ldrb	r3, [r7, #15]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d106      	bne.n	800e08c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800e07e:	4b06      	ldr	r3, [pc, #24]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e080:	695a      	ldr	r2, [r3, #20]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	699b      	ldr	r3, [r3, #24]
 800e086:	4904      	ldr	r1, [pc, #16]	; (800e098 <RCCEx_PLLSAI2_Config+0x1d8>)
 800e088:	4313      	orrs	r3, r2
 800e08a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800e08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3710      	adds	r7, #16
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	40021000 	.word	0x40021000
 800e09c:	07ff800f 	.word	0x07ff800f
 800e0a0:	ff9f800f 	.word	0xff9f800f
 800e0a4:	f9ff800f 	.word	0xf9ff800f

0800e0a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b08a      	sub	sp, #40	; 0x28
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d101      	bne.n	800e0ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e075      	b.n	800e1a6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d105      	bne.n	800e0d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 f8f7 	bl	800e2c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2203      	movs	r2, #3
 800e0d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 f868 	bl	800e1b0 <HAL_SD_InitCard>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d001      	beq.n	800e0ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e05d      	b.n	800e1a6 <HAL_SD_Init+0xfe>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e0ea:	f107 0308 	add.w	r3, r7, #8
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 fda3 	bl	800ec3c <HAL_SD_GetCardStatus>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d001      	beq.n	800e100 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	e052      	b.n	800e1a6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800e100:	7e3b      	ldrb	r3, [r7, #24]
 800e102:	b2db      	uxtb	r3, r3
 800e104:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e106:	7e7b      	ldrb	r3, [r7, #25]
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e110:	2b01      	cmp	r3, #1
 800e112:	d10a      	bne.n	800e12a <HAL_SD_Init+0x82>
 800e114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e116:	2b00      	cmp	r3, #0
 800e118:	d102      	bne.n	800e120 <HAL_SD_Init+0x78>
 800e11a:	6a3b      	ldr	r3, [r7, #32]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d004      	beq.n	800e12a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e126:	65da      	str	r2, [r3, #92]	; 0x5c
 800e128:	e00b      	b.n	800e142 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d104      	bne.n	800e13c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e138:	65da      	str	r2, [r3, #92]	; 0x5c
 800e13a:	e002      	b.n	800e142 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	4619      	mov	r1, r3
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 fe59 	bl	800ee00 <HAL_SD_ConfigWideBusOperation>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d001      	beq.n	800e158 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800e154:	2301      	movs	r3, #1
 800e156:	e026      	b.n	800e1a6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800e158:	f7f9 fc60 	bl	8007a1c <HAL_GetTick>
 800e15c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e15e:	e011      	b.n	800e184 <HAL_SD_Init+0xdc>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800e160:	f7f9 fc5c 	bl	8007a1c <HAL_GetTick>
 800e164:	4602      	mov	r2, r0
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	1ad3      	subs	r3, r2, r3
 800e16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e16e:	d109      	bne.n	800e184 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e176:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800e180:	2303      	movs	r3, #3
 800e182:	e010      	b.n	800e1a6 <HAL_SD_Init+0xfe>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 fee5 	bl	800ef54 <HAL_SD_GetCardState>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b04      	cmp	r3, #4
 800e18e:	d1e7      	bne.n	800e160 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2200      	movs	r2, #0
 800e19a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3728      	adds	r7, #40	; 0x28
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
	...

0800e1b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e1b0:	b5b0      	push	{r4, r5, r7, lr}
 800e1b2:	b08e      	sub	sp, #56	; 0x38
 800e1b4:	af04      	add	r7, sp, #16
 800e1b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800e1c8:	238a      	movs	r3, #138	; 0x8a
 800e1ca:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	699b      	ldr	r3, [r3, #24]
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d107      	bne.n	800e1e4 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f042 0210 	orr.w	r2, r2, #16
 800e1e2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681d      	ldr	r5, [r3, #0]
 800e1e8:	466c      	mov	r4, sp
 800e1ea:	f107 0314 	add.w	r3, r7, #20
 800e1ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e1f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e1f6:	f107 0308 	add.w	r3, r7, #8
 800e1fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	f002 fe23 	bl	8010e48 <SDMMC_Init>
 800e202:	4603      	mov	r3, r0
 800e204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d001      	beq.n	800e214 <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 800e210:	2301      	movs	r3, #1
 800e212:	e04f      	b.n	800e2b4 <HAL_SD_InitCard+0x104>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4618      	mov	r0, r3
 800e21a:	f002 fe5d 	bl	8010ed8 <SDMMC_PowerState_ON>
 800e21e:	4603      	mov	r3, r0
 800e220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d001      	beq.n	800e230 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 800e22c:	2301      	movs	r3, #1
 800e22e:	e041      	b.n	800e2b4 <HAL_SD_InitCard+0x104>
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 ff6d 	bl	800f110 <SD_PowerON>
 800e236:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00b      	beq.n	800e256 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2201      	movs	r2, #1
 800e242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e24a:	6a3b      	ldr	r3, [r7, #32]
 800e24c:	431a      	orrs	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	e02e      	b.n	800e2b4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f000 fe9c 	bl	800ef94 <SD_InitCard>
 800e25c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e25e:	6a3b      	ldr	r3, [r7, #32]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d00b      	beq.n	800e27c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2201      	movs	r2, #1
 800e268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e270:	6a3b      	ldr	r3, [r7, #32]
 800e272:	431a      	orrs	r2, r3
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e278:	2301      	movs	r3, #1
 800e27a:	e01b      	b.n	800e2b4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e284:	4618      	mov	r0, r3
 800e286:	f002 febd 	bl	8011004 <SDMMC_CmdBlockLength>
 800e28a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e28c:	6a3b      	ldr	r3, [r7, #32]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d00f      	beq.n	800e2b2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a09      	ldr	r2, [pc, #36]	; (800e2bc <HAL_SD_InitCard+0x10c>)
 800e298:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e29e:	6a3b      	ldr	r3, [r7, #32]
 800e2a0:	431a      	orrs	r2, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	e000      	b.n	800e2b4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800e2b2:	2300      	movs	r3, #0
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3728      	adds	r7, #40	; 0x28
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bdb0      	pop	{r4, r5, r7, pc}
 800e2bc:	1fe00fff 	.word	0x1fe00fff

0800e2c0 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800e2c8:	bf00      	nop
 800e2ca:	370c      	adds	r7, #12
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b08c      	sub	sp, #48	; 0x30
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	607a      	str	r2, [r7, #4]
 800e2e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d107      	bne.n	800e2fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e08d      	b.n	800e418 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e302:	b2db      	uxtb	r3, r3
 800e304:	2b01      	cmp	r3, #1
 800e306:	f040 8086 	bne.w	800e416 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2200      	movs	r2, #0
 800e30e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	441a      	add	r2, r3
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d907      	bls.n	800e32e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e322:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	e074      	b.n	800e418 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2203      	movs	r2, #3
 800e332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	2200      	movs	r2, #0
 800e33c:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	025a      	lsls	r2, r3, #9
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e350:	2b01      	cmp	r3, #1
 800e352:	d002      	beq.n	800e35a <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 800e354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e356:	025b      	lsls	r3, r3, #9
 800e358:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e35a:	f04f 33ff 	mov.w	r3, #4294967295
 800e35e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	025b      	lsls	r3, r3, #9
 800e364:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e366:	2390      	movs	r3, #144	; 0x90
 800e368:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e36a:	2302      	movs	r3, #2
 800e36c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e36e:	2300      	movs	r3, #0
 800e370:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800e372:	2300      	movs	r3, #0
 800e374:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f107 0210 	add.w	r2, r7, #16
 800e37e:	4611      	mov	r1, r2
 800e380:	4618      	mov	r0, r3
 800e382:	f002 fe13 	bl	8010fac <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68da      	ldr	r2, [r3, #12]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e394:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	68ba      	ldr	r2, [r7, #8]
 800e39c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d90a      	bls.n	800e3c2 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2282      	movs	r2, #130	; 0x82
 800e3b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f002 fe69 	bl	8011090 <SDMMC_CmdReadMultiBlock>
 800e3be:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e3c0:	e009      	b.n	800e3d6 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2281      	movs	r2, #129	; 0x81
 800e3c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f002 fe3b 	bl	801104a <SDMMC_CmdReadSingleBlock>
 800e3d4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800e3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d012      	beq.n	800e402 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a0f      	ldr	r2, [pc, #60]	; (800e420 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e3e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ea:	431a      	orrs	r2, r3
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	e00a      	b.n	800e418 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e410:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800e412:	2300      	movs	r3, #0
 800e414:	e000      	b.n	800e418 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800e416:	2302      	movs	r3, #2
  }
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3730      	adds	r7, #48	; 0x30
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	1fe00fff 	.word	0x1fe00fff

0800e424 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b08c      	sub	sp, #48	; 0x30
 800e428:	af00      	add	r7, sp, #0
 800e42a:	60f8      	str	r0, [r7, #12]
 800e42c:	60b9      	str	r1, [r7, #8]
 800e42e:	607a      	str	r2, [r7, #4]
 800e430:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d107      	bne.n	800e44c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e440:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e448:	2301      	movs	r3, #1
 800e44a:	e08d      	b.n	800e568 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e452:	b2db      	uxtb	r3, r3
 800e454:	2b01      	cmp	r3, #1
 800e456:	f040 8086 	bne.w	800e566 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2200      	movs	r2, #0
 800e45e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	441a      	add	r2, r3
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d907      	bls.n	800e47e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e472:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e47a:	2301      	movs	r3, #1
 800e47c:	e074      	b.n	800e568 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2203      	movs	r2, #3
 800e482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2200      	movs	r2, #0
 800e48c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	68ba      	ldr	r2, [r7, #8]
 800e492:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	025a      	lsls	r2, r3, #9
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d002      	beq.n	800e4aa <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a6:	025b      	lsls	r3, r3, #9
 800e4a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ae:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	025b      	lsls	r3, r3, #9
 800e4b4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e4b6:	2390      	movs	r3, #144	; 0x90
 800e4b8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f107 0210 	add.w	r2, r7, #16
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f002 fd6b 	bl	8010fac <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68da      	ldr	r2, [r3, #12]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4e4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	2b01      	cmp	r3, #1
 800e4fa:	d90a      	bls.n	800e512 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	22a0      	movs	r2, #160	; 0xa0
 800e500:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e508:	4618      	mov	r0, r3
 800e50a:	f002 fe07 	bl	801111c <SDMMC_CmdWriteMultiBlock>
 800e50e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e510:	e009      	b.n	800e526 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2290      	movs	r2, #144	; 0x90
 800e516:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e51e:	4618      	mov	r0, r3
 800e520:	f002 fdd9 	bl	80110d6 <SDMMC_CmdWriteSingleBlock>
 800e524:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d012      	beq.n	800e552 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a0f      	ldr	r2, [pc, #60]	; (800e570 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e532:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53a:	431a      	orrs	r2, r3
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2200      	movs	r2, #0
 800e54c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	e00a      	b.n	800e568 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e560:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800e562:	2300      	movs	r3, #0
 800e564:	e000      	b.n	800e568 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800e566:	2302      	movs	r3, #2
  }
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3730      	adds	r7, #48	; 0x30
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	1fe00fff 	.word	0x1fe00fff

0800e574 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e580:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d008      	beq.n	800e5a2 <HAL_SD_IRQHandler+0x2e>
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f003 0308 	and.w	r3, r3, #8
 800e596:	2b00      	cmp	r3, #0
 800e598:	d003      	beq.n	800e5a2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f001 f928 	bl	800f7f0 <SD_Read_IT>
 800e5a0:	e199      	b.n	800e8d6 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 80ae 	beq.w	800e70e <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e5ba:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	6812      	ldr	r2, [r2, #0]
 800e5c6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800e5ca:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800e5ce:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e5de:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	68da      	ldr	r2, [r3, #12]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e5ee:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f003 0308 	and.w	r3, r3, #8
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d038      	beq.n	800e66c <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f003 0302 	and.w	r3, r3, #2
 800e600:	2b00      	cmp	r3, #0
 800e602:	d104      	bne.n	800e60e <HAL_SD_IRQHandler+0x9a>
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f003 0320 	and.w	r3, r3, #32
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d011      	beq.n	800e632 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4618      	mov	r0, r3
 800e614:	f002 fda6 	bl	8011164 <SDMMC_CmdStopTransfer>
 800e618:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d008      	beq.n	800e632 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	431a      	orrs	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f000 f957 	bl	800e8e0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4aa0      	ldr	r2, [pc, #640]	; (800e8b8 <HAL_SD_IRQHandler+0x344>)
 800e638:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2201      	movs	r2, #1
 800e63e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2200      	movs	r2, #0
 800e646:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f003 0301 	and.w	r3, r3, #1
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d104      	bne.n	800e65c <HAL_SD_IRQHandler+0xe8>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f003 0302 	and.w	r3, r3, #2
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d003      	beq.n	800e664 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f7f9 f967 	bl	8007930 <HAL_SD_RxCpltCallback>
 800e662:	e138      	b.n	800e8d6 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f7f9 f959 	bl	800791c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800e66a:	e134      	b.n	800e8d6 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e672:	2b00      	cmp	r3, #0
 800e674:	f000 812f 	beq.w	800e8d6 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2200      	movs	r2, #0
 800e67e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2200      	movs	r2, #0
 800e686:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2200      	movs	r2, #0
 800e68e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f003 0302 	and.w	r3, r3, #2
 800e696:	2b00      	cmp	r3, #0
 800e698:	d104      	bne.n	800e6a4 <HAL_SD_IRQHandler+0x130>
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f003 0320 	and.w	r3, r3, #32
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d011      	beq.n	800e6c8 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f002 fd5b 	bl	8011164 <SDMMC_CmdStopTransfer>
 800e6ae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d008      	beq.n	800e6c8 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	431a      	orrs	r2, r3
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 f90c 	bl	800e8e0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f003 0310 	and.w	r3, r3, #16
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d104      	bne.n	800e6ea <HAL_SD_IRQHandler+0x176>
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f003 0320 	and.w	r3, r3, #32
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d002      	beq.n	800e6f0 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7f9 f916 	bl	800791c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f003 0301 	and.w	r3, r3, #1
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d105      	bne.n	800e706 <HAL_SD_IRQHandler+0x192>
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f003 0302 	and.w	r3, r3, #2
 800e700:	2b00      	cmp	r3, #0
 800e702:	f000 80e8 	beq.w	800e8d6 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f7f9 f912 	bl	8007930 <HAL_SD_RxCpltCallback>
}
 800e70c:	e0e3      	b.n	800e8d6 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d008      	beq.n	800e72e <HAL_SD_IRQHandler+0x1ba>
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f003 0308 	and.w	r3, r3, #8
 800e722:	2b00      	cmp	r3, #0
 800e724:	d003      	beq.n	800e72e <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f001 f8b3 	bl	800f892 <SD_Write_IT>
 800e72c:	e0d3      	b.n	800e8d6 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e734:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f000 809d 	beq.w	800e878 <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e744:	f003 0302 	and.w	r3, r3, #2
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d005      	beq.n	800e758 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e750:	f043 0202 	orr.w	r2, r3, #2
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e75e:	f003 0308 	and.w	r3, r3, #8
 800e762:	2b00      	cmp	r3, #0
 800e764:	d005      	beq.n	800e772 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76a:	f043 0208 	orr.w	r2, r3, #8
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e778:	f003 0320 	and.w	r3, r3, #32
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d005      	beq.n	800e78c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e784:	f043 0220 	orr.w	r2, r3, #32
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e792:	f003 0310 	and.w	r3, r3, #16
 800e796:	2b00      	cmp	r3, #0
 800e798:	d005      	beq.n	800e7a6 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e79e:	f043 0210 	orr.w	r2, r3, #16
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4a43      	ldr	r2, [pc, #268]	; (800e8b8 <HAL_SD_IRQHandler+0x344>)
 800e7ac:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e7bc:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	68da      	ldr	r2, [r3, #12]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7cc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e7dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	68da      	ldr	r2, [r3, #12]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e7ec:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f002 fcb6 	bl	8011164 <SDMMC_CmdStopTransfer>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7fe:	431a      	orrs	r2, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	68da      	ldr	r2, [r3, #12]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e812:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e81c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f003 0308 	and.w	r3, r3, #8
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00a      	beq.n	800e83e <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2200      	movs	r2, #0
 800e834:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 f852 	bl	800e8e0 <HAL_SD_ErrorCallback>
}
 800e83c:	e04b      	b.n	800e8d6 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e844:	2b00      	cmp	r3, #0
 800e846:	d046      	beq.n	800e8d6 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d042      	beq.n	800e8d6 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e85e:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2200      	movs	r2, #0
 800e866:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 f835 	bl	800e8e0 <HAL_SD_ErrorCallback>
}
 800e876:	e02e      	b.n	800e8d6 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e87e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e882:	2b00      	cmp	r3, #0
 800e884:	d027      	beq.n	800e8d6 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e88e:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e896:	f003 0304 	and.w	r3, r3, #4
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d10e      	bne.n	800e8bc <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f003 0320 	and.w	r3, r3, #32
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d003      	beq.n	800e8b0 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f001 f870 	bl	800f98e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800e8ae:	e012      	b.n	800e8d6 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f001 f858 	bl	800f966 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800e8b6:	e00e      	b.n	800e8d6 <HAL_SD_IRQHandler+0x362>
 800e8b8:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f003 0320 	and.w	r3, r3, #32
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d003      	beq.n	800e8ce <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f001 f857 	bl	800f97a <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800e8cc:	e003      	b.n	800e8d6 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f001 f83f 	bl	800f952 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800e8d4:	e7ff      	b.n	800e8d6 <HAL_SD_IRQHandler+0x362>
 800e8d6:	bf00      	nop
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop

0800e8e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e8e8:	bf00      	nop
 800e8ea:	370c      	adds	r7, #12
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr

0800e8f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e902:	0f9b      	lsrs	r3, r3, #30
 800e904:	b2da      	uxtb	r2, r3
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e90e:	0e9b      	lsrs	r3, r3, #26
 800e910:	b2db      	uxtb	r3, r3
 800e912:	f003 030f 	and.w	r3, r3, #15
 800e916:	b2da      	uxtb	r2, r3
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e920:	0e1b      	lsrs	r3, r3, #24
 800e922:	b2db      	uxtb	r3, r3
 800e924:	f003 0303 	and.w	r3, r3, #3
 800e928:	b2da      	uxtb	r2, r3
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e932:	0c1b      	lsrs	r3, r3, #16
 800e934:	b2da      	uxtb	r2, r3
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e93e:	0a1b      	lsrs	r3, r3, #8
 800e940:	b2da      	uxtb	r2, r3
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e94a:	b2da      	uxtb	r2, r3
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e954:	0d1b      	lsrs	r3, r3, #20
 800e956:	b29a      	uxth	r2, r3
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e960:	0c1b      	lsrs	r3, r3, #16
 800e962:	b2db      	uxtb	r3, r3
 800e964:	f003 030f 	and.w	r3, r3, #15
 800e968:	b2da      	uxtb	r2, r3
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e972:	0bdb      	lsrs	r3, r3, #15
 800e974:	b2db      	uxtb	r3, r3
 800e976:	f003 0301 	and.w	r3, r3, #1
 800e97a:	b2da      	uxtb	r2, r3
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e984:	0b9b      	lsrs	r3, r3, #14
 800e986:	b2db      	uxtb	r3, r3
 800e988:	f003 0301 	and.w	r3, r3, #1
 800e98c:	b2da      	uxtb	r2, r3
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e996:	0b5b      	lsrs	r3, r3, #13
 800e998:	b2db      	uxtb	r3, r3
 800e99a:	f003 0301 	and.w	r3, r3, #1
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9a8:	0b1b      	lsrs	r3, r3, #12
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	f003 0301 	and.w	r3, r3, #1
 800e9b0:	b2da      	uxtb	r2, r3
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d163      	bne.n	800ea8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9c8:	009a      	lsls	r2, r3, #2
 800e9ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e9ce:	4013      	ands	r3, r2
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e9d4:	0f92      	lsrs	r2, r2, #30
 800e9d6:	431a      	orrs	r2, r3
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9e0:	0edb      	lsrs	r3, r3, #27
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	f003 0307 	and.w	r3, r3, #7
 800e9e8:	b2da      	uxtb	r2, r3
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9f2:	0e1b      	lsrs	r3, r3, #24
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	f003 0307 	and.w	r3, r3, #7
 800e9fa:	b2da      	uxtb	r2, r3
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea04:	0d5b      	lsrs	r3, r3, #21
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	f003 0307 	and.w	r3, r3, #7
 800ea0c:	b2da      	uxtb	r2, r3
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea16:	0c9b      	lsrs	r3, r3, #18
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	f003 0307 	and.w	r3, r3, #7
 800ea1e:	b2da      	uxtb	r2, r3
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea28:	0bdb      	lsrs	r3, r3, #15
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	f003 0307 	and.w	r3, r3, #7
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	691b      	ldr	r3, [r3, #16]
 800ea3a:	1c5a      	adds	r2, r3, #1
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	7e1b      	ldrb	r3, [r3, #24]
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	f003 0307 	and.w	r3, r3, #7
 800ea4a:	3302      	adds	r3, #2
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ea56:	fb02 f203 	mul.w	r2, r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	7a1b      	ldrb	r3, [r3, #8]
 800ea62:	b2db      	uxtb	r3, r3
 800ea64:	f003 030f 	and.w	r3, r3, #15
 800ea68:	2201      	movs	r2, #1
 800ea6a:	409a      	lsls	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ea78:	0a52      	lsrs	r2, r2, #9
 800ea7a:	fb02 f203 	mul.w	r2, r2, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea88:	659a      	str	r2, [r3, #88]	; 0x58
 800ea8a:	e031      	b.n	800eaf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d11d      	bne.n	800ead0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea98:	041b      	lsls	r3, r3, #16
 800ea9a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaa2:	0c1b      	lsrs	r3, r3, #16
 800eaa4:	431a      	orrs	r2, r3
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	691b      	ldr	r3, [r3, #16]
 800eaae:	3301      	adds	r3, #1
 800eab0:	029a      	lsls	r2, r3, #10
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eac4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	659a      	str	r2, [r3, #88]	; 0x58
 800eace:	e00f      	b.n	800eaf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a58      	ldr	r2, [pc, #352]	; (800ec38 <HAL_SD_GetCardCSD+0x344>)
 800ead6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eadc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2201      	movs	r2, #1
 800eae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800eaec:	2301      	movs	r3, #1
 800eaee:	e09d      	b.n	800ec2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaf4:	0b9b      	lsrs	r3, r3, #14
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	f003 0301 	and.w	r3, r3, #1
 800eafc:	b2da      	uxtb	r2, r3
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb06:	09db      	lsrs	r3, r3, #7
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb0e:	b2da      	uxtb	r2, r3
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb1e:	b2da      	uxtb	r2, r3
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb28:	0fdb      	lsrs	r3, r3, #31
 800eb2a:	b2da      	uxtb	r2, r3
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb34:	0f5b      	lsrs	r3, r3, #29
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	f003 0303 	and.w	r3, r3, #3
 800eb3c:	b2da      	uxtb	r2, r3
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb46:	0e9b      	lsrs	r3, r3, #26
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	f003 0307 	and.w	r3, r3, #7
 800eb4e:	b2da      	uxtb	r2, r3
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb58:	0d9b      	lsrs	r3, r3, #22
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	f003 030f 	and.w	r3, r3, #15
 800eb60:	b2da      	uxtb	r2, r3
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb6a:	0d5b      	lsrs	r3, r3, #21
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	f003 0301 	and.w	r3, r3, #1
 800eb72:	b2da      	uxtb	r2, r3
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb86:	0c1b      	lsrs	r3, r3, #16
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	f003 0301 	and.w	r3, r3, #1
 800eb8e:	b2da      	uxtb	r2, r3
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb9a:	0bdb      	lsrs	r3, r3, #15
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	f003 0301 	and.w	r3, r3, #1
 800eba2:	b2da      	uxtb	r2, r3
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebae:	0b9b      	lsrs	r3, r3, #14
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	f003 0301 	and.w	r3, r3, #1
 800ebb6:	b2da      	uxtb	r2, r3
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebc2:	0b5b      	lsrs	r3, r3, #13
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	f003 0301 	and.w	r3, r3, #1
 800ebca:	b2da      	uxtb	r2, r3
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebd6:	0b1b      	lsrs	r3, r3, #12
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	f003 0301 	and.w	r3, r3, #1
 800ebde:	b2da      	uxtb	r2, r3
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebea:	0a9b      	lsrs	r3, r3, #10
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	f003 0303 	and.w	r3, r3, #3
 800ebf2:	b2da      	uxtb	r2, r3
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebfe:	0a1b      	lsrs	r3, r3, #8
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	f003 0303 	and.w	r3, r3, #3
 800ec06:	b2da      	uxtb	r2, r3
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec12:	085b      	lsrs	r3, r3, #1
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec1a:	b2da      	uxtb	r2, r3
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	2201      	movs	r2, #1
 800ec26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ec2a:	2300      	movs	r3, #0
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	1fe00fff 	.word	0x1fe00fff

0800ec3c <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b094      	sub	sp, #80	; 0x50
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ec46:	2300      	movs	r3, #0
 800ec48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ec4c:	f107 0308 	add.w	r3, r7, #8
 800ec50:	4619      	mov	r1, r3
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 fb6e 	bl	800f334 <SD_SendSDStatus>
 800ec58:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d011      	beq.n	800ec84 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	4a4f      	ldr	r2, [pc, #316]	; (800eda4 <HAL_SD_GetCardStatus+0x168>)
 800ec66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec6e:	431a      	orrs	r2, r3
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2201      	movs	r2, #1
 800ec78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ec82:	e070      	b.n	800ed66 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	099b      	lsrs	r3, r3, #6
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	f003 0303 	and.w	r3, r3, #3
 800ec8e:	b2da      	uxtb	r2, r3
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	095b      	lsrs	r3, r3, #5
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	f003 0301 	and.w	r3, r3, #1
 800ec9e:	b2da      	uxtb	r2, r3
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	0a1b      	lsrs	r3, r3, #8
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ecae:	b29a      	uxth	r2, r3
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	0e1b      	lsrs	r3, r3, #24
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	4313      	orrs	r3, r2
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	061a      	lsls	r2, r3, #24
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	021b      	lsls	r3, r3, #8
 800ecc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecca:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	0a1b      	lsrs	r3, r3, #8
 800ecd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ecd4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	0e1b      	lsrs	r3, r3, #24
 800ecda:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	b2da      	uxtb	r2, r3
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	0a1b      	lsrs	r3, r3, #8
 800ecec:	b2da      	uxtb	r2, r3
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	0d1b      	lsrs	r3, r3, #20
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	f003 030f 	and.w	r3, r3, #15
 800ecfc:	b2da      	uxtb	r2, r3
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	0c1b      	lsrs	r3, r3, #16
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ed0c:	b29a      	uxth	r2, r3
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	4313      	orrs	r3, r2
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	0a9b      	lsrs	r3, r3, #10
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed28:	b2da      	uxtb	r2, r3
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	0a1b      	lsrs	r3, r3, #8
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	f003 0303 	and.w	r3, r3, #3
 800ed38:	b2da      	uxtb	r2, r3
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	091b      	lsrs	r3, r3, #4
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	f003 030f 	and.w	r3, r3, #15
 800ed48:	b2da      	uxtb	r2, r3
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	f003 030f 	and.w	r3, r3, #15
 800ed56:	b2da      	uxtb	r2, r3
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	0e1b      	lsrs	r3, r3, #24
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f002 f948 	bl	8011004 <SDMMC_CmdBlockLength>
 800ed74:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ed76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d00d      	beq.n	800ed98 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a08      	ldr	r2, [pc, #32]	; (800eda4 <HAL_SD_GetCardStatus+0x168>)
 800ed82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ed92:	2301      	movs	r3, #1
 800ed94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ed98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3750      	adds	r7, #80	; 0x50
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}
 800eda4:	1fe00fff 	.word	0x1fe00fff

0800eda8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	370c      	adds	r7, #12
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr

0800ee00 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ee00:	b5b0      	push	{r4, r5, r7, lr}
 800ee02:	b08e      	sub	sp, #56	; 0x38
 800ee04:	af04      	add	r7, sp, #16
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2203      	movs	r2, #3
 800ee14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee1c:	2b03      	cmp	r3, #3
 800ee1e:	d02e      	beq.n	800ee7e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee26:	d106      	bne.n	800ee36 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	639a      	str	r2, [r3, #56]	; 0x38
 800ee34:	e029      	b.n	800ee8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee3c:	d10a      	bne.n	800ee54 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 fb70 	bl	800f524 <SD_WideBus_Enable>
 800ee44:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee4a:	6a3b      	ldr	r3, [r7, #32]
 800ee4c:	431a      	orrs	r2, r3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	639a      	str	r2, [r3, #56]	; 0x38
 800ee52:	e01a      	b.n	800ee8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d10a      	bne.n	800ee70 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 fbad 	bl	800f5ba <SD_WideBus_Disable>
 800ee60:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee66:	6a3b      	ldr	r3, [r7, #32]
 800ee68:	431a      	orrs	r2, r3
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	639a      	str	r2, [r3, #56]	; 0x38
 800ee6e:	e00c      	b.n	800ee8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	639a      	str	r2, [r3, #56]	; 0x38
 800ee7c:	e005      	b.n	800ee8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d007      	beq.n	800eea2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a2e      	ldr	r2, [pc, #184]	; (800ef50 <HAL_SD_ConfigWideBusOperation+0x150>)
 800ee98:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eea0:	e034      	b.n	800ef0c <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	617b      	str	r3, [r7, #20]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	695b      	ldr	r3, [r3, #20]
 800eebc:	2b02      	cmp	r3, #2
 800eebe:	d903      	bls.n	800eec8 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	695b      	ldr	r3, [r3, #20]
 800eec4:	61bb      	str	r3, [r7, #24]
 800eec6:	e012      	b.n	800eeee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eed0:	d103      	bne.n	800eeda <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	695b      	ldr	r3, [r3, #20]
 800eed6:	61bb      	str	r3, [r7, #24]
 800eed8:	e009      	b.n	800eeee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eee2:	d102      	bne.n	800eeea <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800eee4:	2302      	movs	r3, #2
 800eee6:	61bb      	str	r3, [r7, #24]
 800eee8:	e001      	b.n	800eeee <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800eeea:	2303      	movs	r3, #3
 800eeec:	61bb      	str	r3, [r7, #24]
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681d      	ldr	r5, [r3, #0]
 800eef2:	466c      	mov	r4, sp
 800eef4:	f107 0314 	add.w	r3, r7, #20
 800eef8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eefc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ef00:	f107 0308 	add.w	r3, r7, #8
 800ef04:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ef06:	4628      	mov	r0, r5
 800ef08:	f001 ff9e 	bl	8010e48 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ef14:	4618      	mov	r0, r3
 800ef16:	f002 f875 	bl	8011004 <SDMMC_CmdBlockLength>
 800ef1a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ef1c:	6a3b      	ldr	r3, [r7, #32]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d00c      	beq.n	800ef3c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4a0a      	ldr	r2, [pc, #40]	; (800ef50 <HAL_SD_ConfigWideBusOperation+0x150>)
 800ef28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef2e:	6a3b      	ldr	r3, [r7, #32]
 800ef30:	431a      	orrs	r2, r3
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ef36:	2301      	movs	r3, #1
 800ef38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ef44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3728      	adds	r7, #40	; 0x28
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ef50:	1fe00fff 	.word	0x1fe00fff

0800ef54 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b086      	sub	sp, #24
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ef60:	f107 030c 	add.w	r3, r7, #12
 800ef64:	4619      	mov	r1, r3
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 fab4 	bl	800f4d4 <SD_SendStatus>
 800ef6c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d005      	beq.n	800ef80 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	431a      	orrs	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	0a5b      	lsrs	r3, r3, #9
 800ef84:	f003 030f 	and.w	r3, r3, #15
 800ef88:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ef8a:	693b      	ldr	r3, [r7, #16]
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3718      	adds	r7, #24
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b090      	sub	sp, #64	; 0x40
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f001 ffa9 	bl	8010efc <SDMMC_GetPowerState>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d102      	bne.n	800efb6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800efb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800efb4:	e0a7      	b.n	800f106 <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efba:	2b03      	cmp	r3, #3
 800efbc:	d02e      	beq.n	800f01c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f002 f9ee 	bl	80113a4 <SDMMC_CmdSendCID>
 800efc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800efca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d001      	beq.n	800efd4 <SD_InitCard+0x40>
    {
      return errorstate;
 800efd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efd2:	e098      	b.n	800f106 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2100      	movs	r1, #0
 800efda:	4618      	mov	r0, r3
 800efdc:	f001 ffd3 	bl	8010f86 <SDMMC_GetResponse>
 800efe0:	4602      	mov	r2, r0
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2104      	movs	r1, #4
 800efec:	4618      	mov	r0, r3
 800efee:	f001 ffca 	bl	8010f86 <SDMMC_GetResponse>
 800eff2:	4602      	mov	r2, r0
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	2108      	movs	r1, #8
 800effe:	4618      	mov	r0, r3
 800f000:	f001 ffc1 	bl	8010f86 <SDMMC_GetResponse>
 800f004:	4602      	mov	r2, r0
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	210c      	movs	r1, #12
 800f010:	4618      	mov	r0, r3
 800f012:	f001 ffb8 	bl	8010f86 <SDMMC_GetResponse>
 800f016:	4602      	mov	r2, r0
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f020:	2b03      	cmp	r3, #3
 800f022:	d00d      	beq.n	800f040 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f107 020e 	add.w	r2, r7, #14
 800f02c:	4611      	mov	r1, r2
 800f02e:	4618      	mov	r0, r3
 800f030:	f002 f9f7 	bl	8011422 <SDMMC_CmdSetRelAdd>
 800f034:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d001      	beq.n	800f040 <SD_InitCard+0xac>
    {
      return errorstate;
 800f03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f03e:	e062      	b.n	800f106 <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f044:	2b03      	cmp	r3, #3
 800f046:	d036      	beq.n	800f0b6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f048:	89fb      	ldrh	r3, [r7, #14]
 800f04a:	461a      	mov	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681a      	ldr	r2, [r3, #0]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f058:	041b      	lsls	r3, r3, #16
 800f05a:	4619      	mov	r1, r3
 800f05c:	4610      	mov	r0, r2
 800f05e:	f002 f9c0 	bl	80113e2 <SDMMC_CmdSendCSD>
 800f062:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f066:	2b00      	cmp	r3, #0
 800f068:	d001      	beq.n	800f06e <SD_InitCard+0xda>
    {
      return errorstate;
 800f06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f06c:	e04b      	b.n	800f106 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2100      	movs	r1, #0
 800f074:	4618      	mov	r0, r3
 800f076:	f001 ff86 	bl	8010f86 <SDMMC_GetResponse>
 800f07a:	4602      	mov	r2, r0
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2104      	movs	r1, #4
 800f086:	4618      	mov	r0, r3
 800f088:	f001 ff7d 	bl	8010f86 <SDMMC_GetResponse>
 800f08c:	4602      	mov	r2, r0
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2108      	movs	r1, #8
 800f098:	4618      	mov	r0, r3
 800f09a:	f001 ff74 	bl	8010f86 <SDMMC_GetResponse>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	210c      	movs	r1, #12
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f001 ff6b 	bl	8010f86 <SDMMC_GetResponse>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2104      	movs	r1, #4
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f001 ff62 	bl	8010f86 <SDMMC_GetResponse>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	0d1a      	lsrs	r2, r3, #20
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f0ca:	f107 0310 	add.w	r3, r7, #16
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f7ff fc0f 	bl	800e8f4 <HAL_SD_GetCardCSD>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d002      	beq.n	800f0e2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f0dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f0e0:	e011      	b.n	800f106 <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6819      	ldr	r1, [r3, #0]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0ea:	041b      	lsls	r3, r3, #16
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	f04f 0300 	mov.w	r3, #0
 800f0f2:	4608      	mov	r0, r1
 800f0f4:	f002 f86c 	bl	80111d0 <SDMMC_CmdSelDesel>
 800f0f8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d001      	beq.n	800f104 <SD_InitCard+0x170>
  {
    return errorstate;
 800f100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f102:	e000      	b.n	800f106 <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f104:	2300      	movs	r3, #0
}
 800f106:	4618      	mov	r0, r3
 800f108:	3740      	adds	r7, #64	; 0x40
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
	...

0800f110 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b088      	sub	sp, #32
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f118:	2300      	movs	r3, #0
 800f11a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800f11c:	2300      	movs	r3, #0
 800f11e:	61fb      	str	r3, [r7, #28]
 800f120:	2300      	movs	r3, #0
 800f122:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800f124:	f7f8 fc7a 	bl	8007a1c <HAL_GetTick>
 800f128:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	4618      	mov	r0, r3
 800f130:	f002 f872 	bl	8011218 <SDMMC_CmdGoIdleState>
 800f134:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d001      	beq.n	800f140 <SD_PowerON+0x30>
  {
    return errorstate;
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	e0f2      	b.n	800f326 <SD_PowerON+0x216>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4618      	mov	r0, r3
 800f146:	f002 f885 	bl	8011254 <SDMMC_CmdOperCond>
 800f14a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00d      	beq.n	800f16e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2200      	movs	r2, #0
 800f156:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f002 f85b 	bl	8011218 <SDMMC_CmdGoIdleState>
 800f162:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d004      	beq.n	800f174 <SD_PowerON+0x64>
    {
      return errorstate;
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	e0db      	b.n	800f326 <SD_PowerON+0x216>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2201      	movs	r2, #1
 800f172:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d137      	bne.n	800f1ec <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2100      	movs	r1, #0
 800f182:	4618      	mov	r0, r3
 800f184:	f002 f886 	bl	8011294 <SDMMC_CmdAppCommand>
 800f188:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d02d      	beq.n	800f1ec <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f190:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f194:	e0c7      	b.n	800f326 <SD_PowerON+0x216>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2100      	movs	r1, #0
 800f19c:	4618      	mov	r0, r3
 800f19e:	f002 f879 	bl	8011294 <SDMMC_CmdAppCommand>
 800f1a2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d001      	beq.n	800f1ae <SD_PowerON+0x9e>
    {
      return errorstate;
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	e0bb      	b.n	800f326 <SD_PowerON+0x216>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	495f      	ldr	r1, [pc, #380]	; (800f330 <SD_PowerON+0x220>)
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f002 f890 	bl	80112da <SDMMC_CmdAppOperCommand>
 800f1ba:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d002      	beq.n	800f1c8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f1c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f1c6:	e0ae      	b.n	800f326 <SD_PowerON+0x216>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f001 fed9 	bl	8010f86 <SDMMC_GetResponse>
 800f1d4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	0fdb      	lsrs	r3, r3, #31
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	d101      	bne.n	800f1e2 <SD_PowerON+0xd2>
 800f1de:	2301      	movs	r3, #1
 800f1e0:	e000      	b.n	800f1e4 <SD_PowerON+0xd4>
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	61bb      	str	r3, [r7, #24]

    count++;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d802      	bhi.n	800f1fc <SD_PowerON+0xec>
 800f1f6:	69bb      	ldr	r3, [r7, #24]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d0cc      	beq.n	800f196 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f202:	4293      	cmp	r3, r2
 800f204:	d902      	bls.n	800f20c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f206:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f20a:	e08c      	b.n	800f326 <SD_PowerON+0x216>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f212:	2b00      	cmp	r3, #0
 800f214:	f000 8083 	beq.w	800f31e <SD_PowerON+0x20e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2201      	movs	r2, #1
 800f21c:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	699b      	ldr	r3, [r3, #24]
 800f222:	2b01      	cmp	r3, #1
 800f224:	d17e      	bne.n	800f324 <SD_PowerON+0x214>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800f226:	69fb      	ldr	r3, [r7, #28]
 800f228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d079      	beq.n	800f324 <SD_PowerON+0x214>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f236:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	681a      	ldr	r2, [r3, #0]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f042 0208 	orr.w	r2, r2, #8
 800f246:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4618      	mov	r0, r3
 800f24e:	f002 f94f 	bl	80114f0 <SDMMC_CmdVoltageSwitch>
 800f252:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d00c      	beq.n	800f274 <SD_PowerON+0x164>
        {
          return errorstate;
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	e063      	b.n	800f326 <SD_PowerON+0x216>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f25e:	f7f8 fbdd 	bl	8007a1c <HAL_GetTick>
 800f262:	4602      	mov	r2, r0
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	1ad3      	subs	r3, r2, r3
 800f268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f26c:	d102      	bne.n	800f274 <SD_PowerON+0x164>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800f26e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f272:	e058      	b.n	800f326 <SD_PowerON+0x216>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f27a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f27e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f282:	d1ec      	bne.n	800f25e <SD_PowerON+0x14e>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f28c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f29c:	d002      	beq.n	800f2a4 <SD_PowerON+0x194>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800f29e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f2a2:	e040      	b.n	800f326 <SD_PowerON+0x216>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800f2a4:	2001      	movs	r0, #1
 800f2a6:	f000 fb49 	bl	800f93c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f042 0204 	orr.w	r2, r2, #4
 800f2b8:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800f2ba:	e00a      	b.n	800f2d2 <SD_PowerON+0x1c2>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f2bc:	f7f8 fbae 	bl	8007a1c <HAL_GetTick>
 800f2c0:	4602      	mov	r2, r0
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	1ad3      	subs	r3, r2, r3
 800f2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ca:	d102      	bne.n	800f2d2 <SD_PowerON+0x1c2>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800f2cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f2d0:	e029      	b.n	800f326 <SD_PowerON+0x216>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f2e0:	d1ec      	bne.n	800f2bc <SD_PowerON+0x1ac>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f2ea:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2fa:	d102      	bne.n	800f302 <SD_PowerON+0x1f2>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f2fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f300:	e011      	b.n	800f326 <SD_PowerON+0x216>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	2213      	movs	r2, #19
 800f308:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f04f 32ff 	mov.w	r2, #4294967295
 800f312:	639a      	str	r2, [r3, #56]	; 0x38
        }

        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f31a:	65da      	str	r2, [r3, #92]	; 0x5c
 800f31c:	e002      	b.n	800f324 <SD_PowerON+0x214>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800f324:	2300      	movs	r3, #0
}
 800f326:	4618      	mov	r0, r3
 800f328:	3720      	adds	r7, #32
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	c1100000 	.word	0xc1100000

0800f334 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b08c      	sub	sp, #48	; 0x30
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f33e:	f7f8 fb6d 	bl	8007a1c <HAL_GetTick>
 800f342:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2100      	movs	r1, #0
 800f34e:	4618      	mov	r0, r3
 800f350:	f001 fe19 	bl	8010f86 <SDMMC_GetResponse>
 800f354:	4603      	mov	r3, r0
 800f356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f35a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f35e:	d102      	bne.n	800f366 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f364:	e0b0      	b.n	800f4c8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2140      	movs	r1, #64	; 0x40
 800f36c:	4618      	mov	r0, r3
 800f36e:	f001 fe49 	bl	8011004 <SDMMC_CmdBlockLength>
 800f372:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f374:	6a3b      	ldr	r3, [r7, #32]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d005      	beq.n	800f386 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	e0a0      	b.n	800f4c8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f38e:	041b      	lsls	r3, r3, #16
 800f390:	4619      	mov	r1, r3
 800f392:	4610      	mov	r0, r2
 800f394:	f001 ff7e 	bl	8011294 <SDMMC_CmdAppCommand>
 800f398:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f39a:	6a3b      	ldr	r3, [r7, #32]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d005      	beq.n	800f3ac <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800f3a8:	6a3b      	ldr	r3, [r7, #32]
 800f3aa:	e08d      	b.n	800f4c8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f3b2:	2340      	movs	r3, #64	; 0x40
 800f3b4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f3b6:	2360      	movs	r3, #96	; 0x60
 800f3b8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f3ba:	2302      	movs	r3, #2
 800f3bc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f107 0208 	add.w	r2, r7, #8
 800f3ce:	4611      	mov	r1, r2
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f001 fdeb 	bl	8010fac <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f002 f866 	bl	80114ac <SDMMC_CmdStatusRegister>
 800f3e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f3e2:	6a3b      	ldr	r3, [r7, #32]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d02b      	beq.n	800f440 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800f3f0:	6a3b      	ldr	r3, [r7, #32]
 800f3f2:	e069      	b.n	800f4c8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d013      	beq.n	800f42a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800f402:	2300      	movs	r3, #0
 800f404:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f406:	e00d      	b.n	800f424 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4618      	mov	r0, r3
 800f40e:	f001 fd45 	bl	8010e9c <SDMMC_ReadFIFO>
 800f412:	4602      	mov	r2, r0
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	601a      	str	r2, [r3, #0]
        pData++;
 800f418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41a:	3304      	adds	r3, #4
 800f41c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800f41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f420:	3301      	adds	r3, #1
 800f422:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f426:	2b07      	cmp	r3, #7
 800f428:	d9ee      	bls.n	800f408 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f42a:	f7f8 faf7 	bl	8007a1c <HAL_GetTick>
 800f42e:	4602      	mov	r2, r0
 800f430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f432:	1ad3      	subs	r3, r2, r3
 800f434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f438:	d102      	bne.n	800f440 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f43a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f43e:	e043      	b.n	800f4c8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f446:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d0d2      	beq.n	800f3f4 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f454:	f003 0308 	and.w	r3, r3, #8
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d001      	beq.n	800f460 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f45c:	2308      	movs	r3, #8
 800f45e:	e033      	b.n	800f4c8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f466:	f003 0302 	and.w	r3, r3, #2
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d001      	beq.n	800f472 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f46e:	2302      	movs	r3, #2
 800f470:	e02a      	b.n	800f4c8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f478:	f003 0320 	and.w	r3, r3, #32
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d017      	beq.n	800f4b0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f480:	2320      	movs	r3, #32
 800f482:	e021      	b.n	800f4c8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4618      	mov	r0, r3
 800f48a:	f001 fd07 	bl	8010e9c <SDMMC_ReadFIFO>
 800f48e:	4602      	mov	r2, r0
 800f490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f492:	601a      	str	r2, [r3, #0]
    pData++;
 800f494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f496:	3304      	adds	r3, #4
 800f498:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f49a:	f7f8 fabf 	bl	8007a1c <HAL_GetTick>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a2:	1ad3      	subs	r3, r2, r3
 800f4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4a8:	d102      	bne.n	800f4b0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f4aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4ae:	e00b      	b.n	800f4c8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d1e2      	bne.n	800f484 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	4a03      	ldr	r2, [pc, #12]	; (800f4d0 <SD_SendSDStatus+0x19c>)
 800f4c4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f4c6:	2300      	movs	r3, #0
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3730      	adds	r7, #48	; 0x30
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	18000f3a 	.word	0x18000f3a

0800f4d4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d102      	bne.n	800f4ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f4e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f4e8:	e018      	b.n	800f51c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4f2:	041b      	lsls	r3, r3, #16
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	4610      	mov	r0, r2
 800f4f8:	f001 ffb5 	bl	8011466 <SDMMC_CmdSendStatus>
 800f4fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	e009      	b.n	800f51c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2100      	movs	r1, #0
 800f50e:	4618      	mov	r0, r3
 800f510:	f001 fd39 	bl	8010f86 <SDMMC_GetResponse>
 800f514:	4602      	mov	r2, r0
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f51a:	2300      	movs	r3, #0
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3710      	adds	r7, #16
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b086      	sub	sp, #24
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f52c:	2300      	movs	r3, #0
 800f52e:	60fb      	str	r3, [r7, #12]
 800f530:	2300      	movs	r3, #0
 800f532:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2100      	movs	r1, #0
 800f53a:	4618      	mov	r0, r3
 800f53c:	f001 fd23 	bl	8010f86 <SDMMC_GetResponse>
 800f540:	4603      	mov	r3, r0
 800f542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f54a:	d102      	bne.n	800f552 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f54c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f550:	e02f      	b.n	800f5b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f552:	f107 030c 	add.w	r3, r7, #12
 800f556:	4619      	mov	r1, r3
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 f879 	bl	800f650 <SD_FindSCR>
 800f55e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d001      	beq.n	800f56a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	e023      	b.n	800f5b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f570:	2b00      	cmp	r3, #0
 800f572:	d01c      	beq.n	800f5ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f57c:	041b      	lsls	r3, r3, #16
 800f57e:	4619      	mov	r1, r3
 800f580:	4610      	mov	r0, r2
 800f582:	f001 fe87 	bl	8011294 <SDMMC_CmdAppCommand>
 800f586:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	e00f      	b.n	800f5b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2102      	movs	r1, #2
 800f598:	4618      	mov	r0, r3
 800f59a:	f001 febe 	bl	801131a <SDMMC_CmdBusWidth>
 800f59e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d001      	beq.n	800f5aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	e003      	b.n	800f5b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	e001      	b.n	800f5b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f5ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3718      	adds	r7, #24
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}

0800f5ba <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b086      	sub	sp, #24
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	60fb      	str	r3, [r7, #12]
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f001 fcd8 	bl	8010f86 <SDMMC_GetResponse>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f5dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f5e0:	d102      	bne.n	800f5e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f5e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f5e6:	e02f      	b.n	800f648 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f5e8:	f107 030c 	add.w	r3, r7, #12
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f000 f82e 	bl	800f650 <SD_FindSCR>
 800f5f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d001      	beq.n	800f600 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	e023      	b.n	800f648 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f606:	2b00      	cmp	r3, #0
 800f608:	d01c      	beq.n	800f644 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681a      	ldr	r2, [r3, #0]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f612:	041b      	lsls	r3, r3, #16
 800f614:	4619      	mov	r1, r3
 800f616:	4610      	mov	r0, r2
 800f618:	f001 fe3c 	bl	8011294 <SDMMC_CmdAppCommand>
 800f61c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d001      	beq.n	800f628 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	e00f      	b.n	800f648 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2100      	movs	r1, #0
 800f62e:	4618      	mov	r0, r3
 800f630:	f001 fe73 	bl	801131a <SDMMC_CmdBusWidth>
 800f634:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d001      	beq.n	800f640 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	e003      	b.n	800f648 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f640:	2300      	movs	r3, #0
 800f642:	e001      	b.n	800f648 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f644:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3718      	adds	r7, #24
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b08e      	sub	sp, #56	; 0x38
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f65a:	f7f8 f9df 	bl	8007a1c <HAL_GetTick>
 800f65e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f660:	2300      	movs	r3, #0
 800f662:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800f664:	2300      	movs	r3, #0
 800f666:	60bb      	str	r3, [r7, #8]
 800f668:	2300      	movs	r3, #0
 800f66a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2108      	movs	r1, #8
 800f676:	4618      	mov	r0, r3
 800f678:	f001 fcc4 	bl	8011004 <SDMMC_CmdBlockLength>
 800f67c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f680:	2b00      	cmp	r3, #0
 800f682:	d001      	beq.n	800f688 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f686:	e0ad      	b.n	800f7e4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f690:	041b      	lsls	r3, r3, #16
 800f692:	4619      	mov	r1, r3
 800f694:	4610      	mov	r0, r2
 800f696:	f001 fdfd 	bl	8011294 <SDMMC_CmdAppCommand>
 800f69a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d001      	beq.n	800f6a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a4:	e09e      	b.n	800f7e4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f6aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f6ac:	2308      	movs	r3, #8
 800f6ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f6b0:	2330      	movs	r3, #48	; 0x30
 800f6b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f6b4:	2302      	movs	r3, #2
 800f6b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f6bc:	2301      	movs	r3, #1
 800f6be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f107 0210 	add.w	r2, r7, #16
 800f6c8:	4611      	mov	r1, r2
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f001 fc6e 	bl	8010fac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f001 fe43 	bl	8011360 <SDMMC_CmdSendSCR>
 800f6da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d027      	beq.n	800f732 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e4:	e07e      	b.n	800f7e4 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d113      	bne.n	800f71c <SD_FindSCR+0xcc>
 800f6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d110      	bne.n	800f71c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	4618      	mov	r0, r3
 800f700:	f001 fbcc 	bl	8010e9c <SDMMC_ReadFIFO>
 800f704:	4603      	mov	r3, r0
 800f706:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4618      	mov	r0, r3
 800f70e:	f001 fbc5 	bl	8010e9c <SDMMC_ReadFIFO>
 800f712:	4603      	mov	r3, r0
 800f714:	60fb      	str	r3, [r7, #12]
      index++;
 800f716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f718:	3301      	adds	r3, #1
 800f71a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f71c:	f7f8 f97e 	bl	8007a1c <HAL_GetTick>
 800f720:	4602      	mov	r2, r0
 800f722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f724:	1ad3      	subs	r3, r2, r3
 800f726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f72a:	d102      	bne.n	800f732 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f72c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f730:	e058      	b.n	800f7e4 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f738:	f240 532a 	movw	r3, #1322	; 0x52a
 800f73c:	4013      	ands	r3, r2
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d0d1      	beq.n	800f6e6 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f748:	f003 0308 	and.w	r3, r3, #8
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d005      	beq.n	800f75c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	2208      	movs	r2, #8
 800f756:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f758:	2308      	movs	r3, #8
 800f75a:	e043      	b.n	800f7e4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f762:	f003 0302 	and.w	r3, r3, #2
 800f766:	2b00      	cmp	r3, #0
 800f768:	d005      	beq.n	800f776 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2202      	movs	r2, #2
 800f770:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f772:	2302      	movs	r3, #2
 800f774:	e036      	b.n	800f7e4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f77c:	f003 0320 	and.w	r3, r3, #32
 800f780:	2b00      	cmp	r3, #0
 800f782:	d005      	beq.n	800f790 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2220      	movs	r2, #32
 800f78a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f78c:	2320      	movs	r3, #32
 800f78e:	e029      	b.n	800f7e4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a15      	ldr	r2, [pc, #84]	; (800f7ec <SD_FindSCR+0x19c>)
 800f796:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	061a      	lsls	r2, r3, #24
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	021b      	lsls	r3, r3, #8
 800f7a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f7a4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	0a1b      	lsrs	r3, r3, #8
 800f7aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f7ae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	0e1b      	lsrs	r3, r3, #24
 800f7b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b8:	601a      	str	r2, [r3, #0]
    scr++;
 800f7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7bc:	3304      	adds	r3, #4
 800f7be:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	061a      	lsls	r2, r3, #24
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	021b      	lsls	r3, r3, #8
 800f7c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f7cc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	0a1b      	lsrs	r3, r3, #8
 800f7d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f7d6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	0e1b      	lsrs	r3, r3, #24
 800f7dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f7e2:	2300      	movs	r3, #0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3738      	adds	r7, #56	; 0x38
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	18000f3a 	.word	0x18000f3a

0800f7f0 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b086      	sub	sp, #24
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7fc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f802:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d03f      	beq.n	800f88a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800f80a:	2300      	movs	r3, #0
 800f80c:	617b      	str	r3, [r7, #20]
 800f80e:	e033      	b.n	800f878 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4618      	mov	r0, r3
 800f816:	f001 fb41 	bl	8010e9c <SDMMC_ReadFIFO>
 800f81a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	b2da      	uxtb	r2, r3
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	3301      	adds	r3, #1
 800f828:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	3b01      	subs	r3, #1
 800f82e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	0a1b      	lsrs	r3, r3, #8
 800f834:	b2da      	uxtb	r2, r3
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	3301      	adds	r3, #1
 800f83e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	3b01      	subs	r3, #1
 800f844:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	0c1b      	lsrs	r3, r3, #16
 800f84a:	b2da      	uxtb	r2, r3
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	3301      	adds	r3, #1
 800f854:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	3b01      	subs	r3, #1
 800f85a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	0e1b      	lsrs	r3, r3, #24
 800f860:	b2da      	uxtb	r2, r3
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	3301      	adds	r3, #1
 800f86a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	3b01      	subs	r3, #1
 800f870:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	3301      	adds	r3, #1
 800f876:	617b      	str	r3, [r7, #20]
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	2b07      	cmp	r3, #7
 800f87c:	d9c8      	bls.n	800f810 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	693a      	ldr	r2, [r7, #16]
 800f888:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800f88a:	bf00      	nop
 800f88c:	3718      	adds	r7, #24
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}

0800f892 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f892:	b580      	push	{r7, lr}
 800f894:	b086      	sub	sp, #24
 800f896:	af00      	add	r7, sp, #0
 800f898:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6a1b      	ldr	r3, [r3, #32]
 800f89e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d043      	beq.n	800f934 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	617b      	str	r3, [r7, #20]
 800f8b0:	e037      	b.n	800f922 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	3b01      	subs	r3, #1
 800f8c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	021a      	lsls	r2, r3, #8
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	041a      	lsls	r2, r3, #16
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	061a      	lsls	r2, r3, #24
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	3301      	adds	r3, #1
 800f904:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	3b01      	subs	r3, #1
 800f90a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f107 0208 	add.w	r2, r7, #8
 800f914:	4611      	mov	r1, r2
 800f916:	4618      	mov	r0, r3
 800f918:	f001 facd 	bl	8010eb6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	3301      	adds	r3, #1
 800f920:	617b      	str	r3, [r7, #20]
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	2b07      	cmp	r3, #7
 800f926:	d9c4      	bls.n	800f8b2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	68fa      	ldr	r2, [r7, #12]
 800f92c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	693a      	ldr	r2, [r7, #16]
 800f932:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800f934:	bf00      	nop
 800f936:	3718      	adds	r7, #24
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	4603      	mov	r3, r0
 800f944:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800f946:	bf00      	nop
 800f948:	370c      	adds	r7, #12
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr

0800f952 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f952:	b480      	push	{r7}
 800f954:	b083      	sub	sp, #12
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800f95a:	bf00      	nop
 800f95c:	370c      	adds	r7, #12
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr

0800f966 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f966:	b480      	push	{r7}
 800f968:	b083      	sub	sp, #12
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800f96e:	bf00      	nop
 800f970:	370c      	adds	r7, #12
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr

0800f97a <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f97a:	b480      	push	{r7}
 800f97c:	b083      	sub	sp, #12
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800f982:	bf00      	nop
 800f984:	370c      	adds	r7, #12
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr

0800f98e <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f98e:	b480      	push	{r7}
 800f990:	b083      	sub	sp, #12
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800f996:	bf00      	nop
 800f998:	370c      	adds	r7, #12
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr
	...

0800f9a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d101      	bne.n	800f9b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	e0a0      	b.n	800faf8 <HAL_SPI_Init+0x154>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d12a      	bne.n	800fa1e <HAL_SPI_Init+0x7a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	4a4b      	ldr	r2, [pc, #300]	; (800fb00 <HAL_SPI_Init+0x15c>)
 800f9d4:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	4a4a      	ldr	r2, [pc, #296]	; (800fb04 <HAL_SPI_Init+0x160>)
 800f9da:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	4a4a      	ldr	r2, [pc, #296]	; (800fb08 <HAL_SPI_Init+0x164>)
 800f9e0:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4a49      	ldr	r2, [pc, #292]	; (800fb0c <HAL_SPI_Init+0x168>)
 800f9e6:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	4a49      	ldr	r2, [pc, #292]	; (800fb10 <HAL_SPI_Init+0x16c>)
 800f9ec:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	4a48      	ldr	r2, [pc, #288]	; (800fb14 <HAL_SPI_Init+0x170>)
 800f9f2:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	4a48      	ldr	r2, [pc, #288]	; (800fb18 <HAL_SPI_Init+0x174>)
 800f9f8:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4a47      	ldr	r2, [pc, #284]	; (800fb1c <HAL_SPI_Init+0x178>)
 800f9fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d103      	bne.n	800fa14 <HAL_SPI_Init+0x70>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	4a44      	ldr	r2, [pc, #272]	; (800fb20 <HAL_SPI_Init+0x17c>)
 800fa10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2202      	movs	r2, #2
 800fa22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa34:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	68db      	ldr	r3, [r3, #12]
 800fa3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fa3e:	d902      	bls.n	800fa46 <HAL_SPI_Init+0xa2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800fa40:	2300      	movs	r3, #0
 800fa42:	60fb      	str	r3, [r7, #12]
 800fa44:	e002      	b.n	800fa4c <HAL_SPI_Init+0xa8>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800fa46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa4a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800fa54:	d007      	beq.n	800fa66 <HAL_SPI_Init+0xc2>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fa5e:	d002      	beq.n	800fa66 <HAL_SPI_Init+0xc2>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d10b      	bne.n	800fa86 <HAL_SPI_Init+0xe2>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fa76:	d903      	bls.n	800fa80 <HAL_SPI_Init+0xdc>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2202      	movs	r2, #2
 800fa7c:	631a      	str	r2, [r3, #48]	; 0x30
 800fa7e:	e002      	b.n	800fa86 <HAL_SPI_Init+0xe2>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2201      	movs	r2, #1
 800fa84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	685a      	ldr	r2, [r3, #4]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	431a      	orrs	r2, r3
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	691b      	ldr	r3, [r3, #16]
 800fa94:	431a      	orrs	r2, r3
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	695b      	ldr	r3, [r3, #20]
 800fa9a:	431a      	orrs	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	699b      	ldr	r3, [r3, #24]
 800faa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800faa4:	431a      	orrs	r2, r3
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	69db      	ldr	r3, [r3, #28]
 800faaa:	431a      	orrs	r2, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6a1b      	ldr	r3, [r3, #32]
 800fab0:	ea42 0103 	orr.w	r1, r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	430a      	orrs	r2, r1
 800fabe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	699b      	ldr	r3, [r3, #24]
 800fac4:	0c1b      	lsrs	r3, r3, #16
 800fac6:	f003 0204 	and.w	r2, r3, #4
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800face:	431a      	orrs	r2, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fad4:	431a      	orrs	r2, r3
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	ea42 0103 	orr.w	r1, r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	68fa      	ldr	r2, [r7, #12]
 800fae4:	430a      	orrs	r2, r1
 800fae6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2200      	movs	r2, #0
 800faec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2201      	movs	r2, #1
 800faf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3710      	adds	r7, #16
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	08010269 	.word	0x08010269
 800fb04:	0801027d 	.word	0x0801027d
 800fb08:	08010291 	.word	0x08010291
 800fb0c:	080102a5 	.word	0x080102a5
 800fb10:	080102b9 	.word	0x080102b9
 800fb14:	080102cd 	.word	0x080102cd
 800fb18:	080102e1 	.word	0x080102e1
 800fb1c:	080102f5 	.word	0x080102f5
 800fb20:	0800fb25 	.word	0x0800fb25

0800fb24 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800fb2c:	bf00      	nop
 800fb2e:	370c      	adds	r7, #12
 800fb30:	46bd      	mov	sp, r7
 800fb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb36:	4770      	bx	lr

0800fb38 <HAL_SPI_RegisterCallback>:
  * @param  CallbackID ID of the callback to be registered
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID, pSPI_CallbackTypeDef pCallback)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b087      	sub	sp, #28
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	460b      	mov	r3, r1
 800fb42:	607a      	str	r2, [r7, #4]
 800fb44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800fb46:	2300      	movs	r3, #0
 800fb48:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d107      	bne.n	800fb60 <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	e08b      	b.n	800fc78 <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d101      	bne.n	800fb6e <HAL_SPI_RegisterCallback+0x36>
 800fb6a:	2302      	movs	r3, #2
 800fb6c:	e084      	b.n	800fc78 <HAL_SPI_RegisterCallback+0x140>
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2201      	movs	r2, #1
 800fb72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d14e      	bne.n	800fc20 <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 800fb82:	7afb      	ldrb	r3, [r7, #11]
 800fb84:	2b09      	cmp	r3, #9
 800fb86:	d842      	bhi.n	800fc0e <HAL_SPI_RegisterCallback+0xd6>
 800fb88:	a201      	add	r2, pc, #4	; (adr r2, 800fb90 <HAL_SPI_RegisterCallback+0x58>)
 800fb8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb8e:	bf00      	nop
 800fb90:	0800fbb9 	.word	0x0800fbb9
 800fb94:	0800fbc1 	.word	0x0800fbc1
 800fb98:	0800fbc9 	.word	0x0800fbc9
 800fb9c:	0800fbd1 	.word	0x0800fbd1
 800fba0:	0800fbd9 	.word	0x0800fbd9
 800fba4:	0800fbe1 	.word	0x0800fbe1
 800fba8:	0800fbe9 	.word	0x0800fbe9
 800fbac:	0800fbf1 	.word	0x0800fbf1
 800fbb0:	0800fbfb 	.word	0x0800fbfb
 800fbb4:	0800fc05 	.word	0x0800fc05
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	687a      	ldr	r2, [r7, #4]
 800fbbc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800fbbe:	e056      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800fbc6:	e052      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800fbce:	e04e      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	687a      	ldr	r2, [r7, #4]
 800fbd4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800fbd6:	e04a      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	687a      	ldr	r2, [r7, #4]
 800fbdc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800fbde:	e046      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800fbe6:	e042      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800fbee:	e03e      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800fbf8:	e039      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800fc02:	e034      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800fc0c:	e02f      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	75fb      	strb	r3, [r7, #23]
        break;
 800fc1e:	e026      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d118      	bne.n	800fc5e <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 800fc2c:	7afb      	ldrb	r3, [r7, #11]
 800fc2e:	2b08      	cmp	r3, #8
 800fc30:	d002      	beq.n	800fc38 <HAL_SPI_RegisterCallback+0x100>
 800fc32:	2b09      	cmp	r3, #9
 800fc34:	d005      	beq.n	800fc42 <HAL_SPI_RegisterCallback+0x10a>
 800fc36:	e009      	b.n	800fc4c <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800fc40:	e015      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	687a      	ldr	r2, [r7, #4]
 800fc46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800fc4a:	e010      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	75fb      	strb	r3, [r7, #23]
        break;
 800fc5c:	e007      	b.n	800fc6e <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2200      	movs	r2, #0
 800fc72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 800fc76:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	371c      	adds	r7, #28
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr

0800fc84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b088      	sub	sp, #32
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	60f8      	str	r0, [r7, #12]
 800fc8c:	60b9      	str	r1, [r7, #8]
 800fc8e:	603b      	str	r3, [r7, #0]
 800fc90:	4613      	mov	r3, r2
 800fc92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fc94:	2300      	movs	r3, #0
 800fc96:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fc9e:	2b01      	cmp	r3, #1
 800fca0:	d101      	bne.n	800fca6 <HAL_SPI_Transmit+0x22>
 800fca2:	2302      	movs	r3, #2
 800fca4:	e150      	b.n	800ff48 <HAL_SPI_Transmit+0x2c4>
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	2201      	movs	r2, #1
 800fcaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fcae:	f7f7 feb5 	bl	8007a1c <HAL_GetTick>
 800fcb2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800fcb4:	88fb      	ldrh	r3, [r7, #6]
 800fcb6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d002      	beq.n	800fcca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800fcc4:	2302      	movs	r3, #2
 800fcc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fcc8:	e135      	b.n	800ff36 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d002      	beq.n	800fcd6 <HAL_SPI_Transmit+0x52>
 800fcd0:	88fb      	ldrh	r3, [r7, #6]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d102      	bne.n	800fcdc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fcda:	e12c      	b.n	800ff36 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2203      	movs	r2, #3
 800fce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2200      	movs	r2, #0
 800fce8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	68ba      	ldr	r2, [r7, #8]
 800fcee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	88fa      	ldrh	r2, [r7, #6]
 800fcf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	88fa      	ldrh	r2, [r7, #6]
 800fcfa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2200      	movs	r2, #0
 800fd06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2200      	movs	r2, #0
 800fd16:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	689b      	ldr	r3, [r3, #8]
 800fd22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd26:	d107      	bne.n	800fd38 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fd36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd42:	2b40      	cmp	r3, #64	; 0x40
 800fd44:	d007      	beq.n	800fd56 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800fd5e:	d94b      	bls.n	800fdf8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <HAL_SPI_Transmit+0xea>
 800fd68:	8afb      	ldrh	r3, [r7, #22]
 800fd6a:	2b01      	cmp	r3, #1
 800fd6c:	d13e      	bne.n	800fdec <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd72:	881a      	ldrh	r2, [r3, #0]
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd7e:	1c9a      	adds	r2, r3, #2
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	b29a      	uxth	r2, r3
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800fd92:	e02b      	b.n	800fdec <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	689b      	ldr	r3, [r3, #8]
 800fd9a:	f003 0302 	and.w	r3, r3, #2
 800fd9e:	2b02      	cmp	r3, #2
 800fda0:	d112      	bne.n	800fdc8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fda6:	881a      	ldrh	r2, [r3, #0]
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb2:	1c9a      	adds	r2, r3, #2
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fdbc:	b29b      	uxth	r3, r3
 800fdbe:	3b01      	subs	r3, #1
 800fdc0:	b29a      	uxth	r2, r3
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fdc6:	e011      	b.n	800fdec <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fdc8:	f7f7 fe28 	bl	8007a1c <HAL_GetTick>
 800fdcc:	4602      	mov	r2, r0
 800fdce:	69bb      	ldr	r3, [r7, #24]
 800fdd0:	1ad3      	subs	r3, r2, r3
 800fdd2:	683a      	ldr	r2, [r7, #0]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d803      	bhi.n	800fde0 <HAL_SPI_Transmit+0x15c>
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdde:	d102      	bne.n	800fde6 <HAL_SPI_Transmit+0x162>
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d102      	bne.n	800fdec <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800fde6:	2303      	movs	r3, #3
 800fde8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fdea:	e0a4      	b.n	800ff36 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d1ce      	bne.n	800fd94 <HAL_SPI_Transmit+0x110>
 800fdf6:	e07c      	b.n	800fef2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <HAL_SPI_Transmit+0x182>
 800fe00:	8afb      	ldrh	r3, [r7, #22]
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d170      	bne.n	800fee8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d912      	bls.n	800fe36 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe14:	881a      	ldrh	r2, [r3, #0]
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe20:	1c9a      	adds	r2, r3, #2
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	3b02      	subs	r3, #2
 800fe2e:	b29a      	uxth	r2, r3
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fe34:	e058      	b.n	800fee8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	330c      	adds	r3, #12
 800fe40:	7812      	ldrb	r2, [r2, #0]
 800fe42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe48:	1c5a      	adds	r2, r3, #1
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	3b01      	subs	r3, #1
 800fe56:	b29a      	uxth	r2, r3
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800fe5c:	e044      	b.n	800fee8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	f003 0302 	and.w	r3, r3, #2
 800fe68:	2b02      	cmp	r3, #2
 800fe6a:	d12b      	bne.n	800fec4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	d912      	bls.n	800fe9c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe7a:	881a      	ldrh	r2, [r3, #0]
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe86:	1c9a      	adds	r2, r3, #2
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	3b02      	subs	r3, #2
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fe9a:	e025      	b.n	800fee8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	330c      	adds	r3, #12
 800fea6:	7812      	ldrb	r2, [r2, #0]
 800fea8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feae:	1c5a      	adds	r2, r3, #1
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800feb8:	b29b      	uxth	r3, r3
 800feba:	3b01      	subs	r3, #1
 800febc:	b29a      	uxth	r2, r3
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800fec2:	e011      	b.n	800fee8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fec4:	f7f7 fdaa 	bl	8007a1c <HAL_GetTick>
 800fec8:	4602      	mov	r2, r0
 800feca:	69bb      	ldr	r3, [r7, #24]
 800fecc:	1ad3      	subs	r3, r2, r3
 800fece:	683a      	ldr	r2, [r7, #0]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d803      	bhi.n	800fedc <HAL_SPI_Transmit+0x258>
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feda:	d102      	bne.n	800fee2 <HAL_SPI_Transmit+0x25e>
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d102      	bne.n	800fee8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800fee2:	2303      	movs	r3, #3
 800fee4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fee6:	e026      	b.n	800ff36 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800feec:	b29b      	uxth	r3, r3
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1b5      	bne.n	800fe5e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fef2:	69ba      	ldr	r2, [r7, #24]
 800fef4:	6839      	ldr	r1, [r7, #0]
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f000 fc02 	bl	8010700 <SPI_EndRxTxTransaction>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d002      	beq.n	800ff08 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2220      	movs	r2, #32
 800ff06:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	689b      	ldr	r3, [r3, #8]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d10a      	bne.n	800ff26 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ff10:	2300      	movs	r3, #0
 800ff12:	613b      	str	r3, [r7, #16]
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	613b      	str	r3, [r7, #16]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	689b      	ldr	r3, [r3, #8]
 800ff22:	613b      	str	r3, [r7, #16]
 800ff24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d002      	beq.n	800ff34 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800ff2e:	2301      	movs	r3, #1
 800ff30:	77fb      	strb	r3, [r7, #31]
 800ff32:	e000      	b.n	800ff36 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800ff34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2201      	movs	r2, #1
 800ff3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ff46:	7ffb      	ldrb	r3, [r7, #31]
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3720      	adds	r7, #32
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b086      	sub	sp, #24
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]
 800ff5c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d101      	bne.n	800ff70 <HAL_SPI_TransmitReceive_DMA+0x20>
 800ff6c:	2302      	movs	r3, #2
 800ff6e:	e16c      	b.n	801024a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2201      	movs	r2, #1
 800ff74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ff7e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800ff86:	7dbb      	ldrb	r3, [r7, #22]
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d00d      	beq.n	800ffa8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ff92:	d106      	bne.n	800ffa2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	689b      	ldr	r3, [r3, #8]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d102      	bne.n	800ffa2 <HAL_SPI_TransmitReceive_DMA+0x52>
 800ff9c:	7dbb      	ldrb	r3, [r7, #22]
 800ff9e:	2b04      	cmp	r3, #4
 800ffa0:	d002      	beq.n	800ffa8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800ffa2:	2302      	movs	r3, #2
 800ffa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ffa6:	e14b      	b.n	8010240 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d005      	beq.n	800ffba <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d002      	beq.n	800ffba <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ffb4:	887b      	ldrh	r3, [r7, #2]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d102      	bne.n	800ffc0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ffba:	2301      	movs	r3, #1
 800ffbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ffbe:	e13f      	b.n	8010240 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ffc6:	b2db      	uxtb	r3, r3
 800ffc8:	2b04      	cmp	r3, #4
 800ffca:	d003      	beq.n	800ffd4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2205      	movs	r2, #5
 800ffd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	68ba      	ldr	r2, [r7, #8]
 800ffde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	887a      	ldrh	r2, [r7, #2]
 800ffe4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	887a      	ldrh	r2, [r7, #2]
 800ffea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	887a      	ldrh	r2, [r7, #2]
 800fff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	887a      	ldrh	r2, [r7, #2]
 800fffe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2200      	movs	r2, #0
 8010006:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2200      	movs	r2, #0
 801000c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	685a      	ldr	r2, [r3, #4]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 801001c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010026:	d908      	bls.n	801003a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	685a      	ldr	r2, [r3, #4]
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010036:	605a      	str	r2, [r3, #4]
 8010038:	e06f      	b.n	801011a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	685a      	ldr	r2, [r3, #4]
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010048:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801004e:	699b      	ldr	r3, [r3, #24]
 8010050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010054:	d126      	bne.n	80100a4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801005a:	f003 0301 	and.w	r3, r3, #1
 801005e:	2b00      	cmp	r3, #0
 8010060:	d10f      	bne.n	8010082 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	685a      	ldr	r2, [r3, #4]
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010070:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010076:	b29b      	uxth	r3, r3
 8010078:	085b      	lsrs	r3, r3, #1
 801007a:	b29a      	uxth	r2, r3
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010080:	e010      	b.n	80100a4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	685a      	ldr	r2, [r3, #4]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010090:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010096:	b29b      	uxth	r3, r3
 8010098:	085b      	lsrs	r3, r3, #1
 801009a:	b29b      	uxth	r3, r3
 801009c:	3301      	adds	r3, #1
 801009e:	b29a      	uxth	r2, r3
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100a8:	699b      	ldr	r3, [r3, #24]
 80100aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100ae:	d134      	bne.n	801011a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	685a      	ldr	r2, [r3, #4]
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80100be:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	f003 0301 	and.w	r3, r3, #1
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d111      	bne.n	80100f4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	685a      	ldr	r2, [r3, #4]
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80100de:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	085b      	lsrs	r3, r3, #1
 80100ea:	b29a      	uxth	r2, r3
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80100f2:	e012      	b.n	801011a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	685a      	ldr	r2, [r3, #4]
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010102:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801010a:	b29b      	uxth	r3, r3
 801010c:	085b      	lsrs	r3, r3, #1
 801010e:	b29b      	uxth	r3, r3
 8010110:	3301      	adds	r3, #1
 8010112:	b29a      	uxth	r2, r3
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010120:	b2db      	uxtb	r3, r3
 8010122:	2b04      	cmp	r3, #4
 8010124:	d108      	bne.n	8010138 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801012a:	4a4a      	ldr	r2, [pc, #296]	; (8010254 <HAL_SPI_TransmitReceive_DMA+0x304>)
 801012c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010132:	4a49      	ldr	r2, [pc, #292]	; (8010258 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8010134:	62da      	str	r2, [r3, #44]	; 0x2c
 8010136:	e007      	b.n	8010148 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801013c:	4a47      	ldr	r2, [pc, #284]	; (801025c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 801013e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010144:	4a46      	ldr	r2, [pc, #280]	; (8010260 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8010146:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801014c:	4a45      	ldr	r2, [pc, #276]	; (8010264 <HAL_SPI_TransmitReceive_DMA+0x314>)
 801014e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010154:	2200      	movs	r2, #0
 8010156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	330c      	adds	r3, #12
 8010162:	4619      	mov	r1, r3
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010168:	461a      	mov	r2, r3
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010170:	b29b      	uxth	r3, r3
 8010172:	f7f9 f8fd 	bl	8009370 <HAL_DMA_Start_IT>
 8010176:	4603      	mov	r3, r0
 8010178:	2b00      	cmp	r3, #0
 801017a:	d00c      	beq.n	8010196 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010180:	f043 0210 	orr.w	r2, r3, #16
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8010188:	2301      	movs	r3, #1
 801018a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	2201      	movs	r2, #1
 8010190:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8010194:	e054      	b.n	8010240 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	685a      	ldr	r2, [r3, #4]
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f042 0201 	orr.w	r2, r2, #1
 80101a4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101aa:	2200      	movs	r2, #0
 80101ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101b2:	2200      	movs	r2, #0
 80101b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101ba:	2200      	movs	r2, #0
 80101bc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101c2:	2200      	movs	r2, #0
 80101c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ce:	4619      	mov	r1, r3
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	330c      	adds	r3, #12
 80101d6:	461a      	mov	r2, r3
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80101dc:	b29b      	uxth	r3, r3
 80101de:	f7f9 f8c7 	bl	8009370 <HAL_DMA_Start_IT>
 80101e2:	4603      	mov	r3, r0
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d00c      	beq.n	8010202 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80101ec:	f043 0210 	orr.w	r2, r3, #16
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80101f4:	2301      	movs	r3, #1
 80101f6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2201      	movs	r2, #1
 80101fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8010200:	e01e      	b.n	8010240 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801020c:	2b40      	cmp	r3, #64	; 0x40
 801020e:	d007      	beq.n	8010220 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801021e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	685a      	ldr	r2, [r3, #4]
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f042 0220 	orr.w	r2, r2, #32
 801022e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	685a      	ldr	r2, [r3, #4]
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f042 0202 	orr.w	r2, r2, #2
 801023e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2200      	movs	r2, #0
 8010244:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010248:	7dfb      	ldrb	r3, [r7, #23]
}
 801024a:	4618      	mov	r0, r3
 801024c:	3718      	adds	r7, #24
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	08010425 	.word	0x08010425
 8010258:	08010309 	.word	0x08010309
 801025c:	08010443 	.word	0x08010443
 8010260:	08010391 	.word	0x08010391
 8010264:	08010461 	.word	0x08010461

08010268 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010268:	b480      	push	{r7}
 801026a:	b083      	sub	sp, #12
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8010270:	bf00      	nop
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8010284:	bf00      	nop
 8010286:	370c      	adds	r7, #12
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8010298:	bf00      	nop
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr

080102a4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80102ac:	bf00      	nop
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80102c0:	bf00      	nop
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80102d4:	bf00      	nop
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80102e0:	b480      	push	{r7}
 80102e2:	b083      	sub	sp, #12
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80102e8:	bf00      	nop
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b083      	sub	sp, #12
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80102fc:	bf00      	nop
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b084      	sub	sp, #16
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010314:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010316:	f7f7 fb81 	bl	8007a1c <HAL_GetTick>
 801031a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f003 0320 	and.w	r3, r3, #32
 8010326:	2b20      	cmp	r3, #32
 8010328:	d02b      	beq.n	8010382 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	685a      	ldr	r2, [r3, #4]
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f022 0220 	bic.w	r2, r2, #32
 8010338:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	685a      	ldr	r2, [r3, #4]
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f022 0203 	bic.w	r2, r2, #3
 8010348:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801034a:	68ba      	ldr	r2, [r7, #8]
 801034c:	2164      	movs	r1, #100	; 0x64
 801034e:	68f8      	ldr	r0, [r7, #12]
 8010350:	f000 f97e 	bl	8010650 <SPI_EndRxTransaction>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d002      	beq.n	8010360 <SPI_DMAReceiveCplt+0x58>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	2220      	movs	r2, #32
 801035e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2200      	movs	r2, #0
 8010364:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2201      	movs	r2, #1
 801036c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010374:	2b00      	cmp	r3, #0
 8010376:	d004      	beq.n	8010382 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801037c:	68f8      	ldr	r0, [r7, #12]
 801037e:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010380:	e003      	b.n	801038a <SPI_DMAReceiveCplt+0x82>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801038a:	3710      	adds	r7, #16
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801039c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801039e:	f7f7 fb3d 	bl	8007a1c <HAL_GetTick>
 80103a2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f003 0320 	and.w	r3, r3, #32
 80103ae:	2b20      	cmp	r3, #32
 80103b0:	d031      	beq.n	8010416 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	685a      	ldr	r2, [r3, #4]
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f022 0220 	bic.w	r2, r2, #32
 80103c0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80103c2:	68ba      	ldr	r2, [r7, #8]
 80103c4:	2164      	movs	r1, #100	; 0x64
 80103c6:	68f8      	ldr	r0, [r7, #12]
 80103c8:	f000 f99a 	bl	8010700 <SPI_EndRxTxTransaction>
 80103cc:	4603      	mov	r3, r0
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d005      	beq.n	80103de <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103d6:	f043 0220 	orr.w	r2, r3, #32
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	685a      	ldr	r2, [r3, #4]
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f022 0203 	bic.w	r2, r2, #3
 80103ec:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2200      	movs	r2, #0
 80103f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	2200      	movs	r2, #0
 80103f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2201      	movs	r2, #1
 8010400:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010408:	2b00      	cmp	r3, #0
 801040a:	d004      	beq.n	8010416 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010414:	e003      	b.n	801041e <SPI_DMATransmitReceiveCplt+0x8e>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801041a:	68f8      	ldr	r0, [r7, #12]
 801041c:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801041e:	3710      	adds	r7, #16
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010430:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010436:	68f8      	ldr	r0, [r7, #12]
 8010438:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801043a:	bf00      	nop
 801043c:	3710      	adds	r7, #16
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010442:	b580      	push	{r7, lr}
 8010444:	b084      	sub	sp, #16
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801044e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010454:	68f8      	ldr	r0, [r7, #12]
 8010456:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010458:	bf00      	nop
 801045a:	3710      	adds	r7, #16
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801046c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	685a      	ldr	r2, [r3, #4]
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f022 0203 	bic.w	r2, r2, #3
 801047c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010482:	f043 0210 	orr.w	r2, r3, #16
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2201      	movs	r2, #1
 801048e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010496:	68f8      	ldr	r0, [r7, #12]
 8010498:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801049a:	bf00      	nop
 801049c:	3710      	adds	r7, #16
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}

080104a2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80104a2:	b580      	push	{r7, lr}
 80104a4:	b084      	sub	sp, #16
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	60f8      	str	r0, [r7, #12]
 80104aa:	60b9      	str	r1, [r7, #8]
 80104ac:	603b      	str	r3, [r7, #0]
 80104ae:	4613      	mov	r3, r2
 80104b0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80104b2:	e04c      	b.n	801054e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ba:	d048      	beq.n	801054e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80104bc:	f7f7 faae 	bl	8007a1c <HAL_GetTick>
 80104c0:	4602      	mov	r2, r0
 80104c2:	69bb      	ldr	r3, [r7, #24]
 80104c4:	1ad3      	subs	r3, r2, r3
 80104c6:	683a      	ldr	r2, [r7, #0]
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d902      	bls.n	80104d2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d13d      	bne.n	801054e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	685a      	ldr	r2, [r3, #4]
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80104e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80104ea:	d111      	bne.n	8010510 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	689b      	ldr	r3, [r3, #8]
 80104f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80104f4:	d004      	beq.n	8010500 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	689b      	ldr	r3, [r3, #8]
 80104fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80104fe:	d107      	bne.n	8010510 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	681a      	ldr	r2, [r3, #0]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801050e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010518:	d10f      	bne.n	801053a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010528:	601a      	str	r2, [r3, #0]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	681a      	ldr	r2, [r3, #0]
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010538:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2201      	movs	r2, #1
 801053e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	2200      	movs	r2, #0
 8010546:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801054a:	2303      	movs	r3, #3
 801054c:	e00f      	b.n	801056e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	689a      	ldr	r2, [r3, #8]
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	4013      	ands	r3, r2
 8010558:	68ba      	ldr	r2, [r7, #8]
 801055a:	429a      	cmp	r2, r3
 801055c:	bf0c      	ite	eq
 801055e:	2301      	moveq	r3, #1
 8010560:	2300      	movne	r3, #0
 8010562:	b2db      	uxtb	r3, r3
 8010564:	461a      	mov	r2, r3
 8010566:	79fb      	ldrb	r3, [r7, #7]
 8010568:	429a      	cmp	r2, r3
 801056a:	d1a3      	bne.n	80104b4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 801056c:	2300      	movs	r3, #0
}
 801056e:	4618      	mov	r0, r3
 8010570:	3710      	adds	r7, #16
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}

08010576 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010576:	b580      	push	{r7, lr}
 8010578:	b084      	sub	sp, #16
 801057a:	af00      	add	r7, sp, #0
 801057c:	60f8      	str	r0, [r7, #12]
 801057e:	60b9      	str	r1, [r7, #8]
 8010580:	607a      	str	r2, [r7, #4]
 8010582:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8010584:	e057      	b.n	8010636 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801058c:	d106      	bne.n	801059c <SPI_WaitFifoStateUntilTimeout+0x26>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d103      	bne.n	801059c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	330c      	adds	r3, #12
 801059a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105a2:	d048      	beq.n	8010636 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80105a4:	f7f7 fa3a 	bl	8007a1c <HAL_GetTick>
 80105a8:	4602      	mov	r2, r0
 80105aa:	69bb      	ldr	r3, [r7, #24]
 80105ac:	1ad3      	subs	r3, r2, r3
 80105ae:	683a      	ldr	r2, [r7, #0]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d902      	bls.n	80105ba <SPI_WaitFifoStateUntilTimeout+0x44>
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d13d      	bne.n	8010636 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	685a      	ldr	r2, [r3, #4]
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80105c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80105d2:	d111      	bne.n	80105f8 <SPI_WaitFifoStateUntilTimeout+0x82>
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	689b      	ldr	r3, [r3, #8]
 80105d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105dc:	d004      	beq.n	80105e8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	689b      	ldr	r3, [r3, #8]
 80105e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80105e6:	d107      	bne.n	80105f8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	681a      	ldr	r2, [r3, #0]
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010600:	d10f      	bne.n	8010622 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010610:	601a      	str	r2, [r3, #0]
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	681a      	ldr	r2, [r3, #0]
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010620:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2201      	movs	r2, #1
 8010626:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2200      	movs	r2, #0
 801062e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010632:	2303      	movs	r3, #3
 8010634:	e008      	b.n	8010648 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	689a      	ldr	r2, [r3, #8]
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	4013      	ands	r3, r2
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	429a      	cmp	r2, r3
 8010644:	d19f      	bne.n	8010586 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8010646:	2300      	movs	r3, #0
}
 8010648:	4618      	mov	r0, r3
 801064a:	3710      	adds	r7, #16
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}

08010650 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b086      	sub	sp, #24
 8010654:	af02      	add	r7, sp, #8
 8010656:	60f8      	str	r0, [r7, #12]
 8010658:	60b9      	str	r1, [r7, #8]
 801065a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010664:	d111      	bne.n	801068a <SPI_EndRxTransaction+0x3a>
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	689b      	ldr	r3, [r3, #8]
 801066a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801066e:	d004      	beq.n	801067a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	689b      	ldr	r3, [r3, #8]
 8010674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010678:	d107      	bne.n	801068a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010688:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	9300      	str	r3, [sp, #0]
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	2200      	movs	r2, #0
 8010692:	2180      	movs	r1, #128	; 0x80
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f7ff ff04 	bl	80104a2 <SPI_WaitFlagStateUntilTimeout>
 801069a:	4603      	mov	r3, r0
 801069c:	2b00      	cmp	r3, #0
 801069e:	d007      	beq.n	80106b0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80106a4:	f043 0220 	orr.w	r2, r3, #32
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80106ac:	2303      	movs	r3, #3
 80106ae:	e023      	b.n	80106f8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80106b8:	d11d      	bne.n	80106f6 <SPI_EndRxTransaction+0xa6>
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	689b      	ldr	r3, [r3, #8]
 80106be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106c2:	d004      	beq.n	80106ce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106cc:	d113      	bne.n	80106f6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	9300      	str	r3, [sp, #0]
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	2200      	movs	r2, #0
 80106d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80106da:	68f8      	ldr	r0, [r7, #12]
 80106dc:	f7ff ff4b 	bl	8010576 <SPI_WaitFifoStateUntilTimeout>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d007      	beq.n	80106f6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80106ea:	f043 0220 	orr.w	r2, r3, #32
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80106f2:	2303      	movs	r3, #3
 80106f4:	e000      	b.n	80106f8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80106f6:	2300      	movs	r3, #0
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3710      	adds	r7, #16
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b086      	sub	sp, #24
 8010704:	af02      	add	r7, sp, #8
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	9300      	str	r3, [sp, #0]
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	2200      	movs	r2, #0
 8010714:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8010718:	68f8      	ldr	r0, [r7, #12]
 801071a:	f7ff ff2c 	bl	8010576 <SPI_WaitFifoStateUntilTimeout>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d007      	beq.n	8010734 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010728:	f043 0220 	orr.w	r2, r3, #32
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010730:	2303      	movs	r3, #3
 8010732:	e027      	b.n	8010784 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	2200      	movs	r2, #0
 801073c:	2180      	movs	r1, #128	; 0x80
 801073e:	68f8      	ldr	r0, [r7, #12]
 8010740:	f7ff feaf 	bl	80104a2 <SPI_WaitFlagStateUntilTimeout>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	d007      	beq.n	801075a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801074e:	f043 0220 	orr.w	r2, r3, #32
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010756:	2303      	movs	r3, #3
 8010758:	e014      	b.n	8010784 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	9300      	str	r3, [sp, #0]
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	2200      	movs	r2, #0
 8010762:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010766:	68f8      	ldr	r0, [r7, #12]
 8010768:	f7ff ff05 	bl	8010576 <SPI_WaitFifoStateUntilTimeout>
 801076c:	4603      	mov	r3, r0
 801076e:	2b00      	cmp	r3, #0
 8010770:	d007      	beq.n	8010782 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010776:	f043 0220 	orr.w	r2, r3, #32
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801077e:	2303      	movs	r3, #3
 8010780:	e000      	b.n	8010784 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8010782:	2300      	movs	r3, #0
}
 8010784:	4618      	mov	r0, r3
 8010786:	3710      	adds	r7, #16
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d101      	bne.n	801079e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801079a:	2301      	movs	r3, #1
 801079c:	e01d      	b.n	80107da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d106      	bne.n	80107b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 f815 	bl	80107e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2202      	movs	r2, #2
 80107bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681a      	ldr	r2, [r3, #0]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	3304      	adds	r3, #4
 80107c8:	4619      	mov	r1, r3
 80107ca:	4610      	mov	r0, r2
 80107cc:	f000 f9fc 	bl	8010bc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2201      	movs	r2, #1
 80107d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80107d8:	2300      	movs	r3, #0
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3708      	adds	r7, #8
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80107e2:	b480      	push	{r7}
 80107e4:	b083      	sub	sp, #12
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80107ea:	bf00      	nop
 80107ec:	370c      	adds	r7, #12
 80107ee:	46bd      	mov	sp, r7
 80107f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f4:	4770      	bx	lr
	...

080107f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b085      	sub	sp, #20
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2202      	movs	r2, #2
 8010804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	689a      	ldr	r2, [r3, #8]
 801080e:	4b0e      	ldr	r3, [pc, #56]	; (8010848 <HAL_TIM_Base_Start+0x50>)
 8010810:	4013      	ands	r3, r2
 8010812:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2b06      	cmp	r3, #6
 8010818:	d00b      	beq.n	8010832 <HAL_TIM_Base_Start+0x3a>
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010820:	d007      	beq.n	8010832 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	681a      	ldr	r2, [r3, #0]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f042 0201 	orr.w	r2, r2, #1
 8010830:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2201      	movs	r2, #1
 8010836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801083a:	2300      	movs	r3, #0
}
 801083c:	4618      	mov	r0, r3
 801083e:	3714      	adds	r7, #20
 8010840:	46bd      	mov	sp, r7
 8010842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010846:	4770      	bx	lr
 8010848:	00010007 	.word	0x00010007

0801084c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801084c:	b480      	push	{r7}
 801084e:	b083      	sub	sp, #12
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2202      	movs	r2, #2
 8010858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	6a1a      	ldr	r2, [r3, #32]
 8010862:	f241 1311 	movw	r3, #4369	; 0x1111
 8010866:	4013      	ands	r3, r2
 8010868:	2b00      	cmp	r3, #0
 801086a:	d10f      	bne.n	801088c <HAL_TIM_Base_Stop+0x40>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	6a1a      	ldr	r2, [r3, #32]
 8010872:	f240 4344 	movw	r3, #1092	; 0x444
 8010876:	4013      	ands	r3, r2
 8010878:	2b00      	cmp	r3, #0
 801087a:	d107      	bne.n	801088c <HAL_TIM_Base_Stop+0x40>
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	681a      	ldr	r2, [r3, #0]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	f022 0201 	bic.w	r2, r2, #1
 801088a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2201      	movs	r2, #1
 8010890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8010894:	2300      	movs	r3, #0
}
 8010896:	4618      	mov	r0, r3
 8010898:	370c      	adds	r7, #12
 801089a:	46bd      	mov	sp, r7
 801089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a0:	4770      	bx	lr
	...

080108a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b085      	sub	sp, #20
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	68da      	ldr	r2, [r3, #12]
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f042 0201 	orr.w	r2, r2, #1
 80108ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	689a      	ldr	r2, [r3, #8]
 80108c2:	4b0c      	ldr	r3, [pc, #48]	; (80108f4 <HAL_TIM_Base_Start_IT+0x50>)
 80108c4:	4013      	ands	r3, r2
 80108c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2b06      	cmp	r3, #6
 80108cc:	d00b      	beq.n	80108e6 <HAL_TIM_Base_Start_IT+0x42>
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108d4:	d007      	beq.n	80108e6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f042 0201 	orr.w	r2, r2, #1
 80108e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80108e6:	2300      	movs	r3, #0
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3714      	adds	r7, #20
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr
 80108f4:	00010007 	.word	0x00010007

080108f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	68da      	ldr	r2, [r3, #12]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f022 0201 	bic.w	r2, r2, #1
 801090e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	6a1a      	ldr	r2, [r3, #32]
 8010916:	f241 1311 	movw	r3, #4369	; 0x1111
 801091a:	4013      	ands	r3, r2
 801091c:	2b00      	cmp	r3, #0
 801091e:	d10f      	bne.n	8010940 <HAL_TIM_Base_Stop_IT+0x48>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	6a1a      	ldr	r2, [r3, #32]
 8010926:	f240 4344 	movw	r3, #1092	; 0x444
 801092a:	4013      	ands	r3, r2
 801092c:	2b00      	cmp	r3, #0
 801092e:	d107      	bne.n	8010940 <HAL_TIM_Base_Stop_IT+0x48>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	681a      	ldr	r2, [r3, #0]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f022 0201 	bic.w	r2, r2, #1
 801093e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010940:	2300      	movs	r3, #0
}
 8010942:	4618      	mov	r0, r3
 8010944:	370c      	adds	r7, #12
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr

0801094e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801094e:	b580      	push	{r7, lr}
 8010950:	b082      	sub	sp, #8
 8010952:	af00      	add	r7, sp, #0
 8010954:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	691b      	ldr	r3, [r3, #16]
 801095c:	f003 0302 	and.w	r3, r3, #2
 8010960:	2b02      	cmp	r3, #2
 8010962:	d122      	bne.n	80109aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	68db      	ldr	r3, [r3, #12]
 801096a:	f003 0302 	and.w	r3, r3, #2
 801096e:	2b02      	cmp	r3, #2
 8010970:	d11b      	bne.n	80109aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	f06f 0202 	mvn.w	r2, #2
 801097a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2201      	movs	r2, #1
 8010980:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	699b      	ldr	r3, [r3, #24]
 8010988:	f003 0303 	and.w	r3, r3, #3
 801098c:	2b00      	cmp	r3, #0
 801098e:	d003      	beq.n	8010998 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f7f6 fe4d 	bl	8007630 <HAL_TIM_IC_CaptureCallback>
 8010996:	e005      	b.n	80109a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 f8f7 	bl	8010b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f000 f8fe 	bl	8010ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2200      	movs	r2, #0
 80109a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	691b      	ldr	r3, [r3, #16]
 80109b0:	f003 0304 	and.w	r3, r3, #4
 80109b4:	2b04      	cmp	r3, #4
 80109b6:	d122      	bne.n	80109fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	68db      	ldr	r3, [r3, #12]
 80109be:	f003 0304 	and.w	r3, r3, #4
 80109c2:	2b04      	cmp	r3, #4
 80109c4:	d11b      	bne.n	80109fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f06f 0204 	mvn.w	r2, #4
 80109ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2202      	movs	r2, #2
 80109d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	699b      	ldr	r3, [r3, #24]
 80109dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d003      	beq.n	80109ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f7f6 fe23 	bl	8007630 <HAL_TIM_IC_CaptureCallback>
 80109ea:	e005      	b.n	80109f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f000 f8cd 	bl	8010b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 f8d4 	bl	8010ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2200      	movs	r2, #0
 80109fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	691b      	ldr	r3, [r3, #16]
 8010a04:	f003 0308 	and.w	r3, r3, #8
 8010a08:	2b08      	cmp	r3, #8
 8010a0a:	d122      	bne.n	8010a52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	68db      	ldr	r3, [r3, #12]
 8010a12:	f003 0308 	and.w	r3, r3, #8
 8010a16:	2b08      	cmp	r3, #8
 8010a18:	d11b      	bne.n	8010a52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	f06f 0208 	mvn.w	r2, #8
 8010a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2204      	movs	r2, #4
 8010a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	69db      	ldr	r3, [r3, #28]
 8010a30:	f003 0303 	and.w	r3, r3, #3
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d003      	beq.n	8010a40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f7f6 fdf9 	bl	8007630 <HAL_TIM_IC_CaptureCallback>
 8010a3e:	e005      	b.n	8010a4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f000 f8a3 	bl	8010b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 f8aa 	bl	8010ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	691b      	ldr	r3, [r3, #16]
 8010a58:	f003 0310 	and.w	r3, r3, #16
 8010a5c:	2b10      	cmp	r3, #16
 8010a5e:	d122      	bne.n	8010aa6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	68db      	ldr	r3, [r3, #12]
 8010a66:	f003 0310 	and.w	r3, r3, #16
 8010a6a:	2b10      	cmp	r3, #16
 8010a6c:	d11b      	bne.n	8010aa6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	f06f 0210 	mvn.w	r2, #16
 8010a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2208      	movs	r2, #8
 8010a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	69db      	ldr	r3, [r3, #28]
 8010a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d003      	beq.n	8010a94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f7f6 fdcf 	bl	8007630 <HAL_TIM_IC_CaptureCallback>
 8010a92:	e005      	b.n	8010aa0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f000 f879 	bl	8010b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 f880 	bl	8010ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	691b      	ldr	r3, [r3, #16]
 8010aac:	f003 0301 	and.w	r3, r3, #1
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d10e      	bne.n	8010ad2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	f003 0301 	and.w	r3, r3, #1
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d107      	bne.n	8010ad2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f06f 0201 	mvn.w	r2, #1
 8010aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f7f6 fd9d 	bl	800760c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	691b      	ldr	r3, [r3, #16]
 8010ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010adc:	2b80      	cmp	r3, #128	; 0x80
 8010ade:	d10e      	bne.n	8010afe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	68db      	ldr	r3, [r3, #12]
 8010ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010aea:	2b80      	cmp	r3, #128	; 0x80
 8010aec:	d107      	bne.n	8010afe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f000 f991 	bl	8010e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	691b      	ldr	r3, [r3, #16]
 8010b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b0c:	d10e      	bne.n	8010b2c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	68db      	ldr	r3, [r3, #12]
 8010b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b18:	2b80      	cmp	r3, #128	; 0x80
 8010b1a:	d107      	bne.n	8010b2c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f000 f984 	bl	8010e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	691b      	ldr	r3, [r3, #16]
 8010b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b36:	2b40      	cmp	r3, #64	; 0x40
 8010b38:	d10e      	bne.n	8010b58 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	68db      	ldr	r3, [r3, #12]
 8010b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b44:	2b40      	cmp	r3, #64	; 0x40
 8010b46:	d107      	bne.n	8010b58 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f000 f82e 	bl	8010bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	691b      	ldr	r3, [r3, #16]
 8010b5e:	f003 0320 	and.w	r3, r3, #32
 8010b62:	2b20      	cmp	r3, #32
 8010b64:	d10e      	bne.n	8010b84 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	68db      	ldr	r3, [r3, #12]
 8010b6c:	f003 0320 	and.w	r3, r3, #32
 8010b70:	2b20      	cmp	r3, #32
 8010b72:	d107      	bne.n	8010b84 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f06f 0220 	mvn.w	r2, #32
 8010b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 f944 	bl	8010e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010b84:	bf00      	nop
 8010b86:	3708      	adds	r7, #8
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b083      	sub	sp, #12
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010b94:	bf00      	nop
 8010b96:	370c      	adds	r7, #12
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b083      	sub	sp, #12
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010ba8:	bf00      	nop
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010bbc:	bf00      	nop
 8010bbe:	370c      	adds	r7, #12
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	4a40      	ldr	r2, [pc, #256]	; (8010cdc <TIM_Base_SetConfig+0x114>)
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d013      	beq.n	8010c08 <TIM_Base_SetConfig+0x40>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010be6:	d00f      	beq.n	8010c08 <TIM_Base_SetConfig+0x40>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	4a3d      	ldr	r2, [pc, #244]	; (8010ce0 <TIM_Base_SetConfig+0x118>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d00b      	beq.n	8010c08 <TIM_Base_SetConfig+0x40>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4a3c      	ldr	r2, [pc, #240]	; (8010ce4 <TIM_Base_SetConfig+0x11c>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d007      	beq.n	8010c08 <TIM_Base_SetConfig+0x40>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	4a3b      	ldr	r2, [pc, #236]	; (8010ce8 <TIM_Base_SetConfig+0x120>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d003      	beq.n	8010c08 <TIM_Base_SetConfig+0x40>
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	4a3a      	ldr	r2, [pc, #232]	; (8010cec <TIM_Base_SetConfig+0x124>)
 8010c04:	4293      	cmp	r3, r2
 8010c06:	d108      	bne.n	8010c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	68fa      	ldr	r2, [r7, #12]
 8010c16:	4313      	orrs	r3, r2
 8010c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4a2f      	ldr	r2, [pc, #188]	; (8010cdc <TIM_Base_SetConfig+0x114>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d01f      	beq.n	8010c62 <TIM_Base_SetConfig+0x9a>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c28:	d01b      	beq.n	8010c62 <TIM_Base_SetConfig+0x9a>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4a2c      	ldr	r2, [pc, #176]	; (8010ce0 <TIM_Base_SetConfig+0x118>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d017      	beq.n	8010c62 <TIM_Base_SetConfig+0x9a>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	4a2b      	ldr	r2, [pc, #172]	; (8010ce4 <TIM_Base_SetConfig+0x11c>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d013      	beq.n	8010c62 <TIM_Base_SetConfig+0x9a>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4a2a      	ldr	r2, [pc, #168]	; (8010ce8 <TIM_Base_SetConfig+0x120>)
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	d00f      	beq.n	8010c62 <TIM_Base_SetConfig+0x9a>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4a29      	ldr	r2, [pc, #164]	; (8010cec <TIM_Base_SetConfig+0x124>)
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d00b      	beq.n	8010c62 <TIM_Base_SetConfig+0x9a>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	4a28      	ldr	r2, [pc, #160]	; (8010cf0 <TIM_Base_SetConfig+0x128>)
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d007      	beq.n	8010c62 <TIM_Base_SetConfig+0x9a>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4a27      	ldr	r2, [pc, #156]	; (8010cf4 <TIM_Base_SetConfig+0x12c>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d003      	beq.n	8010c62 <TIM_Base_SetConfig+0x9a>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4a26      	ldr	r2, [pc, #152]	; (8010cf8 <TIM_Base_SetConfig+0x130>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d108      	bne.n	8010c74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	68db      	ldr	r3, [r3, #12]
 8010c6e:	68fa      	ldr	r2, [r7, #12]
 8010c70:	4313      	orrs	r3, r2
 8010c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	695b      	ldr	r3, [r3, #20]
 8010c7e:	4313      	orrs	r3, r2
 8010c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	68fa      	ldr	r2, [r7, #12]
 8010c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	689a      	ldr	r2, [r3, #8]
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	681a      	ldr	r2, [r3, #0]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	4a10      	ldr	r2, [pc, #64]	; (8010cdc <TIM_Base_SetConfig+0x114>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d00f      	beq.n	8010cc0 <TIM_Base_SetConfig+0xf8>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	4a12      	ldr	r2, [pc, #72]	; (8010cec <TIM_Base_SetConfig+0x124>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d00b      	beq.n	8010cc0 <TIM_Base_SetConfig+0xf8>
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	4a11      	ldr	r2, [pc, #68]	; (8010cf0 <TIM_Base_SetConfig+0x128>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d007      	beq.n	8010cc0 <TIM_Base_SetConfig+0xf8>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	4a10      	ldr	r2, [pc, #64]	; (8010cf4 <TIM_Base_SetConfig+0x12c>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d003      	beq.n	8010cc0 <TIM_Base_SetConfig+0xf8>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	4a0f      	ldr	r2, [pc, #60]	; (8010cf8 <TIM_Base_SetConfig+0x130>)
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	d103      	bne.n	8010cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	691a      	ldr	r2, [r3, #16]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2201      	movs	r2, #1
 8010ccc:	615a      	str	r2, [r3, #20]
}
 8010cce:	bf00      	nop
 8010cd0:	3714      	adds	r7, #20
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop
 8010cdc:	40012c00 	.word	0x40012c00
 8010ce0:	40000400 	.word	0x40000400
 8010ce4:	40000800 	.word	0x40000800
 8010ce8:	40000c00 	.word	0x40000c00
 8010cec:	40013400 	.word	0x40013400
 8010cf0:	40014000 	.word	0x40014000
 8010cf4:	40014400 	.word	0x40014400
 8010cf8:	40014800 	.word	0x40014800

08010cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b085      	sub	sp, #20
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
 8010d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d101      	bne.n	8010d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010d10:	2302      	movs	r3, #2
 8010d12:	e068      	b.n	8010de6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2201      	movs	r2, #1
 8010d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2202      	movs	r2, #2
 8010d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	689b      	ldr	r3, [r3, #8]
 8010d32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	4a2e      	ldr	r2, [pc, #184]	; (8010df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d004      	beq.n	8010d48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	4a2d      	ldr	r2, [pc, #180]	; (8010df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010d44:	4293      	cmp	r3, r2
 8010d46:	d108      	bne.n	8010d5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010d4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	68fa      	ldr	r2, [r7, #12]
 8010d56:	4313      	orrs	r3, r2
 8010d58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	68fa      	ldr	r2, [r7, #12]
 8010d68:	4313      	orrs	r3, r2
 8010d6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	68fa      	ldr	r2, [r7, #12]
 8010d72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4a1e      	ldr	r2, [pc, #120]	; (8010df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d01d      	beq.n	8010dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d86:	d018      	beq.n	8010dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	4a1b      	ldr	r2, [pc, #108]	; (8010dfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d013      	beq.n	8010dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	4a1a      	ldr	r2, [pc, #104]	; (8010e00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010d98:	4293      	cmp	r3, r2
 8010d9a:	d00e      	beq.n	8010dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	4a18      	ldr	r2, [pc, #96]	; (8010e04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010da2:	4293      	cmp	r3, r2
 8010da4:	d009      	beq.n	8010dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	4a13      	ldr	r2, [pc, #76]	; (8010df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d004      	beq.n	8010dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4a14      	ldr	r2, [pc, #80]	; (8010e08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d10c      	bne.n	8010dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	689b      	ldr	r3, [r3, #8]
 8010dc6:	68ba      	ldr	r2, [r7, #8]
 8010dc8:	4313      	orrs	r3, r2
 8010dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	68ba      	ldr	r2, [r7, #8]
 8010dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2200      	movs	r2, #0
 8010de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010de4:	2300      	movs	r3, #0
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3714      	adds	r7, #20
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	40012c00 	.word	0x40012c00
 8010df8:	40013400 	.word	0x40013400
 8010dfc:	40000400 	.word	0x40000400
 8010e00:	40000800 	.word	0x40000800
 8010e04:	40000c00 	.word	0x40000c00
 8010e08:	40014000 	.word	0x40014000

08010e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b083      	sub	sp, #12
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010e14:	bf00      	nop
 8010e16:	370c      	adds	r7, #12
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010e28:	bf00      	nop
 8010e2a:	370c      	adds	r7, #12
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr

08010e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010e3c:	bf00      	nop
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr

08010e48 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010e48:	b084      	sub	sp, #16
 8010e4a:	b480      	push	{r7}
 8010e4c:	b085      	sub	sp, #20
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
 8010e52:	f107 001c 	add.w	r0, r7, #28
 8010e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8010e5e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8010e60:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010e62:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8010e66:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8010e6a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8010e6e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010e70:	68fa      	ldr	r2, [r7, #12]
 8010e72:	4313      	orrs	r3, r2
 8010e74:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	685a      	ldr	r2, [r3, #4]
 8010e7a:	4b07      	ldr	r3, [pc, #28]	; (8010e98 <SDMMC_Init+0x50>)
 8010e7c:	4013      	ands	r3, r2
 8010e7e:	68fa      	ldr	r2, [r7, #12]
 8010e80:	431a      	orrs	r2, r3
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010e86:	2300      	movs	r3, #0
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3714      	adds	r7, #20
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	b004      	add	sp, #16
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	ffc02c00 	.word	0xffc02c00

08010e9c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b083      	sub	sp, #12
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	370c      	adds	r7, #12
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr

08010eb6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010eb6:	b480      	push	{r7}
 8010eb8:	b083      	sub	sp, #12
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
 8010ebe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010eca:	2300      	movs	r3, #0
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	370c      	adds	r7, #12
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed6:	4770      	bx	lr

08010ed8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f043 0203 	orr.w	r2, r3, #3
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010eec:	2002      	movs	r0, #2
 8010eee:	f7f6 fda1 	bl	8007a34 <HAL_Delay>

  return HAL_OK;
 8010ef2:	2300      	movs	r3, #0
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3708      	adds	r7, #8
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}

08010efc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f003 0303 	and.w	r3, r3, #3
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	370c      	adds	r7, #12
 8010f10:	46bd      	mov	sp, r7
 8010f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f16:	4770      	bx	lr

08010f18 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b085      	sub	sp, #20
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010f22:	2300      	movs	r3, #0
 8010f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f36:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010f3c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010f42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010f44:	68fa      	ldr	r2, [r7, #12]
 8010f46:	4313      	orrs	r3, r2
 8010f48:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	68da      	ldr	r2, [r3, #12]
 8010f4e:	4b06      	ldr	r3, [pc, #24]	; (8010f68 <SDMMC_SendCommand+0x50>)
 8010f50:	4013      	ands	r3, r2
 8010f52:	68fa      	ldr	r2, [r7, #12]
 8010f54:	431a      	orrs	r2, r3
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010f5a:	2300      	movs	r3, #0
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	3714      	adds	r7, #20
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr
 8010f68:	fffee0c0 	.word	0xfffee0c0

08010f6c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	b083      	sub	sp, #12
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	691b      	ldr	r3, [r3, #16]
 8010f78:	b2db      	uxtb	r3, r3
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	370c      	adds	r7, #12
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010f86:	b480      	push	{r7}
 8010f88:	b085      	sub	sp, #20
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
 8010f8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	3314      	adds	r3, #20
 8010f94:	461a      	mov	r2, r3
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	4413      	add	r3, r2
 8010f9a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	681b      	ldr	r3, [r3, #0]
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3714      	adds	r7, #20
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010faa:	4770      	bx	lr

08010fac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010fac:	b480      	push	{r7}
 8010fae:	b085      	sub	sp, #20
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
 8010fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	681a      	ldr	r2, [r3, #0]
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	685a      	ldr	r2, [r3, #4]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fd2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010fd8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010fde:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010fe0:	68fa      	ldr	r2, [r7, #12]
 8010fe2:	4313      	orrs	r3, r2
 8010fe4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	431a      	orrs	r2, r3
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010ff6:	2300      	movs	r3, #0

}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3714      	adds	r7, #20
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011002:	4770      	bx	lr

08011004 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b088      	sub	sp, #32
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011012:	2310      	movs	r3, #16
 8011014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011016:	f44f 7380 	mov.w	r3, #256	; 0x100
 801101a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801101c:	2300      	movs	r3, #0
 801101e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011024:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011026:	f107 0308 	add.w	r3, r7, #8
 801102a:	4619      	mov	r1, r3
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f7ff ff73 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011032:	f241 3288 	movw	r2, #5000	; 0x1388
 8011036:	2110      	movs	r1, #16
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f000 faa5 	bl	8011588 <SDMMC_GetCmdResp1>
 801103e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011040:	69fb      	ldr	r3, [r7, #28]
}
 8011042:	4618      	mov	r0, r3
 8011044:	3720      	adds	r7, #32
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}

0801104a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801104a:	b580      	push	{r7, lr}
 801104c:	b088      	sub	sp, #32
 801104e:	af00      	add	r7, sp, #0
 8011050:	6078      	str	r0, [r7, #4]
 8011052:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011058:	2311      	movs	r3, #17
 801105a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801105c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011060:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011062:	2300      	movs	r3, #0
 8011064:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801106a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801106c:	f107 0308 	add.w	r3, r7, #8
 8011070:	4619      	mov	r1, r3
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f7ff ff50 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011078:	f241 3288 	movw	r2, #5000	; 0x1388
 801107c:	2111      	movs	r1, #17
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f000 fa82 	bl	8011588 <SDMMC_GetCmdResp1>
 8011084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011086:	69fb      	ldr	r3, [r7, #28]
}
 8011088:	4618      	mov	r0, r3
 801108a:	3720      	adds	r7, #32
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b088      	sub	sp, #32
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801109e:	2312      	movs	r3, #18
 80110a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110a8:	2300      	movs	r3, #0
 80110aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110b2:	f107 0308 	add.w	r3, r7, #8
 80110b6:	4619      	mov	r1, r3
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f7ff ff2d 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80110be:	f241 3288 	movw	r2, #5000	; 0x1388
 80110c2:	2112      	movs	r1, #18
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f000 fa5f 	bl	8011588 <SDMMC_GetCmdResp1>
 80110ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110cc:	69fb      	ldr	r3, [r7, #28]
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	3720      	adds	r7, #32
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}

080110d6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80110d6:	b580      	push	{r7, lr}
 80110d8:	b088      	sub	sp, #32
 80110da:	af00      	add	r7, sp, #0
 80110dc:	6078      	str	r0, [r7, #4]
 80110de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80110e4:	2318      	movs	r3, #24
 80110e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110ee:	2300      	movs	r3, #0
 80110f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110f8:	f107 0308 	add.w	r3, r7, #8
 80110fc:	4619      	mov	r1, r3
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f7ff ff0a 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011104:	f241 3288 	movw	r2, #5000	; 0x1388
 8011108:	2118      	movs	r1, #24
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f000 fa3c 	bl	8011588 <SDMMC_GetCmdResp1>
 8011110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011112:	69fb      	ldr	r3, [r7, #28]
}
 8011114:	4618      	mov	r0, r3
 8011116:	3720      	adds	r7, #32
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b088      	sub	sp, #32
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801112a:	2319      	movs	r3, #25
 801112c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801112e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011134:	2300      	movs	r3, #0
 8011136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801113c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801113e:	f107 0308 	add.w	r3, r7, #8
 8011142:	4619      	mov	r1, r3
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f7ff fee7 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801114a:	f241 3288 	movw	r2, #5000	; 0x1388
 801114e:	2119      	movs	r1, #25
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f000 fa19 	bl	8011588 <SDMMC_GetCmdResp1>
 8011156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011158:	69fb      	ldr	r3, [r7, #28]
}
 801115a:	4618      	mov	r0, r3
 801115c:	3720      	adds	r7, #32
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
	...

08011164 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b088      	sub	sp, #32
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801116c:	2300      	movs	r3, #0
 801116e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011170:	230c      	movs	r3, #12
 8011172:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801117a:	2300      	movs	r3, #0
 801117c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011182:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801119c:	f107 0308 	add.w	r3, r7, #8
 80111a0:	4619      	mov	r1, r3
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f7ff feb8 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80111a8:	4a08      	ldr	r2, [pc, #32]	; (80111cc <SDMMC_CmdStopTransfer+0x68>)
 80111aa:	210c      	movs	r1, #12
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f000 f9eb 	bl	8011588 <SDMMC_GetCmdResp1>
 80111b2:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	68db      	ldr	r3, [r3, #12]
 80111b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80111c0:	69fb      	ldr	r3, [r7, #28]
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3720      	adds	r7, #32
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	05f5e100 	.word	0x05f5e100

080111d0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b08a      	sub	sp, #40	; 0x28
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80111e0:	2307      	movs	r3, #7
 80111e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111e8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111ea:	2300      	movs	r3, #0
 80111ec:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111f2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111f4:	f107 0310 	add.w	r3, r7, #16
 80111f8:	4619      	mov	r1, r3
 80111fa:	68f8      	ldr	r0, [r7, #12]
 80111fc:	f7ff fe8c 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011200:	f241 3288 	movw	r2, #5000	; 0x1388
 8011204:	2107      	movs	r1, #7
 8011206:	68f8      	ldr	r0, [r7, #12]
 8011208:	f000 f9be 	bl	8011588 <SDMMC_GetCmdResp1>
 801120c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011210:	4618      	mov	r0, r3
 8011212:	3728      	adds	r7, #40	; 0x28
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b088      	sub	sp, #32
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011220:	2300      	movs	r3, #0
 8011222:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011224:	2300      	movs	r3, #0
 8011226:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011228:	2300      	movs	r3, #0
 801122a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801122c:	2300      	movs	r3, #0
 801122e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011234:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011236:	f107 0308 	add.w	r3, r7, #8
 801123a:	4619      	mov	r1, r3
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f7ff fe6b 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 f976 	bl	8011534 <SDMMC_GetCmdError>
 8011248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801124a:	69fb      	ldr	r3, [r7, #28]
}
 801124c:	4618      	mov	r0, r3
 801124e:	3720      	adds	r7, #32
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}

08011254 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b088      	sub	sp, #32
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801125c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011262:	2308      	movs	r3, #8
 8011264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011266:	f44f 7380 	mov.w	r3, #256	; 0x100
 801126a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801126c:	2300      	movs	r3, #0
 801126e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011274:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011276:	f107 0308 	add.w	r3, r7, #8
 801127a:	4619      	mov	r1, r3
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7ff fe4b 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f000 fb6a 	bl	801195c <SDMMC_GetCmdResp7>
 8011288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801128a:	69fb      	ldr	r3, [r7, #28]
}
 801128c:	4618      	mov	r0, r3
 801128e:	3720      	adds	r7, #32
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}

08011294 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b088      	sub	sp, #32
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80112a2:	2337      	movs	r3, #55	; 0x37
 80112a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112ac:	2300      	movs	r3, #0
 80112ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112b6:	f107 0308 	add.w	r3, r7, #8
 80112ba:	4619      	mov	r1, r3
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f7ff fe2b 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80112c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80112c6:	2137      	movs	r1, #55	; 0x37
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f000 f95d 	bl	8011588 <SDMMC_GetCmdResp1>
 80112ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112d0:	69fb      	ldr	r3, [r7, #28]
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3720      	adds	r7, #32
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}

080112da <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80112da:	b580      	push	{r7, lr}
 80112dc:	b088      	sub	sp, #32
 80112de:	af00      	add	r7, sp, #0
 80112e0:	6078      	str	r0, [r7, #4]
 80112e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80112e8:	2329      	movs	r3, #41	; 0x29
 80112ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112f2:	2300      	movs	r3, #0
 80112f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112fc:	f107 0308 	add.w	r3, r7, #8
 8011300:	4619      	mov	r1, r3
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f7ff fe08 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f000 fa75 	bl	80117f8 <SDMMC_GetCmdResp3>
 801130e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011310:	69fb      	ldr	r3, [r7, #28]
}
 8011312:	4618      	mov	r0, r3
 8011314:	3720      	adds	r7, #32
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}

0801131a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801131a:	b580      	push	{r7, lr}
 801131c:	b088      	sub	sp, #32
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
 8011322:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011328:	2306      	movs	r3, #6
 801132a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801132c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011332:	2300      	movs	r3, #0
 8011334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801133a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801133c:	f107 0308 	add.w	r3, r7, #8
 8011340:	4619      	mov	r1, r3
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f7ff fde8 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011348:	f241 3288 	movw	r2, #5000	; 0x1388
 801134c:	2106      	movs	r1, #6
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 f91a 	bl	8011588 <SDMMC_GetCmdResp1>
 8011354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011356:	69fb      	ldr	r3, [r7, #28]
}
 8011358:	4618      	mov	r0, r3
 801135a:	3720      	adds	r7, #32
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b088      	sub	sp, #32
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011368:	2300      	movs	r3, #0
 801136a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801136c:	2333      	movs	r3, #51	; 0x33
 801136e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011376:	2300      	movs	r3, #0
 8011378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801137a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801137e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011380:	f107 0308 	add.w	r3, r7, #8
 8011384:	4619      	mov	r1, r3
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f7ff fdc6 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801138c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011390:	2133      	movs	r1, #51	; 0x33
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f000 f8f8 	bl	8011588 <SDMMC_GetCmdResp1>
 8011398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801139a:	69fb      	ldr	r3, [r7, #28]
}
 801139c:	4618      	mov	r0, r3
 801139e:	3720      	adds	r7, #32
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}

080113a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b088      	sub	sp, #32
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80113ac:	2300      	movs	r3, #0
 80113ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80113b0:	2302      	movs	r3, #2
 80113b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80113b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80113b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113ba:	2300      	movs	r3, #0
 80113bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113c4:	f107 0308 	add.w	r3, r7, #8
 80113c8:	4619      	mov	r1, r3
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f7ff fda4 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f000 f9c9 	bl	8011768 <SDMMC_GetCmdResp2>
 80113d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113d8:	69fb      	ldr	r3, [r7, #28]
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3720      	adds	r7, #32
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}

080113e2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80113e2:	b580      	push	{r7, lr}
 80113e4:	b088      	sub	sp, #32
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
 80113ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80113f0:	2309      	movs	r3, #9
 80113f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80113f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80113f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113fa:	2300      	movs	r3, #0
 80113fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011402:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011404:	f107 0308 	add.w	r3, r7, #8
 8011408:	4619      	mov	r1, r3
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f7ff fd84 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f000 f9a9 	bl	8011768 <SDMMC_GetCmdResp2>
 8011416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011418:	69fb      	ldr	r3, [r7, #28]
}
 801141a:	4618      	mov	r0, r3
 801141c:	3720      	adds	r7, #32
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}

08011422 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011422:	b580      	push	{r7, lr}
 8011424:	b088      	sub	sp, #32
 8011426:	af00      	add	r7, sp, #0
 8011428:	6078      	str	r0, [r7, #4]
 801142a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801142c:	2300      	movs	r3, #0
 801142e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011430:	2303      	movs	r3, #3
 8011432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801143a:	2300      	movs	r3, #0
 801143c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011444:	f107 0308 	add.w	r3, r7, #8
 8011448:	4619      	mov	r1, r3
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f7ff fd64 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011450:	683a      	ldr	r2, [r7, #0]
 8011452:	2103      	movs	r1, #3
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f000 fa0b 	bl	8011870 <SDMMC_GetCmdResp6>
 801145a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801145c:	69fb      	ldr	r3, [r7, #28]
}
 801145e:	4618      	mov	r0, r3
 8011460:	3720      	adds	r7, #32
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}

08011466 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011466:	b580      	push	{r7, lr}
 8011468:	b088      	sub	sp, #32
 801146a:	af00      	add	r7, sp, #0
 801146c:	6078      	str	r0, [r7, #4]
 801146e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011474:	230d      	movs	r3, #13
 8011476:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011478:	f44f 7380 	mov.w	r3, #256	; 0x100
 801147c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801147e:	2300      	movs	r3, #0
 8011480:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011486:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011488:	f107 0308 	add.w	r3, r7, #8
 801148c:	4619      	mov	r1, r3
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f7ff fd42 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011494:	f241 3288 	movw	r2, #5000	; 0x1388
 8011498:	210d      	movs	r1, #13
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f000 f874 	bl	8011588 <SDMMC_GetCmdResp1>
 80114a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114a2:	69fb      	ldr	r3, [r7, #28]
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3720      	adds	r7, #32
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b088      	sub	sp, #32
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80114b4:	2300      	movs	r3, #0
 80114b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80114b8:	230d      	movs	r3, #13
 80114ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114c2:	2300      	movs	r3, #0
 80114c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114cc:	f107 0308 	add.w	r3, r7, #8
 80114d0:	4619      	mov	r1, r3
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f7ff fd20 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80114d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80114dc:	210d      	movs	r1, #13
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f000 f852 	bl	8011588 <SDMMC_GetCmdResp1>
 80114e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114e6:	69fb      	ldr	r3, [r7, #28]
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3720      	adds	r7, #32
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b088      	sub	sp, #32
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 80114f8:	2300      	movs	r3, #0
 80114fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80114fc:	230b      	movs	r3, #11
 80114fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011506:	2300      	movs	r3, #0
 8011508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801150e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011510:	f107 0308 	add.w	r3, r7, #8
 8011514:	4619      	mov	r1, r3
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f7ff fcfe 	bl	8010f18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 801151c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011520:	210b      	movs	r1, #11
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f000 f830 	bl	8011588 <SDMMC_GetCmdResp1>
 8011528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801152a:	69fb      	ldr	r3, [r7, #28]
}
 801152c:	4618      	mov	r0, r3
 801152e:	3720      	adds	r7, #32
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}

08011534 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011534:	b490      	push	{r4, r7}
 8011536:	b082      	sub	sp, #8
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801153c:	4b0f      	ldr	r3, [pc, #60]	; (801157c <SDMMC_GetCmdError+0x48>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	4a0f      	ldr	r2, [pc, #60]	; (8011580 <SDMMC_GetCmdError+0x4c>)
 8011542:	fba2 2303 	umull	r2, r3, r2, r3
 8011546:	0a5b      	lsrs	r3, r3, #9
 8011548:	f241 3288 	movw	r2, #5000	; 0x1388
 801154c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011550:	4623      	mov	r3, r4
 8011552:	1e5c      	subs	r4, r3, #1
 8011554:	2b00      	cmp	r3, #0
 8011556:	d102      	bne.n	801155e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011558:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801155c:	e009      	b.n	8011572 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011566:	2b00      	cmp	r3, #0
 8011568:	d0f2      	beq.n	8011550 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	4a05      	ldr	r2, [pc, #20]	; (8011584 <SDMMC_GetCmdError+0x50>)
 801156e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011570:	2300      	movs	r3, #0
}
 8011572:	4618      	mov	r0, r3
 8011574:	3708      	adds	r7, #8
 8011576:	46bd      	mov	sp, r7
 8011578:	bc90      	pop	{r4, r7}
 801157a:	4770      	bx	lr
 801157c:	20000038 	.word	0x20000038
 8011580:	10624dd3 	.word	0x10624dd3
 8011584:	002000c5 	.word	0x002000c5

08011588 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011588:	b590      	push	{r4, r7, lr}
 801158a:	b087      	sub	sp, #28
 801158c:	af00      	add	r7, sp, #0
 801158e:	60f8      	str	r0, [r7, #12]
 8011590:	460b      	mov	r3, r1
 8011592:	607a      	str	r2, [r7, #4]
 8011594:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011596:	4b6f      	ldr	r3, [pc, #444]	; (8011754 <SDMMC_GetCmdResp1+0x1cc>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	4a6f      	ldr	r2, [pc, #444]	; (8011758 <SDMMC_GetCmdResp1+0x1d0>)
 801159c:	fba2 2303 	umull	r2, r3, r2, r3
 80115a0:	0a5b      	lsrs	r3, r3, #9
 80115a2:	687a      	ldr	r2, [r7, #4]
 80115a4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80115a8:	4623      	mov	r3, r4
 80115aa:	1e5c      	subs	r4, r3, #1
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d102      	bne.n	80115b6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80115b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80115b4:	e0c9      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115ba:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80115bc:	697a      	ldr	r2, [r7, #20]
 80115be:	4b67      	ldr	r3, [pc, #412]	; (801175c <SDMMC_GetCmdResp1+0x1d4>)
 80115c0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d0f0      	beq.n	80115a8 <SDMMC_GetCmdResp1+0x20>
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d1eb      	bne.n	80115a8 <SDMMC_GetCmdResp1+0x20>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115d4:	f003 0304 	and.w	r3, r3, #4
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d004      	beq.n	80115e6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2204      	movs	r2, #4
 80115e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80115e2:	2304      	movs	r3, #4
 80115e4:	e0b1      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115ea:	f003 0301 	and.w	r3, r3, #1
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d004      	beq.n	80115fc <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2201      	movs	r2, #1
 80115f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115f8:	2301      	movs	r3, #1
 80115fa:	e0a6      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	4a58      	ldr	r2, [pc, #352]	; (8011760 <SDMMC_GetCmdResp1+0x1d8>)
 8011600:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011602:	68f8      	ldr	r0, [r7, #12]
 8011604:	f7ff fcb2 	bl	8010f6c <SDMMC_GetCommandResponse>
 8011608:	4603      	mov	r3, r0
 801160a:	461a      	mov	r2, r3
 801160c:	7afb      	ldrb	r3, [r7, #11]
 801160e:	4293      	cmp	r3, r2
 8011610:	d001      	beq.n	8011616 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011612:	2301      	movs	r3, #1
 8011614:	e099      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011616:	2100      	movs	r1, #0
 8011618:	68f8      	ldr	r0, [r7, #12]
 801161a:	f7ff fcb4 	bl	8010f86 <SDMMC_GetResponse>
 801161e:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011620:	693a      	ldr	r2, [r7, #16]
 8011622:	4b50      	ldr	r3, [pc, #320]	; (8011764 <SDMMC_GetCmdResp1+0x1dc>)
 8011624:	4013      	ands	r3, r2
 8011626:	2b00      	cmp	r3, #0
 8011628:	d101      	bne.n	801162e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801162a:	2300      	movs	r3, #0
 801162c:	e08d      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	2b00      	cmp	r3, #0
 8011632:	da02      	bge.n	801163a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011638:	e087      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011640:	2b00      	cmp	r3, #0
 8011642:	d001      	beq.n	8011648 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011644:	2340      	movs	r3, #64	; 0x40
 8011646:	e080      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801164e:	2b00      	cmp	r3, #0
 8011650:	d001      	beq.n	8011656 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011652:	2380      	movs	r3, #128	; 0x80
 8011654:	e079      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801165c:	2b00      	cmp	r3, #0
 801165e:	d002      	beq.n	8011666 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011664:	e071      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801166c:	2b00      	cmp	r3, #0
 801166e:	d002      	beq.n	8011676 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011674:	e069      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801167c:	2b00      	cmp	r3, #0
 801167e:	d002      	beq.n	8011686 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011684:	e061      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801168c:	2b00      	cmp	r3, #0
 801168e:	d002      	beq.n	8011696 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011690:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011694:	e059      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801169c:	2b00      	cmp	r3, #0
 801169e:	d002      	beq.n	80116a6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80116a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116a4:	e051      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d002      	beq.n	80116b6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80116b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80116b4:	e049      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d002      	beq.n	80116c6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80116c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80116c4:	e041      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d002      	beq.n	80116d6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80116d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116d4:	e039      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d002      	beq.n	80116e6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80116e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80116e4:	e031      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d002      	beq.n	80116f6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80116f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80116f4:	e029      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d002      	beq.n	8011706 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011700:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011704:	e021      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011706:	693b      	ldr	r3, [r7, #16]
 8011708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801170c:	2b00      	cmp	r3, #0
 801170e:	d002      	beq.n	8011716 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011710:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011714:	e019      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801171c:	2b00      	cmp	r3, #0
 801171e:	d002      	beq.n	8011726 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011720:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011724:	e011      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801172c:	2b00      	cmp	r3, #0
 801172e:	d002      	beq.n	8011736 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011730:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011734:	e009      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	f003 0308 	and.w	r3, r3, #8
 801173c:	2b00      	cmp	r3, #0
 801173e:	d002      	beq.n	8011746 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011740:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011744:	e001      	b.n	801174a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801174a:	4618      	mov	r0, r3
 801174c:	371c      	adds	r7, #28
 801174e:	46bd      	mov	sp, r7
 8011750:	bd90      	pop	{r4, r7, pc}
 8011752:	bf00      	nop
 8011754:	20000038 	.word	0x20000038
 8011758:	10624dd3 	.word	0x10624dd3
 801175c:	00200045 	.word	0x00200045
 8011760:	002000c5 	.word	0x002000c5
 8011764:	fdffe008 	.word	0xfdffe008

08011768 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011768:	b490      	push	{r4, r7}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011770:	4b1e      	ldr	r3, [pc, #120]	; (80117ec <SDMMC_GetCmdResp2+0x84>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	4a1e      	ldr	r2, [pc, #120]	; (80117f0 <SDMMC_GetCmdResp2+0x88>)
 8011776:	fba2 2303 	umull	r2, r3, r2, r3
 801177a:	0a5b      	lsrs	r3, r3, #9
 801177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011780:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011784:	4623      	mov	r3, r4
 8011786:	1e5c      	subs	r4, r3, #1
 8011788:	2b00      	cmp	r3, #0
 801178a:	d102      	bne.n	8011792 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801178c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011790:	e026      	b.n	80117e0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011796:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d0f0      	beq.n	8011784 <SDMMC_GetCmdResp2+0x1c>
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d1eb      	bne.n	8011784 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117b0:	f003 0304 	and.w	r3, r3, #4
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d004      	beq.n	80117c2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2204      	movs	r2, #4
 80117bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80117be:	2304      	movs	r3, #4
 80117c0:	e00e      	b.n	80117e0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117c6:	f003 0301 	and.w	r3, r3, #1
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d004      	beq.n	80117d8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2201      	movs	r2, #1
 80117d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117d4:	2301      	movs	r3, #1
 80117d6:	e003      	b.n	80117e0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	4a06      	ldr	r2, [pc, #24]	; (80117f4 <SDMMC_GetCmdResp2+0x8c>)
 80117dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80117de:	2300      	movs	r3, #0
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3710      	adds	r7, #16
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bc90      	pop	{r4, r7}
 80117e8:	4770      	bx	lr
 80117ea:	bf00      	nop
 80117ec:	20000038 	.word	0x20000038
 80117f0:	10624dd3 	.word	0x10624dd3
 80117f4:	002000c5 	.word	0x002000c5

080117f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80117f8:	b490      	push	{r4, r7}
 80117fa:	b084      	sub	sp, #16
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011800:	4b18      	ldr	r3, [pc, #96]	; (8011864 <SDMMC_GetCmdResp3+0x6c>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	4a18      	ldr	r2, [pc, #96]	; (8011868 <SDMMC_GetCmdResp3+0x70>)
 8011806:	fba2 2303 	umull	r2, r3, r2, r3
 801180a:	0a5b      	lsrs	r3, r3, #9
 801180c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011810:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011814:	4623      	mov	r3, r4
 8011816:	1e5c      	subs	r4, r3, #1
 8011818:	2b00      	cmp	r3, #0
 801181a:	d102      	bne.n	8011822 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801181c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011820:	e01b      	b.n	801185a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011826:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801182e:	2b00      	cmp	r3, #0
 8011830:	d0f0      	beq.n	8011814 <SDMMC_GetCmdResp3+0x1c>
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011838:	2b00      	cmp	r3, #0
 801183a:	d1eb      	bne.n	8011814 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011840:	f003 0304 	and.w	r3, r3, #4
 8011844:	2b00      	cmp	r3, #0
 8011846:	d004      	beq.n	8011852 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2204      	movs	r2, #4
 801184c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801184e:	2304      	movs	r3, #4
 8011850:	e003      	b.n	801185a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	4a05      	ldr	r2, [pc, #20]	; (801186c <SDMMC_GetCmdResp3+0x74>)
 8011856:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011858:	2300      	movs	r3, #0
}
 801185a:	4618      	mov	r0, r3
 801185c:	3710      	adds	r7, #16
 801185e:	46bd      	mov	sp, r7
 8011860:	bc90      	pop	{r4, r7}
 8011862:	4770      	bx	lr
 8011864:	20000038 	.word	0x20000038
 8011868:	10624dd3 	.word	0x10624dd3
 801186c:	002000c5 	.word	0x002000c5

08011870 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011870:	b590      	push	{r4, r7, lr}
 8011872:	b087      	sub	sp, #28
 8011874:	af00      	add	r7, sp, #0
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	460b      	mov	r3, r1
 801187a:	607a      	str	r2, [r7, #4]
 801187c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801187e:	4b34      	ldr	r3, [pc, #208]	; (8011950 <SDMMC_GetCmdResp6+0xe0>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	4a34      	ldr	r2, [pc, #208]	; (8011954 <SDMMC_GetCmdResp6+0xe4>)
 8011884:	fba2 2303 	umull	r2, r3, r2, r3
 8011888:	0a5b      	lsrs	r3, r3, #9
 801188a:	f241 3288 	movw	r2, #5000	; 0x1388
 801188e:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011892:	4623      	mov	r3, r4
 8011894:	1e5c      	subs	r4, r3, #1
 8011896:	2b00      	cmp	r3, #0
 8011898:	d102      	bne.n	80118a0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801189a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801189e:	e052      	b.n	8011946 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118a4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d0f0      	beq.n	8011892 <SDMMC_GetCmdResp6+0x22>
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d1eb      	bne.n	8011892 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118be:	f003 0304 	and.w	r3, r3, #4
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d004      	beq.n	80118d0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	2204      	movs	r2, #4
 80118ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80118cc:	2304      	movs	r3, #4
 80118ce:	e03a      	b.n	8011946 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118d4:	f003 0301 	and.w	r3, r3, #1
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d004      	beq.n	80118e6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	2201      	movs	r2, #1
 80118e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80118e2:	2301      	movs	r3, #1
 80118e4:	e02f      	b.n	8011946 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80118e6:	68f8      	ldr	r0, [r7, #12]
 80118e8:	f7ff fb40 	bl	8010f6c <SDMMC_GetCommandResponse>
 80118ec:	4603      	mov	r3, r0
 80118ee:	461a      	mov	r2, r3
 80118f0:	7afb      	ldrb	r3, [r7, #11]
 80118f2:	4293      	cmp	r3, r2
 80118f4:	d001      	beq.n	80118fa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80118f6:	2301      	movs	r3, #1
 80118f8:	e025      	b.n	8011946 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	4a16      	ldr	r2, [pc, #88]	; (8011958 <SDMMC_GetCmdResp6+0xe8>)
 80118fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011900:	2100      	movs	r1, #0
 8011902:	68f8      	ldr	r0, [r7, #12]
 8011904:	f7ff fb3f 	bl	8010f86 <SDMMC_GetResponse>
 8011908:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011910:	2b00      	cmp	r3, #0
 8011912:	d106      	bne.n	8011922 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	0c1b      	lsrs	r3, r3, #16
 8011918:	b29a      	uxth	r2, r3
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801191e:	2300      	movs	r3, #0
 8011920:	e011      	b.n	8011946 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011928:	2b00      	cmp	r3, #0
 801192a:	d002      	beq.n	8011932 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801192c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011930:	e009      	b.n	8011946 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011938:	2b00      	cmp	r3, #0
 801193a:	d002      	beq.n	8011942 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011940:	e001      	b.n	8011946 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011946:	4618      	mov	r0, r3
 8011948:	371c      	adds	r7, #28
 801194a:	46bd      	mov	sp, r7
 801194c:	bd90      	pop	{r4, r7, pc}
 801194e:	bf00      	nop
 8011950:	20000038 	.word	0x20000038
 8011954:	10624dd3 	.word	0x10624dd3
 8011958:	002000c5 	.word	0x002000c5

0801195c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801195c:	b490      	push	{r4, r7}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011964:	4b21      	ldr	r3, [pc, #132]	; (80119ec <SDMMC_GetCmdResp7+0x90>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	4a21      	ldr	r2, [pc, #132]	; (80119f0 <SDMMC_GetCmdResp7+0x94>)
 801196a:	fba2 2303 	umull	r2, r3, r2, r3
 801196e:	0a5b      	lsrs	r3, r3, #9
 8011970:	f241 3288 	movw	r2, #5000	; 0x1388
 8011974:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011978:	4623      	mov	r3, r4
 801197a:	1e5c      	subs	r4, r3, #1
 801197c:	2b00      	cmp	r3, #0
 801197e:	d102      	bne.n	8011986 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011980:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011984:	e02c      	b.n	80119e0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801198a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011992:	2b00      	cmp	r3, #0
 8011994:	d0f0      	beq.n	8011978 <SDMMC_GetCmdResp7+0x1c>
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801199c:	2b00      	cmp	r3, #0
 801199e:	d1eb      	bne.n	8011978 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119a4:	f003 0304 	and.w	r3, r3, #4
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d004      	beq.n	80119b6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2204      	movs	r2, #4
 80119b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80119b2:	2304      	movs	r3, #4
 80119b4:	e014      	b.n	80119e0 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119ba:	f003 0301 	and.w	r3, r3, #1
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d004      	beq.n	80119cc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2201      	movs	r2, #1
 80119c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119c8:	2301      	movs	r3, #1
 80119ca:	e009      	b.n	80119e0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d002      	beq.n	80119de <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2240      	movs	r2, #64	; 0x40
 80119dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80119de:	2300      	movs	r3, #0

}
 80119e0:	4618      	mov	r0, r3
 80119e2:	3710      	adds	r7, #16
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bc90      	pop	{r4, r7}
 80119e8:	4770      	bx	lr
 80119ea:	bf00      	nop
 80119ec:	20000038 	.word	0x20000038
 80119f0:	10624dd3 	.word	0x10624dd3

080119f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80119f4:	b084      	sub	sp, #16
 80119f6:	b580      	push	{r7, lr}
 80119f8:	b084      	sub	sp, #16
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	6078      	str	r0, [r7, #4]
 80119fe:	f107 001c 	add.w	r0, r7, #28
 8011a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d122      	bne.n	8011a52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	68db      	ldr	r3, [r3, #12]
 8011a1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8011a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a24:	687a      	ldr	r2, [r7, #4]
 8011a26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a36:	2b01      	cmp	r3, #1
 8011a38:	d105      	bne.n	8011a46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	68db      	ldr	r3, [r3, #12]
 8011a3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f001 f9c8 	bl	8012ddc <USB_CoreReset>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	73fb      	strb	r3, [r7, #15]
 8011a50:	e01a      	b.n	8011a88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	68db      	ldr	r3, [r3, #12]
 8011a56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f001 f9bc 	bl	8012ddc <USB_CoreReset>
 8011a64:	4603      	mov	r3, r0
 8011a66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d106      	bne.n	8011a7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	639a      	str	r2, [r3, #56]	; 0x38
 8011a7a:	e005      	b.n	8011a88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8011a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3710      	adds	r7, #16
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011a94:	b004      	add	sp, #16
 8011a96:	4770      	bx	lr

08011a98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b087      	sub	sp, #28
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	60f8      	str	r0, [r7, #12]
 8011aa0:	60b9      	str	r1, [r7, #8]
 8011aa2:	4613      	mov	r3, r2
 8011aa4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011aa6:	79fb      	ldrb	r3, [r7, #7]
 8011aa8:	2b02      	cmp	r3, #2
 8011aaa:	d165      	bne.n	8011b78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	4a3e      	ldr	r2, [pc, #248]	; (8011ba8 <USB_SetTurnaroundTime+0x110>)
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	d906      	bls.n	8011ac2 <USB_SetTurnaroundTime+0x2a>
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	4a3d      	ldr	r2, [pc, #244]	; (8011bac <USB_SetTurnaroundTime+0x114>)
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d202      	bcs.n	8011ac2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011abc:	230f      	movs	r3, #15
 8011abe:	617b      	str	r3, [r7, #20]
 8011ac0:	e05c      	b.n	8011b7c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	4a39      	ldr	r2, [pc, #228]	; (8011bac <USB_SetTurnaroundTime+0x114>)
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	d306      	bcc.n	8011ad8 <USB_SetTurnaroundTime+0x40>
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	4a38      	ldr	r2, [pc, #224]	; (8011bb0 <USB_SetTurnaroundTime+0x118>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d202      	bcs.n	8011ad8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011ad2:	230e      	movs	r3, #14
 8011ad4:	617b      	str	r3, [r7, #20]
 8011ad6:	e051      	b.n	8011b7c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	4a35      	ldr	r2, [pc, #212]	; (8011bb0 <USB_SetTurnaroundTime+0x118>)
 8011adc:	4293      	cmp	r3, r2
 8011ade:	d306      	bcc.n	8011aee <USB_SetTurnaroundTime+0x56>
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	4a34      	ldr	r2, [pc, #208]	; (8011bb4 <USB_SetTurnaroundTime+0x11c>)
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d202      	bcs.n	8011aee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011ae8:	230d      	movs	r3, #13
 8011aea:	617b      	str	r3, [r7, #20]
 8011aec:	e046      	b.n	8011b7c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	4a30      	ldr	r2, [pc, #192]	; (8011bb4 <USB_SetTurnaroundTime+0x11c>)
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d306      	bcc.n	8011b04 <USB_SetTurnaroundTime+0x6c>
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	4a2f      	ldr	r2, [pc, #188]	; (8011bb8 <USB_SetTurnaroundTime+0x120>)
 8011afa:	4293      	cmp	r3, r2
 8011afc:	d802      	bhi.n	8011b04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011afe:	230c      	movs	r3, #12
 8011b00:	617b      	str	r3, [r7, #20]
 8011b02:	e03b      	b.n	8011b7c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	4a2c      	ldr	r2, [pc, #176]	; (8011bb8 <USB_SetTurnaroundTime+0x120>)
 8011b08:	4293      	cmp	r3, r2
 8011b0a:	d906      	bls.n	8011b1a <USB_SetTurnaroundTime+0x82>
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	4a2b      	ldr	r2, [pc, #172]	; (8011bbc <USB_SetTurnaroundTime+0x124>)
 8011b10:	4293      	cmp	r3, r2
 8011b12:	d802      	bhi.n	8011b1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011b14:	230b      	movs	r3, #11
 8011b16:	617b      	str	r3, [r7, #20]
 8011b18:	e030      	b.n	8011b7c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	4a27      	ldr	r2, [pc, #156]	; (8011bbc <USB_SetTurnaroundTime+0x124>)
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	d906      	bls.n	8011b30 <USB_SetTurnaroundTime+0x98>
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	4a26      	ldr	r2, [pc, #152]	; (8011bc0 <USB_SetTurnaroundTime+0x128>)
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d802      	bhi.n	8011b30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011b2a:	230a      	movs	r3, #10
 8011b2c:	617b      	str	r3, [r7, #20]
 8011b2e:	e025      	b.n	8011b7c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	4a23      	ldr	r2, [pc, #140]	; (8011bc0 <USB_SetTurnaroundTime+0x128>)
 8011b34:	4293      	cmp	r3, r2
 8011b36:	d906      	bls.n	8011b46 <USB_SetTurnaroundTime+0xae>
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	4a22      	ldr	r2, [pc, #136]	; (8011bc4 <USB_SetTurnaroundTime+0x12c>)
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	d202      	bcs.n	8011b46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011b40:	2309      	movs	r3, #9
 8011b42:	617b      	str	r3, [r7, #20]
 8011b44:	e01a      	b.n	8011b7c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	4a1e      	ldr	r2, [pc, #120]	; (8011bc4 <USB_SetTurnaroundTime+0x12c>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d306      	bcc.n	8011b5c <USB_SetTurnaroundTime+0xc4>
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	4a1d      	ldr	r2, [pc, #116]	; (8011bc8 <USB_SetTurnaroundTime+0x130>)
 8011b52:	4293      	cmp	r3, r2
 8011b54:	d802      	bhi.n	8011b5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011b56:	2308      	movs	r3, #8
 8011b58:	617b      	str	r3, [r7, #20]
 8011b5a:	e00f      	b.n	8011b7c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	4a1a      	ldr	r2, [pc, #104]	; (8011bc8 <USB_SetTurnaroundTime+0x130>)
 8011b60:	4293      	cmp	r3, r2
 8011b62:	d906      	bls.n	8011b72 <USB_SetTurnaroundTime+0xda>
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	4a19      	ldr	r2, [pc, #100]	; (8011bcc <USB_SetTurnaroundTime+0x134>)
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d202      	bcs.n	8011b72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011b6c:	2307      	movs	r3, #7
 8011b6e:	617b      	str	r3, [r7, #20]
 8011b70:	e004      	b.n	8011b7c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011b72:	2306      	movs	r3, #6
 8011b74:	617b      	str	r3, [r7, #20]
 8011b76:	e001      	b.n	8011b7c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011b78:	2309      	movs	r3, #9
 8011b7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	68db      	ldr	r3, [r3, #12]
 8011b80:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	68da      	ldr	r2, [r3, #12]
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	029b      	lsls	r3, r3, #10
 8011b90:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011b94:	431a      	orrs	r2, r3
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011b9a:	2300      	movs	r3, #0
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	371c      	adds	r7, #28
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr
 8011ba8:	00d8acbf 	.word	0x00d8acbf
 8011bac:	00e4e1c0 	.word	0x00e4e1c0
 8011bb0:	00f42400 	.word	0x00f42400
 8011bb4:	01067380 	.word	0x01067380
 8011bb8:	011a499f 	.word	0x011a499f
 8011bbc:	01312cff 	.word	0x01312cff
 8011bc0:	014ca43f 	.word	0x014ca43f
 8011bc4:	016e3600 	.word	0x016e3600
 8011bc8:	01a6ab1f 	.word	0x01a6ab1f
 8011bcc:	01e84800 	.word	0x01e84800

08011bd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b083      	sub	sp, #12
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	689b      	ldr	r3, [r3, #8]
 8011bdc:	f043 0201 	orr.w	r2, r3, #1
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011be4:	2300      	movs	r3, #0
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	370c      	adds	r7, #12
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr

08011bf2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011bf2:	b480      	push	{r7}
 8011bf4:	b083      	sub	sp, #12
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	689b      	ldr	r3, [r3, #8]
 8011bfe:	f023 0201 	bic.w	r2, r3, #1
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011c06:	2300      	movs	r3, #0
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	370c      	adds	r7, #12
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c12:	4770      	bx	lr

08011c14 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b082      	sub	sp, #8
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	460b      	mov	r3, r1
 8011c1e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011c2c:	78fb      	ldrb	r3, [r7, #3]
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	d106      	bne.n	8011c40 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	68db      	ldr	r3, [r3, #12]
 8011c36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	60da      	str	r2, [r3, #12]
 8011c3e:	e00b      	b.n	8011c58 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011c40:	78fb      	ldrb	r3, [r7, #3]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d106      	bne.n	8011c54 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	60da      	str	r2, [r3, #12]
 8011c52:	e001      	b.n	8011c58 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011c54:	2301      	movs	r3, #1
 8011c56:	e003      	b.n	8011c60 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011c58:	2032      	movs	r0, #50	; 0x32
 8011c5a:	f7f5 feeb 	bl	8007a34 <HAL_Delay>

  return HAL_OK;
 8011c5e:	2300      	movs	r3, #0
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	3708      	adds	r7, #8
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}

08011c68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011c68:	b084      	sub	sp, #16
 8011c6a:	b580      	push	{r7, lr}
 8011c6c:	b086      	sub	sp, #24
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	6078      	str	r0, [r7, #4]
 8011c72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011c82:	2300      	movs	r3, #0
 8011c84:	613b      	str	r3, [r7, #16]
 8011c86:	e009      	b.n	8011c9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	3340      	adds	r3, #64	; 0x40
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	4413      	add	r3, r2
 8011c92:	2200      	movs	r2, #0
 8011c94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	3301      	adds	r3, #1
 8011c9a:	613b      	str	r3, [r7, #16]
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	2b0e      	cmp	r3, #14
 8011ca0:	d9f2      	bls.n	8011c88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d11c      	bne.n	8011ce2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	68fa      	ldr	r2, [r7, #12]
 8011cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011cb6:	f043 0302 	orr.w	r3, r3, #2
 8011cba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cc0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	601a      	str	r2, [r3, #0]
 8011ce0:	e005      	b.n	8011cee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ce6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d00:	4619      	mov	r1, r3
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d08:	461a      	mov	r2, r3
 8011d0a:	680b      	ldr	r3, [r1, #0]
 8011d0c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011d0e:	2103      	movs	r1, #3
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f000 f93d 	bl	8011f90 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011d16:	2110      	movs	r1, #16
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f000 f8f1 	bl	8011f00 <USB_FlushTxFifo>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d001      	beq.n	8011d28 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8011d24:	2301      	movs	r3, #1
 8011d26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f000 f90f 	bl	8011f4c <USB_FlushRxFifo>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d001      	beq.n	8011d38 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8011d34:	2301      	movs	r3, #1
 8011d36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d3e:	461a      	mov	r2, r3
 8011d40:	2300      	movs	r3, #0
 8011d42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d56:	461a      	mov	r2, r3
 8011d58:	2300      	movs	r3, #0
 8011d5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	613b      	str	r3, [r7, #16]
 8011d60:	e043      	b.n	8011dea <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	015a      	lsls	r2, r3, #5
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	4413      	add	r3, r2
 8011d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011d78:	d118      	bne.n	8011dac <USB_DevInit+0x144>
    {
      if (i == 0U)
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d10a      	bne.n	8011d96 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	015a      	lsls	r2, r3, #5
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	4413      	add	r3, r2
 8011d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d8c:	461a      	mov	r2, r3
 8011d8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011d92:	6013      	str	r3, [r2, #0]
 8011d94:	e013      	b.n	8011dbe <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	015a      	lsls	r2, r3, #5
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	4413      	add	r3, r2
 8011d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011da2:	461a      	mov	r2, r3
 8011da4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011da8:	6013      	str	r3, [r2, #0]
 8011daa:	e008      	b.n	8011dbe <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	015a      	lsls	r2, r3, #5
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	4413      	add	r3, r2
 8011db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011db8:	461a      	mov	r2, r3
 8011dba:	2300      	movs	r3, #0
 8011dbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	015a      	lsls	r2, r3, #5
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	4413      	add	r3, r2
 8011dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dca:	461a      	mov	r2, r3
 8011dcc:	2300      	movs	r3, #0
 8011dce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	015a      	lsls	r2, r3, #5
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	4413      	add	r3, r2
 8011dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ddc:	461a      	mov	r2, r3
 8011dde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011de2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	3301      	adds	r3, #1
 8011de8:	613b      	str	r3, [r7, #16]
 8011dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dec:	693a      	ldr	r2, [r7, #16]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d3b7      	bcc.n	8011d62 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011df2:	2300      	movs	r3, #0
 8011df4:	613b      	str	r3, [r7, #16]
 8011df6:	e043      	b.n	8011e80 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	015a      	lsls	r2, r3, #5
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	4413      	add	r3, r2
 8011e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e0e:	d118      	bne.n	8011e42 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d10a      	bne.n	8011e2c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	015a      	lsls	r2, r3, #5
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	4413      	add	r3, r2
 8011e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e22:	461a      	mov	r2, r3
 8011e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011e28:	6013      	str	r3, [r2, #0]
 8011e2a:	e013      	b.n	8011e54 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	015a      	lsls	r2, r3, #5
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	4413      	add	r3, r2
 8011e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e38:	461a      	mov	r2, r3
 8011e3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011e3e:	6013      	str	r3, [r2, #0]
 8011e40:	e008      	b.n	8011e54 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	015a      	lsls	r2, r3, #5
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	4413      	add	r3, r2
 8011e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e4e:	461a      	mov	r2, r3
 8011e50:	2300      	movs	r3, #0
 8011e52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	015a      	lsls	r2, r3, #5
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	4413      	add	r3, r2
 8011e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e60:	461a      	mov	r2, r3
 8011e62:	2300      	movs	r3, #0
 8011e64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	015a      	lsls	r2, r3, #5
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	4413      	add	r3, r2
 8011e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e72:	461a      	mov	r2, r3
 8011e74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011e78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	613b      	str	r3, [r7, #16]
 8011e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e82:	693a      	ldr	r2, [r7, #16]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d3b7      	bcc.n	8011df8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e8e:	691b      	ldr	r3, [r3, #16]
 8011e90:	68fa      	ldr	r2, [r7, #12]
 8011e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011e9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011ea8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	699b      	ldr	r3, [r3, #24]
 8011eae:	f043 0210 	orr.w	r2, r3, #16
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	699a      	ldr	r2, [r3, #24]
 8011eba:	4b10      	ldr	r3, [pc, #64]	; (8011efc <USB_DevInit+0x294>)
 8011ebc:	4313      	orrs	r3, r2
 8011ebe:	687a      	ldr	r2, [r7, #4]
 8011ec0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d005      	beq.n	8011ed4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	699b      	ldr	r3, [r3, #24]
 8011ecc:	f043 0208 	orr.w	r2, r3, #8
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	d107      	bne.n	8011eea <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	699b      	ldr	r3, [r3, #24]
 8011ede:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ee2:	f043 0304 	orr.w	r3, r3, #4
 8011ee6:	687a      	ldr	r2, [r7, #4]
 8011ee8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3718      	adds	r7, #24
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011ef6:	b004      	add	sp, #16
 8011ef8:	4770      	bx	lr
 8011efa:	bf00      	nop
 8011efc:	803c3800 	.word	0x803c3800

08011f00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011f00:	b480      	push	{r7}
 8011f02:	b085      	sub	sp, #20
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	019b      	lsls	r3, r3, #6
 8011f12:	f043 0220 	orr.w	r2, r3, #32
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	60fb      	str	r3, [r7, #12]
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	4a09      	ldr	r2, [pc, #36]	; (8011f48 <USB_FlushTxFifo+0x48>)
 8011f24:	4293      	cmp	r3, r2
 8011f26:	d901      	bls.n	8011f2c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011f28:	2303      	movs	r3, #3
 8011f2a:	e006      	b.n	8011f3a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	691b      	ldr	r3, [r3, #16]
 8011f30:	f003 0320 	and.w	r3, r3, #32
 8011f34:	2b20      	cmp	r3, #32
 8011f36:	d0f0      	beq.n	8011f1a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011f38:	2300      	movs	r3, #0
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3714      	adds	r7, #20
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop
 8011f48:	00030d40 	.word	0x00030d40

08011f4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b085      	sub	sp, #20
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8011f54:	2300      	movs	r3, #0
 8011f56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2210      	movs	r2, #16
 8011f5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	3301      	adds	r3, #1
 8011f62:	60fb      	str	r3, [r7, #12]
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	4a09      	ldr	r2, [pc, #36]	; (8011f8c <USB_FlushRxFifo+0x40>)
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	d901      	bls.n	8011f70 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8011f6c:	2303      	movs	r3, #3
 8011f6e:	e006      	b.n	8011f7e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	691b      	ldr	r3, [r3, #16]
 8011f74:	f003 0310 	and.w	r3, r3, #16
 8011f78:	2b10      	cmp	r3, #16
 8011f7a:	d0f0      	beq.n	8011f5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8011f7c:	2300      	movs	r3, #0
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3714      	adds	r7, #20
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr
 8011f8a:	bf00      	nop
 8011f8c:	00030d40 	.word	0x00030d40

08011f90 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011f90:	b480      	push	{r7}
 8011f92:	b085      	sub	sp, #20
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	460b      	mov	r3, r1
 8011f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fa6:	681a      	ldr	r2, [r3, #0]
 8011fa8:	78fb      	ldrb	r3, [r7, #3]
 8011faa:	68f9      	ldr	r1, [r7, #12]
 8011fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011fb0:	4313      	orrs	r3, r2
 8011fb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011fb4:	2300      	movs	r3, #0
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3714      	adds	r7, #20
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc0:	4770      	bx	lr

08011fc2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011fc2:	b480      	push	{r7}
 8011fc4:	b087      	sub	sp, #28
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011fce:	693b      	ldr	r3, [r7, #16]
 8011fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fd4:	689b      	ldr	r3, [r3, #8]
 8011fd6:	f003 0306 	and.w	r3, r3, #6
 8011fda:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	2b02      	cmp	r3, #2
 8011fe0:	d002      	beq.n	8011fe8 <USB_GetDevSpeed+0x26>
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	2b06      	cmp	r3, #6
 8011fe6:	d102      	bne.n	8011fee <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011fe8:	2302      	movs	r3, #2
 8011fea:	75fb      	strb	r3, [r7, #23]
 8011fec:	e001      	b.n	8011ff2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8011fee:	230f      	movs	r3, #15
 8011ff0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	371c      	adds	r7, #28
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffe:	4770      	bx	lr

08012000 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012000:	b480      	push	{r7}
 8012002:	b085      	sub	sp, #20
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	785b      	ldrb	r3, [r3, #1]
 8012018:	2b01      	cmp	r3, #1
 801201a:	d13a      	bne.n	8012092 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012022:	69da      	ldr	r2, [r3, #28]
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	f003 030f 	and.w	r3, r3, #15
 801202c:	2101      	movs	r1, #1
 801202e:	fa01 f303 	lsl.w	r3, r1, r3
 8012032:	b29b      	uxth	r3, r3
 8012034:	68f9      	ldr	r1, [r7, #12]
 8012036:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801203a:	4313      	orrs	r3, r2
 801203c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	015a      	lsls	r2, r3, #5
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	4413      	add	r3, r2
 8012046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012050:	2b00      	cmp	r3, #0
 8012052:	d155      	bne.n	8012100 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	015a      	lsls	r2, r3, #5
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	4413      	add	r3, r2
 801205c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012060:	681a      	ldr	r2, [r3, #0]
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	689b      	ldr	r3, [r3, #8]
 8012066:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	78db      	ldrb	r3, [r3, #3]
 801206e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012070:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	059b      	lsls	r3, r3, #22
 8012076:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012078:	4313      	orrs	r3, r2
 801207a:	68ba      	ldr	r2, [r7, #8]
 801207c:	0151      	lsls	r1, r2, #5
 801207e:	68fa      	ldr	r2, [r7, #12]
 8012080:	440a      	add	r2, r1
 8012082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801208a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801208e:	6013      	str	r3, [r2, #0]
 8012090:	e036      	b.n	8012100 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012098:	69da      	ldr	r2, [r3, #28]
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	f003 030f 	and.w	r3, r3, #15
 80120a2:	2101      	movs	r1, #1
 80120a4:	fa01 f303 	lsl.w	r3, r1, r3
 80120a8:	041b      	lsls	r3, r3, #16
 80120aa:	68f9      	ldr	r1, [r7, #12]
 80120ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80120b0:	4313      	orrs	r3, r2
 80120b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	015a      	lsls	r2, r3, #5
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	4413      	add	r3, r2
 80120bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d11a      	bne.n	8012100 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	015a      	lsls	r2, r3, #5
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	4413      	add	r3, r2
 80120d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120d6:	681a      	ldr	r2, [r3, #0]
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	689b      	ldr	r3, [r3, #8]
 80120dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	78db      	ldrb	r3, [r3, #3]
 80120e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80120e6:	430b      	orrs	r3, r1
 80120e8:	4313      	orrs	r3, r2
 80120ea:	68ba      	ldr	r2, [r7, #8]
 80120ec:	0151      	lsls	r1, r2, #5
 80120ee:	68fa      	ldr	r2, [r7, #12]
 80120f0:	440a      	add	r2, r1
 80120f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80120f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80120fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012100:	2300      	movs	r3, #0
}
 8012102:	4618      	mov	r0, r3
 8012104:	3714      	adds	r7, #20
 8012106:	46bd      	mov	sp, r7
 8012108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210c:	4770      	bx	lr
	...

08012110 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012110:	b480      	push	{r7}
 8012112:	b085      	sub	sp, #20
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	785b      	ldrb	r3, [r3, #1]
 8012128:	2b01      	cmp	r3, #1
 801212a:	d161      	bne.n	80121f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	015a      	lsls	r2, r3, #5
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	4413      	add	r3, r2
 8012134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801213e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012142:	d11f      	bne.n	8012184 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	015a      	lsls	r2, r3, #5
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	4413      	add	r3, r2
 801214c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	68ba      	ldr	r2, [r7, #8]
 8012154:	0151      	lsls	r1, r2, #5
 8012156:	68fa      	ldr	r2, [r7, #12]
 8012158:	440a      	add	r2, r1
 801215a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801215e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012162:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	015a      	lsls	r2, r3, #5
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	4413      	add	r3, r2
 801216c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	68ba      	ldr	r2, [r7, #8]
 8012174:	0151      	lsls	r1, r2, #5
 8012176:	68fa      	ldr	r2, [r7, #12]
 8012178:	440a      	add	r2, r1
 801217a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801217e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012182:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801218a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	f003 030f 	and.w	r3, r3, #15
 8012194:	2101      	movs	r1, #1
 8012196:	fa01 f303 	lsl.w	r3, r1, r3
 801219a:	b29b      	uxth	r3, r3
 801219c:	43db      	mvns	r3, r3
 801219e:	68f9      	ldr	r1, [r7, #12]
 80121a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121a4:	4013      	ands	r3, r2
 80121a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121ae:	69da      	ldr	r2, [r3, #28]
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	f003 030f 	and.w	r3, r3, #15
 80121b8:	2101      	movs	r1, #1
 80121ba:	fa01 f303 	lsl.w	r3, r1, r3
 80121be:	b29b      	uxth	r3, r3
 80121c0:	43db      	mvns	r3, r3
 80121c2:	68f9      	ldr	r1, [r7, #12]
 80121c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121c8:	4013      	ands	r3, r2
 80121ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	015a      	lsls	r2, r3, #5
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	4413      	add	r3, r2
 80121d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121d8:	681a      	ldr	r2, [r3, #0]
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	0159      	lsls	r1, r3, #5
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	440b      	add	r3, r1
 80121e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121e6:	4619      	mov	r1, r3
 80121e8:	4b35      	ldr	r3, [pc, #212]	; (80122c0 <USB_DeactivateEndpoint+0x1b0>)
 80121ea:	4013      	ands	r3, r2
 80121ec:	600b      	str	r3, [r1, #0]
 80121ee:	e060      	b.n	80122b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	015a      	lsls	r2, r3, #5
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	4413      	add	r3, r2
 80121f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012206:	d11f      	bne.n	8012248 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	015a      	lsls	r2, r3, #5
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	4413      	add	r3, r2
 8012210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	68ba      	ldr	r2, [r7, #8]
 8012218:	0151      	lsls	r1, r2, #5
 801221a:	68fa      	ldr	r2, [r7, #12]
 801221c:	440a      	add	r2, r1
 801221e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012222:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012226:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	015a      	lsls	r2, r3, #5
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	4413      	add	r3, r2
 8012230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	68ba      	ldr	r2, [r7, #8]
 8012238:	0151      	lsls	r1, r2, #5
 801223a:	68fa      	ldr	r2, [r7, #12]
 801223c:	440a      	add	r2, r1
 801223e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012242:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012246:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801224e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	f003 030f 	and.w	r3, r3, #15
 8012258:	2101      	movs	r1, #1
 801225a:	fa01 f303 	lsl.w	r3, r1, r3
 801225e:	041b      	lsls	r3, r3, #16
 8012260:	43db      	mvns	r3, r3
 8012262:	68f9      	ldr	r1, [r7, #12]
 8012264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012268:	4013      	ands	r3, r2
 801226a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012272:	69da      	ldr	r2, [r3, #28]
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	781b      	ldrb	r3, [r3, #0]
 8012278:	f003 030f 	and.w	r3, r3, #15
 801227c:	2101      	movs	r1, #1
 801227e:	fa01 f303 	lsl.w	r3, r1, r3
 8012282:	041b      	lsls	r3, r3, #16
 8012284:	43db      	mvns	r3, r3
 8012286:	68f9      	ldr	r1, [r7, #12]
 8012288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801228c:	4013      	ands	r3, r2
 801228e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	015a      	lsls	r2, r3, #5
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	4413      	add	r3, r2
 8012298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801229c:	681a      	ldr	r2, [r3, #0]
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	0159      	lsls	r1, r3, #5
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	440b      	add	r3, r1
 80122a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122aa:	4619      	mov	r1, r3
 80122ac:	4b05      	ldr	r3, [pc, #20]	; (80122c4 <USB_DeactivateEndpoint+0x1b4>)
 80122ae:	4013      	ands	r3, r2
 80122b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80122b2:	2300      	movs	r3, #0
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3714      	adds	r7, #20
 80122b8:	46bd      	mov	sp, r7
 80122ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122be:	4770      	bx	lr
 80122c0:	ec337800 	.word	0xec337800
 80122c4:	eff37800 	.word	0xeff37800

080122c8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b086      	sub	sp, #24
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	781b      	ldrb	r3, [r3, #0]
 80122da:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	785b      	ldrb	r3, [r3, #1]
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	f040 810a 	bne.w	80124fa <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	695b      	ldr	r3, [r3, #20]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d132      	bne.n	8012354 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	015a      	lsls	r2, r3, #5
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	4413      	add	r3, r2
 80122f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122fa:	691b      	ldr	r3, [r3, #16]
 80122fc:	693a      	ldr	r2, [r7, #16]
 80122fe:	0151      	lsls	r1, r2, #5
 8012300:	697a      	ldr	r2, [r7, #20]
 8012302:	440a      	add	r2, r1
 8012304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012308:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801230c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012310:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	015a      	lsls	r2, r3, #5
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	4413      	add	r3, r2
 801231a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801231e:	691b      	ldr	r3, [r3, #16]
 8012320:	693a      	ldr	r2, [r7, #16]
 8012322:	0151      	lsls	r1, r2, #5
 8012324:	697a      	ldr	r2, [r7, #20]
 8012326:	440a      	add	r2, r1
 8012328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801232c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012330:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	015a      	lsls	r2, r3, #5
 8012336:	697b      	ldr	r3, [r7, #20]
 8012338:	4413      	add	r3, r2
 801233a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801233e:	691b      	ldr	r3, [r3, #16]
 8012340:	693a      	ldr	r2, [r7, #16]
 8012342:	0151      	lsls	r1, r2, #5
 8012344:	697a      	ldr	r2, [r7, #20]
 8012346:	440a      	add	r2, r1
 8012348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801234c:	0cdb      	lsrs	r3, r3, #19
 801234e:	04db      	lsls	r3, r3, #19
 8012350:	6113      	str	r3, [r2, #16]
 8012352:	e074      	b.n	801243e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	015a      	lsls	r2, r3, #5
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	4413      	add	r3, r2
 801235c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012360:	691b      	ldr	r3, [r3, #16]
 8012362:	693a      	ldr	r2, [r7, #16]
 8012364:	0151      	lsls	r1, r2, #5
 8012366:	697a      	ldr	r2, [r7, #20]
 8012368:	440a      	add	r2, r1
 801236a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801236e:	0cdb      	lsrs	r3, r3, #19
 8012370:	04db      	lsls	r3, r3, #19
 8012372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	015a      	lsls	r2, r3, #5
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	4413      	add	r3, r2
 801237c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012380:	691b      	ldr	r3, [r3, #16]
 8012382:	693a      	ldr	r2, [r7, #16]
 8012384:	0151      	lsls	r1, r2, #5
 8012386:	697a      	ldr	r2, [r7, #20]
 8012388:	440a      	add	r2, r1
 801238a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801238e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012392:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012396:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	015a      	lsls	r2, r3, #5
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	4413      	add	r3, r2
 80123a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123a4:	691a      	ldr	r2, [r3, #16]
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	6959      	ldr	r1, [r3, #20]
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	689b      	ldr	r3, [r3, #8]
 80123ae:	440b      	add	r3, r1
 80123b0:	1e59      	subs	r1, r3, #1
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	689b      	ldr	r3, [r3, #8]
 80123b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80123ba:	04d9      	lsls	r1, r3, #19
 80123bc:	4baf      	ldr	r3, [pc, #700]	; (801267c <USB_EPStartXfer+0x3b4>)
 80123be:	400b      	ands	r3, r1
 80123c0:	6939      	ldr	r1, [r7, #16]
 80123c2:	0148      	lsls	r0, r1, #5
 80123c4:	6979      	ldr	r1, [r7, #20]
 80123c6:	4401      	add	r1, r0
 80123c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80123cc:	4313      	orrs	r3, r2
 80123ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	015a      	lsls	r2, r3, #5
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	4413      	add	r3, r2
 80123d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123dc:	691a      	ldr	r2, [r3, #16]
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	695b      	ldr	r3, [r3, #20]
 80123e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80123e6:	6939      	ldr	r1, [r7, #16]
 80123e8:	0148      	lsls	r0, r1, #5
 80123ea:	6979      	ldr	r1, [r7, #20]
 80123ec:	4401      	add	r1, r0
 80123ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80123f2:	4313      	orrs	r3, r2
 80123f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	78db      	ldrb	r3, [r3, #3]
 80123fa:	2b01      	cmp	r3, #1
 80123fc:	d11f      	bne.n	801243e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	015a      	lsls	r2, r3, #5
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	4413      	add	r3, r2
 8012406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801240a:	691b      	ldr	r3, [r3, #16]
 801240c:	693a      	ldr	r2, [r7, #16]
 801240e:	0151      	lsls	r1, r2, #5
 8012410:	697a      	ldr	r2, [r7, #20]
 8012412:	440a      	add	r2, r1
 8012414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012418:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801241c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801241e:	693b      	ldr	r3, [r7, #16]
 8012420:	015a      	lsls	r2, r3, #5
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	4413      	add	r3, r2
 8012426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801242a:	691b      	ldr	r3, [r3, #16]
 801242c:	693a      	ldr	r2, [r7, #16]
 801242e:	0151      	lsls	r1, r2, #5
 8012430:	697a      	ldr	r2, [r7, #20]
 8012432:	440a      	add	r2, r1
 8012434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012438:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801243c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	015a      	lsls	r2, r3, #5
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	4413      	add	r3, r2
 8012446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	693a      	ldr	r2, [r7, #16]
 801244e:	0151      	lsls	r1, r2, #5
 8012450:	697a      	ldr	r2, [r7, #20]
 8012452:	440a      	add	r2, r1
 8012454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012458:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801245c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	78db      	ldrb	r3, [r3, #3]
 8012462:	2b01      	cmp	r3, #1
 8012464:	d015      	beq.n	8012492 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	695b      	ldr	r3, [r3, #20]
 801246a:	2b00      	cmp	r3, #0
 801246c:	f000 8100 	beq.w	8012670 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	f003 030f 	and.w	r3, r3, #15
 8012480:	2101      	movs	r1, #1
 8012482:	fa01 f303 	lsl.w	r3, r1, r3
 8012486:	6979      	ldr	r1, [r7, #20]
 8012488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801248c:	4313      	orrs	r3, r2
 801248e:	634b      	str	r3, [r1, #52]	; 0x34
 8012490:	e0ee      	b.n	8012670 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d110      	bne.n	80124c4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	015a      	lsls	r2, r3, #5
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	4413      	add	r3, r2
 80124aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	693a      	ldr	r2, [r7, #16]
 80124b2:	0151      	lsls	r1, r2, #5
 80124b4:	697a      	ldr	r2, [r7, #20]
 80124b6:	440a      	add	r2, r1
 80124b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80124c0:	6013      	str	r3, [r2, #0]
 80124c2:	e00f      	b.n	80124e4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	015a      	lsls	r2, r3, #5
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	4413      	add	r3, r2
 80124cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	693a      	ldr	r2, [r7, #16]
 80124d4:	0151      	lsls	r1, r2, #5
 80124d6:	697a      	ldr	r2, [r7, #20]
 80124d8:	440a      	add	r2, r1
 80124da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80124e2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	68d9      	ldr	r1, [r3, #12]
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	781a      	ldrb	r2, [r3, #0]
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	695b      	ldr	r3, [r3, #20]
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	6878      	ldr	r0, [r7, #4]
 80124f4:	f000 f9e2 	bl	80128bc <USB_WritePacket>
 80124f8:	e0ba      	b.n	8012670 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	015a      	lsls	r2, r3, #5
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	4413      	add	r3, r2
 8012502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012506:	691b      	ldr	r3, [r3, #16]
 8012508:	693a      	ldr	r2, [r7, #16]
 801250a:	0151      	lsls	r1, r2, #5
 801250c:	697a      	ldr	r2, [r7, #20]
 801250e:	440a      	add	r2, r1
 8012510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012514:	0cdb      	lsrs	r3, r3, #19
 8012516:	04db      	lsls	r3, r3, #19
 8012518:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	015a      	lsls	r2, r3, #5
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	4413      	add	r3, r2
 8012522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012526:	691b      	ldr	r3, [r3, #16]
 8012528:	693a      	ldr	r2, [r7, #16]
 801252a:	0151      	lsls	r1, r2, #5
 801252c:	697a      	ldr	r2, [r7, #20]
 801252e:	440a      	add	r2, r1
 8012530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012534:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012538:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801253c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	695b      	ldr	r3, [r3, #20]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d123      	bne.n	801258e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	015a      	lsls	r2, r3, #5
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	4413      	add	r3, r2
 801254e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012552:	691a      	ldr	r2, [r3, #16]
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801255c:	6939      	ldr	r1, [r7, #16]
 801255e:	0148      	lsls	r0, r1, #5
 8012560:	6979      	ldr	r1, [r7, #20]
 8012562:	4401      	add	r1, r0
 8012564:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012568:	4313      	orrs	r3, r2
 801256a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801256c:	693b      	ldr	r3, [r7, #16]
 801256e:	015a      	lsls	r2, r3, #5
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	4413      	add	r3, r2
 8012574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012578:	691b      	ldr	r3, [r3, #16]
 801257a:	693a      	ldr	r2, [r7, #16]
 801257c:	0151      	lsls	r1, r2, #5
 801257e:	697a      	ldr	r2, [r7, #20]
 8012580:	440a      	add	r2, r1
 8012582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012586:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801258a:	6113      	str	r3, [r2, #16]
 801258c:	e033      	b.n	80125f6 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	695a      	ldr	r2, [r3, #20]
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	689b      	ldr	r3, [r3, #8]
 8012596:	4413      	add	r3, r2
 8012598:	1e5a      	subs	r2, r3, #1
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	689b      	ldr	r3, [r3, #8]
 801259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80125a2:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	015a      	lsls	r2, r3, #5
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	4413      	add	r3, r2
 80125ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125b0:	691a      	ldr	r2, [r3, #16]
 80125b2:	89fb      	ldrh	r3, [r7, #14]
 80125b4:	04d9      	lsls	r1, r3, #19
 80125b6:	4b31      	ldr	r3, [pc, #196]	; (801267c <USB_EPStartXfer+0x3b4>)
 80125b8:	400b      	ands	r3, r1
 80125ba:	6939      	ldr	r1, [r7, #16]
 80125bc:	0148      	lsls	r0, r1, #5
 80125be:	6979      	ldr	r1, [r7, #20]
 80125c0:	4401      	add	r1, r0
 80125c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80125c6:	4313      	orrs	r3, r2
 80125c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	015a      	lsls	r2, r3, #5
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	4413      	add	r3, r2
 80125d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125d6:	691a      	ldr	r2, [r3, #16]
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	689b      	ldr	r3, [r3, #8]
 80125dc:	89f9      	ldrh	r1, [r7, #14]
 80125de:	fb01 f303 	mul.w	r3, r1, r3
 80125e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80125e6:	6939      	ldr	r1, [r7, #16]
 80125e8:	0148      	lsls	r0, r1, #5
 80125ea:	6979      	ldr	r1, [r7, #20]
 80125ec:	4401      	add	r1, r0
 80125ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80125f2:	4313      	orrs	r3, r2
 80125f4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	78db      	ldrb	r3, [r3, #3]
 80125fa:	2b01      	cmp	r3, #1
 80125fc:	d128      	bne.n	8012650 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012604:	689b      	ldr	r3, [r3, #8]
 8012606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801260a:	2b00      	cmp	r3, #0
 801260c:	d110      	bne.n	8012630 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801260e:	693b      	ldr	r3, [r7, #16]
 8012610:	015a      	lsls	r2, r3, #5
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	4413      	add	r3, r2
 8012616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	693a      	ldr	r2, [r7, #16]
 801261e:	0151      	lsls	r1, r2, #5
 8012620:	697a      	ldr	r2, [r7, #20]
 8012622:	440a      	add	r2, r1
 8012624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012628:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801262c:	6013      	str	r3, [r2, #0]
 801262e:	e00f      	b.n	8012650 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012630:	693b      	ldr	r3, [r7, #16]
 8012632:	015a      	lsls	r2, r3, #5
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	4413      	add	r3, r2
 8012638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	693a      	ldr	r2, [r7, #16]
 8012640:	0151      	lsls	r1, r2, #5
 8012642:	697a      	ldr	r2, [r7, #20]
 8012644:	440a      	add	r2, r1
 8012646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801264a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801264e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012650:	693b      	ldr	r3, [r7, #16]
 8012652:	015a      	lsls	r2, r3, #5
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	4413      	add	r3, r2
 8012658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	693a      	ldr	r2, [r7, #16]
 8012660:	0151      	lsls	r1, r2, #5
 8012662:	697a      	ldr	r2, [r7, #20]
 8012664:	440a      	add	r2, r1
 8012666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801266a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801266e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012670:	2300      	movs	r3, #0
}
 8012672:	4618      	mov	r0, r3
 8012674:	3718      	adds	r7, #24
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}
 801267a:	bf00      	nop
 801267c:	1ff80000 	.word	0x1ff80000

08012680 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012680:	b480      	push	{r7}
 8012682:	b085      	sub	sp, #20
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	785b      	ldrb	r3, [r3, #1]
 8012698:	2b01      	cmp	r3, #1
 801269a:	f040 80ab 	bne.w	80127f4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	695b      	ldr	r3, [r3, #20]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d132      	bne.n	801270c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	015a      	lsls	r2, r3, #5
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	4413      	add	r3, r2
 80126ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126b2:	691b      	ldr	r3, [r3, #16]
 80126b4:	68ba      	ldr	r2, [r7, #8]
 80126b6:	0151      	lsls	r1, r2, #5
 80126b8:	68fa      	ldr	r2, [r7, #12]
 80126ba:	440a      	add	r2, r1
 80126bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80126c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80126c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	015a      	lsls	r2, r3, #5
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	4413      	add	r3, r2
 80126d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126d6:	691b      	ldr	r3, [r3, #16]
 80126d8:	68ba      	ldr	r2, [r7, #8]
 80126da:	0151      	lsls	r1, r2, #5
 80126dc:	68fa      	ldr	r2, [r7, #12]
 80126de:	440a      	add	r2, r1
 80126e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80126e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	015a      	lsls	r2, r3, #5
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	4413      	add	r3, r2
 80126f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126f6:	691b      	ldr	r3, [r3, #16]
 80126f8:	68ba      	ldr	r2, [r7, #8]
 80126fa:	0151      	lsls	r1, r2, #5
 80126fc:	68fa      	ldr	r2, [r7, #12]
 80126fe:	440a      	add	r2, r1
 8012700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012704:	0cdb      	lsrs	r3, r3, #19
 8012706:	04db      	lsls	r3, r3, #19
 8012708:	6113      	str	r3, [r2, #16]
 801270a:	e04e      	b.n	80127aa <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	015a      	lsls	r2, r3, #5
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	4413      	add	r3, r2
 8012714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012718:	691b      	ldr	r3, [r3, #16]
 801271a:	68ba      	ldr	r2, [r7, #8]
 801271c:	0151      	lsls	r1, r2, #5
 801271e:	68fa      	ldr	r2, [r7, #12]
 8012720:	440a      	add	r2, r1
 8012722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012726:	0cdb      	lsrs	r3, r3, #19
 8012728:	04db      	lsls	r3, r3, #19
 801272a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	015a      	lsls	r2, r3, #5
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	4413      	add	r3, r2
 8012734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012738:	691b      	ldr	r3, [r3, #16]
 801273a:	68ba      	ldr	r2, [r7, #8]
 801273c:	0151      	lsls	r1, r2, #5
 801273e:	68fa      	ldr	r2, [r7, #12]
 8012740:	440a      	add	r2, r1
 8012742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012746:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801274a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801274e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	695a      	ldr	r2, [r3, #20]
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	689b      	ldr	r3, [r3, #8]
 8012758:	429a      	cmp	r2, r3
 801275a:	d903      	bls.n	8012764 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	689a      	ldr	r2, [r3, #8]
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	015a      	lsls	r2, r3, #5
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	4413      	add	r3, r2
 801276c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012770:	691b      	ldr	r3, [r3, #16]
 8012772:	68ba      	ldr	r2, [r7, #8]
 8012774:	0151      	lsls	r1, r2, #5
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	440a      	add	r2, r1
 801277a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801277e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012782:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	015a      	lsls	r2, r3, #5
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	4413      	add	r3, r2
 801278c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012790:	691a      	ldr	r2, [r3, #16]
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	695b      	ldr	r3, [r3, #20]
 8012796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801279a:	68b9      	ldr	r1, [r7, #8]
 801279c:	0148      	lsls	r0, r1, #5
 801279e:	68f9      	ldr	r1, [r7, #12]
 80127a0:	4401      	add	r1, r0
 80127a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80127a6:	4313      	orrs	r3, r2
 80127a8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80127aa:	68bb      	ldr	r3, [r7, #8]
 80127ac:	015a      	lsls	r2, r3, #5
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	4413      	add	r3, r2
 80127b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	68ba      	ldr	r2, [r7, #8]
 80127ba:	0151      	lsls	r1, r2, #5
 80127bc:	68fa      	ldr	r2, [r7, #12]
 80127be:	440a      	add	r2, r1
 80127c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80127c8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	695b      	ldr	r3, [r3, #20]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d06d      	beq.n	80128ae <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	f003 030f 	and.w	r3, r3, #15
 80127e2:	2101      	movs	r1, #1
 80127e4:	fa01 f303 	lsl.w	r3, r1, r3
 80127e8:	68f9      	ldr	r1, [r7, #12]
 80127ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80127ee:	4313      	orrs	r3, r2
 80127f0:	634b      	str	r3, [r1, #52]	; 0x34
 80127f2:	e05c      	b.n	80128ae <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	015a      	lsls	r2, r3, #5
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	4413      	add	r3, r2
 80127fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012800:	691b      	ldr	r3, [r3, #16]
 8012802:	68ba      	ldr	r2, [r7, #8]
 8012804:	0151      	lsls	r1, r2, #5
 8012806:	68fa      	ldr	r2, [r7, #12]
 8012808:	440a      	add	r2, r1
 801280a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801280e:	0cdb      	lsrs	r3, r3, #19
 8012810:	04db      	lsls	r3, r3, #19
 8012812:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	015a      	lsls	r2, r3, #5
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	4413      	add	r3, r2
 801281c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012820:	691b      	ldr	r3, [r3, #16]
 8012822:	68ba      	ldr	r2, [r7, #8]
 8012824:	0151      	lsls	r1, r2, #5
 8012826:	68fa      	ldr	r2, [r7, #12]
 8012828:	440a      	add	r2, r1
 801282a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801282e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012832:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012836:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	695b      	ldr	r3, [r3, #20]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d003      	beq.n	8012848 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	689a      	ldr	r2, [r3, #8]
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	015a      	lsls	r2, r3, #5
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	4413      	add	r3, r2
 8012850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012854:	691b      	ldr	r3, [r3, #16]
 8012856:	68ba      	ldr	r2, [r7, #8]
 8012858:	0151      	lsls	r1, r2, #5
 801285a:	68fa      	ldr	r2, [r7, #12]
 801285c:	440a      	add	r2, r1
 801285e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012862:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012866:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	015a      	lsls	r2, r3, #5
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	4413      	add	r3, r2
 8012870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012874:	691a      	ldr	r2, [r3, #16]
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	689b      	ldr	r3, [r3, #8]
 801287a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801287e:	68b9      	ldr	r1, [r7, #8]
 8012880:	0148      	lsls	r0, r1, #5
 8012882:	68f9      	ldr	r1, [r7, #12]
 8012884:	4401      	add	r1, r0
 8012886:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801288a:	4313      	orrs	r3, r2
 801288c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	015a      	lsls	r2, r3, #5
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	4413      	add	r3, r2
 8012896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	68ba      	ldr	r2, [r7, #8]
 801289e:	0151      	lsls	r1, r2, #5
 80128a0:	68fa      	ldr	r2, [r7, #12]
 80128a2:	440a      	add	r2, r1
 80128a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80128ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80128ae:	2300      	movs	r3, #0
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3714      	adds	r7, #20
 80128b4:	46bd      	mov	sp, r7
 80128b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ba:	4770      	bx	lr

080128bc <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80128bc:	b480      	push	{r7}
 80128be:	b089      	sub	sp, #36	; 0x24
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	4611      	mov	r1, r2
 80128c8:	461a      	mov	r2, r3
 80128ca:	460b      	mov	r3, r1
 80128cc:	71fb      	strb	r3, [r7, #7]
 80128ce:	4613      	mov	r3, r2
 80128d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80128da:	88bb      	ldrh	r3, [r7, #4]
 80128dc:	3303      	adds	r3, #3
 80128de:	089b      	lsrs	r3, r3, #2
 80128e0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80128e2:	2300      	movs	r3, #0
 80128e4:	61bb      	str	r3, [r7, #24]
 80128e6:	e00f      	b.n	8012908 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80128e8:	79fb      	ldrb	r3, [r7, #7]
 80128ea:	031a      	lsls	r2, r3, #12
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	4413      	add	r3, r2
 80128f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80128f4:	461a      	mov	r2, r3
 80128f6:	69fb      	ldr	r3, [r7, #28]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	6013      	str	r3, [r2, #0]
    pSrc++;
 80128fc:	69fb      	ldr	r3, [r7, #28]
 80128fe:	3304      	adds	r3, #4
 8012900:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012902:	69bb      	ldr	r3, [r7, #24]
 8012904:	3301      	adds	r3, #1
 8012906:	61bb      	str	r3, [r7, #24]
 8012908:	69ba      	ldr	r2, [r7, #24]
 801290a:	693b      	ldr	r3, [r7, #16]
 801290c:	429a      	cmp	r2, r3
 801290e:	d3eb      	bcc.n	80128e8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8012910:	2300      	movs	r3, #0
}
 8012912:	4618      	mov	r0, r3
 8012914:	3724      	adds	r7, #36	; 0x24
 8012916:	46bd      	mov	sp, r7
 8012918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291c:	4770      	bx	lr

0801291e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801291e:	b480      	push	{r7}
 8012920:	b089      	sub	sp, #36	; 0x24
 8012922:	af00      	add	r7, sp, #0
 8012924:	60f8      	str	r0, [r7, #12]
 8012926:	60b9      	str	r1, [r7, #8]
 8012928:	4613      	mov	r3, r2
 801292a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012934:	88fb      	ldrh	r3, [r7, #6]
 8012936:	3303      	adds	r3, #3
 8012938:	089b      	lsrs	r3, r3, #2
 801293a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801293c:	2300      	movs	r3, #0
 801293e:	61bb      	str	r3, [r7, #24]
 8012940:	e00b      	b.n	801295a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012948:	681a      	ldr	r2, [r3, #0]
 801294a:	69fb      	ldr	r3, [r7, #28]
 801294c:	601a      	str	r2, [r3, #0]
    pDest++;
 801294e:	69fb      	ldr	r3, [r7, #28]
 8012950:	3304      	adds	r3, #4
 8012952:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012954:	69bb      	ldr	r3, [r7, #24]
 8012956:	3301      	adds	r3, #1
 8012958:	61bb      	str	r3, [r7, #24]
 801295a:	69ba      	ldr	r2, [r7, #24]
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	429a      	cmp	r2, r3
 8012960:	d3ef      	bcc.n	8012942 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012962:	69fb      	ldr	r3, [r7, #28]
}
 8012964:	4618      	mov	r0, r3
 8012966:	3724      	adds	r7, #36	; 0x24
 8012968:	46bd      	mov	sp, r7
 801296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296e:	4770      	bx	lr

08012970 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012970:	b480      	push	{r7}
 8012972:	b085      	sub	sp, #20
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	785b      	ldrb	r3, [r3, #1]
 8012988:	2b01      	cmp	r3, #1
 801298a:	d12c      	bne.n	80129e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	015a      	lsls	r2, r3, #5
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	4413      	add	r3, r2
 8012994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	2b00      	cmp	r3, #0
 801299c:	db12      	blt.n	80129c4 <USB_EPSetStall+0x54>
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d00f      	beq.n	80129c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	015a      	lsls	r2, r3, #5
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	4413      	add	r3, r2
 80129ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	68ba      	ldr	r2, [r7, #8]
 80129b4:	0151      	lsls	r1, r2, #5
 80129b6:	68fa      	ldr	r2, [r7, #12]
 80129b8:	440a      	add	r2, r1
 80129ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80129c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	015a      	lsls	r2, r3, #5
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	4413      	add	r3, r2
 80129cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	68ba      	ldr	r2, [r7, #8]
 80129d4:	0151      	lsls	r1, r2, #5
 80129d6:	68fa      	ldr	r2, [r7, #12]
 80129d8:	440a      	add	r2, r1
 80129da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80129e2:	6013      	str	r3, [r2, #0]
 80129e4:	e02b      	b.n	8012a3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	015a      	lsls	r2, r3, #5
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	4413      	add	r3, r2
 80129ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	db12      	blt.n	8012a1e <USB_EPSetStall+0xae>
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d00f      	beq.n	8012a1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	015a      	lsls	r2, r3, #5
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	4413      	add	r3, r2
 8012a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	68ba      	ldr	r2, [r7, #8]
 8012a0e:	0151      	lsls	r1, r2, #5
 8012a10:	68fa      	ldr	r2, [r7, #12]
 8012a12:	440a      	add	r2, r1
 8012a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012a1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	015a      	lsls	r2, r3, #5
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	4413      	add	r3, r2
 8012a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	68ba      	ldr	r2, [r7, #8]
 8012a2e:	0151      	lsls	r1, r2, #5
 8012a30:	68fa      	ldr	r2, [r7, #12]
 8012a32:	440a      	add	r2, r1
 8012a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012a3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012a3e:	2300      	movs	r3, #0
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3714      	adds	r7, #20
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr

08012a4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b085      	sub	sp, #20
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	785b      	ldrb	r3, [r3, #1]
 8012a64:	2b01      	cmp	r3, #1
 8012a66:	d128      	bne.n	8012aba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	015a      	lsls	r2, r3, #5
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	4413      	add	r3, r2
 8012a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	68ba      	ldr	r2, [r7, #8]
 8012a78:	0151      	lsls	r1, r2, #5
 8012a7a:	68fa      	ldr	r2, [r7, #12]
 8012a7c:	440a      	add	r2, r1
 8012a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012a86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	78db      	ldrb	r3, [r3, #3]
 8012a8c:	2b03      	cmp	r3, #3
 8012a8e:	d003      	beq.n	8012a98 <USB_EPClearStall+0x4c>
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	78db      	ldrb	r3, [r3, #3]
 8012a94:	2b02      	cmp	r3, #2
 8012a96:	d138      	bne.n	8012b0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	015a      	lsls	r2, r3, #5
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	4413      	add	r3, r2
 8012aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	68ba      	ldr	r2, [r7, #8]
 8012aa8:	0151      	lsls	r1, r2, #5
 8012aaa:	68fa      	ldr	r2, [r7, #12]
 8012aac:	440a      	add	r2, r1
 8012aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ab6:	6013      	str	r3, [r2, #0]
 8012ab8:	e027      	b.n	8012b0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	015a      	lsls	r2, r3, #5
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	4413      	add	r3, r2
 8012ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	68ba      	ldr	r2, [r7, #8]
 8012aca:	0151      	lsls	r1, r2, #5
 8012acc:	68fa      	ldr	r2, [r7, #12]
 8012ace:	440a      	add	r2, r1
 8012ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ad4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012ad8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	78db      	ldrb	r3, [r3, #3]
 8012ade:	2b03      	cmp	r3, #3
 8012ae0:	d003      	beq.n	8012aea <USB_EPClearStall+0x9e>
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	78db      	ldrb	r3, [r3, #3]
 8012ae6:	2b02      	cmp	r3, #2
 8012ae8:	d10f      	bne.n	8012b0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	015a      	lsls	r2, r3, #5
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	4413      	add	r3, r2
 8012af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	68ba      	ldr	r2, [r7, #8]
 8012afa:	0151      	lsls	r1, r2, #5
 8012afc:	68fa      	ldr	r2, [r7, #12]
 8012afe:	440a      	add	r2, r1
 8012b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012b08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012b0a:	2300      	movs	r3, #0
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3714      	adds	r7, #20
 8012b10:	46bd      	mov	sp, r7
 8012b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b16:	4770      	bx	lr

08012b18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b085      	sub	sp, #20
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	460b      	mov	r3, r1
 8012b22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	68fa      	ldr	r2, [r7, #12]
 8012b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012b36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012b3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	78fb      	ldrb	r3, [r7, #3]
 8012b46:	011b      	lsls	r3, r3, #4
 8012b48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012b4c:	68f9      	ldr	r1, [r7, #12]
 8012b4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b52:	4313      	orrs	r3, r2
 8012b54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012b56:	2300      	movs	r3, #0
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3714      	adds	r7, #20
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b084      	sub	sp, #16
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	68fa      	ldr	r2, [r7, #12]
 8012b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012b7e:	f023 0302 	bic.w	r3, r3, #2
 8012b82:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012b84:	2003      	movs	r0, #3
 8012b86:	f7f4 ff55 	bl	8007a34 <HAL_Delay>

  return HAL_OK;
 8012b8a:	2300      	movs	r3, #0
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3710      	adds	r7, #16
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ba6:	685b      	ldr	r3, [r3, #4]
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012bae:	f043 0302 	orr.w	r3, r3, #2
 8012bb2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012bb4:	2003      	movs	r0, #3
 8012bb6:	f7f4 ff3d 	bl	8007a34 <HAL_Delay>

  return HAL_OK;
 8012bba:	2300      	movs	r3, #0
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3710      	adds	r7, #16
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}

08012bc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b085      	sub	sp, #20
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	695b      	ldr	r3, [r3, #20]
 8012bd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	699b      	ldr	r3, [r3, #24]
 8012bd6:	68fa      	ldr	r2, [r7, #12]
 8012bd8:	4013      	ands	r3, r2
 8012bda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3714      	adds	r7, #20
 8012be2:	46bd      	mov	sp, r7
 8012be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be8:	4770      	bx	lr

08012bea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012bea:	b480      	push	{r7}
 8012bec:	b085      	sub	sp, #20
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bfc:	699b      	ldr	r3, [r3, #24]
 8012bfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c06:	69db      	ldr	r3, [r3, #28]
 8012c08:	68ba      	ldr	r2, [r7, #8]
 8012c0a:	4013      	ands	r3, r2
 8012c0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	0c1b      	lsrs	r3, r3, #16
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3714      	adds	r7, #20
 8012c16:	46bd      	mov	sp, r7
 8012c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1c:	4770      	bx	lr

08012c1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c1e:	b480      	push	{r7}
 8012c20:	b085      	sub	sp, #20
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c30:	699b      	ldr	r3, [r3, #24]
 8012c32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c3a:	69db      	ldr	r3, [r3, #28]
 8012c3c:	68ba      	ldr	r2, [r7, #8]
 8012c3e:	4013      	ands	r3, r2
 8012c40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	b29b      	uxth	r3, r3
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3714      	adds	r7, #20
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c50:	4770      	bx	lr

08012c52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012c52:	b480      	push	{r7}
 8012c54:	b085      	sub	sp, #20
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	6078      	str	r0, [r7, #4]
 8012c5a:	460b      	mov	r3, r1
 8012c5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012c62:	78fb      	ldrb	r3, [r7, #3]
 8012c64:	015a      	lsls	r2, r3, #5
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	4413      	add	r3, r2
 8012c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c6e:	689b      	ldr	r3, [r3, #8]
 8012c70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c78:	695b      	ldr	r3, [r3, #20]
 8012c7a:	68ba      	ldr	r2, [r7, #8]
 8012c7c:	4013      	ands	r3, r2
 8012c7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012c80:	68bb      	ldr	r3, [r7, #8]
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3714      	adds	r7, #20
 8012c86:	46bd      	mov	sp, r7
 8012c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8c:	4770      	bx	lr

08012c8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012c8e:	b480      	push	{r7}
 8012c90:	b087      	sub	sp, #28
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	6078      	str	r0, [r7, #4]
 8012c96:	460b      	mov	r3, r1
 8012c98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ca4:	691b      	ldr	r3, [r3, #16]
 8012ca6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012cb2:	78fb      	ldrb	r3, [r7, #3]
 8012cb4:	f003 030f 	and.w	r3, r3, #15
 8012cb8:	68fa      	ldr	r2, [r7, #12]
 8012cba:	fa22 f303 	lsr.w	r3, r2, r3
 8012cbe:	01db      	lsls	r3, r3, #7
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	693a      	ldr	r2, [r7, #16]
 8012cc4:	4313      	orrs	r3, r2
 8012cc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012cc8:	78fb      	ldrb	r3, [r7, #3]
 8012cca:	015a      	lsls	r2, r3, #5
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	4413      	add	r3, r2
 8012cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cd4:	689b      	ldr	r3, [r3, #8]
 8012cd6:	693a      	ldr	r2, [r7, #16]
 8012cd8:	4013      	ands	r3, r2
 8012cda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012cdc:	68bb      	ldr	r3, [r7, #8]
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	371c      	adds	r7, #28
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce8:	4770      	bx	lr

08012cea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012cea:	b480      	push	{r7}
 8012cec:	b083      	sub	sp, #12
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	695b      	ldr	r3, [r3, #20]
 8012cf6:	f003 0301 	and.w	r3, r3, #1
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	370c      	adds	r7, #12
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d04:	4770      	bx	lr

08012d06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012d06:	b480      	push	{r7}
 8012d08:	b085      	sub	sp, #20
 8012d0a:	af00      	add	r7, sp, #0
 8012d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	68fa      	ldr	r2, [r7, #12]
 8012d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8012d24:	f023 0307 	bic.w	r3, r3, #7
 8012d28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	68fa      	ldr	r2, [r7, #12]
 8012d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012d3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012d3e:	2300      	movs	r3, #0
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3714      	adds	r7, #20
 8012d44:	46bd      	mov	sp, r7
 8012d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4a:	4770      	bx	lr

08012d4c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8012d4c:	b480      	push	{r7}
 8012d4e:	b085      	sub	sp, #20
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	333c      	adds	r3, #60	; 0x3c
 8012d5e:	3304      	adds	r3, #4
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	4a1c      	ldr	r2, [pc, #112]	; (8012dd8 <USB_EP0_OutStart+0x8c>)
 8012d68:	4293      	cmp	r3, r2
 8012d6a:	d90a      	bls.n	8012d82 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d7c:	d101      	bne.n	8012d82 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	e024      	b.n	8012dcc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d88:	461a      	mov	r2, r3
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d94:	691b      	ldr	r3, [r3, #16]
 8012d96:	68fa      	ldr	r2, [r7, #12]
 8012d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012da0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012da8:	691b      	ldr	r3, [r3, #16]
 8012daa:	68fa      	ldr	r2, [r7, #12]
 8012dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012db0:	f043 0318 	orr.w	r3, r3, #24
 8012db4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dbc:	691b      	ldr	r3, [r3, #16]
 8012dbe:	68fa      	ldr	r2, [r7, #12]
 8012dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012dc4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012dc8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8012dca:	2300      	movs	r3, #0
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3714      	adds	r7, #20
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd6:	4770      	bx	lr
 8012dd8:	4f54300a 	.word	0x4f54300a

08012ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b085      	sub	sp, #20
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8012de4:	2300      	movs	r3, #0
 8012de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	3301      	adds	r3, #1
 8012dec:	60fb      	str	r3, [r7, #12]
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	4a13      	ldr	r2, [pc, #76]	; (8012e40 <USB_CoreReset+0x64>)
 8012df2:	4293      	cmp	r3, r2
 8012df4:	d901      	bls.n	8012dfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012df6:	2303      	movs	r3, #3
 8012df8:	e01b      	b.n	8012e32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	691b      	ldr	r3, [r3, #16]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	daf2      	bge.n	8012de8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012e02:	2300      	movs	r3, #0
 8012e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	691b      	ldr	r3, [r3, #16]
 8012e0a:	f043 0201 	orr.w	r2, r3, #1
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	3301      	adds	r3, #1
 8012e16:	60fb      	str	r3, [r7, #12]
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	4a09      	ldr	r2, [pc, #36]	; (8012e40 <USB_CoreReset+0x64>)
 8012e1c:	4293      	cmp	r3, r2
 8012e1e:	d901      	bls.n	8012e24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012e20:	2303      	movs	r3, #3
 8012e22:	e006      	b.n	8012e32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	691b      	ldr	r3, [r3, #16]
 8012e28:	f003 0301 	and.w	r3, r3, #1
 8012e2c:	2b01      	cmp	r3, #1
 8012e2e:	d0f0      	beq.n	8012e12 <USB_CoreReset+0x36>

  return HAL_OK;
 8012e30:	2300      	movs	r3, #0
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3714      	adds	r7, #20
 8012e36:	46bd      	mov	sp, r7
 8012e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3c:	4770      	bx	lr
 8012e3e:	bf00      	nop
 8012e40:	00030d40 	.word	0x00030d40

08012e44 <USBD_WCID_STREAMING_Init>:
* @retval status
*/
/* USBD_WCID_STREAMING_HandleTypeDef USBTEST; */
static uint8_t  USBD_WCID_STREAMING_Init (USBD_HandleTypeDef *pdev, 
                                   uint8_t cfgidx)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b084      	sub	sp, #16
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8012e50:	2300      	movs	r3, #0
 8012e52:	73fb      	strb	r3, [r7, #15]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid;    
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8012e54:	2340      	movs	r3, #64	; 0x40
 8012e56:	2202      	movs	r2, #2
 8012e58:	2181      	movs	r1, #129	; 0x81
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f7f3 f8a1 	bl	8005fa2 <USBD_LL_OpenEP>
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_IN_PACKET_SIZE);
  
#if (N_IN_ENDPOINTS >1)  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8012e60:	2340      	movs	r3, #64	; 0x40
 8012e62:	2202      	movs	r2, #2
 8012e64:	2182      	movs	r1, #130	; 0x82
 8012e66:	6878      	ldr	r0, [r7, #4]
 8012e68:	f7f3 f89b 	bl	8005fa2 <USBD_LL_OpenEP>
                 DATA_IN_EP2,
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_IN_PACKET_SIZE);
#if (N_IN_ENDPOINTS >2)    
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8012e6c:	2340      	movs	r3, #64	; 0x40
 8012e6e:	2202      	movs	r2, #2
 8012e70:	2183      	movs	r1, #131	; 0x83
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f7f3 f895 	bl	8005fa2 <USBD_LL_OpenEP>
                 DATA_IN_EP3,
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_IN_PACKET_SIZE);
#if (N_IN_ENDPOINTS >3)  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8012e78:	2340      	movs	r3, #64	; 0x40
 8012e7a:	2202      	movs	r2, #2
 8012e7c:	2184      	movs	r1, #132	; 0x84
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f7f3 f88f 	bl	8005fa2 <USBD_LL_OpenEP>
                 DATA_IN_EP4,
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_IN_PACKET_SIZE);
#if (N_IN_ENDPOINTS >4)  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8012e84:	2340      	movs	r3, #64	; 0x40
 8012e86:	2202      	movs	r2, #2
 8012e88:	2185      	movs	r1, #133	; 0x85
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f7f3 f889 	bl	8005fa2 <USBD_LL_OpenEP>
#endif  
#endif
#endif  
  
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 8012e90:	2340      	movs	r3, #64	; 0x40
 8012e92:	2202      	movs	r2, #2
 8012e94:	2101      	movs	r1, #1
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f7f3 f883 	bl	8005fa2 <USBD_LL_OpenEP>
                 DATA_OUT_EP1,
                 USBD_EP_TYPE_BULK,
                 SS_WCID_DATA_FS_OUT_PACKET_SIZE);
  
  
  pdev->pClassData = (USBD_WCID_STREAMING_HandleTypeDef *)USBD_malloc(sizeof (USBD_WCID_STREAMING_HandleTypeDef));/* &USBTEST; */
 8012e9c:	f44f 70d4 	mov.w	r0, #424	; 0x1a8
 8012ea0:	f00c fa20 	bl	801f2e4 <malloc>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  memset((void *)pdev->pClassData, 0, sizeof (USBD_WCID_STREAMING_HandleTypeDef));
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012eb4:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8012eb8:	2100      	movs	r1, #0
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f00c fa4a 	bl	801f354 <memset>

  if(pdev->pClassData == NULL)
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d102      	bne.n	8012ed0 <USBD_WCID_STREAMING_Init+0x8c>
  {
    ret = 1; 
 8012eca:	2301      	movs	r3, #1
 8012ecc:	73fb      	strb	r3, [r7, #15]
 8012ece:	e02b      	b.n	8012f28 <USBD_WCID_STREAMING_Init+0xe4>
  }
  else
  {
    hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ed6:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Init();
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	4798      	blx	r3
    
    /* Init Xfer states */
    hwcid->RxState =0;
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    
    uint8_t i = 0;
 8012eea:	2300      	movs	r3, #0
 8012eec:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i< N_IN_ENDPOINTS; i++)
 8012eee:	2300      	movs	r3, #0
 8012ef0:	73bb      	strb	r3, [r7, #14]
 8012ef2:	e00e      	b.n	8012f12 <USBD_WCID_STREAMING_Init+0xce>
    {
      hwcid->TXStates[i] = 0;
 8012ef4:	7bba      	ldrb	r2, [r7, #14]
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	3246      	adds	r2, #70	; 0x46
 8012efa:	2100      	movs	r1, #0
 8012efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      hwcid->TxBuffStatus[i] = 0;
 8012f00:	7bbb      	ldrb	r3, [r7, #14]
 8012f02:	68ba      	ldr	r2, [r7, #8]
 8012f04:	4413      	add	r3, r2
 8012f06:	2200      	movs	r2, #0
 8012f08:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    for (i = 0; i< N_IN_ENDPOINTS; i++)
 8012f0c:	7bbb      	ldrb	r3, [r7, #14]
 8012f0e:	3301      	adds	r3, #1
 8012f10:	73bb      	strb	r3, [r7, #14]
 8012f12:	7bbb      	ldrb	r3, [r7, #14]
 8012f14:	2b04      	cmp	r3, #4
 8012f16:	d9ed      	bls.n	8012ef4 <USBD_WCID_STREAMING_Init+0xb0>
    }
    
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8012f1e:	2340      	movs	r3, #64	; 0x40
 8012f20:	2101      	movs	r1, #1
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f7f3 f8e6 	bl	80060f4 <USBD_LL_PrepareReceive>
                           DATA_OUT_EP1,
                           hwcid->RxBuffer,
                           SS_WCID_DATA_FS_OUT_PACKET_SIZE);    
  }
  return ret;
 8012f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3710      	adds	r7, #16
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}

08012f32 <USBD_WCID_STREAMING_DeInit>:
* @param  cfgidx: Configuration index
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_DeInit (USBD_HandleTypeDef *pdev, 
                                     uint8_t cfgidx)
{
 8012f32:	b580      	push	{r7, lr}
 8012f34:	b084      	sub	sp, #16
 8012f36:	af00      	add	r7, sp, #0
 8012f38:	6078      	str	r0, [r7, #4]
 8012f3a:	460b      	mov	r3, r1
 8012f3c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;  
 8012f3e:	2300      	movs	r3, #0
 8012f40:	73fb      	strb	r3, [r7, #15]
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP1);  
 8012f42:	2181      	movs	r1, #129	; 0x81
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f7f3 f846 	bl	8005fd6 <USBD_LL_CloseEP>
#if (N_IN_ENDPOINTS >1)  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP2);
 8012f4a:	2182      	movs	r1, #130	; 0x82
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f7f3 f842 	bl	8005fd6 <USBD_LL_CloseEP>
#if (N_IN_ENDPOINTS >2)    
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP3);
 8012f52:	2183      	movs	r1, #131	; 0x83
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f7f3 f83e 	bl	8005fd6 <USBD_LL_CloseEP>
#if (N_IN_ENDPOINTS >3)  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP4);
 8012f5a:	2184      	movs	r1, #132	; 0x84
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7f3 f83a 	bl	8005fd6 <USBD_LL_CloseEP>
#if (N_IN_ENDPOINTS >4)  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev, DATA_IN_EP5);
 8012f62:	2185      	movs	r1, #133	; 0x85
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f7f3 f836 	bl	8005fd6 <USBD_LL_CloseEP>
#endif  
#endif
#endif  
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8012f6a:	2101      	movs	r1, #1
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7f3 f832 	bl	8005fd6 <USBD_LL_CloseEP>
                  DATA_OUT_EP1);
  
  pdev->pClassData = NULL;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2200      	movs	r2, #0
 8012f76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  
  /* DeInit  physical Interface components */
    if(pdev->pClassData != NULL)
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d00e      	beq.n	8012fa2 <USBD_WCID_STREAMING_DeInit+0x70>
    {
      ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f8a:	685b      	ldr	r3, [r3, #4]
 8012f8c:	4798      	blx	r3
      USBD_free(pdev->pClassData);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f94:	4618      	mov	r0, r3
 8012f96:	f00c f9ad 	bl	801f2f4 <free>
      pdev->pClassData = NULL;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    }  
  return ret;
 8012fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3710      	adds	r7, #16
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}

08012fac <USBD_WCID_STREAMING_SOF>:
*         Handles start of frame
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_SOF (USBD_HandleTypeDef *pdev)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b08a      	sub	sp, #40	; 0x28
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
    int i = 0; 
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	627b      	str	r3, [r7, #36]	; 0x24
   __IO uint32_t * TX_States = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->TXStates;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fbe:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8012fc2:	61fb      	str	r3, [r7, #28]
   __IO uint8_t * TxBuffStatus = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->TxBuffStatus;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fca:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8012fce:	61bb      	str	r3, [r7, #24]
   uint8_t ** TxBuffer = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->TxBuffer;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fd6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8012fda:	617b      	str	r3, [r7, #20]
   uint16_t * USB_DataSizePerEp = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->USB_DataSizePerEp;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fe2:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8012fe6:	613b      	str	r3, [r7, #16]
   __IO uint8_t * lastPacketSent = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->lastPacketSent;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fee:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8012ff2:	60fb      	str	r3, [r7, #12]
   uint8_t * status = &(((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->streamingStatus);
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ffa:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8012ffe:	60bb      	str	r3, [r7, #8]
   
  if(*status == STREAMING_STATUS_STARTED)
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	2b01      	cmp	r3, #1
 8013006:	f040 80e3 	bne.w	80131d0 <USBD_WCID_STREAMING_SOF+0x224>
  {  
  for (i = 0; i < N_IN_ENDPOINTS-1; i++)
 801300a:	2300      	movs	r3, #0
 801300c:	627b      	str	r3, [r7, #36]	; 0x24
 801300e:	e075      	b.n	80130fc <USBD_WCID_STREAMING_SOF+0x150>
  {    
    if(!TX_States[i])
 8013010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013012:	009b      	lsls	r3, r3, #2
 8013014:	69fa      	ldr	r2, [r7, #28]
 8013016:	4413      	add	r3, r2
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d16b      	bne.n	80130f6 <USBD_WCID_STREAMING_SOF+0x14a>
    {       
      if( TxBuffStatus[i] == 1)
 801301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013020:	69ba      	ldr	r2, [r7, #24]
 8013022:	4413      	add	r3, r2
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	b2db      	uxtb	r3, r3
 8013028:	2b01      	cmp	r3, #1
 801302a:	d12a      	bne.n	8013082 <USBD_WCID_STREAMING_SOF+0xd6>
      {  
         lastPacketSent[i] = 0;
 801302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801302e:	68fa      	ldr	r2, [r7, #12]
 8013030:	4413      	add	r3, r2
 8013032:	2200      	movs	r2, #0
 8013034:	701a      	strb	r2, [r3, #0]
        TxBuffStatus[i] = 0;
 8013036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013038:	69ba      	ldr	r2, [r7, #24]
 801303a:	4413      	add	r3, r2
 801303c:	2200      	movs	r2, #0
 801303e:	701a      	strb	r2, [r3, #0]
        /*send*/
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 8013040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013042:	009b      	lsls	r3, r3, #2
 8013044:	697a      	ldr	r2, [r7, #20]
 8013046:	4413      	add	r3, r2
 8013048:	6819      	ldr	r1, [r3, #0]
 801304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801304c:	005b      	lsls	r3, r3, #1
 801304e:	693a      	ldr	r2, [r7, #16]
 8013050:	4413      	add	r3, r2
 8013052:	881b      	ldrh	r3, [r3, #0]
 8013054:	085b      	lsrs	r3, r3, #1
 8013056:	b29b      	uxth	r3, r3
 8013058:	461a      	mov	r2, r3
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	f000 fa7a 	bl	8013554 <USBD_WCID_STREAMING_SetTxBuffer>
        if(USBD_WCID_STREAMING_TransmitPacket(pdev , (i + 1)|0x80) == USBD_OK)
 8013060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013062:	b2db      	uxtb	r3, r3
 8013064:	3301      	adds	r3, #1
 8013066:	b2db      	uxtb	r3, r3
 8013068:	b25b      	sxtb	r3, r3
 801306a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801306e:	b25b      	sxtb	r3, r3
 8013070:	b2db      	uxtb	r3, r3
 8013072:	4619      	mov	r1, r3
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f000 fa9b 	bl	80135b0 <USBD_WCID_STREAMING_TransmitPacket>
 801307a:	4603      	mov	r3, r0
 801307c:	2b00      	cmp	r3, #0
 801307e:	d03a      	beq.n	80130f6 <USBD_WCID_STREAMING_SOF+0x14a>
        {          
        } 
        else
        {
          while(1);
 8013080:	e7fe      	b.n	8013080 <USBD_WCID_STREAMING_SOF+0xd4>
        }
      }
      else if (TxBuffStatus[i] == 2)
 8013082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013084:	69ba      	ldr	r2, [r7, #24]
 8013086:	4413      	add	r3, r2
 8013088:	781b      	ldrb	r3, [r3, #0]
 801308a:	b2db      	uxtb	r3, r3
 801308c:	2b02      	cmp	r3, #2
 801308e:	d132      	bne.n	80130f6 <USBD_WCID_STREAMING_SOF+0x14a>
      {
         lastPacketSent[i] = 0;
 8013090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013092:	68fa      	ldr	r2, [r7, #12]
 8013094:	4413      	add	r3, r2
 8013096:	2200      	movs	r2, #0
 8013098:	701a      	strb	r2, [r3, #0]
        TxBuffStatus[i] = 0;
 801309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309c:	69ba      	ldr	r2, [r7, #24]
 801309e:	4413      	add	r3, r2
 80130a0:	2200      	movs	r2, #0
 80130a2:	701a      	strb	r2, [r3, #0]
        /*send*/
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 80130a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a6:	009b      	lsls	r3, r3, #2
 80130a8:	697a      	ldr	r2, [r7, #20]
 80130aa:	4413      	add	r3, r2
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130b0:	0052      	lsls	r2, r2, #1
 80130b2:	6939      	ldr	r1, [r7, #16]
 80130b4:	440a      	add	r2, r1
 80130b6:	8812      	ldrh	r2, [r2, #0]
 80130b8:	0852      	lsrs	r2, r2, #1
 80130ba:	b292      	uxth	r2, r2
 80130bc:	1899      	adds	r1, r3, r2
 80130be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c0:	005b      	lsls	r3, r3, #1
 80130c2:	693a      	ldr	r2, [r7, #16]
 80130c4:	4413      	add	r3, r2
 80130c6:	881b      	ldrh	r3, [r3, #0]
 80130c8:	085b      	lsrs	r3, r3, #1
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	461a      	mov	r2, r3
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f000 fa40 	bl	8013554 <USBD_WCID_STREAMING_SetTxBuffer>
        if(USBD_WCID_STREAMING_TransmitPacket(pdev, (i + 1)|0x80) == USBD_OK)
 80130d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d6:	b2db      	uxtb	r3, r3
 80130d8:	3301      	adds	r3, #1
 80130da:	b2db      	uxtb	r3, r3
 80130dc:	b25b      	sxtb	r3, r3
 80130de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80130e2:	b25b      	sxtb	r3, r3
 80130e4:	b2db      	uxtb	r3, r3
 80130e6:	4619      	mov	r1, r3
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f000 fa61 	bl	80135b0 <USBD_WCID_STREAMING_TransmitPacket>
 80130ee:	4603      	mov	r3, r0
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d000      	beq.n	80130f6 <USBD_WCID_STREAMING_SOF+0x14a>
        {          
        }  
        else
        {
          while(1);
 80130f4:	e7fe      	b.n	80130f4 <USBD_WCID_STREAMING_SOF+0x148>
  for (i = 0; i < N_IN_ENDPOINTS-1; i++)
 80130f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f8:	3301      	adds	r3, #1
 80130fa:	627b      	str	r3, [r7, #36]	; 0x24
 80130fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fe:	2b03      	cmp	r3, #3
 8013100:	dd86      	ble.n	8013010 <USBD_WCID_STREAMING_SOF+0x64>
    } 
       

  }
  
  if(!TX_States[N_IN_ENDPOINTS-1]) /* Todo: check logic */
 8013102:	69fb      	ldr	r3, [r7, #28]
 8013104:	3310      	adds	r3, #16
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	2b00      	cmp	r3, #0
 801310a:	f040 80b8 	bne.w	801327e <USBD_WCID_STREAMING_SOF+0x2d2>
  {
    for (; i < N_CHANNELS_MAX; i++)
 801310e:	e05b      	b.n	80131c8 <USBD_WCID_STREAMING_SOF+0x21c>
    {       
      if( TxBuffStatus[i] == 1)
 8013110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013112:	69ba      	ldr	r2, [r7, #24]
 8013114:	4413      	add	r3, r2
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	b2db      	uxtb	r3, r3
 801311a:	2b01      	cmp	r3, #1
 801311c:	d121      	bne.n	8013162 <USBD_WCID_STREAMING_SOF+0x1b6>
      {          
        /*send*/
        lastPacketSent[i] = 0;
 801311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013120:	68fa      	ldr	r2, [r7, #12]
 8013122:	4413      	add	r3, r2
 8013124:	2200      	movs	r2, #0
 8013126:	701a      	strb	r2, [r3, #0]
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][0]), (USB_DataSizePerEp[i]/2));
 8013128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312a:	009b      	lsls	r3, r3, #2
 801312c:	697a      	ldr	r2, [r7, #20]
 801312e:	4413      	add	r3, r2
 8013130:	6819      	ldr	r1, [r3, #0]
 8013132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013134:	005b      	lsls	r3, r3, #1
 8013136:	693a      	ldr	r2, [r7, #16]
 8013138:	4413      	add	r3, r2
 801313a:	881b      	ldrh	r3, [r3, #0]
 801313c:	085b      	lsrs	r3, r3, #1
 801313e:	b29b      	uxth	r3, r3
 8013140:	461a      	mov	r2, r3
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f000 fa06 	bl	8013554 <USBD_WCID_STREAMING_SetTxBuffer>
        if(USBD_WCID_STREAMING_TransmitPacket(pdev , (N_IN_ENDPOINTS /*- 1 + 1*/)|0x80) == USBD_OK)
 8013148:	2185      	movs	r1, #133	; 0x85
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f000 fa30 	bl	80135b0 <USBD_WCID_STREAMING_TransmitPacket>
 8013150:	4603      	mov	r3, r0
 8013152:	2b00      	cmp	r3, #0
 8013154:	d135      	bne.n	80131c2 <USBD_WCID_STREAMING_SOF+0x216>
        {  
          TxBuffStatus[i] = 0;
 8013156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013158:	69ba      	ldr	r2, [r7, #24]
 801315a:	4413      	add	r3, r2
 801315c:	2200      	movs	r2, #0
 801315e:	701a      	strb	r2, [r3, #0]
 8013160:	e02f      	b.n	80131c2 <USBD_WCID_STREAMING_SOF+0x216>
        } 
      }
      else if (TxBuffStatus[i] == 2)
 8013162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013164:	69ba      	ldr	r2, [r7, #24]
 8013166:	4413      	add	r3, r2
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	b2db      	uxtb	r3, r3
 801316c:	2b02      	cmp	r3, #2
 801316e:	d128      	bne.n	80131c2 <USBD_WCID_STREAMING_SOF+0x216>
      {       
        /*send*/
        lastPacketSent[i] = 0;
 8013170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013172:	68fa      	ldr	r2, [r7, #12]
 8013174:	4413      	add	r3, r2
 8013176:	2200      	movs	r2, #0
 8013178:	701a      	strb	r2, [r3, #0]
        USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 801317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317c:	009b      	lsls	r3, r3, #2
 801317e:	697a      	ldr	r2, [r7, #20]
 8013180:	4413      	add	r3, r2
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013186:	0052      	lsls	r2, r2, #1
 8013188:	6939      	ldr	r1, [r7, #16]
 801318a:	440a      	add	r2, r1
 801318c:	8812      	ldrh	r2, [r2, #0]
 801318e:	0852      	lsrs	r2, r2, #1
 8013190:	b292      	uxth	r2, r2
 8013192:	1899      	adds	r1, r3, r2
 8013194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013196:	005b      	lsls	r3, r3, #1
 8013198:	693a      	ldr	r2, [r7, #16]
 801319a:	4413      	add	r3, r2
 801319c:	881b      	ldrh	r3, [r3, #0]
 801319e:	085b      	lsrs	r3, r3, #1
 80131a0:	b29b      	uxth	r3, r3
 80131a2:	461a      	mov	r2, r3
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f000 f9d5 	bl	8013554 <USBD_WCID_STREAMING_SetTxBuffer>
        if(USBD_WCID_STREAMING_TransmitPacket(pdev, (N_IN_ENDPOINTS /*- 1 + 1*/)|0x80) == USBD_OK)
 80131aa:	2185      	movs	r1, #133	; 0x85
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f000 f9ff 	bl	80135b0 <USBD_WCID_STREAMING_TransmitPacket>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d104      	bne.n	80131c2 <USBD_WCID_STREAMING_SOF+0x216>
        {      
          TxBuffStatus[i] = 0;
 80131b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ba:	69ba      	ldr	r2, [r7, #24]
 80131bc:	4413      	add	r3, r2
 80131be:	2200      	movs	r2, #0
 80131c0:	701a      	strb	r2, [r3, #0]
    for (; i < N_CHANNELS_MAX; i++)
 80131c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c4:	3301      	adds	r3, #1
 80131c6:	627b      	str	r3, [r7, #36]	; 0x24
 80131c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ca:	2b08      	cmp	r3, #8
 80131cc:	dda0      	ble.n	8013110 <USBD_WCID_STREAMING_SOF+0x164>
 80131ce:	e056      	b.n	801327e <USBD_WCID_STREAMING_SOF+0x2d2>
      }     
    }  
  }  
  }
  
  else if(*status == STREAMING_STATUS_STOPPING)
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	2b02      	cmp	r3, #2
 80131d6:	d152      	bne.n	801327e <USBD_WCID_STREAMING_SOF+0x2d2>
  {
        int sum = 0;
 80131d8:	2300      	movs	r3, #0
 80131da:	623b      	str	r3, [r7, #32]

   for (i = 0; i < N_IN_ENDPOINTS; i++)
 80131dc:	2300      	movs	r3, #0
 80131de:	627b      	str	r3, [r7, #36]	; 0x24
 80131e0:	e04a      	b.n	8013278 <USBD_WCID_STREAMING_SOF+0x2cc>
  {  
    if(/*!TX_States[i] && */!lastPacketSent[i])
 80131e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e4:	68fa      	ldr	r2, [r7, #12]
 80131e6:	4413      	add	r3, r2
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	b2db      	uxtb	r3, r3
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d131      	bne.n	8013254 <USBD_WCID_STREAMING_SOF+0x2a8>
    {  
      lastPacketSent[i] = 1;
 80131f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f2:	68fa      	ldr	r2, [r7, #12]
 80131f4:	4413      	add	r3, r2
 80131f6:	2201      	movs	r2, #1
 80131f8:	701a      	strb	r2, [r3, #0]
      
      USBD_WCID_STREAMING_SetTxBuffer(pdev, (uint8_t*)&(TxBuffer[i][ (USB_DataSizePerEp[i]/2)]),  (USB_DataSizePerEp[i]/2));
 80131fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131fc:	009b      	lsls	r3, r3, #2
 80131fe:	697a      	ldr	r2, [r7, #20]
 8013200:	4413      	add	r3, r2
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013206:	0052      	lsls	r2, r2, #1
 8013208:	6939      	ldr	r1, [r7, #16]
 801320a:	440a      	add	r2, r1
 801320c:	8812      	ldrh	r2, [r2, #0]
 801320e:	0852      	lsrs	r2, r2, #1
 8013210:	b292      	uxth	r2, r2
 8013212:	1899      	adds	r1, r3, r2
 8013214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013216:	005b      	lsls	r3, r3, #1
 8013218:	693a      	ldr	r2, [r7, #16]
 801321a:	4413      	add	r3, r2
 801321c:	881b      	ldrh	r3, [r3, #0]
 801321e:	085b      	lsrs	r3, r3, #1
 8013220:	b29b      	uxth	r3, r3
 8013222:	461a      	mov	r2, r3
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f000 f995 	bl	8013554 <USBD_WCID_STREAMING_SetTxBuffer>
      if(USBD_WCID_STREAMING_TransmitPacket(pdev, (i + 1)|0x80) == USBD_OK)
 801322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801322c:	b2db      	uxtb	r3, r3
 801322e:	3301      	adds	r3, #1
 8013230:	b2db      	uxtb	r3, r3
 8013232:	b25b      	sxtb	r3, r3
 8013234:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013238:	b25b      	sxtb	r3, r3
 801323a:	b2db      	uxtb	r3, r3
 801323c:	4619      	mov	r1, r3
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f000 f9b6 	bl	80135b0 <USBD_WCID_STREAMING_TransmitPacket>
 8013244:	4603      	mov	r3, r0
 8013246:	2b00      	cmp	r3, #0
 8013248:	d104      	bne.n	8013254 <USBD_WCID_STREAMING_SOF+0x2a8>
        {      
          TxBuffStatus[i] = 0;
 801324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801324c:	69ba      	ldr	r2, [r7, #24]
 801324e:	4413      	add	r3, r2
 8013250:	2200      	movs	r2, #0
 8013252:	701a      	strb	r2, [r3, #0]
        } 
    }  
    
    sum += lastPacketSent[i];
 8013254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013256:	68fa      	ldr	r2, [r7, #12]
 8013258:	4413      	add	r3, r2
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	b2db      	uxtb	r3, r3
 801325e:	461a      	mov	r2, r3
 8013260:	6a3b      	ldr	r3, [r7, #32]
 8013262:	4413      	add	r3, r2
 8013264:	623b      	str	r3, [r7, #32]
    if(sum == N_IN_ENDPOINTS)
 8013266:	6a3b      	ldr	r3, [r7, #32]
 8013268:	2b05      	cmp	r3, #5
 801326a:	d102      	bne.n	8013272 <USBD_WCID_STREAMING_SOF+0x2c6>
    {
      *status = STREAMING_STATUS_IDLE;
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	2200      	movs	r2, #0
 8013270:	701a      	strb	r2, [r3, #0]
   for (i = 0; i < N_IN_ENDPOINTS; i++)
 8013272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013274:	3301      	adds	r3, #1
 8013276:	627b      	str	r3, [r7, #36]	; 0x24
 8013278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327a:	2b04      	cmp	r3, #4
 801327c:	ddb1      	ble.n	80131e2 <USBD_WCID_STREAMING_SOF+0x236>
    }
    
  }
  }

  return USBD_OK; 
 801327e:	2300      	movs	r3, #0
}
 8013280:	4618      	mov	r0, r3
 8013282:	3728      	adds	r7, #40	; 0x28
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}

08013288 <USBD_WCID_STREAMING_Setup>:
* @param  req: usb requests
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_Setup (USBD_HandleTypeDef *pdev, 
                                    USBD_SetupReqTypedef *req)
{
 8013288:	b5b0      	push	{r4, r5, r7, lr}
 801328a:	b086      	sub	sp, #24
 801328c:	af02      	add	r7, sp, #8
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6039      	str	r1, [r7, #0]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013298:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80132a2:	2b40      	cmp	r3, #64	; 0x40
 80132a4:	d051      	beq.n	801334a <USBD_WCID_STREAMING_Setup+0xc2>
 80132a6:	2b40      	cmp	r3, #64	; 0x40
 80132a8:	d854      	bhi.n	8013354 <USBD_WCID_STREAMING_Setup+0xcc>
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d041      	beq.n	8013332 <USBD_WCID_STREAMING_Setup+0xaa>
 80132ae:	2b20      	cmp	r3, #32
 80132b0:	d150      	bne.n	8013354 <USBD_WCID_STREAMING_Setup+0xcc>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	88db      	ldrh	r3, [r3, #6]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d04e      	beq.n	8013358 <USBD_WCID_STREAMING_Setup+0xd0>
    {
      if (req->bmRequest & 0x80) /* GET */
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	b25b      	sxtb	r3, r3
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	da1a      	bge.n	80132fa <USBD_WCID_STREAMING_Setup+0x72>
      {
        ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex,
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132ca:	689c      	ldr	r4, [r3, #8]
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	7859      	ldrb	r1, [r3, #1]
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	8858      	ldrh	r0, [r3, #2]
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	889d      	ldrh	r5, [r3, #4]
                                                              (uint8_t *)hwcid->data,
 80132d8:	68fb      	ldr	r3, [r7, #12]
        ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex,
 80132da:	683a      	ldr	r2, [r7, #0]
 80132dc:	88d2      	ldrh	r2, [r2, #6]
 80132de:	9201      	str	r2, [sp, #4]
 80132e0:	9300      	str	r3, [sp, #0]
 80132e2:	462b      	mov	r3, r5
 80132e4:	4602      	mov	r2, r0
 80132e6:	2000      	movs	r0, #0
 80132e8:	47a0      	blx	r4
                                                              req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hwcid->data,
 80132ea:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	88db      	ldrh	r3, [r3, #6]
 80132f0:	461a      	mov	r2, r3
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f001 fc21 	bl	8014b3a <USBD_CtlSendData>
        USBD_CtlPrepareRx (pdev, 
                           (uint8_t *)hwcid->data,
                           req->wLength);
      }      
    }
    break;
 80132f8:	e02e      	b.n	8013358 <USBD_WCID_STREAMING_Setup+0xd0>
        hwcid->CmdOpCode = req->bRequest;
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	785a      	ldrb	r2, [r3, #1]
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        hwcid->CmdLength = req->wLength;
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	88da      	ldrh	r2, [r3, #6]
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
        hwcid->wValue = req->wValue;
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	885a      	ldrh	r2, [r3, #2]
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
        hwcid->wIndex = req->wIndex;
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	889a      	ldrh	r2, [r3, #4]
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
                           (uint8_t *)hwcid->data,
 8013322:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	88db      	ldrh	r3, [r3, #6]
 8013328:	461a      	mov	r2, r3
 801332a:	6878      	ldr	r0, [r7, #4]
 801332c:	f001 fc33 	bl	8014b96 <USBD_CtlPrepareRx>
    break;
 8013330:	e012      	b.n	8013358 <USBD_WCID_STREAMING_Setup+0xd0>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	785b      	ldrb	r3, [r3, #1]
 8013336:	2b0a      	cmp	r3, #10
 8013338:	d001      	beq.n	801333e <USBD_WCID_STREAMING_Setup+0xb6>
 801333a:	2b0b      	cmp	r3, #11
      USBD_CtlSendData (pdev,
                        &ifalt,
                        1);
      break;      
    case USB_REQ_SET_INTERFACE :
      break;
 801333c:	e005      	b.n	801334a <USBD_WCID_STREAMING_Setup+0xc2>
      USBD_CtlSendData (pdev,
 801333e:	2201      	movs	r2, #1
 8013340:	4908      	ldr	r1, [pc, #32]	; (8013364 <USBD_WCID_STREAMING_Setup+0xdc>)
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f001 fbf9 	bl	8014b3a <USBD_CtlSendData>
      break;      
 8013348:	bf00      	nop
    }  
  case USB_REQ_TYPE_VENDOR:    
    
    USBD_VendDevReq (pdev ,req);
 801334a:	6839      	ldr	r1, [r7, #0]
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f000 f981 	bl	8013654 <USBD_VendDevReq>
    break;
 8013352:	e002      	b.n	801335a <USBD_WCID_STREAMING_Setup+0xd2>
  default: 
    break;    
 8013354:	bf00      	nop
 8013356:	e000      	b.n	801335a <USBD_WCID_STREAMING_Setup+0xd2>
    break;
 8013358:	bf00      	nop
  }
  return USBD_OK;
 801335a:	2300      	movs	r3, #0
}
 801335c:	4618      	mov	r0, r3
 801335e:	3710      	adds	r7, #16
 8013360:	46bd      	mov	sp, r7
 8013362:	bdb0      	pop	{r4, r5, r7, pc}
 8013364:	20000d70 	.word	0x20000d70

08013368 <USBD_WCID_STREAMING_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint number
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013368:	b480      	push	{r7}
 801336a:	b085      	sub	sp, #20
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	460b      	mov	r3, r1
 8013372:	70fb      	strb	r3, [r7, #3]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801337a:	60fb      	str	r3, [r7, #12]
  hwcid->TXStates[(epnum & 0x7F) - 1] = 0;
 801337c:	78fb      	ldrb	r3, [r7, #3]
 801337e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013382:	1e5a      	subs	r2, r3, #1
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	3246      	adds	r2, #70	; 0x46
 8013388:	2100      	movs	r1, #0
 801338a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  return USBD_OK;
 801338e:	2300      	movs	r3, #0
}
 8013390:	4618      	mov	r0, r3
 8013392:	3714      	adds	r7, #20
 8013394:	46bd      	mov	sp, r7
 8013396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339a:	4770      	bx	lr

0801339c <USBD_WCID_STREAMING_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint number
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 801339c:	b580      	push	{r7, lr}
 801339e:	b084      	sub	sp, #16
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	460b      	mov	r3, r1
 80133a6:	70fb      	strb	r3, [r7, #3]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133ae:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hwcid->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80133b0:	78fb      	ldrb	r3, [r7, #3]
 80133b2:	4619      	mov	r1, r3
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7f2 feb4 	bl	8006122 <USBD_LL_GetRxDataSize>
 80133ba:	4602      	mov	r2, r0
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  if(pdev->pClassData != NULL)  
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d010      	beq.n	80133ee <USBD_WCID_STREAMING_DataOut+0x52>
  {
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Receive(hwcid->RxBuffer, hwcid->RxLength);    
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	68fa      	ldr	r2, [r7, #12]
 80133d6:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
 80133da:	68fa      	ldr	r2, [r7, #12]
 80133dc:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 80133e0:	4611      	mov	r1, r2
 80133e2:	4798      	blx	r3
    USBD_WCID_STREAMING_ReceivePacket(pdev);
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f000 f919 	bl	801361c <USBD_WCID_STREAMING_ReceivePacket>
    return USBD_OK;
 80133ea:	2300      	movs	r3, #0
 80133ec:	e000      	b.n	80133f0 <USBD_WCID_STREAMING_DataOut+0x54>
  }
  else
  {
    return USBD_FAIL;
 80133ee:	2302      	movs	r3, #2
  }
}
 80133f0:	4618      	mov	r0, r3
 80133f2:	3710      	adds	r7, #16
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}

080133f8 <USBD_WCID_STREAMING_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_WCID_STREAMING_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80133f8:	b5b0      	push	{r4, r5, r7, lr}
 80133fa:	b086      	sub	sp, #24
 80133fc:	af02      	add	r7, sp, #8
 80133fe:	6078      	str	r0, [r7, #4]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013406:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hwcid->CmdOpCode != 0xFF))
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801340e:	2b00      	cmp	r3, #0
 8013410:	d01f      	beq.n	8013452 <USBD_WCID_STREAMING_EP0_RxReady+0x5a>
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8013418:	2bff      	cmp	r3, #255	; 0xff
 801341a:	d01a      	beq.n	8013452 <USBD_WCID_STREAMING_EP0_RxReady+0x5a>
  {
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(1, hwcid->CmdOpCode, hwcid->wValue,  hwcid->wIndex,
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013422:	689c      	ldr	r4, [r3, #8]
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	f8b3 5106 	ldrh.w	r5, [r3, #262]	; 0x106
                                                          (uint8_t *)hwcid->data,
 8013436:	68fb      	ldr	r3, [r7, #12]
    ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(1, hwcid->CmdOpCode, hwcid->wValue,  hwcid->wIndex,
 8013438:	68fa      	ldr	r2, [r7, #12]
 801343a:	f8b2 2102 	ldrh.w	r2, [r2, #258]	; 0x102
 801343e:	9201      	str	r2, [sp, #4]
 8013440:	9300      	str	r3, [sp, #0]
 8013442:	462b      	mov	r3, r5
 8013444:	4602      	mov	r2, r0
 8013446:	2001      	movs	r0, #1
 8013448:	47a0      	blx	r4
                                                          hwcid->CmdLength);
      hwcid->CmdOpCode = 0xFF;     
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	22ff      	movs	r2, #255	; 0xff
 801344e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
  return USBD_OK;
 8013452:	2300      	movs	r3, #0
}
 8013454:	4618      	mov	r0, r3
 8013456:	3710      	adds	r7, #16
 8013458:	46bd      	mov	sp, r7
 801345a:	bdb0      	pop	{r4, r5, r7, pc}

0801345c <USBD_WCID_STREAMING_GetFSCfgDesc>:
*         Return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_WCID_STREAMING_GetFSCfgDesc (uint16_t *length)
{
 801345c:	b480      	push	{r7}
 801345e:	b083      	sub	sp, #12
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_WCID_STREAMING_CfgFSDesc);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	223c      	movs	r2, #60	; 0x3c
 8013468:	801a      	strh	r2, [r3, #0]
  return USBD_WCID_STREAMING_CfgFSDesc;
 801346a:	4b03      	ldr	r3, [pc, #12]	; (8013478 <USBD_WCID_STREAMING_GetFSCfgDesc+0x1c>)
}
 801346c:	4618      	mov	r0, r3
 801346e:	370c      	adds	r7, #12
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr
 8013478:	20000234 	.word	0x20000234

0801347c <USBD_WCID_STREAMING_GetHSCfgDesc>:
*         Return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_WCID_STREAMING_GetHSCfgDesc (uint16_t *length)
{
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_WCID_STREAMING_CfgHSDesc);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	223c      	movs	r2, #60	; 0x3c
 8013488:	801a      	strh	r2, [r3, #0]
  return USBD_WCID_STREAMING_CfgHSDesc;
 801348a:	4b03      	ldr	r3, [pc, #12]	; (8013498 <USBD_WCID_STREAMING_GetHSCfgDesc+0x1c>)
}
 801348c:	4618      	mov	r0, r3
 801348e:	370c      	adds	r7, #12
 8013490:	46bd      	mov	sp, r7
 8013492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013496:	4770      	bx	lr
 8013498:	200001f8 	.word	0x200001f8

0801349c <USBD_WCID_STREAMING_GetOtherSpeedCfgDesc>:
*         Return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_WCID_STREAMING_GetOtherSpeedCfgDesc (uint16_t *length)
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_WCID_STREAMING_OtherSpeedCfgDesc);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	223c      	movs	r2, #60	; 0x3c
 80134a8:	801a      	strh	r2, [r3, #0]
  return USBD_WCID_STREAMING_OtherSpeedCfgDesc;
 80134aa:	4b03      	ldr	r3, [pc, #12]	; (80134b8 <USBD_WCID_STREAMING_GetOtherSpeedCfgDesc+0x1c>)
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	370c      	adds	r7, #12
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr
 80134b8:	20000270 	.word	0x20000270

080134bc <USBD_WCID_STREAMING_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_WCID_STREAMING_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80134bc:	b480      	push	{r7}
 80134be:	b083      	sub	sp, #12
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_WCID_STREAMING_DeviceQualifierDesc);
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	220a      	movs	r2, #10
 80134c8:	801a      	strh	r2, [r3, #0]
  return USBD_WCID_STREAMING_DeviceQualifierDesc;
 80134ca:	4b03      	ldr	r3, [pc, #12]	; (80134d8 <USBD_WCID_STREAMING_GetDeviceQualifierDescriptor+0x1c>)
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	370c      	adds	r7, #12
 80134d0:	46bd      	mov	sp, r7
 80134d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d6:	4770      	bx	lr
 80134d8:	20000188 	.word	0x20000188

080134dc <USBD_WCID_STREAMING_GetUsrStrDescriptor>:
* @param  length : pointer data length
* @param  index : index
* @retval pointer to descriptor buffer
*/
uint8_t  * USBD_WCID_STREAMING_GetUsrStrDescriptor(USBD_HandleTypeDef *pdev ,uint8_t index,  uint16_t *length)
{
 80134dc:	b480      	push	{r7}
 80134de:	b085      	sub	sp, #20
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	60f8      	str	r0, [r7, #12]
 80134e4:	460b      	mov	r3, r1
 80134e6:	607a      	str	r2, [r7, #4]
 80134e8:	72fb      	strb	r3, [r7, #11]
  if ((index) == 0xEE)
 80134ea:	7afb      	ldrb	r3, [r7, #11]
 80134ec:	2bee      	cmp	r3, #238	; 0xee
 80134ee:	d104      	bne.n	80134fa <USBD_WCID_STREAMING_GetUsrStrDescriptor+0x1e>
  {    
    *length = sizeof (USBD_OSStringDesc);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	2212      	movs	r2, #18
 80134f4:	801a      	strh	r2, [r3, #0]
    return USBD_OSStringDesc;
 80134f6:	4b04      	ldr	r3, [pc, #16]	; (8013508 <USBD_WCID_STREAMING_GetUsrStrDescriptor+0x2c>)
 80134f8:	e000      	b.n	80134fc <USBD_WCID_STREAMING_GetUsrStrDescriptor+0x20>
  }
  
  return 0;
 80134fa:	2300      	movs	r3, #0
}
 80134fc:	4618      	mov	r0, r3
 80134fe:	3714      	adds	r7, #20
 8013500:	46bd      	mov	sp, r7
 8013502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013506:	4770      	bx	lr
 8013508:	20000174 	.word	0x20000174

0801350c <USBD_WCID_STREAMING_OSCompIDDescriptor>:
* @param  length : pointer data length
* @param  speed: Current device speed
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_WCID_STREAMING_OSCompIDDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801350c:	b480      	push	{r7}
 801350e:	b083      	sub	sp, #12
 8013510:	af00      	add	r7, sp, #0
 8013512:	4603      	mov	r3, r0
 8013514:	6039      	str	r1, [r7, #0]
 8013516:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(OS_IDFeatureDescriptor);
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	2228      	movs	r2, #40	; 0x28
 801351c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)OS_IDFeatureDescriptor;
 801351e:	4b03      	ldr	r3, [pc, #12]	; (801352c <USBD_WCID_STREAMING_OSCompIDDescriptor+0x20>)
}
 8013520:	4618      	mov	r0, r3
 8013522:	370c      	adds	r7, #12
 8013524:	46bd      	mov	sp, r7
 8013526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352a:	4770      	bx	lr
 801352c:	20000194 	.word	0x20000194

08013530 <USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor>:
* @param  speed: Current device speed
* @param  length: Pointer to data length variable
* @retval Pointer to descriptor buffer
*/
static uint8_t *USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013530:	b480      	push	{r7}
 8013532:	b083      	sub	sp, #12
 8013534:	af00      	add	r7, sp, #0
 8013536:	4603      	mov	r3, r0
 8013538:	6039      	str	r1, [r7, #0]
 801353a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_ExtPropertiesDescStruct);
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	2294      	movs	r2, #148	; 0x94
 8013540:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)&USBD_ExtPropertiesDesc;
 8013542:	4b03      	ldr	r3, [pc, #12]	; (8013550 <USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor+0x20>)
}
 8013544:	4618      	mov	r0, r3
 8013546:	370c      	adds	r7, #12
 8013548:	46bd      	mov	sp, r7
 801354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354e:	4770      	bx	lr
 8013550:	200000e0 	.word	0x200000e0

08013554 <USBD_WCID_STREAMING_SetTxBuffer>:
* @retval status
*/
static uint8_t  USBD_WCID_STREAMING_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                    uint8_t  *pbuff,
                                    uint16_t length)
{
 8013554:	b480      	push	{r7}
 8013556:	b087      	sub	sp, #28
 8013558:	af00      	add	r7, sp, #0
 801355a:	60f8      	str	r0, [r7, #12]
 801355c:	60b9      	str	r1, [r7, #8]
 801355e:	4613      	mov	r3, r2
 8013560:	80fb      	strh	r3, [r7, #6]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013568:	617b      	str	r3, [r7, #20]
  
  hwcid->CurrentTxBuffer = pbuff;
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	68ba      	ldr	r2, [r7, #8]
 801356e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  hwcid->TxLength = length;    
 8013572:	88fa      	ldrh	r2, [r7, #6]
 8013574:	697b      	ldr	r3, [r7, #20]
 8013576:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  return USBD_OK;  
 801357a:	2300      	movs	r3, #0
}
 801357c:	4618      	mov	r0, r3
 801357e:	371c      	adds	r7, #28
 8013580:	46bd      	mov	sp, r7
 8013582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013586:	4770      	bx	lr

08013588 <USBD_WCID_STREAMING_SetRxDataBuffer>:
* @param  ptr: Rx Buffer
* @retval status
*/
uint8_t  USBD_WCID_STREAMING_SetRxDataBuffer  (USBD_HandleTypeDef   *pdev,
                                    uint8_t  *ptr)
{
 8013588:	b480      	push	{r7}
 801358a:	b085      	sub	sp, #20
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013598:	60fb      	str	r3, [r7, #12]
  
  hwcid->RxBuffer = ptr;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	683a      	ldr	r2, [r7, #0]
 801359e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  
  return USBD_OK;
 80135a2:	2300      	movs	r3, #0
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3714      	adds	r7, #20
 80135a8:	46bd      	mov	sp, r7
 80135aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ae:	4770      	bx	lr

080135b0 <USBD_WCID_STREAMING_TransmitPacket>:
* @param  pdev: device instance
* @param  epnum: endpoint number
* @retval status
*/
uint8_t  USBD_WCID_STREAMING_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t epNumber)
{      
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b084      	sub	sp, #16
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	460b      	mov	r3, r1
 80135ba:	70fb      	strb	r3, [r7, #3]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135c2:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d021      	beq.n	8013612 <USBD_WCID_STREAMING_TransmitPacket+0x62>
  {
    if(hwcid->TXStates[(epNumber&0x7F) - 1] == 0)
 80135ce:	78fb      	ldrb	r3, [r7, #3]
 80135d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135d4:	1e5a      	subs	r2, r3, #1
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	3246      	adds	r2, #70	; 0x46
 80135da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d115      	bne.n	801360e <USBD_WCID_STREAMING_TransmitPacket+0x5e>
    {
      /* Tx Transfer in progress */
      hwcid->TXStates[(epNumber&0x7F) - 1] = 1;
 80135e2:	78fb      	ldrb	r3, [r7, #3]
 80135e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135e8:	1e5a      	subs	r2, r3, #1
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	3246      	adds	r2, #70	; 0x46
 80135ee:	2101      	movs	r1, #1
 80135f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
                       (epNumber),
                       hwcid->CurrentTxBuffer,
                       hwcid->TxLength);
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
      USBD_LL_Transmit(pdev,
 8013600:	b29b      	uxth	r3, r3
 8013602:	78f9      	ldrb	r1, [r7, #3]
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	f7f2 fd5e 	bl	80060c6 <USBD_LL_Transmit>
      
      return USBD_OK;
 801360a:	2300      	movs	r3, #0
 801360c:	e002      	b.n	8013614 <USBD_WCID_STREAMING_TransmitPacket+0x64>
    }
    else
    {
      return USBD_BUSY;
 801360e:	2301      	movs	r3, #1
 8013610:	e000      	b.n	8013614 <USBD_WCID_STREAMING_TransmitPacket+0x64>
    }
  }
  else
  {
    return USBD_FAIL;
 8013612:	2302      	movs	r3, #2
  }
}
 8013614:	4618      	mov	r0, r3
 8013616:	3710      	adds	r7, #16
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}

0801361c <USBD_WCID_STREAMING_ReceivePacket>:
*         prepare OUT Endpoint for reception
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_WCID_STREAMING_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 801361c:	b580      	push	{r7, lr}
 801361e:	b084      	sub	sp, #16
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801362a:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013632:	2b00      	cmp	r3, #0
 8013634:	d009      	beq.n	801364a <USBD_WCID_STREAMING_ReceivePacket+0x2e>
  {
    /* Prepare Out endpoint to receive next packet */
    USBD_LL_PrepareReceive(pdev,
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 801363c:	2340      	movs	r3, #64	; 0x40
 801363e:	2101      	movs	r1, #1
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f7f2 fd57 	bl	80060f4 <USBD_LL_PrepareReceive>
                           DATA_OUT_EP1,
                           hwcid->RxBuffer,
                           SS_WCID_DATA_FS_OUT_PACKET_SIZE);
    
    return USBD_OK;
 8013646:	2300      	movs	r3, #0
 8013648:	e000      	b.n	801364c <USBD_WCID_STREAMING_ReceivePacket+0x30>
  }
  else
  {
    return USBD_FAIL;
 801364a:	2302      	movs	r3, #2
  }
}
 801364c:	4618      	mov	r0, r3
 801364e:	3710      	adds	r7, #16
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <USBD_VendDevReq>:
* @param  pdev: instance
* @param  req: usb requests
* @retval status
*/
static USBD_StatusTypeDef  USBD_VendDevReq (USBD_HandleTypeDef *pdev ,USBD_SetupReqTypedef *req)
{
 8013654:	b5b0      	push	{r4, r5, r7, lr}
 8013656:	b088      	sub	sp, #32
 8013658:	af02      	add	r7, sp, #8
 801365a:	6078      	str	r0, [r7, #4]
 801365c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
  switch (req->wIndex) 
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	889b      	ldrh	r3, [r3, #4]
 8013662:	2b05      	cmp	r3, #5
 8013664:	d026      	beq.n	80136b4 <USBD_VendDevReq+0x60>
 8013666:	2b05      	cmp	r3, #5
 8013668:	f300 8087 	bgt.w	801377a <USBD_VendDevReq+0x126>
 801366c:	2b00      	cmp	r3, #0
 801366e:	d040      	beq.n	80136f2 <USBD_VendDevReq+0x9e>
 8013670:	2b04      	cmp	r3, #4
 8013672:	f040 8082 	bne.w	801377a <USBD_VendDevReq+0x126>
  {
  case USB_DESC_TYPE_OS_FEATURE_EXT_PROPERTIES:
    {
      pbuf = USBD_WCID_STREAMING_OSCompIDDescriptor(pdev->dev_speed, &len);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	7c1b      	ldrb	r3, [r3, #16]
 801367a:	f107 020e 	add.w	r2, r7, #14
 801367e:	4611      	mov	r1, r2
 8013680:	4618      	mov	r0, r3
 8013682:	f7ff ff43 	bl	801350c <USBD_WCID_STREAMING_OSCompIDDescriptor>
 8013686:	6178      	str	r0, [r7, #20]
      if((len != 0)&& (req->wLength != 0))
 8013688:	89fb      	ldrh	r3, [r7, #14]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d077      	beq.n	801377e <USBD_VendDevReq+0x12a>
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	88db      	ldrh	r3, [r3, #6]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d073      	beq.n	801377e <USBD_VendDevReq+0x12a>
      {
        
        len = MIN(len , req->wLength);
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	88da      	ldrh	r2, [r3, #6]
 801369a:	89fb      	ldrh	r3, [r7, #14]
 801369c:	4293      	cmp	r3, r2
 801369e:	bf28      	it	cs
 80136a0:	4613      	movcs	r3, r2
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	81fb      	strh	r3, [r7, #14]
        
        USBD_CtlSendData (pdev, 
 80136a6:	89fb      	ldrh	r3, [r7, #14]
 80136a8:	461a      	mov	r2, r3
 80136aa:	6979      	ldr	r1, [r7, #20]
 80136ac:	6878      	ldr	r0, [r7, #4]
 80136ae:	f001 fa44 	bl	8014b3a <USBD_CtlSendData>
                          pbuf,
                          len);
      }
    }    
    break;
 80136b2:	e064      	b.n	801377e <USBD_VendDevReq+0x12a>
  case USB_DESC_TYPE_OS_FEATURE_EXT_COMPAT_ID:
    {
      pbuf = USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor(pdev->dev_speed, &len);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	7c1b      	ldrb	r3, [r3, #16]
 80136b8:	f107 020e 	add.w	r2, r7, #14
 80136bc:	4611      	mov	r1, r2
 80136be:	4618      	mov	r0, r3
 80136c0:	f7ff ff36 	bl	8013530 <USBD_WCID_STREAMING_OSPropertiesFeatureDescriptor>
 80136c4:	6178      	str	r0, [r7, #20]
      if((len != 0)&& (req->wLength != 0))
 80136c6:	89fb      	ldrh	r3, [r7, #14]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d05a      	beq.n	8013782 <USBD_VendDevReq+0x12e>
 80136cc:	683b      	ldr	r3, [r7, #0]
 80136ce:	88db      	ldrh	r3, [r3, #6]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d056      	beq.n	8013782 <USBD_VendDevReq+0x12e>
      {
        
        len = MIN(len , req->wLength);
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	88da      	ldrh	r2, [r3, #6]
 80136d8:	89fb      	ldrh	r3, [r7, #14]
 80136da:	4293      	cmp	r3, r2
 80136dc:	bf28      	it	cs
 80136de:	4613      	movcs	r3, r2
 80136e0:	b29b      	uxth	r3, r3
 80136e2:	81fb      	strh	r3, [r7, #14]
        
        USBD_CtlSendData (pdev, 
 80136e4:	89fb      	ldrh	r3, [r7, #14]
 80136e6:	461a      	mov	r2, r3
 80136e8:	6979      	ldr	r1, [r7, #20]
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f001 fa25 	bl	8014b3a <USBD_CtlSendData>
                          pbuf,
                          len);
      }
    }    
    break;  
 80136f0:	e047      	b.n	8013782 <USBD_VendDevReq+0x12e>
  case USB_DESC_TYPE_USER_CONTROL_ID:
    {
      USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136f8:	613b      	str	r3, [r7, #16]
      if (req->wLength)
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	88db      	ldrh	r3, [r3, #6]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d041      	beq.n	8013786 <USBD_VendDevReq+0x132>
      {
        if (req->bmRequest & 0x80)
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	781b      	ldrb	r3, [r3, #0]
 8013706:	b25b      	sxtb	r3, r3
 8013708:	2b00      	cmp	r3, #0
 801370a:	da1a      	bge.n	8013742 <USBD_VendDevReq+0xee>
        {
          ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex, 
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013712:	689c      	ldr	r4, [r3, #8]
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	7859      	ldrb	r1, [r3, #1]
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	8858      	ldrh	r0, [r3, #2]
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	889d      	ldrh	r5, [r3, #4]
                                                                (uint8_t *)hwcid->data,
 8013720:	693b      	ldr	r3, [r7, #16]
          ((USBD_WCID_STREAMING_ItfTypeDef *)pdev->pUserData)->Control(0, req->bRequest, req->wValue, req->wIndex, 
 8013722:	683a      	ldr	r2, [r7, #0]
 8013724:	88d2      	ldrh	r2, [r2, #6]
 8013726:	9201      	str	r2, [sp, #4]
 8013728:	9300      	str	r3, [sp, #0]
 801372a:	462b      	mov	r3, r5
 801372c:	4602      	mov	r2, r0
 801372e:	2000      	movs	r0, #0
 8013730:	47a0      	blx	r4
                                                                req->wLength);
            
            USBD_CtlSendData (pdev, 
                              (uint8_t *)hwcid->data,
 8013732:	6939      	ldr	r1, [r7, #16]
            USBD_CtlSendData (pdev, 
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	88db      	ldrh	r3, [r3, #6]
 8013738:	461a      	mov	r2, r3
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f001 f9fd 	bl	8014b3a <USBD_CtlSendData>
                             (uint8_t *)hwcid->data,
                             req->wLength);
        }      
      }  
    }
    break;    
 8013740:	e021      	b.n	8013786 <USBD_VendDevReq+0x132>
          hwcid->CmdOpCode = req->bRequest;
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	785a      	ldrb	r2, [r3, #1]
 8013746:	693b      	ldr	r3, [r7, #16]
 8013748:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          hwcid->CmdLength = req->wLength;
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	88da      	ldrh	r2, [r3, #6]
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
          hwcid->wValue = req->wValue;
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	885a      	ldrh	r2, [r3, #2]
 801375a:	693b      	ldr	r3, [r7, #16]
 801375c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
          hwcid->wIndex = req->wIndex;
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	889a      	ldrh	r2, [r3, #4]
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
                             (uint8_t *)hwcid->data,
 801376a:	6939      	ldr	r1, [r7, #16]
          USBD_CtlPrepareRx (pdev, 
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	88db      	ldrh	r3, [r3, #6]
 8013770:	461a      	mov	r2, r3
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f001 fa0f 	bl	8014b96 <USBD_CtlPrepareRx>
    break;    
 8013778:	e005      	b.n	8013786 <USBD_VendDevReq+0x132>
  default :      
    break;    
 801377a:	bf00      	nop
 801377c:	e004      	b.n	8013788 <USBD_VendDevReq+0x134>
    break;
 801377e:	bf00      	nop
 8013780:	e002      	b.n	8013788 <USBD_VendDevReq+0x134>
    break;  
 8013782:	bf00      	nop
 8013784:	e000      	b.n	8013788 <USBD_VendDevReq+0x134>
    break;    
 8013786:	bf00      	nop
  }  
  return USBD_OK;
 8013788:	2300      	movs	r3, #0
}
 801378a:	4618      	mov	r0, r3
 801378c:	3718      	adds	r7, #24
 801378e:	46bd      	mov	sp, r7
 8013790:	bdb0      	pop	{r4, r5, r7, pc}

08013792 <USBD_WCID_STREAMING_RegisterInterface>:
* @param  fops: WCID Interface callback structure
* @retval status
*/
uint8_t  USBD_WCID_STREAMING_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                          USBD_WCID_STREAMING_ItfTypeDef *fops)
{
 8013792:	b480      	push	{r7}
 8013794:	b085      	sub	sp, #20
 8013796:	af00      	add	r7, sp, #0
 8013798:	6078      	str	r0, [r7, #4]
 801379a:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;  
 801379c:	2302      	movs	r3, #2
 801379e:	73fb      	strb	r3, [r7, #15]
  if(fops != NULL)
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d005      	beq.n	80137b2 <USBD_WCID_STREAMING_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	683a      	ldr	r2, [r7, #0]
 80137aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;    
 80137ae:	2300      	movs	r3, #0
 80137b0:	73fb      	strb	r3, [r7, #15]
  }  
  return ret;
 80137b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	3714      	adds	r7, #20
 80137b8:	46bd      	mov	sp, r7
 80137ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137be:	4770      	bx	lr

080137c0 <USBD_WCID_STREAMING_FillTxDataBuffer>:
* @param  size: length of data in bytes
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_FillTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number, uint8_t* buf, uint32_t size)
{
 80137c0:	b480      	push	{r7}
 80137c2:	b08f      	sub	sp, #60	; 0x3c
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	607a      	str	r2, [r7, #4]
 80137ca:	603b      	str	r3, [r7, #0]
 80137cc:	460b      	mov	r3, r1
 80137ce:	72fb      	strb	r3, [r7, #11]
    USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137d6:	62fb      	str	r3, [r7, #44]	; 0x2c

   uint8_t ** TxBuffer = hwcid->TxBuffer;
 80137d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80137de:	62bb      	str	r3, [r7, #40]	; 0x28
   __IO uint8_t * TxBuffStatus = hwcid->TxBuffStatus;
 80137e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e2:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80137e6:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
 80137e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ea:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80137ee:	623b      	str	r3, [r7, #32]
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
 80137f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f2:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 80137f6:	61fb      	str	r3, [r7, #28]
   __IO uint8_t * TxBuffReset = hwcid->TxBuffReset;
 80137f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137fa:	f203 1365 	addw	r3, r3, #357	; 0x165
 80137fe:	61bb      	str	r3, [r7, #24]
   
  uint32_t i;   
  uint8_t * txBuffptr = (uint8_t*)TxBuffer[ch_number];  
 8013800:	7afb      	ldrb	r3, [r7, #11]
 8013802:	009b      	lsls	r3, r3, #2
 8013804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013806:	4413      	add	r3, r2
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	617b      	str	r3, [r7, #20]
  
  if(TxBuffReset[ch_number] == 1)
 801380c:	7afb      	ldrb	r3, [r7, #11]
 801380e:	69ba      	ldr	r2, [r7, #24]
 8013810:	4413      	add	r3, r2
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	b2db      	uxtb	r3, r3
 8013816:	2b01      	cmp	r3, #1
 8013818:	d121      	bne.n	801385e <USBD_WCID_STREAMING_FillTxDataBuffer+0x9e>
  {
    if(ch_number >= (N_IN_ENDPOINTS-1))
 801381a:	7afb      	ldrb	r3, [r7, #11]
 801381c:	2b03      	cmp	r3, #3
 801381e:	d90e      	bls.n	801383e <USBD_WCID_STREAMING_FillTxDataBuffer+0x7e>
    {
      txBuffptr[0] = ch_number;
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	7afa      	ldrb	r2, [r7, #11]
 8013824:	701a      	strb	r2, [r3, #0]
      TxBuffIdx[ch_number] = 1;
 8013826:	7afb      	ldrb	r3, [r7, #11]
 8013828:	009b      	lsls	r3, r3, #2
 801382a:	6a3a      	ldr	r2, [r7, #32]
 801382c:	4413      	add	r3, r2
 801382e:	2201      	movs	r2, #1
 8013830:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 8013832:	7afb      	ldrb	r3, [r7, #11]
 8013834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013836:	4413      	add	r3, r2
 8013838:	2200      	movs	r2, #0
 801383a:	701a      	strb	r2, [r3, #0]
 801383c:	e00a      	b.n	8013854 <USBD_WCID_STREAMING_FillTxDataBuffer+0x94>
    }
    else
    {
      TxBuffIdx[ch_number] = 0;
 801383e:	7afb      	ldrb	r3, [r7, #11]
 8013840:	009b      	lsls	r3, r3, #2
 8013842:	6a3a      	ldr	r2, [r7, #32]
 8013844:	4413      	add	r3, r2
 8013846:	2200      	movs	r2, #0
 8013848:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 801384a:	7afb      	ldrb	r3, [r7, #11]
 801384c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801384e:	4413      	add	r3, r2
 8013850:	2200      	movs	r2, #0
 8013852:	701a      	strb	r2, [r3, #0]
      
    }
    TxBuffReset[ch_number] = 0;
 8013854:	7afb      	ldrb	r3, [r7, #11]
 8013856:	69ba      	ldr	r2, [r7, #24]
 8013858:	4413      	add	r3, r2
 801385a:	2200      	movs	r2, #0
 801385c:	701a      	strb	r2, [r3, #0]
  }
  
  uint32_t txBuffIdx = TxBuffIdx[ch_number];  
 801385e:	7afb      	ldrb	r3, [r7, #11]
 8013860:	009b      	lsls	r3, r3, #2
 8013862:	6a3a      	ldr	r2, [r7, #32]
 8013864:	4413      	add	r3, r2
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	633b      	str	r3, [r7, #48]	; 0x30
  
  for (i = 0; i < size; i++)
 801386a:	2300      	movs	r3, #0
 801386c:	637b      	str	r3, [r7, #52]	; 0x34
 801386e:	e046      	b.n	80138fe <USBD_WCID_STREAMING_FillTxDataBuffer+0x13e>
  {
    txBuffptr[txBuffIdx] = buf[i];    
 8013870:	687a      	ldr	r2, [r7, #4]
 8013872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013874:	441a      	add	r2, r3
 8013876:	6979      	ldr	r1, [r7, #20]
 8013878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387a:	440b      	add	r3, r1
 801387c:	7812      	ldrb	r2, [r2, #0]
 801387e:	701a      	strb	r2, [r3, #0]
    txBuffIdx = (txBuffIdx + 1) %  (USB_DataSizePerEp[ch_number]);
 8013880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013882:	3301      	adds	r3, #1
 8013884:	7afa      	ldrb	r2, [r7, #11]
 8013886:	0052      	lsls	r2, r2, #1
 8013888:	69f9      	ldr	r1, [r7, #28]
 801388a:	440a      	add	r2, r1
 801388c:	8812      	ldrh	r2, [r2, #0]
 801388e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013892:	fb02 f201 	mul.w	r2, r2, r1
 8013896:	1a9b      	subs	r3, r3, r2
 8013898:	633b      	str	r3, [r7, #48]	; 0x30
    
    if(txBuffIdx == (USB_DataSizePerEp[ch_number]/2))
 801389a:	7afb      	ldrb	r3, [r7, #11]
 801389c:	005b      	lsls	r3, r3, #1
 801389e:	69fa      	ldr	r2, [r7, #28]
 80138a0:	4413      	add	r3, r2
 80138a2:	881b      	ldrh	r3, [r3, #0]
 80138a4:	085b      	lsrs	r3, r3, #1
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	461a      	mov	r2, r3
 80138aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ac:	4293      	cmp	r3, r2
 80138ae:	d110      	bne.n	80138d2 <USBD_WCID_STREAMING_FillTxDataBuffer+0x112>
    {
      TxBuffStatus[ch_number] = 1;
 80138b0:	7afb      	ldrb	r3, [r7, #11]
 80138b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138b4:	4413      	add	r3, r2
 80138b6:	2201      	movs	r2, #1
 80138b8:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 80138ba:	7afb      	ldrb	r3, [r7, #11]
 80138bc:	2b03      	cmp	r3, #3
 80138be:	d91b      	bls.n	80138f8 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 80138c0:	697a      	ldr	r2, [r7, #20]
 80138c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c4:	4413      	add	r3, r2
 80138c6:	7afa      	ldrb	r2, [r7, #11]
 80138c8:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 80138ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138cc:	3301      	adds	r3, #1
 80138ce:	633b      	str	r3, [r7, #48]	; 0x30
 80138d0:	e012      	b.n	80138f8 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      }
    }
    else if (txBuffIdx == 0)
 80138d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d10f      	bne.n	80138f8 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
    {
      TxBuffStatus[ch_number] = 2;
 80138d8:	7afb      	ldrb	r3, [r7, #11]
 80138da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138dc:	4413      	add	r3, r2
 80138de:	2202      	movs	r2, #2
 80138e0:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 80138e2:	7afb      	ldrb	r3, [r7, #11]
 80138e4:	2b03      	cmp	r3, #3
 80138e6:	d907      	bls.n	80138f8 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 80138e8:	697a      	ldr	r2, [r7, #20]
 80138ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ec:	4413      	add	r3, r2
 80138ee:	7afa      	ldrb	r2, [r7, #11]
 80138f0:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 80138f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f4:	3301      	adds	r3, #1
 80138f6:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < size; i++)
 80138f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138fa:	3301      	adds	r3, #1
 80138fc:	637b      	str	r3, [r7, #52]	; 0x34
 80138fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	429a      	cmp	r2, r3
 8013904:	d3b4      	bcc.n	8013870 <USBD_WCID_STREAMING_FillTxDataBuffer+0xb0>
      }
    }
  }  
  TxBuffIdx[ch_number] = txBuffIdx;  
 8013906:	7afb      	ldrb	r3, [r7, #11]
 8013908:	009b      	lsls	r3, r3, #2
 801390a:	6a3a      	ldr	r2, [r7, #32]
 801390c:	4413      	add	r3, r2
 801390e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013910:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 8013912:	2300      	movs	r3, #0
}
 8013914:	4618      	mov	r0, r3
 8013916:	373c      	adds	r7, #60	; 0x3c
 8013918:	46bd      	mov	sp, r7
 801391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391e:	4770      	bx	lr

08013920 <USBD_WCID_STREAMING_CleanTxDataBuffer>:
*         discard remaining data in the buffer of the specified ch
* @param  ch_number: channel number
* @retval status
*/
uint8_t USBD_WCID_STREAMING_CleanTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number)
{
 8013920:	b480      	push	{r7}
 8013922:	b085      	sub	sp, #20
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	460b      	mov	r3, r1
 801392a:	70fb      	strb	r3, [r7, #3]
  USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013932:	60fb      	str	r3, [r7, #12]
  __IO uint8_t * TxBuffReset = hwcid->TxBuffReset;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	f203 1365 	addw	r3, r3, #357	; 0x165
 801393a:	60bb      	str	r3, [r7, #8]
   
  TxBuffReset[ch_number] = 1;  
 801393c:	78fb      	ldrb	r3, [r7, #3]
 801393e:	68ba      	ldr	r2, [r7, #8]
 8013940:	4413      	add	r3, r2
 8013942:	2201      	movs	r2, #1
 8013944:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 8013946:	2300      	movs	r3, #0
}
 8013948:	4618      	mov	r0, r3
 801394a:	3714      	adds	r7, #20
 801394c:	46bd      	mov	sp, r7
 801394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013952:	4770      	bx	lr

08013954 <USBD_WCID_STREAMING_SetTxDataBuffer>:
*              NOTE! Memory allocated must be at least equal to (size * 2) + 2;
* @param  size: length of each packet in bytes
* @retval status
*/
uint8_t USBD_WCID_STREAMING_SetTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number, uint8_t * ptr, uint16_t size)
{
 8013954:	b480      	push	{r7}
 8013956:	b089      	sub	sp, #36	; 0x24
 8013958:	af00      	add	r7, sp, #0
 801395a:	60f8      	str	r0, [r7, #12]
 801395c:	607a      	str	r2, [r7, #4]
 801395e:	461a      	mov	r2, r3
 8013960:	460b      	mov	r3, r1
 8013962:	72fb      	strb	r3, [r7, #11]
 8013964:	4613      	mov	r3, r2
 8013966:	813b      	strh	r3, [r7, #8]
   USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801396e:	61fb      	str	r3, [r7, #28]

   uint8_t ** TxBuffer = hwcid->TxBuffer;
 8013970:	69fb      	ldr	r3, [r7, #28]
 8013972:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8013976:	61bb      	str	r3, [r7, #24]
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 801397e:	617b      	str	r3, [r7, #20]
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8013986:	613b      	str	r3, [r7, #16]
   
  if(ch_number >= (N_IN_ENDPOINTS-1))
 8013988:	7afb      	ldrb	r3, [r7, #11]
 801398a:	2b03      	cmp	r3, #3
 801398c:	d919      	bls.n	80139c2 <USBD_WCID_STREAMING_SetTxDataBuffer+0x6e>
  {
    TxBuffer[ch_number] = ptr;
 801398e:	7afb      	ldrb	r3, [r7, #11]
 8013990:	009b      	lsls	r3, r3, #2
 8013992:	69ba      	ldr	r2, [r7, #24]
 8013994:	4413      	add	r3, r2
 8013996:	687a      	ldr	r2, [r7, #4]
 8013998:	601a      	str	r2, [r3, #0]
    USB_DataSizePerEp[ch_number] = size * 2 + 2;  /* Double buffer contains 2 * user data packets + 1st byte of tag for each half*/ 
 801399a:	893b      	ldrh	r3, [r7, #8]
 801399c:	3301      	adds	r3, #1
 801399e:	b29a      	uxth	r2, r3
 80139a0:	7afb      	ldrb	r3, [r7, #11]
 80139a2:	005b      	lsls	r3, r3, #1
 80139a4:	6939      	ldr	r1, [r7, #16]
 80139a6:	440b      	add	r3, r1
 80139a8:	0052      	lsls	r2, r2, #1
 80139aa:	b292      	uxth	r2, r2
 80139ac:	801a      	strh	r2, [r3, #0]
    ptr[0] = ch_number;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	7afa      	ldrb	r2, [r7, #11]
 80139b2:	701a      	strb	r2, [r3, #0]
    TxBuffIdx[ch_number] = 1;
 80139b4:	7afb      	ldrb	r3, [r7, #11]
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	697a      	ldr	r2, [r7, #20]
 80139ba:	4413      	add	r3, r2
 80139bc:	2201      	movs	r2, #1
 80139be:	601a      	str	r2, [r3, #0]
 80139c0:	e00d      	b.n	80139de <USBD_WCID_STREAMING_SetTxDataBuffer+0x8a>
  }
  else
  {
    TxBuffer[ch_number] = ptr;
 80139c2:	7afb      	ldrb	r3, [r7, #11]
 80139c4:	009b      	lsls	r3, r3, #2
 80139c6:	69ba      	ldr	r2, [r7, #24]
 80139c8:	4413      	add	r3, r2
 80139ca:	687a      	ldr	r2, [r7, #4]
 80139cc:	601a      	str	r2, [r3, #0]
    USB_DataSizePerEp[ch_number] = size * 2;  /* Double buffer contains 2 * user data packets*/
 80139ce:	7afb      	ldrb	r3, [r7, #11]
 80139d0:	005b      	lsls	r3, r3, #1
 80139d2:	693a      	ldr	r2, [r7, #16]
 80139d4:	4413      	add	r3, r2
 80139d6:	893a      	ldrh	r2, [r7, #8]
 80139d8:	0052      	lsls	r2, r2, #1
 80139da:	b292      	uxth	r2, r2
 80139dc:	801a      	strh	r2, [r3, #0]
  }
  return USBD_OK;
 80139de:	2300      	movs	r3, #0
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3724      	adds	r7, #36	; 0x24
 80139e4:	46bd      	mov	sp, r7
 80139e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ea:	4770      	bx	lr

080139ec <USBD_WCID_STREAMING_StartStreaming>:
*         Enable USB streaming.
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_StartStreaming(USBD_HandleTypeDef *pdev)
{
 80139ec:	b480      	push	{r7}
 80139ee:	b087      	sub	sp, #28
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
  uint8_t * status = &(((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->streamingStatus);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80139fa:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80139fe:	613b      	str	r3, [r7, #16]
  
  __IO uint8_t * lastPacketSent = ((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->lastPacketSent;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a06:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8013a0a:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < N_IN_ENDPOINTS-1; i++)
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	617b      	str	r3, [r7, #20]
 8013a10:	e007      	b.n	8013a22 <USBD_WCID_STREAMING_StartStreaming+0x36>
  {
    lastPacketSent[i] = 1;
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	68fa      	ldr	r2, [r7, #12]
 8013a16:	4413      	add	r3, r2
 8013a18:	2201      	movs	r2, #1
 8013a1a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < N_IN_ENDPOINTS-1; i++)
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	3301      	adds	r3, #1
 8013a20:	617b      	str	r3, [r7, #20]
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	2b03      	cmp	r3, #3
 8013a26:	ddf4      	ble.n	8013a12 <USBD_WCID_STREAMING_StartStreaming+0x26>
  }
    
    
  *status = STREAMING_STATUS_STARTED;
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	2201      	movs	r2, #1
 8013a2c:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 8013a2e:	2300      	movs	r3, #0
  
}
 8013a30:	4618      	mov	r0, r3
 8013a32:	371c      	adds	r7, #28
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr

08013a3c <USBD_WCID_STREAMING_StopStreaming>:
*         Enable USB streaming.
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_StopStreaming(USBD_HandleTypeDef *pdev)
{
 8013a3c:	b480      	push	{r7}
 8013a3e:	b085      	sub	sp, #20
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
  uint8_t * status = &(((USBD_WCID_STREAMING_HandleTypeDef *)(pdev->pClassData))->streamingStatus);
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a4a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8013a4e:	60fb      	str	r3, [r7, #12]
  *status = STREAMING_STATUS_STOPPING;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	2202      	movs	r2, #2
 8013a54:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 8013a56:	2300      	movs	r3, #0
}
 8013a58:	4618      	mov	r0, r3
 8013a5a:	3714      	adds	r7, #20
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a62:	4770      	bx	lr

08013a64 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b084      	sub	sp, #16
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	60f8      	str	r0, [r7, #12]
 8013a6c:	60b9      	str	r1, [r7, #8]
 8013a6e:	4613      	mov	r3, r2
 8013a70:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d101      	bne.n	8013a7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013a78:	2302      	movs	r3, #2
 8013a7a:	e01a      	b.n	8013ab2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d003      	beq.n	8013a8e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	2200      	movs	r2, #0
 8013a8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d003      	beq.n	8013a9c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	68ba      	ldr	r2, [r7, #8]
 8013a98:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	2201      	movs	r2, #1
 8013aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	79fa      	ldrb	r2, [r7, #7]
 8013aa8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8013aaa:	68f8      	ldr	r0, [r7, #12]
 8013aac:	f7f2 fa06 	bl	8005ebc <USBD_LL_Init>

  return USBD_OK;
 8013ab0:	2300      	movs	r3, #0
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3710      	adds	r7, #16
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}

08013aba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013aba:	b480      	push	{r7}
 8013abc:	b085      	sub	sp, #20
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	6078      	str	r0, [r7, #4]
 8013ac2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d006      	beq.n	8013adc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	683a      	ldr	r2, [r7, #0]
 8013ad2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	73fb      	strb	r3, [r7, #15]
 8013ada:	e001      	b.n	8013ae0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8013adc:	2302      	movs	r3, #2
 8013ade:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3714      	adds	r7, #20
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aec:	4770      	bx	lr

08013aee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013aee:	b580      	push	{r7, lr}
 8013af0:	b082      	sub	sp, #8
 8013af2:	af00      	add	r7, sp, #0
 8013af4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f7f2 fa44 	bl	8005f84 <USBD_LL_Start>

  return USBD_OK;
 8013afc:	2300      	movs	r3, #0
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	3708      	adds	r7, #8
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}

08013b06 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013b06:	b480      	push	{r7}
 8013b08:	b083      	sub	sp, #12
 8013b0a:	af00      	add	r7, sp, #0
 8013b0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013b0e:	2300      	movs	r3, #0
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	370c      	adds	r7, #12
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr

08013b1c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b084      	sub	sp, #16
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	460b      	mov	r3, r1
 8013b26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013b28:	2302      	movs	r3, #2
 8013b2a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d00c      	beq.n	8013b50 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	78fa      	ldrb	r2, [r7, #3]
 8013b40:	4611      	mov	r1, r2
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	4798      	blx	r3
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d101      	bne.n	8013b50 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	3710      	adds	r7, #16
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}

08013b5a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013b5a:	b580      	push	{r7, lr}
 8013b5c:	b082      	sub	sp, #8
 8013b5e:	af00      	add	r7, sp, #0
 8013b60:	6078      	str	r0, [r7, #4]
 8013b62:	460b      	mov	r3, r1
 8013b64:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	78fa      	ldrb	r2, [r7, #3]
 8013b70:	4611      	mov	r1, r2
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	4798      	blx	r3

  return USBD_OK;
 8013b76:	2300      	movs	r3, #0
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3708      	adds	r7, #8
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}

08013b80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b082      	sub	sp, #8
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
 8013b88:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013b90:	6839      	ldr	r1, [r7, #0]
 8013b92:	4618      	mov	r0, r3
 8013b94:	f000 ff29 	bl	80149ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013bb4:	f003 031f 	and.w	r3, r3, #31
 8013bb8:	2b02      	cmp	r3, #2
 8013bba:	d016      	beq.n	8013bea <USBD_LL_SetupStage+0x6a>
 8013bbc:	2b02      	cmp	r3, #2
 8013bbe:	d81c      	bhi.n	8013bfa <USBD_LL_SetupStage+0x7a>
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d002      	beq.n	8013bca <USBD_LL_SetupStage+0x4a>
 8013bc4:	2b01      	cmp	r3, #1
 8013bc6:	d008      	beq.n	8013bda <USBD_LL_SetupStage+0x5a>
 8013bc8:	e017      	b.n	8013bfa <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013bd0:	4619      	mov	r1, r3
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f000 fa0a 	bl	8013fec <USBD_StdDevReq>
      break;
 8013bd8:	e01a      	b.n	8013c10 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013be0:	4619      	mov	r1, r3
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	f000 fa6c 	bl	80140c0 <USBD_StdItfReq>
      break;
 8013be8:	e012      	b.n	8013c10 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f000 faac 	bl	8014150 <USBD_StdEPReq>
      break;
 8013bf8:	e00a      	b.n	8013c10 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013c00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013c04:	b2db      	uxtb	r3, r3
 8013c06:	4619      	mov	r1, r3
 8013c08:	6878      	ldr	r0, [r7, #4]
 8013c0a:	f7f2 f9f7 	bl	8005ffc <USBD_LL_StallEP>
      break;
 8013c0e:	bf00      	nop
  }

  return USBD_OK;
 8013c10:	2300      	movs	r3, #0
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3708      	adds	r7, #8
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}

08013c1a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013c1a:	b580      	push	{r7, lr}
 8013c1c:	b086      	sub	sp, #24
 8013c1e:	af00      	add	r7, sp, #0
 8013c20:	60f8      	str	r0, [r7, #12]
 8013c22:	460b      	mov	r3, r1
 8013c24:	607a      	str	r2, [r7, #4]
 8013c26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013c28:	7afb      	ldrb	r3, [r7, #11]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d14b      	bne.n	8013cc6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013c34:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013c3c:	2b03      	cmp	r3, #3
 8013c3e:	d134      	bne.n	8013caa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	68da      	ldr	r2, [r3, #12]
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	691b      	ldr	r3, [r3, #16]
 8013c48:	429a      	cmp	r2, r3
 8013c4a:	d919      	bls.n	8013c80 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8013c4c:	697b      	ldr	r3, [r7, #20]
 8013c4e:	68da      	ldr	r2, [r3, #12]
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	691b      	ldr	r3, [r3, #16]
 8013c54:	1ad2      	subs	r2, r2, r3
 8013c56:	697b      	ldr	r3, [r7, #20]
 8013c58:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	68da      	ldr	r2, [r3, #12]
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d203      	bcs.n	8013c6e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8013c6a:	b29b      	uxth	r3, r3
 8013c6c:	e002      	b.n	8013c74 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013c6e:	697b      	ldr	r3, [r7, #20]
 8013c70:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013c72:	b29b      	uxth	r3, r3
 8013c74:	461a      	mov	r2, r3
 8013c76:	6879      	ldr	r1, [r7, #4]
 8013c78:	68f8      	ldr	r0, [r7, #12]
 8013c7a:	f000 ffaa 	bl	8014bd2 <USBD_CtlContinueRx>
 8013c7e:	e038      	b.n	8013cf2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c86:	691b      	ldr	r3, [r3, #16]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d00a      	beq.n	8013ca2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013c92:	2b03      	cmp	r3, #3
 8013c94:	d105      	bne.n	8013ca2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c9c:	691b      	ldr	r3, [r3, #16]
 8013c9e:	68f8      	ldr	r0, [r7, #12]
 8013ca0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8013ca2:	68f8      	ldr	r0, [r7, #12]
 8013ca4:	f000 ffa7 	bl	8014bf6 <USBD_CtlSendStatus>
 8013ca8:	e023      	b.n	8013cf2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013cb0:	2b05      	cmp	r3, #5
 8013cb2:	d11e      	bne.n	8013cf2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8013cbc:	2100      	movs	r1, #0
 8013cbe:	68f8      	ldr	r0, [r7, #12]
 8013cc0:	f7f2 f99c 	bl	8005ffc <USBD_LL_StallEP>
 8013cc4:	e015      	b.n	8013cf2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ccc:	699b      	ldr	r3, [r3, #24]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d00d      	beq.n	8013cee <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8013cd8:	2b03      	cmp	r3, #3
 8013cda:	d108      	bne.n	8013cee <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ce2:	699b      	ldr	r3, [r3, #24]
 8013ce4:	7afa      	ldrb	r2, [r7, #11]
 8013ce6:	4611      	mov	r1, r2
 8013ce8:	68f8      	ldr	r0, [r7, #12]
 8013cea:	4798      	blx	r3
 8013cec:	e001      	b.n	8013cf2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013cee:	2302      	movs	r3, #2
 8013cf0:	e000      	b.n	8013cf4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8013cf2:	2300      	movs	r3, #0
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3718      	adds	r7, #24
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b086      	sub	sp, #24
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	60f8      	str	r0, [r7, #12]
 8013d04:	460b      	mov	r3, r1
 8013d06:	607a      	str	r2, [r7, #4]
 8013d08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013d0a:	7afb      	ldrb	r3, [r7, #11]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d17f      	bne.n	8013e10 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	3314      	adds	r3, #20
 8013d14:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013d1c:	2b02      	cmp	r3, #2
 8013d1e:	d15c      	bne.n	8013dda <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	68da      	ldr	r2, [r3, #12]
 8013d24:	697b      	ldr	r3, [r7, #20]
 8013d26:	691b      	ldr	r3, [r3, #16]
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	d915      	bls.n	8013d58 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	68da      	ldr	r2, [r3, #12]
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	691b      	ldr	r3, [r3, #16]
 8013d34:	1ad2      	subs	r2, r2, r3
 8013d36:	697b      	ldr	r3, [r7, #20]
 8013d38:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	68db      	ldr	r3, [r3, #12]
 8013d3e:	b29b      	uxth	r3, r3
 8013d40:	461a      	mov	r2, r3
 8013d42:	6879      	ldr	r1, [r7, #4]
 8013d44:	68f8      	ldr	r0, [r7, #12]
 8013d46:	f000 ff14 	bl	8014b72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	2100      	movs	r1, #0
 8013d50:	68f8      	ldr	r0, [r7, #12]
 8013d52:	f7f2 f9cf 	bl	80060f4 <USBD_LL_PrepareReceive>
 8013d56:	e04e      	b.n	8013df6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	689b      	ldr	r3, [r3, #8]
 8013d5c:	697a      	ldr	r2, [r7, #20]
 8013d5e:	6912      	ldr	r2, [r2, #16]
 8013d60:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d64:	fb02 f201 	mul.w	r2, r2, r1
 8013d68:	1a9b      	subs	r3, r3, r2
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d11c      	bne.n	8013da8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8013d6e:	697b      	ldr	r3, [r7, #20]
 8013d70:	689a      	ldr	r2, [r3, #8]
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d316      	bcc.n	8013da8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	689a      	ldr	r2, [r3, #8]
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d20f      	bcs.n	8013da8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013d88:	2200      	movs	r2, #0
 8013d8a:	2100      	movs	r1, #0
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f000 fef0 	bl	8014b72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	2200      	movs	r2, #0
 8013d96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	2100      	movs	r1, #0
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	f7f2 f9a7 	bl	80060f4 <USBD_LL_PrepareReceive>
 8013da6:	e026      	b.n	8013df6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dae:	68db      	ldr	r3, [r3, #12]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d00a      	beq.n	8013dca <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013dba:	2b03      	cmp	r3, #3
 8013dbc:	d105      	bne.n	8013dca <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dc4:	68db      	ldr	r3, [r3, #12]
 8013dc6:	68f8      	ldr	r0, [r7, #12]
 8013dc8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8013dca:	2180      	movs	r1, #128	; 0x80
 8013dcc:	68f8      	ldr	r0, [r7, #12]
 8013dce:	f7f2 f915 	bl	8005ffc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8013dd2:	68f8      	ldr	r0, [r7, #12]
 8013dd4:	f000 ff22 	bl	8014c1c <USBD_CtlReceiveStatus>
 8013dd8:	e00d      	b.n	8013df6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013de0:	2b04      	cmp	r3, #4
 8013de2:	d004      	beq.n	8013dee <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d103      	bne.n	8013df6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8013dee:	2180      	movs	r1, #128	; 0x80
 8013df0:	68f8      	ldr	r0, [r7, #12]
 8013df2:	f7f2 f903 	bl	8005ffc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d11d      	bne.n	8013e3c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8013e00:	68f8      	ldr	r0, [r7, #12]
 8013e02:	f7ff fe80 	bl	8013b06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013e0e:	e015      	b.n	8013e3c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e16:	695b      	ldr	r3, [r3, #20]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d00d      	beq.n	8013e38 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8013e22:	2b03      	cmp	r3, #3
 8013e24:	d108      	bne.n	8013e38 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e2c:	695b      	ldr	r3, [r3, #20]
 8013e2e:	7afa      	ldrb	r2, [r7, #11]
 8013e30:	4611      	mov	r1, r2
 8013e32:	68f8      	ldr	r0, [r7, #12]
 8013e34:	4798      	blx	r3
 8013e36:	e001      	b.n	8013e3c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013e38:	2302      	movs	r3, #2
 8013e3a:	e000      	b.n	8013e3e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8013e3c:	2300      	movs	r3, #0
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	3718      	adds	r7, #24
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}

08013e46 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013e46:	b580      	push	{r7, lr}
 8013e48:	b082      	sub	sp, #8
 8013e4a:	af00      	add	r7, sp, #0
 8013e4c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013e4e:	2340      	movs	r3, #64	; 0x40
 8013e50:	2200      	movs	r2, #0
 8013e52:	2100      	movs	r1, #0
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f7f2 f8a4 	bl	8005fa2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	2201      	movs	r2, #1
 8013e5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	2240      	movs	r2, #64	; 0x40
 8013e66:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013e6a:	2340      	movs	r3, #64	; 0x40
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	2180      	movs	r1, #128	; 0x80
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f7f2 f896 	bl	8005fa2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2201      	movs	r2, #1
 8013e7a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2240      	movs	r2, #64	; 0x40
 8013e80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	2201      	movs	r2, #1
 8013e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	2200      	movs	r2, #0
 8013e96:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d009      	beq.n	8013ebe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	687a      	ldr	r2, [r7, #4]
 8013eb4:	6852      	ldr	r2, [r2, #4]
 8013eb6:	b2d2      	uxtb	r2, r2
 8013eb8:	4611      	mov	r1, r2
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	4798      	blx	r3
  }

  return USBD_OK;
 8013ebe:	2300      	movs	r3, #0
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3708      	adds	r7, #8
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013ec8:	b480      	push	{r7}
 8013eca:	b083      	sub	sp, #12
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
 8013ed0:	460b      	mov	r3, r1
 8013ed2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	78fa      	ldrb	r2, [r7, #3]
 8013ed8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013eda:	2300      	movs	r3, #0
}
 8013edc:	4618      	mov	r0, r3
 8013ede:	370c      	adds	r7, #12
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee6:	4770      	bx	lr

08013ee8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013ee8:	b480      	push	{r7}
 8013eea:	b083      	sub	sp, #12
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2204      	movs	r2, #4
 8013f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013f04:	2300      	movs	r3, #0
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	370c      	adds	r7, #12
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f10:	4770      	bx	lr

08013f12 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013f12:	b480      	push	{r7}
 8013f14:	b083      	sub	sp, #12
 8013f16:	af00      	add	r7, sp, #0
 8013f18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f20:	2b04      	cmp	r3, #4
 8013f22:	d105      	bne.n	8013f30 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013f30:	2300      	movs	r3, #0
}
 8013f32:	4618      	mov	r0, r3
 8013f34:	370c      	adds	r7, #12
 8013f36:	46bd      	mov	sp, r7
 8013f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3c:	4770      	bx	lr

08013f3e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013f3e:	b580      	push	{r7, lr}
 8013f40:	b082      	sub	sp, #8
 8013f42:	af00      	add	r7, sp, #0
 8013f44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f4c:	2b03      	cmp	r3, #3
 8013f4e:	d10b      	bne.n	8013f68 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f56:	69db      	ldr	r3, [r3, #28]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d005      	beq.n	8013f68 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013f62:	69db      	ldr	r3, [r3, #28]
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013f68:	2300      	movs	r3, #0
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	3708      	adds	r7, #8
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}

08013f72 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013f72:	b480      	push	{r7}
 8013f74:	b083      	sub	sp, #12
 8013f76:	af00      	add	r7, sp, #0
 8013f78:	6078      	str	r0, [r7, #4]
 8013f7a:	460b      	mov	r3, r1
 8013f7c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8013f7e:	2300      	movs	r3, #0
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	370c      	adds	r7, #12
 8013f84:	46bd      	mov	sp, r7
 8013f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8a:	4770      	bx	lr

08013f8c <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013f8c:	b480      	push	{r7}
 8013f8e:	b083      	sub	sp, #12
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	460b      	mov	r3, r1
 8013f96:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8013f98:	2300      	movs	r3, #0
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	370c      	adds	r7, #12
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa4:	4770      	bx	lr

08013fa6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013fa6:	b480      	push	{r7}
 8013fa8:	b083      	sub	sp, #12
 8013faa:	af00      	add	r7, sp, #0
 8013fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013fae:	2300      	movs	r3, #0
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	370c      	adds	r7, #12
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fba:	4770      	bx	lr

08013fbc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b082      	sub	sp, #8
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2201      	movs	r2, #1
 8013fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	687a      	ldr	r2, [r7, #4]
 8013fd6:	6852      	ldr	r2, [r2, #4]
 8013fd8:	b2d2      	uxtb	r2, r2
 8013fda:	4611      	mov	r1, r2
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	4798      	blx	r3

  return USBD_OK;
 8013fe0:	2300      	movs	r3, #0
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3708      	adds	r7, #8
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
	...

08013fec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b084      	sub	sp, #16
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014002:	2b40      	cmp	r3, #64	; 0x40
 8014004:	d005      	beq.n	8014012 <USBD_StdDevReq+0x26>
 8014006:	2b40      	cmp	r3, #64	; 0x40
 8014008:	d84f      	bhi.n	80140aa <USBD_StdDevReq+0xbe>
 801400a:	2b00      	cmp	r3, #0
 801400c:	d009      	beq.n	8014022 <USBD_StdDevReq+0x36>
 801400e:	2b20      	cmp	r3, #32
 8014010:	d14b      	bne.n	80140aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014018:	689b      	ldr	r3, [r3, #8]
 801401a:	6839      	ldr	r1, [r7, #0]
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	4798      	blx	r3
      break;
 8014020:	e048      	b.n	80140b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	785b      	ldrb	r3, [r3, #1]
 8014026:	2b09      	cmp	r3, #9
 8014028:	d839      	bhi.n	801409e <USBD_StdDevReq+0xb2>
 801402a:	a201      	add	r2, pc, #4	; (adr r2, 8014030 <USBD_StdDevReq+0x44>)
 801402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014030:	08014081 	.word	0x08014081
 8014034:	08014095 	.word	0x08014095
 8014038:	0801409f 	.word	0x0801409f
 801403c:	0801408b 	.word	0x0801408b
 8014040:	0801409f 	.word	0x0801409f
 8014044:	08014063 	.word	0x08014063
 8014048:	08014059 	.word	0x08014059
 801404c:	0801409f 	.word	0x0801409f
 8014050:	08014077 	.word	0x08014077
 8014054:	0801406d 	.word	0x0801406d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014058:	6839      	ldr	r1, [r7, #0]
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f000 f9dc 	bl	8014418 <USBD_GetDescriptor>
          break;
 8014060:	e022      	b.n	80140a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014062:	6839      	ldr	r1, [r7, #0]
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f000 fb51 	bl	801470c <USBD_SetAddress>
          break;
 801406a:	e01d      	b.n	80140a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801406c:	6839      	ldr	r1, [r7, #0]
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	f000 fb90 	bl	8014794 <USBD_SetConfig>
          break;
 8014074:	e018      	b.n	80140a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014076:	6839      	ldr	r1, [r7, #0]
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f000 fc19 	bl	80148b0 <USBD_GetConfig>
          break;
 801407e:	e013      	b.n	80140a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014080:	6839      	ldr	r1, [r7, #0]
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f000 fc49 	bl	801491a <USBD_GetStatus>
          break;
 8014088:	e00e      	b.n	80140a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801408a:	6839      	ldr	r1, [r7, #0]
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f000 fc77 	bl	8014980 <USBD_SetFeature>
          break;
 8014092:	e009      	b.n	80140a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014094:	6839      	ldr	r1, [r7, #0]
 8014096:	6878      	ldr	r0, [r7, #4]
 8014098:	f000 fc86 	bl	80149a8 <USBD_ClrFeature>
          break;
 801409c:	e004      	b.n	80140a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801409e:	6839      	ldr	r1, [r7, #0]
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f000 fcdf 	bl	8014a64 <USBD_CtlError>
          break;
 80140a6:	bf00      	nop
      }
      break;
 80140a8:	e004      	b.n	80140b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80140aa:	6839      	ldr	r1, [r7, #0]
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f000 fcd9 	bl	8014a64 <USBD_CtlError>
      break;
 80140b2:	bf00      	nop
  }

  return ret;
 80140b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3710      	adds	r7, #16
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}
 80140be:	bf00      	nop

080140c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b084      	sub	sp, #16
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
 80140c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80140ca:	2300      	movs	r3, #0
 80140cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80140d6:	2b40      	cmp	r3, #64	; 0x40
 80140d8:	d005      	beq.n	80140e6 <USBD_StdItfReq+0x26>
 80140da:	2b40      	cmp	r3, #64	; 0x40
 80140dc:	d82e      	bhi.n	801413c <USBD_StdItfReq+0x7c>
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d001      	beq.n	80140e6 <USBD_StdItfReq+0x26>
 80140e2:	2b20      	cmp	r3, #32
 80140e4:	d12a      	bne.n	801413c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140ec:	3b01      	subs	r3, #1
 80140ee:	2b02      	cmp	r3, #2
 80140f0:	d81d      	bhi.n	801412e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	889b      	ldrh	r3, [r3, #4]
 80140f6:	b2db      	uxtb	r3, r3
 80140f8:	2b01      	cmp	r3, #1
 80140fa:	d813      	bhi.n	8014124 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014102:	689b      	ldr	r3, [r3, #8]
 8014104:	6839      	ldr	r1, [r7, #0]
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	4798      	blx	r3
 801410a:	4603      	mov	r3, r0
 801410c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801410e:	683b      	ldr	r3, [r7, #0]
 8014110:	88db      	ldrh	r3, [r3, #6]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d110      	bne.n	8014138 <USBD_StdItfReq+0x78>
 8014116:	7bfb      	ldrb	r3, [r7, #15]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d10d      	bne.n	8014138 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f000 fd6a 	bl	8014bf6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014122:	e009      	b.n	8014138 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8014124:	6839      	ldr	r1, [r7, #0]
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f000 fc9c 	bl	8014a64 <USBD_CtlError>
          break;
 801412c:	e004      	b.n	8014138 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 801412e:	6839      	ldr	r1, [r7, #0]
 8014130:	6878      	ldr	r0, [r7, #4]
 8014132:	f000 fc97 	bl	8014a64 <USBD_CtlError>
          break;
 8014136:	e000      	b.n	801413a <USBD_StdItfReq+0x7a>
          break;
 8014138:	bf00      	nop
      }
      break;
 801413a:	e004      	b.n	8014146 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 801413c:	6839      	ldr	r1, [r7, #0]
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f000 fc90 	bl	8014a64 <USBD_CtlError>
      break;
 8014144:	bf00      	nop
  }

  return USBD_OK;
 8014146:	2300      	movs	r3, #0
}
 8014148:	4618      	mov	r0, r3
 801414a:	3710      	adds	r7, #16
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b084      	sub	sp, #16
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801415a:	2300      	movs	r3, #0
 801415c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	889b      	ldrh	r3, [r3, #4]
 8014162:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	781b      	ldrb	r3, [r3, #0]
 8014168:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801416c:	2b40      	cmp	r3, #64	; 0x40
 801416e:	d007      	beq.n	8014180 <USBD_StdEPReq+0x30>
 8014170:	2b40      	cmp	r3, #64	; 0x40
 8014172:	f200 8146 	bhi.w	8014402 <USBD_StdEPReq+0x2b2>
 8014176:	2b00      	cmp	r3, #0
 8014178:	d00a      	beq.n	8014190 <USBD_StdEPReq+0x40>
 801417a:	2b20      	cmp	r3, #32
 801417c:	f040 8141 	bne.w	8014402 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014186:	689b      	ldr	r3, [r3, #8]
 8014188:	6839      	ldr	r1, [r7, #0]
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	4798      	blx	r3
      break;
 801418e:	e13d      	b.n	801440c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014198:	2b20      	cmp	r3, #32
 801419a:	d10a      	bne.n	80141b2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80141a2:	689b      	ldr	r3, [r3, #8]
 80141a4:	6839      	ldr	r1, [r7, #0]
 80141a6:	6878      	ldr	r0, [r7, #4]
 80141a8:	4798      	blx	r3
 80141aa:	4603      	mov	r3, r0
 80141ac:	73fb      	strb	r3, [r7, #15]

        return ret;
 80141ae:	7bfb      	ldrb	r3, [r7, #15]
 80141b0:	e12d      	b.n	801440e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	785b      	ldrb	r3, [r3, #1]
 80141b6:	2b03      	cmp	r3, #3
 80141b8:	d007      	beq.n	80141ca <USBD_StdEPReq+0x7a>
 80141ba:	2b03      	cmp	r3, #3
 80141bc:	f300 811b 	bgt.w	80143f6 <USBD_StdEPReq+0x2a6>
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d072      	beq.n	80142aa <USBD_StdEPReq+0x15a>
 80141c4:	2b01      	cmp	r3, #1
 80141c6:	d03a      	beq.n	801423e <USBD_StdEPReq+0xee>
 80141c8:	e115      	b.n	80143f6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141d0:	2b02      	cmp	r3, #2
 80141d2:	d002      	beq.n	80141da <USBD_StdEPReq+0x8a>
 80141d4:	2b03      	cmp	r3, #3
 80141d6:	d015      	beq.n	8014204 <USBD_StdEPReq+0xb4>
 80141d8:	e02b      	b.n	8014232 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80141da:	7bbb      	ldrb	r3, [r7, #14]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d00c      	beq.n	80141fa <USBD_StdEPReq+0xaa>
 80141e0:	7bbb      	ldrb	r3, [r7, #14]
 80141e2:	2b80      	cmp	r3, #128	; 0x80
 80141e4:	d009      	beq.n	80141fa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80141e6:	7bbb      	ldrb	r3, [r7, #14]
 80141e8:	4619      	mov	r1, r3
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	f7f1 ff06 	bl	8005ffc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80141f0:	2180      	movs	r1, #128	; 0x80
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f7f1 ff02 	bl	8005ffc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80141f8:	e020      	b.n	801423c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80141fa:	6839      	ldr	r1, [r7, #0]
 80141fc:	6878      	ldr	r0, [r7, #4]
 80141fe:	f000 fc31 	bl	8014a64 <USBD_CtlError>
              break;
 8014202:	e01b      	b.n	801423c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	885b      	ldrh	r3, [r3, #2]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d10e      	bne.n	801422a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 801420c:	7bbb      	ldrb	r3, [r7, #14]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d00b      	beq.n	801422a <USBD_StdEPReq+0xda>
 8014212:	7bbb      	ldrb	r3, [r7, #14]
 8014214:	2b80      	cmp	r3, #128	; 0x80
 8014216:	d008      	beq.n	801422a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	88db      	ldrh	r3, [r3, #6]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d104      	bne.n	801422a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8014220:	7bbb      	ldrb	r3, [r7, #14]
 8014222:	4619      	mov	r1, r3
 8014224:	6878      	ldr	r0, [r7, #4]
 8014226:	f7f1 fee9 	bl	8005ffc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f000 fce3 	bl	8014bf6 <USBD_CtlSendStatus>

              break;
 8014230:	e004      	b.n	801423c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8014232:	6839      	ldr	r1, [r7, #0]
 8014234:	6878      	ldr	r0, [r7, #4]
 8014236:	f000 fc15 	bl	8014a64 <USBD_CtlError>
              break;
 801423a:	bf00      	nop
          }
          break;
 801423c:	e0e0      	b.n	8014400 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014244:	2b02      	cmp	r3, #2
 8014246:	d002      	beq.n	801424e <USBD_StdEPReq+0xfe>
 8014248:	2b03      	cmp	r3, #3
 801424a:	d015      	beq.n	8014278 <USBD_StdEPReq+0x128>
 801424c:	e026      	b.n	801429c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801424e:	7bbb      	ldrb	r3, [r7, #14]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d00c      	beq.n	801426e <USBD_StdEPReq+0x11e>
 8014254:	7bbb      	ldrb	r3, [r7, #14]
 8014256:	2b80      	cmp	r3, #128	; 0x80
 8014258:	d009      	beq.n	801426e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801425a:	7bbb      	ldrb	r3, [r7, #14]
 801425c:	4619      	mov	r1, r3
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f7f1 fecc 	bl	8005ffc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014264:	2180      	movs	r1, #128	; 0x80
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f7f1 fec8 	bl	8005ffc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801426c:	e01c      	b.n	80142a8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 801426e:	6839      	ldr	r1, [r7, #0]
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f000 fbf7 	bl	8014a64 <USBD_CtlError>
              break;
 8014276:	e017      	b.n	80142a8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014278:	683b      	ldr	r3, [r7, #0]
 801427a:	885b      	ldrh	r3, [r3, #2]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d112      	bne.n	80142a6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014280:	7bbb      	ldrb	r3, [r7, #14]
 8014282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014286:	2b00      	cmp	r3, #0
 8014288:	d004      	beq.n	8014294 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801428a:	7bbb      	ldrb	r3, [r7, #14]
 801428c:	4619      	mov	r1, r3
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f7f1 fec7 	bl	8006022 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f000 fcae 	bl	8014bf6 <USBD_CtlSendStatus>
              }
              break;
 801429a:	e004      	b.n	80142a6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 801429c:	6839      	ldr	r1, [r7, #0]
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	f000 fbe0 	bl	8014a64 <USBD_CtlError>
              break;
 80142a4:	e000      	b.n	80142a8 <USBD_StdEPReq+0x158>
              break;
 80142a6:	bf00      	nop
          }
          break;
 80142a8:	e0aa      	b.n	8014400 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142b0:	2b02      	cmp	r3, #2
 80142b2:	d002      	beq.n	80142ba <USBD_StdEPReq+0x16a>
 80142b4:	2b03      	cmp	r3, #3
 80142b6:	d032      	beq.n	801431e <USBD_StdEPReq+0x1ce>
 80142b8:	e097      	b.n	80143ea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80142ba:	7bbb      	ldrb	r3, [r7, #14]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d007      	beq.n	80142d0 <USBD_StdEPReq+0x180>
 80142c0:	7bbb      	ldrb	r3, [r7, #14]
 80142c2:	2b80      	cmp	r3, #128	; 0x80
 80142c4:	d004      	beq.n	80142d0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80142c6:	6839      	ldr	r1, [r7, #0]
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f000 fbcb 	bl	8014a64 <USBD_CtlError>
                break;
 80142ce:	e091      	b.n	80143f4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	da0b      	bge.n	80142f0 <USBD_StdEPReq+0x1a0>
 80142d8:	7bbb      	ldrb	r3, [r7, #14]
 80142da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80142de:	4613      	mov	r3, r2
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	4413      	add	r3, r2
 80142e4:	009b      	lsls	r3, r3, #2
 80142e6:	3310      	adds	r3, #16
 80142e8:	687a      	ldr	r2, [r7, #4]
 80142ea:	4413      	add	r3, r2
 80142ec:	3304      	adds	r3, #4
 80142ee:	e00b      	b.n	8014308 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80142f0:	7bbb      	ldrb	r3, [r7, #14]
 80142f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142f6:	4613      	mov	r3, r2
 80142f8:	009b      	lsls	r3, r3, #2
 80142fa:	4413      	add	r3, r2
 80142fc:	009b      	lsls	r3, r3, #2
 80142fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014302:	687a      	ldr	r2, [r7, #4]
 8014304:	4413      	add	r3, r2
 8014306:	3304      	adds	r3, #4
 8014308:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	2200      	movs	r2, #0
 801430e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	2202      	movs	r2, #2
 8014314:	4619      	mov	r1, r3
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	f000 fc0f 	bl	8014b3a <USBD_CtlSendData>
              break;
 801431c:	e06a      	b.n	80143f4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801431e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014322:	2b00      	cmp	r3, #0
 8014324:	da11      	bge.n	801434a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014326:	7bbb      	ldrb	r3, [r7, #14]
 8014328:	f003 020f 	and.w	r2, r3, #15
 801432c:	6879      	ldr	r1, [r7, #4]
 801432e:	4613      	mov	r3, r2
 8014330:	009b      	lsls	r3, r3, #2
 8014332:	4413      	add	r3, r2
 8014334:	009b      	lsls	r3, r3, #2
 8014336:	440b      	add	r3, r1
 8014338:	3318      	adds	r3, #24
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d117      	bne.n	8014370 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8014340:	6839      	ldr	r1, [r7, #0]
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f000 fb8e 	bl	8014a64 <USBD_CtlError>
                  break;
 8014348:	e054      	b.n	80143f4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801434a:	7bbb      	ldrb	r3, [r7, #14]
 801434c:	f003 020f 	and.w	r2, r3, #15
 8014350:	6879      	ldr	r1, [r7, #4]
 8014352:	4613      	mov	r3, r2
 8014354:	009b      	lsls	r3, r3, #2
 8014356:	4413      	add	r3, r2
 8014358:	009b      	lsls	r3, r3, #2
 801435a:	440b      	add	r3, r1
 801435c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d104      	bne.n	8014370 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8014366:	6839      	ldr	r1, [r7, #0]
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f000 fb7b 	bl	8014a64 <USBD_CtlError>
                  break;
 801436e:	e041      	b.n	80143f4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014374:	2b00      	cmp	r3, #0
 8014376:	da0b      	bge.n	8014390 <USBD_StdEPReq+0x240>
 8014378:	7bbb      	ldrb	r3, [r7, #14]
 801437a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801437e:	4613      	mov	r3, r2
 8014380:	009b      	lsls	r3, r3, #2
 8014382:	4413      	add	r3, r2
 8014384:	009b      	lsls	r3, r3, #2
 8014386:	3310      	adds	r3, #16
 8014388:	687a      	ldr	r2, [r7, #4]
 801438a:	4413      	add	r3, r2
 801438c:	3304      	adds	r3, #4
 801438e:	e00b      	b.n	80143a8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014390:	7bbb      	ldrb	r3, [r7, #14]
 8014392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014396:	4613      	mov	r3, r2
 8014398:	009b      	lsls	r3, r3, #2
 801439a:	4413      	add	r3, r2
 801439c:	009b      	lsls	r3, r3, #2
 801439e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80143a2:	687a      	ldr	r2, [r7, #4]
 80143a4:	4413      	add	r3, r2
 80143a6:	3304      	adds	r3, #4
 80143a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80143aa:	7bbb      	ldrb	r3, [r7, #14]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d002      	beq.n	80143b6 <USBD_StdEPReq+0x266>
 80143b0:	7bbb      	ldrb	r3, [r7, #14]
 80143b2:	2b80      	cmp	r3, #128	; 0x80
 80143b4:	d103      	bne.n	80143be <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	2200      	movs	r2, #0
 80143ba:	601a      	str	r2, [r3, #0]
 80143bc:	e00e      	b.n	80143dc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80143be:	7bbb      	ldrb	r3, [r7, #14]
 80143c0:	4619      	mov	r1, r3
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f7f1 fe40 	bl	8006048 <USBD_LL_IsStallEP>
 80143c8:	4603      	mov	r3, r0
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d003      	beq.n	80143d6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	2201      	movs	r2, #1
 80143d2:	601a      	str	r2, [r3, #0]
 80143d4:	e002      	b.n	80143dc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	2200      	movs	r2, #0
 80143da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80143dc:	68bb      	ldr	r3, [r7, #8]
 80143de:	2202      	movs	r2, #2
 80143e0:	4619      	mov	r1, r3
 80143e2:	6878      	ldr	r0, [r7, #4]
 80143e4:	f000 fba9 	bl	8014b3a <USBD_CtlSendData>
              break;
 80143e8:	e004      	b.n	80143f4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80143ea:	6839      	ldr	r1, [r7, #0]
 80143ec:	6878      	ldr	r0, [r7, #4]
 80143ee:	f000 fb39 	bl	8014a64 <USBD_CtlError>
              break;
 80143f2:	bf00      	nop
          }
          break;
 80143f4:	e004      	b.n	8014400 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80143f6:	6839      	ldr	r1, [r7, #0]
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f000 fb33 	bl	8014a64 <USBD_CtlError>
          break;
 80143fe:	bf00      	nop
      }
      break;
 8014400:	e004      	b.n	801440c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8014402:	6839      	ldr	r1, [r7, #0]
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f000 fb2d 	bl	8014a64 <USBD_CtlError>
      break;
 801440a:	bf00      	nop
  }

  return ret;
 801440c:	7bfb      	ldrb	r3, [r7, #15]
}
 801440e:	4618      	mov	r0, r3
 8014410:	3710      	adds	r7, #16
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
	...

08014418 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b084      	sub	sp, #16
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
 8014420:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014422:	2300      	movs	r3, #0
 8014424:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014426:	2300      	movs	r3, #0
 8014428:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801442a:	2300      	movs	r3, #0
 801442c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	885b      	ldrh	r3, [r3, #2]
 8014432:	0a1b      	lsrs	r3, r3, #8
 8014434:	b29b      	uxth	r3, r3
 8014436:	3b01      	subs	r3, #1
 8014438:	2b06      	cmp	r3, #6
 801443a:	f200 813b 	bhi.w	80146b4 <USBD_GetDescriptor+0x29c>
 801443e:	a201      	add	r2, pc, #4	; (adr r2, 8014444 <USBD_GetDescriptor+0x2c>)
 8014440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014444:	08014461 	.word	0x08014461
 8014448:	08014479 	.word	0x08014479
 801444c:	080144b9 	.word	0x080144b9
 8014450:	080146b5 	.word	0x080146b5
 8014454:	080146b5 	.word	0x080146b5
 8014458:	08014655 	.word	0x08014655
 801445c:	08014681 	.word	0x08014681
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	7c12      	ldrb	r2, [r2, #16]
 801446c:	f107 0108 	add.w	r1, r7, #8
 8014470:	4610      	mov	r0, r2
 8014472:	4798      	blx	r3
 8014474:	60f8      	str	r0, [r7, #12]
      break;
 8014476:	e125      	b.n	80146c4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	7c1b      	ldrb	r3, [r3, #16]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d10d      	bne.n	801449c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014488:	f107 0208 	add.w	r2, r7, #8
 801448c:	4610      	mov	r0, r2
 801448e:	4798      	blx	r3
 8014490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	3301      	adds	r3, #1
 8014496:	2202      	movs	r2, #2
 8014498:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801449a:	e113      	b.n	80146c4 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80144a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144a4:	f107 0208 	add.w	r2, r7, #8
 80144a8:	4610      	mov	r0, r2
 80144aa:	4798      	blx	r3
 80144ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	3301      	adds	r3, #1
 80144b2:	2202      	movs	r2, #2
 80144b4:	701a      	strb	r2, [r3, #0]
      break;
 80144b6:	e105      	b.n	80146c4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	885b      	ldrh	r3, [r3, #2]
 80144bc:	b2db      	uxtb	r3, r3
 80144be:	2b05      	cmp	r3, #5
 80144c0:	f200 80ac 	bhi.w	801461c <USBD_GetDescriptor+0x204>
 80144c4:	a201      	add	r2, pc, #4	; (adr r2, 80144cc <USBD_GetDescriptor+0xb4>)
 80144c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144ca:	bf00      	nop
 80144cc:	080144e5 	.word	0x080144e5
 80144d0:	08014519 	.word	0x08014519
 80144d4:	0801454d 	.word	0x0801454d
 80144d8:	08014581 	.word	0x08014581
 80144dc:	080145b5 	.word	0x080145b5
 80144e0:	080145e9 	.word	0x080145e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d00b      	beq.n	8014508 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80144f6:	685b      	ldr	r3, [r3, #4]
 80144f8:	687a      	ldr	r2, [r7, #4]
 80144fa:	7c12      	ldrb	r2, [r2, #16]
 80144fc:	f107 0108 	add.w	r1, r7, #8
 8014500:	4610      	mov	r0, r2
 8014502:	4798      	blx	r3
 8014504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014506:	e0a4      	b.n	8014652 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014508:	6839      	ldr	r1, [r7, #0]
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f000 faaa 	bl	8014a64 <USBD_CtlError>
            err++;
 8014510:	7afb      	ldrb	r3, [r7, #11]
 8014512:	3301      	adds	r3, #1
 8014514:	72fb      	strb	r3, [r7, #11]
          break;
 8014516:	e09c      	b.n	8014652 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801451e:	689b      	ldr	r3, [r3, #8]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d00b      	beq.n	801453c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801452a:	689b      	ldr	r3, [r3, #8]
 801452c:	687a      	ldr	r2, [r7, #4]
 801452e:	7c12      	ldrb	r2, [r2, #16]
 8014530:	f107 0108 	add.w	r1, r7, #8
 8014534:	4610      	mov	r0, r2
 8014536:	4798      	blx	r3
 8014538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801453a:	e08a      	b.n	8014652 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 801453c:	6839      	ldr	r1, [r7, #0]
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f000 fa90 	bl	8014a64 <USBD_CtlError>
            err++;
 8014544:	7afb      	ldrb	r3, [r7, #11]
 8014546:	3301      	adds	r3, #1
 8014548:	72fb      	strb	r3, [r7, #11]
          break;
 801454a:	e082      	b.n	8014652 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014552:	68db      	ldr	r3, [r3, #12]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d00b      	beq.n	8014570 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801455e:	68db      	ldr	r3, [r3, #12]
 8014560:	687a      	ldr	r2, [r7, #4]
 8014562:	7c12      	ldrb	r2, [r2, #16]
 8014564:	f107 0108 	add.w	r1, r7, #8
 8014568:	4610      	mov	r0, r2
 801456a:	4798      	blx	r3
 801456c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801456e:	e070      	b.n	8014652 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8014570:	6839      	ldr	r1, [r7, #0]
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f000 fa76 	bl	8014a64 <USBD_CtlError>
            err++;
 8014578:	7afb      	ldrb	r3, [r7, #11]
 801457a:	3301      	adds	r3, #1
 801457c:	72fb      	strb	r3, [r7, #11]
          break;
 801457e:	e068      	b.n	8014652 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014586:	691b      	ldr	r3, [r3, #16]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d00b      	beq.n	80145a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014592:	691b      	ldr	r3, [r3, #16]
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	7c12      	ldrb	r2, [r2, #16]
 8014598:	f107 0108 	add.w	r1, r7, #8
 801459c:	4610      	mov	r0, r2
 801459e:	4798      	blx	r3
 80145a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145a2:	e056      	b.n	8014652 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80145a4:	6839      	ldr	r1, [r7, #0]
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f000 fa5c 	bl	8014a64 <USBD_CtlError>
            err++;
 80145ac:	7afb      	ldrb	r3, [r7, #11]
 80145ae:	3301      	adds	r3, #1
 80145b0:	72fb      	strb	r3, [r7, #11]
          break;
 80145b2:	e04e      	b.n	8014652 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80145ba:	695b      	ldr	r3, [r3, #20]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d00b      	beq.n	80145d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80145c6:	695b      	ldr	r3, [r3, #20]
 80145c8:	687a      	ldr	r2, [r7, #4]
 80145ca:	7c12      	ldrb	r2, [r2, #16]
 80145cc:	f107 0108 	add.w	r1, r7, #8
 80145d0:	4610      	mov	r0, r2
 80145d2:	4798      	blx	r3
 80145d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145d6:	e03c      	b.n	8014652 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80145d8:	6839      	ldr	r1, [r7, #0]
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f000 fa42 	bl	8014a64 <USBD_CtlError>
            err++;
 80145e0:	7afb      	ldrb	r3, [r7, #11]
 80145e2:	3301      	adds	r3, #1
 80145e4:	72fb      	strb	r3, [r7, #11]
          break;
 80145e6:	e034      	b.n	8014652 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80145ee:	699b      	ldr	r3, [r3, #24]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d00b      	beq.n	801460c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80145fa:	699b      	ldr	r3, [r3, #24]
 80145fc:	687a      	ldr	r2, [r7, #4]
 80145fe:	7c12      	ldrb	r2, [r2, #16]
 8014600:	f107 0108 	add.w	r1, r7, #8
 8014604:	4610      	mov	r0, r2
 8014606:	4798      	blx	r3
 8014608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801460a:	e022      	b.n	8014652 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 801460c:	6839      	ldr	r1, [r7, #0]
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f000 fa28 	bl	8014a64 <USBD_CtlError>
            err++;
 8014614:	7afb      	ldrb	r3, [r7, #11]
 8014616:	3301      	adds	r3, #1
 8014618:	72fb      	strb	r3, [r7, #11]
          break;
 801461a:	e01a      	b.n	8014652 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014624:	2b00      	cmp	r3, #0
 8014626:	d00c      	beq.n	8014642 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014630:	683a      	ldr	r2, [r7, #0]
 8014632:	8852      	ldrh	r2, [r2, #2]
 8014634:	b2d1      	uxtb	r1, r2
 8014636:	f107 0208 	add.w	r2, r7, #8
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	4798      	blx	r3
 801463e:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014640:	e006      	b.n	8014650 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8014642:	6839      	ldr	r1, [r7, #0]
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f000 fa0d 	bl	8014a64 <USBD_CtlError>
            err++;
 801464a:	7afb      	ldrb	r3, [r7, #11]
 801464c:	3301      	adds	r3, #1
 801464e:	72fb      	strb	r3, [r7, #11]
          break;
 8014650:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 8014652:	e037      	b.n	80146c4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	7c1b      	ldrb	r3, [r3, #16]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d109      	bne.n	8014670 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014664:	f107 0208 	add.w	r2, r7, #8
 8014668:	4610      	mov	r0, r2
 801466a:	4798      	blx	r3
 801466c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801466e:	e029      	b.n	80146c4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8014670:	6839      	ldr	r1, [r7, #0]
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	f000 f9f6 	bl	8014a64 <USBD_CtlError>
        err++;
 8014678:	7afb      	ldrb	r3, [r7, #11]
 801467a:	3301      	adds	r3, #1
 801467c:	72fb      	strb	r3, [r7, #11]
      break;
 801467e:	e021      	b.n	80146c4 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	7c1b      	ldrb	r3, [r3, #16]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d10d      	bne.n	80146a4 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014690:	f107 0208 	add.w	r2, r7, #8
 8014694:	4610      	mov	r0, r2
 8014696:	4798      	blx	r3
 8014698:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	3301      	adds	r3, #1
 801469e:	2207      	movs	r2, #7
 80146a0:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80146a2:	e00f      	b.n	80146c4 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80146a4:	6839      	ldr	r1, [r7, #0]
 80146a6:	6878      	ldr	r0, [r7, #4]
 80146a8:	f000 f9dc 	bl	8014a64 <USBD_CtlError>
        err++;
 80146ac:	7afb      	ldrb	r3, [r7, #11]
 80146ae:	3301      	adds	r3, #1
 80146b0:	72fb      	strb	r3, [r7, #11]
      break;
 80146b2:	e007      	b.n	80146c4 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80146b4:	6839      	ldr	r1, [r7, #0]
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f000 f9d4 	bl	8014a64 <USBD_CtlError>
      err++;
 80146bc:	7afb      	ldrb	r3, [r7, #11]
 80146be:	3301      	adds	r3, #1
 80146c0:	72fb      	strb	r3, [r7, #11]
      break;
 80146c2:	bf00      	nop
  }

  if (err != 0U)
 80146c4:	7afb      	ldrb	r3, [r7, #11]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d11c      	bne.n	8014704 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80146ca:	893b      	ldrh	r3, [r7, #8]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d011      	beq.n	80146f4 <USBD_GetDescriptor+0x2dc>
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	88db      	ldrh	r3, [r3, #6]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d00d      	beq.n	80146f4 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	88da      	ldrh	r2, [r3, #6]
 80146dc:	893b      	ldrh	r3, [r7, #8]
 80146de:	4293      	cmp	r3, r2
 80146e0:	bf28      	it	cs
 80146e2:	4613      	movcs	r3, r2
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80146e8:	893b      	ldrh	r3, [r7, #8]
 80146ea:	461a      	mov	r2, r3
 80146ec:	68f9      	ldr	r1, [r7, #12]
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f000 fa23 	bl	8014b3a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	88db      	ldrh	r3, [r3, #6]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d104      	bne.n	8014706 <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 80146fc:	6878      	ldr	r0, [r7, #4]
 80146fe:	f000 fa7a 	bl	8014bf6 <USBD_CtlSendStatus>
 8014702:	e000      	b.n	8014706 <USBD_GetDescriptor+0x2ee>
    return;
 8014704:	bf00      	nop
    }
  }
}
 8014706:	3710      	adds	r7, #16
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}

0801470c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b084      	sub	sp, #16
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	889b      	ldrh	r3, [r3, #4]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d130      	bne.n	8014780 <USBD_SetAddress+0x74>
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	88db      	ldrh	r3, [r3, #6]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d12c      	bne.n	8014780 <USBD_SetAddress+0x74>
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	885b      	ldrh	r3, [r3, #2]
 801472a:	2b7f      	cmp	r3, #127	; 0x7f
 801472c:	d828      	bhi.n	8014780 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	885b      	ldrh	r3, [r3, #2]
 8014732:	b2db      	uxtb	r3, r3
 8014734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014738:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014740:	2b03      	cmp	r3, #3
 8014742:	d104      	bne.n	801474e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8014744:	6839      	ldr	r1, [r7, #0]
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f000 f98c 	bl	8014a64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801474c:	e01d      	b.n	801478a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	7bfa      	ldrb	r2, [r7, #15]
 8014752:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014756:	7bfb      	ldrb	r3, [r7, #15]
 8014758:	4619      	mov	r1, r3
 801475a:	6878      	ldr	r0, [r7, #4]
 801475c:	f7f1 fca0 	bl	80060a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f000 fa48 	bl	8014bf6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014766:	7bfb      	ldrb	r3, [r7, #15]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d004      	beq.n	8014776 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	2202      	movs	r2, #2
 8014770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014774:	e009      	b.n	801478a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2201      	movs	r2, #1
 801477a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801477e:	e004      	b.n	801478a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014780:	6839      	ldr	r1, [r7, #0]
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f000 f96e 	bl	8014a64 <USBD_CtlError>
  }
}
 8014788:	bf00      	nop
 801478a:	bf00      	nop
 801478c:	3710      	adds	r7, #16
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}
	...

08014794 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b082      	sub	sp, #8
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	885b      	ldrh	r3, [r3, #2]
 80147a2:	b2da      	uxtb	r2, r3
 80147a4:	4b41      	ldr	r3, [pc, #260]	; (80148ac <USBD_SetConfig+0x118>)
 80147a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80147a8:	4b40      	ldr	r3, [pc, #256]	; (80148ac <USBD_SetConfig+0x118>)
 80147aa:	781b      	ldrb	r3, [r3, #0]
 80147ac:	2b01      	cmp	r3, #1
 80147ae:	d904      	bls.n	80147ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80147b0:	6839      	ldr	r1, [r7, #0]
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f000 f956 	bl	8014a64 <USBD_CtlError>
 80147b8:	e075      	b.n	80148a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147c0:	2b02      	cmp	r3, #2
 80147c2:	d002      	beq.n	80147ca <USBD_SetConfig+0x36>
 80147c4:	2b03      	cmp	r3, #3
 80147c6:	d023      	beq.n	8014810 <USBD_SetConfig+0x7c>
 80147c8:	e062      	b.n	8014890 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80147ca:	4b38      	ldr	r3, [pc, #224]	; (80148ac <USBD_SetConfig+0x118>)
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d01a      	beq.n	8014808 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80147d2:	4b36      	ldr	r3, [pc, #216]	; (80148ac <USBD_SetConfig+0x118>)
 80147d4:	781b      	ldrb	r3, [r3, #0]
 80147d6:	461a      	mov	r2, r3
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2203      	movs	r2, #3
 80147e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80147e4:	4b31      	ldr	r3, [pc, #196]	; (80148ac <USBD_SetConfig+0x118>)
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	4619      	mov	r1, r3
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f7ff f996 	bl	8013b1c <USBD_SetClassConfig>
 80147f0:	4603      	mov	r3, r0
 80147f2:	2b02      	cmp	r3, #2
 80147f4:	d104      	bne.n	8014800 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80147f6:	6839      	ldr	r1, [r7, #0]
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f000 f933 	bl	8014a64 <USBD_CtlError>
            return;
 80147fe:	e052      	b.n	80148a6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f000 f9f8 	bl	8014bf6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014806:	e04e      	b.n	80148a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f000 f9f4 	bl	8014bf6 <USBD_CtlSendStatus>
        break;
 801480e:	e04a      	b.n	80148a6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014810:	4b26      	ldr	r3, [pc, #152]	; (80148ac <USBD_SetConfig+0x118>)
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d112      	bne.n	801483e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2202      	movs	r2, #2
 801481c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8014820:	4b22      	ldr	r3, [pc, #136]	; (80148ac <USBD_SetConfig+0x118>)
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	461a      	mov	r2, r3
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801482a:	4b20      	ldr	r3, [pc, #128]	; (80148ac <USBD_SetConfig+0x118>)
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	4619      	mov	r1, r3
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f7ff f992 	bl	8013b5a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f000 f9dd 	bl	8014bf6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801483c:	e033      	b.n	80148a6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801483e:	4b1b      	ldr	r3, [pc, #108]	; (80148ac <USBD_SetConfig+0x118>)
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	461a      	mov	r2, r3
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	685b      	ldr	r3, [r3, #4]
 8014848:	429a      	cmp	r2, r3
 801484a:	d01d      	beq.n	8014888 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	685b      	ldr	r3, [r3, #4]
 8014850:	b2db      	uxtb	r3, r3
 8014852:	4619      	mov	r1, r3
 8014854:	6878      	ldr	r0, [r7, #4]
 8014856:	f7ff f980 	bl	8013b5a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801485a:	4b14      	ldr	r3, [pc, #80]	; (80148ac <USBD_SetConfig+0x118>)
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	461a      	mov	r2, r3
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014864:	4b11      	ldr	r3, [pc, #68]	; (80148ac <USBD_SetConfig+0x118>)
 8014866:	781b      	ldrb	r3, [r3, #0]
 8014868:	4619      	mov	r1, r3
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f7ff f956 	bl	8013b1c <USBD_SetClassConfig>
 8014870:	4603      	mov	r3, r0
 8014872:	2b02      	cmp	r3, #2
 8014874:	d104      	bne.n	8014880 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8014876:	6839      	ldr	r1, [r7, #0]
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f000 f8f3 	bl	8014a64 <USBD_CtlError>
            return;
 801487e:	e012      	b.n	80148a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f000 f9b8 	bl	8014bf6 <USBD_CtlSendStatus>
        break;
 8014886:	e00e      	b.n	80148a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f000 f9b4 	bl	8014bf6 <USBD_CtlSendStatus>
        break;
 801488e:	e00a      	b.n	80148a6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8014890:	6839      	ldr	r1, [r7, #0]
 8014892:	6878      	ldr	r0, [r7, #4]
 8014894:	f000 f8e6 	bl	8014a64 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8014898:	4b04      	ldr	r3, [pc, #16]	; (80148ac <USBD_SetConfig+0x118>)
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	4619      	mov	r1, r3
 801489e:	6878      	ldr	r0, [r7, #4]
 80148a0:	f7ff f95b 	bl	8013b5a <USBD_ClrClassConfig>
        break;
 80148a4:	bf00      	nop
    }
  }
}
 80148a6:	3708      	adds	r7, #8
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	20000d71 	.word	0x20000d71

080148b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b082      	sub	sp, #8
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	88db      	ldrh	r3, [r3, #6]
 80148be:	2b01      	cmp	r3, #1
 80148c0:	d004      	beq.n	80148cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80148c2:	6839      	ldr	r1, [r7, #0]
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f000 f8cd 	bl	8014a64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80148ca:	e022      	b.n	8014912 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148d2:	2b02      	cmp	r3, #2
 80148d4:	dc02      	bgt.n	80148dc <USBD_GetConfig+0x2c>
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	dc03      	bgt.n	80148e2 <USBD_GetConfig+0x32>
 80148da:	e015      	b.n	8014908 <USBD_GetConfig+0x58>
 80148dc:	2b03      	cmp	r3, #3
 80148de:	d00b      	beq.n	80148f8 <USBD_GetConfig+0x48>
 80148e0:	e012      	b.n	8014908 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	2200      	movs	r2, #0
 80148e6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	3308      	adds	r3, #8
 80148ec:	2201      	movs	r2, #1
 80148ee:	4619      	mov	r1, r3
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f000 f922 	bl	8014b3a <USBD_CtlSendData>
        break;
 80148f6:	e00c      	b.n	8014912 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	3304      	adds	r3, #4
 80148fc:	2201      	movs	r2, #1
 80148fe:	4619      	mov	r1, r3
 8014900:	6878      	ldr	r0, [r7, #4]
 8014902:	f000 f91a 	bl	8014b3a <USBD_CtlSendData>
        break;
 8014906:	e004      	b.n	8014912 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8014908:	6839      	ldr	r1, [r7, #0]
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f000 f8aa 	bl	8014a64 <USBD_CtlError>
        break;
 8014910:	bf00      	nop
}
 8014912:	bf00      	nop
 8014914:	3708      	adds	r7, #8
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}

0801491a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801491a:	b580      	push	{r7, lr}
 801491c:	b082      	sub	sp, #8
 801491e:	af00      	add	r7, sp, #0
 8014920:	6078      	str	r0, [r7, #4]
 8014922:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801492a:	3b01      	subs	r3, #1
 801492c:	2b02      	cmp	r3, #2
 801492e:	d81e      	bhi.n	801496e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014930:	683b      	ldr	r3, [r7, #0]
 8014932:	88db      	ldrh	r3, [r3, #6]
 8014934:	2b02      	cmp	r3, #2
 8014936:	d004      	beq.n	8014942 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8014938:	6839      	ldr	r1, [r7, #0]
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f000 f892 	bl	8014a64 <USBD_CtlError>
        break;
 8014940:	e01a      	b.n	8014978 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2201      	movs	r2, #1
 8014946:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801494e:	2b00      	cmp	r3, #0
 8014950:	d005      	beq.n	801495e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	68db      	ldr	r3, [r3, #12]
 8014956:	f043 0202 	orr.w	r2, r3, #2
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	330c      	adds	r3, #12
 8014962:	2202      	movs	r2, #2
 8014964:	4619      	mov	r1, r3
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f000 f8e7 	bl	8014b3a <USBD_CtlSendData>
      break;
 801496c:	e004      	b.n	8014978 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801496e:	6839      	ldr	r1, [r7, #0]
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	f000 f877 	bl	8014a64 <USBD_CtlError>
      break;
 8014976:	bf00      	nop
  }
}
 8014978:	bf00      	nop
 801497a:	3708      	adds	r7, #8
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}

08014980 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b082      	sub	sp, #8
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	885b      	ldrh	r3, [r3, #2]
 801498e:	2b01      	cmp	r3, #1
 8014990:	d106      	bne.n	80149a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	2201      	movs	r2, #1
 8014996:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f000 f92b 	bl	8014bf6 <USBD_CtlSendStatus>
  }
}
 80149a0:	bf00      	nop
 80149a2:	3708      	adds	r7, #8
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b082      	sub	sp, #8
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149b8:	3b01      	subs	r3, #1
 80149ba:	2b02      	cmp	r3, #2
 80149bc:	d80b      	bhi.n	80149d6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	885b      	ldrh	r3, [r3, #2]
 80149c2:	2b01      	cmp	r3, #1
 80149c4:	d10c      	bne.n	80149e0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2200      	movs	r2, #0
 80149ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f000 f911 	bl	8014bf6 <USBD_CtlSendStatus>
      }
      break;
 80149d4:	e004      	b.n	80149e0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80149d6:	6839      	ldr	r1, [r7, #0]
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f000 f843 	bl	8014a64 <USBD_CtlError>
      break;
 80149de:	e000      	b.n	80149e2 <USBD_ClrFeature+0x3a>
      break;
 80149e0:	bf00      	nop
  }
}
 80149e2:	bf00      	nop
 80149e4:	3708      	adds	r7, #8
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}

080149ea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80149ea:	b480      	push	{r7}
 80149ec:	b083      	sub	sp, #12
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
 80149f2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	781a      	ldrb	r2, [r3, #0]
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	785a      	ldrb	r2, [r3, #1]
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	3302      	adds	r3, #2
 8014a08:	781b      	ldrb	r3, [r3, #0]
 8014a0a:	b29a      	uxth	r2, r3
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	3303      	adds	r3, #3
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	b29b      	uxth	r3, r3
 8014a14:	021b      	lsls	r3, r3, #8
 8014a16:	b29b      	uxth	r3, r3
 8014a18:	4413      	add	r3, r2
 8014a1a:	b29a      	uxth	r2, r3
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	3304      	adds	r3, #4
 8014a24:	781b      	ldrb	r3, [r3, #0]
 8014a26:	b29a      	uxth	r2, r3
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	3305      	adds	r3, #5
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	b29b      	uxth	r3, r3
 8014a30:	021b      	lsls	r3, r3, #8
 8014a32:	b29b      	uxth	r3, r3
 8014a34:	4413      	add	r3, r2
 8014a36:	b29a      	uxth	r2, r3
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	3306      	adds	r3, #6
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	b29a      	uxth	r2, r3
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	3307      	adds	r3, #7
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	021b      	lsls	r3, r3, #8
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	4413      	add	r3, r2
 8014a52:	b29a      	uxth	r2, r3
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	80da      	strh	r2, [r3, #6]

}
 8014a58:	bf00      	nop
 8014a5a:	370c      	adds	r7, #12
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a62:	4770      	bx	lr

08014a64 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
 8014a6c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8014a6e:	2180      	movs	r1, #128	; 0x80
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f7f1 fac3 	bl	8005ffc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8014a76:	2100      	movs	r1, #0
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f7f1 fabf 	bl	8005ffc <USBD_LL_StallEP>
}
 8014a7e:	bf00      	nop
 8014a80:	3708      	adds	r7, #8
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}

08014a86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014a86:	b580      	push	{r7, lr}
 8014a88:	b086      	sub	sp, #24
 8014a8a:	af00      	add	r7, sp, #0
 8014a8c:	60f8      	str	r0, [r7, #12]
 8014a8e:	60b9      	str	r1, [r7, #8]
 8014a90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014a92:	2300      	movs	r3, #0
 8014a94:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d032      	beq.n	8014b02 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8014a9c:	68f8      	ldr	r0, [r7, #12]
 8014a9e:	f000 f834 	bl	8014b0a <USBD_GetLen>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	3301      	adds	r3, #1
 8014aa6:	b29b      	uxth	r3, r3
 8014aa8:	005b      	lsls	r3, r3, #1
 8014aaa:	b29a      	uxth	r2, r3
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8014ab0:	7dfb      	ldrb	r3, [r7, #23]
 8014ab2:	1c5a      	adds	r2, r3, #1
 8014ab4:	75fa      	strb	r2, [r7, #23]
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	4413      	add	r3, r2
 8014abc:	687a      	ldr	r2, [r7, #4]
 8014abe:	7812      	ldrb	r2, [r2, #0]
 8014ac0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8014ac2:	7dfb      	ldrb	r3, [r7, #23]
 8014ac4:	1c5a      	adds	r2, r3, #1
 8014ac6:	75fa      	strb	r2, [r7, #23]
 8014ac8:	461a      	mov	r2, r3
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	4413      	add	r3, r2
 8014ace:	2203      	movs	r2, #3
 8014ad0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8014ad2:	e012      	b.n	8014afa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	1c5a      	adds	r2, r3, #1
 8014ad8:	60fa      	str	r2, [r7, #12]
 8014ada:	7dfa      	ldrb	r2, [r7, #23]
 8014adc:	1c51      	adds	r1, r2, #1
 8014ade:	75f9      	strb	r1, [r7, #23]
 8014ae0:	4611      	mov	r1, r2
 8014ae2:	68ba      	ldr	r2, [r7, #8]
 8014ae4:	440a      	add	r2, r1
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8014aea:	7dfb      	ldrb	r3, [r7, #23]
 8014aec:	1c5a      	adds	r2, r3, #1
 8014aee:	75fa      	strb	r2, [r7, #23]
 8014af0:	461a      	mov	r2, r3
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	4413      	add	r3, r2
 8014af6:	2200      	movs	r2, #0
 8014af8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	781b      	ldrb	r3, [r3, #0]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d1e8      	bne.n	8014ad4 <USBD_GetString+0x4e>
    }
  }
}
 8014b02:	bf00      	nop
 8014b04:	3718      	adds	r7, #24
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}

08014b0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014b0a:	b480      	push	{r7}
 8014b0c:	b085      	sub	sp, #20
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014b12:	2300      	movs	r3, #0
 8014b14:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8014b16:	e005      	b.n	8014b24 <USBD_GetLen+0x1a>
  {
    len++;
 8014b18:	7bfb      	ldrb	r3, [r7, #15]
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	3301      	adds	r3, #1
 8014b22:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	781b      	ldrb	r3, [r3, #0]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d1f5      	bne.n	8014b18 <USBD_GetLen+0xe>
  }

  return len;
 8014b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3714      	adds	r7, #20
 8014b32:	46bd      	mov	sp, r7
 8014b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b38:	4770      	bx	lr

08014b3a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8014b3a:	b580      	push	{r7, lr}
 8014b3c:	b084      	sub	sp, #16
 8014b3e:	af00      	add	r7, sp, #0
 8014b40:	60f8      	str	r0, [r7, #12]
 8014b42:	60b9      	str	r1, [r7, #8]
 8014b44:	4613      	mov	r3, r2
 8014b46:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	2202      	movs	r2, #2
 8014b4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014b50:	88fa      	ldrh	r2, [r7, #6]
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8014b56:	88fa      	ldrh	r2, [r7, #6]
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014b5c:	88fb      	ldrh	r3, [r7, #6]
 8014b5e:	68ba      	ldr	r2, [r7, #8]
 8014b60:	2100      	movs	r1, #0
 8014b62:	68f8      	ldr	r0, [r7, #12]
 8014b64:	f7f1 faaf 	bl	80060c6 <USBD_LL_Transmit>

  return USBD_OK;
 8014b68:	2300      	movs	r3, #0
}
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	3710      	adds	r7, #16
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}

08014b72 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8014b72:	b580      	push	{r7, lr}
 8014b74:	b084      	sub	sp, #16
 8014b76:	af00      	add	r7, sp, #0
 8014b78:	60f8      	str	r0, [r7, #12]
 8014b7a:	60b9      	str	r1, [r7, #8]
 8014b7c:	4613      	mov	r3, r2
 8014b7e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014b80:	88fb      	ldrh	r3, [r7, #6]
 8014b82:	68ba      	ldr	r2, [r7, #8]
 8014b84:	2100      	movs	r1, #0
 8014b86:	68f8      	ldr	r0, [r7, #12]
 8014b88:	f7f1 fa9d 	bl	80060c6 <USBD_LL_Transmit>

  return USBD_OK;
 8014b8c:	2300      	movs	r3, #0
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3710      	adds	r7, #16
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}

08014b96 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8014b96:	b580      	push	{r7, lr}
 8014b98:	b084      	sub	sp, #16
 8014b9a:	af00      	add	r7, sp, #0
 8014b9c:	60f8      	str	r0, [r7, #12]
 8014b9e:	60b9      	str	r1, [r7, #8]
 8014ba0:	4613      	mov	r3, r2
 8014ba2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	2203      	movs	r2, #3
 8014ba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014bac:	88fa      	ldrh	r2, [r7, #6]
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8014bb4:	88fa      	ldrh	r2, [r7, #6]
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014bbc:	88fb      	ldrh	r3, [r7, #6]
 8014bbe:	68ba      	ldr	r2, [r7, #8]
 8014bc0:	2100      	movs	r1, #0
 8014bc2:	68f8      	ldr	r0, [r7, #12]
 8014bc4:	f7f1 fa96 	bl	80060f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014bc8:	2300      	movs	r3, #0
}
 8014bca:	4618      	mov	r0, r3
 8014bcc:	3710      	adds	r7, #16
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}

08014bd2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8014bd2:	b580      	push	{r7, lr}
 8014bd4:	b084      	sub	sp, #16
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	60f8      	str	r0, [r7, #12]
 8014bda:	60b9      	str	r1, [r7, #8]
 8014bdc:	4613      	mov	r3, r2
 8014bde:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014be0:	88fb      	ldrh	r3, [r7, #6]
 8014be2:	68ba      	ldr	r2, [r7, #8]
 8014be4:	2100      	movs	r1, #0
 8014be6:	68f8      	ldr	r0, [r7, #12]
 8014be8:	f7f1 fa84 	bl	80060f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014bec:	2300      	movs	r3, #0
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3710      	adds	r7, #16
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}

08014bf6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014bf6:	b580      	push	{r7, lr}
 8014bf8:	b082      	sub	sp, #8
 8014bfa:	af00      	add	r7, sp, #0
 8014bfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2204      	movs	r2, #4
 8014c02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014c06:	2300      	movs	r3, #0
 8014c08:	2200      	movs	r2, #0
 8014c0a:	2100      	movs	r1, #0
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f7f1 fa5a 	bl	80060c6 <USBD_LL_Transmit>

  return USBD_OK;
 8014c12:	2300      	movs	r3, #0
}
 8014c14:	4618      	mov	r0, r3
 8014c16:	3708      	adds	r7, #8
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}

08014c1c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b082      	sub	sp, #8
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2205      	movs	r2, #5
 8014c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	2200      	movs	r2, #0
 8014c30:	2100      	movs	r1, #0
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f7f1 fa5e 	bl	80060f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014c38:	2300      	movs	r3, #0
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3708      	adds	r7, #8
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}
	...

08014c44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014c4e:	79fb      	ldrb	r3, [r7, #7]
 8014c50:	4a08      	ldr	r2, [pc, #32]	; (8014c74 <disk_status+0x30>)
 8014c52:	009b      	lsls	r3, r3, #2
 8014c54:	4413      	add	r3, r2
 8014c56:	685b      	ldr	r3, [r3, #4]
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	79fa      	ldrb	r2, [r7, #7]
 8014c5c:	4905      	ldr	r1, [pc, #20]	; (8014c74 <disk_status+0x30>)
 8014c5e:	440a      	add	r2, r1
 8014c60:	7a12      	ldrb	r2, [r2, #8]
 8014c62:	4610      	mov	r0, r2
 8014c64:	4798      	blx	r3
 8014c66:	4603      	mov	r3, r0
 8014c68:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	3710      	adds	r7, #16
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}
 8014c74:	200010bc 	.word	0x200010bc

08014c78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	4603      	mov	r3, r0
 8014c80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8014c82:	2300      	movs	r3, #0
 8014c84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014c86:	79fb      	ldrb	r3, [r7, #7]
 8014c88:	4a0d      	ldr	r2, [pc, #52]	; (8014cc0 <disk_initialize+0x48>)
 8014c8a:	5cd3      	ldrb	r3, [r2, r3]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d111      	bne.n	8014cb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014c90:	79fb      	ldrb	r3, [r7, #7]
 8014c92:	4a0b      	ldr	r2, [pc, #44]	; (8014cc0 <disk_initialize+0x48>)
 8014c94:	2101      	movs	r1, #1
 8014c96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014c98:	79fb      	ldrb	r3, [r7, #7]
 8014c9a:	4a09      	ldr	r2, [pc, #36]	; (8014cc0 <disk_initialize+0x48>)
 8014c9c:	009b      	lsls	r3, r3, #2
 8014c9e:	4413      	add	r3, r2
 8014ca0:	685b      	ldr	r3, [r3, #4]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	79fa      	ldrb	r2, [r7, #7]
 8014ca6:	4906      	ldr	r1, [pc, #24]	; (8014cc0 <disk_initialize+0x48>)
 8014ca8:	440a      	add	r2, r1
 8014caa:	7a12      	ldrb	r2, [r2, #8]
 8014cac:	4610      	mov	r0, r2
 8014cae:	4798      	blx	r3
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	3710      	adds	r7, #16
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}
 8014cbe:	bf00      	nop
 8014cc0:	200010bc 	.word	0x200010bc

08014cc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014cc4:	b590      	push	{r4, r7, lr}
 8014cc6:	b087      	sub	sp, #28
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	60b9      	str	r1, [r7, #8]
 8014ccc:	607a      	str	r2, [r7, #4]
 8014cce:	603b      	str	r3, [r7, #0]
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014cd4:	7bfb      	ldrb	r3, [r7, #15]
 8014cd6:	4a0a      	ldr	r2, [pc, #40]	; (8014d00 <disk_read+0x3c>)
 8014cd8:	009b      	lsls	r3, r3, #2
 8014cda:	4413      	add	r3, r2
 8014cdc:	685b      	ldr	r3, [r3, #4]
 8014cde:	689c      	ldr	r4, [r3, #8]
 8014ce0:	7bfb      	ldrb	r3, [r7, #15]
 8014ce2:	4a07      	ldr	r2, [pc, #28]	; (8014d00 <disk_read+0x3c>)
 8014ce4:	4413      	add	r3, r2
 8014ce6:	7a18      	ldrb	r0, [r3, #8]
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	687a      	ldr	r2, [r7, #4]
 8014cec:	68b9      	ldr	r1, [r7, #8]
 8014cee:	47a0      	blx	r4
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	75fb      	strb	r3, [r7, #23]
  return res;
 8014cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	371c      	adds	r7, #28
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd90      	pop	{r4, r7, pc}
 8014cfe:	bf00      	nop
 8014d00:	200010bc 	.word	0x200010bc

08014d04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8014d04:	b590      	push	{r4, r7, lr}
 8014d06:	b087      	sub	sp, #28
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	60b9      	str	r1, [r7, #8]
 8014d0c:	607a      	str	r2, [r7, #4]
 8014d0e:	603b      	str	r3, [r7, #0]
 8014d10:	4603      	mov	r3, r0
 8014d12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8014d14:	7bfb      	ldrb	r3, [r7, #15]
 8014d16:	4a0a      	ldr	r2, [pc, #40]	; (8014d40 <disk_write+0x3c>)
 8014d18:	009b      	lsls	r3, r3, #2
 8014d1a:	4413      	add	r3, r2
 8014d1c:	685b      	ldr	r3, [r3, #4]
 8014d1e:	68dc      	ldr	r4, [r3, #12]
 8014d20:	7bfb      	ldrb	r3, [r7, #15]
 8014d22:	4a07      	ldr	r2, [pc, #28]	; (8014d40 <disk_write+0x3c>)
 8014d24:	4413      	add	r3, r2
 8014d26:	7a18      	ldrb	r0, [r3, #8]
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	68b9      	ldr	r1, [r7, #8]
 8014d2e:	47a0      	blx	r4
 8014d30:	4603      	mov	r3, r0
 8014d32:	75fb      	strb	r3, [r7, #23]
  return res;
 8014d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	371c      	adds	r7, #28
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd90      	pop	{r4, r7, pc}
 8014d3e:	bf00      	nop
 8014d40:	200010bc 	.word	0x200010bc

08014d44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b084      	sub	sp, #16
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	603a      	str	r2, [r7, #0]
 8014d4e:	71fb      	strb	r3, [r7, #7]
 8014d50:	460b      	mov	r3, r1
 8014d52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8014d54:	79fb      	ldrb	r3, [r7, #7]
 8014d56:	4a09      	ldr	r2, [pc, #36]	; (8014d7c <disk_ioctl+0x38>)
 8014d58:	009b      	lsls	r3, r3, #2
 8014d5a:	4413      	add	r3, r2
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	691b      	ldr	r3, [r3, #16]
 8014d60:	79fa      	ldrb	r2, [r7, #7]
 8014d62:	4906      	ldr	r1, [pc, #24]	; (8014d7c <disk_ioctl+0x38>)
 8014d64:	440a      	add	r2, r1
 8014d66:	7a10      	ldrb	r0, [r2, #8]
 8014d68:	79b9      	ldrb	r1, [r7, #6]
 8014d6a:	683a      	ldr	r2, [r7, #0]
 8014d6c:	4798      	blx	r3
 8014d6e:	4603      	mov	r3, r0
 8014d70:	73fb      	strb	r3, [r7, #15]
  return res;
 8014d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d74:	4618      	mov	r0, r3
 8014d76:	3710      	adds	r7, #16
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}
 8014d7c:	200010bc 	.word	0x200010bc

08014d80 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8014d80:	b480      	push	{r7}
 8014d82:	af00      	add	r7, sp, #0
  return 0;
 8014d84:	2300      	movs	r3, #0
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8e:	4770      	bx	lr

08014d90 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014d90:	b480      	push	{r7}
 8014d92:	b085      	sub	sp, #20
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014da0:	89fb      	ldrh	r3, [r7, #14]
 8014da2:	021b      	lsls	r3, r3, #8
 8014da4:	b21a      	sxth	r2, r3
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	781b      	ldrb	r3, [r3, #0]
 8014daa:	b21b      	sxth	r3, r3
 8014dac:	4313      	orrs	r3, r2
 8014dae:	b21b      	sxth	r3, r3
 8014db0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8014db2:	89fb      	ldrh	r3, [r7, #14]
}
 8014db4:	4618      	mov	r0, r3
 8014db6:	3714      	adds	r7, #20
 8014db8:	46bd      	mov	sp, r7
 8014dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbe:	4770      	bx	lr

08014dc0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014dc0:	b480      	push	{r7}
 8014dc2:	b085      	sub	sp, #20
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	3303      	adds	r3, #3
 8014dcc:	781b      	ldrb	r3, [r3, #0]
 8014dce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	021b      	lsls	r3, r3, #8
 8014dd4:	687a      	ldr	r2, [r7, #4]
 8014dd6:	3202      	adds	r2, #2
 8014dd8:	7812      	ldrb	r2, [r2, #0]
 8014dda:	4313      	orrs	r3, r2
 8014ddc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	021b      	lsls	r3, r3, #8
 8014de2:	687a      	ldr	r2, [r7, #4]
 8014de4:	3201      	adds	r2, #1
 8014de6:	7812      	ldrb	r2, [r2, #0]
 8014de8:	4313      	orrs	r3, r2
 8014dea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	021b      	lsls	r3, r3, #8
 8014df0:	687a      	ldr	r2, [r7, #4]
 8014df2:	7812      	ldrb	r2, [r2, #0]
 8014df4:	4313      	orrs	r3, r2
 8014df6:	60fb      	str	r3, [r7, #12]
	return rv;
 8014df8:	68fb      	ldr	r3, [r7, #12]
}
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	3714      	adds	r7, #20
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e04:	4770      	bx	lr

08014e06 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014e06:	b480      	push	{r7}
 8014e08:	b083      	sub	sp, #12
 8014e0a:	af00      	add	r7, sp, #0
 8014e0c:	6078      	str	r0, [r7, #4]
 8014e0e:	460b      	mov	r3, r1
 8014e10:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	1c5a      	adds	r2, r3, #1
 8014e16:	607a      	str	r2, [r7, #4]
 8014e18:	887a      	ldrh	r2, [r7, #2]
 8014e1a:	b2d2      	uxtb	r2, r2
 8014e1c:	701a      	strb	r2, [r3, #0]
 8014e1e:	887b      	ldrh	r3, [r7, #2]
 8014e20:	0a1b      	lsrs	r3, r3, #8
 8014e22:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	1c5a      	adds	r2, r3, #1
 8014e28:	607a      	str	r2, [r7, #4]
 8014e2a:	887a      	ldrh	r2, [r7, #2]
 8014e2c:	b2d2      	uxtb	r2, r2
 8014e2e:	701a      	strb	r2, [r3, #0]
}
 8014e30:	bf00      	nop
 8014e32:	370c      	adds	r7, #12
 8014e34:	46bd      	mov	sp, r7
 8014e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3a:	4770      	bx	lr

08014e3c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014e3c:	b480      	push	{r7}
 8014e3e:	b083      	sub	sp, #12
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
 8014e44:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	1c5a      	adds	r2, r3, #1
 8014e4a:	607a      	str	r2, [r7, #4]
 8014e4c:	683a      	ldr	r2, [r7, #0]
 8014e4e:	b2d2      	uxtb	r2, r2
 8014e50:	701a      	strb	r2, [r3, #0]
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	0a1b      	lsrs	r3, r3, #8
 8014e56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	1c5a      	adds	r2, r3, #1
 8014e5c:	607a      	str	r2, [r7, #4]
 8014e5e:	683a      	ldr	r2, [r7, #0]
 8014e60:	b2d2      	uxtb	r2, r2
 8014e62:	701a      	strb	r2, [r3, #0]
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	0a1b      	lsrs	r3, r3, #8
 8014e68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	1c5a      	adds	r2, r3, #1
 8014e6e:	607a      	str	r2, [r7, #4]
 8014e70:	683a      	ldr	r2, [r7, #0]
 8014e72:	b2d2      	uxtb	r2, r2
 8014e74:	701a      	strb	r2, [r3, #0]
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	0a1b      	lsrs	r3, r3, #8
 8014e7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	1c5a      	adds	r2, r3, #1
 8014e80:	607a      	str	r2, [r7, #4]
 8014e82:	683a      	ldr	r2, [r7, #0]
 8014e84:	b2d2      	uxtb	r2, r2
 8014e86:	701a      	strb	r2, [r3, #0]
}
 8014e88:	bf00      	nop
 8014e8a:	370c      	adds	r7, #12
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e92:	4770      	bx	lr

08014e94 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014e94:	b480      	push	{r7}
 8014e96:	b087      	sub	sp, #28
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	60f8      	str	r0, [r7, #12]
 8014e9c:	60b9      	str	r1, [r7, #8]
 8014e9e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d00d      	beq.n	8014eca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014eae:	693a      	ldr	r2, [r7, #16]
 8014eb0:	1c53      	adds	r3, r2, #1
 8014eb2:	613b      	str	r3, [r7, #16]
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	1c59      	adds	r1, r3, #1
 8014eb8:	6179      	str	r1, [r7, #20]
 8014eba:	7812      	ldrb	r2, [r2, #0]
 8014ebc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	3b01      	subs	r3, #1
 8014ec2:	607b      	str	r3, [r7, #4]
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d1f1      	bne.n	8014eae <mem_cpy+0x1a>
	}
}
 8014eca:	bf00      	nop
 8014ecc:	371c      	adds	r7, #28
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed4:	4770      	bx	lr

08014ed6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014ed6:	b480      	push	{r7}
 8014ed8:	b087      	sub	sp, #28
 8014eda:	af00      	add	r7, sp, #0
 8014edc:	60f8      	str	r0, [r7, #12]
 8014ede:	60b9      	str	r1, [r7, #8]
 8014ee0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	1c5a      	adds	r2, r3, #1
 8014eea:	617a      	str	r2, [r7, #20]
 8014eec:	68ba      	ldr	r2, [r7, #8]
 8014eee:	b2d2      	uxtb	r2, r2
 8014ef0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	3b01      	subs	r3, #1
 8014ef6:	607b      	str	r3, [r7, #4]
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d1f3      	bne.n	8014ee6 <mem_set+0x10>
}
 8014efe:	bf00      	nop
 8014f00:	bf00      	nop
 8014f02:	371c      	adds	r7, #28
 8014f04:	46bd      	mov	sp, r7
 8014f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0a:	4770      	bx	lr

08014f0c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014f0c:	b480      	push	{r7}
 8014f0e:	b089      	sub	sp, #36	; 0x24
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	60f8      	str	r0, [r7, #12]
 8014f14:	60b9      	str	r1, [r7, #8]
 8014f16:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	61fb      	str	r3, [r7, #28]
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014f20:	2300      	movs	r3, #0
 8014f22:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014f24:	69fb      	ldr	r3, [r7, #28]
 8014f26:	1c5a      	adds	r2, r3, #1
 8014f28:	61fa      	str	r2, [r7, #28]
 8014f2a:	781b      	ldrb	r3, [r3, #0]
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	69bb      	ldr	r3, [r7, #24]
 8014f30:	1c5a      	adds	r2, r3, #1
 8014f32:	61ba      	str	r2, [r7, #24]
 8014f34:	781b      	ldrb	r3, [r3, #0]
 8014f36:	1acb      	subs	r3, r1, r3
 8014f38:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	3b01      	subs	r3, #1
 8014f3e:	607b      	str	r3, [r7, #4]
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d002      	beq.n	8014f4c <mem_cmp+0x40>
 8014f46:	697b      	ldr	r3, [r7, #20]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d0eb      	beq.n	8014f24 <mem_cmp+0x18>

	return r;
 8014f4c:	697b      	ldr	r3, [r7, #20]
}
 8014f4e:	4618      	mov	r0, r3
 8014f50:	3724      	adds	r7, #36	; 0x24
 8014f52:	46bd      	mov	sp, r7
 8014f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f58:	4770      	bx	lr

08014f5a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014f5a:	b480      	push	{r7}
 8014f5c:	b083      	sub	sp, #12
 8014f5e:	af00      	add	r7, sp, #0
 8014f60:	6078      	str	r0, [r7, #4]
 8014f62:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014f64:	e002      	b.n	8014f6c <chk_chr+0x12>
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	3301      	adds	r3, #1
 8014f6a:	607b      	str	r3, [r7, #4]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	781b      	ldrb	r3, [r3, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d005      	beq.n	8014f80 <chk_chr+0x26>
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	781b      	ldrb	r3, [r3, #0]
 8014f78:	461a      	mov	r2, r3
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	4293      	cmp	r3, r2
 8014f7e:	d1f2      	bne.n	8014f66 <chk_chr+0xc>
	return *str;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	781b      	ldrb	r3, [r3, #0]
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	370c      	adds	r7, #12
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8e:	4770      	bx	lr

08014f90 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014f90:	b480      	push	{r7}
 8014f92:	b085      	sub	sp, #20
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
 8014f98:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	60bb      	str	r3, [r7, #8]
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	60fb      	str	r3, [r7, #12]
 8014fa2:	e029      	b.n	8014ff8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014fa4:	4a27      	ldr	r2, [pc, #156]	; (8015044 <chk_lock+0xb4>)
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	011b      	lsls	r3, r3, #4
 8014faa:	4413      	add	r3, r2
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d01d      	beq.n	8014fee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014fb2:	4a24      	ldr	r2, [pc, #144]	; (8015044 <chk_lock+0xb4>)
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	011b      	lsls	r3, r3, #4
 8014fb8:	4413      	add	r3, r2
 8014fba:	681a      	ldr	r2, [r3, #0]
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	d116      	bne.n	8014ff2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8014fc4:	4a1f      	ldr	r2, [pc, #124]	; (8015044 <chk_lock+0xb4>)
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	011b      	lsls	r3, r3, #4
 8014fca:	4413      	add	r3, r2
 8014fcc:	3304      	adds	r3, #4
 8014fce:	681a      	ldr	r2, [r3, #0]
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d10c      	bne.n	8014ff2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014fd8:	4a1a      	ldr	r2, [pc, #104]	; (8015044 <chk_lock+0xb4>)
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	011b      	lsls	r3, r3, #4
 8014fde:	4413      	add	r3, r2
 8014fe0:	3308      	adds	r3, #8
 8014fe2:	681a      	ldr	r2, [r3, #0]
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8014fe8:	429a      	cmp	r2, r3
 8014fea:	d102      	bne.n	8014ff2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8014fec:	e007      	b.n	8014ffe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8014fee:	2301      	movs	r3, #1
 8014ff0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	3301      	adds	r3, #1
 8014ff6:	60fb      	str	r3, [r7, #12]
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	2b13      	cmp	r3, #19
 8014ffc:	d9d2      	bls.n	8014fa4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	2b14      	cmp	r3, #20
 8015002:	d109      	bne.n	8015018 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015004:	68bb      	ldr	r3, [r7, #8]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d102      	bne.n	8015010 <chk_lock+0x80>
 801500a:	683b      	ldr	r3, [r7, #0]
 801500c:	2b02      	cmp	r3, #2
 801500e:	d101      	bne.n	8015014 <chk_lock+0x84>
 8015010:	2300      	movs	r3, #0
 8015012:	e010      	b.n	8015036 <chk_lock+0xa6>
 8015014:	2312      	movs	r3, #18
 8015016:	e00e      	b.n	8015036 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d108      	bne.n	8015030 <chk_lock+0xa0>
 801501e:	4a09      	ldr	r2, [pc, #36]	; (8015044 <chk_lock+0xb4>)
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	011b      	lsls	r3, r3, #4
 8015024:	4413      	add	r3, r2
 8015026:	330c      	adds	r3, #12
 8015028:	881b      	ldrh	r3, [r3, #0]
 801502a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801502e:	d101      	bne.n	8015034 <chk_lock+0xa4>
 8015030:	2310      	movs	r3, #16
 8015032:	e000      	b.n	8015036 <chk_lock+0xa6>
 8015034:	2300      	movs	r3, #0
}
 8015036:	4618      	mov	r0, r3
 8015038:	3714      	adds	r7, #20
 801503a:	46bd      	mov	sp, r7
 801503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015040:	4770      	bx	lr
 8015042:	bf00      	nop
 8015044:	20000d7c 	.word	0x20000d7c

08015048 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8015048:	b480      	push	{r7}
 801504a:	b083      	sub	sp, #12
 801504c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801504e:	2300      	movs	r3, #0
 8015050:	607b      	str	r3, [r7, #4]
 8015052:	e002      	b.n	801505a <enq_lock+0x12>
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	3301      	adds	r3, #1
 8015058:	607b      	str	r3, [r7, #4]
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	2b13      	cmp	r3, #19
 801505e:	d806      	bhi.n	801506e <enq_lock+0x26>
 8015060:	4a09      	ldr	r2, [pc, #36]	; (8015088 <enq_lock+0x40>)
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	011b      	lsls	r3, r3, #4
 8015066:	4413      	add	r3, r2
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d1f2      	bne.n	8015054 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	2b14      	cmp	r3, #20
 8015072:	bf14      	ite	ne
 8015074:	2301      	movne	r3, #1
 8015076:	2300      	moveq	r3, #0
 8015078:	b2db      	uxtb	r3, r3
}
 801507a:	4618      	mov	r0, r3
 801507c:	370c      	adds	r7, #12
 801507e:	46bd      	mov	sp, r7
 8015080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015084:	4770      	bx	lr
 8015086:	bf00      	nop
 8015088:	20000d7c 	.word	0x20000d7c

0801508c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801508c:	b480      	push	{r7}
 801508e:	b085      	sub	sp, #20
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8015096:	2300      	movs	r3, #0
 8015098:	60fb      	str	r3, [r7, #12]
 801509a:	e01f      	b.n	80150dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801509c:	4a41      	ldr	r2, [pc, #260]	; (80151a4 <inc_lock+0x118>)
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	011b      	lsls	r3, r3, #4
 80150a2:	4413      	add	r3, r2
 80150a4:	681a      	ldr	r2, [r3, #0]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	429a      	cmp	r2, r3
 80150ac:	d113      	bne.n	80150d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80150ae:	4a3d      	ldr	r2, [pc, #244]	; (80151a4 <inc_lock+0x118>)
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	011b      	lsls	r3, r3, #4
 80150b4:	4413      	add	r3, r2
 80150b6:	3304      	adds	r3, #4
 80150b8:	681a      	ldr	r2, [r3, #0]
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80150be:	429a      	cmp	r2, r3
 80150c0:	d109      	bne.n	80150d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80150c2:	4a38      	ldr	r2, [pc, #224]	; (80151a4 <inc_lock+0x118>)
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	011b      	lsls	r3, r3, #4
 80150c8:	4413      	add	r3, r2
 80150ca:	3308      	adds	r3, #8
 80150cc:	681a      	ldr	r2, [r3, #0]
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80150d2:	429a      	cmp	r2, r3
 80150d4:	d006      	beq.n	80150e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	3301      	adds	r3, #1
 80150da:	60fb      	str	r3, [r7, #12]
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	2b13      	cmp	r3, #19
 80150e0:	d9dc      	bls.n	801509c <inc_lock+0x10>
 80150e2:	e000      	b.n	80150e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80150e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	2b14      	cmp	r3, #20
 80150ea:	d132      	bne.n	8015152 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80150ec:	2300      	movs	r3, #0
 80150ee:	60fb      	str	r3, [r7, #12]
 80150f0:	e002      	b.n	80150f8 <inc_lock+0x6c>
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	3301      	adds	r3, #1
 80150f6:	60fb      	str	r3, [r7, #12]
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	2b13      	cmp	r3, #19
 80150fc:	d806      	bhi.n	801510c <inc_lock+0x80>
 80150fe:	4a29      	ldr	r2, [pc, #164]	; (80151a4 <inc_lock+0x118>)
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	011b      	lsls	r3, r3, #4
 8015104:	4413      	add	r3, r2
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d1f2      	bne.n	80150f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	2b14      	cmp	r3, #20
 8015110:	d101      	bne.n	8015116 <inc_lock+0x8a>
 8015112:	2300      	movs	r3, #0
 8015114:	e040      	b.n	8015198 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	681a      	ldr	r2, [r3, #0]
 801511a:	4922      	ldr	r1, [pc, #136]	; (80151a4 <inc_lock+0x118>)
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	011b      	lsls	r3, r3, #4
 8015120:	440b      	add	r3, r1
 8015122:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	689a      	ldr	r2, [r3, #8]
 8015128:	491e      	ldr	r1, [pc, #120]	; (80151a4 <inc_lock+0x118>)
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	011b      	lsls	r3, r3, #4
 801512e:	440b      	add	r3, r1
 8015130:	3304      	adds	r3, #4
 8015132:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	695a      	ldr	r2, [r3, #20]
 8015138:	491a      	ldr	r1, [pc, #104]	; (80151a4 <inc_lock+0x118>)
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	011b      	lsls	r3, r3, #4
 801513e:	440b      	add	r3, r1
 8015140:	3308      	adds	r3, #8
 8015142:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015144:	4a17      	ldr	r2, [pc, #92]	; (80151a4 <inc_lock+0x118>)
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	011b      	lsls	r3, r3, #4
 801514a:	4413      	add	r3, r2
 801514c:	330c      	adds	r3, #12
 801514e:	2200      	movs	r2, #0
 8015150:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d009      	beq.n	801516c <inc_lock+0xe0>
 8015158:	4a12      	ldr	r2, [pc, #72]	; (80151a4 <inc_lock+0x118>)
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	011b      	lsls	r3, r3, #4
 801515e:	4413      	add	r3, r2
 8015160:	330c      	adds	r3, #12
 8015162:	881b      	ldrh	r3, [r3, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d001      	beq.n	801516c <inc_lock+0xe0>
 8015168:	2300      	movs	r3, #0
 801516a:	e015      	b.n	8015198 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d108      	bne.n	8015184 <inc_lock+0xf8>
 8015172:	4a0c      	ldr	r2, [pc, #48]	; (80151a4 <inc_lock+0x118>)
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	011b      	lsls	r3, r3, #4
 8015178:	4413      	add	r3, r2
 801517a:	330c      	adds	r3, #12
 801517c:	881b      	ldrh	r3, [r3, #0]
 801517e:	3301      	adds	r3, #1
 8015180:	b29a      	uxth	r2, r3
 8015182:	e001      	b.n	8015188 <inc_lock+0xfc>
 8015184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015188:	4906      	ldr	r1, [pc, #24]	; (80151a4 <inc_lock+0x118>)
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	011b      	lsls	r3, r3, #4
 801518e:	440b      	add	r3, r1
 8015190:	330c      	adds	r3, #12
 8015192:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	3301      	adds	r3, #1
}
 8015198:	4618      	mov	r0, r3
 801519a:	3714      	adds	r7, #20
 801519c:	46bd      	mov	sp, r7
 801519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a2:	4770      	bx	lr
 80151a4:	20000d7c 	.word	0x20000d7c

080151a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80151a8:	b480      	push	{r7}
 80151aa:	b085      	sub	sp, #20
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	3b01      	subs	r3, #1
 80151b4:	607b      	str	r3, [r7, #4]
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2b13      	cmp	r3, #19
 80151ba:	d825      	bhi.n	8015208 <dec_lock+0x60>
		n = Files[i].ctr;
 80151bc:	4a17      	ldr	r2, [pc, #92]	; (801521c <dec_lock+0x74>)
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	011b      	lsls	r3, r3, #4
 80151c2:	4413      	add	r3, r2
 80151c4:	330c      	adds	r3, #12
 80151c6:	881b      	ldrh	r3, [r3, #0]
 80151c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80151ca:	89fb      	ldrh	r3, [r7, #14]
 80151cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80151d0:	d101      	bne.n	80151d6 <dec_lock+0x2e>
 80151d2:	2300      	movs	r3, #0
 80151d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80151d6:	89fb      	ldrh	r3, [r7, #14]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d002      	beq.n	80151e2 <dec_lock+0x3a>
 80151dc:	89fb      	ldrh	r3, [r7, #14]
 80151de:	3b01      	subs	r3, #1
 80151e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80151e2:	4a0e      	ldr	r2, [pc, #56]	; (801521c <dec_lock+0x74>)
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	011b      	lsls	r3, r3, #4
 80151e8:	4413      	add	r3, r2
 80151ea:	330c      	adds	r3, #12
 80151ec:	89fa      	ldrh	r2, [r7, #14]
 80151ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80151f0:	89fb      	ldrh	r3, [r7, #14]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d105      	bne.n	8015202 <dec_lock+0x5a>
 80151f6:	4a09      	ldr	r2, [pc, #36]	; (801521c <dec_lock+0x74>)
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	011b      	lsls	r3, r3, #4
 80151fc:	4413      	add	r3, r2
 80151fe:	2200      	movs	r2, #0
 8015200:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015202:	2300      	movs	r3, #0
 8015204:	737b      	strb	r3, [r7, #13]
 8015206:	e001      	b.n	801520c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015208:	2302      	movs	r3, #2
 801520a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801520c:	7b7b      	ldrb	r3, [r7, #13]
}
 801520e:	4618      	mov	r0, r3
 8015210:	3714      	adds	r7, #20
 8015212:	46bd      	mov	sp, r7
 8015214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015218:	4770      	bx	lr
 801521a:	bf00      	nop
 801521c:	20000d7c 	.word	0x20000d7c

08015220 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015220:	b480      	push	{r7}
 8015222:	b085      	sub	sp, #20
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015228:	2300      	movs	r3, #0
 801522a:	60fb      	str	r3, [r7, #12]
 801522c:	e010      	b.n	8015250 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801522e:	4a0d      	ldr	r2, [pc, #52]	; (8015264 <clear_lock+0x44>)
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	011b      	lsls	r3, r3, #4
 8015234:	4413      	add	r3, r2
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	687a      	ldr	r2, [r7, #4]
 801523a:	429a      	cmp	r2, r3
 801523c:	d105      	bne.n	801524a <clear_lock+0x2a>
 801523e:	4a09      	ldr	r2, [pc, #36]	; (8015264 <clear_lock+0x44>)
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	011b      	lsls	r3, r3, #4
 8015244:	4413      	add	r3, r2
 8015246:	2200      	movs	r2, #0
 8015248:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	3301      	adds	r3, #1
 801524e:	60fb      	str	r3, [r7, #12]
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	2b13      	cmp	r3, #19
 8015254:	d9eb      	bls.n	801522e <clear_lock+0xe>
	}
}
 8015256:	bf00      	nop
 8015258:	bf00      	nop
 801525a:	3714      	adds	r7, #20
 801525c:	46bd      	mov	sp, r7
 801525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015262:	4770      	bx	lr
 8015264:	20000d7c 	.word	0x20000d7c

08015268 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b086      	sub	sp, #24
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015270:	2300      	movs	r3, #0
 8015272:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	78db      	ldrb	r3, [r3, #3]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d034      	beq.n	80152e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015280:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	7858      	ldrb	r0, [r3, #1]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801528c:	2301      	movs	r3, #1
 801528e:	697a      	ldr	r2, [r7, #20]
 8015290:	f7ff fd38 	bl	8014d04 <disk_write>
 8015294:	4603      	mov	r3, r0
 8015296:	2b00      	cmp	r3, #0
 8015298:	d002      	beq.n	80152a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 801529a:	2301      	movs	r3, #1
 801529c:	73fb      	strb	r3, [r7, #15]
 801529e:	e022      	b.n	80152e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	2200      	movs	r2, #0
 80152a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152aa:	697a      	ldr	r2, [r7, #20]
 80152ac:	1ad2      	subs	r2, r2, r3
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	69db      	ldr	r3, [r3, #28]
 80152b2:	429a      	cmp	r2, r3
 80152b4:	d217      	bcs.n	80152e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	789b      	ldrb	r3, [r3, #2]
 80152ba:	613b      	str	r3, [r7, #16]
 80152bc:	e010      	b.n	80152e0 <sync_window+0x78>
					wsect += fs->fsize;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	69db      	ldr	r3, [r3, #28]
 80152c2:	697a      	ldr	r2, [r7, #20]
 80152c4:	4413      	add	r3, r2
 80152c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	7858      	ldrb	r0, [r3, #1]
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80152d2:	2301      	movs	r3, #1
 80152d4:	697a      	ldr	r2, [r7, #20]
 80152d6:	f7ff fd15 	bl	8014d04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80152da:	693b      	ldr	r3, [r7, #16]
 80152dc:	3b01      	subs	r3, #1
 80152de:	613b      	str	r3, [r7, #16]
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	2b01      	cmp	r3, #1
 80152e4:	d8eb      	bhi.n	80152be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80152e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	3718      	adds	r7, #24
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}

080152f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b084      	sub	sp, #16
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
 80152f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80152fa:	2300      	movs	r3, #0
 80152fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015302:	683a      	ldr	r2, [r7, #0]
 8015304:	429a      	cmp	r2, r3
 8015306:	d01b      	beq.n	8015340 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f7ff ffad 	bl	8015268 <sync_window>
 801530e:	4603      	mov	r3, r0
 8015310:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015312:	7bfb      	ldrb	r3, [r7, #15]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d113      	bne.n	8015340 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	7858      	ldrb	r0, [r3, #1]
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015322:	2301      	movs	r3, #1
 8015324:	683a      	ldr	r2, [r7, #0]
 8015326:	f7ff fccd 	bl	8014cc4 <disk_read>
 801532a:	4603      	mov	r3, r0
 801532c:	2b00      	cmp	r3, #0
 801532e:	d004      	beq.n	801533a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015330:	f04f 33ff 	mov.w	r3, #4294967295
 8015334:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015336:	2301      	movs	r3, #1
 8015338:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	683a      	ldr	r2, [r7, #0]
 801533e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8015340:	7bfb      	ldrb	r3, [r7, #15]
}
 8015342:	4618      	mov	r0, r3
 8015344:	3710      	adds	r7, #16
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}
	...

0801534c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b084      	sub	sp, #16
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015354:	6878      	ldr	r0, [r7, #4]
 8015356:	f7ff ff87 	bl	8015268 <sync_window>
 801535a:	4603      	mov	r3, r0
 801535c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801535e:	7bfb      	ldrb	r3, [r7, #15]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d158      	bne.n	8015416 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	2b03      	cmp	r3, #3
 801536a:	d148      	bne.n	80153fe <sync_fs+0xb2>
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	791b      	ldrb	r3, [r3, #4]
 8015370:	2b01      	cmp	r3, #1
 8015372:	d144      	bne.n	80153fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	3334      	adds	r3, #52	; 0x34
 8015378:	f44f 7200 	mov.w	r2, #512	; 0x200
 801537c:	2100      	movs	r1, #0
 801537e:	4618      	mov	r0, r3
 8015380:	f7ff fda9 	bl	8014ed6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	3334      	adds	r3, #52	; 0x34
 8015388:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801538c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015390:	4618      	mov	r0, r3
 8015392:	f7ff fd38 	bl	8014e06 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	3334      	adds	r3, #52	; 0x34
 801539a:	4921      	ldr	r1, [pc, #132]	; (8015420 <sync_fs+0xd4>)
 801539c:	4618      	mov	r0, r3
 801539e:	f7ff fd4d 	bl	8014e3c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	3334      	adds	r3, #52	; 0x34
 80153a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80153aa:	491e      	ldr	r1, [pc, #120]	; (8015424 <sync_fs+0xd8>)
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7ff fd45 	bl	8014e3c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	3334      	adds	r3, #52	; 0x34
 80153b6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	695b      	ldr	r3, [r3, #20]
 80153be:	4619      	mov	r1, r3
 80153c0:	4610      	mov	r0, r2
 80153c2:	f7ff fd3b 	bl	8014e3c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	3334      	adds	r3, #52	; 0x34
 80153ca:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	691b      	ldr	r3, [r3, #16]
 80153d2:	4619      	mov	r1, r3
 80153d4:	4610      	mov	r0, r2
 80153d6:	f7ff fd31 	bl	8014e3c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	6a1b      	ldr	r3, [r3, #32]
 80153de:	1c5a      	adds	r2, r3, #1
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	7858      	ldrb	r0, [r3, #1]
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80153f2:	2301      	movs	r3, #1
 80153f4:	f7ff fc86 	bl	8014d04 <disk_write>
			fs->fsi_flag = 0;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2200      	movs	r2, #0
 80153fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	785b      	ldrb	r3, [r3, #1]
 8015402:	2200      	movs	r2, #0
 8015404:	2100      	movs	r1, #0
 8015406:	4618      	mov	r0, r3
 8015408:	f7ff fc9c 	bl	8014d44 <disk_ioctl>
 801540c:	4603      	mov	r3, r0
 801540e:	2b00      	cmp	r3, #0
 8015410:	d001      	beq.n	8015416 <sync_fs+0xca>
 8015412:	2301      	movs	r3, #1
 8015414:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015416:	7bfb      	ldrb	r3, [r7, #15]
}
 8015418:	4618      	mov	r0, r3
 801541a:	3710      	adds	r7, #16
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}
 8015420:	41615252 	.word	0x41615252
 8015424:	61417272 	.word	0x61417272

08015428 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015428:	b480      	push	{r7}
 801542a:	b083      	sub	sp, #12
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015432:	683b      	ldr	r3, [r7, #0]
 8015434:	3b02      	subs	r3, #2
 8015436:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	699b      	ldr	r3, [r3, #24]
 801543c:	3b02      	subs	r3, #2
 801543e:	683a      	ldr	r2, [r7, #0]
 8015440:	429a      	cmp	r2, r3
 8015442:	d301      	bcc.n	8015448 <clust2sect+0x20>
 8015444:	2300      	movs	r3, #0
 8015446:	e008      	b.n	801545a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	895b      	ldrh	r3, [r3, #10]
 801544c:	461a      	mov	r2, r3
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	fb03 f202 	mul.w	r2, r3, r2
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015458:	4413      	add	r3, r2
}
 801545a:	4618      	mov	r0, r3
 801545c:	370c      	adds	r7, #12
 801545e:	46bd      	mov	sp, r7
 8015460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015464:	4770      	bx	lr

08015466 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015466:	b580      	push	{r7, lr}
 8015468:	b086      	sub	sp, #24
 801546a:	af00      	add	r7, sp, #0
 801546c:	6078      	str	r0, [r7, #4]
 801546e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015476:	683b      	ldr	r3, [r7, #0]
 8015478:	2b01      	cmp	r3, #1
 801547a:	d904      	bls.n	8015486 <get_fat+0x20>
 801547c:	693b      	ldr	r3, [r7, #16]
 801547e:	699b      	ldr	r3, [r3, #24]
 8015480:	683a      	ldr	r2, [r7, #0]
 8015482:	429a      	cmp	r2, r3
 8015484:	d302      	bcc.n	801548c <get_fat+0x26>
		val = 1;	/* Internal error */
 8015486:	2301      	movs	r3, #1
 8015488:	617b      	str	r3, [r7, #20]
 801548a:	e08f      	b.n	80155ac <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801548c:	f04f 33ff 	mov.w	r3, #4294967295
 8015490:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015492:	693b      	ldr	r3, [r7, #16]
 8015494:	781b      	ldrb	r3, [r3, #0]
 8015496:	2b03      	cmp	r3, #3
 8015498:	d062      	beq.n	8015560 <get_fat+0xfa>
 801549a:	2b03      	cmp	r3, #3
 801549c:	dc7c      	bgt.n	8015598 <get_fat+0x132>
 801549e:	2b01      	cmp	r3, #1
 80154a0:	d002      	beq.n	80154a8 <get_fat+0x42>
 80154a2:	2b02      	cmp	r3, #2
 80154a4:	d042      	beq.n	801552c <get_fat+0xc6>
 80154a6:	e077      	b.n	8015598 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	60fb      	str	r3, [r7, #12]
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	085b      	lsrs	r3, r3, #1
 80154b0:	68fa      	ldr	r2, [r7, #12]
 80154b2:	4413      	add	r3, r2
 80154b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	0a5b      	lsrs	r3, r3, #9
 80154be:	4413      	add	r3, r2
 80154c0:	4619      	mov	r1, r3
 80154c2:	6938      	ldr	r0, [r7, #16]
 80154c4:	f7ff ff14 	bl	80152f0 <move_window>
 80154c8:	4603      	mov	r3, r0
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d167      	bne.n	801559e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	1c5a      	adds	r2, r3, #1
 80154d2:	60fa      	str	r2, [r7, #12]
 80154d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80154d8:	693a      	ldr	r2, [r7, #16]
 80154da:	4413      	add	r3, r2
 80154dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80154e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80154e2:	693b      	ldr	r3, [r7, #16]
 80154e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	0a5b      	lsrs	r3, r3, #9
 80154ea:	4413      	add	r3, r2
 80154ec:	4619      	mov	r1, r3
 80154ee:	6938      	ldr	r0, [r7, #16]
 80154f0:	f7ff fefe 	bl	80152f0 <move_window>
 80154f4:	4603      	mov	r3, r0
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d153      	bne.n	80155a2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015500:	693a      	ldr	r2, [r7, #16]
 8015502:	4413      	add	r3, r2
 8015504:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015508:	021b      	lsls	r3, r3, #8
 801550a:	461a      	mov	r2, r3
 801550c:	68bb      	ldr	r3, [r7, #8]
 801550e:	4313      	orrs	r3, r2
 8015510:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	f003 0301 	and.w	r3, r3, #1
 8015518:	2b00      	cmp	r3, #0
 801551a:	d002      	beq.n	8015522 <get_fat+0xbc>
 801551c:	68bb      	ldr	r3, [r7, #8]
 801551e:	091b      	lsrs	r3, r3, #4
 8015520:	e002      	b.n	8015528 <get_fat+0xc2>
 8015522:	68bb      	ldr	r3, [r7, #8]
 8015524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015528:	617b      	str	r3, [r7, #20]
			break;
 801552a:	e03f      	b.n	80155ac <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801552c:	693b      	ldr	r3, [r7, #16]
 801552e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	0a1b      	lsrs	r3, r3, #8
 8015534:	4413      	add	r3, r2
 8015536:	4619      	mov	r1, r3
 8015538:	6938      	ldr	r0, [r7, #16]
 801553a:	f7ff fed9 	bl	80152f0 <move_window>
 801553e:	4603      	mov	r3, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	d130      	bne.n	80155a6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015544:	693b      	ldr	r3, [r7, #16]
 8015546:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	005b      	lsls	r3, r3, #1
 801554e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015552:	4413      	add	r3, r2
 8015554:	4618      	mov	r0, r3
 8015556:	f7ff fc1b 	bl	8014d90 <ld_word>
 801555a:	4603      	mov	r3, r0
 801555c:	617b      	str	r3, [r7, #20]
			break;
 801555e:	e025      	b.n	80155ac <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015560:	693b      	ldr	r3, [r7, #16]
 8015562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	09db      	lsrs	r3, r3, #7
 8015568:	4413      	add	r3, r2
 801556a:	4619      	mov	r1, r3
 801556c:	6938      	ldr	r0, [r7, #16]
 801556e:	f7ff febf 	bl	80152f0 <move_window>
 8015572:	4603      	mov	r3, r0
 8015574:	2b00      	cmp	r3, #0
 8015576:	d118      	bne.n	80155aa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801557e:	683b      	ldr	r3, [r7, #0]
 8015580:	009b      	lsls	r3, r3, #2
 8015582:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015586:	4413      	add	r3, r2
 8015588:	4618      	mov	r0, r3
 801558a:	f7ff fc19 	bl	8014dc0 <ld_dword>
 801558e:	4603      	mov	r3, r0
 8015590:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015594:	617b      	str	r3, [r7, #20]
			break;
 8015596:	e009      	b.n	80155ac <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015598:	2301      	movs	r3, #1
 801559a:	617b      	str	r3, [r7, #20]
 801559c:	e006      	b.n	80155ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801559e:	bf00      	nop
 80155a0:	e004      	b.n	80155ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80155a2:	bf00      	nop
 80155a4:	e002      	b.n	80155ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80155a6:	bf00      	nop
 80155a8:	e000      	b.n	80155ac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80155aa:	bf00      	nop
		}
	}

	return val;
 80155ac:	697b      	ldr	r3, [r7, #20]
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	3718      	adds	r7, #24
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}

080155b6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80155b6:	b590      	push	{r4, r7, lr}
 80155b8:	b089      	sub	sp, #36	; 0x24
 80155ba:	af00      	add	r7, sp, #0
 80155bc:	60f8      	str	r0, [r7, #12]
 80155be:	60b9      	str	r1, [r7, #8]
 80155c0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80155c2:	2302      	movs	r3, #2
 80155c4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	2b01      	cmp	r3, #1
 80155ca:	f240 80d2 	bls.w	8015772 <put_fat+0x1bc>
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	699b      	ldr	r3, [r3, #24]
 80155d2:	68ba      	ldr	r2, [r7, #8]
 80155d4:	429a      	cmp	r2, r3
 80155d6:	f080 80cc 	bcs.w	8015772 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	781b      	ldrb	r3, [r3, #0]
 80155de:	2b03      	cmp	r3, #3
 80155e0:	f000 8096 	beq.w	8015710 <put_fat+0x15a>
 80155e4:	2b03      	cmp	r3, #3
 80155e6:	f300 80cd 	bgt.w	8015784 <put_fat+0x1ce>
 80155ea:	2b01      	cmp	r3, #1
 80155ec:	d002      	beq.n	80155f4 <put_fat+0x3e>
 80155ee:	2b02      	cmp	r3, #2
 80155f0:	d06e      	beq.n	80156d0 <put_fat+0x11a>
 80155f2:	e0c7      	b.n	8015784 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	61bb      	str	r3, [r7, #24]
 80155f8:	69bb      	ldr	r3, [r7, #24]
 80155fa:	085b      	lsrs	r3, r3, #1
 80155fc:	69ba      	ldr	r2, [r7, #24]
 80155fe:	4413      	add	r3, r2
 8015600:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015606:	69bb      	ldr	r3, [r7, #24]
 8015608:	0a5b      	lsrs	r3, r3, #9
 801560a:	4413      	add	r3, r2
 801560c:	4619      	mov	r1, r3
 801560e:	68f8      	ldr	r0, [r7, #12]
 8015610:	f7ff fe6e 	bl	80152f0 <move_window>
 8015614:	4603      	mov	r3, r0
 8015616:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015618:	7ffb      	ldrb	r3, [r7, #31]
 801561a:	2b00      	cmp	r3, #0
 801561c:	f040 80ab 	bne.w	8015776 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015626:	69bb      	ldr	r3, [r7, #24]
 8015628:	1c59      	adds	r1, r3, #1
 801562a:	61b9      	str	r1, [r7, #24]
 801562c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015630:	4413      	add	r3, r2
 8015632:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	f003 0301 	and.w	r3, r3, #1
 801563a:	2b00      	cmp	r3, #0
 801563c:	d00d      	beq.n	801565a <put_fat+0xa4>
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	b25b      	sxtb	r3, r3
 8015644:	f003 030f 	and.w	r3, r3, #15
 8015648:	b25a      	sxtb	r2, r3
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	b2db      	uxtb	r3, r3
 801564e:	011b      	lsls	r3, r3, #4
 8015650:	b25b      	sxtb	r3, r3
 8015652:	4313      	orrs	r3, r2
 8015654:	b25b      	sxtb	r3, r3
 8015656:	b2db      	uxtb	r3, r3
 8015658:	e001      	b.n	801565e <put_fat+0xa8>
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	b2db      	uxtb	r3, r3
 801565e:	697a      	ldr	r2, [r7, #20]
 8015660:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	2201      	movs	r2, #1
 8015666:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801566c:	69bb      	ldr	r3, [r7, #24]
 801566e:	0a5b      	lsrs	r3, r3, #9
 8015670:	4413      	add	r3, r2
 8015672:	4619      	mov	r1, r3
 8015674:	68f8      	ldr	r0, [r7, #12]
 8015676:	f7ff fe3b 	bl	80152f0 <move_window>
 801567a:	4603      	mov	r3, r0
 801567c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801567e:	7ffb      	ldrb	r3, [r7, #31]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d17a      	bne.n	801577a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801568a:	69bb      	ldr	r3, [r7, #24]
 801568c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015690:	4413      	add	r3, r2
 8015692:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	f003 0301 	and.w	r3, r3, #1
 801569a:	2b00      	cmp	r3, #0
 801569c:	d003      	beq.n	80156a6 <put_fat+0xf0>
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	091b      	lsrs	r3, r3, #4
 80156a2:	b2db      	uxtb	r3, r3
 80156a4:	e00e      	b.n	80156c4 <put_fat+0x10e>
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	781b      	ldrb	r3, [r3, #0]
 80156aa:	b25b      	sxtb	r3, r3
 80156ac:	f023 030f 	bic.w	r3, r3, #15
 80156b0:	b25a      	sxtb	r2, r3
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	0a1b      	lsrs	r3, r3, #8
 80156b6:	b25b      	sxtb	r3, r3
 80156b8:	f003 030f 	and.w	r3, r3, #15
 80156bc:	b25b      	sxtb	r3, r3
 80156be:	4313      	orrs	r3, r2
 80156c0:	b25b      	sxtb	r3, r3
 80156c2:	b2db      	uxtb	r3, r3
 80156c4:	697a      	ldr	r2, [r7, #20]
 80156c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	2201      	movs	r2, #1
 80156cc:	70da      	strb	r2, [r3, #3]
			break;
 80156ce:	e059      	b.n	8015784 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	0a1b      	lsrs	r3, r3, #8
 80156d8:	4413      	add	r3, r2
 80156da:	4619      	mov	r1, r3
 80156dc:	68f8      	ldr	r0, [r7, #12]
 80156de:	f7ff fe07 	bl	80152f0 <move_window>
 80156e2:	4603      	mov	r3, r0
 80156e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80156e6:	7ffb      	ldrb	r3, [r7, #31]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d148      	bne.n	801577e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80156f2:	68bb      	ldr	r3, [r7, #8]
 80156f4:	005b      	lsls	r3, r3, #1
 80156f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80156fa:	4413      	add	r3, r2
 80156fc:	687a      	ldr	r2, [r7, #4]
 80156fe:	b292      	uxth	r2, r2
 8015700:	4611      	mov	r1, r2
 8015702:	4618      	mov	r0, r3
 8015704:	f7ff fb7f 	bl	8014e06 <st_word>
			fs->wflag = 1;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	2201      	movs	r2, #1
 801570c:	70da      	strb	r2, [r3, #3]
			break;
 801570e:	e039      	b.n	8015784 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	09db      	lsrs	r3, r3, #7
 8015718:	4413      	add	r3, r2
 801571a:	4619      	mov	r1, r3
 801571c:	68f8      	ldr	r0, [r7, #12]
 801571e:	f7ff fde7 	bl	80152f0 <move_window>
 8015722:	4603      	mov	r3, r0
 8015724:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015726:	7ffb      	ldrb	r3, [r7, #31]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d12a      	bne.n	8015782 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	009b      	lsls	r3, r3, #2
 801573c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015740:	4413      	add	r3, r2
 8015742:	4618      	mov	r0, r3
 8015744:	f7ff fb3c 	bl	8014dc0 <ld_dword>
 8015748:	4603      	mov	r3, r0
 801574a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801574e:	4323      	orrs	r3, r4
 8015750:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015758:	68bb      	ldr	r3, [r7, #8]
 801575a:	009b      	lsls	r3, r3, #2
 801575c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015760:	4413      	add	r3, r2
 8015762:	6879      	ldr	r1, [r7, #4]
 8015764:	4618      	mov	r0, r3
 8015766:	f7ff fb69 	bl	8014e3c <st_dword>
			fs->wflag = 1;
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	2201      	movs	r2, #1
 801576e:	70da      	strb	r2, [r3, #3]
			break;
 8015770:	e008      	b.n	8015784 <put_fat+0x1ce>
		}
	}
 8015772:	bf00      	nop
 8015774:	e006      	b.n	8015784 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015776:	bf00      	nop
 8015778:	e004      	b.n	8015784 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801577a:	bf00      	nop
 801577c:	e002      	b.n	8015784 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801577e:	bf00      	nop
 8015780:	e000      	b.n	8015784 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015782:	bf00      	nop
	return res;
 8015784:	7ffb      	ldrb	r3, [r7, #31]
}
 8015786:	4618      	mov	r0, r3
 8015788:	3724      	adds	r7, #36	; 0x24
 801578a:	46bd      	mov	sp, r7
 801578c:	bd90      	pop	{r4, r7, pc}

0801578e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801578e:	b580      	push	{r7, lr}
 8015790:	b088      	sub	sp, #32
 8015792:	af00      	add	r7, sp, #0
 8015794:	60f8      	str	r0, [r7, #12]
 8015796:	60b9      	str	r1, [r7, #8]
 8015798:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801579a:	2300      	movs	r3, #0
 801579c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	2b01      	cmp	r3, #1
 80157a8:	d904      	bls.n	80157b4 <remove_chain+0x26>
 80157aa:	69bb      	ldr	r3, [r7, #24]
 80157ac:	699b      	ldr	r3, [r3, #24]
 80157ae:	68ba      	ldr	r2, [r7, #8]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d301      	bcc.n	80157b8 <remove_chain+0x2a>
 80157b4:	2302      	movs	r3, #2
 80157b6:	e04b      	b.n	8015850 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d00c      	beq.n	80157d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80157be:	f04f 32ff 	mov.w	r2, #4294967295
 80157c2:	6879      	ldr	r1, [r7, #4]
 80157c4:	69b8      	ldr	r0, [r7, #24]
 80157c6:	f7ff fef6 	bl	80155b6 <put_fat>
 80157ca:	4603      	mov	r3, r0
 80157cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80157ce:	7ffb      	ldrb	r3, [r7, #31]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d001      	beq.n	80157d8 <remove_chain+0x4a>
 80157d4:	7ffb      	ldrb	r3, [r7, #31]
 80157d6:	e03b      	b.n	8015850 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80157d8:	68b9      	ldr	r1, [r7, #8]
 80157da:	68f8      	ldr	r0, [r7, #12]
 80157dc:	f7ff fe43 	bl	8015466 <get_fat>
 80157e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80157e2:	697b      	ldr	r3, [r7, #20]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d031      	beq.n	801584c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	2b01      	cmp	r3, #1
 80157ec:	d101      	bne.n	80157f2 <remove_chain+0x64>
 80157ee:	2302      	movs	r3, #2
 80157f0:	e02e      	b.n	8015850 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80157f2:	697b      	ldr	r3, [r7, #20]
 80157f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157f8:	d101      	bne.n	80157fe <remove_chain+0x70>
 80157fa:	2301      	movs	r3, #1
 80157fc:	e028      	b.n	8015850 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80157fe:	2200      	movs	r2, #0
 8015800:	68b9      	ldr	r1, [r7, #8]
 8015802:	69b8      	ldr	r0, [r7, #24]
 8015804:	f7ff fed7 	bl	80155b6 <put_fat>
 8015808:	4603      	mov	r3, r0
 801580a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801580c:	7ffb      	ldrb	r3, [r7, #31]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d001      	beq.n	8015816 <remove_chain+0x88>
 8015812:	7ffb      	ldrb	r3, [r7, #31]
 8015814:	e01c      	b.n	8015850 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8015816:	69bb      	ldr	r3, [r7, #24]
 8015818:	695a      	ldr	r2, [r3, #20]
 801581a:	69bb      	ldr	r3, [r7, #24]
 801581c:	699b      	ldr	r3, [r3, #24]
 801581e:	3b02      	subs	r3, #2
 8015820:	429a      	cmp	r2, r3
 8015822:	d20b      	bcs.n	801583c <remove_chain+0xae>
			fs->free_clst++;
 8015824:	69bb      	ldr	r3, [r7, #24]
 8015826:	695b      	ldr	r3, [r3, #20]
 8015828:	1c5a      	adds	r2, r3, #1
 801582a:	69bb      	ldr	r3, [r7, #24]
 801582c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801582e:	69bb      	ldr	r3, [r7, #24]
 8015830:	791b      	ldrb	r3, [r3, #4]
 8015832:	f043 0301 	orr.w	r3, r3, #1
 8015836:	b2da      	uxtb	r2, r3
 8015838:	69bb      	ldr	r3, [r7, #24]
 801583a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801583c:	697b      	ldr	r3, [r7, #20]
 801583e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015840:	69bb      	ldr	r3, [r7, #24]
 8015842:	699b      	ldr	r3, [r3, #24]
 8015844:	68ba      	ldr	r2, [r7, #8]
 8015846:	429a      	cmp	r2, r3
 8015848:	d3c6      	bcc.n	80157d8 <remove_chain+0x4a>
 801584a:	e000      	b.n	801584e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801584c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801584e:	2300      	movs	r3, #0
}
 8015850:	4618      	mov	r0, r3
 8015852:	3720      	adds	r7, #32
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}

08015858 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b088      	sub	sp, #32
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d10d      	bne.n	801588a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801586e:	693b      	ldr	r3, [r7, #16]
 8015870:	691b      	ldr	r3, [r3, #16]
 8015872:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015874:	69bb      	ldr	r3, [r7, #24]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d004      	beq.n	8015884 <create_chain+0x2c>
 801587a:	693b      	ldr	r3, [r7, #16]
 801587c:	699b      	ldr	r3, [r3, #24]
 801587e:	69ba      	ldr	r2, [r7, #24]
 8015880:	429a      	cmp	r2, r3
 8015882:	d31b      	bcc.n	80158bc <create_chain+0x64>
 8015884:	2301      	movs	r3, #1
 8015886:	61bb      	str	r3, [r7, #24]
 8015888:	e018      	b.n	80158bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801588a:	6839      	ldr	r1, [r7, #0]
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f7ff fdea 	bl	8015466 <get_fat>
 8015892:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2b01      	cmp	r3, #1
 8015898:	d801      	bhi.n	801589e <create_chain+0x46>
 801589a:	2301      	movs	r3, #1
 801589c:	e070      	b.n	8015980 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158a4:	d101      	bne.n	80158aa <create_chain+0x52>
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	e06a      	b.n	8015980 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80158aa:	693b      	ldr	r3, [r7, #16]
 80158ac:	699b      	ldr	r3, [r3, #24]
 80158ae:	68fa      	ldr	r2, [r7, #12]
 80158b0:	429a      	cmp	r2, r3
 80158b2:	d201      	bcs.n	80158b8 <create_chain+0x60>
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	e063      	b.n	8015980 <create_chain+0x128>
		scl = clst;
 80158b8:	683b      	ldr	r3, [r7, #0]
 80158ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80158bc:	69bb      	ldr	r3, [r7, #24]
 80158be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80158c0:	69fb      	ldr	r3, [r7, #28]
 80158c2:	3301      	adds	r3, #1
 80158c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	699b      	ldr	r3, [r3, #24]
 80158ca:	69fa      	ldr	r2, [r7, #28]
 80158cc:	429a      	cmp	r2, r3
 80158ce:	d307      	bcc.n	80158e0 <create_chain+0x88>
				ncl = 2;
 80158d0:	2302      	movs	r3, #2
 80158d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80158d4:	69fa      	ldr	r2, [r7, #28]
 80158d6:	69bb      	ldr	r3, [r7, #24]
 80158d8:	429a      	cmp	r2, r3
 80158da:	d901      	bls.n	80158e0 <create_chain+0x88>
 80158dc:	2300      	movs	r3, #0
 80158de:	e04f      	b.n	8015980 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80158e0:	69f9      	ldr	r1, [r7, #28]
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f7ff fdbf 	bl	8015466 <get_fat>
 80158e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d00e      	beq.n	801590e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	2b01      	cmp	r3, #1
 80158f4:	d003      	beq.n	80158fe <create_chain+0xa6>
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158fc:	d101      	bne.n	8015902 <create_chain+0xaa>
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	e03e      	b.n	8015980 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8015902:	69fa      	ldr	r2, [r7, #28]
 8015904:	69bb      	ldr	r3, [r7, #24]
 8015906:	429a      	cmp	r2, r3
 8015908:	d1da      	bne.n	80158c0 <create_chain+0x68>
 801590a:	2300      	movs	r3, #0
 801590c:	e038      	b.n	8015980 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801590e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015910:	f04f 32ff 	mov.w	r2, #4294967295
 8015914:	69f9      	ldr	r1, [r7, #28]
 8015916:	6938      	ldr	r0, [r7, #16]
 8015918:	f7ff fe4d 	bl	80155b6 <put_fat>
 801591c:	4603      	mov	r3, r0
 801591e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015920:	7dfb      	ldrb	r3, [r7, #23]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d109      	bne.n	801593a <create_chain+0xe2>
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d006      	beq.n	801593a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801592c:	69fa      	ldr	r2, [r7, #28]
 801592e:	6839      	ldr	r1, [r7, #0]
 8015930:	6938      	ldr	r0, [r7, #16]
 8015932:	f7ff fe40 	bl	80155b6 <put_fat>
 8015936:	4603      	mov	r3, r0
 8015938:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801593a:	7dfb      	ldrb	r3, [r7, #23]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d116      	bne.n	801596e <create_chain+0x116>
		fs->last_clst = ncl;
 8015940:	693b      	ldr	r3, [r7, #16]
 8015942:	69fa      	ldr	r2, [r7, #28]
 8015944:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015946:	693b      	ldr	r3, [r7, #16]
 8015948:	695a      	ldr	r2, [r3, #20]
 801594a:	693b      	ldr	r3, [r7, #16]
 801594c:	699b      	ldr	r3, [r3, #24]
 801594e:	3b02      	subs	r3, #2
 8015950:	429a      	cmp	r2, r3
 8015952:	d804      	bhi.n	801595e <create_chain+0x106>
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	695b      	ldr	r3, [r3, #20]
 8015958:	1e5a      	subs	r2, r3, #1
 801595a:	693b      	ldr	r3, [r7, #16]
 801595c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801595e:	693b      	ldr	r3, [r7, #16]
 8015960:	791b      	ldrb	r3, [r3, #4]
 8015962:	f043 0301 	orr.w	r3, r3, #1
 8015966:	b2da      	uxtb	r2, r3
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	711a      	strb	r2, [r3, #4]
 801596c:	e007      	b.n	801597e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801596e:	7dfb      	ldrb	r3, [r7, #23]
 8015970:	2b01      	cmp	r3, #1
 8015972:	d102      	bne.n	801597a <create_chain+0x122>
 8015974:	f04f 33ff 	mov.w	r3, #4294967295
 8015978:	e000      	b.n	801597c <create_chain+0x124>
 801597a:	2301      	movs	r3, #1
 801597c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801597e:	69fb      	ldr	r3, [r7, #28]
}
 8015980:	4618      	mov	r0, r3
 8015982:	3720      	adds	r7, #32
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}

08015988 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015988:	b480      	push	{r7}
 801598a:	b087      	sub	sp, #28
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
 8015990:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801599c:	3304      	adds	r3, #4
 801599e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	0a5b      	lsrs	r3, r3, #9
 80159a4:	68fa      	ldr	r2, [r7, #12]
 80159a6:	8952      	ldrh	r2, [r2, #10]
 80159a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80159ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80159ae:	693b      	ldr	r3, [r7, #16]
 80159b0:	1d1a      	adds	r2, r3, #4
 80159b2:	613a      	str	r2, [r7, #16]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80159b8:	68bb      	ldr	r3, [r7, #8]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d101      	bne.n	80159c2 <clmt_clust+0x3a>
 80159be:	2300      	movs	r3, #0
 80159c0:	e010      	b.n	80159e4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80159c2:	697a      	ldr	r2, [r7, #20]
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d307      	bcc.n	80159da <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80159ca:	697a      	ldr	r2, [r7, #20]
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	1ad3      	subs	r3, r2, r3
 80159d0:	617b      	str	r3, [r7, #20]
 80159d2:	693b      	ldr	r3, [r7, #16]
 80159d4:	3304      	adds	r3, #4
 80159d6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80159d8:	e7e9      	b.n	80159ae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80159da:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80159dc:	693b      	ldr	r3, [r7, #16]
 80159de:	681a      	ldr	r2, [r3, #0]
 80159e0:	697b      	ldr	r3, [r7, #20]
 80159e2:	4413      	add	r3, r2
}
 80159e4:	4618      	mov	r0, r3
 80159e6:	371c      	adds	r7, #28
 80159e8:	46bd      	mov	sp, r7
 80159ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ee:	4770      	bx	lr

080159f0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b086      	sub	sp, #24
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
 80159f8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015a06:	d204      	bcs.n	8015a12 <dir_sdi+0x22>
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	f003 031f 	and.w	r3, r3, #31
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d001      	beq.n	8015a16 <dir_sdi+0x26>
		return FR_INT_ERR;
 8015a12:	2302      	movs	r3, #2
 8015a14:	e063      	b.n	8015ade <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	683a      	ldr	r2, [r7, #0]
 8015a1a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	689b      	ldr	r3, [r3, #8]
 8015a20:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015a22:	697b      	ldr	r3, [r7, #20]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d106      	bne.n	8015a36 <dir_sdi+0x46>
 8015a28:	693b      	ldr	r3, [r7, #16]
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	2b02      	cmp	r3, #2
 8015a2e:	d902      	bls.n	8015a36 <dir_sdi+0x46>
		clst = fs->dirbase;
 8015a30:	693b      	ldr	r3, [r7, #16]
 8015a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a34:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015a36:	697b      	ldr	r3, [r7, #20]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d10c      	bne.n	8015a56 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015a3c:	683b      	ldr	r3, [r7, #0]
 8015a3e:	095b      	lsrs	r3, r3, #5
 8015a40:	693a      	ldr	r2, [r7, #16]
 8015a42:	8912      	ldrh	r2, [r2, #8]
 8015a44:	4293      	cmp	r3, r2
 8015a46:	d301      	bcc.n	8015a4c <dir_sdi+0x5c>
 8015a48:	2302      	movs	r3, #2
 8015a4a:	e048      	b.n	8015ade <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8015a4c:	693b      	ldr	r3, [r7, #16]
 8015a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	61da      	str	r2, [r3, #28]
 8015a54:	e029      	b.n	8015aaa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015a56:	693b      	ldr	r3, [r7, #16]
 8015a58:	895b      	ldrh	r3, [r3, #10]
 8015a5a:	025b      	lsls	r3, r3, #9
 8015a5c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015a5e:	e019      	b.n	8015a94 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	6979      	ldr	r1, [r7, #20]
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7ff fcfe 	bl	8015466 <get_fat>
 8015a6a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015a6c:	697b      	ldr	r3, [r7, #20]
 8015a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a72:	d101      	bne.n	8015a78 <dir_sdi+0x88>
 8015a74:	2301      	movs	r3, #1
 8015a76:	e032      	b.n	8015ade <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015a78:	697b      	ldr	r3, [r7, #20]
 8015a7a:	2b01      	cmp	r3, #1
 8015a7c:	d904      	bls.n	8015a88 <dir_sdi+0x98>
 8015a7e:	693b      	ldr	r3, [r7, #16]
 8015a80:	699b      	ldr	r3, [r3, #24]
 8015a82:	697a      	ldr	r2, [r7, #20]
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d301      	bcc.n	8015a8c <dir_sdi+0x9c>
 8015a88:	2302      	movs	r3, #2
 8015a8a:	e028      	b.n	8015ade <dir_sdi+0xee>
			ofs -= csz;
 8015a8c:	683a      	ldr	r2, [r7, #0]
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	1ad3      	subs	r3, r2, r3
 8015a92:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015a94:	683a      	ldr	r2, [r7, #0]
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	429a      	cmp	r2, r3
 8015a9a:	d2e1      	bcs.n	8015a60 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8015a9c:	6979      	ldr	r1, [r7, #20]
 8015a9e:	6938      	ldr	r0, [r7, #16]
 8015aa0:	f7ff fcc2 	bl	8015428 <clust2sect>
 8015aa4:	4602      	mov	r2, r0
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	697a      	ldr	r2, [r7, #20]
 8015aae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	69db      	ldr	r3, [r3, #28]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d101      	bne.n	8015abc <dir_sdi+0xcc>
 8015ab8:	2302      	movs	r3, #2
 8015aba:	e010      	b.n	8015ade <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	69da      	ldr	r2, [r3, #28]
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	0a5b      	lsrs	r3, r3, #9
 8015ac4:	441a      	add	r2, r3
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ad6:	441a      	add	r2, r3
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015adc:	2300      	movs	r3, #0
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3718      	adds	r7, #24
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}

08015ae6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015ae6:	b580      	push	{r7, lr}
 8015ae8:	b086      	sub	sp, #24
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
 8015aee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	695b      	ldr	r3, [r3, #20]
 8015afa:	3320      	adds	r3, #32
 8015afc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	69db      	ldr	r3, [r3, #28]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d003      	beq.n	8015b0e <dir_next+0x28>
 8015b06:	68bb      	ldr	r3, [r7, #8]
 8015b08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015b0c:	d301      	bcc.n	8015b12 <dir_next+0x2c>
 8015b0e:	2304      	movs	r3, #4
 8015b10:	e0aa      	b.n	8015c68 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015b12:	68bb      	ldr	r3, [r7, #8]
 8015b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	f040 8098 	bne.w	8015c4e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	69db      	ldr	r3, [r3, #28]
 8015b22:	1c5a      	adds	r2, r3, #1
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	699b      	ldr	r3, [r3, #24]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d10b      	bne.n	8015b48 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015b30:	68bb      	ldr	r3, [r7, #8]
 8015b32:	095b      	lsrs	r3, r3, #5
 8015b34:	68fa      	ldr	r2, [r7, #12]
 8015b36:	8912      	ldrh	r2, [r2, #8]
 8015b38:	4293      	cmp	r3, r2
 8015b3a:	f0c0 8088 	bcc.w	8015c4e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2200      	movs	r2, #0
 8015b42:	61da      	str	r2, [r3, #28]
 8015b44:	2304      	movs	r3, #4
 8015b46:	e08f      	b.n	8015c68 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	0a5b      	lsrs	r3, r3, #9
 8015b4c:	68fa      	ldr	r2, [r7, #12]
 8015b4e:	8952      	ldrh	r2, [r2, #10]
 8015b50:	3a01      	subs	r2, #1
 8015b52:	4013      	ands	r3, r2
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d17a      	bne.n	8015c4e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015b58:	687a      	ldr	r2, [r7, #4]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	699b      	ldr	r3, [r3, #24]
 8015b5e:	4619      	mov	r1, r3
 8015b60:	4610      	mov	r0, r2
 8015b62:	f7ff fc80 	bl	8015466 <get_fat>
 8015b66:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	2b01      	cmp	r3, #1
 8015b6c:	d801      	bhi.n	8015b72 <dir_next+0x8c>
 8015b6e:	2302      	movs	r3, #2
 8015b70:	e07a      	b.n	8015c68 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015b72:	697b      	ldr	r3, [r7, #20]
 8015b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b78:	d101      	bne.n	8015b7e <dir_next+0x98>
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	e074      	b.n	8015c68 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	699b      	ldr	r3, [r3, #24]
 8015b82:	697a      	ldr	r2, [r7, #20]
 8015b84:	429a      	cmp	r2, r3
 8015b86:	d358      	bcc.n	8015c3a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d104      	bne.n	8015b98 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	2200      	movs	r2, #0
 8015b92:	61da      	str	r2, [r3, #28]
 8015b94:	2304      	movs	r3, #4
 8015b96:	e067      	b.n	8015c68 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015b98:	687a      	ldr	r2, [r7, #4]
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	699b      	ldr	r3, [r3, #24]
 8015b9e:	4619      	mov	r1, r3
 8015ba0:	4610      	mov	r0, r2
 8015ba2:	f7ff fe59 	bl	8015858 <create_chain>
 8015ba6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d101      	bne.n	8015bb2 <dir_next+0xcc>
 8015bae:	2307      	movs	r3, #7
 8015bb0:	e05a      	b.n	8015c68 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015bb2:	697b      	ldr	r3, [r7, #20]
 8015bb4:	2b01      	cmp	r3, #1
 8015bb6:	d101      	bne.n	8015bbc <dir_next+0xd6>
 8015bb8:	2302      	movs	r3, #2
 8015bba:	e055      	b.n	8015c68 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bc2:	d101      	bne.n	8015bc8 <dir_next+0xe2>
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	e04f      	b.n	8015c68 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015bc8:	68f8      	ldr	r0, [r7, #12]
 8015bca:	f7ff fb4d 	bl	8015268 <sync_window>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d001      	beq.n	8015bd8 <dir_next+0xf2>
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	e047      	b.n	8015c68 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	3334      	adds	r3, #52	; 0x34
 8015bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015be0:	2100      	movs	r1, #0
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7ff f977 	bl	8014ed6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015be8:	2300      	movs	r3, #0
 8015bea:	613b      	str	r3, [r7, #16]
 8015bec:	6979      	ldr	r1, [r7, #20]
 8015bee:	68f8      	ldr	r0, [r7, #12]
 8015bf0:	f7ff fc1a 	bl	8015428 <clust2sect>
 8015bf4:	4602      	mov	r2, r0
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8015bfa:	e012      	b.n	8015c22 <dir_next+0x13c>
						fs->wflag = 1;
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	2201      	movs	r2, #1
 8015c00:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015c02:	68f8      	ldr	r0, [r7, #12]
 8015c04:	f7ff fb30 	bl	8015268 <sync_window>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d001      	beq.n	8015c12 <dir_next+0x12c>
 8015c0e:	2301      	movs	r3, #1
 8015c10:	e02a      	b.n	8015c68 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	3301      	adds	r3, #1
 8015c16:	613b      	str	r3, [r7, #16]
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c1c:	1c5a      	adds	r2, r3, #1
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	631a      	str	r2, [r3, #48]	; 0x30
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	895b      	ldrh	r3, [r3, #10]
 8015c26:	461a      	mov	r2, r3
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	4293      	cmp	r3, r2
 8015c2c:	d3e6      	bcc.n	8015bfc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	1ad2      	subs	r2, r2, r3
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	697a      	ldr	r2, [r7, #20]
 8015c3e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8015c40:	6979      	ldr	r1, [r7, #20]
 8015c42:	68f8      	ldr	r0, [r7, #12]
 8015c44:	f7ff fbf0 	bl	8015428 <clust2sect>
 8015c48:	4602      	mov	r2, r0
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	68ba      	ldr	r2, [r7, #8]
 8015c52:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015c5a:	68bb      	ldr	r3, [r7, #8]
 8015c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015c60:	441a      	add	r2, r3
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015c66:	2300      	movs	r3, #0
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3718      	adds	r7, #24
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b086      	sub	sp, #24
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
 8015c78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015c80:	2100      	movs	r1, #0
 8015c82:	6878      	ldr	r0, [r7, #4]
 8015c84:	f7ff feb4 	bl	80159f0 <dir_sdi>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015c8c:	7dfb      	ldrb	r3, [r7, #23]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d12b      	bne.n	8015cea <dir_alloc+0x7a>
		n = 0;
 8015c92:	2300      	movs	r3, #0
 8015c94:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	69db      	ldr	r3, [r3, #28]
 8015c9a:	4619      	mov	r1, r3
 8015c9c:	68f8      	ldr	r0, [r7, #12]
 8015c9e:	f7ff fb27 	bl	80152f0 <move_window>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015ca6:	7dfb      	ldrb	r3, [r7, #23]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d11d      	bne.n	8015ce8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	6a1b      	ldr	r3, [r3, #32]
 8015cb0:	781b      	ldrb	r3, [r3, #0]
 8015cb2:	2be5      	cmp	r3, #229	; 0xe5
 8015cb4:	d004      	beq.n	8015cc0 <dir_alloc+0x50>
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	6a1b      	ldr	r3, [r3, #32]
 8015cba:	781b      	ldrb	r3, [r3, #0]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d107      	bne.n	8015cd0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015cc0:	693b      	ldr	r3, [r7, #16]
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	613b      	str	r3, [r7, #16]
 8015cc6:	693a      	ldr	r2, [r7, #16]
 8015cc8:	683b      	ldr	r3, [r7, #0]
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	d102      	bne.n	8015cd4 <dir_alloc+0x64>
 8015cce:	e00c      	b.n	8015cea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015cd4:	2101      	movs	r1, #1
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	f7ff ff05 	bl	8015ae6 <dir_next>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015ce0:	7dfb      	ldrb	r3, [r7, #23]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d0d7      	beq.n	8015c96 <dir_alloc+0x26>
 8015ce6:	e000      	b.n	8015cea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8015ce8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015cea:	7dfb      	ldrb	r3, [r7, #23]
 8015cec:	2b04      	cmp	r3, #4
 8015cee:	d101      	bne.n	8015cf4 <dir_alloc+0x84>
 8015cf0:	2307      	movs	r3, #7
 8015cf2:	75fb      	strb	r3, [r7, #23]
	return res;
 8015cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3718      	adds	r7, #24
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}

08015cfe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015cfe:	b580      	push	{r7, lr}
 8015d00:	b084      	sub	sp, #16
 8015d02:	af00      	add	r7, sp, #0
 8015d04:	6078      	str	r0, [r7, #4]
 8015d06:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	331a      	adds	r3, #26
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f7ff f83f 	bl	8014d90 <ld_word>
 8015d12:	4603      	mov	r3, r0
 8015d14:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	781b      	ldrb	r3, [r3, #0]
 8015d1a:	2b03      	cmp	r3, #3
 8015d1c:	d109      	bne.n	8015d32 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015d1e:	683b      	ldr	r3, [r7, #0]
 8015d20:	3314      	adds	r3, #20
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7ff f834 	bl	8014d90 <ld_word>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	041b      	lsls	r3, r3, #16
 8015d2c:	68fa      	ldr	r2, [r7, #12]
 8015d2e:	4313      	orrs	r3, r2
 8015d30:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015d32:	68fb      	ldr	r3, [r7, #12]
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	3710      	adds	r7, #16
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}

08015d3c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b084      	sub	sp, #16
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	60f8      	str	r0, [r7, #12]
 8015d44:	60b9      	str	r1, [r7, #8]
 8015d46:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	331a      	adds	r3, #26
 8015d4c:	687a      	ldr	r2, [r7, #4]
 8015d4e:	b292      	uxth	r2, r2
 8015d50:	4611      	mov	r1, r2
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7ff f857 	bl	8014e06 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	781b      	ldrb	r3, [r3, #0]
 8015d5c:	2b03      	cmp	r3, #3
 8015d5e:	d109      	bne.n	8015d74 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015d60:	68bb      	ldr	r3, [r7, #8]
 8015d62:	f103 0214 	add.w	r2, r3, #20
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	0c1b      	lsrs	r3, r3, #16
 8015d6a:	b29b      	uxth	r3, r3
 8015d6c:	4619      	mov	r1, r3
 8015d6e:	4610      	mov	r0, r2
 8015d70:	f7ff f849 	bl	8014e06 <st_word>
	}
}
 8015d74:	bf00      	nop
 8015d76:	3710      	adds	r7, #16
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	bd80      	pop	{r7, pc}

08015d7c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8015d7c:	b590      	push	{r4, r7, lr}
 8015d7e:	b087      	sub	sp, #28
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
 8015d84:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8015d86:	683b      	ldr	r3, [r7, #0]
 8015d88:	331a      	adds	r3, #26
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7ff f800 	bl	8014d90 <ld_word>
 8015d90:	4603      	mov	r3, r0
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d001      	beq.n	8015d9a <cmp_lfn+0x1e>
 8015d96:	2300      	movs	r3, #0
 8015d98:	e059      	b.n	8015e4e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	781b      	ldrb	r3, [r3, #0]
 8015d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015da2:	1e5a      	subs	r2, r3, #1
 8015da4:	4613      	mov	r3, r2
 8015da6:	005b      	lsls	r3, r3, #1
 8015da8:	4413      	add	r3, r2
 8015daa:	009b      	lsls	r3, r3, #2
 8015dac:	4413      	add	r3, r2
 8015dae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015db0:	2301      	movs	r3, #1
 8015db2:	81fb      	strh	r3, [r7, #14]
 8015db4:	2300      	movs	r3, #0
 8015db6:	613b      	str	r3, [r7, #16]
 8015db8:	e033      	b.n	8015e22 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015dba:	4a27      	ldr	r2, [pc, #156]	; (8015e58 <cmp_lfn+0xdc>)
 8015dbc:	693b      	ldr	r3, [r7, #16]
 8015dbe:	4413      	add	r3, r2
 8015dc0:	781b      	ldrb	r3, [r3, #0]
 8015dc2:	461a      	mov	r2, r3
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	4413      	add	r3, r2
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f7fe ffe1 	bl	8014d90 <ld_word>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8015dd2:	89fb      	ldrh	r3, [r7, #14]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d01a      	beq.n	8015e0e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015dd8:	697b      	ldr	r3, [r7, #20]
 8015dda:	2bfe      	cmp	r3, #254	; 0xfe
 8015ddc:	d812      	bhi.n	8015e04 <cmp_lfn+0x88>
 8015dde:	89bb      	ldrh	r3, [r7, #12]
 8015de0:	4618      	mov	r0, r3
 8015de2:	f002 fb45 	bl	8018470 <ff_wtoupper>
 8015de6:	4603      	mov	r3, r0
 8015de8:	461c      	mov	r4, r3
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	1c5a      	adds	r2, r3, #1
 8015dee:	617a      	str	r2, [r7, #20]
 8015df0:	005b      	lsls	r3, r3, #1
 8015df2:	687a      	ldr	r2, [r7, #4]
 8015df4:	4413      	add	r3, r2
 8015df6:	881b      	ldrh	r3, [r3, #0]
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f002 fb39 	bl	8018470 <ff_wtoupper>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	429c      	cmp	r4, r3
 8015e02:	d001      	beq.n	8015e08 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8015e04:	2300      	movs	r3, #0
 8015e06:	e022      	b.n	8015e4e <cmp_lfn+0xd2>
			}
			wc = uc;
 8015e08:	89bb      	ldrh	r3, [r7, #12]
 8015e0a:	81fb      	strh	r3, [r7, #14]
 8015e0c:	e006      	b.n	8015e1c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015e0e:	89bb      	ldrh	r3, [r7, #12]
 8015e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e14:	4293      	cmp	r3, r2
 8015e16:	d001      	beq.n	8015e1c <cmp_lfn+0xa0>
 8015e18:	2300      	movs	r3, #0
 8015e1a:	e018      	b.n	8015e4e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015e1c:	693b      	ldr	r3, [r7, #16]
 8015e1e:	3301      	adds	r3, #1
 8015e20:	613b      	str	r3, [r7, #16]
 8015e22:	693b      	ldr	r3, [r7, #16]
 8015e24:	2b0c      	cmp	r3, #12
 8015e26:	d9c8      	bls.n	8015dba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8015e28:	683b      	ldr	r3, [r7, #0]
 8015e2a:	781b      	ldrb	r3, [r3, #0]
 8015e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d00b      	beq.n	8015e4c <cmp_lfn+0xd0>
 8015e34:	89fb      	ldrh	r3, [r7, #14]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d008      	beq.n	8015e4c <cmp_lfn+0xd0>
 8015e3a:	697b      	ldr	r3, [r7, #20]
 8015e3c:	005b      	lsls	r3, r3, #1
 8015e3e:	687a      	ldr	r2, [r7, #4]
 8015e40:	4413      	add	r3, r2
 8015e42:	881b      	ldrh	r3, [r3, #0]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d001      	beq.n	8015e4c <cmp_lfn+0xd0>
 8015e48:	2300      	movs	r3, #0
 8015e4a:	e000      	b.n	8015e4e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8015e4c:	2301      	movs	r3, #1
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	371c      	adds	r7, #28
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd90      	pop	{r4, r7, pc}
 8015e56:	bf00      	nop
 8015e58:	08022964 	.word	0x08022964

08015e5c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b086      	sub	sp, #24
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
 8015e64:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	331a      	adds	r3, #26
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f7fe ff90 	bl	8014d90 <ld_word>
 8015e70:	4603      	mov	r3, r0
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d001      	beq.n	8015e7a <pick_lfn+0x1e>
 8015e76:	2300      	movs	r3, #0
 8015e78:	e04d      	b.n	8015f16 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	781b      	ldrb	r3, [r3, #0]
 8015e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015e82:	1e5a      	subs	r2, r3, #1
 8015e84:	4613      	mov	r3, r2
 8015e86:	005b      	lsls	r3, r3, #1
 8015e88:	4413      	add	r3, r2
 8015e8a:	009b      	lsls	r3, r3, #2
 8015e8c:	4413      	add	r3, r2
 8015e8e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015e90:	2301      	movs	r3, #1
 8015e92:	81fb      	strh	r3, [r7, #14]
 8015e94:	2300      	movs	r3, #0
 8015e96:	613b      	str	r3, [r7, #16]
 8015e98:	e028      	b.n	8015eec <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015e9a:	4a21      	ldr	r2, [pc, #132]	; (8015f20 <pick_lfn+0xc4>)
 8015e9c:	693b      	ldr	r3, [r7, #16]
 8015e9e:	4413      	add	r3, r2
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	461a      	mov	r2, r3
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	4413      	add	r3, r2
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7fe ff71 	bl	8014d90 <ld_word>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8015eb2:	89fb      	ldrh	r3, [r7, #14]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d00f      	beq.n	8015ed8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8015eb8:	697b      	ldr	r3, [r7, #20]
 8015eba:	2bfe      	cmp	r3, #254	; 0xfe
 8015ebc:	d901      	bls.n	8015ec2 <pick_lfn+0x66>
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	e029      	b.n	8015f16 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8015ec2:	89bb      	ldrh	r3, [r7, #12]
 8015ec4:	81fb      	strh	r3, [r7, #14]
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	1c5a      	adds	r2, r3, #1
 8015eca:	617a      	str	r2, [r7, #20]
 8015ecc:	005b      	lsls	r3, r3, #1
 8015ece:	687a      	ldr	r2, [r7, #4]
 8015ed0:	4413      	add	r3, r2
 8015ed2:	89fa      	ldrh	r2, [r7, #14]
 8015ed4:	801a      	strh	r2, [r3, #0]
 8015ed6:	e006      	b.n	8015ee6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015ed8:	89bb      	ldrh	r3, [r7, #12]
 8015eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ede:	4293      	cmp	r3, r2
 8015ee0:	d001      	beq.n	8015ee6 <pick_lfn+0x8a>
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	e017      	b.n	8015f16 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015ee6:	693b      	ldr	r3, [r7, #16]
 8015ee8:	3301      	adds	r3, #1
 8015eea:	613b      	str	r3, [r7, #16]
 8015eec:	693b      	ldr	r3, [r7, #16]
 8015eee:	2b0c      	cmp	r3, #12
 8015ef0:	d9d3      	bls.n	8015e9a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	781b      	ldrb	r3, [r3, #0]
 8015ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d00a      	beq.n	8015f14 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	2bfe      	cmp	r3, #254	; 0xfe
 8015f02:	d901      	bls.n	8015f08 <pick_lfn+0xac>
 8015f04:	2300      	movs	r3, #0
 8015f06:	e006      	b.n	8015f16 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8015f08:	697b      	ldr	r3, [r7, #20]
 8015f0a:	005b      	lsls	r3, r3, #1
 8015f0c:	687a      	ldr	r2, [r7, #4]
 8015f0e:	4413      	add	r3, r2
 8015f10:	2200      	movs	r2, #0
 8015f12:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8015f14:	2301      	movs	r3, #1
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3718      	adds	r7, #24
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}
 8015f1e:	bf00      	nop
 8015f20:	08022964 	.word	0x08022964

08015f24 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8015f24:	b580      	push	{r7, lr}
 8015f26:	b088      	sub	sp, #32
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	60f8      	str	r0, [r7, #12]
 8015f2c:	60b9      	str	r1, [r7, #8]
 8015f2e:	4611      	mov	r1, r2
 8015f30:	461a      	mov	r2, r3
 8015f32:	460b      	mov	r3, r1
 8015f34:	71fb      	strb	r3, [r7, #7]
 8015f36:	4613      	mov	r3, r2
 8015f38:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	330d      	adds	r3, #13
 8015f3e:	79ba      	ldrb	r2, [r7, #6]
 8015f40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	330b      	adds	r3, #11
 8015f46:	220f      	movs	r2, #15
 8015f48:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8015f4a:	68bb      	ldr	r3, [r7, #8]
 8015f4c:	330c      	adds	r3, #12
 8015f4e:	2200      	movs	r2, #0
 8015f50:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8015f52:	68bb      	ldr	r3, [r7, #8]
 8015f54:	331a      	adds	r3, #26
 8015f56:	2100      	movs	r1, #0
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7fe ff54 	bl	8014e06 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8015f5e:	79fb      	ldrb	r3, [r7, #7]
 8015f60:	1e5a      	subs	r2, r3, #1
 8015f62:	4613      	mov	r3, r2
 8015f64:	005b      	lsls	r3, r3, #1
 8015f66:	4413      	add	r3, r2
 8015f68:	009b      	lsls	r3, r3, #2
 8015f6a:	4413      	add	r3, r2
 8015f6c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8015f6e:	2300      	movs	r3, #0
 8015f70:	82fb      	strh	r3, [r7, #22]
 8015f72:	2300      	movs	r3, #0
 8015f74:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8015f76:	8afb      	ldrh	r3, [r7, #22]
 8015f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f7c:	4293      	cmp	r3, r2
 8015f7e:	d007      	beq.n	8015f90 <put_lfn+0x6c>
 8015f80:	69fb      	ldr	r3, [r7, #28]
 8015f82:	1c5a      	adds	r2, r3, #1
 8015f84:	61fa      	str	r2, [r7, #28]
 8015f86:	005b      	lsls	r3, r3, #1
 8015f88:	68fa      	ldr	r2, [r7, #12]
 8015f8a:	4413      	add	r3, r2
 8015f8c:	881b      	ldrh	r3, [r3, #0]
 8015f8e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8015f90:	4a17      	ldr	r2, [pc, #92]	; (8015ff0 <put_lfn+0xcc>)
 8015f92:	69bb      	ldr	r3, [r7, #24]
 8015f94:	4413      	add	r3, r2
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	461a      	mov	r2, r3
 8015f9a:	68bb      	ldr	r3, [r7, #8]
 8015f9c:	4413      	add	r3, r2
 8015f9e:	8afa      	ldrh	r2, [r7, #22]
 8015fa0:	4611      	mov	r1, r2
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7fe ff2f 	bl	8014e06 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015fa8:	8afb      	ldrh	r3, [r7, #22]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d102      	bne.n	8015fb4 <put_lfn+0x90>
 8015fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fb2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8015fb4:	69bb      	ldr	r3, [r7, #24]
 8015fb6:	3301      	adds	r3, #1
 8015fb8:	61bb      	str	r3, [r7, #24]
 8015fba:	69bb      	ldr	r3, [r7, #24]
 8015fbc:	2b0c      	cmp	r3, #12
 8015fbe:	d9da      	bls.n	8015f76 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8015fc0:	8afb      	ldrh	r3, [r7, #22]
 8015fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015fc6:	4293      	cmp	r3, r2
 8015fc8:	d006      	beq.n	8015fd8 <put_lfn+0xb4>
 8015fca:	69fb      	ldr	r3, [r7, #28]
 8015fcc:	005b      	lsls	r3, r3, #1
 8015fce:	68fa      	ldr	r2, [r7, #12]
 8015fd0:	4413      	add	r3, r2
 8015fd2:	881b      	ldrh	r3, [r3, #0]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d103      	bne.n	8015fe0 <put_lfn+0xbc>
 8015fd8:	79fb      	ldrb	r3, [r7, #7]
 8015fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fde:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8015fe0:	68bb      	ldr	r3, [r7, #8]
 8015fe2:	79fa      	ldrb	r2, [r7, #7]
 8015fe4:	701a      	strb	r2, [r3, #0]
}
 8015fe6:	bf00      	nop
 8015fe8:	3720      	adds	r7, #32
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}
 8015fee:	bf00      	nop
 8015ff0:	08022964 	.word	0x08022964

08015ff4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b08c      	sub	sp, #48	; 0x30
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	60f8      	str	r0, [r7, #12]
 8015ffc:	60b9      	str	r1, [r7, #8]
 8015ffe:	607a      	str	r2, [r7, #4]
 8016000:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8016002:	220b      	movs	r2, #11
 8016004:	68b9      	ldr	r1, [r7, #8]
 8016006:	68f8      	ldr	r0, [r7, #12]
 8016008:	f7fe ff44 	bl	8014e94 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801600c:	683b      	ldr	r3, [r7, #0]
 801600e:	2b05      	cmp	r3, #5
 8016010:	d92b      	bls.n	801606a <gen_numname+0x76>
		sr = seq;
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8016016:	e022      	b.n	801605e <gen_numname+0x6a>
			wc = *lfn++;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	1c9a      	adds	r2, r3, #2
 801601c:	607a      	str	r2, [r7, #4]
 801601e:	881b      	ldrh	r3, [r3, #0]
 8016020:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8016022:	2300      	movs	r3, #0
 8016024:	62bb      	str	r3, [r7, #40]	; 0x28
 8016026:	e017      	b.n	8016058 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8016028:	69fb      	ldr	r3, [r7, #28]
 801602a:	005a      	lsls	r2, r3, #1
 801602c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801602e:	f003 0301 	and.w	r3, r3, #1
 8016032:	4413      	add	r3, r2
 8016034:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8016036:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016038:	085b      	lsrs	r3, r3, #1
 801603a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801603c:	69fb      	ldr	r3, [r7, #28]
 801603e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016042:	2b00      	cmp	r3, #0
 8016044:	d005      	beq.n	8016052 <gen_numname+0x5e>
 8016046:	69fb      	ldr	r3, [r7, #28]
 8016048:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 801604c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8016050:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8016052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016054:	3301      	adds	r3, #1
 8016056:	62bb      	str	r3, [r7, #40]	; 0x28
 8016058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801605a:	2b0f      	cmp	r3, #15
 801605c:	d9e4      	bls.n	8016028 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	881b      	ldrh	r3, [r3, #0]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d1d8      	bne.n	8016018 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8016066:	69fb      	ldr	r3, [r7, #28]
 8016068:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801606a:	2307      	movs	r3, #7
 801606c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	b2db      	uxtb	r3, r3
 8016072:	f003 030f 	and.w	r3, r3, #15
 8016076:	b2db      	uxtb	r3, r3
 8016078:	3330      	adds	r3, #48	; 0x30
 801607a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801607e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016082:	2b39      	cmp	r3, #57	; 0x39
 8016084:	d904      	bls.n	8016090 <gen_numname+0x9c>
 8016086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801608a:	3307      	adds	r3, #7
 801608c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8016090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016092:	1e5a      	subs	r2, r3, #1
 8016094:	62ba      	str	r2, [r7, #40]	; 0x28
 8016096:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801609a:	4413      	add	r3, r2
 801609c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80160a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	091b      	lsrs	r3, r3, #4
 80160a8:	603b      	str	r3, [r7, #0]
	} while (seq);
 80160aa:	683b      	ldr	r3, [r7, #0]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d1de      	bne.n	801606e <gen_numname+0x7a>
	ns[i] = '~';
 80160b0:	f107 0214 	add.w	r2, r7, #20
 80160b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b6:	4413      	add	r3, r2
 80160b8:	227e      	movs	r2, #126	; 0x7e
 80160ba:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80160bc:	2300      	movs	r3, #0
 80160be:	627b      	str	r3, [r7, #36]	; 0x24
 80160c0:	e002      	b.n	80160c8 <gen_numname+0xd4>
 80160c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c4:	3301      	adds	r3, #1
 80160c6:	627b      	str	r3, [r7, #36]	; 0x24
 80160c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d205      	bcs.n	80160dc <gen_numname+0xe8>
 80160d0:	68fa      	ldr	r2, [r7, #12]
 80160d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160d4:	4413      	add	r3, r2
 80160d6:	781b      	ldrb	r3, [r3, #0]
 80160d8:	2b20      	cmp	r3, #32
 80160da:	d1f2      	bne.n	80160c2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80160dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160de:	2b07      	cmp	r3, #7
 80160e0:	d808      	bhi.n	80160f4 <gen_numname+0x100>
 80160e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160e4:	1c5a      	adds	r2, r3, #1
 80160e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80160e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80160ec:	4413      	add	r3, r2
 80160ee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80160f2:	e000      	b.n	80160f6 <gen_numname+0x102>
 80160f4:	2120      	movs	r1, #32
 80160f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160f8:	1c5a      	adds	r2, r3, #1
 80160fa:	627a      	str	r2, [r7, #36]	; 0x24
 80160fc:	68fa      	ldr	r2, [r7, #12]
 80160fe:	4413      	add	r3, r2
 8016100:	460a      	mov	r2, r1
 8016102:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8016104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016106:	2b07      	cmp	r3, #7
 8016108:	d9e8      	bls.n	80160dc <gen_numname+0xe8>
}
 801610a:	bf00      	nop
 801610c:	bf00      	nop
 801610e:	3730      	adds	r7, #48	; 0x30
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}

08016114 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8016114:	b480      	push	{r7}
 8016116:	b085      	sub	sp, #20
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801611c:	2300      	movs	r3, #0
 801611e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8016120:	230b      	movs	r3, #11
 8016122:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8016124:	7bfb      	ldrb	r3, [r7, #15]
 8016126:	b2da      	uxtb	r2, r3
 8016128:	0852      	lsrs	r2, r2, #1
 801612a:	01db      	lsls	r3, r3, #7
 801612c:	4313      	orrs	r3, r2
 801612e:	b2da      	uxtb	r2, r3
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	1c59      	adds	r1, r3, #1
 8016134:	6079      	str	r1, [r7, #4]
 8016136:	781b      	ldrb	r3, [r3, #0]
 8016138:	4413      	add	r3, r2
 801613a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801613c:	68bb      	ldr	r3, [r7, #8]
 801613e:	3b01      	subs	r3, #1
 8016140:	60bb      	str	r3, [r7, #8]
 8016142:	68bb      	ldr	r3, [r7, #8]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d1ed      	bne.n	8016124 <sum_sfn+0x10>
	return sum;
 8016148:	7bfb      	ldrb	r3, [r7, #15]
}
 801614a:	4618      	mov	r0, r3
 801614c:	3714      	adds	r7, #20
 801614e:	46bd      	mov	sp, r7
 8016150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016154:	4770      	bx	lr

08016156 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8016156:	b580      	push	{r7, lr}
 8016158:	b086      	sub	sp, #24
 801615a:	af00      	add	r7, sp, #0
 801615c:	6078      	str	r0, [r7, #4]
 801615e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8016160:	2304      	movs	r3, #4
 8016162:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801616a:	23ff      	movs	r3, #255	; 0xff
 801616c:	757b      	strb	r3, [r7, #21]
 801616e:	23ff      	movs	r3, #255	; 0xff
 8016170:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8016172:	e081      	b.n	8016278 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	69db      	ldr	r3, [r3, #28]
 8016178:	4619      	mov	r1, r3
 801617a:	6938      	ldr	r0, [r7, #16]
 801617c:	f7ff f8b8 	bl	80152f0 <move_window>
 8016180:	4603      	mov	r3, r0
 8016182:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016184:	7dfb      	ldrb	r3, [r7, #23]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d17c      	bne.n	8016284 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	6a1b      	ldr	r3, [r3, #32]
 801618e:	781b      	ldrb	r3, [r3, #0]
 8016190:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8016192:	7dbb      	ldrb	r3, [r7, #22]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d102      	bne.n	801619e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8016198:	2304      	movs	r3, #4
 801619a:	75fb      	strb	r3, [r7, #23]
 801619c:	e077      	b.n	801628e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	6a1b      	ldr	r3, [r3, #32]
 80161a2:	330b      	adds	r3, #11
 80161a4:	781b      	ldrb	r3, [r3, #0]
 80161a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80161aa:	73fb      	strb	r3, [r7, #15]
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	7bfa      	ldrb	r2, [r7, #15]
 80161b0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80161b2:	7dbb      	ldrb	r3, [r7, #22]
 80161b4:	2be5      	cmp	r3, #229	; 0xe5
 80161b6:	d00e      	beq.n	80161d6 <dir_read+0x80>
 80161b8:	7dbb      	ldrb	r3, [r7, #22]
 80161ba:	2b2e      	cmp	r3, #46	; 0x2e
 80161bc:	d00b      	beq.n	80161d6 <dir_read+0x80>
 80161be:	7bfb      	ldrb	r3, [r7, #15]
 80161c0:	f023 0320 	bic.w	r3, r3, #32
 80161c4:	2b08      	cmp	r3, #8
 80161c6:	bf0c      	ite	eq
 80161c8:	2301      	moveq	r3, #1
 80161ca:	2300      	movne	r3, #0
 80161cc:	b2db      	uxtb	r3, r3
 80161ce:	461a      	mov	r2, r3
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	4293      	cmp	r3, r2
 80161d4:	d002      	beq.n	80161dc <dir_read+0x86>
				ord = 0xFF;
 80161d6:	23ff      	movs	r3, #255	; 0xff
 80161d8:	757b      	strb	r3, [r7, #21]
 80161da:	e044      	b.n	8016266 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80161dc:	7bfb      	ldrb	r3, [r7, #15]
 80161de:	2b0f      	cmp	r3, #15
 80161e0:	d12f      	bne.n	8016242 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80161e2:	7dbb      	ldrb	r3, [r7, #22]
 80161e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d00d      	beq.n	8016208 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	6a1b      	ldr	r3, [r3, #32]
 80161f0:	7b5b      	ldrb	r3, [r3, #13]
 80161f2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80161f4:	7dbb      	ldrb	r3, [r7, #22]
 80161f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80161fa:	75bb      	strb	r3, [r7, #22]
 80161fc:	7dbb      	ldrb	r3, [r7, #22]
 80161fe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	695a      	ldr	r2, [r3, #20]
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8016208:	7dba      	ldrb	r2, [r7, #22]
 801620a:	7d7b      	ldrb	r3, [r7, #21]
 801620c:	429a      	cmp	r2, r3
 801620e:	d115      	bne.n	801623c <dir_read+0xe6>
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	6a1b      	ldr	r3, [r3, #32]
 8016214:	330d      	adds	r3, #13
 8016216:	781b      	ldrb	r3, [r3, #0]
 8016218:	7d3a      	ldrb	r2, [r7, #20]
 801621a:	429a      	cmp	r2, r3
 801621c:	d10e      	bne.n	801623c <dir_read+0xe6>
 801621e:	693b      	ldr	r3, [r7, #16]
 8016220:	68da      	ldr	r2, [r3, #12]
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	6a1b      	ldr	r3, [r3, #32]
 8016226:	4619      	mov	r1, r3
 8016228:	4610      	mov	r0, r2
 801622a:	f7ff fe17 	bl	8015e5c <pick_lfn>
 801622e:	4603      	mov	r3, r0
 8016230:	2b00      	cmp	r3, #0
 8016232:	d003      	beq.n	801623c <dir_read+0xe6>
 8016234:	7d7b      	ldrb	r3, [r7, #21]
 8016236:	3b01      	subs	r3, #1
 8016238:	b2db      	uxtb	r3, r3
 801623a:	e000      	b.n	801623e <dir_read+0xe8>
 801623c:	23ff      	movs	r3, #255	; 0xff
 801623e:	757b      	strb	r3, [r7, #21]
 8016240:	e011      	b.n	8016266 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8016242:	7d7b      	ldrb	r3, [r7, #21]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d109      	bne.n	801625c <dir_read+0x106>
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	6a1b      	ldr	r3, [r3, #32]
 801624c:	4618      	mov	r0, r3
 801624e:	f7ff ff61 	bl	8016114 <sum_sfn>
 8016252:	4603      	mov	r3, r0
 8016254:	461a      	mov	r2, r3
 8016256:	7d3b      	ldrb	r3, [r7, #20]
 8016258:	4293      	cmp	r3, r2
 801625a:	d015      	beq.n	8016288 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	f04f 32ff 	mov.w	r2, #4294967295
 8016262:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8016264:	e010      	b.n	8016288 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8016266:	2100      	movs	r1, #0
 8016268:	6878      	ldr	r0, [r7, #4]
 801626a:	f7ff fc3c 	bl	8015ae6 <dir_next>
 801626e:	4603      	mov	r3, r0
 8016270:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016272:	7dfb      	ldrb	r3, [r7, #23]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d109      	bne.n	801628c <dir_read+0x136>
	while (dp->sect) {
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	69db      	ldr	r3, [r3, #28]
 801627c:	2b00      	cmp	r3, #0
 801627e:	f47f af79 	bne.w	8016174 <dir_read+0x1e>
 8016282:	e004      	b.n	801628e <dir_read+0x138>
		if (res != FR_OK) break;
 8016284:	bf00      	nop
 8016286:	e002      	b.n	801628e <dir_read+0x138>
					break;
 8016288:	bf00      	nop
 801628a:	e000      	b.n	801628e <dir_read+0x138>
		if (res != FR_OK) break;
 801628c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801628e:	7dfb      	ldrb	r3, [r7, #23]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d002      	beq.n	801629a <dir_read+0x144>
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2200      	movs	r2, #0
 8016298:	61da      	str	r2, [r3, #28]
	return res;
 801629a:	7dfb      	ldrb	r3, [r7, #23]
}
 801629c:	4618      	mov	r0, r3
 801629e:	3718      	adds	r7, #24
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bd80      	pop	{r7, pc}

080162a4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b086      	sub	sp, #24
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80162b2:	2100      	movs	r1, #0
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f7ff fb9b 	bl	80159f0 <dir_sdi>
 80162ba:	4603      	mov	r3, r0
 80162bc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80162be:	7dfb      	ldrb	r3, [r7, #23]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d001      	beq.n	80162c8 <dir_find+0x24>
 80162c4:	7dfb      	ldrb	r3, [r7, #23]
 80162c6:	e0a9      	b.n	801641c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80162c8:	23ff      	movs	r3, #255	; 0xff
 80162ca:	753b      	strb	r3, [r7, #20]
 80162cc:	7d3b      	ldrb	r3, [r7, #20]
 80162ce:	757b      	strb	r3, [r7, #21]
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	f04f 32ff 	mov.w	r2, #4294967295
 80162d6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	69db      	ldr	r3, [r3, #28]
 80162dc:	4619      	mov	r1, r3
 80162de:	6938      	ldr	r0, [r7, #16]
 80162e0:	f7ff f806 	bl	80152f0 <move_window>
 80162e4:	4603      	mov	r3, r0
 80162e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80162e8:	7dfb      	ldrb	r3, [r7, #23]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	f040 8090 	bne.w	8016410 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	6a1b      	ldr	r3, [r3, #32]
 80162f4:	781b      	ldrb	r3, [r3, #0]
 80162f6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80162f8:	7dbb      	ldrb	r3, [r7, #22]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d102      	bne.n	8016304 <dir_find+0x60>
 80162fe:	2304      	movs	r3, #4
 8016300:	75fb      	strb	r3, [r7, #23]
 8016302:	e08a      	b.n	801641a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	6a1b      	ldr	r3, [r3, #32]
 8016308:	330b      	adds	r3, #11
 801630a:	781b      	ldrb	r3, [r3, #0]
 801630c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016310:	73fb      	strb	r3, [r7, #15]
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	7bfa      	ldrb	r2, [r7, #15]
 8016316:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8016318:	7dbb      	ldrb	r3, [r7, #22]
 801631a:	2be5      	cmp	r3, #229	; 0xe5
 801631c:	d007      	beq.n	801632e <dir_find+0x8a>
 801631e:	7bfb      	ldrb	r3, [r7, #15]
 8016320:	f003 0308 	and.w	r3, r3, #8
 8016324:	2b00      	cmp	r3, #0
 8016326:	d009      	beq.n	801633c <dir_find+0x98>
 8016328:	7bfb      	ldrb	r3, [r7, #15]
 801632a:	2b0f      	cmp	r3, #15
 801632c:	d006      	beq.n	801633c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801632e:	23ff      	movs	r3, #255	; 0xff
 8016330:	757b      	strb	r3, [r7, #21]
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	f04f 32ff 	mov.w	r2, #4294967295
 8016338:	631a      	str	r2, [r3, #48]	; 0x30
 801633a:	e05e      	b.n	80163fa <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801633c:	7bfb      	ldrb	r3, [r7, #15]
 801633e:	2b0f      	cmp	r3, #15
 8016340:	d136      	bne.n	80163b0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801634c:	2b00      	cmp	r3, #0
 801634e:	d154      	bne.n	80163fa <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8016350:	7dbb      	ldrb	r3, [r7, #22]
 8016352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016356:	2b00      	cmp	r3, #0
 8016358:	d00d      	beq.n	8016376 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	6a1b      	ldr	r3, [r3, #32]
 801635e:	7b5b      	ldrb	r3, [r3, #13]
 8016360:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8016362:	7dbb      	ldrb	r3, [r7, #22]
 8016364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016368:	75bb      	strb	r3, [r7, #22]
 801636a:	7dbb      	ldrb	r3, [r7, #22]
 801636c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	695a      	ldr	r2, [r3, #20]
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8016376:	7dba      	ldrb	r2, [r7, #22]
 8016378:	7d7b      	ldrb	r3, [r7, #21]
 801637a:	429a      	cmp	r2, r3
 801637c:	d115      	bne.n	80163aa <dir_find+0x106>
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	6a1b      	ldr	r3, [r3, #32]
 8016382:	330d      	adds	r3, #13
 8016384:	781b      	ldrb	r3, [r3, #0]
 8016386:	7d3a      	ldrb	r2, [r7, #20]
 8016388:	429a      	cmp	r2, r3
 801638a:	d10e      	bne.n	80163aa <dir_find+0x106>
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	68da      	ldr	r2, [r3, #12]
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	6a1b      	ldr	r3, [r3, #32]
 8016394:	4619      	mov	r1, r3
 8016396:	4610      	mov	r0, r2
 8016398:	f7ff fcf0 	bl	8015d7c <cmp_lfn>
 801639c:	4603      	mov	r3, r0
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d003      	beq.n	80163aa <dir_find+0x106>
 80163a2:	7d7b      	ldrb	r3, [r7, #21]
 80163a4:	3b01      	subs	r3, #1
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	e000      	b.n	80163ac <dir_find+0x108>
 80163aa:	23ff      	movs	r3, #255	; 0xff
 80163ac:	757b      	strb	r3, [r7, #21]
 80163ae:	e024      	b.n	80163fa <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80163b0:	7d7b      	ldrb	r3, [r7, #21]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d109      	bne.n	80163ca <dir_find+0x126>
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	6a1b      	ldr	r3, [r3, #32]
 80163ba:	4618      	mov	r0, r3
 80163bc:	f7ff feaa 	bl	8016114 <sum_sfn>
 80163c0:	4603      	mov	r3, r0
 80163c2:	461a      	mov	r2, r3
 80163c4:	7d3b      	ldrb	r3, [r7, #20]
 80163c6:	4293      	cmp	r3, r2
 80163c8:	d024      	beq.n	8016414 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80163d0:	f003 0301 	and.w	r3, r3, #1
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d10a      	bne.n	80163ee <dir_find+0x14a>
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6a18      	ldr	r0, [r3, #32]
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	3324      	adds	r3, #36	; 0x24
 80163e0:	220b      	movs	r2, #11
 80163e2:	4619      	mov	r1, r3
 80163e4:	f7fe fd92 	bl	8014f0c <mem_cmp>
 80163e8:	4603      	mov	r3, r0
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d014      	beq.n	8016418 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80163ee:	23ff      	movs	r3, #255	; 0xff
 80163f0:	757b      	strb	r3, [r7, #21]
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	f04f 32ff 	mov.w	r2, #4294967295
 80163f8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80163fa:	2100      	movs	r1, #0
 80163fc:	6878      	ldr	r0, [r7, #4]
 80163fe:	f7ff fb72 	bl	8015ae6 <dir_next>
 8016402:	4603      	mov	r3, r0
 8016404:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8016406:	7dfb      	ldrb	r3, [r7, #23]
 8016408:	2b00      	cmp	r3, #0
 801640a:	f43f af65 	beq.w	80162d8 <dir_find+0x34>
 801640e:	e004      	b.n	801641a <dir_find+0x176>
		if (res != FR_OK) break;
 8016410:	bf00      	nop
 8016412:	e002      	b.n	801641a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016414:	bf00      	nop
 8016416:	e000      	b.n	801641a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8016418:	bf00      	nop

	return res;
 801641a:	7dfb      	ldrb	r3, [r7, #23]
}
 801641c:	4618      	mov	r0, r3
 801641e:	3718      	adds	r7, #24
 8016420:	46bd      	mov	sp, r7
 8016422:	bd80      	pop	{r7, pc}

08016424 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b08c      	sub	sp, #48	; 0x30
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016438:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801643c:	2b00      	cmp	r3, #0
 801643e:	d001      	beq.n	8016444 <dir_register+0x20>
 8016440:	2306      	movs	r3, #6
 8016442:	e0e0      	b.n	8016606 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8016444:	2300      	movs	r3, #0
 8016446:	627b      	str	r3, [r7, #36]	; 0x24
 8016448:	e002      	b.n	8016450 <dir_register+0x2c>
 801644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801644c:	3301      	adds	r3, #1
 801644e:	627b      	str	r3, [r7, #36]	; 0x24
 8016450:	69fb      	ldr	r3, [r7, #28]
 8016452:	68da      	ldr	r2, [r3, #12]
 8016454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016456:	005b      	lsls	r3, r3, #1
 8016458:	4413      	add	r3, r2
 801645a:	881b      	ldrh	r3, [r3, #0]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d1f4      	bne.n	801644a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8016466:	f107 030c 	add.w	r3, r7, #12
 801646a:	220c      	movs	r2, #12
 801646c:	4618      	mov	r0, r3
 801646e:	f7fe fd11 	bl	8014e94 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8016472:	7dfb      	ldrb	r3, [r7, #23]
 8016474:	f003 0301 	and.w	r3, r3, #1
 8016478:	2b00      	cmp	r3, #0
 801647a:	d032      	beq.n	80164e2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	2240      	movs	r2, #64	; 0x40
 8016480:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8016484:	2301      	movs	r3, #1
 8016486:	62bb      	str	r3, [r7, #40]	; 0x28
 8016488:	e016      	b.n	80164b8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8016490:	69fb      	ldr	r3, [r7, #28]
 8016492:	68da      	ldr	r2, [r3, #12]
 8016494:	f107 010c 	add.w	r1, r7, #12
 8016498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801649a:	f7ff fdab 	bl	8015ff4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801649e:	6878      	ldr	r0, [r7, #4]
 80164a0:	f7ff ff00 	bl	80162a4 <dir_find>
 80164a4:	4603      	mov	r3, r0
 80164a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80164aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d106      	bne.n	80164c0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80164b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164b4:	3301      	adds	r3, #1
 80164b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80164b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ba:	2b63      	cmp	r3, #99	; 0x63
 80164bc:	d9e5      	bls.n	801648a <dir_register+0x66>
 80164be:	e000      	b.n	80164c2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80164c0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80164c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c4:	2b64      	cmp	r3, #100	; 0x64
 80164c6:	d101      	bne.n	80164cc <dir_register+0xa8>
 80164c8:	2307      	movs	r3, #7
 80164ca:	e09c      	b.n	8016606 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80164cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80164d0:	2b04      	cmp	r3, #4
 80164d2:	d002      	beq.n	80164da <dir_register+0xb6>
 80164d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80164d8:	e095      	b.n	8016606 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80164da:	7dfa      	ldrb	r2, [r7, #23]
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80164e2:	7dfb      	ldrb	r3, [r7, #23]
 80164e4:	f003 0302 	and.w	r3, r3, #2
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d007      	beq.n	80164fc <dir_register+0xd8>
 80164ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ee:	330c      	adds	r3, #12
 80164f0:	4a47      	ldr	r2, [pc, #284]	; (8016610 <dir_register+0x1ec>)
 80164f2:	fba2 2303 	umull	r2, r3, r2, r3
 80164f6:	089b      	lsrs	r3, r3, #2
 80164f8:	3301      	adds	r3, #1
 80164fa:	e000      	b.n	80164fe <dir_register+0xda>
 80164fc:	2301      	movs	r3, #1
 80164fe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8016500:	6a39      	ldr	r1, [r7, #32]
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f7ff fbb4 	bl	8015c70 <dir_alloc>
 8016508:	4603      	mov	r3, r0
 801650a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801650e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016512:	2b00      	cmp	r3, #0
 8016514:	d148      	bne.n	80165a8 <dir_register+0x184>
 8016516:	6a3b      	ldr	r3, [r7, #32]
 8016518:	3b01      	subs	r3, #1
 801651a:	623b      	str	r3, [r7, #32]
 801651c:	6a3b      	ldr	r3, [r7, #32]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d042      	beq.n	80165a8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	695a      	ldr	r2, [r3, #20]
 8016526:	6a3b      	ldr	r3, [r7, #32]
 8016528:	015b      	lsls	r3, r3, #5
 801652a:	1ad3      	subs	r3, r2, r3
 801652c:	4619      	mov	r1, r3
 801652e:	6878      	ldr	r0, [r7, #4]
 8016530:	f7ff fa5e 	bl	80159f0 <dir_sdi>
 8016534:	4603      	mov	r3, r0
 8016536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801653a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801653e:	2b00      	cmp	r3, #0
 8016540:	d132      	bne.n	80165a8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	3324      	adds	r3, #36	; 0x24
 8016546:	4618      	mov	r0, r3
 8016548:	f7ff fde4 	bl	8016114 <sum_sfn>
 801654c:	4603      	mov	r3, r0
 801654e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	69db      	ldr	r3, [r3, #28]
 8016554:	4619      	mov	r1, r3
 8016556:	69f8      	ldr	r0, [r7, #28]
 8016558:	f7fe feca 	bl	80152f0 <move_window>
 801655c:	4603      	mov	r3, r0
 801655e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8016562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016566:	2b00      	cmp	r3, #0
 8016568:	d11d      	bne.n	80165a6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801656a:	69fb      	ldr	r3, [r7, #28]
 801656c:	68d8      	ldr	r0, [r3, #12]
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	6a19      	ldr	r1, [r3, #32]
 8016572:	6a3b      	ldr	r3, [r7, #32]
 8016574:	b2da      	uxtb	r2, r3
 8016576:	7efb      	ldrb	r3, [r7, #27]
 8016578:	f7ff fcd4 	bl	8015f24 <put_lfn>
				fs->wflag = 1;
 801657c:	69fb      	ldr	r3, [r7, #28]
 801657e:	2201      	movs	r2, #1
 8016580:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8016582:	2100      	movs	r1, #0
 8016584:	6878      	ldr	r0, [r7, #4]
 8016586:	f7ff faae 	bl	8015ae6 <dir_next>
 801658a:	4603      	mov	r3, r0
 801658c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8016590:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016594:	2b00      	cmp	r3, #0
 8016596:	d107      	bne.n	80165a8 <dir_register+0x184>
 8016598:	6a3b      	ldr	r3, [r7, #32]
 801659a:	3b01      	subs	r3, #1
 801659c:	623b      	str	r3, [r7, #32]
 801659e:	6a3b      	ldr	r3, [r7, #32]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d1d5      	bne.n	8016550 <dir_register+0x12c>
 80165a4:	e000      	b.n	80165a8 <dir_register+0x184>
				if (res != FR_OK) break;
 80165a6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80165a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d128      	bne.n	8016602 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	69db      	ldr	r3, [r3, #28]
 80165b4:	4619      	mov	r1, r3
 80165b6:	69f8      	ldr	r0, [r7, #28]
 80165b8:	f7fe fe9a 	bl	80152f0 <move_window>
 80165bc:	4603      	mov	r3, r0
 80165be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80165c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d11b      	bne.n	8016602 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6a1b      	ldr	r3, [r3, #32]
 80165ce:	2220      	movs	r2, #32
 80165d0:	2100      	movs	r1, #0
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7fe fc7f 	bl	8014ed6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	6a18      	ldr	r0, [r3, #32]
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	3324      	adds	r3, #36	; 0x24
 80165e0:	220b      	movs	r2, #11
 80165e2:	4619      	mov	r1, r3
 80165e4:	f7fe fc56 	bl	8014e94 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	6a1b      	ldr	r3, [r3, #32]
 80165f2:	330c      	adds	r3, #12
 80165f4:	f002 0218 	and.w	r2, r2, #24
 80165f8:	b2d2      	uxtb	r2, r2
 80165fa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80165fc:	69fb      	ldr	r3, [r7, #28]
 80165fe:	2201      	movs	r2, #1
 8016600:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8016602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016606:	4618      	mov	r0, r3
 8016608:	3730      	adds	r7, #48	; 0x30
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	4ec4ec4f 	.word	0x4ec4ec4f

08016614 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b088      	sub	sp, #32
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8016624:	683b      	ldr	r3, [r7, #0]
 8016626:	2200      	movs	r2, #0
 8016628:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	69db      	ldr	r3, [r3, #28]
 801662e:	2b00      	cmp	r3, #0
 8016630:	f000 80c9 	beq.w	80167c6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016638:	f1b3 3fff 	cmp.w	r3, #4294967295
 801663c:	d032      	beq.n	80166a4 <get_fileinfo+0x90>
			i = j = 0;
 801663e:	2300      	movs	r3, #0
 8016640:	61bb      	str	r3, [r7, #24]
 8016642:	69bb      	ldr	r3, [r7, #24]
 8016644:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8016646:	e01b      	b.n	8016680 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8016648:	89fb      	ldrh	r3, [r7, #14]
 801664a:	2100      	movs	r1, #0
 801664c:	4618      	mov	r0, r3
 801664e:	f001 fed3 	bl	80183f8 <ff_convert>
 8016652:	4603      	mov	r3, r0
 8016654:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8016656:	89fb      	ldrh	r3, [r7, #14]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d102      	bne.n	8016662 <get_fileinfo+0x4e>
 801665c:	2300      	movs	r3, #0
 801665e:	61fb      	str	r3, [r7, #28]
 8016660:	e01a      	b.n	8016698 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8016662:	69fb      	ldr	r3, [r7, #28]
 8016664:	2bfe      	cmp	r3, #254	; 0xfe
 8016666:	d902      	bls.n	801666e <get_fileinfo+0x5a>
 8016668:	2300      	movs	r3, #0
 801666a:	61fb      	str	r3, [r7, #28]
 801666c:	e014      	b.n	8016698 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801666e:	69fb      	ldr	r3, [r7, #28]
 8016670:	1c5a      	adds	r2, r3, #1
 8016672:	61fa      	str	r2, [r7, #28]
 8016674:	89fa      	ldrh	r2, [r7, #14]
 8016676:	b2d1      	uxtb	r1, r2
 8016678:	683a      	ldr	r2, [r7, #0]
 801667a:	4413      	add	r3, r2
 801667c:	460a      	mov	r2, r1
 801667e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8016680:	693b      	ldr	r3, [r7, #16]
 8016682:	68da      	ldr	r2, [r3, #12]
 8016684:	69bb      	ldr	r3, [r7, #24]
 8016686:	1c59      	adds	r1, r3, #1
 8016688:	61b9      	str	r1, [r7, #24]
 801668a:	005b      	lsls	r3, r3, #1
 801668c:	4413      	add	r3, r2
 801668e:	881b      	ldrh	r3, [r3, #0]
 8016690:	81fb      	strh	r3, [r7, #14]
 8016692:	89fb      	ldrh	r3, [r7, #14]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d1d7      	bne.n	8016648 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8016698:	683a      	ldr	r2, [r7, #0]
 801669a:	69fb      	ldr	r3, [r7, #28]
 801669c:	4413      	add	r3, r2
 801669e:	3316      	adds	r3, #22
 80166a0:	2200      	movs	r2, #0
 80166a2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80166a4:	2300      	movs	r3, #0
 80166a6:	61bb      	str	r3, [r7, #24]
 80166a8:	69bb      	ldr	r3, [r7, #24]
 80166aa:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80166ac:	683a      	ldr	r2, [r7, #0]
 80166ae:	69fb      	ldr	r3, [r7, #28]
 80166b0:	4413      	add	r3, r2
 80166b2:	3316      	adds	r3, #22
 80166b4:	781b      	ldrb	r3, [r3, #0]
 80166b6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80166b8:	e04c      	b.n	8016754 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	6a1a      	ldr	r2, [r3, #32]
 80166be:	69fb      	ldr	r3, [r7, #28]
 80166c0:	1c59      	adds	r1, r3, #1
 80166c2:	61f9      	str	r1, [r7, #28]
 80166c4:	4413      	add	r3, r2
 80166c6:	781b      	ldrb	r3, [r3, #0]
 80166c8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80166ca:	7dfb      	ldrb	r3, [r7, #23]
 80166cc:	2b20      	cmp	r3, #32
 80166ce:	d100      	bne.n	80166d2 <get_fileinfo+0xbe>
 80166d0:	e040      	b.n	8016754 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80166d2:	7dfb      	ldrb	r3, [r7, #23]
 80166d4:	2b05      	cmp	r3, #5
 80166d6:	d101      	bne.n	80166dc <get_fileinfo+0xc8>
 80166d8:	23e5      	movs	r3, #229	; 0xe5
 80166da:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80166dc:	69fb      	ldr	r3, [r7, #28]
 80166de:	2b09      	cmp	r3, #9
 80166e0:	d10f      	bne.n	8016702 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80166e2:	89bb      	ldrh	r3, [r7, #12]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d105      	bne.n	80166f4 <get_fileinfo+0xe0>
 80166e8:	683a      	ldr	r2, [r7, #0]
 80166ea:	69bb      	ldr	r3, [r7, #24]
 80166ec:	4413      	add	r3, r2
 80166ee:	3316      	adds	r3, #22
 80166f0:	222e      	movs	r2, #46	; 0x2e
 80166f2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80166f4:	69bb      	ldr	r3, [r7, #24]
 80166f6:	1c5a      	adds	r2, r3, #1
 80166f8:	61ba      	str	r2, [r7, #24]
 80166fa:	683a      	ldr	r2, [r7, #0]
 80166fc:	4413      	add	r3, r2
 80166fe:	222e      	movs	r2, #46	; 0x2e
 8016700:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8016702:	683a      	ldr	r2, [r7, #0]
 8016704:	69bb      	ldr	r3, [r7, #24]
 8016706:	4413      	add	r3, r2
 8016708:	3309      	adds	r3, #9
 801670a:	7dfa      	ldrb	r2, [r7, #23]
 801670c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801670e:	89bb      	ldrh	r3, [r7, #12]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d11c      	bne.n	801674e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8016714:	7dfb      	ldrb	r3, [r7, #23]
 8016716:	2b40      	cmp	r3, #64	; 0x40
 8016718:	d913      	bls.n	8016742 <get_fileinfo+0x12e>
 801671a:	7dfb      	ldrb	r3, [r7, #23]
 801671c:	2b5a      	cmp	r3, #90	; 0x5a
 801671e:	d810      	bhi.n	8016742 <get_fileinfo+0x12e>
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	6a1b      	ldr	r3, [r3, #32]
 8016724:	330c      	adds	r3, #12
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	461a      	mov	r2, r3
 801672a:	69fb      	ldr	r3, [r7, #28]
 801672c:	2b08      	cmp	r3, #8
 801672e:	d901      	bls.n	8016734 <get_fileinfo+0x120>
 8016730:	2310      	movs	r3, #16
 8016732:	e000      	b.n	8016736 <get_fileinfo+0x122>
 8016734:	2308      	movs	r3, #8
 8016736:	4013      	ands	r3, r2
 8016738:	2b00      	cmp	r3, #0
 801673a:	d002      	beq.n	8016742 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 801673c:	7dfb      	ldrb	r3, [r7, #23]
 801673e:	3320      	adds	r3, #32
 8016740:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8016742:	683a      	ldr	r2, [r7, #0]
 8016744:	69bb      	ldr	r3, [r7, #24]
 8016746:	4413      	add	r3, r2
 8016748:	3316      	adds	r3, #22
 801674a:	7dfa      	ldrb	r2, [r7, #23]
 801674c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801674e:	69bb      	ldr	r3, [r7, #24]
 8016750:	3301      	adds	r3, #1
 8016752:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8016754:	69fb      	ldr	r3, [r7, #28]
 8016756:	2b0a      	cmp	r3, #10
 8016758:	d9af      	bls.n	80166ba <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801675a:	89bb      	ldrh	r3, [r7, #12]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d10d      	bne.n	801677c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8016760:	683a      	ldr	r2, [r7, #0]
 8016762:	69bb      	ldr	r3, [r7, #24]
 8016764:	4413      	add	r3, r2
 8016766:	3316      	adds	r3, #22
 8016768:	2200      	movs	r2, #0
 801676a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	6a1b      	ldr	r3, [r3, #32]
 8016770:	330c      	adds	r3, #12
 8016772:	781b      	ldrb	r3, [r3, #0]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d101      	bne.n	801677c <get_fileinfo+0x168>
 8016778:	2300      	movs	r3, #0
 801677a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801677c:	683a      	ldr	r2, [r7, #0]
 801677e:	69bb      	ldr	r3, [r7, #24]
 8016780:	4413      	add	r3, r2
 8016782:	3309      	adds	r3, #9
 8016784:	2200      	movs	r2, #0
 8016786:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	6a1b      	ldr	r3, [r3, #32]
 801678c:	7ada      	ldrb	r2, [r3, #11]
 801678e:	683b      	ldr	r3, [r7, #0]
 8016790:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	6a1b      	ldr	r3, [r3, #32]
 8016796:	331c      	adds	r3, #28
 8016798:	4618      	mov	r0, r3
 801679a:	f7fe fb11 	bl	8014dc0 <ld_dword>
 801679e:	4602      	mov	r2, r0
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	6a1b      	ldr	r3, [r3, #32]
 80167a8:	3316      	adds	r3, #22
 80167aa:	4618      	mov	r0, r3
 80167ac:	f7fe fb08 	bl	8014dc0 <ld_dword>
 80167b0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80167b2:	68bb      	ldr	r3, [r7, #8]
 80167b4:	b29a      	uxth	r2, r3
 80167b6:	683b      	ldr	r3, [r7, #0]
 80167b8:	80da      	strh	r2, [r3, #6]
 80167ba:	68bb      	ldr	r3, [r7, #8]
 80167bc:	0c1b      	lsrs	r3, r3, #16
 80167be:	b29a      	uxth	r2, r3
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	809a      	strh	r2, [r3, #4]
 80167c4:	e000      	b.n	80167c8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80167c6:	bf00      	nop
}
 80167c8:	3720      	adds	r7, #32
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}
	...

080167d0 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80167d0:	b480      	push	{r7}
 80167d2:	b085      	sub	sp, #20
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	1c59      	adds	r1, r3, #1
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	6011      	str	r1, [r2, #0]
 80167e2:	781b      	ldrb	r3, [r3, #0]
 80167e4:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80167e6:	89fb      	ldrh	r3, [r7, #14]
 80167e8:	2b60      	cmp	r3, #96	; 0x60
 80167ea:	d905      	bls.n	80167f8 <get_achar+0x28>
 80167ec:	89fb      	ldrh	r3, [r7, #14]
 80167ee:	2b7a      	cmp	r3, #122	; 0x7a
 80167f0:	d802      	bhi.n	80167f8 <get_achar+0x28>
 80167f2:	89fb      	ldrh	r3, [r7, #14]
 80167f4:	3b20      	subs	r3, #32
 80167f6:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80167f8:	89fb      	ldrh	r3, [r7, #14]
 80167fa:	2b7f      	cmp	r3, #127	; 0x7f
 80167fc:	d904      	bls.n	8016808 <get_achar+0x38>
 80167fe:	89fb      	ldrh	r3, [r7, #14]
 8016800:	3b80      	subs	r3, #128	; 0x80
 8016802:	4a05      	ldr	r2, [pc, #20]	; (8016818 <get_achar+0x48>)
 8016804:	5cd3      	ldrb	r3, [r2, r3]
 8016806:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8016808:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 801680a:	4618      	mov	r0, r3
 801680c:	3714      	adds	r7, #20
 801680e:	46bd      	mov	sp, r7
 8016810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016814:	4770      	bx	lr
 8016816:	bf00      	nop
 8016818:	080228e4 	.word	0x080228e4

0801681c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b08a      	sub	sp, #40	; 0x28
 8016820:	af00      	add	r7, sp, #0
 8016822:	60f8      	str	r0, [r7, #12]
 8016824:	60b9      	str	r1, [r7, #8]
 8016826:	607a      	str	r2, [r7, #4]
 8016828:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 801682a:	e009      	b.n	8016840 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 801682c:	f107 0308 	add.w	r3, r7, #8
 8016830:	4618      	mov	r0, r3
 8016832:	f7ff ffcd 	bl	80167d0 <get_achar>
 8016836:	4603      	mov	r3, r0
 8016838:	2b00      	cmp	r3, #0
 801683a:	d101      	bne.n	8016840 <pattern_matching+0x24>
 801683c:	2300      	movs	r3, #0
 801683e:	e064      	b.n	801690a <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	1e5a      	subs	r2, r3, #1
 8016844:	607a      	str	r2, [r7, #4]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d1f0      	bne.n	801682c <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	781b      	ldrb	r3, [r3, #0]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d104      	bne.n	801685c <pattern_matching+0x40>
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d001      	beq.n	801685c <pattern_matching+0x40>
 8016858:	2301      	movs	r3, #1
 801685a:	e056      	b.n	801690a <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	617b      	str	r3, [r7, #20]
 8016860:	68bb      	ldr	r3, [r7, #8]
 8016862:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8016864:	697b      	ldr	r3, [r7, #20]
 8016866:	781b      	ldrb	r3, [r3, #0]
 8016868:	2b3f      	cmp	r3, #63	; 0x3f
 801686a:	d003      	beq.n	8016874 <pattern_matching+0x58>
 801686c:	697b      	ldr	r3, [r7, #20]
 801686e:	781b      	ldrb	r3, [r3, #0]
 8016870:	2b2a      	cmp	r3, #42	; 0x2a
 8016872:	d126      	bne.n	80168c2 <pattern_matching+0xa6>
				nm = nx = 0;
 8016874:	2300      	movs	r3, #0
 8016876:	61fb      	str	r3, [r7, #28]
 8016878:	69fb      	ldr	r3, [r7, #28]
 801687a:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 801687c:	697b      	ldr	r3, [r7, #20]
 801687e:	1c5a      	adds	r2, r3, #1
 8016880:	617a      	str	r2, [r7, #20]
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	2b3f      	cmp	r3, #63	; 0x3f
 8016886:	d103      	bne.n	8016890 <pattern_matching+0x74>
 8016888:	6a3b      	ldr	r3, [r7, #32]
 801688a:	3301      	adds	r3, #1
 801688c:	623b      	str	r3, [r7, #32]
 801688e:	e001      	b.n	8016894 <pattern_matching+0x78>
 8016890:	2301      	movs	r3, #1
 8016892:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8016894:	697b      	ldr	r3, [r7, #20]
 8016896:	781b      	ldrb	r3, [r3, #0]
 8016898:	2b3f      	cmp	r3, #63	; 0x3f
 801689a:	d0ef      	beq.n	801687c <pattern_matching+0x60>
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	781b      	ldrb	r3, [r3, #0]
 80168a0:	2b2a      	cmp	r3, #42	; 0x2a
 80168a2:	d0eb      	beq.n	801687c <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80168a4:	6978      	ldr	r0, [r7, #20]
 80168a6:	6939      	ldr	r1, [r7, #16]
 80168a8:	69fb      	ldr	r3, [r7, #28]
 80168aa:	6a3a      	ldr	r2, [r7, #32]
 80168ac:	f7ff ffb6 	bl	801681c <pattern_matching>
 80168b0:	4603      	mov	r3, r0
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d001      	beq.n	80168ba <pattern_matching+0x9e>
 80168b6:	2301      	movs	r3, #1
 80168b8:	e027      	b.n	801690a <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80168ba:	693b      	ldr	r3, [r7, #16]
 80168bc:	781b      	ldrb	r3, [r3, #0]
 80168be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80168c0:	e017      	b.n	80168f2 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80168c2:	f107 0314 	add.w	r3, r7, #20
 80168c6:	4618      	mov	r0, r3
 80168c8:	f7ff ff82 	bl	80167d0 <get_achar>
 80168cc:	4603      	mov	r3, r0
 80168ce:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80168d0:	f107 0310 	add.w	r3, r7, #16
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7ff ff7b 	bl	80167d0 <get_achar>
 80168da:	4603      	mov	r3, r0
 80168dc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80168de:	8b7a      	ldrh	r2, [r7, #26]
 80168e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80168e2:	429a      	cmp	r2, r3
 80168e4:	d104      	bne.n	80168f0 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80168e6:	8b7b      	ldrh	r3, [r7, #26]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d1bb      	bne.n	8016864 <pattern_matching+0x48>
 80168ec:	2301      	movs	r3, #1
 80168ee:	e00c      	b.n	801690a <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80168f0:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80168f2:	f107 0308 	add.w	r3, r7, #8
 80168f6:	4618      	mov	r0, r3
 80168f8:	f7ff ff6a 	bl	80167d0 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80168fc:	683b      	ldr	r3, [r7, #0]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d002      	beq.n	8016908 <pattern_matching+0xec>
 8016902:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016904:	2b00      	cmp	r3, #0
 8016906:	d1a9      	bne.n	801685c <pattern_matching+0x40>

	return 0;
 8016908:	2300      	movs	r3, #0
}
 801690a:	4618      	mov	r0, r3
 801690c:	3728      	adds	r7, #40	; 0x28
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}
	...

08016914 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b08a      	sub	sp, #40	; 0x28
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
 801691c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	613b      	str	r3, [r7, #16]
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	68db      	ldr	r3, [r3, #12]
 801692a:	60fb      	str	r3, [r7, #12]
 801692c:	2300      	movs	r3, #0
 801692e:	617b      	str	r3, [r7, #20]
 8016930:	697b      	ldr	r3, [r7, #20]
 8016932:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8016934:	69bb      	ldr	r3, [r7, #24]
 8016936:	1c5a      	adds	r2, r3, #1
 8016938:	61ba      	str	r2, [r7, #24]
 801693a:	693a      	ldr	r2, [r7, #16]
 801693c:	4413      	add	r3, r2
 801693e:	781b      	ldrb	r3, [r3, #0]
 8016940:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8016942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016944:	2b1f      	cmp	r3, #31
 8016946:	d940      	bls.n	80169ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8016948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801694a:	2b2f      	cmp	r3, #47	; 0x2f
 801694c:	d006      	beq.n	801695c <create_name+0x48>
 801694e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016950:	2b5c      	cmp	r3, #92	; 0x5c
 8016952:	d110      	bne.n	8016976 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8016954:	e002      	b.n	801695c <create_name+0x48>
 8016956:	69bb      	ldr	r3, [r7, #24]
 8016958:	3301      	adds	r3, #1
 801695a:	61bb      	str	r3, [r7, #24]
 801695c:	693a      	ldr	r2, [r7, #16]
 801695e:	69bb      	ldr	r3, [r7, #24]
 8016960:	4413      	add	r3, r2
 8016962:	781b      	ldrb	r3, [r3, #0]
 8016964:	2b2f      	cmp	r3, #47	; 0x2f
 8016966:	d0f6      	beq.n	8016956 <create_name+0x42>
 8016968:	693a      	ldr	r2, [r7, #16]
 801696a:	69bb      	ldr	r3, [r7, #24]
 801696c:	4413      	add	r3, r2
 801696e:	781b      	ldrb	r3, [r3, #0]
 8016970:	2b5c      	cmp	r3, #92	; 0x5c
 8016972:	d0f0      	beq.n	8016956 <create_name+0x42>
			break;
 8016974:	e02a      	b.n	80169cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8016976:	697b      	ldr	r3, [r7, #20]
 8016978:	2bfe      	cmp	r3, #254	; 0xfe
 801697a:	d901      	bls.n	8016980 <create_name+0x6c>
 801697c:	2306      	movs	r3, #6
 801697e:	e177      	b.n	8016c70 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8016980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016982:	b2db      	uxtb	r3, r3
 8016984:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8016986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016988:	2101      	movs	r1, #1
 801698a:	4618      	mov	r0, r3
 801698c:	f001 fd34 	bl	80183f8 <ff_convert>
 8016990:	4603      	mov	r3, r0
 8016992:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8016994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016996:	2b00      	cmp	r3, #0
 8016998:	d101      	bne.n	801699e <create_name+0x8a>
 801699a:	2306      	movs	r3, #6
 801699c:	e168      	b.n	8016c70 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801699e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169a0:	2b7f      	cmp	r3, #127	; 0x7f
 80169a2:	d809      	bhi.n	80169b8 <create_name+0xa4>
 80169a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169a6:	4619      	mov	r1, r3
 80169a8:	48b3      	ldr	r0, [pc, #716]	; (8016c78 <create_name+0x364>)
 80169aa:	f7fe fad6 	bl	8014f5a <chk_chr>
 80169ae:	4603      	mov	r3, r0
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d001      	beq.n	80169b8 <create_name+0xa4>
 80169b4:	2306      	movs	r3, #6
 80169b6:	e15b      	b.n	8016c70 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80169b8:	697b      	ldr	r3, [r7, #20]
 80169ba:	1c5a      	adds	r2, r3, #1
 80169bc:	617a      	str	r2, [r7, #20]
 80169be:	005b      	lsls	r3, r3, #1
 80169c0:	68fa      	ldr	r2, [r7, #12]
 80169c2:	4413      	add	r3, r2
 80169c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80169c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80169c8:	e7b4      	b.n	8016934 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80169ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80169cc:	693a      	ldr	r2, [r7, #16]
 80169ce:	69bb      	ldr	r3, [r7, #24]
 80169d0:	441a      	add	r2, r3
 80169d2:	683b      	ldr	r3, [r7, #0]
 80169d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80169d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169d8:	2b1f      	cmp	r3, #31
 80169da:	d801      	bhi.n	80169e0 <create_name+0xcc>
 80169dc:	2304      	movs	r3, #4
 80169de:	e000      	b.n	80169e2 <create_name+0xce>
 80169e0:	2300      	movs	r3, #0
 80169e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80169e6:	e011      	b.n	8016a0c <create_name+0xf8>
		w = lfn[di - 1];
 80169e8:	697b      	ldr	r3, [r7, #20]
 80169ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80169ee:	3b01      	subs	r3, #1
 80169f0:	005b      	lsls	r3, r3, #1
 80169f2:	68fa      	ldr	r2, [r7, #12]
 80169f4:	4413      	add	r3, r2
 80169f6:	881b      	ldrh	r3, [r3, #0]
 80169f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80169fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169fc:	2b20      	cmp	r3, #32
 80169fe:	d002      	beq.n	8016a06 <create_name+0xf2>
 8016a00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a02:	2b2e      	cmp	r3, #46	; 0x2e
 8016a04:	d106      	bne.n	8016a14 <create_name+0x100>
		di--;
 8016a06:	697b      	ldr	r3, [r7, #20]
 8016a08:	3b01      	subs	r3, #1
 8016a0a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8016a0c:	697b      	ldr	r3, [r7, #20]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d1ea      	bne.n	80169e8 <create_name+0xd4>
 8016a12:	e000      	b.n	8016a16 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8016a14:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8016a16:	697b      	ldr	r3, [r7, #20]
 8016a18:	005b      	lsls	r3, r3, #1
 8016a1a:	68fa      	ldr	r2, [r7, #12]
 8016a1c:	4413      	add	r3, r2
 8016a1e:	2200      	movs	r2, #0
 8016a20:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8016a22:	697b      	ldr	r3, [r7, #20]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d101      	bne.n	8016a2c <create_name+0x118>
 8016a28:	2306      	movs	r3, #6
 8016a2a:	e121      	b.n	8016c70 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	3324      	adds	r3, #36	; 0x24
 8016a30:	220b      	movs	r2, #11
 8016a32:	2120      	movs	r1, #32
 8016a34:	4618      	mov	r0, r3
 8016a36:	f7fe fa4e 	bl	8014ed6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	61bb      	str	r3, [r7, #24]
 8016a3e:	e002      	b.n	8016a46 <create_name+0x132>
 8016a40:	69bb      	ldr	r3, [r7, #24]
 8016a42:	3301      	adds	r3, #1
 8016a44:	61bb      	str	r3, [r7, #24]
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	005b      	lsls	r3, r3, #1
 8016a4a:	68fa      	ldr	r2, [r7, #12]
 8016a4c:	4413      	add	r3, r2
 8016a4e:	881b      	ldrh	r3, [r3, #0]
 8016a50:	2b20      	cmp	r3, #32
 8016a52:	d0f5      	beq.n	8016a40 <create_name+0x12c>
 8016a54:	69bb      	ldr	r3, [r7, #24]
 8016a56:	005b      	lsls	r3, r3, #1
 8016a58:	68fa      	ldr	r2, [r7, #12]
 8016a5a:	4413      	add	r3, r2
 8016a5c:	881b      	ldrh	r3, [r3, #0]
 8016a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8016a60:	d0ee      	beq.n	8016a40 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8016a62:	69bb      	ldr	r3, [r7, #24]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d009      	beq.n	8016a7c <create_name+0x168>
 8016a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a6c:	f043 0303 	orr.w	r3, r3, #3
 8016a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8016a74:	e002      	b.n	8016a7c <create_name+0x168>
 8016a76:	697b      	ldr	r3, [r7, #20]
 8016a78:	3b01      	subs	r3, #1
 8016a7a:	617b      	str	r3, [r7, #20]
 8016a7c:	697b      	ldr	r3, [r7, #20]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d009      	beq.n	8016a96 <create_name+0x182>
 8016a82:	697b      	ldr	r3, [r7, #20]
 8016a84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016a88:	3b01      	subs	r3, #1
 8016a8a:	005b      	lsls	r3, r3, #1
 8016a8c:	68fa      	ldr	r2, [r7, #12]
 8016a8e:	4413      	add	r3, r2
 8016a90:	881b      	ldrh	r3, [r3, #0]
 8016a92:	2b2e      	cmp	r3, #46	; 0x2e
 8016a94:	d1ef      	bne.n	8016a76 <create_name+0x162>

	i = b = 0; ni = 8;
 8016a96:	2300      	movs	r3, #0
 8016a98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	623b      	str	r3, [r7, #32]
 8016aa0:	2308      	movs	r3, #8
 8016aa2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8016aa4:	69bb      	ldr	r3, [r7, #24]
 8016aa6:	1c5a      	adds	r2, r3, #1
 8016aa8:	61ba      	str	r2, [r7, #24]
 8016aaa:	005b      	lsls	r3, r3, #1
 8016aac:	68fa      	ldr	r2, [r7, #12]
 8016aae:	4413      	add	r3, r2
 8016ab0:	881b      	ldrh	r3, [r3, #0]
 8016ab2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8016ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	f000 8090 	beq.w	8016bdc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8016abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016abe:	2b20      	cmp	r3, #32
 8016ac0:	d006      	beq.n	8016ad0 <create_name+0x1bc>
 8016ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8016ac6:	d10a      	bne.n	8016ade <create_name+0x1ca>
 8016ac8:	69ba      	ldr	r2, [r7, #24]
 8016aca:	697b      	ldr	r3, [r7, #20]
 8016acc:	429a      	cmp	r2, r3
 8016ace:	d006      	beq.n	8016ade <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8016ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ad4:	f043 0303 	orr.w	r3, r3, #3
 8016ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016adc:	e07d      	b.n	8016bda <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8016ade:	6a3a      	ldr	r2, [r7, #32]
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	d203      	bcs.n	8016aee <create_name+0x1da>
 8016ae6:	69ba      	ldr	r2, [r7, #24]
 8016ae8:	697b      	ldr	r3, [r7, #20]
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d123      	bne.n	8016b36 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8016aee:	69fb      	ldr	r3, [r7, #28]
 8016af0:	2b0b      	cmp	r3, #11
 8016af2:	d106      	bne.n	8016b02 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8016af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016af8:	f043 0303 	orr.w	r3, r3, #3
 8016afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b00:	e06f      	b.n	8016be2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8016b02:	69ba      	ldr	r2, [r7, #24]
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d005      	beq.n	8016b16 <create_name+0x202>
 8016b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b0e:	f043 0303 	orr.w	r3, r3, #3
 8016b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8016b16:	69ba      	ldr	r2, [r7, #24]
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	429a      	cmp	r2, r3
 8016b1c:	d860      	bhi.n	8016be0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	61bb      	str	r3, [r7, #24]
 8016b22:	2308      	movs	r3, #8
 8016b24:	623b      	str	r3, [r7, #32]
 8016b26:	230b      	movs	r3, #11
 8016b28:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8016b2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016b2e:	009b      	lsls	r3, r3, #2
 8016b30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016b34:	e051      	b.n	8016bda <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8016b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b38:	2b7f      	cmp	r3, #127	; 0x7f
 8016b3a:	d914      	bls.n	8016b66 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8016b3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b3e:	2100      	movs	r1, #0
 8016b40:	4618      	mov	r0, r3
 8016b42:	f001 fc59 	bl	80183f8 <ff_convert>
 8016b46:	4603      	mov	r3, r0
 8016b48:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d004      	beq.n	8016b5a <create_name+0x246>
 8016b50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b52:	3b80      	subs	r3, #128	; 0x80
 8016b54:	4a49      	ldr	r2, [pc, #292]	; (8016c7c <create_name+0x368>)
 8016b56:	5cd3      	ldrb	r3, [r2, r3]
 8016b58:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8016b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b5e:	f043 0302 	orr.w	r3, r3, #2
 8016b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8016b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d007      	beq.n	8016b7c <create_name+0x268>
 8016b6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b6e:	4619      	mov	r1, r3
 8016b70:	4843      	ldr	r0, [pc, #268]	; (8016c80 <create_name+0x36c>)
 8016b72:	f7fe f9f2 	bl	8014f5a <chk_chr>
 8016b76:	4603      	mov	r3, r0
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d008      	beq.n	8016b8e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016b7c:	235f      	movs	r3, #95	; 0x5f
 8016b7e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b84:	f043 0303 	orr.w	r3, r3, #3
 8016b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b8c:	e01b      	b.n	8016bc6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8016b8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b90:	2b40      	cmp	r3, #64	; 0x40
 8016b92:	d909      	bls.n	8016ba8 <create_name+0x294>
 8016b94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b96:	2b5a      	cmp	r3, #90	; 0x5a
 8016b98:	d806      	bhi.n	8016ba8 <create_name+0x294>
					b |= 2;
 8016b9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016b9e:	f043 0302 	orr.w	r3, r3, #2
 8016ba2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016ba6:	e00e      	b.n	8016bc6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8016ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016baa:	2b60      	cmp	r3, #96	; 0x60
 8016bac:	d90b      	bls.n	8016bc6 <create_name+0x2b2>
 8016bae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bb0:	2b7a      	cmp	r3, #122	; 0x7a
 8016bb2:	d808      	bhi.n	8016bc6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8016bb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016bb8:	f043 0301 	orr.w	r3, r3, #1
 8016bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016bc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bc2:	3b20      	subs	r3, #32
 8016bc4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8016bc6:	6a3b      	ldr	r3, [r7, #32]
 8016bc8:	1c5a      	adds	r2, r3, #1
 8016bca:	623a      	str	r2, [r7, #32]
 8016bcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016bce:	b2d1      	uxtb	r1, r2
 8016bd0:	687a      	ldr	r2, [r7, #4]
 8016bd2:	4413      	add	r3, r2
 8016bd4:	460a      	mov	r2, r1
 8016bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8016bda:	e763      	b.n	8016aa4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8016bdc:	bf00      	nop
 8016bde:	e000      	b.n	8016be2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8016be0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016be8:	2be5      	cmp	r3, #229	; 0xe5
 8016bea:	d103      	bne.n	8016bf4 <create_name+0x2e0>
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	2205      	movs	r2, #5
 8016bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8016bf4:	69fb      	ldr	r3, [r7, #28]
 8016bf6:	2b08      	cmp	r3, #8
 8016bf8:	d104      	bne.n	8016c04 <create_name+0x2f0>
 8016bfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016bfe:	009b      	lsls	r3, r3, #2
 8016c00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016c04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c08:	f003 030c 	and.w	r3, r3, #12
 8016c0c:	2b0c      	cmp	r3, #12
 8016c0e:	d005      	beq.n	8016c1c <create_name+0x308>
 8016c10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c14:	f003 0303 	and.w	r3, r3, #3
 8016c18:	2b03      	cmp	r3, #3
 8016c1a:	d105      	bne.n	8016c28 <create_name+0x314>
 8016c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c20:	f043 0302 	orr.w	r3, r3, #2
 8016c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c2c:	f003 0302 	and.w	r3, r3, #2
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d117      	bne.n	8016c64 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8016c34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c38:	f003 0303 	and.w	r3, r3, #3
 8016c3c:	2b01      	cmp	r3, #1
 8016c3e:	d105      	bne.n	8016c4c <create_name+0x338>
 8016c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c44:	f043 0310 	orr.w	r3, r3, #16
 8016c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8016c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c50:	f003 030c 	and.w	r3, r3, #12
 8016c54:	2b04      	cmp	r3, #4
 8016c56:	d105      	bne.n	8016c64 <create_name+0x350>
 8016c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c5c:	f043 0308 	orr.w	r3, r3, #8
 8016c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016c6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8016c6e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8016c70:	4618      	mov	r0, r3
 8016c72:	3728      	adds	r7, #40	; 0x28
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd80      	pop	{r7, pc}
 8016c78:	08022664 	.word	0x08022664
 8016c7c:	080228e4 	.word	0x080228e4
 8016c80:	08022670 	.word	0x08022670

08016c84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b086      	sub	sp, #24
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8016c92:	693b      	ldr	r3, [r7, #16]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016c98:	e002      	b.n	8016ca0 <follow_path+0x1c>
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	3301      	adds	r3, #1
 8016c9e:	603b      	str	r3, [r7, #0]
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	781b      	ldrb	r3, [r3, #0]
 8016ca4:	2b2f      	cmp	r3, #47	; 0x2f
 8016ca6:	d0f8      	beq.n	8016c9a <follow_path+0x16>
 8016ca8:	683b      	ldr	r3, [r7, #0]
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	2b5c      	cmp	r3, #92	; 0x5c
 8016cae:	d0f4      	beq.n	8016c9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016cb0:	693b      	ldr	r3, [r7, #16]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	781b      	ldrb	r3, [r3, #0]
 8016cba:	2b1f      	cmp	r3, #31
 8016cbc:	d80a      	bhi.n	8016cd4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	2280      	movs	r2, #128	; 0x80
 8016cc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8016cc6:	2100      	movs	r1, #0
 8016cc8:	6878      	ldr	r0, [r7, #4]
 8016cca:	f7fe fe91 	bl	80159f0 <dir_sdi>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	75fb      	strb	r3, [r7, #23]
 8016cd2:	e043      	b.n	8016d5c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016cd4:	463b      	mov	r3, r7
 8016cd6:	4619      	mov	r1, r3
 8016cd8:	6878      	ldr	r0, [r7, #4]
 8016cda:	f7ff fe1b 	bl	8016914 <create_name>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016ce2:	7dfb      	ldrb	r3, [r7, #23]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d134      	bne.n	8016d52 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016ce8:	6878      	ldr	r0, [r7, #4]
 8016cea:	f7ff fadb 	bl	80162a4 <dir_find>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016cf8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8016cfa:	7dfb      	ldrb	r3, [r7, #23]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d00a      	beq.n	8016d16 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016d00:	7dfb      	ldrb	r3, [r7, #23]
 8016d02:	2b04      	cmp	r3, #4
 8016d04:	d127      	bne.n	8016d56 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016d06:	7afb      	ldrb	r3, [r7, #11]
 8016d08:	f003 0304 	and.w	r3, r3, #4
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d122      	bne.n	8016d56 <follow_path+0xd2>
 8016d10:	2305      	movs	r3, #5
 8016d12:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016d14:	e01f      	b.n	8016d56 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016d16:	7afb      	ldrb	r3, [r7, #11]
 8016d18:	f003 0304 	and.w	r3, r3, #4
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d11c      	bne.n	8016d5a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016d20:	693b      	ldr	r3, [r7, #16]
 8016d22:	799b      	ldrb	r3, [r3, #6]
 8016d24:	f003 0310 	and.w	r3, r3, #16
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d102      	bne.n	8016d32 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016d2c:	2305      	movs	r3, #5
 8016d2e:	75fb      	strb	r3, [r7, #23]
 8016d30:	e014      	b.n	8016d5c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	695b      	ldr	r3, [r3, #20]
 8016d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d40:	4413      	add	r3, r2
 8016d42:	4619      	mov	r1, r3
 8016d44:	68f8      	ldr	r0, [r7, #12]
 8016d46:	f7fe ffda 	bl	8015cfe <ld_clust>
 8016d4a:	4602      	mov	r2, r0
 8016d4c:	693b      	ldr	r3, [r7, #16]
 8016d4e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016d50:	e7c0      	b.n	8016cd4 <follow_path+0x50>
			if (res != FR_OK) break;
 8016d52:	bf00      	nop
 8016d54:	e002      	b.n	8016d5c <follow_path+0xd8>
				break;
 8016d56:	bf00      	nop
 8016d58:	e000      	b.n	8016d5c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016d5a:	bf00      	nop
			}
		}
	}

	return res;
 8016d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	3718      	adds	r7, #24
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd80      	pop	{r7, pc}

08016d66 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016d66:	b480      	push	{r7}
 8016d68:	b087      	sub	sp, #28
 8016d6a:	af00      	add	r7, sp, #0
 8016d6c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8016d72:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d031      	beq.n	8016de0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	617b      	str	r3, [r7, #20]
 8016d82:	e002      	b.n	8016d8a <get_ldnumber+0x24>
 8016d84:	697b      	ldr	r3, [r7, #20]
 8016d86:	3301      	adds	r3, #1
 8016d88:	617b      	str	r3, [r7, #20]
 8016d8a:	697b      	ldr	r3, [r7, #20]
 8016d8c:	781b      	ldrb	r3, [r3, #0]
 8016d8e:	2b1f      	cmp	r3, #31
 8016d90:	d903      	bls.n	8016d9a <get_ldnumber+0x34>
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	781b      	ldrb	r3, [r3, #0]
 8016d96:	2b3a      	cmp	r3, #58	; 0x3a
 8016d98:	d1f4      	bne.n	8016d84 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	781b      	ldrb	r3, [r3, #0]
 8016d9e:	2b3a      	cmp	r3, #58	; 0x3a
 8016da0:	d11c      	bne.n	8016ddc <get_ldnumber+0x76>
			tp = *path;
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	1c5a      	adds	r2, r3, #1
 8016dac:	60fa      	str	r2, [r7, #12]
 8016dae:	781b      	ldrb	r3, [r3, #0]
 8016db0:	3b30      	subs	r3, #48	; 0x30
 8016db2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016db4:	68bb      	ldr	r3, [r7, #8]
 8016db6:	2b09      	cmp	r3, #9
 8016db8:	d80e      	bhi.n	8016dd8 <get_ldnumber+0x72>
 8016dba:	68fa      	ldr	r2, [r7, #12]
 8016dbc:	697b      	ldr	r3, [r7, #20]
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	d10a      	bne.n	8016dd8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d107      	bne.n	8016dd8 <get_ldnumber+0x72>
					vol = (int)i;
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016dcc:	697b      	ldr	r3, [r7, #20]
 8016dce:	3301      	adds	r3, #1
 8016dd0:	617b      	str	r3, [r7, #20]
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	697a      	ldr	r2, [r7, #20]
 8016dd6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	e002      	b.n	8016de2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016ddc:	2300      	movs	r3, #0
 8016dde:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016de0:	693b      	ldr	r3, [r7, #16]
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	371c      	adds	r7, #28
 8016de6:	46bd      	mov	sp, r7
 8016de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dec:	4770      	bx	lr
	...

08016df0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b082      	sub	sp, #8
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
 8016df8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	70da      	strb	r2, [r3, #3]
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	f04f 32ff 	mov.w	r2, #4294967295
 8016e06:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016e08:	6839      	ldr	r1, [r7, #0]
 8016e0a:	6878      	ldr	r0, [r7, #4]
 8016e0c:	f7fe fa70 	bl	80152f0 <move_window>
 8016e10:	4603      	mov	r3, r0
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d001      	beq.n	8016e1a <check_fs+0x2a>
 8016e16:	2304      	movs	r3, #4
 8016e18:	e038      	b.n	8016e8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	3334      	adds	r3, #52	; 0x34
 8016e1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016e22:	4618      	mov	r0, r3
 8016e24:	f7fd ffb4 	bl	8014d90 <ld_word>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016e30:	429a      	cmp	r2, r3
 8016e32:	d001      	beq.n	8016e38 <check_fs+0x48>
 8016e34:	2303      	movs	r3, #3
 8016e36:	e029      	b.n	8016e8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016e3e:	2be9      	cmp	r3, #233	; 0xe9
 8016e40:	d009      	beq.n	8016e56 <check_fs+0x66>
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016e48:	2beb      	cmp	r3, #235	; 0xeb
 8016e4a:	d11e      	bne.n	8016e8a <check_fs+0x9a>
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8016e52:	2b90      	cmp	r3, #144	; 0x90
 8016e54:	d119      	bne.n	8016e8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	3334      	adds	r3, #52	; 0x34
 8016e5a:	3336      	adds	r3, #54	; 0x36
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	f7fd ffaf 	bl	8014dc0 <ld_dword>
 8016e62:	4603      	mov	r3, r0
 8016e64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016e68:	4a0a      	ldr	r2, [pc, #40]	; (8016e94 <check_fs+0xa4>)
 8016e6a:	4293      	cmp	r3, r2
 8016e6c:	d101      	bne.n	8016e72 <check_fs+0x82>
 8016e6e:	2300      	movs	r3, #0
 8016e70:	e00c      	b.n	8016e8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	3334      	adds	r3, #52	; 0x34
 8016e76:	3352      	adds	r3, #82	; 0x52
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7fd ffa1 	bl	8014dc0 <ld_dword>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	4a05      	ldr	r2, [pc, #20]	; (8016e98 <check_fs+0xa8>)
 8016e82:	4293      	cmp	r3, r2
 8016e84:	d101      	bne.n	8016e8a <check_fs+0x9a>
 8016e86:	2300      	movs	r3, #0
 8016e88:	e000      	b.n	8016e8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016e8a:	2302      	movs	r3, #2
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3708      	adds	r7, #8
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}
 8016e94:	00544146 	.word	0x00544146
 8016e98:	33544146 	.word	0x33544146

08016e9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b096      	sub	sp, #88	; 0x58
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	60f8      	str	r0, [r7, #12]
 8016ea4:	60b9      	str	r1, [r7, #8]
 8016ea6:	4613      	mov	r3, r2
 8016ea8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016eaa:	68bb      	ldr	r3, [r7, #8]
 8016eac:	2200      	movs	r2, #0
 8016eae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016eb0:	68f8      	ldr	r0, [r7, #12]
 8016eb2:	f7ff ff58 	bl	8016d66 <get_ldnumber>
 8016eb6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	da01      	bge.n	8016ec2 <find_volume+0x26>
 8016ebe:	230b      	movs	r3, #11
 8016ec0:	e231      	b.n	8017326 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016ec2:	4aa8      	ldr	r2, [pc, #672]	; (8017164 <find_volume+0x2c8>)
 8016ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016eca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d101      	bne.n	8016ed6 <find_volume+0x3a>
 8016ed2:	230c      	movs	r3, #12
 8016ed4:	e227      	b.n	8017326 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016eda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016edc:	79fb      	ldrb	r3, [r7, #7]
 8016ede:	f023 0301 	bic.w	r3, r3, #1
 8016ee2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ee6:	781b      	ldrb	r3, [r3, #0]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d01a      	beq.n	8016f22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eee:	785b      	ldrb	r3, [r3, #1]
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f7fd fea7 	bl	8014c44 <disk_status>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016f00:	f003 0301 	and.w	r3, r3, #1
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d10c      	bne.n	8016f22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016f08:	79fb      	ldrb	r3, [r7, #7]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d007      	beq.n	8016f1e <find_volume+0x82>
 8016f0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016f12:	f003 0304 	and.w	r3, r3, #4
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d001      	beq.n	8016f1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8016f1a:	230a      	movs	r3, #10
 8016f1c:	e203      	b.n	8017326 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8016f1e:	2300      	movs	r3, #0
 8016f20:	e201      	b.n	8017326 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f24:	2200      	movs	r2, #0
 8016f26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f2a:	b2da      	uxtb	r2, r3
 8016f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f32:	785b      	ldrb	r3, [r3, #1]
 8016f34:	4618      	mov	r0, r3
 8016f36:	f7fd fe9f 	bl	8014c78 <disk_initialize>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016f40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016f44:	f003 0301 	and.w	r3, r3, #1
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d001      	beq.n	8016f50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016f4c:	2303      	movs	r3, #3
 8016f4e:	e1ea      	b.n	8017326 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016f50:	79fb      	ldrb	r3, [r7, #7]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d007      	beq.n	8016f66 <find_volume+0xca>
 8016f56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016f5a:	f003 0304 	and.w	r3, r3, #4
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d001      	beq.n	8016f66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016f62:	230a      	movs	r3, #10
 8016f64:	e1df      	b.n	8017326 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016f66:	2300      	movs	r3, #0
 8016f68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016f6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016f6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016f6e:	f7ff ff3f 	bl	8016df0 <check_fs>
 8016f72:	4603      	mov	r3, r0
 8016f74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016f7c:	2b02      	cmp	r3, #2
 8016f7e:	d14b      	bne.n	8017018 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016f80:	2300      	movs	r3, #0
 8016f82:	643b      	str	r3, [r7, #64]	; 0x40
 8016f84:	e01f      	b.n	8016fc6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8016f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f8e:	011b      	lsls	r3, r3, #4
 8016f90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016f94:	4413      	add	r3, r2
 8016f96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f9a:	3304      	adds	r3, #4
 8016f9c:	781b      	ldrb	r3, [r3, #0]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d006      	beq.n	8016fb0 <find_volume+0x114>
 8016fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fa4:	3308      	adds	r3, #8
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f7fd ff0a 	bl	8014dc0 <ld_dword>
 8016fac:	4602      	mov	r2, r0
 8016fae:	e000      	b.n	8016fb2 <find_volume+0x116>
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fb4:	009b      	lsls	r3, r3, #2
 8016fb6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8016fba:	440b      	add	r3, r1
 8016fbc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fc2:	3301      	adds	r3, #1
 8016fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8016fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fc8:	2b03      	cmp	r3, #3
 8016fca:	d9dc      	bls.n	8016f86 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016fcc:	2300      	movs	r3, #0
 8016fce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d002      	beq.n	8016fdc <find_volume+0x140>
 8016fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fd8:	3b01      	subs	r3, #1
 8016fda:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016fde:	009b      	lsls	r3, r3, #2
 8016fe0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016fe4:	4413      	add	r3, r2
 8016fe6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016fea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d005      	beq.n	8016ffe <find_volume+0x162>
 8016ff2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016ff4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016ff6:	f7ff fefb 	bl	8016df0 <check_fs>
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	e000      	b.n	8017000 <find_volume+0x164>
 8016ffe:	2303      	movs	r3, #3
 8017000:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017004:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017008:	2b01      	cmp	r3, #1
 801700a:	d905      	bls.n	8017018 <find_volume+0x17c>
 801700c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801700e:	3301      	adds	r3, #1
 8017010:	643b      	str	r3, [r7, #64]	; 0x40
 8017012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017014:	2b03      	cmp	r3, #3
 8017016:	d9e1      	bls.n	8016fdc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801701c:	2b04      	cmp	r3, #4
 801701e:	d101      	bne.n	8017024 <find_volume+0x188>
 8017020:	2301      	movs	r3, #1
 8017022:	e180      	b.n	8017326 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017024:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017028:	2b01      	cmp	r3, #1
 801702a:	d901      	bls.n	8017030 <find_volume+0x194>
 801702c:	230d      	movs	r3, #13
 801702e:	e17a      	b.n	8017326 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017032:	3334      	adds	r3, #52	; 0x34
 8017034:	330b      	adds	r3, #11
 8017036:	4618      	mov	r0, r3
 8017038:	f7fd feaa 	bl	8014d90 <ld_word>
 801703c:	4603      	mov	r3, r0
 801703e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017042:	d001      	beq.n	8017048 <find_volume+0x1ac>
 8017044:	230d      	movs	r3, #13
 8017046:	e16e      	b.n	8017326 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801704a:	3334      	adds	r3, #52	; 0x34
 801704c:	3316      	adds	r3, #22
 801704e:	4618      	mov	r0, r3
 8017050:	f7fd fe9e 	bl	8014d90 <ld_word>
 8017054:	4603      	mov	r3, r0
 8017056:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801705a:	2b00      	cmp	r3, #0
 801705c:	d106      	bne.n	801706c <find_volume+0x1d0>
 801705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017060:	3334      	adds	r3, #52	; 0x34
 8017062:	3324      	adds	r3, #36	; 0x24
 8017064:	4618      	mov	r0, r3
 8017066:	f7fd feab 	bl	8014dc0 <ld_dword>
 801706a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801706e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017070:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017074:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8017078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801707a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801707e:	789b      	ldrb	r3, [r3, #2]
 8017080:	2b01      	cmp	r3, #1
 8017082:	d005      	beq.n	8017090 <find_volume+0x1f4>
 8017084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017086:	789b      	ldrb	r3, [r3, #2]
 8017088:	2b02      	cmp	r3, #2
 801708a:	d001      	beq.n	8017090 <find_volume+0x1f4>
 801708c:	230d      	movs	r3, #13
 801708e:	e14a      	b.n	8017326 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017092:	789b      	ldrb	r3, [r3, #2]
 8017094:	461a      	mov	r2, r3
 8017096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017098:	fb02 f303 	mul.w	r3, r2, r3
 801709c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80170a4:	b29a      	uxth	r2, r3
 80170a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80170aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ac:	895b      	ldrh	r3, [r3, #10]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d008      	beq.n	80170c4 <find_volume+0x228>
 80170b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170b4:	895b      	ldrh	r3, [r3, #10]
 80170b6:	461a      	mov	r2, r3
 80170b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ba:	895b      	ldrh	r3, [r3, #10]
 80170bc:	3b01      	subs	r3, #1
 80170be:	4013      	ands	r3, r2
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d001      	beq.n	80170c8 <find_volume+0x22c>
 80170c4:	230d      	movs	r3, #13
 80170c6:	e12e      	b.n	8017326 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80170c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ca:	3334      	adds	r3, #52	; 0x34
 80170cc:	3311      	adds	r3, #17
 80170ce:	4618      	mov	r0, r3
 80170d0:	f7fd fe5e 	bl	8014d90 <ld_word>
 80170d4:	4603      	mov	r3, r0
 80170d6:	461a      	mov	r2, r3
 80170d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80170dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170de:	891b      	ldrh	r3, [r3, #8]
 80170e0:	f003 030f 	and.w	r3, r3, #15
 80170e4:	b29b      	uxth	r3, r3
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d001      	beq.n	80170ee <find_volume+0x252>
 80170ea:	230d      	movs	r3, #13
 80170ec:	e11b      	b.n	8017326 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80170ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170f0:	3334      	adds	r3, #52	; 0x34
 80170f2:	3313      	adds	r3, #19
 80170f4:	4618      	mov	r0, r3
 80170f6:	f7fd fe4b 	bl	8014d90 <ld_word>
 80170fa:	4603      	mov	r3, r0
 80170fc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80170fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017100:	2b00      	cmp	r3, #0
 8017102:	d106      	bne.n	8017112 <find_volume+0x276>
 8017104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017106:	3334      	adds	r3, #52	; 0x34
 8017108:	3320      	adds	r3, #32
 801710a:	4618      	mov	r0, r3
 801710c:	f7fd fe58 	bl	8014dc0 <ld_dword>
 8017110:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017114:	3334      	adds	r3, #52	; 0x34
 8017116:	330e      	adds	r3, #14
 8017118:	4618      	mov	r0, r3
 801711a:	f7fd fe39 	bl	8014d90 <ld_word>
 801711e:	4603      	mov	r3, r0
 8017120:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017122:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017124:	2b00      	cmp	r3, #0
 8017126:	d101      	bne.n	801712c <find_volume+0x290>
 8017128:	230d      	movs	r3, #13
 801712a:	e0fc      	b.n	8017326 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801712c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801712e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017130:	4413      	add	r3, r2
 8017132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017134:	8912      	ldrh	r2, [r2, #8]
 8017136:	0912      	lsrs	r2, r2, #4
 8017138:	b292      	uxth	r2, r2
 801713a:	4413      	add	r3, r2
 801713c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801713e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017142:	429a      	cmp	r2, r3
 8017144:	d201      	bcs.n	801714a <find_volume+0x2ae>
 8017146:	230d      	movs	r3, #13
 8017148:	e0ed      	b.n	8017326 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801714a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801714e:	1ad3      	subs	r3, r2, r3
 8017150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017152:	8952      	ldrh	r2, [r2, #10]
 8017154:	fbb3 f3f2 	udiv	r3, r3, r2
 8017158:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801715c:	2b00      	cmp	r3, #0
 801715e:	d103      	bne.n	8017168 <find_volume+0x2cc>
 8017160:	230d      	movs	r3, #13
 8017162:	e0e0      	b.n	8017326 <find_volume+0x48a>
 8017164:	20000d74 	.word	0x20000d74
		fmt = FS_FAT32;
 8017168:	2303      	movs	r3, #3
 801716a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017170:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017174:	4293      	cmp	r3, r2
 8017176:	d802      	bhi.n	801717e <find_volume+0x2e2>
 8017178:	2302      	movs	r3, #2
 801717a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017180:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017184:	4293      	cmp	r3, r2
 8017186:	d802      	bhi.n	801718e <find_volume+0x2f2>
 8017188:	2301      	movs	r3, #1
 801718a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017190:	1c9a      	adds	r2, r3, #2
 8017192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017194:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8017196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017198:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801719a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801719c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801719e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80171a0:	441a      	add	r2, r3
 80171a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171a4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80171a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80171a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171aa:	441a      	add	r2, r3
 80171ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ae:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80171b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80171b4:	2b03      	cmp	r3, #3
 80171b6:	d11e      	bne.n	80171f6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80171b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ba:	3334      	adds	r3, #52	; 0x34
 80171bc:	332a      	adds	r3, #42	; 0x2a
 80171be:	4618      	mov	r0, r3
 80171c0:	f7fd fde6 	bl	8014d90 <ld_word>
 80171c4:	4603      	mov	r3, r0
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d001      	beq.n	80171ce <find_volume+0x332>
 80171ca:	230d      	movs	r3, #13
 80171cc:	e0ab      	b.n	8017326 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80171ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d0:	891b      	ldrh	r3, [r3, #8]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d001      	beq.n	80171da <find_volume+0x33e>
 80171d6:	230d      	movs	r3, #13
 80171d8:	e0a5      	b.n	8017326 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80171da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171dc:	3334      	adds	r3, #52	; 0x34
 80171de:	332c      	adds	r3, #44	; 0x2c
 80171e0:	4618      	mov	r0, r3
 80171e2:	f7fd fded 	bl	8014dc0 <ld_dword>
 80171e6:	4602      	mov	r2, r0
 80171e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ea:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80171ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ee:	699b      	ldr	r3, [r3, #24]
 80171f0:	009b      	lsls	r3, r3, #2
 80171f2:	647b      	str	r3, [r7, #68]	; 0x44
 80171f4:	e01f      	b.n	8017236 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80171f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171f8:	891b      	ldrh	r3, [r3, #8]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d101      	bne.n	8017202 <find_volume+0x366>
 80171fe:	230d      	movs	r3, #13
 8017200:	e091      	b.n	8017326 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017208:	441a      	add	r2, r3
 801720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801720c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801720e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017212:	2b02      	cmp	r3, #2
 8017214:	d103      	bne.n	801721e <find_volume+0x382>
 8017216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017218:	699b      	ldr	r3, [r3, #24]
 801721a:	005b      	lsls	r3, r3, #1
 801721c:	e00a      	b.n	8017234 <find_volume+0x398>
 801721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017220:	699a      	ldr	r2, [r3, #24]
 8017222:	4613      	mov	r3, r2
 8017224:	005b      	lsls	r3, r3, #1
 8017226:	4413      	add	r3, r2
 8017228:	085a      	lsrs	r2, r3, #1
 801722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801722c:	699b      	ldr	r3, [r3, #24]
 801722e:	f003 0301 	and.w	r3, r3, #1
 8017232:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017234:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017238:	69da      	ldr	r2, [r3, #28]
 801723a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801723c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017240:	0a5b      	lsrs	r3, r3, #9
 8017242:	429a      	cmp	r2, r3
 8017244:	d201      	bcs.n	801724a <find_volume+0x3ae>
 8017246:	230d      	movs	r3, #13
 8017248:	e06d      	b.n	8017326 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801724c:	f04f 32ff 	mov.w	r2, #4294967295
 8017250:	615a      	str	r2, [r3, #20]
 8017252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017254:	695a      	ldr	r2, [r3, #20]
 8017256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017258:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801725c:	2280      	movs	r2, #128	; 0x80
 801725e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017260:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017264:	2b03      	cmp	r3, #3
 8017266:	d149      	bne.n	80172fc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801726a:	3334      	adds	r3, #52	; 0x34
 801726c:	3330      	adds	r3, #48	; 0x30
 801726e:	4618      	mov	r0, r3
 8017270:	f7fd fd8e 	bl	8014d90 <ld_word>
 8017274:	4603      	mov	r3, r0
 8017276:	2b01      	cmp	r3, #1
 8017278:	d140      	bne.n	80172fc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 801727a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801727c:	3301      	adds	r3, #1
 801727e:	4619      	mov	r1, r3
 8017280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017282:	f7fe f835 	bl	80152f0 <move_window>
 8017286:	4603      	mov	r3, r0
 8017288:	2b00      	cmp	r3, #0
 801728a:	d137      	bne.n	80172fc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 801728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801728e:	2200      	movs	r2, #0
 8017290:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017294:	3334      	adds	r3, #52	; 0x34
 8017296:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801729a:	4618      	mov	r0, r3
 801729c:	f7fd fd78 	bl	8014d90 <ld_word>
 80172a0:	4603      	mov	r3, r0
 80172a2:	461a      	mov	r2, r3
 80172a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80172a8:	429a      	cmp	r2, r3
 80172aa:	d127      	bne.n	80172fc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80172ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ae:	3334      	adds	r3, #52	; 0x34
 80172b0:	4618      	mov	r0, r3
 80172b2:	f7fd fd85 	bl	8014dc0 <ld_dword>
 80172b6:	4603      	mov	r3, r0
 80172b8:	4a1d      	ldr	r2, [pc, #116]	; (8017330 <find_volume+0x494>)
 80172ba:	4293      	cmp	r3, r2
 80172bc:	d11e      	bne.n	80172fc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80172be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172c0:	3334      	adds	r3, #52	; 0x34
 80172c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80172c6:	4618      	mov	r0, r3
 80172c8:	f7fd fd7a 	bl	8014dc0 <ld_dword>
 80172cc:	4603      	mov	r3, r0
 80172ce:	4a19      	ldr	r2, [pc, #100]	; (8017334 <find_volume+0x498>)
 80172d0:	4293      	cmp	r3, r2
 80172d2:	d113      	bne.n	80172fc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80172d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172d6:	3334      	adds	r3, #52	; 0x34
 80172d8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80172dc:	4618      	mov	r0, r3
 80172de:	f7fd fd6f 	bl	8014dc0 <ld_dword>
 80172e2:	4602      	mov	r2, r0
 80172e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172e6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80172e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ea:	3334      	adds	r3, #52	; 0x34
 80172ec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80172f0:	4618      	mov	r0, r3
 80172f2:	f7fd fd65 	bl	8014dc0 <ld_dword>
 80172f6:	4602      	mov	r2, r0
 80172f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172fa:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80172fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172fe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017302:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017304:	4b0c      	ldr	r3, [pc, #48]	; (8017338 <find_volume+0x49c>)
 8017306:	881b      	ldrh	r3, [r3, #0]
 8017308:	3301      	adds	r3, #1
 801730a:	b29a      	uxth	r2, r3
 801730c:	4b0a      	ldr	r3, [pc, #40]	; (8017338 <find_volume+0x49c>)
 801730e:	801a      	strh	r2, [r3, #0]
 8017310:	4b09      	ldr	r3, [pc, #36]	; (8017338 <find_volume+0x49c>)
 8017312:	881a      	ldrh	r2, [r3, #0]
 8017314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017316:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8017318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801731a:	4a08      	ldr	r2, [pc, #32]	; (801733c <find_volume+0x4a0>)
 801731c:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801731e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017320:	f7fd ff7e 	bl	8015220 <clear_lock>
#endif
	return FR_OK;
 8017324:	2300      	movs	r3, #0
}
 8017326:	4618      	mov	r0, r3
 8017328:	3758      	adds	r7, #88	; 0x58
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}
 801732e:	bf00      	nop
 8017330:	41615252 	.word	0x41615252
 8017334:	61417272 	.word	0x61417272
 8017338:	20000d78 	.word	0x20000d78
 801733c:	20000ebc 	.word	0x20000ebc

08017340 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b084      	sub	sp, #16
 8017344:	af00      	add	r7, sp, #0
 8017346:	6078      	str	r0, [r7, #4]
 8017348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801734a:	2309      	movs	r3, #9
 801734c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d01c      	beq.n	801738e <validate+0x4e>
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	2b00      	cmp	r3, #0
 801735a:	d018      	beq.n	801738e <validate+0x4e>
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	781b      	ldrb	r3, [r3, #0]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d013      	beq.n	801738e <validate+0x4e>
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	889a      	ldrh	r2, [r3, #4]
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	88db      	ldrh	r3, [r3, #6]
 8017370:	429a      	cmp	r2, r3
 8017372:	d10c      	bne.n	801738e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	785b      	ldrb	r3, [r3, #1]
 801737a:	4618      	mov	r0, r3
 801737c:	f7fd fc62 	bl	8014c44 <disk_status>
 8017380:	4603      	mov	r3, r0
 8017382:	f003 0301 	and.w	r3, r3, #1
 8017386:	2b00      	cmp	r3, #0
 8017388:	d101      	bne.n	801738e <validate+0x4e>
			res = FR_OK;
 801738a:	2300      	movs	r3, #0
 801738c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801738e:	7bfb      	ldrb	r3, [r7, #15]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d102      	bne.n	801739a <validate+0x5a>
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	e000      	b.n	801739c <validate+0x5c>
 801739a:	2300      	movs	r3, #0
 801739c:	683a      	ldr	r2, [r7, #0]
 801739e:	6013      	str	r3, [r2, #0]
	return res;
 80173a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80173a2:	4618      	mov	r0, r3
 80173a4:	3710      	adds	r7, #16
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}
	...

080173ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b088      	sub	sp, #32
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	60f8      	str	r0, [r7, #12]
 80173b4:	60b9      	str	r1, [r7, #8]
 80173b6:	4613      	mov	r3, r2
 80173b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80173ba:	68bb      	ldr	r3, [r7, #8]
 80173bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80173be:	f107 0310 	add.w	r3, r7, #16
 80173c2:	4618      	mov	r0, r3
 80173c4:	f7ff fccf 	bl	8016d66 <get_ldnumber>
 80173c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80173ca:	69fb      	ldr	r3, [r7, #28]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	da01      	bge.n	80173d4 <f_mount+0x28>
 80173d0:	230b      	movs	r3, #11
 80173d2:	e02b      	b.n	801742c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80173d4:	4a17      	ldr	r2, [pc, #92]	; (8017434 <f_mount+0x88>)
 80173d6:	69fb      	ldr	r3, [r7, #28]
 80173d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80173de:	69bb      	ldr	r3, [r7, #24]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d005      	beq.n	80173f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80173e4:	69b8      	ldr	r0, [r7, #24]
 80173e6:	f7fd ff1b 	bl	8015220 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80173ea:	69bb      	ldr	r3, [r7, #24]
 80173ec:	2200      	movs	r2, #0
 80173ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d002      	beq.n	80173fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	2200      	movs	r2, #0
 80173fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80173fc:	68fa      	ldr	r2, [r7, #12]
 80173fe:	490d      	ldr	r1, [pc, #52]	; (8017434 <f_mount+0x88>)
 8017400:	69fb      	ldr	r3, [r7, #28]
 8017402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d002      	beq.n	8017412 <f_mount+0x66>
 801740c:	79fb      	ldrb	r3, [r7, #7]
 801740e:	2b01      	cmp	r3, #1
 8017410:	d001      	beq.n	8017416 <f_mount+0x6a>
 8017412:	2300      	movs	r3, #0
 8017414:	e00a      	b.n	801742c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017416:	f107 010c 	add.w	r1, r7, #12
 801741a:	f107 0308 	add.w	r3, r7, #8
 801741e:	2200      	movs	r2, #0
 8017420:	4618      	mov	r0, r3
 8017422:	f7ff fd3b 	bl	8016e9c <find_volume>
 8017426:	4603      	mov	r3, r0
 8017428:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801742a:	7dfb      	ldrb	r3, [r7, #23]
}
 801742c:	4618      	mov	r0, r3
 801742e:	3720      	adds	r7, #32
 8017430:	46bd      	mov	sp, r7
 8017432:	bd80      	pop	{r7, pc}
 8017434:	20000d74 	.word	0x20000d74

08017438 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b09a      	sub	sp, #104	; 0x68
 801743c:	af00      	add	r7, sp, #0
 801743e:	60f8      	str	r0, [r7, #12]
 8017440:	60b9      	str	r1, [r7, #8]
 8017442:	4613      	mov	r3, r2
 8017444:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d101      	bne.n	8017450 <f_open+0x18>
 801744c:	2309      	movs	r3, #9
 801744e:	e1ad      	b.n	80177ac <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017450:	79fb      	ldrb	r3, [r7, #7]
 8017452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017456:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017458:	79fa      	ldrb	r2, [r7, #7]
 801745a:	f107 0110 	add.w	r1, r7, #16
 801745e:	f107 0308 	add.w	r3, r7, #8
 8017462:	4618      	mov	r0, r3
 8017464:	f7ff fd1a 	bl	8016e9c <find_volume>
 8017468:	4603      	mov	r3, r0
 801746a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801746e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017472:	2b00      	cmp	r3, #0
 8017474:	f040 8191 	bne.w	801779a <f_open+0x362>
		dj.obj.fs = fs;
 8017478:	693b      	ldr	r3, [r7, #16]
 801747a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801747c:	68ba      	ldr	r2, [r7, #8]
 801747e:	f107 0314 	add.w	r3, r7, #20
 8017482:	4611      	mov	r1, r2
 8017484:	4618      	mov	r0, r3
 8017486:	f7ff fbfd 	bl	8016c84 <follow_path>
 801748a:	4603      	mov	r3, r0
 801748c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017490:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017494:	2b00      	cmp	r3, #0
 8017496:	d11a      	bne.n	80174ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017498:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801749c:	b25b      	sxtb	r3, r3
 801749e:	2b00      	cmp	r3, #0
 80174a0:	da03      	bge.n	80174aa <f_open+0x72>
				res = FR_INVALID_NAME;
 80174a2:	2306      	movs	r3, #6
 80174a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80174a8:	e011      	b.n	80174ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80174aa:	79fb      	ldrb	r3, [r7, #7]
 80174ac:	f023 0301 	bic.w	r3, r3, #1
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	bf14      	ite	ne
 80174b4:	2301      	movne	r3, #1
 80174b6:	2300      	moveq	r3, #0
 80174b8:	b2db      	uxtb	r3, r3
 80174ba:	461a      	mov	r2, r3
 80174bc:	f107 0314 	add.w	r3, r7, #20
 80174c0:	4611      	mov	r1, r2
 80174c2:	4618      	mov	r0, r3
 80174c4:	f7fd fd64 	bl	8014f90 <chk_lock>
 80174c8:	4603      	mov	r3, r0
 80174ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80174ce:	79fb      	ldrb	r3, [r7, #7]
 80174d0:	f003 031c 	and.w	r3, r3, #28
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d07f      	beq.n	80175d8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80174d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d017      	beq.n	8017510 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80174e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80174e4:	2b04      	cmp	r3, #4
 80174e6:	d10e      	bne.n	8017506 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80174e8:	f7fd fdae 	bl	8015048 <enq_lock>
 80174ec:	4603      	mov	r3, r0
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d006      	beq.n	8017500 <f_open+0xc8>
 80174f2:	f107 0314 	add.w	r3, r7, #20
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7fe ff94 	bl	8016424 <dir_register>
 80174fc:	4603      	mov	r3, r0
 80174fe:	e000      	b.n	8017502 <f_open+0xca>
 8017500:	2312      	movs	r3, #18
 8017502:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8017506:	79fb      	ldrb	r3, [r7, #7]
 8017508:	f043 0308 	orr.w	r3, r3, #8
 801750c:	71fb      	strb	r3, [r7, #7]
 801750e:	e010      	b.n	8017532 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017510:	7ebb      	ldrb	r3, [r7, #26]
 8017512:	f003 0311 	and.w	r3, r3, #17
 8017516:	2b00      	cmp	r3, #0
 8017518:	d003      	beq.n	8017522 <f_open+0xea>
					res = FR_DENIED;
 801751a:	2307      	movs	r3, #7
 801751c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017520:	e007      	b.n	8017532 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017522:	79fb      	ldrb	r3, [r7, #7]
 8017524:	f003 0304 	and.w	r3, r3, #4
 8017528:	2b00      	cmp	r3, #0
 801752a:	d002      	beq.n	8017532 <f_open+0xfa>
 801752c:	2308      	movs	r3, #8
 801752e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017532:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017536:	2b00      	cmp	r3, #0
 8017538:	d168      	bne.n	801760c <f_open+0x1d4>
 801753a:	79fb      	ldrb	r3, [r7, #7]
 801753c:	f003 0308 	and.w	r3, r3, #8
 8017540:	2b00      	cmp	r3, #0
 8017542:	d063      	beq.n	801760c <f_open+0x1d4>
				dw = GET_FATTIME();
 8017544:	f7fd fc1c 	bl	8014d80 <get_fattime>
 8017548:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801754a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801754c:	330e      	adds	r3, #14
 801754e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017550:	4618      	mov	r0, r3
 8017552:	f7fd fc73 	bl	8014e3c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017558:	3316      	adds	r3, #22
 801755a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801755c:	4618      	mov	r0, r3
 801755e:	f7fd fc6d 	bl	8014e3c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017564:	330b      	adds	r3, #11
 8017566:	2220      	movs	r2, #32
 8017568:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801756a:	693b      	ldr	r3, [r7, #16]
 801756c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801756e:	4611      	mov	r1, r2
 8017570:	4618      	mov	r0, r3
 8017572:	f7fe fbc4 	bl	8015cfe <ld_clust>
 8017576:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017578:	693b      	ldr	r3, [r7, #16]
 801757a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801757c:	2200      	movs	r2, #0
 801757e:	4618      	mov	r0, r3
 8017580:	f7fe fbdc 	bl	8015d3c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8017584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017586:	331c      	adds	r3, #28
 8017588:	2100      	movs	r1, #0
 801758a:	4618      	mov	r0, r3
 801758c:	f7fd fc56 	bl	8014e3c <st_dword>
					fs->wflag = 1;
 8017590:	693b      	ldr	r3, [r7, #16]
 8017592:	2201      	movs	r2, #1
 8017594:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8017596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017598:	2b00      	cmp	r3, #0
 801759a:	d037      	beq.n	801760c <f_open+0x1d4>
						dw = fs->winsect;
 801759c:	693b      	ldr	r3, [r7, #16]
 801759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175a0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80175a2:	f107 0314 	add.w	r3, r7, #20
 80175a6:	2200      	movs	r2, #0
 80175a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80175aa:	4618      	mov	r0, r3
 80175ac:	f7fe f8ef 	bl	801578e <remove_chain>
 80175b0:	4603      	mov	r3, r0
 80175b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80175b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d126      	bne.n	801760c <f_open+0x1d4>
							res = move_window(fs, dw);
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80175c2:	4618      	mov	r0, r3
 80175c4:	f7fd fe94 	bl	80152f0 <move_window>
 80175c8:	4603      	mov	r3, r0
 80175ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80175ce:	693b      	ldr	r3, [r7, #16]
 80175d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80175d2:	3a01      	subs	r2, #1
 80175d4:	611a      	str	r2, [r3, #16]
 80175d6:	e019      	b.n	801760c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80175d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d115      	bne.n	801760c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80175e0:	7ebb      	ldrb	r3, [r7, #26]
 80175e2:	f003 0310 	and.w	r3, r3, #16
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d003      	beq.n	80175f2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80175ea:	2304      	movs	r3, #4
 80175ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80175f0:	e00c      	b.n	801760c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80175f2:	79fb      	ldrb	r3, [r7, #7]
 80175f4:	f003 0302 	and.w	r3, r3, #2
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d007      	beq.n	801760c <f_open+0x1d4>
 80175fc:	7ebb      	ldrb	r3, [r7, #26]
 80175fe:	f003 0301 	and.w	r3, r3, #1
 8017602:	2b00      	cmp	r3, #0
 8017604:	d002      	beq.n	801760c <f_open+0x1d4>
						res = FR_DENIED;
 8017606:	2307      	movs	r3, #7
 8017608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801760c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017610:	2b00      	cmp	r3, #0
 8017612:	d128      	bne.n	8017666 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8017614:	79fb      	ldrb	r3, [r7, #7]
 8017616:	f003 0308 	and.w	r3, r3, #8
 801761a:	2b00      	cmp	r3, #0
 801761c:	d003      	beq.n	8017626 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801761e:	79fb      	ldrb	r3, [r7, #7]
 8017620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017624:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8017626:	693b      	ldr	r3, [r7, #16]
 8017628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801762e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017634:	79fb      	ldrb	r3, [r7, #7]
 8017636:	f023 0301 	bic.w	r3, r3, #1
 801763a:	2b00      	cmp	r3, #0
 801763c:	bf14      	ite	ne
 801763e:	2301      	movne	r3, #1
 8017640:	2300      	moveq	r3, #0
 8017642:	b2db      	uxtb	r3, r3
 8017644:	461a      	mov	r2, r3
 8017646:	f107 0314 	add.w	r3, r7, #20
 801764a:	4611      	mov	r1, r2
 801764c:	4618      	mov	r0, r3
 801764e:	f7fd fd1d 	bl	801508c <inc_lock>
 8017652:	4602      	mov	r2, r0
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	691b      	ldr	r3, [r3, #16]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d102      	bne.n	8017666 <f_open+0x22e>
 8017660:	2302      	movs	r3, #2
 8017662:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8017666:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801766a:	2b00      	cmp	r3, #0
 801766c:	f040 8095 	bne.w	801779a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8017670:	693b      	ldr	r3, [r7, #16]
 8017672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017674:	4611      	mov	r1, r2
 8017676:	4618      	mov	r0, r3
 8017678:	f7fe fb41 	bl	8015cfe <ld_clust>
 801767c:	4602      	mov	r2, r0
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8017682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017684:	331c      	adds	r3, #28
 8017686:	4618      	mov	r0, r3
 8017688:	f7fd fb9a 	bl	8014dc0 <ld_dword>
 801768c:	4602      	mov	r2, r0
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	2200      	movs	r2, #0
 8017696:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8017698:	693a      	ldr	r2, [r7, #16]
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801769e:	693b      	ldr	r3, [r7, #16]
 80176a0:	88da      	ldrh	r2, [r3, #6]
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	79fa      	ldrb	r2, [r7, #7]
 80176aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	2200      	movs	r2, #0
 80176b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	2200      	movs	r2, #0
 80176b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	2200      	movs	r2, #0
 80176bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	3330      	adds	r3, #48	; 0x30
 80176c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80176c6:	2100      	movs	r1, #0
 80176c8:	4618      	mov	r0, r3
 80176ca:	f7fd fc04 	bl	8014ed6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80176ce:	79fb      	ldrb	r3, [r7, #7]
 80176d0:	f003 0320 	and.w	r3, r3, #32
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d060      	beq.n	801779a <f_open+0x362>
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	68db      	ldr	r3, [r3, #12]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d05c      	beq.n	801779a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	68da      	ldr	r2, [r3, #12]
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80176e8:	693b      	ldr	r3, [r7, #16]
 80176ea:	895b      	ldrh	r3, [r3, #10]
 80176ec:	025b      	lsls	r3, r3, #9
 80176ee:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	689b      	ldr	r3, [r3, #8]
 80176f4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	68db      	ldr	r3, [r3, #12]
 80176fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80176fc:	e016      	b.n	801772c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017702:	4618      	mov	r0, r3
 8017704:	f7fd feaf 	bl	8015466 <get_fat>
 8017708:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801770a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801770c:	2b01      	cmp	r3, #1
 801770e:	d802      	bhi.n	8017716 <f_open+0x2de>
 8017710:	2302      	movs	r3, #2
 8017712:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017718:	f1b3 3fff 	cmp.w	r3, #4294967295
 801771c:	d102      	bne.n	8017724 <f_open+0x2ec>
 801771e:	2301      	movs	r3, #1
 8017720:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017724:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017728:	1ad3      	subs	r3, r2, r3
 801772a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801772c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017730:	2b00      	cmp	r3, #0
 8017732:	d103      	bne.n	801773c <f_open+0x304>
 8017734:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017738:	429a      	cmp	r2, r3
 801773a:	d8e0      	bhi.n	80176fe <f_open+0x2c6>
				}
				fp->clust = clst;
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017740:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8017742:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017746:	2b00      	cmp	r3, #0
 8017748:	d127      	bne.n	801779a <f_open+0x362>
 801774a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801774c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017750:	2b00      	cmp	r3, #0
 8017752:	d022      	beq.n	801779a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8017754:	693b      	ldr	r3, [r7, #16]
 8017756:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017758:	4618      	mov	r0, r3
 801775a:	f7fd fe65 	bl	8015428 <clust2sect>
 801775e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017762:	2b00      	cmp	r3, #0
 8017764:	d103      	bne.n	801776e <f_open+0x336>
						res = FR_INT_ERR;
 8017766:	2302      	movs	r3, #2
 8017768:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801776c:	e015      	b.n	801779a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801776e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017770:	0a5a      	lsrs	r2, r3, #9
 8017772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017774:	441a      	add	r2, r3
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801777a:	693b      	ldr	r3, [r7, #16]
 801777c:	7858      	ldrb	r0, [r3, #1]
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	6a1a      	ldr	r2, [r3, #32]
 8017788:	2301      	movs	r3, #1
 801778a:	f7fd fa9b 	bl	8014cc4 <disk_read>
 801778e:	4603      	mov	r3, r0
 8017790:	2b00      	cmp	r3, #0
 8017792:	d002      	beq.n	801779a <f_open+0x362>
 8017794:	2301      	movs	r3, #1
 8017796:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801779a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d002      	beq.n	80177a8 <f_open+0x370>
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	2200      	movs	r2, #0
 80177a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80177a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80177ac:	4618      	mov	r0, r3
 80177ae:	3768      	adds	r7, #104	; 0x68
 80177b0:	46bd      	mov	sp, r7
 80177b2:	bd80      	pop	{r7, pc}

080177b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b08e      	sub	sp, #56	; 0x38
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	60f8      	str	r0, [r7, #12]
 80177bc:	60b9      	str	r1, [r7, #8]
 80177be:	607a      	str	r2, [r7, #4]
 80177c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80177c6:	683b      	ldr	r3, [r7, #0]
 80177c8:	2200      	movs	r2, #0
 80177ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	f107 0214 	add.w	r2, r7, #20
 80177d2:	4611      	mov	r1, r2
 80177d4:	4618      	mov	r0, r3
 80177d6:	f7ff fdb3 	bl	8017340 <validate>
 80177da:	4603      	mov	r3, r0
 80177dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80177e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d107      	bne.n	80177f8 <f_read+0x44>
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	7d5b      	ldrb	r3, [r3, #21]
 80177ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80177f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d002      	beq.n	80177fe <f_read+0x4a>
 80177f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80177fc:	e115      	b.n	8017a2a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	7d1b      	ldrb	r3, [r3, #20]
 8017802:	f003 0301 	and.w	r3, r3, #1
 8017806:	2b00      	cmp	r3, #0
 8017808:	d101      	bne.n	801780e <f_read+0x5a>
 801780a:	2307      	movs	r3, #7
 801780c:	e10d      	b.n	8017a2a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	68da      	ldr	r2, [r3, #12]
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	699b      	ldr	r3, [r3, #24]
 8017816:	1ad3      	subs	r3, r2, r3
 8017818:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801781a:	687a      	ldr	r2, [r7, #4]
 801781c:	6a3b      	ldr	r3, [r7, #32]
 801781e:	429a      	cmp	r2, r3
 8017820:	f240 80fe 	bls.w	8017a20 <f_read+0x26c>
 8017824:	6a3b      	ldr	r3, [r7, #32]
 8017826:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8017828:	e0fa      	b.n	8017a20 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	699b      	ldr	r3, [r3, #24]
 801782e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017832:	2b00      	cmp	r3, #0
 8017834:	f040 80c6 	bne.w	80179c4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	699b      	ldr	r3, [r3, #24]
 801783c:	0a5b      	lsrs	r3, r3, #9
 801783e:	697a      	ldr	r2, [r7, #20]
 8017840:	8952      	ldrh	r2, [r2, #10]
 8017842:	3a01      	subs	r2, #1
 8017844:	4013      	ands	r3, r2
 8017846:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8017848:	69fb      	ldr	r3, [r7, #28]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d12f      	bne.n	80178ae <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	699b      	ldr	r3, [r3, #24]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d103      	bne.n	801785e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	689b      	ldr	r3, [r3, #8]
 801785a:	633b      	str	r3, [r7, #48]	; 0x30
 801785c:	e013      	b.n	8017886 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017862:	2b00      	cmp	r3, #0
 8017864:	d007      	beq.n	8017876 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	699b      	ldr	r3, [r3, #24]
 801786a:	4619      	mov	r1, r3
 801786c:	68f8      	ldr	r0, [r7, #12]
 801786e:	f7fe f88b 	bl	8015988 <clmt_clust>
 8017872:	6338      	str	r0, [r7, #48]	; 0x30
 8017874:	e007      	b.n	8017886 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8017876:	68fa      	ldr	r2, [r7, #12]
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	69db      	ldr	r3, [r3, #28]
 801787c:	4619      	mov	r1, r3
 801787e:	4610      	mov	r0, r2
 8017880:	f7fd fdf1 	bl	8015466 <get_fat>
 8017884:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8017886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017888:	2b01      	cmp	r3, #1
 801788a:	d804      	bhi.n	8017896 <f_read+0xe2>
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	2202      	movs	r2, #2
 8017890:	755a      	strb	r2, [r3, #21]
 8017892:	2302      	movs	r3, #2
 8017894:	e0c9      	b.n	8017a2a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801789c:	d104      	bne.n	80178a8 <f_read+0xf4>
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	2201      	movs	r2, #1
 80178a2:	755a      	strb	r2, [r3, #21]
 80178a4:	2301      	movs	r3, #1
 80178a6:	e0c0      	b.n	8017a2a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178ac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80178ae:	697a      	ldr	r2, [r7, #20]
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	69db      	ldr	r3, [r3, #28]
 80178b4:	4619      	mov	r1, r3
 80178b6:	4610      	mov	r0, r2
 80178b8:	f7fd fdb6 	bl	8015428 <clust2sect>
 80178bc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80178be:	69bb      	ldr	r3, [r7, #24]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d104      	bne.n	80178ce <f_read+0x11a>
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	2202      	movs	r2, #2
 80178c8:	755a      	strb	r2, [r3, #21]
 80178ca:	2302      	movs	r3, #2
 80178cc:	e0ad      	b.n	8017a2a <f_read+0x276>
			sect += csect;
 80178ce:	69ba      	ldr	r2, [r7, #24]
 80178d0:	69fb      	ldr	r3, [r7, #28]
 80178d2:	4413      	add	r3, r2
 80178d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	0a5b      	lsrs	r3, r3, #9
 80178da:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80178dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d039      	beq.n	8017956 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80178e2:	69fa      	ldr	r2, [r7, #28]
 80178e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178e6:	4413      	add	r3, r2
 80178e8:	697a      	ldr	r2, [r7, #20]
 80178ea:	8952      	ldrh	r2, [r2, #10]
 80178ec:	4293      	cmp	r3, r2
 80178ee:	d905      	bls.n	80178fc <f_read+0x148>
					cc = fs->csize - csect;
 80178f0:	697b      	ldr	r3, [r7, #20]
 80178f2:	895b      	ldrh	r3, [r3, #10]
 80178f4:	461a      	mov	r2, r3
 80178f6:	69fb      	ldr	r3, [r7, #28]
 80178f8:	1ad3      	subs	r3, r2, r3
 80178fa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80178fc:	697b      	ldr	r3, [r7, #20]
 80178fe:	7858      	ldrb	r0, [r3, #1]
 8017900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017902:	69ba      	ldr	r2, [r7, #24]
 8017904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017906:	f7fd f9dd 	bl	8014cc4 <disk_read>
 801790a:	4603      	mov	r3, r0
 801790c:	2b00      	cmp	r3, #0
 801790e:	d004      	beq.n	801791a <f_read+0x166>
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	2201      	movs	r2, #1
 8017914:	755a      	strb	r2, [r3, #21]
 8017916:	2301      	movs	r3, #1
 8017918:	e087      	b.n	8017a2a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	7d1b      	ldrb	r3, [r3, #20]
 801791e:	b25b      	sxtb	r3, r3
 8017920:	2b00      	cmp	r3, #0
 8017922:	da14      	bge.n	801794e <f_read+0x19a>
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	6a1a      	ldr	r2, [r3, #32]
 8017928:	69bb      	ldr	r3, [r7, #24]
 801792a:	1ad3      	subs	r3, r2, r3
 801792c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801792e:	429a      	cmp	r2, r3
 8017930:	d90d      	bls.n	801794e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	6a1a      	ldr	r2, [r3, #32]
 8017936:	69bb      	ldr	r3, [r7, #24]
 8017938:	1ad3      	subs	r3, r2, r3
 801793a:	025b      	lsls	r3, r3, #9
 801793c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801793e:	18d0      	adds	r0, r2, r3
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	3330      	adds	r3, #48	; 0x30
 8017944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017948:	4619      	mov	r1, r3
 801794a:	f7fd faa3 	bl	8014e94 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017950:	025b      	lsls	r3, r3, #9
 8017952:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8017954:	e050      	b.n	80179f8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	6a1b      	ldr	r3, [r3, #32]
 801795a:	69ba      	ldr	r2, [r7, #24]
 801795c:	429a      	cmp	r2, r3
 801795e:	d02e      	beq.n	80179be <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	7d1b      	ldrb	r3, [r3, #20]
 8017964:	b25b      	sxtb	r3, r3
 8017966:	2b00      	cmp	r3, #0
 8017968:	da18      	bge.n	801799c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801796a:	697b      	ldr	r3, [r7, #20]
 801796c:	7858      	ldrb	r0, [r3, #1]
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	6a1a      	ldr	r2, [r3, #32]
 8017978:	2301      	movs	r3, #1
 801797a:	f7fd f9c3 	bl	8014d04 <disk_write>
 801797e:	4603      	mov	r3, r0
 8017980:	2b00      	cmp	r3, #0
 8017982:	d004      	beq.n	801798e <f_read+0x1da>
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	2201      	movs	r2, #1
 8017988:	755a      	strb	r2, [r3, #21]
 801798a:	2301      	movs	r3, #1
 801798c:	e04d      	b.n	8017a2a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	7d1b      	ldrb	r3, [r3, #20]
 8017992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017996:	b2da      	uxtb	r2, r3
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801799c:	697b      	ldr	r3, [r7, #20]
 801799e:	7858      	ldrb	r0, [r3, #1]
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80179a6:	2301      	movs	r3, #1
 80179a8:	69ba      	ldr	r2, [r7, #24]
 80179aa:	f7fd f98b 	bl	8014cc4 <disk_read>
 80179ae:	4603      	mov	r3, r0
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d004      	beq.n	80179be <f_read+0x20a>
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	2201      	movs	r2, #1
 80179b8:	755a      	strb	r2, [r3, #21]
 80179ba:	2301      	movs	r3, #1
 80179bc:	e035      	b.n	8017a2a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	69ba      	ldr	r2, [r7, #24]
 80179c2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	699b      	ldr	r3, [r3, #24]
 80179c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80179cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80179d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80179d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	429a      	cmp	r2, r3
 80179d8:	d901      	bls.n	80179de <f_read+0x22a>
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	699b      	ldr	r3, [r3, #24]
 80179e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80179ec:	4413      	add	r3, r2
 80179ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80179f0:	4619      	mov	r1, r3
 80179f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80179f4:	f7fd fa4e 	bl	8014e94 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80179f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179fc:	4413      	add	r3, r2
 80179fe:	627b      	str	r3, [r7, #36]	; 0x24
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	699a      	ldr	r2, [r3, #24]
 8017a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a06:	441a      	add	r2, r3
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	619a      	str	r2, [r3, #24]
 8017a0c:	683b      	ldr	r3, [r7, #0]
 8017a0e:	681a      	ldr	r2, [r3, #0]
 8017a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a12:	441a      	add	r2, r3
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	601a      	str	r2, [r3, #0]
 8017a18:	687a      	ldr	r2, [r7, #4]
 8017a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a1c:	1ad3      	subs	r3, r2, r3
 8017a1e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	f47f af01 	bne.w	801782a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8017a28:	2300      	movs	r3, #0
}
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	3738      	adds	r7, #56	; 0x38
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	bd80      	pop	{r7, pc}

08017a32 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8017a32:	b580      	push	{r7, lr}
 8017a34:	b08c      	sub	sp, #48	; 0x30
 8017a36:	af00      	add	r7, sp, #0
 8017a38:	60f8      	str	r0, [r7, #12]
 8017a3a:	60b9      	str	r1, [r7, #8]
 8017a3c:	607a      	str	r2, [r7, #4]
 8017a3e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017a40:	68bb      	ldr	r3, [r7, #8]
 8017a42:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8017a44:	683b      	ldr	r3, [r7, #0]
 8017a46:	2200      	movs	r2, #0
 8017a48:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	f107 0210 	add.w	r2, r7, #16
 8017a50:	4611      	mov	r1, r2
 8017a52:	4618      	mov	r0, r3
 8017a54:	f7ff fc74 	bl	8017340 <validate>
 8017a58:	4603      	mov	r3, r0
 8017a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d107      	bne.n	8017a76 <f_write+0x44>
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	7d5b      	ldrb	r3, [r3, #21]
 8017a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d002      	beq.n	8017a7c <f_write+0x4a>
 8017a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017a7a:	e14b      	b.n	8017d14 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	7d1b      	ldrb	r3, [r3, #20]
 8017a80:	f003 0302 	and.w	r3, r3, #2
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d101      	bne.n	8017a8c <f_write+0x5a>
 8017a88:	2307      	movs	r3, #7
 8017a8a:	e143      	b.n	8017d14 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	699a      	ldr	r2, [r3, #24]
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	441a      	add	r2, r3
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	699b      	ldr	r3, [r3, #24]
 8017a98:	429a      	cmp	r2, r3
 8017a9a:	f080 812d 	bcs.w	8017cf8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	699b      	ldr	r3, [r3, #24]
 8017aa2:	43db      	mvns	r3, r3
 8017aa4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8017aa6:	e127      	b.n	8017cf8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	699b      	ldr	r3, [r3, #24]
 8017aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	f040 80e3 	bne.w	8017c7c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	699b      	ldr	r3, [r3, #24]
 8017aba:	0a5b      	lsrs	r3, r3, #9
 8017abc:	693a      	ldr	r2, [r7, #16]
 8017abe:	8952      	ldrh	r2, [r2, #10]
 8017ac0:	3a01      	subs	r2, #1
 8017ac2:	4013      	ands	r3, r2
 8017ac4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8017ac6:	69bb      	ldr	r3, [r7, #24]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d143      	bne.n	8017b54 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	699b      	ldr	r3, [r3, #24]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d10c      	bne.n	8017aee <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	689b      	ldr	r3, [r3, #8]
 8017ad8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8017ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d11a      	bne.n	8017b16 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	2100      	movs	r1, #0
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	f7fd feb7 	bl	8015858 <create_chain>
 8017aea:	62b8      	str	r0, [r7, #40]	; 0x28
 8017aec:	e013      	b.n	8017b16 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d007      	beq.n	8017b06 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	699b      	ldr	r3, [r3, #24]
 8017afa:	4619      	mov	r1, r3
 8017afc:	68f8      	ldr	r0, [r7, #12]
 8017afe:	f7fd ff43 	bl	8015988 <clmt_clust>
 8017b02:	62b8      	str	r0, [r7, #40]	; 0x28
 8017b04:	e007      	b.n	8017b16 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017b06:	68fa      	ldr	r2, [r7, #12]
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	69db      	ldr	r3, [r3, #28]
 8017b0c:	4619      	mov	r1, r3
 8017b0e:	4610      	mov	r0, r2
 8017b10:	f7fd fea2 	bl	8015858 <create_chain>
 8017b14:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	f000 80f2 	beq.w	8017d02 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b20:	2b01      	cmp	r3, #1
 8017b22:	d104      	bne.n	8017b2e <f_write+0xfc>
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	2202      	movs	r2, #2
 8017b28:	755a      	strb	r2, [r3, #21]
 8017b2a:	2302      	movs	r3, #2
 8017b2c:	e0f2      	b.n	8017d14 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b34:	d104      	bne.n	8017b40 <f_write+0x10e>
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	2201      	movs	r2, #1
 8017b3a:	755a      	strb	r2, [r3, #21]
 8017b3c:	2301      	movs	r3, #1
 8017b3e:	e0e9      	b.n	8017d14 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b44:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	689b      	ldr	r3, [r3, #8]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d102      	bne.n	8017b54 <f_write+0x122>
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b52:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	7d1b      	ldrb	r3, [r3, #20]
 8017b58:	b25b      	sxtb	r3, r3
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	da18      	bge.n	8017b90 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017b5e:	693b      	ldr	r3, [r7, #16]
 8017b60:	7858      	ldrb	r0, [r3, #1]
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	6a1a      	ldr	r2, [r3, #32]
 8017b6c:	2301      	movs	r3, #1
 8017b6e:	f7fd f8c9 	bl	8014d04 <disk_write>
 8017b72:	4603      	mov	r3, r0
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d004      	beq.n	8017b82 <f_write+0x150>
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	2201      	movs	r2, #1
 8017b7c:	755a      	strb	r2, [r3, #21]
 8017b7e:	2301      	movs	r3, #1
 8017b80:	e0c8      	b.n	8017d14 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	7d1b      	ldrb	r3, [r3, #20]
 8017b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017b8a:	b2da      	uxtb	r2, r3
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8017b90:	693a      	ldr	r2, [r7, #16]
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	69db      	ldr	r3, [r3, #28]
 8017b96:	4619      	mov	r1, r3
 8017b98:	4610      	mov	r0, r2
 8017b9a:	f7fd fc45 	bl	8015428 <clust2sect>
 8017b9e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017ba0:	697b      	ldr	r3, [r7, #20]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d104      	bne.n	8017bb0 <f_write+0x17e>
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	2202      	movs	r2, #2
 8017baa:	755a      	strb	r2, [r3, #21]
 8017bac:	2302      	movs	r3, #2
 8017bae:	e0b1      	b.n	8017d14 <f_write+0x2e2>
			sect += csect;
 8017bb0:	697a      	ldr	r2, [r7, #20]
 8017bb2:	69bb      	ldr	r3, [r7, #24]
 8017bb4:	4413      	add	r3, r2
 8017bb6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	0a5b      	lsrs	r3, r3, #9
 8017bbc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8017bbe:	6a3b      	ldr	r3, [r7, #32]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d03c      	beq.n	8017c3e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017bc4:	69ba      	ldr	r2, [r7, #24]
 8017bc6:	6a3b      	ldr	r3, [r7, #32]
 8017bc8:	4413      	add	r3, r2
 8017bca:	693a      	ldr	r2, [r7, #16]
 8017bcc:	8952      	ldrh	r2, [r2, #10]
 8017bce:	4293      	cmp	r3, r2
 8017bd0:	d905      	bls.n	8017bde <f_write+0x1ac>
					cc = fs->csize - csect;
 8017bd2:	693b      	ldr	r3, [r7, #16]
 8017bd4:	895b      	ldrh	r3, [r3, #10]
 8017bd6:	461a      	mov	r2, r3
 8017bd8:	69bb      	ldr	r3, [r7, #24]
 8017bda:	1ad3      	subs	r3, r2, r3
 8017bdc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017bde:	693b      	ldr	r3, [r7, #16]
 8017be0:	7858      	ldrb	r0, [r3, #1]
 8017be2:	6a3b      	ldr	r3, [r7, #32]
 8017be4:	697a      	ldr	r2, [r7, #20]
 8017be6:	69f9      	ldr	r1, [r7, #28]
 8017be8:	f7fd f88c 	bl	8014d04 <disk_write>
 8017bec:	4603      	mov	r3, r0
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d004      	beq.n	8017bfc <f_write+0x1ca>
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	2201      	movs	r2, #1
 8017bf6:	755a      	strb	r2, [r3, #21]
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	e08b      	b.n	8017d14 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	6a1a      	ldr	r2, [r3, #32]
 8017c00:	697b      	ldr	r3, [r7, #20]
 8017c02:	1ad3      	subs	r3, r2, r3
 8017c04:	6a3a      	ldr	r2, [r7, #32]
 8017c06:	429a      	cmp	r2, r3
 8017c08:	d915      	bls.n	8017c36 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	6a1a      	ldr	r2, [r3, #32]
 8017c14:	697b      	ldr	r3, [r7, #20]
 8017c16:	1ad3      	subs	r3, r2, r3
 8017c18:	025b      	lsls	r3, r3, #9
 8017c1a:	69fa      	ldr	r2, [r7, #28]
 8017c1c:	4413      	add	r3, r2
 8017c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c22:	4619      	mov	r1, r3
 8017c24:	f7fd f936 	bl	8014e94 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	7d1b      	ldrb	r3, [r3, #20]
 8017c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017c30:	b2da      	uxtb	r2, r3
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8017c36:	6a3b      	ldr	r3, [r7, #32]
 8017c38:	025b      	lsls	r3, r3, #9
 8017c3a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017c3c:	e03f      	b.n	8017cbe <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	6a1b      	ldr	r3, [r3, #32]
 8017c42:	697a      	ldr	r2, [r7, #20]
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d016      	beq.n	8017c76 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	699a      	ldr	r2, [r3, #24]
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d210      	bcs.n	8017c76 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017c54:	693b      	ldr	r3, [r7, #16]
 8017c56:	7858      	ldrb	r0, [r3, #1]
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017c5e:	2301      	movs	r3, #1
 8017c60:	697a      	ldr	r2, [r7, #20]
 8017c62:	f7fd f82f 	bl	8014cc4 <disk_read>
 8017c66:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d004      	beq.n	8017c76 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	2201      	movs	r2, #1
 8017c70:	755a      	strb	r2, [r3, #21]
 8017c72:	2301      	movs	r3, #1
 8017c74:	e04e      	b.n	8017d14 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	697a      	ldr	r2, [r7, #20]
 8017c7a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	699b      	ldr	r3, [r3, #24]
 8017c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017c84:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017c88:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8017c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	429a      	cmp	r2, r3
 8017c90:	d901      	bls.n	8017c96 <f_write+0x264>
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	699b      	ldr	r3, [r3, #24]
 8017ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017ca4:	4413      	add	r3, r2
 8017ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ca8:	69f9      	ldr	r1, [r7, #28]
 8017caa:	4618      	mov	r0, r3
 8017cac:	f7fd f8f2 	bl	8014e94 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	7d1b      	ldrb	r3, [r3, #20]
 8017cb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017cb8:	b2da      	uxtb	r2, r3
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017cbe:	69fa      	ldr	r2, [r7, #28]
 8017cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cc2:	4413      	add	r3, r2
 8017cc4:	61fb      	str	r3, [r7, #28]
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	699a      	ldr	r2, [r3, #24]
 8017cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ccc:	441a      	add	r2, r3
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	619a      	str	r2, [r3, #24]
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	68da      	ldr	r2, [r3, #12]
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	699b      	ldr	r3, [r3, #24]
 8017cda:	429a      	cmp	r2, r3
 8017cdc:	bf38      	it	cc
 8017cde:	461a      	movcc	r2, r3
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	60da      	str	r2, [r3, #12]
 8017ce4:	683b      	ldr	r3, [r7, #0]
 8017ce6:	681a      	ldr	r2, [r3, #0]
 8017ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cea:	441a      	add	r2, r3
 8017cec:	683b      	ldr	r3, [r7, #0]
 8017cee:	601a      	str	r2, [r3, #0]
 8017cf0:	687a      	ldr	r2, [r7, #4]
 8017cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf4:	1ad3      	subs	r3, r2, r3
 8017cf6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	f47f aed4 	bne.w	8017aa8 <f_write+0x76>
 8017d00:	e000      	b.n	8017d04 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017d02:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	7d1b      	ldrb	r3, [r3, #20]
 8017d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d0c:	b2da      	uxtb	r2, r3
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8017d12:	2300      	movs	r3, #0
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3730      	adds	r7, #48	; 0x30
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b086      	sub	sp, #24
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	f107 0208 	add.w	r2, r7, #8
 8017d2a:	4611      	mov	r1, r2
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	f7ff fb07 	bl	8017340 <validate>
 8017d32:	4603      	mov	r3, r0
 8017d34:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017d36:	7dfb      	ldrb	r3, [r7, #23]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d168      	bne.n	8017e0e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	7d1b      	ldrb	r3, [r3, #20]
 8017d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d062      	beq.n	8017e0e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	7d1b      	ldrb	r3, [r3, #20]
 8017d4c:	b25b      	sxtb	r3, r3
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	da15      	bge.n	8017d7e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017d52:	68bb      	ldr	r3, [r7, #8]
 8017d54:	7858      	ldrb	r0, [r3, #1]
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	6a1a      	ldr	r2, [r3, #32]
 8017d60:	2301      	movs	r3, #1
 8017d62:	f7fc ffcf 	bl	8014d04 <disk_write>
 8017d66:	4603      	mov	r3, r0
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d001      	beq.n	8017d70 <f_sync+0x54>
 8017d6c:	2301      	movs	r3, #1
 8017d6e:	e04f      	b.n	8017e10 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	7d1b      	ldrb	r3, [r3, #20]
 8017d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017d78:	b2da      	uxtb	r2, r3
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017d7e:	f7fc ffff 	bl	8014d80 <get_fattime>
 8017d82:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8017d84:	68ba      	ldr	r2, [r7, #8]
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d8a:	4619      	mov	r1, r3
 8017d8c:	4610      	mov	r0, r2
 8017d8e:	f7fd faaf 	bl	80152f0 <move_window>
 8017d92:	4603      	mov	r3, r0
 8017d94:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8017d96:	7dfb      	ldrb	r3, [r7, #23]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d138      	bne.n	8017e0e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017da0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	330b      	adds	r3, #11
 8017da6:	781a      	ldrb	r2, [r3, #0]
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	330b      	adds	r3, #11
 8017dac:	f042 0220 	orr.w	r2, r2, #32
 8017db0:	b2d2      	uxtb	r2, r2
 8017db2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	6818      	ldr	r0, [r3, #0]
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	689b      	ldr	r3, [r3, #8]
 8017dbc:	461a      	mov	r2, r3
 8017dbe:	68f9      	ldr	r1, [r7, #12]
 8017dc0:	f7fd ffbc 	bl	8015d3c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	f103 021c 	add.w	r2, r3, #28
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	68db      	ldr	r3, [r3, #12]
 8017dce:	4619      	mov	r1, r3
 8017dd0:	4610      	mov	r0, r2
 8017dd2:	f7fd f833 	bl	8014e3c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	3316      	adds	r3, #22
 8017dda:	6939      	ldr	r1, [r7, #16]
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f7fd f82d 	bl	8014e3c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	3312      	adds	r3, #18
 8017de6:	2100      	movs	r1, #0
 8017de8:	4618      	mov	r0, r3
 8017dea:	f7fd f80c 	bl	8014e06 <st_word>
					fs->wflag = 1;
 8017dee:	68bb      	ldr	r3, [r7, #8]
 8017df0:	2201      	movs	r2, #1
 8017df2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017df4:	68bb      	ldr	r3, [r7, #8]
 8017df6:	4618      	mov	r0, r3
 8017df8:	f7fd faa8 	bl	801534c <sync_fs>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	7d1b      	ldrb	r3, [r3, #20]
 8017e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017e08:	b2da      	uxtb	r2, r3
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e10:	4618      	mov	r0, r3
 8017e12:	3718      	adds	r7, #24
 8017e14:	46bd      	mov	sp, r7
 8017e16:	bd80      	pop	{r7, pc}

08017e18 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b084      	sub	sp, #16
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017e20:	6878      	ldr	r0, [r7, #4]
 8017e22:	f7ff ff7b 	bl	8017d1c <f_sync>
 8017e26:	4603      	mov	r3, r0
 8017e28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017e2a:	7bfb      	ldrb	r3, [r7, #15]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d118      	bne.n	8017e62 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	f107 0208 	add.w	r2, r7, #8
 8017e36:	4611      	mov	r1, r2
 8017e38:	4618      	mov	r0, r3
 8017e3a:	f7ff fa81 	bl	8017340 <validate>
 8017e3e:	4603      	mov	r3, r0
 8017e40:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017e42:	7bfb      	ldrb	r3, [r7, #15]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d10c      	bne.n	8017e62 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	691b      	ldr	r3, [r3, #16]
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f7fd f9ab 	bl	80151a8 <dec_lock>
 8017e52:	4603      	mov	r3, r0
 8017e54:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8017e56:	7bfb      	ldrb	r3, [r7, #15]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d102      	bne.n	8017e62 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	2200      	movs	r2, #0
 8017e60:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8017e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e64:	4618      	mov	r0, r3
 8017e66:	3710      	adds	r7, #16
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd80      	pop	{r7, pc}

08017e6c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b086      	sub	sp, #24
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
 8017e74:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d101      	bne.n	8017e80 <f_opendir+0x14>
 8017e7c:	2309      	movs	r3, #9
 8017e7e:	e064      	b.n	8017f4a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8017e84:	f107 010c 	add.w	r1, r7, #12
 8017e88:	463b      	mov	r3, r7
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	f7ff f805 	bl	8016e9c <find_volume>
 8017e92:	4603      	mov	r3, r0
 8017e94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017e96:	7dfb      	ldrb	r3, [r7, #23]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d14f      	bne.n	8017f3c <f_opendir+0xd0>
		obj->fs = fs;
 8017e9c:	68fa      	ldr	r2, [r7, #12]
 8017e9e:	693b      	ldr	r3, [r7, #16]
 8017ea0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8017ea2:	683b      	ldr	r3, [r7, #0]
 8017ea4:	4619      	mov	r1, r3
 8017ea6:	6878      	ldr	r0, [r7, #4]
 8017ea8:	f7fe feec 	bl	8016c84 <follow_path>
 8017eac:	4603      	mov	r3, r0
 8017eae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8017eb0:	7dfb      	ldrb	r3, [r7, #23]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d13d      	bne.n	8017f32 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017ebc:	b25b      	sxtb	r3, r3
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	db12      	blt.n	8017ee8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8017ec2:	693b      	ldr	r3, [r7, #16]
 8017ec4:	799b      	ldrb	r3, [r3, #6]
 8017ec6:	f003 0310 	and.w	r3, r3, #16
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d00a      	beq.n	8017ee4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8017ece:	68fa      	ldr	r2, [r7, #12]
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	6a1b      	ldr	r3, [r3, #32]
 8017ed4:	4619      	mov	r1, r3
 8017ed6:	4610      	mov	r0, r2
 8017ed8:	f7fd ff11 	bl	8015cfe <ld_clust>
 8017edc:	4602      	mov	r2, r0
 8017ede:	693b      	ldr	r3, [r7, #16]
 8017ee0:	609a      	str	r2, [r3, #8]
 8017ee2:	e001      	b.n	8017ee8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8017ee4:	2305      	movs	r3, #5
 8017ee6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8017ee8:	7dfb      	ldrb	r3, [r7, #23]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d121      	bne.n	8017f32 <f_opendir+0xc6>
				obj->id = fs->id;
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	88da      	ldrh	r2, [r3, #6]
 8017ef2:	693b      	ldr	r3, [r7, #16]
 8017ef4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8017ef6:	2100      	movs	r1, #0
 8017ef8:	6878      	ldr	r0, [r7, #4]
 8017efa:	f7fd fd79 	bl	80159f0 <dir_sdi>
 8017efe:	4603      	mov	r3, r0
 8017f00:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8017f02:	7dfb      	ldrb	r3, [r7, #23]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d114      	bne.n	8017f32 <f_opendir+0xc6>
					if (obj->sclust) {
 8017f08:	693b      	ldr	r3, [r7, #16]
 8017f0a:	689b      	ldr	r3, [r3, #8]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d00d      	beq.n	8017f2c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8017f10:	2100      	movs	r1, #0
 8017f12:	6878      	ldr	r0, [r7, #4]
 8017f14:	f7fd f8ba 	bl	801508c <inc_lock>
 8017f18:	4602      	mov	r2, r0
 8017f1a:	693b      	ldr	r3, [r7, #16]
 8017f1c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8017f1e:	693b      	ldr	r3, [r7, #16]
 8017f20:	691b      	ldr	r3, [r3, #16]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d105      	bne.n	8017f32 <f_opendir+0xc6>
 8017f26:	2312      	movs	r3, #18
 8017f28:	75fb      	strb	r3, [r7, #23]
 8017f2a:	e002      	b.n	8017f32 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8017f2c:	693b      	ldr	r3, [r7, #16]
 8017f2e:	2200      	movs	r2, #0
 8017f30:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8017f32:	7dfb      	ldrb	r3, [r7, #23]
 8017f34:	2b04      	cmp	r3, #4
 8017f36:	d101      	bne.n	8017f3c <f_opendir+0xd0>
 8017f38:	2305      	movs	r3, #5
 8017f3a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017f3c:	7dfb      	ldrb	r3, [r7, #23]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d002      	beq.n	8017f48 <f_opendir+0xdc>
 8017f42:	693b      	ldr	r3, [r7, #16]
 8017f44:	2200      	movs	r2, #0
 8017f46:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	3718      	adds	r7, #24
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}

08017f52 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8017f52:	b580      	push	{r7, lr}
 8017f54:	b084      	sub	sp, #16
 8017f56:	af00      	add	r7, sp, #0
 8017f58:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	f107 0208 	add.w	r2, r7, #8
 8017f60:	4611      	mov	r1, r2
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7ff f9ec 	bl	8017340 <validate>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017f6c:	7bfb      	ldrb	r3, [r7, #15]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d110      	bne.n	8017f94 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	691b      	ldr	r3, [r3, #16]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d006      	beq.n	8017f88 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	691b      	ldr	r3, [r3, #16]
 8017f7e:	4618      	mov	r0, r3
 8017f80:	f7fd f912 	bl	80151a8 <dec_lock>
 8017f84:	4603      	mov	r3, r0
 8017f86:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8017f88:	7bfb      	ldrb	r3, [r7, #15]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d102      	bne.n	8017f94 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	2200      	movs	r2, #0
 8017f92:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8017f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f96:	4618      	mov	r0, r3
 8017f98:	3710      	adds	r7, #16
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}

08017f9e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8017f9e:	b580      	push	{r7, lr}
 8017fa0:	b084      	sub	sp, #16
 8017fa2:	af00      	add	r7, sp, #0
 8017fa4:	6078      	str	r0, [r7, #4]
 8017fa6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	f107 0208 	add.w	r2, r7, #8
 8017fae:	4611      	mov	r1, r2
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f7ff f9c5 	bl	8017340 <validate>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017fba:	7bfb      	ldrb	r3, [r7, #15]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d126      	bne.n	801800e <f_readdir+0x70>
		if (!fno) {
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d106      	bne.n	8017fd4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8017fc6:	2100      	movs	r1, #0
 8017fc8:	6878      	ldr	r0, [r7, #4]
 8017fca:	f7fd fd11 	bl	80159f0 <dir_sdi>
 8017fce:	4603      	mov	r3, r0
 8017fd0:	73fb      	strb	r3, [r7, #15]
 8017fd2:	e01c      	b.n	801800e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8017fd4:	2100      	movs	r1, #0
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f7fe f8bd 	bl	8016156 <dir_read>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8017fe0:	7bfb      	ldrb	r3, [r7, #15]
 8017fe2:	2b04      	cmp	r3, #4
 8017fe4:	d101      	bne.n	8017fea <f_readdir+0x4c>
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8017fea:	7bfb      	ldrb	r3, [r7, #15]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d10e      	bne.n	801800e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8017ff0:	6839      	ldr	r1, [r7, #0]
 8017ff2:	6878      	ldr	r0, [r7, #4]
 8017ff4:	f7fe fb0e 	bl	8016614 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8017ff8:	2100      	movs	r1, #0
 8017ffa:	6878      	ldr	r0, [r7, #4]
 8017ffc:	f7fd fd73 	bl	8015ae6 <dir_next>
 8018000:	4603      	mov	r3, r0
 8018002:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8018004:	7bfb      	ldrb	r3, [r7, #15]
 8018006:	2b04      	cmp	r3, #4
 8018008:	d101      	bne.n	801800e <f_readdir+0x70>
 801800a:	2300      	movs	r3, #0
 801800c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801800e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018010:	4618      	mov	r0, r3
 8018012:	3710      	adds	r7, #16
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}

08018018 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b084      	sub	sp, #16
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
 8018020:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8018022:	6839      	ldr	r1, [r7, #0]
 8018024:	6878      	ldr	r0, [r7, #4]
 8018026:	f7ff ffba 	bl	8017f9e <f_readdir>
 801802a:	4603      	mov	r3, r0
 801802c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 801802e:	7bfb      	ldrb	r3, [r7, #15]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d114      	bne.n	801805e <f_findnext+0x46>
 8018034:	683b      	ldr	r3, [r7, #0]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d011      	beq.n	801805e <f_findnext+0x46>
 801803a:	683b      	ldr	r3, [r7, #0]
 801803c:	7d9b      	ldrb	r3, [r3, #22]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d00d      	beq.n	801805e <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018046:	683b      	ldr	r3, [r7, #0]
 8018048:	f103 0116 	add.w	r1, r3, #22
 801804c:	2300      	movs	r3, #0
 801804e:	2200      	movs	r2, #0
 8018050:	f7fe fbe4 	bl	801681c <pattern_matching>
 8018054:	4603      	mov	r3, r0
 8018056:	2b00      	cmp	r3, #0
 8018058:	d100      	bne.n	801805c <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 801805a:	e7e2      	b.n	8018022 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801805c:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 801805e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018060:	4618      	mov	r0, r3
 8018062:	3710      	adds	r7, #16
 8018064:	46bd      	mov	sp, r7
 8018066:	bd80      	pop	{r7, pc}

08018068 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b086      	sub	sp, #24
 801806c:	af00      	add	r7, sp, #0
 801806e:	60f8      	str	r0, [r7, #12]
 8018070:	60b9      	str	r1, [r7, #8]
 8018072:	607a      	str	r2, [r7, #4]
 8018074:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	683a      	ldr	r2, [r7, #0]
 801807a:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 801807c:	6879      	ldr	r1, [r7, #4]
 801807e:	68f8      	ldr	r0, [r7, #12]
 8018080:	f7ff fef4 	bl	8017e6c <f_opendir>
 8018084:	4603      	mov	r3, r0
 8018086:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018088:	7dfb      	ldrb	r3, [r7, #23]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d105      	bne.n	801809a <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 801808e:	68b9      	ldr	r1, [r7, #8]
 8018090:	68f8      	ldr	r0, [r7, #12]
 8018092:	f7ff ffc1 	bl	8018018 <f_findnext>
 8018096:	4603      	mov	r3, r0
 8018098:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 801809a:	7dfb      	ldrb	r3, [r7, #23]
}
 801809c:	4618      	mov	r0, r3
 801809e:	3718      	adds	r7, #24
 80180a0:	46bd      	mov	sp, r7
 80180a2:	bd80      	pop	{r7, pc}

080180a4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b098      	sub	sp, #96	; 0x60
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80180ac:	f107 0108 	add.w	r1, r7, #8
 80180b0:	1d3b      	adds	r3, r7, #4
 80180b2:	2202      	movs	r2, #2
 80180b4:	4618      	mov	r0, r3
 80180b6:	f7fe fef1 	bl	8016e9c <find_volume>
 80180ba:	4603      	mov	r3, r0
 80180bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 80180c0:	68bb      	ldr	r3, [r7, #8]
 80180c2:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80180c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	f040 80ec 	bne.w	80182a6 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80180ce:	687a      	ldr	r2, [r7, #4]
 80180d0:	f107 030c 	add.w	r3, r7, #12
 80180d4:	4611      	mov	r1, r2
 80180d6:	4618      	mov	r0, r3
 80180d8:	f7fe fdd4 	bl	8016c84 <follow_path>
 80180dc:	4603      	mov	r3, r0
 80180de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80180e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d102      	bne.n	80180f0 <f_mkdir+0x4c>
 80180ea:	2308      	movs	r3, #8
 80180ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80180f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180f4:	2b04      	cmp	r3, #4
 80180f6:	f040 80d6 	bne.w	80182a6 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80180fa:	f107 030c 	add.w	r3, r7, #12
 80180fe:	2100      	movs	r1, #0
 8018100:	4618      	mov	r0, r3
 8018102:	f7fd fba9 	bl	8015858 <create_chain>
 8018106:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8018108:	68bb      	ldr	r3, [r7, #8]
 801810a:	895b      	ldrh	r3, [r3, #10]
 801810c:	025b      	lsls	r3, r3, #9
 801810e:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8018110:	2300      	movs	r3, #0
 8018112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8018116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018118:	2b00      	cmp	r3, #0
 801811a:	d102      	bne.n	8018122 <f_mkdir+0x7e>
 801811c:	2307      	movs	r3, #7
 801811e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8018122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018124:	2b01      	cmp	r3, #1
 8018126:	d102      	bne.n	801812e <f_mkdir+0x8a>
 8018128:	2302      	movs	r3, #2
 801812a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801812e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018134:	d102      	bne.n	801813c <f_mkdir+0x98>
 8018136:	2301      	movs	r3, #1
 8018138:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801813c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018140:	2b00      	cmp	r3, #0
 8018142:	d106      	bne.n	8018152 <f_mkdir+0xae>
 8018144:	68bb      	ldr	r3, [r7, #8]
 8018146:	4618      	mov	r0, r3
 8018148:	f7fd f88e 	bl	8015268 <sync_window>
 801814c:	4603      	mov	r3, r0
 801814e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8018152:	f7fc fe15 	bl	8014d80 <get_fattime>
 8018156:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8018158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801815c:	2b00      	cmp	r3, #0
 801815e:	d16a      	bne.n	8018236 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8018160:	68bb      	ldr	r3, [r7, #8]
 8018162:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018164:	4618      	mov	r0, r3
 8018166:	f7fd f95f 	bl	8015428 <clust2sect>
 801816a:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 801816c:	68bb      	ldr	r3, [r7, #8]
 801816e:	3334      	adds	r3, #52	; 0x34
 8018170:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8018172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018176:	2100      	movs	r1, #0
 8018178:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801817a:	f7fc feac 	bl	8014ed6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801817e:	220b      	movs	r2, #11
 8018180:	2120      	movs	r1, #32
 8018182:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018184:	f7fc fea7 	bl	8014ed6 <mem_set>
					dir[DIR_Name] = '.';
 8018188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801818a:	222e      	movs	r2, #46	; 0x2e
 801818c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801818e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018190:	330b      	adds	r3, #11
 8018192:	2210      	movs	r2, #16
 8018194:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8018196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018198:	3316      	adds	r3, #22
 801819a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801819c:	4618      	mov	r0, r3
 801819e:	f7fc fe4d 	bl	8014e3c <st_dword>
					st_clust(fs, dir, dcl);
 80181a2:	68bb      	ldr	r3, [r7, #8]
 80181a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80181a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80181a8:	4618      	mov	r0, r3
 80181aa:	f7fd fdc7 	bl	8015d3c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80181ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181b0:	3320      	adds	r3, #32
 80181b2:	2220      	movs	r2, #32
 80181b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80181b6:	4618      	mov	r0, r3
 80181b8:	f7fc fe6c 	bl	8014e94 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80181bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181be:	3321      	adds	r3, #33	; 0x21
 80181c0:	222e      	movs	r2, #46	; 0x2e
 80181c2:	701a      	strb	r2, [r3, #0]
 80181c4:	697b      	ldr	r3, [r7, #20]
 80181c6:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80181c8:	68bb      	ldr	r3, [r7, #8]
 80181ca:	781b      	ldrb	r3, [r3, #0]
 80181cc:	2b03      	cmp	r3, #3
 80181ce:	d106      	bne.n	80181de <f_mkdir+0x13a>
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d101      	bne.n	80181de <f_mkdir+0x13a>
 80181da:	2300      	movs	r3, #0
 80181dc:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 80181de:	68b8      	ldr	r0, [r7, #8]
 80181e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181e2:	3320      	adds	r3, #32
 80181e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80181e6:	4619      	mov	r1, r3
 80181e8:	f7fd fda8 	bl	8015d3c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80181ec:	68bb      	ldr	r3, [r7, #8]
 80181ee:	895b      	ldrh	r3, [r3, #10]
 80181f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80181f2:	e01b      	b.n	801822c <f_mkdir+0x188>
					fs->winsect = dsc++;
 80181f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181f6:	1c5a      	adds	r2, r3, #1
 80181f8:	657a      	str	r2, [r7, #84]	; 0x54
 80181fa:	68ba      	ldr	r2, [r7, #8]
 80181fc:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 80181fe:	68bb      	ldr	r3, [r7, #8]
 8018200:	2201      	movs	r2, #1
 8018202:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8018204:	68bb      	ldr	r3, [r7, #8]
 8018206:	4618      	mov	r0, r3
 8018208:	f7fd f82e 	bl	8015268 <sync_window>
 801820c:	4603      	mov	r3, r0
 801820e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8018212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018216:	2b00      	cmp	r3, #0
 8018218:	d10c      	bne.n	8018234 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 801821a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801821e:	2100      	movs	r1, #0
 8018220:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018222:	f7fc fe58 	bl	8014ed6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8018226:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018228:	3b01      	subs	r3, #1
 801822a:	65bb      	str	r3, [r7, #88]	; 0x58
 801822c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801822e:	2b00      	cmp	r3, #0
 8018230:	d1e0      	bne.n	80181f4 <f_mkdir+0x150>
 8018232:	e000      	b.n	8018236 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8018234:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8018236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801823a:	2b00      	cmp	r3, #0
 801823c:	d107      	bne.n	801824e <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801823e:	f107 030c 	add.w	r3, r7, #12
 8018242:	4618      	mov	r0, r3
 8018244:	f7fe f8ee 	bl	8016424 <dir_register>
 8018248:	4603      	mov	r3, r0
 801824a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 801824e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018252:	2b00      	cmp	r3, #0
 8018254:	d120      	bne.n	8018298 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8018256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018258:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801825a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801825c:	3316      	adds	r3, #22
 801825e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8018260:	4618      	mov	r0, r3
 8018262:	f7fc fdeb 	bl	8014e3c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8018266:	68bb      	ldr	r3, [r7, #8]
 8018268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801826a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801826c:	4618      	mov	r0, r3
 801826e:	f7fd fd65 	bl	8015d3c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8018272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018274:	330b      	adds	r3, #11
 8018276:	2210      	movs	r2, #16
 8018278:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801827a:	68bb      	ldr	r3, [r7, #8]
 801827c:	2201      	movs	r2, #1
 801827e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8018280:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018284:	2b00      	cmp	r3, #0
 8018286:	d10e      	bne.n	80182a6 <f_mkdir+0x202>
					res = sync_fs(fs);
 8018288:	68bb      	ldr	r3, [r7, #8]
 801828a:	4618      	mov	r0, r3
 801828c:	f7fd f85e 	bl	801534c <sync_fs>
 8018290:	4603      	mov	r3, r0
 8018292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018296:	e006      	b.n	80182a6 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8018298:	f107 030c 	add.w	r3, r7, #12
 801829c:	2200      	movs	r2, #0
 801829e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80182a0:	4618      	mov	r0, r3
 80182a2:	f7fd fa74 	bl	801578e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80182a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80182aa:	4618      	mov	r0, r3
 80182ac:	3760      	adds	r7, #96	; 0x60
 80182ae:	46bd      	mov	sp, r7
 80182b0:	bd80      	pop	{r7, pc}
	...

080182b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80182b4:	b480      	push	{r7}
 80182b6:	b087      	sub	sp, #28
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	60f8      	str	r0, [r7, #12]
 80182bc:	60b9      	str	r1, [r7, #8]
 80182be:	4613      	mov	r3, r2
 80182c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80182c2:	2301      	movs	r3, #1
 80182c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80182c6:	2300      	movs	r3, #0
 80182c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80182ca:	4b1f      	ldr	r3, [pc, #124]	; (8018348 <FATFS_LinkDriverEx+0x94>)
 80182cc:	7a5b      	ldrb	r3, [r3, #9]
 80182ce:	b2db      	uxtb	r3, r3
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d131      	bne.n	8018338 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80182d4:	4b1c      	ldr	r3, [pc, #112]	; (8018348 <FATFS_LinkDriverEx+0x94>)
 80182d6:	7a5b      	ldrb	r3, [r3, #9]
 80182d8:	b2db      	uxtb	r3, r3
 80182da:	461a      	mov	r2, r3
 80182dc:	4b1a      	ldr	r3, [pc, #104]	; (8018348 <FATFS_LinkDriverEx+0x94>)
 80182de:	2100      	movs	r1, #0
 80182e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80182e2:	4b19      	ldr	r3, [pc, #100]	; (8018348 <FATFS_LinkDriverEx+0x94>)
 80182e4:	7a5b      	ldrb	r3, [r3, #9]
 80182e6:	b2db      	uxtb	r3, r3
 80182e8:	4a17      	ldr	r2, [pc, #92]	; (8018348 <FATFS_LinkDriverEx+0x94>)
 80182ea:	009b      	lsls	r3, r3, #2
 80182ec:	4413      	add	r3, r2
 80182ee:	68fa      	ldr	r2, [r7, #12]
 80182f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80182f2:	4b15      	ldr	r3, [pc, #84]	; (8018348 <FATFS_LinkDriverEx+0x94>)
 80182f4:	7a5b      	ldrb	r3, [r3, #9]
 80182f6:	b2db      	uxtb	r3, r3
 80182f8:	461a      	mov	r2, r3
 80182fa:	4b13      	ldr	r3, [pc, #76]	; (8018348 <FATFS_LinkDriverEx+0x94>)
 80182fc:	4413      	add	r3, r2
 80182fe:	79fa      	ldrb	r2, [r7, #7]
 8018300:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018302:	4b11      	ldr	r3, [pc, #68]	; (8018348 <FATFS_LinkDriverEx+0x94>)
 8018304:	7a5b      	ldrb	r3, [r3, #9]
 8018306:	b2db      	uxtb	r3, r3
 8018308:	1c5a      	adds	r2, r3, #1
 801830a:	b2d1      	uxtb	r1, r2
 801830c:	4a0e      	ldr	r2, [pc, #56]	; (8018348 <FATFS_LinkDriverEx+0x94>)
 801830e:	7251      	strb	r1, [r2, #9]
 8018310:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018312:	7dbb      	ldrb	r3, [r7, #22]
 8018314:	3330      	adds	r3, #48	; 0x30
 8018316:	b2da      	uxtb	r2, r3
 8018318:	68bb      	ldr	r3, [r7, #8]
 801831a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801831c:	68bb      	ldr	r3, [r7, #8]
 801831e:	3301      	adds	r3, #1
 8018320:	223a      	movs	r2, #58	; 0x3a
 8018322:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018324:	68bb      	ldr	r3, [r7, #8]
 8018326:	3302      	adds	r3, #2
 8018328:	222f      	movs	r2, #47	; 0x2f
 801832a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	3303      	adds	r3, #3
 8018330:	2200      	movs	r2, #0
 8018332:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018334:	2300      	movs	r3, #0
 8018336:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018338:	7dfb      	ldrb	r3, [r7, #23]
}
 801833a:	4618      	mov	r0, r3
 801833c:	371c      	adds	r7, #28
 801833e:	46bd      	mov	sp, r7
 8018340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018344:	4770      	bx	lr
 8018346:	bf00      	nop
 8018348:	200010bc 	.word	0x200010bc

0801834c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801834c:	b580      	push	{r7, lr}
 801834e:	b082      	sub	sp, #8
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]
 8018354:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018356:	2200      	movs	r2, #0
 8018358:	6839      	ldr	r1, [r7, #0]
 801835a:	6878      	ldr	r0, [r7, #4]
 801835c:	f7ff ffaa 	bl	80182b4 <FATFS_LinkDriverEx>
 8018360:	4603      	mov	r3, r0
}
 8018362:	4618      	mov	r0, r3
 8018364:	3708      	adds	r7, #8
 8018366:	46bd      	mov	sp, r7
 8018368:	bd80      	pop	{r7, pc}
	...

0801836c <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 801836c:	b480      	push	{r7}
 801836e:	b085      	sub	sp, #20
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	460b      	mov	r3, r1
 8018376:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8018378:	2300      	movs	r3, #0
 801837a:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 801837c:	2301      	movs	r3, #1
 801837e:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8018380:	4b15      	ldr	r3, [pc, #84]	; (80183d8 <FATFS_UnLinkDriverEx+0x6c>)
 8018382:	7a5b      	ldrb	r3, [r3, #9]
 8018384:	b2db      	uxtb	r3, r3
 8018386:	2b00      	cmp	r3, #0
 8018388:	d01e      	beq.n	80183c8 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	781b      	ldrb	r3, [r3, #0]
 801838e:	3b30      	subs	r3, #48	; 0x30
 8018390:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8018392:	7bbb      	ldrb	r3, [r7, #14]
 8018394:	4a10      	ldr	r2, [pc, #64]	; (80183d8 <FATFS_UnLinkDriverEx+0x6c>)
 8018396:	009b      	lsls	r3, r3, #2
 8018398:	4413      	add	r3, r2
 801839a:	685b      	ldr	r3, [r3, #4]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d013      	beq.n	80183c8 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80183a0:	7bbb      	ldrb	r3, [r7, #14]
 80183a2:	4a0d      	ldr	r2, [pc, #52]	; (80183d8 <FATFS_UnLinkDriverEx+0x6c>)
 80183a4:	009b      	lsls	r3, r3, #2
 80183a6:	4413      	add	r3, r2
 80183a8:	2200      	movs	r2, #0
 80183aa:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 80183ac:	7bbb      	ldrb	r3, [r7, #14]
 80183ae:	4a0a      	ldr	r2, [pc, #40]	; (80183d8 <FATFS_UnLinkDriverEx+0x6c>)
 80183b0:	4413      	add	r3, r2
 80183b2:	2200      	movs	r2, #0
 80183b4:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 80183b6:	4b08      	ldr	r3, [pc, #32]	; (80183d8 <FATFS_UnLinkDriverEx+0x6c>)
 80183b8:	7a5b      	ldrb	r3, [r3, #9]
 80183ba:	b2db      	uxtb	r3, r3
 80183bc:	3b01      	subs	r3, #1
 80183be:	b2da      	uxtb	r2, r3
 80183c0:	4b05      	ldr	r3, [pc, #20]	; (80183d8 <FATFS_UnLinkDriverEx+0x6c>)
 80183c2:	725a      	strb	r2, [r3, #9]
      ret = 0;
 80183c4:	2300      	movs	r3, #0
 80183c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80183c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3714      	adds	r7, #20
 80183ce:	46bd      	mov	sp, r7
 80183d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d4:	4770      	bx	lr
 80183d6:	bf00      	nop
 80183d8:	200010bc 	.word	0x200010bc

080183dc <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 80183dc:	b580      	push	{r7, lr}
 80183de:	b082      	sub	sp, #8
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 80183e4:	2100      	movs	r1, #0
 80183e6:	6878      	ldr	r0, [r7, #4]
 80183e8:	f7ff ffc0 	bl	801836c <FATFS_UnLinkDriverEx>
 80183ec:	4603      	mov	r3, r0
}
 80183ee:	4618      	mov	r0, r3
 80183f0:	3708      	adds	r7, #8
 80183f2:	46bd      	mov	sp, r7
 80183f4:	bd80      	pop	{r7, pc}
	...

080183f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80183f8:	b480      	push	{r7}
 80183fa:	b085      	sub	sp, #20
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	4603      	mov	r3, r0
 8018400:	6039      	str	r1, [r7, #0]
 8018402:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8018404:	88fb      	ldrh	r3, [r7, #6]
 8018406:	2b7f      	cmp	r3, #127	; 0x7f
 8018408:	d802      	bhi.n	8018410 <ff_convert+0x18>
		c = chr;
 801840a:	88fb      	ldrh	r3, [r7, #6]
 801840c:	81fb      	strh	r3, [r7, #14]
 801840e:	e025      	b.n	801845c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8018410:	683b      	ldr	r3, [r7, #0]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d00b      	beq.n	801842e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8018416:	88fb      	ldrh	r3, [r7, #6]
 8018418:	2bff      	cmp	r3, #255	; 0xff
 801841a:	d805      	bhi.n	8018428 <ff_convert+0x30>
 801841c:	88fb      	ldrh	r3, [r7, #6]
 801841e:	3b80      	subs	r3, #128	; 0x80
 8018420:	4a12      	ldr	r2, [pc, #72]	; (801846c <ff_convert+0x74>)
 8018422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018426:	e000      	b.n	801842a <ff_convert+0x32>
 8018428:	2300      	movs	r3, #0
 801842a:	81fb      	strh	r3, [r7, #14]
 801842c:	e016      	b.n	801845c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801842e:	2300      	movs	r3, #0
 8018430:	81fb      	strh	r3, [r7, #14]
 8018432:	e009      	b.n	8018448 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8018434:	89fb      	ldrh	r3, [r7, #14]
 8018436:	4a0d      	ldr	r2, [pc, #52]	; (801846c <ff_convert+0x74>)
 8018438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801843c:	88fa      	ldrh	r2, [r7, #6]
 801843e:	429a      	cmp	r2, r3
 8018440:	d006      	beq.n	8018450 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8018442:	89fb      	ldrh	r3, [r7, #14]
 8018444:	3301      	adds	r3, #1
 8018446:	81fb      	strh	r3, [r7, #14]
 8018448:	89fb      	ldrh	r3, [r7, #14]
 801844a:	2b7f      	cmp	r3, #127	; 0x7f
 801844c:	d9f2      	bls.n	8018434 <ff_convert+0x3c>
 801844e:	e000      	b.n	8018452 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8018450:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8018452:	89fb      	ldrh	r3, [r7, #14]
 8018454:	3380      	adds	r3, #128	; 0x80
 8018456:	b29b      	uxth	r3, r3
 8018458:	b2db      	uxtb	r3, r3
 801845a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801845c:	89fb      	ldrh	r3, [r7, #14]
}
 801845e:	4618      	mov	r0, r3
 8018460:	3714      	adds	r7, #20
 8018462:	46bd      	mov	sp, r7
 8018464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018468:	4770      	bx	lr
 801846a:	bf00      	nop
 801846c:	08022974 	.word	0x08022974

08018470 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8018470:	b480      	push	{r7}
 8018472:	b087      	sub	sp, #28
 8018474:	af00      	add	r7, sp, #0
 8018476:	4603      	mov	r3, r0
 8018478:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801847a:	88fb      	ldrh	r3, [r7, #6]
 801847c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018480:	d201      	bcs.n	8018486 <ff_wtoupper+0x16>
 8018482:	4b3e      	ldr	r3, [pc, #248]	; (801857c <ff_wtoupper+0x10c>)
 8018484:	e000      	b.n	8018488 <ff_wtoupper+0x18>
 8018486:	4b3e      	ldr	r3, [pc, #248]	; (8018580 <ff_wtoupper+0x110>)
 8018488:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801848a:	697b      	ldr	r3, [r7, #20]
 801848c:	1c9a      	adds	r2, r3, #2
 801848e:	617a      	str	r2, [r7, #20]
 8018490:	881b      	ldrh	r3, [r3, #0]
 8018492:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8018494:	8a7b      	ldrh	r3, [r7, #18]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d068      	beq.n	801856c <ff_wtoupper+0xfc>
 801849a:	88fa      	ldrh	r2, [r7, #6]
 801849c:	8a7b      	ldrh	r3, [r7, #18]
 801849e:	429a      	cmp	r2, r3
 80184a0:	d364      	bcc.n	801856c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80184a2:	697b      	ldr	r3, [r7, #20]
 80184a4:	1c9a      	adds	r2, r3, #2
 80184a6:	617a      	str	r2, [r7, #20]
 80184a8:	881b      	ldrh	r3, [r3, #0]
 80184aa:	823b      	strh	r3, [r7, #16]
 80184ac:	8a3b      	ldrh	r3, [r7, #16]
 80184ae:	0a1b      	lsrs	r3, r3, #8
 80184b0:	81fb      	strh	r3, [r7, #14]
 80184b2:	8a3b      	ldrh	r3, [r7, #16]
 80184b4:	b2db      	uxtb	r3, r3
 80184b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80184b8:	88fa      	ldrh	r2, [r7, #6]
 80184ba:	8a79      	ldrh	r1, [r7, #18]
 80184bc:	8a3b      	ldrh	r3, [r7, #16]
 80184be:	440b      	add	r3, r1
 80184c0:	429a      	cmp	r2, r3
 80184c2:	da49      	bge.n	8018558 <ff_wtoupper+0xe8>
			switch (cmd) {
 80184c4:	89fb      	ldrh	r3, [r7, #14]
 80184c6:	2b08      	cmp	r3, #8
 80184c8:	d84f      	bhi.n	801856a <ff_wtoupper+0xfa>
 80184ca:	a201      	add	r2, pc, #4	; (adr r2, 80184d0 <ff_wtoupper+0x60>)
 80184cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184d0:	080184f5 	.word	0x080184f5
 80184d4:	08018507 	.word	0x08018507
 80184d8:	0801851d 	.word	0x0801851d
 80184dc:	08018525 	.word	0x08018525
 80184e0:	0801852d 	.word	0x0801852d
 80184e4:	08018535 	.word	0x08018535
 80184e8:	0801853d 	.word	0x0801853d
 80184ec:	08018545 	.word	0x08018545
 80184f0:	0801854d 	.word	0x0801854d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80184f4:	88fa      	ldrh	r2, [r7, #6]
 80184f6:	8a7b      	ldrh	r3, [r7, #18]
 80184f8:	1ad3      	subs	r3, r2, r3
 80184fa:	005b      	lsls	r3, r3, #1
 80184fc:	697a      	ldr	r2, [r7, #20]
 80184fe:	4413      	add	r3, r2
 8018500:	881b      	ldrh	r3, [r3, #0]
 8018502:	80fb      	strh	r3, [r7, #6]
 8018504:	e027      	b.n	8018556 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8018506:	88fa      	ldrh	r2, [r7, #6]
 8018508:	8a7b      	ldrh	r3, [r7, #18]
 801850a:	1ad3      	subs	r3, r2, r3
 801850c:	b29b      	uxth	r3, r3
 801850e:	f003 0301 	and.w	r3, r3, #1
 8018512:	b29b      	uxth	r3, r3
 8018514:	88fa      	ldrh	r2, [r7, #6]
 8018516:	1ad3      	subs	r3, r2, r3
 8018518:	80fb      	strh	r3, [r7, #6]
 801851a:	e01c      	b.n	8018556 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801851c:	88fb      	ldrh	r3, [r7, #6]
 801851e:	3b10      	subs	r3, #16
 8018520:	80fb      	strh	r3, [r7, #6]
 8018522:	e018      	b.n	8018556 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8018524:	88fb      	ldrh	r3, [r7, #6]
 8018526:	3b20      	subs	r3, #32
 8018528:	80fb      	strh	r3, [r7, #6]
 801852a:	e014      	b.n	8018556 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801852c:	88fb      	ldrh	r3, [r7, #6]
 801852e:	3b30      	subs	r3, #48	; 0x30
 8018530:	80fb      	strh	r3, [r7, #6]
 8018532:	e010      	b.n	8018556 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8018534:	88fb      	ldrh	r3, [r7, #6]
 8018536:	3b1a      	subs	r3, #26
 8018538:	80fb      	strh	r3, [r7, #6]
 801853a:	e00c      	b.n	8018556 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801853c:	88fb      	ldrh	r3, [r7, #6]
 801853e:	3308      	adds	r3, #8
 8018540:	80fb      	strh	r3, [r7, #6]
 8018542:	e008      	b.n	8018556 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8018544:	88fb      	ldrh	r3, [r7, #6]
 8018546:	3b50      	subs	r3, #80	; 0x50
 8018548:	80fb      	strh	r3, [r7, #6]
 801854a:	e004      	b.n	8018556 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801854c:	88fb      	ldrh	r3, [r7, #6]
 801854e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8018552:	80fb      	strh	r3, [r7, #6]
 8018554:	bf00      	nop
			}
			break;
 8018556:	e008      	b.n	801856a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8018558:	89fb      	ldrh	r3, [r7, #14]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d195      	bne.n	801848a <ff_wtoupper+0x1a>
 801855e:	8a3b      	ldrh	r3, [r7, #16]
 8018560:	005b      	lsls	r3, r3, #1
 8018562:	697a      	ldr	r2, [r7, #20]
 8018564:	4413      	add	r3, r2
 8018566:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8018568:	e78f      	b.n	801848a <ff_wtoupper+0x1a>
			break;
 801856a:	bf00      	nop
	}

	return chr;
 801856c:	88fb      	ldrh	r3, [r7, #6]
}
 801856e:	4618      	mov	r0, r3
 8018570:	371c      	adds	r7, #28
 8018572:	46bd      	mov	sp, r7
 8018574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018578:	4770      	bx	lr
 801857a:	bf00      	nop
 801857c:	08022a74 	.word	0x08022a74
 8018580:	08022c68 	.word	0x08022c68

08018584 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8018584:	b480      	push	{r7}
 8018586:	b085      	sub	sp, #20
 8018588:	af00      	add	r7, sp, #0
 801858a:	4603      	mov	r3, r0
 801858c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801858e:	2300      	movs	r3, #0
 8018590:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8018592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018596:	2b84      	cmp	r3, #132	; 0x84
 8018598:	d005      	beq.n	80185a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801859a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	4413      	add	r3, r2
 80185a2:	3303      	adds	r3, #3
 80185a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80185a6:	68fb      	ldr	r3, [r7, #12]
}
 80185a8:	4618      	mov	r0, r3
 80185aa:	3714      	adds	r7, #20
 80185ac:	46bd      	mov	sp, r7
 80185ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b2:	4770      	bx	lr

080185b4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80185b4:	b480      	push	{r7}
 80185b6:	b083      	sub	sp, #12
 80185b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80185ba:	f3ef 8305 	mrs	r3, IPSR
 80185be:	607b      	str	r3, [r7, #4]
  return(result);
 80185c0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	bf14      	ite	ne
 80185c6:	2301      	movne	r3, #1
 80185c8:	2300      	moveq	r3, #0
 80185ca:	b2db      	uxtb	r3, r3
}
 80185cc:	4618      	mov	r0, r3
 80185ce:	370c      	adds	r7, #12
 80185d0:	46bd      	mov	sp, r7
 80185d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d6:	4770      	bx	lr

080185d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80185dc:	f001 fd6c 	bl	801a0b8 <vTaskStartScheduler>
  
  return osOK;
 80185e0:	2300      	movs	r3, #0
}
 80185e2:	4618      	mov	r0, r3
 80185e4:	bd80      	pop	{r7, pc}

080185e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80185e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185e8:	b087      	sub	sp, #28
 80185ea:	af02      	add	r7, sp, #8
 80185ec:	6078      	str	r0, [r7, #4]
 80185ee:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	685c      	ldr	r4, [r3, #4]
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80185fc:	b29e      	uxth	r6, r3
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018604:	4618      	mov	r0, r3
 8018606:	f7ff ffbd 	bl	8018584 <makeFreeRtosPriority>
 801860a:	4602      	mov	r2, r0
 801860c:	f107 030c 	add.w	r3, r7, #12
 8018610:	9301      	str	r3, [sp, #4]
 8018612:	9200      	str	r2, [sp, #0]
 8018614:	683b      	ldr	r3, [r7, #0]
 8018616:	4632      	mov	r2, r6
 8018618:	4629      	mov	r1, r5
 801861a:	4620      	mov	r0, r4
 801861c:	f001 fa76 	bl	8019b0c <xTaskCreate>
 8018620:	4603      	mov	r3, r0
 8018622:	2b01      	cmp	r3, #1
 8018624:	d001      	beq.n	801862a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8018626:	2300      	movs	r3, #0
 8018628:	e000      	b.n	801862c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 801862a:	68fb      	ldr	r3, [r7, #12]
}
 801862c:	4618      	mov	r0, r3
 801862e:	3714      	adds	r7, #20
 8018630:	46bd      	mov	sp, r7
 8018632:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018634 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8018634:	b580      	push	{r7, lr}
 8018636:	b084      	sub	sp, #16
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
 801863c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801863e:	683b      	ldr	r3, [r7, #0]
 8018640:	2b01      	cmp	r3, #1
 8018642:	d110      	bne.n	8018666 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8018644:	2203      	movs	r2, #3
 8018646:	2100      	movs	r1, #0
 8018648:	2001      	movs	r0, #1
 801864a:	f000 fbb7 	bl	8018dbc <xQueueGenericCreate>
 801864e:	60f8      	str	r0, [r7, #12]
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d005      	beq.n	8018662 <osSemaphoreCreate+0x2e>
 8018656:	2300      	movs	r3, #0
 8018658:	2200      	movs	r2, #0
 801865a:	2100      	movs	r1, #0
 801865c:	68f8      	ldr	r0, [r7, #12]
 801865e:	f000 fc3f 	bl	8018ee0 <xQueueGenericSend>
    return sema;
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	e006      	b.n	8018674 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8018666:	683b      	ldr	r3, [r7, #0]
 8018668:	683a      	ldr	r2, [r7, #0]
 801866a:	4611      	mov	r1, r2
 801866c:	4618      	mov	r0, r3
 801866e:	f000 fc04 	bl	8018e7a <xQueueCreateCountingSemaphore>
 8018672:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8018674:	4618      	mov	r0, r3
 8018676:	3710      	adds	r7, #16
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}

0801867c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b084      	sub	sp, #16
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
 8018684:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8018686:	2300      	movs	r3, #0
 8018688:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d101      	bne.n	8018694 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8018690:	2380      	movs	r3, #128	; 0x80
 8018692:	e03a      	b.n	801870a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8018694:	2300      	movs	r3, #0
 8018696:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8018698:	683b      	ldr	r3, [r7, #0]
 801869a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801869e:	d103      	bne.n	80186a8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80186a0:	f04f 33ff 	mov.w	r3, #4294967295
 80186a4:	60fb      	str	r3, [r7, #12]
 80186a6:	e009      	b.n	80186bc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80186a8:	683b      	ldr	r3, [r7, #0]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d006      	beq.n	80186bc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80186ae:	683b      	ldr	r3, [r7, #0]
 80186b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d101      	bne.n	80186bc <osSemaphoreWait+0x40>
      ticks = 1;
 80186b8:	2301      	movs	r3, #1
 80186ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80186bc:	f7ff ff7a 	bl	80185b4 <inHandlerMode>
 80186c0:	4603      	mov	r3, r0
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d017      	beq.n	80186f6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80186c6:	f107 0308 	add.w	r3, r7, #8
 80186ca:	461a      	mov	r2, r3
 80186cc:	2100      	movs	r1, #0
 80186ce:	6878      	ldr	r0, [r7, #4]
 80186d0:	f001 f816 	bl	8019700 <xQueueReceiveFromISR>
 80186d4:	4603      	mov	r3, r0
 80186d6:	2b01      	cmp	r3, #1
 80186d8:	d001      	beq.n	80186de <osSemaphoreWait+0x62>
      return osErrorOS;
 80186da:	23ff      	movs	r3, #255	; 0xff
 80186dc:	e015      	b.n	801870a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80186de:	68bb      	ldr	r3, [r7, #8]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d011      	beq.n	8018708 <osSemaphoreWait+0x8c>
 80186e4:	4b0b      	ldr	r3, [pc, #44]	; (8018714 <osSemaphoreWait+0x98>)
 80186e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186ea:	601a      	str	r2, [r3, #0]
 80186ec:	f3bf 8f4f 	dsb	sy
 80186f0:	f3bf 8f6f 	isb	sy
 80186f4:	e008      	b.n	8018708 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80186f6:	68f9      	ldr	r1, [r7, #12]
 80186f8:	6878      	ldr	r0, [r7, #4]
 80186fa:	f000 fef5 	bl	80194e8 <xQueueSemaphoreTake>
 80186fe:	4603      	mov	r3, r0
 8018700:	2b01      	cmp	r3, #1
 8018702:	d001      	beq.n	8018708 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8018704:	23ff      	movs	r3, #255	; 0xff
 8018706:	e000      	b.n	801870a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8018708:	2300      	movs	r3, #0
}
 801870a:	4618      	mov	r0, r3
 801870c:	3710      	adds	r7, #16
 801870e:	46bd      	mov	sp, r7
 8018710:	bd80      	pop	{r7, pc}
 8018712:	bf00      	nop
 8018714:	e000ed04 	.word	0xe000ed04

08018718 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b084      	sub	sp, #16
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8018720:	2300      	movs	r3, #0
 8018722:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8018724:	2300      	movs	r3, #0
 8018726:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8018728:	f7ff ff44 	bl	80185b4 <inHandlerMode>
 801872c:	4603      	mov	r3, r0
 801872e:	2b00      	cmp	r3, #0
 8018730:	d016      	beq.n	8018760 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8018732:	f107 0308 	add.w	r3, r7, #8
 8018736:	4619      	mov	r1, r3
 8018738:	6878      	ldr	r0, [r7, #4]
 801873a:	f000 fd67 	bl	801920c <xQueueGiveFromISR>
 801873e:	4603      	mov	r3, r0
 8018740:	2b01      	cmp	r3, #1
 8018742:	d001      	beq.n	8018748 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8018744:	23ff      	movs	r3, #255	; 0xff
 8018746:	e017      	b.n	8018778 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d013      	beq.n	8018776 <osSemaphoreRelease+0x5e>
 801874e:	4b0c      	ldr	r3, [pc, #48]	; (8018780 <osSemaphoreRelease+0x68>)
 8018750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018754:	601a      	str	r2, [r3, #0]
 8018756:	f3bf 8f4f 	dsb	sy
 801875a:	f3bf 8f6f 	isb	sy
 801875e:	e00a      	b.n	8018776 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8018760:	2300      	movs	r3, #0
 8018762:	2200      	movs	r2, #0
 8018764:	2100      	movs	r1, #0
 8018766:	6878      	ldr	r0, [r7, #4]
 8018768:	f000 fbba 	bl	8018ee0 <xQueueGenericSend>
 801876c:	4603      	mov	r3, r0
 801876e:	2b01      	cmp	r3, #1
 8018770:	d001      	beq.n	8018776 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8018772:	23ff      	movs	r3, #255	; 0xff
 8018774:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8018776:	68fb      	ldr	r3, [r7, #12]
}
 8018778:	4618      	mov	r0, r3
 801877a:	3710      	adds	r7, #16
 801877c:	46bd      	mov	sp, r7
 801877e:	bd80      	pop	{r7, pc}
 8018780:	e000ed04 	.word	0xe000ed04

08018784 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b086      	sub	sp, #24
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	685b      	ldr	r3, [r3, #4]
 8018790:	3303      	adds	r3, #3
 8018792:	f023 0303 	bic.w	r3, r3, #3
 8018796:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8018798:	2014      	movs	r0, #20
 801879a:	f003 f85d 	bl	801b858 <pvPortMalloc>
 801879e:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80187a0:	697b      	ldr	r3, [r7, #20]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d046      	beq.n	8018834 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	681a      	ldr	r2, [r3, #0]
 80187aa:	697b      	ldr	r3, [r7, #20]
 80187ac:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80187ae:	68fa      	ldr	r2, [r7, #12]
 80187b0:	697b      	ldr	r3, [r7, #20]
 80187b2:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80187b4:	697b      	ldr	r3, [r7, #20]
 80187b6:	2200      	movs	r2, #0
 80187b8:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	4618      	mov	r0, r3
 80187c0:	f003 f84a 	bl	801b858 <pvPortMalloc>
 80187c4:	4602      	mov	r2, r0
 80187c6:	697b      	ldr	r3, [r7, #20]
 80187c8:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80187ca:	697b      	ldr	r3, [r7, #20]
 80187cc:	685b      	ldr	r3, [r3, #4]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d02b      	beq.n	801882a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	68fa      	ldr	r2, [r7, #12]
 80187d8:	fb02 f303 	mul.w	r3, r2, r3
 80187dc:	4618      	mov	r0, r3
 80187de:	f003 f83b 	bl	801b858 <pvPortMalloc>
 80187e2:	4602      	mov	r2, r0
 80187e4:	697b      	ldr	r3, [r7, #20]
 80187e6:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 80187e8:	697b      	ldr	r3, [r7, #20]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d011      	beq.n	8018814 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80187f0:	2300      	movs	r3, #0
 80187f2:	613b      	str	r3, [r7, #16]
 80187f4:	e008      	b.n	8018808 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80187f6:	697b      	ldr	r3, [r7, #20]
 80187f8:	685a      	ldr	r2, [r3, #4]
 80187fa:	693b      	ldr	r3, [r7, #16]
 80187fc:	4413      	add	r3, r2
 80187fe:	2200      	movs	r2, #0
 8018800:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8018802:	693b      	ldr	r3, [r7, #16]
 8018804:	3301      	adds	r3, #1
 8018806:	613b      	str	r3, [r7, #16]
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	693a      	ldr	r2, [r7, #16]
 801880e:	429a      	cmp	r2, r3
 8018810:	d3f1      	bcc.n	80187f6 <osPoolCreate+0x72>
 8018812:	e00f      	b.n	8018834 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8018814:	697b      	ldr	r3, [r7, #20]
 8018816:	685b      	ldr	r3, [r3, #4]
 8018818:	4618      	mov	r0, r3
 801881a:	f003 f8e1 	bl	801b9e0 <vPortFree>
        vPortFree(thePool);
 801881e:	6978      	ldr	r0, [r7, #20]
 8018820:	f003 f8de 	bl	801b9e0 <vPortFree>
        thePool = NULL;
 8018824:	2300      	movs	r3, #0
 8018826:	617b      	str	r3, [r7, #20]
 8018828:	e004      	b.n	8018834 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 801882a:	6978      	ldr	r0, [r7, #20]
 801882c:	f003 f8d8 	bl	801b9e0 <vPortFree>
      thePool = NULL;
 8018830:	2300      	movs	r3, #0
 8018832:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8018834:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8018836:	4618      	mov	r0, r3
 8018838:	3718      	adds	r7, #24
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}

0801883e <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 801883e:	b580      	push	{r7, lr}
 8018840:	b08a      	sub	sp, #40	; 0x28
 8018842:	af00      	add	r7, sp, #0
 8018844:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8018846:	2300      	movs	r3, #0
 8018848:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 801884a:	2300      	movs	r3, #0
 801884c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 801884e:	f7ff feb1 	bl	80185b4 <inHandlerMode>
 8018852:	4603      	mov	r3, r0
 8018854:	2b00      	cmp	r3, #0
 8018856:	d00e      	beq.n	8018876 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018858:	f3ef 8211 	mrs	r2, BASEPRI
 801885c:	f04f 0320 	mov.w	r3, #32
 8018860:	f383 8811 	msr	BASEPRI, r3
 8018864:	f3bf 8f6f 	isb	sy
 8018868:	f3bf 8f4f 	dsb	sy
 801886c:	617a      	str	r2, [r7, #20]
 801886e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8018870:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8018872:	627b      	str	r3, [r7, #36]	; 0x24
 8018874:	e001      	b.n	801887a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8018876:	f002 fecd 	bl	801b614 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 801887a:	2300      	movs	r3, #0
 801887c:	61fb      	str	r3, [r7, #28]
 801887e:	e029      	b.n	80188d4 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	691a      	ldr	r2, [r3, #16]
 8018884:	69fb      	ldr	r3, [r7, #28]
 8018886:	4413      	add	r3, r2
 8018888:	687a      	ldr	r2, [r7, #4]
 801888a:	6892      	ldr	r2, [r2, #8]
 801888c:	fbb3 f1f2 	udiv	r1, r3, r2
 8018890:	fb02 f201 	mul.w	r2, r2, r1
 8018894:	1a9b      	subs	r3, r3, r2
 8018896:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	685a      	ldr	r2, [r3, #4]
 801889c:	69bb      	ldr	r3, [r7, #24]
 801889e:	4413      	add	r3, r2
 80188a0:	781b      	ldrb	r3, [r3, #0]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d113      	bne.n	80188ce <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	685a      	ldr	r2, [r3, #4]
 80188aa:	69bb      	ldr	r3, [r7, #24]
 80188ac:	4413      	add	r3, r2
 80188ae:	2201      	movs	r2, #1
 80188b0:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	4619      	mov	r1, r3
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	68db      	ldr	r3, [r3, #12]
 80188bc:	69ba      	ldr	r2, [r7, #24]
 80188be:	fb02 f303 	mul.w	r3, r2, r3
 80188c2:	440b      	add	r3, r1
 80188c4:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	69ba      	ldr	r2, [r7, #24]
 80188ca:	611a      	str	r2, [r3, #16]
      break;
 80188cc:	e007      	b.n	80188de <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 80188ce:	69fb      	ldr	r3, [r7, #28]
 80188d0:	3301      	adds	r3, #1
 80188d2:	61fb      	str	r3, [r7, #28]
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	689b      	ldr	r3, [r3, #8]
 80188d8:	69fa      	ldr	r2, [r7, #28]
 80188da:	429a      	cmp	r2, r3
 80188dc:	d3d0      	bcc.n	8018880 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 80188de:	f7ff fe69 	bl	80185b4 <inHandlerMode>
 80188e2:	4603      	mov	r3, r0
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d005      	beq.n	80188f4 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 80188e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ea:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80188f2:	e001      	b.n	80188f8 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 80188f4:	f002 febe 	bl	801b674 <vPortExitCritical>
  }
  
  return p;
 80188f8:	6a3b      	ldr	r3, [r7, #32]
}
 80188fa:	4618      	mov	r0, r3
 80188fc:	3728      	adds	r7, #40	; 0x28
 80188fe:	46bd      	mov	sp, r7
 8018900:	bd80      	pop	{r7, pc}

08018902 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8018902:	b480      	push	{r7}
 8018904:	b085      	sub	sp, #20
 8018906:	af00      	add	r7, sp, #0
 8018908:	6078      	str	r0, [r7, #4]
 801890a:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d101      	bne.n	8018916 <osPoolFree+0x14>
    return osErrorParameter;
 8018912:	2380      	movs	r3, #128	; 0x80
 8018914:	e030      	b.n	8018978 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8018916:	683b      	ldr	r3, [r7, #0]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d101      	bne.n	8018920 <osPoolFree+0x1e>
    return osErrorParameter;
 801891c:	2380      	movs	r3, #128	; 0x80
 801891e:	e02b      	b.n	8018978 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	683a      	ldr	r2, [r7, #0]
 8018926:	429a      	cmp	r2, r3
 8018928:	d201      	bcs.n	801892e <osPoolFree+0x2c>
    return osErrorParameter;
 801892a:	2380      	movs	r3, #128	; 0x80
 801892c:	e024      	b.n	8018978 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 801892e:	683b      	ldr	r3, [r7, #0]
 8018930:	687a      	ldr	r2, [r7, #4]
 8018932:	6812      	ldr	r2, [r2, #0]
 8018934:	1a9b      	subs	r3, r3, r2
 8018936:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	68da      	ldr	r2, [r3, #12]
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	fbb3 f1f2 	udiv	r1, r3, r2
 8018942:	fb02 f201 	mul.w	r2, r2, r1
 8018946:	1a9b      	subs	r3, r3, r2
 8018948:	2b00      	cmp	r3, #0
 801894a:	d001      	beq.n	8018950 <osPoolFree+0x4e>
    return osErrorParameter;
 801894c:	2380      	movs	r3, #128	; 0x80
 801894e:	e013      	b.n	8018978 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	68db      	ldr	r3, [r3, #12]
 8018954:	68fa      	ldr	r2, [r7, #12]
 8018956:	fbb2 f3f3 	udiv	r3, r2, r3
 801895a:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	689b      	ldr	r3, [r3, #8]
 8018960:	68fa      	ldr	r2, [r7, #12]
 8018962:	429a      	cmp	r2, r3
 8018964:	d301      	bcc.n	801896a <osPoolFree+0x68>
    return osErrorParameter;
 8018966:	2380      	movs	r3, #128	; 0x80
 8018968:	e006      	b.n	8018978 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	685a      	ldr	r2, [r3, #4]
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	4413      	add	r3, r2
 8018972:	2200      	movs	r2, #0
 8018974:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8018976:	2300      	movs	r3, #0
}
 8018978:	4618      	mov	r0, r3
 801897a:	3714      	adds	r7, #20
 801897c:	46bd      	mov	sp, r7
 801897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018982:	4770      	bx	lr

08018984 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b082      	sub	sp, #8
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
 801898c:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	6818      	ldr	r0, [r3, #0]
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	685b      	ldr	r3, [r3, #4]
 8018996:	2200      	movs	r2, #0
 8018998:	4619      	mov	r1, r3
 801899a:	f000 fa0f 	bl	8018dbc <xQueueGenericCreate>
 801899e:	4603      	mov	r3, r0
#endif
}
 80189a0:	4618      	mov	r0, r3
 80189a2:	3708      	adds	r7, #8
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}

080189a8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b086      	sub	sp, #24
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	60f8      	str	r0, [r7, #12]
 80189b0:	60b9      	str	r1, [r7, #8]
 80189b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80189b4:	2300      	movs	r3, #0
 80189b6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80189bc:	697b      	ldr	r3, [r7, #20]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d101      	bne.n	80189c6 <osMessagePut+0x1e>
    ticks = 1;
 80189c2:	2301      	movs	r3, #1
 80189c4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80189c6:	f7ff fdf5 	bl	80185b4 <inHandlerMode>
 80189ca:	4603      	mov	r3, r0
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d018      	beq.n	8018a02 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80189d0:	f107 0210 	add.w	r2, r7, #16
 80189d4:	f107 0108 	add.w	r1, r7, #8
 80189d8:	2300      	movs	r3, #0
 80189da:	68f8      	ldr	r0, [r7, #12]
 80189dc:	f000 fb7e 	bl	80190dc <xQueueGenericSendFromISR>
 80189e0:	4603      	mov	r3, r0
 80189e2:	2b01      	cmp	r3, #1
 80189e4:	d001      	beq.n	80189ea <osMessagePut+0x42>
      return osErrorOS;
 80189e6:	23ff      	movs	r3, #255	; 0xff
 80189e8:	e018      	b.n	8018a1c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80189ea:	693b      	ldr	r3, [r7, #16]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d014      	beq.n	8018a1a <osMessagePut+0x72>
 80189f0:	4b0c      	ldr	r3, [pc, #48]	; (8018a24 <osMessagePut+0x7c>)
 80189f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80189f6:	601a      	str	r2, [r3, #0]
 80189f8:	f3bf 8f4f 	dsb	sy
 80189fc:	f3bf 8f6f 	isb	sy
 8018a00:	e00b      	b.n	8018a1a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8018a02:	f107 0108 	add.w	r1, r7, #8
 8018a06:	2300      	movs	r3, #0
 8018a08:	697a      	ldr	r2, [r7, #20]
 8018a0a:	68f8      	ldr	r0, [r7, #12]
 8018a0c:	f000 fa68 	bl	8018ee0 <xQueueGenericSend>
 8018a10:	4603      	mov	r3, r0
 8018a12:	2b01      	cmp	r3, #1
 8018a14:	d001      	beq.n	8018a1a <osMessagePut+0x72>
      return osErrorOS;
 8018a16:	23ff      	movs	r3, #255	; 0xff
 8018a18:	e000      	b.n	8018a1c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8018a1a:	2300      	movs	r3, #0
}
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	3718      	adds	r7, #24
 8018a20:	46bd      	mov	sp, r7
 8018a22:	bd80      	pop	{r7, pc}
 8018a24:	e000ed04 	.word	0xe000ed04

08018a28 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8018a28:	b590      	push	{r4, r7, lr}
 8018a2a:	b08b      	sub	sp, #44	; 0x2c
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	60f8      	str	r0, [r7, #12]
 8018a30:	60b9      	str	r1, [r7, #8]
 8018a32:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8018a34:	68bb      	ldr	r3, [r7, #8]
 8018a36:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8018a38:	2300      	movs	r3, #0
 8018a3a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8018a3c:	68bb      	ldr	r3, [r7, #8]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d10a      	bne.n	8018a58 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8018a42:	2380      	movs	r3, #128	; 0x80
 8018a44:	617b      	str	r3, [r7, #20]
    return event;
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	461c      	mov	r4, r3
 8018a4a:	f107 0314 	add.w	r3, r7, #20
 8018a4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018a52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018a56:	e054      	b.n	8018b02 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8018a58:	2300      	movs	r3, #0
 8018a5a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a66:	d103      	bne.n	8018a70 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8018a68:	f04f 33ff 	mov.w	r3, #4294967295
 8018a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8018a6e:	e009      	b.n	8018a84 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d006      	beq.n	8018a84 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8018a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d101      	bne.n	8018a84 <osMessageGet+0x5c>
      ticks = 1;
 8018a80:	2301      	movs	r3, #1
 8018a82:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8018a84:	f7ff fd96 	bl	80185b4 <inHandlerMode>
 8018a88:	4603      	mov	r3, r0
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d01c      	beq.n	8018ac8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8018a8e:	f107 0220 	add.w	r2, r7, #32
 8018a92:	f107 0314 	add.w	r3, r7, #20
 8018a96:	3304      	adds	r3, #4
 8018a98:	4619      	mov	r1, r3
 8018a9a:	68b8      	ldr	r0, [r7, #8]
 8018a9c:	f000 fe30 	bl	8019700 <xQueueReceiveFromISR>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	2b01      	cmp	r3, #1
 8018aa4:	d102      	bne.n	8018aac <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8018aa6:	2310      	movs	r3, #16
 8018aa8:	617b      	str	r3, [r7, #20]
 8018aaa:	e001      	b.n	8018ab0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8018aac:	2300      	movs	r3, #0
 8018aae:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018ab0:	6a3b      	ldr	r3, [r7, #32]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d01d      	beq.n	8018af2 <osMessageGet+0xca>
 8018ab6:	4b15      	ldr	r3, [pc, #84]	; (8018b0c <osMessageGet+0xe4>)
 8018ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018abc:	601a      	str	r2, [r3, #0]
 8018abe:	f3bf 8f4f 	dsb	sy
 8018ac2:	f3bf 8f6f 	isb	sy
 8018ac6:	e014      	b.n	8018af2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8018ac8:	f107 0314 	add.w	r3, r7, #20
 8018acc:	3304      	adds	r3, #4
 8018ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ad0:	4619      	mov	r1, r3
 8018ad2:	68b8      	ldr	r0, [r7, #8]
 8018ad4:	f000 fc28 	bl	8019328 <xQueueReceive>
 8018ad8:	4603      	mov	r3, r0
 8018ada:	2b01      	cmp	r3, #1
 8018adc:	d102      	bne.n	8018ae4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8018ade:	2310      	movs	r3, #16
 8018ae0:	617b      	str	r3, [r7, #20]
 8018ae2:	e006      	b.n	8018af2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8018ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d101      	bne.n	8018aee <osMessageGet+0xc6>
 8018aea:	2300      	movs	r3, #0
 8018aec:	e000      	b.n	8018af0 <osMessageGet+0xc8>
 8018aee:	2340      	movs	r3, #64	; 0x40
 8018af0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	461c      	mov	r4, r3
 8018af6:	f107 0314 	add.w	r3, r7, #20
 8018afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018afe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8018b02:	68f8      	ldr	r0, [r7, #12]
 8018b04:	372c      	adds	r7, #44	; 0x2c
 8018b06:	46bd      	mov	sp, r7
 8018b08:	bd90      	pop	{r4, r7, pc}
 8018b0a:	bf00      	nop
 8018b0c:	e000ed04 	.word	0xe000ed04

08018b10 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8018b14:	f001 ff08 	bl	801a928 <xTaskGetSchedulerState>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	2b01      	cmp	r3, #1
 8018b1c:	d001      	beq.n	8018b22 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8018b1e:	f002 fe0b 	bl	801b738 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8018b22:	bf00      	nop
 8018b24:	bd80      	pop	{r7, pc}

08018b26 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8018b26:	b580      	push	{r7, lr}
 8018b28:	b082      	sub	sp, #8
 8018b2a:	af00      	add	r7, sp, #0
 8018b2c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8018b2e:	6878      	ldr	r0, [r7, #4]
 8018b30:	f001 f92e 	bl	8019d90 <vTaskSuspend>
  
  return osOK;
 8018b34:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8018b36:	4618      	mov	r0, r3
 8018b38:	3708      	adds	r7, #8
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	bd80      	pop	{r7, pc}
	...

08018b40 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b082      	sub	sp, #8
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8018b48:	f7ff fd34 	bl	80185b4 <inHandlerMode>
 8018b4c:	4603      	mov	r3, r0
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d00e      	beq.n	8018b70 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8018b52:	6878      	ldr	r0, [r7, #4]
 8018b54:	f001 fa3e 	bl	8019fd4 <xTaskResumeFromISR>
 8018b58:	4603      	mov	r3, r0
 8018b5a:	2b01      	cmp	r3, #1
 8018b5c:	d10b      	bne.n	8018b76 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8018b5e:	4b08      	ldr	r3, [pc, #32]	; (8018b80 <osThreadResume+0x40>)
 8018b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b64:	601a      	str	r2, [r3, #0]
 8018b66:	f3bf 8f4f 	dsb	sy
 8018b6a:	f3bf 8f6f 	isb	sy
 8018b6e:	e002      	b.n	8018b76 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8018b70:	6878      	ldr	r0, [r7, #4]
 8018b72:	f001 f9d1 	bl	8019f18 <vTaskResume>
  }
  return osOK;
 8018b76:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8018b78:	4618      	mov	r0, r3
 8018b7a:	3708      	adds	r7, #8
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd80      	pop	{r7, pc}
 8018b80:	e000ed04 	.word	0xe000ed04

08018b84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018b84:	b480      	push	{r7}
 8018b86:	b083      	sub	sp, #12
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	f103 0208 	add.w	r2, r3, #8
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	f04f 32ff 	mov.w	r2, #4294967295
 8018b9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	f103 0208 	add.w	r2, r3, #8
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	f103 0208 	add.w	r2, r3, #8
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	2200      	movs	r2, #0
 8018bb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018bb8:	bf00      	nop
 8018bba:	370c      	adds	r7, #12
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bc2:	4770      	bx	lr

08018bc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018bc4:	b480      	push	{r7}
 8018bc6:	b083      	sub	sp, #12
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	2200      	movs	r2, #0
 8018bd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018bd2:	bf00      	nop
 8018bd4:	370c      	adds	r7, #12
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bdc:	4770      	bx	lr

08018bde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018bde:	b480      	push	{r7}
 8018be0:	b085      	sub	sp, #20
 8018be2:	af00      	add	r7, sp, #0
 8018be4:	6078      	str	r0, [r7, #4]
 8018be6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	685b      	ldr	r3, [r3, #4]
 8018bec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018bee:	683b      	ldr	r3, [r7, #0]
 8018bf0:	68fa      	ldr	r2, [r7, #12]
 8018bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	689a      	ldr	r2, [r3, #8]
 8018bf8:	683b      	ldr	r3, [r7, #0]
 8018bfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	689b      	ldr	r3, [r3, #8]
 8018c00:	683a      	ldr	r2, [r7, #0]
 8018c02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	683a      	ldr	r2, [r7, #0]
 8018c08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018c0a:	683b      	ldr	r3, [r7, #0]
 8018c0c:	687a      	ldr	r2, [r7, #4]
 8018c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	1c5a      	adds	r2, r3, #1
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	601a      	str	r2, [r3, #0]
}
 8018c1a:	bf00      	nop
 8018c1c:	3714      	adds	r7, #20
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c24:	4770      	bx	lr

08018c26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018c26:	b480      	push	{r7}
 8018c28:	b085      	sub	sp, #20
 8018c2a:	af00      	add	r7, sp, #0
 8018c2c:	6078      	str	r0, [r7, #4]
 8018c2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018c30:	683b      	ldr	r3, [r7, #0]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018c36:	68bb      	ldr	r3, [r7, #8]
 8018c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c3c:	d103      	bne.n	8018c46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	691b      	ldr	r3, [r3, #16]
 8018c42:	60fb      	str	r3, [r7, #12]
 8018c44:	e00c      	b.n	8018c60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	3308      	adds	r3, #8
 8018c4a:	60fb      	str	r3, [r7, #12]
 8018c4c:	e002      	b.n	8018c54 <vListInsert+0x2e>
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	685b      	ldr	r3, [r3, #4]
 8018c52:	60fb      	str	r3, [r7, #12]
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	685b      	ldr	r3, [r3, #4]
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	68ba      	ldr	r2, [r7, #8]
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	d2f6      	bcs.n	8018c4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	685a      	ldr	r2, [r3, #4]
 8018c64:	683b      	ldr	r3, [r7, #0]
 8018c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018c68:	683b      	ldr	r3, [r7, #0]
 8018c6a:	685b      	ldr	r3, [r3, #4]
 8018c6c:	683a      	ldr	r2, [r7, #0]
 8018c6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018c70:	683b      	ldr	r3, [r7, #0]
 8018c72:	68fa      	ldr	r2, [r7, #12]
 8018c74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	683a      	ldr	r2, [r7, #0]
 8018c7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018c7c:	683b      	ldr	r3, [r7, #0]
 8018c7e:	687a      	ldr	r2, [r7, #4]
 8018c80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	1c5a      	adds	r2, r3, #1
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	601a      	str	r2, [r3, #0]
}
 8018c8c:	bf00      	nop
 8018c8e:	3714      	adds	r7, #20
 8018c90:	46bd      	mov	sp, r7
 8018c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c96:	4770      	bx	lr

08018c98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018c98:	b480      	push	{r7}
 8018c9a:	b085      	sub	sp, #20
 8018c9c:	af00      	add	r7, sp, #0
 8018c9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	691b      	ldr	r3, [r3, #16]
 8018ca4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	685b      	ldr	r3, [r3, #4]
 8018caa:	687a      	ldr	r2, [r7, #4]
 8018cac:	6892      	ldr	r2, [r2, #8]
 8018cae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	689b      	ldr	r3, [r3, #8]
 8018cb4:	687a      	ldr	r2, [r7, #4]
 8018cb6:	6852      	ldr	r2, [r2, #4]
 8018cb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	685b      	ldr	r3, [r3, #4]
 8018cbe:	687a      	ldr	r2, [r7, #4]
 8018cc0:	429a      	cmp	r2, r3
 8018cc2:	d103      	bne.n	8018ccc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	689a      	ldr	r2, [r3, #8]
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	2200      	movs	r2, #0
 8018cd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	1e5a      	subs	r2, r3, #1
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	681b      	ldr	r3, [r3, #0]
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3714      	adds	r7, #20
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cea:	4770      	bx	lr

08018cec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b084      	sub	sp, #16
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
 8018cf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d10a      	bne.n	8018d16 <xQueueGenericReset+0x2a>
	__asm volatile
 8018d00:	f04f 0320 	mov.w	r3, #32
 8018d04:	f383 8811 	msr	BASEPRI, r3
 8018d08:	f3bf 8f6f 	isb	sy
 8018d0c:	f3bf 8f4f 	dsb	sy
 8018d10:	60bb      	str	r3, [r7, #8]
}
 8018d12:	bf00      	nop
 8018d14:	e7fe      	b.n	8018d14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8018d16:	f002 fc7d 	bl	801b614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	681a      	ldr	r2, [r3, #0]
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d22:	68f9      	ldr	r1, [r7, #12]
 8018d24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018d26:	fb01 f303 	mul.w	r3, r1, r3
 8018d2a:	441a      	add	r2, r3
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	2200      	movs	r2, #0
 8018d34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	681a      	ldr	r2, [r3, #0]
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	681a      	ldr	r2, [r3, #0]
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d46:	3b01      	subs	r3, #1
 8018d48:	68f9      	ldr	r1, [r7, #12]
 8018d4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018d4c:	fb01 f303 	mul.w	r3, r1, r3
 8018d50:	441a      	add	r2, r3
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	22ff      	movs	r2, #255	; 0xff
 8018d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	22ff      	movs	r2, #255	; 0xff
 8018d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8018d66:	683b      	ldr	r3, [r7, #0]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d114      	bne.n	8018d96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	691b      	ldr	r3, [r3, #16]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d01a      	beq.n	8018daa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	3310      	adds	r3, #16
 8018d78:	4618      	mov	r0, r3
 8018d7a:	f001 fc37 	bl	801a5ec <xTaskRemoveFromEventList>
 8018d7e:	4603      	mov	r3, r0
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d012      	beq.n	8018daa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018d84:	4b0c      	ldr	r3, [pc, #48]	; (8018db8 <xQueueGenericReset+0xcc>)
 8018d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d8a:	601a      	str	r2, [r3, #0]
 8018d8c:	f3bf 8f4f 	dsb	sy
 8018d90:	f3bf 8f6f 	isb	sy
 8018d94:	e009      	b.n	8018daa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	3310      	adds	r3, #16
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f7ff fef2 	bl	8018b84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	3324      	adds	r3, #36	; 0x24
 8018da4:	4618      	mov	r0, r3
 8018da6:	f7ff feed 	bl	8018b84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018daa:	f002 fc63 	bl	801b674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018dae:	2301      	movs	r3, #1
}
 8018db0:	4618      	mov	r0, r3
 8018db2:	3710      	adds	r7, #16
 8018db4:	46bd      	mov	sp, r7
 8018db6:	bd80      	pop	{r7, pc}
 8018db8:	e000ed04 	.word	0xe000ed04

08018dbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	b08a      	sub	sp, #40	; 0x28
 8018dc0:	af02      	add	r7, sp, #8
 8018dc2:	60f8      	str	r0, [r7, #12]
 8018dc4:	60b9      	str	r1, [r7, #8]
 8018dc6:	4613      	mov	r3, r2
 8018dc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d10a      	bne.n	8018de6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8018dd0:	f04f 0320 	mov.w	r3, #32
 8018dd4:	f383 8811 	msr	BASEPRI, r3
 8018dd8:	f3bf 8f6f 	isb	sy
 8018ddc:	f3bf 8f4f 	dsb	sy
 8018de0:	613b      	str	r3, [r7, #16]
}
 8018de2:	bf00      	nop
 8018de4:	e7fe      	b.n	8018de4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8018de6:	68bb      	ldr	r3, [r7, #8]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d102      	bne.n	8018df2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8018dec:	2300      	movs	r3, #0
 8018dee:	61fb      	str	r3, [r7, #28]
 8018df0:	e004      	b.n	8018dfc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	68ba      	ldr	r2, [r7, #8]
 8018df6:	fb02 f303 	mul.w	r3, r2, r3
 8018dfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018dfc:	69fb      	ldr	r3, [r7, #28]
 8018dfe:	3350      	adds	r3, #80	; 0x50
 8018e00:	4618      	mov	r0, r3
 8018e02:	f002 fd29 	bl	801b858 <pvPortMalloc>
 8018e06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8018e08:	69bb      	ldr	r3, [r7, #24]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d00d      	beq.n	8018e2a <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8018e0e:	69bb      	ldr	r3, [r7, #24]
 8018e10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018e12:	697b      	ldr	r3, [r7, #20]
 8018e14:	3350      	adds	r3, #80	; 0x50
 8018e16:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018e18:	79fa      	ldrb	r2, [r7, #7]
 8018e1a:	69bb      	ldr	r3, [r7, #24]
 8018e1c:	9300      	str	r3, [sp, #0]
 8018e1e:	4613      	mov	r3, r2
 8018e20:	697a      	ldr	r2, [r7, #20]
 8018e22:	68b9      	ldr	r1, [r7, #8]
 8018e24:	68f8      	ldr	r0, [r7, #12]
 8018e26:	f000 f805 	bl	8018e34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018e2a:	69bb      	ldr	r3, [r7, #24]
	}
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	3720      	adds	r7, #32
 8018e30:	46bd      	mov	sp, r7
 8018e32:	bd80      	pop	{r7, pc}

08018e34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018e34:	b580      	push	{r7, lr}
 8018e36:	b084      	sub	sp, #16
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	60f8      	str	r0, [r7, #12]
 8018e3c:	60b9      	str	r1, [r7, #8]
 8018e3e:	607a      	str	r2, [r7, #4]
 8018e40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018e42:	68bb      	ldr	r3, [r7, #8]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d103      	bne.n	8018e50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018e48:	69bb      	ldr	r3, [r7, #24]
 8018e4a:	69ba      	ldr	r2, [r7, #24]
 8018e4c:	601a      	str	r2, [r3, #0]
 8018e4e:	e002      	b.n	8018e56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018e50:	69bb      	ldr	r3, [r7, #24]
 8018e52:	687a      	ldr	r2, [r7, #4]
 8018e54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018e56:	69bb      	ldr	r3, [r7, #24]
 8018e58:	68fa      	ldr	r2, [r7, #12]
 8018e5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018e5c:	69bb      	ldr	r3, [r7, #24]
 8018e5e:	68ba      	ldr	r2, [r7, #8]
 8018e60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018e62:	2101      	movs	r1, #1
 8018e64:	69b8      	ldr	r0, [r7, #24]
 8018e66:	f7ff ff41 	bl	8018cec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8018e6a:	69bb      	ldr	r3, [r7, #24]
 8018e6c:	78fa      	ldrb	r2, [r7, #3]
 8018e6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018e72:	bf00      	nop
 8018e74:	3710      	adds	r7, #16
 8018e76:	46bd      	mov	sp, r7
 8018e78:	bd80      	pop	{r7, pc}

08018e7a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8018e7a:	b580      	push	{r7, lr}
 8018e7c:	b086      	sub	sp, #24
 8018e7e:	af00      	add	r7, sp, #0
 8018e80:	6078      	str	r0, [r7, #4]
 8018e82:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d10a      	bne.n	8018ea0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8018e8a:	f04f 0320 	mov.w	r3, #32
 8018e8e:	f383 8811 	msr	BASEPRI, r3
 8018e92:	f3bf 8f6f 	isb	sy
 8018e96:	f3bf 8f4f 	dsb	sy
 8018e9a:	613b      	str	r3, [r7, #16]
}
 8018e9c:	bf00      	nop
 8018e9e:	e7fe      	b.n	8018e9e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018ea0:	683a      	ldr	r2, [r7, #0]
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	429a      	cmp	r2, r3
 8018ea6:	d90a      	bls.n	8018ebe <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8018ea8:	f04f 0320 	mov.w	r3, #32
 8018eac:	f383 8811 	msr	BASEPRI, r3
 8018eb0:	f3bf 8f6f 	isb	sy
 8018eb4:	f3bf 8f4f 	dsb	sy
 8018eb8:	60fb      	str	r3, [r7, #12]
}
 8018eba:	bf00      	nop
 8018ebc:	e7fe      	b.n	8018ebc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018ebe:	2202      	movs	r2, #2
 8018ec0:	2100      	movs	r1, #0
 8018ec2:	6878      	ldr	r0, [r7, #4]
 8018ec4:	f7ff ff7a 	bl	8018dbc <xQueueGenericCreate>
 8018ec8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8018eca:	697b      	ldr	r3, [r7, #20]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d002      	beq.n	8018ed6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018ed0:	697b      	ldr	r3, [r7, #20]
 8018ed2:	683a      	ldr	r2, [r7, #0]
 8018ed4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8018ed6:	697b      	ldr	r3, [r7, #20]
	}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	3718      	adds	r7, #24
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}

08018ee0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b08e      	sub	sp, #56	; 0x38
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	60f8      	str	r0, [r7, #12]
 8018ee8:	60b9      	str	r1, [r7, #8]
 8018eea:	607a      	str	r2, [r7, #4]
 8018eec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8018eee:	2300      	movs	r3, #0
 8018ef0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d10a      	bne.n	8018f12 <xQueueGenericSend+0x32>
	__asm volatile
 8018efc:	f04f 0320 	mov.w	r3, #32
 8018f00:	f383 8811 	msr	BASEPRI, r3
 8018f04:	f3bf 8f6f 	isb	sy
 8018f08:	f3bf 8f4f 	dsb	sy
 8018f0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018f0e:	bf00      	nop
 8018f10:	e7fe      	b.n	8018f10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018f12:	68bb      	ldr	r3, [r7, #8]
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d103      	bne.n	8018f20 <xQueueGenericSend+0x40>
 8018f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d101      	bne.n	8018f24 <xQueueGenericSend+0x44>
 8018f20:	2301      	movs	r3, #1
 8018f22:	e000      	b.n	8018f26 <xQueueGenericSend+0x46>
 8018f24:	2300      	movs	r3, #0
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d10a      	bne.n	8018f40 <xQueueGenericSend+0x60>
	__asm volatile
 8018f2a:	f04f 0320 	mov.w	r3, #32
 8018f2e:	f383 8811 	msr	BASEPRI, r3
 8018f32:	f3bf 8f6f 	isb	sy
 8018f36:	f3bf 8f4f 	dsb	sy
 8018f3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018f3c:	bf00      	nop
 8018f3e:	e7fe      	b.n	8018f3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018f40:	683b      	ldr	r3, [r7, #0]
 8018f42:	2b02      	cmp	r3, #2
 8018f44:	d103      	bne.n	8018f4e <xQueueGenericSend+0x6e>
 8018f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f4a:	2b01      	cmp	r3, #1
 8018f4c:	d101      	bne.n	8018f52 <xQueueGenericSend+0x72>
 8018f4e:	2301      	movs	r3, #1
 8018f50:	e000      	b.n	8018f54 <xQueueGenericSend+0x74>
 8018f52:	2300      	movs	r3, #0
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d10a      	bne.n	8018f6e <xQueueGenericSend+0x8e>
	__asm volatile
 8018f58:	f04f 0320 	mov.w	r3, #32
 8018f5c:	f383 8811 	msr	BASEPRI, r3
 8018f60:	f3bf 8f6f 	isb	sy
 8018f64:	f3bf 8f4f 	dsb	sy
 8018f68:	623b      	str	r3, [r7, #32]
}
 8018f6a:	bf00      	nop
 8018f6c:	e7fe      	b.n	8018f6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018f6e:	f001 fcdb 	bl	801a928 <xTaskGetSchedulerState>
 8018f72:	4603      	mov	r3, r0
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d102      	bne.n	8018f7e <xQueueGenericSend+0x9e>
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d101      	bne.n	8018f82 <xQueueGenericSend+0xa2>
 8018f7e:	2301      	movs	r3, #1
 8018f80:	e000      	b.n	8018f84 <xQueueGenericSend+0xa4>
 8018f82:	2300      	movs	r3, #0
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d10a      	bne.n	8018f9e <xQueueGenericSend+0xbe>
	__asm volatile
 8018f88:	f04f 0320 	mov.w	r3, #32
 8018f8c:	f383 8811 	msr	BASEPRI, r3
 8018f90:	f3bf 8f6f 	isb	sy
 8018f94:	f3bf 8f4f 	dsb	sy
 8018f98:	61fb      	str	r3, [r7, #28]
}
 8018f9a:	bf00      	nop
 8018f9c:	e7fe      	b.n	8018f9c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018f9e:	f002 fb39 	bl	801b614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018faa:	429a      	cmp	r2, r3
 8018fac:	d302      	bcc.n	8018fb4 <xQueueGenericSend+0xd4>
 8018fae:	683b      	ldr	r3, [r7, #0]
 8018fb0:	2b02      	cmp	r3, #2
 8018fb2:	d129      	bne.n	8019008 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018fb4:	683a      	ldr	r2, [r7, #0]
 8018fb6:	68b9      	ldr	r1, [r7, #8]
 8018fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018fba:	f000 fc39 	bl	8019830 <prvCopyDataToQueue>
 8018fbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d010      	beq.n	8018fea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fca:	3324      	adds	r3, #36	; 0x24
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f001 fb0d 	bl	801a5ec <xTaskRemoveFromEventList>
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d013      	beq.n	8019000 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018fd8:	4b3f      	ldr	r3, [pc, #252]	; (80190d8 <xQueueGenericSend+0x1f8>)
 8018fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018fde:	601a      	str	r2, [r3, #0]
 8018fe0:	f3bf 8f4f 	dsb	sy
 8018fe4:	f3bf 8f6f 	isb	sy
 8018fe8:	e00a      	b.n	8019000 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d007      	beq.n	8019000 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018ff0:	4b39      	ldr	r3, [pc, #228]	; (80190d8 <xQueueGenericSend+0x1f8>)
 8018ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ff6:	601a      	str	r2, [r3, #0]
 8018ff8:	f3bf 8f4f 	dsb	sy
 8018ffc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019000:	f002 fb38 	bl	801b674 <vPortExitCritical>
				return pdPASS;
 8019004:	2301      	movs	r3, #1
 8019006:	e063      	b.n	80190d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	2b00      	cmp	r3, #0
 801900c:	d103      	bne.n	8019016 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801900e:	f002 fb31 	bl	801b674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8019012:	2300      	movs	r3, #0
 8019014:	e05c      	b.n	80190d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019018:	2b00      	cmp	r3, #0
 801901a:	d106      	bne.n	801902a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801901c:	f107 0314 	add.w	r3, r7, #20
 8019020:	4618      	mov	r0, r3
 8019022:	f001 fb45 	bl	801a6b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019026:	2301      	movs	r3, #1
 8019028:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801902a:	f002 fb23 	bl	801b674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801902e:	f001 f899 	bl	801a164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019032:	f002 faef 	bl	801b614 <vPortEnterCritical>
 8019036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801903c:	b25b      	sxtb	r3, r3
 801903e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019042:	d103      	bne.n	801904c <xQueueGenericSend+0x16c>
 8019044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019046:	2200      	movs	r2, #0
 8019048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801904e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019052:	b25b      	sxtb	r3, r3
 8019054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019058:	d103      	bne.n	8019062 <xQueueGenericSend+0x182>
 801905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801905c:	2200      	movs	r2, #0
 801905e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019062:	f002 fb07 	bl	801b674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019066:	1d3a      	adds	r2, r7, #4
 8019068:	f107 0314 	add.w	r3, r7, #20
 801906c:	4611      	mov	r1, r2
 801906e:	4618      	mov	r0, r3
 8019070:	f001 fb34 	bl	801a6dc <xTaskCheckForTimeOut>
 8019074:	4603      	mov	r3, r0
 8019076:	2b00      	cmp	r3, #0
 8019078:	d124      	bne.n	80190c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801907a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801907c:	f000 fcd0 	bl	8019a20 <prvIsQueueFull>
 8019080:	4603      	mov	r3, r0
 8019082:	2b00      	cmp	r3, #0
 8019084:	d018      	beq.n	80190b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019088:	3310      	adds	r3, #16
 801908a:	687a      	ldr	r2, [r7, #4]
 801908c:	4611      	mov	r1, r2
 801908e:	4618      	mov	r0, r3
 8019090:	f001 fa5c 	bl	801a54c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019096:	f000 fc5b 	bl	8019950 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801909a:	f001 f871 	bl	801a180 <xTaskResumeAll>
 801909e:	4603      	mov	r3, r0
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	f47f af7c 	bne.w	8018f9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80190a6:	4b0c      	ldr	r3, [pc, #48]	; (80190d8 <xQueueGenericSend+0x1f8>)
 80190a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190ac:	601a      	str	r2, [r3, #0]
 80190ae:	f3bf 8f4f 	dsb	sy
 80190b2:	f3bf 8f6f 	isb	sy
 80190b6:	e772      	b.n	8018f9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80190b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80190ba:	f000 fc49 	bl	8019950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80190be:	f001 f85f 	bl	801a180 <xTaskResumeAll>
 80190c2:	e76c      	b.n	8018f9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80190c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80190c6:	f000 fc43 	bl	8019950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80190ca:	f001 f859 	bl	801a180 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80190ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80190d0:	4618      	mov	r0, r3
 80190d2:	3738      	adds	r7, #56	; 0x38
 80190d4:	46bd      	mov	sp, r7
 80190d6:	bd80      	pop	{r7, pc}
 80190d8:	e000ed04 	.word	0xe000ed04

080190dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b08e      	sub	sp, #56	; 0x38
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	60f8      	str	r0, [r7, #12]
 80190e4:	60b9      	str	r1, [r7, #8]
 80190e6:	607a      	str	r2, [r7, #4]
 80190e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80190ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d10a      	bne.n	801910a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80190f4:	f04f 0320 	mov.w	r3, #32
 80190f8:	f383 8811 	msr	BASEPRI, r3
 80190fc:	f3bf 8f6f 	isb	sy
 8019100:	f3bf 8f4f 	dsb	sy
 8019104:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019106:	bf00      	nop
 8019108:	e7fe      	b.n	8019108 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801910a:	68bb      	ldr	r3, [r7, #8]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d103      	bne.n	8019118 <xQueueGenericSendFromISR+0x3c>
 8019110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019114:	2b00      	cmp	r3, #0
 8019116:	d101      	bne.n	801911c <xQueueGenericSendFromISR+0x40>
 8019118:	2301      	movs	r3, #1
 801911a:	e000      	b.n	801911e <xQueueGenericSendFromISR+0x42>
 801911c:	2300      	movs	r3, #0
 801911e:	2b00      	cmp	r3, #0
 8019120:	d10a      	bne.n	8019138 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8019122:	f04f 0320 	mov.w	r3, #32
 8019126:	f383 8811 	msr	BASEPRI, r3
 801912a:	f3bf 8f6f 	isb	sy
 801912e:	f3bf 8f4f 	dsb	sy
 8019132:	623b      	str	r3, [r7, #32]
}
 8019134:	bf00      	nop
 8019136:	e7fe      	b.n	8019136 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019138:	683b      	ldr	r3, [r7, #0]
 801913a:	2b02      	cmp	r3, #2
 801913c:	d103      	bne.n	8019146 <xQueueGenericSendFromISR+0x6a>
 801913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019142:	2b01      	cmp	r3, #1
 8019144:	d101      	bne.n	801914a <xQueueGenericSendFromISR+0x6e>
 8019146:	2301      	movs	r3, #1
 8019148:	e000      	b.n	801914c <xQueueGenericSendFromISR+0x70>
 801914a:	2300      	movs	r3, #0
 801914c:	2b00      	cmp	r3, #0
 801914e:	d10a      	bne.n	8019166 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8019150:	f04f 0320 	mov.w	r3, #32
 8019154:	f383 8811 	msr	BASEPRI, r3
 8019158:	f3bf 8f6f 	isb	sy
 801915c:	f3bf 8f4f 	dsb	sy
 8019160:	61fb      	str	r3, [r7, #28]
}
 8019162:	bf00      	nop
 8019164:	e7fe      	b.n	8019164 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019166:	f002 fb37 	bl	801b7d8 <vPortValidateInterruptPriority>
	__asm volatile
 801916a:	f3ef 8211 	mrs	r2, BASEPRI
 801916e:	f04f 0320 	mov.w	r3, #32
 8019172:	f383 8811 	msr	BASEPRI, r3
 8019176:	f3bf 8f6f 	isb	sy
 801917a:	f3bf 8f4f 	dsb	sy
 801917e:	61ba      	str	r2, [r7, #24]
 8019180:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8019182:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019184:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801918c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801918e:	429a      	cmp	r2, r3
 8019190:	d302      	bcc.n	8019198 <xQueueGenericSendFromISR+0xbc>
 8019192:	683b      	ldr	r3, [r7, #0]
 8019194:	2b02      	cmp	r3, #2
 8019196:	d12c      	bne.n	80191f2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801919a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801919e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80191a2:	683a      	ldr	r2, [r7, #0]
 80191a4:	68b9      	ldr	r1, [r7, #8]
 80191a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80191a8:	f000 fb42 	bl	8019830 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80191ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80191b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191b4:	d112      	bne.n	80191dc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80191b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d016      	beq.n	80191ec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80191be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191c0:	3324      	adds	r3, #36	; 0x24
 80191c2:	4618      	mov	r0, r3
 80191c4:	f001 fa12 	bl	801a5ec <xTaskRemoveFromEventList>
 80191c8:	4603      	mov	r3, r0
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d00e      	beq.n	80191ec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d00b      	beq.n	80191ec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	2201      	movs	r2, #1
 80191d8:	601a      	str	r2, [r3, #0]
 80191da:	e007      	b.n	80191ec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80191dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80191e0:	3301      	adds	r3, #1
 80191e2:	b2db      	uxtb	r3, r3
 80191e4:	b25a      	sxtb	r2, r3
 80191e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80191ec:	2301      	movs	r3, #1
 80191ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80191f0:	e001      	b.n	80191f6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80191f2:	2300      	movs	r3, #0
 80191f4:	637b      	str	r3, [r7, #52]	; 0x34
 80191f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80191fa:	693b      	ldr	r3, [r7, #16]
 80191fc:	f383 8811 	msr	BASEPRI, r3
}
 8019200:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019204:	4618      	mov	r0, r3
 8019206:	3738      	adds	r7, #56	; 0x38
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}

0801920c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b08e      	sub	sp, #56	; 0x38
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
 8019214:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801921c:	2b00      	cmp	r3, #0
 801921e:	d10a      	bne.n	8019236 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8019220:	f04f 0320 	mov.w	r3, #32
 8019224:	f383 8811 	msr	BASEPRI, r3
 8019228:	f3bf 8f6f 	isb	sy
 801922c:	f3bf 8f4f 	dsb	sy
 8019230:	623b      	str	r3, [r7, #32]
}
 8019232:	bf00      	nop
 8019234:	e7fe      	b.n	8019234 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801923a:	2b00      	cmp	r3, #0
 801923c:	d00a      	beq.n	8019254 <xQueueGiveFromISR+0x48>
	__asm volatile
 801923e:	f04f 0320 	mov.w	r3, #32
 8019242:	f383 8811 	msr	BASEPRI, r3
 8019246:	f3bf 8f6f 	isb	sy
 801924a:	f3bf 8f4f 	dsb	sy
 801924e:	61fb      	str	r3, [r7, #28]
}
 8019250:	bf00      	nop
 8019252:	e7fe      	b.n	8019252 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8019254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	2b00      	cmp	r3, #0
 801925a:	d103      	bne.n	8019264 <xQueueGiveFromISR+0x58>
 801925c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801925e:	689b      	ldr	r3, [r3, #8]
 8019260:	2b00      	cmp	r3, #0
 8019262:	d101      	bne.n	8019268 <xQueueGiveFromISR+0x5c>
 8019264:	2301      	movs	r3, #1
 8019266:	e000      	b.n	801926a <xQueueGiveFromISR+0x5e>
 8019268:	2300      	movs	r3, #0
 801926a:	2b00      	cmp	r3, #0
 801926c:	d10a      	bne.n	8019284 <xQueueGiveFromISR+0x78>
	__asm volatile
 801926e:	f04f 0320 	mov.w	r3, #32
 8019272:	f383 8811 	msr	BASEPRI, r3
 8019276:	f3bf 8f6f 	isb	sy
 801927a:	f3bf 8f4f 	dsb	sy
 801927e:	61bb      	str	r3, [r7, #24]
}
 8019280:	bf00      	nop
 8019282:	e7fe      	b.n	8019282 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019284:	f002 faa8 	bl	801b7d8 <vPortValidateInterruptPriority>
	__asm volatile
 8019288:	f3ef 8211 	mrs	r2, BASEPRI
 801928c:	f04f 0320 	mov.w	r3, #32
 8019290:	f383 8811 	msr	BASEPRI, r3
 8019294:	f3bf 8f6f 	isb	sy
 8019298:	f3bf 8f4f 	dsb	sy
 801929c:	617a      	str	r2, [r7, #20]
 801929e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80192a0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80192a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80192a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192a8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80192aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80192b0:	429a      	cmp	r2, r3
 80192b2:	d22b      	bcs.n	801930c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80192b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80192ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80192be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192c0:	1c5a      	adds	r2, r3, #1
 80192c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192c4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80192c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80192ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192ce:	d112      	bne.n	80192f6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80192d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d016      	beq.n	8019306 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80192d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192da:	3324      	adds	r3, #36	; 0x24
 80192dc:	4618      	mov	r0, r3
 80192de:	f001 f985 	bl	801a5ec <xTaskRemoveFromEventList>
 80192e2:	4603      	mov	r3, r0
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d00e      	beq.n	8019306 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80192e8:	683b      	ldr	r3, [r7, #0]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d00b      	beq.n	8019306 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80192ee:	683b      	ldr	r3, [r7, #0]
 80192f0:	2201      	movs	r2, #1
 80192f2:	601a      	str	r2, [r3, #0]
 80192f4:	e007      	b.n	8019306 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80192f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192fa:	3301      	adds	r3, #1
 80192fc:	b2db      	uxtb	r3, r3
 80192fe:	b25a      	sxtb	r2, r3
 8019300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019306:	2301      	movs	r3, #1
 8019308:	637b      	str	r3, [r7, #52]	; 0x34
 801930a:	e001      	b.n	8019310 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801930c:	2300      	movs	r3, #0
 801930e:	637b      	str	r3, [r7, #52]	; 0x34
 8019310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019312:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	f383 8811 	msr	BASEPRI, r3
}
 801931a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801931c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801931e:	4618      	mov	r0, r3
 8019320:	3738      	adds	r7, #56	; 0x38
 8019322:	46bd      	mov	sp, r7
 8019324:	bd80      	pop	{r7, pc}
	...

08019328 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019328:	b580      	push	{r7, lr}
 801932a:	b08c      	sub	sp, #48	; 0x30
 801932c:	af00      	add	r7, sp, #0
 801932e:	60f8      	str	r0, [r7, #12]
 8019330:	60b9      	str	r1, [r7, #8]
 8019332:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019334:	2300      	movs	r3, #0
 8019336:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801933e:	2b00      	cmp	r3, #0
 8019340:	d10a      	bne.n	8019358 <xQueueReceive+0x30>
	__asm volatile
 8019342:	f04f 0320 	mov.w	r3, #32
 8019346:	f383 8811 	msr	BASEPRI, r3
 801934a:	f3bf 8f6f 	isb	sy
 801934e:	f3bf 8f4f 	dsb	sy
 8019352:	623b      	str	r3, [r7, #32]
}
 8019354:	bf00      	nop
 8019356:	e7fe      	b.n	8019356 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019358:	68bb      	ldr	r3, [r7, #8]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d103      	bne.n	8019366 <xQueueReceive+0x3e>
 801935e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019362:	2b00      	cmp	r3, #0
 8019364:	d101      	bne.n	801936a <xQueueReceive+0x42>
 8019366:	2301      	movs	r3, #1
 8019368:	e000      	b.n	801936c <xQueueReceive+0x44>
 801936a:	2300      	movs	r3, #0
 801936c:	2b00      	cmp	r3, #0
 801936e:	d10a      	bne.n	8019386 <xQueueReceive+0x5e>
	__asm volatile
 8019370:	f04f 0320 	mov.w	r3, #32
 8019374:	f383 8811 	msr	BASEPRI, r3
 8019378:	f3bf 8f6f 	isb	sy
 801937c:	f3bf 8f4f 	dsb	sy
 8019380:	61fb      	str	r3, [r7, #28]
}
 8019382:	bf00      	nop
 8019384:	e7fe      	b.n	8019384 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019386:	f001 facf 	bl	801a928 <xTaskGetSchedulerState>
 801938a:	4603      	mov	r3, r0
 801938c:	2b00      	cmp	r3, #0
 801938e:	d102      	bne.n	8019396 <xQueueReceive+0x6e>
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	2b00      	cmp	r3, #0
 8019394:	d101      	bne.n	801939a <xQueueReceive+0x72>
 8019396:	2301      	movs	r3, #1
 8019398:	e000      	b.n	801939c <xQueueReceive+0x74>
 801939a:	2300      	movs	r3, #0
 801939c:	2b00      	cmp	r3, #0
 801939e:	d10a      	bne.n	80193b6 <xQueueReceive+0x8e>
	__asm volatile
 80193a0:	f04f 0320 	mov.w	r3, #32
 80193a4:	f383 8811 	msr	BASEPRI, r3
 80193a8:	f3bf 8f6f 	isb	sy
 80193ac:	f3bf 8f4f 	dsb	sy
 80193b0:	61bb      	str	r3, [r7, #24]
}
 80193b2:	bf00      	nop
 80193b4:	e7fe      	b.n	80193b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80193b6:	f002 f92d 	bl	801b614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80193ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80193be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80193c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d01f      	beq.n	8019406 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80193c6:	68b9      	ldr	r1, [r7, #8]
 80193c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193ca:	f000 fa9b 	bl	8019904 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80193ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193d0:	1e5a      	subs	r2, r3, #1
 80193d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80193d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193d8:	691b      	ldr	r3, [r3, #16]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d00f      	beq.n	80193fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80193de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e0:	3310      	adds	r3, #16
 80193e2:	4618      	mov	r0, r3
 80193e4:	f001 f902 	bl	801a5ec <xTaskRemoveFromEventList>
 80193e8:	4603      	mov	r3, r0
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d007      	beq.n	80193fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80193ee:	4b3d      	ldr	r3, [pc, #244]	; (80194e4 <xQueueReceive+0x1bc>)
 80193f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193f4:	601a      	str	r2, [r3, #0]
 80193f6:	f3bf 8f4f 	dsb	sy
 80193fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80193fe:	f002 f939 	bl	801b674 <vPortExitCritical>
				return pdPASS;
 8019402:	2301      	movs	r3, #1
 8019404:	e069      	b.n	80194da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	2b00      	cmp	r3, #0
 801940a:	d103      	bne.n	8019414 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801940c:	f002 f932 	bl	801b674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019410:	2300      	movs	r3, #0
 8019412:	e062      	b.n	80194da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019416:	2b00      	cmp	r3, #0
 8019418:	d106      	bne.n	8019428 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801941a:	f107 0310 	add.w	r3, r7, #16
 801941e:	4618      	mov	r0, r3
 8019420:	f001 f946 	bl	801a6b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019424:	2301      	movs	r3, #1
 8019426:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019428:	f002 f924 	bl	801b674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801942c:	f000 fe9a 	bl	801a164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019430:	f002 f8f0 	bl	801b614 <vPortEnterCritical>
 8019434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801943a:	b25b      	sxtb	r3, r3
 801943c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019440:	d103      	bne.n	801944a <xQueueReceive+0x122>
 8019442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019444:	2200      	movs	r2, #0
 8019446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801944c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019450:	b25b      	sxtb	r3, r3
 8019452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019456:	d103      	bne.n	8019460 <xQueueReceive+0x138>
 8019458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801945a:	2200      	movs	r2, #0
 801945c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019460:	f002 f908 	bl	801b674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019464:	1d3a      	adds	r2, r7, #4
 8019466:	f107 0310 	add.w	r3, r7, #16
 801946a:	4611      	mov	r1, r2
 801946c:	4618      	mov	r0, r3
 801946e:	f001 f935 	bl	801a6dc <xTaskCheckForTimeOut>
 8019472:	4603      	mov	r3, r0
 8019474:	2b00      	cmp	r3, #0
 8019476:	d123      	bne.n	80194c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801947a:	f000 fabb 	bl	80199f4 <prvIsQueueEmpty>
 801947e:	4603      	mov	r3, r0
 8019480:	2b00      	cmp	r3, #0
 8019482:	d017      	beq.n	80194b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019486:	3324      	adds	r3, #36	; 0x24
 8019488:	687a      	ldr	r2, [r7, #4]
 801948a:	4611      	mov	r1, r2
 801948c:	4618      	mov	r0, r3
 801948e:	f001 f85d 	bl	801a54c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019494:	f000 fa5c 	bl	8019950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019498:	f000 fe72 	bl	801a180 <xTaskResumeAll>
 801949c:	4603      	mov	r3, r0
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d189      	bne.n	80193b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80194a2:	4b10      	ldr	r3, [pc, #64]	; (80194e4 <xQueueReceive+0x1bc>)
 80194a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80194a8:	601a      	str	r2, [r3, #0]
 80194aa:	f3bf 8f4f 	dsb	sy
 80194ae:	f3bf 8f6f 	isb	sy
 80194b2:	e780      	b.n	80193b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80194b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194b6:	f000 fa4b 	bl	8019950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80194ba:	f000 fe61 	bl	801a180 <xTaskResumeAll>
 80194be:	e77a      	b.n	80193b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80194c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194c2:	f000 fa45 	bl	8019950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80194c6:	f000 fe5b 	bl	801a180 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80194ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194cc:	f000 fa92 	bl	80199f4 <prvIsQueueEmpty>
 80194d0:	4603      	mov	r3, r0
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	f43f af6f 	beq.w	80193b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80194d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80194da:	4618      	mov	r0, r3
 80194dc:	3730      	adds	r7, #48	; 0x30
 80194de:	46bd      	mov	sp, r7
 80194e0:	bd80      	pop	{r7, pc}
 80194e2:	bf00      	nop
 80194e4:	e000ed04 	.word	0xe000ed04

080194e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b08e      	sub	sp, #56	; 0x38
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
 80194f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80194f2:	2300      	movs	r3, #0
 80194f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80194fa:	2300      	movs	r3, #0
 80194fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80194fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019500:	2b00      	cmp	r3, #0
 8019502:	d10a      	bne.n	801951a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8019504:	f04f 0320 	mov.w	r3, #32
 8019508:	f383 8811 	msr	BASEPRI, r3
 801950c:	f3bf 8f6f 	isb	sy
 8019510:	f3bf 8f4f 	dsb	sy
 8019514:	623b      	str	r3, [r7, #32]
}
 8019516:	bf00      	nop
 8019518:	e7fe      	b.n	8019518 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801951c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801951e:	2b00      	cmp	r3, #0
 8019520:	d00a      	beq.n	8019538 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8019522:	f04f 0320 	mov.w	r3, #32
 8019526:	f383 8811 	msr	BASEPRI, r3
 801952a:	f3bf 8f6f 	isb	sy
 801952e:	f3bf 8f4f 	dsb	sy
 8019532:	61fb      	str	r3, [r7, #28]
}
 8019534:	bf00      	nop
 8019536:	e7fe      	b.n	8019536 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019538:	f001 f9f6 	bl	801a928 <xTaskGetSchedulerState>
 801953c:	4603      	mov	r3, r0
 801953e:	2b00      	cmp	r3, #0
 8019540:	d102      	bne.n	8019548 <xQueueSemaphoreTake+0x60>
 8019542:	683b      	ldr	r3, [r7, #0]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d101      	bne.n	801954c <xQueueSemaphoreTake+0x64>
 8019548:	2301      	movs	r3, #1
 801954a:	e000      	b.n	801954e <xQueueSemaphoreTake+0x66>
 801954c:	2300      	movs	r3, #0
 801954e:	2b00      	cmp	r3, #0
 8019550:	d10a      	bne.n	8019568 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8019552:	f04f 0320 	mov.w	r3, #32
 8019556:	f383 8811 	msr	BASEPRI, r3
 801955a:	f3bf 8f6f 	isb	sy
 801955e:	f3bf 8f4f 	dsb	sy
 8019562:	61bb      	str	r3, [r7, #24]
}
 8019564:	bf00      	nop
 8019566:	e7fe      	b.n	8019566 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019568:	f002 f854 	bl	801b614 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801956e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019570:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019574:	2b00      	cmp	r3, #0
 8019576:	d024      	beq.n	80195c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801957a:	1e5a      	subs	r2, r3, #1
 801957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801957e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d104      	bne.n	8019592 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8019588:	f001 fb8c 	bl	801aca4 <pvTaskIncrementMutexHeldCount>
 801958c:	4602      	mov	r2, r0
 801958e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019590:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019594:	691b      	ldr	r3, [r3, #16]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d00f      	beq.n	80195ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801959c:	3310      	adds	r3, #16
 801959e:	4618      	mov	r0, r3
 80195a0:	f001 f824 	bl	801a5ec <xTaskRemoveFromEventList>
 80195a4:	4603      	mov	r3, r0
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d007      	beq.n	80195ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80195aa:	4b54      	ldr	r3, [pc, #336]	; (80196fc <xQueueSemaphoreTake+0x214>)
 80195ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80195b0:	601a      	str	r2, [r3, #0]
 80195b2:	f3bf 8f4f 	dsb	sy
 80195b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80195ba:	f002 f85b 	bl	801b674 <vPortExitCritical>
				return pdPASS;
 80195be:	2301      	movs	r3, #1
 80195c0:	e097      	b.n	80196f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80195c2:	683b      	ldr	r3, [r7, #0]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d111      	bne.n	80195ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80195c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d00a      	beq.n	80195e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80195ce:	f04f 0320 	mov.w	r3, #32
 80195d2:	f383 8811 	msr	BASEPRI, r3
 80195d6:	f3bf 8f6f 	isb	sy
 80195da:	f3bf 8f4f 	dsb	sy
 80195de:	617b      	str	r3, [r7, #20]
}
 80195e0:	bf00      	nop
 80195e2:	e7fe      	b.n	80195e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80195e4:	f002 f846 	bl	801b674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80195e8:	2300      	movs	r3, #0
 80195ea:	e082      	b.n	80196f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80195ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d106      	bne.n	8019600 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80195f2:	f107 030c 	add.w	r3, r7, #12
 80195f6:	4618      	mov	r0, r3
 80195f8:	f001 f85a 	bl	801a6b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80195fc:	2301      	movs	r3, #1
 80195fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019600:	f002 f838 	bl	801b674 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019604:	f000 fdae 	bl	801a164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019608:	f002 f804 	bl	801b614 <vPortEnterCritical>
 801960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801960e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019612:	b25b      	sxtb	r3, r3
 8019614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019618:	d103      	bne.n	8019622 <xQueueSemaphoreTake+0x13a>
 801961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801961c:	2200      	movs	r2, #0
 801961e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019628:	b25b      	sxtb	r3, r3
 801962a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801962e:	d103      	bne.n	8019638 <xQueueSemaphoreTake+0x150>
 8019630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019632:	2200      	movs	r2, #0
 8019634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019638:	f002 f81c 	bl	801b674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801963c:	463a      	mov	r2, r7
 801963e:	f107 030c 	add.w	r3, r7, #12
 8019642:	4611      	mov	r1, r2
 8019644:	4618      	mov	r0, r3
 8019646:	f001 f849 	bl	801a6dc <xTaskCheckForTimeOut>
 801964a:	4603      	mov	r3, r0
 801964c:	2b00      	cmp	r3, #0
 801964e:	d132      	bne.n	80196b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019652:	f000 f9cf 	bl	80199f4 <prvIsQueueEmpty>
 8019656:	4603      	mov	r3, r0
 8019658:	2b00      	cmp	r3, #0
 801965a:	d026      	beq.n	80196aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d109      	bne.n	8019678 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8019664:	f001 ffd6 	bl	801b614 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801966a:	689b      	ldr	r3, [r3, #8]
 801966c:	4618      	mov	r0, r3
 801966e:	f001 f979 	bl	801a964 <xTaskPriorityInherit>
 8019672:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8019674:	f001 fffe 	bl	801b674 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801967a:	3324      	adds	r3, #36	; 0x24
 801967c:	683a      	ldr	r2, [r7, #0]
 801967e:	4611      	mov	r1, r2
 8019680:	4618      	mov	r0, r3
 8019682:	f000 ff63 	bl	801a54c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019688:	f000 f962 	bl	8019950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801968c:	f000 fd78 	bl	801a180 <xTaskResumeAll>
 8019690:	4603      	mov	r3, r0
 8019692:	2b00      	cmp	r3, #0
 8019694:	f47f af68 	bne.w	8019568 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8019698:	4b18      	ldr	r3, [pc, #96]	; (80196fc <xQueueSemaphoreTake+0x214>)
 801969a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801969e:	601a      	str	r2, [r3, #0]
 80196a0:	f3bf 8f4f 	dsb	sy
 80196a4:	f3bf 8f6f 	isb	sy
 80196a8:	e75e      	b.n	8019568 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80196aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196ac:	f000 f950 	bl	8019950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80196b0:	f000 fd66 	bl	801a180 <xTaskResumeAll>
 80196b4:	e758      	b.n	8019568 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80196b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196b8:	f000 f94a 	bl	8019950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80196bc:	f000 fd60 	bl	801a180 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80196c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196c2:	f000 f997 	bl	80199f4 <prvIsQueueEmpty>
 80196c6:	4603      	mov	r3, r0
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	f43f af4d 	beq.w	8019568 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80196ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d00d      	beq.n	80196f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80196d4:	f001 ff9e 	bl	801b614 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80196d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196da:	f000 f891 	bl	8019800 <prvGetDisinheritPriorityAfterTimeout>
 80196de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80196e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196e2:	689b      	ldr	r3, [r3, #8]
 80196e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80196e6:	4618      	mov	r0, r3
 80196e8:	f001 fa42 	bl	801ab70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80196ec:	f001 ffc2 	bl	801b674 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80196f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80196f2:	4618      	mov	r0, r3
 80196f4:	3738      	adds	r7, #56	; 0x38
 80196f6:	46bd      	mov	sp, r7
 80196f8:	bd80      	pop	{r7, pc}
 80196fa:	bf00      	nop
 80196fc:	e000ed04 	.word	0xe000ed04

08019700 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b08e      	sub	sp, #56	; 0x38
 8019704:	af00      	add	r7, sp, #0
 8019706:	60f8      	str	r0, [r7, #12]
 8019708:	60b9      	str	r1, [r7, #8]
 801970a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019712:	2b00      	cmp	r3, #0
 8019714:	d10a      	bne.n	801972c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8019716:	f04f 0320 	mov.w	r3, #32
 801971a:	f383 8811 	msr	BASEPRI, r3
 801971e:	f3bf 8f6f 	isb	sy
 8019722:	f3bf 8f4f 	dsb	sy
 8019726:	623b      	str	r3, [r7, #32]
}
 8019728:	bf00      	nop
 801972a:	e7fe      	b.n	801972a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801972c:	68bb      	ldr	r3, [r7, #8]
 801972e:	2b00      	cmp	r3, #0
 8019730:	d103      	bne.n	801973a <xQueueReceiveFromISR+0x3a>
 8019732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019736:	2b00      	cmp	r3, #0
 8019738:	d101      	bne.n	801973e <xQueueReceiveFromISR+0x3e>
 801973a:	2301      	movs	r3, #1
 801973c:	e000      	b.n	8019740 <xQueueReceiveFromISR+0x40>
 801973e:	2300      	movs	r3, #0
 8019740:	2b00      	cmp	r3, #0
 8019742:	d10a      	bne.n	801975a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8019744:	f04f 0320 	mov.w	r3, #32
 8019748:	f383 8811 	msr	BASEPRI, r3
 801974c:	f3bf 8f6f 	isb	sy
 8019750:	f3bf 8f4f 	dsb	sy
 8019754:	61fb      	str	r3, [r7, #28]
}
 8019756:	bf00      	nop
 8019758:	e7fe      	b.n	8019758 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801975a:	f002 f83d 	bl	801b7d8 <vPortValidateInterruptPriority>
	__asm volatile
 801975e:	f3ef 8211 	mrs	r2, BASEPRI
 8019762:	f04f 0320 	mov.w	r3, #32
 8019766:	f383 8811 	msr	BASEPRI, r3
 801976a:	f3bf 8f6f 	isb	sy
 801976e:	f3bf 8f4f 	dsb	sy
 8019772:	61ba      	str	r2, [r7, #24]
 8019774:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8019776:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019778:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801977c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801977e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019782:	2b00      	cmp	r3, #0
 8019784:	d02f      	beq.n	80197e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8019786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801978c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019790:	68b9      	ldr	r1, [r7, #8]
 8019792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019794:	f000 f8b6 	bl	8019904 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801979a:	1e5a      	subs	r2, r3, #1
 801979c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801979e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80197a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80197a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197a8:	d112      	bne.n	80197d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80197aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197ac:	691b      	ldr	r3, [r3, #16]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d016      	beq.n	80197e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80197b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197b4:	3310      	adds	r3, #16
 80197b6:	4618      	mov	r0, r3
 80197b8:	f000 ff18 	bl	801a5ec <xTaskRemoveFromEventList>
 80197bc:	4603      	mov	r3, r0
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d00e      	beq.n	80197e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d00b      	beq.n	80197e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	2201      	movs	r2, #1
 80197cc:	601a      	str	r2, [r3, #0]
 80197ce:	e007      	b.n	80197e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80197d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197d4:	3301      	adds	r3, #1
 80197d6:	b2db      	uxtb	r3, r3
 80197d8:	b25a      	sxtb	r2, r3
 80197da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80197e0:	2301      	movs	r3, #1
 80197e2:	637b      	str	r3, [r7, #52]	; 0x34
 80197e4:	e001      	b.n	80197ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80197e6:	2300      	movs	r3, #0
 80197e8:	637b      	str	r3, [r7, #52]	; 0x34
 80197ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80197ee:	693b      	ldr	r3, [r7, #16]
 80197f0:	f383 8811 	msr	BASEPRI, r3
}
 80197f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80197f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80197f8:	4618      	mov	r0, r3
 80197fa:	3738      	adds	r7, #56	; 0x38
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bd80      	pop	{r7, pc}

08019800 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8019800:	b480      	push	{r7}
 8019802:	b085      	sub	sp, #20
 8019804:	af00      	add	r7, sp, #0
 8019806:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801980c:	2b00      	cmp	r3, #0
 801980e:	d006      	beq.n	801981e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	f1c3 0307 	rsb	r3, r3, #7
 801981a:	60fb      	str	r3, [r7, #12]
 801981c:	e001      	b.n	8019822 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801981e:	2300      	movs	r3, #0
 8019820:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8019822:	68fb      	ldr	r3, [r7, #12]
	}
 8019824:	4618      	mov	r0, r3
 8019826:	3714      	adds	r7, #20
 8019828:	46bd      	mov	sp, r7
 801982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801982e:	4770      	bx	lr

08019830 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b086      	sub	sp, #24
 8019834:	af00      	add	r7, sp, #0
 8019836:	60f8      	str	r0, [r7, #12]
 8019838:	60b9      	str	r1, [r7, #8]
 801983a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801983c:	2300      	movs	r3, #0
 801983e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019844:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801984a:	2b00      	cmp	r3, #0
 801984c:	d10d      	bne.n	801986a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d14d      	bne.n	80198f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	689b      	ldr	r3, [r3, #8]
 801985a:	4618      	mov	r0, r3
 801985c:	f001 f902 	bl	801aa64 <xTaskPriorityDisinherit>
 8019860:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	2200      	movs	r2, #0
 8019866:	609a      	str	r2, [r3, #8]
 8019868:	e043      	b.n	80198f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	2b00      	cmp	r3, #0
 801986e:	d119      	bne.n	80198a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	6858      	ldr	r0, [r3, #4]
 8019874:	68fb      	ldr	r3, [r7, #12]
 8019876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019878:	461a      	mov	r2, r3
 801987a:	68b9      	ldr	r1, [r7, #8]
 801987c:	f005 fd42 	bl	801f304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	685a      	ldr	r2, [r3, #4]
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019888:	441a      	add	r2, r3
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	685a      	ldr	r2, [r3, #4]
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	689b      	ldr	r3, [r3, #8]
 8019896:	429a      	cmp	r2, r3
 8019898:	d32b      	bcc.n	80198f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	681a      	ldr	r2, [r3, #0]
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	605a      	str	r2, [r3, #4]
 80198a2:	e026      	b.n	80198f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	68d8      	ldr	r0, [r3, #12]
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198ac:	461a      	mov	r2, r3
 80198ae:	68b9      	ldr	r1, [r7, #8]
 80198b0:	f005 fd28 	bl	801f304 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	68da      	ldr	r2, [r3, #12]
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198bc:	425b      	negs	r3, r3
 80198be:	441a      	add	r2, r3
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	68da      	ldr	r2, [r3, #12]
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	429a      	cmp	r2, r3
 80198ce:	d207      	bcs.n	80198e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	689a      	ldr	r2, [r3, #8]
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198d8:	425b      	negs	r3, r3
 80198da:	441a      	add	r2, r3
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	2b02      	cmp	r3, #2
 80198e4:	d105      	bne.n	80198f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80198e6:	693b      	ldr	r3, [r7, #16]
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d002      	beq.n	80198f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80198ec:	693b      	ldr	r3, [r7, #16]
 80198ee:	3b01      	subs	r3, #1
 80198f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80198f2:	693b      	ldr	r3, [r7, #16]
 80198f4:	1c5a      	adds	r2, r3, #1
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80198fa:	697b      	ldr	r3, [r7, #20]
}
 80198fc:	4618      	mov	r0, r3
 80198fe:	3718      	adds	r7, #24
 8019900:	46bd      	mov	sp, r7
 8019902:	bd80      	pop	{r7, pc}

08019904 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b082      	sub	sp, #8
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
 801990c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019912:	2b00      	cmp	r3, #0
 8019914:	d018      	beq.n	8019948 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	68da      	ldr	r2, [r3, #12]
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801991e:	441a      	add	r2, r3
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	68da      	ldr	r2, [r3, #12]
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	689b      	ldr	r3, [r3, #8]
 801992c:	429a      	cmp	r2, r3
 801992e:	d303      	bcc.n	8019938 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	681a      	ldr	r2, [r3, #0]
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	68d9      	ldr	r1, [r3, #12]
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019940:	461a      	mov	r2, r3
 8019942:	6838      	ldr	r0, [r7, #0]
 8019944:	f005 fcde 	bl	801f304 <memcpy>
	}
}
 8019948:	bf00      	nop
 801994a:	3708      	adds	r7, #8
 801994c:	46bd      	mov	sp, r7
 801994e:	bd80      	pop	{r7, pc}

08019950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b084      	sub	sp, #16
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019958:	f001 fe5c 	bl	801b614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019962:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019964:	e011      	b.n	801998a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801996a:	2b00      	cmp	r3, #0
 801996c:	d012      	beq.n	8019994 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	3324      	adds	r3, #36	; 0x24
 8019972:	4618      	mov	r0, r3
 8019974:	f000 fe3a 	bl	801a5ec <xTaskRemoveFromEventList>
 8019978:	4603      	mov	r3, r0
 801997a:	2b00      	cmp	r3, #0
 801997c:	d001      	beq.n	8019982 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801997e:	f000 ff0f 	bl	801a7a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019982:	7bfb      	ldrb	r3, [r7, #15]
 8019984:	3b01      	subs	r3, #1
 8019986:	b2db      	uxtb	r3, r3
 8019988:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801998a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801998e:	2b00      	cmp	r3, #0
 8019990:	dce9      	bgt.n	8019966 <prvUnlockQueue+0x16>
 8019992:	e000      	b.n	8019996 <prvUnlockQueue+0x46>
					break;
 8019994:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	22ff      	movs	r2, #255	; 0xff
 801999a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801999e:	f001 fe69 	bl	801b674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80199a2:	f001 fe37 	bl	801b614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80199ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80199ae:	e011      	b.n	80199d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	691b      	ldr	r3, [r3, #16]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d012      	beq.n	80199de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	3310      	adds	r3, #16
 80199bc:	4618      	mov	r0, r3
 80199be:	f000 fe15 	bl	801a5ec <xTaskRemoveFromEventList>
 80199c2:	4603      	mov	r3, r0
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d001      	beq.n	80199cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80199c8:	f000 feea 	bl	801a7a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80199cc:	7bbb      	ldrb	r3, [r7, #14]
 80199ce:	3b01      	subs	r3, #1
 80199d0:	b2db      	uxtb	r3, r3
 80199d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80199d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	dce9      	bgt.n	80199b0 <prvUnlockQueue+0x60>
 80199dc:	e000      	b.n	80199e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80199de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	22ff      	movs	r2, #255	; 0xff
 80199e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80199e8:	f001 fe44 	bl	801b674 <vPortExitCritical>
}
 80199ec:	bf00      	nop
 80199ee:	3710      	adds	r7, #16
 80199f0:	46bd      	mov	sp, r7
 80199f2:	bd80      	pop	{r7, pc}

080199f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80199f4:	b580      	push	{r7, lr}
 80199f6:	b084      	sub	sp, #16
 80199f8:	af00      	add	r7, sp, #0
 80199fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80199fc:	f001 fe0a 	bl	801b614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d102      	bne.n	8019a0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019a08:	2301      	movs	r3, #1
 8019a0a:	60fb      	str	r3, [r7, #12]
 8019a0c:	e001      	b.n	8019a12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8019a0e:	2300      	movs	r3, #0
 8019a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019a12:	f001 fe2f 	bl	801b674 <vPortExitCritical>

	return xReturn;
 8019a16:	68fb      	ldr	r3, [r7, #12]
}
 8019a18:	4618      	mov	r0, r3
 8019a1a:	3710      	adds	r7, #16
 8019a1c:	46bd      	mov	sp, r7
 8019a1e:	bd80      	pop	{r7, pc}

08019a20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b084      	sub	sp, #16
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019a28:	f001 fdf4 	bl	801b614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a34:	429a      	cmp	r2, r3
 8019a36:	d102      	bne.n	8019a3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019a38:	2301      	movs	r3, #1
 8019a3a:	60fb      	str	r3, [r7, #12]
 8019a3c:	e001      	b.n	8019a42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8019a3e:	2300      	movs	r3, #0
 8019a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019a42:	f001 fe17 	bl	801b674 <vPortExitCritical>

	return xReturn;
 8019a46:	68fb      	ldr	r3, [r7, #12]
}
 8019a48:	4618      	mov	r0, r3
 8019a4a:	3710      	adds	r7, #16
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}

08019a50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8019a50:	b480      	push	{r7}
 8019a52:	b085      	sub	sp, #20
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	6078      	str	r0, [r7, #4]
 8019a58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019a5a:	2300      	movs	r3, #0
 8019a5c:	60fb      	str	r3, [r7, #12]
 8019a5e:	e014      	b.n	8019a8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8019a60:	4a0f      	ldr	r2, [pc, #60]	; (8019aa0 <vQueueAddToRegistry+0x50>)
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d10b      	bne.n	8019a84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8019a6c:	490c      	ldr	r1, [pc, #48]	; (8019aa0 <vQueueAddToRegistry+0x50>)
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	683a      	ldr	r2, [r7, #0]
 8019a72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019a76:	4a0a      	ldr	r2, [pc, #40]	; (8019aa0 <vQueueAddToRegistry+0x50>)
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	00db      	lsls	r3, r3, #3
 8019a7c:	4413      	add	r3, r2
 8019a7e:	687a      	ldr	r2, [r7, #4]
 8019a80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019a82:	e006      	b.n	8019a92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	3301      	adds	r3, #1
 8019a88:	60fb      	str	r3, [r7, #12]
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	2b63      	cmp	r3, #99	; 0x63
 8019a8e:	d9e7      	bls.n	8019a60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019a90:	bf00      	nop
 8019a92:	bf00      	nop
 8019a94:	3714      	adds	r7, #20
 8019a96:	46bd      	mov	sp, r7
 8019a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9c:	4770      	bx	lr
 8019a9e:	bf00      	nop
 8019aa0:	2001d140 	.word	0x2001d140

08019aa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b086      	sub	sp, #24
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	60f8      	str	r0, [r7, #12]
 8019aac:	60b9      	str	r1, [r7, #8]
 8019aae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019ab4:	f001 fdae 	bl	801b614 <vPortEnterCritical>
 8019ab8:	697b      	ldr	r3, [r7, #20]
 8019aba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019abe:	b25b      	sxtb	r3, r3
 8019ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ac4:	d103      	bne.n	8019ace <vQueueWaitForMessageRestricted+0x2a>
 8019ac6:	697b      	ldr	r3, [r7, #20]
 8019ac8:	2200      	movs	r2, #0
 8019aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019ace:	697b      	ldr	r3, [r7, #20]
 8019ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019ad4:	b25b      	sxtb	r3, r3
 8019ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ada:	d103      	bne.n	8019ae4 <vQueueWaitForMessageRestricted+0x40>
 8019adc:	697b      	ldr	r3, [r7, #20]
 8019ade:	2200      	movs	r2, #0
 8019ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019ae4:	f001 fdc6 	bl	801b674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019ae8:	697b      	ldr	r3, [r7, #20]
 8019aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d106      	bne.n	8019afe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8019af0:	697b      	ldr	r3, [r7, #20]
 8019af2:	3324      	adds	r3, #36	; 0x24
 8019af4:	687a      	ldr	r2, [r7, #4]
 8019af6:	68b9      	ldr	r1, [r7, #8]
 8019af8:	4618      	mov	r0, r3
 8019afa:	f000 fd4b 	bl	801a594 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8019afe:	6978      	ldr	r0, [r7, #20]
 8019b00:	f7ff ff26 	bl	8019950 <prvUnlockQueue>
	}
 8019b04:	bf00      	nop
 8019b06:	3718      	adds	r7, #24
 8019b08:	46bd      	mov	sp, r7
 8019b0a:	bd80      	pop	{r7, pc}

08019b0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019b0c:	b580      	push	{r7, lr}
 8019b0e:	b08c      	sub	sp, #48	; 0x30
 8019b10:	af04      	add	r7, sp, #16
 8019b12:	60f8      	str	r0, [r7, #12]
 8019b14:	60b9      	str	r1, [r7, #8]
 8019b16:	603b      	str	r3, [r7, #0]
 8019b18:	4613      	mov	r3, r2
 8019b1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019b1c:	88fb      	ldrh	r3, [r7, #6]
 8019b1e:	009b      	lsls	r3, r3, #2
 8019b20:	4618      	mov	r0, r3
 8019b22:	f001 fe99 	bl	801b858 <pvPortMalloc>
 8019b26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019b28:	697b      	ldr	r3, [r7, #20]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d00e      	beq.n	8019b4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019b2e:	2060      	movs	r0, #96	; 0x60
 8019b30:	f001 fe92 	bl	801b858 <pvPortMalloc>
 8019b34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019b36:	69fb      	ldr	r3, [r7, #28]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d003      	beq.n	8019b44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019b3c:	69fb      	ldr	r3, [r7, #28]
 8019b3e:	697a      	ldr	r2, [r7, #20]
 8019b40:	631a      	str	r2, [r3, #48]	; 0x30
 8019b42:	e005      	b.n	8019b50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019b44:	6978      	ldr	r0, [r7, #20]
 8019b46:	f001 ff4b 	bl	801b9e0 <vPortFree>
 8019b4a:	e001      	b.n	8019b50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019b50:	69fb      	ldr	r3, [r7, #28]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d013      	beq.n	8019b7e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019b56:	88fa      	ldrh	r2, [r7, #6]
 8019b58:	2300      	movs	r3, #0
 8019b5a:	9303      	str	r3, [sp, #12]
 8019b5c:	69fb      	ldr	r3, [r7, #28]
 8019b5e:	9302      	str	r3, [sp, #8]
 8019b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b62:	9301      	str	r3, [sp, #4]
 8019b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b66:	9300      	str	r3, [sp, #0]
 8019b68:	683b      	ldr	r3, [r7, #0]
 8019b6a:	68b9      	ldr	r1, [r7, #8]
 8019b6c:	68f8      	ldr	r0, [r7, #12]
 8019b6e:	f000 f80e 	bl	8019b8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019b72:	69f8      	ldr	r0, [r7, #28]
 8019b74:	f000 f89e 	bl	8019cb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019b78:	2301      	movs	r3, #1
 8019b7a:	61bb      	str	r3, [r7, #24]
 8019b7c:	e002      	b.n	8019b84 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8019b82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019b84:	69bb      	ldr	r3, [r7, #24]
	}
 8019b86:	4618      	mov	r0, r3
 8019b88:	3720      	adds	r7, #32
 8019b8a:	46bd      	mov	sp, r7
 8019b8c:	bd80      	pop	{r7, pc}

08019b8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019b8e:	b580      	push	{r7, lr}
 8019b90:	b088      	sub	sp, #32
 8019b92:	af00      	add	r7, sp, #0
 8019b94:	60f8      	str	r0, [r7, #12]
 8019b96:	60b9      	str	r1, [r7, #8]
 8019b98:	607a      	str	r2, [r7, #4]
 8019b9a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	009b      	lsls	r3, r3, #2
 8019ba4:	461a      	mov	r2, r3
 8019ba6:	21a5      	movs	r1, #165	; 0xa5
 8019ba8:	f005 fbd4 	bl	801f354 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019bb6:	3b01      	subs	r3, #1
 8019bb8:	009b      	lsls	r3, r3, #2
 8019bba:	4413      	add	r3, r2
 8019bbc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019bbe:	69bb      	ldr	r3, [r7, #24]
 8019bc0:	f023 0307 	bic.w	r3, r3, #7
 8019bc4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019bc6:	69bb      	ldr	r3, [r7, #24]
 8019bc8:	f003 0307 	and.w	r3, r3, #7
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d00a      	beq.n	8019be6 <prvInitialiseNewTask+0x58>
	__asm volatile
 8019bd0:	f04f 0320 	mov.w	r3, #32
 8019bd4:	f383 8811 	msr	BASEPRI, r3
 8019bd8:	f3bf 8f6f 	isb	sy
 8019bdc:	f3bf 8f4f 	dsb	sy
 8019be0:	617b      	str	r3, [r7, #20]
}
 8019be2:	bf00      	nop
 8019be4:	e7fe      	b.n	8019be4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d01f      	beq.n	8019c2c <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019bec:	2300      	movs	r3, #0
 8019bee:	61fb      	str	r3, [r7, #28]
 8019bf0:	e012      	b.n	8019c18 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019bf2:	68ba      	ldr	r2, [r7, #8]
 8019bf4:	69fb      	ldr	r3, [r7, #28]
 8019bf6:	4413      	add	r3, r2
 8019bf8:	7819      	ldrb	r1, [r3, #0]
 8019bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019bfc:	69fb      	ldr	r3, [r7, #28]
 8019bfe:	4413      	add	r3, r2
 8019c00:	3334      	adds	r3, #52	; 0x34
 8019c02:	460a      	mov	r2, r1
 8019c04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019c06:	68ba      	ldr	r2, [r7, #8]
 8019c08:	69fb      	ldr	r3, [r7, #28]
 8019c0a:	4413      	add	r3, r2
 8019c0c:	781b      	ldrb	r3, [r3, #0]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d006      	beq.n	8019c20 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019c12:	69fb      	ldr	r3, [r7, #28]
 8019c14:	3301      	adds	r3, #1
 8019c16:	61fb      	str	r3, [r7, #28]
 8019c18:	69fb      	ldr	r3, [r7, #28]
 8019c1a:	2b0f      	cmp	r3, #15
 8019c1c:	d9e9      	bls.n	8019bf2 <prvInitialiseNewTask+0x64>
 8019c1e:	e000      	b.n	8019c22 <prvInitialiseNewTask+0x94>
			{
				break;
 8019c20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c24:	2200      	movs	r2, #0
 8019c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019c2a:	e003      	b.n	8019c34 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c2e:	2200      	movs	r2, #0
 8019c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c36:	2b06      	cmp	r3, #6
 8019c38:	d901      	bls.n	8019c3e <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019c3a:	2306      	movs	r3, #6
 8019c3c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c42:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c48:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c52:	3304      	adds	r3, #4
 8019c54:	4618      	mov	r0, r3
 8019c56:	f7fe ffb5 	bl	8018bc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c5c:	3318      	adds	r3, #24
 8019c5e:	4618      	mov	r0, r3
 8019c60:	f7fe ffb0 	bl	8018bc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c6c:	f1c3 0207 	rsb	r2, r3, #7
 8019c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c78:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8019c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c82:	2200      	movs	r2, #0
 8019c84:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c88:	2200      	movs	r2, #0
 8019c8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019c8e:	683a      	ldr	r2, [r7, #0]
 8019c90:	68f9      	ldr	r1, [r7, #12]
 8019c92:	69b8      	ldr	r0, [r7, #24]
 8019c94:	f001 fb92 	bl	801b3bc <pxPortInitialiseStack>
 8019c98:	4602      	mov	r2, r0
 8019c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d002      	beq.n	8019caa <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019ca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019caa:	bf00      	nop
 8019cac:	3720      	adds	r7, #32
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd80      	pop	{r7, pc}
	...

08019cb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	b082      	sub	sp, #8
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019cbc:	f001 fcaa 	bl	801b614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019cc0:	4b2c      	ldr	r3, [pc, #176]	; (8019d74 <prvAddNewTaskToReadyList+0xc0>)
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	3301      	adds	r3, #1
 8019cc6:	4a2b      	ldr	r2, [pc, #172]	; (8019d74 <prvAddNewTaskToReadyList+0xc0>)
 8019cc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019cca:	4b2b      	ldr	r3, [pc, #172]	; (8019d78 <prvAddNewTaskToReadyList+0xc4>)
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d109      	bne.n	8019ce6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019cd2:	4a29      	ldr	r2, [pc, #164]	; (8019d78 <prvAddNewTaskToReadyList+0xc4>)
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019cd8:	4b26      	ldr	r3, [pc, #152]	; (8019d74 <prvAddNewTaskToReadyList+0xc0>)
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	2b01      	cmp	r3, #1
 8019cde:	d110      	bne.n	8019d02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019ce0:	f000 fd84 	bl	801a7ec <prvInitialiseTaskLists>
 8019ce4:	e00d      	b.n	8019d02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019ce6:	4b25      	ldr	r3, [pc, #148]	; (8019d7c <prvAddNewTaskToReadyList+0xc8>)
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d109      	bne.n	8019d02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019cee:	4b22      	ldr	r3, [pc, #136]	; (8019d78 <prvAddNewTaskToReadyList+0xc4>)
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cf8:	429a      	cmp	r2, r3
 8019cfa:	d802      	bhi.n	8019d02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019cfc:	4a1e      	ldr	r2, [pc, #120]	; (8019d78 <prvAddNewTaskToReadyList+0xc4>)
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8019d02:	4b1f      	ldr	r3, [pc, #124]	; (8019d80 <prvAddNewTaskToReadyList+0xcc>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	3301      	adds	r3, #1
 8019d08:	4a1d      	ldr	r2, [pc, #116]	; (8019d80 <prvAddNewTaskToReadyList+0xcc>)
 8019d0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019d0c:	4b1c      	ldr	r3, [pc, #112]	; (8019d80 <prvAddNewTaskToReadyList+0xcc>)
 8019d0e:	681a      	ldr	r2, [r3, #0]
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d18:	2201      	movs	r2, #1
 8019d1a:	409a      	lsls	r2, r3
 8019d1c:	4b19      	ldr	r3, [pc, #100]	; (8019d84 <prvAddNewTaskToReadyList+0xd0>)
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	4313      	orrs	r3, r2
 8019d22:	4a18      	ldr	r2, [pc, #96]	; (8019d84 <prvAddNewTaskToReadyList+0xd0>)
 8019d24:	6013      	str	r3, [r2, #0]
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d2a:	4613      	mov	r3, r2
 8019d2c:	009b      	lsls	r3, r3, #2
 8019d2e:	4413      	add	r3, r2
 8019d30:	009b      	lsls	r3, r3, #2
 8019d32:	4a15      	ldr	r2, [pc, #84]	; (8019d88 <prvAddNewTaskToReadyList+0xd4>)
 8019d34:	441a      	add	r2, r3
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	3304      	adds	r3, #4
 8019d3a:	4619      	mov	r1, r3
 8019d3c:	4610      	mov	r0, r2
 8019d3e:	f7fe ff4e 	bl	8018bde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019d42:	f001 fc97 	bl	801b674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019d46:	4b0d      	ldr	r3, [pc, #52]	; (8019d7c <prvAddNewTaskToReadyList+0xc8>)
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d00e      	beq.n	8019d6c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019d4e:	4b0a      	ldr	r3, [pc, #40]	; (8019d78 <prvAddNewTaskToReadyList+0xc4>)
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d58:	429a      	cmp	r2, r3
 8019d5a:	d207      	bcs.n	8019d6c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019d5c:	4b0b      	ldr	r3, [pc, #44]	; (8019d8c <prvAddNewTaskToReadyList+0xd8>)
 8019d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d62:	601a      	str	r2, [r3, #0]
 8019d64:	f3bf 8f4f 	dsb	sy
 8019d68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019d6c:	bf00      	nop
 8019d6e:	3708      	adds	r7, #8
 8019d70:	46bd      	mov	sp, r7
 8019d72:	bd80      	pop	{r7, pc}
 8019d74:	200011c8 	.word	0x200011c8
 8019d78:	200010c8 	.word	0x200010c8
 8019d7c:	200011d4 	.word	0x200011d4
 8019d80:	200011e4 	.word	0x200011e4
 8019d84:	200011d0 	.word	0x200011d0
 8019d88:	200010cc 	.word	0x200010cc
 8019d8c:	e000ed04 	.word	0xe000ed04

08019d90 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b084      	sub	sp, #16
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8019d98:	f001 fc3c 	bl	801b614 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d102      	bne.n	8019da8 <vTaskSuspend+0x18>
 8019da2:	4b3c      	ldr	r3, [pc, #240]	; (8019e94 <vTaskSuspend+0x104>)
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	e000      	b.n	8019daa <vTaskSuspend+0x1a>
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	3304      	adds	r3, #4
 8019db0:	4618      	mov	r0, r3
 8019db2:	f7fe ff71 	bl	8018c98 <uxListRemove>
 8019db6:	4603      	mov	r3, r0
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d115      	bne.n	8019de8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019dc0:	4935      	ldr	r1, [pc, #212]	; (8019e98 <vTaskSuspend+0x108>)
 8019dc2:	4613      	mov	r3, r2
 8019dc4:	009b      	lsls	r3, r3, #2
 8019dc6:	4413      	add	r3, r2
 8019dc8:	009b      	lsls	r3, r3, #2
 8019dca:	440b      	add	r3, r1
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d10a      	bne.n	8019de8 <vTaskSuspend+0x58>
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019dd6:	2201      	movs	r2, #1
 8019dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8019ddc:	43da      	mvns	r2, r3
 8019dde:	4b2f      	ldr	r3, [pc, #188]	; (8019e9c <vTaskSuspend+0x10c>)
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	4013      	ands	r3, r2
 8019de4:	4a2d      	ldr	r2, [pc, #180]	; (8019e9c <vTaskSuspend+0x10c>)
 8019de6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d004      	beq.n	8019dfa <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	3318      	adds	r3, #24
 8019df4:	4618      	mov	r0, r3
 8019df6:	f7fe ff4f 	bl	8018c98 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	3304      	adds	r3, #4
 8019dfe:	4619      	mov	r1, r3
 8019e00:	4827      	ldr	r0, [pc, #156]	; (8019ea0 <vTaskSuspend+0x110>)
 8019e02:	f7fe feec 	bl	8018bde <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8019e0c:	b2db      	uxtb	r3, r3
 8019e0e:	2b01      	cmp	r3, #1
 8019e10:	d103      	bne.n	8019e1a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	2200      	movs	r2, #0
 8019e16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8019e1a:	f001 fc2b 	bl	801b674 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8019e1e:	4b21      	ldr	r3, [pc, #132]	; (8019ea4 <vTaskSuspend+0x114>)
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d005      	beq.n	8019e32 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8019e26:	f001 fbf5 	bl	801b614 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8019e2a:	f000 fd5d 	bl	801a8e8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8019e2e:	f001 fc21 	bl	801b674 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8019e32:	4b18      	ldr	r3, [pc, #96]	; (8019e94 <vTaskSuspend+0x104>)
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	68fa      	ldr	r2, [r7, #12]
 8019e38:	429a      	cmp	r2, r3
 8019e3a:	d127      	bne.n	8019e8c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8019e3c:	4b19      	ldr	r3, [pc, #100]	; (8019ea4 <vTaskSuspend+0x114>)
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d017      	beq.n	8019e74 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8019e44:	4b18      	ldr	r3, [pc, #96]	; (8019ea8 <vTaskSuspend+0x118>)
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d00a      	beq.n	8019e62 <vTaskSuspend+0xd2>
	__asm volatile
 8019e4c:	f04f 0320 	mov.w	r3, #32
 8019e50:	f383 8811 	msr	BASEPRI, r3
 8019e54:	f3bf 8f6f 	isb	sy
 8019e58:	f3bf 8f4f 	dsb	sy
 8019e5c:	60bb      	str	r3, [r7, #8]
}
 8019e5e:	bf00      	nop
 8019e60:	e7fe      	b.n	8019e60 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8019e62:	4b12      	ldr	r3, [pc, #72]	; (8019eac <vTaskSuspend+0x11c>)
 8019e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e68:	601a      	str	r2, [r3, #0]
 8019e6a:	f3bf 8f4f 	dsb	sy
 8019e6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019e72:	e00b      	b.n	8019e8c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8019e74:	4b0a      	ldr	r3, [pc, #40]	; (8019ea0 <vTaskSuspend+0x110>)
 8019e76:	681a      	ldr	r2, [r3, #0]
 8019e78:	4b0d      	ldr	r3, [pc, #52]	; (8019eb0 <vTaskSuspend+0x120>)
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	429a      	cmp	r2, r3
 8019e7e:	d103      	bne.n	8019e88 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8019e80:	4b04      	ldr	r3, [pc, #16]	; (8019e94 <vTaskSuspend+0x104>)
 8019e82:	2200      	movs	r2, #0
 8019e84:	601a      	str	r2, [r3, #0]
	}
 8019e86:	e001      	b.n	8019e8c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8019e88:	f000 fafa 	bl	801a480 <vTaskSwitchContext>
	}
 8019e8c:	bf00      	nop
 8019e8e:	3710      	adds	r7, #16
 8019e90:	46bd      	mov	sp, r7
 8019e92:	bd80      	pop	{r7, pc}
 8019e94:	200010c8 	.word	0x200010c8
 8019e98:	200010cc 	.word	0x200010cc
 8019e9c:	200011d0 	.word	0x200011d0
 8019ea0:	200011b4 	.word	0x200011b4
 8019ea4:	200011d4 	.word	0x200011d4
 8019ea8:	200011f0 	.word	0x200011f0
 8019eac:	e000ed04 	.word	0xe000ed04
 8019eb0:	200011c8 	.word	0x200011c8

08019eb4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8019eb4:	b480      	push	{r7}
 8019eb6:	b087      	sub	sp, #28
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8019ebc:	2300      	movs	r3, #0
 8019ebe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d10a      	bne.n	8019ee0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8019eca:	f04f 0320 	mov.w	r3, #32
 8019ece:	f383 8811 	msr	BASEPRI, r3
 8019ed2:	f3bf 8f6f 	isb	sy
 8019ed6:	f3bf 8f4f 	dsb	sy
 8019eda:	60fb      	str	r3, [r7, #12]
}
 8019edc:	bf00      	nop
 8019ede:	e7fe      	b.n	8019ede <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019ee0:	693b      	ldr	r3, [r7, #16]
 8019ee2:	695b      	ldr	r3, [r3, #20]
 8019ee4:	4a0a      	ldr	r2, [pc, #40]	; (8019f10 <prvTaskIsTaskSuspended+0x5c>)
 8019ee6:	4293      	cmp	r3, r2
 8019ee8:	d10a      	bne.n	8019f00 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8019eea:	693b      	ldr	r3, [r7, #16]
 8019eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019eee:	4a09      	ldr	r2, [pc, #36]	; (8019f14 <prvTaskIsTaskSuspended+0x60>)
 8019ef0:	4293      	cmp	r3, r2
 8019ef2:	d005      	beq.n	8019f00 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8019ef4:	693b      	ldr	r3, [r7, #16]
 8019ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d101      	bne.n	8019f00 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8019efc:	2301      	movs	r3, #1
 8019efe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019f00:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8019f02:	4618      	mov	r0, r3
 8019f04:	371c      	adds	r7, #28
 8019f06:	46bd      	mov	sp, r7
 8019f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f0c:	4770      	bx	lr
 8019f0e:	bf00      	nop
 8019f10:	200011b4 	.word	0x200011b4
 8019f14:	20001188 	.word	0x20001188

08019f18 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	b084      	sub	sp, #16
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d10a      	bne.n	8019f40 <vTaskResume+0x28>
	__asm volatile
 8019f2a:	f04f 0320 	mov.w	r3, #32
 8019f2e:	f383 8811 	msr	BASEPRI, r3
 8019f32:	f3bf 8f6f 	isb	sy
 8019f36:	f3bf 8f4f 	dsb	sy
 8019f3a:	60bb      	str	r3, [r7, #8]
}
 8019f3c:	bf00      	nop
 8019f3e:	e7fe      	b.n	8019f3e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8019f40:	4b20      	ldr	r3, [pc, #128]	; (8019fc4 <vTaskResume+0xac>)
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	68fa      	ldr	r2, [r7, #12]
 8019f46:	429a      	cmp	r2, r3
 8019f48:	d037      	beq.n	8019fba <vTaskResume+0xa2>
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d034      	beq.n	8019fba <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8019f50:	f001 fb60 	bl	801b614 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8019f54:	68f8      	ldr	r0, [r7, #12]
 8019f56:	f7ff ffad 	bl	8019eb4 <prvTaskIsTaskSuspended>
 8019f5a:	4603      	mov	r3, r0
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d02a      	beq.n	8019fb6 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	3304      	adds	r3, #4
 8019f64:	4618      	mov	r0, r3
 8019f66:	f7fe fe97 	bl	8018c98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f6e:	2201      	movs	r2, #1
 8019f70:	409a      	lsls	r2, r3
 8019f72:	4b15      	ldr	r3, [pc, #84]	; (8019fc8 <vTaskResume+0xb0>)
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	4313      	orrs	r3, r2
 8019f78:	4a13      	ldr	r2, [pc, #76]	; (8019fc8 <vTaskResume+0xb0>)
 8019f7a:	6013      	str	r3, [r2, #0]
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019f80:	4613      	mov	r3, r2
 8019f82:	009b      	lsls	r3, r3, #2
 8019f84:	4413      	add	r3, r2
 8019f86:	009b      	lsls	r3, r3, #2
 8019f88:	4a10      	ldr	r2, [pc, #64]	; (8019fcc <vTaskResume+0xb4>)
 8019f8a:	441a      	add	r2, r3
 8019f8c:	68fb      	ldr	r3, [r7, #12]
 8019f8e:	3304      	adds	r3, #4
 8019f90:	4619      	mov	r1, r3
 8019f92:	4610      	mov	r0, r2
 8019f94:	f7fe fe23 	bl	8018bde <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019f9c:	4b09      	ldr	r3, [pc, #36]	; (8019fc4 <vTaskResume+0xac>)
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fa2:	429a      	cmp	r2, r3
 8019fa4:	d307      	bcc.n	8019fb6 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8019fa6:	4b0a      	ldr	r3, [pc, #40]	; (8019fd0 <vTaskResume+0xb8>)
 8019fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019fac:	601a      	str	r2, [r3, #0]
 8019fae:	f3bf 8f4f 	dsb	sy
 8019fb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8019fb6:	f001 fb5d 	bl	801b674 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019fba:	bf00      	nop
 8019fbc:	3710      	adds	r7, #16
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bd80      	pop	{r7, pc}
 8019fc2:	bf00      	nop
 8019fc4:	200010c8 	.word	0x200010c8
 8019fc8:	200011d0 	.word	0x200011d0
 8019fcc:	200010cc 	.word	0x200010cc
 8019fd0:	e000ed04 	.word	0xe000ed04

08019fd4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b08a      	sub	sp, #40	; 0x28
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8019fdc:	2300      	movs	r3, #0
 8019fde:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d10a      	bne.n	801a000 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8019fea:	f04f 0320 	mov.w	r3, #32
 8019fee:	f383 8811 	msr	BASEPRI, r3
 8019ff2:	f3bf 8f6f 	isb	sy
 8019ff6:	f3bf 8f4f 	dsb	sy
 8019ffa:	61bb      	str	r3, [r7, #24]
}
 8019ffc:	bf00      	nop
 8019ffe:	e7fe      	b.n	8019ffe <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a000:	f001 fbea 	bl	801b7d8 <vPortValidateInterruptPriority>
	__asm volatile
 801a004:	f3ef 8211 	mrs	r2, BASEPRI
 801a008:	f04f 0320 	mov.w	r3, #32
 801a00c:	f383 8811 	msr	BASEPRI, r3
 801a010:	f3bf 8f6f 	isb	sy
 801a014:	f3bf 8f4f 	dsb	sy
 801a018:	617a      	str	r2, [r7, #20]
 801a01a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801a01c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a01e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801a020:	6a38      	ldr	r0, [r7, #32]
 801a022:	f7ff ff47 	bl	8019eb4 <prvTaskIsTaskSuspended>
 801a026:	4603      	mov	r3, r0
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d02f      	beq.n	801a08c <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a02c:	4b1d      	ldr	r3, [pc, #116]	; (801a0a4 <xTaskResumeFromISR+0xd0>)
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d125      	bne.n	801a080 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a034:	6a3b      	ldr	r3, [r7, #32]
 801a036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a038:	4b1b      	ldr	r3, [pc, #108]	; (801a0a8 <xTaskResumeFromISR+0xd4>)
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a03e:	429a      	cmp	r2, r3
 801a040:	d301      	bcc.n	801a046 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 801a042:	2301      	movs	r3, #1
 801a044:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a046:	6a3b      	ldr	r3, [r7, #32]
 801a048:	3304      	adds	r3, #4
 801a04a:	4618      	mov	r0, r3
 801a04c:	f7fe fe24 	bl	8018c98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a050:	6a3b      	ldr	r3, [r7, #32]
 801a052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a054:	2201      	movs	r2, #1
 801a056:	409a      	lsls	r2, r3
 801a058:	4b14      	ldr	r3, [pc, #80]	; (801a0ac <xTaskResumeFromISR+0xd8>)
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	4313      	orrs	r3, r2
 801a05e:	4a13      	ldr	r2, [pc, #76]	; (801a0ac <xTaskResumeFromISR+0xd8>)
 801a060:	6013      	str	r3, [r2, #0]
 801a062:	6a3b      	ldr	r3, [r7, #32]
 801a064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a066:	4613      	mov	r3, r2
 801a068:	009b      	lsls	r3, r3, #2
 801a06a:	4413      	add	r3, r2
 801a06c:	009b      	lsls	r3, r3, #2
 801a06e:	4a10      	ldr	r2, [pc, #64]	; (801a0b0 <xTaskResumeFromISR+0xdc>)
 801a070:	441a      	add	r2, r3
 801a072:	6a3b      	ldr	r3, [r7, #32]
 801a074:	3304      	adds	r3, #4
 801a076:	4619      	mov	r1, r3
 801a078:	4610      	mov	r0, r2
 801a07a:	f7fe fdb0 	bl	8018bde <vListInsertEnd>
 801a07e:	e005      	b.n	801a08c <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801a080:	6a3b      	ldr	r3, [r7, #32]
 801a082:	3318      	adds	r3, #24
 801a084:	4619      	mov	r1, r3
 801a086:	480b      	ldr	r0, [pc, #44]	; (801a0b4 <xTaskResumeFromISR+0xe0>)
 801a088:	f7fe fda9 	bl	8018bde <vListInsertEnd>
 801a08c:	69fb      	ldr	r3, [r7, #28]
 801a08e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	f383 8811 	msr	BASEPRI, r3
}
 801a096:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 801a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801a09a:	4618      	mov	r0, r3
 801a09c:	3728      	adds	r7, #40	; 0x28
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	bd80      	pop	{r7, pc}
 801a0a2:	bf00      	nop
 801a0a4:	200011f0 	.word	0x200011f0
 801a0a8:	200010c8 	.word	0x200010c8
 801a0ac:	200011d0 	.word	0x200011d0
 801a0b0:	200010cc 	.word	0x200010cc
 801a0b4:	20001188 	.word	0x20001188

0801a0b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b086      	sub	sp, #24
 801a0bc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801a0be:	4b22      	ldr	r3, [pc, #136]	; (801a148 <vTaskStartScheduler+0x90>)
 801a0c0:	9301      	str	r3, [sp, #4]
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	9300      	str	r3, [sp, #0]
 801a0c6:	2300      	movs	r3, #0
 801a0c8:	2280      	movs	r2, #128	; 0x80
 801a0ca:	4920      	ldr	r1, [pc, #128]	; (801a14c <vTaskStartScheduler+0x94>)
 801a0cc:	4820      	ldr	r0, [pc, #128]	; (801a150 <vTaskStartScheduler+0x98>)
 801a0ce:	f7ff fd1d 	bl	8019b0c <xTaskCreate>
 801a0d2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	2b01      	cmp	r3, #1
 801a0d8:	d102      	bne.n	801a0e0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 801a0da:	f000 fe5d 	bl	801ad98 <xTimerCreateTimerTask>
 801a0de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	2b01      	cmp	r3, #1
 801a0e4:	d11c      	bne.n	801a120 <vTaskStartScheduler+0x68>
	__asm volatile
 801a0e6:	f04f 0320 	mov.w	r3, #32
 801a0ea:	f383 8811 	msr	BASEPRI, r3
 801a0ee:	f3bf 8f6f 	isb	sy
 801a0f2:	f3bf 8f4f 	dsb	sy
 801a0f6:	60bb      	str	r3, [r7, #8]
}
 801a0f8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801a0fa:	4b16      	ldr	r3, [pc, #88]	; (801a154 <vTaskStartScheduler+0x9c>)
 801a0fc:	f04f 32ff 	mov.w	r2, #4294967295
 801a100:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a102:	4b15      	ldr	r3, [pc, #84]	; (801a158 <vTaskStartScheduler+0xa0>)
 801a104:	2201      	movs	r2, #1
 801a106:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a108:	4b14      	ldr	r3, [pc, #80]	; (801a15c <vTaskStartScheduler+0xa4>)
 801a10a:	2200      	movs	r2, #0
 801a10c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 801a10e:	4b14      	ldr	r3, [pc, #80]	; (801a160 <vTaskStartScheduler+0xa8>)
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a114:	4618      	mov	r0, r3
 801a116:	f7ed faad 	bl	8007674 <BSP_DEBUG_PIN_On>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801a11a:	f001 f9d9 	bl	801b4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a11e:	e00e      	b.n	801a13e <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a126:	d10a      	bne.n	801a13e <vTaskStartScheduler+0x86>
	__asm volatile
 801a128:	f04f 0320 	mov.w	r3, #32
 801a12c:	f383 8811 	msr	BASEPRI, r3
 801a130:	f3bf 8f6f 	isb	sy
 801a134:	f3bf 8f4f 	dsb	sy
 801a138:	607b      	str	r3, [r7, #4]
}
 801a13a:	bf00      	nop
 801a13c:	e7fe      	b.n	801a13c <vTaskStartScheduler+0x84>
}
 801a13e:	bf00      	nop
 801a140:	3710      	adds	r7, #16
 801a142:	46bd      	mov	sp, r7
 801a144:	bd80      	pop	{r7, pc}
 801a146:	bf00      	nop
 801a148:	200011ec 	.word	0x200011ec
 801a14c:	080226ac 	.word	0x080226ac
 801a150:	0801a7b9 	.word	0x0801a7b9
 801a154:	200011e8 	.word	0x200011e8
 801a158:	200011d4 	.word	0x200011d4
 801a15c:	200011cc 	.word	0x200011cc
 801a160:	200010c8 	.word	0x200010c8

0801a164 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a164:	b480      	push	{r7}
 801a166:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801a168:	4b04      	ldr	r3, [pc, #16]	; (801a17c <vTaskSuspendAll+0x18>)
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	3301      	adds	r3, #1
 801a16e:	4a03      	ldr	r2, [pc, #12]	; (801a17c <vTaskSuspendAll+0x18>)
 801a170:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801a172:	bf00      	nop
 801a174:	46bd      	mov	sp, r7
 801a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17a:	4770      	bx	lr
 801a17c:	200011f0 	.word	0x200011f0

0801a180 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a180:	b580      	push	{r7, lr}
 801a182:	b084      	sub	sp, #16
 801a184:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a186:	2300      	movs	r3, #0
 801a188:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a18a:	2300      	movs	r3, #0
 801a18c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a18e:	4b41      	ldr	r3, [pc, #260]	; (801a294 <xTaskResumeAll+0x114>)
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d10a      	bne.n	801a1ac <xTaskResumeAll+0x2c>
	__asm volatile
 801a196:	f04f 0320 	mov.w	r3, #32
 801a19a:	f383 8811 	msr	BASEPRI, r3
 801a19e:	f3bf 8f6f 	isb	sy
 801a1a2:	f3bf 8f4f 	dsb	sy
 801a1a6:	603b      	str	r3, [r7, #0]
}
 801a1a8:	bf00      	nop
 801a1aa:	e7fe      	b.n	801a1aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a1ac:	f001 fa32 	bl	801b614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a1b0:	4b38      	ldr	r3, [pc, #224]	; (801a294 <xTaskResumeAll+0x114>)
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	3b01      	subs	r3, #1
 801a1b6:	4a37      	ldr	r2, [pc, #220]	; (801a294 <xTaskResumeAll+0x114>)
 801a1b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a1ba:	4b36      	ldr	r3, [pc, #216]	; (801a294 <xTaskResumeAll+0x114>)
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d161      	bne.n	801a286 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a1c2:	4b35      	ldr	r3, [pc, #212]	; (801a298 <xTaskResumeAll+0x118>)
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d05d      	beq.n	801a286 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a1ca:	e02e      	b.n	801a22a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a1cc:	4b33      	ldr	r3, [pc, #204]	; (801a29c <xTaskResumeAll+0x11c>)
 801a1ce:	68db      	ldr	r3, [r3, #12]
 801a1d0:	68db      	ldr	r3, [r3, #12]
 801a1d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	3318      	adds	r3, #24
 801a1d8:	4618      	mov	r0, r3
 801a1da:	f7fe fd5d 	bl	8018c98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	3304      	adds	r3, #4
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f7fe fd58 	bl	8018c98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1ec:	2201      	movs	r2, #1
 801a1ee:	409a      	lsls	r2, r3
 801a1f0:	4b2b      	ldr	r3, [pc, #172]	; (801a2a0 <xTaskResumeAll+0x120>)
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	4313      	orrs	r3, r2
 801a1f6:	4a2a      	ldr	r2, [pc, #168]	; (801a2a0 <xTaskResumeAll+0x120>)
 801a1f8:	6013      	str	r3, [r2, #0]
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a1fe:	4613      	mov	r3, r2
 801a200:	009b      	lsls	r3, r3, #2
 801a202:	4413      	add	r3, r2
 801a204:	009b      	lsls	r3, r3, #2
 801a206:	4a27      	ldr	r2, [pc, #156]	; (801a2a4 <xTaskResumeAll+0x124>)
 801a208:	441a      	add	r2, r3
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	3304      	adds	r3, #4
 801a20e:	4619      	mov	r1, r3
 801a210:	4610      	mov	r0, r2
 801a212:	f7fe fce4 	bl	8018bde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a21a:	4b23      	ldr	r3, [pc, #140]	; (801a2a8 <xTaskResumeAll+0x128>)
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a220:	429a      	cmp	r2, r3
 801a222:	d302      	bcc.n	801a22a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801a224:	4b21      	ldr	r3, [pc, #132]	; (801a2ac <xTaskResumeAll+0x12c>)
 801a226:	2201      	movs	r2, #1
 801a228:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a22a:	4b1c      	ldr	r3, [pc, #112]	; (801a29c <xTaskResumeAll+0x11c>)
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d1cc      	bne.n	801a1cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	2b00      	cmp	r3, #0
 801a236:	d001      	beq.n	801a23c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a238:	f000 fb56 	bl	801a8e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801a23c:	4b1c      	ldr	r3, [pc, #112]	; (801a2b0 <xTaskResumeAll+0x130>)
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d010      	beq.n	801a26a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a248:	f000 f846 	bl	801a2d8 <xTaskIncrementTick>
 801a24c:	4603      	mov	r3, r0
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d002      	beq.n	801a258 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801a252:	4b16      	ldr	r3, [pc, #88]	; (801a2ac <xTaskResumeAll+0x12c>)
 801a254:	2201      	movs	r2, #1
 801a256:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	3b01      	subs	r3, #1
 801a25c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d1f1      	bne.n	801a248 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 801a264:	4b12      	ldr	r3, [pc, #72]	; (801a2b0 <xTaskResumeAll+0x130>)
 801a266:	2200      	movs	r2, #0
 801a268:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a26a:	4b10      	ldr	r3, [pc, #64]	; (801a2ac <xTaskResumeAll+0x12c>)
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d009      	beq.n	801a286 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a272:	2301      	movs	r3, #1
 801a274:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a276:	4b0f      	ldr	r3, [pc, #60]	; (801a2b4 <xTaskResumeAll+0x134>)
 801a278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a27c:	601a      	str	r2, [r3, #0]
 801a27e:	f3bf 8f4f 	dsb	sy
 801a282:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a286:	f001 f9f5 	bl	801b674 <vPortExitCritical>

	return xAlreadyYielded;
 801a28a:	68bb      	ldr	r3, [r7, #8]
}
 801a28c:	4618      	mov	r0, r3
 801a28e:	3710      	adds	r7, #16
 801a290:	46bd      	mov	sp, r7
 801a292:	bd80      	pop	{r7, pc}
 801a294:	200011f0 	.word	0x200011f0
 801a298:	200011c8 	.word	0x200011c8
 801a29c:	20001188 	.word	0x20001188
 801a2a0:	200011d0 	.word	0x200011d0
 801a2a4:	200010cc 	.word	0x200010cc
 801a2a8:	200010c8 	.word	0x200010c8
 801a2ac:	200011dc 	.word	0x200011dc
 801a2b0:	200011d8 	.word	0x200011d8
 801a2b4:	e000ed04 	.word	0xe000ed04

0801a2b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a2b8:	b480      	push	{r7}
 801a2ba:	b083      	sub	sp, #12
 801a2bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a2be:	4b05      	ldr	r3, [pc, #20]	; (801a2d4 <xTaskGetTickCount+0x1c>)
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a2c4:	687b      	ldr	r3, [r7, #4]
}
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	370c      	adds	r7, #12
 801a2ca:	46bd      	mov	sp, r7
 801a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d0:	4770      	bx	lr
 801a2d2:	bf00      	nop
 801a2d4:	200011cc 	.word	0x200011cc

0801a2d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b086      	sub	sp, #24
 801a2dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a2de:	2300      	movs	r3, #0
 801a2e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a2e2:	4b4e      	ldr	r3, [pc, #312]	; (801a41c <xTaskIncrementTick+0x144>)
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	f040 8088 	bne.w	801a3fc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a2ec:	4b4c      	ldr	r3, [pc, #304]	; (801a420 <xTaskIncrementTick+0x148>)
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	3301      	adds	r3, #1
 801a2f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a2f4:	4a4a      	ldr	r2, [pc, #296]	; (801a420 <xTaskIncrementTick+0x148>)
 801a2f6:	693b      	ldr	r3, [r7, #16]
 801a2f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a2fa:	693b      	ldr	r3, [r7, #16]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d120      	bne.n	801a342 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801a300:	4b48      	ldr	r3, [pc, #288]	; (801a424 <xTaskIncrementTick+0x14c>)
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d00a      	beq.n	801a320 <xTaskIncrementTick+0x48>
	__asm volatile
 801a30a:	f04f 0320 	mov.w	r3, #32
 801a30e:	f383 8811 	msr	BASEPRI, r3
 801a312:	f3bf 8f6f 	isb	sy
 801a316:	f3bf 8f4f 	dsb	sy
 801a31a:	603b      	str	r3, [r7, #0]
}
 801a31c:	bf00      	nop
 801a31e:	e7fe      	b.n	801a31e <xTaskIncrementTick+0x46>
 801a320:	4b40      	ldr	r3, [pc, #256]	; (801a424 <xTaskIncrementTick+0x14c>)
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	60fb      	str	r3, [r7, #12]
 801a326:	4b40      	ldr	r3, [pc, #256]	; (801a428 <xTaskIncrementTick+0x150>)
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	4a3e      	ldr	r2, [pc, #248]	; (801a424 <xTaskIncrementTick+0x14c>)
 801a32c:	6013      	str	r3, [r2, #0]
 801a32e:	4a3e      	ldr	r2, [pc, #248]	; (801a428 <xTaskIncrementTick+0x150>)
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	6013      	str	r3, [r2, #0]
 801a334:	4b3d      	ldr	r3, [pc, #244]	; (801a42c <xTaskIncrementTick+0x154>)
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	3301      	adds	r3, #1
 801a33a:	4a3c      	ldr	r2, [pc, #240]	; (801a42c <xTaskIncrementTick+0x154>)
 801a33c:	6013      	str	r3, [r2, #0]
 801a33e:	f000 fad3 	bl	801a8e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a342:	4b3b      	ldr	r3, [pc, #236]	; (801a430 <xTaskIncrementTick+0x158>)
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	693a      	ldr	r2, [r7, #16]
 801a348:	429a      	cmp	r2, r3
 801a34a:	d348      	bcc.n	801a3de <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a34c:	4b35      	ldr	r3, [pc, #212]	; (801a424 <xTaskIncrementTick+0x14c>)
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d104      	bne.n	801a360 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a356:	4b36      	ldr	r3, [pc, #216]	; (801a430 <xTaskIncrementTick+0x158>)
 801a358:	f04f 32ff 	mov.w	r2, #4294967295
 801a35c:	601a      	str	r2, [r3, #0]
					break;
 801a35e:	e03e      	b.n	801a3de <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a360:	4b30      	ldr	r3, [pc, #192]	; (801a424 <xTaskIncrementTick+0x14c>)
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	68db      	ldr	r3, [r3, #12]
 801a366:	68db      	ldr	r3, [r3, #12]
 801a368:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a36a:	68bb      	ldr	r3, [r7, #8]
 801a36c:	685b      	ldr	r3, [r3, #4]
 801a36e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a370:	693a      	ldr	r2, [r7, #16]
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	429a      	cmp	r2, r3
 801a376:	d203      	bcs.n	801a380 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a378:	4a2d      	ldr	r2, [pc, #180]	; (801a430 <xTaskIncrementTick+0x158>)
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a37e:	e02e      	b.n	801a3de <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a380:	68bb      	ldr	r3, [r7, #8]
 801a382:	3304      	adds	r3, #4
 801a384:	4618      	mov	r0, r3
 801a386:	f7fe fc87 	bl	8018c98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a38a:	68bb      	ldr	r3, [r7, #8]
 801a38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d004      	beq.n	801a39c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a392:	68bb      	ldr	r3, [r7, #8]
 801a394:	3318      	adds	r3, #24
 801a396:	4618      	mov	r0, r3
 801a398:	f7fe fc7e 	bl	8018c98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a39c:	68bb      	ldr	r3, [r7, #8]
 801a39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3a0:	2201      	movs	r2, #1
 801a3a2:	409a      	lsls	r2, r3
 801a3a4:	4b23      	ldr	r3, [pc, #140]	; (801a434 <xTaskIncrementTick+0x15c>)
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	4313      	orrs	r3, r2
 801a3aa:	4a22      	ldr	r2, [pc, #136]	; (801a434 <xTaskIncrementTick+0x15c>)
 801a3ac:	6013      	str	r3, [r2, #0]
 801a3ae:	68bb      	ldr	r3, [r7, #8]
 801a3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3b2:	4613      	mov	r3, r2
 801a3b4:	009b      	lsls	r3, r3, #2
 801a3b6:	4413      	add	r3, r2
 801a3b8:	009b      	lsls	r3, r3, #2
 801a3ba:	4a1f      	ldr	r2, [pc, #124]	; (801a438 <xTaskIncrementTick+0x160>)
 801a3bc:	441a      	add	r2, r3
 801a3be:	68bb      	ldr	r3, [r7, #8]
 801a3c0:	3304      	adds	r3, #4
 801a3c2:	4619      	mov	r1, r3
 801a3c4:	4610      	mov	r0, r2
 801a3c6:	f7fe fc0a 	bl	8018bde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a3ca:	68bb      	ldr	r3, [r7, #8]
 801a3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3ce:	4b1b      	ldr	r3, [pc, #108]	; (801a43c <xTaskIncrementTick+0x164>)
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3d4:	429a      	cmp	r2, r3
 801a3d6:	d3b9      	bcc.n	801a34c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801a3d8:	2301      	movs	r3, #1
 801a3da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a3dc:	e7b6      	b.n	801a34c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a3de:	4b17      	ldr	r3, [pc, #92]	; (801a43c <xTaskIncrementTick+0x164>)
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3e4:	4914      	ldr	r1, [pc, #80]	; (801a438 <xTaskIncrementTick+0x160>)
 801a3e6:	4613      	mov	r3, r2
 801a3e8:	009b      	lsls	r3, r3, #2
 801a3ea:	4413      	add	r3, r2
 801a3ec:	009b      	lsls	r3, r3, #2
 801a3ee:	440b      	add	r3, r1
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	2b01      	cmp	r3, #1
 801a3f4:	d907      	bls.n	801a406 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801a3f6:	2301      	movs	r3, #1
 801a3f8:	617b      	str	r3, [r7, #20]
 801a3fa:	e004      	b.n	801a406 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801a3fc:	4b10      	ldr	r3, [pc, #64]	; (801a440 <xTaskIncrementTick+0x168>)
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	3301      	adds	r3, #1
 801a402:	4a0f      	ldr	r2, [pc, #60]	; (801a440 <xTaskIncrementTick+0x168>)
 801a404:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801a406:	4b0f      	ldr	r3, [pc, #60]	; (801a444 <xTaskIncrementTick+0x16c>)
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d001      	beq.n	801a412 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801a40e:	2301      	movs	r3, #1
 801a410:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801a412:	697b      	ldr	r3, [r7, #20]
}
 801a414:	4618      	mov	r0, r3
 801a416:	3718      	adds	r7, #24
 801a418:	46bd      	mov	sp, r7
 801a41a:	bd80      	pop	{r7, pc}
 801a41c:	200011f0 	.word	0x200011f0
 801a420:	200011cc 	.word	0x200011cc
 801a424:	20001180 	.word	0x20001180
 801a428:	20001184 	.word	0x20001184
 801a42c:	200011e0 	.word	0x200011e0
 801a430:	200011e8 	.word	0x200011e8
 801a434:	200011d0 	.word	0x200011d0
 801a438:	200010cc 	.word	0x200010cc
 801a43c:	200010c8 	.word	0x200010c8
 801a440:	200011d8 	.word	0x200011d8
 801a444:	200011dc 	.word	0x200011dc

0801a448 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 801a448:	b580      	push	{r7, lr}
 801a44a:	b084      	sub	sp, #16
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	6078      	str	r0, [r7, #4]
 801a450:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d103      	bne.n	801a460 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 801a458:	4b08      	ldr	r3, [pc, #32]	; (801a47c <vTaskSetApplicationTaskTag+0x34>)
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	60fb      	str	r3, [r7, #12]
 801a45e:	e001      	b.n	801a464 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 801a464:	f001 f8d6 	bl	801b614 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	683a      	ldr	r2, [r7, #0]
 801a46c:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 801a46e:	f001 f901 	bl	801b674 <vPortExitCritical>
	}
 801a472:	bf00      	nop
 801a474:	3710      	adds	r7, #16
 801a476:	46bd      	mov	sp, r7
 801a478:	bd80      	pop	{r7, pc}
 801a47a:	bf00      	nop
 801a47c:	200010c8 	.word	0x200010c8

0801a480 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a480:	b580      	push	{r7, lr}
 801a482:	b086      	sub	sp, #24
 801a484:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a486:	4b2c      	ldr	r3, [pc, #176]	; (801a538 <vTaskSwitchContext+0xb8>)
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d003      	beq.n	801a496 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a48e:	4b2b      	ldr	r3, [pc, #172]	; (801a53c <vTaskSwitchContext+0xbc>)
 801a490:	2201      	movs	r2, #1
 801a492:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a494:	e04b      	b.n	801a52e <vTaskSwitchContext+0xae>
		xYieldPending = pdFALSE;
 801a496:	4b29      	ldr	r3, [pc, #164]	; (801a53c <vTaskSwitchContext+0xbc>)
 801a498:	2200      	movs	r2, #0
 801a49a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 801a49c:	4b28      	ldr	r3, [pc, #160]	; (801a540 <vTaskSwitchContext+0xc0>)
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f7ed f900 	bl	80076a8 <BSP_DEBUG_PIN_Off>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a4a8:	4b26      	ldr	r3, [pc, #152]	; (801a544 <vTaskSwitchContext+0xc4>)
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	fab3 f383 	clz	r3, r3
 801a4b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801a4b6:	7afb      	ldrb	r3, [r7, #11]
 801a4b8:	f1c3 031f 	rsb	r3, r3, #31
 801a4bc:	617b      	str	r3, [r7, #20]
 801a4be:	4922      	ldr	r1, [pc, #136]	; (801a548 <vTaskSwitchContext+0xc8>)
 801a4c0:	697a      	ldr	r2, [r7, #20]
 801a4c2:	4613      	mov	r3, r2
 801a4c4:	009b      	lsls	r3, r3, #2
 801a4c6:	4413      	add	r3, r2
 801a4c8:	009b      	lsls	r3, r3, #2
 801a4ca:	440b      	add	r3, r1
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d10a      	bne.n	801a4e8 <vTaskSwitchContext+0x68>
	__asm volatile
 801a4d2:	f04f 0320 	mov.w	r3, #32
 801a4d6:	f383 8811 	msr	BASEPRI, r3
 801a4da:	f3bf 8f6f 	isb	sy
 801a4de:	f3bf 8f4f 	dsb	sy
 801a4e2:	607b      	str	r3, [r7, #4]
}
 801a4e4:	bf00      	nop
 801a4e6:	e7fe      	b.n	801a4e6 <vTaskSwitchContext+0x66>
 801a4e8:	697a      	ldr	r2, [r7, #20]
 801a4ea:	4613      	mov	r3, r2
 801a4ec:	009b      	lsls	r3, r3, #2
 801a4ee:	4413      	add	r3, r2
 801a4f0:	009b      	lsls	r3, r3, #2
 801a4f2:	4a15      	ldr	r2, [pc, #84]	; (801a548 <vTaskSwitchContext+0xc8>)
 801a4f4:	4413      	add	r3, r2
 801a4f6:	613b      	str	r3, [r7, #16]
 801a4f8:	693b      	ldr	r3, [r7, #16]
 801a4fa:	685b      	ldr	r3, [r3, #4]
 801a4fc:	685a      	ldr	r2, [r3, #4]
 801a4fe:	693b      	ldr	r3, [r7, #16]
 801a500:	605a      	str	r2, [r3, #4]
 801a502:	693b      	ldr	r3, [r7, #16]
 801a504:	685a      	ldr	r2, [r3, #4]
 801a506:	693b      	ldr	r3, [r7, #16]
 801a508:	3308      	adds	r3, #8
 801a50a:	429a      	cmp	r2, r3
 801a50c:	d104      	bne.n	801a518 <vTaskSwitchContext+0x98>
 801a50e:	693b      	ldr	r3, [r7, #16]
 801a510:	685b      	ldr	r3, [r3, #4]
 801a512:	685a      	ldr	r2, [r3, #4]
 801a514:	693b      	ldr	r3, [r7, #16]
 801a516:	605a      	str	r2, [r3, #4]
 801a518:	693b      	ldr	r3, [r7, #16]
 801a51a:	685b      	ldr	r3, [r3, #4]
 801a51c:	68db      	ldr	r3, [r3, #12]
 801a51e:	4a08      	ldr	r2, [pc, #32]	; (801a540 <vTaskSwitchContext+0xc0>)
 801a520:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801a522:	4b07      	ldr	r3, [pc, #28]	; (801a540 <vTaskSwitchContext+0xc0>)
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a528:	4618      	mov	r0, r3
 801a52a:	f7ed f8a3 	bl	8007674 <BSP_DEBUG_PIN_On>
}
 801a52e:	bf00      	nop
 801a530:	3718      	adds	r7, #24
 801a532:	46bd      	mov	sp, r7
 801a534:	bd80      	pop	{r7, pc}
 801a536:	bf00      	nop
 801a538:	200011f0 	.word	0x200011f0
 801a53c:	200011dc 	.word	0x200011dc
 801a540:	200010c8 	.word	0x200010c8
 801a544:	200011d0 	.word	0x200011d0
 801a548:	200010cc 	.word	0x200010cc

0801a54c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a54c:	b580      	push	{r7, lr}
 801a54e:	b084      	sub	sp, #16
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
 801a554:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	2b00      	cmp	r3, #0
 801a55a:	d10a      	bne.n	801a572 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801a55c:	f04f 0320 	mov.w	r3, #32
 801a560:	f383 8811 	msr	BASEPRI, r3
 801a564:	f3bf 8f6f 	isb	sy
 801a568:	f3bf 8f4f 	dsb	sy
 801a56c:	60fb      	str	r3, [r7, #12]
}
 801a56e:	bf00      	nop
 801a570:	e7fe      	b.n	801a570 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a572:	4b07      	ldr	r3, [pc, #28]	; (801a590 <vTaskPlaceOnEventList+0x44>)
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	3318      	adds	r3, #24
 801a578:	4619      	mov	r1, r3
 801a57a:	6878      	ldr	r0, [r7, #4]
 801a57c:	f7fe fb53 	bl	8018c26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a580:	2101      	movs	r1, #1
 801a582:	6838      	ldr	r0, [r7, #0]
 801a584:	f000 fba2 	bl	801accc <prvAddCurrentTaskToDelayedList>
}
 801a588:	bf00      	nop
 801a58a:	3710      	adds	r7, #16
 801a58c:	46bd      	mov	sp, r7
 801a58e:	bd80      	pop	{r7, pc}
 801a590:	200010c8 	.word	0x200010c8

0801a594 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a594:	b580      	push	{r7, lr}
 801a596:	b086      	sub	sp, #24
 801a598:	af00      	add	r7, sp, #0
 801a59a:	60f8      	str	r0, [r7, #12]
 801a59c:	60b9      	str	r1, [r7, #8]
 801a59e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d10a      	bne.n	801a5bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801a5a6:	f04f 0320 	mov.w	r3, #32
 801a5aa:	f383 8811 	msr	BASEPRI, r3
 801a5ae:	f3bf 8f6f 	isb	sy
 801a5b2:	f3bf 8f4f 	dsb	sy
 801a5b6:	617b      	str	r3, [r7, #20]
}
 801a5b8:	bf00      	nop
 801a5ba:	e7fe      	b.n	801a5ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a5bc:	4b0a      	ldr	r3, [pc, #40]	; (801a5e8 <vTaskPlaceOnEventListRestricted+0x54>)
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	3318      	adds	r3, #24
 801a5c2:	4619      	mov	r1, r3
 801a5c4:	68f8      	ldr	r0, [r7, #12]
 801a5c6:	f7fe fb0a 	bl	8018bde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d002      	beq.n	801a5d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801a5d0:	f04f 33ff 	mov.w	r3, #4294967295
 801a5d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a5d6:	6879      	ldr	r1, [r7, #4]
 801a5d8:	68b8      	ldr	r0, [r7, #8]
 801a5da:	f000 fb77 	bl	801accc <prvAddCurrentTaskToDelayedList>
	}
 801a5de:	bf00      	nop
 801a5e0:	3718      	adds	r7, #24
 801a5e2:	46bd      	mov	sp, r7
 801a5e4:	bd80      	pop	{r7, pc}
 801a5e6:	bf00      	nop
 801a5e8:	200010c8 	.word	0x200010c8

0801a5ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b086      	sub	sp, #24
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	68db      	ldr	r3, [r3, #12]
 801a5f8:	68db      	ldr	r3, [r3, #12]
 801a5fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a5fc:	693b      	ldr	r3, [r7, #16]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d10a      	bne.n	801a618 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801a602:	f04f 0320 	mov.w	r3, #32
 801a606:	f383 8811 	msr	BASEPRI, r3
 801a60a:	f3bf 8f6f 	isb	sy
 801a60e:	f3bf 8f4f 	dsb	sy
 801a612:	60fb      	str	r3, [r7, #12]
}
 801a614:	bf00      	nop
 801a616:	e7fe      	b.n	801a616 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a618:	693b      	ldr	r3, [r7, #16]
 801a61a:	3318      	adds	r3, #24
 801a61c:	4618      	mov	r0, r3
 801a61e:	f7fe fb3b 	bl	8018c98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a622:	4b1d      	ldr	r3, [pc, #116]	; (801a698 <xTaskRemoveFromEventList+0xac>)
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d11c      	bne.n	801a664 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a62a:	693b      	ldr	r3, [r7, #16]
 801a62c:	3304      	adds	r3, #4
 801a62e:	4618      	mov	r0, r3
 801a630:	f7fe fb32 	bl	8018c98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a634:	693b      	ldr	r3, [r7, #16]
 801a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a638:	2201      	movs	r2, #1
 801a63a:	409a      	lsls	r2, r3
 801a63c:	4b17      	ldr	r3, [pc, #92]	; (801a69c <xTaskRemoveFromEventList+0xb0>)
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	4313      	orrs	r3, r2
 801a642:	4a16      	ldr	r2, [pc, #88]	; (801a69c <xTaskRemoveFromEventList+0xb0>)
 801a644:	6013      	str	r3, [r2, #0]
 801a646:	693b      	ldr	r3, [r7, #16]
 801a648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a64a:	4613      	mov	r3, r2
 801a64c:	009b      	lsls	r3, r3, #2
 801a64e:	4413      	add	r3, r2
 801a650:	009b      	lsls	r3, r3, #2
 801a652:	4a13      	ldr	r2, [pc, #76]	; (801a6a0 <xTaskRemoveFromEventList+0xb4>)
 801a654:	441a      	add	r2, r3
 801a656:	693b      	ldr	r3, [r7, #16]
 801a658:	3304      	adds	r3, #4
 801a65a:	4619      	mov	r1, r3
 801a65c:	4610      	mov	r0, r2
 801a65e:	f7fe fabe 	bl	8018bde <vListInsertEnd>
 801a662:	e005      	b.n	801a670 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a664:	693b      	ldr	r3, [r7, #16]
 801a666:	3318      	adds	r3, #24
 801a668:	4619      	mov	r1, r3
 801a66a:	480e      	ldr	r0, [pc, #56]	; (801a6a4 <xTaskRemoveFromEventList+0xb8>)
 801a66c:	f7fe fab7 	bl	8018bde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a670:	693b      	ldr	r3, [r7, #16]
 801a672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a674:	4b0c      	ldr	r3, [pc, #48]	; (801a6a8 <xTaskRemoveFromEventList+0xbc>)
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a67a:	429a      	cmp	r2, r3
 801a67c:	d905      	bls.n	801a68a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a67e:	2301      	movs	r3, #1
 801a680:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a682:	4b0a      	ldr	r3, [pc, #40]	; (801a6ac <xTaskRemoveFromEventList+0xc0>)
 801a684:	2201      	movs	r2, #1
 801a686:	601a      	str	r2, [r3, #0]
 801a688:	e001      	b.n	801a68e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801a68a:	2300      	movs	r3, #0
 801a68c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a68e:	697b      	ldr	r3, [r7, #20]
}
 801a690:	4618      	mov	r0, r3
 801a692:	3718      	adds	r7, #24
 801a694:	46bd      	mov	sp, r7
 801a696:	bd80      	pop	{r7, pc}
 801a698:	200011f0 	.word	0x200011f0
 801a69c:	200011d0 	.word	0x200011d0
 801a6a0:	200010cc 	.word	0x200010cc
 801a6a4:	20001188 	.word	0x20001188
 801a6a8:	200010c8 	.word	0x200010c8
 801a6ac:	200011dc 	.word	0x200011dc

0801a6b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a6b0:	b480      	push	{r7}
 801a6b2:	b083      	sub	sp, #12
 801a6b4:	af00      	add	r7, sp, #0
 801a6b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a6b8:	4b06      	ldr	r3, [pc, #24]	; (801a6d4 <vTaskInternalSetTimeOutState+0x24>)
 801a6ba:	681a      	ldr	r2, [r3, #0]
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a6c0:	4b05      	ldr	r3, [pc, #20]	; (801a6d8 <vTaskInternalSetTimeOutState+0x28>)
 801a6c2:	681a      	ldr	r2, [r3, #0]
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	605a      	str	r2, [r3, #4]
}
 801a6c8:	bf00      	nop
 801a6ca:	370c      	adds	r7, #12
 801a6cc:	46bd      	mov	sp, r7
 801a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6d2:	4770      	bx	lr
 801a6d4:	200011e0 	.word	0x200011e0
 801a6d8:	200011cc 	.word	0x200011cc

0801a6dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b088      	sub	sp, #32
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	6078      	str	r0, [r7, #4]
 801a6e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d10a      	bne.n	801a702 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801a6ec:	f04f 0320 	mov.w	r3, #32
 801a6f0:	f383 8811 	msr	BASEPRI, r3
 801a6f4:	f3bf 8f6f 	isb	sy
 801a6f8:	f3bf 8f4f 	dsb	sy
 801a6fc:	613b      	str	r3, [r7, #16]
}
 801a6fe:	bf00      	nop
 801a700:	e7fe      	b.n	801a700 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801a702:	683b      	ldr	r3, [r7, #0]
 801a704:	2b00      	cmp	r3, #0
 801a706:	d10a      	bne.n	801a71e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801a708:	f04f 0320 	mov.w	r3, #32
 801a70c:	f383 8811 	msr	BASEPRI, r3
 801a710:	f3bf 8f6f 	isb	sy
 801a714:	f3bf 8f4f 	dsb	sy
 801a718:	60fb      	str	r3, [r7, #12]
}
 801a71a:	bf00      	nop
 801a71c:	e7fe      	b.n	801a71c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801a71e:	f000 ff79 	bl	801b614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a722:	4b1d      	ldr	r3, [pc, #116]	; (801a798 <xTaskCheckForTimeOut+0xbc>)
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	685b      	ldr	r3, [r3, #4]
 801a72c:	69ba      	ldr	r2, [r7, #24]
 801a72e:	1ad3      	subs	r3, r2, r3
 801a730:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a732:	683b      	ldr	r3, [r7, #0]
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a73a:	d102      	bne.n	801a742 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a73c:	2300      	movs	r3, #0
 801a73e:	61fb      	str	r3, [r7, #28]
 801a740:	e023      	b.n	801a78a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	681a      	ldr	r2, [r3, #0]
 801a746:	4b15      	ldr	r3, [pc, #84]	; (801a79c <xTaskCheckForTimeOut+0xc0>)
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	429a      	cmp	r2, r3
 801a74c:	d007      	beq.n	801a75e <xTaskCheckForTimeOut+0x82>
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	685b      	ldr	r3, [r3, #4]
 801a752:	69ba      	ldr	r2, [r7, #24]
 801a754:	429a      	cmp	r2, r3
 801a756:	d302      	bcc.n	801a75e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a758:	2301      	movs	r3, #1
 801a75a:	61fb      	str	r3, [r7, #28]
 801a75c:	e015      	b.n	801a78a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a75e:	683b      	ldr	r3, [r7, #0]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	697a      	ldr	r2, [r7, #20]
 801a764:	429a      	cmp	r2, r3
 801a766:	d20b      	bcs.n	801a780 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a768:	683b      	ldr	r3, [r7, #0]
 801a76a:	681a      	ldr	r2, [r3, #0]
 801a76c:	697b      	ldr	r3, [r7, #20]
 801a76e:	1ad2      	subs	r2, r2, r3
 801a770:	683b      	ldr	r3, [r7, #0]
 801a772:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a774:	6878      	ldr	r0, [r7, #4]
 801a776:	f7ff ff9b 	bl	801a6b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a77a:	2300      	movs	r3, #0
 801a77c:	61fb      	str	r3, [r7, #28]
 801a77e:	e004      	b.n	801a78a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801a780:	683b      	ldr	r3, [r7, #0]
 801a782:	2200      	movs	r2, #0
 801a784:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a786:	2301      	movs	r3, #1
 801a788:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a78a:	f000 ff73 	bl	801b674 <vPortExitCritical>

	return xReturn;
 801a78e:	69fb      	ldr	r3, [r7, #28]
}
 801a790:	4618      	mov	r0, r3
 801a792:	3720      	adds	r7, #32
 801a794:	46bd      	mov	sp, r7
 801a796:	bd80      	pop	{r7, pc}
 801a798:	200011cc 	.word	0x200011cc
 801a79c:	200011e0 	.word	0x200011e0

0801a7a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a7a0:	b480      	push	{r7}
 801a7a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a7a4:	4b03      	ldr	r3, [pc, #12]	; (801a7b4 <vTaskMissedYield+0x14>)
 801a7a6:	2201      	movs	r2, #1
 801a7a8:	601a      	str	r2, [r3, #0]
}
 801a7aa:	bf00      	nop
 801a7ac:	46bd      	mov	sp, r7
 801a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7b2:	4770      	bx	lr
 801a7b4:	200011dc 	.word	0x200011dc

0801a7b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a7b8:	b580      	push	{r7, lr}
 801a7ba:	b082      	sub	sp, #8
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a7c0:	f000 f854 	bl	801a86c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a7c4:	4b07      	ldr	r3, [pc, #28]	; (801a7e4 <prvIdleTask+0x2c>)
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	2b01      	cmp	r3, #1
 801a7ca:	d907      	bls.n	801a7dc <prvIdleTask+0x24>
			{
				taskYIELD();
 801a7cc:	4b06      	ldr	r3, [pc, #24]	; (801a7e8 <prvIdleTask+0x30>)
 801a7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a7d2:	601a      	str	r2, [r3, #0]
 801a7d4:	f3bf 8f4f 	dsb	sy
 801a7d8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801a7dc:	f7e9 fabc 	bl	8003d58 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801a7e0:	e7ee      	b.n	801a7c0 <prvIdleTask+0x8>
 801a7e2:	bf00      	nop
 801a7e4:	200010cc 	.word	0x200010cc
 801a7e8:	e000ed04 	.word	0xe000ed04

0801a7ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b082      	sub	sp, #8
 801a7f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a7f2:	2300      	movs	r3, #0
 801a7f4:	607b      	str	r3, [r7, #4]
 801a7f6:	e00c      	b.n	801a812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a7f8:	687a      	ldr	r2, [r7, #4]
 801a7fa:	4613      	mov	r3, r2
 801a7fc:	009b      	lsls	r3, r3, #2
 801a7fe:	4413      	add	r3, r2
 801a800:	009b      	lsls	r3, r3, #2
 801a802:	4a12      	ldr	r2, [pc, #72]	; (801a84c <prvInitialiseTaskLists+0x60>)
 801a804:	4413      	add	r3, r2
 801a806:	4618      	mov	r0, r3
 801a808:	f7fe f9bc 	bl	8018b84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	3301      	adds	r3, #1
 801a810:	607b      	str	r3, [r7, #4]
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	2b06      	cmp	r3, #6
 801a816:	d9ef      	bls.n	801a7f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a818:	480d      	ldr	r0, [pc, #52]	; (801a850 <prvInitialiseTaskLists+0x64>)
 801a81a:	f7fe f9b3 	bl	8018b84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a81e:	480d      	ldr	r0, [pc, #52]	; (801a854 <prvInitialiseTaskLists+0x68>)
 801a820:	f7fe f9b0 	bl	8018b84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a824:	480c      	ldr	r0, [pc, #48]	; (801a858 <prvInitialiseTaskLists+0x6c>)
 801a826:	f7fe f9ad 	bl	8018b84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a82a:	480c      	ldr	r0, [pc, #48]	; (801a85c <prvInitialiseTaskLists+0x70>)
 801a82c:	f7fe f9aa 	bl	8018b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a830:	480b      	ldr	r0, [pc, #44]	; (801a860 <prvInitialiseTaskLists+0x74>)
 801a832:	f7fe f9a7 	bl	8018b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a836:	4b0b      	ldr	r3, [pc, #44]	; (801a864 <prvInitialiseTaskLists+0x78>)
 801a838:	4a05      	ldr	r2, [pc, #20]	; (801a850 <prvInitialiseTaskLists+0x64>)
 801a83a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a83c:	4b0a      	ldr	r3, [pc, #40]	; (801a868 <prvInitialiseTaskLists+0x7c>)
 801a83e:	4a05      	ldr	r2, [pc, #20]	; (801a854 <prvInitialiseTaskLists+0x68>)
 801a840:	601a      	str	r2, [r3, #0]
}
 801a842:	bf00      	nop
 801a844:	3708      	adds	r7, #8
 801a846:	46bd      	mov	sp, r7
 801a848:	bd80      	pop	{r7, pc}
 801a84a:	bf00      	nop
 801a84c:	200010cc 	.word	0x200010cc
 801a850:	20001158 	.word	0x20001158
 801a854:	2000116c 	.word	0x2000116c
 801a858:	20001188 	.word	0x20001188
 801a85c:	2000119c 	.word	0x2000119c
 801a860:	200011b4 	.word	0x200011b4
 801a864:	20001180 	.word	0x20001180
 801a868:	20001184 	.word	0x20001184

0801a86c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	b082      	sub	sp, #8
 801a870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a872:	e019      	b.n	801a8a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a874:	f000 fece 	bl	801b614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a878:	4b10      	ldr	r3, [pc, #64]	; (801a8bc <prvCheckTasksWaitingTermination+0x50>)
 801a87a:	68db      	ldr	r3, [r3, #12]
 801a87c:	68db      	ldr	r3, [r3, #12]
 801a87e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	3304      	adds	r3, #4
 801a884:	4618      	mov	r0, r3
 801a886:	f7fe fa07 	bl	8018c98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a88a:	4b0d      	ldr	r3, [pc, #52]	; (801a8c0 <prvCheckTasksWaitingTermination+0x54>)
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	3b01      	subs	r3, #1
 801a890:	4a0b      	ldr	r2, [pc, #44]	; (801a8c0 <prvCheckTasksWaitingTermination+0x54>)
 801a892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a894:	4b0b      	ldr	r3, [pc, #44]	; (801a8c4 <prvCheckTasksWaitingTermination+0x58>)
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	3b01      	subs	r3, #1
 801a89a:	4a0a      	ldr	r2, [pc, #40]	; (801a8c4 <prvCheckTasksWaitingTermination+0x58>)
 801a89c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a89e:	f000 fee9 	bl	801b674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a8a2:	6878      	ldr	r0, [r7, #4]
 801a8a4:	f000 f810 	bl	801a8c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a8a8:	4b06      	ldr	r3, [pc, #24]	; (801a8c4 <prvCheckTasksWaitingTermination+0x58>)
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d1e1      	bne.n	801a874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a8b0:	bf00      	nop
 801a8b2:	bf00      	nop
 801a8b4:	3708      	adds	r7, #8
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	bd80      	pop	{r7, pc}
 801a8ba:	bf00      	nop
 801a8bc:	2000119c 	.word	0x2000119c
 801a8c0:	200011c8 	.word	0x200011c8
 801a8c4:	200011b0 	.word	0x200011b0

0801a8c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a8c8:	b580      	push	{r7, lr}
 801a8ca:	b082      	sub	sp, #8
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	f001 f883 	bl	801b9e0 <vPortFree>
			vPortFree( pxTCB );
 801a8da:	6878      	ldr	r0, [r7, #4]
 801a8dc:	f001 f880 	bl	801b9e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a8e0:	bf00      	nop
 801a8e2:	3708      	adds	r7, #8
 801a8e4:	46bd      	mov	sp, r7
 801a8e6:	bd80      	pop	{r7, pc}

0801a8e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a8e8:	b480      	push	{r7}
 801a8ea:	b083      	sub	sp, #12
 801a8ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a8ee:	4b0c      	ldr	r3, [pc, #48]	; (801a920 <prvResetNextTaskUnblockTime+0x38>)
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d104      	bne.n	801a902 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a8f8:	4b0a      	ldr	r3, [pc, #40]	; (801a924 <prvResetNextTaskUnblockTime+0x3c>)
 801a8fa:	f04f 32ff 	mov.w	r2, #4294967295
 801a8fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a900:	e008      	b.n	801a914 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a902:	4b07      	ldr	r3, [pc, #28]	; (801a920 <prvResetNextTaskUnblockTime+0x38>)
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	68db      	ldr	r3, [r3, #12]
 801a908:	68db      	ldr	r3, [r3, #12]
 801a90a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	685b      	ldr	r3, [r3, #4]
 801a910:	4a04      	ldr	r2, [pc, #16]	; (801a924 <prvResetNextTaskUnblockTime+0x3c>)
 801a912:	6013      	str	r3, [r2, #0]
}
 801a914:	bf00      	nop
 801a916:	370c      	adds	r7, #12
 801a918:	46bd      	mov	sp, r7
 801a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a91e:	4770      	bx	lr
 801a920:	20001180 	.word	0x20001180
 801a924:	200011e8 	.word	0x200011e8

0801a928 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a928:	b480      	push	{r7}
 801a92a:	b083      	sub	sp, #12
 801a92c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a92e:	4b0b      	ldr	r3, [pc, #44]	; (801a95c <xTaskGetSchedulerState+0x34>)
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d102      	bne.n	801a93c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a936:	2301      	movs	r3, #1
 801a938:	607b      	str	r3, [r7, #4]
 801a93a:	e008      	b.n	801a94e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a93c:	4b08      	ldr	r3, [pc, #32]	; (801a960 <xTaskGetSchedulerState+0x38>)
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	2b00      	cmp	r3, #0
 801a942:	d102      	bne.n	801a94a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a944:	2302      	movs	r3, #2
 801a946:	607b      	str	r3, [r7, #4]
 801a948:	e001      	b.n	801a94e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a94a:	2300      	movs	r3, #0
 801a94c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a94e:	687b      	ldr	r3, [r7, #4]
	}
 801a950:	4618      	mov	r0, r3
 801a952:	370c      	adds	r7, #12
 801a954:	46bd      	mov	sp, r7
 801a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a95a:	4770      	bx	lr
 801a95c:	200011d4 	.word	0x200011d4
 801a960:	200011f0 	.word	0x200011f0

0801a964 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a964:	b580      	push	{r7, lr}
 801a966:	b084      	sub	sp, #16
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a970:	2300      	movs	r3, #0
 801a972:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d069      	beq.n	801aa4e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a97a:	68bb      	ldr	r3, [r7, #8]
 801a97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a97e:	4b36      	ldr	r3, [pc, #216]	; (801aa58 <xTaskPriorityInherit+0xf4>)
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a984:	429a      	cmp	r2, r3
 801a986:	d259      	bcs.n	801aa3c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	699b      	ldr	r3, [r3, #24]
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	db06      	blt.n	801a99e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a990:	4b31      	ldr	r3, [pc, #196]	; (801aa58 <xTaskPriorityInherit+0xf4>)
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a996:	f1c3 0207 	rsb	r2, r3, #7
 801a99a:	68bb      	ldr	r3, [r7, #8]
 801a99c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a99e:	68bb      	ldr	r3, [r7, #8]
 801a9a0:	6959      	ldr	r1, [r3, #20]
 801a9a2:	68bb      	ldr	r3, [r7, #8]
 801a9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9a6:	4613      	mov	r3, r2
 801a9a8:	009b      	lsls	r3, r3, #2
 801a9aa:	4413      	add	r3, r2
 801a9ac:	009b      	lsls	r3, r3, #2
 801a9ae:	4a2b      	ldr	r2, [pc, #172]	; (801aa5c <xTaskPriorityInherit+0xf8>)
 801a9b0:	4413      	add	r3, r2
 801a9b2:	4299      	cmp	r1, r3
 801a9b4:	d13a      	bne.n	801aa2c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a9b6:	68bb      	ldr	r3, [r7, #8]
 801a9b8:	3304      	adds	r3, #4
 801a9ba:	4618      	mov	r0, r3
 801a9bc:	f7fe f96c 	bl	8018c98 <uxListRemove>
 801a9c0:	4603      	mov	r3, r0
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d115      	bne.n	801a9f2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801a9c6:	68bb      	ldr	r3, [r7, #8]
 801a9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9ca:	4924      	ldr	r1, [pc, #144]	; (801aa5c <xTaskPriorityInherit+0xf8>)
 801a9cc:	4613      	mov	r3, r2
 801a9ce:	009b      	lsls	r3, r3, #2
 801a9d0:	4413      	add	r3, r2
 801a9d2:	009b      	lsls	r3, r3, #2
 801a9d4:	440b      	add	r3, r1
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d10a      	bne.n	801a9f2 <xTaskPriorityInherit+0x8e>
 801a9dc:	68bb      	ldr	r3, [r7, #8]
 801a9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9e0:	2201      	movs	r2, #1
 801a9e2:	fa02 f303 	lsl.w	r3, r2, r3
 801a9e6:	43da      	mvns	r2, r3
 801a9e8:	4b1d      	ldr	r3, [pc, #116]	; (801aa60 <xTaskPriorityInherit+0xfc>)
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	4013      	ands	r3, r2
 801a9ee:	4a1c      	ldr	r2, [pc, #112]	; (801aa60 <xTaskPriorityInherit+0xfc>)
 801a9f0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a9f2:	4b19      	ldr	r3, [pc, #100]	; (801aa58 <xTaskPriorityInherit+0xf4>)
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9f8:	68bb      	ldr	r3, [r7, #8]
 801a9fa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a9fc:	68bb      	ldr	r3, [r7, #8]
 801a9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa00:	2201      	movs	r2, #1
 801aa02:	409a      	lsls	r2, r3
 801aa04:	4b16      	ldr	r3, [pc, #88]	; (801aa60 <xTaskPriorityInherit+0xfc>)
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	4313      	orrs	r3, r2
 801aa0a:	4a15      	ldr	r2, [pc, #84]	; (801aa60 <xTaskPriorityInherit+0xfc>)
 801aa0c:	6013      	str	r3, [r2, #0]
 801aa0e:	68bb      	ldr	r3, [r7, #8]
 801aa10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa12:	4613      	mov	r3, r2
 801aa14:	009b      	lsls	r3, r3, #2
 801aa16:	4413      	add	r3, r2
 801aa18:	009b      	lsls	r3, r3, #2
 801aa1a:	4a10      	ldr	r2, [pc, #64]	; (801aa5c <xTaskPriorityInherit+0xf8>)
 801aa1c:	441a      	add	r2, r3
 801aa1e:	68bb      	ldr	r3, [r7, #8]
 801aa20:	3304      	adds	r3, #4
 801aa22:	4619      	mov	r1, r3
 801aa24:	4610      	mov	r0, r2
 801aa26:	f7fe f8da 	bl	8018bde <vListInsertEnd>
 801aa2a:	e004      	b.n	801aa36 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801aa2c:	4b0a      	ldr	r3, [pc, #40]	; (801aa58 <xTaskPriorityInherit+0xf4>)
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa32:	68bb      	ldr	r3, [r7, #8]
 801aa34:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801aa36:	2301      	movs	r3, #1
 801aa38:	60fb      	str	r3, [r7, #12]
 801aa3a:	e008      	b.n	801aa4e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801aa3c:	68bb      	ldr	r3, [r7, #8]
 801aa3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801aa40:	4b05      	ldr	r3, [pc, #20]	; (801aa58 <xTaskPriorityInherit+0xf4>)
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa46:	429a      	cmp	r2, r3
 801aa48:	d201      	bcs.n	801aa4e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801aa4a:	2301      	movs	r3, #1
 801aa4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801aa4e:	68fb      	ldr	r3, [r7, #12]
	}
 801aa50:	4618      	mov	r0, r3
 801aa52:	3710      	adds	r7, #16
 801aa54:	46bd      	mov	sp, r7
 801aa56:	bd80      	pop	{r7, pc}
 801aa58:	200010c8 	.word	0x200010c8
 801aa5c:	200010cc 	.word	0x200010cc
 801aa60:	200011d0 	.word	0x200011d0

0801aa64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801aa64:	b580      	push	{r7, lr}
 801aa66:	b086      	sub	sp, #24
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801aa70:	2300      	movs	r3, #0
 801aa72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d06e      	beq.n	801ab58 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801aa7a:	4b3a      	ldr	r3, [pc, #232]	; (801ab64 <xTaskPriorityDisinherit+0x100>)
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	693a      	ldr	r2, [r7, #16]
 801aa80:	429a      	cmp	r2, r3
 801aa82:	d00a      	beq.n	801aa9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801aa84:	f04f 0320 	mov.w	r3, #32
 801aa88:	f383 8811 	msr	BASEPRI, r3
 801aa8c:	f3bf 8f6f 	isb	sy
 801aa90:	f3bf 8f4f 	dsb	sy
 801aa94:	60fb      	str	r3, [r7, #12]
}
 801aa96:	bf00      	nop
 801aa98:	e7fe      	b.n	801aa98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801aa9a:	693b      	ldr	r3, [r7, #16]
 801aa9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d10a      	bne.n	801aab8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801aaa2:	f04f 0320 	mov.w	r3, #32
 801aaa6:	f383 8811 	msr	BASEPRI, r3
 801aaaa:	f3bf 8f6f 	isb	sy
 801aaae:	f3bf 8f4f 	dsb	sy
 801aab2:	60bb      	str	r3, [r7, #8]
}
 801aab4:	bf00      	nop
 801aab6:	e7fe      	b.n	801aab6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801aab8:	693b      	ldr	r3, [r7, #16]
 801aaba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aabc:	1e5a      	subs	r2, r3, #1
 801aabe:	693b      	ldr	r3, [r7, #16]
 801aac0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801aac2:	693b      	ldr	r3, [r7, #16]
 801aac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aac6:	693b      	ldr	r3, [r7, #16]
 801aac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801aaca:	429a      	cmp	r2, r3
 801aacc:	d044      	beq.n	801ab58 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801aace:	693b      	ldr	r3, [r7, #16]
 801aad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	d140      	bne.n	801ab58 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801aad6:	693b      	ldr	r3, [r7, #16]
 801aad8:	3304      	adds	r3, #4
 801aada:	4618      	mov	r0, r3
 801aadc:	f7fe f8dc 	bl	8018c98 <uxListRemove>
 801aae0:	4603      	mov	r3, r0
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d115      	bne.n	801ab12 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801aae6:	693b      	ldr	r3, [r7, #16]
 801aae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aaea:	491f      	ldr	r1, [pc, #124]	; (801ab68 <xTaskPriorityDisinherit+0x104>)
 801aaec:	4613      	mov	r3, r2
 801aaee:	009b      	lsls	r3, r3, #2
 801aaf0:	4413      	add	r3, r2
 801aaf2:	009b      	lsls	r3, r3, #2
 801aaf4:	440b      	add	r3, r1
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d10a      	bne.n	801ab12 <xTaskPriorityDisinherit+0xae>
 801aafc:	693b      	ldr	r3, [r7, #16]
 801aafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab00:	2201      	movs	r2, #1
 801ab02:	fa02 f303 	lsl.w	r3, r2, r3
 801ab06:	43da      	mvns	r2, r3
 801ab08:	4b18      	ldr	r3, [pc, #96]	; (801ab6c <xTaskPriorityDisinherit+0x108>)
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	4013      	ands	r3, r2
 801ab0e:	4a17      	ldr	r2, [pc, #92]	; (801ab6c <xTaskPriorityDisinherit+0x108>)
 801ab10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801ab12:	693b      	ldr	r3, [r7, #16]
 801ab14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ab16:	693b      	ldr	r3, [r7, #16]
 801ab18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ab1a:	693b      	ldr	r3, [r7, #16]
 801ab1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab1e:	f1c3 0207 	rsb	r2, r3, #7
 801ab22:	693b      	ldr	r3, [r7, #16]
 801ab24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801ab26:	693b      	ldr	r3, [r7, #16]
 801ab28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab2a:	2201      	movs	r2, #1
 801ab2c:	409a      	lsls	r2, r3
 801ab2e:	4b0f      	ldr	r3, [pc, #60]	; (801ab6c <xTaskPriorityDisinherit+0x108>)
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	4313      	orrs	r3, r2
 801ab34:	4a0d      	ldr	r2, [pc, #52]	; (801ab6c <xTaskPriorityDisinherit+0x108>)
 801ab36:	6013      	str	r3, [r2, #0]
 801ab38:	693b      	ldr	r3, [r7, #16]
 801ab3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab3c:	4613      	mov	r3, r2
 801ab3e:	009b      	lsls	r3, r3, #2
 801ab40:	4413      	add	r3, r2
 801ab42:	009b      	lsls	r3, r3, #2
 801ab44:	4a08      	ldr	r2, [pc, #32]	; (801ab68 <xTaskPriorityDisinherit+0x104>)
 801ab46:	441a      	add	r2, r3
 801ab48:	693b      	ldr	r3, [r7, #16]
 801ab4a:	3304      	adds	r3, #4
 801ab4c:	4619      	mov	r1, r3
 801ab4e:	4610      	mov	r0, r2
 801ab50:	f7fe f845 	bl	8018bde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801ab54:	2301      	movs	r3, #1
 801ab56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ab58:	697b      	ldr	r3, [r7, #20]
	}
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	3718      	adds	r7, #24
 801ab5e:	46bd      	mov	sp, r7
 801ab60:	bd80      	pop	{r7, pc}
 801ab62:	bf00      	nop
 801ab64:	200010c8 	.word	0x200010c8
 801ab68:	200010cc 	.word	0x200010cc
 801ab6c:	200011d0 	.word	0x200011d0

0801ab70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801ab70:	b580      	push	{r7, lr}
 801ab72:	b088      	sub	sp, #32
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	6078      	str	r0, [r7, #4]
 801ab78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801ab7e:	2301      	movs	r3, #1
 801ab80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	f000 8083 	beq.w	801ac90 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801ab8a:	69bb      	ldr	r3, [r7, #24]
 801ab8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d10a      	bne.n	801aba8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801ab92:	f04f 0320 	mov.w	r3, #32
 801ab96:	f383 8811 	msr	BASEPRI, r3
 801ab9a:	f3bf 8f6f 	isb	sy
 801ab9e:	f3bf 8f4f 	dsb	sy
 801aba2:	60fb      	str	r3, [r7, #12]
}
 801aba4:	bf00      	nop
 801aba6:	e7fe      	b.n	801aba6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801aba8:	69bb      	ldr	r3, [r7, #24]
 801abaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801abac:	683a      	ldr	r2, [r7, #0]
 801abae:	429a      	cmp	r2, r3
 801abb0:	d902      	bls.n	801abb8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801abb2:	683b      	ldr	r3, [r7, #0]
 801abb4:	61fb      	str	r3, [r7, #28]
 801abb6:	e002      	b.n	801abbe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801abb8:	69bb      	ldr	r3, [r7, #24]
 801abba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801abbc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801abbe:	69bb      	ldr	r3, [r7, #24]
 801abc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abc2:	69fa      	ldr	r2, [r7, #28]
 801abc4:	429a      	cmp	r2, r3
 801abc6:	d063      	beq.n	801ac90 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801abc8:	69bb      	ldr	r3, [r7, #24]
 801abca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801abcc:	697a      	ldr	r2, [r7, #20]
 801abce:	429a      	cmp	r2, r3
 801abd0:	d15e      	bne.n	801ac90 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801abd2:	4b31      	ldr	r3, [pc, #196]	; (801ac98 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	69ba      	ldr	r2, [r7, #24]
 801abd8:	429a      	cmp	r2, r3
 801abda:	d10a      	bne.n	801abf2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 801abdc:	f04f 0320 	mov.w	r3, #32
 801abe0:	f383 8811 	msr	BASEPRI, r3
 801abe4:	f3bf 8f6f 	isb	sy
 801abe8:	f3bf 8f4f 	dsb	sy
 801abec:	60bb      	str	r3, [r7, #8]
}
 801abee:	bf00      	nop
 801abf0:	e7fe      	b.n	801abf0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801abf2:	69bb      	ldr	r3, [r7, #24]
 801abf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abf6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801abf8:	69bb      	ldr	r3, [r7, #24]
 801abfa:	69fa      	ldr	r2, [r7, #28]
 801abfc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801abfe:	69bb      	ldr	r3, [r7, #24]
 801ac00:	699b      	ldr	r3, [r3, #24]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	db04      	blt.n	801ac10 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ac06:	69fb      	ldr	r3, [r7, #28]
 801ac08:	f1c3 0207 	rsb	r2, r3, #7
 801ac0c:	69bb      	ldr	r3, [r7, #24]
 801ac0e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801ac10:	69bb      	ldr	r3, [r7, #24]
 801ac12:	6959      	ldr	r1, [r3, #20]
 801ac14:	693a      	ldr	r2, [r7, #16]
 801ac16:	4613      	mov	r3, r2
 801ac18:	009b      	lsls	r3, r3, #2
 801ac1a:	4413      	add	r3, r2
 801ac1c:	009b      	lsls	r3, r3, #2
 801ac1e:	4a1f      	ldr	r2, [pc, #124]	; (801ac9c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801ac20:	4413      	add	r3, r2
 801ac22:	4299      	cmp	r1, r3
 801ac24:	d134      	bne.n	801ac90 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ac26:	69bb      	ldr	r3, [r7, #24]
 801ac28:	3304      	adds	r3, #4
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	f7fe f834 	bl	8018c98 <uxListRemove>
 801ac30:	4603      	mov	r3, r0
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d115      	bne.n	801ac62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801ac36:	69bb      	ldr	r3, [r7, #24]
 801ac38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac3a:	4918      	ldr	r1, [pc, #96]	; (801ac9c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801ac3c:	4613      	mov	r3, r2
 801ac3e:	009b      	lsls	r3, r3, #2
 801ac40:	4413      	add	r3, r2
 801ac42:	009b      	lsls	r3, r3, #2
 801ac44:	440b      	add	r3, r1
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d10a      	bne.n	801ac62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 801ac4c:	69bb      	ldr	r3, [r7, #24]
 801ac4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac50:	2201      	movs	r2, #1
 801ac52:	fa02 f303 	lsl.w	r3, r2, r3
 801ac56:	43da      	mvns	r2, r3
 801ac58:	4b11      	ldr	r3, [pc, #68]	; (801aca0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	4013      	ands	r3, r2
 801ac5e:	4a10      	ldr	r2, [pc, #64]	; (801aca0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801ac60:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801ac62:	69bb      	ldr	r3, [r7, #24]
 801ac64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac66:	2201      	movs	r2, #1
 801ac68:	409a      	lsls	r2, r3
 801ac6a:	4b0d      	ldr	r3, [pc, #52]	; (801aca0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	4313      	orrs	r3, r2
 801ac70:	4a0b      	ldr	r2, [pc, #44]	; (801aca0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801ac72:	6013      	str	r3, [r2, #0]
 801ac74:	69bb      	ldr	r3, [r7, #24]
 801ac76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac78:	4613      	mov	r3, r2
 801ac7a:	009b      	lsls	r3, r3, #2
 801ac7c:	4413      	add	r3, r2
 801ac7e:	009b      	lsls	r3, r3, #2
 801ac80:	4a06      	ldr	r2, [pc, #24]	; (801ac9c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801ac82:	441a      	add	r2, r3
 801ac84:	69bb      	ldr	r3, [r7, #24]
 801ac86:	3304      	adds	r3, #4
 801ac88:	4619      	mov	r1, r3
 801ac8a:	4610      	mov	r0, r2
 801ac8c:	f7fd ffa7 	bl	8018bde <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ac90:	bf00      	nop
 801ac92:	3720      	adds	r7, #32
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}
 801ac98:	200010c8 	.word	0x200010c8
 801ac9c:	200010cc 	.word	0x200010cc
 801aca0:	200011d0 	.word	0x200011d0

0801aca4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801aca4:	b480      	push	{r7}
 801aca6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801aca8:	4b07      	ldr	r3, [pc, #28]	; (801acc8 <pvTaskIncrementMutexHeldCount+0x24>)
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d004      	beq.n	801acba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801acb0:	4b05      	ldr	r3, [pc, #20]	; (801acc8 <pvTaskIncrementMutexHeldCount+0x24>)
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801acb6:	3201      	adds	r2, #1
 801acb8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801acba:	4b03      	ldr	r3, [pc, #12]	; (801acc8 <pvTaskIncrementMutexHeldCount+0x24>)
 801acbc:	681b      	ldr	r3, [r3, #0]
	}
 801acbe:	4618      	mov	r0, r3
 801acc0:	46bd      	mov	sp, r7
 801acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc6:	4770      	bx	lr
 801acc8:	200010c8 	.word	0x200010c8

0801accc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801accc:	b580      	push	{r7, lr}
 801acce:	b084      	sub	sp, #16
 801acd0:	af00      	add	r7, sp, #0
 801acd2:	6078      	str	r0, [r7, #4]
 801acd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801acd6:	4b29      	ldr	r3, [pc, #164]	; (801ad7c <prvAddCurrentTaskToDelayedList+0xb0>)
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801acdc:	4b28      	ldr	r3, [pc, #160]	; (801ad80 <prvAddCurrentTaskToDelayedList+0xb4>)
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	3304      	adds	r3, #4
 801ace2:	4618      	mov	r0, r3
 801ace4:	f7fd ffd8 	bl	8018c98 <uxListRemove>
 801ace8:	4603      	mov	r3, r0
 801acea:	2b00      	cmp	r3, #0
 801acec:	d10b      	bne.n	801ad06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801acee:	4b24      	ldr	r3, [pc, #144]	; (801ad80 <prvAddCurrentTaskToDelayedList+0xb4>)
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801acf4:	2201      	movs	r2, #1
 801acf6:	fa02 f303 	lsl.w	r3, r2, r3
 801acfa:	43da      	mvns	r2, r3
 801acfc:	4b21      	ldr	r3, [pc, #132]	; (801ad84 <prvAddCurrentTaskToDelayedList+0xb8>)
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	4013      	ands	r3, r2
 801ad02:	4a20      	ldr	r2, [pc, #128]	; (801ad84 <prvAddCurrentTaskToDelayedList+0xb8>)
 801ad04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad0c:	d10a      	bne.n	801ad24 <prvAddCurrentTaskToDelayedList+0x58>
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d007      	beq.n	801ad24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ad14:	4b1a      	ldr	r3, [pc, #104]	; (801ad80 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	3304      	adds	r3, #4
 801ad1a:	4619      	mov	r1, r3
 801ad1c:	481a      	ldr	r0, [pc, #104]	; (801ad88 <prvAddCurrentTaskToDelayedList+0xbc>)
 801ad1e:	f7fd ff5e 	bl	8018bde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801ad22:	e026      	b.n	801ad72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801ad24:	68fa      	ldr	r2, [r7, #12]
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	4413      	add	r3, r2
 801ad2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801ad2c:	4b14      	ldr	r3, [pc, #80]	; (801ad80 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	68ba      	ldr	r2, [r7, #8]
 801ad32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801ad34:	68ba      	ldr	r2, [r7, #8]
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	429a      	cmp	r2, r3
 801ad3a:	d209      	bcs.n	801ad50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ad3c:	4b13      	ldr	r3, [pc, #76]	; (801ad8c <prvAddCurrentTaskToDelayedList+0xc0>)
 801ad3e:	681a      	ldr	r2, [r3, #0]
 801ad40:	4b0f      	ldr	r3, [pc, #60]	; (801ad80 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	3304      	adds	r3, #4
 801ad46:	4619      	mov	r1, r3
 801ad48:	4610      	mov	r0, r2
 801ad4a:	f7fd ff6c 	bl	8018c26 <vListInsert>
}
 801ad4e:	e010      	b.n	801ad72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ad50:	4b0f      	ldr	r3, [pc, #60]	; (801ad90 <prvAddCurrentTaskToDelayedList+0xc4>)
 801ad52:	681a      	ldr	r2, [r3, #0]
 801ad54:	4b0a      	ldr	r3, [pc, #40]	; (801ad80 <prvAddCurrentTaskToDelayedList+0xb4>)
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	3304      	adds	r3, #4
 801ad5a:	4619      	mov	r1, r3
 801ad5c:	4610      	mov	r0, r2
 801ad5e:	f7fd ff62 	bl	8018c26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801ad62:	4b0c      	ldr	r3, [pc, #48]	; (801ad94 <prvAddCurrentTaskToDelayedList+0xc8>)
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	68ba      	ldr	r2, [r7, #8]
 801ad68:	429a      	cmp	r2, r3
 801ad6a:	d202      	bcs.n	801ad72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801ad6c:	4a09      	ldr	r2, [pc, #36]	; (801ad94 <prvAddCurrentTaskToDelayedList+0xc8>)
 801ad6e:	68bb      	ldr	r3, [r7, #8]
 801ad70:	6013      	str	r3, [r2, #0]
}
 801ad72:	bf00      	nop
 801ad74:	3710      	adds	r7, #16
 801ad76:	46bd      	mov	sp, r7
 801ad78:	bd80      	pop	{r7, pc}
 801ad7a:	bf00      	nop
 801ad7c:	200011cc 	.word	0x200011cc
 801ad80:	200010c8 	.word	0x200010c8
 801ad84:	200011d0 	.word	0x200011d0
 801ad88:	200011b4 	.word	0x200011b4
 801ad8c:	20001184 	.word	0x20001184
 801ad90:	20001180 	.word	0x20001180
 801ad94:	200011e8 	.word	0x200011e8

0801ad98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	b084      	sub	sp, #16
 801ad9c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 801ad9e:	2300      	movs	r3, #0
 801ada0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801ada2:	f000 fad5 	bl	801b350 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801ada6:	4b11      	ldr	r3, [pc, #68]	; (801adec <xTimerCreateTimerTask+0x54>)
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d00b      	beq.n	801adc6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 801adae:	4b10      	ldr	r3, [pc, #64]	; (801adf0 <xTimerCreateTimerTask+0x58>)
 801adb0:	9301      	str	r3, [sp, #4]
 801adb2:	2306      	movs	r3, #6
 801adb4:	9300      	str	r3, [sp, #0]
 801adb6:	2300      	movs	r3, #0
 801adb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 801adbc:	490d      	ldr	r1, [pc, #52]	; (801adf4 <xTimerCreateTimerTask+0x5c>)
 801adbe:	480e      	ldr	r0, [pc, #56]	; (801adf8 <xTimerCreateTimerTask+0x60>)
 801adc0:	f7fe fea4 	bl	8019b0c <xTaskCreate>
 801adc4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d10a      	bne.n	801ade2 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 801adcc:	f04f 0320 	mov.w	r3, #32
 801add0:	f383 8811 	msr	BASEPRI, r3
 801add4:	f3bf 8f6f 	isb	sy
 801add8:	f3bf 8f4f 	dsb	sy
 801addc:	603b      	str	r3, [r7, #0]
}
 801adde:	bf00      	nop
 801ade0:	e7fe      	b.n	801ade0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 801ade2:	687b      	ldr	r3, [r7, #4]
}
 801ade4:	4618      	mov	r0, r3
 801ade6:	3708      	adds	r7, #8
 801ade8:	46bd      	mov	sp, r7
 801adea:	bd80      	pop	{r7, pc}
 801adec:	20001224 	.word	0x20001224
 801adf0:	20001228 	.word	0x20001228
 801adf4:	080226b4 	.word	0x080226b4
 801adf8:	0801af31 	.word	0x0801af31

0801adfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b08a      	sub	sp, #40	; 0x28
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	60f8      	str	r0, [r7, #12]
 801ae04:	60b9      	str	r1, [r7, #8]
 801ae06:	607a      	str	r2, [r7, #4]
 801ae08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d10a      	bne.n	801ae2a <xTimerGenericCommand+0x2e>
	__asm volatile
 801ae14:	f04f 0320 	mov.w	r3, #32
 801ae18:	f383 8811 	msr	BASEPRI, r3
 801ae1c:	f3bf 8f6f 	isb	sy
 801ae20:	f3bf 8f4f 	dsb	sy
 801ae24:	623b      	str	r3, [r7, #32]
}
 801ae26:	bf00      	nop
 801ae28:	e7fe      	b.n	801ae28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801ae2a:	4b1a      	ldr	r3, [pc, #104]	; (801ae94 <xTimerGenericCommand+0x98>)
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d02a      	beq.n	801ae88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801ae32:	68bb      	ldr	r3, [r7, #8]
 801ae34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801ae3e:	68bb      	ldr	r3, [r7, #8]
 801ae40:	2b05      	cmp	r3, #5
 801ae42:	dc18      	bgt.n	801ae76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801ae44:	f7ff fd70 	bl	801a928 <xTaskGetSchedulerState>
 801ae48:	4603      	mov	r3, r0
 801ae4a:	2b02      	cmp	r3, #2
 801ae4c:	d109      	bne.n	801ae62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801ae4e:	4b11      	ldr	r3, [pc, #68]	; (801ae94 <xTimerGenericCommand+0x98>)
 801ae50:	6818      	ldr	r0, [r3, #0]
 801ae52:	f107 0114 	add.w	r1, r7, #20
 801ae56:	2300      	movs	r3, #0
 801ae58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae5a:	f7fe f841 	bl	8018ee0 <xQueueGenericSend>
 801ae5e:	6278      	str	r0, [r7, #36]	; 0x24
 801ae60:	e012      	b.n	801ae88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801ae62:	4b0c      	ldr	r3, [pc, #48]	; (801ae94 <xTimerGenericCommand+0x98>)
 801ae64:	6818      	ldr	r0, [r3, #0]
 801ae66:	f107 0114 	add.w	r1, r7, #20
 801ae6a:	2300      	movs	r3, #0
 801ae6c:	2200      	movs	r2, #0
 801ae6e:	f7fe f837 	bl	8018ee0 <xQueueGenericSend>
 801ae72:	6278      	str	r0, [r7, #36]	; 0x24
 801ae74:	e008      	b.n	801ae88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801ae76:	4b07      	ldr	r3, [pc, #28]	; (801ae94 <xTimerGenericCommand+0x98>)
 801ae78:	6818      	ldr	r0, [r3, #0]
 801ae7a:	f107 0114 	add.w	r1, r7, #20
 801ae7e:	2300      	movs	r3, #0
 801ae80:	683a      	ldr	r2, [r7, #0]
 801ae82:	f7fe f92b 	bl	80190dc <xQueueGenericSendFromISR>
 801ae86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801ae88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	3728      	adds	r7, #40	; 0x28
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	bd80      	pop	{r7, pc}
 801ae92:	bf00      	nop
 801ae94:	20001224 	.word	0x20001224

0801ae98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801ae98:	b580      	push	{r7, lr}
 801ae9a:	b088      	sub	sp, #32
 801ae9c:	af02      	add	r7, sp, #8
 801ae9e:	6078      	str	r0, [r7, #4]
 801aea0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aea2:	4b22      	ldr	r3, [pc, #136]	; (801af2c <prvProcessExpiredTimer+0x94>)
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	68db      	ldr	r3, [r3, #12]
 801aea8:	68db      	ldr	r3, [r3, #12]
 801aeaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801aeac:	697b      	ldr	r3, [r7, #20]
 801aeae:	3304      	adds	r3, #4
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	f7fd fef1 	bl	8018c98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801aeb6:	697b      	ldr	r3, [r7, #20]
 801aeb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aebc:	f003 0304 	and.w	r3, r3, #4
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d022      	beq.n	801af0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801aec4:	697b      	ldr	r3, [r7, #20]
 801aec6:	699a      	ldr	r2, [r3, #24]
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	18d1      	adds	r1, r2, r3
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	683a      	ldr	r2, [r7, #0]
 801aed0:	6978      	ldr	r0, [r7, #20]
 801aed2:	f000 f8d1 	bl	801b078 <prvInsertTimerInActiveList>
 801aed6:	4603      	mov	r3, r0
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d01f      	beq.n	801af1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801aedc:	2300      	movs	r3, #0
 801aede:	9300      	str	r3, [sp, #0]
 801aee0:	2300      	movs	r3, #0
 801aee2:	687a      	ldr	r2, [r7, #4]
 801aee4:	2100      	movs	r1, #0
 801aee6:	6978      	ldr	r0, [r7, #20]
 801aee8:	f7ff ff88 	bl	801adfc <xTimerGenericCommand>
 801aeec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801aeee:	693b      	ldr	r3, [r7, #16]
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d113      	bne.n	801af1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 801aef4:	f04f 0320 	mov.w	r3, #32
 801aef8:	f383 8811 	msr	BASEPRI, r3
 801aefc:	f3bf 8f6f 	isb	sy
 801af00:	f3bf 8f4f 	dsb	sy
 801af04:	60fb      	str	r3, [r7, #12]
}
 801af06:	bf00      	nop
 801af08:	e7fe      	b.n	801af08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801af0a:	697b      	ldr	r3, [r7, #20]
 801af0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801af10:	f023 0301 	bic.w	r3, r3, #1
 801af14:	b2da      	uxtb	r2, r3
 801af16:	697b      	ldr	r3, [r7, #20]
 801af18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801af1c:	697b      	ldr	r3, [r7, #20]
 801af1e:	6a1b      	ldr	r3, [r3, #32]
 801af20:	6978      	ldr	r0, [r7, #20]
 801af22:	4798      	blx	r3
}
 801af24:	bf00      	nop
 801af26:	3718      	adds	r7, #24
 801af28:	46bd      	mov	sp, r7
 801af2a:	bd80      	pop	{r7, pc}
 801af2c:	2000121c 	.word	0x2000121c

0801af30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b084      	sub	sp, #16
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801af38:	f107 0308 	add.w	r3, r7, #8
 801af3c:	4618      	mov	r0, r3
 801af3e:	f000 f857 	bl	801aff0 <prvGetNextExpireTime>
 801af42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801af44:	68bb      	ldr	r3, [r7, #8]
 801af46:	4619      	mov	r1, r3
 801af48:	68f8      	ldr	r0, [r7, #12]
 801af4a:	f000 f803 	bl	801af54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801af4e:	f000 f8d5 	bl	801b0fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801af52:	e7f1      	b.n	801af38 <prvTimerTask+0x8>

0801af54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b084      	sub	sp, #16
 801af58:	af00      	add	r7, sp, #0
 801af5a:	6078      	str	r0, [r7, #4]
 801af5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801af5e:	f7ff f901 	bl	801a164 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801af62:	f107 0308 	add.w	r3, r7, #8
 801af66:	4618      	mov	r0, r3
 801af68:	f000 f866 	bl	801b038 <prvSampleTimeNow>
 801af6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801af6e:	68bb      	ldr	r3, [r7, #8]
 801af70:	2b00      	cmp	r3, #0
 801af72:	d130      	bne.n	801afd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801af74:	683b      	ldr	r3, [r7, #0]
 801af76:	2b00      	cmp	r3, #0
 801af78:	d10a      	bne.n	801af90 <prvProcessTimerOrBlockTask+0x3c>
 801af7a:	687a      	ldr	r2, [r7, #4]
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	429a      	cmp	r2, r3
 801af80:	d806      	bhi.n	801af90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801af82:	f7ff f8fd 	bl	801a180 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801af86:	68f9      	ldr	r1, [r7, #12]
 801af88:	6878      	ldr	r0, [r7, #4]
 801af8a:	f7ff ff85 	bl	801ae98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801af8e:	e024      	b.n	801afda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	2b00      	cmp	r3, #0
 801af94:	d008      	beq.n	801afa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801af96:	4b13      	ldr	r3, [pc, #76]	; (801afe4 <prvProcessTimerOrBlockTask+0x90>)
 801af98:	681b      	ldr	r3, [r3, #0]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d101      	bne.n	801afa4 <prvProcessTimerOrBlockTask+0x50>
 801afa0:	2301      	movs	r3, #1
 801afa2:	e000      	b.n	801afa6 <prvProcessTimerOrBlockTask+0x52>
 801afa4:	2300      	movs	r3, #0
 801afa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801afa8:	4b0f      	ldr	r3, [pc, #60]	; (801afe8 <prvProcessTimerOrBlockTask+0x94>)
 801afaa:	6818      	ldr	r0, [r3, #0]
 801afac:	687a      	ldr	r2, [r7, #4]
 801afae:	68fb      	ldr	r3, [r7, #12]
 801afb0:	1ad3      	subs	r3, r2, r3
 801afb2:	683a      	ldr	r2, [r7, #0]
 801afb4:	4619      	mov	r1, r3
 801afb6:	f7fe fd75 	bl	8019aa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801afba:	f7ff f8e1 	bl	801a180 <xTaskResumeAll>
 801afbe:	4603      	mov	r3, r0
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d10a      	bne.n	801afda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801afc4:	4b09      	ldr	r3, [pc, #36]	; (801afec <prvProcessTimerOrBlockTask+0x98>)
 801afc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801afca:	601a      	str	r2, [r3, #0]
 801afcc:	f3bf 8f4f 	dsb	sy
 801afd0:	f3bf 8f6f 	isb	sy
}
 801afd4:	e001      	b.n	801afda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801afd6:	f7ff f8d3 	bl	801a180 <xTaskResumeAll>
}
 801afda:	bf00      	nop
 801afdc:	3710      	adds	r7, #16
 801afde:	46bd      	mov	sp, r7
 801afe0:	bd80      	pop	{r7, pc}
 801afe2:	bf00      	nop
 801afe4:	20001220 	.word	0x20001220
 801afe8:	20001224 	.word	0x20001224
 801afec:	e000ed04 	.word	0xe000ed04

0801aff0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801aff0:	b480      	push	{r7}
 801aff2:	b085      	sub	sp, #20
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801aff8:	4b0e      	ldr	r3, [pc, #56]	; (801b034 <prvGetNextExpireTime+0x44>)
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	2b00      	cmp	r3, #0
 801b000:	d101      	bne.n	801b006 <prvGetNextExpireTime+0x16>
 801b002:	2201      	movs	r2, #1
 801b004:	e000      	b.n	801b008 <prvGetNextExpireTime+0x18>
 801b006:	2200      	movs	r2, #0
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	2b00      	cmp	r3, #0
 801b012:	d105      	bne.n	801b020 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b014:	4b07      	ldr	r3, [pc, #28]	; (801b034 <prvGetNextExpireTime+0x44>)
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	68db      	ldr	r3, [r3, #12]
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	60fb      	str	r3, [r7, #12]
 801b01e:	e001      	b.n	801b024 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801b020:	2300      	movs	r3, #0
 801b022:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801b024:	68fb      	ldr	r3, [r7, #12]
}
 801b026:	4618      	mov	r0, r3
 801b028:	3714      	adds	r7, #20
 801b02a:	46bd      	mov	sp, r7
 801b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b030:	4770      	bx	lr
 801b032:	bf00      	nop
 801b034:	2000121c 	.word	0x2000121c

0801b038 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801b038:	b580      	push	{r7, lr}
 801b03a:	b084      	sub	sp, #16
 801b03c:	af00      	add	r7, sp, #0
 801b03e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801b040:	f7ff f93a 	bl	801a2b8 <xTaskGetTickCount>
 801b044:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801b046:	4b0b      	ldr	r3, [pc, #44]	; (801b074 <prvSampleTimeNow+0x3c>)
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	68fa      	ldr	r2, [r7, #12]
 801b04c:	429a      	cmp	r2, r3
 801b04e:	d205      	bcs.n	801b05c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801b050:	f000 f91a 	bl	801b288 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	2201      	movs	r2, #1
 801b058:	601a      	str	r2, [r3, #0]
 801b05a:	e002      	b.n	801b062 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	2200      	movs	r2, #0
 801b060:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801b062:	4a04      	ldr	r2, [pc, #16]	; (801b074 <prvSampleTimeNow+0x3c>)
 801b064:	68fb      	ldr	r3, [r7, #12]
 801b066:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801b068:	68fb      	ldr	r3, [r7, #12]
}
 801b06a:	4618      	mov	r0, r3
 801b06c:	3710      	adds	r7, #16
 801b06e:	46bd      	mov	sp, r7
 801b070:	bd80      	pop	{r7, pc}
 801b072:	bf00      	nop
 801b074:	2000122c 	.word	0x2000122c

0801b078 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b086      	sub	sp, #24
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	60f8      	str	r0, [r7, #12]
 801b080:	60b9      	str	r1, [r7, #8]
 801b082:	607a      	str	r2, [r7, #4]
 801b084:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801b086:	2300      	movs	r3, #0
 801b088:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	68ba      	ldr	r2, [r7, #8]
 801b08e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b090:	68fb      	ldr	r3, [r7, #12]
 801b092:	68fa      	ldr	r2, [r7, #12]
 801b094:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801b096:	68ba      	ldr	r2, [r7, #8]
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	429a      	cmp	r2, r3
 801b09c:	d812      	bhi.n	801b0c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b09e:	687a      	ldr	r2, [r7, #4]
 801b0a0:	683b      	ldr	r3, [r7, #0]
 801b0a2:	1ad2      	subs	r2, r2, r3
 801b0a4:	68fb      	ldr	r3, [r7, #12]
 801b0a6:	699b      	ldr	r3, [r3, #24]
 801b0a8:	429a      	cmp	r2, r3
 801b0aa:	d302      	bcc.n	801b0b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801b0ac:	2301      	movs	r3, #1
 801b0ae:	617b      	str	r3, [r7, #20]
 801b0b0:	e01b      	b.n	801b0ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801b0b2:	4b10      	ldr	r3, [pc, #64]	; (801b0f4 <prvInsertTimerInActiveList+0x7c>)
 801b0b4:	681a      	ldr	r2, [r3, #0]
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	3304      	adds	r3, #4
 801b0ba:	4619      	mov	r1, r3
 801b0bc:	4610      	mov	r0, r2
 801b0be:	f7fd fdb2 	bl	8018c26 <vListInsert>
 801b0c2:	e012      	b.n	801b0ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801b0c4:	687a      	ldr	r2, [r7, #4]
 801b0c6:	683b      	ldr	r3, [r7, #0]
 801b0c8:	429a      	cmp	r2, r3
 801b0ca:	d206      	bcs.n	801b0da <prvInsertTimerInActiveList+0x62>
 801b0cc:	68ba      	ldr	r2, [r7, #8]
 801b0ce:	683b      	ldr	r3, [r7, #0]
 801b0d0:	429a      	cmp	r2, r3
 801b0d2:	d302      	bcc.n	801b0da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801b0d4:	2301      	movs	r3, #1
 801b0d6:	617b      	str	r3, [r7, #20]
 801b0d8:	e007      	b.n	801b0ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b0da:	4b07      	ldr	r3, [pc, #28]	; (801b0f8 <prvInsertTimerInActiveList+0x80>)
 801b0dc:	681a      	ldr	r2, [r3, #0]
 801b0de:	68fb      	ldr	r3, [r7, #12]
 801b0e0:	3304      	adds	r3, #4
 801b0e2:	4619      	mov	r1, r3
 801b0e4:	4610      	mov	r0, r2
 801b0e6:	f7fd fd9e 	bl	8018c26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801b0ea:	697b      	ldr	r3, [r7, #20]
}
 801b0ec:	4618      	mov	r0, r3
 801b0ee:	3718      	adds	r7, #24
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	bd80      	pop	{r7, pc}
 801b0f4:	20001220 	.word	0x20001220
 801b0f8:	2000121c 	.word	0x2000121c

0801b0fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801b0fc:	b580      	push	{r7, lr}
 801b0fe:	b08c      	sub	sp, #48	; 0x30
 801b100:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b102:	e0ae      	b.n	801b262 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801b104:	68bb      	ldr	r3, [r7, #8]
 801b106:	2b00      	cmp	r3, #0
 801b108:	f2c0 80aa 	blt.w	801b260 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801b10c:	693b      	ldr	r3, [r7, #16]
 801b10e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b112:	695b      	ldr	r3, [r3, #20]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d004      	beq.n	801b122 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b11a:	3304      	adds	r3, #4
 801b11c:	4618      	mov	r0, r3
 801b11e:	f7fd fdbb 	bl	8018c98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b122:	1d3b      	adds	r3, r7, #4
 801b124:	4618      	mov	r0, r3
 801b126:	f7ff ff87 	bl	801b038 <prvSampleTimeNow>
 801b12a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 801b12c:	68bb      	ldr	r3, [r7, #8]
 801b12e:	2b09      	cmp	r3, #9
 801b130:	f200 8097 	bhi.w	801b262 <prvProcessReceivedCommands+0x166>
 801b134:	a201      	add	r2, pc, #4	; (adr r2, 801b13c <prvProcessReceivedCommands+0x40>)
 801b136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b13a:	bf00      	nop
 801b13c:	0801b165 	.word	0x0801b165
 801b140:	0801b165 	.word	0x0801b165
 801b144:	0801b165 	.word	0x0801b165
 801b148:	0801b1d9 	.word	0x0801b1d9
 801b14c:	0801b1ed 	.word	0x0801b1ed
 801b150:	0801b237 	.word	0x0801b237
 801b154:	0801b165 	.word	0x0801b165
 801b158:	0801b165 	.word	0x0801b165
 801b15c:	0801b1d9 	.word	0x0801b1d9
 801b160:	0801b1ed 	.word	0x0801b1ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b16a:	f043 0301 	orr.w	r3, r3, #1
 801b16e:	b2da      	uxtb	r2, r3
 801b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801b176:	68fa      	ldr	r2, [r7, #12]
 801b178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b17a:	699b      	ldr	r3, [r3, #24]
 801b17c:	18d1      	adds	r1, r2, r3
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	6a3a      	ldr	r2, [r7, #32]
 801b182:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b184:	f7ff ff78 	bl	801b078 <prvInsertTimerInActiveList>
 801b188:	4603      	mov	r3, r0
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d069      	beq.n	801b262 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b190:	6a1b      	ldr	r3, [r3, #32]
 801b192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b194:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b19c:	f003 0304 	and.w	r3, r3, #4
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d05e      	beq.n	801b262 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801b1a4:	68fa      	ldr	r2, [r7, #12]
 801b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1a8:	699b      	ldr	r3, [r3, #24]
 801b1aa:	441a      	add	r2, r3
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	9300      	str	r3, [sp, #0]
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	2100      	movs	r1, #0
 801b1b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b1b6:	f7ff fe21 	bl	801adfc <xTimerGenericCommand>
 801b1ba:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 801b1bc:	69fb      	ldr	r3, [r7, #28]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d14f      	bne.n	801b262 <prvProcessReceivedCommands+0x166>
	__asm volatile
 801b1c2:	f04f 0320 	mov.w	r3, #32
 801b1c6:	f383 8811 	msr	BASEPRI, r3
 801b1ca:	f3bf 8f6f 	isb	sy
 801b1ce:	f3bf 8f4f 	dsb	sy
 801b1d2:	61bb      	str	r3, [r7, #24]
}
 801b1d4:	bf00      	nop
 801b1d6:	e7fe      	b.n	801b1d6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b1de:	f023 0301 	bic.w	r3, r3, #1
 801b1e2:	b2da      	uxtb	r2, r3
 801b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801b1ea:	e03a      	b.n	801b262 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b1f2:	f043 0301 	orr.w	r3, r3, #1
 801b1f6:	b2da      	uxtb	r2, r3
 801b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801b1fe:	68fa      	ldr	r2, [r7, #12]
 801b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b202:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b206:	699b      	ldr	r3, [r3, #24]
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d10a      	bne.n	801b222 <prvProcessReceivedCommands+0x126>
	__asm volatile
 801b20c:	f04f 0320 	mov.w	r3, #32
 801b210:	f383 8811 	msr	BASEPRI, r3
 801b214:	f3bf 8f6f 	isb	sy
 801b218:	f3bf 8f4f 	dsb	sy
 801b21c:	617b      	str	r3, [r7, #20]
}
 801b21e:	bf00      	nop
 801b220:	e7fe      	b.n	801b220 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b224:	699a      	ldr	r2, [r3, #24]
 801b226:	6a3b      	ldr	r3, [r7, #32]
 801b228:	18d1      	adds	r1, r2, r3
 801b22a:	6a3b      	ldr	r3, [r7, #32]
 801b22c:	6a3a      	ldr	r2, [r7, #32]
 801b22e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b230:	f7ff ff22 	bl	801b078 <prvInsertTimerInActiveList>
					break;
 801b234:	e015      	b.n	801b262 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b23c:	f003 0302 	and.w	r3, r3, #2
 801b240:	2b00      	cmp	r3, #0
 801b242:	d103      	bne.n	801b24c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 801b244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b246:	f000 fbcb 	bl	801b9e0 <vPortFree>
 801b24a:	e00a      	b.n	801b262 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b24e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b252:	f023 0301 	bic.w	r3, r3, #1
 801b256:	b2da      	uxtb	r2, r3
 801b258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b25a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801b25e:	e000      	b.n	801b262 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801b260:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b262:	4b08      	ldr	r3, [pc, #32]	; (801b284 <prvProcessReceivedCommands+0x188>)
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	f107 0108 	add.w	r1, r7, #8
 801b26a:	2200      	movs	r2, #0
 801b26c:	4618      	mov	r0, r3
 801b26e:	f7fe f85b 	bl	8019328 <xQueueReceive>
 801b272:	4603      	mov	r3, r0
 801b274:	2b00      	cmp	r3, #0
 801b276:	f47f af45 	bne.w	801b104 <prvProcessReceivedCommands+0x8>
	}
}
 801b27a:	bf00      	nop
 801b27c:	bf00      	nop
 801b27e:	3728      	adds	r7, #40	; 0x28
 801b280:	46bd      	mov	sp, r7
 801b282:	bd80      	pop	{r7, pc}
 801b284:	20001224 	.word	0x20001224

0801b288 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801b288:	b580      	push	{r7, lr}
 801b28a:	b088      	sub	sp, #32
 801b28c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b28e:	e048      	b.n	801b322 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b290:	4b2d      	ldr	r3, [pc, #180]	; (801b348 <prvSwitchTimerLists+0xc0>)
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	68db      	ldr	r3, [r3, #12]
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b29a:	4b2b      	ldr	r3, [pc, #172]	; (801b348 <prvSwitchTimerLists+0xc0>)
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	68db      	ldr	r3, [r3, #12]
 801b2a0:	68db      	ldr	r3, [r3, #12]
 801b2a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	3304      	adds	r3, #4
 801b2a8:	4618      	mov	r0, r3
 801b2aa:	f7fd fcf5 	bl	8018c98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	6a1b      	ldr	r3, [r3, #32]
 801b2b2:	68f8      	ldr	r0, [r7, #12]
 801b2b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b2bc:	f003 0304 	and.w	r3, r3, #4
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d02e      	beq.n	801b322 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b2c4:	68fb      	ldr	r3, [r7, #12]
 801b2c6:	699b      	ldr	r3, [r3, #24]
 801b2c8:	693a      	ldr	r2, [r7, #16]
 801b2ca:	4413      	add	r3, r2
 801b2cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801b2ce:	68ba      	ldr	r2, [r7, #8]
 801b2d0:	693b      	ldr	r3, [r7, #16]
 801b2d2:	429a      	cmp	r2, r3
 801b2d4:	d90e      	bls.n	801b2f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b2d6:	68fb      	ldr	r3, [r7, #12]
 801b2d8:	68ba      	ldr	r2, [r7, #8]
 801b2da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	68fa      	ldr	r2, [r7, #12]
 801b2e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b2e2:	4b19      	ldr	r3, [pc, #100]	; (801b348 <prvSwitchTimerLists+0xc0>)
 801b2e4:	681a      	ldr	r2, [r3, #0]
 801b2e6:	68fb      	ldr	r3, [r7, #12]
 801b2e8:	3304      	adds	r3, #4
 801b2ea:	4619      	mov	r1, r3
 801b2ec:	4610      	mov	r0, r2
 801b2ee:	f7fd fc9a 	bl	8018c26 <vListInsert>
 801b2f2:	e016      	b.n	801b322 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	9300      	str	r3, [sp, #0]
 801b2f8:	2300      	movs	r3, #0
 801b2fa:	693a      	ldr	r2, [r7, #16]
 801b2fc:	2100      	movs	r1, #0
 801b2fe:	68f8      	ldr	r0, [r7, #12]
 801b300:	f7ff fd7c 	bl	801adfc <xTimerGenericCommand>
 801b304:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d10a      	bne.n	801b322 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801b30c:	f04f 0320 	mov.w	r3, #32
 801b310:	f383 8811 	msr	BASEPRI, r3
 801b314:	f3bf 8f6f 	isb	sy
 801b318:	f3bf 8f4f 	dsb	sy
 801b31c:	603b      	str	r3, [r7, #0]
}
 801b31e:	bf00      	nop
 801b320:	e7fe      	b.n	801b320 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b322:	4b09      	ldr	r3, [pc, #36]	; (801b348 <prvSwitchTimerLists+0xc0>)
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d1b1      	bne.n	801b290 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801b32c:	4b06      	ldr	r3, [pc, #24]	; (801b348 <prvSwitchTimerLists+0xc0>)
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801b332:	4b06      	ldr	r3, [pc, #24]	; (801b34c <prvSwitchTimerLists+0xc4>)
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	4a04      	ldr	r2, [pc, #16]	; (801b348 <prvSwitchTimerLists+0xc0>)
 801b338:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801b33a:	4a04      	ldr	r2, [pc, #16]	; (801b34c <prvSwitchTimerLists+0xc4>)
 801b33c:	697b      	ldr	r3, [r7, #20]
 801b33e:	6013      	str	r3, [r2, #0]
}
 801b340:	bf00      	nop
 801b342:	3718      	adds	r7, #24
 801b344:	46bd      	mov	sp, r7
 801b346:	bd80      	pop	{r7, pc}
 801b348:	2000121c 	.word	0x2000121c
 801b34c:	20001220 	.word	0x20001220

0801b350 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801b350:	b580      	push	{r7, lr}
 801b352:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801b354:	f000 f95e 	bl	801b614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801b358:	4b12      	ldr	r3, [pc, #72]	; (801b3a4 <prvCheckForValidListAndQueue+0x54>)
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d11d      	bne.n	801b39c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 801b360:	4811      	ldr	r0, [pc, #68]	; (801b3a8 <prvCheckForValidListAndQueue+0x58>)
 801b362:	f7fd fc0f 	bl	8018b84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801b366:	4811      	ldr	r0, [pc, #68]	; (801b3ac <prvCheckForValidListAndQueue+0x5c>)
 801b368:	f7fd fc0c 	bl	8018b84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801b36c:	4b10      	ldr	r3, [pc, #64]	; (801b3b0 <prvCheckForValidListAndQueue+0x60>)
 801b36e:	4a0e      	ldr	r2, [pc, #56]	; (801b3a8 <prvCheckForValidListAndQueue+0x58>)
 801b370:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801b372:	4b10      	ldr	r3, [pc, #64]	; (801b3b4 <prvCheckForValidListAndQueue+0x64>)
 801b374:	4a0d      	ldr	r2, [pc, #52]	; (801b3ac <prvCheckForValidListAndQueue+0x5c>)
 801b376:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801b378:	2200      	movs	r2, #0
 801b37a:	210c      	movs	r1, #12
 801b37c:	2064      	movs	r0, #100	; 0x64
 801b37e:	f7fd fd1d 	bl	8018dbc <xQueueGenericCreate>
 801b382:	4603      	mov	r3, r0
 801b384:	4a07      	ldr	r2, [pc, #28]	; (801b3a4 <prvCheckForValidListAndQueue+0x54>)
 801b386:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801b388:	4b06      	ldr	r3, [pc, #24]	; (801b3a4 <prvCheckForValidListAndQueue+0x54>)
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d005      	beq.n	801b39c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801b390:	4b04      	ldr	r3, [pc, #16]	; (801b3a4 <prvCheckForValidListAndQueue+0x54>)
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	4908      	ldr	r1, [pc, #32]	; (801b3b8 <prvCheckForValidListAndQueue+0x68>)
 801b396:	4618      	mov	r0, r3
 801b398:	f7fe fb5a 	bl	8019a50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b39c:	f000 f96a 	bl	801b674 <vPortExitCritical>
}
 801b3a0:	bf00      	nop
 801b3a2:	bd80      	pop	{r7, pc}
 801b3a4:	20001224 	.word	0x20001224
 801b3a8:	200011f4 	.word	0x200011f4
 801b3ac:	20001208 	.word	0x20001208
 801b3b0:	2000121c 	.word	0x2000121c
 801b3b4:	20001220 	.word	0x20001220
 801b3b8:	080226bc 	.word	0x080226bc

0801b3bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801b3bc:	b480      	push	{r7}
 801b3be:	b085      	sub	sp, #20
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	60f8      	str	r0, [r7, #12]
 801b3c4:	60b9      	str	r1, [r7, #8]
 801b3c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	3b04      	subs	r3, #4
 801b3cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801b3ce:	68fb      	ldr	r3, [r7, #12]
 801b3d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b3d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b3d6:	68fb      	ldr	r3, [r7, #12]
 801b3d8:	3b04      	subs	r3, #4
 801b3da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b3dc:	68bb      	ldr	r3, [r7, #8]
 801b3de:	f023 0201 	bic.w	r2, r3, #1
 801b3e2:	68fb      	ldr	r3, [r7, #12]
 801b3e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	3b04      	subs	r3, #4
 801b3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b3ec:	4a0c      	ldr	r2, [pc, #48]	; (801b420 <pxPortInitialiseStack+0x64>)
 801b3ee:	68fb      	ldr	r3, [r7, #12]
 801b3f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801b3f2:	68fb      	ldr	r3, [r7, #12]
 801b3f4:	3b14      	subs	r3, #20
 801b3f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b3f8:	687a      	ldr	r2, [r7, #4]
 801b3fa:	68fb      	ldr	r3, [r7, #12]
 801b3fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	3b04      	subs	r3, #4
 801b402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	f06f 0202 	mvn.w	r2, #2
 801b40a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	3b20      	subs	r3, #32
 801b410:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801b412:	68fb      	ldr	r3, [r7, #12]
}
 801b414:	4618      	mov	r0, r3
 801b416:	3714      	adds	r7, #20
 801b418:	46bd      	mov	sp, r7
 801b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b41e:	4770      	bx	lr
 801b420:	0801b425 	.word	0x0801b425

0801b424 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b424:	b480      	push	{r7}
 801b426:	b085      	sub	sp, #20
 801b428:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b42a:	2300      	movs	r3, #0
 801b42c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b42e:	4b12      	ldr	r3, [pc, #72]	; (801b478 <prvTaskExitError+0x54>)
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b436:	d00a      	beq.n	801b44e <prvTaskExitError+0x2a>
	__asm volatile
 801b438:	f04f 0320 	mov.w	r3, #32
 801b43c:	f383 8811 	msr	BASEPRI, r3
 801b440:	f3bf 8f6f 	isb	sy
 801b444:	f3bf 8f4f 	dsb	sy
 801b448:	60fb      	str	r3, [r7, #12]
}
 801b44a:	bf00      	nop
 801b44c:	e7fe      	b.n	801b44c <prvTaskExitError+0x28>
	__asm volatile
 801b44e:	f04f 0320 	mov.w	r3, #32
 801b452:	f383 8811 	msr	BASEPRI, r3
 801b456:	f3bf 8f6f 	isb	sy
 801b45a:	f3bf 8f4f 	dsb	sy
 801b45e:	60bb      	str	r3, [r7, #8]
}
 801b460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b462:	bf00      	nop
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d0fc      	beq.n	801b464 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b46a:	bf00      	nop
 801b46c:	bf00      	nop
 801b46e:	3714      	adds	r7, #20
 801b470:	46bd      	mov	sp, r7
 801b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b476:	4770      	bx	lr
 801b478:	200002ac 	.word	0x200002ac
 801b47c:	00000000 	.word	0x00000000

0801b480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b480:	4b07      	ldr	r3, [pc, #28]	; (801b4a0 <pxCurrentTCBConst2>)
 801b482:	6819      	ldr	r1, [r3, #0]
 801b484:	6808      	ldr	r0, [r1, #0]
 801b486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b48a:	f380 8809 	msr	PSP, r0
 801b48e:	f3bf 8f6f 	isb	sy
 801b492:	f04f 0000 	mov.w	r0, #0
 801b496:	f380 8811 	msr	BASEPRI, r0
 801b49a:	4770      	bx	lr
 801b49c:	f3af 8000 	nop.w

0801b4a0 <pxCurrentTCBConst2>:
 801b4a0:	200010c8 	.word	0x200010c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b4a4:	bf00      	nop
 801b4a6:	bf00      	nop

0801b4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b4a8:	4808      	ldr	r0, [pc, #32]	; (801b4cc <prvPortStartFirstTask+0x24>)
 801b4aa:	6800      	ldr	r0, [r0, #0]
 801b4ac:	6800      	ldr	r0, [r0, #0]
 801b4ae:	f380 8808 	msr	MSP, r0
 801b4b2:	f04f 0000 	mov.w	r0, #0
 801b4b6:	f380 8814 	msr	CONTROL, r0
 801b4ba:	b662      	cpsie	i
 801b4bc:	b661      	cpsie	f
 801b4be:	f3bf 8f4f 	dsb	sy
 801b4c2:	f3bf 8f6f 	isb	sy
 801b4c6:	df00      	svc	0
 801b4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b4ca:	bf00      	nop
 801b4cc:	e000ed08 	.word	0xe000ed08

0801b4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b4d0:	b580      	push	{r7, lr}
 801b4d2:	b086      	sub	sp, #24
 801b4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b4d6:	4b46      	ldr	r3, [pc, #280]	; (801b5f0 <xPortStartScheduler+0x120>)
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	4a46      	ldr	r2, [pc, #280]	; (801b5f4 <xPortStartScheduler+0x124>)
 801b4dc:	4293      	cmp	r3, r2
 801b4de:	d10a      	bne.n	801b4f6 <xPortStartScheduler+0x26>
	__asm volatile
 801b4e0:	f04f 0320 	mov.w	r3, #32
 801b4e4:	f383 8811 	msr	BASEPRI, r3
 801b4e8:	f3bf 8f6f 	isb	sy
 801b4ec:	f3bf 8f4f 	dsb	sy
 801b4f0:	613b      	str	r3, [r7, #16]
}
 801b4f2:	bf00      	nop
 801b4f4:	e7fe      	b.n	801b4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b4f6:	4b3e      	ldr	r3, [pc, #248]	; (801b5f0 <xPortStartScheduler+0x120>)
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	4a3f      	ldr	r2, [pc, #252]	; (801b5f8 <xPortStartScheduler+0x128>)
 801b4fc:	4293      	cmp	r3, r2
 801b4fe:	d10a      	bne.n	801b516 <xPortStartScheduler+0x46>
	__asm volatile
 801b500:	f04f 0320 	mov.w	r3, #32
 801b504:	f383 8811 	msr	BASEPRI, r3
 801b508:	f3bf 8f6f 	isb	sy
 801b50c:	f3bf 8f4f 	dsb	sy
 801b510:	60fb      	str	r3, [r7, #12]
}
 801b512:	bf00      	nop
 801b514:	e7fe      	b.n	801b514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b516:	4b39      	ldr	r3, [pc, #228]	; (801b5fc <xPortStartScheduler+0x12c>)
 801b518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b51a:	697b      	ldr	r3, [r7, #20]
 801b51c:	781b      	ldrb	r3, [r3, #0]
 801b51e:	b2db      	uxtb	r3, r3
 801b520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b522:	697b      	ldr	r3, [r7, #20]
 801b524:	22ff      	movs	r2, #255	; 0xff
 801b526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b528:	697b      	ldr	r3, [r7, #20]
 801b52a:	781b      	ldrb	r3, [r3, #0]
 801b52c:	b2db      	uxtb	r3, r3
 801b52e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b530:	78fb      	ldrb	r3, [r7, #3]
 801b532:	b2db      	uxtb	r3, r3
 801b534:	f003 0320 	and.w	r3, r3, #32
 801b538:	b2da      	uxtb	r2, r3
 801b53a:	4b31      	ldr	r3, [pc, #196]	; (801b600 <xPortStartScheduler+0x130>)
 801b53c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b53e:	4b31      	ldr	r3, [pc, #196]	; (801b604 <xPortStartScheduler+0x134>)
 801b540:	2207      	movs	r2, #7
 801b542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b544:	e009      	b.n	801b55a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801b546:	4b2f      	ldr	r3, [pc, #188]	; (801b604 <xPortStartScheduler+0x134>)
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	3b01      	subs	r3, #1
 801b54c:	4a2d      	ldr	r2, [pc, #180]	; (801b604 <xPortStartScheduler+0x134>)
 801b54e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b550:	78fb      	ldrb	r3, [r7, #3]
 801b552:	b2db      	uxtb	r3, r3
 801b554:	005b      	lsls	r3, r3, #1
 801b556:	b2db      	uxtb	r3, r3
 801b558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b55a:	78fb      	ldrb	r3, [r7, #3]
 801b55c:	b2db      	uxtb	r3, r3
 801b55e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b562:	2b80      	cmp	r3, #128	; 0x80
 801b564:	d0ef      	beq.n	801b546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b566:	4b27      	ldr	r3, [pc, #156]	; (801b604 <xPortStartScheduler+0x134>)
 801b568:	681b      	ldr	r3, [r3, #0]
 801b56a:	f1c3 0307 	rsb	r3, r3, #7
 801b56e:	2b04      	cmp	r3, #4
 801b570:	d00a      	beq.n	801b588 <xPortStartScheduler+0xb8>
	__asm volatile
 801b572:	f04f 0320 	mov.w	r3, #32
 801b576:	f383 8811 	msr	BASEPRI, r3
 801b57a:	f3bf 8f6f 	isb	sy
 801b57e:	f3bf 8f4f 	dsb	sy
 801b582:	60bb      	str	r3, [r7, #8]
}
 801b584:	bf00      	nop
 801b586:	e7fe      	b.n	801b586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b588:	4b1e      	ldr	r3, [pc, #120]	; (801b604 <xPortStartScheduler+0x134>)
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	021b      	lsls	r3, r3, #8
 801b58e:	4a1d      	ldr	r2, [pc, #116]	; (801b604 <xPortStartScheduler+0x134>)
 801b590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b592:	4b1c      	ldr	r3, [pc, #112]	; (801b604 <xPortStartScheduler+0x134>)
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b59a:	4a1a      	ldr	r2, [pc, #104]	; (801b604 <xPortStartScheduler+0x134>)
 801b59c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	b2da      	uxtb	r2, r3
 801b5a2:	697b      	ldr	r3, [r7, #20]
 801b5a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b5a6:	4b18      	ldr	r3, [pc, #96]	; (801b608 <xPortStartScheduler+0x138>)
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	4a17      	ldr	r2, [pc, #92]	; (801b608 <xPortStartScheduler+0x138>)
 801b5ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b5b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b5b2:	4b15      	ldr	r3, [pc, #84]	; (801b608 <xPortStartScheduler+0x138>)
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	4a14      	ldr	r2, [pc, #80]	; (801b608 <xPortStartScheduler+0x138>)
 801b5b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b5bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b5be:	f000 f8dd 	bl	801b77c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b5c2:	4b12      	ldr	r3, [pc, #72]	; (801b60c <xPortStartScheduler+0x13c>)
 801b5c4:	2200      	movs	r2, #0
 801b5c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b5c8:	f000 f8fc 	bl	801b7c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b5cc:	4b10      	ldr	r3, [pc, #64]	; (801b610 <xPortStartScheduler+0x140>)
 801b5ce:	681b      	ldr	r3, [r3, #0]
 801b5d0:	4a0f      	ldr	r2, [pc, #60]	; (801b610 <xPortStartScheduler+0x140>)
 801b5d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b5d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b5d8:	f7ff ff66 	bl	801b4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b5dc:	f7fe ff50 	bl	801a480 <vTaskSwitchContext>
	prvTaskExitError();
 801b5e0:	f7ff ff20 	bl	801b424 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b5e4:	2300      	movs	r3, #0
}
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	3718      	adds	r7, #24
 801b5ea:	46bd      	mov	sp, r7
 801b5ec:	bd80      	pop	{r7, pc}
 801b5ee:	bf00      	nop
 801b5f0:	e000ed00 	.word	0xe000ed00
 801b5f4:	410fc271 	.word	0x410fc271
 801b5f8:	410fc270 	.word	0x410fc270
 801b5fc:	e000e400 	.word	0xe000e400
 801b600:	20001230 	.word	0x20001230
 801b604:	20001234 	.word	0x20001234
 801b608:	e000ed20 	.word	0xe000ed20
 801b60c:	200002ac 	.word	0x200002ac
 801b610:	e000ef34 	.word	0xe000ef34

0801b614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b614:	b480      	push	{r7}
 801b616:	b083      	sub	sp, #12
 801b618:	af00      	add	r7, sp, #0
	__asm volatile
 801b61a:	f04f 0320 	mov.w	r3, #32
 801b61e:	f383 8811 	msr	BASEPRI, r3
 801b622:	f3bf 8f6f 	isb	sy
 801b626:	f3bf 8f4f 	dsb	sy
 801b62a:	607b      	str	r3, [r7, #4]
}
 801b62c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b62e:	4b0f      	ldr	r3, [pc, #60]	; (801b66c <vPortEnterCritical+0x58>)
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	3301      	adds	r3, #1
 801b634:	4a0d      	ldr	r2, [pc, #52]	; (801b66c <vPortEnterCritical+0x58>)
 801b636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b638:	4b0c      	ldr	r3, [pc, #48]	; (801b66c <vPortEnterCritical+0x58>)
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	2b01      	cmp	r3, #1
 801b63e:	d10f      	bne.n	801b660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b640:	4b0b      	ldr	r3, [pc, #44]	; (801b670 <vPortEnterCritical+0x5c>)
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	b2db      	uxtb	r3, r3
 801b646:	2b00      	cmp	r3, #0
 801b648:	d00a      	beq.n	801b660 <vPortEnterCritical+0x4c>
	__asm volatile
 801b64a:	f04f 0320 	mov.w	r3, #32
 801b64e:	f383 8811 	msr	BASEPRI, r3
 801b652:	f3bf 8f6f 	isb	sy
 801b656:	f3bf 8f4f 	dsb	sy
 801b65a:	603b      	str	r3, [r7, #0]
}
 801b65c:	bf00      	nop
 801b65e:	e7fe      	b.n	801b65e <vPortEnterCritical+0x4a>
	}
}
 801b660:	bf00      	nop
 801b662:	370c      	adds	r7, #12
 801b664:	46bd      	mov	sp, r7
 801b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b66a:	4770      	bx	lr
 801b66c:	200002ac 	.word	0x200002ac
 801b670:	e000ed04 	.word	0xe000ed04

0801b674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b674:	b480      	push	{r7}
 801b676:	b083      	sub	sp, #12
 801b678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b67a:	4b12      	ldr	r3, [pc, #72]	; (801b6c4 <vPortExitCritical+0x50>)
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d10a      	bne.n	801b698 <vPortExitCritical+0x24>
	__asm volatile
 801b682:	f04f 0320 	mov.w	r3, #32
 801b686:	f383 8811 	msr	BASEPRI, r3
 801b68a:	f3bf 8f6f 	isb	sy
 801b68e:	f3bf 8f4f 	dsb	sy
 801b692:	607b      	str	r3, [r7, #4]
}
 801b694:	bf00      	nop
 801b696:	e7fe      	b.n	801b696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801b698:	4b0a      	ldr	r3, [pc, #40]	; (801b6c4 <vPortExitCritical+0x50>)
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	3b01      	subs	r3, #1
 801b69e:	4a09      	ldr	r2, [pc, #36]	; (801b6c4 <vPortExitCritical+0x50>)
 801b6a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b6a2:	4b08      	ldr	r3, [pc, #32]	; (801b6c4 <vPortExitCritical+0x50>)
 801b6a4:	681b      	ldr	r3, [r3, #0]
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d105      	bne.n	801b6b6 <vPortExitCritical+0x42>
 801b6aa:	2300      	movs	r3, #0
 801b6ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b6ae:	683b      	ldr	r3, [r7, #0]
 801b6b0:	f383 8811 	msr	BASEPRI, r3
}
 801b6b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b6b6:	bf00      	nop
 801b6b8:	370c      	adds	r7, #12
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6c0:	4770      	bx	lr
 801b6c2:	bf00      	nop
 801b6c4:	200002ac 	.word	0x200002ac
	...

0801b6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b6d0:	f3ef 8009 	mrs	r0, PSP
 801b6d4:	f3bf 8f6f 	isb	sy
 801b6d8:	4b15      	ldr	r3, [pc, #84]	; (801b730 <pxCurrentTCBConst>)
 801b6da:	681a      	ldr	r2, [r3, #0]
 801b6dc:	f01e 0f10 	tst.w	lr, #16
 801b6e0:	bf08      	it	eq
 801b6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6ea:	6010      	str	r0, [r2, #0]
 801b6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b6f0:	f04f 0020 	mov.w	r0, #32
 801b6f4:	f380 8811 	msr	BASEPRI, r0
 801b6f8:	f3bf 8f4f 	dsb	sy
 801b6fc:	f3bf 8f6f 	isb	sy
 801b700:	f7fe febe 	bl	801a480 <vTaskSwitchContext>
 801b704:	f04f 0000 	mov.w	r0, #0
 801b708:	f380 8811 	msr	BASEPRI, r0
 801b70c:	bc09      	pop	{r0, r3}
 801b70e:	6819      	ldr	r1, [r3, #0]
 801b710:	6808      	ldr	r0, [r1, #0]
 801b712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b716:	f01e 0f10 	tst.w	lr, #16
 801b71a:	bf08      	it	eq
 801b71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b720:	f380 8809 	msr	PSP, r0
 801b724:	f3bf 8f6f 	isb	sy
 801b728:	4770      	bx	lr
 801b72a:	bf00      	nop
 801b72c:	f3af 8000 	nop.w

0801b730 <pxCurrentTCBConst>:
 801b730:	200010c8 	.word	0x200010c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b734:	bf00      	nop
 801b736:	bf00      	nop

0801b738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b738:	b580      	push	{r7, lr}
 801b73a:	b082      	sub	sp, #8
 801b73c:	af00      	add	r7, sp, #0
	__asm volatile
 801b73e:	f04f 0320 	mov.w	r3, #32
 801b742:	f383 8811 	msr	BASEPRI, r3
 801b746:	f3bf 8f6f 	isb	sy
 801b74a:	f3bf 8f4f 	dsb	sy
 801b74e:	607b      	str	r3, [r7, #4]
}
 801b750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b752:	f7fe fdc1 	bl	801a2d8 <xTaskIncrementTick>
 801b756:	4603      	mov	r3, r0
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d003      	beq.n	801b764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b75c:	4b06      	ldr	r3, [pc, #24]	; (801b778 <xPortSysTickHandler+0x40>)
 801b75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b762:	601a      	str	r2, [r3, #0]
 801b764:	2300      	movs	r3, #0
 801b766:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b768:	683b      	ldr	r3, [r7, #0]
 801b76a:	f383 8811 	msr	BASEPRI, r3
}
 801b76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b770:	bf00      	nop
 801b772:	3708      	adds	r7, #8
 801b774:	46bd      	mov	sp, r7
 801b776:	bd80      	pop	{r7, pc}
 801b778:	e000ed04 	.word	0xe000ed04

0801b77c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b77c:	b480      	push	{r7}
 801b77e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b780:	4b0b      	ldr	r3, [pc, #44]	; (801b7b0 <vPortSetupTimerInterrupt+0x34>)
 801b782:	2200      	movs	r2, #0
 801b784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b786:	4b0b      	ldr	r3, [pc, #44]	; (801b7b4 <vPortSetupTimerInterrupt+0x38>)
 801b788:	2200      	movs	r2, #0
 801b78a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b78c:	4b0a      	ldr	r3, [pc, #40]	; (801b7b8 <vPortSetupTimerInterrupt+0x3c>)
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	4a0a      	ldr	r2, [pc, #40]	; (801b7bc <vPortSetupTimerInterrupt+0x40>)
 801b792:	fba2 2303 	umull	r2, r3, r2, r3
 801b796:	099b      	lsrs	r3, r3, #6
 801b798:	4a09      	ldr	r2, [pc, #36]	; (801b7c0 <vPortSetupTimerInterrupt+0x44>)
 801b79a:	3b01      	subs	r3, #1
 801b79c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b79e:	4b04      	ldr	r3, [pc, #16]	; (801b7b0 <vPortSetupTimerInterrupt+0x34>)
 801b7a0:	2207      	movs	r2, #7
 801b7a2:	601a      	str	r2, [r3, #0]
}
 801b7a4:	bf00      	nop
 801b7a6:	46bd      	mov	sp, r7
 801b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7ac:	4770      	bx	lr
 801b7ae:	bf00      	nop
 801b7b0:	e000e010 	.word	0xe000e010
 801b7b4:	e000e018 	.word	0xe000e018
 801b7b8:	20000038 	.word	0x20000038
 801b7bc:	10624dd3 	.word	0x10624dd3
 801b7c0:	e000e014 	.word	0xe000e014

0801b7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b7d4 <vPortEnableVFP+0x10>
 801b7c8:	6801      	ldr	r1, [r0, #0]
 801b7ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b7ce:	6001      	str	r1, [r0, #0]
 801b7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b7d2:	bf00      	nop
 801b7d4:	e000ed88 	.word	0xe000ed88

0801b7d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b7d8:	b480      	push	{r7}
 801b7da:	b085      	sub	sp, #20
 801b7dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b7de:	f3ef 8305 	mrs	r3, IPSR
 801b7e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b7e4:	68fb      	ldr	r3, [r7, #12]
 801b7e6:	2b0f      	cmp	r3, #15
 801b7e8:	d914      	bls.n	801b814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b7ea:	4a17      	ldr	r2, [pc, #92]	; (801b848 <vPortValidateInterruptPriority+0x70>)
 801b7ec:	68fb      	ldr	r3, [r7, #12]
 801b7ee:	4413      	add	r3, r2
 801b7f0:	781b      	ldrb	r3, [r3, #0]
 801b7f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b7f4:	4b15      	ldr	r3, [pc, #84]	; (801b84c <vPortValidateInterruptPriority+0x74>)
 801b7f6:	781b      	ldrb	r3, [r3, #0]
 801b7f8:	7afa      	ldrb	r2, [r7, #11]
 801b7fa:	429a      	cmp	r2, r3
 801b7fc:	d20a      	bcs.n	801b814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801b7fe:	f04f 0320 	mov.w	r3, #32
 801b802:	f383 8811 	msr	BASEPRI, r3
 801b806:	f3bf 8f6f 	isb	sy
 801b80a:	f3bf 8f4f 	dsb	sy
 801b80e:	607b      	str	r3, [r7, #4]
}
 801b810:	bf00      	nop
 801b812:	e7fe      	b.n	801b812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b814:	4b0e      	ldr	r3, [pc, #56]	; (801b850 <vPortValidateInterruptPriority+0x78>)
 801b816:	681b      	ldr	r3, [r3, #0]
 801b818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b81c:	4b0d      	ldr	r3, [pc, #52]	; (801b854 <vPortValidateInterruptPriority+0x7c>)
 801b81e:	681b      	ldr	r3, [r3, #0]
 801b820:	429a      	cmp	r2, r3
 801b822:	d90a      	bls.n	801b83a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801b824:	f04f 0320 	mov.w	r3, #32
 801b828:	f383 8811 	msr	BASEPRI, r3
 801b82c:	f3bf 8f6f 	isb	sy
 801b830:	f3bf 8f4f 	dsb	sy
 801b834:	603b      	str	r3, [r7, #0]
}
 801b836:	bf00      	nop
 801b838:	e7fe      	b.n	801b838 <vPortValidateInterruptPriority+0x60>
	}
 801b83a:	bf00      	nop
 801b83c:	3714      	adds	r7, #20
 801b83e:	46bd      	mov	sp, r7
 801b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b844:	4770      	bx	lr
 801b846:	bf00      	nop
 801b848:	e000e3f0 	.word	0xe000e3f0
 801b84c:	20001230 	.word	0x20001230
 801b850:	e000ed0c 	.word	0xe000ed0c
 801b854:	20001234 	.word	0x20001234

0801b858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b858:	b580      	push	{r7, lr}
 801b85a:	b08a      	sub	sp, #40	; 0x28
 801b85c:	af00      	add	r7, sp, #0
 801b85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b860:	2300      	movs	r3, #0
 801b862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b864:	f7fe fc7e 	bl	801a164 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b868:	4b58      	ldr	r3, [pc, #352]	; (801b9cc <pvPortMalloc+0x174>)
 801b86a:	681b      	ldr	r3, [r3, #0]
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d101      	bne.n	801b874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b870:	f000 f910 	bl	801ba94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b874:	4b56      	ldr	r3, [pc, #344]	; (801b9d0 <pvPortMalloc+0x178>)
 801b876:	681a      	ldr	r2, [r3, #0]
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	4013      	ands	r3, r2
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	f040 808e 	bne.w	801b99e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d01d      	beq.n	801b8c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801b888:	2208      	movs	r2, #8
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	4413      	add	r3, r2
 801b88e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	f003 0307 	and.w	r3, r3, #7
 801b896:	2b00      	cmp	r3, #0
 801b898:	d014      	beq.n	801b8c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	f023 0307 	bic.w	r3, r3, #7
 801b8a0:	3308      	adds	r3, #8
 801b8a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	f003 0307 	and.w	r3, r3, #7
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d00a      	beq.n	801b8c4 <pvPortMalloc+0x6c>
	__asm volatile
 801b8ae:	f04f 0320 	mov.w	r3, #32
 801b8b2:	f383 8811 	msr	BASEPRI, r3
 801b8b6:	f3bf 8f6f 	isb	sy
 801b8ba:	f3bf 8f4f 	dsb	sy
 801b8be:	617b      	str	r3, [r7, #20]
}
 801b8c0:	bf00      	nop
 801b8c2:	e7fe      	b.n	801b8c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d069      	beq.n	801b99e <pvPortMalloc+0x146>
 801b8ca:	4b42      	ldr	r3, [pc, #264]	; (801b9d4 <pvPortMalloc+0x17c>)
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	687a      	ldr	r2, [r7, #4]
 801b8d0:	429a      	cmp	r2, r3
 801b8d2:	d864      	bhi.n	801b99e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b8d4:	4b40      	ldr	r3, [pc, #256]	; (801b9d8 <pvPortMalloc+0x180>)
 801b8d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b8d8:	4b3f      	ldr	r3, [pc, #252]	; (801b9d8 <pvPortMalloc+0x180>)
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b8de:	e004      	b.n	801b8ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8ec:	685b      	ldr	r3, [r3, #4]
 801b8ee:	687a      	ldr	r2, [r7, #4]
 801b8f0:	429a      	cmp	r2, r3
 801b8f2:	d903      	bls.n	801b8fc <pvPortMalloc+0xa4>
 801b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d1f1      	bne.n	801b8e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b8fc:	4b33      	ldr	r3, [pc, #204]	; (801b9cc <pvPortMalloc+0x174>)
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b902:	429a      	cmp	r2, r3
 801b904:	d04b      	beq.n	801b99e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b906:	6a3b      	ldr	r3, [r7, #32]
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	2208      	movs	r2, #8
 801b90c:	4413      	add	r3, r2
 801b90e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b912:	681a      	ldr	r2, [r3, #0]
 801b914:	6a3b      	ldr	r3, [r7, #32]
 801b916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b91a:	685a      	ldr	r2, [r3, #4]
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	1ad2      	subs	r2, r2, r3
 801b920:	2308      	movs	r3, #8
 801b922:	005b      	lsls	r3, r3, #1
 801b924:	429a      	cmp	r2, r3
 801b926:	d91f      	bls.n	801b968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	4413      	add	r3, r2
 801b92e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b930:	69bb      	ldr	r3, [r7, #24]
 801b932:	f003 0307 	and.w	r3, r3, #7
 801b936:	2b00      	cmp	r3, #0
 801b938:	d00a      	beq.n	801b950 <pvPortMalloc+0xf8>
	__asm volatile
 801b93a:	f04f 0320 	mov.w	r3, #32
 801b93e:	f383 8811 	msr	BASEPRI, r3
 801b942:	f3bf 8f6f 	isb	sy
 801b946:	f3bf 8f4f 	dsb	sy
 801b94a:	613b      	str	r3, [r7, #16]
}
 801b94c:	bf00      	nop
 801b94e:	e7fe      	b.n	801b94e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b952:	685a      	ldr	r2, [r3, #4]
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	1ad2      	subs	r2, r2, r3
 801b958:	69bb      	ldr	r3, [r7, #24]
 801b95a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b95e:	687a      	ldr	r2, [r7, #4]
 801b960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b962:	69b8      	ldr	r0, [r7, #24]
 801b964:	f000 f8f8 	bl	801bb58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b968:	4b1a      	ldr	r3, [pc, #104]	; (801b9d4 <pvPortMalloc+0x17c>)
 801b96a:	681a      	ldr	r2, [r3, #0]
 801b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b96e:	685b      	ldr	r3, [r3, #4]
 801b970:	1ad3      	subs	r3, r2, r3
 801b972:	4a18      	ldr	r2, [pc, #96]	; (801b9d4 <pvPortMalloc+0x17c>)
 801b974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b976:	4b17      	ldr	r3, [pc, #92]	; (801b9d4 <pvPortMalloc+0x17c>)
 801b978:	681a      	ldr	r2, [r3, #0]
 801b97a:	4b18      	ldr	r3, [pc, #96]	; (801b9dc <pvPortMalloc+0x184>)
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	429a      	cmp	r2, r3
 801b980:	d203      	bcs.n	801b98a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b982:	4b14      	ldr	r3, [pc, #80]	; (801b9d4 <pvPortMalloc+0x17c>)
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	4a15      	ldr	r2, [pc, #84]	; (801b9dc <pvPortMalloc+0x184>)
 801b988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b98c:	685a      	ldr	r2, [r3, #4]
 801b98e:	4b10      	ldr	r3, [pc, #64]	; (801b9d0 <pvPortMalloc+0x178>)
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	431a      	orrs	r2, r3
 801b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b99a:	2200      	movs	r2, #0
 801b99c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b99e:	f7fe fbef 	bl	801a180 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b9a2:	69fb      	ldr	r3, [r7, #28]
 801b9a4:	f003 0307 	and.w	r3, r3, #7
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d00a      	beq.n	801b9c2 <pvPortMalloc+0x16a>
	__asm volatile
 801b9ac:	f04f 0320 	mov.w	r3, #32
 801b9b0:	f383 8811 	msr	BASEPRI, r3
 801b9b4:	f3bf 8f6f 	isb	sy
 801b9b8:	f3bf 8f4f 	dsb	sy
 801b9bc:	60fb      	str	r3, [r7, #12]
}
 801b9be:	bf00      	nop
 801b9c0:	e7fe      	b.n	801b9c0 <pvPortMalloc+0x168>
	return pvReturn;
 801b9c2:	69fb      	ldr	r3, [r7, #28]
}
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	3728      	adds	r7, #40	; 0x28
 801b9c8:	46bd      	mov	sp, r7
 801b9ca:	bd80      	pop	{r7, pc}
 801b9cc:	20010240 	.word	0x20010240
 801b9d0:	2001024c 	.word	0x2001024c
 801b9d4:	20010244 	.word	0x20010244
 801b9d8:	20010238 	.word	0x20010238
 801b9dc:	20010248 	.word	0x20010248

0801b9e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b9e0:	b580      	push	{r7, lr}
 801b9e2:	b086      	sub	sp, #24
 801b9e4:	af00      	add	r7, sp, #0
 801b9e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d048      	beq.n	801ba84 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b9f2:	2308      	movs	r3, #8
 801b9f4:	425b      	negs	r3, r3
 801b9f6:	697a      	ldr	r2, [r7, #20]
 801b9f8:	4413      	add	r3, r2
 801b9fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b9fc:	697b      	ldr	r3, [r7, #20]
 801b9fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ba00:	693b      	ldr	r3, [r7, #16]
 801ba02:	685a      	ldr	r2, [r3, #4]
 801ba04:	4b21      	ldr	r3, [pc, #132]	; (801ba8c <vPortFree+0xac>)
 801ba06:	681b      	ldr	r3, [r3, #0]
 801ba08:	4013      	ands	r3, r2
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d10a      	bne.n	801ba24 <vPortFree+0x44>
	__asm volatile
 801ba0e:	f04f 0320 	mov.w	r3, #32
 801ba12:	f383 8811 	msr	BASEPRI, r3
 801ba16:	f3bf 8f6f 	isb	sy
 801ba1a:	f3bf 8f4f 	dsb	sy
 801ba1e:	60fb      	str	r3, [r7, #12]
}
 801ba20:	bf00      	nop
 801ba22:	e7fe      	b.n	801ba22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801ba24:	693b      	ldr	r3, [r7, #16]
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d00a      	beq.n	801ba42 <vPortFree+0x62>
	__asm volatile
 801ba2c:	f04f 0320 	mov.w	r3, #32
 801ba30:	f383 8811 	msr	BASEPRI, r3
 801ba34:	f3bf 8f6f 	isb	sy
 801ba38:	f3bf 8f4f 	dsb	sy
 801ba3c:	60bb      	str	r3, [r7, #8]
}
 801ba3e:	bf00      	nop
 801ba40:	e7fe      	b.n	801ba40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ba42:	693b      	ldr	r3, [r7, #16]
 801ba44:	685a      	ldr	r2, [r3, #4]
 801ba46:	4b11      	ldr	r3, [pc, #68]	; (801ba8c <vPortFree+0xac>)
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	4013      	ands	r3, r2
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	d019      	beq.n	801ba84 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801ba50:	693b      	ldr	r3, [r7, #16]
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d115      	bne.n	801ba84 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801ba58:	693b      	ldr	r3, [r7, #16]
 801ba5a:	685a      	ldr	r2, [r3, #4]
 801ba5c:	4b0b      	ldr	r3, [pc, #44]	; (801ba8c <vPortFree+0xac>)
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	43db      	mvns	r3, r3
 801ba62:	401a      	ands	r2, r3
 801ba64:	693b      	ldr	r3, [r7, #16]
 801ba66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801ba68:	f7fe fb7c 	bl	801a164 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801ba6c:	693b      	ldr	r3, [r7, #16]
 801ba6e:	685a      	ldr	r2, [r3, #4]
 801ba70:	4b07      	ldr	r3, [pc, #28]	; (801ba90 <vPortFree+0xb0>)
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	4413      	add	r3, r2
 801ba76:	4a06      	ldr	r2, [pc, #24]	; (801ba90 <vPortFree+0xb0>)
 801ba78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801ba7a:	6938      	ldr	r0, [r7, #16]
 801ba7c:	f000 f86c 	bl	801bb58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801ba80:	f7fe fb7e 	bl	801a180 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801ba84:	bf00      	nop
 801ba86:	3718      	adds	r7, #24
 801ba88:	46bd      	mov	sp, r7
 801ba8a:	bd80      	pop	{r7, pc}
 801ba8c:	2001024c 	.word	0x2001024c
 801ba90:	20010244 	.word	0x20010244

0801ba94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801ba94:	b480      	push	{r7}
 801ba96:	b085      	sub	sp, #20
 801ba98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801ba9a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 801ba9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801baa0:	4b27      	ldr	r3, [pc, #156]	; (801bb40 <prvHeapInit+0xac>)
 801baa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	f003 0307 	and.w	r3, r3, #7
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d00c      	beq.n	801bac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	3307      	adds	r3, #7
 801bab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bab4:	68fb      	ldr	r3, [r7, #12]
 801bab6:	f023 0307 	bic.w	r3, r3, #7
 801baba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801babc:	68ba      	ldr	r2, [r7, #8]
 801babe:	68fb      	ldr	r3, [r7, #12]
 801bac0:	1ad3      	subs	r3, r2, r3
 801bac2:	4a1f      	ldr	r2, [pc, #124]	; (801bb40 <prvHeapInit+0xac>)
 801bac4:	4413      	add	r3, r2
 801bac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801bac8:	68fb      	ldr	r3, [r7, #12]
 801baca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801bacc:	4a1d      	ldr	r2, [pc, #116]	; (801bb44 <prvHeapInit+0xb0>)
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801bad2:	4b1c      	ldr	r3, [pc, #112]	; (801bb44 <prvHeapInit+0xb0>)
 801bad4:	2200      	movs	r2, #0
 801bad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	68ba      	ldr	r2, [r7, #8]
 801badc:	4413      	add	r3, r2
 801bade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801bae0:	2208      	movs	r2, #8
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	1a9b      	subs	r3, r3, r2
 801bae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bae8:	68fb      	ldr	r3, [r7, #12]
 801baea:	f023 0307 	bic.w	r3, r3, #7
 801baee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	4a15      	ldr	r2, [pc, #84]	; (801bb48 <prvHeapInit+0xb4>)
 801baf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801baf6:	4b14      	ldr	r3, [pc, #80]	; (801bb48 <prvHeapInit+0xb4>)
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	2200      	movs	r2, #0
 801bafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801bafe:	4b12      	ldr	r3, [pc, #72]	; (801bb48 <prvHeapInit+0xb4>)
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	2200      	movs	r2, #0
 801bb04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801bb0a:	683b      	ldr	r3, [r7, #0]
 801bb0c:	68fa      	ldr	r2, [r7, #12]
 801bb0e:	1ad2      	subs	r2, r2, r3
 801bb10:	683b      	ldr	r3, [r7, #0]
 801bb12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801bb14:	4b0c      	ldr	r3, [pc, #48]	; (801bb48 <prvHeapInit+0xb4>)
 801bb16:	681a      	ldr	r2, [r3, #0]
 801bb18:	683b      	ldr	r3, [r7, #0]
 801bb1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bb1c:	683b      	ldr	r3, [r7, #0]
 801bb1e:	685b      	ldr	r3, [r3, #4]
 801bb20:	4a0a      	ldr	r2, [pc, #40]	; (801bb4c <prvHeapInit+0xb8>)
 801bb22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801bb24:	683b      	ldr	r3, [r7, #0]
 801bb26:	685b      	ldr	r3, [r3, #4]
 801bb28:	4a09      	ldr	r2, [pc, #36]	; (801bb50 <prvHeapInit+0xbc>)
 801bb2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801bb2c:	4b09      	ldr	r3, [pc, #36]	; (801bb54 <prvHeapInit+0xc0>)
 801bb2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801bb32:	601a      	str	r2, [r3, #0]
}
 801bb34:	bf00      	nop
 801bb36:	3714      	adds	r7, #20
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb3e:	4770      	bx	lr
 801bb40:	20001238 	.word	0x20001238
 801bb44:	20010238 	.word	0x20010238
 801bb48:	20010240 	.word	0x20010240
 801bb4c:	20010248 	.word	0x20010248
 801bb50:	20010244 	.word	0x20010244
 801bb54:	2001024c 	.word	0x2001024c

0801bb58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801bb58:	b480      	push	{r7}
 801bb5a:	b085      	sub	sp, #20
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801bb60:	4b28      	ldr	r3, [pc, #160]	; (801bc04 <prvInsertBlockIntoFreeList+0xac>)
 801bb62:	60fb      	str	r3, [r7, #12]
 801bb64:	e002      	b.n	801bb6c <prvInsertBlockIntoFreeList+0x14>
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	681b      	ldr	r3, [r3, #0]
 801bb6a:	60fb      	str	r3, [r7, #12]
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	687a      	ldr	r2, [r7, #4]
 801bb72:	429a      	cmp	r2, r3
 801bb74:	d8f7      	bhi.n	801bb66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801bb7a:	68fb      	ldr	r3, [r7, #12]
 801bb7c:	685b      	ldr	r3, [r3, #4]
 801bb7e:	68ba      	ldr	r2, [r7, #8]
 801bb80:	4413      	add	r3, r2
 801bb82:	687a      	ldr	r2, [r7, #4]
 801bb84:	429a      	cmp	r2, r3
 801bb86:	d108      	bne.n	801bb9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	685a      	ldr	r2, [r3, #4]
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	685b      	ldr	r3, [r3, #4]
 801bb90:	441a      	add	r2, r3
 801bb92:	68fb      	ldr	r3, [r7, #12]
 801bb94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	685b      	ldr	r3, [r3, #4]
 801bba2:	68ba      	ldr	r2, [r7, #8]
 801bba4:	441a      	add	r2, r3
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	429a      	cmp	r2, r3
 801bbac:	d118      	bne.n	801bbe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801bbae:	68fb      	ldr	r3, [r7, #12]
 801bbb0:	681a      	ldr	r2, [r3, #0]
 801bbb2:	4b15      	ldr	r3, [pc, #84]	; (801bc08 <prvInsertBlockIntoFreeList+0xb0>)
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	429a      	cmp	r2, r3
 801bbb8:	d00d      	beq.n	801bbd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	685a      	ldr	r2, [r3, #4]
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	685b      	ldr	r3, [r3, #4]
 801bbc4:	441a      	add	r2, r3
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801bbca:	68fb      	ldr	r3, [r7, #12]
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	681a      	ldr	r2, [r3, #0]
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	601a      	str	r2, [r3, #0]
 801bbd4:	e008      	b.n	801bbe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801bbd6:	4b0c      	ldr	r3, [pc, #48]	; (801bc08 <prvInsertBlockIntoFreeList+0xb0>)
 801bbd8:	681a      	ldr	r2, [r3, #0]
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	601a      	str	r2, [r3, #0]
 801bbde:	e003      	b.n	801bbe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801bbe0:	68fb      	ldr	r3, [r7, #12]
 801bbe2:	681a      	ldr	r2, [r3, #0]
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801bbe8:	68fa      	ldr	r2, [r7, #12]
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	429a      	cmp	r2, r3
 801bbee:	d002      	beq.n	801bbf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	687a      	ldr	r2, [r7, #4]
 801bbf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801bbf6:	bf00      	nop
 801bbf8:	3714      	adds	r7, #20
 801bbfa:	46bd      	mov	sp, r7
 801bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc00:	4770      	bx	lr
 801bc02:	bf00      	nop
 801bc04:	20010238 	.word	0x20010238
 801bc08:	20010240 	.word	0x20010240

0801bc0c <parson_strndup>:
static int    json_serialize_string(const char *string, char *buf);
static int    append_indent(char *buf, int level);
static int    append_string(char *buf, const char *string);

/* Various */
static char * parson_strndup(const char *string, size_t n) {
 801bc0c:	b580      	push	{r7, lr}
 801bc0e:	b084      	sub	sp, #16
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	6078      	str	r0, [r7, #4]
 801bc14:	6039      	str	r1, [r7, #0]
    char *output_string = (char*)parson_malloc(n + 1);
 801bc16:	4b0d      	ldr	r3, [pc, #52]	; (801bc4c <parson_strndup+0x40>)
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	683a      	ldr	r2, [r7, #0]
 801bc1c:	3201      	adds	r2, #1
 801bc1e:	4610      	mov	r0, r2
 801bc20:	4798      	blx	r3
 801bc22:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 801bc24:	68fb      	ldr	r3, [r7, #12]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d101      	bne.n	801bc2e <parson_strndup+0x22>
        return NULL;
 801bc2a:	2300      	movs	r3, #0
 801bc2c:	e00a      	b.n	801bc44 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 801bc2e:	68fa      	ldr	r2, [r7, #12]
 801bc30:	683b      	ldr	r3, [r7, #0]
 801bc32:	4413      	add	r3, r2
 801bc34:	2200      	movs	r2, #0
 801bc36:	701a      	strb	r2, [r3, #0]
    strncpy(output_string, string, n);
 801bc38:	683a      	ldr	r2, [r7, #0]
 801bc3a:	6879      	ldr	r1, [r7, #4]
 801bc3c:	68f8      	ldr	r0, [r7, #12]
 801bc3e:	f003 fcdd 	bl	801f5fc <strncpy>
    return output_string;
 801bc42:	68fb      	ldr	r3, [r7, #12]
}
 801bc44:	4618      	mov	r0, r3
 801bc46:	3710      	adds	r7, #16
 801bc48:	46bd      	mov	sp, r7
 801bc4a:	bd80      	pop	{r7, pc}
 801bc4c:	200002b0 	.word	0x200002b0

0801bc50 <hex_char_to_int>:

static char * parson_strdup(const char *string) {
    return parson_strndup(string, strlen(string));
}

static int hex_char_to_int(char c) {
 801bc50:	b480      	push	{r7}
 801bc52:	b083      	sub	sp, #12
 801bc54:	af00      	add	r7, sp, #0
 801bc56:	4603      	mov	r3, r0
 801bc58:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 801bc5a:	79fb      	ldrb	r3, [r7, #7]
 801bc5c:	2b2f      	cmp	r3, #47	; 0x2f
 801bc5e:	d905      	bls.n	801bc6c <hex_char_to_int+0x1c>
 801bc60:	79fb      	ldrb	r3, [r7, #7]
 801bc62:	2b39      	cmp	r3, #57	; 0x39
 801bc64:	d802      	bhi.n	801bc6c <hex_char_to_int+0x1c>
        return c - '0';
 801bc66:	79fb      	ldrb	r3, [r7, #7]
 801bc68:	3b30      	subs	r3, #48	; 0x30
 801bc6a:	e013      	b.n	801bc94 <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 801bc6c:	79fb      	ldrb	r3, [r7, #7]
 801bc6e:	2b60      	cmp	r3, #96	; 0x60
 801bc70:	d905      	bls.n	801bc7e <hex_char_to_int+0x2e>
 801bc72:	79fb      	ldrb	r3, [r7, #7]
 801bc74:	2b66      	cmp	r3, #102	; 0x66
 801bc76:	d802      	bhi.n	801bc7e <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 801bc78:	79fb      	ldrb	r3, [r7, #7]
 801bc7a:	3b57      	subs	r3, #87	; 0x57
 801bc7c:	e00a      	b.n	801bc94 <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 801bc7e:	79fb      	ldrb	r3, [r7, #7]
 801bc80:	2b40      	cmp	r3, #64	; 0x40
 801bc82:	d905      	bls.n	801bc90 <hex_char_to_int+0x40>
 801bc84:	79fb      	ldrb	r3, [r7, #7]
 801bc86:	2b46      	cmp	r3, #70	; 0x46
 801bc88:	d802      	bhi.n	801bc90 <hex_char_to_int+0x40>
        return c - 'A' + 10;
 801bc8a:	79fb      	ldrb	r3, [r7, #7]
 801bc8c:	3b37      	subs	r3, #55	; 0x37
 801bc8e:	e001      	b.n	801bc94 <hex_char_to_int+0x44>
    }
    return -1;
 801bc90:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bc94:	4618      	mov	r0, r3
 801bc96:	370c      	adds	r7, #12
 801bc98:	46bd      	mov	sp, r7
 801bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc9e:	4770      	bx	lr

0801bca0 <parse_utf16_hex>:

static int parse_utf16_hex(const char *s, unsigned int *result) {
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b086      	sub	sp, #24
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]
 801bca8:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	781b      	ldrb	r3, [r3, #0]
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d00e      	beq.n	801bcd0 <parse_utf16_hex+0x30>
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	3301      	adds	r3, #1
 801bcb6:	781b      	ldrb	r3, [r3, #0]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d009      	beq.n	801bcd0 <parse_utf16_hex+0x30>
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	3302      	adds	r3, #2
 801bcc0:	781b      	ldrb	r3, [r3, #0]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d004      	beq.n	801bcd0 <parse_utf16_hex+0x30>
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	3303      	adds	r3, #3
 801bcca:	781b      	ldrb	r3, [r3, #0]
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d101      	bne.n	801bcd4 <parse_utf16_hex+0x34>
        return 0;
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	e03a      	b.n	801bd4a <parse_utf16_hex+0xaa>
    }
    x1 = hex_char_to_int(s[0]);
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	781b      	ldrb	r3, [r3, #0]
 801bcd8:	4618      	mov	r0, r3
 801bcda:	f7ff ffb9 	bl	801bc50 <hex_char_to_int>
 801bcde:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	3301      	adds	r3, #1
 801bce4:	781b      	ldrb	r3, [r3, #0]
 801bce6:	4618      	mov	r0, r3
 801bce8:	f7ff ffb2 	bl	801bc50 <hex_char_to_int>
 801bcec:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	3302      	adds	r3, #2
 801bcf2:	781b      	ldrb	r3, [r3, #0]
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	f7ff ffab 	bl	801bc50 <hex_char_to_int>
 801bcfa:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	3303      	adds	r3, #3
 801bd00:	781b      	ldrb	r3, [r3, #0]
 801bd02:	4618      	mov	r0, r3
 801bd04:	f7ff ffa4 	bl	801bc50 <hex_char_to_int>
 801bd08:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 801bd0a:	697b      	ldr	r3, [r7, #20]
 801bd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd10:	d00b      	beq.n	801bd2a <parse_utf16_hex+0x8a>
 801bd12:	693b      	ldr	r3, [r7, #16]
 801bd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd18:	d007      	beq.n	801bd2a <parse_utf16_hex+0x8a>
 801bd1a:	68fb      	ldr	r3, [r7, #12]
 801bd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd20:	d003      	beq.n	801bd2a <parse_utf16_hex+0x8a>
 801bd22:	68bb      	ldr	r3, [r7, #8]
 801bd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd28:	d101      	bne.n	801bd2e <parse_utf16_hex+0x8e>
        return 0;
 801bd2a:	2300      	movs	r3, #0
 801bd2c:	e00d      	b.n	801bd4a <parse_utf16_hex+0xaa>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 801bd2e:	697b      	ldr	r3, [r7, #20]
 801bd30:	031a      	lsls	r2, r3, #12
 801bd32:	693b      	ldr	r3, [r7, #16]
 801bd34:	021b      	lsls	r3, r3, #8
 801bd36:	431a      	orrs	r2, r3
 801bd38:	68fb      	ldr	r3, [r7, #12]
 801bd3a:	011b      	lsls	r3, r3, #4
 801bd3c:	431a      	orrs	r2, r3
 801bd3e:	68bb      	ldr	r3, [r7, #8]
 801bd40:	4313      	orrs	r3, r2
 801bd42:	461a      	mov	r2, r3
 801bd44:	683b      	ldr	r3, [r7, #0]
 801bd46:	601a      	str	r2, [r3, #0]
    return 1;
 801bd48:	2301      	movs	r3, #1
}
 801bd4a:	4618      	mov	r0, r3
 801bd4c:	3718      	adds	r7, #24
 801bd4e:	46bd      	mov	sp, r7
 801bd50:	bd80      	pop	{r7, pc}

0801bd52 <num_bytes_in_utf8_sequence>:

static int num_bytes_in_utf8_sequence(unsigned char c) {
 801bd52:	b480      	push	{r7}
 801bd54:	b083      	sub	sp, #12
 801bd56:	af00      	add	r7, sp, #0
 801bd58:	4603      	mov	r3, r0
 801bd5a:	71fb      	strb	r3, [r7, #7]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 801bd5c:	79fb      	ldrb	r3, [r7, #7]
 801bd5e:	2bc0      	cmp	r3, #192	; 0xc0
 801bd60:	d00a      	beq.n	801bd78 <num_bytes_in_utf8_sequence+0x26>
 801bd62:	79fb      	ldrb	r3, [r7, #7]
 801bd64:	2bc1      	cmp	r3, #193	; 0xc1
 801bd66:	d007      	beq.n	801bd78 <num_bytes_in_utf8_sequence+0x26>
 801bd68:	79fb      	ldrb	r3, [r7, #7]
 801bd6a:	2bf4      	cmp	r3, #244	; 0xf4
 801bd6c:	d804      	bhi.n	801bd78 <num_bytes_in_utf8_sequence+0x26>
 801bd6e:	79fb      	ldrb	r3, [r7, #7]
 801bd70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bd74:	2b80      	cmp	r3, #128	; 0x80
 801bd76:	d101      	bne.n	801bd7c <num_bytes_in_utf8_sequence+0x2a>
        return 0;
 801bd78:	2300      	movs	r3, #0
 801bd7a:	e01b      	b.n	801bdb4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 801bd7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	db01      	blt.n	801bd88 <num_bytes_in_utf8_sequence+0x36>
        return 1;
 801bd84:	2301      	movs	r3, #1
 801bd86:	e015      	b.n	801bdb4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 801bd88:	79fb      	ldrb	r3, [r7, #7]
 801bd8a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801bd8e:	2bc0      	cmp	r3, #192	; 0xc0
 801bd90:	d101      	bne.n	801bd96 <num_bytes_in_utf8_sequence+0x44>
        return 2;
 801bd92:	2302      	movs	r3, #2
 801bd94:	e00e      	b.n	801bdb4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 801bd96:	79fb      	ldrb	r3, [r7, #7]
 801bd98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bd9c:	2be0      	cmp	r3, #224	; 0xe0
 801bd9e:	d101      	bne.n	801bda4 <num_bytes_in_utf8_sequence+0x52>
        return 3;
 801bda0:	2303      	movs	r3, #3
 801bda2:	e007      	b.n	801bdb4 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 801bda4:	79fb      	ldrb	r3, [r7, #7]
 801bda6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801bdaa:	2bf0      	cmp	r3, #240	; 0xf0
 801bdac:	d101      	bne.n	801bdb2 <num_bytes_in_utf8_sequence+0x60>
        return 4;
 801bdae:	2304      	movs	r3, #4
 801bdb0:	e000      	b.n	801bdb4 <num_bytes_in_utf8_sequence+0x62>
    }
    return 0; /* won't happen */
 801bdb2:	2300      	movs	r3, #0
}
 801bdb4:	4618      	mov	r0, r3
 801bdb6:	370c      	adds	r7, #12
 801bdb8:	46bd      	mov	sp, r7
 801bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdbe:	4770      	bx	lr

0801bdc0 <verify_utf8_sequence>:

static int verify_utf8_sequence(const unsigned char *string, int *len) {
 801bdc0:	b580      	push	{r7, lr}
 801bdc2:	b084      	sub	sp, #16
 801bdc4:	af00      	add	r7, sp, #0
 801bdc6:	6078      	str	r0, [r7, #4]
 801bdc8:	6039      	str	r1, [r7, #0]
    unsigned int cp = 0;
 801bdca:	2300      	movs	r3, #0
 801bdcc:	60fb      	str	r3, [r7, #12]
    *len = num_bytes_in_utf8_sequence(string[0]);
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	781b      	ldrb	r3, [r3, #0]
 801bdd2:	4618      	mov	r0, r3
 801bdd4:	f7ff ffbd 	bl	801bd52 <num_bytes_in_utf8_sequence>
 801bdd8:	4602      	mov	r2, r0
 801bdda:	683b      	ldr	r3, [r7, #0]
 801bddc:	601a      	str	r2, [r3, #0]

    if (*len == 1) {
 801bdde:	683b      	ldr	r3, [r7, #0]
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	2b01      	cmp	r3, #1
 801bde4:	d103      	bne.n	801bdee <verify_utf8_sequence+0x2e>
        cp = string[0];
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	781b      	ldrb	r3, [r3, #0]
 801bdea:	60fb      	str	r3, [r7, #12]
 801bdec:	e07f      	b.n	801beee <verify_utf8_sequence+0x12e>
    } else if (*len == 2 && IS_CONT(string[1])) {
 801bdee:	683b      	ldr	r3, [r7, #0]
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	2b02      	cmp	r3, #2
 801bdf4:	d115      	bne.n	801be22 <verify_utf8_sequence+0x62>
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	3301      	adds	r3, #1
 801bdfa:	781b      	ldrb	r3, [r3, #0]
 801bdfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801be00:	2b80      	cmp	r3, #128	; 0x80
 801be02:	d10e      	bne.n	801be22 <verify_utf8_sequence+0x62>
        cp = string[0] & 0x1F;
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	781b      	ldrb	r3, [r3, #0]
 801be08:	f003 031f 	and.w	r3, r3, #31
 801be0c:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	019a      	lsls	r2, r3, #6
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	3301      	adds	r3, #1
 801be16:	781b      	ldrb	r3, [r3, #0]
 801be18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801be1c:	4313      	orrs	r3, r2
 801be1e:	60fb      	str	r3, [r7, #12]
 801be20:	e065      	b.n	801beee <verify_utf8_sequence+0x12e>
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 801be22:	683b      	ldr	r3, [r7, #0]
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	2b03      	cmp	r3, #3
 801be28:	d125      	bne.n	801be76 <verify_utf8_sequence+0xb6>
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	3301      	adds	r3, #1
 801be2e:	781b      	ldrb	r3, [r3, #0]
 801be30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801be34:	2b80      	cmp	r3, #128	; 0x80
 801be36:	d11e      	bne.n	801be76 <verify_utf8_sequence+0xb6>
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	3302      	adds	r3, #2
 801be3c:	781b      	ldrb	r3, [r3, #0]
 801be3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801be42:	2b80      	cmp	r3, #128	; 0x80
 801be44:	d117      	bne.n	801be76 <verify_utf8_sequence+0xb6>
        cp = ((unsigned char)string[0]) & 0xF;
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	781b      	ldrb	r3, [r3, #0]
 801be4a:	f003 030f 	and.w	r3, r3, #15
 801be4e:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	019a      	lsls	r2, r3, #6
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	3301      	adds	r3, #1
 801be58:	781b      	ldrb	r3, [r3, #0]
 801be5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801be5e:	4313      	orrs	r3, r2
 801be60:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801be62:	68fb      	ldr	r3, [r7, #12]
 801be64:	019a      	lsls	r2, r3, #6
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	3302      	adds	r3, #2
 801be6a:	781b      	ldrb	r3, [r3, #0]
 801be6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801be70:	4313      	orrs	r3, r2
 801be72:	60fb      	str	r3, [r7, #12]
 801be74:	e03b      	b.n	801beee <verify_utf8_sequence+0x12e>
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 801be76:	683b      	ldr	r3, [r7, #0]
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	2b04      	cmp	r3, #4
 801be7c:	d135      	bne.n	801beea <verify_utf8_sequence+0x12a>
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	3301      	adds	r3, #1
 801be82:	781b      	ldrb	r3, [r3, #0]
 801be84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801be88:	2b80      	cmp	r3, #128	; 0x80
 801be8a:	d12e      	bne.n	801beea <verify_utf8_sequence+0x12a>
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	3302      	adds	r3, #2
 801be90:	781b      	ldrb	r3, [r3, #0]
 801be92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801be96:	2b80      	cmp	r3, #128	; 0x80
 801be98:	d127      	bne.n	801beea <verify_utf8_sequence+0x12a>
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	3303      	adds	r3, #3
 801be9e:	781b      	ldrb	r3, [r3, #0]
 801bea0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bea4:	2b80      	cmp	r3, #128	; 0x80
 801bea6:	d120      	bne.n	801beea <verify_utf8_sequence+0x12a>
        cp = string[0] & 0x7;
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	781b      	ldrb	r3, [r3, #0]
 801beac:	f003 0307 	and.w	r3, r3, #7
 801beb0:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	019a      	lsls	r2, r3, #6
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	3301      	adds	r3, #1
 801beba:	781b      	ldrb	r3, [r3, #0]
 801bebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bec0:	4313      	orrs	r3, r2
 801bec2:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801bec4:	68fb      	ldr	r3, [r7, #12]
 801bec6:	019a      	lsls	r2, r3, #6
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	3302      	adds	r3, #2
 801becc:	781b      	ldrb	r3, [r3, #0]
 801bece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bed2:	4313      	orrs	r3, r2
 801bed4:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[3] & 0x3F);
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	019a      	lsls	r2, r3, #6
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	3303      	adds	r3, #3
 801bede:	781b      	ldrb	r3, [r3, #0]
 801bee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bee4:	4313      	orrs	r3, r2
 801bee6:	60fb      	str	r3, [r7, #12]
 801bee8:	e001      	b.n	801beee <verify_utf8_sequence+0x12e>
    } else {
        return 0;
 801beea:	2300      	movs	r3, #0
 801beec:	e029      	b.n	801bf42 <verify_utf8_sequence+0x182>
    }

    /* overlong encodings */
    if ((cp < 0x80    && *len > 1) ||
 801beee:	68fb      	ldr	r3, [r7, #12]
 801bef0:	2b7f      	cmp	r3, #127	; 0x7f
 801bef2:	d803      	bhi.n	801befc <verify_utf8_sequence+0x13c>
 801bef4:	683b      	ldr	r3, [r7, #0]
 801bef6:	681b      	ldr	r3, [r3, #0]
 801bef8:	2b01      	cmp	r3, #1
 801befa:	dc0f      	bgt.n	801bf1c <verify_utf8_sequence+0x15c>
 801befc:	68fb      	ldr	r3, [r7, #12]
 801befe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bf02:	d203      	bcs.n	801bf0c <verify_utf8_sequence+0x14c>
        (cp < 0x800   && *len > 2) ||
 801bf04:	683b      	ldr	r3, [r7, #0]
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	2b02      	cmp	r3, #2
 801bf0a:	dc07      	bgt.n	801bf1c <verify_utf8_sequence+0x15c>
 801bf0c:	68fb      	ldr	r3, [r7, #12]
 801bf0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bf12:	d205      	bcs.n	801bf20 <verify_utf8_sequence+0x160>
        (cp < 0x10000 && *len > 3)) {
 801bf14:	683b      	ldr	r3, [r7, #0]
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	2b03      	cmp	r3, #3
 801bf1a:	dd01      	ble.n	801bf20 <verify_utf8_sequence+0x160>
        return 0;
 801bf1c:	2300      	movs	r3, #0
 801bf1e:	e010      	b.n	801bf42 <verify_utf8_sequence+0x182>
    }

    /* invalid unicode */
    if (cp > 0x10FFFF) {
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 801bf26:	d301      	bcc.n	801bf2c <verify_utf8_sequence+0x16c>
        return 0;
 801bf28:	2300      	movs	r3, #0
 801bf2a:	e00a      	b.n	801bf42 <verify_utf8_sequence+0x182>
    }

    /* surrogate halves */
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801bf32:	d305      	bcc.n	801bf40 <verify_utf8_sequence+0x180>
 801bf34:	68fb      	ldr	r3, [r7, #12]
 801bf36:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801bf3a:	d201      	bcs.n	801bf40 <verify_utf8_sequence+0x180>
        return 0;
 801bf3c:	2300      	movs	r3, #0
 801bf3e:	e000      	b.n	801bf42 <verify_utf8_sequence+0x182>
    }

    return 1;
 801bf40:	2301      	movs	r3, #1
}
 801bf42:	4618      	mov	r0, r3
 801bf44:	3710      	adds	r7, #16
 801bf46:	46bd      	mov	sp, r7
 801bf48:	bd80      	pop	{r7, pc}

0801bf4a <is_valid_utf8>:

static int is_valid_utf8(const char *string, size_t string_len) {
 801bf4a:	b580      	push	{r7, lr}
 801bf4c:	b084      	sub	sp, #16
 801bf4e:	af00      	add	r7, sp, #0
 801bf50:	6078      	str	r0, [r7, #4]
 801bf52:	6039      	str	r1, [r7, #0]
    int len = 0;
 801bf54:	2300      	movs	r3, #0
 801bf56:	60bb      	str	r3, [r7, #8]
    const char *string_end =  string + string_len;
 801bf58:	687a      	ldr	r2, [r7, #4]
 801bf5a:	683b      	ldr	r3, [r7, #0]
 801bf5c:	4413      	add	r3, r2
 801bf5e:	60fb      	str	r3, [r7, #12]
    while (string < string_end) {
 801bf60:	e00f      	b.n	801bf82 <is_valid_utf8+0x38>
        if (!verify_utf8_sequence((const unsigned char*)string, &len)) {
 801bf62:	f107 0308 	add.w	r3, r7, #8
 801bf66:	4619      	mov	r1, r3
 801bf68:	6878      	ldr	r0, [r7, #4]
 801bf6a:	f7ff ff29 	bl	801bdc0 <verify_utf8_sequence>
 801bf6e:	4603      	mov	r3, r0
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d101      	bne.n	801bf78 <is_valid_utf8+0x2e>
            return 0;
 801bf74:	2300      	movs	r3, #0
 801bf76:	e009      	b.n	801bf8c <is_valid_utf8+0x42>
        }
        string += len;
 801bf78:	68bb      	ldr	r3, [r7, #8]
 801bf7a:	461a      	mov	r2, r3
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	4413      	add	r3, r2
 801bf80:	607b      	str	r3, [r7, #4]
    while (string < string_end) {
 801bf82:	687a      	ldr	r2, [r7, #4]
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	429a      	cmp	r2, r3
 801bf88:	d3eb      	bcc.n	801bf62 <is_valid_utf8+0x18>
    }
    return 1;
 801bf8a:	2301      	movs	r3, #1
}
 801bf8c:	4618      	mov	r0, r3
 801bf8e:	3710      	adds	r7, #16
 801bf90:	46bd      	mov	sp, r7
 801bf92:	bd80      	pop	{r7, pc}

0801bf94 <is_decimal>:

static int is_decimal(const char *string, size_t length) {
 801bf94:	b580      	push	{r7, lr}
 801bf96:	b082      	sub	sp, #8
 801bf98:	af00      	add	r7, sp, #0
 801bf9a:	6078      	str	r0, [r7, #4]
 801bf9c:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 801bf9e:	683b      	ldr	r3, [r7, #0]
 801bfa0:	2b01      	cmp	r3, #1
 801bfa2:	d90a      	bls.n	801bfba <is_decimal+0x26>
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	781b      	ldrb	r3, [r3, #0]
 801bfa8:	2b30      	cmp	r3, #48	; 0x30
 801bfaa:	d106      	bne.n	801bfba <is_decimal+0x26>
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	3301      	adds	r3, #1
 801bfb0:	781b      	ldrb	r3, [r3, #0]
 801bfb2:	2b2e      	cmp	r3, #46	; 0x2e
 801bfb4:	d001      	beq.n	801bfba <is_decimal+0x26>
        return 0;
 801bfb6:	2300      	movs	r3, #0
 801bfb8:	e024      	b.n	801c004 <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 801bfba:	683b      	ldr	r3, [r7, #0]
 801bfbc:	2b02      	cmp	r3, #2
 801bfbe:	d91b      	bls.n	801bff8 <is_decimal+0x64>
 801bfc0:	2202      	movs	r2, #2
 801bfc2:	4912      	ldr	r1, [pc, #72]	; (801c00c <is_decimal+0x78>)
 801bfc4:	6878      	ldr	r0, [r7, #4]
 801bfc6:	f003 fb07 	bl	801f5d8 <strncmp>
 801bfca:	4603      	mov	r3, r0
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d113      	bne.n	801bff8 <is_decimal+0x64>
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	3302      	adds	r3, #2
 801bfd4:	781b      	ldrb	r3, [r3, #0]
 801bfd6:	2b2e      	cmp	r3, #46	; 0x2e
 801bfd8:	d00e      	beq.n	801bff8 <is_decimal+0x64>
        return 0;
 801bfda:	2300      	movs	r3, #0
 801bfdc:	e012      	b.n	801c004 <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 801bfde:	687a      	ldr	r2, [r7, #4]
 801bfe0:	683b      	ldr	r3, [r7, #0]
 801bfe2:	4413      	add	r3, r2
 801bfe4:	781b      	ldrb	r3, [r3, #0]
 801bfe6:	4619      	mov	r1, r3
 801bfe8:	4809      	ldr	r0, [pc, #36]	; (801c010 <is_decimal+0x7c>)
 801bfea:	f003 fae8 	bl	801f5be <strchr>
 801bfee:	4603      	mov	r3, r0
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d001      	beq.n	801bff8 <is_decimal+0x64>
            return 0;
 801bff4:	2300      	movs	r3, #0
 801bff6:	e005      	b.n	801c004 <is_decimal+0x70>
    while (length--) {
 801bff8:	683b      	ldr	r3, [r7, #0]
 801bffa:	1e5a      	subs	r2, r3, #1
 801bffc:	603a      	str	r2, [r7, #0]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d1ed      	bne.n	801bfde <is_decimal+0x4a>
        }
    }
    return 1;
 801c002:	2301      	movs	r3, #1
}
 801c004:	4618      	mov	r0, r3
 801c006:	3708      	adds	r7, #8
 801c008:	46bd      	mov	sp, r7
 801c00a:	bd80      	pop	{r7, pc}
 801c00c:	080226c4 	.word	0x080226c4
 801c010:	080226c8 	.word	0x080226c8

0801c014 <json_object_init>:
        string++;
    }
}

/* JSON Object */
static JSON_Object * json_object_init(JSON_Value *wrapping_value) {
 801c014:	b580      	push	{r7, lr}
 801c016:	b084      	sub	sp, #16
 801c018:	af00      	add	r7, sp, #0
 801c01a:	6078      	str	r0, [r7, #4]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 801c01c:	4b0e      	ldr	r3, [pc, #56]	; (801c058 <json_object_init+0x44>)
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	2014      	movs	r0, #20
 801c022:	4798      	blx	r3
 801c024:	60f8      	str	r0, [r7, #12]
    if (new_obj == NULL) {
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d101      	bne.n	801c030 <json_object_init+0x1c>
        return NULL;
 801c02c:	2300      	movs	r3, #0
 801c02e:	e00f      	b.n	801c050 <json_object_init+0x3c>
    }
    new_obj->wrapping_value = wrapping_value;
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	687a      	ldr	r2, [r7, #4]
 801c034:	601a      	str	r2, [r3, #0]
    new_obj->names = (char**)NULL;
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	2200      	movs	r2, #0
 801c03a:	605a      	str	r2, [r3, #4]
    new_obj->values = (JSON_Value**)NULL;
 801c03c:	68fb      	ldr	r3, [r7, #12]
 801c03e:	2200      	movs	r2, #0
 801c040:	609a      	str	r2, [r3, #8]
    new_obj->capacity = 0;
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	2200      	movs	r2, #0
 801c046:	611a      	str	r2, [r3, #16]
    new_obj->count = 0;
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	2200      	movs	r2, #0
 801c04c:	60da      	str	r2, [r3, #12]
    return new_obj;
 801c04e:	68fb      	ldr	r3, [r7, #12]
}
 801c050:	4618      	mov	r0, r3
 801c052:	3710      	adds	r7, #16
 801c054:	46bd      	mov	sp, r7
 801c056:	bd80      	pop	{r7, pc}
 801c058:	200002b0 	.word	0x200002b0

0801c05c <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
 801c05c:	b580      	push	{r7, lr}
 801c05e:	b084      	sub	sp, #16
 801c060:	af00      	add	r7, sp, #0
 801c062:	60f8      	str	r0, [r7, #12]
 801c064:	60b9      	str	r1, [r7, #8]
 801c066:	607a      	str	r2, [r7, #4]
    if (name == NULL) {
 801c068:	68bb      	ldr	r3, [r7, #8]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d102      	bne.n	801c074 <json_object_add+0x18>
        return JSONFailure;
 801c06e:	f04f 33ff 	mov.w	r3, #4294967295
 801c072:	e009      	b.n	801c088 <json_object_add+0x2c>
    }
    return json_object_addn(object, name, strlen(name), value);
 801c074:	68b8      	ldr	r0, [r7, #8]
 801c076:	f7e4 f8cd 	bl	8000214 <strlen>
 801c07a:	4602      	mov	r2, r0
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	68b9      	ldr	r1, [r7, #8]
 801c080:	68f8      	ldr	r0, [r7, #12]
 801c082:	f000 f805 	bl	801c090 <json_object_addn>
 801c086:	4603      	mov	r3, r0
}
 801c088:	4618      	mov	r0, r3
 801c08a:	3710      	adds	r7, #16
 801c08c:	46bd      	mov	sp, r7
 801c08e:	bd80      	pop	{r7, pc}

0801c090 <json_object_addn>:

static JSON_Status json_object_addn(JSON_Object *object, const char *name, size_t name_len, JSON_Value *value) {
 801c090:	b590      	push	{r4, r7, lr}
 801c092:	b087      	sub	sp, #28
 801c094:	af00      	add	r7, sp, #0
 801c096:	60f8      	str	r0, [r7, #12]
 801c098:	60b9      	str	r1, [r7, #8]
 801c09a:	607a      	str	r2, [r7, #4]
 801c09c:	603b      	str	r3, [r7, #0]
    size_t index = 0;
 801c09e:	2300      	movs	r3, #0
 801c0a0:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d005      	beq.n	801c0b4 <json_object_addn+0x24>
 801c0a8:	68bb      	ldr	r3, [r7, #8]
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d002      	beq.n	801c0b4 <json_object_addn+0x24>
 801c0ae:	683b      	ldr	r3, [r7, #0]
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d102      	bne.n	801c0ba <json_object_addn+0x2a>
        return JSONFailure;
 801c0b4:	f04f 33ff 	mov.w	r3, #4294967295
 801c0b8:	e04e      	b.n	801c158 <json_object_addn+0xc8>
    }
    if (json_object_getn_value(object, name, name_len) != NULL) {
 801c0ba:	687a      	ldr	r2, [r7, #4]
 801c0bc:	68b9      	ldr	r1, [r7, #8]
 801c0be:	68f8      	ldr	r0, [r7, #12]
 801c0c0:	f000 f8c8 	bl	801c254 <json_object_getn_value>
 801c0c4:	4603      	mov	r3, r0
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	d002      	beq.n	801c0d0 <json_object_addn+0x40>
        return JSONFailure;
 801c0ca:	f04f 33ff 	mov.w	r3, #4294967295
 801c0ce:	e043      	b.n	801c158 <json_object_addn+0xc8>
    }
    if (object->count >= object->capacity) {
 801c0d0:	68fb      	ldr	r3, [r7, #12]
 801c0d2:	68da      	ldr	r2, [r3, #12]
 801c0d4:	68fb      	ldr	r3, [r7, #12]
 801c0d6:	691b      	ldr	r3, [r3, #16]
 801c0d8:	429a      	cmp	r2, r3
 801c0da:	d311      	bcc.n	801c100 <json_object_addn+0x70>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
 801c0dc:	68fb      	ldr	r3, [r7, #12]
 801c0de:	691b      	ldr	r3, [r3, #16]
 801c0e0:	005b      	lsls	r3, r3, #1
 801c0e2:	2b10      	cmp	r3, #16
 801c0e4:	bf38      	it	cc
 801c0e6:	2310      	movcc	r3, #16
 801c0e8:	613b      	str	r3, [r7, #16]
        if (json_object_resize(object, new_capacity) == JSONFailure) {
 801c0ea:	6939      	ldr	r1, [r7, #16]
 801c0ec:	68f8      	ldr	r0, [r7, #12]
 801c0ee:	f000 f837 	bl	801c160 <json_object_resize>
 801c0f2:	4603      	mov	r3, r0
 801c0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c0f8:	d102      	bne.n	801c100 <json_object_addn+0x70>
            return JSONFailure;
 801c0fa:	f04f 33ff 	mov.w	r3, #4294967295
 801c0fe:	e02b      	b.n	801c158 <json_object_addn+0xc8>
        }
    }
    index = object->count;
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	68db      	ldr	r3, [r3, #12]
 801c104:	617b      	str	r3, [r7, #20]
    object->names[index] = parson_strndup(name, name_len);
 801c106:	68fb      	ldr	r3, [r7, #12]
 801c108:	685a      	ldr	r2, [r3, #4]
 801c10a:	697b      	ldr	r3, [r7, #20]
 801c10c:	009b      	lsls	r3, r3, #2
 801c10e:	18d4      	adds	r4, r2, r3
 801c110:	6879      	ldr	r1, [r7, #4]
 801c112:	68b8      	ldr	r0, [r7, #8]
 801c114:	f7ff fd7a 	bl	801bc0c <parson_strndup>
 801c118:	4603      	mov	r3, r0
 801c11a:	6023      	str	r3, [r4, #0]
    if (object->names[index] == NULL) {
 801c11c:	68fb      	ldr	r3, [r7, #12]
 801c11e:	685a      	ldr	r2, [r3, #4]
 801c120:	697b      	ldr	r3, [r7, #20]
 801c122:	009b      	lsls	r3, r3, #2
 801c124:	4413      	add	r3, r2
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d102      	bne.n	801c132 <json_object_addn+0xa2>
        return JSONFailure;
 801c12c:	f04f 33ff 	mov.w	r3, #4294967295
 801c130:	e012      	b.n	801c158 <json_object_addn+0xc8>
    }
    value->parent = json_object_get_wrapping_value(object);
 801c132:	68f8      	ldr	r0, [r7, #12]
 801c134:	f002 f8d4 	bl	801e2e0 <json_object_get_wrapping_value>
 801c138:	4602      	mov	r2, r0
 801c13a:	683b      	ldr	r3, [r7, #0]
 801c13c:	601a      	str	r2, [r3, #0]
    object->values[index] = value;
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	689a      	ldr	r2, [r3, #8]
 801c142:	697b      	ldr	r3, [r7, #20]
 801c144:	009b      	lsls	r3, r3, #2
 801c146:	4413      	add	r3, r2
 801c148:	683a      	ldr	r2, [r7, #0]
 801c14a:	601a      	str	r2, [r3, #0]
    object->count++;
 801c14c:	68fb      	ldr	r3, [r7, #12]
 801c14e:	68db      	ldr	r3, [r3, #12]
 801c150:	1c5a      	adds	r2, r3, #1
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801c156:	2300      	movs	r3, #0
}
 801c158:	4618      	mov	r0, r3
 801c15a:	371c      	adds	r7, #28
 801c15c:	46bd      	mov	sp, r7
 801c15e:	bd90      	pop	{r4, r7, pc}

0801c160 <json_object_resize>:

static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
 801c160:	b580      	push	{r7, lr}
 801c162:	b084      	sub	sp, #16
 801c164:	af00      	add	r7, sp, #0
 801c166:	6078      	str	r0, [r7, #4]
 801c168:	6039      	str	r1, [r7, #0]
    char **temp_names = NULL;
 801c16a:	2300      	movs	r3, #0
 801c16c:	60fb      	str	r3, [r7, #12]
    JSON_Value **temp_values = NULL;
 801c16e:	2300      	movs	r3, #0
 801c170:	60bb      	str	r3, [r7, #8]

    if ((object->names == NULL && object->values != NULL) ||
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	685b      	ldr	r3, [r3, #4]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d103      	bne.n	801c182 <json_object_resize+0x22>
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	689b      	ldr	r3, [r3, #8]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d10a      	bne.n	801c198 <json_object_resize+0x38>
        (object->names != NULL && object->values == NULL) ||
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	685b      	ldr	r3, [r3, #4]
    if ((object->names == NULL && object->values != NULL) ||
 801c186:	2b00      	cmp	r3, #0
 801c188:	d003      	beq.n	801c192 <json_object_resize+0x32>
        (object->names != NULL && object->values == NULL) ||
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	689b      	ldr	r3, [r3, #8]
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d002      	beq.n	801c198 <json_object_resize+0x38>
 801c192:	683b      	ldr	r3, [r7, #0]
 801c194:	2b00      	cmp	r3, #0
 801c196:	d102      	bne.n	801c19e <json_object_resize+0x3e>
        new_capacity == 0) {
            return JSONFailure; /* Shouldn't happen */
 801c198:	f04f 33ff 	mov.w	r3, #4294967295
 801c19c:	e051      	b.n	801c242 <json_object_resize+0xe2>
    }
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
 801c19e:	4b2b      	ldr	r3, [pc, #172]	; (801c24c <json_object_resize+0xec>)
 801c1a0:	681b      	ldr	r3, [r3, #0]
 801c1a2:	683a      	ldr	r2, [r7, #0]
 801c1a4:	0092      	lsls	r2, r2, #2
 801c1a6:	4610      	mov	r0, r2
 801c1a8:	4798      	blx	r3
 801c1aa:	60f8      	str	r0, [r7, #12]
    if (temp_names == NULL) {
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d102      	bne.n	801c1b8 <json_object_resize+0x58>
        return JSONFailure;
 801c1b2:	f04f 33ff 	mov.w	r3, #4294967295
 801c1b6:	e044      	b.n	801c242 <json_object_resize+0xe2>
    }
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801c1b8:	4b24      	ldr	r3, [pc, #144]	; (801c24c <json_object_resize+0xec>)
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	683a      	ldr	r2, [r7, #0]
 801c1be:	0092      	lsls	r2, r2, #2
 801c1c0:	4610      	mov	r0, r2
 801c1c2:	4798      	blx	r3
 801c1c4:	60b8      	str	r0, [r7, #8]
    if (temp_values == NULL) {
 801c1c6:	68bb      	ldr	r3, [r7, #8]
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	d106      	bne.n	801c1da <json_object_resize+0x7a>
        parson_free(temp_names);
 801c1cc:	4b20      	ldr	r3, [pc, #128]	; (801c250 <json_object_resize+0xf0>)
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	68f8      	ldr	r0, [r7, #12]
 801c1d2:	4798      	blx	r3
        return JSONFailure;
 801c1d4:	f04f 33ff 	mov.w	r3, #4294967295
 801c1d8:	e033      	b.n	801c242 <json_object_resize+0xe2>
    }
    if (object->names != NULL && object->values != NULL && object->count > 0) {
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	685b      	ldr	r3, [r3, #4]
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	d019      	beq.n	801c216 <json_object_resize+0xb6>
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	689b      	ldr	r3, [r3, #8]
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d015      	beq.n	801c216 <json_object_resize+0xb6>
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	68db      	ldr	r3, [r3, #12]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d011      	beq.n	801c216 <json_object_resize+0xb6>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	6859      	ldr	r1, [r3, #4]
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	68db      	ldr	r3, [r3, #12]
 801c1fa:	009b      	lsls	r3, r3, #2
 801c1fc:	461a      	mov	r2, r3
 801c1fe:	68f8      	ldr	r0, [r7, #12]
 801c200:	f003 f880 	bl	801f304 <memcpy>
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	6899      	ldr	r1, [r3, #8]
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	68db      	ldr	r3, [r3, #12]
 801c20c:	009b      	lsls	r3, r3, #2
 801c20e:	461a      	mov	r2, r3
 801c210:	68b8      	ldr	r0, [r7, #8]
 801c212:	f003 f877 	bl	801f304 <memcpy>
    }
    parson_free(object->names);
 801c216:	4b0e      	ldr	r3, [pc, #56]	; (801c250 <json_object_resize+0xf0>)
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	687a      	ldr	r2, [r7, #4]
 801c21c:	6852      	ldr	r2, [r2, #4]
 801c21e:	4610      	mov	r0, r2
 801c220:	4798      	blx	r3
    parson_free(object->values);
 801c222:	4b0b      	ldr	r3, [pc, #44]	; (801c250 <json_object_resize+0xf0>)
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	687a      	ldr	r2, [r7, #4]
 801c228:	6892      	ldr	r2, [r2, #8]
 801c22a:	4610      	mov	r0, r2
 801c22c:	4798      	blx	r3
    object->names = temp_names;
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	68fa      	ldr	r2, [r7, #12]
 801c232:	605a      	str	r2, [r3, #4]
    object->values = temp_values;
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	68ba      	ldr	r2, [r7, #8]
 801c238:	609a      	str	r2, [r3, #8]
    object->capacity = new_capacity;
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	683a      	ldr	r2, [r7, #0]
 801c23e:	611a      	str	r2, [r3, #16]
    return JSONSuccess;
 801c240:	2300      	movs	r3, #0
}
 801c242:	4618      	mov	r0, r3
 801c244:	3710      	adds	r7, #16
 801c246:	46bd      	mov	sp, r7
 801c248:	bd80      	pop	{r7, pc}
 801c24a:	bf00      	nop
 801c24c:	200002b0 	.word	0x200002b0
 801c250:	200002b4 	.word	0x200002b4

0801c254 <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 801c254:	b580      	push	{r7, lr}
 801c256:	b086      	sub	sp, #24
 801c258:	af00      	add	r7, sp, #0
 801c25a:	60f8      	str	r0, [r7, #12]
 801c25c:	60b9      	str	r1, [r7, #8]
 801c25e:	607a      	str	r2, [r7, #4]
    size_t i, name_length;
    for (i = 0; i < json_object_get_count(object); i++) {
 801c260:	2300      	movs	r3, #0
 801c262:	617b      	str	r3, [r7, #20]
 801c264:	e026      	b.n	801c2b4 <json_object_getn_value+0x60>
        name_length = strlen(object->names[i]);
 801c266:	68fb      	ldr	r3, [r7, #12]
 801c268:	685a      	ldr	r2, [r3, #4]
 801c26a:	697b      	ldr	r3, [r7, #20]
 801c26c:	009b      	lsls	r3, r3, #2
 801c26e:	4413      	add	r3, r2
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	4618      	mov	r0, r3
 801c274:	f7e3 ffce 	bl	8000214 <strlen>
 801c278:	6138      	str	r0, [r7, #16]
        if (name_length != name_len) {
 801c27a:	693a      	ldr	r2, [r7, #16]
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	429a      	cmp	r2, r3
 801c280:	d114      	bne.n	801c2ac <json_object_getn_value+0x58>
            continue;
        }
        if (strncmp(object->names[i], name, name_len) == 0) {
 801c282:	68fb      	ldr	r3, [r7, #12]
 801c284:	685a      	ldr	r2, [r3, #4]
 801c286:	697b      	ldr	r3, [r7, #20]
 801c288:	009b      	lsls	r3, r3, #2
 801c28a:	4413      	add	r3, r2
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	687a      	ldr	r2, [r7, #4]
 801c290:	68b9      	ldr	r1, [r7, #8]
 801c292:	4618      	mov	r0, r3
 801c294:	f003 f9a0 	bl	801f5d8 <strncmp>
 801c298:	4603      	mov	r3, r0
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d107      	bne.n	801c2ae <json_object_getn_value+0x5a>
            return object->values[i];
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	689a      	ldr	r2, [r3, #8]
 801c2a2:	697b      	ldr	r3, [r7, #20]
 801c2a4:	009b      	lsls	r3, r3, #2
 801c2a6:	4413      	add	r3, r2
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	e00b      	b.n	801c2c4 <json_object_getn_value+0x70>
            continue;
 801c2ac:	bf00      	nop
    for (i = 0; i < json_object_get_count(object); i++) {
 801c2ae:	697b      	ldr	r3, [r7, #20]
 801c2b0:	3301      	adds	r3, #1
 801c2b2:	617b      	str	r3, [r7, #20]
 801c2b4:	68f8      	ldr	r0, [r7, #12]
 801c2b6:	f001 ffe7 	bl	801e288 <json_object_get_count>
 801c2ba:	4602      	mov	r2, r0
 801c2bc:	697b      	ldr	r3, [r7, #20]
 801c2be:	4293      	cmp	r3, r2
 801c2c0:	d3d1      	bcc.n	801c266 <json_object_getn_value+0x12>
        }
    }
    return NULL;
 801c2c2:	2300      	movs	r3, #0
}
 801c2c4:	4618      	mov	r0, r3
 801c2c6:	3718      	adds	r7, #24
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	bd80      	pop	{r7, pc}

0801c2cc <json_object_remove_internal>:

static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, int free_value) {
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b086      	sub	sp, #24
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	60f8      	str	r0, [r7, #12]
 801c2d4:	60b9      	str	r1, [r7, #8]
 801c2d6:	607a      	str	r2, [r7, #4]
    size_t i = 0, last_item_index = 0;
 801c2d8:	2300      	movs	r3, #0
 801c2da:	617b      	str	r3, [r7, #20]
 801c2dc:	2300      	movs	r3, #0
 801c2de:	613b      	str	r3, [r7, #16]
    if (object == NULL || json_object_get_value(object, name) == NULL) {
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d006      	beq.n	801c2f4 <json_object_remove_internal+0x28>
 801c2e6:	68b9      	ldr	r1, [r7, #8]
 801c2e8:	68f8      	ldr	r0, [r7, #12]
 801c2ea:	f001 ff39 	bl	801e160 <json_object_get_value>
 801c2ee:	4603      	mov	r3, r0
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d102      	bne.n	801c2fa <json_object_remove_internal+0x2e>
        return JSONFailure;
 801c2f4:	f04f 33ff 	mov.w	r3, #4294967295
 801c2f8:	e05a      	b.n	801c3b0 <json_object_remove_internal+0xe4>
    }
    last_item_index = json_object_get_count(object) - 1;
 801c2fa:	68f8      	ldr	r0, [r7, #12]
 801c2fc:	f001 ffc4 	bl	801e288 <json_object_get_count>
 801c300:	4603      	mov	r3, r0
 801c302:	3b01      	subs	r3, #1
 801c304:	613b      	str	r3, [r7, #16]
    for (i = 0; i < json_object_get_count(object); i++) {
 801c306:	2300      	movs	r3, #0
 801c308:	617b      	str	r3, [r7, #20]
 801c30a:	e048      	b.n	801c39e <json_object_remove_internal+0xd2>
        if (strcmp(object->names[i], name) == 0) {
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	685a      	ldr	r2, [r3, #4]
 801c310:	697b      	ldr	r3, [r7, #20]
 801c312:	009b      	lsls	r3, r3, #2
 801c314:	4413      	add	r3, r2
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	68b9      	ldr	r1, [r7, #8]
 801c31a:	4618      	mov	r0, r3
 801c31c:	f7e3 ff70 	bl	8000200 <strcmp>
 801c320:	4603      	mov	r3, r0
 801c322:	2b00      	cmp	r3, #0
 801c324:	d138      	bne.n	801c398 <json_object_remove_internal+0xcc>
            parson_free(object->names[i]);
 801c326:	4b24      	ldr	r3, [pc, #144]	; (801c3b8 <json_object_remove_internal+0xec>)
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	68fa      	ldr	r2, [r7, #12]
 801c32c:	6851      	ldr	r1, [r2, #4]
 801c32e:	697a      	ldr	r2, [r7, #20]
 801c330:	0092      	lsls	r2, r2, #2
 801c332:	440a      	add	r2, r1
 801c334:	6812      	ldr	r2, [r2, #0]
 801c336:	4610      	mov	r0, r2
 801c338:	4798      	blx	r3
            if (free_value) {
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d008      	beq.n	801c352 <json_object_remove_internal+0x86>
                json_value_free(object->values[i]);
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	689a      	ldr	r2, [r3, #8]
 801c344:	697b      	ldr	r3, [r7, #20]
 801c346:	009b      	lsls	r3, r3, #2
 801c348:	4413      	add	r3, r2
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	4618      	mov	r0, r3
 801c34e:	f002 f8a7 	bl	801e4a0 <json_value_free>
            }
            if (i != last_item_index) { /* Replace key value pair with one from the end */
 801c352:	697a      	ldr	r2, [r7, #20]
 801c354:	693b      	ldr	r3, [r7, #16]
 801c356:	429a      	cmp	r2, r3
 801c358:	d017      	beq.n	801c38a <json_object_remove_internal+0xbe>
                object->names[i] = object->names[last_item_index];
 801c35a:	68fb      	ldr	r3, [r7, #12]
 801c35c:	685a      	ldr	r2, [r3, #4]
 801c35e:	693b      	ldr	r3, [r7, #16]
 801c360:	009b      	lsls	r3, r3, #2
 801c362:	441a      	add	r2, r3
 801c364:	68fb      	ldr	r3, [r7, #12]
 801c366:	6859      	ldr	r1, [r3, #4]
 801c368:	697b      	ldr	r3, [r7, #20]
 801c36a:	009b      	lsls	r3, r3, #2
 801c36c:	440b      	add	r3, r1
 801c36e:	6812      	ldr	r2, [r2, #0]
 801c370:	601a      	str	r2, [r3, #0]
                object->values[i] = object->values[last_item_index];
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	689a      	ldr	r2, [r3, #8]
 801c376:	693b      	ldr	r3, [r7, #16]
 801c378:	009b      	lsls	r3, r3, #2
 801c37a:	441a      	add	r2, r3
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	6899      	ldr	r1, [r3, #8]
 801c380:	697b      	ldr	r3, [r7, #20]
 801c382:	009b      	lsls	r3, r3, #2
 801c384:	440b      	add	r3, r1
 801c386:	6812      	ldr	r2, [r2, #0]
 801c388:	601a      	str	r2, [r3, #0]
            }
            object->count -= 1;
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	68db      	ldr	r3, [r3, #12]
 801c38e:	1e5a      	subs	r2, r3, #1
 801c390:	68fb      	ldr	r3, [r7, #12]
 801c392:	60da      	str	r2, [r3, #12]
            return JSONSuccess;
 801c394:	2300      	movs	r3, #0
 801c396:	e00b      	b.n	801c3b0 <json_object_remove_internal+0xe4>
    for (i = 0; i < json_object_get_count(object); i++) {
 801c398:	697b      	ldr	r3, [r7, #20]
 801c39a:	3301      	adds	r3, #1
 801c39c:	617b      	str	r3, [r7, #20]
 801c39e:	68f8      	ldr	r0, [r7, #12]
 801c3a0:	f001 ff72 	bl	801e288 <json_object_get_count>
 801c3a4:	4602      	mov	r2, r0
 801c3a6:	697b      	ldr	r3, [r7, #20]
 801c3a8:	4293      	cmp	r3, r2
 801c3aa:	d3af      	bcc.n	801c30c <json_object_remove_internal+0x40>
        }
    }
    return JSONFailure; /* No execution path should end here */
 801c3ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c3b0:	4618      	mov	r0, r3
 801c3b2:	3718      	adds	r7, #24
 801c3b4:	46bd      	mov	sp, r7
 801c3b6:	bd80      	pop	{r7, pc}
 801c3b8:	200002b4 	.word	0x200002b4

0801c3bc <json_object_dotremove_internal>:

static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, int free_value) {
 801c3bc:	b580      	push	{r7, lr}
 801c3be:	b088      	sub	sp, #32
 801c3c0:	af00      	add	r7, sp, #0
 801c3c2:	60f8      	str	r0, [r7, #12]
 801c3c4:	60b9      	str	r1, [r7, #8]
 801c3c6:	607a      	str	r2, [r7, #4]
    JSON_Value *temp_value = NULL;
 801c3c8:	2300      	movs	r3, #0
 801c3ca:	61fb      	str	r3, [r7, #28]
    JSON_Object *temp_object = NULL;
 801c3cc:	2300      	movs	r3, #0
 801c3ce:	61bb      	str	r3, [r7, #24]
    const char *dot_pos = strchr(name, '.');
 801c3d0:	212e      	movs	r1, #46	; 0x2e
 801c3d2:	68b8      	ldr	r0, [r7, #8]
 801c3d4:	f003 f8f3 	bl	801f5be <strchr>
 801c3d8:	6178      	str	r0, [r7, #20]
    if (dot_pos == NULL) {
 801c3da:	697b      	ldr	r3, [r7, #20]
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d106      	bne.n	801c3ee <json_object_dotremove_internal+0x32>
        return json_object_remove_internal(object, name, free_value);
 801c3e0:	687a      	ldr	r2, [r7, #4]
 801c3e2:	68b9      	ldr	r1, [r7, #8]
 801c3e4:	68f8      	ldr	r0, [r7, #12]
 801c3e6:	f7ff ff71 	bl	801c2cc <json_object_remove_internal>
 801c3ea:	4603      	mov	r3, r0
 801c3ec:	e01d      	b.n	801c42a <json_object_dotremove_internal+0x6e>
    }
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 801c3ee:	697a      	ldr	r2, [r7, #20]
 801c3f0:	68bb      	ldr	r3, [r7, #8]
 801c3f2:	1ad3      	subs	r3, r2, r3
 801c3f4:	461a      	mov	r2, r3
 801c3f6:	68b9      	ldr	r1, [r7, #8]
 801c3f8:	68f8      	ldr	r0, [r7, #12]
 801c3fa:	f7ff ff2b 	bl	801c254 <json_object_getn_value>
 801c3fe:	61f8      	str	r0, [r7, #28]
    if (json_value_get_type(temp_value) != JSONObject) {
 801c400:	69f8      	ldr	r0, [r7, #28]
 801c402:	f001 ffd6 	bl	801e3b2 <json_value_get_type>
 801c406:	4603      	mov	r3, r0
 801c408:	2b04      	cmp	r3, #4
 801c40a:	d002      	beq.n	801c412 <json_object_dotremove_internal+0x56>
        return JSONFailure;
 801c40c:	f04f 33ff 	mov.w	r3, #4294967295
 801c410:	e00b      	b.n	801c42a <json_object_dotremove_internal+0x6e>
    }
    temp_object = json_value_get_object(temp_value);
 801c412:	69f8      	ldr	r0, [r7, #28]
 801c414:	f001 ffdf 	bl	801e3d6 <json_value_get_object>
 801c418:	61b8      	str	r0, [r7, #24]
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 801c41a:	697b      	ldr	r3, [r7, #20]
 801c41c:	3301      	adds	r3, #1
 801c41e:	687a      	ldr	r2, [r7, #4]
 801c420:	4619      	mov	r1, r3
 801c422:	69b8      	ldr	r0, [r7, #24]
 801c424:	f7ff ffca 	bl	801c3bc <json_object_dotremove_internal>
 801c428:	4603      	mov	r3, r0
}
 801c42a:	4618      	mov	r0, r3
 801c42c:	3720      	adds	r7, #32
 801c42e:	46bd      	mov	sp, r7
 801c430:	bd80      	pop	{r7, pc}
	...

0801c434 <json_object_free>:

static void json_object_free(JSON_Object *object) {
 801c434:	b580      	push	{r7, lr}
 801c436:	b084      	sub	sp, #16
 801c438:	af00      	add	r7, sp, #0
 801c43a:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < object->count; i++) {
 801c43c:	2300      	movs	r3, #0
 801c43e:	60fb      	str	r3, [r7, #12]
 801c440:	e015      	b.n	801c46e <json_object_free+0x3a>
        parson_free(object->names[i]);
 801c442:	4b17      	ldr	r3, [pc, #92]	; (801c4a0 <json_object_free+0x6c>)
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	687a      	ldr	r2, [r7, #4]
 801c448:	6851      	ldr	r1, [r2, #4]
 801c44a:	68fa      	ldr	r2, [r7, #12]
 801c44c:	0092      	lsls	r2, r2, #2
 801c44e:	440a      	add	r2, r1
 801c450:	6812      	ldr	r2, [r2, #0]
 801c452:	4610      	mov	r0, r2
 801c454:	4798      	blx	r3
        json_value_free(object->values[i]);
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	689a      	ldr	r2, [r3, #8]
 801c45a:	68fb      	ldr	r3, [r7, #12]
 801c45c:	009b      	lsls	r3, r3, #2
 801c45e:	4413      	add	r3, r2
 801c460:	681b      	ldr	r3, [r3, #0]
 801c462:	4618      	mov	r0, r3
 801c464:	f002 f81c 	bl	801e4a0 <json_value_free>
    for (i = 0; i < object->count; i++) {
 801c468:	68fb      	ldr	r3, [r7, #12]
 801c46a:	3301      	adds	r3, #1
 801c46c:	60fb      	str	r3, [r7, #12]
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	68db      	ldr	r3, [r3, #12]
 801c472:	68fa      	ldr	r2, [r7, #12]
 801c474:	429a      	cmp	r2, r3
 801c476:	d3e4      	bcc.n	801c442 <json_object_free+0xe>
    }
    parson_free(object->names);
 801c478:	4b09      	ldr	r3, [pc, #36]	; (801c4a0 <json_object_free+0x6c>)
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	687a      	ldr	r2, [r7, #4]
 801c47e:	6852      	ldr	r2, [r2, #4]
 801c480:	4610      	mov	r0, r2
 801c482:	4798      	blx	r3
    parson_free(object->values);
 801c484:	4b06      	ldr	r3, [pc, #24]	; (801c4a0 <json_object_free+0x6c>)
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	687a      	ldr	r2, [r7, #4]
 801c48a:	6892      	ldr	r2, [r2, #8]
 801c48c:	4610      	mov	r0, r2
 801c48e:	4798      	blx	r3
    parson_free(object);
 801c490:	4b03      	ldr	r3, [pc, #12]	; (801c4a0 <json_object_free+0x6c>)
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	6878      	ldr	r0, [r7, #4]
 801c496:	4798      	blx	r3
}
 801c498:	bf00      	nop
 801c49a:	3710      	adds	r7, #16
 801c49c:	46bd      	mov	sp, r7
 801c49e:	bd80      	pop	{r7, pc}
 801c4a0:	200002b4 	.word	0x200002b4

0801c4a4 <json_array_init>:

/* JSON Array */
static JSON_Array * json_array_init(JSON_Value *wrapping_value) {
 801c4a4:	b580      	push	{r7, lr}
 801c4a6:	b084      	sub	sp, #16
 801c4a8:	af00      	add	r7, sp, #0
 801c4aa:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 801c4ac:	4b0d      	ldr	r3, [pc, #52]	; (801c4e4 <json_array_init+0x40>)
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	2010      	movs	r0, #16
 801c4b2:	4798      	blx	r3
 801c4b4:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d101      	bne.n	801c4c0 <json_array_init+0x1c>
        return NULL;
 801c4bc:	2300      	movs	r3, #0
 801c4be:	e00c      	b.n	801c4da <json_array_init+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	687a      	ldr	r2, [r7, #4]
 801c4c4:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	2200      	movs	r2, #0
 801c4ca:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	2200      	movs	r2, #0
 801c4d0:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	2200      	movs	r2, #0
 801c4d6:	609a      	str	r2, [r3, #8]
    return new_array;
 801c4d8:	68fb      	ldr	r3, [r7, #12]
}
 801c4da:	4618      	mov	r0, r3
 801c4dc:	3710      	adds	r7, #16
 801c4de:	46bd      	mov	sp, r7
 801c4e0:	bd80      	pop	{r7, pc}
 801c4e2:	bf00      	nop
 801c4e4:	200002b0 	.word	0x200002b0

0801c4e8 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 801c4e8:	b580      	push	{r7, lr}
 801c4ea:	b084      	sub	sp, #16
 801c4ec:	af00      	add	r7, sp, #0
 801c4ee:	6078      	str	r0, [r7, #4]
 801c4f0:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	689a      	ldr	r2, [r3, #8]
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	68db      	ldr	r3, [r3, #12]
 801c4fa:	429a      	cmp	r2, r3
 801c4fc:	d311      	bcc.n	801c522 <json_array_add+0x3a>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	68db      	ldr	r3, [r3, #12]
 801c502:	005b      	lsls	r3, r3, #1
 801c504:	2b10      	cmp	r3, #16
 801c506:	bf38      	it	cc
 801c508:	2310      	movcc	r3, #16
 801c50a:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) == JSONFailure) {
 801c50c:	68f9      	ldr	r1, [r7, #12]
 801c50e:	6878      	ldr	r0, [r7, #4]
 801c510:	f000 f820 	bl	801c554 <json_array_resize>
 801c514:	4603      	mov	r3, r0
 801c516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c51a:	d102      	bne.n	801c522 <json_array_add+0x3a>
            return JSONFailure;
 801c51c:	f04f 33ff 	mov.w	r3, #4294967295
 801c520:	e013      	b.n	801c54a <json_array_add+0x62>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 801c522:	6878      	ldr	r0, [r7, #4]
 801c524:	f001 ff39 	bl	801e39a <json_array_get_wrapping_value>
 801c528:	4602      	mov	r2, r0
 801c52a:	683b      	ldr	r3, [r7, #0]
 801c52c:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	685a      	ldr	r2, [r3, #4]
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	689b      	ldr	r3, [r3, #8]
 801c536:	009b      	lsls	r3, r3, #2
 801c538:	4413      	add	r3, r2
 801c53a:	683a      	ldr	r2, [r7, #0]
 801c53c:	601a      	str	r2, [r3, #0]
    array->count++;
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	689b      	ldr	r3, [r3, #8]
 801c542:	1c5a      	adds	r2, r3, #1
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 801c548:	2300      	movs	r3, #0
}
 801c54a:	4618      	mov	r0, r3
 801c54c:	3710      	adds	r7, #16
 801c54e:	46bd      	mov	sp, r7
 801c550:	bd80      	pop	{r7, pc}
	...

0801c554 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 801c554:	b580      	push	{r7, lr}
 801c556:	b084      	sub	sp, #16
 801c558:	af00      	add	r7, sp, #0
 801c55a:	6078      	str	r0, [r7, #4]
 801c55c:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 801c55e:	2300      	movs	r3, #0
 801c560:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 801c562:	683b      	ldr	r3, [r7, #0]
 801c564:	2b00      	cmp	r3, #0
 801c566:	d102      	bne.n	801c56e <json_array_resize+0x1a>
        return JSONFailure;
 801c568:	f04f 33ff 	mov.w	r3, #4294967295
 801c56c:	e02a      	b.n	801c5c4 <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801c56e:	4b17      	ldr	r3, [pc, #92]	; (801c5cc <json_array_resize+0x78>)
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	683a      	ldr	r2, [r7, #0]
 801c574:	0092      	lsls	r2, r2, #2
 801c576:	4610      	mov	r0, r2
 801c578:	4798      	blx	r3
 801c57a:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d102      	bne.n	801c588 <json_array_resize+0x34>
        return JSONFailure;
 801c582:	f04f 33ff 	mov.w	r3, #4294967295
 801c586:	e01d      	b.n	801c5c4 <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	685b      	ldr	r3, [r3, #4]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d00c      	beq.n	801c5aa <json_array_resize+0x56>
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	689b      	ldr	r3, [r3, #8]
 801c594:	2b00      	cmp	r3, #0
 801c596:	d008      	beq.n	801c5aa <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	6859      	ldr	r1, [r3, #4]
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	689b      	ldr	r3, [r3, #8]
 801c5a0:	009b      	lsls	r3, r3, #2
 801c5a2:	461a      	mov	r2, r3
 801c5a4:	68f8      	ldr	r0, [r7, #12]
 801c5a6:	f002 fead 	bl	801f304 <memcpy>
    }
    parson_free(array->items);
 801c5aa:	4b09      	ldr	r3, [pc, #36]	; (801c5d0 <json_array_resize+0x7c>)
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	687a      	ldr	r2, [r7, #4]
 801c5b0:	6852      	ldr	r2, [r2, #4]
 801c5b2:	4610      	mov	r0, r2
 801c5b4:	4798      	blx	r3
    array->items = new_items;
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	68fa      	ldr	r2, [r7, #12]
 801c5ba:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	683a      	ldr	r2, [r7, #0]
 801c5c0:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801c5c2:	2300      	movs	r3, #0
}
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	3710      	adds	r7, #16
 801c5c8:	46bd      	mov	sp, r7
 801c5ca:	bd80      	pop	{r7, pc}
 801c5cc:	200002b0 	.word	0x200002b0
 801c5d0:	200002b4 	.word	0x200002b4

0801c5d4 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	b084      	sub	sp, #16
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 801c5dc:	2300      	movs	r3, #0
 801c5de:	60fb      	str	r3, [r7, #12]
 801c5e0:	e00b      	b.n	801c5fa <json_array_free+0x26>
        json_value_free(array->items[i]);
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	685a      	ldr	r2, [r3, #4]
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	009b      	lsls	r3, r3, #2
 801c5ea:	4413      	add	r3, r2
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	4618      	mov	r0, r3
 801c5f0:	f001 ff56 	bl	801e4a0 <json_value_free>
    for (i = 0; i < array->count; i++) {
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	3301      	adds	r3, #1
 801c5f8:	60fb      	str	r3, [r7, #12]
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	689b      	ldr	r3, [r3, #8]
 801c5fe:	68fa      	ldr	r2, [r7, #12]
 801c600:	429a      	cmp	r2, r3
 801c602:	d3ee      	bcc.n	801c5e2 <json_array_free+0xe>
    }
    parson_free(array->items);
 801c604:	4b06      	ldr	r3, [pc, #24]	; (801c620 <json_array_free+0x4c>)
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	687a      	ldr	r2, [r7, #4]
 801c60a:	6852      	ldr	r2, [r2, #4]
 801c60c:	4610      	mov	r0, r2
 801c60e:	4798      	blx	r3
    parson_free(array);
 801c610:	4b03      	ldr	r3, [pc, #12]	; (801c620 <json_array_free+0x4c>)
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	6878      	ldr	r0, [r7, #4]
 801c616:	4798      	blx	r3
}
 801c618:	bf00      	nop
 801c61a:	3710      	adds	r7, #16
 801c61c:	46bd      	mov	sp, r7
 801c61e:	bd80      	pop	{r7, pc}
 801c620:	200002b4 	.word	0x200002b4

0801c624 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string) {
 801c624:	b580      	push	{r7, lr}
 801c626:	b084      	sub	sp, #16
 801c628:	af00      	add	r7, sp, #0
 801c62a:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801c62c:	4b0b      	ldr	r3, [pc, #44]	; (801c65c <json_value_init_string_no_copy+0x38>)
 801c62e:	681b      	ldr	r3, [r3, #0]
 801c630:	2010      	movs	r0, #16
 801c632:	4798      	blx	r3
 801c634:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d101      	bne.n	801c640 <json_value_init_string_no_copy+0x1c>
        return NULL;
 801c63c:	2300      	movs	r3, #0
 801c63e:	e009      	b.n	801c654 <json_value_init_string_no_copy+0x30>
    }
    new_value->parent = NULL;
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	2200      	movs	r2, #0
 801c644:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	2202      	movs	r2, #2
 801c64a:	605a      	str	r2, [r3, #4]
    new_value->value.string = string;
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	687a      	ldr	r2, [r7, #4]
 801c650:	609a      	str	r2, [r3, #8]
    return new_value;
 801c652:	68fb      	ldr	r3, [r7, #12]
}
 801c654:	4618      	mov	r0, r3
 801c656:	3710      	adds	r7, #16
 801c658:	46bd      	mov	sp, r7
 801c65a:	bd80      	pop	{r7, pc}
 801c65c:	200002b0 	.word	0x200002b0

0801c660 <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 801c660:	b480      	push	{r7}
 801c662:	b083      	sub	sp, #12
 801c664:	af00      	add	r7, sp, #0
 801c666:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	781b      	ldrb	r3, [r3, #0]
 801c66e:	2b22      	cmp	r3, #34	; 0x22
 801c670:	d002      	beq.n	801c678 <skip_quotes+0x18>
        return JSONFailure;
 801c672:	f04f 33ff 	mov.w	r3, #4294967295
 801c676:	e02f      	b.n	801c6d8 <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	1c5a      	adds	r2, r3, #1
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801c682:	e01e      	b.n	801c6c2 <skip_quotes+0x62>
        if (**string == '\0') {
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	781b      	ldrb	r3, [r3, #0]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d102      	bne.n	801c694 <skip_quotes+0x34>
            return JSONFailure;
 801c68e:	f04f 33ff 	mov.w	r3, #4294967295
 801c692:	e021      	b.n	801c6d8 <skip_quotes+0x78>
        } else if (**string == '\\') {
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	681b      	ldr	r3, [r3, #0]
 801c698:	781b      	ldrb	r3, [r3, #0]
 801c69a:	2b5c      	cmp	r3, #92	; 0x5c
 801c69c:	d10c      	bne.n	801c6b8 <skip_quotes+0x58>
            SKIP_CHAR(string);
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	681b      	ldr	r3, [r3, #0]
 801c6a2:	1c5a      	adds	r2, r3, #1
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	681b      	ldr	r3, [r3, #0]
 801c6ac:	781b      	ldrb	r3, [r3, #0]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d102      	bne.n	801c6b8 <skip_quotes+0x58>
                return JSONFailure;
 801c6b2:	f04f 33ff 	mov.w	r3, #4294967295
 801c6b6:	e00f      	b.n	801c6d8 <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	1c5a      	adds	r2, r3, #1
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	781b      	ldrb	r3, [r3, #0]
 801c6c8:	2b22      	cmp	r3, #34	; 0x22
 801c6ca:	d1db      	bne.n	801c684 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	1c5a      	adds	r2, r3, #1
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801c6d6:	2300      	movs	r3, #0
}
 801c6d8:	4618      	mov	r0, r3
 801c6da:	370c      	adds	r7, #12
 801c6dc:	46bd      	mov	sp, r7
 801c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6e2:	4770      	bx	lr

0801c6e4 <parse_utf16>:

static int parse_utf16(const char **unprocessed, char **processed) {
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	b088      	sub	sp, #32
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	6078      	str	r0, [r7, #4]
 801c6ec:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    int parse_succeeded = 0;
 801c6ee:	2300      	movs	r3, #0
 801c6f0:	617b      	str	r3, [r7, #20]
    char *processed_ptr = *processed;
 801c6f2:	683b      	ldr	r3, [r7, #0]
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	61bb      	str	r3, [r7, #24]
    unprocessed_ptr++; /* skips u */
 801c6fe:	69bb      	ldr	r3, [r7, #24]
 801c700:	3301      	adds	r3, #1
 801c702:	61bb      	str	r3, [r7, #24]
    parse_succeeded = parse_utf16_hex(unprocessed_ptr, &cp);
 801c704:	f107 030c 	add.w	r3, r7, #12
 801c708:	4619      	mov	r1, r3
 801c70a:	69b8      	ldr	r0, [r7, #24]
 801c70c:	f7ff fac8 	bl	801bca0 <parse_utf16_hex>
 801c710:	6178      	str	r0, [r7, #20]
    if (!parse_succeeded) {
 801c712:	697b      	ldr	r3, [r7, #20]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d102      	bne.n	801c71e <parse_utf16+0x3a>
        return JSONFailure;
 801c718:	f04f 33ff 	mov.w	r3, #4294967295
 801c71c:	e0ce      	b.n	801c8bc <parse_utf16+0x1d8>
    }
    if (cp < 0x80) {
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	2b7f      	cmp	r3, #127	; 0x7f
 801c722:	d804      	bhi.n	801c72e <parse_utf16+0x4a>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	b2da      	uxtb	r2, r3
 801c728:	69fb      	ldr	r3, [r7, #28]
 801c72a:	701a      	strb	r2, [r3, #0]
 801c72c:	e0bc      	b.n	801c8a8 <parse_utf16+0x1c4>
    } else if (cp < 0x800) {
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c734:	d219      	bcs.n	801c76a <parse_utf16+0x86>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	099b      	lsrs	r3, r3, #6
 801c73a:	b2db      	uxtb	r3, r3
 801c73c:	f003 031f 	and.w	r3, r3, #31
 801c740:	b2db      	uxtb	r3, r3
 801c742:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801c746:	b2da      	uxtb	r2, r3
 801c748:	69fb      	ldr	r3, [r7, #28]
 801c74a:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	b2db      	uxtb	r3, r3
 801c750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c754:	b2da      	uxtb	r2, r3
 801c756:	69fb      	ldr	r3, [r7, #28]
 801c758:	3301      	adds	r3, #1
 801c75a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c75e:	b2d2      	uxtb	r2, r2
 801c760:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 801c762:	69fb      	ldr	r3, [r7, #28]
 801c764:	3301      	adds	r3, #1
 801c766:	61fb      	str	r3, [r7, #28]
 801c768:	e09e      	b.n	801c8a8 <parse_utf16+0x1c4>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801c770:	d303      	bcc.n	801c77a <parse_utf16+0x96>
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801c778:	d325      	bcc.n	801c7c6 <parse_utf16+0xe2>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	0b1b      	lsrs	r3, r3, #12
 801c77e:	b2db      	uxtb	r3, r3
 801c780:	f003 030f 	and.w	r3, r3, #15
 801c784:	b2db      	uxtb	r3, r3
 801c786:	f063 031f 	orn	r3, r3, #31
 801c78a:	b2da      	uxtb	r2, r3
 801c78c:	69fb      	ldr	r3, [r7, #28]
 801c78e:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	099b      	lsrs	r3, r3, #6
 801c794:	b2db      	uxtb	r3, r3
 801c796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c79a:	b2da      	uxtb	r2, r3
 801c79c:	69fb      	ldr	r3, [r7, #28]
 801c79e:	3301      	adds	r3, #1
 801c7a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c7a4:	b2d2      	uxtb	r2, r2
 801c7a6:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	b2db      	uxtb	r3, r3
 801c7ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c7b0:	b2da      	uxtb	r2, r3
 801c7b2:	69fb      	ldr	r3, [r7, #28]
 801c7b4:	3302      	adds	r3, #2
 801c7b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c7ba:	b2d2      	uxtb	r2, r2
 801c7bc:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 801c7be:	69fb      	ldr	r3, [r7, #28]
 801c7c0:	3302      	adds	r3, #2
 801c7c2:	61fb      	str	r3, [r7, #28]
 801c7c4:	e070      	b.n	801c8a8 <parse_utf16+0x1c4>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801c7cc:	d369      	bcc.n	801c8a2 <parse_utf16+0x1be>
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801c7d4:	d265      	bcs.n	801c8a2 <parse_utf16+0x1be>
        lead = cp;
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 801c7da:	69bb      	ldr	r3, [r7, #24]
 801c7dc:	3304      	adds	r3, #4
 801c7de:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 801c7e0:	69bb      	ldr	r3, [r7, #24]
 801c7e2:	1c5a      	adds	r2, r3, #1
 801c7e4:	61ba      	str	r2, [r7, #24]
 801c7e6:	781b      	ldrb	r3, [r3, #0]
 801c7e8:	2b5c      	cmp	r3, #92	; 0x5c
 801c7ea:	d105      	bne.n	801c7f8 <parse_utf16+0x114>
 801c7ec:	69bb      	ldr	r3, [r7, #24]
 801c7ee:	1c5a      	adds	r2, r3, #1
 801c7f0:	61ba      	str	r2, [r7, #24]
 801c7f2:	781b      	ldrb	r3, [r3, #0]
 801c7f4:	2b75      	cmp	r3, #117	; 0x75
 801c7f6:	d002      	beq.n	801c7fe <parse_utf16+0x11a>
            return JSONFailure;
 801c7f8:	f04f 33ff 	mov.w	r3, #4294967295
 801c7fc:	e05e      	b.n	801c8bc <parse_utf16+0x1d8>
        }
        parse_succeeded = parse_utf16_hex(unprocessed_ptr, &trail);
 801c7fe:	f107 0308 	add.w	r3, r7, #8
 801c802:	4619      	mov	r1, r3
 801c804:	69b8      	ldr	r0, [r7, #24]
 801c806:	f7ff fa4b 	bl	801bca0 <parse_utf16_hex>
 801c80a:	6178      	str	r0, [r7, #20]
        if (!parse_succeeded || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 801c80c:	697b      	ldr	r3, [r7, #20]
 801c80e:	2b00      	cmp	r3, #0
 801c810:	d007      	beq.n	801c822 <parse_utf16+0x13e>
 801c812:	68bb      	ldr	r3, [r7, #8]
 801c814:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801c818:	d303      	bcc.n	801c822 <parse_utf16+0x13e>
 801c81a:	68bb      	ldr	r3, [r7, #8]
 801c81c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801c820:	d302      	bcc.n	801c828 <parse_utf16+0x144>
            return JSONFailure;
 801c822:	f04f 33ff 	mov.w	r3, #4294967295
 801c826:	e049      	b.n	801c8bc <parse_utf16+0x1d8>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 801c828:	693b      	ldr	r3, [r7, #16]
 801c82a:	029a      	lsls	r2, r3, #10
 801c82c:	4b25      	ldr	r3, [pc, #148]	; (801c8c4 <parse_utf16+0x1e0>)
 801c82e:	4013      	ands	r3, r2
 801c830:	68ba      	ldr	r2, [r7, #8]
 801c832:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801c836:	4313      	orrs	r3, r2
 801c838:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801c83c:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	0c9b      	lsrs	r3, r3, #18
 801c842:	b2db      	uxtb	r3, r3
 801c844:	f003 0307 	and.w	r3, r3, #7
 801c848:	b2db      	uxtb	r3, r3
 801c84a:	f063 030f 	orn	r3, r3, #15
 801c84e:	b2da      	uxtb	r2, r3
 801c850:	69fb      	ldr	r3, [r7, #28]
 801c852:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	0b1b      	lsrs	r3, r3, #12
 801c858:	b2db      	uxtb	r3, r3
 801c85a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c85e:	b2da      	uxtb	r2, r3
 801c860:	69fb      	ldr	r3, [r7, #28]
 801c862:	3301      	adds	r3, #1
 801c864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c868:	b2d2      	uxtb	r2, r2
 801c86a:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	099b      	lsrs	r3, r3, #6
 801c870:	b2db      	uxtb	r3, r3
 801c872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c876:	b2da      	uxtb	r2, r3
 801c878:	69fb      	ldr	r3, [r7, #28]
 801c87a:	3302      	adds	r3, #2
 801c87c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c880:	b2d2      	uxtb	r2, r2
 801c882:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	b2db      	uxtb	r3, r3
 801c888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c88c:	b2da      	uxtb	r2, r3
 801c88e:	69fb      	ldr	r3, [r7, #28]
 801c890:	3303      	adds	r3, #3
 801c892:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801c896:	b2d2      	uxtb	r2, r2
 801c898:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 801c89a:	69fb      	ldr	r3, [r7, #28]
 801c89c:	3303      	adds	r3, #3
 801c89e:	61fb      	str	r3, [r7, #28]
 801c8a0:	e002      	b.n	801c8a8 <parse_utf16+0x1c4>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 801c8a2:	f04f 33ff 	mov.w	r3, #4294967295
 801c8a6:	e009      	b.n	801c8bc <parse_utf16+0x1d8>
    }
    unprocessed_ptr += 3;
 801c8a8:	69bb      	ldr	r3, [r7, #24]
 801c8aa:	3303      	adds	r3, #3
 801c8ac:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 801c8ae:	683b      	ldr	r3, [r7, #0]
 801c8b0:	69fa      	ldr	r2, [r7, #28]
 801c8b2:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	69ba      	ldr	r2, [r7, #24]
 801c8b8:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801c8ba:	2300      	movs	r3, #0
}
 801c8bc:	4618      	mov	r0, r3
 801c8be:	3720      	adds	r7, #32
 801c8c0:	46bd      	mov	sp, r7
 801c8c2:	bd80      	pop	{r7, pc}
 801c8c4:	000ffc00 	.word	0x000ffc00

0801c8c8 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t len) {
 801c8c8:	b580      	push	{r7, lr}
 801c8ca:	b088      	sub	sp, #32
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	6078      	str	r0, [r7, #4]
 801c8d0:	6039      	str	r1, [r7, #0]
    const char *input_ptr = input;
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	60fb      	str	r3, [r7, #12]
    size_t initial_size = (len + 1) * sizeof(char);
 801c8d6:	683b      	ldr	r3, [r7, #0]
 801c8d8:	3301      	adds	r3, #1
 801c8da:	61fb      	str	r3, [r7, #28]
    size_t final_size = 0;
 801c8dc:	2300      	movs	r3, #0
 801c8de:	61bb      	str	r3, [r7, #24]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 801c8e0:	2300      	movs	r3, #0
 801c8e2:	617b      	str	r3, [r7, #20]
 801c8e4:	2300      	movs	r3, #0
 801c8e6:	60bb      	str	r3, [r7, #8]
 801c8e8:	2300      	movs	r3, #0
 801c8ea:	613b      	str	r3, [r7, #16]
    output = (char*)parson_malloc(initial_size);
 801c8ec:	4b66      	ldr	r3, [pc, #408]	; (801ca88 <process_string+0x1c0>)
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	69f8      	ldr	r0, [r7, #28]
 801c8f2:	4798      	blx	r3
 801c8f4:	6178      	str	r0, [r7, #20]
    if (output == NULL) {
 801c8f6:	697b      	ldr	r3, [r7, #20]
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	f000 80b5 	beq.w	801ca68 <process_string+0x1a0>
        goto error;
    }
    output_ptr = output;
 801c8fe:	697b      	ldr	r3, [r7, #20]
 801c900:	60bb      	str	r3, [r7, #8]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801c902:	e08a      	b.n	801ca1a <process_string+0x152>
        if (*input_ptr == '\\') {
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	781b      	ldrb	r3, [r3, #0]
 801c908:	2b5c      	cmp	r3, #92	; 0x5c
 801c90a:	d176      	bne.n	801c9fa <process_string+0x132>
            input_ptr++;
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	3301      	adds	r3, #1
 801c910:	60fb      	str	r3, [r7, #12]
            switch (*input_ptr) {
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	781b      	ldrb	r3, [r3, #0]
 801c916:	2b75      	cmp	r3, #117	; 0x75
 801c918:	f300 80a8 	bgt.w	801ca6c <process_string+0x1a4>
 801c91c:	2b5c      	cmp	r3, #92	; 0x5c
 801c91e:	da04      	bge.n	801c92a <process_string+0x62>
 801c920:	2b22      	cmp	r3, #34	; 0x22
 801c922:	d03d      	beq.n	801c9a0 <process_string+0xd8>
 801c924:	2b2f      	cmp	r3, #47	; 0x2f
 801c926:	d043      	beq.n	801c9b0 <process_string+0xe8>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 801c928:	e0a0      	b.n	801ca6c <process_string+0x1a4>
 801c92a:	3b5c      	subs	r3, #92	; 0x5c
 801c92c:	2b19      	cmp	r3, #25
 801c92e:	f200 809d 	bhi.w	801ca6c <process_string+0x1a4>
 801c932:	a201      	add	r2, pc, #4	; (adr r2, 801c938 <process_string+0x70>)
 801c934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c938:	0801c9a9 	.word	0x0801c9a9
 801c93c:	0801ca6d 	.word	0x0801ca6d
 801c940:	0801ca6d 	.word	0x0801ca6d
 801c944:	0801ca6d 	.word	0x0801ca6d
 801c948:	0801ca6d 	.word	0x0801ca6d
 801c94c:	0801ca6d 	.word	0x0801ca6d
 801c950:	0801c9b9 	.word	0x0801c9b9
 801c954:	0801ca6d 	.word	0x0801ca6d
 801c958:	0801ca6d 	.word	0x0801ca6d
 801c95c:	0801ca6d 	.word	0x0801ca6d
 801c960:	0801c9c1 	.word	0x0801c9c1
 801c964:	0801ca6d 	.word	0x0801ca6d
 801c968:	0801ca6d 	.word	0x0801ca6d
 801c96c:	0801ca6d 	.word	0x0801ca6d
 801c970:	0801ca6d 	.word	0x0801ca6d
 801c974:	0801ca6d 	.word	0x0801ca6d
 801c978:	0801ca6d 	.word	0x0801ca6d
 801c97c:	0801ca6d 	.word	0x0801ca6d
 801c980:	0801c9c9 	.word	0x0801c9c9
 801c984:	0801ca6d 	.word	0x0801ca6d
 801c988:	0801ca6d 	.word	0x0801ca6d
 801c98c:	0801ca6d 	.word	0x0801ca6d
 801c990:	0801c9d1 	.word	0x0801c9d1
 801c994:	0801ca6d 	.word	0x0801ca6d
 801c998:	0801c9d9 	.word	0x0801c9d9
 801c99c:	0801c9e1 	.word	0x0801c9e1
                case '\"': *output_ptr = '\"'; break;
 801c9a0:	68bb      	ldr	r3, [r7, #8]
 801c9a2:	2222      	movs	r2, #34	; 0x22
 801c9a4:	701a      	strb	r2, [r3, #0]
 801c9a6:	e032      	b.n	801ca0e <process_string+0x146>
                case '\\': *output_ptr = '\\'; break;
 801c9a8:	68bb      	ldr	r3, [r7, #8]
 801c9aa:	225c      	movs	r2, #92	; 0x5c
 801c9ac:	701a      	strb	r2, [r3, #0]
 801c9ae:	e02e      	b.n	801ca0e <process_string+0x146>
                case '/':  *output_ptr = '/';  break;
 801c9b0:	68bb      	ldr	r3, [r7, #8]
 801c9b2:	222f      	movs	r2, #47	; 0x2f
 801c9b4:	701a      	strb	r2, [r3, #0]
 801c9b6:	e02a      	b.n	801ca0e <process_string+0x146>
                case 'b':  *output_ptr = '\b'; break;
 801c9b8:	68bb      	ldr	r3, [r7, #8]
 801c9ba:	2208      	movs	r2, #8
 801c9bc:	701a      	strb	r2, [r3, #0]
 801c9be:	e026      	b.n	801ca0e <process_string+0x146>
                case 'f':  *output_ptr = '\f'; break;
 801c9c0:	68bb      	ldr	r3, [r7, #8]
 801c9c2:	220c      	movs	r2, #12
 801c9c4:	701a      	strb	r2, [r3, #0]
 801c9c6:	e022      	b.n	801ca0e <process_string+0x146>
                case 'n':  *output_ptr = '\n'; break;
 801c9c8:	68bb      	ldr	r3, [r7, #8]
 801c9ca:	220a      	movs	r2, #10
 801c9cc:	701a      	strb	r2, [r3, #0]
 801c9ce:	e01e      	b.n	801ca0e <process_string+0x146>
                case 'r':  *output_ptr = '\r'; break;
 801c9d0:	68bb      	ldr	r3, [r7, #8]
 801c9d2:	220d      	movs	r2, #13
 801c9d4:	701a      	strb	r2, [r3, #0]
 801c9d6:	e01a      	b.n	801ca0e <process_string+0x146>
                case 't':  *output_ptr = '\t'; break;
 801c9d8:	68bb      	ldr	r3, [r7, #8]
 801c9da:	2209      	movs	r2, #9
 801c9dc:	701a      	strb	r2, [r3, #0]
 801c9de:	e016      	b.n	801ca0e <process_string+0x146>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
 801c9e0:	f107 0208 	add.w	r2, r7, #8
 801c9e4:	f107 030c 	add.w	r3, r7, #12
 801c9e8:	4611      	mov	r1, r2
 801c9ea:	4618      	mov	r0, r3
 801c9ec:	f7ff fe7a 	bl	801c6e4 <parse_utf16>
 801c9f0:	4603      	mov	r3, r0
 801c9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c9f6:	d109      	bne.n	801ca0c <process_string+0x144>
                        goto error;
 801c9f8:	e03d      	b.n	801ca76 <process_string+0x1ae>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	781b      	ldrb	r3, [r3, #0]
 801c9fe:	2b1f      	cmp	r3, #31
 801ca00:	d936      	bls.n	801ca70 <process_string+0x1a8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 801ca02:	68fa      	ldr	r2, [r7, #12]
 801ca04:	68bb      	ldr	r3, [r7, #8]
 801ca06:	7812      	ldrb	r2, [r2, #0]
 801ca08:	701a      	strb	r2, [r3, #0]
 801ca0a:	e000      	b.n	801ca0e <process_string+0x146>
                    break;
 801ca0c:	bf00      	nop
        }
        output_ptr++;
 801ca0e:	68bb      	ldr	r3, [r7, #8]
 801ca10:	3301      	adds	r3, #1
 801ca12:	60bb      	str	r3, [r7, #8]
        input_ptr++;
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	3301      	adds	r3, #1
 801ca18:	60fb      	str	r3, [r7, #12]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	781b      	ldrb	r3, [r3, #0]
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d007      	beq.n	801ca32 <process_string+0x16a>
 801ca22:	68fa      	ldr	r2, [r7, #12]
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	1ad3      	subs	r3, r2, r3
 801ca28:	461a      	mov	r2, r3
 801ca2a:	683b      	ldr	r3, [r7, #0]
 801ca2c:	4293      	cmp	r3, r2
 801ca2e:	f63f af69 	bhi.w	801c904 <process_string+0x3c>
    }
    *output_ptr = '\0';
 801ca32:	68bb      	ldr	r3, [r7, #8]
 801ca34:	2200      	movs	r2, #0
 801ca36:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 801ca38:	68ba      	ldr	r2, [r7, #8]
 801ca3a:	697b      	ldr	r3, [r7, #20]
 801ca3c:	1ad3      	subs	r3, r2, r3
 801ca3e:	3301      	adds	r3, #1
 801ca40:	61bb      	str	r3, [r7, #24]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 801ca42:	4b11      	ldr	r3, [pc, #68]	; (801ca88 <process_string+0x1c0>)
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	69b8      	ldr	r0, [r7, #24]
 801ca48:	4798      	blx	r3
 801ca4a:	6138      	str	r0, [r7, #16]
    if (resized_output == NULL) {
 801ca4c:	693b      	ldr	r3, [r7, #16]
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	d010      	beq.n	801ca74 <process_string+0x1ac>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 801ca52:	69ba      	ldr	r2, [r7, #24]
 801ca54:	6979      	ldr	r1, [r7, #20]
 801ca56:	6938      	ldr	r0, [r7, #16]
 801ca58:	f002 fc54 	bl	801f304 <memcpy>
    parson_free(output);
 801ca5c:	4b0b      	ldr	r3, [pc, #44]	; (801ca8c <process_string+0x1c4>)
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	6978      	ldr	r0, [r7, #20]
 801ca62:	4798      	blx	r3
    return resized_output;
 801ca64:	693b      	ldr	r3, [r7, #16]
 801ca66:	e00b      	b.n	801ca80 <process_string+0x1b8>
        goto error;
 801ca68:	bf00      	nop
 801ca6a:	e004      	b.n	801ca76 <process_string+0x1ae>
                    goto error;
 801ca6c:	bf00      	nop
 801ca6e:	e002      	b.n	801ca76 <process_string+0x1ae>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 801ca70:	bf00      	nop
 801ca72:	e000      	b.n	801ca76 <process_string+0x1ae>
        goto error;
 801ca74:	bf00      	nop
error:
    parson_free(output);
 801ca76:	4b05      	ldr	r3, [pc, #20]	; (801ca8c <process_string+0x1c4>)
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	6978      	ldr	r0, [r7, #20]
 801ca7c:	4798      	blx	r3
    return NULL;
 801ca7e:	2300      	movs	r3, #0
}
 801ca80:	4618      	mov	r0, r3
 801ca82:	3720      	adds	r7, #32
 801ca84:	46bd      	mov	sp, r7
 801ca86:	bd80      	pop	{r7, pc}
 801ca88:	200002b0 	.word	0x200002b0
 801ca8c:	200002b4 	.word	0x200002b4

0801ca90 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string) {
 801ca90:	b580      	push	{r7, lr}
 801ca92:	b086      	sub	sp, #24
 801ca94:	af00      	add	r7, sp, #0
 801ca96:	6078      	str	r0, [r7, #4]
    const char *string_start = *string;
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	617b      	str	r3, [r7, #20]
    size_t string_len = 0;
 801ca9e:	2300      	movs	r3, #0
 801caa0:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 801caa2:	6878      	ldr	r0, [r7, #4]
 801caa4:	f7ff fddc 	bl	801c660 <skip_quotes>
 801caa8:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 801caaa:	68fb      	ldr	r3, [r7, #12]
 801caac:	2b00      	cmp	r3, #0
 801caae:	d001      	beq.n	801cab4 <get_quoted_string+0x24>
        return NULL;
 801cab0:	2300      	movs	r3, #0
 801cab2:	e00c      	b.n	801cace <get_quoted_string+0x3e>
    }
    string_len = *string - string_start - 2; /* length without quotes */
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	681a      	ldr	r2, [r3, #0]
 801cab8:	697b      	ldr	r3, [r7, #20]
 801caba:	1ad3      	subs	r3, r2, r3
 801cabc:	3b02      	subs	r3, #2
 801cabe:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, string_len);
 801cac0:	697b      	ldr	r3, [r7, #20]
 801cac2:	3301      	adds	r3, #1
 801cac4:	6939      	ldr	r1, [r7, #16]
 801cac6:	4618      	mov	r0, r3
 801cac8:	f7ff fefe 	bl	801c8c8 <process_string>
 801cacc:	4603      	mov	r3, r0
}
 801cace:	4618      	mov	r0, r3
 801cad0:	3718      	adds	r7, #24
 801cad2:	46bd      	mov	sp, r7
 801cad4:	bd80      	pop	{r7, pc}
	...

0801cad8 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 801cad8:	b580      	push	{r7, lr}
 801cada:	b082      	sub	sp, #8
 801cadc:	af00      	add	r7, sp, #0
 801cade:	6078      	str	r0, [r7, #4]
 801cae0:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 801cae2:	683b      	ldr	r3, [r7, #0]
 801cae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cae8:	d906      	bls.n	801caf8 <parse_value+0x20>
        return NULL;
 801caea:	2300      	movs	r3, #0
 801caec:	e08d      	b.n	801cc0a <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	1c5a      	adds	r2, r3, #1
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	601a      	str	r2, [r3, #0]
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	781b      	ldrb	r3, [r3, #0]
 801cafe:	3301      	adds	r3, #1
 801cb00:	4a44      	ldr	r2, [pc, #272]	; (801cc14 <parse_value+0x13c>)
 801cb02:	4413      	add	r3, r2
 801cb04:	781b      	ldrb	r3, [r3, #0]
 801cb06:	f003 0308 	and.w	r3, r3, #8
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d1ef      	bne.n	801caee <parse_value+0x16>
    switch (**string) {
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	781b      	ldrb	r3, [r3, #0]
 801cb14:	2b7b      	cmp	r3, #123	; 0x7b
 801cb16:	dc77      	bgt.n	801cc08 <parse_value+0x130>
 801cb18:	2b5b      	cmp	r3, #91	; 0x5b
 801cb1a:	da08      	bge.n	801cb2e <parse_value+0x56>
 801cb1c:	2b39      	cmp	r3, #57	; 0x39
 801cb1e:	dc73      	bgt.n	801cc08 <parse_value+0x130>
 801cb20:	2b30      	cmp	r3, #48	; 0x30
 801cb22:	da67      	bge.n	801cbf4 <parse_value+0x11c>
 801cb24:	2b22      	cmp	r3, #34	; 0x22
 801cb26:	d05b      	beq.n	801cbe0 <parse_value+0x108>
 801cb28:	2b2d      	cmp	r3, #45	; 0x2d
 801cb2a:	d063      	beq.n	801cbf4 <parse_value+0x11c>
 801cb2c:	e06c      	b.n	801cc08 <parse_value+0x130>
 801cb2e:	3b5b      	subs	r3, #91	; 0x5b
 801cb30:	2b20      	cmp	r3, #32
 801cb32:	d869      	bhi.n	801cc08 <parse_value+0x130>
 801cb34:	a201      	add	r2, pc, #4	; (adr r2, 801cb3c <parse_value+0x64>)
 801cb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb3a:	bf00      	nop
 801cb3c:	0801cbd1 	.word	0x0801cbd1
 801cb40:	0801cc09 	.word	0x0801cc09
 801cb44:	0801cc09 	.word	0x0801cc09
 801cb48:	0801cc09 	.word	0x0801cc09
 801cb4c:	0801cc09 	.word	0x0801cc09
 801cb50:	0801cc09 	.word	0x0801cc09
 801cb54:	0801cc09 	.word	0x0801cc09
 801cb58:	0801cc09 	.word	0x0801cc09
 801cb5c:	0801cc09 	.word	0x0801cc09
 801cb60:	0801cc09 	.word	0x0801cc09
 801cb64:	0801cc09 	.word	0x0801cc09
 801cb68:	0801cbeb 	.word	0x0801cbeb
 801cb6c:	0801cc09 	.word	0x0801cc09
 801cb70:	0801cc09 	.word	0x0801cc09
 801cb74:	0801cc09 	.word	0x0801cc09
 801cb78:	0801cc09 	.word	0x0801cc09
 801cb7c:	0801cc09 	.word	0x0801cc09
 801cb80:	0801cc09 	.word	0x0801cc09
 801cb84:	0801cc09 	.word	0x0801cc09
 801cb88:	0801cbff 	.word	0x0801cbff
 801cb8c:	0801cc09 	.word	0x0801cc09
 801cb90:	0801cc09 	.word	0x0801cc09
 801cb94:	0801cc09 	.word	0x0801cc09
 801cb98:	0801cc09 	.word	0x0801cc09
 801cb9c:	0801cc09 	.word	0x0801cc09
 801cba0:	0801cbeb 	.word	0x0801cbeb
 801cba4:	0801cc09 	.word	0x0801cc09
 801cba8:	0801cc09 	.word	0x0801cc09
 801cbac:	0801cc09 	.word	0x0801cc09
 801cbb0:	0801cc09 	.word	0x0801cc09
 801cbb4:	0801cc09 	.word	0x0801cc09
 801cbb8:	0801cc09 	.word	0x0801cc09
 801cbbc:	0801cbc1 	.word	0x0801cbc1
        case '{':
            return parse_object_value(string, nesting + 1);
 801cbc0:	683b      	ldr	r3, [r7, #0]
 801cbc2:	3301      	adds	r3, #1
 801cbc4:	4619      	mov	r1, r3
 801cbc6:	6878      	ldr	r0, [r7, #4]
 801cbc8:	f000 f826 	bl	801cc18 <parse_object_value>
 801cbcc:	4603      	mov	r3, r0
 801cbce:	e01c      	b.n	801cc0a <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 801cbd0:	683b      	ldr	r3, [r7, #0]
 801cbd2:	3301      	adds	r3, #1
 801cbd4:	4619      	mov	r1, r3
 801cbd6:	6878      	ldr	r0, [r7, #4]
 801cbd8:	f000 f926 	bl	801ce28 <parse_array_value>
 801cbdc:	4603      	mov	r3, r0
 801cbde:	e014      	b.n	801cc0a <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 801cbe0:	6878      	ldr	r0, [r7, #4]
 801cbe2:	f000 f9e7 	bl	801cfb4 <parse_string_value>
 801cbe6:	4603      	mov	r3, r0
 801cbe8:	e00f      	b.n	801cc0a <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 801cbea:	6878      	ldr	r0, [r7, #4]
 801cbec:	f000 fa06 	bl	801cffc <parse_boolean_value>
 801cbf0:	4603      	mov	r3, r0
 801cbf2:	e00a      	b.n	801cc0a <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 801cbf4:	6878      	ldr	r0, [r7, #4]
 801cbf6:	f000 fa3d 	bl	801d074 <parse_number_value>
 801cbfa:	4603      	mov	r3, r0
 801cbfc:	e005      	b.n	801cc0a <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 801cbfe:	6878      	ldr	r0, [r7, #4]
 801cc00:	f000 fa72 	bl	801d0e8 <parse_null_value>
 801cc04:	4603      	mov	r3, r0
 801cc06:	e000      	b.n	801cc0a <parse_value+0x132>
        default:
            return NULL;
 801cc08:	2300      	movs	r3, #0
    }
}
 801cc0a:	4618      	mov	r0, r3
 801cc0c:	3708      	adds	r7, #8
 801cc0e:	46bd      	mov	sp, r7
 801cc10:	bd80      	pop	{r7, pc}
 801cc12:	bf00      	nop
 801cc14:	08022d24 	.word	0x08022d24

0801cc18 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 801cc18:	b580      	push	{r7, lr}
 801cc1a:	b086      	sub	sp, #24
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	6078      	str	r0, [r7, #4]
 801cc20:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_value = NULL;
 801cc22:	2300      	movs	r3, #0
 801cc24:	617b      	str	r3, [r7, #20]
 801cc26:	2300      	movs	r3, #0
 801cc28:	613b      	str	r3, [r7, #16]
    JSON_Object *output_object = NULL;
 801cc2a:	2300      	movs	r3, #0
 801cc2c:	60fb      	str	r3, [r7, #12]
    char *new_key = NULL;
 801cc2e:	2300      	movs	r3, #0
 801cc30:	60bb      	str	r3, [r7, #8]
    output_value = json_value_init_object();
 801cc32:	f001 fc63 	bl	801e4fc <json_value_init_object>
 801cc36:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801cc38:	697b      	ldr	r3, [r7, #20]
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d101      	bne.n	801cc42 <parse_object_value+0x2a>
        return NULL;
 801cc3e:	2300      	movs	r3, #0
 801cc40:	e0ea      	b.n	801ce18 <parse_object_value+0x200>
    }
    if (**string != '{') {
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	681b      	ldr	r3, [r3, #0]
 801cc46:	781b      	ldrb	r3, [r3, #0]
 801cc48:	2b7b      	cmp	r3, #123	; 0x7b
 801cc4a:	d004      	beq.n	801cc56 <parse_object_value+0x3e>
        json_value_free(output_value);
 801cc4c:	6978      	ldr	r0, [r7, #20]
 801cc4e:	f001 fc27 	bl	801e4a0 <json_value_free>
        return NULL;
 801cc52:	2300      	movs	r3, #0
 801cc54:	e0e0      	b.n	801ce18 <parse_object_value+0x200>
    }
    output_object = json_value_get_object(output_value);
 801cc56:	6978      	ldr	r0, [r7, #20]
 801cc58:	f001 fbbd 	bl	801e3d6 <json_value_get_object>
 801cc5c:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	681b      	ldr	r3, [r3, #0]
 801cc62:	1c5a      	adds	r2, r3, #1
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801cc68:	e004      	b.n	801cc74 <parse_object_value+0x5c>
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	1c5a      	adds	r2, r3, #1
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	601a      	str	r2, [r3, #0]
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	781b      	ldrb	r3, [r3, #0]
 801cc7a:	3301      	adds	r3, #1
 801cc7c:	4a68      	ldr	r2, [pc, #416]	; (801ce20 <parse_object_value+0x208>)
 801cc7e:	4413      	add	r3, r2
 801cc80:	781b      	ldrb	r3, [r3, #0]
 801cc82:	f003 0308 	and.w	r3, r3, #8
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d1ef      	bne.n	801cc6a <parse_object_value+0x52>
    if (**string == '}') { /* empty object */
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	781b      	ldrb	r3, [r3, #0]
 801cc90:	2b7d      	cmp	r3, #125	; 0x7d
 801cc92:	f040 808c 	bne.w	801cdae <parse_object_value+0x196>
        SKIP_CHAR(string);
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	1c5a      	adds	r2, r3, #1
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	601a      	str	r2, [r3, #0]
        return output_value;
 801cca0:	697b      	ldr	r3, [r7, #20]
 801cca2:	e0b9      	b.n	801ce18 <parse_object_value+0x200>
    }
    while (**string != '\0') {
        new_key = get_quoted_string(string);
 801cca4:	6878      	ldr	r0, [r7, #4]
 801cca6:	f7ff fef3 	bl	801ca90 <get_quoted_string>
 801ccaa:	60b8      	str	r0, [r7, #8]
        if (new_key == NULL) {
 801ccac:	68bb      	ldr	r3, [r7, #8]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d109      	bne.n	801ccc6 <parse_object_value+0xae>
            json_value_free(output_value);
 801ccb2:	6978      	ldr	r0, [r7, #20]
 801ccb4:	f001 fbf4 	bl	801e4a0 <json_value_free>
            return NULL;
 801ccb8:	2300      	movs	r3, #0
 801ccba:	e0ad      	b.n	801ce18 <parse_object_value+0x200>
        }
        SKIP_WHITESPACES(string);
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	1c5a      	adds	r2, r3, #1
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	601a      	str	r2, [r3, #0]
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	781b      	ldrb	r3, [r3, #0]
 801cccc:	3301      	adds	r3, #1
 801ccce:	4a54      	ldr	r2, [pc, #336]	; (801ce20 <parse_object_value+0x208>)
 801ccd0:	4413      	add	r3, r2
 801ccd2:	781b      	ldrb	r3, [r3, #0]
 801ccd4:	f003 0308 	and.w	r3, r3, #8
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d1ef      	bne.n	801ccbc <parse_object_value+0xa4>
        if (**string != ':') {
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	781b      	ldrb	r3, [r3, #0]
 801cce2:	2b3a      	cmp	r3, #58	; 0x3a
 801cce4:	d008      	beq.n	801ccf8 <parse_object_value+0xe0>
            parson_free(new_key);
 801cce6:	4b4f      	ldr	r3, [pc, #316]	; (801ce24 <parse_object_value+0x20c>)
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	68b8      	ldr	r0, [r7, #8]
 801ccec:	4798      	blx	r3
            json_value_free(output_value);
 801ccee:	6978      	ldr	r0, [r7, #20]
 801ccf0:	f001 fbd6 	bl	801e4a0 <json_value_free>
            return NULL;
 801ccf4:	2300      	movs	r3, #0
 801ccf6:	e08f      	b.n	801ce18 <parse_object_value+0x200>
        }
        SKIP_CHAR(string);
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	1c5a      	adds	r2, r3, #1
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 801cd02:	6839      	ldr	r1, [r7, #0]
 801cd04:	6878      	ldr	r0, [r7, #4]
 801cd06:	f7ff fee7 	bl	801cad8 <parse_value>
 801cd0a:	6138      	str	r0, [r7, #16]
        if (new_value == NULL) {
 801cd0c:	693b      	ldr	r3, [r7, #16]
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d108      	bne.n	801cd24 <parse_object_value+0x10c>
            parson_free(new_key);
 801cd12:	4b44      	ldr	r3, [pc, #272]	; (801ce24 <parse_object_value+0x20c>)
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	68b8      	ldr	r0, [r7, #8]
 801cd18:	4798      	blx	r3
            json_value_free(output_value);
 801cd1a:	6978      	ldr	r0, [r7, #20]
 801cd1c:	f001 fbc0 	bl	801e4a0 <json_value_free>
            return NULL;
 801cd20:	2300      	movs	r3, #0
 801cd22:	e079      	b.n	801ce18 <parse_object_value+0x200>
        }
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 801cd24:	693a      	ldr	r2, [r7, #16]
 801cd26:	68b9      	ldr	r1, [r7, #8]
 801cd28:	68f8      	ldr	r0, [r7, #12]
 801cd2a:	f7ff f997 	bl	801c05c <json_object_add>
 801cd2e:	4603      	mov	r3, r0
 801cd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd34:	d10b      	bne.n	801cd4e <parse_object_value+0x136>
            parson_free(new_key);
 801cd36:	4b3b      	ldr	r3, [pc, #236]	; (801ce24 <parse_object_value+0x20c>)
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	68b8      	ldr	r0, [r7, #8]
 801cd3c:	4798      	blx	r3
            json_value_free(new_value);
 801cd3e:	6938      	ldr	r0, [r7, #16]
 801cd40:	f001 fbae 	bl	801e4a0 <json_value_free>
            json_value_free(output_value);
 801cd44:	6978      	ldr	r0, [r7, #20]
 801cd46:	f001 fbab 	bl	801e4a0 <json_value_free>
            return NULL;
 801cd4a:	2300      	movs	r3, #0
 801cd4c:	e064      	b.n	801ce18 <parse_object_value+0x200>
        }
        parson_free(new_key);
 801cd4e:	4b35      	ldr	r3, [pc, #212]	; (801ce24 <parse_object_value+0x20c>)
 801cd50:	681b      	ldr	r3, [r3, #0]
 801cd52:	68b8      	ldr	r0, [r7, #8]
 801cd54:	4798      	blx	r3
        SKIP_WHITESPACES(string);
 801cd56:	e004      	b.n	801cd62 <parse_object_value+0x14a>
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	1c5a      	adds	r2, r3, #1
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	601a      	str	r2, [r3, #0]
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	781b      	ldrb	r3, [r3, #0]
 801cd68:	3301      	adds	r3, #1
 801cd6a:	4a2d      	ldr	r2, [pc, #180]	; (801ce20 <parse_object_value+0x208>)
 801cd6c:	4413      	add	r3, r2
 801cd6e:	781b      	ldrb	r3, [r3, #0]
 801cd70:	f003 0308 	and.w	r3, r3, #8
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d1ef      	bne.n	801cd58 <parse_object_value+0x140>
        if (**string != ',') {
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	781b      	ldrb	r3, [r3, #0]
 801cd7e:	2b2c      	cmp	r3, #44	; 0x2c
 801cd80:	d11c      	bne.n	801cdbc <parse_object_value+0x1a4>
            break;
        }
        SKIP_CHAR(string);
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	1c5a      	adds	r2, r3, #1
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801cd8c:	e004      	b.n	801cd98 <parse_object_value+0x180>
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	1c5a      	adds	r2, r3, #1
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	601a      	str	r2, [r3, #0]
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	781b      	ldrb	r3, [r3, #0]
 801cd9e:	3301      	adds	r3, #1
 801cda0:	4a1f      	ldr	r2, [pc, #124]	; (801ce20 <parse_object_value+0x208>)
 801cda2:	4413      	add	r3, r2
 801cda4:	781b      	ldrb	r3, [r3, #0]
 801cda6:	f003 0308 	and.w	r3, r3, #8
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d1ef      	bne.n	801cd8e <parse_object_value+0x176>
    while (**string != '\0') {
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	681b      	ldr	r3, [r3, #0]
 801cdb2:	781b      	ldrb	r3, [r3, #0]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	f47f af75 	bne.w	801cca4 <parse_object_value+0x8c>
 801cdba:	e006      	b.n	801cdca <parse_object_value+0x1b2>
            break;
 801cdbc:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801cdbe:	e004      	b.n	801cdca <parse_object_value+0x1b2>
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	1c5a      	adds	r2, r3, #1
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	601a      	str	r2, [r3, #0]
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	681b      	ldr	r3, [r3, #0]
 801cdce:	781b      	ldrb	r3, [r3, #0]
 801cdd0:	3301      	adds	r3, #1
 801cdd2:	4a13      	ldr	r2, [pc, #76]	; (801ce20 <parse_object_value+0x208>)
 801cdd4:	4413      	add	r3, r2
 801cdd6:	781b      	ldrb	r3, [r3, #0]
 801cdd8:	f003 0308 	and.w	r3, r3, #8
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d1ef      	bne.n	801cdc0 <parse_object_value+0x1a8>
    if (**string != '}' || /* Trim object after parsing is over */
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	781b      	ldrb	r3, [r3, #0]
 801cde6:	2b7d      	cmp	r3, #125	; 0x7d
 801cde8:	d10b      	bne.n	801ce02 <parse_object_value+0x1ea>
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
 801cdea:	68f8      	ldr	r0, [r7, #12]
 801cdec:	f001 fa4c 	bl	801e288 <json_object_get_count>
 801cdf0:	4603      	mov	r3, r0
 801cdf2:	4619      	mov	r1, r3
 801cdf4:	68f8      	ldr	r0, [r7, #12]
 801cdf6:	f7ff f9b3 	bl	801c160 <json_object_resize>
 801cdfa:	4603      	mov	r3, r0
    if (**string != '}' || /* Trim object after parsing is over */
 801cdfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce00:	d104      	bne.n	801ce0c <parse_object_value+0x1f4>
            json_value_free(output_value);
 801ce02:	6978      	ldr	r0, [r7, #20]
 801ce04:	f001 fb4c 	bl	801e4a0 <json_value_free>
            return NULL;
 801ce08:	2300      	movs	r3, #0
 801ce0a:	e005      	b.n	801ce18 <parse_object_value+0x200>
    }
    SKIP_CHAR(string);
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	681b      	ldr	r3, [r3, #0]
 801ce10:	1c5a      	adds	r2, r3, #1
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	601a      	str	r2, [r3, #0]
    return output_value;
 801ce16:	697b      	ldr	r3, [r7, #20]
}
 801ce18:	4618      	mov	r0, r3
 801ce1a:	3718      	adds	r7, #24
 801ce1c:	46bd      	mov	sp, r7
 801ce1e:	bd80      	pop	{r7, pc}
 801ce20:	08022d24 	.word	0x08022d24
 801ce24:	200002b4 	.word	0x200002b4

0801ce28 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 801ce28:	b580      	push	{r7, lr}
 801ce2a:	b086      	sub	sp, #24
 801ce2c:	af00      	add	r7, sp, #0
 801ce2e:	6078      	str	r0, [r7, #4]
 801ce30:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 801ce32:	2300      	movs	r3, #0
 801ce34:	617b      	str	r3, [r7, #20]
 801ce36:	2300      	movs	r3, #0
 801ce38:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 801ce3a:	2300      	movs	r3, #0
 801ce3c:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 801ce3e:	f001 fb89 	bl	801e554 <json_value_init_array>
 801ce42:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801ce44:	697b      	ldr	r3, [r7, #20]
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d101      	bne.n	801ce4e <parse_array_value+0x26>
        return NULL;
 801ce4a:	2300      	movs	r3, #0
 801ce4c:	e0ab      	b.n	801cfa6 <parse_array_value+0x17e>
    }
    if (**string != '[') {
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	781b      	ldrb	r3, [r3, #0]
 801ce54:	2b5b      	cmp	r3, #91	; 0x5b
 801ce56:	d004      	beq.n	801ce62 <parse_array_value+0x3a>
        json_value_free(output_value);
 801ce58:	6978      	ldr	r0, [r7, #20]
 801ce5a:	f001 fb21 	bl	801e4a0 <json_value_free>
        return NULL;
 801ce5e:	2300      	movs	r3, #0
 801ce60:	e0a1      	b.n	801cfa6 <parse_array_value+0x17e>
    }
    output_array = json_value_get_array(output_value);
 801ce62:	6978      	ldr	r0, [r7, #20]
 801ce64:	f001 fac9 	bl	801e3fa <json_value_get_array>
 801ce68:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	681b      	ldr	r3, [r3, #0]
 801ce6e:	1c5a      	adds	r2, r3, #1
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801ce74:	e004      	b.n	801ce80 <parse_array_value+0x58>
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	1c5a      	adds	r2, r3, #1
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	601a      	str	r2, [r3, #0]
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	781b      	ldrb	r3, [r3, #0]
 801ce86:	3301      	adds	r3, #1
 801ce88:	4a49      	ldr	r2, [pc, #292]	; (801cfb0 <parse_array_value+0x188>)
 801ce8a:	4413      	add	r3, r2
 801ce8c:	781b      	ldrb	r3, [r3, #0]
 801ce8e:	f003 0308 	and.w	r3, r3, #8
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d1ef      	bne.n	801ce76 <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	781b      	ldrb	r3, [r3, #0]
 801ce9c:	2b5d      	cmp	r3, #93	; 0x5d
 801ce9e:	d14e      	bne.n	801cf3e <parse_array_value+0x116>
        SKIP_CHAR(string);
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	1c5a      	adds	r2, r3, #1
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	601a      	str	r2, [r3, #0]
        return output_value;
 801ceaa:	697b      	ldr	r3, [r7, #20]
 801ceac:	e07b      	b.n	801cfa6 <parse_array_value+0x17e>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 801ceae:	6839      	ldr	r1, [r7, #0]
 801ceb0:	6878      	ldr	r0, [r7, #4]
 801ceb2:	f7ff fe11 	bl	801cad8 <parse_value>
 801ceb6:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 801ceb8:	693b      	ldr	r3, [r7, #16]
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d104      	bne.n	801cec8 <parse_array_value+0xa0>
            json_value_free(output_value);
 801cebe:	6978      	ldr	r0, [r7, #20]
 801cec0:	f001 faee 	bl	801e4a0 <json_value_free>
            return NULL;
 801cec4:	2300      	movs	r3, #0
 801cec6:	e06e      	b.n	801cfa6 <parse_array_value+0x17e>
        }
        if (json_array_add(output_array, new_array_value) == JSONFailure) {
 801cec8:	6939      	ldr	r1, [r7, #16]
 801ceca:	68f8      	ldr	r0, [r7, #12]
 801cecc:	f7ff fb0c 	bl	801c4e8 <json_array_add>
 801ced0:	4603      	mov	r3, r0
 801ced2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ced6:	d10c      	bne.n	801cef2 <parse_array_value+0xca>
            json_value_free(new_array_value);
 801ced8:	6938      	ldr	r0, [r7, #16]
 801ceda:	f001 fae1 	bl	801e4a0 <json_value_free>
            json_value_free(output_value);
 801cede:	6978      	ldr	r0, [r7, #20]
 801cee0:	f001 fade 	bl	801e4a0 <json_value_free>
            return NULL;
 801cee4:	2300      	movs	r3, #0
 801cee6:	e05e      	b.n	801cfa6 <parse_array_value+0x17e>
        }
        SKIP_WHITESPACES(string);
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	1c5a      	adds	r2, r3, #1
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	601a      	str	r2, [r3, #0]
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	781b      	ldrb	r3, [r3, #0]
 801cef8:	3301      	adds	r3, #1
 801cefa:	4a2d      	ldr	r2, [pc, #180]	; (801cfb0 <parse_array_value+0x188>)
 801cefc:	4413      	add	r3, r2
 801cefe:	781b      	ldrb	r3, [r3, #0]
 801cf00:	f003 0308 	and.w	r3, r3, #8
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	d1ef      	bne.n	801cee8 <parse_array_value+0xc0>
        if (**string != ',') {
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	781b      	ldrb	r3, [r3, #0]
 801cf0e:	2b2c      	cmp	r3, #44	; 0x2c
 801cf10:	d11b      	bne.n	801cf4a <parse_array_value+0x122>
            break;
        }
        SKIP_CHAR(string);
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	1c5a      	adds	r2, r3, #1
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801cf1c:	e004      	b.n	801cf28 <parse_array_value+0x100>
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	1c5a      	adds	r2, r3, #1
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	601a      	str	r2, [r3, #0]
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	781b      	ldrb	r3, [r3, #0]
 801cf2e:	3301      	adds	r3, #1
 801cf30:	4a1f      	ldr	r2, [pc, #124]	; (801cfb0 <parse_array_value+0x188>)
 801cf32:	4413      	add	r3, r2
 801cf34:	781b      	ldrb	r3, [r3, #0]
 801cf36:	f003 0308 	and.w	r3, r3, #8
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d1ef      	bne.n	801cf1e <parse_array_value+0xf6>
    while (**string != '\0') {
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	681b      	ldr	r3, [r3, #0]
 801cf42:	781b      	ldrb	r3, [r3, #0]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d1b2      	bne.n	801ceae <parse_array_value+0x86>
 801cf48:	e006      	b.n	801cf58 <parse_array_value+0x130>
            break;
 801cf4a:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801cf4c:	e004      	b.n	801cf58 <parse_array_value+0x130>
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	1c5a      	adds	r2, r3, #1
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	601a      	str	r2, [r3, #0]
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	781b      	ldrb	r3, [r3, #0]
 801cf5e:	3301      	adds	r3, #1
 801cf60:	4a13      	ldr	r2, [pc, #76]	; (801cfb0 <parse_array_value+0x188>)
 801cf62:	4413      	add	r3, r2
 801cf64:	781b      	ldrb	r3, [r3, #0]
 801cf66:	f003 0308 	and.w	r3, r3, #8
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d1ef      	bne.n	801cf4e <parse_array_value+0x126>
    if (**string != ']' || /* Trim array after parsing is over */
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	681b      	ldr	r3, [r3, #0]
 801cf72:	781b      	ldrb	r3, [r3, #0]
 801cf74:	2b5d      	cmp	r3, #93	; 0x5d
 801cf76:	d10b      	bne.n	801cf90 <parse_array_value+0x168>
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
 801cf78:	68f8      	ldr	r0, [r7, #12]
 801cf7a:	f001 f9fd 	bl	801e378 <json_array_get_count>
 801cf7e:	4603      	mov	r3, r0
 801cf80:	4619      	mov	r1, r3
 801cf82:	68f8      	ldr	r0, [r7, #12]
 801cf84:	f7ff fae6 	bl	801c554 <json_array_resize>
 801cf88:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 801cf8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf8e:	d104      	bne.n	801cf9a <parse_array_value+0x172>
            json_value_free(output_value);
 801cf90:	6978      	ldr	r0, [r7, #20]
 801cf92:	f001 fa85 	bl	801e4a0 <json_value_free>
            return NULL;
 801cf96:	2300      	movs	r3, #0
 801cf98:	e005      	b.n	801cfa6 <parse_array_value+0x17e>
    }
    SKIP_CHAR(string);
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	1c5a      	adds	r2, r3, #1
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	601a      	str	r2, [r3, #0]
    return output_value;
 801cfa4:	697b      	ldr	r3, [r7, #20]
}
 801cfa6:	4618      	mov	r0, r3
 801cfa8:	3718      	adds	r7, #24
 801cfaa:	46bd      	mov	sp, r7
 801cfac:	bd80      	pop	{r7, pc}
 801cfae:	bf00      	nop
 801cfb0:	08022d24 	.word	0x08022d24

0801cfb4 <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 801cfb4:	b580      	push	{r7, lr}
 801cfb6:	b084      	sub	sp, #16
 801cfb8:	af00      	add	r7, sp, #0
 801cfba:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 801cfbc:	2300      	movs	r3, #0
 801cfbe:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string);
 801cfc0:	6878      	ldr	r0, [r7, #4]
 801cfc2:	f7ff fd65 	bl	801ca90 <get_quoted_string>
 801cfc6:	60b8      	str	r0, [r7, #8]
    if (new_string == NULL) {
 801cfc8:	68bb      	ldr	r3, [r7, #8]
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	d101      	bne.n	801cfd2 <parse_string_value+0x1e>
        return NULL;
 801cfce:	2300      	movs	r3, #0
 801cfd0:	e00d      	b.n	801cfee <parse_string_value+0x3a>
    }
    value = json_value_init_string_no_copy(new_string);
 801cfd2:	68b8      	ldr	r0, [r7, #8]
 801cfd4:	f7ff fb26 	bl	801c624 <json_value_init_string_no_copy>
 801cfd8:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d105      	bne.n	801cfec <parse_string_value+0x38>
        parson_free(new_string);
 801cfe0:	4b05      	ldr	r3, [pc, #20]	; (801cff8 <parse_string_value+0x44>)
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	68b8      	ldr	r0, [r7, #8]
 801cfe6:	4798      	blx	r3
        return NULL;
 801cfe8:	2300      	movs	r3, #0
 801cfea:	e000      	b.n	801cfee <parse_string_value+0x3a>
    }
    return value;
 801cfec:	68fb      	ldr	r3, [r7, #12]
}
 801cfee:	4618      	mov	r0, r3
 801cff0:	3710      	adds	r7, #16
 801cff2:	46bd      	mov	sp, r7
 801cff4:	bd80      	pop	{r7, pc}
 801cff6:	bf00      	nop
 801cff8:	200002b4 	.word	0x200002b4

0801cffc <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 801cffc:	b580      	push	{r7, lr}
 801cffe:	b084      	sub	sp, #16
 801d000:	af00      	add	r7, sp, #0
 801d002:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 801d004:	2304      	movs	r3, #4
 801d006:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 801d008:	2305      	movs	r3, #5
 801d00a:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	68fa      	ldr	r2, [r7, #12]
 801d012:	4619      	mov	r1, r3
 801d014:	4815      	ldr	r0, [pc, #84]	; (801d06c <parse_boolean_value+0x70>)
 801d016:	f002 fadf 	bl	801f5d8 <strncmp>
 801d01a:	4603      	mov	r3, r0
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d10a      	bne.n	801d036 <parse_boolean_value+0x3a>
        *string += true_token_size;
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	681a      	ldr	r2, [r3, #0]
 801d024:	68fb      	ldr	r3, [r7, #12]
 801d026:	441a      	add	r2, r3
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 801d02c:	2001      	movs	r0, #1
 801d02e:	f001 fb45 	bl	801e6bc <json_value_init_boolean>
 801d032:	4603      	mov	r3, r0
 801d034:	e015      	b.n	801d062 <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	68ba      	ldr	r2, [r7, #8]
 801d03c:	4619      	mov	r1, r3
 801d03e:	480c      	ldr	r0, [pc, #48]	; (801d070 <parse_boolean_value+0x74>)
 801d040:	f002 faca 	bl	801f5d8 <strncmp>
 801d044:	4603      	mov	r3, r0
 801d046:	2b00      	cmp	r3, #0
 801d048:	d10a      	bne.n	801d060 <parse_boolean_value+0x64>
        *string += false_token_size;
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	681a      	ldr	r2, [r3, #0]
 801d04e:	68bb      	ldr	r3, [r7, #8]
 801d050:	441a      	add	r2, r3
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 801d056:	2000      	movs	r0, #0
 801d058:	f001 fb30 	bl	801e6bc <json_value_init_boolean>
 801d05c:	4603      	mov	r3, r0
 801d05e:	e000      	b.n	801d062 <parse_boolean_value+0x66>
    }
    return NULL;
 801d060:	2300      	movs	r3, #0
}
 801d062:	4618      	mov	r0, r3
 801d064:	3710      	adds	r7, #16
 801d066:	46bd      	mov	sp, r7
 801d068:	bd80      	pop	{r7, pc}
 801d06a:	bf00      	nop
 801d06c:	080226d0 	.word	0x080226d0
 801d070:	080226d8 	.word	0x080226d8

0801d074 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 801d074:	b580      	push	{r7, lr}
 801d076:	b086      	sub	sp, #24
 801d078:	af00      	add	r7, sp, #0
 801d07a:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 801d07c:	f04f 0200 	mov.w	r2, #0
 801d080:	f04f 0300 	mov.w	r3, #0
 801d084:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 801d088:	f001 fee2 	bl	801ee50 <__errno>
 801d08c:	4603      	mov	r3, r0
 801d08e:	2200      	movs	r2, #0
 801d090:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	681b      	ldr	r3, [r3, #0]
 801d096:	f107 020c 	add.w	r2, r7, #12
 801d09a:	4611      	mov	r1, r2
 801d09c:	4618      	mov	r0, r3
 801d09e:	f003 f8e9 	bl	8020274 <strtod>
 801d0a2:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno || !is_decimal(*string, end - *string)) {
 801d0a6:	f001 fed3 	bl	801ee50 <__errno>
 801d0aa:	4603      	mov	r3, r0
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	d10b      	bne.n	801d0ca <parse_number_value+0x56>
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	6818      	ldr	r0, [r3, #0]
 801d0b6:	68fa      	ldr	r2, [r7, #12]
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	1ad3      	subs	r3, r2, r3
 801d0be:	4619      	mov	r1, r3
 801d0c0:	f7fe ff68 	bl	801bf94 <is_decimal>
 801d0c4:	4603      	mov	r3, r0
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	d101      	bne.n	801d0ce <parse_number_value+0x5a>
        return NULL;
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	e007      	b.n	801d0de <parse_number_value+0x6a>
    }
    *string = end;
 801d0ce:	68fa      	ldr	r2, [r7, #12]
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 801d0d4:	ed97 0b04 	vldr	d0, [r7, #16]
 801d0d8:	f001 fa9e 	bl	801e618 <json_value_init_number>
 801d0dc:	4603      	mov	r3, r0
}
 801d0de:	4618      	mov	r0, r3
 801d0e0:	3718      	adds	r7, #24
 801d0e2:	46bd      	mov	sp, r7
 801d0e4:	bd80      	pop	{r7, pc}
	...

0801d0e8 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 801d0e8:	b580      	push	{r7, lr}
 801d0ea:	b084      	sub	sp, #16
 801d0ec:	af00      	add	r7, sp, #0
 801d0ee:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 801d0f0:	2304      	movs	r3, #4
 801d0f2:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	68fa      	ldr	r2, [r7, #12]
 801d0fa:	4619      	mov	r1, r3
 801d0fc:	480a      	ldr	r0, [pc, #40]	; (801d128 <parse_null_value+0x40>)
 801d0fe:	f002 fa6b 	bl	801f5d8 <strncmp>
 801d102:	4603      	mov	r3, r0
 801d104:	2b00      	cmp	r3, #0
 801d106:	d109      	bne.n	801d11c <parse_null_value+0x34>
        *string += token_size;
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	681a      	ldr	r2, [r3, #0]
 801d10c:	68fb      	ldr	r3, [r7, #12]
 801d10e:	441a      	add	r2, r3
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 801d114:	f001 faf6 	bl	801e704 <json_value_init_null>
 801d118:	4603      	mov	r3, r0
 801d11a:	e000      	b.n	801d11e <parse_null_value+0x36>
    }
    return NULL;
 801d11c:	2300      	movs	r3, #0
}
 801d11e:	4618      	mov	r0, r3
 801d120:	3710      	adds	r7, #16
 801d122:	46bd      	mov	sp, r7
 801d124:	bd80      	pop	{r7, pc}
 801d126:	bf00      	nop
 801d128:	080226e0 	.word	0x080226e0

0801d12c <json_serialize_to_buffer_r>:
                                  if (written < 0) { return -1; }\
                                  if (buf != NULL) { buf += written; }\
                                  written_total += written; } while(0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, int is_pretty, char *num_buf)
{
 801d12c:	b580      	push	{r7, lr}
 801d12e:	b092      	sub	sp, #72	; 0x48
 801d130:	af02      	add	r7, sp, #8
 801d132:	60f8      	str	r0, [r7, #12]
 801d134:	60b9      	str	r1, [r7, #8]
 801d136:	607a      	str	r2, [r7, #4]
 801d138:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 801d13a:	2300      	movs	r3, #0
 801d13c:	637b      	str	r3, [r7, #52]	; 0x34
 801d13e:	2300      	movs	r3, #0
 801d140:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Value *temp_value = NULL;
 801d142:	2300      	movs	r3, #0
 801d144:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Array *array = NULL;
 801d146:	2300      	movs	r3, #0
 801d148:	62bb      	str	r3, [r7, #40]	; 0x28
    JSON_Object *object = NULL;
 801d14a:	2300      	movs	r3, #0
 801d14c:	627b      	str	r3, [r7, #36]	; 0x24
    size_t i = 0, count = 0;
 801d14e:	2300      	movs	r3, #0
 801d150:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d152:	2300      	movs	r3, #0
 801d154:	623b      	str	r3, [r7, #32]
    double num = 0.0;
 801d156:	f04f 0200 	mov.w	r2, #0
 801d15a:	f04f 0300 	mov.w	r3, #0
 801d15e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 801d162:	f04f 33ff 	mov.w	r3, #4294967295
 801d166:	617b      	str	r3, [r7, #20]
 801d168:	2300      	movs	r3, #0
 801d16a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (json_value_get_type(value)) {
 801d16c:	68f8      	ldr	r0, [r7, #12]
 801d16e:	f001 f920 	bl	801e3b2 <json_value_get_type>
 801d172:	4603      	mov	r3, r0
 801d174:	3301      	adds	r3, #1
 801d176:	2b07      	cmp	r3, #7
 801d178:	f200 82e4 	bhi.w	801d744 <json_serialize_to_buffer_r+0x618>
 801d17c:	a201      	add	r2, pc, #4	; (adr r2, 801d184 <json_serialize_to_buffer_r+0x58>)
 801d17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d182:	bf00      	nop
 801d184:	0801d73f 	.word	0x0801d73f
 801d188:	0801d745 	.word	0x0801d745
 801d18c:	0801d70f 	.word	0x0801d70f
 801d190:	0801d5f9 	.word	0x0801d5f9
 801d194:	0801d6a7 	.word	0x0801d6a7
 801d198:	0801d373 	.word	0x0801d373
 801d19c:	0801d1a5 	.word	0x0801d1a5
 801d1a0:	0801d63d 	.word	0x0801d63d
        case JSONArray:
            array = json_value_get_array(value);
 801d1a4:	68f8      	ldr	r0, [r7, #12]
 801d1a6:	f001 f928 	bl	801e3fa <json_value_get_array>
 801d1aa:	62b8      	str	r0, [r7, #40]	; 0x28
            count = json_array_get_count(array);
 801d1ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d1ae:	f001 f8e3 	bl	801e378 <json_array_get_count>
 801d1b2:	6238      	str	r0, [r7, #32]
            APPEND_STRING("[");
 801d1b4:	499b      	ldr	r1, [pc, #620]	; (801d424 <json_serialize_to_buffer_r+0x2f8>)
 801d1b6:	68b8      	ldr	r0, [r7, #8]
 801d1b8:	f000 ff94 	bl	801e0e4 <append_string>
 801d1bc:	6178      	str	r0, [r7, #20]
 801d1be:	697b      	ldr	r3, [r7, #20]
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	da02      	bge.n	801d1ca <json_serialize_to_buffer_r+0x9e>
 801d1c4:	f04f 33ff 	mov.w	r3, #4294967295
 801d1c8:	e2be      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d1ca:	68bb      	ldr	r3, [r7, #8]
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	d003      	beq.n	801d1d8 <json_serialize_to_buffer_r+0xac>
 801d1d0:	697b      	ldr	r3, [r7, #20]
 801d1d2:	68ba      	ldr	r2, [r7, #8]
 801d1d4:	4413      	add	r3, r2
 801d1d6:	60bb      	str	r3, [r7, #8]
 801d1d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d1da:	697b      	ldr	r3, [r7, #20]
 801d1dc:	4413      	add	r3, r2
 801d1de:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801d1e0:	6a3b      	ldr	r3, [r7, #32]
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d018      	beq.n	801d218 <json_serialize_to_buffer_r+0xec>
 801d1e6:	683b      	ldr	r3, [r7, #0]
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	d015      	beq.n	801d218 <json_serialize_to_buffer_r+0xec>
                APPEND_STRING("\n");
 801d1ec:	498e      	ldr	r1, [pc, #568]	; (801d428 <json_serialize_to_buffer_r+0x2fc>)
 801d1ee:	68b8      	ldr	r0, [r7, #8]
 801d1f0:	f000 ff78 	bl	801e0e4 <append_string>
 801d1f4:	6178      	str	r0, [r7, #20]
 801d1f6:	697b      	ldr	r3, [r7, #20]
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	da02      	bge.n	801d202 <json_serialize_to_buffer_r+0xd6>
 801d1fc:	f04f 33ff 	mov.w	r3, #4294967295
 801d200:	e2a2      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d202:	68bb      	ldr	r3, [r7, #8]
 801d204:	2b00      	cmp	r3, #0
 801d206:	d003      	beq.n	801d210 <json_serialize_to_buffer_r+0xe4>
 801d208:	697b      	ldr	r3, [r7, #20]
 801d20a:	68ba      	ldr	r2, [r7, #8]
 801d20c:	4413      	add	r3, r2
 801d20e:	60bb      	str	r3, [r7, #8]
 801d210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d212:	697b      	ldr	r3, [r7, #20]
 801d214:	4413      	add	r3, r2
 801d216:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801d218:	2300      	movs	r3, #0
 801d21a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d21c:	e071      	b.n	801d302 <json_serialize_to_buffer_r+0x1d6>
                if (is_pretty) {
 801d21e:	683b      	ldr	r3, [r7, #0]
 801d220:	2b00      	cmp	r3, #0
 801d222:	d017      	beq.n	801d254 <json_serialize_to_buffer_r+0x128>
                    APPEND_INDENT(level+1);
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	3301      	adds	r3, #1
 801d228:	4619      	mov	r1, r3
 801d22a:	68b8      	ldr	r0, [r7, #8]
 801d22c:	f000 ff28 	bl	801e080 <append_indent>
 801d230:	6178      	str	r0, [r7, #20]
 801d232:	697b      	ldr	r3, [r7, #20]
 801d234:	2b00      	cmp	r3, #0
 801d236:	da02      	bge.n	801d23e <json_serialize_to_buffer_r+0x112>
 801d238:	f04f 33ff 	mov.w	r3, #4294967295
 801d23c:	e284      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d23e:	68bb      	ldr	r3, [r7, #8]
 801d240:	2b00      	cmp	r3, #0
 801d242:	d003      	beq.n	801d24c <json_serialize_to_buffer_r+0x120>
 801d244:	697b      	ldr	r3, [r7, #20]
 801d246:	68ba      	ldr	r2, [r7, #8]
 801d248:	4413      	add	r3, r2
 801d24a:	60bb      	str	r3, [r7, #8]
 801d24c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d24e:	697b      	ldr	r3, [r7, #20]
 801d250:	4413      	add	r3, r2
 801d252:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_array_get_value(array, i);
 801d254:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d258:	f001 f861 	bl	801e31e <json_array_get_value>
 801d25c:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	1c5a      	adds	r2, r3, #1
 801d262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d264:	9300      	str	r3, [sp, #0]
 801d266:	683b      	ldr	r3, [r7, #0]
 801d268:	68b9      	ldr	r1, [r7, #8]
 801d26a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d26c:	f7ff ff5e 	bl	801d12c <json_serialize_to_buffer_r>
 801d270:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801d272:	697b      	ldr	r3, [r7, #20]
 801d274:	2b00      	cmp	r3, #0
 801d276:	da02      	bge.n	801d27e <json_serialize_to_buffer_r+0x152>
                    return -1;
 801d278:	f04f 33ff 	mov.w	r3, #4294967295
 801d27c:	e264      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801d27e:	68bb      	ldr	r3, [r7, #8]
 801d280:	2b00      	cmp	r3, #0
 801d282:	d003      	beq.n	801d28c <json_serialize_to_buffer_r+0x160>
                    buf += written;
 801d284:	697b      	ldr	r3, [r7, #20]
 801d286:	68ba      	ldr	r2, [r7, #8]
 801d288:	4413      	add	r3, r2
 801d28a:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801d28c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d28e:	697b      	ldr	r3, [r7, #20]
 801d290:	4413      	add	r3, r2
 801d292:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801d294:	6a3b      	ldr	r3, [r7, #32]
 801d296:	3b01      	subs	r3, #1
 801d298:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d29a:	429a      	cmp	r2, r3
 801d29c:	d215      	bcs.n	801d2ca <json_serialize_to_buffer_r+0x19e>
                    APPEND_STRING(",");
 801d29e:	4963      	ldr	r1, [pc, #396]	; (801d42c <json_serialize_to_buffer_r+0x300>)
 801d2a0:	68b8      	ldr	r0, [r7, #8]
 801d2a2:	f000 ff1f 	bl	801e0e4 <append_string>
 801d2a6:	6178      	str	r0, [r7, #20]
 801d2a8:	697b      	ldr	r3, [r7, #20]
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	da02      	bge.n	801d2b4 <json_serialize_to_buffer_r+0x188>
 801d2ae:	f04f 33ff 	mov.w	r3, #4294967295
 801d2b2:	e249      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d2b4:	68bb      	ldr	r3, [r7, #8]
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d003      	beq.n	801d2c2 <json_serialize_to_buffer_r+0x196>
 801d2ba:	697b      	ldr	r3, [r7, #20]
 801d2bc:	68ba      	ldr	r2, [r7, #8]
 801d2be:	4413      	add	r3, r2
 801d2c0:	60bb      	str	r3, [r7, #8]
 801d2c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d2c4:	697b      	ldr	r3, [r7, #20]
 801d2c6:	4413      	add	r3, r2
 801d2c8:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801d2ca:	683b      	ldr	r3, [r7, #0]
 801d2cc:	2b00      	cmp	r3, #0
 801d2ce:	d015      	beq.n	801d2fc <json_serialize_to_buffer_r+0x1d0>
                    APPEND_STRING("\n");
 801d2d0:	4955      	ldr	r1, [pc, #340]	; (801d428 <json_serialize_to_buffer_r+0x2fc>)
 801d2d2:	68b8      	ldr	r0, [r7, #8]
 801d2d4:	f000 ff06 	bl	801e0e4 <append_string>
 801d2d8:	6178      	str	r0, [r7, #20]
 801d2da:	697b      	ldr	r3, [r7, #20]
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	da02      	bge.n	801d2e6 <json_serialize_to_buffer_r+0x1ba>
 801d2e0:	f04f 33ff 	mov.w	r3, #4294967295
 801d2e4:	e230      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d2e6:	68bb      	ldr	r3, [r7, #8]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d003      	beq.n	801d2f4 <json_serialize_to_buffer_r+0x1c8>
 801d2ec:	697b      	ldr	r3, [r7, #20]
 801d2ee:	68ba      	ldr	r2, [r7, #8]
 801d2f0:	4413      	add	r3, r2
 801d2f2:	60bb      	str	r3, [r7, #8]
 801d2f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d2f6:	697b      	ldr	r3, [r7, #20]
 801d2f8:	4413      	add	r3, r2
 801d2fa:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801d2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d2fe:	3301      	adds	r3, #1
 801d300:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d302:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d304:	6a3b      	ldr	r3, [r7, #32]
 801d306:	429a      	cmp	r2, r3
 801d308:	d389      	bcc.n	801d21e <json_serialize_to_buffer_r+0xf2>
                }
            }
            if (count > 0 && is_pretty) {
 801d30a:	6a3b      	ldr	r3, [r7, #32]
 801d30c:	2b00      	cmp	r3, #0
 801d30e:	d018      	beq.n	801d342 <json_serialize_to_buffer_r+0x216>
 801d310:	683b      	ldr	r3, [r7, #0]
 801d312:	2b00      	cmp	r3, #0
 801d314:	d015      	beq.n	801d342 <json_serialize_to_buffer_r+0x216>
                APPEND_INDENT(level);
 801d316:	6879      	ldr	r1, [r7, #4]
 801d318:	68b8      	ldr	r0, [r7, #8]
 801d31a:	f000 feb1 	bl	801e080 <append_indent>
 801d31e:	6178      	str	r0, [r7, #20]
 801d320:	697b      	ldr	r3, [r7, #20]
 801d322:	2b00      	cmp	r3, #0
 801d324:	da02      	bge.n	801d32c <json_serialize_to_buffer_r+0x200>
 801d326:	f04f 33ff 	mov.w	r3, #4294967295
 801d32a:	e20d      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d32c:	68bb      	ldr	r3, [r7, #8]
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d003      	beq.n	801d33a <json_serialize_to_buffer_r+0x20e>
 801d332:	697b      	ldr	r3, [r7, #20]
 801d334:	68ba      	ldr	r2, [r7, #8]
 801d336:	4413      	add	r3, r2
 801d338:	60bb      	str	r3, [r7, #8]
 801d33a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d33c:	697b      	ldr	r3, [r7, #20]
 801d33e:	4413      	add	r3, r2
 801d340:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("]");
 801d342:	493b      	ldr	r1, [pc, #236]	; (801d430 <json_serialize_to_buffer_r+0x304>)
 801d344:	68b8      	ldr	r0, [r7, #8]
 801d346:	f000 fecd 	bl	801e0e4 <append_string>
 801d34a:	6178      	str	r0, [r7, #20]
 801d34c:	697b      	ldr	r3, [r7, #20]
 801d34e:	2b00      	cmp	r3, #0
 801d350:	da02      	bge.n	801d358 <json_serialize_to_buffer_r+0x22c>
 801d352:	f04f 33ff 	mov.w	r3, #4294967295
 801d356:	e1f7      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d358:	68bb      	ldr	r3, [r7, #8]
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	d003      	beq.n	801d366 <json_serialize_to_buffer_r+0x23a>
 801d35e:	697b      	ldr	r3, [r7, #20]
 801d360:	68ba      	ldr	r2, [r7, #8]
 801d362:	4413      	add	r3, r2
 801d364:	60bb      	str	r3, [r7, #8]
 801d366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d368:	697b      	ldr	r3, [r7, #20]
 801d36a:	4413      	add	r3, r2
 801d36c:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801d36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d370:	e1ea      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
        case JSONObject:
            object = json_value_get_object(value);
 801d372:	68f8      	ldr	r0, [r7, #12]
 801d374:	f001 f82f 	bl	801e3d6 <json_value_get_object>
 801d378:	6278      	str	r0, [r7, #36]	; 0x24
            count  = json_object_get_count(object);
 801d37a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d37c:	f000 ff84 	bl	801e288 <json_object_get_count>
 801d380:	6238      	str	r0, [r7, #32]
            APPEND_STRING("{");
 801d382:	492c      	ldr	r1, [pc, #176]	; (801d434 <json_serialize_to_buffer_r+0x308>)
 801d384:	68b8      	ldr	r0, [r7, #8]
 801d386:	f000 fead 	bl	801e0e4 <append_string>
 801d38a:	6178      	str	r0, [r7, #20]
 801d38c:	697b      	ldr	r3, [r7, #20]
 801d38e:	2b00      	cmp	r3, #0
 801d390:	da02      	bge.n	801d398 <json_serialize_to_buffer_r+0x26c>
 801d392:	f04f 33ff 	mov.w	r3, #4294967295
 801d396:	e1d7      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d398:	68bb      	ldr	r3, [r7, #8]
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	d003      	beq.n	801d3a6 <json_serialize_to_buffer_r+0x27a>
 801d39e:	697b      	ldr	r3, [r7, #20]
 801d3a0:	68ba      	ldr	r2, [r7, #8]
 801d3a2:	4413      	add	r3, r2
 801d3a4:	60bb      	str	r3, [r7, #8]
 801d3a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d3a8:	697b      	ldr	r3, [r7, #20]
 801d3aa:	4413      	add	r3, r2
 801d3ac:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801d3ae:	6a3b      	ldr	r3, [r7, #32]
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d018      	beq.n	801d3e6 <json_serialize_to_buffer_r+0x2ba>
 801d3b4:	683b      	ldr	r3, [r7, #0]
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d015      	beq.n	801d3e6 <json_serialize_to_buffer_r+0x2ba>
                APPEND_STRING("\n");
 801d3ba:	491b      	ldr	r1, [pc, #108]	; (801d428 <json_serialize_to_buffer_r+0x2fc>)
 801d3bc:	68b8      	ldr	r0, [r7, #8]
 801d3be:	f000 fe91 	bl	801e0e4 <append_string>
 801d3c2:	6178      	str	r0, [r7, #20]
 801d3c4:	697b      	ldr	r3, [r7, #20]
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	da02      	bge.n	801d3d0 <json_serialize_to_buffer_r+0x2a4>
 801d3ca:	f04f 33ff 	mov.w	r3, #4294967295
 801d3ce:	e1bb      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d3d0:	68bb      	ldr	r3, [r7, #8]
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d003      	beq.n	801d3de <json_serialize_to_buffer_r+0x2b2>
 801d3d6:	697b      	ldr	r3, [r7, #20]
 801d3d8:	68ba      	ldr	r2, [r7, #8]
 801d3da:	4413      	add	r3, r2
 801d3dc:	60bb      	str	r3, [r7, #8]
 801d3de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d3e0:	697b      	ldr	r3, [r7, #20]
 801d3e2:	4413      	add	r3, r2
 801d3e4:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801d3e6:	2300      	movs	r3, #0
 801d3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d3ea:	e0cc      	b.n	801d586 <json_serialize_to_buffer_r+0x45a>
                key = json_object_get_name(object, i);
 801d3ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d3ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d3f0:	f000 ff5b 	bl	801e2aa <json_object_get_name>
 801d3f4:	6378      	str	r0, [r7, #52]	; 0x34
                if (key == NULL) {
 801d3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d102      	bne.n	801d402 <json_serialize_to_buffer_r+0x2d6>
                    return -1;
 801d3fc:	f04f 33ff 	mov.w	r3, #4294967295
 801d400:	e1a2      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
                }
                if (is_pretty) {
 801d402:	683b      	ldr	r3, [r7, #0]
 801d404:	2b00      	cmp	r3, #0
 801d406:	d022      	beq.n	801d44e <json_serialize_to_buffer_r+0x322>
                    APPEND_INDENT(level+1);
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	3301      	adds	r3, #1
 801d40c:	4619      	mov	r1, r3
 801d40e:	68b8      	ldr	r0, [r7, #8]
 801d410:	f000 fe36 	bl	801e080 <append_indent>
 801d414:	6178      	str	r0, [r7, #20]
 801d416:	697b      	ldr	r3, [r7, #20]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	da0d      	bge.n	801d438 <json_serialize_to_buffer_r+0x30c>
 801d41c:	f04f 33ff 	mov.w	r3, #4294967295
 801d420:	e192      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d422:	bf00      	nop
 801d424:	080226e8 	.word	0x080226e8
 801d428:	080226ec 	.word	0x080226ec
 801d42c:	080226f0 	.word	0x080226f0
 801d430:	080226f4 	.word	0x080226f4
 801d434:	080226f8 	.word	0x080226f8
 801d438:	68bb      	ldr	r3, [r7, #8]
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d003      	beq.n	801d446 <json_serialize_to_buffer_r+0x31a>
 801d43e:	697b      	ldr	r3, [r7, #20]
 801d440:	68ba      	ldr	r2, [r7, #8]
 801d442:	4413      	add	r3, r2
 801d444:	60bb      	str	r3, [r7, #8]
 801d446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d448:	697b      	ldr	r3, [r7, #20]
 801d44a:	4413      	add	r3, r2
 801d44c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                written = json_serialize_string(key, buf);
 801d44e:	68b9      	ldr	r1, [r7, #8]
 801d450:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d452:	f000 f97f 	bl	801d754 <json_serialize_string>
 801d456:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801d458:	697b      	ldr	r3, [r7, #20]
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	da02      	bge.n	801d464 <json_serialize_to_buffer_r+0x338>
                    return -1;
 801d45e:	f04f 33ff 	mov.w	r3, #4294967295
 801d462:	e171      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801d464:	68bb      	ldr	r3, [r7, #8]
 801d466:	2b00      	cmp	r3, #0
 801d468:	d003      	beq.n	801d472 <json_serialize_to_buffer_r+0x346>
                    buf += written;
 801d46a:	697b      	ldr	r3, [r7, #20]
 801d46c:	68ba      	ldr	r2, [r7, #8]
 801d46e:	4413      	add	r3, r2
 801d470:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801d472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d474:	697b      	ldr	r3, [r7, #20]
 801d476:	4413      	add	r3, r2
 801d478:	63bb      	str	r3, [r7, #56]	; 0x38
                APPEND_STRING(":");
 801d47a:	4996      	ldr	r1, [pc, #600]	; (801d6d4 <json_serialize_to_buffer_r+0x5a8>)
 801d47c:	68b8      	ldr	r0, [r7, #8]
 801d47e:	f000 fe31 	bl	801e0e4 <append_string>
 801d482:	6178      	str	r0, [r7, #20]
 801d484:	697b      	ldr	r3, [r7, #20]
 801d486:	2b00      	cmp	r3, #0
 801d488:	da02      	bge.n	801d490 <json_serialize_to_buffer_r+0x364>
 801d48a:	f04f 33ff 	mov.w	r3, #4294967295
 801d48e:	e15b      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d490:	68bb      	ldr	r3, [r7, #8]
 801d492:	2b00      	cmp	r3, #0
 801d494:	d003      	beq.n	801d49e <json_serialize_to_buffer_r+0x372>
 801d496:	697b      	ldr	r3, [r7, #20]
 801d498:	68ba      	ldr	r2, [r7, #8]
 801d49a:	4413      	add	r3, r2
 801d49c:	60bb      	str	r3, [r7, #8]
 801d49e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d4a0:	697b      	ldr	r3, [r7, #20]
 801d4a2:	4413      	add	r3, r2
 801d4a4:	63bb      	str	r3, [r7, #56]	; 0x38
                if (is_pretty) {
 801d4a6:	683b      	ldr	r3, [r7, #0]
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	d015      	beq.n	801d4d8 <json_serialize_to_buffer_r+0x3ac>
                    APPEND_STRING(" ");
 801d4ac:	498a      	ldr	r1, [pc, #552]	; (801d6d8 <json_serialize_to_buffer_r+0x5ac>)
 801d4ae:	68b8      	ldr	r0, [r7, #8]
 801d4b0:	f000 fe18 	bl	801e0e4 <append_string>
 801d4b4:	6178      	str	r0, [r7, #20]
 801d4b6:	697b      	ldr	r3, [r7, #20]
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	da02      	bge.n	801d4c2 <json_serialize_to_buffer_r+0x396>
 801d4bc:	f04f 33ff 	mov.w	r3, #4294967295
 801d4c0:	e142      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d4c2:	68bb      	ldr	r3, [r7, #8]
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	d003      	beq.n	801d4d0 <json_serialize_to_buffer_r+0x3a4>
 801d4c8:	697b      	ldr	r3, [r7, #20]
 801d4ca:	68ba      	ldr	r2, [r7, #8]
 801d4cc:	4413      	add	r3, r2
 801d4ce:	60bb      	str	r3, [r7, #8]
 801d4d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d4d2:	697b      	ldr	r3, [r7, #20]
 801d4d4:	4413      	add	r3, r2
 801d4d6:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_object_get_value(object, key);
 801d4d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d4da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d4dc:	f000 fe40 	bl	801e160 <json_object_get_value>
 801d4e0:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	1c5a      	adds	r2, r3, #1
 801d4e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d4e8:	9300      	str	r3, [sp, #0]
 801d4ea:	683b      	ldr	r3, [r7, #0]
 801d4ec:	68b9      	ldr	r1, [r7, #8]
 801d4ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d4f0:	f7ff fe1c 	bl	801d12c <json_serialize_to_buffer_r>
 801d4f4:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801d4f6:	697b      	ldr	r3, [r7, #20]
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	da02      	bge.n	801d502 <json_serialize_to_buffer_r+0x3d6>
                    return -1;
 801d4fc:	f04f 33ff 	mov.w	r3, #4294967295
 801d500:	e122      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
                }
                if (buf != NULL) {
 801d502:	68bb      	ldr	r3, [r7, #8]
 801d504:	2b00      	cmp	r3, #0
 801d506:	d003      	beq.n	801d510 <json_serialize_to_buffer_r+0x3e4>
                    buf += written;
 801d508:	697b      	ldr	r3, [r7, #20]
 801d50a:	68ba      	ldr	r2, [r7, #8]
 801d50c:	4413      	add	r3, r2
 801d50e:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801d510:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d512:	697b      	ldr	r3, [r7, #20]
 801d514:	4413      	add	r3, r2
 801d516:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801d518:	6a3b      	ldr	r3, [r7, #32]
 801d51a:	3b01      	subs	r3, #1
 801d51c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d51e:	429a      	cmp	r2, r3
 801d520:	d215      	bcs.n	801d54e <json_serialize_to_buffer_r+0x422>
                    APPEND_STRING(",");
 801d522:	496e      	ldr	r1, [pc, #440]	; (801d6dc <json_serialize_to_buffer_r+0x5b0>)
 801d524:	68b8      	ldr	r0, [r7, #8]
 801d526:	f000 fddd 	bl	801e0e4 <append_string>
 801d52a:	6178      	str	r0, [r7, #20]
 801d52c:	697b      	ldr	r3, [r7, #20]
 801d52e:	2b00      	cmp	r3, #0
 801d530:	da02      	bge.n	801d538 <json_serialize_to_buffer_r+0x40c>
 801d532:	f04f 33ff 	mov.w	r3, #4294967295
 801d536:	e107      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d538:	68bb      	ldr	r3, [r7, #8]
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d003      	beq.n	801d546 <json_serialize_to_buffer_r+0x41a>
 801d53e:	697b      	ldr	r3, [r7, #20]
 801d540:	68ba      	ldr	r2, [r7, #8]
 801d542:	4413      	add	r3, r2
 801d544:	60bb      	str	r3, [r7, #8]
 801d546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d548:	697b      	ldr	r3, [r7, #20]
 801d54a:	4413      	add	r3, r2
 801d54c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801d54e:	683b      	ldr	r3, [r7, #0]
 801d550:	2b00      	cmp	r3, #0
 801d552:	d015      	beq.n	801d580 <json_serialize_to_buffer_r+0x454>
                    APPEND_STRING("\n");
 801d554:	4962      	ldr	r1, [pc, #392]	; (801d6e0 <json_serialize_to_buffer_r+0x5b4>)
 801d556:	68b8      	ldr	r0, [r7, #8]
 801d558:	f000 fdc4 	bl	801e0e4 <append_string>
 801d55c:	6178      	str	r0, [r7, #20]
 801d55e:	697b      	ldr	r3, [r7, #20]
 801d560:	2b00      	cmp	r3, #0
 801d562:	da02      	bge.n	801d56a <json_serialize_to_buffer_r+0x43e>
 801d564:	f04f 33ff 	mov.w	r3, #4294967295
 801d568:	e0ee      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d56a:	68bb      	ldr	r3, [r7, #8]
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d003      	beq.n	801d578 <json_serialize_to_buffer_r+0x44c>
 801d570:	697b      	ldr	r3, [r7, #20]
 801d572:	68ba      	ldr	r2, [r7, #8]
 801d574:	4413      	add	r3, r2
 801d576:	60bb      	str	r3, [r7, #8]
 801d578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d57a:	697b      	ldr	r3, [r7, #20]
 801d57c:	4413      	add	r3, r2
 801d57e:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801d580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d582:	3301      	adds	r3, #1
 801d584:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d586:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d588:	6a3b      	ldr	r3, [r7, #32]
 801d58a:	429a      	cmp	r2, r3
 801d58c:	f4ff af2e 	bcc.w	801d3ec <json_serialize_to_buffer_r+0x2c0>
                }
            }
            if (count > 0 && is_pretty) {
 801d590:	6a3b      	ldr	r3, [r7, #32]
 801d592:	2b00      	cmp	r3, #0
 801d594:	d018      	beq.n	801d5c8 <json_serialize_to_buffer_r+0x49c>
 801d596:	683b      	ldr	r3, [r7, #0]
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d015      	beq.n	801d5c8 <json_serialize_to_buffer_r+0x49c>
                APPEND_INDENT(level);
 801d59c:	6879      	ldr	r1, [r7, #4]
 801d59e:	68b8      	ldr	r0, [r7, #8]
 801d5a0:	f000 fd6e 	bl	801e080 <append_indent>
 801d5a4:	6178      	str	r0, [r7, #20]
 801d5a6:	697b      	ldr	r3, [r7, #20]
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	da02      	bge.n	801d5b2 <json_serialize_to_buffer_r+0x486>
 801d5ac:	f04f 33ff 	mov.w	r3, #4294967295
 801d5b0:	e0ca      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d5b2:	68bb      	ldr	r3, [r7, #8]
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	d003      	beq.n	801d5c0 <json_serialize_to_buffer_r+0x494>
 801d5b8:	697b      	ldr	r3, [r7, #20]
 801d5ba:	68ba      	ldr	r2, [r7, #8]
 801d5bc:	4413      	add	r3, r2
 801d5be:	60bb      	str	r3, [r7, #8]
 801d5c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d5c2:	697b      	ldr	r3, [r7, #20]
 801d5c4:	4413      	add	r3, r2
 801d5c6:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("}");
 801d5c8:	4946      	ldr	r1, [pc, #280]	; (801d6e4 <json_serialize_to_buffer_r+0x5b8>)
 801d5ca:	68b8      	ldr	r0, [r7, #8]
 801d5cc:	f000 fd8a 	bl	801e0e4 <append_string>
 801d5d0:	6178      	str	r0, [r7, #20]
 801d5d2:	697b      	ldr	r3, [r7, #20]
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	da02      	bge.n	801d5de <json_serialize_to_buffer_r+0x4b2>
 801d5d8:	f04f 33ff 	mov.w	r3, #4294967295
 801d5dc:	e0b4      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d5de:	68bb      	ldr	r3, [r7, #8]
 801d5e0:	2b00      	cmp	r3, #0
 801d5e2:	d003      	beq.n	801d5ec <json_serialize_to_buffer_r+0x4c0>
 801d5e4:	697b      	ldr	r3, [r7, #20]
 801d5e6:	68ba      	ldr	r2, [r7, #8]
 801d5e8:	4413      	add	r3, r2
 801d5ea:	60bb      	str	r3, [r7, #8]
 801d5ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d5ee:	697b      	ldr	r3, [r7, #20]
 801d5f0:	4413      	add	r3, r2
 801d5f2:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801d5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5f6:	e0a7      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
        case JSONString:
            string = json_value_get_string(value);
 801d5f8:	68f8      	ldr	r0, [r7, #12]
 801d5fa:	f000 ff10 	bl	801e41e <json_value_get_string>
 801d5fe:	6338      	str	r0, [r7, #48]	; 0x30
            if (string == NULL) {
 801d600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d602:	2b00      	cmp	r3, #0
 801d604:	d102      	bne.n	801d60c <json_serialize_to_buffer_r+0x4e0>
                return -1;
 801d606:	f04f 33ff 	mov.w	r3, #4294967295
 801d60a:	e09d      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
            }
            written = json_serialize_string(string, buf);
 801d60c:	68b9      	ldr	r1, [r7, #8]
 801d60e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d610:	f000 f8a0 	bl	801d754 <json_serialize_string>
 801d614:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801d616:	697b      	ldr	r3, [r7, #20]
 801d618:	2b00      	cmp	r3, #0
 801d61a:	da02      	bge.n	801d622 <json_serialize_to_buffer_r+0x4f6>
                return -1;
 801d61c:	f04f 33ff 	mov.w	r3, #4294967295
 801d620:	e092      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
            }
            if (buf != NULL) {
 801d622:	68bb      	ldr	r3, [r7, #8]
 801d624:	2b00      	cmp	r3, #0
 801d626:	d003      	beq.n	801d630 <json_serialize_to_buffer_r+0x504>
                buf += written;
 801d628:	697b      	ldr	r3, [r7, #20]
 801d62a:	68ba      	ldr	r2, [r7, #8]
 801d62c:	4413      	add	r3, r2
 801d62e:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801d630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d632:	697b      	ldr	r3, [r7, #20]
 801d634:	4413      	add	r3, r2
 801d636:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801d638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d63a:	e085      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 801d63c:	68f8      	ldr	r0, [r7, #12]
 801d63e:	f000 ff1b 	bl	801e478 <json_value_get_boolean>
 801d642:	4603      	mov	r3, r0
 801d644:	2b00      	cmp	r3, #0
 801d646:	d016      	beq.n	801d676 <json_serialize_to_buffer_r+0x54a>
                APPEND_STRING("true");
 801d648:	4927      	ldr	r1, [pc, #156]	; (801d6e8 <json_serialize_to_buffer_r+0x5bc>)
 801d64a:	68b8      	ldr	r0, [r7, #8]
 801d64c:	f000 fd4a 	bl	801e0e4 <append_string>
 801d650:	6178      	str	r0, [r7, #20]
 801d652:	697b      	ldr	r3, [r7, #20]
 801d654:	2b00      	cmp	r3, #0
 801d656:	da02      	bge.n	801d65e <json_serialize_to_buffer_r+0x532>
 801d658:	f04f 33ff 	mov.w	r3, #4294967295
 801d65c:	e074      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d65e:	68bb      	ldr	r3, [r7, #8]
 801d660:	2b00      	cmp	r3, #0
 801d662:	d003      	beq.n	801d66c <json_serialize_to_buffer_r+0x540>
 801d664:	697b      	ldr	r3, [r7, #20]
 801d666:	68ba      	ldr	r2, [r7, #8]
 801d668:	4413      	add	r3, r2
 801d66a:	60bb      	str	r3, [r7, #8]
 801d66c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d66e:	697b      	ldr	r3, [r7, #20]
 801d670:	4413      	add	r3, r2
 801d672:	63bb      	str	r3, [r7, #56]	; 0x38
 801d674:	e015      	b.n	801d6a2 <json_serialize_to_buffer_r+0x576>
            } else {
                APPEND_STRING("false");
 801d676:	491d      	ldr	r1, [pc, #116]	; (801d6ec <json_serialize_to_buffer_r+0x5c0>)
 801d678:	68b8      	ldr	r0, [r7, #8]
 801d67a:	f000 fd33 	bl	801e0e4 <append_string>
 801d67e:	6178      	str	r0, [r7, #20]
 801d680:	697b      	ldr	r3, [r7, #20]
 801d682:	2b00      	cmp	r3, #0
 801d684:	da02      	bge.n	801d68c <json_serialize_to_buffer_r+0x560>
 801d686:	f04f 33ff 	mov.w	r3, #4294967295
 801d68a:	e05d      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d68c:	68bb      	ldr	r3, [r7, #8]
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d003      	beq.n	801d69a <json_serialize_to_buffer_r+0x56e>
 801d692:	697b      	ldr	r3, [r7, #20]
 801d694:	68ba      	ldr	r2, [r7, #8]
 801d696:	4413      	add	r3, r2
 801d698:	60bb      	str	r3, [r7, #8]
 801d69a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d69c:	697b      	ldr	r3, [r7, #20]
 801d69e:	4413      	add	r3, r2
 801d6a0:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            return written_total;
 801d6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6a4:	e050      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
        case JSONNumber:
            num = json_value_get_number(value);
 801d6a6:	68f8      	ldr	r0, [r7, #12]
 801d6a8:	f000 fecb 	bl	801e442 <json_value_get_number>
 801d6ac:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 801d6b0:	68bb      	ldr	r3, [r7, #8]
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d001      	beq.n	801d6ba <json_serialize_to_buffer_r+0x58e>
                num_buf = buf;
 801d6b6:	68bb      	ldr	r3, [r7, #8]
 801d6b8:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 801d6ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d6be:	490c      	ldr	r1, [pc, #48]	; (801d6f0 <json_serialize_to_buffer_r+0x5c4>)
 801d6c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801d6c2:	f001 ff19 	bl	801f4f8 <siprintf>
 801d6c6:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801d6c8:	697b      	ldr	r3, [r7, #20]
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	da12      	bge.n	801d6f4 <json_serialize_to_buffer_r+0x5c8>
                return -1;
 801d6ce:	f04f 33ff 	mov.w	r3, #4294967295
 801d6d2:	e039      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d6d4:	080226fc 	.word	0x080226fc
 801d6d8:	08022700 	.word	0x08022700
 801d6dc:	080226f0 	.word	0x080226f0
 801d6e0:	080226ec 	.word	0x080226ec
 801d6e4:	08022704 	.word	0x08022704
 801d6e8:	080226d0 	.word	0x080226d0
 801d6ec:	080226d8 	.word	0x080226d8
 801d6f0:	08022708 	.word	0x08022708
            }
            if (buf != NULL) {
 801d6f4:	68bb      	ldr	r3, [r7, #8]
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d003      	beq.n	801d702 <json_serialize_to_buffer_r+0x5d6>
                buf += written;
 801d6fa:	697b      	ldr	r3, [r7, #20]
 801d6fc:	68ba      	ldr	r2, [r7, #8]
 801d6fe:	4413      	add	r3, r2
 801d700:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801d702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d704:	697b      	ldr	r3, [r7, #20]
 801d706:	4413      	add	r3, r2
 801d708:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801d70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d70c:	e01c      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
        case JSONNull:
            APPEND_STRING("null");
 801d70e:	4910      	ldr	r1, [pc, #64]	; (801d750 <json_serialize_to_buffer_r+0x624>)
 801d710:	68b8      	ldr	r0, [r7, #8]
 801d712:	f000 fce7 	bl	801e0e4 <append_string>
 801d716:	6178      	str	r0, [r7, #20]
 801d718:	697b      	ldr	r3, [r7, #20]
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	da02      	bge.n	801d724 <json_serialize_to_buffer_r+0x5f8>
 801d71e:	f04f 33ff 	mov.w	r3, #4294967295
 801d722:	e011      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
 801d724:	68bb      	ldr	r3, [r7, #8]
 801d726:	2b00      	cmp	r3, #0
 801d728:	d003      	beq.n	801d732 <json_serialize_to_buffer_r+0x606>
 801d72a:	697b      	ldr	r3, [r7, #20]
 801d72c:	68ba      	ldr	r2, [r7, #8]
 801d72e:	4413      	add	r3, r2
 801d730:	60bb      	str	r3, [r7, #8]
 801d732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d734:	697b      	ldr	r3, [r7, #20]
 801d736:	4413      	add	r3, r2
 801d738:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801d73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d73c:	e004      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
        case JSONError:
            return -1;
 801d73e:	f04f 33ff 	mov.w	r3, #4294967295
 801d742:	e001      	b.n	801d748 <json_serialize_to_buffer_r+0x61c>
        default:
            return -1;
 801d744:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801d748:	4618      	mov	r0, r3
 801d74a:	3740      	adds	r7, #64	; 0x40
 801d74c:	46bd      	mov	sp, r7
 801d74e:	bd80      	pop	{r7, pc}
 801d750:	080226e0 	.word	0x080226e0

0801d754 <json_serialize_string>:

static int json_serialize_string(const char *string, char *buf) {
 801d754:	b580      	push	{r7, lr}
 801d756:	b088      	sub	sp, #32
 801d758:	af00      	add	r7, sp, #0
 801d75a:	6078      	str	r0, [r7, #4]
 801d75c:	6039      	str	r1, [r7, #0]
    size_t i = 0, len = strlen(string);
 801d75e:	2300      	movs	r3, #0
 801d760:	61fb      	str	r3, [r7, #28]
 801d762:	6878      	ldr	r0, [r7, #4]
 801d764:	f7e2 fd56 	bl	8000214 <strlen>
 801d768:	6178      	str	r0, [r7, #20]
    char c = '\0';
 801d76a:	2300      	movs	r3, #0
 801d76c:	74fb      	strb	r3, [r7, #19]
    int written = -1, written_total = 0;
 801d76e:	f04f 33ff 	mov.w	r3, #4294967295
 801d772:	60fb      	str	r3, [r7, #12]
 801d774:	2300      	movs	r3, #0
 801d776:	61bb      	str	r3, [r7, #24]
    APPEND_STRING("\"");
 801d778:	49bb      	ldr	r1, [pc, #748]	; (801da68 <json_serialize_string+0x314>)
 801d77a:	6838      	ldr	r0, [r7, #0]
 801d77c:	f000 fcb2 	bl	801e0e4 <append_string>
 801d780:	60f8      	str	r0, [r7, #12]
 801d782:	68fb      	ldr	r3, [r7, #12]
 801d784:	2b00      	cmp	r3, #0
 801d786:	da03      	bge.n	801d790 <json_serialize_string+0x3c>
 801d788:	f04f 33ff 	mov.w	r3, #4294967295
 801d78c:	f000 bc6e 	b.w	801e06c <json_serialize_string+0x918>
 801d790:	683b      	ldr	r3, [r7, #0]
 801d792:	2b00      	cmp	r3, #0
 801d794:	d003      	beq.n	801d79e <json_serialize_string+0x4a>
 801d796:	68fb      	ldr	r3, [r7, #12]
 801d798:	683a      	ldr	r2, [r7, #0]
 801d79a:	4413      	add	r3, r2
 801d79c:	603b      	str	r3, [r7, #0]
 801d79e:	69ba      	ldr	r2, [r7, #24]
 801d7a0:	68fb      	ldr	r3, [r7, #12]
 801d7a2:	4413      	add	r3, r2
 801d7a4:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 801d7a6:	2300      	movs	r3, #0
 801d7a8:	61fb      	str	r3, [r7, #28]
 801d7aa:	f000 bc43 	b.w	801e034 <json_serialize_string+0x8e0>
        c = string[i];
 801d7ae:	687a      	ldr	r2, [r7, #4]
 801d7b0:	69fb      	ldr	r3, [r7, #28]
 801d7b2:	4413      	add	r3, r2
 801d7b4:	781b      	ldrb	r3, [r3, #0]
 801d7b6:	74fb      	strb	r3, [r7, #19]
        switch (c) {
 801d7b8:	7cfb      	ldrb	r3, [r7, #19]
 801d7ba:	2b5c      	cmp	r3, #92	; 0x5c
 801d7bc:	f200 842a 	bhi.w	801e014 <json_serialize_string+0x8c0>
 801d7c0:	a201      	add	r2, pc, #4	; (adr r2, 801d7c8 <json_serialize_string+0x74>)
 801d7c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d7c6:	bf00      	nop
 801d7c8:	0801dacf 	.word	0x0801dacf
 801d7cc:	0801dafd 	.word	0x0801dafd
 801d7d0:	0801db2b 	.word	0x0801db2b
 801d7d4:	0801db59 	.word	0x0801db59
 801d7d8:	0801db87 	.word	0x0801db87
 801d7dc:	0801dbb5 	.word	0x0801dbb5
 801d7e0:	0801dbe3 	.word	0x0801dbe3
 801d7e4:	0801dc11 	.word	0x0801dc11
 801d7e8:	0801d9c7 	.word	0x0801d9c7
 801d7ec:	0801daa1 	.word	0x0801daa1
 801d7f0:	0801da23 	.word	0x0801da23
 801d7f4:	0801dc3f 	.word	0x0801dc3f
 801d7f8:	0801d9f5 	.word	0x0801d9f5
 801d7fc:	0801da51 	.word	0x0801da51
 801d800:	0801dc6d 	.word	0x0801dc6d
 801d804:	0801dc9b 	.word	0x0801dc9b
 801d808:	0801dcc9 	.word	0x0801dcc9
 801d80c:	0801dd2d 	.word	0x0801dd2d
 801d810:	0801dd5b 	.word	0x0801dd5b
 801d814:	0801dd89 	.word	0x0801dd89
 801d818:	0801ddb7 	.word	0x0801ddb7
 801d81c:	0801dde5 	.word	0x0801dde5
 801d820:	0801de13 	.word	0x0801de13
 801d824:	0801de41 	.word	0x0801de41
 801d828:	0801de6f 	.word	0x0801de6f
 801d82c:	0801de9d 	.word	0x0801de9d
 801d830:	0801decb 	.word	0x0801decb
 801d834:	0801def9 	.word	0x0801def9
 801d838:	0801df27 	.word	0x0801df27
 801d83c:	0801df55 	.word	0x0801df55
 801d840:	0801dfb9 	.word	0x0801dfb9
 801d844:	0801dfe7 	.word	0x0801dfe7
 801d848:	0801e015 	.word	0x0801e015
 801d84c:	0801e015 	.word	0x0801e015
 801d850:	0801d93d 	.word	0x0801d93d
 801d854:	0801e015 	.word	0x0801e015
 801d858:	0801e015 	.word	0x0801e015
 801d85c:	0801e015 	.word	0x0801e015
 801d860:	0801e015 	.word	0x0801e015
 801d864:	0801e015 	.word	0x0801e015
 801d868:	0801e015 	.word	0x0801e015
 801d86c:	0801e015 	.word	0x0801e015
 801d870:	0801e015 	.word	0x0801e015
 801d874:	0801e015 	.word	0x0801e015
 801d878:	0801e015 	.word	0x0801e015
 801d87c:	0801e015 	.word	0x0801e015
 801d880:	0801e015 	.word	0x0801e015
 801d884:	0801d999 	.word	0x0801d999
 801d888:	0801e015 	.word	0x0801e015
 801d88c:	0801e015 	.word	0x0801e015
 801d890:	0801e015 	.word	0x0801e015
 801d894:	0801e015 	.word	0x0801e015
 801d898:	0801e015 	.word	0x0801e015
 801d89c:	0801e015 	.word	0x0801e015
 801d8a0:	0801e015 	.word	0x0801e015
 801d8a4:	0801e015 	.word	0x0801e015
 801d8a8:	0801e015 	.word	0x0801e015
 801d8ac:	0801e015 	.word	0x0801e015
 801d8b0:	0801e015 	.word	0x0801e015
 801d8b4:	0801e015 	.word	0x0801e015
 801d8b8:	0801e015 	.word	0x0801e015
 801d8bc:	0801e015 	.word	0x0801e015
 801d8c0:	0801e015 	.word	0x0801e015
 801d8c4:	0801e015 	.word	0x0801e015
 801d8c8:	0801e015 	.word	0x0801e015
 801d8cc:	0801e015 	.word	0x0801e015
 801d8d0:	0801e015 	.word	0x0801e015
 801d8d4:	0801e015 	.word	0x0801e015
 801d8d8:	0801e015 	.word	0x0801e015
 801d8dc:	0801e015 	.word	0x0801e015
 801d8e0:	0801e015 	.word	0x0801e015
 801d8e4:	0801e015 	.word	0x0801e015
 801d8e8:	0801e015 	.word	0x0801e015
 801d8ec:	0801e015 	.word	0x0801e015
 801d8f0:	0801e015 	.word	0x0801e015
 801d8f4:	0801e015 	.word	0x0801e015
 801d8f8:	0801e015 	.word	0x0801e015
 801d8fc:	0801e015 	.word	0x0801e015
 801d900:	0801e015 	.word	0x0801e015
 801d904:	0801e015 	.word	0x0801e015
 801d908:	0801e015 	.word	0x0801e015
 801d90c:	0801e015 	.word	0x0801e015
 801d910:	0801e015 	.word	0x0801e015
 801d914:	0801e015 	.word	0x0801e015
 801d918:	0801e015 	.word	0x0801e015
 801d91c:	0801e015 	.word	0x0801e015
 801d920:	0801e015 	.word	0x0801e015
 801d924:	0801e015 	.word	0x0801e015
 801d928:	0801e015 	.word	0x0801e015
 801d92c:	0801e015 	.word	0x0801e015
 801d930:	0801e015 	.word	0x0801e015
 801d934:	0801e015 	.word	0x0801e015
 801d938:	0801d96b 	.word	0x0801d96b
            case '\"': APPEND_STRING("\\\""); break;
 801d93c:	494b      	ldr	r1, [pc, #300]	; (801da6c <json_serialize_string+0x318>)
 801d93e:	6838      	ldr	r0, [r7, #0]
 801d940:	f000 fbd0 	bl	801e0e4 <append_string>
 801d944:	60f8      	str	r0, [r7, #12]
 801d946:	68fb      	ldr	r3, [r7, #12]
 801d948:	2b00      	cmp	r3, #0
 801d94a:	da02      	bge.n	801d952 <json_serialize_string+0x1fe>
 801d94c:	f04f 33ff 	mov.w	r3, #4294967295
 801d950:	e38c      	b.n	801e06c <json_serialize_string+0x918>
 801d952:	683b      	ldr	r3, [r7, #0]
 801d954:	2b00      	cmp	r3, #0
 801d956:	d003      	beq.n	801d960 <json_serialize_string+0x20c>
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	683a      	ldr	r2, [r7, #0]
 801d95c:	4413      	add	r3, r2
 801d95e:	603b      	str	r3, [r7, #0]
 801d960:	69ba      	ldr	r2, [r7, #24]
 801d962:	68fb      	ldr	r3, [r7, #12]
 801d964:	4413      	add	r3, r2
 801d966:	61bb      	str	r3, [r7, #24]
 801d968:	e361      	b.n	801e02e <json_serialize_string+0x8da>
            case '\\': APPEND_STRING("\\\\"); break;
 801d96a:	4941      	ldr	r1, [pc, #260]	; (801da70 <json_serialize_string+0x31c>)
 801d96c:	6838      	ldr	r0, [r7, #0]
 801d96e:	f000 fbb9 	bl	801e0e4 <append_string>
 801d972:	60f8      	str	r0, [r7, #12]
 801d974:	68fb      	ldr	r3, [r7, #12]
 801d976:	2b00      	cmp	r3, #0
 801d978:	da02      	bge.n	801d980 <json_serialize_string+0x22c>
 801d97a:	f04f 33ff 	mov.w	r3, #4294967295
 801d97e:	e375      	b.n	801e06c <json_serialize_string+0x918>
 801d980:	683b      	ldr	r3, [r7, #0]
 801d982:	2b00      	cmp	r3, #0
 801d984:	d003      	beq.n	801d98e <json_serialize_string+0x23a>
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	683a      	ldr	r2, [r7, #0]
 801d98a:	4413      	add	r3, r2
 801d98c:	603b      	str	r3, [r7, #0]
 801d98e:	69ba      	ldr	r2, [r7, #24]
 801d990:	68fb      	ldr	r3, [r7, #12]
 801d992:	4413      	add	r3, r2
 801d994:	61bb      	str	r3, [r7, #24]
 801d996:	e34a      	b.n	801e02e <json_serialize_string+0x8da>
            case '/':  APPEND_STRING("\\/"); break; /* to make json embeddable in xml\/html */
 801d998:	4936      	ldr	r1, [pc, #216]	; (801da74 <json_serialize_string+0x320>)
 801d99a:	6838      	ldr	r0, [r7, #0]
 801d99c:	f000 fba2 	bl	801e0e4 <append_string>
 801d9a0:	60f8      	str	r0, [r7, #12]
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	da02      	bge.n	801d9ae <json_serialize_string+0x25a>
 801d9a8:	f04f 33ff 	mov.w	r3, #4294967295
 801d9ac:	e35e      	b.n	801e06c <json_serialize_string+0x918>
 801d9ae:	683b      	ldr	r3, [r7, #0]
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d003      	beq.n	801d9bc <json_serialize_string+0x268>
 801d9b4:	68fb      	ldr	r3, [r7, #12]
 801d9b6:	683a      	ldr	r2, [r7, #0]
 801d9b8:	4413      	add	r3, r2
 801d9ba:	603b      	str	r3, [r7, #0]
 801d9bc:	69ba      	ldr	r2, [r7, #24]
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	4413      	add	r3, r2
 801d9c2:	61bb      	str	r3, [r7, #24]
 801d9c4:	e333      	b.n	801e02e <json_serialize_string+0x8da>
            case '\b': APPEND_STRING("\\b"); break;
 801d9c6:	492c      	ldr	r1, [pc, #176]	; (801da78 <json_serialize_string+0x324>)
 801d9c8:	6838      	ldr	r0, [r7, #0]
 801d9ca:	f000 fb8b 	bl	801e0e4 <append_string>
 801d9ce:	60f8      	str	r0, [r7, #12]
 801d9d0:	68fb      	ldr	r3, [r7, #12]
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	da02      	bge.n	801d9dc <json_serialize_string+0x288>
 801d9d6:	f04f 33ff 	mov.w	r3, #4294967295
 801d9da:	e347      	b.n	801e06c <json_serialize_string+0x918>
 801d9dc:	683b      	ldr	r3, [r7, #0]
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d003      	beq.n	801d9ea <json_serialize_string+0x296>
 801d9e2:	68fb      	ldr	r3, [r7, #12]
 801d9e4:	683a      	ldr	r2, [r7, #0]
 801d9e6:	4413      	add	r3, r2
 801d9e8:	603b      	str	r3, [r7, #0]
 801d9ea:	69ba      	ldr	r2, [r7, #24]
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	4413      	add	r3, r2
 801d9f0:	61bb      	str	r3, [r7, #24]
 801d9f2:	e31c      	b.n	801e02e <json_serialize_string+0x8da>
            case '\f': APPEND_STRING("\\f"); break;
 801d9f4:	4921      	ldr	r1, [pc, #132]	; (801da7c <json_serialize_string+0x328>)
 801d9f6:	6838      	ldr	r0, [r7, #0]
 801d9f8:	f000 fb74 	bl	801e0e4 <append_string>
 801d9fc:	60f8      	str	r0, [r7, #12]
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	2b00      	cmp	r3, #0
 801da02:	da02      	bge.n	801da0a <json_serialize_string+0x2b6>
 801da04:	f04f 33ff 	mov.w	r3, #4294967295
 801da08:	e330      	b.n	801e06c <json_serialize_string+0x918>
 801da0a:	683b      	ldr	r3, [r7, #0]
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d003      	beq.n	801da18 <json_serialize_string+0x2c4>
 801da10:	68fb      	ldr	r3, [r7, #12]
 801da12:	683a      	ldr	r2, [r7, #0]
 801da14:	4413      	add	r3, r2
 801da16:	603b      	str	r3, [r7, #0]
 801da18:	69ba      	ldr	r2, [r7, #24]
 801da1a:	68fb      	ldr	r3, [r7, #12]
 801da1c:	4413      	add	r3, r2
 801da1e:	61bb      	str	r3, [r7, #24]
 801da20:	e305      	b.n	801e02e <json_serialize_string+0x8da>
            case '\n': APPEND_STRING("\\n"); break;
 801da22:	4917      	ldr	r1, [pc, #92]	; (801da80 <json_serialize_string+0x32c>)
 801da24:	6838      	ldr	r0, [r7, #0]
 801da26:	f000 fb5d 	bl	801e0e4 <append_string>
 801da2a:	60f8      	str	r0, [r7, #12]
 801da2c:	68fb      	ldr	r3, [r7, #12]
 801da2e:	2b00      	cmp	r3, #0
 801da30:	da02      	bge.n	801da38 <json_serialize_string+0x2e4>
 801da32:	f04f 33ff 	mov.w	r3, #4294967295
 801da36:	e319      	b.n	801e06c <json_serialize_string+0x918>
 801da38:	683b      	ldr	r3, [r7, #0]
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	d003      	beq.n	801da46 <json_serialize_string+0x2f2>
 801da3e:	68fb      	ldr	r3, [r7, #12]
 801da40:	683a      	ldr	r2, [r7, #0]
 801da42:	4413      	add	r3, r2
 801da44:	603b      	str	r3, [r7, #0]
 801da46:	69ba      	ldr	r2, [r7, #24]
 801da48:	68fb      	ldr	r3, [r7, #12]
 801da4a:	4413      	add	r3, r2
 801da4c:	61bb      	str	r3, [r7, #24]
 801da4e:	e2ee      	b.n	801e02e <json_serialize_string+0x8da>
            case '\r': APPEND_STRING("\\r"); break;
 801da50:	490c      	ldr	r1, [pc, #48]	; (801da84 <json_serialize_string+0x330>)
 801da52:	6838      	ldr	r0, [r7, #0]
 801da54:	f000 fb46 	bl	801e0e4 <append_string>
 801da58:	60f8      	str	r0, [r7, #12]
 801da5a:	68fb      	ldr	r3, [r7, #12]
 801da5c:	2b00      	cmp	r3, #0
 801da5e:	da13      	bge.n	801da88 <json_serialize_string+0x334>
 801da60:	f04f 33ff 	mov.w	r3, #4294967295
 801da64:	e302      	b.n	801e06c <json_serialize_string+0x918>
 801da66:	bf00      	nop
 801da68:	08022710 	.word	0x08022710
 801da6c:	08022714 	.word	0x08022714
 801da70:	08022718 	.word	0x08022718
 801da74:	0802271c 	.word	0x0802271c
 801da78:	08022720 	.word	0x08022720
 801da7c:	08022724 	.word	0x08022724
 801da80:	08022728 	.word	0x08022728
 801da84:	0802272c 	.word	0x0802272c
 801da88:	683b      	ldr	r3, [r7, #0]
 801da8a:	2b00      	cmp	r3, #0
 801da8c:	d003      	beq.n	801da96 <json_serialize_string+0x342>
 801da8e:	68fb      	ldr	r3, [r7, #12]
 801da90:	683a      	ldr	r2, [r7, #0]
 801da92:	4413      	add	r3, r2
 801da94:	603b      	str	r3, [r7, #0]
 801da96:	69ba      	ldr	r2, [r7, #24]
 801da98:	68fb      	ldr	r3, [r7, #12]
 801da9a:	4413      	add	r3, r2
 801da9c:	61bb      	str	r3, [r7, #24]
 801da9e:	e2c6      	b.n	801e02e <json_serialize_string+0x8da>
            case '\t': APPEND_STRING("\\t"); break;
 801daa0:	4995      	ldr	r1, [pc, #596]	; (801dcf8 <json_serialize_string+0x5a4>)
 801daa2:	6838      	ldr	r0, [r7, #0]
 801daa4:	f000 fb1e 	bl	801e0e4 <append_string>
 801daa8:	60f8      	str	r0, [r7, #12]
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	2b00      	cmp	r3, #0
 801daae:	da02      	bge.n	801dab6 <json_serialize_string+0x362>
 801dab0:	f04f 33ff 	mov.w	r3, #4294967295
 801dab4:	e2da      	b.n	801e06c <json_serialize_string+0x918>
 801dab6:	683b      	ldr	r3, [r7, #0]
 801dab8:	2b00      	cmp	r3, #0
 801daba:	d003      	beq.n	801dac4 <json_serialize_string+0x370>
 801dabc:	68fb      	ldr	r3, [r7, #12]
 801dabe:	683a      	ldr	r2, [r7, #0]
 801dac0:	4413      	add	r3, r2
 801dac2:	603b      	str	r3, [r7, #0]
 801dac4:	69ba      	ldr	r2, [r7, #24]
 801dac6:	68fb      	ldr	r3, [r7, #12]
 801dac8:	4413      	add	r3, r2
 801daca:	61bb      	str	r3, [r7, #24]
 801dacc:	e2af      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x00': APPEND_STRING("\\u0000"); break;
 801dace:	498b      	ldr	r1, [pc, #556]	; (801dcfc <json_serialize_string+0x5a8>)
 801dad0:	6838      	ldr	r0, [r7, #0]
 801dad2:	f000 fb07 	bl	801e0e4 <append_string>
 801dad6:	60f8      	str	r0, [r7, #12]
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	2b00      	cmp	r3, #0
 801dadc:	da02      	bge.n	801dae4 <json_serialize_string+0x390>
 801dade:	f04f 33ff 	mov.w	r3, #4294967295
 801dae2:	e2c3      	b.n	801e06c <json_serialize_string+0x918>
 801dae4:	683b      	ldr	r3, [r7, #0]
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	d003      	beq.n	801daf2 <json_serialize_string+0x39e>
 801daea:	68fb      	ldr	r3, [r7, #12]
 801daec:	683a      	ldr	r2, [r7, #0]
 801daee:	4413      	add	r3, r2
 801daf0:	603b      	str	r3, [r7, #0]
 801daf2:	69ba      	ldr	r2, [r7, #24]
 801daf4:	68fb      	ldr	r3, [r7, #12]
 801daf6:	4413      	add	r3, r2
 801daf8:	61bb      	str	r3, [r7, #24]
 801dafa:	e298      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x01': APPEND_STRING("\\u0001"); break;
 801dafc:	4980      	ldr	r1, [pc, #512]	; (801dd00 <json_serialize_string+0x5ac>)
 801dafe:	6838      	ldr	r0, [r7, #0]
 801db00:	f000 faf0 	bl	801e0e4 <append_string>
 801db04:	60f8      	str	r0, [r7, #12]
 801db06:	68fb      	ldr	r3, [r7, #12]
 801db08:	2b00      	cmp	r3, #0
 801db0a:	da02      	bge.n	801db12 <json_serialize_string+0x3be>
 801db0c:	f04f 33ff 	mov.w	r3, #4294967295
 801db10:	e2ac      	b.n	801e06c <json_serialize_string+0x918>
 801db12:	683b      	ldr	r3, [r7, #0]
 801db14:	2b00      	cmp	r3, #0
 801db16:	d003      	beq.n	801db20 <json_serialize_string+0x3cc>
 801db18:	68fb      	ldr	r3, [r7, #12]
 801db1a:	683a      	ldr	r2, [r7, #0]
 801db1c:	4413      	add	r3, r2
 801db1e:	603b      	str	r3, [r7, #0]
 801db20:	69ba      	ldr	r2, [r7, #24]
 801db22:	68fb      	ldr	r3, [r7, #12]
 801db24:	4413      	add	r3, r2
 801db26:	61bb      	str	r3, [r7, #24]
 801db28:	e281      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x02': APPEND_STRING("\\u0002"); break;
 801db2a:	4976      	ldr	r1, [pc, #472]	; (801dd04 <json_serialize_string+0x5b0>)
 801db2c:	6838      	ldr	r0, [r7, #0]
 801db2e:	f000 fad9 	bl	801e0e4 <append_string>
 801db32:	60f8      	str	r0, [r7, #12]
 801db34:	68fb      	ldr	r3, [r7, #12]
 801db36:	2b00      	cmp	r3, #0
 801db38:	da02      	bge.n	801db40 <json_serialize_string+0x3ec>
 801db3a:	f04f 33ff 	mov.w	r3, #4294967295
 801db3e:	e295      	b.n	801e06c <json_serialize_string+0x918>
 801db40:	683b      	ldr	r3, [r7, #0]
 801db42:	2b00      	cmp	r3, #0
 801db44:	d003      	beq.n	801db4e <json_serialize_string+0x3fa>
 801db46:	68fb      	ldr	r3, [r7, #12]
 801db48:	683a      	ldr	r2, [r7, #0]
 801db4a:	4413      	add	r3, r2
 801db4c:	603b      	str	r3, [r7, #0]
 801db4e:	69ba      	ldr	r2, [r7, #24]
 801db50:	68fb      	ldr	r3, [r7, #12]
 801db52:	4413      	add	r3, r2
 801db54:	61bb      	str	r3, [r7, #24]
 801db56:	e26a      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x03': APPEND_STRING("\\u0003"); break;
 801db58:	496b      	ldr	r1, [pc, #428]	; (801dd08 <json_serialize_string+0x5b4>)
 801db5a:	6838      	ldr	r0, [r7, #0]
 801db5c:	f000 fac2 	bl	801e0e4 <append_string>
 801db60:	60f8      	str	r0, [r7, #12]
 801db62:	68fb      	ldr	r3, [r7, #12]
 801db64:	2b00      	cmp	r3, #0
 801db66:	da02      	bge.n	801db6e <json_serialize_string+0x41a>
 801db68:	f04f 33ff 	mov.w	r3, #4294967295
 801db6c:	e27e      	b.n	801e06c <json_serialize_string+0x918>
 801db6e:	683b      	ldr	r3, [r7, #0]
 801db70:	2b00      	cmp	r3, #0
 801db72:	d003      	beq.n	801db7c <json_serialize_string+0x428>
 801db74:	68fb      	ldr	r3, [r7, #12]
 801db76:	683a      	ldr	r2, [r7, #0]
 801db78:	4413      	add	r3, r2
 801db7a:	603b      	str	r3, [r7, #0]
 801db7c:	69ba      	ldr	r2, [r7, #24]
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	4413      	add	r3, r2
 801db82:	61bb      	str	r3, [r7, #24]
 801db84:	e253      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x04': APPEND_STRING("\\u0004"); break;
 801db86:	4961      	ldr	r1, [pc, #388]	; (801dd0c <json_serialize_string+0x5b8>)
 801db88:	6838      	ldr	r0, [r7, #0]
 801db8a:	f000 faab 	bl	801e0e4 <append_string>
 801db8e:	60f8      	str	r0, [r7, #12]
 801db90:	68fb      	ldr	r3, [r7, #12]
 801db92:	2b00      	cmp	r3, #0
 801db94:	da02      	bge.n	801db9c <json_serialize_string+0x448>
 801db96:	f04f 33ff 	mov.w	r3, #4294967295
 801db9a:	e267      	b.n	801e06c <json_serialize_string+0x918>
 801db9c:	683b      	ldr	r3, [r7, #0]
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d003      	beq.n	801dbaa <json_serialize_string+0x456>
 801dba2:	68fb      	ldr	r3, [r7, #12]
 801dba4:	683a      	ldr	r2, [r7, #0]
 801dba6:	4413      	add	r3, r2
 801dba8:	603b      	str	r3, [r7, #0]
 801dbaa:	69ba      	ldr	r2, [r7, #24]
 801dbac:	68fb      	ldr	r3, [r7, #12]
 801dbae:	4413      	add	r3, r2
 801dbb0:	61bb      	str	r3, [r7, #24]
 801dbb2:	e23c      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x05': APPEND_STRING("\\u0005"); break;
 801dbb4:	4956      	ldr	r1, [pc, #344]	; (801dd10 <json_serialize_string+0x5bc>)
 801dbb6:	6838      	ldr	r0, [r7, #0]
 801dbb8:	f000 fa94 	bl	801e0e4 <append_string>
 801dbbc:	60f8      	str	r0, [r7, #12]
 801dbbe:	68fb      	ldr	r3, [r7, #12]
 801dbc0:	2b00      	cmp	r3, #0
 801dbc2:	da02      	bge.n	801dbca <json_serialize_string+0x476>
 801dbc4:	f04f 33ff 	mov.w	r3, #4294967295
 801dbc8:	e250      	b.n	801e06c <json_serialize_string+0x918>
 801dbca:	683b      	ldr	r3, [r7, #0]
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	d003      	beq.n	801dbd8 <json_serialize_string+0x484>
 801dbd0:	68fb      	ldr	r3, [r7, #12]
 801dbd2:	683a      	ldr	r2, [r7, #0]
 801dbd4:	4413      	add	r3, r2
 801dbd6:	603b      	str	r3, [r7, #0]
 801dbd8:	69ba      	ldr	r2, [r7, #24]
 801dbda:	68fb      	ldr	r3, [r7, #12]
 801dbdc:	4413      	add	r3, r2
 801dbde:	61bb      	str	r3, [r7, #24]
 801dbe0:	e225      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x06': APPEND_STRING("\\u0006"); break;
 801dbe2:	494c      	ldr	r1, [pc, #304]	; (801dd14 <json_serialize_string+0x5c0>)
 801dbe4:	6838      	ldr	r0, [r7, #0]
 801dbe6:	f000 fa7d 	bl	801e0e4 <append_string>
 801dbea:	60f8      	str	r0, [r7, #12]
 801dbec:	68fb      	ldr	r3, [r7, #12]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	da02      	bge.n	801dbf8 <json_serialize_string+0x4a4>
 801dbf2:	f04f 33ff 	mov.w	r3, #4294967295
 801dbf6:	e239      	b.n	801e06c <json_serialize_string+0x918>
 801dbf8:	683b      	ldr	r3, [r7, #0]
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d003      	beq.n	801dc06 <json_serialize_string+0x4b2>
 801dbfe:	68fb      	ldr	r3, [r7, #12]
 801dc00:	683a      	ldr	r2, [r7, #0]
 801dc02:	4413      	add	r3, r2
 801dc04:	603b      	str	r3, [r7, #0]
 801dc06:	69ba      	ldr	r2, [r7, #24]
 801dc08:	68fb      	ldr	r3, [r7, #12]
 801dc0a:	4413      	add	r3, r2
 801dc0c:	61bb      	str	r3, [r7, #24]
 801dc0e:	e20e      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x07': APPEND_STRING("\\u0007"); break;
 801dc10:	4941      	ldr	r1, [pc, #260]	; (801dd18 <json_serialize_string+0x5c4>)
 801dc12:	6838      	ldr	r0, [r7, #0]
 801dc14:	f000 fa66 	bl	801e0e4 <append_string>
 801dc18:	60f8      	str	r0, [r7, #12]
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	da02      	bge.n	801dc26 <json_serialize_string+0x4d2>
 801dc20:	f04f 33ff 	mov.w	r3, #4294967295
 801dc24:	e222      	b.n	801e06c <json_serialize_string+0x918>
 801dc26:	683b      	ldr	r3, [r7, #0]
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	d003      	beq.n	801dc34 <json_serialize_string+0x4e0>
 801dc2c:	68fb      	ldr	r3, [r7, #12]
 801dc2e:	683a      	ldr	r2, [r7, #0]
 801dc30:	4413      	add	r3, r2
 801dc32:	603b      	str	r3, [r7, #0]
 801dc34:	69ba      	ldr	r2, [r7, #24]
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	4413      	add	r3, r2
 801dc3a:	61bb      	str	r3, [r7, #24]
 801dc3c:	e1f7      	b.n	801e02e <json_serialize_string+0x8da>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 801dc3e:	4937      	ldr	r1, [pc, #220]	; (801dd1c <json_serialize_string+0x5c8>)
 801dc40:	6838      	ldr	r0, [r7, #0]
 801dc42:	f000 fa4f 	bl	801e0e4 <append_string>
 801dc46:	60f8      	str	r0, [r7, #12]
 801dc48:	68fb      	ldr	r3, [r7, #12]
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	da02      	bge.n	801dc54 <json_serialize_string+0x500>
 801dc4e:	f04f 33ff 	mov.w	r3, #4294967295
 801dc52:	e20b      	b.n	801e06c <json_serialize_string+0x918>
 801dc54:	683b      	ldr	r3, [r7, #0]
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	d003      	beq.n	801dc62 <json_serialize_string+0x50e>
 801dc5a:	68fb      	ldr	r3, [r7, #12]
 801dc5c:	683a      	ldr	r2, [r7, #0]
 801dc5e:	4413      	add	r3, r2
 801dc60:	603b      	str	r3, [r7, #0]
 801dc62:	69ba      	ldr	r2, [r7, #24]
 801dc64:	68fb      	ldr	r3, [r7, #12]
 801dc66:	4413      	add	r3, r2
 801dc68:	61bb      	str	r3, [r7, #24]
 801dc6a:	e1e0      	b.n	801e02e <json_serialize_string+0x8da>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 801dc6c:	492c      	ldr	r1, [pc, #176]	; (801dd20 <json_serialize_string+0x5cc>)
 801dc6e:	6838      	ldr	r0, [r7, #0]
 801dc70:	f000 fa38 	bl	801e0e4 <append_string>
 801dc74:	60f8      	str	r0, [r7, #12]
 801dc76:	68fb      	ldr	r3, [r7, #12]
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	da02      	bge.n	801dc82 <json_serialize_string+0x52e>
 801dc7c:	f04f 33ff 	mov.w	r3, #4294967295
 801dc80:	e1f4      	b.n	801e06c <json_serialize_string+0x918>
 801dc82:	683b      	ldr	r3, [r7, #0]
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	d003      	beq.n	801dc90 <json_serialize_string+0x53c>
 801dc88:	68fb      	ldr	r3, [r7, #12]
 801dc8a:	683a      	ldr	r2, [r7, #0]
 801dc8c:	4413      	add	r3, r2
 801dc8e:	603b      	str	r3, [r7, #0]
 801dc90:	69ba      	ldr	r2, [r7, #24]
 801dc92:	68fb      	ldr	r3, [r7, #12]
 801dc94:	4413      	add	r3, r2
 801dc96:	61bb      	str	r3, [r7, #24]
 801dc98:	e1c9      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 801dc9a:	4922      	ldr	r1, [pc, #136]	; (801dd24 <json_serialize_string+0x5d0>)
 801dc9c:	6838      	ldr	r0, [r7, #0]
 801dc9e:	f000 fa21 	bl	801e0e4 <append_string>
 801dca2:	60f8      	str	r0, [r7, #12]
 801dca4:	68fb      	ldr	r3, [r7, #12]
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	da02      	bge.n	801dcb0 <json_serialize_string+0x55c>
 801dcaa:	f04f 33ff 	mov.w	r3, #4294967295
 801dcae:	e1dd      	b.n	801e06c <json_serialize_string+0x918>
 801dcb0:	683b      	ldr	r3, [r7, #0]
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d003      	beq.n	801dcbe <json_serialize_string+0x56a>
 801dcb6:	68fb      	ldr	r3, [r7, #12]
 801dcb8:	683a      	ldr	r2, [r7, #0]
 801dcba:	4413      	add	r3, r2
 801dcbc:	603b      	str	r3, [r7, #0]
 801dcbe:	69ba      	ldr	r2, [r7, #24]
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	4413      	add	r3, r2
 801dcc4:	61bb      	str	r3, [r7, #24]
 801dcc6:	e1b2      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x10': APPEND_STRING("\\u0010"); break;
 801dcc8:	4917      	ldr	r1, [pc, #92]	; (801dd28 <json_serialize_string+0x5d4>)
 801dcca:	6838      	ldr	r0, [r7, #0]
 801dccc:	f000 fa0a 	bl	801e0e4 <append_string>
 801dcd0:	60f8      	str	r0, [r7, #12]
 801dcd2:	68fb      	ldr	r3, [r7, #12]
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	da02      	bge.n	801dcde <json_serialize_string+0x58a>
 801dcd8:	f04f 33ff 	mov.w	r3, #4294967295
 801dcdc:	e1c6      	b.n	801e06c <json_serialize_string+0x918>
 801dcde:	683b      	ldr	r3, [r7, #0]
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	d003      	beq.n	801dcec <json_serialize_string+0x598>
 801dce4:	68fb      	ldr	r3, [r7, #12]
 801dce6:	683a      	ldr	r2, [r7, #0]
 801dce8:	4413      	add	r3, r2
 801dcea:	603b      	str	r3, [r7, #0]
 801dcec:	69ba      	ldr	r2, [r7, #24]
 801dcee:	68fb      	ldr	r3, [r7, #12]
 801dcf0:	4413      	add	r3, r2
 801dcf2:	61bb      	str	r3, [r7, #24]
 801dcf4:	e19b      	b.n	801e02e <json_serialize_string+0x8da>
 801dcf6:	bf00      	nop
 801dcf8:	08022730 	.word	0x08022730
 801dcfc:	08022734 	.word	0x08022734
 801dd00:	0802273c 	.word	0x0802273c
 801dd04:	08022744 	.word	0x08022744
 801dd08:	0802274c 	.word	0x0802274c
 801dd0c:	08022754 	.word	0x08022754
 801dd10:	0802275c 	.word	0x0802275c
 801dd14:	08022764 	.word	0x08022764
 801dd18:	0802276c 	.word	0x0802276c
 801dd1c:	08022774 	.word	0x08022774
 801dd20:	0802277c 	.word	0x0802277c
 801dd24:	08022784 	.word	0x08022784
 801dd28:	0802278c 	.word	0x0802278c
            case '\x11': APPEND_STRING("\\u0011"); break;
 801dd2c:	4995      	ldr	r1, [pc, #596]	; (801df84 <json_serialize_string+0x830>)
 801dd2e:	6838      	ldr	r0, [r7, #0]
 801dd30:	f000 f9d8 	bl	801e0e4 <append_string>
 801dd34:	60f8      	str	r0, [r7, #12]
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	da02      	bge.n	801dd42 <json_serialize_string+0x5ee>
 801dd3c:	f04f 33ff 	mov.w	r3, #4294967295
 801dd40:	e194      	b.n	801e06c <json_serialize_string+0x918>
 801dd42:	683b      	ldr	r3, [r7, #0]
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	d003      	beq.n	801dd50 <json_serialize_string+0x5fc>
 801dd48:	68fb      	ldr	r3, [r7, #12]
 801dd4a:	683a      	ldr	r2, [r7, #0]
 801dd4c:	4413      	add	r3, r2
 801dd4e:	603b      	str	r3, [r7, #0]
 801dd50:	69ba      	ldr	r2, [r7, #24]
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	4413      	add	r3, r2
 801dd56:	61bb      	str	r3, [r7, #24]
 801dd58:	e169      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x12': APPEND_STRING("\\u0012"); break;
 801dd5a:	498b      	ldr	r1, [pc, #556]	; (801df88 <json_serialize_string+0x834>)
 801dd5c:	6838      	ldr	r0, [r7, #0]
 801dd5e:	f000 f9c1 	bl	801e0e4 <append_string>
 801dd62:	60f8      	str	r0, [r7, #12]
 801dd64:	68fb      	ldr	r3, [r7, #12]
 801dd66:	2b00      	cmp	r3, #0
 801dd68:	da02      	bge.n	801dd70 <json_serialize_string+0x61c>
 801dd6a:	f04f 33ff 	mov.w	r3, #4294967295
 801dd6e:	e17d      	b.n	801e06c <json_serialize_string+0x918>
 801dd70:	683b      	ldr	r3, [r7, #0]
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	d003      	beq.n	801dd7e <json_serialize_string+0x62a>
 801dd76:	68fb      	ldr	r3, [r7, #12]
 801dd78:	683a      	ldr	r2, [r7, #0]
 801dd7a:	4413      	add	r3, r2
 801dd7c:	603b      	str	r3, [r7, #0]
 801dd7e:	69ba      	ldr	r2, [r7, #24]
 801dd80:	68fb      	ldr	r3, [r7, #12]
 801dd82:	4413      	add	r3, r2
 801dd84:	61bb      	str	r3, [r7, #24]
 801dd86:	e152      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x13': APPEND_STRING("\\u0013"); break;
 801dd88:	4980      	ldr	r1, [pc, #512]	; (801df8c <json_serialize_string+0x838>)
 801dd8a:	6838      	ldr	r0, [r7, #0]
 801dd8c:	f000 f9aa 	bl	801e0e4 <append_string>
 801dd90:	60f8      	str	r0, [r7, #12]
 801dd92:	68fb      	ldr	r3, [r7, #12]
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	da02      	bge.n	801dd9e <json_serialize_string+0x64a>
 801dd98:	f04f 33ff 	mov.w	r3, #4294967295
 801dd9c:	e166      	b.n	801e06c <json_serialize_string+0x918>
 801dd9e:	683b      	ldr	r3, [r7, #0]
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	d003      	beq.n	801ddac <json_serialize_string+0x658>
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	683a      	ldr	r2, [r7, #0]
 801dda8:	4413      	add	r3, r2
 801ddaa:	603b      	str	r3, [r7, #0]
 801ddac:	69ba      	ldr	r2, [r7, #24]
 801ddae:	68fb      	ldr	r3, [r7, #12]
 801ddb0:	4413      	add	r3, r2
 801ddb2:	61bb      	str	r3, [r7, #24]
 801ddb4:	e13b      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x14': APPEND_STRING("\\u0014"); break;
 801ddb6:	4976      	ldr	r1, [pc, #472]	; (801df90 <json_serialize_string+0x83c>)
 801ddb8:	6838      	ldr	r0, [r7, #0]
 801ddba:	f000 f993 	bl	801e0e4 <append_string>
 801ddbe:	60f8      	str	r0, [r7, #12]
 801ddc0:	68fb      	ldr	r3, [r7, #12]
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	da02      	bge.n	801ddcc <json_serialize_string+0x678>
 801ddc6:	f04f 33ff 	mov.w	r3, #4294967295
 801ddca:	e14f      	b.n	801e06c <json_serialize_string+0x918>
 801ddcc:	683b      	ldr	r3, [r7, #0]
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	d003      	beq.n	801ddda <json_serialize_string+0x686>
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	683a      	ldr	r2, [r7, #0]
 801ddd6:	4413      	add	r3, r2
 801ddd8:	603b      	str	r3, [r7, #0]
 801ddda:	69ba      	ldr	r2, [r7, #24]
 801dddc:	68fb      	ldr	r3, [r7, #12]
 801ddde:	4413      	add	r3, r2
 801dde0:	61bb      	str	r3, [r7, #24]
 801dde2:	e124      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x15': APPEND_STRING("\\u0015"); break;
 801dde4:	496b      	ldr	r1, [pc, #428]	; (801df94 <json_serialize_string+0x840>)
 801dde6:	6838      	ldr	r0, [r7, #0]
 801dde8:	f000 f97c 	bl	801e0e4 <append_string>
 801ddec:	60f8      	str	r0, [r7, #12]
 801ddee:	68fb      	ldr	r3, [r7, #12]
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	da02      	bge.n	801ddfa <json_serialize_string+0x6a6>
 801ddf4:	f04f 33ff 	mov.w	r3, #4294967295
 801ddf8:	e138      	b.n	801e06c <json_serialize_string+0x918>
 801ddfa:	683b      	ldr	r3, [r7, #0]
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	d003      	beq.n	801de08 <json_serialize_string+0x6b4>
 801de00:	68fb      	ldr	r3, [r7, #12]
 801de02:	683a      	ldr	r2, [r7, #0]
 801de04:	4413      	add	r3, r2
 801de06:	603b      	str	r3, [r7, #0]
 801de08:	69ba      	ldr	r2, [r7, #24]
 801de0a:	68fb      	ldr	r3, [r7, #12]
 801de0c:	4413      	add	r3, r2
 801de0e:	61bb      	str	r3, [r7, #24]
 801de10:	e10d      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x16': APPEND_STRING("\\u0016"); break;
 801de12:	4961      	ldr	r1, [pc, #388]	; (801df98 <json_serialize_string+0x844>)
 801de14:	6838      	ldr	r0, [r7, #0]
 801de16:	f000 f965 	bl	801e0e4 <append_string>
 801de1a:	60f8      	str	r0, [r7, #12]
 801de1c:	68fb      	ldr	r3, [r7, #12]
 801de1e:	2b00      	cmp	r3, #0
 801de20:	da02      	bge.n	801de28 <json_serialize_string+0x6d4>
 801de22:	f04f 33ff 	mov.w	r3, #4294967295
 801de26:	e121      	b.n	801e06c <json_serialize_string+0x918>
 801de28:	683b      	ldr	r3, [r7, #0]
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	d003      	beq.n	801de36 <json_serialize_string+0x6e2>
 801de2e:	68fb      	ldr	r3, [r7, #12]
 801de30:	683a      	ldr	r2, [r7, #0]
 801de32:	4413      	add	r3, r2
 801de34:	603b      	str	r3, [r7, #0]
 801de36:	69ba      	ldr	r2, [r7, #24]
 801de38:	68fb      	ldr	r3, [r7, #12]
 801de3a:	4413      	add	r3, r2
 801de3c:	61bb      	str	r3, [r7, #24]
 801de3e:	e0f6      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x17': APPEND_STRING("\\u0017"); break;
 801de40:	4956      	ldr	r1, [pc, #344]	; (801df9c <json_serialize_string+0x848>)
 801de42:	6838      	ldr	r0, [r7, #0]
 801de44:	f000 f94e 	bl	801e0e4 <append_string>
 801de48:	60f8      	str	r0, [r7, #12]
 801de4a:	68fb      	ldr	r3, [r7, #12]
 801de4c:	2b00      	cmp	r3, #0
 801de4e:	da02      	bge.n	801de56 <json_serialize_string+0x702>
 801de50:	f04f 33ff 	mov.w	r3, #4294967295
 801de54:	e10a      	b.n	801e06c <json_serialize_string+0x918>
 801de56:	683b      	ldr	r3, [r7, #0]
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d003      	beq.n	801de64 <json_serialize_string+0x710>
 801de5c:	68fb      	ldr	r3, [r7, #12]
 801de5e:	683a      	ldr	r2, [r7, #0]
 801de60:	4413      	add	r3, r2
 801de62:	603b      	str	r3, [r7, #0]
 801de64:	69ba      	ldr	r2, [r7, #24]
 801de66:	68fb      	ldr	r3, [r7, #12]
 801de68:	4413      	add	r3, r2
 801de6a:	61bb      	str	r3, [r7, #24]
 801de6c:	e0df      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x18': APPEND_STRING("\\u0018"); break;
 801de6e:	494c      	ldr	r1, [pc, #304]	; (801dfa0 <json_serialize_string+0x84c>)
 801de70:	6838      	ldr	r0, [r7, #0]
 801de72:	f000 f937 	bl	801e0e4 <append_string>
 801de76:	60f8      	str	r0, [r7, #12]
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	2b00      	cmp	r3, #0
 801de7c:	da02      	bge.n	801de84 <json_serialize_string+0x730>
 801de7e:	f04f 33ff 	mov.w	r3, #4294967295
 801de82:	e0f3      	b.n	801e06c <json_serialize_string+0x918>
 801de84:	683b      	ldr	r3, [r7, #0]
 801de86:	2b00      	cmp	r3, #0
 801de88:	d003      	beq.n	801de92 <json_serialize_string+0x73e>
 801de8a:	68fb      	ldr	r3, [r7, #12]
 801de8c:	683a      	ldr	r2, [r7, #0]
 801de8e:	4413      	add	r3, r2
 801de90:	603b      	str	r3, [r7, #0]
 801de92:	69ba      	ldr	r2, [r7, #24]
 801de94:	68fb      	ldr	r3, [r7, #12]
 801de96:	4413      	add	r3, r2
 801de98:	61bb      	str	r3, [r7, #24]
 801de9a:	e0c8      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x19': APPEND_STRING("\\u0019"); break;
 801de9c:	4941      	ldr	r1, [pc, #260]	; (801dfa4 <json_serialize_string+0x850>)
 801de9e:	6838      	ldr	r0, [r7, #0]
 801dea0:	f000 f920 	bl	801e0e4 <append_string>
 801dea4:	60f8      	str	r0, [r7, #12]
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	2b00      	cmp	r3, #0
 801deaa:	da02      	bge.n	801deb2 <json_serialize_string+0x75e>
 801deac:	f04f 33ff 	mov.w	r3, #4294967295
 801deb0:	e0dc      	b.n	801e06c <json_serialize_string+0x918>
 801deb2:	683b      	ldr	r3, [r7, #0]
 801deb4:	2b00      	cmp	r3, #0
 801deb6:	d003      	beq.n	801dec0 <json_serialize_string+0x76c>
 801deb8:	68fb      	ldr	r3, [r7, #12]
 801deba:	683a      	ldr	r2, [r7, #0]
 801debc:	4413      	add	r3, r2
 801debe:	603b      	str	r3, [r7, #0]
 801dec0:	69ba      	ldr	r2, [r7, #24]
 801dec2:	68fb      	ldr	r3, [r7, #12]
 801dec4:	4413      	add	r3, r2
 801dec6:	61bb      	str	r3, [r7, #24]
 801dec8:	e0b1      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 801deca:	4937      	ldr	r1, [pc, #220]	; (801dfa8 <json_serialize_string+0x854>)
 801decc:	6838      	ldr	r0, [r7, #0]
 801dece:	f000 f909 	bl	801e0e4 <append_string>
 801ded2:	60f8      	str	r0, [r7, #12]
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	da02      	bge.n	801dee0 <json_serialize_string+0x78c>
 801deda:	f04f 33ff 	mov.w	r3, #4294967295
 801dede:	e0c5      	b.n	801e06c <json_serialize_string+0x918>
 801dee0:	683b      	ldr	r3, [r7, #0]
 801dee2:	2b00      	cmp	r3, #0
 801dee4:	d003      	beq.n	801deee <json_serialize_string+0x79a>
 801dee6:	68fb      	ldr	r3, [r7, #12]
 801dee8:	683a      	ldr	r2, [r7, #0]
 801deea:	4413      	add	r3, r2
 801deec:	603b      	str	r3, [r7, #0]
 801deee:	69ba      	ldr	r2, [r7, #24]
 801def0:	68fb      	ldr	r3, [r7, #12]
 801def2:	4413      	add	r3, r2
 801def4:	61bb      	str	r3, [r7, #24]
 801def6:	e09a      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 801def8:	492c      	ldr	r1, [pc, #176]	; (801dfac <json_serialize_string+0x858>)
 801defa:	6838      	ldr	r0, [r7, #0]
 801defc:	f000 f8f2 	bl	801e0e4 <append_string>
 801df00:	60f8      	str	r0, [r7, #12]
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	2b00      	cmp	r3, #0
 801df06:	da02      	bge.n	801df0e <json_serialize_string+0x7ba>
 801df08:	f04f 33ff 	mov.w	r3, #4294967295
 801df0c:	e0ae      	b.n	801e06c <json_serialize_string+0x918>
 801df0e:	683b      	ldr	r3, [r7, #0]
 801df10:	2b00      	cmp	r3, #0
 801df12:	d003      	beq.n	801df1c <json_serialize_string+0x7c8>
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	683a      	ldr	r2, [r7, #0]
 801df18:	4413      	add	r3, r2
 801df1a:	603b      	str	r3, [r7, #0]
 801df1c:	69ba      	ldr	r2, [r7, #24]
 801df1e:	68fb      	ldr	r3, [r7, #12]
 801df20:	4413      	add	r3, r2
 801df22:	61bb      	str	r3, [r7, #24]
 801df24:	e083      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x1c': APPEND_STRING("\\u001c"); break;
 801df26:	4922      	ldr	r1, [pc, #136]	; (801dfb0 <json_serialize_string+0x85c>)
 801df28:	6838      	ldr	r0, [r7, #0]
 801df2a:	f000 f8db 	bl	801e0e4 <append_string>
 801df2e:	60f8      	str	r0, [r7, #12]
 801df30:	68fb      	ldr	r3, [r7, #12]
 801df32:	2b00      	cmp	r3, #0
 801df34:	da02      	bge.n	801df3c <json_serialize_string+0x7e8>
 801df36:	f04f 33ff 	mov.w	r3, #4294967295
 801df3a:	e097      	b.n	801e06c <json_serialize_string+0x918>
 801df3c:	683b      	ldr	r3, [r7, #0]
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d003      	beq.n	801df4a <json_serialize_string+0x7f6>
 801df42:	68fb      	ldr	r3, [r7, #12]
 801df44:	683a      	ldr	r2, [r7, #0]
 801df46:	4413      	add	r3, r2
 801df48:	603b      	str	r3, [r7, #0]
 801df4a:	69ba      	ldr	r2, [r7, #24]
 801df4c:	68fb      	ldr	r3, [r7, #12]
 801df4e:	4413      	add	r3, r2
 801df50:	61bb      	str	r3, [r7, #24]
 801df52:	e06c      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 801df54:	4917      	ldr	r1, [pc, #92]	; (801dfb4 <json_serialize_string+0x860>)
 801df56:	6838      	ldr	r0, [r7, #0]
 801df58:	f000 f8c4 	bl	801e0e4 <append_string>
 801df5c:	60f8      	str	r0, [r7, #12]
 801df5e:	68fb      	ldr	r3, [r7, #12]
 801df60:	2b00      	cmp	r3, #0
 801df62:	da02      	bge.n	801df6a <json_serialize_string+0x816>
 801df64:	f04f 33ff 	mov.w	r3, #4294967295
 801df68:	e080      	b.n	801e06c <json_serialize_string+0x918>
 801df6a:	683b      	ldr	r3, [r7, #0]
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	d003      	beq.n	801df78 <json_serialize_string+0x824>
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	683a      	ldr	r2, [r7, #0]
 801df74:	4413      	add	r3, r2
 801df76:	603b      	str	r3, [r7, #0]
 801df78:	69ba      	ldr	r2, [r7, #24]
 801df7a:	68fb      	ldr	r3, [r7, #12]
 801df7c:	4413      	add	r3, r2
 801df7e:	61bb      	str	r3, [r7, #24]
 801df80:	e055      	b.n	801e02e <json_serialize_string+0x8da>
 801df82:	bf00      	nop
 801df84:	08022794 	.word	0x08022794
 801df88:	0802279c 	.word	0x0802279c
 801df8c:	080227a4 	.word	0x080227a4
 801df90:	080227ac 	.word	0x080227ac
 801df94:	080227b4 	.word	0x080227b4
 801df98:	080227bc 	.word	0x080227bc
 801df9c:	080227c4 	.word	0x080227c4
 801dfa0:	080227cc 	.word	0x080227cc
 801dfa4:	080227d4 	.word	0x080227d4
 801dfa8:	080227dc 	.word	0x080227dc
 801dfac:	080227e4 	.word	0x080227e4
 801dfb0:	080227ec 	.word	0x080227ec
 801dfb4:	080227f4 	.word	0x080227f4
            case '\x1e': APPEND_STRING("\\u001e"); break;
 801dfb8:	492e      	ldr	r1, [pc, #184]	; (801e074 <json_serialize_string+0x920>)
 801dfba:	6838      	ldr	r0, [r7, #0]
 801dfbc:	f000 f892 	bl	801e0e4 <append_string>
 801dfc0:	60f8      	str	r0, [r7, #12]
 801dfc2:	68fb      	ldr	r3, [r7, #12]
 801dfc4:	2b00      	cmp	r3, #0
 801dfc6:	da02      	bge.n	801dfce <json_serialize_string+0x87a>
 801dfc8:	f04f 33ff 	mov.w	r3, #4294967295
 801dfcc:	e04e      	b.n	801e06c <json_serialize_string+0x918>
 801dfce:	683b      	ldr	r3, [r7, #0]
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	d003      	beq.n	801dfdc <json_serialize_string+0x888>
 801dfd4:	68fb      	ldr	r3, [r7, #12]
 801dfd6:	683a      	ldr	r2, [r7, #0]
 801dfd8:	4413      	add	r3, r2
 801dfda:	603b      	str	r3, [r7, #0]
 801dfdc:	69ba      	ldr	r2, [r7, #24]
 801dfde:	68fb      	ldr	r3, [r7, #12]
 801dfe0:	4413      	add	r3, r2
 801dfe2:	61bb      	str	r3, [r7, #24]
 801dfe4:	e023      	b.n	801e02e <json_serialize_string+0x8da>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 801dfe6:	4924      	ldr	r1, [pc, #144]	; (801e078 <json_serialize_string+0x924>)
 801dfe8:	6838      	ldr	r0, [r7, #0]
 801dfea:	f000 f87b 	bl	801e0e4 <append_string>
 801dfee:	60f8      	str	r0, [r7, #12]
 801dff0:	68fb      	ldr	r3, [r7, #12]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	da02      	bge.n	801dffc <json_serialize_string+0x8a8>
 801dff6:	f04f 33ff 	mov.w	r3, #4294967295
 801dffa:	e037      	b.n	801e06c <json_serialize_string+0x918>
 801dffc:	683b      	ldr	r3, [r7, #0]
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d003      	beq.n	801e00a <json_serialize_string+0x8b6>
 801e002:	68fb      	ldr	r3, [r7, #12]
 801e004:	683a      	ldr	r2, [r7, #0]
 801e006:	4413      	add	r3, r2
 801e008:	603b      	str	r3, [r7, #0]
 801e00a:	69ba      	ldr	r2, [r7, #24]
 801e00c:	68fb      	ldr	r3, [r7, #12]
 801e00e:	4413      	add	r3, r2
 801e010:	61bb      	str	r3, [r7, #24]
 801e012:	e00c      	b.n	801e02e <json_serialize_string+0x8da>
            default:
                if (buf != NULL) {
 801e014:	683b      	ldr	r3, [r7, #0]
 801e016:	2b00      	cmp	r3, #0
 801e018:	d005      	beq.n	801e026 <json_serialize_string+0x8d2>
                    buf[0] = c;
 801e01a:	683b      	ldr	r3, [r7, #0]
 801e01c:	7cfa      	ldrb	r2, [r7, #19]
 801e01e:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 801e020:	683b      	ldr	r3, [r7, #0]
 801e022:	3301      	adds	r3, #1
 801e024:	603b      	str	r3, [r7, #0]
                }
                written_total += 1;
 801e026:	69bb      	ldr	r3, [r7, #24]
 801e028:	3301      	adds	r3, #1
 801e02a:	61bb      	str	r3, [r7, #24]
                break;
 801e02c:	bf00      	nop
    for (i = 0; i < len; i++) {
 801e02e:	69fb      	ldr	r3, [r7, #28]
 801e030:	3301      	adds	r3, #1
 801e032:	61fb      	str	r3, [r7, #28]
 801e034:	69fa      	ldr	r2, [r7, #28]
 801e036:	697b      	ldr	r3, [r7, #20]
 801e038:	429a      	cmp	r2, r3
 801e03a:	f4ff abb8 	bcc.w	801d7ae <json_serialize_string+0x5a>
        }
    }
    APPEND_STRING("\"");
 801e03e:	490f      	ldr	r1, [pc, #60]	; (801e07c <json_serialize_string+0x928>)
 801e040:	6838      	ldr	r0, [r7, #0]
 801e042:	f000 f84f 	bl	801e0e4 <append_string>
 801e046:	60f8      	str	r0, [r7, #12]
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	2b00      	cmp	r3, #0
 801e04c:	da02      	bge.n	801e054 <json_serialize_string+0x900>
 801e04e:	f04f 33ff 	mov.w	r3, #4294967295
 801e052:	e00b      	b.n	801e06c <json_serialize_string+0x918>
 801e054:	683b      	ldr	r3, [r7, #0]
 801e056:	2b00      	cmp	r3, #0
 801e058:	d003      	beq.n	801e062 <json_serialize_string+0x90e>
 801e05a:	68fb      	ldr	r3, [r7, #12]
 801e05c:	683a      	ldr	r2, [r7, #0]
 801e05e:	4413      	add	r3, r2
 801e060:	603b      	str	r3, [r7, #0]
 801e062:	69ba      	ldr	r2, [r7, #24]
 801e064:	68fb      	ldr	r3, [r7, #12]
 801e066:	4413      	add	r3, r2
 801e068:	61bb      	str	r3, [r7, #24]
    return written_total;
 801e06a:	69bb      	ldr	r3, [r7, #24]
}
 801e06c:	4618      	mov	r0, r3
 801e06e:	3720      	adds	r7, #32
 801e070:	46bd      	mov	sp, r7
 801e072:	bd80      	pop	{r7, pc}
 801e074:	080227fc 	.word	0x080227fc
 801e078:	08022804 	.word	0x08022804
 801e07c:	08022710 	.word	0x08022710

0801e080 <append_indent>:

static int append_indent(char *buf, int level) {
 801e080:	b580      	push	{r7, lr}
 801e082:	b086      	sub	sp, #24
 801e084:	af00      	add	r7, sp, #0
 801e086:	6078      	str	r0, [r7, #4]
 801e088:	6039      	str	r1, [r7, #0]
    int i;
    int written = -1, written_total = 0;
 801e08a:	f04f 33ff 	mov.w	r3, #4294967295
 801e08e:	60fb      	str	r3, [r7, #12]
 801e090:	2300      	movs	r3, #0
 801e092:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801e094:	2300      	movs	r3, #0
 801e096:	617b      	str	r3, [r7, #20]
 801e098:	e018      	b.n	801e0cc <append_indent+0x4c>
        APPEND_STRING("    ");
 801e09a:	4911      	ldr	r1, [pc, #68]	; (801e0e0 <append_indent+0x60>)
 801e09c:	6878      	ldr	r0, [r7, #4]
 801e09e:	f000 f821 	bl	801e0e4 <append_string>
 801e0a2:	60f8      	str	r0, [r7, #12]
 801e0a4:	68fb      	ldr	r3, [r7, #12]
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	da02      	bge.n	801e0b0 <append_indent+0x30>
 801e0aa:	f04f 33ff 	mov.w	r3, #4294967295
 801e0ae:	e012      	b.n	801e0d6 <append_indent+0x56>
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d003      	beq.n	801e0be <append_indent+0x3e>
 801e0b6:	68fb      	ldr	r3, [r7, #12]
 801e0b8:	687a      	ldr	r2, [r7, #4]
 801e0ba:	4413      	add	r3, r2
 801e0bc:	607b      	str	r3, [r7, #4]
 801e0be:	693a      	ldr	r2, [r7, #16]
 801e0c0:	68fb      	ldr	r3, [r7, #12]
 801e0c2:	4413      	add	r3, r2
 801e0c4:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801e0c6:	697b      	ldr	r3, [r7, #20]
 801e0c8:	3301      	adds	r3, #1
 801e0ca:	617b      	str	r3, [r7, #20]
 801e0cc:	697a      	ldr	r2, [r7, #20]
 801e0ce:	683b      	ldr	r3, [r7, #0]
 801e0d0:	429a      	cmp	r2, r3
 801e0d2:	dbe2      	blt.n	801e09a <append_indent+0x1a>
    }
    return written_total;
 801e0d4:	693b      	ldr	r3, [r7, #16]
}
 801e0d6:	4618      	mov	r0, r3
 801e0d8:	3718      	adds	r7, #24
 801e0da:	46bd      	mov	sp, r7
 801e0dc:	bd80      	pop	{r7, pc}
 801e0de:	bf00      	nop
 801e0e0:	0802280c 	.word	0x0802280c

0801e0e4 <append_string>:

static int append_string(char *buf, const char *string) {
 801e0e4:	b580      	push	{r7, lr}
 801e0e6:	b082      	sub	sp, #8
 801e0e8:	af00      	add	r7, sp, #0
 801e0ea:	6078      	str	r0, [r7, #4]
 801e0ec:	6039      	str	r1, [r7, #0]
    if (buf == NULL) {
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	d104      	bne.n	801e0fe <append_string+0x1a>
        return (int)strlen(string);
 801e0f4:	6838      	ldr	r0, [r7, #0]
 801e0f6:	f7e2 f88d 	bl	8000214 <strlen>
 801e0fa:	4603      	mov	r3, r0
 801e0fc:	e005      	b.n	801e10a <append_string+0x26>
    }
    return sprintf(buf, "%s", string);
 801e0fe:	683a      	ldr	r2, [r7, #0]
 801e100:	4904      	ldr	r1, [pc, #16]	; (801e114 <append_string+0x30>)
 801e102:	6878      	ldr	r0, [r7, #4]
 801e104:	f001 f9f8 	bl	801f4f8 <siprintf>
 801e108:	4603      	mov	r3, r0
}
 801e10a:	4618      	mov	r0, r3
 801e10c:	3708      	adds	r7, #8
 801e10e:	46bd      	mov	sp, r7
 801e110:	bd80      	pop	{r7, pc}
 801e112:	bf00      	nop
 801e114:	08022814 	.word	0x08022814

0801e118 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 801e118:	b580      	push	{r7, lr}
 801e11a:	b082      	sub	sp, #8
 801e11c:	af00      	add	r7, sp, #0
 801e11e:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	2b00      	cmp	r3, #0
 801e124:	d101      	bne.n	801e12a <json_parse_string+0x12>
        return NULL;
 801e126:	2300      	movs	r3, #0
 801e128:	e016      	b.n	801e158 <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	781b      	ldrb	r3, [r3, #0]
 801e12e:	2bef      	cmp	r3, #239	; 0xef
 801e130:	d10c      	bne.n	801e14c <json_parse_string+0x34>
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	3301      	adds	r3, #1
 801e136:	781b      	ldrb	r3, [r3, #0]
 801e138:	2bbb      	cmp	r3, #187	; 0xbb
 801e13a:	d107      	bne.n	801e14c <json_parse_string+0x34>
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	3302      	adds	r3, #2
 801e140:	781b      	ldrb	r3, [r3, #0]
 801e142:	2bbf      	cmp	r3, #191	; 0xbf
 801e144:	d102      	bne.n	801e14c <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	3303      	adds	r3, #3
 801e14a:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 801e14c:	1d3b      	adds	r3, r7, #4
 801e14e:	2100      	movs	r1, #0
 801e150:	4618      	mov	r0, r3
 801e152:	f7fe fcc1 	bl	801cad8 <parse_value>
 801e156:	4603      	mov	r3, r0
}
 801e158:	4618      	mov	r0, r3
 801e15a:	3708      	adds	r7, #8
 801e15c:	46bd      	mov	sp, r7
 801e15e:	bd80      	pop	{r7, pc}

0801e160 <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 801e160:	b580      	push	{r7, lr}
 801e162:	b082      	sub	sp, #8
 801e164:	af00      	add	r7, sp, #0
 801e166:	6078      	str	r0, [r7, #4]
 801e168:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	d002      	beq.n	801e176 <json_object_get_value+0x16>
 801e170:	683b      	ldr	r3, [r7, #0]
 801e172:	2b00      	cmp	r3, #0
 801e174:	d101      	bne.n	801e17a <json_object_get_value+0x1a>
        return NULL;
 801e176:	2300      	movs	r3, #0
 801e178:	e009      	b.n	801e18e <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 801e17a:	6838      	ldr	r0, [r7, #0]
 801e17c:	f7e2 f84a 	bl	8000214 <strlen>
 801e180:	4603      	mov	r3, r0
 801e182:	461a      	mov	r2, r3
 801e184:	6839      	ldr	r1, [r7, #0]
 801e186:	6878      	ldr	r0, [r7, #4]
 801e188:	f7fe f864 	bl	801c254 <json_object_getn_value>
 801e18c:	4603      	mov	r3, r0
}
 801e18e:	4618      	mov	r0, r3
 801e190:	3708      	adds	r7, #8
 801e192:	46bd      	mov	sp, r7
 801e194:	bd80      	pop	{r7, pc}

0801e196 <json_object_dotget_value>:

int json_object_get_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_get_value(object, name));
}

JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 801e196:	b580      	push	{r7, lr}
 801e198:	b084      	sub	sp, #16
 801e19a:	af00      	add	r7, sp, #0
 801e19c:	6078      	str	r0, [r7, #4]
 801e19e:	6039      	str	r1, [r7, #0]
    const char *dot_position = strchr(name, '.');
 801e1a0:	212e      	movs	r1, #46	; 0x2e
 801e1a2:	6838      	ldr	r0, [r7, #0]
 801e1a4:	f001 fa0b 	bl	801f5be <strchr>
 801e1a8:	60f8      	str	r0, [r7, #12]
    if (!dot_position) {
 801e1aa:	68fb      	ldr	r3, [r7, #12]
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	d105      	bne.n	801e1bc <json_object_dotget_value+0x26>
        return json_object_get_value(object, name);
 801e1b0:	6839      	ldr	r1, [r7, #0]
 801e1b2:	6878      	ldr	r0, [r7, #4]
 801e1b4:	f7ff ffd4 	bl	801e160 <json_object_get_value>
 801e1b8:	4603      	mov	r3, r0
 801e1ba:	e013      	b.n	801e1e4 <json_object_dotget_value+0x4e>
    }
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 801e1bc:	68fa      	ldr	r2, [r7, #12]
 801e1be:	683b      	ldr	r3, [r7, #0]
 801e1c0:	1ad3      	subs	r3, r2, r3
 801e1c2:	461a      	mov	r2, r3
 801e1c4:	6839      	ldr	r1, [r7, #0]
 801e1c6:	6878      	ldr	r0, [r7, #4]
 801e1c8:	f7fe f844 	bl	801c254 <json_object_getn_value>
 801e1cc:	4603      	mov	r3, r0
 801e1ce:	4618      	mov	r0, r3
 801e1d0:	f000 f901 	bl	801e3d6 <json_value_get_object>
 801e1d4:	6078      	str	r0, [r7, #4]
    return json_object_dotget_value(object, dot_position + 1);
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	3301      	adds	r3, #1
 801e1da:	4619      	mov	r1, r3
 801e1dc:	6878      	ldr	r0, [r7, #4]
 801e1de:	f7ff ffda 	bl	801e196 <json_object_dotget_value>
 801e1e2:	4603      	mov	r3, r0
}
 801e1e4:	4618      	mov	r0, r3
 801e1e6:	3710      	adds	r7, #16
 801e1e8:	46bd      	mov	sp, r7
 801e1ea:	bd80      	pop	{r7, pc}

0801e1ec <json_object_dotget_string>:

const char * json_object_dotget_string(const JSON_Object *object, const char *name) {
 801e1ec:	b580      	push	{r7, lr}
 801e1ee:	b082      	sub	sp, #8
 801e1f0:	af00      	add	r7, sp, #0
 801e1f2:	6078      	str	r0, [r7, #4]
 801e1f4:	6039      	str	r1, [r7, #0]
    return json_value_get_string(json_object_dotget_value(object, name));
 801e1f6:	6839      	ldr	r1, [r7, #0]
 801e1f8:	6878      	ldr	r0, [r7, #4]
 801e1fa:	f7ff ffcc 	bl	801e196 <json_object_dotget_value>
 801e1fe:	4603      	mov	r3, r0
 801e200:	4618      	mov	r0, r3
 801e202:	f000 f90c 	bl	801e41e <json_value_get_string>
 801e206:	4603      	mov	r3, r0
}
 801e208:	4618      	mov	r0, r3
 801e20a:	3708      	adds	r7, #8
 801e20c:	46bd      	mov	sp, r7
 801e20e:	bd80      	pop	{r7, pc}

0801e210 <json_object_dotget_number>:

double json_object_dotget_number(const JSON_Object *object, const char *name) {
 801e210:	b580      	push	{r7, lr}
 801e212:	b082      	sub	sp, #8
 801e214:	af00      	add	r7, sp, #0
 801e216:	6078      	str	r0, [r7, #4]
 801e218:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_dotget_value(object, name));
 801e21a:	6839      	ldr	r1, [r7, #0]
 801e21c:	6878      	ldr	r0, [r7, #4]
 801e21e:	f7ff ffba 	bl	801e196 <json_object_dotget_value>
 801e222:	4603      	mov	r3, r0
 801e224:	4618      	mov	r0, r3
 801e226:	f000 f90c 	bl	801e442 <json_value_get_number>
 801e22a:	eeb0 7a40 	vmov.f32	s14, s0
 801e22e:	eef0 7a60 	vmov.f32	s15, s1
}
 801e232:	eeb0 0a47 	vmov.f32	s0, s14
 801e236:	eef0 0a67 	vmov.f32	s1, s15
 801e23a:	3708      	adds	r7, #8
 801e23c:	46bd      	mov	sp, r7
 801e23e:	bd80      	pop	{r7, pc}

0801e240 <json_object_dotget_array>:

JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {
    return json_value_get_object(json_object_dotget_value(object, name));
}

JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {
 801e240:	b580      	push	{r7, lr}
 801e242:	b082      	sub	sp, #8
 801e244:	af00      	add	r7, sp, #0
 801e246:	6078      	str	r0, [r7, #4]
 801e248:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_object_dotget_value(object, name));
 801e24a:	6839      	ldr	r1, [r7, #0]
 801e24c:	6878      	ldr	r0, [r7, #4]
 801e24e:	f7ff ffa2 	bl	801e196 <json_object_dotget_value>
 801e252:	4603      	mov	r3, r0
 801e254:	4618      	mov	r0, r3
 801e256:	f000 f8d0 	bl	801e3fa <json_value_get_array>
 801e25a:	4603      	mov	r3, r0
}
 801e25c:	4618      	mov	r0, r3
 801e25e:	3708      	adds	r7, #8
 801e260:	46bd      	mov	sp, r7
 801e262:	bd80      	pop	{r7, pc}

0801e264 <json_object_dotget_boolean>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
 801e264:	b580      	push	{r7, lr}
 801e266:	b082      	sub	sp, #8
 801e268:	af00      	add	r7, sp, #0
 801e26a:	6078      	str	r0, [r7, #4]
 801e26c:	6039      	str	r1, [r7, #0]
    return json_value_get_boolean(json_object_dotget_value(object, name));
 801e26e:	6839      	ldr	r1, [r7, #0]
 801e270:	6878      	ldr	r0, [r7, #4]
 801e272:	f7ff ff90 	bl	801e196 <json_object_dotget_value>
 801e276:	4603      	mov	r3, r0
 801e278:	4618      	mov	r0, r3
 801e27a:	f000 f8fd 	bl	801e478 <json_value_get_boolean>
 801e27e:	4603      	mov	r3, r0
}
 801e280:	4618      	mov	r0, r3
 801e282:	3708      	adds	r7, #8
 801e284:	46bd      	mov	sp, r7
 801e286:	bd80      	pop	{r7, pc}

0801e288 <json_object_get_count>:

size_t json_object_get_count(const JSON_Object *object) {
 801e288:	b480      	push	{r7}
 801e28a:	b083      	sub	sp, #12
 801e28c:	af00      	add	r7, sp, #0
 801e28e:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	2b00      	cmp	r3, #0
 801e294:	d002      	beq.n	801e29c <json_object_get_count+0x14>
 801e296:	687b      	ldr	r3, [r7, #4]
 801e298:	68db      	ldr	r3, [r3, #12]
 801e29a:	e000      	b.n	801e29e <json_object_get_count+0x16>
 801e29c:	2300      	movs	r3, #0
}
 801e29e:	4618      	mov	r0, r3
 801e2a0:	370c      	adds	r7, #12
 801e2a2:	46bd      	mov	sp, r7
 801e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2a8:	4770      	bx	lr

0801e2aa <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 801e2aa:	b580      	push	{r7, lr}
 801e2ac:	b082      	sub	sp, #8
 801e2ae:	af00      	add	r7, sp, #0
 801e2b0:	6078      	str	r0, [r7, #4]
 801e2b2:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	d006      	beq.n	801e2c8 <json_object_get_name+0x1e>
 801e2ba:	6878      	ldr	r0, [r7, #4]
 801e2bc:	f7ff ffe4 	bl	801e288 <json_object_get_count>
 801e2c0:	4602      	mov	r2, r0
 801e2c2:	683b      	ldr	r3, [r7, #0]
 801e2c4:	4293      	cmp	r3, r2
 801e2c6:	d301      	bcc.n	801e2cc <json_object_get_name+0x22>
        return NULL;
 801e2c8:	2300      	movs	r3, #0
 801e2ca:	e005      	b.n	801e2d8 <json_object_get_name+0x2e>
    }
    return object->names[index];
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	685a      	ldr	r2, [r3, #4]
 801e2d0:	683b      	ldr	r3, [r7, #0]
 801e2d2:	009b      	lsls	r3, r3, #2
 801e2d4:	4413      	add	r3, r2
 801e2d6:	681b      	ldr	r3, [r3, #0]
}
 801e2d8:	4618      	mov	r0, r3
 801e2da:	3708      	adds	r7, #8
 801e2dc:	46bd      	mov	sp, r7
 801e2de:	bd80      	pop	{r7, pc}

0801e2e0 <json_object_get_wrapping_value>:
        return NULL;
    }
    return object->values[index];
}

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 801e2e0:	b480      	push	{r7}
 801e2e2:	b083      	sub	sp, #12
 801e2e4:	af00      	add	r7, sp, #0
 801e2e6:	6078      	str	r0, [r7, #4]
    return object->wrapping_value;
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	681b      	ldr	r3, [r3, #0]
}
 801e2ec:	4618      	mov	r0, r3
 801e2ee:	370c      	adds	r7, #12
 801e2f0:	46bd      	mov	sp, r7
 801e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2f6:	4770      	bx	lr

0801e2f8 <json_object_dothas_value>:
int json_object_has_value_of_type(const JSON_Object *object, const char *name, JSON_Value_Type type) {
    JSON_Value *val = json_object_get_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

int json_object_dothas_value (const JSON_Object *object, const char *name) {
 801e2f8:	b580      	push	{r7, lr}
 801e2fa:	b082      	sub	sp, #8
 801e2fc:	af00      	add	r7, sp, #0
 801e2fe:	6078      	str	r0, [r7, #4]
 801e300:	6039      	str	r1, [r7, #0]
    return json_object_dotget_value(object, name) != NULL;
 801e302:	6839      	ldr	r1, [r7, #0]
 801e304:	6878      	ldr	r0, [r7, #4]
 801e306:	f7ff ff46 	bl	801e196 <json_object_dotget_value>
 801e30a:	4603      	mov	r3, r0
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	bf14      	ite	ne
 801e310:	2301      	movne	r3, #1
 801e312:	2300      	moveq	r3, #0
 801e314:	b2db      	uxtb	r3, r3
}
 801e316:	4618      	mov	r0, r3
 801e318:	3708      	adds	r7, #8
 801e31a:	46bd      	mov	sp, r7
 801e31c:	bd80      	pop	{r7, pc}

0801e31e <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 801e31e:	b580      	push	{r7, lr}
 801e320:	b082      	sub	sp, #8
 801e322:	af00      	add	r7, sp, #0
 801e324:	6078      	str	r0, [r7, #4]
 801e326:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	2b00      	cmp	r3, #0
 801e32c:	d006      	beq.n	801e33c <json_array_get_value+0x1e>
 801e32e:	6878      	ldr	r0, [r7, #4]
 801e330:	f000 f822 	bl	801e378 <json_array_get_count>
 801e334:	4602      	mov	r2, r0
 801e336:	683b      	ldr	r3, [r7, #0]
 801e338:	4293      	cmp	r3, r2
 801e33a:	d301      	bcc.n	801e340 <json_array_get_value+0x22>
        return NULL;
 801e33c:	2300      	movs	r3, #0
 801e33e:	e005      	b.n	801e34c <json_array_get_value+0x2e>
    }
    return array->items[index];
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	685a      	ldr	r2, [r3, #4]
 801e344:	683b      	ldr	r3, [r7, #0]
 801e346:	009b      	lsls	r3, r3, #2
 801e348:	4413      	add	r3, r2
 801e34a:	681b      	ldr	r3, [r3, #0]
}
 801e34c:	4618      	mov	r0, r3
 801e34e:	3708      	adds	r7, #8
 801e350:	46bd      	mov	sp, r7
 801e352:	bd80      	pop	{r7, pc}

0801e354 <json_array_get_object>:

double json_array_get_number(const JSON_Array *array, size_t index) {
    return json_value_get_number(json_array_get_value(array, index));
}

JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {
 801e354:	b580      	push	{r7, lr}
 801e356:	b082      	sub	sp, #8
 801e358:	af00      	add	r7, sp, #0
 801e35a:	6078      	str	r0, [r7, #4]
 801e35c:	6039      	str	r1, [r7, #0]
    return json_value_get_object(json_array_get_value(array, index));
 801e35e:	6839      	ldr	r1, [r7, #0]
 801e360:	6878      	ldr	r0, [r7, #4]
 801e362:	f7ff ffdc 	bl	801e31e <json_array_get_value>
 801e366:	4603      	mov	r3, r0
 801e368:	4618      	mov	r0, r3
 801e36a:	f000 f834 	bl	801e3d6 <json_value_get_object>
 801e36e:	4603      	mov	r3, r0
}
 801e370:	4618      	mov	r0, r3
 801e372:	3708      	adds	r7, #8
 801e374:	46bd      	mov	sp, r7
 801e376:	bd80      	pop	{r7, pc}

0801e378 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 801e378:	b480      	push	{r7}
 801e37a:	b083      	sub	sp, #12
 801e37c:	af00      	add	r7, sp, #0
 801e37e:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	2b00      	cmp	r3, #0
 801e384:	d002      	beq.n	801e38c <json_array_get_count+0x14>
 801e386:	687b      	ldr	r3, [r7, #4]
 801e388:	689b      	ldr	r3, [r3, #8]
 801e38a:	e000      	b.n	801e38e <json_array_get_count+0x16>
 801e38c:	2300      	movs	r3, #0
}
 801e38e:	4618      	mov	r0, r3
 801e390:	370c      	adds	r7, #12
 801e392:	46bd      	mov	sp, r7
 801e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e398:	4770      	bx	lr

0801e39a <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 801e39a:	b480      	push	{r7}
 801e39c:	b083      	sub	sp, #12
 801e39e:	af00      	add	r7, sp, #0
 801e3a0:	6078      	str	r0, [r7, #4]
    return array->wrapping_value;
 801e3a2:	687b      	ldr	r3, [r7, #4]
 801e3a4:	681b      	ldr	r3, [r3, #0]
}
 801e3a6:	4618      	mov	r0, r3
 801e3a8:	370c      	adds	r7, #12
 801e3aa:	46bd      	mov	sp, r7
 801e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3b0:	4770      	bx	lr

0801e3b2 <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 801e3b2:	b480      	push	{r7}
 801e3b4:	b083      	sub	sp, #12
 801e3b6:	af00      	add	r7, sp, #0
 801e3b8:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	d002      	beq.n	801e3c6 <json_value_get_type+0x14>
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	685b      	ldr	r3, [r3, #4]
 801e3c4:	e001      	b.n	801e3ca <json_value_get_type+0x18>
 801e3c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e3ca:	4618      	mov	r0, r3
 801e3cc:	370c      	adds	r7, #12
 801e3ce:	46bd      	mov	sp, r7
 801e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3d4:	4770      	bx	lr

0801e3d6 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 801e3d6:	b580      	push	{r7, lr}
 801e3d8:	b082      	sub	sp, #8
 801e3da:	af00      	add	r7, sp, #0
 801e3dc:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801e3de:	6878      	ldr	r0, [r7, #4]
 801e3e0:	f7ff ffe7 	bl	801e3b2 <json_value_get_type>
 801e3e4:	4603      	mov	r3, r0
 801e3e6:	2b04      	cmp	r3, #4
 801e3e8:	d102      	bne.n	801e3f0 <json_value_get_object+0x1a>
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	689b      	ldr	r3, [r3, #8]
 801e3ee:	e000      	b.n	801e3f2 <json_value_get_object+0x1c>
 801e3f0:	2300      	movs	r3, #0
}
 801e3f2:	4618      	mov	r0, r3
 801e3f4:	3708      	adds	r7, #8
 801e3f6:	46bd      	mov	sp, r7
 801e3f8:	bd80      	pop	{r7, pc}

0801e3fa <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 801e3fa:	b580      	push	{r7, lr}
 801e3fc:	b082      	sub	sp, #8
 801e3fe:	af00      	add	r7, sp, #0
 801e400:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 801e402:	6878      	ldr	r0, [r7, #4]
 801e404:	f7ff ffd5 	bl	801e3b2 <json_value_get_type>
 801e408:	4603      	mov	r3, r0
 801e40a:	2b05      	cmp	r3, #5
 801e40c:	d102      	bne.n	801e414 <json_value_get_array+0x1a>
 801e40e:	687b      	ldr	r3, [r7, #4]
 801e410:	689b      	ldr	r3, [r3, #8]
 801e412:	e000      	b.n	801e416 <json_value_get_array+0x1c>
 801e414:	2300      	movs	r3, #0
}
 801e416:	4618      	mov	r0, r3
 801e418:	3708      	adds	r7, #8
 801e41a:	46bd      	mov	sp, r7
 801e41c:	bd80      	pop	{r7, pc}

0801e41e <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 801e41e:	b580      	push	{r7, lr}
 801e420:	b082      	sub	sp, #8
 801e422:	af00      	add	r7, sp, #0
 801e424:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
 801e426:	6878      	ldr	r0, [r7, #4]
 801e428:	f7ff ffc3 	bl	801e3b2 <json_value_get_type>
 801e42c:	4603      	mov	r3, r0
 801e42e:	2b02      	cmp	r3, #2
 801e430:	d102      	bne.n	801e438 <json_value_get_string+0x1a>
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	689b      	ldr	r3, [r3, #8]
 801e436:	e000      	b.n	801e43a <json_value_get_string+0x1c>
 801e438:	2300      	movs	r3, #0
}
 801e43a:	4618      	mov	r0, r3
 801e43c:	3708      	adds	r7, #8
 801e43e:	46bd      	mov	sp, r7
 801e440:	bd80      	pop	{r7, pc}

0801e442 <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 801e442:	b580      	push	{r7, lr}
 801e444:	b082      	sub	sp, #8
 801e446:	af00      	add	r7, sp, #0
 801e448:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 801e44a:	6878      	ldr	r0, [r7, #4]
 801e44c:	f7ff ffb1 	bl	801e3b2 <json_value_get_type>
 801e450:	4603      	mov	r3, r0
 801e452:	2b03      	cmp	r3, #3
 801e454:	d103      	bne.n	801e45e <json_value_get_number+0x1c>
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801e45c:	e003      	b.n	801e466 <json_value_get_number+0x24>
 801e45e:	f04f 0200 	mov.w	r2, #0
 801e462:	f04f 0300 	mov.w	r3, #0
 801e466:	ec43 2b17 	vmov	d7, r2, r3
}
 801e46a:	eeb0 0a47 	vmov.f32	s0, s14
 801e46e:	eef0 0a67 	vmov.f32	s1, s15
 801e472:	3708      	adds	r7, #8
 801e474:	46bd      	mov	sp, r7
 801e476:	bd80      	pop	{r7, pc}

0801e478 <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 801e478:	b580      	push	{r7, lr}
 801e47a:	b082      	sub	sp, #8
 801e47c:	af00      	add	r7, sp, #0
 801e47e:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 801e480:	6878      	ldr	r0, [r7, #4]
 801e482:	f7ff ff96 	bl	801e3b2 <json_value_get_type>
 801e486:	4603      	mov	r3, r0
 801e488:	2b06      	cmp	r3, #6
 801e48a:	d102      	bne.n	801e492 <json_value_get_boolean+0x1a>
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	689b      	ldr	r3, [r3, #8]
 801e490:	e001      	b.n	801e496 <json_value_get_boolean+0x1e>
 801e492:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e496:	4618      	mov	r0, r3
 801e498:	3708      	adds	r7, #8
 801e49a:	46bd      	mov	sp, r7
 801e49c:	bd80      	pop	{r7, pc}
	...

0801e4a0 <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 801e4a0:	b580      	push	{r7, lr}
 801e4a2:	b082      	sub	sp, #8
 801e4a4:	af00      	add	r7, sp, #0
 801e4a6:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 801e4a8:	6878      	ldr	r0, [r7, #4]
 801e4aa:	f7ff ff82 	bl	801e3b2 <json_value_get_type>
 801e4ae:	4603      	mov	r3, r0
 801e4b0:	2b05      	cmp	r3, #5
 801e4b2:	d012      	beq.n	801e4da <json_value_free+0x3a>
 801e4b4:	2b05      	cmp	r3, #5
 801e4b6:	dc16      	bgt.n	801e4e6 <json_value_free+0x46>
 801e4b8:	2b02      	cmp	r3, #2
 801e4ba:	d007      	beq.n	801e4cc <json_value_free+0x2c>
 801e4bc:	2b04      	cmp	r3, #4
 801e4be:	d112      	bne.n	801e4e6 <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	689b      	ldr	r3, [r3, #8]
 801e4c4:	4618      	mov	r0, r3
 801e4c6:	f7fd ffb5 	bl	801c434 <json_object_free>
            break;
 801e4ca:	e00d      	b.n	801e4e8 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string);
 801e4cc:	4b0a      	ldr	r3, [pc, #40]	; (801e4f8 <json_value_free+0x58>)
 801e4ce:	681b      	ldr	r3, [r3, #0]
 801e4d0:	687a      	ldr	r2, [r7, #4]
 801e4d2:	6892      	ldr	r2, [r2, #8]
 801e4d4:	4610      	mov	r0, r2
 801e4d6:	4798      	blx	r3
            break;
 801e4d8:	e006      	b.n	801e4e8 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 801e4da:	687b      	ldr	r3, [r7, #4]
 801e4dc:	689b      	ldr	r3, [r3, #8]
 801e4de:	4618      	mov	r0, r3
 801e4e0:	f7fe f878 	bl	801c5d4 <json_array_free>
            break;
 801e4e4:	e000      	b.n	801e4e8 <json_value_free+0x48>
        default:
            break;
 801e4e6:	bf00      	nop
    }
    parson_free(value);
 801e4e8:	4b03      	ldr	r3, [pc, #12]	; (801e4f8 <json_value_free+0x58>)
 801e4ea:	681b      	ldr	r3, [r3, #0]
 801e4ec:	6878      	ldr	r0, [r7, #4]
 801e4ee:	4798      	blx	r3
}
 801e4f0:	bf00      	nop
 801e4f2:	3708      	adds	r7, #8
 801e4f4:	46bd      	mov	sp, r7
 801e4f6:	bd80      	pop	{r7, pc}
 801e4f8:	200002b4 	.word	0x200002b4

0801e4fc <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 801e4fc:	b580      	push	{r7, lr}
 801e4fe:	b082      	sub	sp, #8
 801e500:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801e502:	4b12      	ldr	r3, [pc, #72]	; (801e54c <json_value_init_object+0x50>)
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	2010      	movs	r0, #16
 801e508:	4798      	blx	r3
 801e50a:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	2b00      	cmp	r3, #0
 801e510:	d101      	bne.n	801e516 <json_value_init_object+0x1a>
        return NULL;
 801e512:	2300      	movs	r3, #0
 801e514:	e016      	b.n	801e544 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	2200      	movs	r2, #0
 801e51a:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	2204      	movs	r2, #4
 801e520:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_init(new_value);
 801e522:	6878      	ldr	r0, [r7, #4]
 801e524:	f7fd fd76 	bl	801c014 <json_object_init>
 801e528:	4602      	mov	r2, r0
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	689b      	ldr	r3, [r3, #8]
 801e532:	2b00      	cmp	r3, #0
 801e534:	d105      	bne.n	801e542 <json_value_init_object+0x46>
        parson_free(new_value);
 801e536:	4b06      	ldr	r3, [pc, #24]	; (801e550 <json_value_init_object+0x54>)
 801e538:	681b      	ldr	r3, [r3, #0]
 801e53a:	6878      	ldr	r0, [r7, #4]
 801e53c:	4798      	blx	r3
        return NULL;
 801e53e:	2300      	movs	r3, #0
 801e540:	e000      	b.n	801e544 <json_value_init_object+0x48>
    }
    return new_value;
 801e542:	687b      	ldr	r3, [r7, #4]
}
 801e544:	4618      	mov	r0, r3
 801e546:	3708      	adds	r7, #8
 801e548:	46bd      	mov	sp, r7
 801e54a:	bd80      	pop	{r7, pc}
 801e54c:	200002b0 	.word	0x200002b0
 801e550:	200002b4 	.word	0x200002b4

0801e554 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 801e554:	b580      	push	{r7, lr}
 801e556:	b082      	sub	sp, #8
 801e558:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801e55a:	4b12      	ldr	r3, [pc, #72]	; (801e5a4 <json_value_init_array+0x50>)
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	2010      	movs	r0, #16
 801e560:	4798      	blx	r3
 801e562:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	2b00      	cmp	r3, #0
 801e568:	d101      	bne.n	801e56e <json_value_init_array+0x1a>
        return NULL;
 801e56a:	2300      	movs	r3, #0
 801e56c:	e016      	b.n	801e59c <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 801e56e:	687b      	ldr	r3, [r7, #4]
 801e570:	2200      	movs	r2, #0
 801e572:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	2205      	movs	r2, #5
 801e578:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_init(new_value);
 801e57a:	6878      	ldr	r0, [r7, #4]
 801e57c:	f7fd ff92 	bl	801c4a4 <json_array_init>
 801e580:	4602      	mov	r2, r0
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	689b      	ldr	r3, [r3, #8]
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	d105      	bne.n	801e59a <json_value_init_array+0x46>
        parson_free(new_value);
 801e58e:	4b06      	ldr	r3, [pc, #24]	; (801e5a8 <json_value_init_array+0x54>)
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	6878      	ldr	r0, [r7, #4]
 801e594:	4798      	blx	r3
        return NULL;
 801e596:	2300      	movs	r3, #0
 801e598:	e000      	b.n	801e59c <json_value_init_array+0x48>
    }
    return new_value;
 801e59a:	687b      	ldr	r3, [r7, #4]
}
 801e59c:	4618      	mov	r0, r3
 801e59e:	3708      	adds	r7, #8
 801e5a0:	46bd      	mov	sp, r7
 801e5a2:	bd80      	pop	{r7, pc}
 801e5a4:	200002b0 	.word	0x200002b0
 801e5a8:	200002b4 	.word	0x200002b4

0801e5ac <json_value_init_string>:

JSON_Value * json_value_init_string(const char *string) {
 801e5ac:	b580      	push	{r7, lr}
 801e5ae:	b086      	sub	sp, #24
 801e5b0:	af00      	add	r7, sp, #0
 801e5b2:	6078      	str	r0, [r7, #4]
    char *copy = NULL;
 801e5b4:	2300      	movs	r3, #0
 801e5b6:	617b      	str	r3, [r7, #20]
    JSON_Value *value;
    size_t string_len = 0;
 801e5b8:	2300      	movs	r3, #0
 801e5ba:	613b      	str	r3, [r7, #16]
    if (string == NULL) {
 801e5bc:	687b      	ldr	r3, [r7, #4]
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	d101      	bne.n	801e5c6 <json_value_init_string+0x1a>
        return NULL;
 801e5c2:	2300      	movs	r3, #0
 801e5c4:	e022      	b.n	801e60c <json_value_init_string+0x60>
    }
    string_len = strlen(string);
 801e5c6:	6878      	ldr	r0, [r7, #4]
 801e5c8:	f7e1 fe24 	bl	8000214 <strlen>
 801e5cc:	6138      	str	r0, [r7, #16]
    if (!is_valid_utf8(string, string_len)) {
 801e5ce:	6939      	ldr	r1, [r7, #16]
 801e5d0:	6878      	ldr	r0, [r7, #4]
 801e5d2:	f7fd fcba 	bl	801bf4a <is_valid_utf8>
 801e5d6:	4603      	mov	r3, r0
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	d101      	bne.n	801e5e0 <json_value_init_string+0x34>
        return NULL;
 801e5dc:	2300      	movs	r3, #0
 801e5de:	e015      	b.n	801e60c <json_value_init_string+0x60>
    }
    copy = parson_strndup(string, string_len);
 801e5e0:	6939      	ldr	r1, [r7, #16]
 801e5e2:	6878      	ldr	r0, [r7, #4]
 801e5e4:	f7fd fb12 	bl	801bc0c <parson_strndup>
 801e5e8:	6178      	str	r0, [r7, #20]
    if (copy == NULL) {
 801e5ea:	697b      	ldr	r3, [r7, #20]
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d101      	bne.n	801e5f4 <json_value_init_string+0x48>
        return NULL;
 801e5f0:	2300      	movs	r3, #0
 801e5f2:	e00b      	b.n	801e60c <json_value_init_string+0x60>
    }
    value = json_value_init_string_no_copy(copy);
 801e5f4:	6978      	ldr	r0, [r7, #20]
 801e5f6:	f7fe f815 	bl	801c624 <json_value_init_string_no_copy>
 801e5fa:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801e5fc:	68fb      	ldr	r3, [r7, #12]
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d103      	bne.n	801e60a <json_value_init_string+0x5e>
        parson_free(copy);
 801e602:	4b04      	ldr	r3, [pc, #16]	; (801e614 <json_value_init_string+0x68>)
 801e604:	681b      	ldr	r3, [r3, #0]
 801e606:	6978      	ldr	r0, [r7, #20]
 801e608:	4798      	blx	r3
    }
    return value;
 801e60a:	68fb      	ldr	r3, [r7, #12]
}
 801e60c:	4618      	mov	r0, r3
 801e60e:	3718      	adds	r7, #24
 801e610:	46bd      	mov	sp, r7
 801e612:	bd80      	pop	{r7, pc}
 801e614:	200002b4 	.word	0x200002b4

0801e618 <json_value_init_number>:

JSON_Value * json_value_init_number(double number) {
 801e618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e61a:	b085      	sub	sp, #20
 801e61c:	af00      	add	r7, sp, #0
 801e61e:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 801e622:	2300      	movs	r3, #0
 801e624:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 801e626:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e62a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801e62e:	f7e2 faa5 	bl	8000b7c <__aeabi_dcmpun>
 801e632:	4603      	mov	r3, r0
 801e634:	2b00      	cmp	r3, #0
 801e636:	d121      	bne.n	801e67c <json_value_init_number+0x64>
 801e638:	683c      	ldr	r4, [r7, #0]
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801e640:	2301      	movs	r3, #1
 801e642:	461e      	mov	r6, r3
 801e644:	f04f 32ff 	mov.w	r2, #4294967295
 801e648:	4b1a      	ldr	r3, [pc, #104]	; (801e6b4 <json_value_init_number+0x9c>)
 801e64a:	4620      	mov	r0, r4
 801e64c:	4629      	mov	r1, r5
 801e64e:	f7e2 fa95 	bl	8000b7c <__aeabi_dcmpun>
 801e652:	4603      	mov	r3, r0
 801e654:	2b00      	cmp	r3, #0
 801e656:	d10b      	bne.n	801e670 <json_value_init_number+0x58>
 801e658:	f04f 32ff 	mov.w	r2, #4294967295
 801e65c:	4b15      	ldr	r3, [pc, #84]	; (801e6b4 <json_value_init_number+0x9c>)
 801e65e:	4620      	mov	r0, r4
 801e660:	4629      	mov	r1, r5
 801e662:	f7e2 fa6d 	bl	8000b40 <__aeabi_dcmple>
 801e666:	4603      	mov	r3, r0
 801e668:	2b00      	cmp	r3, #0
 801e66a:	d101      	bne.n	801e670 <json_value_init_number+0x58>
 801e66c:	2300      	movs	r3, #0
 801e66e:	461e      	mov	r6, r3
 801e670:	b2f3      	uxtb	r3, r6
 801e672:	f083 0301 	eor.w	r3, r3, #1
 801e676:	b2db      	uxtb	r3, r3
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d001      	beq.n	801e680 <json_value_init_number+0x68>
        return NULL;
 801e67c:	2300      	movs	r3, #0
 801e67e:	e015      	b.n	801e6ac <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801e680:	4b0d      	ldr	r3, [pc, #52]	; (801e6b8 <json_value_init_number+0xa0>)
 801e682:	681b      	ldr	r3, [r3, #0]
 801e684:	2010      	movs	r0, #16
 801e686:	4798      	blx	r3
 801e688:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 801e68a:	68fb      	ldr	r3, [r7, #12]
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	d101      	bne.n	801e694 <json_value_init_number+0x7c>
        return NULL;
 801e690:	2300      	movs	r3, #0
 801e692:	e00b      	b.n	801e6ac <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 801e694:	68fb      	ldr	r3, [r7, #12]
 801e696:	2200      	movs	r2, #0
 801e698:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 801e69a:	68fb      	ldr	r3, [r7, #12]
 801e69c:	2203      	movs	r2, #3
 801e69e:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 801e6a0:	68f9      	ldr	r1, [r7, #12]
 801e6a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e6a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 801e6aa:	68fb      	ldr	r3, [r7, #12]
}
 801e6ac:	4618      	mov	r0, r3
 801e6ae:	3714      	adds	r7, #20
 801e6b0:	46bd      	mov	sp, r7
 801e6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6b4:	7fefffff 	.word	0x7fefffff
 801e6b8:	200002b0 	.word	0x200002b0

0801e6bc <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 801e6bc:	b580      	push	{r7, lr}
 801e6be:	b084      	sub	sp, #16
 801e6c0:	af00      	add	r7, sp, #0
 801e6c2:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801e6c4:	4b0e      	ldr	r3, [pc, #56]	; (801e700 <json_value_init_boolean+0x44>)
 801e6c6:	681b      	ldr	r3, [r3, #0]
 801e6c8:	2010      	movs	r0, #16
 801e6ca:	4798      	blx	r3
 801e6cc:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801e6ce:	68fb      	ldr	r3, [r7, #12]
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	d101      	bne.n	801e6d8 <json_value_init_boolean+0x1c>
        return NULL;
 801e6d4:	2300      	movs	r3, #0
 801e6d6:	e00f      	b.n	801e6f8 <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 801e6d8:	68fb      	ldr	r3, [r7, #12]
 801e6da:	2200      	movs	r2, #0
 801e6dc:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	2206      	movs	r2, #6
 801e6e2:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	bf14      	ite	ne
 801e6ea:	2301      	movne	r3, #1
 801e6ec:	2300      	moveq	r3, #0
 801e6ee:	b2db      	uxtb	r3, r3
 801e6f0:	461a      	mov	r2, r3
 801e6f2:	68fb      	ldr	r3, [r7, #12]
 801e6f4:	609a      	str	r2, [r3, #8]
    return new_value;
 801e6f6:	68fb      	ldr	r3, [r7, #12]
}
 801e6f8:	4618      	mov	r0, r3
 801e6fa:	3710      	adds	r7, #16
 801e6fc:	46bd      	mov	sp, r7
 801e6fe:	bd80      	pop	{r7, pc}
 801e700:	200002b0 	.word	0x200002b0

0801e704 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 801e704:	b580      	push	{r7, lr}
 801e706:	b082      	sub	sp, #8
 801e708:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801e70a:	4b0a      	ldr	r3, [pc, #40]	; (801e734 <json_value_init_null+0x30>)
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	2010      	movs	r0, #16
 801e710:	4798      	blx	r3
 801e712:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	2b00      	cmp	r3, #0
 801e718:	d101      	bne.n	801e71e <json_value_init_null+0x1a>
        return NULL;
 801e71a:	2300      	movs	r3, #0
 801e71c:	e006      	b.n	801e72c <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	2200      	movs	r2, #0
 801e722:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	2201      	movs	r2, #1
 801e728:	605a      	str	r2, [r3, #4]
    return new_value;
 801e72a:	687b      	ldr	r3, [r7, #4]
}
 801e72c:	4618      	mov	r0, r3
 801e72e:	3708      	adds	r7, #8
 801e730:	46bd      	mov	sp, r7
 801e732:	bd80      	pop	{r7, pc}
 801e734:	200002b0 	.word	0x200002b0

0801e738 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 801e738:	b580      	push	{r7, lr}
 801e73a:	b096      	sub	sp, #88	; 0x58
 801e73c:	af02      	add	r7, sp, #8
 801e73e:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 801e740:	f107 030c 	add.w	r3, r7, #12
 801e744:	9300      	str	r3, [sp, #0]
 801e746:	2300      	movs	r3, #0
 801e748:	2200      	movs	r2, #0
 801e74a:	2100      	movs	r1, #0
 801e74c:	6878      	ldr	r0, [r7, #4]
 801e74e:	f7fe fced 	bl	801d12c <json_serialize_to_buffer_r>
 801e752:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801e754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e756:	2b00      	cmp	r3, #0
 801e758:	db02      	blt.n	801e760 <json_serialization_size+0x28>
 801e75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e75c:	3301      	adds	r3, #1
 801e75e:	e000      	b.n	801e762 <json_serialization_size+0x2a>
 801e760:	2300      	movs	r3, #0
}
 801e762:	4618      	mov	r0, r3
 801e764:	3750      	adds	r7, #80	; 0x50
 801e766:	46bd      	mov	sp, r7
 801e768:	bd80      	pop	{r7, pc}

0801e76a <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801e76a:	b580      	push	{r7, lr}
 801e76c:	b088      	sub	sp, #32
 801e76e:	af02      	add	r7, sp, #8
 801e770:	60f8      	str	r0, [r7, #12]
 801e772:	60b9      	str	r1, [r7, #8]
 801e774:	607a      	str	r2, [r7, #4]
    int written = -1;
 801e776:	f04f 33ff 	mov.w	r3, #4294967295
 801e77a:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 801e77c:	68f8      	ldr	r0, [r7, #12]
 801e77e:	f7ff ffdb 	bl	801e738 <json_serialization_size>
 801e782:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801e784:	693b      	ldr	r3, [r7, #16]
 801e786:	2b00      	cmp	r3, #0
 801e788:	d003      	beq.n	801e792 <json_serialize_to_buffer+0x28>
 801e78a:	687a      	ldr	r2, [r7, #4]
 801e78c:	693b      	ldr	r3, [r7, #16]
 801e78e:	429a      	cmp	r2, r3
 801e790:	d202      	bcs.n	801e798 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 801e792:	f04f 33ff 	mov.w	r3, #4294967295
 801e796:	e00f      	b.n	801e7b8 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 0, NULL);
 801e798:	2300      	movs	r3, #0
 801e79a:	9300      	str	r3, [sp, #0]
 801e79c:	2300      	movs	r3, #0
 801e79e:	2200      	movs	r2, #0
 801e7a0:	68b9      	ldr	r1, [r7, #8]
 801e7a2:	68f8      	ldr	r0, [r7, #12]
 801e7a4:	f7fe fcc2 	bl	801d12c <json_serialize_to_buffer_r>
 801e7a8:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801e7aa:	697b      	ldr	r3, [r7, #20]
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	da02      	bge.n	801e7b6 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 801e7b0:	f04f 33ff 	mov.w	r3, #4294967295
 801e7b4:	e000      	b.n	801e7b8 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 801e7b6:	2300      	movs	r3, #0
}
 801e7b8:	4618      	mov	r0, r3
 801e7ba:	3718      	adds	r7, #24
 801e7bc:	46bd      	mov	sp, r7
 801e7be:	bd80      	pop	{r7, pc}

0801e7c0 <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 801e7c0:	b580      	push	{r7, lr}
 801e7c2:	b086      	sub	sp, #24
 801e7c4:	af00      	add	r7, sp, #0
 801e7c6:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801e7c8:	f04f 33ff 	mov.w	r3, #4294967295
 801e7cc:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 801e7ce:	6878      	ldr	r0, [r7, #4]
 801e7d0:	f7ff ffb2 	bl	801e738 <json_serialization_size>
 801e7d4:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801e7d6:	2300      	movs	r3, #0
 801e7d8:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801e7da:	693b      	ldr	r3, [r7, #16]
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d101      	bne.n	801e7e4 <json_serialize_to_string+0x24>
        return NULL;
 801e7e0:	2300      	movs	r3, #0
 801e7e2:	e019      	b.n	801e818 <json_serialize_to_string+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801e7e4:	4b0e      	ldr	r3, [pc, #56]	; (801e820 <json_serialize_to_string+0x60>)
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	6938      	ldr	r0, [r7, #16]
 801e7ea:	4798      	blx	r3
 801e7ec:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801e7ee:	68fb      	ldr	r3, [r7, #12]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d101      	bne.n	801e7f8 <json_serialize_to_string+0x38>
        return NULL;
 801e7f4:	2300      	movs	r3, #0
 801e7f6:	e00f      	b.n	801e818 <json_serialize_to_string+0x58>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 801e7f8:	693a      	ldr	r2, [r7, #16]
 801e7fa:	68f9      	ldr	r1, [r7, #12]
 801e7fc:	6878      	ldr	r0, [r7, #4]
 801e7fe:	f7ff ffb4 	bl	801e76a <json_serialize_to_buffer>
 801e802:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801e804:	697b      	ldr	r3, [r7, #20]
 801e806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e80a:	d104      	bne.n	801e816 <json_serialize_to_string+0x56>
        json_free_serialized_string(buf);
 801e80c:	68f8      	ldr	r0, [r7, #12]
 801e80e:	f000 f87f 	bl	801e910 <json_free_serialized_string>
        return NULL;
 801e812:	2300      	movs	r3, #0
 801e814:	e000      	b.n	801e818 <json_serialize_to_string+0x58>
    }
    return buf;
 801e816:	68fb      	ldr	r3, [r7, #12]
}
 801e818:	4618      	mov	r0, r3
 801e81a:	3718      	adds	r7, #24
 801e81c:	46bd      	mov	sp, r7
 801e81e:	bd80      	pop	{r7, pc}
 801e820:	200002b0 	.word	0x200002b0

0801e824 <json_serialization_size_pretty>:

size_t json_serialization_size_pretty(const JSON_Value *value) {
 801e824:	b580      	push	{r7, lr}
 801e826:	b096      	sub	sp, #88	; 0x58
 801e828:	af02      	add	r7, sp, #8
 801e82a:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 1, num_buf);
 801e82c:	f107 030c 	add.w	r3, r7, #12
 801e830:	9300      	str	r3, [sp, #0]
 801e832:	2301      	movs	r3, #1
 801e834:	2200      	movs	r2, #0
 801e836:	2100      	movs	r1, #0
 801e838:	6878      	ldr	r0, [r7, #4]
 801e83a:	f7fe fc77 	bl	801d12c <json_serialize_to_buffer_r>
 801e83e:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801e840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e842:	2b00      	cmp	r3, #0
 801e844:	db02      	blt.n	801e84c <json_serialization_size_pretty+0x28>
 801e846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e848:	3301      	adds	r3, #1
 801e84a:	e000      	b.n	801e84e <json_serialization_size_pretty+0x2a>
 801e84c:	2300      	movs	r3, #0
}
 801e84e:	4618      	mov	r0, r3
 801e850:	3750      	adds	r7, #80	; 0x50
 801e852:	46bd      	mov	sp, r7
 801e854:	bd80      	pop	{r7, pc}

0801e856 <json_serialize_to_buffer_pretty>:

JSON_Status json_serialize_to_buffer_pretty(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801e856:	b580      	push	{r7, lr}
 801e858:	b088      	sub	sp, #32
 801e85a:	af02      	add	r7, sp, #8
 801e85c:	60f8      	str	r0, [r7, #12]
 801e85e:	60b9      	str	r1, [r7, #8]
 801e860:	607a      	str	r2, [r7, #4]
    int written = -1;
 801e862:	f04f 33ff 	mov.w	r3, #4294967295
 801e866:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size_pretty(value);
 801e868:	68f8      	ldr	r0, [r7, #12]
 801e86a:	f7ff ffdb 	bl	801e824 <json_serialization_size_pretty>
 801e86e:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801e870:	693b      	ldr	r3, [r7, #16]
 801e872:	2b00      	cmp	r3, #0
 801e874:	d003      	beq.n	801e87e <json_serialize_to_buffer_pretty+0x28>
 801e876:	687a      	ldr	r2, [r7, #4]
 801e878:	693b      	ldr	r3, [r7, #16]
 801e87a:	429a      	cmp	r2, r3
 801e87c:	d202      	bcs.n	801e884 <json_serialize_to_buffer_pretty+0x2e>
        return JSONFailure;
 801e87e:	f04f 33ff 	mov.w	r3, #4294967295
 801e882:	e00f      	b.n	801e8a4 <json_serialize_to_buffer_pretty+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 1, NULL);
 801e884:	2300      	movs	r3, #0
 801e886:	9300      	str	r3, [sp, #0]
 801e888:	2301      	movs	r3, #1
 801e88a:	2200      	movs	r2, #0
 801e88c:	68b9      	ldr	r1, [r7, #8]
 801e88e:	68f8      	ldr	r0, [r7, #12]
 801e890:	f7fe fc4c 	bl	801d12c <json_serialize_to_buffer_r>
 801e894:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801e896:	697b      	ldr	r3, [r7, #20]
 801e898:	2b00      	cmp	r3, #0
 801e89a:	da02      	bge.n	801e8a2 <json_serialize_to_buffer_pretty+0x4c>
        return JSONFailure;
 801e89c:	f04f 33ff 	mov.w	r3, #4294967295
 801e8a0:	e000      	b.n	801e8a4 <json_serialize_to_buffer_pretty+0x4e>
    }
    return JSONSuccess;
 801e8a2:	2300      	movs	r3, #0
}
 801e8a4:	4618      	mov	r0, r3
 801e8a6:	3718      	adds	r7, #24
 801e8a8:	46bd      	mov	sp, r7
 801e8aa:	bd80      	pop	{r7, pc}

0801e8ac <json_serialize_to_string_pretty>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string_pretty(const JSON_Value *value) {
 801e8ac:	b580      	push	{r7, lr}
 801e8ae:	b086      	sub	sp, #24
 801e8b0:	af00      	add	r7, sp, #0
 801e8b2:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801e8b4:	f04f 33ff 	mov.w	r3, #4294967295
 801e8b8:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size_pretty(value);
 801e8ba:	6878      	ldr	r0, [r7, #4]
 801e8bc:	f7ff ffb2 	bl	801e824 <json_serialization_size_pretty>
 801e8c0:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801e8c2:	2300      	movs	r3, #0
 801e8c4:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801e8c6:	693b      	ldr	r3, [r7, #16]
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d101      	bne.n	801e8d0 <json_serialize_to_string_pretty+0x24>
        return NULL;
 801e8cc:	2300      	movs	r3, #0
 801e8ce:	e019      	b.n	801e904 <json_serialize_to_string_pretty+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801e8d0:	4b0e      	ldr	r3, [pc, #56]	; (801e90c <json_serialize_to_string_pretty+0x60>)
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	6938      	ldr	r0, [r7, #16]
 801e8d6:	4798      	blx	r3
 801e8d8:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801e8da:	68fb      	ldr	r3, [r7, #12]
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d101      	bne.n	801e8e4 <json_serialize_to_string_pretty+0x38>
        return NULL;
 801e8e0:	2300      	movs	r3, #0
 801e8e2:	e00f      	b.n	801e904 <json_serialize_to_string_pretty+0x58>
    }
    serialization_result = json_serialize_to_buffer_pretty(value, buf, buf_size_bytes);
 801e8e4:	693a      	ldr	r2, [r7, #16]
 801e8e6:	68f9      	ldr	r1, [r7, #12]
 801e8e8:	6878      	ldr	r0, [r7, #4]
 801e8ea:	f7ff ffb4 	bl	801e856 <json_serialize_to_buffer_pretty>
 801e8ee:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801e8f0:	697b      	ldr	r3, [r7, #20]
 801e8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e8f6:	d104      	bne.n	801e902 <json_serialize_to_string_pretty+0x56>
        json_free_serialized_string(buf);
 801e8f8:	68f8      	ldr	r0, [r7, #12]
 801e8fa:	f000 f809 	bl	801e910 <json_free_serialized_string>
        return NULL;
 801e8fe:	2300      	movs	r3, #0
 801e900:	e000      	b.n	801e904 <json_serialize_to_string_pretty+0x58>
    }
    return buf;
 801e902:	68fb      	ldr	r3, [r7, #12]
}
 801e904:	4618      	mov	r0, r3
 801e906:	3718      	adds	r7, #24
 801e908:	46bd      	mov	sp, r7
 801e90a:	bd80      	pop	{r7, pc}
 801e90c:	200002b0 	.word	0x200002b0

0801e910 <json_free_serialized_string>:

void json_free_serialized_string(char *string) {
 801e910:	b580      	push	{r7, lr}
 801e912:	b082      	sub	sp, #8
 801e914:	af00      	add	r7, sp, #0
 801e916:	6078      	str	r0, [r7, #4]
    parson_free(string);
 801e918:	4b03      	ldr	r3, [pc, #12]	; (801e928 <json_free_serialized_string+0x18>)
 801e91a:	681b      	ldr	r3, [r3, #0]
 801e91c:	6878      	ldr	r0, [r7, #4]
 801e91e:	4798      	blx	r3
}
 801e920:	bf00      	nop
 801e922:	3708      	adds	r7, #8
 801e924:	46bd      	mov	sp, r7
 801e926:	bd80      	pop	{r7, pc}
 801e928:	200002b4 	.word	0x200002b4

0801e92c <json_array_append_value>:
    }
    array->count = 0;
    return JSONSuccess;
}

JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {
 801e92c:	b580      	push	{r7, lr}
 801e92e:	b082      	sub	sp, #8
 801e930:	af00      	add	r7, sp, #0
 801e932:	6078      	str	r0, [r7, #4]
 801e934:	6039      	str	r1, [r7, #0]
    if (array == NULL || value == NULL || value->parent != NULL) {
 801e936:	687b      	ldr	r3, [r7, #4]
 801e938:	2b00      	cmp	r3, #0
 801e93a:	d006      	beq.n	801e94a <json_array_append_value+0x1e>
 801e93c:	683b      	ldr	r3, [r7, #0]
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d003      	beq.n	801e94a <json_array_append_value+0x1e>
 801e942:	683b      	ldr	r3, [r7, #0]
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	2b00      	cmp	r3, #0
 801e948:	d002      	beq.n	801e950 <json_array_append_value+0x24>
        return JSONFailure;
 801e94a:	f04f 33ff 	mov.w	r3, #4294967295
 801e94e:	e004      	b.n	801e95a <json_array_append_value+0x2e>
    }
    return json_array_add(array, value);
 801e950:	6839      	ldr	r1, [r7, #0]
 801e952:	6878      	ldr	r0, [r7, #4]
 801e954:	f7fd fdc8 	bl	801c4e8 <json_array_add>
 801e958:	4603      	mov	r3, r0
}
 801e95a:	4618      	mov	r0, r3
 801e95c:	3708      	adds	r7, #8
 801e95e:	46bd      	mov	sp, r7
 801e960:	bd80      	pop	{r7, pc}

0801e962 <json_array_append_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_array_append_number(JSON_Array *array, double number) {
 801e962:	b580      	push	{r7, lr}
 801e964:	b086      	sub	sp, #24
 801e966:	af00      	add	r7, sp, #0
 801e968:	60f8      	str	r0, [r7, #12]
 801e96a:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801e96e:	ed97 0b00 	vldr	d0, [r7]
 801e972:	f7ff fe51 	bl	801e618 <json_value_init_number>
 801e976:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801e978:	697b      	ldr	r3, [r7, #20]
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	d102      	bne.n	801e984 <json_array_append_number+0x22>
        return JSONFailure;
 801e97e:	f04f 33ff 	mov.w	r3, #4294967295
 801e982:	e00e      	b.n	801e9a2 <json_array_append_number+0x40>
    }
    if (json_array_append_value(array, value) == JSONFailure) {
 801e984:	6979      	ldr	r1, [r7, #20]
 801e986:	68f8      	ldr	r0, [r7, #12]
 801e988:	f7ff ffd0 	bl	801e92c <json_array_append_value>
 801e98c:	4603      	mov	r3, r0
 801e98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e992:	d105      	bne.n	801e9a0 <json_array_append_number+0x3e>
        json_value_free(value);
 801e994:	6978      	ldr	r0, [r7, #20]
 801e996:	f7ff fd83 	bl	801e4a0 <json_value_free>
        return JSONFailure;
 801e99a:	f04f 33ff 	mov.w	r3, #4294967295
 801e99e:	e000      	b.n	801e9a2 <json_array_append_number+0x40>
    }
    return JSONSuccess;
 801e9a0:	2300      	movs	r3, #0
}
 801e9a2:	4618      	mov	r0, r3
 801e9a4:	3718      	adds	r7, #24
 801e9a6:	46bd      	mov	sp, r7
 801e9a8:	bd80      	pop	{r7, pc}

0801e9aa <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801e9aa:	b580      	push	{r7, lr}
 801e9ac:	b086      	sub	sp, #24
 801e9ae:	af00      	add	r7, sp, #0
 801e9b0:	60f8      	str	r0, [r7, #12]
 801e9b2:	60b9      	str	r1, [r7, #8]
 801e9b4:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 801e9b6:	2300      	movs	r3, #0
 801e9b8:	617b      	str	r3, [r7, #20]
    JSON_Value *old_value;
    if (object == NULL || name == NULL || value == NULL || value->parent != NULL) {
 801e9ba:	68fb      	ldr	r3, [r7, #12]
 801e9bc:	2b00      	cmp	r3, #0
 801e9be:	d009      	beq.n	801e9d4 <json_object_set_value+0x2a>
 801e9c0:	68bb      	ldr	r3, [r7, #8]
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	d006      	beq.n	801e9d4 <json_object_set_value+0x2a>
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	2b00      	cmp	r3, #0
 801e9ca:	d003      	beq.n	801e9d4 <json_object_set_value+0x2a>
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	d002      	beq.n	801e9da <json_object_set_value+0x30>
        return JSONFailure;
 801e9d4:	f04f 33ff 	mov.w	r3, #4294967295
 801e9d8:	e039      	b.n	801ea4e <json_object_set_value+0xa4>
    }
    old_value = json_object_get_value(object, name);
 801e9da:	68b9      	ldr	r1, [r7, #8]
 801e9dc:	68f8      	ldr	r0, [r7, #12]
 801e9de:	f7ff fbbf 	bl	801e160 <json_object_get_value>
 801e9e2:	6138      	str	r0, [r7, #16]
    if (old_value != NULL) { /* free and overwrite old value */
 801e9e4:	693b      	ldr	r3, [r7, #16]
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	d02b      	beq.n	801ea42 <json_object_set_value+0x98>
        json_value_free(old_value);
 801e9ea:	6938      	ldr	r0, [r7, #16]
 801e9ec:	f7ff fd58 	bl	801e4a0 <json_value_free>
        for (i = 0; i < json_object_get_count(object); i++) {
 801e9f0:	2300      	movs	r3, #0
 801e9f2:	617b      	str	r3, [r7, #20]
 801e9f4:	e01e      	b.n	801ea34 <json_object_set_value+0x8a>
            if (strcmp(object->names[i], name) == 0) {
 801e9f6:	68fb      	ldr	r3, [r7, #12]
 801e9f8:	685a      	ldr	r2, [r3, #4]
 801e9fa:	697b      	ldr	r3, [r7, #20]
 801e9fc:	009b      	lsls	r3, r3, #2
 801e9fe:	4413      	add	r3, r2
 801ea00:	681b      	ldr	r3, [r3, #0]
 801ea02:	68b9      	ldr	r1, [r7, #8]
 801ea04:	4618      	mov	r0, r3
 801ea06:	f7e1 fbfb 	bl	8000200 <strcmp>
 801ea0a:	4603      	mov	r3, r0
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d10e      	bne.n	801ea2e <json_object_set_value+0x84>
                value->parent = json_object_get_wrapping_value(object);
 801ea10:	68f8      	ldr	r0, [r7, #12]
 801ea12:	f7ff fc65 	bl	801e2e0 <json_object_get_wrapping_value>
 801ea16:	4602      	mov	r2, r0
 801ea18:	687b      	ldr	r3, [r7, #4]
 801ea1a:	601a      	str	r2, [r3, #0]
                object->values[i] = value;
 801ea1c:	68fb      	ldr	r3, [r7, #12]
 801ea1e:	689a      	ldr	r2, [r3, #8]
 801ea20:	697b      	ldr	r3, [r7, #20]
 801ea22:	009b      	lsls	r3, r3, #2
 801ea24:	4413      	add	r3, r2
 801ea26:	687a      	ldr	r2, [r7, #4]
 801ea28:	601a      	str	r2, [r3, #0]
                return JSONSuccess;
 801ea2a:	2300      	movs	r3, #0
 801ea2c:	e00f      	b.n	801ea4e <json_object_set_value+0xa4>
        for (i = 0; i < json_object_get_count(object); i++) {
 801ea2e:	697b      	ldr	r3, [r7, #20]
 801ea30:	3301      	adds	r3, #1
 801ea32:	617b      	str	r3, [r7, #20]
 801ea34:	68f8      	ldr	r0, [r7, #12]
 801ea36:	f7ff fc27 	bl	801e288 <json_object_get_count>
 801ea3a:	4602      	mov	r2, r0
 801ea3c:	697b      	ldr	r3, [r7, #20]
 801ea3e:	4293      	cmp	r3, r2
 801ea40:	d3d9      	bcc.n	801e9f6 <json_object_set_value+0x4c>
            }
        }
    }
    /* add new key value pair */
    return json_object_add(object, name, value);
 801ea42:	687a      	ldr	r2, [r7, #4]
 801ea44:	68b9      	ldr	r1, [r7, #8]
 801ea46:	68f8      	ldr	r0, [r7, #12]
 801ea48:	f7fd fb08 	bl	801c05c <json_object_add>
 801ea4c:	4603      	mov	r3, r0
}
 801ea4e:	4618      	mov	r0, r3
 801ea50:	3718      	adds	r7, #24
 801ea52:	46bd      	mov	sp, r7
 801ea54:	bd80      	pop	{r7, pc}

0801ea56 <json_object_dotset_value>:

JSON_Status json_object_set_null(JSON_Object *object, const char *name) {
    return json_object_set_value(object, name, json_value_init_null());
}

JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801ea56:	b580      	push	{r7, lr}
 801ea58:	b08c      	sub	sp, #48	; 0x30
 801ea5a:	af00      	add	r7, sp, #0
 801ea5c:	60f8      	str	r0, [r7, #12]
 801ea5e:	60b9      	str	r1, [r7, #8]
 801ea60:	607a      	str	r2, [r7, #4]
    const char *dot_pos = NULL;
 801ea62:	2300      	movs	r3, #0
 801ea64:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Value *temp_value = NULL, *new_value = NULL;
 801ea66:	2300      	movs	r3, #0
 801ea68:	62bb      	str	r3, [r7, #40]	; 0x28
 801ea6a:	2300      	movs	r3, #0
 801ea6c:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Object *temp_object = NULL, *new_object = NULL;
 801ea6e:	2300      	movs	r3, #0
 801ea70:	623b      	str	r3, [r7, #32]
 801ea72:	2300      	movs	r3, #0
 801ea74:	61fb      	str	r3, [r7, #28]
    JSON_Status status = JSONFailure;
 801ea76:	f04f 33ff 	mov.w	r3, #4294967295
 801ea7a:	61bb      	str	r3, [r7, #24]
    size_t name_len = 0;
 801ea7c:	2300      	movs	r3, #0
 801ea7e:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801ea80:	68fb      	ldr	r3, [r7, #12]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d005      	beq.n	801ea92 <json_object_dotset_value+0x3c>
 801ea86:	68bb      	ldr	r3, [r7, #8]
 801ea88:	2b00      	cmp	r3, #0
 801ea8a:	d002      	beq.n	801ea92 <json_object_dotset_value+0x3c>
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	d102      	bne.n	801ea98 <json_object_dotset_value+0x42>
        return JSONFailure;
 801ea92:	f04f 33ff 	mov.w	r3, #4294967295
 801ea96:	e067      	b.n	801eb68 <json_object_dotset_value+0x112>
    }
    dot_pos = strchr(name, '.');
 801ea98:	212e      	movs	r1, #46	; 0x2e
 801ea9a:	68b8      	ldr	r0, [r7, #8]
 801ea9c:	f000 fd8f 	bl	801f5be <strchr>
 801eaa0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (dot_pos == NULL) {
 801eaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	d106      	bne.n	801eab6 <json_object_dotset_value+0x60>
        return json_object_set_value(object, name, value);
 801eaa8:	687a      	ldr	r2, [r7, #4]
 801eaaa:	68b9      	ldr	r1, [r7, #8]
 801eaac:	68f8      	ldr	r0, [r7, #12]
 801eaae:	f7ff ff7c 	bl	801e9aa <json_object_set_value>
 801eab2:	4603      	mov	r3, r0
 801eab4:	e058      	b.n	801eb68 <json_object_dotset_value+0x112>
    }
    name_len = dot_pos - name;
 801eab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801eab8:	68bb      	ldr	r3, [r7, #8]
 801eaba:	1ad3      	subs	r3, r2, r3
 801eabc:	617b      	str	r3, [r7, #20]
    temp_value = json_object_getn_value(object, name, name_len);
 801eabe:	697a      	ldr	r2, [r7, #20]
 801eac0:	68b9      	ldr	r1, [r7, #8]
 801eac2:	68f8      	ldr	r0, [r7, #12]
 801eac4:	f7fd fbc6 	bl	801c254 <json_object_getn_value>
 801eac8:	62b8      	str	r0, [r7, #40]	; 0x28
    if (temp_value) {
 801eaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eacc:	2b00      	cmp	r3, #0
 801eace:	d015      	beq.n	801eafc <json_object_dotset_value+0xa6>
        /* Don't overwrite existing non-object (unlike json_object_set_value, but it shouldn't be changed at this point) */
        if (json_value_get_type(temp_value) != JSONObject) {
 801ead0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ead2:	f7ff fc6e 	bl	801e3b2 <json_value_get_type>
 801ead6:	4603      	mov	r3, r0
 801ead8:	2b04      	cmp	r3, #4
 801eada:	d002      	beq.n	801eae2 <json_object_dotset_value+0x8c>
            return JSONFailure;
 801eadc:	f04f 33ff 	mov.w	r3, #4294967295
 801eae0:	e042      	b.n	801eb68 <json_object_dotset_value+0x112>
        }
        temp_object = json_value_get_object(temp_value);
 801eae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eae4:	f7ff fc77 	bl	801e3d6 <json_value_get_object>
 801eae8:	6238      	str	r0, [r7, #32]
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 801eaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eaec:	3301      	adds	r3, #1
 801eaee:	687a      	ldr	r2, [r7, #4]
 801eaf0:	4619      	mov	r1, r3
 801eaf2:	6a38      	ldr	r0, [r7, #32]
 801eaf4:	f7ff ffaf 	bl	801ea56 <json_object_dotset_value>
 801eaf8:	4603      	mov	r3, r0
 801eafa:	e035      	b.n	801eb68 <json_object_dotset_value+0x112>
    }
    new_value = json_value_init_object();
 801eafc:	f7ff fcfe 	bl	801e4fc <json_value_init_object>
 801eb00:	6278      	str	r0, [r7, #36]	; 0x24
    if (new_value == NULL) {
 801eb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	d102      	bne.n	801eb0e <json_object_dotset_value+0xb8>
        return JSONFailure;
 801eb08:	f04f 33ff 	mov.w	r3, #4294967295
 801eb0c:	e02c      	b.n	801eb68 <json_object_dotset_value+0x112>
    }
    new_object = json_value_get_object(new_value);
 801eb0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb10:	f7ff fc61 	bl	801e3d6 <json_value_get_object>
 801eb14:	61f8      	str	r0, [r7, #28]
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 801eb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb18:	3301      	adds	r3, #1
 801eb1a:	687a      	ldr	r2, [r7, #4]
 801eb1c:	4619      	mov	r1, r3
 801eb1e:	69f8      	ldr	r0, [r7, #28]
 801eb20:	f7ff ff99 	bl	801ea56 <json_object_dotset_value>
 801eb24:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801eb26:	69bb      	ldr	r3, [r7, #24]
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	d005      	beq.n	801eb38 <json_object_dotset_value+0xe2>
        json_value_free(new_value);
 801eb2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb2e:	f7ff fcb7 	bl	801e4a0 <json_value_free>
        return JSONFailure;
 801eb32:	f04f 33ff 	mov.w	r3, #4294967295
 801eb36:	e017      	b.n	801eb68 <json_object_dotset_value+0x112>
    }
    status = json_object_addn(object, name, name_len, new_value);
 801eb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb3a:	697a      	ldr	r2, [r7, #20]
 801eb3c:	68b9      	ldr	r1, [r7, #8]
 801eb3e:	68f8      	ldr	r0, [r7, #12]
 801eb40:	f7fd faa6 	bl	801c090 <json_object_addn>
 801eb44:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801eb46:	69bb      	ldr	r3, [r7, #24]
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d00c      	beq.n	801eb66 <json_object_dotset_value+0x110>
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 801eb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb4e:	3301      	adds	r3, #1
 801eb50:	2200      	movs	r2, #0
 801eb52:	4619      	mov	r1, r3
 801eb54:	69f8      	ldr	r0, [r7, #28]
 801eb56:	f7fd fc31 	bl	801c3bc <json_object_dotremove_internal>
        json_value_free(new_value);
 801eb5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb5c:	f7ff fca0 	bl	801e4a0 <json_value_free>
        return JSONFailure;
 801eb60:	f04f 33ff 	mov.w	r3, #4294967295
 801eb64:	e000      	b.n	801eb68 <json_object_dotset_value+0x112>
    }
    return JSONSuccess;
 801eb66:	2300      	movs	r3, #0
}
 801eb68:	4618      	mov	r0, r3
 801eb6a:	3730      	adds	r7, #48	; 0x30
 801eb6c:	46bd      	mov	sp, r7
 801eb6e:	bd80      	pop	{r7, pc}

0801eb70 <json_object_dotset_string>:

JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 801eb70:	b580      	push	{r7, lr}
 801eb72:	b086      	sub	sp, #24
 801eb74:	af00      	add	r7, sp, #0
 801eb76:	60f8      	str	r0, [r7, #12]
 801eb78:	60b9      	str	r1, [r7, #8]
 801eb7a:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_string(string);
 801eb7c:	6878      	ldr	r0, [r7, #4]
 801eb7e:	f7ff fd15 	bl	801e5ac <json_value_init_string>
 801eb82:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801eb84:	697b      	ldr	r3, [r7, #20]
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d102      	bne.n	801eb90 <json_object_dotset_string+0x20>
        return JSONFailure;
 801eb8a:	f04f 33ff 	mov.w	r3, #4294967295
 801eb8e:	e00f      	b.n	801ebb0 <json_object_dotset_string+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801eb90:	697a      	ldr	r2, [r7, #20]
 801eb92:	68b9      	ldr	r1, [r7, #8]
 801eb94:	68f8      	ldr	r0, [r7, #12]
 801eb96:	f7ff ff5e 	bl	801ea56 <json_object_dotset_value>
 801eb9a:	4603      	mov	r3, r0
 801eb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eba0:	d105      	bne.n	801ebae <json_object_dotset_string+0x3e>
        json_value_free(value);
 801eba2:	6978      	ldr	r0, [r7, #20]
 801eba4:	f7ff fc7c 	bl	801e4a0 <json_value_free>
        return JSONFailure;
 801eba8:	f04f 33ff 	mov.w	r3, #4294967295
 801ebac:	e000      	b.n	801ebb0 <json_object_dotset_string+0x40>
    }
    return JSONSuccess;
 801ebae:	2300      	movs	r3, #0
}
 801ebb0:	4618      	mov	r0, r3
 801ebb2:	3718      	adds	r7, #24
 801ebb4:	46bd      	mov	sp, r7
 801ebb6:	bd80      	pop	{r7, pc}

0801ebb8 <json_object_dotset_number>:

JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {
 801ebb8:	b580      	push	{r7, lr}
 801ebba:	b086      	sub	sp, #24
 801ebbc:	af00      	add	r7, sp, #0
 801ebbe:	60f8      	str	r0, [r7, #12]
 801ebc0:	60b9      	str	r1, [r7, #8]
 801ebc2:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801ebc6:	ed97 0b00 	vldr	d0, [r7]
 801ebca:	f7ff fd25 	bl	801e618 <json_value_init_number>
 801ebce:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801ebd0:	697b      	ldr	r3, [r7, #20]
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	d102      	bne.n	801ebdc <json_object_dotset_number+0x24>
        return JSONFailure;
 801ebd6:	f04f 33ff 	mov.w	r3, #4294967295
 801ebda:	e00f      	b.n	801ebfc <json_object_dotset_number+0x44>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801ebdc:	697a      	ldr	r2, [r7, #20]
 801ebde:	68b9      	ldr	r1, [r7, #8]
 801ebe0:	68f8      	ldr	r0, [r7, #12]
 801ebe2:	f7ff ff38 	bl	801ea56 <json_object_dotset_value>
 801ebe6:	4603      	mov	r3, r0
 801ebe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ebec:	d105      	bne.n	801ebfa <json_object_dotset_number+0x42>
        json_value_free(value);
 801ebee:	6978      	ldr	r0, [r7, #20]
 801ebf0:	f7ff fc56 	bl	801e4a0 <json_value_free>
        return JSONFailure;
 801ebf4:	f04f 33ff 	mov.w	r3, #4294967295
 801ebf8:	e000      	b.n	801ebfc <json_object_dotset_number+0x44>
    }
    return JSONSuccess;
 801ebfa:	2300      	movs	r3, #0
}
 801ebfc:	4618      	mov	r0, r3
 801ebfe:	3718      	adds	r7, #24
 801ec00:	46bd      	mov	sp, r7
 801ec02:	bd80      	pop	{r7, pc}

0801ec04 <json_object_dotset_boolean>:

JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {
 801ec04:	b580      	push	{r7, lr}
 801ec06:	b086      	sub	sp, #24
 801ec08:	af00      	add	r7, sp, #0
 801ec0a:	60f8      	str	r0, [r7, #12]
 801ec0c:	60b9      	str	r1, [r7, #8]
 801ec0e:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_boolean(boolean);
 801ec10:	6878      	ldr	r0, [r7, #4]
 801ec12:	f7ff fd53 	bl	801e6bc <json_value_init_boolean>
 801ec16:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801ec18:	697b      	ldr	r3, [r7, #20]
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	d102      	bne.n	801ec24 <json_object_dotset_boolean+0x20>
        return JSONFailure;
 801ec1e:	f04f 33ff 	mov.w	r3, #4294967295
 801ec22:	e00f      	b.n	801ec44 <json_object_dotset_boolean+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801ec24:	697a      	ldr	r2, [r7, #20]
 801ec26:	68b9      	ldr	r1, [r7, #8]
 801ec28:	68f8      	ldr	r0, [r7, #12]
 801ec2a:	f7ff ff14 	bl	801ea56 <json_object_dotset_value>
 801ec2e:	4603      	mov	r3, r0
 801ec30:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ec34:	d105      	bne.n	801ec42 <json_object_dotset_boolean+0x3e>
        json_value_free(value);
 801ec36:	6978      	ldr	r0, [r7, #20]
 801ec38:	f7ff fc32 	bl	801e4a0 <json_value_free>
        return JSONFailure;
 801ec3c:	f04f 33ff 	mov.w	r3, #4294967295
 801ec40:	e000      	b.n	801ec44 <json_object_dotset_boolean+0x40>
    }
    return JSONSuccess;
 801ec42:	2300      	movs	r3, #0
}
 801ec44:	4618      	mov	r0, r3
 801ec46:	3718      	adds	r7, #24
 801ec48:	46bd      	mov	sp, r7
 801ec4a:	bd80      	pop	{r7, pc}

0801ec4c <json_set_allocation_functions>:

int json_boolean(const JSON_Value *value) {
    return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {
 801ec4c:	b480      	push	{r7}
 801ec4e:	b083      	sub	sp, #12
 801ec50:	af00      	add	r7, sp, #0
 801ec52:	6078      	str	r0, [r7, #4]
 801ec54:	6039      	str	r1, [r7, #0]
    parson_malloc = malloc_fun;
 801ec56:	4a06      	ldr	r2, [pc, #24]	; (801ec70 <json_set_allocation_functions+0x24>)
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	6013      	str	r3, [r2, #0]
    parson_free = free_fun;
 801ec5c:	4a05      	ldr	r2, [pc, #20]	; (801ec74 <json_set_allocation_functions+0x28>)
 801ec5e:	683b      	ldr	r3, [r7, #0]
 801ec60:	6013      	str	r3, [r2, #0]
}
 801ec62:	bf00      	nop
 801ec64:	370c      	adds	r7, #12
 801ec66:	46bd      	mov	sp, r7
 801ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec6c:	4770      	bx	lr
 801ec6e:	bf00      	nop
 801ec70:	200002b0 	.word	0x200002b0
 801ec74:	200002b4 	.word	0x200002b4

0801ec78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801ec78:	480d      	ldr	r0, [pc, #52]	; (801ecb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801ec7a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 801ec7c:	f7e6 ffe6 	bl	8005c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801ec80:	480c      	ldr	r0, [pc, #48]	; (801ecb4 <LoopForever+0x6>)
  ldr r1, =_edata
 801ec82:	490d      	ldr	r1, [pc, #52]	; (801ecb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 801ec84:	4a0d      	ldr	r2, [pc, #52]	; (801ecbc <LoopForever+0xe>)
  movs r3, #0
 801ec86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801ec88:	e002      	b.n	801ec90 <LoopCopyDataInit>

0801ec8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801ec8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801ec8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801ec8e:	3304      	adds	r3, #4

0801ec90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801ec90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801ec92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801ec94:	d3f9      	bcc.n	801ec8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801ec96:	4a0a      	ldr	r2, [pc, #40]	; (801ecc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 801ec98:	4c0a      	ldr	r4, [pc, #40]	; (801ecc4 <LoopForever+0x16>)
  movs r3, #0
 801ec9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801ec9c:	e001      	b.n	801eca2 <LoopFillZerobss>

0801ec9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801ec9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801eca0:	3204      	adds	r2, #4

0801eca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801eca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801eca4:	d3fb      	bcc.n	801ec9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 801eca6:	f000 fa91 	bl	801f1cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801ecaa:	f7e4 fef1 	bl	8003a90 <main>

0801ecae <LoopForever>:

LoopForever:
    b LoopForever
 801ecae:	e7fe      	b.n	801ecae <LoopForever>
  ldr   r0, =_estack
 801ecb0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 801ecb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801ecb8:	2000048c 	.word	0x2000048c
  ldr r2, =_sidata
 801ecbc:	08023164 	.word	0x08023164
  ldr r2, =_sbss
 801ecc0:	20000490 	.word	0x20000490
  ldr r4, =_ebss
 801ecc4:	2001d470 	.word	0x2001d470

0801ecc8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 801ecc8:	e7fe      	b.n	801ecc8 <ADC1_IRQHandler>
	...

0801eccc <_sbrk>:




caddr_t _sbrk(int incr)
{
 801eccc:	b580      	push	{r7, lr}
 801ecce:	b084      	sub	sp, #16
 801ecd0:	af00      	add	r7, sp, #0
 801ecd2:	6078      	str	r0, [r7, #4]
	char *prev_heap_end;
#ifdef FreeRTOS
	char *min_stack_ptr;
#endif

	if (heap_end == 0)
 801ecd4:	4b15      	ldr	r3, [pc, #84]	; (801ed2c <_sbrk+0x60>)
 801ecd6:	681b      	ldr	r3, [r3, #0]
 801ecd8:	2b00      	cmp	r3, #0
 801ecda:	d102      	bne.n	801ece2 <_sbrk+0x16>
		heap_end = &end;
 801ecdc:	4b13      	ldr	r3, [pc, #76]	; (801ed2c <_sbrk+0x60>)
 801ecde:	4a14      	ldr	r2, [pc, #80]	; (801ed30 <_sbrk+0x64>)
 801ece0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801ece2:	4b12      	ldr	r3, [pc, #72]	; (801ed2c <_sbrk+0x60>)
 801ece4:	681b      	ldr	r3, [r3, #0]
 801ece6:	60fb      	str	r3, [r7, #12]

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 801ece8:	4b12      	ldr	r3, [pc, #72]	; (801ed34 <_sbrk+0x68>)
 801ecea:	681b      	ldr	r3, [r3, #0]
 801ecec:	681b      	ldr	r3, [r3, #0]
 801ecee:	60bb      	str	r3, [r7, #8]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 801ecf0:	68bb      	ldr	r3, [r7, #8]
 801ecf2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 801ecf6:	60bb      	str	r3, [r7, #8]

	if (heap_end + incr > min_stack_ptr)
 801ecf8:	4b0c      	ldr	r3, [pc, #48]	; (801ed2c <_sbrk+0x60>)
 801ecfa:	681a      	ldr	r2, [r3, #0]
 801ecfc:	687b      	ldr	r3, [r7, #4]
 801ecfe:	4413      	add	r3, r2
 801ed00:	68ba      	ldr	r2, [r7, #8]
 801ed02:	429a      	cmp	r2, r3
 801ed04:	d207      	bcs.n	801ed16 <_sbrk+0x4a>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801ed06:	f000 f8a3 	bl	801ee50 <__errno>
 801ed0a:	4603      	mov	r3, r0
 801ed0c:	220c      	movs	r2, #12
 801ed0e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 801ed10:	f04f 33ff 	mov.w	r3, #4294967295
 801ed14:	e006      	b.n	801ed24 <_sbrk+0x58>
	}

	heap_end += incr;
 801ed16:	4b05      	ldr	r3, [pc, #20]	; (801ed2c <_sbrk+0x60>)
 801ed18:	681a      	ldr	r2, [r3, #0]
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	4413      	add	r3, r2
 801ed1e:	4a03      	ldr	r2, [pc, #12]	; (801ed2c <_sbrk+0x60>)
 801ed20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801ed22:	68fb      	ldr	r3, [r7, #12]
}
 801ed24:	4618      	mov	r0, r3
 801ed26:	3710      	adds	r7, #16
 801ed28:	46bd      	mov	sp, r7
 801ed2a:	bd80      	pop	{r7, pc}
 801ed2c:	20010250 	.word	0x20010250
 801ed30:	2001d470 	.word	0x2001d470
 801ed34:	e000ed08 	.word	0xe000ed08

0801ed38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801ed38:	b480      	push	{r7}
 801ed3a:	af00      	add	r7, sp, #0
	return 1;
 801ed3c:	2301      	movs	r3, #1
}
 801ed3e:	4618      	mov	r0, r3
 801ed40:	46bd      	mov	sp, r7
 801ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed46:	4770      	bx	lr

0801ed48 <_kill>:

int _kill(int pid, int sig)
{
 801ed48:	b580      	push	{r7, lr}
 801ed4a:	b082      	sub	sp, #8
 801ed4c:	af00      	add	r7, sp, #0
 801ed4e:	6078      	str	r0, [r7, #4]
 801ed50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801ed52:	f000 f87d 	bl	801ee50 <__errno>
 801ed56:	4603      	mov	r3, r0
 801ed58:	2216      	movs	r2, #22
 801ed5a:	601a      	str	r2, [r3, #0]
	return -1;
 801ed5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ed60:	4618      	mov	r0, r3
 801ed62:	3708      	adds	r7, #8
 801ed64:	46bd      	mov	sp, r7
 801ed66:	bd80      	pop	{r7, pc}

0801ed68 <_exit>:

void _exit (int status)
{
 801ed68:	b580      	push	{r7, lr}
 801ed6a:	b082      	sub	sp, #8
 801ed6c:	af00      	add	r7, sp, #0
 801ed6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801ed70:	f04f 31ff 	mov.w	r1, #4294967295
 801ed74:	6878      	ldr	r0, [r7, #4]
 801ed76:	f7ff ffe7 	bl	801ed48 <_kill>
	while (1) {}
 801ed7a:	e7fe      	b.n	801ed7a <_exit+0x12>

0801ed7c <_write>:
}

int _write(int file, char *ptr, int len)
{
 801ed7c:	b580      	push	{r7, lr}
 801ed7e:	b086      	sub	sp, #24
 801ed80:	af00      	add	r7, sp, #0
 801ed82:	60f8      	str	r0, [r7, #12]
 801ed84:	60b9      	str	r1, [r7, #8]
 801ed86:	607a      	str	r2, [r7, #4]
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801ed88:	2300      	movs	r3, #0
 801ed8a:	617b      	str	r3, [r7, #20]
 801ed8c:	e009      	b.n	801eda2 <_write+0x26>
		{
		   __io_putchar( *ptr++ );
 801ed8e:	68bb      	ldr	r3, [r7, #8]
 801ed90:	1c5a      	adds	r2, r3, #1
 801ed92:	60ba      	str	r2, [r7, #8]
 801ed94:	781b      	ldrb	r3, [r3, #0]
 801ed96:	4618      	mov	r0, r3
 801ed98:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801ed9c:	697b      	ldr	r3, [r7, #20]
 801ed9e:	3301      	adds	r3, #1
 801eda0:	617b      	str	r3, [r7, #20]
 801eda2:	697a      	ldr	r2, [r7, #20]
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	429a      	cmp	r2, r3
 801eda8:	dbf1      	blt.n	801ed8e <_write+0x12>
		}
	return len;
 801edaa:	687b      	ldr	r3, [r7, #4]
}
 801edac:	4618      	mov	r0, r3
 801edae:	3718      	adds	r7, #24
 801edb0:	46bd      	mov	sp, r7
 801edb2:	bd80      	pop	{r7, pc}

0801edb4 <_close>:

int _close(int file)
{
 801edb4:	b480      	push	{r7}
 801edb6:	b083      	sub	sp, #12
 801edb8:	af00      	add	r7, sp, #0
 801edba:	6078      	str	r0, [r7, #4]
	return -1;
 801edbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801edc0:	4618      	mov	r0, r3
 801edc2:	370c      	adds	r7, #12
 801edc4:	46bd      	mov	sp, r7
 801edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edca:	4770      	bx	lr

0801edcc <_fstat>:

int _fstat(int file, struct stat *st)
{
 801edcc:	b480      	push	{r7}
 801edce:	b083      	sub	sp, #12
 801edd0:	af00      	add	r7, sp, #0
 801edd2:	6078      	str	r0, [r7, #4]
 801edd4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801edd6:	683b      	ldr	r3, [r7, #0]
 801edd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801eddc:	605a      	str	r2, [r3, #4]
	return 0;
 801edde:	2300      	movs	r3, #0
}
 801ede0:	4618      	mov	r0, r3
 801ede2:	370c      	adds	r7, #12
 801ede4:	46bd      	mov	sp, r7
 801ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edea:	4770      	bx	lr

0801edec <_isatty>:

int _isatty(int file)
{
 801edec:	b480      	push	{r7}
 801edee:	b083      	sub	sp, #12
 801edf0:	af00      	add	r7, sp, #0
 801edf2:	6078      	str	r0, [r7, #4]
	return 1;
 801edf4:	2301      	movs	r3, #1
}
 801edf6:	4618      	mov	r0, r3
 801edf8:	370c      	adds	r7, #12
 801edfa:	46bd      	mov	sp, r7
 801edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee00:	4770      	bx	lr

0801ee02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801ee02:	b480      	push	{r7}
 801ee04:	b085      	sub	sp, #20
 801ee06:	af00      	add	r7, sp, #0
 801ee08:	60f8      	str	r0, [r7, #12]
 801ee0a:	60b9      	str	r1, [r7, #8]
 801ee0c:	607a      	str	r2, [r7, #4]
	return 0;
 801ee0e:	2300      	movs	r3, #0
}
 801ee10:	4618      	mov	r0, r3
 801ee12:	3714      	adds	r7, #20
 801ee14:	46bd      	mov	sp, r7
 801ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee1a:	4770      	bx	lr

0801ee1c <_read>:

int _read(int file, char *ptr, int len)
{
 801ee1c:	b580      	push	{r7, lr}
 801ee1e:	b084      	sub	sp, #16
 801ee20:	af00      	add	r7, sp, #0
 801ee22:	60f8      	str	r0, [r7, #12]
 801ee24:	60b9      	str	r1, [r7, #8]
 801ee26:	607a      	str	r2, [r7, #4]
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 801ee28:	f3af 8000 	nop.w
 801ee2c:	4603      	mov	r3, r0
 801ee2e:	b2da      	uxtb	r2, r3
 801ee30:	68bb      	ldr	r3, [r7, #8]
 801ee32:	701a      	strb	r2, [r3, #0]
	return 1;
 801ee34:	2301      	movs	r3, #1
}
 801ee36:	4618      	mov	r0, r3
 801ee38:	3710      	adds	r7, #16
 801ee3a:	46bd      	mov	sp, r7
 801ee3c:	bd80      	pop	{r7, pc}
	...

0801ee40 <calloc>:
 801ee40:	4b02      	ldr	r3, [pc, #8]	; (801ee4c <calloc+0xc>)
 801ee42:	460a      	mov	r2, r1
 801ee44:	4601      	mov	r1, r0
 801ee46:	6818      	ldr	r0, [r3, #0]
 801ee48:	f000 ba8c 	b.w	801f364 <_calloc_r>
 801ee4c:	200002b8 	.word	0x200002b8

0801ee50 <__errno>:
 801ee50:	4b01      	ldr	r3, [pc, #4]	; (801ee58 <__errno+0x8>)
 801ee52:	6818      	ldr	r0, [r3, #0]
 801ee54:	4770      	bx	lr
 801ee56:	bf00      	nop
 801ee58:	200002b8 	.word	0x200002b8

0801ee5c <__sflush_r>:
 801ee5c:	898a      	ldrh	r2, [r1, #12]
 801ee5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee62:	4605      	mov	r5, r0
 801ee64:	0710      	lsls	r0, r2, #28
 801ee66:	460c      	mov	r4, r1
 801ee68:	d458      	bmi.n	801ef1c <__sflush_r+0xc0>
 801ee6a:	684b      	ldr	r3, [r1, #4]
 801ee6c:	2b00      	cmp	r3, #0
 801ee6e:	dc05      	bgt.n	801ee7c <__sflush_r+0x20>
 801ee70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	dc02      	bgt.n	801ee7c <__sflush_r+0x20>
 801ee76:	2000      	movs	r0, #0
 801ee78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ee7e:	2e00      	cmp	r6, #0
 801ee80:	d0f9      	beq.n	801ee76 <__sflush_r+0x1a>
 801ee82:	2300      	movs	r3, #0
 801ee84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ee88:	682f      	ldr	r7, [r5, #0]
 801ee8a:	602b      	str	r3, [r5, #0]
 801ee8c:	d032      	beq.n	801eef4 <__sflush_r+0x98>
 801ee8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ee90:	89a3      	ldrh	r3, [r4, #12]
 801ee92:	075a      	lsls	r2, r3, #29
 801ee94:	d505      	bpl.n	801eea2 <__sflush_r+0x46>
 801ee96:	6863      	ldr	r3, [r4, #4]
 801ee98:	1ac0      	subs	r0, r0, r3
 801ee9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ee9c:	b10b      	cbz	r3, 801eea2 <__sflush_r+0x46>
 801ee9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eea0:	1ac0      	subs	r0, r0, r3
 801eea2:	2300      	movs	r3, #0
 801eea4:	4602      	mov	r2, r0
 801eea6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eea8:	6a21      	ldr	r1, [r4, #32]
 801eeaa:	4628      	mov	r0, r5
 801eeac:	47b0      	blx	r6
 801eeae:	1c43      	adds	r3, r0, #1
 801eeb0:	89a3      	ldrh	r3, [r4, #12]
 801eeb2:	d106      	bne.n	801eec2 <__sflush_r+0x66>
 801eeb4:	6829      	ldr	r1, [r5, #0]
 801eeb6:	291d      	cmp	r1, #29
 801eeb8:	d82c      	bhi.n	801ef14 <__sflush_r+0xb8>
 801eeba:	4a2a      	ldr	r2, [pc, #168]	; (801ef64 <__sflush_r+0x108>)
 801eebc:	40ca      	lsrs	r2, r1
 801eebe:	07d6      	lsls	r6, r2, #31
 801eec0:	d528      	bpl.n	801ef14 <__sflush_r+0xb8>
 801eec2:	2200      	movs	r2, #0
 801eec4:	6062      	str	r2, [r4, #4]
 801eec6:	04d9      	lsls	r1, r3, #19
 801eec8:	6922      	ldr	r2, [r4, #16]
 801eeca:	6022      	str	r2, [r4, #0]
 801eecc:	d504      	bpl.n	801eed8 <__sflush_r+0x7c>
 801eece:	1c42      	adds	r2, r0, #1
 801eed0:	d101      	bne.n	801eed6 <__sflush_r+0x7a>
 801eed2:	682b      	ldr	r3, [r5, #0]
 801eed4:	b903      	cbnz	r3, 801eed8 <__sflush_r+0x7c>
 801eed6:	6560      	str	r0, [r4, #84]	; 0x54
 801eed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801eeda:	602f      	str	r7, [r5, #0]
 801eedc:	2900      	cmp	r1, #0
 801eede:	d0ca      	beq.n	801ee76 <__sflush_r+0x1a>
 801eee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eee4:	4299      	cmp	r1, r3
 801eee6:	d002      	beq.n	801eeee <__sflush_r+0x92>
 801eee8:	4628      	mov	r0, r5
 801eeea:	f000 fa4b 	bl	801f384 <_free_r>
 801eeee:	2000      	movs	r0, #0
 801eef0:	6360      	str	r0, [r4, #52]	; 0x34
 801eef2:	e7c1      	b.n	801ee78 <__sflush_r+0x1c>
 801eef4:	6a21      	ldr	r1, [r4, #32]
 801eef6:	2301      	movs	r3, #1
 801eef8:	4628      	mov	r0, r5
 801eefa:	47b0      	blx	r6
 801eefc:	1c41      	adds	r1, r0, #1
 801eefe:	d1c7      	bne.n	801ee90 <__sflush_r+0x34>
 801ef00:	682b      	ldr	r3, [r5, #0]
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	d0c4      	beq.n	801ee90 <__sflush_r+0x34>
 801ef06:	2b1d      	cmp	r3, #29
 801ef08:	d001      	beq.n	801ef0e <__sflush_r+0xb2>
 801ef0a:	2b16      	cmp	r3, #22
 801ef0c:	d101      	bne.n	801ef12 <__sflush_r+0xb6>
 801ef0e:	602f      	str	r7, [r5, #0]
 801ef10:	e7b1      	b.n	801ee76 <__sflush_r+0x1a>
 801ef12:	89a3      	ldrh	r3, [r4, #12]
 801ef14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef18:	81a3      	strh	r3, [r4, #12]
 801ef1a:	e7ad      	b.n	801ee78 <__sflush_r+0x1c>
 801ef1c:	690f      	ldr	r7, [r1, #16]
 801ef1e:	2f00      	cmp	r7, #0
 801ef20:	d0a9      	beq.n	801ee76 <__sflush_r+0x1a>
 801ef22:	0793      	lsls	r3, r2, #30
 801ef24:	680e      	ldr	r6, [r1, #0]
 801ef26:	bf08      	it	eq
 801ef28:	694b      	ldreq	r3, [r1, #20]
 801ef2a:	600f      	str	r7, [r1, #0]
 801ef2c:	bf18      	it	ne
 801ef2e:	2300      	movne	r3, #0
 801ef30:	eba6 0807 	sub.w	r8, r6, r7
 801ef34:	608b      	str	r3, [r1, #8]
 801ef36:	f1b8 0f00 	cmp.w	r8, #0
 801ef3a:	dd9c      	ble.n	801ee76 <__sflush_r+0x1a>
 801ef3c:	6a21      	ldr	r1, [r4, #32]
 801ef3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ef40:	4643      	mov	r3, r8
 801ef42:	463a      	mov	r2, r7
 801ef44:	4628      	mov	r0, r5
 801ef46:	47b0      	blx	r6
 801ef48:	2800      	cmp	r0, #0
 801ef4a:	dc06      	bgt.n	801ef5a <__sflush_r+0xfe>
 801ef4c:	89a3      	ldrh	r3, [r4, #12]
 801ef4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ef52:	81a3      	strh	r3, [r4, #12]
 801ef54:	f04f 30ff 	mov.w	r0, #4294967295
 801ef58:	e78e      	b.n	801ee78 <__sflush_r+0x1c>
 801ef5a:	4407      	add	r7, r0
 801ef5c:	eba8 0800 	sub.w	r8, r8, r0
 801ef60:	e7e9      	b.n	801ef36 <__sflush_r+0xda>
 801ef62:	bf00      	nop
 801ef64:	20400001 	.word	0x20400001

0801ef68 <_fflush_r>:
 801ef68:	b538      	push	{r3, r4, r5, lr}
 801ef6a:	690b      	ldr	r3, [r1, #16]
 801ef6c:	4605      	mov	r5, r0
 801ef6e:	460c      	mov	r4, r1
 801ef70:	b913      	cbnz	r3, 801ef78 <_fflush_r+0x10>
 801ef72:	2500      	movs	r5, #0
 801ef74:	4628      	mov	r0, r5
 801ef76:	bd38      	pop	{r3, r4, r5, pc}
 801ef78:	b118      	cbz	r0, 801ef82 <_fflush_r+0x1a>
 801ef7a:	6983      	ldr	r3, [r0, #24]
 801ef7c:	b90b      	cbnz	r3, 801ef82 <_fflush_r+0x1a>
 801ef7e:	f000 f887 	bl	801f090 <__sinit>
 801ef82:	4b14      	ldr	r3, [pc, #80]	; (801efd4 <_fflush_r+0x6c>)
 801ef84:	429c      	cmp	r4, r3
 801ef86:	d11b      	bne.n	801efc0 <_fflush_r+0x58>
 801ef88:	686c      	ldr	r4, [r5, #4]
 801ef8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d0ef      	beq.n	801ef72 <_fflush_r+0xa>
 801ef92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ef94:	07d0      	lsls	r0, r2, #31
 801ef96:	d404      	bmi.n	801efa2 <_fflush_r+0x3a>
 801ef98:	0599      	lsls	r1, r3, #22
 801ef9a:	d402      	bmi.n	801efa2 <_fflush_r+0x3a>
 801ef9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ef9e:	f000 f93a 	bl	801f216 <__retarget_lock_acquire_recursive>
 801efa2:	4628      	mov	r0, r5
 801efa4:	4621      	mov	r1, r4
 801efa6:	f7ff ff59 	bl	801ee5c <__sflush_r>
 801efaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801efac:	07da      	lsls	r2, r3, #31
 801efae:	4605      	mov	r5, r0
 801efb0:	d4e0      	bmi.n	801ef74 <_fflush_r+0xc>
 801efb2:	89a3      	ldrh	r3, [r4, #12]
 801efb4:	059b      	lsls	r3, r3, #22
 801efb6:	d4dd      	bmi.n	801ef74 <_fflush_r+0xc>
 801efb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801efba:	f000 f92d 	bl	801f218 <__retarget_lock_release_recursive>
 801efbe:	e7d9      	b.n	801ef74 <_fflush_r+0xc>
 801efc0:	4b05      	ldr	r3, [pc, #20]	; (801efd8 <_fflush_r+0x70>)
 801efc2:	429c      	cmp	r4, r3
 801efc4:	d101      	bne.n	801efca <_fflush_r+0x62>
 801efc6:	68ac      	ldr	r4, [r5, #8]
 801efc8:	e7df      	b.n	801ef8a <_fflush_r+0x22>
 801efca:	4b04      	ldr	r3, [pc, #16]	; (801efdc <_fflush_r+0x74>)
 801efcc:	429c      	cmp	r4, r3
 801efce:	bf08      	it	eq
 801efd0:	68ec      	ldreq	r4, [r5, #12]
 801efd2:	e7da      	b.n	801ef8a <_fflush_r+0x22>
 801efd4:	08022e48 	.word	0x08022e48
 801efd8:	08022e68 	.word	0x08022e68
 801efdc:	08022e28 	.word	0x08022e28

0801efe0 <std>:
 801efe0:	2300      	movs	r3, #0
 801efe2:	b510      	push	{r4, lr}
 801efe4:	4604      	mov	r4, r0
 801efe6:	e9c0 3300 	strd	r3, r3, [r0]
 801efea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801efee:	6083      	str	r3, [r0, #8]
 801eff0:	8181      	strh	r1, [r0, #12]
 801eff2:	6643      	str	r3, [r0, #100]	; 0x64
 801eff4:	81c2      	strh	r2, [r0, #14]
 801eff6:	6183      	str	r3, [r0, #24]
 801eff8:	4619      	mov	r1, r3
 801effa:	2208      	movs	r2, #8
 801effc:	305c      	adds	r0, #92	; 0x5c
 801effe:	f000 f9a9 	bl	801f354 <memset>
 801f002:	4b05      	ldr	r3, [pc, #20]	; (801f018 <std+0x38>)
 801f004:	6263      	str	r3, [r4, #36]	; 0x24
 801f006:	4b05      	ldr	r3, [pc, #20]	; (801f01c <std+0x3c>)
 801f008:	62a3      	str	r3, [r4, #40]	; 0x28
 801f00a:	4b05      	ldr	r3, [pc, #20]	; (801f020 <std+0x40>)
 801f00c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f00e:	4b05      	ldr	r3, [pc, #20]	; (801f024 <std+0x44>)
 801f010:	6224      	str	r4, [r4, #32]
 801f012:	6323      	str	r3, [r4, #48]	; 0x30
 801f014:	bd10      	pop	{r4, pc}
 801f016:	bf00      	nop
 801f018:	0801f539 	.word	0x0801f539
 801f01c:	0801f55b 	.word	0x0801f55b
 801f020:	0801f593 	.word	0x0801f593
 801f024:	0801f5b7 	.word	0x0801f5b7

0801f028 <_cleanup_r>:
 801f028:	4901      	ldr	r1, [pc, #4]	; (801f030 <_cleanup_r+0x8>)
 801f02a:	f000 b8af 	b.w	801f18c <_fwalk_reent>
 801f02e:	bf00      	nop
 801f030:	0801ef69 	.word	0x0801ef69

0801f034 <__sfmoreglue>:
 801f034:	b570      	push	{r4, r5, r6, lr}
 801f036:	1e4a      	subs	r2, r1, #1
 801f038:	2568      	movs	r5, #104	; 0x68
 801f03a:	4355      	muls	r5, r2
 801f03c:	460e      	mov	r6, r1
 801f03e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f042:	f000 f9ef 	bl	801f424 <_malloc_r>
 801f046:	4604      	mov	r4, r0
 801f048:	b140      	cbz	r0, 801f05c <__sfmoreglue+0x28>
 801f04a:	2100      	movs	r1, #0
 801f04c:	e9c0 1600 	strd	r1, r6, [r0]
 801f050:	300c      	adds	r0, #12
 801f052:	60a0      	str	r0, [r4, #8]
 801f054:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f058:	f000 f97c 	bl	801f354 <memset>
 801f05c:	4620      	mov	r0, r4
 801f05e:	bd70      	pop	{r4, r5, r6, pc}

0801f060 <__sfp_lock_acquire>:
 801f060:	4801      	ldr	r0, [pc, #4]	; (801f068 <__sfp_lock_acquire+0x8>)
 801f062:	f000 b8d8 	b.w	801f216 <__retarget_lock_acquire_recursive>
 801f066:	bf00      	nop
 801f068:	2001d464 	.word	0x2001d464

0801f06c <__sfp_lock_release>:
 801f06c:	4801      	ldr	r0, [pc, #4]	; (801f074 <__sfp_lock_release+0x8>)
 801f06e:	f000 b8d3 	b.w	801f218 <__retarget_lock_release_recursive>
 801f072:	bf00      	nop
 801f074:	2001d464 	.word	0x2001d464

0801f078 <__sinit_lock_acquire>:
 801f078:	4801      	ldr	r0, [pc, #4]	; (801f080 <__sinit_lock_acquire+0x8>)
 801f07a:	f000 b8cc 	b.w	801f216 <__retarget_lock_acquire_recursive>
 801f07e:	bf00      	nop
 801f080:	2001d463 	.word	0x2001d463

0801f084 <__sinit_lock_release>:
 801f084:	4801      	ldr	r0, [pc, #4]	; (801f08c <__sinit_lock_release+0x8>)
 801f086:	f000 b8c7 	b.w	801f218 <__retarget_lock_release_recursive>
 801f08a:	bf00      	nop
 801f08c:	2001d463 	.word	0x2001d463

0801f090 <__sinit>:
 801f090:	b510      	push	{r4, lr}
 801f092:	4604      	mov	r4, r0
 801f094:	f7ff fff0 	bl	801f078 <__sinit_lock_acquire>
 801f098:	69a3      	ldr	r3, [r4, #24]
 801f09a:	b11b      	cbz	r3, 801f0a4 <__sinit+0x14>
 801f09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0a0:	f7ff bff0 	b.w	801f084 <__sinit_lock_release>
 801f0a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f0a8:	6523      	str	r3, [r4, #80]	; 0x50
 801f0aa:	4b13      	ldr	r3, [pc, #76]	; (801f0f8 <__sinit+0x68>)
 801f0ac:	4a13      	ldr	r2, [pc, #76]	; (801f0fc <__sinit+0x6c>)
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	62a2      	str	r2, [r4, #40]	; 0x28
 801f0b2:	42a3      	cmp	r3, r4
 801f0b4:	bf04      	itt	eq
 801f0b6:	2301      	moveq	r3, #1
 801f0b8:	61a3      	streq	r3, [r4, #24]
 801f0ba:	4620      	mov	r0, r4
 801f0bc:	f000 f820 	bl	801f100 <__sfp>
 801f0c0:	6060      	str	r0, [r4, #4]
 801f0c2:	4620      	mov	r0, r4
 801f0c4:	f000 f81c 	bl	801f100 <__sfp>
 801f0c8:	60a0      	str	r0, [r4, #8]
 801f0ca:	4620      	mov	r0, r4
 801f0cc:	f000 f818 	bl	801f100 <__sfp>
 801f0d0:	2200      	movs	r2, #0
 801f0d2:	60e0      	str	r0, [r4, #12]
 801f0d4:	2104      	movs	r1, #4
 801f0d6:	6860      	ldr	r0, [r4, #4]
 801f0d8:	f7ff ff82 	bl	801efe0 <std>
 801f0dc:	68a0      	ldr	r0, [r4, #8]
 801f0de:	2201      	movs	r2, #1
 801f0e0:	2109      	movs	r1, #9
 801f0e2:	f7ff ff7d 	bl	801efe0 <std>
 801f0e6:	68e0      	ldr	r0, [r4, #12]
 801f0e8:	2202      	movs	r2, #2
 801f0ea:	2112      	movs	r1, #18
 801f0ec:	f7ff ff78 	bl	801efe0 <std>
 801f0f0:	2301      	movs	r3, #1
 801f0f2:	61a3      	str	r3, [r4, #24]
 801f0f4:	e7d2      	b.n	801f09c <__sinit+0xc>
 801f0f6:	bf00      	nop
 801f0f8:	08022e88 	.word	0x08022e88
 801f0fc:	0801f029 	.word	0x0801f029

0801f100 <__sfp>:
 801f100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f102:	4607      	mov	r7, r0
 801f104:	f7ff ffac 	bl	801f060 <__sfp_lock_acquire>
 801f108:	4b1e      	ldr	r3, [pc, #120]	; (801f184 <__sfp+0x84>)
 801f10a:	681e      	ldr	r6, [r3, #0]
 801f10c:	69b3      	ldr	r3, [r6, #24]
 801f10e:	b913      	cbnz	r3, 801f116 <__sfp+0x16>
 801f110:	4630      	mov	r0, r6
 801f112:	f7ff ffbd 	bl	801f090 <__sinit>
 801f116:	3648      	adds	r6, #72	; 0x48
 801f118:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f11c:	3b01      	subs	r3, #1
 801f11e:	d503      	bpl.n	801f128 <__sfp+0x28>
 801f120:	6833      	ldr	r3, [r6, #0]
 801f122:	b30b      	cbz	r3, 801f168 <__sfp+0x68>
 801f124:	6836      	ldr	r6, [r6, #0]
 801f126:	e7f7      	b.n	801f118 <__sfp+0x18>
 801f128:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f12c:	b9d5      	cbnz	r5, 801f164 <__sfp+0x64>
 801f12e:	4b16      	ldr	r3, [pc, #88]	; (801f188 <__sfp+0x88>)
 801f130:	60e3      	str	r3, [r4, #12]
 801f132:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f136:	6665      	str	r5, [r4, #100]	; 0x64
 801f138:	f000 f86c 	bl	801f214 <__retarget_lock_init_recursive>
 801f13c:	f7ff ff96 	bl	801f06c <__sfp_lock_release>
 801f140:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f144:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f148:	6025      	str	r5, [r4, #0]
 801f14a:	61a5      	str	r5, [r4, #24]
 801f14c:	2208      	movs	r2, #8
 801f14e:	4629      	mov	r1, r5
 801f150:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f154:	f000 f8fe 	bl	801f354 <memset>
 801f158:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f15c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f160:	4620      	mov	r0, r4
 801f162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f164:	3468      	adds	r4, #104	; 0x68
 801f166:	e7d9      	b.n	801f11c <__sfp+0x1c>
 801f168:	2104      	movs	r1, #4
 801f16a:	4638      	mov	r0, r7
 801f16c:	f7ff ff62 	bl	801f034 <__sfmoreglue>
 801f170:	4604      	mov	r4, r0
 801f172:	6030      	str	r0, [r6, #0]
 801f174:	2800      	cmp	r0, #0
 801f176:	d1d5      	bne.n	801f124 <__sfp+0x24>
 801f178:	f7ff ff78 	bl	801f06c <__sfp_lock_release>
 801f17c:	230c      	movs	r3, #12
 801f17e:	603b      	str	r3, [r7, #0]
 801f180:	e7ee      	b.n	801f160 <__sfp+0x60>
 801f182:	bf00      	nop
 801f184:	08022e88 	.word	0x08022e88
 801f188:	ffff0001 	.word	0xffff0001

0801f18c <_fwalk_reent>:
 801f18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f190:	4606      	mov	r6, r0
 801f192:	4688      	mov	r8, r1
 801f194:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f198:	2700      	movs	r7, #0
 801f19a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f19e:	f1b9 0901 	subs.w	r9, r9, #1
 801f1a2:	d505      	bpl.n	801f1b0 <_fwalk_reent+0x24>
 801f1a4:	6824      	ldr	r4, [r4, #0]
 801f1a6:	2c00      	cmp	r4, #0
 801f1a8:	d1f7      	bne.n	801f19a <_fwalk_reent+0xe>
 801f1aa:	4638      	mov	r0, r7
 801f1ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f1b0:	89ab      	ldrh	r3, [r5, #12]
 801f1b2:	2b01      	cmp	r3, #1
 801f1b4:	d907      	bls.n	801f1c6 <_fwalk_reent+0x3a>
 801f1b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f1ba:	3301      	adds	r3, #1
 801f1bc:	d003      	beq.n	801f1c6 <_fwalk_reent+0x3a>
 801f1be:	4629      	mov	r1, r5
 801f1c0:	4630      	mov	r0, r6
 801f1c2:	47c0      	blx	r8
 801f1c4:	4307      	orrs	r7, r0
 801f1c6:	3568      	adds	r5, #104	; 0x68
 801f1c8:	e7e9      	b.n	801f19e <_fwalk_reent+0x12>
	...

0801f1cc <__libc_init_array>:
 801f1cc:	b570      	push	{r4, r5, r6, lr}
 801f1ce:	4d0d      	ldr	r5, [pc, #52]	; (801f204 <__libc_init_array+0x38>)
 801f1d0:	4c0d      	ldr	r4, [pc, #52]	; (801f208 <__libc_init_array+0x3c>)
 801f1d2:	1b64      	subs	r4, r4, r5
 801f1d4:	10a4      	asrs	r4, r4, #2
 801f1d6:	2600      	movs	r6, #0
 801f1d8:	42a6      	cmp	r6, r4
 801f1da:	d109      	bne.n	801f1f0 <__libc_init_array+0x24>
 801f1dc:	4d0b      	ldr	r5, [pc, #44]	; (801f20c <__libc_init_array+0x40>)
 801f1de:	4c0c      	ldr	r4, [pc, #48]	; (801f210 <__libc_init_array+0x44>)
 801f1e0:	f002 ff5c 	bl	802209c <_init>
 801f1e4:	1b64      	subs	r4, r4, r5
 801f1e6:	10a4      	asrs	r4, r4, #2
 801f1e8:	2600      	movs	r6, #0
 801f1ea:	42a6      	cmp	r6, r4
 801f1ec:	d105      	bne.n	801f1fa <__libc_init_array+0x2e>
 801f1ee:	bd70      	pop	{r4, r5, r6, pc}
 801f1f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801f1f4:	4798      	blx	r3
 801f1f6:	3601      	adds	r6, #1
 801f1f8:	e7ee      	b.n	801f1d8 <__libc_init_array+0xc>
 801f1fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801f1fe:	4798      	blx	r3
 801f200:	3601      	adds	r6, #1
 801f202:	e7f2      	b.n	801f1ea <__libc_init_array+0x1e>
 801f204:	0802315c 	.word	0x0802315c
 801f208:	0802315c 	.word	0x0802315c
 801f20c:	0802315c 	.word	0x0802315c
 801f210:	08023160 	.word	0x08023160

0801f214 <__retarget_lock_init_recursive>:
 801f214:	4770      	bx	lr

0801f216 <__retarget_lock_acquire_recursive>:
 801f216:	4770      	bx	lr

0801f218 <__retarget_lock_release_recursive>:
 801f218:	4770      	bx	lr

0801f21a <__swhatbuf_r>:
 801f21a:	b570      	push	{r4, r5, r6, lr}
 801f21c:	460e      	mov	r6, r1
 801f21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f222:	2900      	cmp	r1, #0
 801f224:	b096      	sub	sp, #88	; 0x58
 801f226:	4614      	mov	r4, r2
 801f228:	461d      	mov	r5, r3
 801f22a:	da07      	bge.n	801f23c <__swhatbuf_r+0x22>
 801f22c:	2300      	movs	r3, #0
 801f22e:	602b      	str	r3, [r5, #0]
 801f230:	89b3      	ldrh	r3, [r6, #12]
 801f232:	061a      	lsls	r2, r3, #24
 801f234:	d410      	bmi.n	801f258 <__swhatbuf_r+0x3e>
 801f236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f23a:	e00e      	b.n	801f25a <__swhatbuf_r+0x40>
 801f23c:	466a      	mov	r2, sp
 801f23e:	f001 f995 	bl	802056c <_fstat_r>
 801f242:	2800      	cmp	r0, #0
 801f244:	dbf2      	blt.n	801f22c <__swhatbuf_r+0x12>
 801f246:	9a01      	ldr	r2, [sp, #4]
 801f248:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f24c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f250:	425a      	negs	r2, r3
 801f252:	415a      	adcs	r2, r3
 801f254:	602a      	str	r2, [r5, #0]
 801f256:	e7ee      	b.n	801f236 <__swhatbuf_r+0x1c>
 801f258:	2340      	movs	r3, #64	; 0x40
 801f25a:	2000      	movs	r0, #0
 801f25c:	6023      	str	r3, [r4, #0]
 801f25e:	b016      	add	sp, #88	; 0x58
 801f260:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f264 <__smakebuf_r>:
 801f264:	898b      	ldrh	r3, [r1, #12]
 801f266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f268:	079d      	lsls	r5, r3, #30
 801f26a:	4606      	mov	r6, r0
 801f26c:	460c      	mov	r4, r1
 801f26e:	d507      	bpl.n	801f280 <__smakebuf_r+0x1c>
 801f270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f274:	6023      	str	r3, [r4, #0]
 801f276:	6123      	str	r3, [r4, #16]
 801f278:	2301      	movs	r3, #1
 801f27a:	6163      	str	r3, [r4, #20]
 801f27c:	b002      	add	sp, #8
 801f27e:	bd70      	pop	{r4, r5, r6, pc}
 801f280:	ab01      	add	r3, sp, #4
 801f282:	466a      	mov	r2, sp
 801f284:	f7ff ffc9 	bl	801f21a <__swhatbuf_r>
 801f288:	9900      	ldr	r1, [sp, #0]
 801f28a:	4605      	mov	r5, r0
 801f28c:	4630      	mov	r0, r6
 801f28e:	f000 f8c9 	bl	801f424 <_malloc_r>
 801f292:	b948      	cbnz	r0, 801f2a8 <__smakebuf_r+0x44>
 801f294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f298:	059a      	lsls	r2, r3, #22
 801f29a:	d4ef      	bmi.n	801f27c <__smakebuf_r+0x18>
 801f29c:	f023 0303 	bic.w	r3, r3, #3
 801f2a0:	f043 0302 	orr.w	r3, r3, #2
 801f2a4:	81a3      	strh	r3, [r4, #12]
 801f2a6:	e7e3      	b.n	801f270 <__smakebuf_r+0xc>
 801f2a8:	4b0d      	ldr	r3, [pc, #52]	; (801f2e0 <__smakebuf_r+0x7c>)
 801f2aa:	62b3      	str	r3, [r6, #40]	; 0x28
 801f2ac:	89a3      	ldrh	r3, [r4, #12]
 801f2ae:	6020      	str	r0, [r4, #0]
 801f2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f2b4:	81a3      	strh	r3, [r4, #12]
 801f2b6:	9b00      	ldr	r3, [sp, #0]
 801f2b8:	6163      	str	r3, [r4, #20]
 801f2ba:	9b01      	ldr	r3, [sp, #4]
 801f2bc:	6120      	str	r0, [r4, #16]
 801f2be:	b15b      	cbz	r3, 801f2d8 <__smakebuf_r+0x74>
 801f2c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f2c4:	4630      	mov	r0, r6
 801f2c6:	f001 fcd3 	bl	8020c70 <_isatty_r>
 801f2ca:	b128      	cbz	r0, 801f2d8 <__smakebuf_r+0x74>
 801f2cc:	89a3      	ldrh	r3, [r4, #12]
 801f2ce:	f023 0303 	bic.w	r3, r3, #3
 801f2d2:	f043 0301 	orr.w	r3, r3, #1
 801f2d6:	81a3      	strh	r3, [r4, #12]
 801f2d8:	89a0      	ldrh	r0, [r4, #12]
 801f2da:	4305      	orrs	r5, r0
 801f2dc:	81a5      	strh	r5, [r4, #12]
 801f2de:	e7cd      	b.n	801f27c <__smakebuf_r+0x18>
 801f2e0:	0801f029 	.word	0x0801f029

0801f2e4 <malloc>:
 801f2e4:	4b02      	ldr	r3, [pc, #8]	; (801f2f0 <malloc+0xc>)
 801f2e6:	4601      	mov	r1, r0
 801f2e8:	6818      	ldr	r0, [r3, #0]
 801f2ea:	f000 b89b 	b.w	801f424 <_malloc_r>
 801f2ee:	bf00      	nop
 801f2f0:	200002b8 	.word	0x200002b8

0801f2f4 <free>:
 801f2f4:	4b02      	ldr	r3, [pc, #8]	; (801f300 <free+0xc>)
 801f2f6:	4601      	mov	r1, r0
 801f2f8:	6818      	ldr	r0, [r3, #0]
 801f2fa:	f000 b843 	b.w	801f384 <_free_r>
 801f2fe:	bf00      	nop
 801f300:	200002b8 	.word	0x200002b8

0801f304 <memcpy>:
 801f304:	440a      	add	r2, r1
 801f306:	4291      	cmp	r1, r2
 801f308:	f100 33ff 	add.w	r3, r0, #4294967295
 801f30c:	d100      	bne.n	801f310 <memcpy+0xc>
 801f30e:	4770      	bx	lr
 801f310:	b510      	push	{r4, lr}
 801f312:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f316:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f31a:	4291      	cmp	r1, r2
 801f31c:	d1f9      	bne.n	801f312 <memcpy+0xe>
 801f31e:	bd10      	pop	{r4, pc}

0801f320 <memmove>:
 801f320:	4288      	cmp	r0, r1
 801f322:	b510      	push	{r4, lr}
 801f324:	eb01 0402 	add.w	r4, r1, r2
 801f328:	d902      	bls.n	801f330 <memmove+0x10>
 801f32a:	4284      	cmp	r4, r0
 801f32c:	4623      	mov	r3, r4
 801f32e:	d807      	bhi.n	801f340 <memmove+0x20>
 801f330:	1e43      	subs	r3, r0, #1
 801f332:	42a1      	cmp	r1, r4
 801f334:	d008      	beq.n	801f348 <memmove+0x28>
 801f336:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f33a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f33e:	e7f8      	b.n	801f332 <memmove+0x12>
 801f340:	4402      	add	r2, r0
 801f342:	4601      	mov	r1, r0
 801f344:	428a      	cmp	r2, r1
 801f346:	d100      	bne.n	801f34a <memmove+0x2a>
 801f348:	bd10      	pop	{r4, pc}
 801f34a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f34e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f352:	e7f7      	b.n	801f344 <memmove+0x24>

0801f354 <memset>:
 801f354:	4402      	add	r2, r0
 801f356:	4603      	mov	r3, r0
 801f358:	4293      	cmp	r3, r2
 801f35a:	d100      	bne.n	801f35e <memset+0xa>
 801f35c:	4770      	bx	lr
 801f35e:	f803 1b01 	strb.w	r1, [r3], #1
 801f362:	e7f9      	b.n	801f358 <memset+0x4>

0801f364 <_calloc_r>:
 801f364:	b513      	push	{r0, r1, r4, lr}
 801f366:	434a      	muls	r2, r1
 801f368:	4611      	mov	r1, r2
 801f36a:	9201      	str	r2, [sp, #4]
 801f36c:	f000 f85a 	bl	801f424 <_malloc_r>
 801f370:	4604      	mov	r4, r0
 801f372:	b118      	cbz	r0, 801f37c <_calloc_r+0x18>
 801f374:	9a01      	ldr	r2, [sp, #4]
 801f376:	2100      	movs	r1, #0
 801f378:	f7ff ffec 	bl	801f354 <memset>
 801f37c:	4620      	mov	r0, r4
 801f37e:	b002      	add	sp, #8
 801f380:	bd10      	pop	{r4, pc}
	...

0801f384 <_free_r>:
 801f384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f386:	2900      	cmp	r1, #0
 801f388:	d048      	beq.n	801f41c <_free_r+0x98>
 801f38a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f38e:	9001      	str	r0, [sp, #4]
 801f390:	2b00      	cmp	r3, #0
 801f392:	f1a1 0404 	sub.w	r4, r1, #4
 801f396:	bfb8      	it	lt
 801f398:	18e4      	addlt	r4, r4, r3
 801f39a:	f001 fc9d 	bl	8020cd8 <__malloc_lock>
 801f39e:	4a20      	ldr	r2, [pc, #128]	; (801f420 <_free_r+0x9c>)
 801f3a0:	9801      	ldr	r0, [sp, #4]
 801f3a2:	6813      	ldr	r3, [r2, #0]
 801f3a4:	4615      	mov	r5, r2
 801f3a6:	b933      	cbnz	r3, 801f3b6 <_free_r+0x32>
 801f3a8:	6063      	str	r3, [r4, #4]
 801f3aa:	6014      	str	r4, [r2, #0]
 801f3ac:	b003      	add	sp, #12
 801f3ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f3b2:	f001 bc97 	b.w	8020ce4 <__malloc_unlock>
 801f3b6:	42a3      	cmp	r3, r4
 801f3b8:	d90b      	bls.n	801f3d2 <_free_r+0x4e>
 801f3ba:	6821      	ldr	r1, [r4, #0]
 801f3bc:	1862      	adds	r2, r4, r1
 801f3be:	4293      	cmp	r3, r2
 801f3c0:	bf04      	itt	eq
 801f3c2:	681a      	ldreq	r2, [r3, #0]
 801f3c4:	685b      	ldreq	r3, [r3, #4]
 801f3c6:	6063      	str	r3, [r4, #4]
 801f3c8:	bf04      	itt	eq
 801f3ca:	1852      	addeq	r2, r2, r1
 801f3cc:	6022      	streq	r2, [r4, #0]
 801f3ce:	602c      	str	r4, [r5, #0]
 801f3d0:	e7ec      	b.n	801f3ac <_free_r+0x28>
 801f3d2:	461a      	mov	r2, r3
 801f3d4:	685b      	ldr	r3, [r3, #4]
 801f3d6:	b10b      	cbz	r3, 801f3dc <_free_r+0x58>
 801f3d8:	42a3      	cmp	r3, r4
 801f3da:	d9fa      	bls.n	801f3d2 <_free_r+0x4e>
 801f3dc:	6811      	ldr	r1, [r2, #0]
 801f3de:	1855      	adds	r5, r2, r1
 801f3e0:	42a5      	cmp	r5, r4
 801f3e2:	d10b      	bne.n	801f3fc <_free_r+0x78>
 801f3e4:	6824      	ldr	r4, [r4, #0]
 801f3e6:	4421      	add	r1, r4
 801f3e8:	1854      	adds	r4, r2, r1
 801f3ea:	42a3      	cmp	r3, r4
 801f3ec:	6011      	str	r1, [r2, #0]
 801f3ee:	d1dd      	bne.n	801f3ac <_free_r+0x28>
 801f3f0:	681c      	ldr	r4, [r3, #0]
 801f3f2:	685b      	ldr	r3, [r3, #4]
 801f3f4:	6053      	str	r3, [r2, #4]
 801f3f6:	4421      	add	r1, r4
 801f3f8:	6011      	str	r1, [r2, #0]
 801f3fa:	e7d7      	b.n	801f3ac <_free_r+0x28>
 801f3fc:	d902      	bls.n	801f404 <_free_r+0x80>
 801f3fe:	230c      	movs	r3, #12
 801f400:	6003      	str	r3, [r0, #0]
 801f402:	e7d3      	b.n	801f3ac <_free_r+0x28>
 801f404:	6825      	ldr	r5, [r4, #0]
 801f406:	1961      	adds	r1, r4, r5
 801f408:	428b      	cmp	r3, r1
 801f40a:	bf04      	itt	eq
 801f40c:	6819      	ldreq	r1, [r3, #0]
 801f40e:	685b      	ldreq	r3, [r3, #4]
 801f410:	6063      	str	r3, [r4, #4]
 801f412:	bf04      	itt	eq
 801f414:	1949      	addeq	r1, r1, r5
 801f416:	6021      	streq	r1, [r4, #0]
 801f418:	6054      	str	r4, [r2, #4]
 801f41a:	e7c7      	b.n	801f3ac <_free_r+0x28>
 801f41c:	b003      	add	sp, #12
 801f41e:	bd30      	pop	{r4, r5, pc}
 801f420:	20010254 	.word	0x20010254

0801f424 <_malloc_r>:
 801f424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f426:	1ccd      	adds	r5, r1, #3
 801f428:	f025 0503 	bic.w	r5, r5, #3
 801f42c:	3508      	adds	r5, #8
 801f42e:	2d0c      	cmp	r5, #12
 801f430:	bf38      	it	cc
 801f432:	250c      	movcc	r5, #12
 801f434:	2d00      	cmp	r5, #0
 801f436:	4606      	mov	r6, r0
 801f438:	db01      	blt.n	801f43e <_malloc_r+0x1a>
 801f43a:	42a9      	cmp	r1, r5
 801f43c:	d903      	bls.n	801f446 <_malloc_r+0x22>
 801f43e:	230c      	movs	r3, #12
 801f440:	6033      	str	r3, [r6, #0]
 801f442:	2000      	movs	r0, #0
 801f444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f446:	f001 fc47 	bl	8020cd8 <__malloc_lock>
 801f44a:	4921      	ldr	r1, [pc, #132]	; (801f4d0 <_malloc_r+0xac>)
 801f44c:	680a      	ldr	r2, [r1, #0]
 801f44e:	4614      	mov	r4, r2
 801f450:	b99c      	cbnz	r4, 801f47a <_malloc_r+0x56>
 801f452:	4f20      	ldr	r7, [pc, #128]	; (801f4d4 <_malloc_r+0xb0>)
 801f454:	683b      	ldr	r3, [r7, #0]
 801f456:	b923      	cbnz	r3, 801f462 <_malloc_r+0x3e>
 801f458:	4621      	mov	r1, r4
 801f45a:	4630      	mov	r0, r6
 801f45c:	f000 f83c 	bl	801f4d8 <_sbrk_r>
 801f460:	6038      	str	r0, [r7, #0]
 801f462:	4629      	mov	r1, r5
 801f464:	4630      	mov	r0, r6
 801f466:	f000 f837 	bl	801f4d8 <_sbrk_r>
 801f46a:	1c43      	adds	r3, r0, #1
 801f46c:	d123      	bne.n	801f4b6 <_malloc_r+0x92>
 801f46e:	230c      	movs	r3, #12
 801f470:	6033      	str	r3, [r6, #0]
 801f472:	4630      	mov	r0, r6
 801f474:	f001 fc36 	bl	8020ce4 <__malloc_unlock>
 801f478:	e7e3      	b.n	801f442 <_malloc_r+0x1e>
 801f47a:	6823      	ldr	r3, [r4, #0]
 801f47c:	1b5b      	subs	r3, r3, r5
 801f47e:	d417      	bmi.n	801f4b0 <_malloc_r+0x8c>
 801f480:	2b0b      	cmp	r3, #11
 801f482:	d903      	bls.n	801f48c <_malloc_r+0x68>
 801f484:	6023      	str	r3, [r4, #0]
 801f486:	441c      	add	r4, r3
 801f488:	6025      	str	r5, [r4, #0]
 801f48a:	e004      	b.n	801f496 <_malloc_r+0x72>
 801f48c:	6863      	ldr	r3, [r4, #4]
 801f48e:	42a2      	cmp	r2, r4
 801f490:	bf0c      	ite	eq
 801f492:	600b      	streq	r3, [r1, #0]
 801f494:	6053      	strne	r3, [r2, #4]
 801f496:	4630      	mov	r0, r6
 801f498:	f001 fc24 	bl	8020ce4 <__malloc_unlock>
 801f49c:	f104 000b 	add.w	r0, r4, #11
 801f4a0:	1d23      	adds	r3, r4, #4
 801f4a2:	f020 0007 	bic.w	r0, r0, #7
 801f4a6:	1ac2      	subs	r2, r0, r3
 801f4a8:	d0cc      	beq.n	801f444 <_malloc_r+0x20>
 801f4aa:	1a1b      	subs	r3, r3, r0
 801f4ac:	50a3      	str	r3, [r4, r2]
 801f4ae:	e7c9      	b.n	801f444 <_malloc_r+0x20>
 801f4b0:	4622      	mov	r2, r4
 801f4b2:	6864      	ldr	r4, [r4, #4]
 801f4b4:	e7cc      	b.n	801f450 <_malloc_r+0x2c>
 801f4b6:	1cc4      	adds	r4, r0, #3
 801f4b8:	f024 0403 	bic.w	r4, r4, #3
 801f4bc:	42a0      	cmp	r0, r4
 801f4be:	d0e3      	beq.n	801f488 <_malloc_r+0x64>
 801f4c0:	1a21      	subs	r1, r4, r0
 801f4c2:	4630      	mov	r0, r6
 801f4c4:	f000 f808 	bl	801f4d8 <_sbrk_r>
 801f4c8:	3001      	adds	r0, #1
 801f4ca:	d1dd      	bne.n	801f488 <_malloc_r+0x64>
 801f4cc:	e7cf      	b.n	801f46e <_malloc_r+0x4a>
 801f4ce:	bf00      	nop
 801f4d0:	20010254 	.word	0x20010254
 801f4d4:	20010258 	.word	0x20010258

0801f4d8 <_sbrk_r>:
 801f4d8:	b538      	push	{r3, r4, r5, lr}
 801f4da:	4d06      	ldr	r5, [pc, #24]	; (801f4f4 <_sbrk_r+0x1c>)
 801f4dc:	2300      	movs	r3, #0
 801f4de:	4604      	mov	r4, r0
 801f4e0:	4608      	mov	r0, r1
 801f4e2:	602b      	str	r3, [r5, #0]
 801f4e4:	f7ff fbf2 	bl	801eccc <_sbrk>
 801f4e8:	1c43      	adds	r3, r0, #1
 801f4ea:	d102      	bne.n	801f4f2 <_sbrk_r+0x1a>
 801f4ec:	682b      	ldr	r3, [r5, #0]
 801f4ee:	b103      	cbz	r3, 801f4f2 <_sbrk_r+0x1a>
 801f4f0:	6023      	str	r3, [r4, #0]
 801f4f2:	bd38      	pop	{r3, r4, r5, pc}
 801f4f4:	2001d46c 	.word	0x2001d46c

0801f4f8 <siprintf>:
 801f4f8:	b40e      	push	{r1, r2, r3}
 801f4fa:	b500      	push	{lr}
 801f4fc:	b09c      	sub	sp, #112	; 0x70
 801f4fe:	ab1d      	add	r3, sp, #116	; 0x74
 801f500:	9002      	str	r0, [sp, #8]
 801f502:	9006      	str	r0, [sp, #24]
 801f504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f508:	4809      	ldr	r0, [pc, #36]	; (801f530 <siprintf+0x38>)
 801f50a:	9107      	str	r1, [sp, #28]
 801f50c:	9104      	str	r1, [sp, #16]
 801f50e:	4909      	ldr	r1, [pc, #36]	; (801f534 <siprintf+0x3c>)
 801f510:	f853 2b04 	ldr.w	r2, [r3], #4
 801f514:	9105      	str	r1, [sp, #20]
 801f516:	6800      	ldr	r0, [r0, #0]
 801f518:	9301      	str	r3, [sp, #4]
 801f51a:	a902      	add	r1, sp, #8
 801f51c:	f002 f8fe 	bl	802171c <_svfiprintf_r>
 801f520:	9b02      	ldr	r3, [sp, #8]
 801f522:	2200      	movs	r2, #0
 801f524:	701a      	strb	r2, [r3, #0]
 801f526:	b01c      	add	sp, #112	; 0x70
 801f528:	f85d eb04 	ldr.w	lr, [sp], #4
 801f52c:	b003      	add	sp, #12
 801f52e:	4770      	bx	lr
 801f530:	200002b8 	.word	0x200002b8
 801f534:	ffff0208 	.word	0xffff0208

0801f538 <__sread>:
 801f538:	b510      	push	{r4, lr}
 801f53a:	460c      	mov	r4, r1
 801f53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f540:	f002 fb80 	bl	8021c44 <_read_r>
 801f544:	2800      	cmp	r0, #0
 801f546:	bfab      	itete	ge
 801f548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f54a:	89a3      	ldrhlt	r3, [r4, #12]
 801f54c:	181b      	addge	r3, r3, r0
 801f54e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f552:	bfac      	ite	ge
 801f554:	6563      	strge	r3, [r4, #84]	; 0x54
 801f556:	81a3      	strhlt	r3, [r4, #12]
 801f558:	bd10      	pop	{r4, pc}

0801f55a <__swrite>:
 801f55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f55e:	461f      	mov	r7, r3
 801f560:	898b      	ldrh	r3, [r1, #12]
 801f562:	05db      	lsls	r3, r3, #23
 801f564:	4605      	mov	r5, r0
 801f566:	460c      	mov	r4, r1
 801f568:	4616      	mov	r6, r2
 801f56a:	d505      	bpl.n	801f578 <__swrite+0x1e>
 801f56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f570:	2302      	movs	r3, #2
 801f572:	2200      	movs	r2, #0
 801f574:	f001 fb8c 	bl	8020c90 <_lseek_r>
 801f578:	89a3      	ldrh	r3, [r4, #12]
 801f57a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f57e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f582:	81a3      	strh	r3, [r4, #12]
 801f584:	4632      	mov	r2, r6
 801f586:	463b      	mov	r3, r7
 801f588:	4628      	mov	r0, r5
 801f58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f58e:	f000 bf5d 	b.w	802044c <_write_r>

0801f592 <__sseek>:
 801f592:	b510      	push	{r4, lr}
 801f594:	460c      	mov	r4, r1
 801f596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f59a:	f001 fb79 	bl	8020c90 <_lseek_r>
 801f59e:	1c43      	adds	r3, r0, #1
 801f5a0:	89a3      	ldrh	r3, [r4, #12]
 801f5a2:	bf15      	itete	ne
 801f5a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801f5a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f5aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f5ae:	81a3      	strheq	r3, [r4, #12]
 801f5b0:	bf18      	it	ne
 801f5b2:	81a3      	strhne	r3, [r4, #12]
 801f5b4:	bd10      	pop	{r4, pc}

0801f5b6 <__sclose>:
 801f5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f5ba:	f000 bfc7 	b.w	802054c <_close_r>

0801f5be <strchr>:
 801f5be:	b2c9      	uxtb	r1, r1
 801f5c0:	4603      	mov	r3, r0
 801f5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f5c6:	b11a      	cbz	r2, 801f5d0 <strchr+0x12>
 801f5c8:	428a      	cmp	r2, r1
 801f5ca:	d1f9      	bne.n	801f5c0 <strchr+0x2>
 801f5cc:	4618      	mov	r0, r3
 801f5ce:	4770      	bx	lr
 801f5d0:	2900      	cmp	r1, #0
 801f5d2:	bf18      	it	ne
 801f5d4:	2300      	movne	r3, #0
 801f5d6:	e7f9      	b.n	801f5cc <strchr+0xe>

0801f5d8 <strncmp>:
 801f5d8:	b510      	push	{r4, lr}
 801f5da:	b16a      	cbz	r2, 801f5f8 <strncmp+0x20>
 801f5dc:	3901      	subs	r1, #1
 801f5de:	1884      	adds	r4, r0, r2
 801f5e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f5e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f5e8:	4293      	cmp	r3, r2
 801f5ea:	d103      	bne.n	801f5f4 <strncmp+0x1c>
 801f5ec:	42a0      	cmp	r0, r4
 801f5ee:	d001      	beq.n	801f5f4 <strncmp+0x1c>
 801f5f0:	2b00      	cmp	r3, #0
 801f5f2:	d1f5      	bne.n	801f5e0 <strncmp+0x8>
 801f5f4:	1a98      	subs	r0, r3, r2
 801f5f6:	bd10      	pop	{r4, pc}
 801f5f8:	4610      	mov	r0, r2
 801f5fa:	e7fc      	b.n	801f5f6 <strncmp+0x1e>

0801f5fc <strncpy>:
 801f5fc:	b510      	push	{r4, lr}
 801f5fe:	3901      	subs	r1, #1
 801f600:	4603      	mov	r3, r0
 801f602:	b132      	cbz	r2, 801f612 <strncpy+0x16>
 801f604:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f608:	f803 4b01 	strb.w	r4, [r3], #1
 801f60c:	3a01      	subs	r2, #1
 801f60e:	2c00      	cmp	r4, #0
 801f610:	d1f7      	bne.n	801f602 <strncpy+0x6>
 801f612:	441a      	add	r2, r3
 801f614:	2100      	movs	r1, #0
 801f616:	4293      	cmp	r3, r2
 801f618:	d100      	bne.n	801f61c <strncpy+0x20>
 801f61a:	bd10      	pop	{r4, pc}
 801f61c:	f803 1b01 	strb.w	r1, [r3], #1
 801f620:	e7f9      	b.n	801f616 <strncpy+0x1a>

0801f622 <sulp>:
 801f622:	b570      	push	{r4, r5, r6, lr}
 801f624:	4604      	mov	r4, r0
 801f626:	460d      	mov	r5, r1
 801f628:	ec45 4b10 	vmov	d0, r4, r5
 801f62c:	4616      	mov	r6, r2
 801f62e:	f001 fecb 	bl	80213c8 <__ulp>
 801f632:	ec51 0b10 	vmov	r0, r1, d0
 801f636:	b17e      	cbz	r6, 801f658 <sulp+0x36>
 801f638:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f63c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f640:	2b00      	cmp	r3, #0
 801f642:	dd09      	ble.n	801f658 <sulp+0x36>
 801f644:	051b      	lsls	r3, r3, #20
 801f646:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801f64a:	2400      	movs	r4, #0
 801f64c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801f650:	4622      	mov	r2, r4
 801f652:	462b      	mov	r3, r5
 801f654:	f7e0 fff8 	bl	8000648 <__aeabi_dmul>
 801f658:	bd70      	pop	{r4, r5, r6, pc}
 801f65a:	0000      	movs	r0, r0
 801f65c:	0000      	movs	r0, r0
	...

0801f660 <_strtod_l>:
 801f660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f664:	b0a3      	sub	sp, #140	; 0x8c
 801f666:	461f      	mov	r7, r3
 801f668:	2300      	movs	r3, #0
 801f66a:	931e      	str	r3, [sp, #120]	; 0x78
 801f66c:	4ba4      	ldr	r3, [pc, #656]	; (801f900 <_strtod_l+0x2a0>)
 801f66e:	9219      	str	r2, [sp, #100]	; 0x64
 801f670:	681b      	ldr	r3, [r3, #0]
 801f672:	9307      	str	r3, [sp, #28]
 801f674:	4604      	mov	r4, r0
 801f676:	4618      	mov	r0, r3
 801f678:	4688      	mov	r8, r1
 801f67a:	f7e0 fdcb 	bl	8000214 <strlen>
 801f67e:	f04f 0a00 	mov.w	sl, #0
 801f682:	4605      	mov	r5, r0
 801f684:	f04f 0b00 	mov.w	fp, #0
 801f688:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801f68c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f68e:	781a      	ldrb	r2, [r3, #0]
 801f690:	2a2b      	cmp	r2, #43	; 0x2b
 801f692:	d04c      	beq.n	801f72e <_strtod_l+0xce>
 801f694:	d839      	bhi.n	801f70a <_strtod_l+0xaa>
 801f696:	2a0d      	cmp	r2, #13
 801f698:	d832      	bhi.n	801f700 <_strtod_l+0xa0>
 801f69a:	2a08      	cmp	r2, #8
 801f69c:	d832      	bhi.n	801f704 <_strtod_l+0xa4>
 801f69e:	2a00      	cmp	r2, #0
 801f6a0:	d03c      	beq.n	801f71c <_strtod_l+0xbc>
 801f6a2:	2300      	movs	r3, #0
 801f6a4:	930e      	str	r3, [sp, #56]	; 0x38
 801f6a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801f6a8:	7833      	ldrb	r3, [r6, #0]
 801f6aa:	2b30      	cmp	r3, #48	; 0x30
 801f6ac:	f040 80b4 	bne.w	801f818 <_strtod_l+0x1b8>
 801f6b0:	7873      	ldrb	r3, [r6, #1]
 801f6b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f6b6:	2b58      	cmp	r3, #88	; 0x58
 801f6b8:	d16c      	bne.n	801f794 <_strtod_l+0x134>
 801f6ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f6bc:	9301      	str	r3, [sp, #4]
 801f6be:	ab1e      	add	r3, sp, #120	; 0x78
 801f6c0:	9702      	str	r7, [sp, #8]
 801f6c2:	9300      	str	r3, [sp, #0]
 801f6c4:	4a8f      	ldr	r2, [pc, #572]	; (801f904 <_strtod_l+0x2a4>)
 801f6c6:	ab1f      	add	r3, sp, #124	; 0x7c
 801f6c8:	a91d      	add	r1, sp, #116	; 0x74
 801f6ca:	4620      	mov	r0, r4
 801f6cc:	f000 ffc8 	bl	8020660 <__gethex>
 801f6d0:	f010 0707 	ands.w	r7, r0, #7
 801f6d4:	4605      	mov	r5, r0
 801f6d6:	d005      	beq.n	801f6e4 <_strtod_l+0x84>
 801f6d8:	2f06      	cmp	r7, #6
 801f6da:	d12a      	bne.n	801f732 <_strtod_l+0xd2>
 801f6dc:	3601      	adds	r6, #1
 801f6de:	2300      	movs	r3, #0
 801f6e0:	961d      	str	r6, [sp, #116]	; 0x74
 801f6e2:	930e      	str	r3, [sp, #56]	; 0x38
 801f6e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	f040 8596 	bne.w	8020218 <_strtod_l+0xbb8>
 801f6ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f6ee:	b1db      	cbz	r3, 801f728 <_strtod_l+0xc8>
 801f6f0:	4652      	mov	r2, sl
 801f6f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801f6f6:	ec43 2b10 	vmov	d0, r2, r3
 801f6fa:	b023      	add	sp, #140	; 0x8c
 801f6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f700:	2a20      	cmp	r2, #32
 801f702:	d1ce      	bne.n	801f6a2 <_strtod_l+0x42>
 801f704:	3301      	adds	r3, #1
 801f706:	931d      	str	r3, [sp, #116]	; 0x74
 801f708:	e7c0      	b.n	801f68c <_strtod_l+0x2c>
 801f70a:	2a2d      	cmp	r2, #45	; 0x2d
 801f70c:	d1c9      	bne.n	801f6a2 <_strtod_l+0x42>
 801f70e:	2201      	movs	r2, #1
 801f710:	920e      	str	r2, [sp, #56]	; 0x38
 801f712:	1c5a      	adds	r2, r3, #1
 801f714:	921d      	str	r2, [sp, #116]	; 0x74
 801f716:	785b      	ldrb	r3, [r3, #1]
 801f718:	2b00      	cmp	r3, #0
 801f71a:	d1c4      	bne.n	801f6a6 <_strtod_l+0x46>
 801f71c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f71e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801f722:	2b00      	cmp	r3, #0
 801f724:	f040 8576 	bne.w	8020214 <_strtod_l+0xbb4>
 801f728:	4652      	mov	r2, sl
 801f72a:	465b      	mov	r3, fp
 801f72c:	e7e3      	b.n	801f6f6 <_strtod_l+0x96>
 801f72e:	2200      	movs	r2, #0
 801f730:	e7ee      	b.n	801f710 <_strtod_l+0xb0>
 801f732:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f734:	b13a      	cbz	r2, 801f746 <_strtod_l+0xe6>
 801f736:	2135      	movs	r1, #53	; 0x35
 801f738:	a820      	add	r0, sp, #128	; 0x80
 801f73a:	f001 ff50 	bl	80215de <__copybits>
 801f73e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f740:	4620      	mov	r0, r4
 801f742:	f001 fb15 	bl	8020d70 <_Bfree>
 801f746:	3f01      	subs	r7, #1
 801f748:	2f05      	cmp	r7, #5
 801f74a:	d807      	bhi.n	801f75c <_strtod_l+0xfc>
 801f74c:	e8df f007 	tbb	[pc, r7]
 801f750:	1d180b0e 	.word	0x1d180b0e
 801f754:	030e      	.short	0x030e
 801f756:	f04f 0b00 	mov.w	fp, #0
 801f75a:	46da      	mov	sl, fp
 801f75c:	0728      	lsls	r0, r5, #28
 801f75e:	d5c1      	bpl.n	801f6e4 <_strtod_l+0x84>
 801f760:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801f764:	e7be      	b.n	801f6e4 <_strtod_l+0x84>
 801f766:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801f76a:	e7f7      	b.n	801f75c <_strtod_l+0xfc>
 801f76c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801f770:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f772:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801f776:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f77a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801f77e:	e7ed      	b.n	801f75c <_strtod_l+0xfc>
 801f780:	f8df b184 	ldr.w	fp, [pc, #388]	; 801f908 <_strtod_l+0x2a8>
 801f784:	f04f 0a00 	mov.w	sl, #0
 801f788:	e7e8      	b.n	801f75c <_strtod_l+0xfc>
 801f78a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801f78e:	f04f 3aff 	mov.w	sl, #4294967295
 801f792:	e7e3      	b.n	801f75c <_strtod_l+0xfc>
 801f794:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f796:	1c5a      	adds	r2, r3, #1
 801f798:	921d      	str	r2, [sp, #116]	; 0x74
 801f79a:	785b      	ldrb	r3, [r3, #1]
 801f79c:	2b30      	cmp	r3, #48	; 0x30
 801f79e:	d0f9      	beq.n	801f794 <_strtod_l+0x134>
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	d09f      	beq.n	801f6e4 <_strtod_l+0x84>
 801f7a4:	2301      	movs	r3, #1
 801f7a6:	f04f 0900 	mov.w	r9, #0
 801f7aa:	9304      	str	r3, [sp, #16]
 801f7ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f7ae:	930a      	str	r3, [sp, #40]	; 0x28
 801f7b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801f7b4:	464f      	mov	r7, r9
 801f7b6:	220a      	movs	r2, #10
 801f7b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f7ba:	7806      	ldrb	r6, [r0, #0]
 801f7bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801f7c0:	b2d9      	uxtb	r1, r3
 801f7c2:	2909      	cmp	r1, #9
 801f7c4:	d92a      	bls.n	801f81c <_strtod_l+0x1bc>
 801f7c6:	9907      	ldr	r1, [sp, #28]
 801f7c8:	462a      	mov	r2, r5
 801f7ca:	f7ff ff05 	bl	801f5d8 <strncmp>
 801f7ce:	b398      	cbz	r0, 801f838 <_strtod_l+0x1d8>
 801f7d0:	2000      	movs	r0, #0
 801f7d2:	4633      	mov	r3, r6
 801f7d4:	463d      	mov	r5, r7
 801f7d6:	9007      	str	r0, [sp, #28]
 801f7d8:	4602      	mov	r2, r0
 801f7da:	2b65      	cmp	r3, #101	; 0x65
 801f7dc:	d001      	beq.n	801f7e2 <_strtod_l+0x182>
 801f7de:	2b45      	cmp	r3, #69	; 0x45
 801f7e0:	d118      	bne.n	801f814 <_strtod_l+0x1b4>
 801f7e2:	b91d      	cbnz	r5, 801f7ec <_strtod_l+0x18c>
 801f7e4:	9b04      	ldr	r3, [sp, #16]
 801f7e6:	4303      	orrs	r3, r0
 801f7e8:	d098      	beq.n	801f71c <_strtod_l+0xbc>
 801f7ea:	2500      	movs	r5, #0
 801f7ec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801f7f0:	f108 0301 	add.w	r3, r8, #1
 801f7f4:	931d      	str	r3, [sp, #116]	; 0x74
 801f7f6:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f7fa:	2b2b      	cmp	r3, #43	; 0x2b
 801f7fc:	d075      	beq.n	801f8ea <_strtod_l+0x28a>
 801f7fe:	2b2d      	cmp	r3, #45	; 0x2d
 801f800:	d07b      	beq.n	801f8fa <_strtod_l+0x29a>
 801f802:	f04f 0c00 	mov.w	ip, #0
 801f806:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801f80a:	2909      	cmp	r1, #9
 801f80c:	f240 8082 	bls.w	801f914 <_strtod_l+0x2b4>
 801f810:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801f814:	2600      	movs	r6, #0
 801f816:	e09d      	b.n	801f954 <_strtod_l+0x2f4>
 801f818:	2300      	movs	r3, #0
 801f81a:	e7c4      	b.n	801f7a6 <_strtod_l+0x146>
 801f81c:	2f08      	cmp	r7, #8
 801f81e:	bfd8      	it	le
 801f820:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801f822:	f100 0001 	add.w	r0, r0, #1
 801f826:	bfda      	itte	le
 801f828:	fb02 3301 	mlale	r3, r2, r1, r3
 801f82c:	9309      	strle	r3, [sp, #36]	; 0x24
 801f82e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801f832:	3701      	adds	r7, #1
 801f834:	901d      	str	r0, [sp, #116]	; 0x74
 801f836:	e7bf      	b.n	801f7b8 <_strtod_l+0x158>
 801f838:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f83a:	195a      	adds	r2, r3, r5
 801f83c:	921d      	str	r2, [sp, #116]	; 0x74
 801f83e:	5d5b      	ldrb	r3, [r3, r5]
 801f840:	2f00      	cmp	r7, #0
 801f842:	d037      	beq.n	801f8b4 <_strtod_l+0x254>
 801f844:	9007      	str	r0, [sp, #28]
 801f846:	463d      	mov	r5, r7
 801f848:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801f84c:	2a09      	cmp	r2, #9
 801f84e:	d912      	bls.n	801f876 <_strtod_l+0x216>
 801f850:	2201      	movs	r2, #1
 801f852:	e7c2      	b.n	801f7da <_strtod_l+0x17a>
 801f854:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f856:	1c5a      	adds	r2, r3, #1
 801f858:	921d      	str	r2, [sp, #116]	; 0x74
 801f85a:	785b      	ldrb	r3, [r3, #1]
 801f85c:	3001      	adds	r0, #1
 801f85e:	2b30      	cmp	r3, #48	; 0x30
 801f860:	d0f8      	beq.n	801f854 <_strtod_l+0x1f4>
 801f862:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801f866:	2a08      	cmp	r2, #8
 801f868:	f200 84db 	bhi.w	8020222 <_strtod_l+0xbc2>
 801f86c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f86e:	9007      	str	r0, [sp, #28]
 801f870:	2000      	movs	r0, #0
 801f872:	920a      	str	r2, [sp, #40]	; 0x28
 801f874:	4605      	mov	r5, r0
 801f876:	3b30      	subs	r3, #48	; 0x30
 801f878:	f100 0201 	add.w	r2, r0, #1
 801f87c:	d014      	beq.n	801f8a8 <_strtod_l+0x248>
 801f87e:	9907      	ldr	r1, [sp, #28]
 801f880:	4411      	add	r1, r2
 801f882:	9107      	str	r1, [sp, #28]
 801f884:	462a      	mov	r2, r5
 801f886:	eb00 0e05 	add.w	lr, r0, r5
 801f88a:	210a      	movs	r1, #10
 801f88c:	4572      	cmp	r2, lr
 801f88e:	d113      	bne.n	801f8b8 <_strtod_l+0x258>
 801f890:	182a      	adds	r2, r5, r0
 801f892:	2a08      	cmp	r2, #8
 801f894:	f105 0501 	add.w	r5, r5, #1
 801f898:	4405      	add	r5, r0
 801f89a:	dc1c      	bgt.n	801f8d6 <_strtod_l+0x276>
 801f89c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f89e:	220a      	movs	r2, #10
 801f8a0:	fb02 3301 	mla	r3, r2, r1, r3
 801f8a4:	9309      	str	r3, [sp, #36]	; 0x24
 801f8a6:	2200      	movs	r2, #0
 801f8a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f8aa:	1c59      	adds	r1, r3, #1
 801f8ac:	911d      	str	r1, [sp, #116]	; 0x74
 801f8ae:	785b      	ldrb	r3, [r3, #1]
 801f8b0:	4610      	mov	r0, r2
 801f8b2:	e7c9      	b.n	801f848 <_strtod_l+0x1e8>
 801f8b4:	4638      	mov	r0, r7
 801f8b6:	e7d2      	b.n	801f85e <_strtod_l+0x1fe>
 801f8b8:	2a08      	cmp	r2, #8
 801f8ba:	dc04      	bgt.n	801f8c6 <_strtod_l+0x266>
 801f8bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f8be:	434e      	muls	r6, r1
 801f8c0:	9609      	str	r6, [sp, #36]	; 0x24
 801f8c2:	3201      	adds	r2, #1
 801f8c4:	e7e2      	b.n	801f88c <_strtod_l+0x22c>
 801f8c6:	f102 0c01 	add.w	ip, r2, #1
 801f8ca:	f1bc 0f10 	cmp.w	ip, #16
 801f8ce:	bfd8      	it	le
 801f8d0:	fb01 f909 	mulle.w	r9, r1, r9
 801f8d4:	e7f5      	b.n	801f8c2 <_strtod_l+0x262>
 801f8d6:	2d10      	cmp	r5, #16
 801f8d8:	bfdc      	itt	le
 801f8da:	220a      	movle	r2, #10
 801f8dc:	fb02 3909 	mlale	r9, r2, r9, r3
 801f8e0:	e7e1      	b.n	801f8a6 <_strtod_l+0x246>
 801f8e2:	2300      	movs	r3, #0
 801f8e4:	9307      	str	r3, [sp, #28]
 801f8e6:	2201      	movs	r2, #1
 801f8e8:	e77c      	b.n	801f7e4 <_strtod_l+0x184>
 801f8ea:	f04f 0c00 	mov.w	ip, #0
 801f8ee:	f108 0302 	add.w	r3, r8, #2
 801f8f2:	931d      	str	r3, [sp, #116]	; 0x74
 801f8f4:	f898 3002 	ldrb.w	r3, [r8, #2]
 801f8f8:	e785      	b.n	801f806 <_strtod_l+0x1a6>
 801f8fa:	f04f 0c01 	mov.w	ip, #1
 801f8fe:	e7f6      	b.n	801f8ee <_strtod_l+0x28e>
 801f900:	08022f64 	.word	0x08022f64
 801f904:	08022e98 	.word	0x08022e98
 801f908:	7ff00000 	.word	0x7ff00000
 801f90c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f90e:	1c59      	adds	r1, r3, #1
 801f910:	911d      	str	r1, [sp, #116]	; 0x74
 801f912:	785b      	ldrb	r3, [r3, #1]
 801f914:	2b30      	cmp	r3, #48	; 0x30
 801f916:	d0f9      	beq.n	801f90c <_strtod_l+0x2ac>
 801f918:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801f91c:	2908      	cmp	r1, #8
 801f91e:	f63f af79 	bhi.w	801f814 <_strtod_l+0x1b4>
 801f922:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801f926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f928:	9308      	str	r3, [sp, #32]
 801f92a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f92c:	1c59      	adds	r1, r3, #1
 801f92e:	911d      	str	r1, [sp, #116]	; 0x74
 801f930:	785b      	ldrb	r3, [r3, #1]
 801f932:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801f936:	2e09      	cmp	r6, #9
 801f938:	d937      	bls.n	801f9aa <_strtod_l+0x34a>
 801f93a:	9e08      	ldr	r6, [sp, #32]
 801f93c:	1b89      	subs	r1, r1, r6
 801f93e:	2908      	cmp	r1, #8
 801f940:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801f944:	dc02      	bgt.n	801f94c <_strtod_l+0x2ec>
 801f946:	4576      	cmp	r6, lr
 801f948:	bfa8      	it	ge
 801f94a:	4676      	movge	r6, lr
 801f94c:	f1bc 0f00 	cmp.w	ip, #0
 801f950:	d000      	beq.n	801f954 <_strtod_l+0x2f4>
 801f952:	4276      	negs	r6, r6
 801f954:	2d00      	cmp	r5, #0
 801f956:	d14f      	bne.n	801f9f8 <_strtod_l+0x398>
 801f958:	9904      	ldr	r1, [sp, #16]
 801f95a:	4301      	orrs	r1, r0
 801f95c:	f47f aec2 	bne.w	801f6e4 <_strtod_l+0x84>
 801f960:	2a00      	cmp	r2, #0
 801f962:	f47f aedb 	bne.w	801f71c <_strtod_l+0xbc>
 801f966:	2b69      	cmp	r3, #105	; 0x69
 801f968:	d027      	beq.n	801f9ba <_strtod_l+0x35a>
 801f96a:	dc24      	bgt.n	801f9b6 <_strtod_l+0x356>
 801f96c:	2b49      	cmp	r3, #73	; 0x49
 801f96e:	d024      	beq.n	801f9ba <_strtod_l+0x35a>
 801f970:	2b4e      	cmp	r3, #78	; 0x4e
 801f972:	f47f aed3 	bne.w	801f71c <_strtod_l+0xbc>
 801f976:	499e      	ldr	r1, [pc, #632]	; (801fbf0 <_strtod_l+0x590>)
 801f978:	a81d      	add	r0, sp, #116	; 0x74
 801f97a:	f001 f8c9 	bl	8020b10 <__match>
 801f97e:	2800      	cmp	r0, #0
 801f980:	f43f aecc 	beq.w	801f71c <_strtod_l+0xbc>
 801f984:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f986:	781b      	ldrb	r3, [r3, #0]
 801f988:	2b28      	cmp	r3, #40	; 0x28
 801f98a:	d12d      	bne.n	801f9e8 <_strtod_l+0x388>
 801f98c:	4999      	ldr	r1, [pc, #612]	; (801fbf4 <_strtod_l+0x594>)
 801f98e:	aa20      	add	r2, sp, #128	; 0x80
 801f990:	a81d      	add	r0, sp, #116	; 0x74
 801f992:	f001 f8d1 	bl	8020b38 <__hexnan>
 801f996:	2805      	cmp	r0, #5
 801f998:	d126      	bne.n	801f9e8 <_strtod_l+0x388>
 801f99a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f99c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801f9a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801f9a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801f9a8:	e69c      	b.n	801f6e4 <_strtod_l+0x84>
 801f9aa:	210a      	movs	r1, #10
 801f9ac:	fb01 3e0e 	mla	lr, r1, lr, r3
 801f9b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801f9b4:	e7b9      	b.n	801f92a <_strtod_l+0x2ca>
 801f9b6:	2b6e      	cmp	r3, #110	; 0x6e
 801f9b8:	e7db      	b.n	801f972 <_strtod_l+0x312>
 801f9ba:	498f      	ldr	r1, [pc, #572]	; (801fbf8 <_strtod_l+0x598>)
 801f9bc:	a81d      	add	r0, sp, #116	; 0x74
 801f9be:	f001 f8a7 	bl	8020b10 <__match>
 801f9c2:	2800      	cmp	r0, #0
 801f9c4:	f43f aeaa 	beq.w	801f71c <_strtod_l+0xbc>
 801f9c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f9ca:	498c      	ldr	r1, [pc, #560]	; (801fbfc <_strtod_l+0x59c>)
 801f9cc:	3b01      	subs	r3, #1
 801f9ce:	a81d      	add	r0, sp, #116	; 0x74
 801f9d0:	931d      	str	r3, [sp, #116]	; 0x74
 801f9d2:	f001 f89d 	bl	8020b10 <__match>
 801f9d6:	b910      	cbnz	r0, 801f9de <_strtod_l+0x37e>
 801f9d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f9da:	3301      	adds	r3, #1
 801f9dc:	931d      	str	r3, [sp, #116]	; 0x74
 801f9de:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801fc0c <_strtod_l+0x5ac>
 801f9e2:	f04f 0a00 	mov.w	sl, #0
 801f9e6:	e67d      	b.n	801f6e4 <_strtod_l+0x84>
 801f9e8:	4885      	ldr	r0, [pc, #532]	; (801fc00 <_strtod_l+0x5a0>)
 801f9ea:	f002 f93d 	bl	8021c68 <nan>
 801f9ee:	ed8d 0b04 	vstr	d0, [sp, #16]
 801f9f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801f9f6:	e675      	b.n	801f6e4 <_strtod_l+0x84>
 801f9f8:	9b07      	ldr	r3, [sp, #28]
 801f9fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f9fc:	1af3      	subs	r3, r6, r3
 801f9fe:	2f00      	cmp	r7, #0
 801fa00:	bf08      	it	eq
 801fa02:	462f      	moveq	r7, r5
 801fa04:	2d10      	cmp	r5, #16
 801fa06:	9308      	str	r3, [sp, #32]
 801fa08:	46a8      	mov	r8, r5
 801fa0a:	bfa8      	it	ge
 801fa0c:	f04f 0810 	movge.w	r8, #16
 801fa10:	f7e0 fda0 	bl	8000554 <__aeabi_ui2d>
 801fa14:	2d09      	cmp	r5, #9
 801fa16:	4682      	mov	sl, r0
 801fa18:	468b      	mov	fp, r1
 801fa1a:	dd13      	ble.n	801fa44 <_strtod_l+0x3e4>
 801fa1c:	4b79      	ldr	r3, [pc, #484]	; (801fc04 <_strtod_l+0x5a4>)
 801fa1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801fa22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801fa26:	f7e0 fe0f 	bl	8000648 <__aeabi_dmul>
 801fa2a:	4682      	mov	sl, r0
 801fa2c:	4648      	mov	r0, r9
 801fa2e:	468b      	mov	fp, r1
 801fa30:	f7e0 fd90 	bl	8000554 <__aeabi_ui2d>
 801fa34:	4602      	mov	r2, r0
 801fa36:	460b      	mov	r3, r1
 801fa38:	4650      	mov	r0, sl
 801fa3a:	4659      	mov	r1, fp
 801fa3c:	f7e0 fc4e 	bl	80002dc <__adddf3>
 801fa40:	4682      	mov	sl, r0
 801fa42:	468b      	mov	fp, r1
 801fa44:	2d0f      	cmp	r5, #15
 801fa46:	dc38      	bgt.n	801faba <_strtod_l+0x45a>
 801fa48:	9b08      	ldr	r3, [sp, #32]
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	f43f ae4a 	beq.w	801f6e4 <_strtod_l+0x84>
 801fa50:	dd24      	ble.n	801fa9c <_strtod_l+0x43c>
 801fa52:	2b16      	cmp	r3, #22
 801fa54:	dc0b      	bgt.n	801fa6e <_strtod_l+0x40e>
 801fa56:	4d6b      	ldr	r5, [pc, #428]	; (801fc04 <_strtod_l+0x5a4>)
 801fa58:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801fa5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801fa60:	4652      	mov	r2, sl
 801fa62:	465b      	mov	r3, fp
 801fa64:	f7e0 fdf0 	bl	8000648 <__aeabi_dmul>
 801fa68:	4682      	mov	sl, r0
 801fa6a:	468b      	mov	fp, r1
 801fa6c:	e63a      	b.n	801f6e4 <_strtod_l+0x84>
 801fa6e:	9a08      	ldr	r2, [sp, #32]
 801fa70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801fa74:	4293      	cmp	r3, r2
 801fa76:	db20      	blt.n	801faba <_strtod_l+0x45a>
 801fa78:	4c62      	ldr	r4, [pc, #392]	; (801fc04 <_strtod_l+0x5a4>)
 801fa7a:	f1c5 050f 	rsb	r5, r5, #15
 801fa7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801fa82:	4652      	mov	r2, sl
 801fa84:	465b      	mov	r3, fp
 801fa86:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fa8a:	f7e0 fddd 	bl	8000648 <__aeabi_dmul>
 801fa8e:	9b08      	ldr	r3, [sp, #32]
 801fa90:	1b5d      	subs	r5, r3, r5
 801fa92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801fa96:	e9d4 2300 	ldrd	r2, r3, [r4]
 801fa9a:	e7e3      	b.n	801fa64 <_strtod_l+0x404>
 801fa9c:	9b08      	ldr	r3, [sp, #32]
 801fa9e:	3316      	adds	r3, #22
 801faa0:	db0b      	blt.n	801faba <_strtod_l+0x45a>
 801faa2:	9b07      	ldr	r3, [sp, #28]
 801faa4:	4a57      	ldr	r2, [pc, #348]	; (801fc04 <_strtod_l+0x5a4>)
 801faa6:	1b9e      	subs	r6, r3, r6
 801faa8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801faac:	e9d6 2300 	ldrd	r2, r3, [r6]
 801fab0:	4650      	mov	r0, sl
 801fab2:	4659      	mov	r1, fp
 801fab4:	f7e0 fef2 	bl	800089c <__aeabi_ddiv>
 801fab8:	e7d6      	b.n	801fa68 <_strtod_l+0x408>
 801faba:	9b08      	ldr	r3, [sp, #32]
 801fabc:	eba5 0808 	sub.w	r8, r5, r8
 801fac0:	4498      	add	r8, r3
 801fac2:	f1b8 0f00 	cmp.w	r8, #0
 801fac6:	dd71      	ble.n	801fbac <_strtod_l+0x54c>
 801fac8:	f018 030f 	ands.w	r3, r8, #15
 801facc:	d00a      	beq.n	801fae4 <_strtod_l+0x484>
 801face:	494d      	ldr	r1, [pc, #308]	; (801fc04 <_strtod_l+0x5a4>)
 801fad0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fad4:	4652      	mov	r2, sl
 801fad6:	465b      	mov	r3, fp
 801fad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fadc:	f7e0 fdb4 	bl	8000648 <__aeabi_dmul>
 801fae0:	4682      	mov	sl, r0
 801fae2:	468b      	mov	fp, r1
 801fae4:	f038 080f 	bics.w	r8, r8, #15
 801fae8:	d04d      	beq.n	801fb86 <_strtod_l+0x526>
 801faea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801faee:	dd22      	ble.n	801fb36 <_strtod_l+0x4d6>
 801faf0:	2500      	movs	r5, #0
 801faf2:	462e      	mov	r6, r5
 801faf4:	9509      	str	r5, [sp, #36]	; 0x24
 801faf6:	9507      	str	r5, [sp, #28]
 801faf8:	2322      	movs	r3, #34	; 0x22
 801fafa:	f8df b110 	ldr.w	fp, [pc, #272]	; 801fc0c <_strtod_l+0x5ac>
 801fafe:	6023      	str	r3, [r4, #0]
 801fb00:	f04f 0a00 	mov.w	sl, #0
 801fb04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb06:	2b00      	cmp	r3, #0
 801fb08:	f43f adec 	beq.w	801f6e4 <_strtod_l+0x84>
 801fb0c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fb0e:	4620      	mov	r0, r4
 801fb10:	f001 f92e 	bl	8020d70 <_Bfree>
 801fb14:	9907      	ldr	r1, [sp, #28]
 801fb16:	4620      	mov	r0, r4
 801fb18:	f001 f92a 	bl	8020d70 <_Bfree>
 801fb1c:	4631      	mov	r1, r6
 801fb1e:	4620      	mov	r0, r4
 801fb20:	f001 f926 	bl	8020d70 <_Bfree>
 801fb24:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fb26:	4620      	mov	r0, r4
 801fb28:	f001 f922 	bl	8020d70 <_Bfree>
 801fb2c:	4629      	mov	r1, r5
 801fb2e:	4620      	mov	r0, r4
 801fb30:	f001 f91e 	bl	8020d70 <_Bfree>
 801fb34:	e5d6      	b.n	801f6e4 <_strtod_l+0x84>
 801fb36:	2300      	movs	r3, #0
 801fb38:	ea4f 1828 	mov.w	r8, r8, asr #4
 801fb3c:	4650      	mov	r0, sl
 801fb3e:	4659      	mov	r1, fp
 801fb40:	4699      	mov	r9, r3
 801fb42:	f1b8 0f01 	cmp.w	r8, #1
 801fb46:	dc21      	bgt.n	801fb8c <_strtod_l+0x52c>
 801fb48:	b10b      	cbz	r3, 801fb4e <_strtod_l+0x4ee>
 801fb4a:	4682      	mov	sl, r0
 801fb4c:	468b      	mov	fp, r1
 801fb4e:	4b2e      	ldr	r3, [pc, #184]	; (801fc08 <_strtod_l+0x5a8>)
 801fb50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801fb54:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801fb58:	4652      	mov	r2, sl
 801fb5a:	465b      	mov	r3, fp
 801fb5c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801fb60:	f7e0 fd72 	bl	8000648 <__aeabi_dmul>
 801fb64:	4b29      	ldr	r3, [pc, #164]	; (801fc0c <_strtod_l+0x5ac>)
 801fb66:	460a      	mov	r2, r1
 801fb68:	400b      	ands	r3, r1
 801fb6a:	4929      	ldr	r1, [pc, #164]	; (801fc10 <_strtod_l+0x5b0>)
 801fb6c:	428b      	cmp	r3, r1
 801fb6e:	4682      	mov	sl, r0
 801fb70:	d8be      	bhi.n	801faf0 <_strtod_l+0x490>
 801fb72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801fb76:	428b      	cmp	r3, r1
 801fb78:	bf86      	itte	hi
 801fb7a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801fc14 <_strtod_l+0x5b4>
 801fb7e:	f04f 3aff 	movhi.w	sl, #4294967295
 801fb82:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801fb86:	2300      	movs	r3, #0
 801fb88:	9304      	str	r3, [sp, #16]
 801fb8a:	e081      	b.n	801fc90 <_strtod_l+0x630>
 801fb8c:	f018 0f01 	tst.w	r8, #1
 801fb90:	d007      	beq.n	801fba2 <_strtod_l+0x542>
 801fb92:	4b1d      	ldr	r3, [pc, #116]	; (801fc08 <_strtod_l+0x5a8>)
 801fb94:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801fb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb9c:	f7e0 fd54 	bl	8000648 <__aeabi_dmul>
 801fba0:	2301      	movs	r3, #1
 801fba2:	f109 0901 	add.w	r9, r9, #1
 801fba6:	ea4f 0868 	mov.w	r8, r8, asr #1
 801fbaa:	e7ca      	b.n	801fb42 <_strtod_l+0x4e2>
 801fbac:	d0eb      	beq.n	801fb86 <_strtod_l+0x526>
 801fbae:	f1c8 0800 	rsb	r8, r8, #0
 801fbb2:	f018 020f 	ands.w	r2, r8, #15
 801fbb6:	d00a      	beq.n	801fbce <_strtod_l+0x56e>
 801fbb8:	4b12      	ldr	r3, [pc, #72]	; (801fc04 <_strtod_l+0x5a4>)
 801fbba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fbbe:	4650      	mov	r0, sl
 801fbc0:	4659      	mov	r1, fp
 801fbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbc6:	f7e0 fe69 	bl	800089c <__aeabi_ddiv>
 801fbca:	4682      	mov	sl, r0
 801fbcc:	468b      	mov	fp, r1
 801fbce:	ea5f 1828 	movs.w	r8, r8, asr #4
 801fbd2:	d0d8      	beq.n	801fb86 <_strtod_l+0x526>
 801fbd4:	f1b8 0f1f 	cmp.w	r8, #31
 801fbd8:	dd1e      	ble.n	801fc18 <_strtod_l+0x5b8>
 801fbda:	2500      	movs	r5, #0
 801fbdc:	462e      	mov	r6, r5
 801fbde:	9509      	str	r5, [sp, #36]	; 0x24
 801fbe0:	9507      	str	r5, [sp, #28]
 801fbe2:	2322      	movs	r3, #34	; 0x22
 801fbe4:	f04f 0a00 	mov.w	sl, #0
 801fbe8:	f04f 0b00 	mov.w	fp, #0
 801fbec:	6023      	str	r3, [r4, #0]
 801fbee:	e789      	b.n	801fb04 <_strtod_l+0x4a4>
 801fbf0:	08022e95 	.word	0x08022e95
 801fbf4:	08022eac 	.word	0x08022eac
 801fbf8:	08022e8c 	.word	0x08022e8c
 801fbfc:	08022e8f 	.word	0x08022e8f
 801fc00:	0802315a 	.word	0x0802315a
 801fc04:	08023018 	.word	0x08023018
 801fc08:	08022ff0 	.word	0x08022ff0
 801fc0c:	7ff00000 	.word	0x7ff00000
 801fc10:	7ca00000 	.word	0x7ca00000
 801fc14:	7fefffff 	.word	0x7fefffff
 801fc18:	f018 0310 	ands.w	r3, r8, #16
 801fc1c:	bf18      	it	ne
 801fc1e:	236a      	movne	r3, #106	; 0x6a
 801fc20:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801ffd8 <_strtod_l+0x978>
 801fc24:	9304      	str	r3, [sp, #16]
 801fc26:	4650      	mov	r0, sl
 801fc28:	4659      	mov	r1, fp
 801fc2a:	2300      	movs	r3, #0
 801fc2c:	f018 0f01 	tst.w	r8, #1
 801fc30:	d004      	beq.n	801fc3c <_strtod_l+0x5dc>
 801fc32:	e9d9 2300 	ldrd	r2, r3, [r9]
 801fc36:	f7e0 fd07 	bl	8000648 <__aeabi_dmul>
 801fc3a:	2301      	movs	r3, #1
 801fc3c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801fc40:	f109 0908 	add.w	r9, r9, #8
 801fc44:	d1f2      	bne.n	801fc2c <_strtod_l+0x5cc>
 801fc46:	b10b      	cbz	r3, 801fc4c <_strtod_l+0x5ec>
 801fc48:	4682      	mov	sl, r0
 801fc4a:	468b      	mov	fp, r1
 801fc4c:	9b04      	ldr	r3, [sp, #16]
 801fc4e:	b1bb      	cbz	r3, 801fc80 <_strtod_l+0x620>
 801fc50:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801fc54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801fc58:	2b00      	cmp	r3, #0
 801fc5a:	4659      	mov	r1, fp
 801fc5c:	dd10      	ble.n	801fc80 <_strtod_l+0x620>
 801fc5e:	2b1f      	cmp	r3, #31
 801fc60:	f340 8128 	ble.w	801feb4 <_strtod_l+0x854>
 801fc64:	2b34      	cmp	r3, #52	; 0x34
 801fc66:	bfde      	ittt	le
 801fc68:	3b20      	suble	r3, #32
 801fc6a:	f04f 32ff 	movle.w	r2, #4294967295
 801fc6e:	fa02 f303 	lslle.w	r3, r2, r3
 801fc72:	f04f 0a00 	mov.w	sl, #0
 801fc76:	bfcc      	ite	gt
 801fc78:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801fc7c:	ea03 0b01 	andle.w	fp, r3, r1
 801fc80:	2200      	movs	r2, #0
 801fc82:	2300      	movs	r3, #0
 801fc84:	4650      	mov	r0, sl
 801fc86:	4659      	mov	r1, fp
 801fc88:	f7e0 ff46 	bl	8000b18 <__aeabi_dcmpeq>
 801fc8c:	2800      	cmp	r0, #0
 801fc8e:	d1a4      	bne.n	801fbda <_strtod_l+0x57a>
 801fc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc92:	9300      	str	r3, [sp, #0]
 801fc94:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fc96:	462b      	mov	r3, r5
 801fc98:	463a      	mov	r2, r7
 801fc9a:	4620      	mov	r0, r4
 801fc9c:	f001 f8d4 	bl	8020e48 <__s2b>
 801fca0:	9009      	str	r0, [sp, #36]	; 0x24
 801fca2:	2800      	cmp	r0, #0
 801fca4:	f43f af24 	beq.w	801faf0 <_strtod_l+0x490>
 801fca8:	9b07      	ldr	r3, [sp, #28]
 801fcaa:	1b9e      	subs	r6, r3, r6
 801fcac:	9b08      	ldr	r3, [sp, #32]
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	bfb4      	ite	lt
 801fcb2:	4633      	movlt	r3, r6
 801fcb4:	2300      	movge	r3, #0
 801fcb6:	9310      	str	r3, [sp, #64]	; 0x40
 801fcb8:	9b08      	ldr	r3, [sp, #32]
 801fcba:	2500      	movs	r5, #0
 801fcbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fcc0:	9318      	str	r3, [sp, #96]	; 0x60
 801fcc2:	462e      	mov	r6, r5
 801fcc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcc6:	4620      	mov	r0, r4
 801fcc8:	6859      	ldr	r1, [r3, #4]
 801fcca:	f001 f811 	bl	8020cf0 <_Balloc>
 801fcce:	9007      	str	r0, [sp, #28]
 801fcd0:	2800      	cmp	r0, #0
 801fcd2:	f43f af11 	beq.w	801faf8 <_strtod_l+0x498>
 801fcd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcd8:	691a      	ldr	r2, [r3, #16]
 801fcda:	3202      	adds	r2, #2
 801fcdc:	f103 010c 	add.w	r1, r3, #12
 801fce0:	0092      	lsls	r2, r2, #2
 801fce2:	300c      	adds	r0, #12
 801fce4:	f7ff fb0e 	bl	801f304 <memcpy>
 801fce8:	ec4b ab10 	vmov	d0, sl, fp
 801fcec:	aa20      	add	r2, sp, #128	; 0x80
 801fcee:	a91f      	add	r1, sp, #124	; 0x7c
 801fcf0:	4620      	mov	r0, r4
 801fcf2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801fcf6:	f001 fbe3 	bl	80214c0 <__d2b>
 801fcfa:	901e      	str	r0, [sp, #120]	; 0x78
 801fcfc:	2800      	cmp	r0, #0
 801fcfe:	f43f aefb 	beq.w	801faf8 <_strtod_l+0x498>
 801fd02:	2101      	movs	r1, #1
 801fd04:	4620      	mov	r0, r4
 801fd06:	f001 f939 	bl	8020f7c <__i2b>
 801fd0a:	4606      	mov	r6, r0
 801fd0c:	2800      	cmp	r0, #0
 801fd0e:	f43f aef3 	beq.w	801faf8 <_strtod_l+0x498>
 801fd12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fd14:	9904      	ldr	r1, [sp, #16]
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	bfab      	itete	ge
 801fd1a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801fd1c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801fd1e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801fd20:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801fd24:	bfac      	ite	ge
 801fd26:	eb03 0902 	addge.w	r9, r3, r2
 801fd2a:	1ad7      	sublt	r7, r2, r3
 801fd2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fd2e:	eba3 0801 	sub.w	r8, r3, r1
 801fd32:	4490      	add	r8, r2
 801fd34:	4ba3      	ldr	r3, [pc, #652]	; (801ffc4 <_strtod_l+0x964>)
 801fd36:	f108 38ff 	add.w	r8, r8, #4294967295
 801fd3a:	4598      	cmp	r8, r3
 801fd3c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801fd40:	f280 80cc 	bge.w	801fedc <_strtod_l+0x87c>
 801fd44:	eba3 0308 	sub.w	r3, r3, r8
 801fd48:	2b1f      	cmp	r3, #31
 801fd4a:	eba2 0203 	sub.w	r2, r2, r3
 801fd4e:	f04f 0101 	mov.w	r1, #1
 801fd52:	f300 80b6 	bgt.w	801fec2 <_strtod_l+0x862>
 801fd56:	fa01 f303 	lsl.w	r3, r1, r3
 801fd5a:	9311      	str	r3, [sp, #68]	; 0x44
 801fd5c:	2300      	movs	r3, #0
 801fd5e:	930c      	str	r3, [sp, #48]	; 0x30
 801fd60:	eb09 0802 	add.w	r8, r9, r2
 801fd64:	9b04      	ldr	r3, [sp, #16]
 801fd66:	45c1      	cmp	r9, r8
 801fd68:	4417      	add	r7, r2
 801fd6a:	441f      	add	r7, r3
 801fd6c:	464b      	mov	r3, r9
 801fd6e:	bfa8      	it	ge
 801fd70:	4643      	movge	r3, r8
 801fd72:	42bb      	cmp	r3, r7
 801fd74:	bfa8      	it	ge
 801fd76:	463b      	movge	r3, r7
 801fd78:	2b00      	cmp	r3, #0
 801fd7a:	bfc2      	ittt	gt
 801fd7c:	eba8 0803 	subgt.w	r8, r8, r3
 801fd80:	1aff      	subgt	r7, r7, r3
 801fd82:	eba9 0903 	subgt.w	r9, r9, r3
 801fd86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fd88:	2b00      	cmp	r3, #0
 801fd8a:	dd17      	ble.n	801fdbc <_strtod_l+0x75c>
 801fd8c:	4631      	mov	r1, r6
 801fd8e:	461a      	mov	r2, r3
 801fd90:	4620      	mov	r0, r4
 801fd92:	f001 f9af 	bl	80210f4 <__pow5mult>
 801fd96:	4606      	mov	r6, r0
 801fd98:	2800      	cmp	r0, #0
 801fd9a:	f43f aead 	beq.w	801faf8 <_strtod_l+0x498>
 801fd9e:	4601      	mov	r1, r0
 801fda0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801fda2:	4620      	mov	r0, r4
 801fda4:	f001 f900 	bl	8020fa8 <__multiply>
 801fda8:	900f      	str	r0, [sp, #60]	; 0x3c
 801fdaa:	2800      	cmp	r0, #0
 801fdac:	f43f aea4 	beq.w	801faf8 <_strtod_l+0x498>
 801fdb0:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fdb2:	4620      	mov	r0, r4
 801fdb4:	f000 ffdc 	bl	8020d70 <_Bfree>
 801fdb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fdba:	931e      	str	r3, [sp, #120]	; 0x78
 801fdbc:	f1b8 0f00 	cmp.w	r8, #0
 801fdc0:	f300 8091 	bgt.w	801fee6 <_strtod_l+0x886>
 801fdc4:	9b08      	ldr	r3, [sp, #32]
 801fdc6:	2b00      	cmp	r3, #0
 801fdc8:	dd08      	ble.n	801fddc <_strtod_l+0x77c>
 801fdca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fdcc:	9907      	ldr	r1, [sp, #28]
 801fdce:	4620      	mov	r0, r4
 801fdd0:	f001 f990 	bl	80210f4 <__pow5mult>
 801fdd4:	9007      	str	r0, [sp, #28]
 801fdd6:	2800      	cmp	r0, #0
 801fdd8:	f43f ae8e 	beq.w	801faf8 <_strtod_l+0x498>
 801fddc:	2f00      	cmp	r7, #0
 801fdde:	dd08      	ble.n	801fdf2 <_strtod_l+0x792>
 801fde0:	9907      	ldr	r1, [sp, #28]
 801fde2:	463a      	mov	r2, r7
 801fde4:	4620      	mov	r0, r4
 801fde6:	f001 f9df 	bl	80211a8 <__lshift>
 801fdea:	9007      	str	r0, [sp, #28]
 801fdec:	2800      	cmp	r0, #0
 801fdee:	f43f ae83 	beq.w	801faf8 <_strtod_l+0x498>
 801fdf2:	f1b9 0f00 	cmp.w	r9, #0
 801fdf6:	dd08      	ble.n	801fe0a <_strtod_l+0x7aa>
 801fdf8:	4631      	mov	r1, r6
 801fdfa:	464a      	mov	r2, r9
 801fdfc:	4620      	mov	r0, r4
 801fdfe:	f001 f9d3 	bl	80211a8 <__lshift>
 801fe02:	4606      	mov	r6, r0
 801fe04:	2800      	cmp	r0, #0
 801fe06:	f43f ae77 	beq.w	801faf8 <_strtod_l+0x498>
 801fe0a:	9a07      	ldr	r2, [sp, #28]
 801fe0c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fe0e:	4620      	mov	r0, r4
 801fe10:	f001 fa52 	bl	80212b8 <__mdiff>
 801fe14:	4605      	mov	r5, r0
 801fe16:	2800      	cmp	r0, #0
 801fe18:	f43f ae6e 	beq.w	801faf8 <_strtod_l+0x498>
 801fe1c:	68c3      	ldr	r3, [r0, #12]
 801fe1e:	930f      	str	r3, [sp, #60]	; 0x3c
 801fe20:	2300      	movs	r3, #0
 801fe22:	60c3      	str	r3, [r0, #12]
 801fe24:	4631      	mov	r1, r6
 801fe26:	f001 fa2b 	bl	8021280 <__mcmp>
 801fe2a:	2800      	cmp	r0, #0
 801fe2c:	da65      	bge.n	801fefa <_strtod_l+0x89a>
 801fe2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fe30:	ea53 030a 	orrs.w	r3, r3, sl
 801fe34:	f040 8087 	bne.w	801ff46 <_strtod_l+0x8e6>
 801fe38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	f040 8082 	bne.w	801ff46 <_strtod_l+0x8e6>
 801fe42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801fe46:	0d1b      	lsrs	r3, r3, #20
 801fe48:	051b      	lsls	r3, r3, #20
 801fe4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801fe4e:	d97a      	bls.n	801ff46 <_strtod_l+0x8e6>
 801fe50:	696b      	ldr	r3, [r5, #20]
 801fe52:	b913      	cbnz	r3, 801fe5a <_strtod_l+0x7fa>
 801fe54:	692b      	ldr	r3, [r5, #16]
 801fe56:	2b01      	cmp	r3, #1
 801fe58:	dd75      	ble.n	801ff46 <_strtod_l+0x8e6>
 801fe5a:	4629      	mov	r1, r5
 801fe5c:	2201      	movs	r2, #1
 801fe5e:	4620      	mov	r0, r4
 801fe60:	f001 f9a2 	bl	80211a8 <__lshift>
 801fe64:	4631      	mov	r1, r6
 801fe66:	4605      	mov	r5, r0
 801fe68:	f001 fa0a 	bl	8021280 <__mcmp>
 801fe6c:	2800      	cmp	r0, #0
 801fe6e:	dd6a      	ble.n	801ff46 <_strtod_l+0x8e6>
 801fe70:	9904      	ldr	r1, [sp, #16]
 801fe72:	4a55      	ldr	r2, [pc, #340]	; (801ffc8 <_strtod_l+0x968>)
 801fe74:	465b      	mov	r3, fp
 801fe76:	2900      	cmp	r1, #0
 801fe78:	f000 8085 	beq.w	801ff86 <_strtod_l+0x926>
 801fe7c:	ea02 010b 	and.w	r1, r2, fp
 801fe80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801fe84:	dc7f      	bgt.n	801ff86 <_strtod_l+0x926>
 801fe86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801fe8a:	f77f aeaa 	ble.w	801fbe2 <_strtod_l+0x582>
 801fe8e:	4a4f      	ldr	r2, [pc, #316]	; (801ffcc <_strtod_l+0x96c>)
 801fe90:	2300      	movs	r3, #0
 801fe92:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801fe96:	4650      	mov	r0, sl
 801fe98:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801fe9c:	4659      	mov	r1, fp
 801fe9e:	f7e0 fbd3 	bl	8000648 <__aeabi_dmul>
 801fea2:	460b      	mov	r3, r1
 801fea4:	4303      	orrs	r3, r0
 801fea6:	bf08      	it	eq
 801fea8:	2322      	moveq	r3, #34	; 0x22
 801feaa:	4682      	mov	sl, r0
 801feac:	468b      	mov	fp, r1
 801feae:	bf08      	it	eq
 801feb0:	6023      	streq	r3, [r4, #0]
 801feb2:	e62b      	b.n	801fb0c <_strtod_l+0x4ac>
 801feb4:	f04f 32ff 	mov.w	r2, #4294967295
 801feb8:	fa02 f303 	lsl.w	r3, r2, r3
 801febc:	ea03 0a0a 	and.w	sl, r3, sl
 801fec0:	e6de      	b.n	801fc80 <_strtod_l+0x620>
 801fec2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801fec6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801feca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801fece:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801fed2:	fa01 f308 	lsl.w	r3, r1, r8
 801fed6:	930c      	str	r3, [sp, #48]	; 0x30
 801fed8:	9111      	str	r1, [sp, #68]	; 0x44
 801feda:	e741      	b.n	801fd60 <_strtod_l+0x700>
 801fedc:	2300      	movs	r3, #0
 801fede:	930c      	str	r3, [sp, #48]	; 0x30
 801fee0:	2301      	movs	r3, #1
 801fee2:	9311      	str	r3, [sp, #68]	; 0x44
 801fee4:	e73c      	b.n	801fd60 <_strtod_l+0x700>
 801fee6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fee8:	4642      	mov	r2, r8
 801feea:	4620      	mov	r0, r4
 801feec:	f001 f95c 	bl	80211a8 <__lshift>
 801fef0:	901e      	str	r0, [sp, #120]	; 0x78
 801fef2:	2800      	cmp	r0, #0
 801fef4:	f47f af66 	bne.w	801fdc4 <_strtod_l+0x764>
 801fef8:	e5fe      	b.n	801faf8 <_strtod_l+0x498>
 801fefa:	465f      	mov	r7, fp
 801fefc:	d16e      	bne.n	801ffdc <_strtod_l+0x97c>
 801fefe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ff00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ff04:	b342      	cbz	r2, 801ff58 <_strtod_l+0x8f8>
 801ff06:	4a32      	ldr	r2, [pc, #200]	; (801ffd0 <_strtod_l+0x970>)
 801ff08:	4293      	cmp	r3, r2
 801ff0a:	d128      	bne.n	801ff5e <_strtod_l+0x8fe>
 801ff0c:	9b04      	ldr	r3, [sp, #16]
 801ff0e:	4650      	mov	r0, sl
 801ff10:	b1eb      	cbz	r3, 801ff4e <_strtod_l+0x8ee>
 801ff12:	4a2d      	ldr	r2, [pc, #180]	; (801ffc8 <_strtod_l+0x968>)
 801ff14:	403a      	ands	r2, r7
 801ff16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801ff1a:	f04f 31ff 	mov.w	r1, #4294967295
 801ff1e:	d819      	bhi.n	801ff54 <_strtod_l+0x8f4>
 801ff20:	0d12      	lsrs	r2, r2, #20
 801ff22:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ff26:	fa01 f303 	lsl.w	r3, r1, r3
 801ff2a:	4298      	cmp	r0, r3
 801ff2c:	d117      	bne.n	801ff5e <_strtod_l+0x8fe>
 801ff2e:	4b29      	ldr	r3, [pc, #164]	; (801ffd4 <_strtod_l+0x974>)
 801ff30:	429f      	cmp	r7, r3
 801ff32:	d102      	bne.n	801ff3a <_strtod_l+0x8da>
 801ff34:	3001      	adds	r0, #1
 801ff36:	f43f addf 	beq.w	801faf8 <_strtod_l+0x498>
 801ff3a:	4b23      	ldr	r3, [pc, #140]	; (801ffc8 <_strtod_l+0x968>)
 801ff3c:	403b      	ands	r3, r7
 801ff3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801ff42:	f04f 0a00 	mov.w	sl, #0
 801ff46:	9b04      	ldr	r3, [sp, #16]
 801ff48:	2b00      	cmp	r3, #0
 801ff4a:	d1a0      	bne.n	801fe8e <_strtod_l+0x82e>
 801ff4c:	e5de      	b.n	801fb0c <_strtod_l+0x4ac>
 801ff4e:	f04f 33ff 	mov.w	r3, #4294967295
 801ff52:	e7ea      	b.n	801ff2a <_strtod_l+0x8ca>
 801ff54:	460b      	mov	r3, r1
 801ff56:	e7e8      	b.n	801ff2a <_strtod_l+0x8ca>
 801ff58:	ea53 030a 	orrs.w	r3, r3, sl
 801ff5c:	d088      	beq.n	801fe70 <_strtod_l+0x810>
 801ff5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ff60:	b1db      	cbz	r3, 801ff9a <_strtod_l+0x93a>
 801ff62:	423b      	tst	r3, r7
 801ff64:	d0ef      	beq.n	801ff46 <_strtod_l+0x8e6>
 801ff66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ff68:	9a04      	ldr	r2, [sp, #16]
 801ff6a:	4650      	mov	r0, sl
 801ff6c:	4659      	mov	r1, fp
 801ff6e:	b1c3      	cbz	r3, 801ffa2 <_strtod_l+0x942>
 801ff70:	f7ff fb57 	bl	801f622 <sulp>
 801ff74:	4602      	mov	r2, r0
 801ff76:	460b      	mov	r3, r1
 801ff78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ff7c:	f7e0 f9ae 	bl	80002dc <__adddf3>
 801ff80:	4682      	mov	sl, r0
 801ff82:	468b      	mov	fp, r1
 801ff84:	e7df      	b.n	801ff46 <_strtod_l+0x8e6>
 801ff86:	4013      	ands	r3, r2
 801ff88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801ff8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801ff90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801ff94:	f04f 3aff 	mov.w	sl, #4294967295
 801ff98:	e7d5      	b.n	801ff46 <_strtod_l+0x8e6>
 801ff9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ff9c:	ea13 0f0a 	tst.w	r3, sl
 801ffa0:	e7e0      	b.n	801ff64 <_strtod_l+0x904>
 801ffa2:	f7ff fb3e 	bl	801f622 <sulp>
 801ffa6:	4602      	mov	r2, r0
 801ffa8:	460b      	mov	r3, r1
 801ffaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ffae:	f7e0 f993 	bl	80002d8 <__aeabi_dsub>
 801ffb2:	2200      	movs	r2, #0
 801ffb4:	2300      	movs	r3, #0
 801ffb6:	4682      	mov	sl, r0
 801ffb8:	468b      	mov	fp, r1
 801ffba:	f7e0 fdad 	bl	8000b18 <__aeabi_dcmpeq>
 801ffbe:	2800      	cmp	r0, #0
 801ffc0:	d0c1      	beq.n	801ff46 <_strtod_l+0x8e6>
 801ffc2:	e60e      	b.n	801fbe2 <_strtod_l+0x582>
 801ffc4:	fffffc02 	.word	0xfffffc02
 801ffc8:	7ff00000 	.word	0x7ff00000
 801ffcc:	39500000 	.word	0x39500000
 801ffd0:	000fffff 	.word	0x000fffff
 801ffd4:	7fefffff 	.word	0x7fefffff
 801ffd8:	08022ec0 	.word	0x08022ec0
 801ffdc:	4631      	mov	r1, r6
 801ffde:	4628      	mov	r0, r5
 801ffe0:	f001 faca 	bl	8021578 <__ratio>
 801ffe4:	ec59 8b10 	vmov	r8, r9, d0
 801ffe8:	ee10 0a10 	vmov	r0, s0
 801ffec:	2200      	movs	r2, #0
 801ffee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fff2:	4649      	mov	r1, r9
 801fff4:	f7e0 fda4 	bl	8000b40 <__aeabi_dcmple>
 801fff8:	2800      	cmp	r0, #0
 801fffa:	d07c      	beq.n	80200f6 <_strtod_l+0xa96>
 801fffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fffe:	2b00      	cmp	r3, #0
 8020000:	d04c      	beq.n	802009c <_strtod_l+0xa3c>
 8020002:	4b95      	ldr	r3, [pc, #596]	; (8020258 <_strtod_l+0xbf8>)
 8020004:	2200      	movs	r2, #0
 8020006:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 802000a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8020258 <_strtod_l+0xbf8>
 802000e:	f04f 0800 	mov.w	r8, #0
 8020012:	4b92      	ldr	r3, [pc, #584]	; (802025c <_strtod_l+0xbfc>)
 8020014:	403b      	ands	r3, r7
 8020016:	9311      	str	r3, [sp, #68]	; 0x44
 8020018:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802001a:	4b91      	ldr	r3, [pc, #580]	; (8020260 <_strtod_l+0xc00>)
 802001c:	429a      	cmp	r2, r3
 802001e:	f040 80b2 	bne.w	8020186 <_strtod_l+0xb26>
 8020022:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020026:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802002a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 802002e:	ec4b ab10 	vmov	d0, sl, fp
 8020032:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8020036:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802003a:	f001 f9c5 	bl	80213c8 <__ulp>
 802003e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020042:	ec53 2b10 	vmov	r2, r3, d0
 8020046:	f7e0 faff 	bl	8000648 <__aeabi_dmul>
 802004a:	4652      	mov	r2, sl
 802004c:	465b      	mov	r3, fp
 802004e:	f7e0 f945 	bl	80002dc <__adddf3>
 8020052:	460b      	mov	r3, r1
 8020054:	4981      	ldr	r1, [pc, #516]	; (802025c <_strtod_l+0xbfc>)
 8020056:	4a83      	ldr	r2, [pc, #524]	; (8020264 <_strtod_l+0xc04>)
 8020058:	4019      	ands	r1, r3
 802005a:	4291      	cmp	r1, r2
 802005c:	4682      	mov	sl, r0
 802005e:	d95e      	bls.n	802011e <_strtod_l+0xabe>
 8020060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020062:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020066:	4293      	cmp	r3, r2
 8020068:	d103      	bne.n	8020072 <_strtod_l+0xa12>
 802006a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802006c:	3301      	adds	r3, #1
 802006e:	f43f ad43 	beq.w	801faf8 <_strtod_l+0x498>
 8020072:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8020270 <_strtod_l+0xc10>
 8020076:	f04f 3aff 	mov.w	sl, #4294967295
 802007a:	991e      	ldr	r1, [sp, #120]	; 0x78
 802007c:	4620      	mov	r0, r4
 802007e:	f000 fe77 	bl	8020d70 <_Bfree>
 8020082:	9907      	ldr	r1, [sp, #28]
 8020084:	4620      	mov	r0, r4
 8020086:	f000 fe73 	bl	8020d70 <_Bfree>
 802008a:	4631      	mov	r1, r6
 802008c:	4620      	mov	r0, r4
 802008e:	f000 fe6f 	bl	8020d70 <_Bfree>
 8020092:	4629      	mov	r1, r5
 8020094:	4620      	mov	r0, r4
 8020096:	f000 fe6b 	bl	8020d70 <_Bfree>
 802009a:	e613      	b.n	801fcc4 <_strtod_l+0x664>
 802009c:	f1ba 0f00 	cmp.w	sl, #0
 80200a0:	d11b      	bne.n	80200da <_strtod_l+0xa7a>
 80200a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80200a6:	b9f3      	cbnz	r3, 80200e6 <_strtod_l+0xa86>
 80200a8:	4b6b      	ldr	r3, [pc, #428]	; (8020258 <_strtod_l+0xbf8>)
 80200aa:	2200      	movs	r2, #0
 80200ac:	4640      	mov	r0, r8
 80200ae:	4649      	mov	r1, r9
 80200b0:	f7e0 fd3c 	bl	8000b2c <__aeabi_dcmplt>
 80200b4:	b9d0      	cbnz	r0, 80200ec <_strtod_l+0xa8c>
 80200b6:	4640      	mov	r0, r8
 80200b8:	4649      	mov	r1, r9
 80200ba:	4b6b      	ldr	r3, [pc, #428]	; (8020268 <_strtod_l+0xc08>)
 80200bc:	2200      	movs	r2, #0
 80200be:	f7e0 fac3 	bl	8000648 <__aeabi_dmul>
 80200c2:	4680      	mov	r8, r0
 80200c4:	4689      	mov	r9, r1
 80200c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80200ca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80200ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80200d0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80200d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80200d8:	e79b      	b.n	8020012 <_strtod_l+0x9b2>
 80200da:	f1ba 0f01 	cmp.w	sl, #1
 80200de:	d102      	bne.n	80200e6 <_strtod_l+0xa86>
 80200e0:	2f00      	cmp	r7, #0
 80200e2:	f43f ad7e 	beq.w	801fbe2 <_strtod_l+0x582>
 80200e6:	4b61      	ldr	r3, [pc, #388]	; (802026c <_strtod_l+0xc0c>)
 80200e8:	2200      	movs	r2, #0
 80200ea:	e78c      	b.n	8020006 <_strtod_l+0x9a6>
 80200ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8020268 <_strtod_l+0xc08>
 80200f0:	f04f 0800 	mov.w	r8, #0
 80200f4:	e7e7      	b.n	80200c6 <_strtod_l+0xa66>
 80200f6:	4b5c      	ldr	r3, [pc, #368]	; (8020268 <_strtod_l+0xc08>)
 80200f8:	4640      	mov	r0, r8
 80200fa:	4649      	mov	r1, r9
 80200fc:	2200      	movs	r2, #0
 80200fe:	f7e0 faa3 	bl	8000648 <__aeabi_dmul>
 8020102:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020104:	4680      	mov	r8, r0
 8020106:	4689      	mov	r9, r1
 8020108:	b933      	cbnz	r3, 8020118 <_strtod_l+0xab8>
 802010a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802010e:	9012      	str	r0, [sp, #72]	; 0x48
 8020110:	9313      	str	r3, [sp, #76]	; 0x4c
 8020112:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8020116:	e7dd      	b.n	80200d4 <_strtod_l+0xa74>
 8020118:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 802011c:	e7f9      	b.n	8020112 <_strtod_l+0xab2>
 802011e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8020122:	9b04      	ldr	r3, [sp, #16]
 8020124:	2b00      	cmp	r3, #0
 8020126:	d1a8      	bne.n	802007a <_strtod_l+0xa1a>
 8020128:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802012c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802012e:	0d1b      	lsrs	r3, r3, #20
 8020130:	051b      	lsls	r3, r3, #20
 8020132:	429a      	cmp	r2, r3
 8020134:	d1a1      	bne.n	802007a <_strtod_l+0xa1a>
 8020136:	4640      	mov	r0, r8
 8020138:	4649      	mov	r1, r9
 802013a:	f7e0 fdcd 	bl	8000cd8 <__aeabi_d2lz>
 802013e:	f7e0 fa55 	bl	80005ec <__aeabi_l2d>
 8020142:	4602      	mov	r2, r0
 8020144:	460b      	mov	r3, r1
 8020146:	4640      	mov	r0, r8
 8020148:	4649      	mov	r1, r9
 802014a:	f7e0 f8c5 	bl	80002d8 <__aeabi_dsub>
 802014e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020150:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020154:	ea43 030a 	orr.w	r3, r3, sl
 8020158:	4313      	orrs	r3, r2
 802015a:	4680      	mov	r8, r0
 802015c:	4689      	mov	r9, r1
 802015e:	d053      	beq.n	8020208 <_strtod_l+0xba8>
 8020160:	a335      	add	r3, pc, #212	; (adr r3, 8020238 <_strtod_l+0xbd8>)
 8020162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020166:	f7e0 fce1 	bl	8000b2c <__aeabi_dcmplt>
 802016a:	2800      	cmp	r0, #0
 802016c:	f47f acce 	bne.w	801fb0c <_strtod_l+0x4ac>
 8020170:	a333      	add	r3, pc, #204	; (adr r3, 8020240 <_strtod_l+0xbe0>)
 8020172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020176:	4640      	mov	r0, r8
 8020178:	4649      	mov	r1, r9
 802017a:	f7e0 fcf5 	bl	8000b68 <__aeabi_dcmpgt>
 802017e:	2800      	cmp	r0, #0
 8020180:	f43f af7b 	beq.w	802007a <_strtod_l+0xa1a>
 8020184:	e4c2      	b.n	801fb0c <_strtod_l+0x4ac>
 8020186:	9b04      	ldr	r3, [sp, #16]
 8020188:	b333      	cbz	r3, 80201d8 <_strtod_l+0xb78>
 802018a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802018c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8020190:	d822      	bhi.n	80201d8 <_strtod_l+0xb78>
 8020192:	a32d      	add	r3, pc, #180	; (adr r3, 8020248 <_strtod_l+0xbe8>)
 8020194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020198:	4640      	mov	r0, r8
 802019a:	4649      	mov	r1, r9
 802019c:	f7e0 fcd0 	bl	8000b40 <__aeabi_dcmple>
 80201a0:	b1a0      	cbz	r0, 80201cc <_strtod_l+0xb6c>
 80201a2:	4649      	mov	r1, r9
 80201a4:	4640      	mov	r0, r8
 80201a6:	f7e0 fd27 	bl	8000bf8 <__aeabi_d2uiz>
 80201aa:	2801      	cmp	r0, #1
 80201ac:	bf38      	it	cc
 80201ae:	2001      	movcc	r0, #1
 80201b0:	f7e0 f9d0 	bl	8000554 <__aeabi_ui2d>
 80201b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80201b6:	4680      	mov	r8, r0
 80201b8:	4689      	mov	r9, r1
 80201ba:	bb13      	cbnz	r3, 8020202 <_strtod_l+0xba2>
 80201bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80201c0:	9014      	str	r0, [sp, #80]	; 0x50
 80201c2:	9315      	str	r3, [sp, #84]	; 0x54
 80201c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80201c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80201cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80201ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80201d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80201d4:	1a9b      	subs	r3, r3, r2
 80201d6:	930d      	str	r3, [sp, #52]	; 0x34
 80201d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80201dc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80201e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80201e4:	f001 f8f0 	bl	80213c8 <__ulp>
 80201e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80201ec:	ec53 2b10 	vmov	r2, r3, d0
 80201f0:	f7e0 fa2a 	bl	8000648 <__aeabi_dmul>
 80201f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80201f8:	f7e0 f870 	bl	80002dc <__adddf3>
 80201fc:	4682      	mov	sl, r0
 80201fe:	468b      	mov	fp, r1
 8020200:	e78f      	b.n	8020122 <_strtod_l+0xac2>
 8020202:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8020206:	e7dd      	b.n	80201c4 <_strtod_l+0xb64>
 8020208:	a311      	add	r3, pc, #68	; (adr r3, 8020250 <_strtod_l+0xbf0>)
 802020a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802020e:	f7e0 fc8d 	bl	8000b2c <__aeabi_dcmplt>
 8020212:	e7b4      	b.n	802017e <_strtod_l+0xb1e>
 8020214:	2300      	movs	r3, #0
 8020216:	930e      	str	r3, [sp, #56]	; 0x38
 8020218:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802021a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802021c:	6013      	str	r3, [r2, #0]
 802021e:	f7ff ba65 	b.w	801f6ec <_strtod_l+0x8c>
 8020222:	2b65      	cmp	r3, #101	; 0x65
 8020224:	f43f ab5d 	beq.w	801f8e2 <_strtod_l+0x282>
 8020228:	2b45      	cmp	r3, #69	; 0x45
 802022a:	f43f ab5a 	beq.w	801f8e2 <_strtod_l+0x282>
 802022e:	2201      	movs	r2, #1
 8020230:	f7ff bb92 	b.w	801f958 <_strtod_l+0x2f8>
 8020234:	f3af 8000 	nop.w
 8020238:	94a03595 	.word	0x94a03595
 802023c:	3fdfffff 	.word	0x3fdfffff
 8020240:	35afe535 	.word	0x35afe535
 8020244:	3fe00000 	.word	0x3fe00000
 8020248:	ffc00000 	.word	0xffc00000
 802024c:	41dfffff 	.word	0x41dfffff
 8020250:	94a03595 	.word	0x94a03595
 8020254:	3fcfffff 	.word	0x3fcfffff
 8020258:	3ff00000 	.word	0x3ff00000
 802025c:	7ff00000 	.word	0x7ff00000
 8020260:	7fe00000 	.word	0x7fe00000
 8020264:	7c9fffff 	.word	0x7c9fffff
 8020268:	3fe00000 	.word	0x3fe00000
 802026c:	bff00000 	.word	0xbff00000
 8020270:	7fefffff 	.word	0x7fefffff

08020274 <strtod>:
 8020274:	460a      	mov	r2, r1
 8020276:	4601      	mov	r1, r0
 8020278:	4802      	ldr	r0, [pc, #8]	; (8020284 <strtod+0x10>)
 802027a:	4b03      	ldr	r3, [pc, #12]	; (8020288 <strtod+0x14>)
 802027c:	6800      	ldr	r0, [r0, #0]
 802027e:	f7ff b9ef 	b.w	801f660 <_strtod_l>
 8020282:	bf00      	nop
 8020284:	200002b8 	.word	0x200002b8
 8020288:	20000320 	.word	0x20000320

0802028c <_strtol_l.isra.0>:
 802028c:	2b01      	cmp	r3, #1
 802028e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020292:	d001      	beq.n	8020298 <_strtol_l.isra.0+0xc>
 8020294:	2b24      	cmp	r3, #36	; 0x24
 8020296:	d906      	bls.n	80202a6 <_strtol_l.isra.0+0x1a>
 8020298:	f7fe fdda 	bl	801ee50 <__errno>
 802029c:	2316      	movs	r3, #22
 802029e:	6003      	str	r3, [r0, #0]
 80202a0:	2000      	movs	r0, #0
 80202a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202a6:	4f3a      	ldr	r7, [pc, #232]	; (8020390 <_strtol_l.isra.0+0x104>)
 80202a8:	468e      	mov	lr, r1
 80202aa:	4676      	mov	r6, lr
 80202ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80202b0:	5de5      	ldrb	r5, [r4, r7]
 80202b2:	f015 0508 	ands.w	r5, r5, #8
 80202b6:	d1f8      	bne.n	80202aa <_strtol_l.isra.0+0x1e>
 80202b8:	2c2d      	cmp	r4, #45	; 0x2d
 80202ba:	d134      	bne.n	8020326 <_strtol_l.isra.0+0x9a>
 80202bc:	f89e 4000 	ldrb.w	r4, [lr]
 80202c0:	f04f 0801 	mov.w	r8, #1
 80202c4:	f106 0e02 	add.w	lr, r6, #2
 80202c8:	2b00      	cmp	r3, #0
 80202ca:	d05c      	beq.n	8020386 <_strtol_l.isra.0+0xfa>
 80202cc:	2b10      	cmp	r3, #16
 80202ce:	d10c      	bne.n	80202ea <_strtol_l.isra.0+0x5e>
 80202d0:	2c30      	cmp	r4, #48	; 0x30
 80202d2:	d10a      	bne.n	80202ea <_strtol_l.isra.0+0x5e>
 80202d4:	f89e 4000 	ldrb.w	r4, [lr]
 80202d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80202dc:	2c58      	cmp	r4, #88	; 0x58
 80202de:	d14d      	bne.n	802037c <_strtol_l.isra.0+0xf0>
 80202e0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80202e4:	2310      	movs	r3, #16
 80202e6:	f10e 0e02 	add.w	lr, lr, #2
 80202ea:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80202ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80202f2:	2600      	movs	r6, #0
 80202f4:	fbbc f9f3 	udiv	r9, ip, r3
 80202f8:	4635      	mov	r5, r6
 80202fa:	fb03 ca19 	mls	sl, r3, r9, ip
 80202fe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020302:	2f09      	cmp	r7, #9
 8020304:	d818      	bhi.n	8020338 <_strtol_l.isra.0+0xac>
 8020306:	463c      	mov	r4, r7
 8020308:	42a3      	cmp	r3, r4
 802030a:	dd24      	ble.n	8020356 <_strtol_l.isra.0+0xca>
 802030c:	2e00      	cmp	r6, #0
 802030e:	db1f      	blt.n	8020350 <_strtol_l.isra.0+0xc4>
 8020310:	45a9      	cmp	r9, r5
 8020312:	d31d      	bcc.n	8020350 <_strtol_l.isra.0+0xc4>
 8020314:	d101      	bne.n	802031a <_strtol_l.isra.0+0x8e>
 8020316:	45a2      	cmp	sl, r4
 8020318:	db1a      	blt.n	8020350 <_strtol_l.isra.0+0xc4>
 802031a:	fb05 4503 	mla	r5, r5, r3, r4
 802031e:	2601      	movs	r6, #1
 8020320:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020324:	e7eb      	b.n	80202fe <_strtol_l.isra.0+0x72>
 8020326:	2c2b      	cmp	r4, #43	; 0x2b
 8020328:	bf08      	it	eq
 802032a:	f89e 4000 	ldrbeq.w	r4, [lr]
 802032e:	46a8      	mov	r8, r5
 8020330:	bf08      	it	eq
 8020332:	f106 0e02 	addeq.w	lr, r6, #2
 8020336:	e7c7      	b.n	80202c8 <_strtol_l.isra.0+0x3c>
 8020338:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802033c:	2f19      	cmp	r7, #25
 802033e:	d801      	bhi.n	8020344 <_strtol_l.isra.0+0xb8>
 8020340:	3c37      	subs	r4, #55	; 0x37
 8020342:	e7e1      	b.n	8020308 <_strtol_l.isra.0+0x7c>
 8020344:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8020348:	2f19      	cmp	r7, #25
 802034a:	d804      	bhi.n	8020356 <_strtol_l.isra.0+0xca>
 802034c:	3c57      	subs	r4, #87	; 0x57
 802034e:	e7db      	b.n	8020308 <_strtol_l.isra.0+0x7c>
 8020350:	f04f 36ff 	mov.w	r6, #4294967295
 8020354:	e7e4      	b.n	8020320 <_strtol_l.isra.0+0x94>
 8020356:	2e00      	cmp	r6, #0
 8020358:	da05      	bge.n	8020366 <_strtol_l.isra.0+0xda>
 802035a:	2322      	movs	r3, #34	; 0x22
 802035c:	6003      	str	r3, [r0, #0]
 802035e:	4665      	mov	r5, ip
 8020360:	b942      	cbnz	r2, 8020374 <_strtol_l.isra.0+0xe8>
 8020362:	4628      	mov	r0, r5
 8020364:	e79d      	b.n	80202a2 <_strtol_l.isra.0+0x16>
 8020366:	f1b8 0f00 	cmp.w	r8, #0
 802036a:	d000      	beq.n	802036e <_strtol_l.isra.0+0xe2>
 802036c:	426d      	negs	r5, r5
 802036e:	2a00      	cmp	r2, #0
 8020370:	d0f7      	beq.n	8020362 <_strtol_l.isra.0+0xd6>
 8020372:	b10e      	cbz	r6, 8020378 <_strtol_l.isra.0+0xec>
 8020374:	f10e 31ff 	add.w	r1, lr, #4294967295
 8020378:	6011      	str	r1, [r2, #0]
 802037a:	e7f2      	b.n	8020362 <_strtol_l.isra.0+0xd6>
 802037c:	2430      	movs	r4, #48	; 0x30
 802037e:	2b00      	cmp	r3, #0
 8020380:	d1b3      	bne.n	80202ea <_strtol_l.isra.0+0x5e>
 8020382:	2308      	movs	r3, #8
 8020384:	e7b1      	b.n	80202ea <_strtol_l.isra.0+0x5e>
 8020386:	2c30      	cmp	r4, #48	; 0x30
 8020388:	d0a4      	beq.n	80202d4 <_strtol_l.isra.0+0x48>
 802038a:	230a      	movs	r3, #10
 802038c:	e7ad      	b.n	80202ea <_strtol_l.isra.0+0x5e>
 802038e:	bf00      	nop
 8020390:	08022d25 	.word	0x08022d25

08020394 <strtol>:
 8020394:	4613      	mov	r3, r2
 8020396:	460a      	mov	r2, r1
 8020398:	4601      	mov	r1, r0
 802039a:	4802      	ldr	r0, [pc, #8]	; (80203a4 <strtol+0x10>)
 802039c:	6800      	ldr	r0, [r0, #0]
 802039e:	f7ff bf75 	b.w	802028c <_strtol_l.isra.0>
 80203a2:	bf00      	nop
 80203a4:	200002b8 	.word	0x200002b8

080203a8 <__swbuf_r>:
 80203a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80203aa:	460e      	mov	r6, r1
 80203ac:	4614      	mov	r4, r2
 80203ae:	4605      	mov	r5, r0
 80203b0:	b118      	cbz	r0, 80203ba <__swbuf_r+0x12>
 80203b2:	6983      	ldr	r3, [r0, #24]
 80203b4:	b90b      	cbnz	r3, 80203ba <__swbuf_r+0x12>
 80203b6:	f7fe fe6b 	bl	801f090 <__sinit>
 80203ba:	4b21      	ldr	r3, [pc, #132]	; (8020440 <__swbuf_r+0x98>)
 80203bc:	429c      	cmp	r4, r3
 80203be:	d12b      	bne.n	8020418 <__swbuf_r+0x70>
 80203c0:	686c      	ldr	r4, [r5, #4]
 80203c2:	69a3      	ldr	r3, [r4, #24]
 80203c4:	60a3      	str	r3, [r4, #8]
 80203c6:	89a3      	ldrh	r3, [r4, #12]
 80203c8:	071a      	lsls	r2, r3, #28
 80203ca:	d52f      	bpl.n	802042c <__swbuf_r+0x84>
 80203cc:	6923      	ldr	r3, [r4, #16]
 80203ce:	b36b      	cbz	r3, 802042c <__swbuf_r+0x84>
 80203d0:	6923      	ldr	r3, [r4, #16]
 80203d2:	6820      	ldr	r0, [r4, #0]
 80203d4:	1ac0      	subs	r0, r0, r3
 80203d6:	6963      	ldr	r3, [r4, #20]
 80203d8:	b2f6      	uxtb	r6, r6
 80203da:	4283      	cmp	r3, r0
 80203dc:	4637      	mov	r7, r6
 80203de:	dc04      	bgt.n	80203ea <__swbuf_r+0x42>
 80203e0:	4621      	mov	r1, r4
 80203e2:	4628      	mov	r0, r5
 80203e4:	f7fe fdc0 	bl	801ef68 <_fflush_r>
 80203e8:	bb30      	cbnz	r0, 8020438 <__swbuf_r+0x90>
 80203ea:	68a3      	ldr	r3, [r4, #8]
 80203ec:	3b01      	subs	r3, #1
 80203ee:	60a3      	str	r3, [r4, #8]
 80203f0:	6823      	ldr	r3, [r4, #0]
 80203f2:	1c5a      	adds	r2, r3, #1
 80203f4:	6022      	str	r2, [r4, #0]
 80203f6:	701e      	strb	r6, [r3, #0]
 80203f8:	6963      	ldr	r3, [r4, #20]
 80203fa:	3001      	adds	r0, #1
 80203fc:	4283      	cmp	r3, r0
 80203fe:	d004      	beq.n	802040a <__swbuf_r+0x62>
 8020400:	89a3      	ldrh	r3, [r4, #12]
 8020402:	07db      	lsls	r3, r3, #31
 8020404:	d506      	bpl.n	8020414 <__swbuf_r+0x6c>
 8020406:	2e0a      	cmp	r6, #10
 8020408:	d104      	bne.n	8020414 <__swbuf_r+0x6c>
 802040a:	4621      	mov	r1, r4
 802040c:	4628      	mov	r0, r5
 802040e:	f7fe fdab 	bl	801ef68 <_fflush_r>
 8020412:	b988      	cbnz	r0, 8020438 <__swbuf_r+0x90>
 8020414:	4638      	mov	r0, r7
 8020416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020418:	4b0a      	ldr	r3, [pc, #40]	; (8020444 <__swbuf_r+0x9c>)
 802041a:	429c      	cmp	r4, r3
 802041c:	d101      	bne.n	8020422 <__swbuf_r+0x7a>
 802041e:	68ac      	ldr	r4, [r5, #8]
 8020420:	e7cf      	b.n	80203c2 <__swbuf_r+0x1a>
 8020422:	4b09      	ldr	r3, [pc, #36]	; (8020448 <__swbuf_r+0xa0>)
 8020424:	429c      	cmp	r4, r3
 8020426:	bf08      	it	eq
 8020428:	68ec      	ldreq	r4, [r5, #12]
 802042a:	e7ca      	b.n	80203c2 <__swbuf_r+0x1a>
 802042c:	4621      	mov	r1, r4
 802042e:	4628      	mov	r0, r5
 8020430:	f000 f81e 	bl	8020470 <__swsetup_r>
 8020434:	2800      	cmp	r0, #0
 8020436:	d0cb      	beq.n	80203d0 <__swbuf_r+0x28>
 8020438:	f04f 37ff 	mov.w	r7, #4294967295
 802043c:	e7ea      	b.n	8020414 <__swbuf_r+0x6c>
 802043e:	bf00      	nop
 8020440:	08022e48 	.word	0x08022e48
 8020444:	08022e68 	.word	0x08022e68
 8020448:	08022e28 	.word	0x08022e28

0802044c <_write_r>:
 802044c:	b538      	push	{r3, r4, r5, lr}
 802044e:	4d07      	ldr	r5, [pc, #28]	; (802046c <_write_r+0x20>)
 8020450:	4604      	mov	r4, r0
 8020452:	4608      	mov	r0, r1
 8020454:	4611      	mov	r1, r2
 8020456:	2200      	movs	r2, #0
 8020458:	602a      	str	r2, [r5, #0]
 802045a:	461a      	mov	r2, r3
 802045c:	f7fe fc8e 	bl	801ed7c <_write>
 8020460:	1c43      	adds	r3, r0, #1
 8020462:	d102      	bne.n	802046a <_write_r+0x1e>
 8020464:	682b      	ldr	r3, [r5, #0]
 8020466:	b103      	cbz	r3, 802046a <_write_r+0x1e>
 8020468:	6023      	str	r3, [r4, #0]
 802046a:	bd38      	pop	{r3, r4, r5, pc}
 802046c:	2001d46c 	.word	0x2001d46c

08020470 <__swsetup_r>:
 8020470:	4b32      	ldr	r3, [pc, #200]	; (802053c <__swsetup_r+0xcc>)
 8020472:	b570      	push	{r4, r5, r6, lr}
 8020474:	681d      	ldr	r5, [r3, #0]
 8020476:	4606      	mov	r6, r0
 8020478:	460c      	mov	r4, r1
 802047a:	b125      	cbz	r5, 8020486 <__swsetup_r+0x16>
 802047c:	69ab      	ldr	r3, [r5, #24]
 802047e:	b913      	cbnz	r3, 8020486 <__swsetup_r+0x16>
 8020480:	4628      	mov	r0, r5
 8020482:	f7fe fe05 	bl	801f090 <__sinit>
 8020486:	4b2e      	ldr	r3, [pc, #184]	; (8020540 <__swsetup_r+0xd0>)
 8020488:	429c      	cmp	r4, r3
 802048a:	d10f      	bne.n	80204ac <__swsetup_r+0x3c>
 802048c:	686c      	ldr	r4, [r5, #4]
 802048e:	89a3      	ldrh	r3, [r4, #12]
 8020490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020494:	0719      	lsls	r1, r3, #28
 8020496:	d42c      	bmi.n	80204f2 <__swsetup_r+0x82>
 8020498:	06dd      	lsls	r5, r3, #27
 802049a:	d411      	bmi.n	80204c0 <__swsetup_r+0x50>
 802049c:	2309      	movs	r3, #9
 802049e:	6033      	str	r3, [r6, #0]
 80204a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80204a4:	81a3      	strh	r3, [r4, #12]
 80204a6:	f04f 30ff 	mov.w	r0, #4294967295
 80204aa:	e03e      	b.n	802052a <__swsetup_r+0xba>
 80204ac:	4b25      	ldr	r3, [pc, #148]	; (8020544 <__swsetup_r+0xd4>)
 80204ae:	429c      	cmp	r4, r3
 80204b0:	d101      	bne.n	80204b6 <__swsetup_r+0x46>
 80204b2:	68ac      	ldr	r4, [r5, #8]
 80204b4:	e7eb      	b.n	802048e <__swsetup_r+0x1e>
 80204b6:	4b24      	ldr	r3, [pc, #144]	; (8020548 <__swsetup_r+0xd8>)
 80204b8:	429c      	cmp	r4, r3
 80204ba:	bf08      	it	eq
 80204bc:	68ec      	ldreq	r4, [r5, #12]
 80204be:	e7e6      	b.n	802048e <__swsetup_r+0x1e>
 80204c0:	0758      	lsls	r0, r3, #29
 80204c2:	d512      	bpl.n	80204ea <__swsetup_r+0x7a>
 80204c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80204c6:	b141      	cbz	r1, 80204da <__swsetup_r+0x6a>
 80204c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80204cc:	4299      	cmp	r1, r3
 80204ce:	d002      	beq.n	80204d6 <__swsetup_r+0x66>
 80204d0:	4630      	mov	r0, r6
 80204d2:	f7fe ff57 	bl	801f384 <_free_r>
 80204d6:	2300      	movs	r3, #0
 80204d8:	6363      	str	r3, [r4, #52]	; 0x34
 80204da:	89a3      	ldrh	r3, [r4, #12]
 80204dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80204e0:	81a3      	strh	r3, [r4, #12]
 80204e2:	2300      	movs	r3, #0
 80204e4:	6063      	str	r3, [r4, #4]
 80204e6:	6923      	ldr	r3, [r4, #16]
 80204e8:	6023      	str	r3, [r4, #0]
 80204ea:	89a3      	ldrh	r3, [r4, #12]
 80204ec:	f043 0308 	orr.w	r3, r3, #8
 80204f0:	81a3      	strh	r3, [r4, #12]
 80204f2:	6923      	ldr	r3, [r4, #16]
 80204f4:	b94b      	cbnz	r3, 802050a <__swsetup_r+0x9a>
 80204f6:	89a3      	ldrh	r3, [r4, #12]
 80204f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80204fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020500:	d003      	beq.n	802050a <__swsetup_r+0x9a>
 8020502:	4621      	mov	r1, r4
 8020504:	4630      	mov	r0, r6
 8020506:	f7fe fead 	bl	801f264 <__smakebuf_r>
 802050a:	89a0      	ldrh	r0, [r4, #12]
 802050c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020510:	f010 0301 	ands.w	r3, r0, #1
 8020514:	d00a      	beq.n	802052c <__swsetup_r+0xbc>
 8020516:	2300      	movs	r3, #0
 8020518:	60a3      	str	r3, [r4, #8]
 802051a:	6963      	ldr	r3, [r4, #20]
 802051c:	425b      	negs	r3, r3
 802051e:	61a3      	str	r3, [r4, #24]
 8020520:	6923      	ldr	r3, [r4, #16]
 8020522:	b943      	cbnz	r3, 8020536 <__swsetup_r+0xc6>
 8020524:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020528:	d1ba      	bne.n	80204a0 <__swsetup_r+0x30>
 802052a:	bd70      	pop	{r4, r5, r6, pc}
 802052c:	0781      	lsls	r1, r0, #30
 802052e:	bf58      	it	pl
 8020530:	6963      	ldrpl	r3, [r4, #20]
 8020532:	60a3      	str	r3, [r4, #8]
 8020534:	e7f4      	b.n	8020520 <__swsetup_r+0xb0>
 8020536:	2000      	movs	r0, #0
 8020538:	e7f7      	b.n	802052a <__swsetup_r+0xba>
 802053a:	bf00      	nop
 802053c:	200002b8 	.word	0x200002b8
 8020540:	08022e48 	.word	0x08022e48
 8020544:	08022e68 	.word	0x08022e68
 8020548:	08022e28 	.word	0x08022e28

0802054c <_close_r>:
 802054c:	b538      	push	{r3, r4, r5, lr}
 802054e:	4d06      	ldr	r5, [pc, #24]	; (8020568 <_close_r+0x1c>)
 8020550:	2300      	movs	r3, #0
 8020552:	4604      	mov	r4, r0
 8020554:	4608      	mov	r0, r1
 8020556:	602b      	str	r3, [r5, #0]
 8020558:	f7fe fc2c 	bl	801edb4 <_close>
 802055c:	1c43      	adds	r3, r0, #1
 802055e:	d102      	bne.n	8020566 <_close_r+0x1a>
 8020560:	682b      	ldr	r3, [r5, #0]
 8020562:	b103      	cbz	r3, 8020566 <_close_r+0x1a>
 8020564:	6023      	str	r3, [r4, #0]
 8020566:	bd38      	pop	{r3, r4, r5, pc}
 8020568:	2001d46c 	.word	0x2001d46c

0802056c <_fstat_r>:
 802056c:	b538      	push	{r3, r4, r5, lr}
 802056e:	4d07      	ldr	r5, [pc, #28]	; (802058c <_fstat_r+0x20>)
 8020570:	2300      	movs	r3, #0
 8020572:	4604      	mov	r4, r0
 8020574:	4608      	mov	r0, r1
 8020576:	4611      	mov	r1, r2
 8020578:	602b      	str	r3, [r5, #0]
 802057a:	f7fe fc27 	bl	801edcc <_fstat>
 802057e:	1c43      	adds	r3, r0, #1
 8020580:	d102      	bne.n	8020588 <_fstat_r+0x1c>
 8020582:	682b      	ldr	r3, [r5, #0]
 8020584:	b103      	cbz	r3, 8020588 <_fstat_r+0x1c>
 8020586:	6023      	str	r3, [r4, #0]
 8020588:	bd38      	pop	{r3, r4, r5, pc}
 802058a:	bf00      	nop
 802058c:	2001d46c 	.word	0x2001d46c

08020590 <rshift>:
 8020590:	6903      	ldr	r3, [r0, #16]
 8020592:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8020596:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802059a:	ea4f 1261 	mov.w	r2, r1, asr #5
 802059e:	f100 0414 	add.w	r4, r0, #20
 80205a2:	dd45      	ble.n	8020630 <rshift+0xa0>
 80205a4:	f011 011f 	ands.w	r1, r1, #31
 80205a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80205ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80205b0:	d10c      	bne.n	80205cc <rshift+0x3c>
 80205b2:	f100 0710 	add.w	r7, r0, #16
 80205b6:	4629      	mov	r1, r5
 80205b8:	42b1      	cmp	r1, r6
 80205ba:	d334      	bcc.n	8020626 <rshift+0x96>
 80205bc:	1a9b      	subs	r3, r3, r2
 80205be:	009b      	lsls	r3, r3, #2
 80205c0:	1eea      	subs	r2, r5, #3
 80205c2:	4296      	cmp	r6, r2
 80205c4:	bf38      	it	cc
 80205c6:	2300      	movcc	r3, #0
 80205c8:	4423      	add	r3, r4
 80205ca:	e015      	b.n	80205f8 <rshift+0x68>
 80205cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80205d0:	f1c1 0820 	rsb	r8, r1, #32
 80205d4:	40cf      	lsrs	r7, r1
 80205d6:	f105 0e04 	add.w	lr, r5, #4
 80205da:	46a1      	mov	r9, r4
 80205dc:	4576      	cmp	r6, lr
 80205de:	46f4      	mov	ip, lr
 80205e0:	d815      	bhi.n	802060e <rshift+0x7e>
 80205e2:	1a9b      	subs	r3, r3, r2
 80205e4:	009a      	lsls	r2, r3, #2
 80205e6:	3a04      	subs	r2, #4
 80205e8:	3501      	adds	r5, #1
 80205ea:	42ae      	cmp	r6, r5
 80205ec:	bf38      	it	cc
 80205ee:	2200      	movcc	r2, #0
 80205f0:	18a3      	adds	r3, r4, r2
 80205f2:	50a7      	str	r7, [r4, r2]
 80205f4:	b107      	cbz	r7, 80205f8 <rshift+0x68>
 80205f6:	3304      	adds	r3, #4
 80205f8:	1b1a      	subs	r2, r3, r4
 80205fa:	42a3      	cmp	r3, r4
 80205fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8020600:	bf08      	it	eq
 8020602:	2300      	moveq	r3, #0
 8020604:	6102      	str	r2, [r0, #16]
 8020606:	bf08      	it	eq
 8020608:	6143      	streq	r3, [r0, #20]
 802060a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802060e:	f8dc c000 	ldr.w	ip, [ip]
 8020612:	fa0c fc08 	lsl.w	ip, ip, r8
 8020616:	ea4c 0707 	orr.w	r7, ip, r7
 802061a:	f849 7b04 	str.w	r7, [r9], #4
 802061e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020622:	40cf      	lsrs	r7, r1
 8020624:	e7da      	b.n	80205dc <rshift+0x4c>
 8020626:	f851 cb04 	ldr.w	ip, [r1], #4
 802062a:	f847 cf04 	str.w	ip, [r7, #4]!
 802062e:	e7c3      	b.n	80205b8 <rshift+0x28>
 8020630:	4623      	mov	r3, r4
 8020632:	e7e1      	b.n	80205f8 <rshift+0x68>

08020634 <__hexdig_fun>:
 8020634:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8020638:	2b09      	cmp	r3, #9
 802063a:	d802      	bhi.n	8020642 <__hexdig_fun+0xe>
 802063c:	3820      	subs	r0, #32
 802063e:	b2c0      	uxtb	r0, r0
 8020640:	4770      	bx	lr
 8020642:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8020646:	2b05      	cmp	r3, #5
 8020648:	d801      	bhi.n	802064e <__hexdig_fun+0x1a>
 802064a:	3847      	subs	r0, #71	; 0x47
 802064c:	e7f7      	b.n	802063e <__hexdig_fun+0xa>
 802064e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8020652:	2b05      	cmp	r3, #5
 8020654:	d801      	bhi.n	802065a <__hexdig_fun+0x26>
 8020656:	3827      	subs	r0, #39	; 0x27
 8020658:	e7f1      	b.n	802063e <__hexdig_fun+0xa>
 802065a:	2000      	movs	r0, #0
 802065c:	4770      	bx	lr
	...

08020660 <__gethex>:
 8020660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020664:	ed2d 8b02 	vpush	{d8}
 8020668:	b089      	sub	sp, #36	; 0x24
 802066a:	ee08 0a10 	vmov	s16, r0
 802066e:	9304      	str	r3, [sp, #16]
 8020670:	4bbc      	ldr	r3, [pc, #752]	; (8020964 <__gethex+0x304>)
 8020672:	681b      	ldr	r3, [r3, #0]
 8020674:	9301      	str	r3, [sp, #4]
 8020676:	4618      	mov	r0, r3
 8020678:	468b      	mov	fp, r1
 802067a:	4690      	mov	r8, r2
 802067c:	f7df fdca 	bl	8000214 <strlen>
 8020680:	9b01      	ldr	r3, [sp, #4]
 8020682:	f8db 2000 	ldr.w	r2, [fp]
 8020686:	4403      	add	r3, r0
 8020688:	4682      	mov	sl, r0
 802068a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802068e:	9305      	str	r3, [sp, #20]
 8020690:	1c93      	adds	r3, r2, #2
 8020692:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8020696:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802069a:	32fe      	adds	r2, #254	; 0xfe
 802069c:	18d1      	adds	r1, r2, r3
 802069e:	461f      	mov	r7, r3
 80206a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80206a4:	9100      	str	r1, [sp, #0]
 80206a6:	2830      	cmp	r0, #48	; 0x30
 80206a8:	d0f8      	beq.n	802069c <__gethex+0x3c>
 80206aa:	f7ff ffc3 	bl	8020634 <__hexdig_fun>
 80206ae:	4604      	mov	r4, r0
 80206b0:	2800      	cmp	r0, #0
 80206b2:	d13a      	bne.n	802072a <__gethex+0xca>
 80206b4:	9901      	ldr	r1, [sp, #4]
 80206b6:	4652      	mov	r2, sl
 80206b8:	4638      	mov	r0, r7
 80206ba:	f7fe ff8d 	bl	801f5d8 <strncmp>
 80206be:	4605      	mov	r5, r0
 80206c0:	2800      	cmp	r0, #0
 80206c2:	d168      	bne.n	8020796 <__gethex+0x136>
 80206c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80206c8:	eb07 060a 	add.w	r6, r7, sl
 80206cc:	f7ff ffb2 	bl	8020634 <__hexdig_fun>
 80206d0:	2800      	cmp	r0, #0
 80206d2:	d062      	beq.n	802079a <__gethex+0x13a>
 80206d4:	4633      	mov	r3, r6
 80206d6:	7818      	ldrb	r0, [r3, #0]
 80206d8:	2830      	cmp	r0, #48	; 0x30
 80206da:	461f      	mov	r7, r3
 80206dc:	f103 0301 	add.w	r3, r3, #1
 80206e0:	d0f9      	beq.n	80206d6 <__gethex+0x76>
 80206e2:	f7ff ffa7 	bl	8020634 <__hexdig_fun>
 80206e6:	2301      	movs	r3, #1
 80206e8:	fab0 f480 	clz	r4, r0
 80206ec:	0964      	lsrs	r4, r4, #5
 80206ee:	4635      	mov	r5, r6
 80206f0:	9300      	str	r3, [sp, #0]
 80206f2:	463a      	mov	r2, r7
 80206f4:	4616      	mov	r6, r2
 80206f6:	3201      	adds	r2, #1
 80206f8:	7830      	ldrb	r0, [r6, #0]
 80206fa:	f7ff ff9b 	bl	8020634 <__hexdig_fun>
 80206fe:	2800      	cmp	r0, #0
 8020700:	d1f8      	bne.n	80206f4 <__gethex+0x94>
 8020702:	9901      	ldr	r1, [sp, #4]
 8020704:	4652      	mov	r2, sl
 8020706:	4630      	mov	r0, r6
 8020708:	f7fe ff66 	bl	801f5d8 <strncmp>
 802070c:	b980      	cbnz	r0, 8020730 <__gethex+0xd0>
 802070e:	b94d      	cbnz	r5, 8020724 <__gethex+0xc4>
 8020710:	eb06 050a 	add.w	r5, r6, sl
 8020714:	462a      	mov	r2, r5
 8020716:	4616      	mov	r6, r2
 8020718:	3201      	adds	r2, #1
 802071a:	7830      	ldrb	r0, [r6, #0]
 802071c:	f7ff ff8a 	bl	8020634 <__hexdig_fun>
 8020720:	2800      	cmp	r0, #0
 8020722:	d1f8      	bne.n	8020716 <__gethex+0xb6>
 8020724:	1bad      	subs	r5, r5, r6
 8020726:	00ad      	lsls	r5, r5, #2
 8020728:	e004      	b.n	8020734 <__gethex+0xd4>
 802072a:	2400      	movs	r4, #0
 802072c:	4625      	mov	r5, r4
 802072e:	e7e0      	b.n	80206f2 <__gethex+0x92>
 8020730:	2d00      	cmp	r5, #0
 8020732:	d1f7      	bne.n	8020724 <__gethex+0xc4>
 8020734:	7833      	ldrb	r3, [r6, #0]
 8020736:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802073a:	2b50      	cmp	r3, #80	; 0x50
 802073c:	d13b      	bne.n	80207b6 <__gethex+0x156>
 802073e:	7873      	ldrb	r3, [r6, #1]
 8020740:	2b2b      	cmp	r3, #43	; 0x2b
 8020742:	d02c      	beq.n	802079e <__gethex+0x13e>
 8020744:	2b2d      	cmp	r3, #45	; 0x2d
 8020746:	d02e      	beq.n	80207a6 <__gethex+0x146>
 8020748:	1c71      	adds	r1, r6, #1
 802074a:	f04f 0900 	mov.w	r9, #0
 802074e:	7808      	ldrb	r0, [r1, #0]
 8020750:	f7ff ff70 	bl	8020634 <__hexdig_fun>
 8020754:	1e43      	subs	r3, r0, #1
 8020756:	b2db      	uxtb	r3, r3
 8020758:	2b18      	cmp	r3, #24
 802075a:	d82c      	bhi.n	80207b6 <__gethex+0x156>
 802075c:	f1a0 0210 	sub.w	r2, r0, #16
 8020760:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020764:	f7ff ff66 	bl	8020634 <__hexdig_fun>
 8020768:	1e43      	subs	r3, r0, #1
 802076a:	b2db      	uxtb	r3, r3
 802076c:	2b18      	cmp	r3, #24
 802076e:	d91d      	bls.n	80207ac <__gethex+0x14c>
 8020770:	f1b9 0f00 	cmp.w	r9, #0
 8020774:	d000      	beq.n	8020778 <__gethex+0x118>
 8020776:	4252      	negs	r2, r2
 8020778:	4415      	add	r5, r2
 802077a:	f8cb 1000 	str.w	r1, [fp]
 802077e:	b1e4      	cbz	r4, 80207ba <__gethex+0x15a>
 8020780:	9b00      	ldr	r3, [sp, #0]
 8020782:	2b00      	cmp	r3, #0
 8020784:	bf14      	ite	ne
 8020786:	2700      	movne	r7, #0
 8020788:	2706      	moveq	r7, #6
 802078a:	4638      	mov	r0, r7
 802078c:	b009      	add	sp, #36	; 0x24
 802078e:	ecbd 8b02 	vpop	{d8}
 8020792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020796:	463e      	mov	r6, r7
 8020798:	4625      	mov	r5, r4
 802079a:	2401      	movs	r4, #1
 802079c:	e7ca      	b.n	8020734 <__gethex+0xd4>
 802079e:	f04f 0900 	mov.w	r9, #0
 80207a2:	1cb1      	adds	r1, r6, #2
 80207a4:	e7d3      	b.n	802074e <__gethex+0xee>
 80207a6:	f04f 0901 	mov.w	r9, #1
 80207aa:	e7fa      	b.n	80207a2 <__gethex+0x142>
 80207ac:	230a      	movs	r3, #10
 80207ae:	fb03 0202 	mla	r2, r3, r2, r0
 80207b2:	3a10      	subs	r2, #16
 80207b4:	e7d4      	b.n	8020760 <__gethex+0x100>
 80207b6:	4631      	mov	r1, r6
 80207b8:	e7df      	b.n	802077a <__gethex+0x11a>
 80207ba:	1bf3      	subs	r3, r6, r7
 80207bc:	3b01      	subs	r3, #1
 80207be:	4621      	mov	r1, r4
 80207c0:	2b07      	cmp	r3, #7
 80207c2:	dc0b      	bgt.n	80207dc <__gethex+0x17c>
 80207c4:	ee18 0a10 	vmov	r0, s16
 80207c8:	f000 fa92 	bl	8020cf0 <_Balloc>
 80207cc:	4604      	mov	r4, r0
 80207ce:	b940      	cbnz	r0, 80207e2 <__gethex+0x182>
 80207d0:	4b65      	ldr	r3, [pc, #404]	; (8020968 <__gethex+0x308>)
 80207d2:	4602      	mov	r2, r0
 80207d4:	21de      	movs	r1, #222	; 0xde
 80207d6:	4865      	ldr	r0, [pc, #404]	; (802096c <__gethex+0x30c>)
 80207d8:	f001 fa5c 	bl	8021c94 <__assert_func>
 80207dc:	3101      	adds	r1, #1
 80207de:	105b      	asrs	r3, r3, #1
 80207e0:	e7ee      	b.n	80207c0 <__gethex+0x160>
 80207e2:	f100 0914 	add.w	r9, r0, #20
 80207e6:	f04f 0b00 	mov.w	fp, #0
 80207ea:	f1ca 0301 	rsb	r3, sl, #1
 80207ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80207f2:	f8cd b000 	str.w	fp, [sp]
 80207f6:	9306      	str	r3, [sp, #24]
 80207f8:	42b7      	cmp	r7, r6
 80207fa:	d340      	bcc.n	802087e <__gethex+0x21e>
 80207fc:	9802      	ldr	r0, [sp, #8]
 80207fe:	9b00      	ldr	r3, [sp, #0]
 8020800:	f840 3b04 	str.w	r3, [r0], #4
 8020804:	eba0 0009 	sub.w	r0, r0, r9
 8020808:	1080      	asrs	r0, r0, #2
 802080a:	0146      	lsls	r6, r0, #5
 802080c:	6120      	str	r0, [r4, #16]
 802080e:	4618      	mov	r0, r3
 8020810:	f000 fb64 	bl	8020edc <__hi0bits>
 8020814:	1a30      	subs	r0, r6, r0
 8020816:	f8d8 6000 	ldr.w	r6, [r8]
 802081a:	42b0      	cmp	r0, r6
 802081c:	dd63      	ble.n	80208e6 <__gethex+0x286>
 802081e:	1b87      	subs	r7, r0, r6
 8020820:	4639      	mov	r1, r7
 8020822:	4620      	mov	r0, r4
 8020824:	f000 fefe 	bl	8021624 <__any_on>
 8020828:	4682      	mov	sl, r0
 802082a:	b1a8      	cbz	r0, 8020858 <__gethex+0x1f8>
 802082c:	1e7b      	subs	r3, r7, #1
 802082e:	1159      	asrs	r1, r3, #5
 8020830:	f003 021f 	and.w	r2, r3, #31
 8020834:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8020838:	f04f 0a01 	mov.w	sl, #1
 802083c:	fa0a f202 	lsl.w	r2, sl, r2
 8020840:	420a      	tst	r2, r1
 8020842:	d009      	beq.n	8020858 <__gethex+0x1f8>
 8020844:	4553      	cmp	r3, sl
 8020846:	dd05      	ble.n	8020854 <__gethex+0x1f4>
 8020848:	1eb9      	subs	r1, r7, #2
 802084a:	4620      	mov	r0, r4
 802084c:	f000 feea 	bl	8021624 <__any_on>
 8020850:	2800      	cmp	r0, #0
 8020852:	d145      	bne.n	80208e0 <__gethex+0x280>
 8020854:	f04f 0a02 	mov.w	sl, #2
 8020858:	4639      	mov	r1, r7
 802085a:	4620      	mov	r0, r4
 802085c:	f7ff fe98 	bl	8020590 <rshift>
 8020860:	443d      	add	r5, r7
 8020862:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020866:	42ab      	cmp	r3, r5
 8020868:	da4c      	bge.n	8020904 <__gethex+0x2a4>
 802086a:	ee18 0a10 	vmov	r0, s16
 802086e:	4621      	mov	r1, r4
 8020870:	f000 fa7e 	bl	8020d70 <_Bfree>
 8020874:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020876:	2300      	movs	r3, #0
 8020878:	6013      	str	r3, [r2, #0]
 802087a:	27a3      	movs	r7, #163	; 0xa3
 802087c:	e785      	b.n	802078a <__gethex+0x12a>
 802087e:	1e73      	subs	r3, r6, #1
 8020880:	9a05      	ldr	r2, [sp, #20]
 8020882:	9303      	str	r3, [sp, #12]
 8020884:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8020888:	4293      	cmp	r3, r2
 802088a:	d019      	beq.n	80208c0 <__gethex+0x260>
 802088c:	f1bb 0f20 	cmp.w	fp, #32
 8020890:	d107      	bne.n	80208a2 <__gethex+0x242>
 8020892:	9b02      	ldr	r3, [sp, #8]
 8020894:	9a00      	ldr	r2, [sp, #0]
 8020896:	f843 2b04 	str.w	r2, [r3], #4
 802089a:	9302      	str	r3, [sp, #8]
 802089c:	2300      	movs	r3, #0
 802089e:	9300      	str	r3, [sp, #0]
 80208a0:	469b      	mov	fp, r3
 80208a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80208a6:	f7ff fec5 	bl	8020634 <__hexdig_fun>
 80208aa:	9b00      	ldr	r3, [sp, #0]
 80208ac:	f000 000f 	and.w	r0, r0, #15
 80208b0:	fa00 f00b 	lsl.w	r0, r0, fp
 80208b4:	4303      	orrs	r3, r0
 80208b6:	9300      	str	r3, [sp, #0]
 80208b8:	f10b 0b04 	add.w	fp, fp, #4
 80208bc:	9b03      	ldr	r3, [sp, #12]
 80208be:	e00d      	b.n	80208dc <__gethex+0x27c>
 80208c0:	9b03      	ldr	r3, [sp, #12]
 80208c2:	9a06      	ldr	r2, [sp, #24]
 80208c4:	4413      	add	r3, r2
 80208c6:	42bb      	cmp	r3, r7
 80208c8:	d3e0      	bcc.n	802088c <__gethex+0x22c>
 80208ca:	4618      	mov	r0, r3
 80208cc:	9901      	ldr	r1, [sp, #4]
 80208ce:	9307      	str	r3, [sp, #28]
 80208d0:	4652      	mov	r2, sl
 80208d2:	f7fe fe81 	bl	801f5d8 <strncmp>
 80208d6:	9b07      	ldr	r3, [sp, #28]
 80208d8:	2800      	cmp	r0, #0
 80208da:	d1d7      	bne.n	802088c <__gethex+0x22c>
 80208dc:	461e      	mov	r6, r3
 80208de:	e78b      	b.n	80207f8 <__gethex+0x198>
 80208e0:	f04f 0a03 	mov.w	sl, #3
 80208e4:	e7b8      	b.n	8020858 <__gethex+0x1f8>
 80208e6:	da0a      	bge.n	80208fe <__gethex+0x29e>
 80208e8:	1a37      	subs	r7, r6, r0
 80208ea:	4621      	mov	r1, r4
 80208ec:	ee18 0a10 	vmov	r0, s16
 80208f0:	463a      	mov	r2, r7
 80208f2:	f000 fc59 	bl	80211a8 <__lshift>
 80208f6:	1bed      	subs	r5, r5, r7
 80208f8:	4604      	mov	r4, r0
 80208fa:	f100 0914 	add.w	r9, r0, #20
 80208fe:	f04f 0a00 	mov.w	sl, #0
 8020902:	e7ae      	b.n	8020862 <__gethex+0x202>
 8020904:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8020908:	42a8      	cmp	r0, r5
 802090a:	dd72      	ble.n	80209f2 <__gethex+0x392>
 802090c:	1b45      	subs	r5, r0, r5
 802090e:	42ae      	cmp	r6, r5
 8020910:	dc36      	bgt.n	8020980 <__gethex+0x320>
 8020912:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020916:	2b02      	cmp	r3, #2
 8020918:	d02a      	beq.n	8020970 <__gethex+0x310>
 802091a:	2b03      	cmp	r3, #3
 802091c:	d02c      	beq.n	8020978 <__gethex+0x318>
 802091e:	2b01      	cmp	r3, #1
 8020920:	d115      	bne.n	802094e <__gethex+0x2ee>
 8020922:	42ae      	cmp	r6, r5
 8020924:	d113      	bne.n	802094e <__gethex+0x2ee>
 8020926:	2e01      	cmp	r6, #1
 8020928:	d10b      	bne.n	8020942 <__gethex+0x2e2>
 802092a:	9a04      	ldr	r2, [sp, #16]
 802092c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8020930:	6013      	str	r3, [r2, #0]
 8020932:	2301      	movs	r3, #1
 8020934:	6123      	str	r3, [r4, #16]
 8020936:	f8c9 3000 	str.w	r3, [r9]
 802093a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802093c:	2762      	movs	r7, #98	; 0x62
 802093e:	601c      	str	r4, [r3, #0]
 8020940:	e723      	b.n	802078a <__gethex+0x12a>
 8020942:	1e71      	subs	r1, r6, #1
 8020944:	4620      	mov	r0, r4
 8020946:	f000 fe6d 	bl	8021624 <__any_on>
 802094a:	2800      	cmp	r0, #0
 802094c:	d1ed      	bne.n	802092a <__gethex+0x2ca>
 802094e:	ee18 0a10 	vmov	r0, s16
 8020952:	4621      	mov	r1, r4
 8020954:	f000 fa0c 	bl	8020d70 <_Bfree>
 8020958:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802095a:	2300      	movs	r3, #0
 802095c:	6013      	str	r3, [r2, #0]
 802095e:	2750      	movs	r7, #80	; 0x50
 8020960:	e713      	b.n	802078a <__gethex+0x12a>
 8020962:	bf00      	nop
 8020964:	08022f64 	.word	0x08022f64
 8020968:	08022ee8 	.word	0x08022ee8
 802096c:	08022ef9 	.word	0x08022ef9
 8020970:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020972:	2b00      	cmp	r3, #0
 8020974:	d1eb      	bne.n	802094e <__gethex+0x2ee>
 8020976:	e7d8      	b.n	802092a <__gethex+0x2ca>
 8020978:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802097a:	2b00      	cmp	r3, #0
 802097c:	d1d5      	bne.n	802092a <__gethex+0x2ca>
 802097e:	e7e6      	b.n	802094e <__gethex+0x2ee>
 8020980:	1e6f      	subs	r7, r5, #1
 8020982:	f1ba 0f00 	cmp.w	sl, #0
 8020986:	d131      	bne.n	80209ec <__gethex+0x38c>
 8020988:	b127      	cbz	r7, 8020994 <__gethex+0x334>
 802098a:	4639      	mov	r1, r7
 802098c:	4620      	mov	r0, r4
 802098e:	f000 fe49 	bl	8021624 <__any_on>
 8020992:	4682      	mov	sl, r0
 8020994:	117b      	asrs	r3, r7, #5
 8020996:	2101      	movs	r1, #1
 8020998:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802099c:	f007 071f 	and.w	r7, r7, #31
 80209a0:	fa01 f707 	lsl.w	r7, r1, r7
 80209a4:	421f      	tst	r7, r3
 80209a6:	4629      	mov	r1, r5
 80209a8:	4620      	mov	r0, r4
 80209aa:	bf18      	it	ne
 80209ac:	f04a 0a02 	orrne.w	sl, sl, #2
 80209b0:	1b76      	subs	r6, r6, r5
 80209b2:	f7ff fded 	bl	8020590 <rshift>
 80209b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80209ba:	2702      	movs	r7, #2
 80209bc:	f1ba 0f00 	cmp.w	sl, #0
 80209c0:	d048      	beq.n	8020a54 <__gethex+0x3f4>
 80209c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80209c6:	2b02      	cmp	r3, #2
 80209c8:	d015      	beq.n	80209f6 <__gethex+0x396>
 80209ca:	2b03      	cmp	r3, #3
 80209cc:	d017      	beq.n	80209fe <__gethex+0x39e>
 80209ce:	2b01      	cmp	r3, #1
 80209d0:	d109      	bne.n	80209e6 <__gethex+0x386>
 80209d2:	f01a 0f02 	tst.w	sl, #2
 80209d6:	d006      	beq.n	80209e6 <__gethex+0x386>
 80209d8:	f8d9 0000 	ldr.w	r0, [r9]
 80209dc:	ea4a 0a00 	orr.w	sl, sl, r0
 80209e0:	f01a 0f01 	tst.w	sl, #1
 80209e4:	d10e      	bne.n	8020a04 <__gethex+0x3a4>
 80209e6:	f047 0710 	orr.w	r7, r7, #16
 80209ea:	e033      	b.n	8020a54 <__gethex+0x3f4>
 80209ec:	f04f 0a01 	mov.w	sl, #1
 80209f0:	e7d0      	b.n	8020994 <__gethex+0x334>
 80209f2:	2701      	movs	r7, #1
 80209f4:	e7e2      	b.n	80209bc <__gethex+0x35c>
 80209f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80209f8:	f1c3 0301 	rsb	r3, r3, #1
 80209fc:	9315      	str	r3, [sp, #84]	; 0x54
 80209fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020a00:	2b00      	cmp	r3, #0
 8020a02:	d0f0      	beq.n	80209e6 <__gethex+0x386>
 8020a04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8020a08:	f104 0314 	add.w	r3, r4, #20
 8020a0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8020a10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8020a14:	f04f 0c00 	mov.w	ip, #0
 8020a18:	4618      	mov	r0, r3
 8020a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8020a1e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8020a22:	d01c      	beq.n	8020a5e <__gethex+0x3fe>
 8020a24:	3201      	adds	r2, #1
 8020a26:	6002      	str	r2, [r0, #0]
 8020a28:	2f02      	cmp	r7, #2
 8020a2a:	f104 0314 	add.w	r3, r4, #20
 8020a2e:	d13f      	bne.n	8020ab0 <__gethex+0x450>
 8020a30:	f8d8 2000 	ldr.w	r2, [r8]
 8020a34:	3a01      	subs	r2, #1
 8020a36:	42b2      	cmp	r2, r6
 8020a38:	d10a      	bne.n	8020a50 <__gethex+0x3f0>
 8020a3a:	1171      	asrs	r1, r6, #5
 8020a3c:	2201      	movs	r2, #1
 8020a3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020a42:	f006 061f 	and.w	r6, r6, #31
 8020a46:	fa02 f606 	lsl.w	r6, r2, r6
 8020a4a:	421e      	tst	r6, r3
 8020a4c:	bf18      	it	ne
 8020a4e:	4617      	movne	r7, r2
 8020a50:	f047 0720 	orr.w	r7, r7, #32
 8020a54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020a56:	601c      	str	r4, [r3, #0]
 8020a58:	9b04      	ldr	r3, [sp, #16]
 8020a5a:	601d      	str	r5, [r3, #0]
 8020a5c:	e695      	b.n	802078a <__gethex+0x12a>
 8020a5e:	4299      	cmp	r1, r3
 8020a60:	f843 cc04 	str.w	ip, [r3, #-4]
 8020a64:	d8d8      	bhi.n	8020a18 <__gethex+0x3b8>
 8020a66:	68a3      	ldr	r3, [r4, #8]
 8020a68:	459b      	cmp	fp, r3
 8020a6a:	db19      	blt.n	8020aa0 <__gethex+0x440>
 8020a6c:	6861      	ldr	r1, [r4, #4]
 8020a6e:	ee18 0a10 	vmov	r0, s16
 8020a72:	3101      	adds	r1, #1
 8020a74:	f000 f93c 	bl	8020cf0 <_Balloc>
 8020a78:	4681      	mov	r9, r0
 8020a7a:	b918      	cbnz	r0, 8020a84 <__gethex+0x424>
 8020a7c:	4b1a      	ldr	r3, [pc, #104]	; (8020ae8 <__gethex+0x488>)
 8020a7e:	4602      	mov	r2, r0
 8020a80:	2184      	movs	r1, #132	; 0x84
 8020a82:	e6a8      	b.n	80207d6 <__gethex+0x176>
 8020a84:	6922      	ldr	r2, [r4, #16]
 8020a86:	3202      	adds	r2, #2
 8020a88:	f104 010c 	add.w	r1, r4, #12
 8020a8c:	0092      	lsls	r2, r2, #2
 8020a8e:	300c      	adds	r0, #12
 8020a90:	f7fe fc38 	bl	801f304 <memcpy>
 8020a94:	4621      	mov	r1, r4
 8020a96:	ee18 0a10 	vmov	r0, s16
 8020a9a:	f000 f969 	bl	8020d70 <_Bfree>
 8020a9e:	464c      	mov	r4, r9
 8020aa0:	6923      	ldr	r3, [r4, #16]
 8020aa2:	1c5a      	adds	r2, r3, #1
 8020aa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020aa8:	6122      	str	r2, [r4, #16]
 8020aaa:	2201      	movs	r2, #1
 8020aac:	615a      	str	r2, [r3, #20]
 8020aae:	e7bb      	b.n	8020a28 <__gethex+0x3c8>
 8020ab0:	6922      	ldr	r2, [r4, #16]
 8020ab2:	455a      	cmp	r2, fp
 8020ab4:	dd0b      	ble.n	8020ace <__gethex+0x46e>
 8020ab6:	2101      	movs	r1, #1
 8020ab8:	4620      	mov	r0, r4
 8020aba:	f7ff fd69 	bl	8020590 <rshift>
 8020abe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020ac2:	3501      	adds	r5, #1
 8020ac4:	42ab      	cmp	r3, r5
 8020ac6:	f6ff aed0 	blt.w	802086a <__gethex+0x20a>
 8020aca:	2701      	movs	r7, #1
 8020acc:	e7c0      	b.n	8020a50 <__gethex+0x3f0>
 8020ace:	f016 061f 	ands.w	r6, r6, #31
 8020ad2:	d0fa      	beq.n	8020aca <__gethex+0x46a>
 8020ad4:	449a      	add	sl, r3
 8020ad6:	f1c6 0620 	rsb	r6, r6, #32
 8020ada:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8020ade:	f000 f9fd 	bl	8020edc <__hi0bits>
 8020ae2:	42b0      	cmp	r0, r6
 8020ae4:	dbe7      	blt.n	8020ab6 <__gethex+0x456>
 8020ae6:	e7f0      	b.n	8020aca <__gethex+0x46a>
 8020ae8:	08022ee8 	.word	0x08022ee8

08020aec <L_shift>:
 8020aec:	f1c2 0208 	rsb	r2, r2, #8
 8020af0:	0092      	lsls	r2, r2, #2
 8020af2:	b570      	push	{r4, r5, r6, lr}
 8020af4:	f1c2 0620 	rsb	r6, r2, #32
 8020af8:	6843      	ldr	r3, [r0, #4]
 8020afa:	6804      	ldr	r4, [r0, #0]
 8020afc:	fa03 f506 	lsl.w	r5, r3, r6
 8020b00:	432c      	orrs	r4, r5
 8020b02:	40d3      	lsrs	r3, r2
 8020b04:	6004      	str	r4, [r0, #0]
 8020b06:	f840 3f04 	str.w	r3, [r0, #4]!
 8020b0a:	4288      	cmp	r0, r1
 8020b0c:	d3f4      	bcc.n	8020af8 <L_shift+0xc>
 8020b0e:	bd70      	pop	{r4, r5, r6, pc}

08020b10 <__match>:
 8020b10:	b530      	push	{r4, r5, lr}
 8020b12:	6803      	ldr	r3, [r0, #0]
 8020b14:	3301      	adds	r3, #1
 8020b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020b1a:	b914      	cbnz	r4, 8020b22 <__match+0x12>
 8020b1c:	6003      	str	r3, [r0, #0]
 8020b1e:	2001      	movs	r0, #1
 8020b20:	bd30      	pop	{r4, r5, pc}
 8020b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020b26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8020b2a:	2d19      	cmp	r5, #25
 8020b2c:	bf98      	it	ls
 8020b2e:	3220      	addls	r2, #32
 8020b30:	42a2      	cmp	r2, r4
 8020b32:	d0f0      	beq.n	8020b16 <__match+0x6>
 8020b34:	2000      	movs	r0, #0
 8020b36:	e7f3      	b.n	8020b20 <__match+0x10>

08020b38 <__hexnan>:
 8020b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b3c:	680b      	ldr	r3, [r1, #0]
 8020b3e:	6801      	ldr	r1, [r0, #0]
 8020b40:	115e      	asrs	r6, r3, #5
 8020b42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8020b46:	f013 031f 	ands.w	r3, r3, #31
 8020b4a:	b087      	sub	sp, #28
 8020b4c:	bf18      	it	ne
 8020b4e:	3604      	addne	r6, #4
 8020b50:	2500      	movs	r5, #0
 8020b52:	1f37      	subs	r7, r6, #4
 8020b54:	4682      	mov	sl, r0
 8020b56:	4690      	mov	r8, r2
 8020b58:	9301      	str	r3, [sp, #4]
 8020b5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8020b5e:	46b9      	mov	r9, r7
 8020b60:	463c      	mov	r4, r7
 8020b62:	9502      	str	r5, [sp, #8]
 8020b64:	46ab      	mov	fp, r5
 8020b66:	784a      	ldrb	r2, [r1, #1]
 8020b68:	1c4b      	adds	r3, r1, #1
 8020b6a:	9303      	str	r3, [sp, #12]
 8020b6c:	b342      	cbz	r2, 8020bc0 <__hexnan+0x88>
 8020b6e:	4610      	mov	r0, r2
 8020b70:	9105      	str	r1, [sp, #20]
 8020b72:	9204      	str	r2, [sp, #16]
 8020b74:	f7ff fd5e 	bl	8020634 <__hexdig_fun>
 8020b78:	2800      	cmp	r0, #0
 8020b7a:	d14f      	bne.n	8020c1c <__hexnan+0xe4>
 8020b7c:	9a04      	ldr	r2, [sp, #16]
 8020b7e:	9905      	ldr	r1, [sp, #20]
 8020b80:	2a20      	cmp	r2, #32
 8020b82:	d818      	bhi.n	8020bb6 <__hexnan+0x7e>
 8020b84:	9b02      	ldr	r3, [sp, #8]
 8020b86:	459b      	cmp	fp, r3
 8020b88:	dd13      	ble.n	8020bb2 <__hexnan+0x7a>
 8020b8a:	454c      	cmp	r4, r9
 8020b8c:	d206      	bcs.n	8020b9c <__hexnan+0x64>
 8020b8e:	2d07      	cmp	r5, #7
 8020b90:	dc04      	bgt.n	8020b9c <__hexnan+0x64>
 8020b92:	462a      	mov	r2, r5
 8020b94:	4649      	mov	r1, r9
 8020b96:	4620      	mov	r0, r4
 8020b98:	f7ff ffa8 	bl	8020aec <L_shift>
 8020b9c:	4544      	cmp	r4, r8
 8020b9e:	d950      	bls.n	8020c42 <__hexnan+0x10a>
 8020ba0:	2300      	movs	r3, #0
 8020ba2:	f1a4 0904 	sub.w	r9, r4, #4
 8020ba6:	f844 3c04 	str.w	r3, [r4, #-4]
 8020baa:	f8cd b008 	str.w	fp, [sp, #8]
 8020bae:	464c      	mov	r4, r9
 8020bb0:	461d      	mov	r5, r3
 8020bb2:	9903      	ldr	r1, [sp, #12]
 8020bb4:	e7d7      	b.n	8020b66 <__hexnan+0x2e>
 8020bb6:	2a29      	cmp	r2, #41	; 0x29
 8020bb8:	d156      	bne.n	8020c68 <__hexnan+0x130>
 8020bba:	3102      	adds	r1, #2
 8020bbc:	f8ca 1000 	str.w	r1, [sl]
 8020bc0:	f1bb 0f00 	cmp.w	fp, #0
 8020bc4:	d050      	beq.n	8020c68 <__hexnan+0x130>
 8020bc6:	454c      	cmp	r4, r9
 8020bc8:	d206      	bcs.n	8020bd8 <__hexnan+0xa0>
 8020bca:	2d07      	cmp	r5, #7
 8020bcc:	dc04      	bgt.n	8020bd8 <__hexnan+0xa0>
 8020bce:	462a      	mov	r2, r5
 8020bd0:	4649      	mov	r1, r9
 8020bd2:	4620      	mov	r0, r4
 8020bd4:	f7ff ff8a 	bl	8020aec <L_shift>
 8020bd8:	4544      	cmp	r4, r8
 8020bda:	d934      	bls.n	8020c46 <__hexnan+0x10e>
 8020bdc:	f1a8 0204 	sub.w	r2, r8, #4
 8020be0:	4623      	mov	r3, r4
 8020be2:	f853 1b04 	ldr.w	r1, [r3], #4
 8020be6:	f842 1f04 	str.w	r1, [r2, #4]!
 8020bea:	429f      	cmp	r7, r3
 8020bec:	d2f9      	bcs.n	8020be2 <__hexnan+0xaa>
 8020bee:	1b3b      	subs	r3, r7, r4
 8020bf0:	f023 0303 	bic.w	r3, r3, #3
 8020bf4:	3304      	adds	r3, #4
 8020bf6:	3401      	adds	r4, #1
 8020bf8:	3e03      	subs	r6, #3
 8020bfa:	42b4      	cmp	r4, r6
 8020bfc:	bf88      	it	hi
 8020bfe:	2304      	movhi	r3, #4
 8020c00:	4443      	add	r3, r8
 8020c02:	2200      	movs	r2, #0
 8020c04:	f843 2b04 	str.w	r2, [r3], #4
 8020c08:	429f      	cmp	r7, r3
 8020c0a:	d2fb      	bcs.n	8020c04 <__hexnan+0xcc>
 8020c0c:	683b      	ldr	r3, [r7, #0]
 8020c0e:	b91b      	cbnz	r3, 8020c18 <__hexnan+0xe0>
 8020c10:	4547      	cmp	r7, r8
 8020c12:	d127      	bne.n	8020c64 <__hexnan+0x12c>
 8020c14:	2301      	movs	r3, #1
 8020c16:	603b      	str	r3, [r7, #0]
 8020c18:	2005      	movs	r0, #5
 8020c1a:	e026      	b.n	8020c6a <__hexnan+0x132>
 8020c1c:	3501      	adds	r5, #1
 8020c1e:	2d08      	cmp	r5, #8
 8020c20:	f10b 0b01 	add.w	fp, fp, #1
 8020c24:	dd06      	ble.n	8020c34 <__hexnan+0xfc>
 8020c26:	4544      	cmp	r4, r8
 8020c28:	d9c3      	bls.n	8020bb2 <__hexnan+0x7a>
 8020c2a:	2300      	movs	r3, #0
 8020c2c:	f844 3c04 	str.w	r3, [r4, #-4]
 8020c30:	2501      	movs	r5, #1
 8020c32:	3c04      	subs	r4, #4
 8020c34:	6822      	ldr	r2, [r4, #0]
 8020c36:	f000 000f 	and.w	r0, r0, #15
 8020c3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8020c3e:	6022      	str	r2, [r4, #0]
 8020c40:	e7b7      	b.n	8020bb2 <__hexnan+0x7a>
 8020c42:	2508      	movs	r5, #8
 8020c44:	e7b5      	b.n	8020bb2 <__hexnan+0x7a>
 8020c46:	9b01      	ldr	r3, [sp, #4]
 8020c48:	2b00      	cmp	r3, #0
 8020c4a:	d0df      	beq.n	8020c0c <__hexnan+0xd4>
 8020c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8020c50:	f1c3 0320 	rsb	r3, r3, #32
 8020c54:	fa22 f303 	lsr.w	r3, r2, r3
 8020c58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8020c5c:	401a      	ands	r2, r3
 8020c5e:	f846 2c04 	str.w	r2, [r6, #-4]
 8020c62:	e7d3      	b.n	8020c0c <__hexnan+0xd4>
 8020c64:	3f04      	subs	r7, #4
 8020c66:	e7d1      	b.n	8020c0c <__hexnan+0xd4>
 8020c68:	2004      	movs	r0, #4
 8020c6a:	b007      	add	sp, #28
 8020c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c70 <_isatty_r>:
 8020c70:	b538      	push	{r3, r4, r5, lr}
 8020c72:	4d06      	ldr	r5, [pc, #24]	; (8020c8c <_isatty_r+0x1c>)
 8020c74:	2300      	movs	r3, #0
 8020c76:	4604      	mov	r4, r0
 8020c78:	4608      	mov	r0, r1
 8020c7a:	602b      	str	r3, [r5, #0]
 8020c7c:	f7fe f8b6 	bl	801edec <_isatty>
 8020c80:	1c43      	adds	r3, r0, #1
 8020c82:	d102      	bne.n	8020c8a <_isatty_r+0x1a>
 8020c84:	682b      	ldr	r3, [r5, #0]
 8020c86:	b103      	cbz	r3, 8020c8a <_isatty_r+0x1a>
 8020c88:	6023      	str	r3, [r4, #0]
 8020c8a:	bd38      	pop	{r3, r4, r5, pc}
 8020c8c:	2001d46c 	.word	0x2001d46c

08020c90 <_lseek_r>:
 8020c90:	b538      	push	{r3, r4, r5, lr}
 8020c92:	4d07      	ldr	r5, [pc, #28]	; (8020cb0 <_lseek_r+0x20>)
 8020c94:	4604      	mov	r4, r0
 8020c96:	4608      	mov	r0, r1
 8020c98:	4611      	mov	r1, r2
 8020c9a:	2200      	movs	r2, #0
 8020c9c:	602a      	str	r2, [r5, #0]
 8020c9e:	461a      	mov	r2, r3
 8020ca0:	f7fe f8af 	bl	801ee02 <_lseek>
 8020ca4:	1c43      	adds	r3, r0, #1
 8020ca6:	d102      	bne.n	8020cae <_lseek_r+0x1e>
 8020ca8:	682b      	ldr	r3, [r5, #0]
 8020caa:	b103      	cbz	r3, 8020cae <_lseek_r+0x1e>
 8020cac:	6023      	str	r3, [r4, #0]
 8020cae:	bd38      	pop	{r3, r4, r5, pc}
 8020cb0:	2001d46c 	.word	0x2001d46c

08020cb4 <__ascii_mbtowc>:
 8020cb4:	b082      	sub	sp, #8
 8020cb6:	b901      	cbnz	r1, 8020cba <__ascii_mbtowc+0x6>
 8020cb8:	a901      	add	r1, sp, #4
 8020cba:	b142      	cbz	r2, 8020cce <__ascii_mbtowc+0x1a>
 8020cbc:	b14b      	cbz	r3, 8020cd2 <__ascii_mbtowc+0x1e>
 8020cbe:	7813      	ldrb	r3, [r2, #0]
 8020cc0:	600b      	str	r3, [r1, #0]
 8020cc2:	7812      	ldrb	r2, [r2, #0]
 8020cc4:	1e10      	subs	r0, r2, #0
 8020cc6:	bf18      	it	ne
 8020cc8:	2001      	movne	r0, #1
 8020cca:	b002      	add	sp, #8
 8020ccc:	4770      	bx	lr
 8020cce:	4610      	mov	r0, r2
 8020cd0:	e7fb      	b.n	8020cca <__ascii_mbtowc+0x16>
 8020cd2:	f06f 0001 	mvn.w	r0, #1
 8020cd6:	e7f8      	b.n	8020cca <__ascii_mbtowc+0x16>

08020cd8 <__malloc_lock>:
 8020cd8:	4801      	ldr	r0, [pc, #4]	; (8020ce0 <__malloc_lock+0x8>)
 8020cda:	f7fe ba9c 	b.w	801f216 <__retarget_lock_acquire_recursive>
 8020cde:	bf00      	nop
 8020ce0:	2001d460 	.word	0x2001d460

08020ce4 <__malloc_unlock>:
 8020ce4:	4801      	ldr	r0, [pc, #4]	; (8020cec <__malloc_unlock+0x8>)
 8020ce6:	f7fe ba97 	b.w	801f218 <__retarget_lock_release_recursive>
 8020cea:	bf00      	nop
 8020cec:	2001d460 	.word	0x2001d460

08020cf0 <_Balloc>:
 8020cf0:	b570      	push	{r4, r5, r6, lr}
 8020cf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020cf4:	4604      	mov	r4, r0
 8020cf6:	460d      	mov	r5, r1
 8020cf8:	b976      	cbnz	r6, 8020d18 <_Balloc+0x28>
 8020cfa:	2010      	movs	r0, #16
 8020cfc:	f7fe faf2 	bl	801f2e4 <malloc>
 8020d00:	4602      	mov	r2, r0
 8020d02:	6260      	str	r0, [r4, #36]	; 0x24
 8020d04:	b920      	cbnz	r0, 8020d10 <_Balloc+0x20>
 8020d06:	4b18      	ldr	r3, [pc, #96]	; (8020d68 <_Balloc+0x78>)
 8020d08:	4818      	ldr	r0, [pc, #96]	; (8020d6c <_Balloc+0x7c>)
 8020d0a:	2166      	movs	r1, #102	; 0x66
 8020d0c:	f000 ffc2 	bl	8021c94 <__assert_func>
 8020d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020d14:	6006      	str	r6, [r0, #0]
 8020d16:	60c6      	str	r6, [r0, #12]
 8020d18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020d1a:	68f3      	ldr	r3, [r6, #12]
 8020d1c:	b183      	cbz	r3, 8020d40 <_Balloc+0x50>
 8020d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020d20:	68db      	ldr	r3, [r3, #12]
 8020d22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020d26:	b9b8      	cbnz	r0, 8020d58 <_Balloc+0x68>
 8020d28:	2101      	movs	r1, #1
 8020d2a:	fa01 f605 	lsl.w	r6, r1, r5
 8020d2e:	1d72      	adds	r2, r6, #5
 8020d30:	0092      	lsls	r2, r2, #2
 8020d32:	4620      	mov	r0, r4
 8020d34:	f7fe fb16 	bl	801f364 <_calloc_r>
 8020d38:	b160      	cbz	r0, 8020d54 <_Balloc+0x64>
 8020d3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020d3e:	e00e      	b.n	8020d5e <_Balloc+0x6e>
 8020d40:	2221      	movs	r2, #33	; 0x21
 8020d42:	2104      	movs	r1, #4
 8020d44:	4620      	mov	r0, r4
 8020d46:	f7fe fb0d 	bl	801f364 <_calloc_r>
 8020d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020d4c:	60f0      	str	r0, [r6, #12]
 8020d4e:	68db      	ldr	r3, [r3, #12]
 8020d50:	2b00      	cmp	r3, #0
 8020d52:	d1e4      	bne.n	8020d1e <_Balloc+0x2e>
 8020d54:	2000      	movs	r0, #0
 8020d56:	bd70      	pop	{r4, r5, r6, pc}
 8020d58:	6802      	ldr	r2, [r0, #0]
 8020d5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020d5e:	2300      	movs	r3, #0
 8020d60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020d64:	e7f7      	b.n	8020d56 <_Balloc+0x66>
 8020d66:	bf00      	nop
 8020d68:	08022f78 	.word	0x08022f78
 8020d6c:	08022f8f 	.word	0x08022f8f

08020d70 <_Bfree>:
 8020d70:	b570      	push	{r4, r5, r6, lr}
 8020d72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020d74:	4605      	mov	r5, r0
 8020d76:	460c      	mov	r4, r1
 8020d78:	b976      	cbnz	r6, 8020d98 <_Bfree+0x28>
 8020d7a:	2010      	movs	r0, #16
 8020d7c:	f7fe fab2 	bl	801f2e4 <malloc>
 8020d80:	4602      	mov	r2, r0
 8020d82:	6268      	str	r0, [r5, #36]	; 0x24
 8020d84:	b920      	cbnz	r0, 8020d90 <_Bfree+0x20>
 8020d86:	4b09      	ldr	r3, [pc, #36]	; (8020dac <_Bfree+0x3c>)
 8020d88:	4809      	ldr	r0, [pc, #36]	; (8020db0 <_Bfree+0x40>)
 8020d8a:	218a      	movs	r1, #138	; 0x8a
 8020d8c:	f000 ff82 	bl	8021c94 <__assert_func>
 8020d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020d94:	6006      	str	r6, [r0, #0]
 8020d96:	60c6      	str	r6, [r0, #12]
 8020d98:	b13c      	cbz	r4, 8020daa <_Bfree+0x3a>
 8020d9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020d9c:	6862      	ldr	r2, [r4, #4]
 8020d9e:	68db      	ldr	r3, [r3, #12]
 8020da0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020da4:	6021      	str	r1, [r4, #0]
 8020da6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020daa:	bd70      	pop	{r4, r5, r6, pc}
 8020dac:	08022f78 	.word	0x08022f78
 8020db0:	08022f8f 	.word	0x08022f8f

08020db4 <__multadd>:
 8020db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020db8:	690e      	ldr	r6, [r1, #16]
 8020dba:	4607      	mov	r7, r0
 8020dbc:	4698      	mov	r8, r3
 8020dbe:	460c      	mov	r4, r1
 8020dc0:	f101 0014 	add.w	r0, r1, #20
 8020dc4:	2300      	movs	r3, #0
 8020dc6:	6805      	ldr	r5, [r0, #0]
 8020dc8:	b2a9      	uxth	r1, r5
 8020dca:	fb02 8101 	mla	r1, r2, r1, r8
 8020dce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8020dd2:	0c2d      	lsrs	r5, r5, #16
 8020dd4:	fb02 c505 	mla	r5, r2, r5, ip
 8020dd8:	b289      	uxth	r1, r1
 8020dda:	3301      	adds	r3, #1
 8020ddc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8020de0:	429e      	cmp	r6, r3
 8020de2:	f840 1b04 	str.w	r1, [r0], #4
 8020de6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020dea:	dcec      	bgt.n	8020dc6 <__multadd+0x12>
 8020dec:	f1b8 0f00 	cmp.w	r8, #0
 8020df0:	d022      	beq.n	8020e38 <__multadd+0x84>
 8020df2:	68a3      	ldr	r3, [r4, #8]
 8020df4:	42b3      	cmp	r3, r6
 8020df6:	dc19      	bgt.n	8020e2c <__multadd+0x78>
 8020df8:	6861      	ldr	r1, [r4, #4]
 8020dfa:	4638      	mov	r0, r7
 8020dfc:	3101      	adds	r1, #1
 8020dfe:	f7ff ff77 	bl	8020cf0 <_Balloc>
 8020e02:	4605      	mov	r5, r0
 8020e04:	b928      	cbnz	r0, 8020e12 <__multadd+0x5e>
 8020e06:	4602      	mov	r2, r0
 8020e08:	4b0d      	ldr	r3, [pc, #52]	; (8020e40 <__multadd+0x8c>)
 8020e0a:	480e      	ldr	r0, [pc, #56]	; (8020e44 <__multadd+0x90>)
 8020e0c:	21b5      	movs	r1, #181	; 0xb5
 8020e0e:	f000 ff41 	bl	8021c94 <__assert_func>
 8020e12:	6922      	ldr	r2, [r4, #16]
 8020e14:	3202      	adds	r2, #2
 8020e16:	f104 010c 	add.w	r1, r4, #12
 8020e1a:	0092      	lsls	r2, r2, #2
 8020e1c:	300c      	adds	r0, #12
 8020e1e:	f7fe fa71 	bl	801f304 <memcpy>
 8020e22:	4621      	mov	r1, r4
 8020e24:	4638      	mov	r0, r7
 8020e26:	f7ff ffa3 	bl	8020d70 <_Bfree>
 8020e2a:	462c      	mov	r4, r5
 8020e2c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8020e30:	3601      	adds	r6, #1
 8020e32:	f8c3 8014 	str.w	r8, [r3, #20]
 8020e36:	6126      	str	r6, [r4, #16]
 8020e38:	4620      	mov	r0, r4
 8020e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e3e:	bf00      	nop
 8020e40:	08022ee8 	.word	0x08022ee8
 8020e44:	08022f8f 	.word	0x08022f8f

08020e48 <__s2b>:
 8020e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020e4c:	460c      	mov	r4, r1
 8020e4e:	4615      	mov	r5, r2
 8020e50:	461f      	mov	r7, r3
 8020e52:	2209      	movs	r2, #9
 8020e54:	3308      	adds	r3, #8
 8020e56:	4606      	mov	r6, r0
 8020e58:	fb93 f3f2 	sdiv	r3, r3, r2
 8020e5c:	2100      	movs	r1, #0
 8020e5e:	2201      	movs	r2, #1
 8020e60:	429a      	cmp	r2, r3
 8020e62:	db09      	blt.n	8020e78 <__s2b+0x30>
 8020e64:	4630      	mov	r0, r6
 8020e66:	f7ff ff43 	bl	8020cf0 <_Balloc>
 8020e6a:	b940      	cbnz	r0, 8020e7e <__s2b+0x36>
 8020e6c:	4602      	mov	r2, r0
 8020e6e:	4b19      	ldr	r3, [pc, #100]	; (8020ed4 <__s2b+0x8c>)
 8020e70:	4819      	ldr	r0, [pc, #100]	; (8020ed8 <__s2b+0x90>)
 8020e72:	21ce      	movs	r1, #206	; 0xce
 8020e74:	f000 ff0e 	bl	8021c94 <__assert_func>
 8020e78:	0052      	lsls	r2, r2, #1
 8020e7a:	3101      	adds	r1, #1
 8020e7c:	e7f0      	b.n	8020e60 <__s2b+0x18>
 8020e7e:	9b08      	ldr	r3, [sp, #32]
 8020e80:	6143      	str	r3, [r0, #20]
 8020e82:	2d09      	cmp	r5, #9
 8020e84:	f04f 0301 	mov.w	r3, #1
 8020e88:	6103      	str	r3, [r0, #16]
 8020e8a:	dd16      	ble.n	8020eba <__s2b+0x72>
 8020e8c:	f104 0909 	add.w	r9, r4, #9
 8020e90:	46c8      	mov	r8, r9
 8020e92:	442c      	add	r4, r5
 8020e94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8020e98:	4601      	mov	r1, r0
 8020e9a:	3b30      	subs	r3, #48	; 0x30
 8020e9c:	220a      	movs	r2, #10
 8020e9e:	4630      	mov	r0, r6
 8020ea0:	f7ff ff88 	bl	8020db4 <__multadd>
 8020ea4:	45a0      	cmp	r8, r4
 8020ea6:	d1f5      	bne.n	8020e94 <__s2b+0x4c>
 8020ea8:	f1a5 0408 	sub.w	r4, r5, #8
 8020eac:	444c      	add	r4, r9
 8020eae:	1b2d      	subs	r5, r5, r4
 8020eb0:	1963      	adds	r3, r4, r5
 8020eb2:	42bb      	cmp	r3, r7
 8020eb4:	db04      	blt.n	8020ec0 <__s2b+0x78>
 8020eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020eba:	340a      	adds	r4, #10
 8020ebc:	2509      	movs	r5, #9
 8020ebe:	e7f6      	b.n	8020eae <__s2b+0x66>
 8020ec0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8020ec4:	4601      	mov	r1, r0
 8020ec6:	3b30      	subs	r3, #48	; 0x30
 8020ec8:	220a      	movs	r2, #10
 8020eca:	4630      	mov	r0, r6
 8020ecc:	f7ff ff72 	bl	8020db4 <__multadd>
 8020ed0:	e7ee      	b.n	8020eb0 <__s2b+0x68>
 8020ed2:	bf00      	nop
 8020ed4:	08022ee8 	.word	0x08022ee8
 8020ed8:	08022f8f 	.word	0x08022f8f

08020edc <__hi0bits>:
 8020edc:	0c03      	lsrs	r3, r0, #16
 8020ede:	041b      	lsls	r3, r3, #16
 8020ee0:	b9d3      	cbnz	r3, 8020f18 <__hi0bits+0x3c>
 8020ee2:	0400      	lsls	r0, r0, #16
 8020ee4:	2310      	movs	r3, #16
 8020ee6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020eea:	bf04      	itt	eq
 8020eec:	0200      	lsleq	r0, r0, #8
 8020eee:	3308      	addeq	r3, #8
 8020ef0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020ef4:	bf04      	itt	eq
 8020ef6:	0100      	lsleq	r0, r0, #4
 8020ef8:	3304      	addeq	r3, #4
 8020efa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020efe:	bf04      	itt	eq
 8020f00:	0080      	lsleq	r0, r0, #2
 8020f02:	3302      	addeq	r3, #2
 8020f04:	2800      	cmp	r0, #0
 8020f06:	db05      	blt.n	8020f14 <__hi0bits+0x38>
 8020f08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020f0c:	f103 0301 	add.w	r3, r3, #1
 8020f10:	bf08      	it	eq
 8020f12:	2320      	moveq	r3, #32
 8020f14:	4618      	mov	r0, r3
 8020f16:	4770      	bx	lr
 8020f18:	2300      	movs	r3, #0
 8020f1a:	e7e4      	b.n	8020ee6 <__hi0bits+0xa>

08020f1c <__lo0bits>:
 8020f1c:	6803      	ldr	r3, [r0, #0]
 8020f1e:	f013 0207 	ands.w	r2, r3, #7
 8020f22:	4601      	mov	r1, r0
 8020f24:	d00b      	beq.n	8020f3e <__lo0bits+0x22>
 8020f26:	07da      	lsls	r2, r3, #31
 8020f28:	d424      	bmi.n	8020f74 <__lo0bits+0x58>
 8020f2a:	0798      	lsls	r0, r3, #30
 8020f2c:	bf49      	itett	mi
 8020f2e:	085b      	lsrmi	r3, r3, #1
 8020f30:	089b      	lsrpl	r3, r3, #2
 8020f32:	2001      	movmi	r0, #1
 8020f34:	600b      	strmi	r3, [r1, #0]
 8020f36:	bf5c      	itt	pl
 8020f38:	600b      	strpl	r3, [r1, #0]
 8020f3a:	2002      	movpl	r0, #2
 8020f3c:	4770      	bx	lr
 8020f3e:	b298      	uxth	r0, r3
 8020f40:	b9b0      	cbnz	r0, 8020f70 <__lo0bits+0x54>
 8020f42:	0c1b      	lsrs	r3, r3, #16
 8020f44:	2010      	movs	r0, #16
 8020f46:	f013 0fff 	tst.w	r3, #255	; 0xff
 8020f4a:	bf04      	itt	eq
 8020f4c:	0a1b      	lsreq	r3, r3, #8
 8020f4e:	3008      	addeq	r0, #8
 8020f50:	071a      	lsls	r2, r3, #28
 8020f52:	bf04      	itt	eq
 8020f54:	091b      	lsreq	r3, r3, #4
 8020f56:	3004      	addeq	r0, #4
 8020f58:	079a      	lsls	r2, r3, #30
 8020f5a:	bf04      	itt	eq
 8020f5c:	089b      	lsreq	r3, r3, #2
 8020f5e:	3002      	addeq	r0, #2
 8020f60:	07da      	lsls	r2, r3, #31
 8020f62:	d403      	bmi.n	8020f6c <__lo0bits+0x50>
 8020f64:	085b      	lsrs	r3, r3, #1
 8020f66:	f100 0001 	add.w	r0, r0, #1
 8020f6a:	d005      	beq.n	8020f78 <__lo0bits+0x5c>
 8020f6c:	600b      	str	r3, [r1, #0]
 8020f6e:	4770      	bx	lr
 8020f70:	4610      	mov	r0, r2
 8020f72:	e7e8      	b.n	8020f46 <__lo0bits+0x2a>
 8020f74:	2000      	movs	r0, #0
 8020f76:	4770      	bx	lr
 8020f78:	2020      	movs	r0, #32
 8020f7a:	4770      	bx	lr

08020f7c <__i2b>:
 8020f7c:	b510      	push	{r4, lr}
 8020f7e:	460c      	mov	r4, r1
 8020f80:	2101      	movs	r1, #1
 8020f82:	f7ff feb5 	bl	8020cf0 <_Balloc>
 8020f86:	4602      	mov	r2, r0
 8020f88:	b928      	cbnz	r0, 8020f96 <__i2b+0x1a>
 8020f8a:	4b05      	ldr	r3, [pc, #20]	; (8020fa0 <__i2b+0x24>)
 8020f8c:	4805      	ldr	r0, [pc, #20]	; (8020fa4 <__i2b+0x28>)
 8020f8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8020f92:	f000 fe7f 	bl	8021c94 <__assert_func>
 8020f96:	2301      	movs	r3, #1
 8020f98:	6144      	str	r4, [r0, #20]
 8020f9a:	6103      	str	r3, [r0, #16]
 8020f9c:	bd10      	pop	{r4, pc}
 8020f9e:	bf00      	nop
 8020fa0:	08022ee8 	.word	0x08022ee8
 8020fa4:	08022f8f 	.word	0x08022f8f

08020fa8 <__multiply>:
 8020fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fac:	4614      	mov	r4, r2
 8020fae:	690a      	ldr	r2, [r1, #16]
 8020fb0:	6923      	ldr	r3, [r4, #16]
 8020fb2:	429a      	cmp	r2, r3
 8020fb4:	bfb8      	it	lt
 8020fb6:	460b      	movlt	r3, r1
 8020fb8:	460d      	mov	r5, r1
 8020fba:	bfbc      	itt	lt
 8020fbc:	4625      	movlt	r5, r4
 8020fbe:	461c      	movlt	r4, r3
 8020fc0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8020fc4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020fc8:	68ab      	ldr	r3, [r5, #8]
 8020fca:	6869      	ldr	r1, [r5, #4]
 8020fcc:	eb0a 0709 	add.w	r7, sl, r9
 8020fd0:	42bb      	cmp	r3, r7
 8020fd2:	b085      	sub	sp, #20
 8020fd4:	bfb8      	it	lt
 8020fd6:	3101      	addlt	r1, #1
 8020fd8:	f7ff fe8a 	bl	8020cf0 <_Balloc>
 8020fdc:	b930      	cbnz	r0, 8020fec <__multiply+0x44>
 8020fde:	4602      	mov	r2, r0
 8020fe0:	4b42      	ldr	r3, [pc, #264]	; (80210ec <__multiply+0x144>)
 8020fe2:	4843      	ldr	r0, [pc, #268]	; (80210f0 <__multiply+0x148>)
 8020fe4:	f240 115d 	movw	r1, #349	; 0x15d
 8020fe8:	f000 fe54 	bl	8021c94 <__assert_func>
 8020fec:	f100 0614 	add.w	r6, r0, #20
 8020ff0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8020ff4:	4633      	mov	r3, r6
 8020ff6:	2200      	movs	r2, #0
 8020ff8:	4543      	cmp	r3, r8
 8020ffa:	d31e      	bcc.n	802103a <__multiply+0x92>
 8020ffc:	f105 0c14 	add.w	ip, r5, #20
 8021000:	f104 0314 	add.w	r3, r4, #20
 8021004:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8021008:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 802100c:	9202      	str	r2, [sp, #8]
 802100e:	ebac 0205 	sub.w	r2, ip, r5
 8021012:	3a15      	subs	r2, #21
 8021014:	f022 0203 	bic.w	r2, r2, #3
 8021018:	3204      	adds	r2, #4
 802101a:	f105 0115 	add.w	r1, r5, #21
 802101e:	458c      	cmp	ip, r1
 8021020:	bf38      	it	cc
 8021022:	2204      	movcc	r2, #4
 8021024:	9201      	str	r2, [sp, #4]
 8021026:	9a02      	ldr	r2, [sp, #8]
 8021028:	9303      	str	r3, [sp, #12]
 802102a:	429a      	cmp	r2, r3
 802102c:	d808      	bhi.n	8021040 <__multiply+0x98>
 802102e:	2f00      	cmp	r7, #0
 8021030:	dc55      	bgt.n	80210de <__multiply+0x136>
 8021032:	6107      	str	r7, [r0, #16]
 8021034:	b005      	add	sp, #20
 8021036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802103a:	f843 2b04 	str.w	r2, [r3], #4
 802103e:	e7db      	b.n	8020ff8 <__multiply+0x50>
 8021040:	f8b3 a000 	ldrh.w	sl, [r3]
 8021044:	f1ba 0f00 	cmp.w	sl, #0
 8021048:	d020      	beq.n	802108c <__multiply+0xe4>
 802104a:	f105 0e14 	add.w	lr, r5, #20
 802104e:	46b1      	mov	r9, r6
 8021050:	2200      	movs	r2, #0
 8021052:	f85e 4b04 	ldr.w	r4, [lr], #4
 8021056:	f8d9 b000 	ldr.w	fp, [r9]
 802105a:	b2a1      	uxth	r1, r4
 802105c:	fa1f fb8b 	uxth.w	fp, fp
 8021060:	fb0a b101 	mla	r1, sl, r1, fp
 8021064:	4411      	add	r1, r2
 8021066:	f8d9 2000 	ldr.w	r2, [r9]
 802106a:	0c24      	lsrs	r4, r4, #16
 802106c:	0c12      	lsrs	r2, r2, #16
 802106e:	fb0a 2404 	mla	r4, sl, r4, r2
 8021072:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8021076:	b289      	uxth	r1, r1
 8021078:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802107c:	45f4      	cmp	ip, lr
 802107e:	f849 1b04 	str.w	r1, [r9], #4
 8021082:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8021086:	d8e4      	bhi.n	8021052 <__multiply+0xaa>
 8021088:	9901      	ldr	r1, [sp, #4]
 802108a:	5072      	str	r2, [r6, r1]
 802108c:	9a03      	ldr	r2, [sp, #12]
 802108e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021092:	3304      	adds	r3, #4
 8021094:	f1b9 0f00 	cmp.w	r9, #0
 8021098:	d01f      	beq.n	80210da <__multiply+0x132>
 802109a:	6834      	ldr	r4, [r6, #0]
 802109c:	f105 0114 	add.w	r1, r5, #20
 80210a0:	46b6      	mov	lr, r6
 80210a2:	f04f 0a00 	mov.w	sl, #0
 80210a6:	880a      	ldrh	r2, [r1, #0]
 80210a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80210ac:	fb09 b202 	mla	r2, r9, r2, fp
 80210b0:	4492      	add	sl, r2
 80210b2:	b2a4      	uxth	r4, r4
 80210b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80210b8:	f84e 4b04 	str.w	r4, [lr], #4
 80210bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80210c0:	f8be 2000 	ldrh.w	r2, [lr]
 80210c4:	0c24      	lsrs	r4, r4, #16
 80210c6:	fb09 2404 	mla	r4, r9, r4, r2
 80210ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80210ce:	458c      	cmp	ip, r1
 80210d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80210d4:	d8e7      	bhi.n	80210a6 <__multiply+0xfe>
 80210d6:	9a01      	ldr	r2, [sp, #4]
 80210d8:	50b4      	str	r4, [r6, r2]
 80210da:	3604      	adds	r6, #4
 80210dc:	e7a3      	b.n	8021026 <__multiply+0x7e>
 80210de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80210e2:	2b00      	cmp	r3, #0
 80210e4:	d1a5      	bne.n	8021032 <__multiply+0x8a>
 80210e6:	3f01      	subs	r7, #1
 80210e8:	e7a1      	b.n	802102e <__multiply+0x86>
 80210ea:	bf00      	nop
 80210ec:	08022ee8 	.word	0x08022ee8
 80210f0:	08022f8f 	.word	0x08022f8f

080210f4 <__pow5mult>:
 80210f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80210f8:	4615      	mov	r5, r2
 80210fa:	f012 0203 	ands.w	r2, r2, #3
 80210fe:	4606      	mov	r6, r0
 8021100:	460f      	mov	r7, r1
 8021102:	d007      	beq.n	8021114 <__pow5mult+0x20>
 8021104:	4c25      	ldr	r4, [pc, #148]	; (802119c <__pow5mult+0xa8>)
 8021106:	3a01      	subs	r2, #1
 8021108:	2300      	movs	r3, #0
 802110a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802110e:	f7ff fe51 	bl	8020db4 <__multadd>
 8021112:	4607      	mov	r7, r0
 8021114:	10ad      	asrs	r5, r5, #2
 8021116:	d03d      	beq.n	8021194 <__pow5mult+0xa0>
 8021118:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802111a:	b97c      	cbnz	r4, 802113c <__pow5mult+0x48>
 802111c:	2010      	movs	r0, #16
 802111e:	f7fe f8e1 	bl	801f2e4 <malloc>
 8021122:	4602      	mov	r2, r0
 8021124:	6270      	str	r0, [r6, #36]	; 0x24
 8021126:	b928      	cbnz	r0, 8021134 <__pow5mult+0x40>
 8021128:	4b1d      	ldr	r3, [pc, #116]	; (80211a0 <__pow5mult+0xac>)
 802112a:	481e      	ldr	r0, [pc, #120]	; (80211a4 <__pow5mult+0xb0>)
 802112c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021130:	f000 fdb0 	bl	8021c94 <__assert_func>
 8021134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021138:	6004      	str	r4, [r0, #0]
 802113a:	60c4      	str	r4, [r0, #12]
 802113c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021144:	b94c      	cbnz	r4, 802115a <__pow5mult+0x66>
 8021146:	f240 2171 	movw	r1, #625	; 0x271
 802114a:	4630      	mov	r0, r6
 802114c:	f7ff ff16 	bl	8020f7c <__i2b>
 8021150:	2300      	movs	r3, #0
 8021152:	f8c8 0008 	str.w	r0, [r8, #8]
 8021156:	4604      	mov	r4, r0
 8021158:	6003      	str	r3, [r0, #0]
 802115a:	f04f 0900 	mov.w	r9, #0
 802115e:	07eb      	lsls	r3, r5, #31
 8021160:	d50a      	bpl.n	8021178 <__pow5mult+0x84>
 8021162:	4639      	mov	r1, r7
 8021164:	4622      	mov	r2, r4
 8021166:	4630      	mov	r0, r6
 8021168:	f7ff ff1e 	bl	8020fa8 <__multiply>
 802116c:	4639      	mov	r1, r7
 802116e:	4680      	mov	r8, r0
 8021170:	4630      	mov	r0, r6
 8021172:	f7ff fdfd 	bl	8020d70 <_Bfree>
 8021176:	4647      	mov	r7, r8
 8021178:	106d      	asrs	r5, r5, #1
 802117a:	d00b      	beq.n	8021194 <__pow5mult+0xa0>
 802117c:	6820      	ldr	r0, [r4, #0]
 802117e:	b938      	cbnz	r0, 8021190 <__pow5mult+0x9c>
 8021180:	4622      	mov	r2, r4
 8021182:	4621      	mov	r1, r4
 8021184:	4630      	mov	r0, r6
 8021186:	f7ff ff0f 	bl	8020fa8 <__multiply>
 802118a:	6020      	str	r0, [r4, #0]
 802118c:	f8c0 9000 	str.w	r9, [r0]
 8021190:	4604      	mov	r4, r0
 8021192:	e7e4      	b.n	802115e <__pow5mult+0x6a>
 8021194:	4638      	mov	r0, r7
 8021196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802119a:	bf00      	nop
 802119c:	080230e0 	.word	0x080230e0
 80211a0:	08022f78 	.word	0x08022f78
 80211a4:	08022f8f 	.word	0x08022f8f

080211a8 <__lshift>:
 80211a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80211ac:	460c      	mov	r4, r1
 80211ae:	6849      	ldr	r1, [r1, #4]
 80211b0:	6923      	ldr	r3, [r4, #16]
 80211b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80211b6:	68a3      	ldr	r3, [r4, #8]
 80211b8:	4607      	mov	r7, r0
 80211ba:	4691      	mov	r9, r2
 80211bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80211c0:	f108 0601 	add.w	r6, r8, #1
 80211c4:	42b3      	cmp	r3, r6
 80211c6:	db0b      	blt.n	80211e0 <__lshift+0x38>
 80211c8:	4638      	mov	r0, r7
 80211ca:	f7ff fd91 	bl	8020cf0 <_Balloc>
 80211ce:	4605      	mov	r5, r0
 80211d0:	b948      	cbnz	r0, 80211e6 <__lshift+0x3e>
 80211d2:	4602      	mov	r2, r0
 80211d4:	4b28      	ldr	r3, [pc, #160]	; (8021278 <__lshift+0xd0>)
 80211d6:	4829      	ldr	r0, [pc, #164]	; (802127c <__lshift+0xd4>)
 80211d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80211dc:	f000 fd5a 	bl	8021c94 <__assert_func>
 80211e0:	3101      	adds	r1, #1
 80211e2:	005b      	lsls	r3, r3, #1
 80211e4:	e7ee      	b.n	80211c4 <__lshift+0x1c>
 80211e6:	2300      	movs	r3, #0
 80211e8:	f100 0114 	add.w	r1, r0, #20
 80211ec:	f100 0210 	add.w	r2, r0, #16
 80211f0:	4618      	mov	r0, r3
 80211f2:	4553      	cmp	r3, sl
 80211f4:	db33      	blt.n	802125e <__lshift+0xb6>
 80211f6:	6920      	ldr	r0, [r4, #16]
 80211f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80211fc:	f104 0314 	add.w	r3, r4, #20
 8021200:	f019 091f 	ands.w	r9, r9, #31
 8021204:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021208:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802120c:	d02b      	beq.n	8021266 <__lshift+0xbe>
 802120e:	f1c9 0e20 	rsb	lr, r9, #32
 8021212:	468a      	mov	sl, r1
 8021214:	2200      	movs	r2, #0
 8021216:	6818      	ldr	r0, [r3, #0]
 8021218:	fa00 f009 	lsl.w	r0, r0, r9
 802121c:	4302      	orrs	r2, r0
 802121e:	f84a 2b04 	str.w	r2, [sl], #4
 8021222:	f853 2b04 	ldr.w	r2, [r3], #4
 8021226:	459c      	cmp	ip, r3
 8021228:	fa22 f20e 	lsr.w	r2, r2, lr
 802122c:	d8f3      	bhi.n	8021216 <__lshift+0x6e>
 802122e:	ebac 0304 	sub.w	r3, ip, r4
 8021232:	3b15      	subs	r3, #21
 8021234:	f023 0303 	bic.w	r3, r3, #3
 8021238:	3304      	adds	r3, #4
 802123a:	f104 0015 	add.w	r0, r4, #21
 802123e:	4584      	cmp	ip, r0
 8021240:	bf38      	it	cc
 8021242:	2304      	movcc	r3, #4
 8021244:	50ca      	str	r2, [r1, r3]
 8021246:	b10a      	cbz	r2, 802124c <__lshift+0xa4>
 8021248:	f108 0602 	add.w	r6, r8, #2
 802124c:	3e01      	subs	r6, #1
 802124e:	4638      	mov	r0, r7
 8021250:	612e      	str	r6, [r5, #16]
 8021252:	4621      	mov	r1, r4
 8021254:	f7ff fd8c 	bl	8020d70 <_Bfree>
 8021258:	4628      	mov	r0, r5
 802125a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802125e:	f842 0f04 	str.w	r0, [r2, #4]!
 8021262:	3301      	adds	r3, #1
 8021264:	e7c5      	b.n	80211f2 <__lshift+0x4a>
 8021266:	3904      	subs	r1, #4
 8021268:	f853 2b04 	ldr.w	r2, [r3], #4
 802126c:	f841 2f04 	str.w	r2, [r1, #4]!
 8021270:	459c      	cmp	ip, r3
 8021272:	d8f9      	bhi.n	8021268 <__lshift+0xc0>
 8021274:	e7ea      	b.n	802124c <__lshift+0xa4>
 8021276:	bf00      	nop
 8021278:	08022ee8 	.word	0x08022ee8
 802127c:	08022f8f 	.word	0x08022f8f

08021280 <__mcmp>:
 8021280:	b530      	push	{r4, r5, lr}
 8021282:	6902      	ldr	r2, [r0, #16]
 8021284:	690c      	ldr	r4, [r1, #16]
 8021286:	1b12      	subs	r2, r2, r4
 8021288:	d10e      	bne.n	80212a8 <__mcmp+0x28>
 802128a:	f100 0314 	add.w	r3, r0, #20
 802128e:	3114      	adds	r1, #20
 8021290:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021294:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021298:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802129c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80212a0:	42a5      	cmp	r5, r4
 80212a2:	d003      	beq.n	80212ac <__mcmp+0x2c>
 80212a4:	d305      	bcc.n	80212b2 <__mcmp+0x32>
 80212a6:	2201      	movs	r2, #1
 80212a8:	4610      	mov	r0, r2
 80212aa:	bd30      	pop	{r4, r5, pc}
 80212ac:	4283      	cmp	r3, r0
 80212ae:	d3f3      	bcc.n	8021298 <__mcmp+0x18>
 80212b0:	e7fa      	b.n	80212a8 <__mcmp+0x28>
 80212b2:	f04f 32ff 	mov.w	r2, #4294967295
 80212b6:	e7f7      	b.n	80212a8 <__mcmp+0x28>

080212b8 <__mdiff>:
 80212b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212bc:	460c      	mov	r4, r1
 80212be:	4606      	mov	r6, r0
 80212c0:	4611      	mov	r1, r2
 80212c2:	4620      	mov	r0, r4
 80212c4:	4617      	mov	r7, r2
 80212c6:	f7ff ffdb 	bl	8021280 <__mcmp>
 80212ca:	1e05      	subs	r5, r0, #0
 80212cc:	d110      	bne.n	80212f0 <__mdiff+0x38>
 80212ce:	4629      	mov	r1, r5
 80212d0:	4630      	mov	r0, r6
 80212d2:	f7ff fd0d 	bl	8020cf0 <_Balloc>
 80212d6:	b930      	cbnz	r0, 80212e6 <__mdiff+0x2e>
 80212d8:	4b39      	ldr	r3, [pc, #228]	; (80213c0 <__mdiff+0x108>)
 80212da:	4602      	mov	r2, r0
 80212dc:	f240 2132 	movw	r1, #562	; 0x232
 80212e0:	4838      	ldr	r0, [pc, #224]	; (80213c4 <__mdiff+0x10c>)
 80212e2:	f000 fcd7 	bl	8021c94 <__assert_func>
 80212e6:	2301      	movs	r3, #1
 80212e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80212ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212f0:	bfa4      	itt	ge
 80212f2:	463b      	movge	r3, r7
 80212f4:	4627      	movge	r7, r4
 80212f6:	4630      	mov	r0, r6
 80212f8:	6879      	ldr	r1, [r7, #4]
 80212fa:	bfa6      	itte	ge
 80212fc:	461c      	movge	r4, r3
 80212fe:	2500      	movge	r5, #0
 8021300:	2501      	movlt	r5, #1
 8021302:	f7ff fcf5 	bl	8020cf0 <_Balloc>
 8021306:	b920      	cbnz	r0, 8021312 <__mdiff+0x5a>
 8021308:	4b2d      	ldr	r3, [pc, #180]	; (80213c0 <__mdiff+0x108>)
 802130a:	4602      	mov	r2, r0
 802130c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021310:	e7e6      	b.n	80212e0 <__mdiff+0x28>
 8021312:	693e      	ldr	r6, [r7, #16]
 8021314:	60c5      	str	r5, [r0, #12]
 8021316:	6925      	ldr	r5, [r4, #16]
 8021318:	f107 0114 	add.w	r1, r7, #20
 802131c:	f104 0914 	add.w	r9, r4, #20
 8021320:	f100 0e14 	add.w	lr, r0, #20
 8021324:	f107 0210 	add.w	r2, r7, #16
 8021328:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 802132c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8021330:	46f2      	mov	sl, lr
 8021332:	2700      	movs	r7, #0
 8021334:	f859 3b04 	ldr.w	r3, [r9], #4
 8021338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802133c:	fa1f f883 	uxth.w	r8, r3
 8021340:	fa17 f78b 	uxtah	r7, r7, fp
 8021344:	0c1b      	lsrs	r3, r3, #16
 8021346:	eba7 0808 	sub.w	r8, r7, r8
 802134a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802134e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021352:	fa1f f888 	uxth.w	r8, r8
 8021356:	141f      	asrs	r7, r3, #16
 8021358:	454d      	cmp	r5, r9
 802135a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802135e:	f84a 3b04 	str.w	r3, [sl], #4
 8021362:	d8e7      	bhi.n	8021334 <__mdiff+0x7c>
 8021364:	1b2b      	subs	r3, r5, r4
 8021366:	3b15      	subs	r3, #21
 8021368:	f023 0303 	bic.w	r3, r3, #3
 802136c:	3304      	adds	r3, #4
 802136e:	3415      	adds	r4, #21
 8021370:	42a5      	cmp	r5, r4
 8021372:	bf38      	it	cc
 8021374:	2304      	movcc	r3, #4
 8021376:	4419      	add	r1, r3
 8021378:	4473      	add	r3, lr
 802137a:	469e      	mov	lr, r3
 802137c:	460d      	mov	r5, r1
 802137e:	4565      	cmp	r5, ip
 8021380:	d30e      	bcc.n	80213a0 <__mdiff+0xe8>
 8021382:	f10c 0203 	add.w	r2, ip, #3
 8021386:	1a52      	subs	r2, r2, r1
 8021388:	f022 0203 	bic.w	r2, r2, #3
 802138c:	3903      	subs	r1, #3
 802138e:	458c      	cmp	ip, r1
 8021390:	bf38      	it	cc
 8021392:	2200      	movcc	r2, #0
 8021394:	441a      	add	r2, r3
 8021396:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802139a:	b17b      	cbz	r3, 80213bc <__mdiff+0x104>
 802139c:	6106      	str	r6, [r0, #16]
 802139e:	e7a5      	b.n	80212ec <__mdiff+0x34>
 80213a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80213a4:	fa17 f488 	uxtah	r4, r7, r8
 80213a8:	1422      	asrs	r2, r4, #16
 80213aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80213ae:	b2a4      	uxth	r4, r4
 80213b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80213b4:	f84e 4b04 	str.w	r4, [lr], #4
 80213b8:	1417      	asrs	r7, r2, #16
 80213ba:	e7e0      	b.n	802137e <__mdiff+0xc6>
 80213bc:	3e01      	subs	r6, #1
 80213be:	e7ea      	b.n	8021396 <__mdiff+0xde>
 80213c0:	08022ee8 	.word	0x08022ee8
 80213c4:	08022f8f 	.word	0x08022f8f

080213c8 <__ulp>:
 80213c8:	b082      	sub	sp, #8
 80213ca:	ed8d 0b00 	vstr	d0, [sp]
 80213ce:	9b01      	ldr	r3, [sp, #4]
 80213d0:	4912      	ldr	r1, [pc, #72]	; (802141c <__ulp+0x54>)
 80213d2:	4019      	ands	r1, r3
 80213d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80213d8:	2900      	cmp	r1, #0
 80213da:	dd05      	ble.n	80213e8 <__ulp+0x20>
 80213dc:	2200      	movs	r2, #0
 80213de:	460b      	mov	r3, r1
 80213e0:	ec43 2b10 	vmov	d0, r2, r3
 80213e4:	b002      	add	sp, #8
 80213e6:	4770      	bx	lr
 80213e8:	4249      	negs	r1, r1
 80213ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80213ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 80213f2:	f04f 0200 	mov.w	r2, #0
 80213f6:	f04f 0300 	mov.w	r3, #0
 80213fa:	da04      	bge.n	8021406 <__ulp+0x3e>
 80213fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8021400:	fa41 f300 	asr.w	r3, r1, r0
 8021404:	e7ec      	b.n	80213e0 <__ulp+0x18>
 8021406:	f1a0 0114 	sub.w	r1, r0, #20
 802140a:	291e      	cmp	r1, #30
 802140c:	bfda      	itte	le
 802140e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8021412:	fa20 f101 	lsrle.w	r1, r0, r1
 8021416:	2101      	movgt	r1, #1
 8021418:	460a      	mov	r2, r1
 802141a:	e7e1      	b.n	80213e0 <__ulp+0x18>
 802141c:	7ff00000 	.word	0x7ff00000

08021420 <__b2d>:
 8021420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021422:	6905      	ldr	r5, [r0, #16]
 8021424:	f100 0714 	add.w	r7, r0, #20
 8021428:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 802142c:	1f2e      	subs	r6, r5, #4
 802142e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8021432:	4620      	mov	r0, r4
 8021434:	f7ff fd52 	bl	8020edc <__hi0bits>
 8021438:	f1c0 0320 	rsb	r3, r0, #32
 802143c:	280a      	cmp	r0, #10
 802143e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80214bc <__b2d+0x9c>
 8021442:	600b      	str	r3, [r1, #0]
 8021444:	dc14      	bgt.n	8021470 <__b2d+0x50>
 8021446:	f1c0 0e0b 	rsb	lr, r0, #11
 802144a:	fa24 f10e 	lsr.w	r1, r4, lr
 802144e:	42b7      	cmp	r7, r6
 8021450:	ea41 030c 	orr.w	r3, r1, ip
 8021454:	bf34      	ite	cc
 8021456:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802145a:	2100      	movcs	r1, #0
 802145c:	3015      	adds	r0, #21
 802145e:	fa04 f000 	lsl.w	r0, r4, r0
 8021462:	fa21 f10e 	lsr.w	r1, r1, lr
 8021466:	ea40 0201 	orr.w	r2, r0, r1
 802146a:	ec43 2b10 	vmov	d0, r2, r3
 802146e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021470:	42b7      	cmp	r7, r6
 8021472:	bf3a      	itte	cc
 8021474:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8021478:	f1a5 0608 	subcc.w	r6, r5, #8
 802147c:	2100      	movcs	r1, #0
 802147e:	380b      	subs	r0, #11
 8021480:	d017      	beq.n	80214b2 <__b2d+0x92>
 8021482:	f1c0 0c20 	rsb	ip, r0, #32
 8021486:	fa04 f500 	lsl.w	r5, r4, r0
 802148a:	42be      	cmp	r6, r7
 802148c:	fa21 f40c 	lsr.w	r4, r1, ip
 8021490:	ea45 0504 	orr.w	r5, r5, r4
 8021494:	bf8c      	ite	hi
 8021496:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802149a:	2400      	movls	r4, #0
 802149c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80214a0:	fa01 f000 	lsl.w	r0, r1, r0
 80214a4:	fa24 f40c 	lsr.w	r4, r4, ip
 80214a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80214ac:	ea40 0204 	orr.w	r2, r0, r4
 80214b0:	e7db      	b.n	802146a <__b2d+0x4a>
 80214b2:	ea44 030c 	orr.w	r3, r4, ip
 80214b6:	460a      	mov	r2, r1
 80214b8:	e7d7      	b.n	802146a <__b2d+0x4a>
 80214ba:	bf00      	nop
 80214bc:	3ff00000 	.word	0x3ff00000

080214c0 <__d2b>:
 80214c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80214c4:	4689      	mov	r9, r1
 80214c6:	2101      	movs	r1, #1
 80214c8:	ec57 6b10 	vmov	r6, r7, d0
 80214cc:	4690      	mov	r8, r2
 80214ce:	f7ff fc0f 	bl	8020cf0 <_Balloc>
 80214d2:	4604      	mov	r4, r0
 80214d4:	b930      	cbnz	r0, 80214e4 <__d2b+0x24>
 80214d6:	4602      	mov	r2, r0
 80214d8:	4b25      	ldr	r3, [pc, #148]	; (8021570 <__d2b+0xb0>)
 80214da:	4826      	ldr	r0, [pc, #152]	; (8021574 <__d2b+0xb4>)
 80214dc:	f240 310a 	movw	r1, #778	; 0x30a
 80214e0:	f000 fbd8 	bl	8021c94 <__assert_func>
 80214e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80214e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80214ec:	bb35      	cbnz	r5, 802153c <__d2b+0x7c>
 80214ee:	2e00      	cmp	r6, #0
 80214f0:	9301      	str	r3, [sp, #4]
 80214f2:	d028      	beq.n	8021546 <__d2b+0x86>
 80214f4:	4668      	mov	r0, sp
 80214f6:	9600      	str	r6, [sp, #0]
 80214f8:	f7ff fd10 	bl	8020f1c <__lo0bits>
 80214fc:	9900      	ldr	r1, [sp, #0]
 80214fe:	b300      	cbz	r0, 8021542 <__d2b+0x82>
 8021500:	9a01      	ldr	r2, [sp, #4]
 8021502:	f1c0 0320 	rsb	r3, r0, #32
 8021506:	fa02 f303 	lsl.w	r3, r2, r3
 802150a:	430b      	orrs	r3, r1
 802150c:	40c2      	lsrs	r2, r0
 802150e:	6163      	str	r3, [r4, #20]
 8021510:	9201      	str	r2, [sp, #4]
 8021512:	9b01      	ldr	r3, [sp, #4]
 8021514:	61a3      	str	r3, [r4, #24]
 8021516:	2b00      	cmp	r3, #0
 8021518:	bf14      	ite	ne
 802151a:	2202      	movne	r2, #2
 802151c:	2201      	moveq	r2, #1
 802151e:	6122      	str	r2, [r4, #16]
 8021520:	b1d5      	cbz	r5, 8021558 <__d2b+0x98>
 8021522:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021526:	4405      	add	r5, r0
 8021528:	f8c9 5000 	str.w	r5, [r9]
 802152c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8021530:	f8c8 0000 	str.w	r0, [r8]
 8021534:	4620      	mov	r0, r4
 8021536:	b003      	add	sp, #12
 8021538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802153c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021540:	e7d5      	b.n	80214ee <__d2b+0x2e>
 8021542:	6161      	str	r1, [r4, #20]
 8021544:	e7e5      	b.n	8021512 <__d2b+0x52>
 8021546:	a801      	add	r0, sp, #4
 8021548:	f7ff fce8 	bl	8020f1c <__lo0bits>
 802154c:	9b01      	ldr	r3, [sp, #4]
 802154e:	6163      	str	r3, [r4, #20]
 8021550:	2201      	movs	r2, #1
 8021552:	6122      	str	r2, [r4, #16]
 8021554:	3020      	adds	r0, #32
 8021556:	e7e3      	b.n	8021520 <__d2b+0x60>
 8021558:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802155c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8021560:	f8c9 0000 	str.w	r0, [r9]
 8021564:	6918      	ldr	r0, [r3, #16]
 8021566:	f7ff fcb9 	bl	8020edc <__hi0bits>
 802156a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802156e:	e7df      	b.n	8021530 <__d2b+0x70>
 8021570:	08022ee8 	.word	0x08022ee8
 8021574:	08022f8f 	.word	0x08022f8f

08021578 <__ratio>:
 8021578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802157c:	4688      	mov	r8, r1
 802157e:	4669      	mov	r1, sp
 8021580:	4681      	mov	r9, r0
 8021582:	f7ff ff4d 	bl	8021420 <__b2d>
 8021586:	a901      	add	r1, sp, #4
 8021588:	4640      	mov	r0, r8
 802158a:	ec55 4b10 	vmov	r4, r5, d0
 802158e:	f7ff ff47 	bl	8021420 <__b2d>
 8021592:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021596:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802159a:	eba3 0c02 	sub.w	ip, r3, r2
 802159e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80215a2:	1a9b      	subs	r3, r3, r2
 80215a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80215a8:	ec51 0b10 	vmov	r0, r1, d0
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	bfd6      	itet	le
 80215b0:	460a      	movle	r2, r1
 80215b2:	462a      	movgt	r2, r5
 80215b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80215b8:	468b      	mov	fp, r1
 80215ba:	462f      	mov	r7, r5
 80215bc:	bfd4      	ite	le
 80215be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80215c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80215c6:	4620      	mov	r0, r4
 80215c8:	ee10 2a10 	vmov	r2, s0
 80215cc:	465b      	mov	r3, fp
 80215ce:	4639      	mov	r1, r7
 80215d0:	f7df f964 	bl	800089c <__aeabi_ddiv>
 80215d4:	ec41 0b10 	vmov	d0, r0, r1
 80215d8:	b003      	add	sp, #12
 80215da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080215de <__copybits>:
 80215de:	3901      	subs	r1, #1
 80215e0:	b570      	push	{r4, r5, r6, lr}
 80215e2:	1149      	asrs	r1, r1, #5
 80215e4:	6914      	ldr	r4, [r2, #16]
 80215e6:	3101      	adds	r1, #1
 80215e8:	f102 0314 	add.w	r3, r2, #20
 80215ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80215f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80215f4:	1f05      	subs	r5, r0, #4
 80215f6:	42a3      	cmp	r3, r4
 80215f8:	d30c      	bcc.n	8021614 <__copybits+0x36>
 80215fa:	1aa3      	subs	r3, r4, r2
 80215fc:	3b11      	subs	r3, #17
 80215fe:	f023 0303 	bic.w	r3, r3, #3
 8021602:	3211      	adds	r2, #17
 8021604:	42a2      	cmp	r2, r4
 8021606:	bf88      	it	hi
 8021608:	2300      	movhi	r3, #0
 802160a:	4418      	add	r0, r3
 802160c:	2300      	movs	r3, #0
 802160e:	4288      	cmp	r0, r1
 8021610:	d305      	bcc.n	802161e <__copybits+0x40>
 8021612:	bd70      	pop	{r4, r5, r6, pc}
 8021614:	f853 6b04 	ldr.w	r6, [r3], #4
 8021618:	f845 6f04 	str.w	r6, [r5, #4]!
 802161c:	e7eb      	b.n	80215f6 <__copybits+0x18>
 802161e:	f840 3b04 	str.w	r3, [r0], #4
 8021622:	e7f4      	b.n	802160e <__copybits+0x30>

08021624 <__any_on>:
 8021624:	f100 0214 	add.w	r2, r0, #20
 8021628:	6900      	ldr	r0, [r0, #16]
 802162a:	114b      	asrs	r3, r1, #5
 802162c:	4298      	cmp	r0, r3
 802162e:	b510      	push	{r4, lr}
 8021630:	db11      	blt.n	8021656 <__any_on+0x32>
 8021632:	dd0a      	ble.n	802164a <__any_on+0x26>
 8021634:	f011 011f 	ands.w	r1, r1, #31
 8021638:	d007      	beq.n	802164a <__any_on+0x26>
 802163a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802163e:	fa24 f001 	lsr.w	r0, r4, r1
 8021642:	fa00 f101 	lsl.w	r1, r0, r1
 8021646:	428c      	cmp	r4, r1
 8021648:	d10b      	bne.n	8021662 <__any_on+0x3e>
 802164a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802164e:	4293      	cmp	r3, r2
 8021650:	d803      	bhi.n	802165a <__any_on+0x36>
 8021652:	2000      	movs	r0, #0
 8021654:	bd10      	pop	{r4, pc}
 8021656:	4603      	mov	r3, r0
 8021658:	e7f7      	b.n	802164a <__any_on+0x26>
 802165a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802165e:	2900      	cmp	r1, #0
 8021660:	d0f5      	beq.n	802164e <__any_on+0x2a>
 8021662:	2001      	movs	r0, #1
 8021664:	e7f6      	b.n	8021654 <__any_on+0x30>

08021666 <__ssputs_r>:
 8021666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802166a:	688e      	ldr	r6, [r1, #8]
 802166c:	429e      	cmp	r6, r3
 802166e:	4682      	mov	sl, r0
 8021670:	460c      	mov	r4, r1
 8021672:	4690      	mov	r8, r2
 8021674:	461f      	mov	r7, r3
 8021676:	d838      	bhi.n	80216ea <__ssputs_r+0x84>
 8021678:	898a      	ldrh	r2, [r1, #12]
 802167a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802167e:	d032      	beq.n	80216e6 <__ssputs_r+0x80>
 8021680:	6825      	ldr	r5, [r4, #0]
 8021682:	6909      	ldr	r1, [r1, #16]
 8021684:	eba5 0901 	sub.w	r9, r5, r1
 8021688:	6965      	ldr	r5, [r4, #20]
 802168a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802168e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021692:	3301      	adds	r3, #1
 8021694:	444b      	add	r3, r9
 8021696:	106d      	asrs	r5, r5, #1
 8021698:	429d      	cmp	r5, r3
 802169a:	bf38      	it	cc
 802169c:	461d      	movcc	r5, r3
 802169e:	0553      	lsls	r3, r2, #21
 80216a0:	d531      	bpl.n	8021706 <__ssputs_r+0xa0>
 80216a2:	4629      	mov	r1, r5
 80216a4:	f7fd febe 	bl	801f424 <_malloc_r>
 80216a8:	4606      	mov	r6, r0
 80216aa:	b950      	cbnz	r0, 80216c2 <__ssputs_r+0x5c>
 80216ac:	230c      	movs	r3, #12
 80216ae:	f8ca 3000 	str.w	r3, [sl]
 80216b2:	89a3      	ldrh	r3, [r4, #12]
 80216b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80216b8:	81a3      	strh	r3, [r4, #12]
 80216ba:	f04f 30ff 	mov.w	r0, #4294967295
 80216be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80216c2:	6921      	ldr	r1, [r4, #16]
 80216c4:	464a      	mov	r2, r9
 80216c6:	f7fd fe1d 	bl	801f304 <memcpy>
 80216ca:	89a3      	ldrh	r3, [r4, #12]
 80216cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80216d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80216d4:	81a3      	strh	r3, [r4, #12]
 80216d6:	6126      	str	r6, [r4, #16]
 80216d8:	6165      	str	r5, [r4, #20]
 80216da:	444e      	add	r6, r9
 80216dc:	eba5 0509 	sub.w	r5, r5, r9
 80216e0:	6026      	str	r6, [r4, #0]
 80216e2:	60a5      	str	r5, [r4, #8]
 80216e4:	463e      	mov	r6, r7
 80216e6:	42be      	cmp	r6, r7
 80216e8:	d900      	bls.n	80216ec <__ssputs_r+0x86>
 80216ea:	463e      	mov	r6, r7
 80216ec:	4632      	mov	r2, r6
 80216ee:	6820      	ldr	r0, [r4, #0]
 80216f0:	4641      	mov	r1, r8
 80216f2:	f7fd fe15 	bl	801f320 <memmove>
 80216f6:	68a3      	ldr	r3, [r4, #8]
 80216f8:	6822      	ldr	r2, [r4, #0]
 80216fa:	1b9b      	subs	r3, r3, r6
 80216fc:	4432      	add	r2, r6
 80216fe:	60a3      	str	r3, [r4, #8]
 8021700:	6022      	str	r2, [r4, #0]
 8021702:	2000      	movs	r0, #0
 8021704:	e7db      	b.n	80216be <__ssputs_r+0x58>
 8021706:	462a      	mov	r2, r5
 8021708:	f000 faf4 	bl	8021cf4 <_realloc_r>
 802170c:	4606      	mov	r6, r0
 802170e:	2800      	cmp	r0, #0
 8021710:	d1e1      	bne.n	80216d6 <__ssputs_r+0x70>
 8021712:	6921      	ldr	r1, [r4, #16]
 8021714:	4650      	mov	r0, sl
 8021716:	f7fd fe35 	bl	801f384 <_free_r>
 802171a:	e7c7      	b.n	80216ac <__ssputs_r+0x46>

0802171c <_svfiprintf_r>:
 802171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021720:	4698      	mov	r8, r3
 8021722:	898b      	ldrh	r3, [r1, #12]
 8021724:	061b      	lsls	r3, r3, #24
 8021726:	b09d      	sub	sp, #116	; 0x74
 8021728:	4607      	mov	r7, r0
 802172a:	460d      	mov	r5, r1
 802172c:	4614      	mov	r4, r2
 802172e:	d50e      	bpl.n	802174e <_svfiprintf_r+0x32>
 8021730:	690b      	ldr	r3, [r1, #16]
 8021732:	b963      	cbnz	r3, 802174e <_svfiprintf_r+0x32>
 8021734:	2140      	movs	r1, #64	; 0x40
 8021736:	f7fd fe75 	bl	801f424 <_malloc_r>
 802173a:	6028      	str	r0, [r5, #0]
 802173c:	6128      	str	r0, [r5, #16]
 802173e:	b920      	cbnz	r0, 802174a <_svfiprintf_r+0x2e>
 8021740:	230c      	movs	r3, #12
 8021742:	603b      	str	r3, [r7, #0]
 8021744:	f04f 30ff 	mov.w	r0, #4294967295
 8021748:	e0d1      	b.n	80218ee <_svfiprintf_r+0x1d2>
 802174a:	2340      	movs	r3, #64	; 0x40
 802174c:	616b      	str	r3, [r5, #20]
 802174e:	2300      	movs	r3, #0
 8021750:	9309      	str	r3, [sp, #36]	; 0x24
 8021752:	2320      	movs	r3, #32
 8021754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021758:	f8cd 800c 	str.w	r8, [sp, #12]
 802175c:	2330      	movs	r3, #48	; 0x30
 802175e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021908 <_svfiprintf_r+0x1ec>
 8021762:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021766:	f04f 0901 	mov.w	r9, #1
 802176a:	4623      	mov	r3, r4
 802176c:	469a      	mov	sl, r3
 802176e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021772:	b10a      	cbz	r2, 8021778 <_svfiprintf_r+0x5c>
 8021774:	2a25      	cmp	r2, #37	; 0x25
 8021776:	d1f9      	bne.n	802176c <_svfiprintf_r+0x50>
 8021778:	ebba 0b04 	subs.w	fp, sl, r4
 802177c:	d00b      	beq.n	8021796 <_svfiprintf_r+0x7a>
 802177e:	465b      	mov	r3, fp
 8021780:	4622      	mov	r2, r4
 8021782:	4629      	mov	r1, r5
 8021784:	4638      	mov	r0, r7
 8021786:	f7ff ff6e 	bl	8021666 <__ssputs_r>
 802178a:	3001      	adds	r0, #1
 802178c:	f000 80aa 	beq.w	80218e4 <_svfiprintf_r+0x1c8>
 8021790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021792:	445a      	add	r2, fp
 8021794:	9209      	str	r2, [sp, #36]	; 0x24
 8021796:	f89a 3000 	ldrb.w	r3, [sl]
 802179a:	2b00      	cmp	r3, #0
 802179c:	f000 80a2 	beq.w	80218e4 <_svfiprintf_r+0x1c8>
 80217a0:	2300      	movs	r3, #0
 80217a2:	f04f 32ff 	mov.w	r2, #4294967295
 80217a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80217aa:	f10a 0a01 	add.w	sl, sl, #1
 80217ae:	9304      	str	r3, [sp, #16]
 80217b0:	9307      	str	r3, [sp, #28]
 80217b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80217b6:	931a      	str	r3, [sp, #104]	; 0x68
 80217b8:	4654      	mov	r4, sl
 80217ba:	2205      	movs	r2, #5
 80217bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80217c0:	4851      	ldr	r0, [pc, #324]	; (8021908 <_svfiprintf_r+0x1ec>)
 80217c2:	f7de fd35 	bl	8000230 <memchr>
 80217c6:	9a04      	ldr	r2, [sp, #16]
 80217c8:	b9d8      	cbnz	r0, 8021802 <_svfiprintf_r+0xe6>
 80217ca:	06d0      	lsls	r0, r2, #27
 80217cc:	bf44      	itt	mi
 80217ce:	2320      	movmi	r3, #32
 80217d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80217d4:	0711      	lsls	r1, r2, #28
 80217d6:	bf44      	itt	mi
 80217d8:	232b      	movmi	r3, #43	; 0x2b
 80217da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80217de:	f89a 3000 	ldrb.w	r3, [sl]
 80217e2:	2b2a      	cmp	r3, #42	; 0x2a
 80217e4:	d015      	beq.n	8021812 <_svfiprintf_r+0xf6>
 80217e6:	9a07      	ldr	r2, [sp, #28]
 80217e8:	4654      	mov	r4, sl
 80217ea:	2000      	movs	r0, #0
 80217ec:	f04f 0c0a 	mov.w	ip, #10
 80217f0:	4621      	mov	r1, r4
 80217f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80217f6:	3b30      	subs	r3, #48	; 0x30
 80217f8:	2b09      	cmp	r3, #9
 80217fa:	d94e      	bls.n	802189a <_svfiprintf_r+0x17e>
 80217fc:	b1b0      	cbz	r0, 802182c <_svfiprintf_r+0x110>
 80217fe:	9207      	str	r2, [sp, #28]
 8021800:	e014      	b.n	802182c <_svfiprintf_r+0x110>
 8021802:	eba0 0308 	sub.w	r3, r0, r8
 8021806:	fa09 f303 	lsl.w	r3, r9, r3
 802180a:	4313      	orrs	r3, r2
 802180c:	9304      	str	r3, [sp, #16]
 802180e:	46a2      	mov	sl, r4
 8021810:	e7d2      	b.n	80217b8 <_svfiprintf_r+0x9c>
 8021812:	9b03      	ldr	r3, [sp, #12]
 8021814:	1d19      	adds	r1, r3, #4
 8021816:	681b      	ldr	r3, [r3, #0]
 8021818:	9103      	str	r1, [sp, #12]
 802181a:	2b00      	cmp	r3, #0
 802181c:	bfbb      	ittet	lt
 802181e:	425b      	neglt	r3, r3
 8021820:	f042 0202 	orrlt.w	r2, r2, #2
 8021824:	9307      	strge	r3, [sp, #28]
 8021826:	9307      	strlt	r3, [sp, #28]
 8021828:	bfb8      	it	lt
 802182a:	9204      	strlt	r2, [sp, #16]
 802182c:	7823      	ldrb	r3, [r4, #0]
 802182e:	2b2e      	cmp	r3, #46	; 0x2e
 8021830:	d10c      	bne.n	802184c <_svfiprintf_r+0x130>
 8021832:	7863      	ldrb	r3, [r4, #1]
 8021834:	2b2a      	cmp	r3, #42	; 0x2a
 8021836:	d135      	bne.n	80218a4 <_svfiprintf_r+0x188>
 8021838:	9b03      	ldr	r3, [sp, #12]
 802183a:	1d1a      	adds	r2, r3, #4
 802183c:	681b      	ldr	r3, [r3, #0]
 802183e:	9203      	str	r2, [sp, #12]
 8021840:	2b00      	cmp	r3, #0
 8021842:	bfb8      	it	lt
 8021844:	f04f 33ff 	movlt.w	r3, #4294967295
 8021848:	3402      	adds	r4, #2
 802184a:	9305      	str	r3, [sp, #20]
 802184c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021918 <_svfiprintf_r+0x1fc>
 8021850:	7821      	ldrb	r1, [r4, #0]
 8021852:	2203      	movs	r2, #3
 8021854:	4650      	mov	r0, sl
 8021856:	f7de fceb 	bl	8000230 <memchr>
 802185a:	b140      	cbz	r0, 802186e <_svfiprintf_r+0x152>
 802185c:	2340      	movs	r3, #64	; 0x40
 802185e:	eba0 000a 	sub.w	r0, r0, sl
 8021862:	fa03 f000 	lsl.w	r0, r3, r0
 8021866:	9b04      	ldr	r3, [sp, #16]
 8021868:	4303      	orrs	r3, r0
 802186a:	3401      	adds	r4, #1
 802186c:	9304      	str	r3, [sp, #16]
 802186e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021872:	4826      	ldr	r0, [pc, #152]	; (802190c <_svfiprintf_r+0x1f0>)
 8021874:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021878:	2206      	movs	r2, #6
 802187a:	f7de fcd9 	bl	8000230 <memchr>
 802187e:	2800      	cmp	r0, #0
 8021880:	d038      	beq.n	80218f4 <_svfiprintf_r+0x1d8>
 8021882:	4b23      	ldr	r3, [pc, #140]	; (8021910 <_svfiprintf_r+0x1f4>)
 8021884:	bb1b      	cbnz	r3, 80218ce <_svfiprintf_r+0x1b2>
 8021886:	9b03      	ldr	r3, [sp, #12]
 8021888:	3307      	adds	r3, #7
 802188a:	f023 0307 	bic.w	r3, r3, #7
 802188e:	3308      	adds	r3, #8
 8021890:	9303      	str	r3, [sp, #12]
 8021892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021894:	4433      	add	r3, r6
 8021896:	9309      	str	r3, [sp, #36]	; 0x24
 8021898:	e767      	b.n	802176a <_svfiprintf_r+0x4e>
 802189a:	fb0c 3202 	mla	r2, ip, r2, r3
 802189e:	460c      	mov	r4, r1
 80218a0:	2001      	movs	r0, #1
 80218a2:	e7a5      	b.n	80217f0 <_svfiprintf_r+0xd4>
 80218a4:	2300      	movs	r3, #0
 80218a6:	3401      	adds	r4, #1
 80218a8:	9305      	str	r3, [sp, #20]
 80218aa:	4619      	mov	r1, r3
 80218ac:	f04f 0c0a 	mov.w	ip, #10
 80218b0:	4620      	mov	r0, r4
 80218b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80218b6:	3a30      	subs	r2, #48	; 0x30
 80218b8:	2a09      	cmp	r2, #9
 80218ba:	d903      	bls.n	80218c4 <_svfiprintf_r+0x1a8>
 80218bc:	2b00      	cmp	r3, #0
 80218be:	d0c5      	beq.n	802184c <_svfiprintf_r+0x130>
 80218c0:	9105      	str	r1, [sp, #20]
 80218c2:	e7c3      	b.n	802184c <_svfiprintf_r+0x130>
 80218c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80218c8:	4604      	mov	r4, r0
 80218ca:	2301      	movs	r3, #1
 80218cc:	e7f0      	b.n	80218b0 <_svfiprintf_r+0x194>
 80218ce:	ab03      	add	r3, sp, #12
 80218d0:	9300      	str	r3, [sp, #0]
 80218d2:	462a      	mov	r2, r5
 80218d4:	4b0f      	ldr	r3, [pc, #60]	; (8021914 <_svfiprintf_r+0x1f8>)
 80218d6:	a904      	add	r1, sp, #16
 80218d8:	4638      	mov	r0, r7
 80218da:	f3af 8000 	nop.w
 80218de:	1c42      	adds	r2, r0, #1
 80218e0:	4606      	mov	r6, r0
 80218e2:	d1d6      	bne.n	8021892 <_svfiprintf_r+0x176>
 80218e4:	89ab      	ldrh	r3, [r5, #12]
 80218e6:	065b      	lsls	r3, r3, #25
 80218e8:	f53f af2c 	bmi.w	8021744 <_svfiprintf_r+0x28>
 80218ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80218ee:	b01d      	add	sp, #116	; 0x74
 80218f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218f4:	ab03      	add	r3, sp, #12
 80218f6:	9300      	str	r3, [sp, #0]
 80218f8:	462a      	mov	r2, r5
 80218fa:	4b06      	ldr	r3, [pc, #24]	; (8021914 <_svfiprintf_r+0x1f8>)
 80218fc:	a904      	add	r1, sp, #16
 80218fe:	4638      	mov	r0, r7
 8021900:	f000 f87a 	bl	80219f8 <_printf_i>
 8021904:	e7eb      	b.n	80218de <_svfiprintf_r+0x1c2>
 8021906:	bf00      	nop
 8021908:	080230ec 	.word	0x080230ec
 802190c:	080230f6 	.word	0x080230f6
 8021910:	00000000 	.word	0x00000000
 8021914:	08021667 	.word	0x08021667
 8021918:	080230f2 	.word	0x080230f2

0802191c <_printf_common>:
 802191c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021920:	4616      	mov	r6, r2
 8021922:	4699      	mov	r9, r3
 8021924:	688a      	ldr	r2, [r1, #8]
 8021926:	690b      	ldr	r3, [r1, #16]
 8021928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802192c:	4293      	cmp	r3, r2
 802192e:	bfb8      	it	lt
 8021930:	4613      	movlt	r3, r2
 8021932:	6033      	str	r3, [r6, #0]
 8021934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021938:	4607      	mov	r7, r0
 802193a:	460c      	mov	r4, r1
 802193c:	b10a      	cbz	r2, 8021942 <_printf_common+0x26>
 802193e:	3301      	adds	r3, #1
 8021940:	6033      	str	r3, [r6, #0]
 8021942:	6823      	ldr	r3, [r4, #0]
 8021944:	0699      	lsls	r1, r3, #26
 8021946:	bf42      	ittt	mi
 8021948:	6833      	ldrmi	r3, [r6, #0]
 802194a:	3302      	addmi	r3, #2
 802194c:	6033      	strmi	r3, [r6, #0]
 802194e:	6825      	ldr	r5, [r4, #0]
 8021950:	f015 0506 	ands.w	r5, r5, #6
 8021954:	d106      	bne.n	8021964 <_printf_common+0x48>
 8021956:	f104 0a19 	add.w	sl, r4, #25
 802195a:	68e3      	ldr	r3, [r4, #12]
 802195c:	6832      	ldr	r2, [r6, #0]
 802195e:	1a9b      	subs	r3, r3, r2
 8021960:	42ab      	cmp	r3, r5
 8021962:	dc26      	bgt.n	80219b2 <_printf_common+0x96>
 8021964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021968:	1e13      	subs	r3, r2, #0
 802196a:	6822      	ldr	r2, [r4, #0]
 802196c:	bf18      	it	ne
 802196e:	2301      	movne	r3, #1
 8021970:	0692      	lsls	r2, r2, #26
 8021972:	d42b      	bmi.n	80219cc <_printf_common+0xb0>
 8021974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021978:	4649      	mov	r1, r9
 802197a:	4638      	mov	r0, r7
 802197c:	47c0      	blx	r8
 802197e:	3001      	adds	r0, #1
 8021980:	d01e      	beq.n	80219c0 <_printf_common+0xa4>
 8021982:	6823      	ldr	r3, [r4, #0]
 8021984:	68e5      	ldr	r5, [r4, #12]
 8021986:	6832      	ldr	r2, [r6, #0]
 8021988:	f003 0306 	and.w	r3, r3, #6
 802198c:	2b04      	cmp	r3, #4
 802198e:	bf08      	it	eq
 8021990:	1aad      	subeq	r5, r5, r2
 8021992:	68a3      	ldr	r3, [r4, #8]
 8021994:	6922      	ldr	r2, [r4, #16]
 8021996:	bf0c      	ite	eq
 8021998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802199c:	2500      	movne	r5, #0
 802199e:	4293      	cmp	r3, r2
 80219a0:	bfc4      	itt	gt
 80219a2:	1a9b      	subgt	r3, r3, r2
 80219a4:	18ed      	addgt	r5, r5, r3
 80219a6:	2600      	movs	r6, #0
 80219a8:	341a      	adds	r4, #26
 80219aa:	42b5      	cmp	r5, r6
 80219ac:	d11a      	bne.n	80219e4 <_printf_common+0xc8>
 80219ae:	2000      	movs	r0, #0
 80219b0:	e008      	b.n	80219c4 <_printf_common+0xa8>
 80219b2:	2301      	movs	r3, #1
 80219b4:	4652      	mov	r2, sl
 80219b6:	4649      	mov	r1, r9
 80219b8:	4638      	mov	r0, r7
 80219ba:	47c0      	blx	r8
 80219bc:	3001      	adds	r0, #1
 80219be:	d103      	bne.n	80219c8 <_printf_common+0xac>
 80219c0:	f04f 30ff 	mov.w	r0, #4294967295
 80219c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219c8:	3501      	adds	r5, #1
 80219ca:	e7c6      	b.n	802195a <_printf_common+0x3e>
 80219cc:	18e1      	adds	r1, r4, r3
 80219ce:	1c5a      	adds	r2, r3, #1
 80219d0:	2030      	movs	r0, #48	; 0x30
 80219d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80219d6:	4422      	add	r2, r4
 80219d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80219dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80219e0:	3302      	adds	r3, #2
 80219e2:	e7c7      	b.n	8021974 <_printf_common+0x58>
 80219e4:	2301      	movs	r3, #1
 80219e6:	4622      	mov	r2, r4
 80219e8:	4649      	mov	r1, r9
 80219ea:	4638      	mov	r0, r7
 80219ec:	47c0      	blx	r8
 80219ee:	3001      	adds	r0, #1
 80219f0:	d0e6      	beq.n	80219c0 <_printf_common+0xa4>
 80219f2:	3601      	adds	r6, #1
 80219f4:	e7d9      	b.n	80219aa <_printf_common+0x8e>
	...

080219f8 <_printf_i>:
 80219f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80219fc:	460c      	mov	r4, r1
 80219fe:	4691      	mov	r9, r2
 8021a00:	7e27      	ldrb	r7, [r4, #24]
 8021a02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021a04:	2f78      	cmp	r7, #120	; 0x78
 8021a06:	4680      	mov	r8, r0
 8021a08:	469a      	mov	sl, r3
 8021a0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021a0e:	d807      	bhi.n	8021a20 <_printf_i+0x28>
 8021a10:	2f62      	cmp	r7, #98	; 0x62
 8021a12:	d80a      	bhi.n	8021a2a <_printf_i+0x32>
 8021a14:	2f00      	cmp	r7, #0
 8021a16:	f000 80d8 	beq.w	8021bca <_printf_i+0x1d2>
 8021a1a:	2f58      	cmp	r7, #88	; 0x58
 8021a1c:	f000 80a3 	beq.w	8021b66 <_printf_i+0x16e>
 8021a20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021a28:	e03a      	b.n	8021aa0 <_printf_i+0xa8>
 8021a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021a2e:	2b15      	cmp	r3, #21
 8021a30:	d8f6      	bhi.n	8021a20 <_printf_i+0x28>
 8021a32:	a001      	add	r0, pc, #4	; (adr r0, 8021a38 <_printf_i+0x40>)
 8021a34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8021a38:	08021a91 	.word	0x08021a91
 8021a3c:	08021aa5 	.word	0x08021aa5
 8021a40:	08021a21 	.word	0x08021a21
 8021a44:	08021a21 	.word	0x08021a21
 8021a48:	08021a21 	.word	0x08021a21
 8021a4c:	08021a21 	.word	0x08021a21
 8021a50:	08021aa5 	.word	0x08021aa5
 8021a54:	08021a21 	.word	0x08021a21
 8021a58:	08021a21 	.word	0x08021a21
 8021a5c:	08021a21 	.word	0x08021a21
 8021a60:	08021a21 	.word	0x08021a21
 8021a64:	08021bb1 	.word	0x08021bb1
 8021a68:	08021ad5 	.word	0x08021ad5
 8021a6c:	08021b93 	.word	0x08021b93
 8021a70:	08021a21 	.word	0x08021a21
 8021a74:	08021a21 	.word	0x08021a21
 8021a78:	08021bd3 	.word	0x08021bd3
 8021a7c:	08021a21 	.word	0x08021a21
 8021a80:	08021ad5 	.word	0x08021ad5
 8021a84:	08021a21 	.word	0x08021a21
 8021a88:	08021a21 	.word	0x08021a21
 8021a8c:	08021b9b 	.word	0x08021b9b
 8021a90:	680b      	ldr	r3, [r1, #0]
 8021a92:	1d1a      	adds	r2, r3, #4
 8021a94:	681b      	ldr	r3, [r3, #0]
 8021a96:	600a      	str	r2, [r1, #0]
 8021a98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021aa0:	2301      	movs	r3, #1
 8021aa2:	e0a3      	b.n	8021bec <_printf_i+0x1f4>
 8021aa4:	6825      	ldr	r5, [r4, #0]
 8021aa6:	6808      	ldr	r0, [r1, #0]
 8021aa8:	062e      	lsls	r6, r5, #24
 8021aaa:	f100 0304 	add.w	r3, r0, #4
 8021aae:	d50a      	bpl.n	8021ac6 <_printf_i+0xce>
 8021ab0:	6805      	ldr	r5, [r0, #0]
 8021ab2:	600b      	str	r3, [r1, #0]
 8021ab4:	2d00      	cmp	r5, #0
 8021ab6:	da03      	bge.n	8021ac0 <_printf_i+0xc8>
 8021ab8:	232d      	movs	r3, #45	; 0x2d
 8021aba:	426d      	negs	r5, r5
 8021abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021ac0:	485e      	ldr	r0, [pc, #376]	; (8021c3c <_printf_i+0x244>)
 8021ac2:	230a      	movs	r3, #10
 8021ac4:	e019      	b.n	8021afa <_printf_i+0x102>
 8021ac6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8021aca:	6805      	ldr	r5, [r0, #0]
 8021acc:	600b      	str	r3, [r1, #0]
 8021ace:	bf18      	it	ne
 8021ad0:	b22d      	sxthne	r5, r5
 8021ad2:	e7ef      	b.n	8021ab4 <_printf_i+0xbc>
 8021ad4:	680b      	ldr	r3, [r1, #0]
 8021ad6:	6825      	ldr	r5, [r4, #0]
 8021ad8:	1d18      	adds	r0, r3, #4
 8021ada:	6008      	str	r0, [r1, #0]
 8021adc:	0628      	lsls	r0, r5, #24
 8021ade:	d501      	bpl.n	8021ae4 <_printf_i+0xec>
 8021ae0:	681d      	ldr	r5, [r3, #0]
 8021ae2:	e002      	b.n	8021aea <_printf_i+0xf2>
 8021ae4:	0669      	lsls	r1, r5, #25
 8021ae6:	d5fb      	bpl.n	8021ae0 <_printf_i+0xe8>
 8021ae8:	881d      	ldrh	r5, [r3, #0]
 8021aea:	4854      	ldr	r0, [pc, #336]	; (8021c3c <_printf_i+0x244>)
 8021aec:	2f6f      	cmp	r7, #111	; 0x6f
 8021aee:	bf0c      	ite	eq
 8021af0:	2308      	moveq	r3, #8
 8021af2:	230a      	movne	r3, #10
 8021af4:	2100      	movs	r1, #0
 8021af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021afa:	6866      	ldr	r6, [r4, #4]
 8021afc:	60a6      	str	r6, [r4, #8]
 8021afe:	2e00      	cmp	r6, #0
 8021b00:	bfa2      	ittt	ge
 8021b02:	6821      	ldrge	r1, [r4, #0]
 8021b04:	f021 0104 	bicge.w	r1, r1, #4
 8021b08:	6021      	strge	r1, [r4, #0]
 8021b0a:	b90d      	cbnz	r5, 8021b10 <_printf_i+0x118>
 8021b0c:	2e00      	cmp	r6, #0
 8021b0e:	d04d      	beq.n	8021bac <_printf_i+0x1b4>
 8021b10:	4616      	mov	r6, r2
 8021b12:	fbb5 f1f3 	udiv	r1, r5, r3
 8021b16:	fb03 5711 	mls	r7, r3, r1, r5
 8021b1a:	5dc7      	ldrb	r7, [r0, r7]
 8021b1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021b20:	462f      	mov	r7, r5
 8021b22:	42bb      	cmp	r3, r7
 8021b24:	460d      	mov	r5, r1
 8021b26:	d9f4      	bls.n	8021b12 <_printf_i+0x11a>
 8021b28:	2b08      	cmp	r3, #8
 8021b2a:	d10b      	bne.n	8021b44 <_printf_i+0x14c>
 8021b2c:	6823      	ldr	r3, [r4, #0]
 8021b2e:	07df      	lsls	r7, r3, #31
 8021b30:	d508      	bpl.n	8021b44 <_printf_i+0x14c>
 8021b32:	6923      	ldr	r3, [r4, #16]
 8021b34:	6861      	ldr	r1, [r4, #4]
 8021b36:	4299      	cmp	r1, r3
 8021b38:	bfde      	ittt	le
 8021b3a:	2330      	movle	r3, #48	; 0x30
 8021b3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021b40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8021b44:	1b92      	subs	r2, r2, r6
 8021b46:	6122      	str	r2, [r4, #16]
 8021b48:	f8cd a000 	str.w	sl, [sp]
 8021b4c:	464b      	mov	r3, r9
 8021b4e:	aa03      	add	r2, sp, #12
 8021b50:	4621      	mov	r1, r4
 8021b52:	4640      	mov	r0, r8
 8021b54:	f7ff fee2 	bl	802191c <_printf_common>
 8021b58:	3001      	adds	r0, #1
 8021b5a:	d14c      	bne.n	8021bf6 <_printf_i+0x1fe>
 8021b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8021b60:	b004      	add	sp, #16
 8021b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b66:	4835      	ldr	r0, [pc, #212]	; (8021c3c <_printf_i+0x244>)
 8021b68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8021b6c:	6823      	ldr	r3, [r4, #0]
 8021b6e:	680e      	ldr	r6, [r1, #0]
 8021b70:	061f      	lsls	r7, r3, #24
 8021b72:	f856 5b04 	ldr.w	r5, [r6], #4
 8021b76:	600e      	str	r6, [r1, #0]
 8021b78:	d514      	bpl.n	8021ba4 <_printf_i+0x1ac>
 8021b7a:	07d9      	lsls	r1, r3, #31
 8021b7c:	bf44      	itt	mi
 8021b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8021b82:	6023      	strmi	r3, [r4, #0]
 8021b84:	b91d      	cbnz	r5, 8021b8e <_printf_i+0x196>
 8021b86:	6823      	ldr	r3, [r4, #0]
 8021b88:	f023 0320 	bic.w	r3, r3, #32
 8021b8c:	6023      	str	r3, [r4, #0]
 8021b8e:	2310      	movs	r3, #16
 8021b90:	e7b0      	b.n	8021af4 <_printf_i+0xfc>
 8021b92:	6823      	ldr	r3, [r4, #0]
 8021b94:	f043 0320 	orr.w	r3, r3, #32
 8021b98:	6023      	str	r3, [r4, #0]
 8021b9a:	2378      	movs	r3, #120	; 0x78
 8021b9c:	4828      	ldr	r0, [pc, #160]	; (8021c40 <_printf_i+0x248>)
 8021b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021ba2:	e7e3      	b.n	8021b6c <_printf_i+0x174>
 8021ba4:	065e      	lsls	r6, r3, #25
 8021ba6:	bf48      	it	mi
 8021ba8:	b2ad      	uxthmi	r5, r5
 8021baa:	e7e6      	b.n	8021b7a <_printf_i+0x182>
 8021bac:	4616      	mov	r6, r2
 8021bae:	e7bb      	b.n	8021b28 <_printf_i+0x130>
 8021bb0:	680b      	ldr	r3, [r1, #0]
 8021bb2:	6826      	ldr	r6, [r4, #0]
 8021bb4:	6960      	ldr	r0, [r4, #20]
 8021bb6:	1d1d      	adds	r5, r3, #4
 8021bb8:	600d      	str	r5, [r1, #0]
 8021bba:	0635      	lsls	r5, r6, #24
 8021bbc:	681b      	ldr	r3, [r3, #0]
 8021bbe:	d501      	bpl.n	8021bc4 <_printf_i+0x1cc>
 8021bc0:	6018      	str	r0, [r3, #0]
 8021bc2:	e002      	b.n	8021bca <_printf_i+0x1d2>
 8021bc4:	0671      	lsls	r1, r6, #25
 8021bc6:	d5fb      	bpl.n	8021bc0 <_printf_i+0x1c8>
 8021bc8:	8018      	strh	r0, [r3, #0]
 8021bca:	2300      	movs	r3, #0
 8021bcc:	6123      	str	r3, [r4, #16]
 8021bce:	4616      	mov	r6, r2
 8021bd0:	e7ba      	b.n	8021b48 <_printf_i+0x150>
 8021bd2:	680b      	ldr	r3, [r1, #0]
 8021bd4:	1d1a      	adds	r2, r3, #4
 8021bd6:	600a      	str	r2, [r1, #0]
 8021bd8:	681e      	ldr	r6, [r3, #0]
 8021bda:	6862      	ldr	r2, [r4, #4]
 8021bdc:	2100      	movs	r1, #0
 8021bde:	4630      	mov	r0, r6
 8021be0:	f7de fb26 	bl	8000230 <memchr>
 8021be4:	b108      	cbz	r0, 8021bea <_printf_i+0x1f2>
 8021be6:	1b80      	subs	r0, r0, r6
 8021be8:	6060      	str	r0, [r4, #4]
 8021bea:	6863      	ldr	r3, [r4, #4]
 8021bec:	6123      	str	r3, [r4, #16]
 8021bee:	2300      	movs	r3, #0
 8021bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021bf4:	e7a8      	b.n	8021b48 <_printf_i+0x150>
 8021bf6:	6923      	ldr	r3, [r4, #16]
 8021bf8:	4632      	mov	r2, r6
 8021bfa:	4649      	mov	r1, r9
 8021bfc:	4640      	mov	r0, r8
 8021bfe:	47d0      	blx	sl
 8021c00:	3001      	adds	r0, #1
 8021c02:	d0ab      	beq.n	8021b5c <_printf_i+0x164>
 8021c04:	6823      	ldr	r3, [r4, #0]
 8021c06:	079b      	lsls	r3, r3, #30
 8021c08:	d413      	bmi.n	8021c32 <_printf_i+0x23a>
 8021c0a:	68e0      	ldr	r0, [r4, #12]
 8021c0c:	9b03      	ldr	r3, [sp, #12]
 8021c0e:	4298      	cmp	r0, r3
 8021c10:	bfb8      	it	lt
 8021c12:	4618      	movlt	r0, r3
 8021c14:	e7a4      	b.n	8021b60 <_printf_i+0x168>
 8021c16:	2301      	movs	r3, #1
 8021c18:	4632      	mov	r2, r6
 8021c1a:	4649      	mov	r1, r9
 8021c1c:	4640      	mov	r0, r8
 8021c1e:	47d0      	blx	sl
 8021c20:	3001      	adds	r0, #1
 8021c22:	d09b      	beq.n	8021b5c <_printf_i+0x164>
 8021c24:	3501      	adds	r5, #1
 8021c26:	68e3      	ldr	r3, [r4, #12]
 8021c28:	9903      	ldr	r1, [sp, #12]
 8021c2a:	1a5b      	subs	r3, r3, r1
 8021c2c:	42ab      	cmp	r3, r5
 8021c2e:	dcf2      	bgt.n	8021c16 <_printf_i+0x21e>
 8021c30:	e7eb      	b.n	8021c0a <_printf_i+0x212>
 8021c32:	2500      	movs	r5, #0
 8021c34:	f104 0619 	add.w	r6, r4, #25
 8021c38:	e7f5      	b.n	8021c26 <_printf_i+0x22e>
 8021c3a:	bf00      	nop
 8021c3c:	080230fd 	.word	0x080230fd
 8021c40:	0802310e 	.word	0x0802310e

08021c44 <_read_r>:
 8021c44:	b538      	push	{r3, r4, r5, lr}
 8021c46:	4d07      	ldr	r5, [pc, #28]	; (8021c64 <_read_r+0x20>)
 8021c48:	4604      	mov	r4, r0
 8021c4a:	4608      	mov	r0, r1
 8021c4c:	4611      	mov	r1, r2
 8021c4e:	2200      	movs	r2, #0
 8021c50:	602a      	str	r2, [r5, #0]
 8021c52:	461a      	mov	r2, r3
 8021c54:	f7fd f8e2 	bl	801ee1c <_read>
 8021c58:	1c43      	adds	r3, r0, #1
 8021c5a:	d102      	bne.n	8021c62 <_read_r+0x1e>
 8021c5c:	682b      	ldr	r3, [r5, #0]
 8021c5e:	b103      	cbz	r3, 8021c62 <_read_r+0x1e>
 8021c60:	6023      	str	r3, [r4, #0]
 8021c62:	bd38      	pop	{r3, r4, r5, pc}
 8021c64:	2001d46c 	.word	0x2001d46c

08021c68 <nan>:
 8021c68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8021c70 <nan+0x8>
 8021c6c:	4770      	bx	lr
 8021c6e:	bf00      	nop
 8021c70:	00000000 	.word	0x00000000
 8021c74:	7ff80000 	.word	0x7ff80000

08021c78 <__ascii_wctomb>:
 8021c78:	b149      	cbz	r1, 8021c8e <__ascii_wctomb+0x16>
 8021c7a:	2aff      	cmp	r2, #255	; 0xff
 8021c7c:	bf85      	ittet	hi
 8021c7e:	238a      	movhi	r3, #138	; 0x8a
 8021c80:	6003      	strhi	r3, [r0, #0]
 8021c82:	700a      	strbls	r2, [r1, #0]
 8021c84:	f04f 30ff 	movhi.w	r0, #4294967295
 8021c88:	bf98      	it	ls
 8021c8a:	2001      	movls	r0, #1
 8021c8c:	4770      	bx	lr
 8021c8e:	4608      	mov	r0, r1
 8021c90:	4770      	bx	lr
	...

08021c94 <__assert_func>:
 8021c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021c96:	4614      	mov	r4, r2
 8021c98:	461a      	mov	r2, r3
 8021c9a:	4b09      	ldr	r3, [pc, #36]	; (8021cc0 <__assert_func+0x2c>)
 8021c9c:	681b      	ldr	r3, [r3, #0]
 8021c9e:	4605      	mov	r5, r0
 8021ca0:	68d8      	ldr	r0, [r3, #12]
 8021ca2:	b14c      	cbz	r4, 8021cb8 <__assert_func+0x24>
 8021ca4:	4b07      	ldr	r3, [pc, #28]	; (8021cc4 <__assert_func+0x30>)
 8021ca6:	9100      	str	r1, [sp, #0]
 8021ca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021cac:	4906      	ldr	r1, [pc, #24]	; (8021cc8 <__assert_func+0x34>)
 8021cae:	462b      	mov	r3, r5
 8021cb0:	f000 f80e 	bl	8021cd0 <fiprintf>
 8021cb4:	f000 f99e 	bl	8021ff4 <abort>
 8021cb8:	4b04      	ldr	r3, [pc, #16]	; (8021ccc <__assert_func+0x38>)
 8021cba:	461c      	mov	r4, r3
 8021cbc:	e7f3      	b.n	8021ca6 <__assert_func+0x12>
 8021cbe:	bf00      	nop
 8021cc0:	200002b8 	.word	0x200002b8
 8021cc4:	0802311f 	.word	0x0802311f
 8021cc8:	0802312c 	.word	0x0802312c
 8021ccc:	0802315a 	.word	0x0802315a

08021cd0 <fiprintf>:
 8021cd0:	b40e      	push	{r1, r2, r3}
 8021cd2:	b503      	push	{r0, r1, lr}
 8021cd4:	4601      	mov	r1, r0
 8021cd6:	ab03      	add	r3, sp, #12
 8021cd8:	4805      	ldr	r0, [pc, #20]	; (8021cf0 <fiprintf+0x20>)
 8021cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8021cde:	6800      	ldr	r0, [r0, #0]
 8021ce0:	9301      	str	r3, [sp, #4]
 8021ce2:	f000 f857 	bl	8021d94 <_vfiprintf_r>
 8021ce6:	b002      	add	sp, #8
 8021ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8021cec:	b003      	add	sp, #12
 8021cee:	4770      	bx	lr
 8021cf0:	200002b8 	.word	0x200002b8

08021cf4 <_realloc_r>:
 8021cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021cf6:	4607      	mov	r7, r0
 8021cf8:	4614      	mov	r4, r2
 8021cfa:	460e      	mov	r6, r1
 8021cfc:	b921      	cbnz	r1, 8021d08 <_realloc_r+0x14>
 8021cfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021d02:	4611      	mov	r1, r2
 8021d04:	f7fd bb8e 	b.w	801f424 <_malloc_r>
 8021d08:	b922      	cbnz	r2, 8021d14 <_realloc_r+0x20>
 8021d0a:	f7fd fb3b 	bl	801f384 <_free_r>
 8021d0e:	4625      	mov	r5, r4
 8021d10:	4628      	mov	r0, r5
 8021d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021d14:	f000 f975 	bl	8022002 <_malloc_usable_size_r>
 8021d18:	42a0      	cmp	r0, r4
 8021d1a:	d20f      	bcs.n	8021d3c <_realloc_r+0x48>
 8021d1c:	4621      	mov	r1, r4
 8021d1e:	4638      	mov	r0, r7
 8021d20:	f7fd fb80 	bl	801f424 <_malloc_r>
 8021d24:	4605      	mov	r5, r0
 8021d26:	2800      	cmp	r0, #0
 8021d28:	d0f2      	beq.n	8021d10 <_realloc_r+0x1c>
 8021d2a:	4631      	mov	r1, r6
 8021d2c:	4622      	mov	r2, r4
 8021d2e:	f7fd fae9 	bl	801f304 <memcpy>
 8021d32:	4631      	mov	r1, r6
 8021d34:	4638      	mov	r0, r7
 8021d36:	f7fd fb25 	bl	801f384 <_free_r>
 8021d3a:	e7e9      	b.n	8021d10 <_realloc_r+0x1c>
 8021d3c:	4635      	mov	r5, r6
 8021d3e:	e7e7      	b.n	8021d10 <_realloc_r+0x1c>

08021d40 <__sfputc_r>:
 8021d40:	6893      	ldr	r3, [r2, #8]
 8021d42:	3b01      	subs	r3, #1
 8021d44:	2b00      	cmp	r3, #0
 8021d46:	b410      	push	{r4}
 8021d48:	6093      	str	r3, [r2, #8]
 8021d4a:	da08      	bge.n	8021d5e <__sfputc_r+0x1e>
 8021d4c:	6994      	ldr	r4, [r2, #24]
 8021d4e:	42a3      	cmp	r3, r4
 8021d50:	db01      	blt.n	8021d56 <__sfputc_r+0x16>
 8021d52:	290a      	cmp	r1, #10
 8021d54:	d103      	bne.n	8021d5e <__sfputc_r+0x1e>
 8021d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d5a:	f7fe bb25 	b.w	80203a8 <__swbuf_r>
 8021d5e:	6813      	ldr	r3, [r2, #0]
 8021d60:	1c58      	adds	r0, r3, #1
 8021d62:	6010      	str	r0, [r2, #0]
 8021d64:	7019      	strb	r1, [r3, #0]
 8021d66:	4608      	mov	r0, r1
 8021d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d6c:	4770      	bx	lr

08021d6e <__sfputs_r>:
 8021d6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d70:	4606      	mov	r6, r0
 8021d72:	460f      	mov	r7, r1
 8021d74:	4614      	mov	r4, r2
 8021d76:	18d5      	adds	r5, r2, r3
 8021d78:	42ac      	cmp	r4, r5
 8021d7a:	d101      	bne.n	8021d80 <__sfputs_r+0x12>
 8021d7c:	2000      	movs	r0, #0
 8021d7e:	e007      	b.n	8021d90 <__sfputs_r+0x22>
 8021d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d84:	463a      	mov	r2, r7
 8021d86:	4630      	mov	r0, r6
 8021d88:	f7ff ffda 	bl	8021d40 <__sfputc_r>
 8021d8c:	1c43      	adds	r3, r0, #1
 8021d8e:	d1f3      	bne.n	8021d78 <__sfputs_r+0xa>
 8021d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021d94 <_vfiprintf_r>:
 8021d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d98:	460d      	mov	r5, r1
 8021d9a:	b09d      	sub	sp, #116	; 0x74
 8021d9c:	4614      	mov	r4, r2
 8021d9e:	4698      	mov	r8, r3
 8021da0:	4606      	mov	r6, r0
 8021da2:	b118      	cbz	r0, 8021dac <_vfiprintf_r+0x18>
 8021da4:	6983      	ldr	r3, [r0, #24]
 8021da6:	b90b      	cbnz	r3, 8021dac <_vfiprintf_r+0x18>
 8021da8:	f7fd f972 	bl	801f090 <__sinit>
 8021dac:	4b89      	ldr	r3, [pc, #548]	; (8021fd4 <_vfiprintf_r+0x240>)
 8021dae:	429d      	cmp	r5, r3
 8021db0:	d11b      	bne.n	8021dea <_vfiprintf_r+0x56>
 8021db2:	6875      	ldr	r5, [r6, #4]
 8021db4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021db6:	07d9      	lsls	r1, r3, #31
 8021db8:	d405      	bmi.n	8021dc6 <_vfiprintf_r+0x32>
 8021dba:	89ab      	ldrh	r3, [r5, #12]
 8021dbc:	059a      	lsls	r2, r3, #22
 8021dbe:	d402      	bmi.n	8021dc6 <_vfiprintf_r+0x32>
 8021dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021dc2:	f7fd fa28 	bl	801f216 <__retarget_lock_acquire_recursive>
 8021dc6:	89ab      	ldrh	r3, [r5, #12]
 8021dc8:	071b      	lsls	r3, r3, #28
 8021dca:	d501      	bpl.n	8021dd0 <_vfiprintf_r+0x3c>
 8021dcc:	692b      	ldr	r3, [r5, #16]
 8021dce:	b9eb      	cbnz	r3, 8021e0c <_vfiprintf_r+0x78>
 8021dd0:	4629      	mov	r1, r5
 8021dd2:	4630      	mov	r0, r6
 8021dd4:	f7fe fb4c 	bl	8020470 <__swsetup_r>
 8021dd8:	b1c0      	cbz	r0, 8021e0c <_vfiprintf_r+0x78>
 8021dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021ddc:	07dc      	lsls	r4, r3, #31
 8021dde:	d50e      	bpl.n	8021dfe <_vfiprintf_r+0x6a>
 8021de0:	f04f 30ff 	mov.w	r0, #4294967295
 8021de4:	b01d      	add	sp, #116	; 0x74
 8021de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dea:	4b7b      	ldr	r3, [pc, #492]	; (8021fd8 <_vfiprintf_r+0x244>)
 8021dec:	429d      	cmp	r5, r3
 8021dee:	d101      	bne.n	8021df4 <_vfiprintf_r+0x60>
 8021df0:	68b5      	ldr	r5, [r6, #8]
 8021df2:	e7df      	b.n	8021db4 <_vfiprintf_r+0x20>
 8021df4:	4b79      	ldr	r3, [pc, #484]	; (8021fdc <_vfiprintf_r+0x248>)
 8021df6:	429d      	cmp	r5, r3
 8021df8:	bf08      	it	eq
 8021dfa:	68f5      	ldreq	r5, [r6, #12]
 8021dfc:	e7da      	b.n	8021db4 <_vfiprintf_r+0x20>
 8021dfe:	89ab      	ldrh	r3, [r5, #12]
 8021e00:	0598      	lsls	r0, r3, #22
 8021e02:	d4ed      	bmi.n	8021de0 <_vfiprintf_r+0x4c>
 8021e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021e06:	f7fd fa07 	bl	801f218 <__retarget_lock_release_recursive>
 8021e0a:	e7e9      	b.n	8021de0 <_vfiprintf_r+0x4c>
 8021e0c:	2300      	movs	r3, #0
 8021e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8021e10:	2320      	movs	r3, #32
 8021e12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8021e1a:	2330      	movs	r3, #48	; 0x30
 8021e1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021fe0 <_vfiprintf_r+0x24c>
 8021e20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021e24:	f04f 0901 	mov.w	r9, #1
 8021e28:	4623      	mov	r3, r4
 8021e2a:	469a      	mov	sl, r3
 8021e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021e30:	b10a      	cbz	r2, 8021e36 <_vfiprintf_r+0xa2>
 8021e32:	2a25      	cmp	r2, #37	; 0x25
 8021e34:	d1f9      	bne.n	8021e2a <_vfiprintf_r+0x96>
 8021e36:	ebba 0b04 	subs.w	fp, sl, r4
 8021e3a:	d00b      	beq.n	8021e54 <_vfiprintf_r+0xc0>
 8021e3c:	465b      	mov	r3, fp
 8021e3e:	4622      	mov	r2, r4
 8021e40:	4629      	mov	r1, r5
 8021e42:	4630      	mov	r0, r6
 8021e44:	f7ff ff93 	bl	8021d6e <__sfputs_r>
 8021e48:	3001      	adds	r0, #1
 8021e4a:	f000 80aa 	beq.w	8021fa2 <_vfiprintf_r+0x20e>
 8021e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021e50:	445a      	add	r2, fp
 8021e52:	9209      	str	r2, [sp, #36]	; 0x24
 8021e54:	f89a 3000 	ldrb.w	r3, [sl]
 8021e58:	2b00      	cmp	r3, #0
 8021e5a:	f000 80a2 	beq.w	8021fa2 <_vfiprintf_r+0x20e>
 8021e5e:	2300      	movs	r3, #0
 8021e60:	f04f 32ff 	mov.w	r2, #4294967295
 8021e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021e68:	f10a 0a01 	add.w	sl, sl, #1
 8021e6c:	9304      	str	r3, [sp, #16]
 8021e6e:	9307      	str	r3, [sp, #28]
 8021e70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021e74:	931a      	str	r3, [sp, #104]	; 0x68
 8021e76:	4654      	mov	r4, sl
 8021e78:	2205      	movs	r2, #5
 8021e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021e7e:	4858      	ldr	r0, [pc, #352]	; (8021fe0 <_vfiprintf_r+0x24c>)
 8021e80:	f7de f9d6 	bl	8000230 <memchr>
 8021e84:	9a04      	ldr	r2, [sp, #16]
 8021e86:	b9d8      	cbnz	r0, 8021ec0 <_vfiprintf_r+0x12c>
 8021e88:	06d1      	lsls	r1, r2, #27
 8021e8a:	bf44      	itt	mi
 8021e8c:	2320      	movmi	r3, #32
 8021e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021e92:	0713      	lsls	r3, r2, #28
 8021e94:	bf44      	itt	mi
 8021e96:	232b      	movmi	r3, #43	; 0x2b
 8021e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8021ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8021ea2:	d015      	beq.n	8021ed0 <_vfiprintf_r+0x13c>
 8021ea4:	9a07      	ldr	r2, [sp, #28]
 8021ea6:	4654      	mov	r4, sl
 8021ea8:	2000      	movs	r0, #0
 8021eaa:	f04f 0c0a 	mov.w	ip, #10
 8021eae:	4621      	mov	r1, r4
 8021eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021eb4:	3b30      	subs	r3, #48	; 0x30
 8021eb6:	2b09      	cmp	r3, #9
 8021eb8:	d94e      	bls.n	8021f58 <_vfiprintf_r+0x1c4>
 8021eba:	b1b0      	cbz	r0, 8021eea <_vfiprintf_r+0x156>
 8021ebc:	9207      	str	r2, [sp, #28]
 8021ebe:	e014      	b.n	8021eea <_vfiprintf_r+0x156>
 8021ec0:	eba0 0308 	sub.w	r3, r0, r8
 8021ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8021ec8:	4313      	orrs	r3, r2
 8021eca:	9304      	str	r3, [sp, #16]
 8021ecc:	46a2      	mov	sl, r4
 8021ece:	e7d2      	b.n	8021e76 <_vfiprintf_r+0xe2>
 8021ed0:	9b03      	ldr	r3, [sp, #12]
 8021ed2:	1d19      	adds	r1, r3, #4
 8021ed4:	681b      	ldr	r3, [r3, #0]
 8021ed6:	9103      	str	r1, [sp, #12]
 8021ed8:	2b00      	cmp	r3, #0
 8021eda:	bfbb      	ittet	lt
 8021edc:	425b      	neglt	r3, r3
 8021ede:	f042 0202 	orrlt.w	r2, r2, #2
 8021ee2:	9307      	strge	r3, [sp, #28]
 8021ee4:	9307      	strlt	r3, [sp, #28]
 8021ee6:	bfb8      	it	lt
 8021ee8:	9204      	strlt	r2, [sp, #16]
 8021eea:	7823      	ldrb	r3, [r4, #0]
 8021eec:	2b2e      	cmp	r3, #46	; 0x2e
 8021eee:	d10c      	bne.n	8021f0a <_vfiprintf_r+0x176>
 8021ef0:	7863      	ldrb	r3, [r4, #1]
 8021ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8021ef4:	d135      	bne.n	8021f62 <_vfiprintf_r+0x1ce>
 8021ef6:	9b03      	ldr	r3, [sp, #12]
 8021ef8:	1d1a      	adds	r2, r3, #4
 8021efa:	681b      	ldr	r3, [r3, #0]
 8021efc:	9203      	str	r2, [sp, #12]
 8021efe:	2b00      	cmp	r3, #0
 8021f00:	bfb8      	it	lt
 8021f02:	f04f 33ff 	movlt.w	r3, #4294967295
 8021f06:	3402      	adds	r4, #2
 8021f08:	9305      	str	r3, [sp, #20]
 8021f0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021ff0 <_vfiprintf_r+0x25c>
 8021f0e:	7821      	ldrb	r1, [r4, #0]
 8021f10:	2203      	movs	r2, #3
 8021f12:	4650      	mov	r0, sl
 8021f14:	f7de f98c 	bl	8000230 <memchr>
 8021f18:	b140      	cbz	r0, 8021f2c <_vfiprintf_r+0x198>
 8021f1a:	2340      	movs	r3, #64	; 0x40
 8021f1c:	eba0 000a 	sub.w	r0, r0, sl
 8021f20:	fa03 f000 	lsl.w	r0, r3, r0
 8021f24:	9b04      	ldr	r3, [sp, #16]
 8021f26:	4303      	orrs	r3, r0
 8021f28:	3401      	adds	r4, #1
 8021f2a:	9304      	str	r3, [sp, #16]
 8021f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f30:	482c      	ldr	r0, [pc, #176]	; (8021fe4 <_vfiprintf_r+0x250>)
 8021f32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021f36:	2206      	movs	r2, #6
 8021f38:	f7de f97a 	bl	8000230 <memchr>
 8021f3c:	2800      	cmp	r0, #0
 8021f3e:	d03f      	beq.n	8021fc0 <_vfiprintf_r+0x22c>
 8021f40:	4b29      	ldr	r3, [pc, #164]	; (8021fe8 <_vfiprintf_r+0x254>)
 8021f42:	bb1b      	cbnz	r3, 8021f8c <_vfiprintf_r+0x1f8>
 8021f44:	9b03      	ldr	r3, [sp, #12]
 8021f46:	3307      	adds	r3, #7
 8021f48:	f023 0307 	bic.w	r3, r3, #7
 8021f4c:	3308      	adds	r3, #8
 8021f4e:	9303      	str	r3, [sp, #12]
 8021f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f52:	443b      	add	r3, r7
 8021f54:	9309      	str	r3, [sp, #36]	; 0x24
 8021f56:	e767      	b.n	8021e28 <_vfiprintf_r+0x94>
 8021f58:	fb0c 3202 	mla	r2, ip, r2, r3
 8021f5c:	460c      	mov	r4, r1
 8021f5e:	2001      	movs	r0, #1
 8021f60:	e7a5      	b.n	8021eae <_vfiprintf_r+0x11a>
 8021f62:	2300      	movs	r3, #0
 8021f64:	3401      	adds	r4, #1
 8021f66:	9305      	str	r3, [sp, #20]
 8021f68:	4619      	mov	r1, r3
 8021f6a:	f04f 0c0a 	mov.w	ip, #10
 8021f6e:	4620      	mov	r0, r4
 8021f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021f74:	3a30      	subs	r2, #48	; 0x30
 8021f76:	2a09      	cmp	r2, #9
 8021f78:	d903      	bls.n	8021f82 <_vfiprintf_r+0x1ee>
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	d0c5      	beq.n	8021f0a <_vfiprintf_r+0x176>
 8021f7e:	9105      	str	r1, [sp, #20]
 8021f80:	e7c3      	b.n	8021f0a <_vfiprintf_r+0x176>
 8021f82:	fb0c 2101 	mla	r1, ip, r1, r2
 8021f86:	4604      	mov	r4, r0
 8021f88:	2301      	movs	r3, #1
 8021f8a:	e7f0      	b.n	8021f6e <_vfiprintf_r+0x1da>
 8021f8c:	ab03      	add	r3, sp, #12
 8021f8e:	9300      	str	r3, [sp, #0]
 8021f90:	462a      	mov	r2, r5
 8021f92:	4b16      	ldr	r3, [pc, #88]	; (8021fec <_vfiprintf_r+0x258>)
 8021f94:	a904      	add	r1, sp, #16
 8021f96:	4630      	mov	r0, r6
 8021f98:	f3af 8000 	nop.w
 8021f9c:	4607      	mov	r7, r0
 8021f9e:	1c78      	adds	r0, r7, #1
 8021fa0:	d1d6      	bne.n	8021f50 <_vfiprintf_r+0x1bc>
 8021fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021fa4:	07d9      	lsls	r1, r3, #31
 8021fa6:	d405      	bmi.n	8021fb4 <_vfiprintf_r+0x220>
 8021fa8:	89ab      	ldrh	r3, [r5, #12]
 8021faa:	059a      	lsls	r2, r3, #22
 8021fac:	d402      	bmi.n	8021fb4 <_vfiprintf_r+0x220>
 8021fae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021fb0:	f7fd f932 	bl	801f218 <__retarget_lock_release_recursive>
 8021fb4:	89ab      	ldrh	r3, [r5, #12]
 8021fb6:	065b      	lsls	r3, r3, #25
 8021fb8:	f53f af12 	bmi.w	8021de0 <_vfiprintf_r+0x4c>
 8021fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021fbe:	e711      	b.n	8021de4 <_vfiprintf_r+0x50>
 8021fc0:	ab03      	add	r3, sp, #12
 8021fc2:	9300      	str	r3, [sp, #0]
 8021fc4:	462a      	mov	r2, r5
 8021fc6:	4b09      	ldr	r3, [pc, #36]	; (8021fec <_vfiprintf_r+0x258>)
 8021fc8:	a904      	add	r1, sp, #16
 8021fca:	4630      	mov	r0, r6
 8021fcc:	f7ff fd14 	bl	80219f8 <_printf_i>
 8021fd0:	e7e4      	b.n	8021f9c <_vfiprintf_r+0x208>
 8021fd2:	bf00      	nop
 8021fd4:	08022e48 	.word	0x08022e48
 8021fd8:	08022e68 	.word	0x08022e68
 8021fdc:	08022e28 	.word	0x08022e28
 8021fe0:	080230ec 	.word	0x080230ec
 8021fe4:	080230f6 	.word	0x080230f6
 8021fe8:	00000000 	.word	0x00000000
 8021fec:	08021d6f 	.word	0x08021d6f
 8021ff0:	080230f2 	.word	0x080230f2

08021ff4 <abort>:
 8021ff4:	b508      	push	{r3, lr}
 8021ff6:	2006      	movs	r0, #6
 8021ff8:	f000 f834 	bl	8022064 <raise>
 8021ffc:	2001      	movs	r0, #1
 8021ffe:	f7fc feb3 	bl	801ed68 <_exit>

08022002 <_malloc_usable_size_r>:
 8022002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022006:	1f18      	subs	r0, r3, #4
 8022008:	2b00      	cmp	r3, #0
 802200a:	bfbc      	itt	lt
 802200c:	580b      	ldrlt	r3, [r1, r0]
 802200e:	18c0      	addlt	r0, r0, r3
 8022010:	4770      	bx	lr

08022012 <_raise_r>:
 8022012:	291f      	cmp	r1, #31
 8022014:	b538      	push	{r3, r4, r5, lr}
 8022016:	4604      	mov	r4, r0
 8022018:	460d      	mov	r5, r1
 802201a:	d904      	bls.n	8022026 <_raise_r+0x14>
 802201c:	2316      	movs	r3, #22
 802201e:	6003      	str	r3, [r0, #0]
 8022020:	f04f 30ff 	mov.w	r0, #4294967295
 8022024:	bd38      	pop	{r3, r4, r5, pc}
 8022026:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022028:	b112      	cbz	r2, 8022030 <_raise_r+0x1e>
 802202a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802202e:	b94b      	cbnz	r3, 8022044 <_raise_r+0x32>
 8022030:	4620      	mov	r0, r4
 8022032:	f000 f831 	bl	8022098 <_getpid_r>
 8022036:	462a      	mov	r2, r5
 8022038:	4601      	mov	r1, r0
 802203a:	4620      	mov	r0, r4
 802203c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022040:	f000 b818 	b.w	8022074 <_kill_r>
 8022044:	2b01      	cmp	r3, #1
 8022046:	d00a      	beq.n	802205e <_raise_r+0x4c>
 8022048:	1c59      	adds	r1, r3, #1
 802204a:	d103      	bne.n	8022054 <_raise_r+0x42>
 802204c:	2316      	movs	r3, #22
 802204e:	6003      	str	r3, [r0, #0]
 8022050:	2001      	movs	r0, #1
 8022052:	e7e7      	b.n	8022024 <_raise_r+0x12>
 8022054:	2400      	movs	r4, #0
 8022056:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802205a:	4628      	mov	r0, r5
 802205c:	4798      	blx	r3
 802205e:	2000      	movs	r0, #0
 8022060:	e7e0      	b.n	8022024 <_raise_r+0x12>
	...

08022064 <raise>:
 8022064:	4b02      	ldr	r3, [pc, #8]	; (8022070 <raise+0xc>)
 8022066:	4601      	mov	r1, r0
 8022068:	6818      	ldr	r0, [r3, #0]
 802206a:	f7ff bfd2 	b.w	8022012 <_raise_r>
 802206e:	bf00      	nop
 8022070:	200002b8 	.word	0x200002b8

08022074 <_kill_r>:
 8022074:	b538      	push	{r3, r4, r5, lr}
 8022076:	4d07      	ldr	r5, [pc, #28]	; (8022094 <_kill_r+0x20>)
 8022078:	2300      	movs	r3, #0
 802207a:	4604      	mov	r4, r0
 802207c:	4608      	mov	r0, r1
 802207e:	4611      	mov	r1, r2
 8022080:	602b      	str	r3, [r5, #0]
 8022082:	f7fc fe61 	bl	801ed48 <_kill>
 8022086:	1c43      	adds	r3, r0, #1
 8022088:	d102      	bne.n	8022090 <_kill_r+0x1c>
 802208a:	682b      	ldr	r3, [r5, #0]
 802208c:	b103      	cbz	r3, 8022090 <_kill_r+0x1c>
 802208e:	6023      	str	r3, [r4, #0]
 8022090:	bd38      	pop	{r3, r4, r5, pc}
 8022092:	bf00      	nop
 8022094:	2001d46c 	.word	0x2001d46c

08022098 <_getpid_r>:
 8022098:	f7fc be4e 	b.w	801ed38 <_getpid>

0802209c <_init>:
 802209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802209e:	bf00      	nop
 80220a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80220a2:	bc08      	pop	{r3}
 80220a4:	469e      	mov	lr, r3
 80220a6:	4770      	bx	lr

080220a8 <_fini>:
 80220a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80220aa:	bf00      	nop
 80220ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80220ae:	bc08      	pop	{r3}
 80220b0:	469e      	mov	lr, r3
 80220b2:	4770      	bx	lr
