
HS_DataLog_Gen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002204c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010c4  08022210  08022210  00032210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080232d4  080232d4  00040260  2**0
                  CONTENTS
  4 .ARM          00000008  080232d4  080232d4  000332d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080232dc  080232dc  00040260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080232dc  080232dc  000332dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080232e0  080232e0  000332e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  080232e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00040260  2**0
                  CONTENTS
 10 .bss          00012a64  20000260  20000260  00040260  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20012cc4  20012cc4  00040260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040260  2**0
                  CONTENTS, READONLY
 13 .debug_info   00053b20  00000000  00000000  00040290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a3eb  00000000  00000000  00093db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004288  00000000  00000000  0009e1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003e80  00000000  00000000  000a2428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00048745  00000000  00000000  000a62a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005a7a1  00000000  00000000  000ee9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016f6a6  00000000  00000000  0014918e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002b8834  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0001303c  00000000  00000000  002b8884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000260 	.word	0x20000260
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080221f4 	.word	0x080221f4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000264 	.word	0x20000264
 80001fc:	080221f4 	.word	0x080221f4

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <HSD_JSON_set_allocation_functions>:
* @param  malloc_function: malloc() implementation
* @param  free_function: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_set_allocation_functions(void * (*malloc_function)(size_t), void (*free_function)(void *))
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  json_set_allocation_functions(malloc_function, free_function);
 8001052:	6839      	ldr	r1, [r7, #0]
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f01c fc9f 	bl	801d998 <json_set_allocation_functions>
  JSON_free_function = free_function;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <HSD_JSON_set_allocation_functions+0x24>)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	6013      	str	r3, [r2, #0]
  return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000027c 	.word	0x2000027c

08001070 <HSD_JSON_free>:

int32_t HSD_JSON_free(void * mem)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  JSON_free_function(mem);
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <HSD_JSON_free+0x1c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	4798      	blx	r3
  return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000027c 	.word	0x2000027c

08001090 <HSD_JSON_serialize_Device>:
* @param  Device: COM_Device_t struct instance to be serialized 
* @param  SerializedJSON: free() implementation
* @retval 0: no error
*/
int32_t HSD_JSON_serialize_Device(COM_Device_t *Device, char **SerializedJSON, uint8_t pretty)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	4613      	mov	r3, r2
 800109c:	71fb      	strb	r3, [r7, #7]
  return get_JSON_from_Device(Device, SerializedJSON, pretty);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	461a      	mov	r2, r3
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f000 f813 	bl	80010d0 <get_JSON_from_Device>
 80010aa:	4603      	mov	r3, r0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HSD_JSON_parse_Device>:
{
  return get_JSON_from_SubSensorStatus(SubSensorStatus, SerializedJSON);
}

int32_t HSD_JSON_parse_Device(char *SerializedJSON, COM_Device_t *Device)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  return parse_Device_from_JSON(SerializedJSON, Device);
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f87f 	bl	80011c4 <parse_Device_from_JSON>
 80010c6:	4603      	mov	r3, r0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <get_JSON_from_Device>:
}


/* Private function ----------------------------------------------------------*/
static int32_t get_JSON_from_Device(COM_Device_t *device, char **serialized_string, uint8_t pretty)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	4613      	mov	r3, r2
 80010dc:	71fb      	strb	r3, [r7, #7]
  JSON_Object *JSON_Device;
  JSON_Array *JSON_SensorArray;
  uint32_t size;
  uint32_t i;
  
  tempJSON = json_value_init_object();
 80010de:	f01c f8b3 	bl	801d248 <json_value_init_object>
 80010e2:	61f8      	str	r0, [r7, #28]
  JSON_Device = json_value_get_object(tempJSON);
 80010e4:	69f8      	ldr	r0, [r7, #28]
 80010e6:	f01c f81c 	bl	801d122 <json_value_get_object>
 80010ea:	61b8      	str	r0, [r7, #24]
  
  json_object_dotset_string(JSON_Device, "device.deviceInfo.serialNumber", device->deviceDescriptor.serialNumber);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4930      	ldr	r1, [pc, #192]	; (80011b4 <get_JSON_from_Device+0xe4>)
 80010f2:	69b8      	ldr	r0, [r7, #24]
 80010f4:	f01c fbe2 	bl	801d8bc <json_object_dotset_string>
  json_object_dotset_string(JSON_Device, "device.deviceInfo.alias", device->deviceDescriptor.alias);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3315      	adds	r3, #21
 80010fc:	461a      	mov	r2, r3
 80010fe:	492e      	ldr	r1, [pc, #184]	; (80011b8 <get_JSON_from_Device+0xe8>)
 8001100:	69b8      	ldr	r0, [r7, #24]
 8001102:	f01c fbdb 	bl	801d8bc <json_object_dotset_string>
  json_object_dotset_number(JSON_Device, "device.deviceInfo.nSensor", device->deviceDescriptor.nSensor);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fa22 	bl	8000554 <__aeabi_ui2d>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	ec43 2b10 	vmov	d0, r2, r3
 8001118:	4928      	ldr	r1, [pc, #160]	; (80011bc <get_JSON_from_Device+0xec>)
 800111a:	69b8      	ldr	r0, [r7, #24]
 800111c:	f01c fbf2 	bl	801d904 <json_object_dotset_number>
  
  json_object_dotset_value(JSON_Device, "device.sensor", json_value_init_array());
 8001120:	f01c f8be 	bl	801d2a0 <json_value_init_array>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	4925      	ldr	r1, [pc, #148]	; (80011c0 <get_JSON_from_Device+0xf0>)
 800112a:	69b8      	ldr	r0, [r7, #24]
 800112c:	f01c fb39 	bl	801d7a2 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_Device, "device.sensor");
 8001130:	4923      	ldr	r1, [pc, #140]	; (80011c0 <get_JSON_from_Device+0xf0>)
 8001132:	69b8      	ldr	r0, [r7, #24]
 8001134:	f01b ff2a 	bl	801cf8c <json_object_dotget_array>
 8001138:	6178      	str	r0, [r7, #20]
  
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
 800113e:	e013      	b.n	8001168 <get_JSON_from_Device+0x98>
  {        
    tempJSON1 = json_value_init_object();  
 8001140:	f01c f882 	bl	801d248 <json_value_init_object>
 8001144:	6138      	str	r0, [r7, #16]
    create_JSON_Sensor(device->sensors[i], tempJSON1);    
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	330a      	adds	r3, #10
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	6939      	ldr	r1, [r7, #16]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f9cd 	bl	80014f4 <create_JSON_Sensor>
    json_array_append_value(JSON_SensorArray,tempJSON1);
 800115a:	6939      	ldr	r1, [r7, #16]
 800115c:	6978      	ldr	r0, [r7, #20]
 800115e:	f01c fa8b 	bl	801d678 <json_array_append_value>
  for(i = 0; i < device->deviceDescriptor.nSensor; i++)
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	3301      	adds	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	6a3a      	ldr	r2, [r7, #32]
 800116e:	429a      	cmp	r2, r3
 8001170:	d3e6      	bcc.n	8001140 <get_JSON_from_Device+0x70>
  }  
  
  /* convert to a json string and write to file */
  if (pretty == 1)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d10a      	bne.n	800118e <get_JSON_from_Device+0xbe>
  {
    *serialized_string = json_serialize_to_string_pretty(tempJSON);
 8001178:	69f8      	ldr	r0, [r7, #28]
 800117a:	f01c fa3d 	bl	801d5f8 <json_serialize_to_string_pretty>
 800117e:	4602      	mov	r2, r0
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	601a      	str	r2, [r3, #0]
    size = json_serialization_size_pretty(tempJSON);    
 8001184:	69f8      	ldr	r0, [r7, #28]
 8001186:	f01c f9f3 	bl	801d570 <json_serialization_size_pretty>
 800118a:	6278      	str	r0, [r7, #36]	; 0x24
 800118c:	e009      	b.n	80011a2 <get_JSON_from_Device+0xd2>
  }
  else
  {
    *serialized_string = json_serialize_to_string(tempJSON);
 800118e:	69f8      	ldr	r0, [r7, #28]
 8001190:	f01c f9bc 	bl	801d50c <json_serialize_to_string>
 8001194:	4602      	mov	r2, r0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	601a      	str	r2, [r3, #0]
    size = json_serialization_size(tempJSON);    
 800119a:	69f8      	ldr	r0, [r7, #28]
 800119c:	f01c f972 	bl	801d484 <json_serialization_size>
 80011a0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  
  json_value_free(tempJSON);
 80011a2:	69f8      	ldr	r0, [r7, #28]
 80011a4:	f01c f822 	bl	801d1ec <json_value_free>
  
  return size;    
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	08022210 	.word	0x08022210
 80011b8:	08022230 	.word	0x08022230
 80011bc:	08022248 	.word	0x08022248
 80011c0:	08022264 	.word	0x08022264

080011c4 <parse_Device_from_JSON>:
  return size;
}


static int32_t parse_Device_from_JSON(char *SerializedJSON, COM_Device_t* Device)
{  
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  char *StatusText;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f01b fe5a 	bl	801ce88 <json_parse_string>
 80011d4:	6238      	str	r0, [r7, #32]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 80011d6:	6a38      	ldr	r0, [r7, #32]
 80011d8:	f01b ffa3 	bl	801d122 <json_value_get_object>
 80011dc:	61f8      	str	r0, [r7, #28]
  
  if (json_object_dothas_value(JSON_ParseHandler,"device.sensor"))
 80011de:	4921      	ldr	r1, [pc, #132]	; (8001264 <parse_Device_from_JSON+0xa0>)
 80011e0:	69f8      	ldr	r0, [r7, #28]
 80011e2:	f01b ff2f 	bl	801d044 <json_object_dothas_value>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d033      	beq.n	8001254 <parse_Device_from_JSON+0x90>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "device.sensor");    
 80011ec:	491d      	ldr	r1, [pc, #116]	; (8001264 <parse_Device_from_JSON+0xa0>)
 80011ee:	69f8      	ldr	r0, [r7, #28]
 80011f0:	f01b fecc 	bl	801cf8c <json_object_dotget_array>
 80011f4:	61b8      	str	r0, [r7, #24]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 80011f6:	69b8      	ldr	r0, [r7, #24]
 80011f8:	f01b ff64 	bl	801d0c4 <json_array_get_count>
 80011fc:	6178      	str	r0, [r7, #20]
    
    for (ii = 0; ii < size; ii++)
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
 8001202:	e023      	b.n	800124c <parse_Device_from_JSON+0x88>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);
 8001204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001206:	69b8      	ldr	r0, [r7, #24]
 8001208:	f01b ff4a 	bl	801d0a0 <json_array_get_object>
 800120c:	6138      	str	r0, [r7, #16]
      if (json_object_dothas_value(JSON_subSensorObj,"sensorStatus"))
 800120e:	4916      	ldr	r1, [pc, #88]	; (8001268 <parse_Device_from_JSON+0xa4>)
 8001210:	6938      	ldr	r0, [r7, #16]
 8001212:	f01b ff17 	bl	801d044 <json_object_dothas_value>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d014      	beq.n	8001246 <parse_Device_from_JSON+0x82>
      {
        StatusText = json_serialize_to_string(json_object_get_value(JSON_subSensorObj,"sensorStatus"));
 800121c:	4912      	ldr	r1, [pc, #72]	; (8001268 <parse_Device_from_JSON+0xa4>)
 800121e:	6938      	ldr	r0, [r7, #16]
 8001220:	f01b fe56 	bl	801ced0 <json_object_get_value>
 8001224:	4603      	mov	r3, r0
 8001226:	4618      	mov	r0, r3
 8001228:	f01c f970 	bl	801d50c <json_serialize_to_string>
 800122c:	60f8      	str	r0, [r7, #12]
        parse_Status_from_JSON(StatusText, &Device->sensors[ii]->sensorStatus);
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	330a      	adds	r3, #10
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800123e:	4619      	mov	r1, r3
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 f813 	bl	800126c <parse_Status_from_JSON>
    for (ii = 0; ii < size; ii++)
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	3301      	adds	r3, #1
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
 800124c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	429a      	cmp	r2, r3
 8001252:	d3d7      	bcc.n	8001204 <parse_Device_from_JSON+0x40>
      }
    }
  }
  
  json_value_free(tempJSON);
 8001254:	6a38      	ldr	r0, [r7, #32]
 8001256:	f01b ffc9 	bl	801d1ec <json_value_free>
  
  return 0;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	08022264 	.word	0x08022264
 8001268:	08022274 	.word	0x08022274

0800126c <parse_Status_from_JSON>:
  
  return 0;  
}
volatile  int8_t subid = -1;
static int32_t parse_Status_from_JSON(char *SerializedJSON, COM_SensorStatus_t * sensorStatus)
{  
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_subSensorObj;
  JSON_Array *JSON_subSensorParser;
  uint32_t ii, size;
  
  JSON_Value *tempJSON = json_parse_string(SerializedJSON);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f01b fe06 	bl	801ce88 <json_parse_string>
 800127c:	61b8      	str	r0, [r7, #24]
  JSON_Object *JSON_ParseHandler = json_value_get_object(tempJSON);
 800127e:	69b8      	ldr	r0, [r7, #24]
 8001280:	f01b ff4f 	bl	801d122 <json_value_get_object>
 8001284:	6178      	str	r0, [r7, #20]
  
  if (json_object_dothas_value(JSON_ParseHandler,"odr"))
 8001286:	4990      	ldr	r1, [pc, #576]	; (80014c8 <parse_Status_from_JSON+0x25c>)
 8001288:	6978      	ldr	r0, [r7, #20]
 800128a:	f01b fedb 	bl	801d044 <json_object_dothas_value>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00c      	beq.n	80012ae <parse_Status_from_JSON+0x42>
  {
    sensorStatus->ODR = json_object_dotget_number(JSON_ParseHandler, "odr");
 8001294:	498c      	ldr	r1, [pc, #560]	; (80014c8 <parse_Status_from_JSON+0x25c>)
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f01b fe60 	bl	801cf5c <json_object_dotget_number>
 800129c:	ec53 2b10 	vmov	r2, r3, d0
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff fcc8 	bl	8000c38 <__aeabi_d2f>
 80012a8:	4602      	mov	r2, r0
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	601a      	str	r2, [r3, #0]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"usbDataPacketSize"))
 80012ae:	4987      	ldr	r1, [pc, #540]	; (80014cc <parse_Status_from_JSON+0x260>)
 80012b0:	6978      	ldr	r0, [r7, #20]
 80012b2:	f01b fec7 	bl	801d044 <json_object_dothas_value>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00d      	beq.n	80012d8 <parse_Status_from_JSON+0x6c>
  {
    sensorStatus->usbDataPacketSize = (uint16_t) json_object_dotget_number(JSON_ParseHandler, "usbDataPacketSize");
 80012bc:	4983      	ldr	r1, [pc, #524]	; (80014cc <parse_Status_from_JSON+0x260>)
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f01b fe4c 	bl	801cf5c <json_object_dotget_number>
 80012c4:	ec53 2b10 	vmov	r2, r3, d0
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fc94 	bl	8000bf8 <__aeabi_d2uiz>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	821a      	strh	r2, [r3, #16]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"sdWriteBufferSize"))
 80012d8:	497d      	ldr	r1, [pc, #500]	; (80014d0 <parse_Status_from_JSON+0x264>)
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f01b feb2 	bl	801d044 <json_object_dothas_value>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00c      	beq.n	8001300 <parse_Status_from_JSON+0x94>
  {
    sensorStatus->sdWriteBufferSize = (uint32_t) json_object_dotget_number(JSON_ParseHandler, "sdWriteBufferSize");
 80012e6:	497a      	ldr	r1, [pc, #488]	; (80014d0 <parse_Status_from_JSON+0x264>)
 80012e8:	6978      	ldr	r0, [r7, #20]
 80012ea:	f01b fe37 	bl	801cf5c <json_object_dotget_number>
 80012ee:	ec53 2b10 	vmov	r2, r3, d0
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fc7f 	bl	8000bf8 <__aeabi_d2uiz>
 80012fa:	4602      	mov	r2, r0
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	615a      	str	r2, [r3, #20]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"comChannelNumber"))
 8001300:	4974      	ldr	r1, [pc, #464]	; (80014d4 <parse_Status_from_JSON+0x268>)
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f01b fe9e 	bl	801d044 <json_object_dothas_value>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00d      	beq.n	800132a <parse_Status_from_JSON+0xbe>
  {
    sensorStatus->comChannelNumber = (int16_t) json_object_dotget_number(JSON_ParseHandler, "comChannelNumber");
 800130e:	4971      	ldr	r1, [pc, #452]	; (80014d4 <parse_Status_from_JSON+0x268>)
 8001310:	6978      	ldr	r0, [r7, #20]
 8001312:	f01b fe23 	bl	801cf5c <json_object_dotget_number>
 8001316:	ec53 2b10 	vmov	r2, r3, d0
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc43 	bl	8000ba8 <__aeabi_d2iz>
 8001322:	4603      	mov	r3, r0
 8001324:	b21a      	sxth	r2, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	831a      	strh	r2, [r3, #24]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"samplesPerTs"))
 800132a:	496b      	ldr	r1, [pc, #428]	; (80014d8 <parse_Status_from_JSON+0x26c>)
 800132c:	6978      	ldr	r0, [r7, #20]
 800132e:	f01b fe89 	bl	801d044 <json_object_dothas_value>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00d      	beq.n	8001354 <parse_Status_from_JSON+0xe8>
  {
    sensorStatus->samplesPerTimestamp = (uint16_t)json_object_dotget_number(JSON_ParseHandler, "samplesPerTs");
 8001338:	4967      	ldr	r1, [pc, #412]	; (80014d8 <parse_Status_from_JSON+0x26c>)
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f01b fe0e 	bl	801cf5c <json_object_dotget_number>
 8001340:	ec53 2b10 	vmov	r2, r3, d0
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc56 	bl	8000bf8 <__aeabi_d2uiz>
 800134c:	4603      	mov	r3, r0
 800134e:	b29a      	uxth	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	819a      	strh	r2, [r3, #12]
  }  
  if (json_object_dothas_value(JSON_ParseHandler,"isActive"))
 8001354:	4961      	ldr	r1, [pc, #388]	; (80014dc <parse_Status_from_JSON+0x270>)
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f01b fe74 	bl	801d044 <json_object_dothas_value>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00d      	beq.n	800137e <parse_Status_from_JSON+0x112>
  {
    if (json_object_dotget_boolean(JSON_ParseHandler,"isActive") == 1)
 8001362:	495e      	ldr	r1, [pc, #376]	; (80014dc <parse_Status_from_JSON+0x270>)
 8001364:	6978      	ldr	r0, [r7, #20]
 8001366:	f01b fe23 	bl	801cfb0 <json_object_dotget_boolean>
 800136a:	4603      	mov	r3, r0
 800136c:	2b01      	cmp	r3, #1
 800136e:	d103      	bne.n	8001378 <parse_Status_from_JSON+0x10c>
    {
      sensorStatus->isActive = 1;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2201      	movs	r2, #1
 8001374:	739a      	strb	r2, [r3, #14]
 8001376:	e002      	b.n	800137e <parse_Status_from_JSON+0x112>
    }
    else 
    {
      sensorStatus->isActive = 0;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	2200      	movs	r2, #0
 800137c:	739a      	strb	r2, [r3, #14]
    }
  }
  if (json_object_dothas_value(JSON_ParseHandler,"subSensorStatus"))
 800137e:	4958      	ldr	r1, [pc, #352]	; (80014e0 <parse_Status_from_JSON+0x274>)
 8001380:	6978      	ldr	r0, [r7, #20]
 8001382:	f01b fe5f 	bl	801d044 <json_object_dothas_value>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 8094 	beq.w	80014b6 <parse_Status_from_JSON+0x24a>
  {
    JSON_subSensorParser = json_object_dotget_array(JSON_ParseHandler, "subSensorStatus");    
 800138e:	4954      	ldr	r1, [pc, #336]	; (80014e0 <parse_Status_from_JSON+0x274>)
 8001390:	6978      	ldr	r0, [r7, #20]
 8001392:	f01b fdfb 	bl	801cf8c <json_object_dotget_array>
 8001396:	6138      	str	r0, [r7, #16]
    size = (uint32_t)json_array_get_count(JSON_subSensorParser);
 8001398:	6938      	ldr	r0, [r7, #16]
 800139a:	f01b fe93 	bl	801d0c4 <json_array_get_count>
 800139e:	60f8      	str	r0, [r7, #12]
    
    for (ii = 0; ii < size; ii++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	e082      	b.n	80014ac <parse_Status_from_JSON+0x240>
    {
      JSON_subSensorObj = json_array_get_object(JSON_subSensorParser,ii);      
 80013a6:	69f9      	ldr	r1, [r7, #28]
 80013a8:	6938      	ldr	r0, [r7, #16]
 80013aa:	f01b fe79 	bl	801d0a0 <json_array_get_object>
 80013ae:	60b8      	str	r0, [r7, #8]
      
      if (json_object_dothas_value(JSON_subSensorObj,"id"))  
 80013b0:	494c      	ldr	r1, [pc, #304]	; (80014e4 <parse_Status_from_JSON+0x278>)
 80013b2:	68b8      	ldr	r0, [r7, #8]
 80013b4:	f01b fe46 	bl	801d044 <json_object_dothas_value>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00e      	beq.n	80013dc <parse_Status_from_JSON+0x170>
      {
        subid = (int8_t)json_object_dotget_number(JSON_subSensorObj, "id");
 80013be:	4949      	ldr	r1, [pc, #292]	; (80014e4 <parse_Status_from_JSON+0x278>)
 80013c0:	68b8      	ldr	r0, [r7, #8]
 80013c2:	f01b fdcb 	bl	801cf5c <json_object_dotget_number>
 80013c6:	ec53 2b10 	vmov	r2, r3, d0
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fbeb 	bl	8000ba8 <__aeabi_d2iz>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b25a      	sxtb	r2, r3
 80013d6:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <parse_Status_from_JSON+0x27c>)
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	e003      	b.n	80013e4 <parse_Status_from_JSON+0x178>
      }
      else
      {
        subid = ii;
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <parse_Status_from_JSON+0x27c>)
 80013e2:	701a      	strb	r2, [r3, #0]
      }
      
      if (json_object_dothas_value(JSON_subSensorObj,"fs"))
 80013e4:	4941      	ldr	r1, [pc, #260]	; (80014ec <parse_Status_from_JSON+0x280>)
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f01b fe2c 	bl	801d044 <json_object_dothas_value>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d014      	beq.n	800141c <parse_Status_from_JSON+0x1b0>
      {
        sensorStatus->subSensorStatus[subid].FS = json_object_dotget_number(JSON_subSensorObj, "fs");
 80013f2:	493e      	ldr	r1, [pc, #248]	; (80014ec <parse_Status_from_JSON+0x280>)
 80013f4:	68b8      	ldr	r0, [r7, #8]
 80013f6:	f01b fdb1 	bl	801cf5c <json_object_dotget_number>
 80013fa:	ec51 0b10 	vmov	r0, r1, d0
 80013fe:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <parse_Status_from_JSON+0x27c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b25b      	sxtb	r3, r3
 8001404:	461c      	mov	r4, r3
 8001406:	f7ff fc17 	bl	8000c38 <__aeabi_d2f>
 800140a:	4601      	mov	r1, r0
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	4623      	mov	r3, r4
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4423      	add	r3, r4
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	331c      	adds	r3, #28
 800141a:	6019      	str	r1, [r3, #0]
      }
      if (json_object_dothas_value(JSON_subSensorObj,"sensitivity"))
 800141c:	4934      	ldr	r1, [pc, #208]	; (80014f0 <parse_Status_from_JSON+0x284>)
 800141e:	68b8      	ldr	r0, [r7, #8]
 8001420:	f01b fe10 	bl	801d044 <json_object_dothas_value>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d014      	beq.n	8001454 <parse_Status_from_JSON+0x1e8>
      {
        sensorStatus->subSensorStatus[subid].sensitivity = json_object_dotget_number(JSON_subSensorObj, "sensitivity");
 800142a:	4931      	ldr	r1, [pc, #196]	; (80014f0 <parse_Status_from_JSON+0x284>)
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	f01b fd95 	bl	801cf5c <json_object_dotget_number>
 8001432:	ec51 0b10 	vmov	r0, r1, d0
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <parse_Status_from_JSON+0x27c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b25b      	sxtb	r3, r3
 800143c:	461c      	mov	r4, r3
 800143e:	f7ff fbfb 	bl	8000c38 <__aeabi_d2f>
 8001442:	4601      	mov	r1, r0
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	4623      	mov	r3, r4
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4423      	add	r3, r4
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	3320      	adds	r3, #32
 8001452:	6019      	str	r1, [r3, #0]
      }      
      if (json_object_dothas_value(JSON_subSensorObj,"isActive"))
 8001454:	4921      	ldr	r1, [pc, #132]	; (80014dc <parse_Status_from_JSON+0x270>)
 8001456:	68b8      	ldr	r0, [r7, #8]
 8001458:	f01b fdf4 	bl	801d044 <json_object_dothas_value>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d021      	beq.n	80014a6 <parse_Status_from_JSON+0x23a>
      {
        if (json_object_dotget_boolean(JSON_subSensorObj,"isActive") == 1)
 8001462:	491e      	ldr	r1, [pc, #120]	; (80014dc <parse_Status_from_JSON+0x270>)
 8001464:	68b8      	ldr	r0, [r7, #8]
 8001466:	f01b fda3 	bl	801cfb0 <json_object_dotget_boolean>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d10d      	bne.n	800148c <parse_Status_from_JSON+0x220>
        {
          sensorStatus->subSensorStatus[subid].isActive = 1;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <parse_Status_from_JSON+0x27c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b25b      	sxtb	r3, r3
 8001476:	4619      	mov	r1, r3
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	460b      	mov	r3, r1
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	440b      	add	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	3324      	adds	r3, #36	; 0x24
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e00c      	b.n	80014a6 <parse_Status_from_JSON+0x23a>
        }
        else 
        {
          sensorStatus->subSensorStatus[subid].isActive = 0;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <parse_Status_from_JSON+0x27c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b25b      	sxtb	r3, r3
 8001492:	4619      	mov	r1, r3
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	460b      	mov	r3, r1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	3324      	adds	r3, #36	; 0x24
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
    for (ii = 0; ii < size; ii++)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3301      	adds	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f4ff af78 	bcc.w	80013a6 <parse_Status_from_JSON+0x13a>
        }
      }
    }
  }  
  json_value_free(tempJSON);
 80014b6:	69b8      	ldr	r0, [r7, #24]
 80014b8:	f01b fe98 	bl	801d1ec <json_value_free>
  
  return 0;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	080222ec 	.word	0x080222ec
 80014cc:	080222f0 	.word	0x080222f0
 80014d0:	08022304 	.word	0x08022304
 80014d4:	08022318 	.word	0x08022318
 80014d8:	0802232c 	.word	0x0802232c
 80014dc:	0802233c 	.word	0x0802233c
 80014e0:	08022348 	.word	0x08022348
 80014e4:	08022358 	.word	0x08022358
 80014e8:	20000000 	.word	0x20000000
 80014ec:	0802235c 	.word	0x0802235c
 80014f0:	08022360 	.word	0x08022360

080014f4 <create_JSON_Sensor>:
  
}


static void create_JSON_Sensor(COM_Sensor_t *sensor, JSON_Value *tempJSON)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	; 0x30
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  JSON_Value *tempJSON1;
  JSON_Value *tempJSON2;
  JSON_Array *JSON_SensorArray1;
  JSON_Array *JSON_SensorArray2;
  uint32_t ii = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t nSubSensors = sensor->sensorDescriptor.nSubSensors; 
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t nSensor = sensor->sensorDescriptor.id;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  
  JSON_Object *JSON_Sensor = json_value_get_object(tempJSON);
 8001514:	6838      	ldr	r0, [r7, #0]
 8001516:	f01b fe04 	bl	801d122 <json_value_get_object>
 800151a:	6278      	str	r0, [r7, #36]	; 0x24
  
  json_object_dotset_number(JSON_Sensor, "id", nSensor);
 800151c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f817 	bl	8000554 <__aeabi_ui2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	ec43 2b10 	vmov	d0, r2, r3
 800152e:	493e      	ldr	r1, [pc, #248]	; (8001628 <create_JSON_Sensor+0x134>)
 8001530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001532:	f01c f9e7 	bl	801d904 <json_object_dotset_number>
  
  JSON_Value *DescriptorJSON = json_value_init_object();
 8001536:	f01b fe87 	bl	801d248 <json_value_init_object>
 800153a:	6238      	str	r0, [r7, #32]
  json_object_set_value(JSON_Sensor, "sensorDescriptor", DescriptorJSON);
 800153c:	6a3a      	ldr	r2, [r7, #32]
 800153e:	493b      	ldr	r1, [pc, #236]	; (800162c <create_JSON_Sensor+0x138>)
 8001540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001542:	f01c f8d8 	bl	801d6f6 <json_object_set_value>
  create_JSON_SensorDescriptor(&sensor->sensorDescriptor, DescriptorJSON); 
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a39      	ldr	r1, [r7, #32]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f876 	bl	800163c <create_JSON_SensorDescriptor>
  
  json_object_dotset_value(JSON_Sensor, "sensorDescriptor.subSensorDescriptor", json_value_init_array());
 8001550:	f01b fea6 	bl	801d2a0 <json_value_init_array>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	4935      	ldr	r1, [pc, #212]	; (8001630 <create_JSON_Sensor+0x13c>)
 800155a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800155c:	f01c f921 	bl	801d7a2 <json_object_dotset_value>
  
  JSON_SensorArray1 = json_object_dotget_array(JSON_Sensor, "sensorDescriptor.subSensorDescriptor"); 
 8001560:	4933      	ldr	r1, [pc, #204]	; (8001630 <create_JSON_Sensor+0x13c>)
 8001562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001564:	f01b fd12 	bl	801cf8c <json_object_dotget_array>
 8001568:	61f8      	str	r0, [r7, #28]
  for (ii = 0; ii < nSubSensors; ii++)
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156e:	e015      	b.n	800159c <create_JSON_Sensor+0xa8>
  {
    tempJSON1 = json_value_init_object();  
 8001570:	f01b fe6a 	bl	801d248 <json_value_init_object>
 8001574:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor->sensorDescriptor.subSensorDescriptor[ii], tempJSON1);  
 8001576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001578:	2254      	movs	r2, #84	; 0x54
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	3358      	adds	r3, #88	; 0x58
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	3304      	adds	r3, #4
 8001586:	68f9      	ldr	r1, [r7, #12]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f9cf 	bl	800192c <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 800158e:	68f9      	ldr	r1, [r7, #12]
 8001590:	69f8      	ldr	r0, [r7, #28]
 8001592:	f01c f871 	bl	801d678 <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	3301      	adds	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80015a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d3e4      	bcc.n	8001570 <create_JSON_Sensor+0x7c>
  }
  
  JSON_Value *statusJSON = json_value_init_object();
 80015a6:	f01b fe4f 	bl	801d248 <json_value_init_object>
 80015aa:	61b8      	str	r0, [r7, #24]
  json_object_set_value(JSON_Sensor, "sensorStatus", statusJSON);
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4921      	ldr	r1, [pc, #132]	; (8001634 <create_JSON_Sensor+0x140>)
 80015b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015b2:	f01c f8a0 	bl	801d6f6 <json_object_set_value>
  create_JSON_SensorStatus(&sensor->sensorStatus, statusJSON); 
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80015bc:	69b9      	ldr	r1, [r7, #24]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f934 	bl	800182c <create_JSON_SensorStatus>
  
  json_object_dotset_value(JSON_Sensor, "sensorStatus.subSensorStatus", json_value_init_array());
 80015c4:	f01b fe6c 	bl	801d2a0 <json_value_init_array>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	491a      	ldr	r1, [pc, #104]	; (8001638 <create_JSON_Sensor+0x144>)
 80015ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015d0:	f01c f8e7 	bl	801d7a2 <json_object_dotset_value>
  JSON_SensorArray2= json_object_dotget_array(JSON_Sensor, "sensorStatus.subSensorStatus"); 
 80015d4:	4918      	ldr	r1, [pc, #96]	; (8001638 <create_JSON_Sensor+0x144>)
 80015d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015d8:	f01b fcd8 	bl	801cf8c <json_object_dotget_array>
 80015dc:	6178      	str	r0, [r7, #20]
  for (ii = 0; ii < nSubSensors; ii++)
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e2:	e017      	b.n	8001614 <create_JSON_Sensor+0x120>
  {
    tempJSON2 = json_value_init_object();  
 80015e4:	f01b fe30 	bl	801d248 <json_value_init_object>
 80015e8:	6138      	str	r0, [r7, #16]
    create_JSON_SubSensorStatus(&sensor->sensorStatus.subSensorStatus[ii], tempJSON2);    
 80015ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	3308      	adds	r3, #8
 80015fe:	6939      	ldr	r1, [r7, #16]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fa5d 	bl	8001ac0 <create_JSON_SubSensorStatus>
    json_array_append_value(JSON_SensorArray2,tempJSON2);
 8001606:	6939      	ldr	r1, [r7, #16]
 8001608:	6978      	ldr	r0, [r7, #20]
 800160a:	f01c f835 	bl	801d678 <json_array_append_value>
  for (ii = 0; ii < nSubSensors; ii++)
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	3301      	adds	r3, #1
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001614:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800161a:	429a      	cmp	r2, r3
 800161c:	d3e2      	bcc.n	80015e4 <create_JSON_Sensor+0xf0>
  }
}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	3730      	adds	r7, #48	; 0x30
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	08022358 	.word	0x08022358
 800162c:	0802238c 	.word	0x0802238c
 8001630:	080223a0 	.word	0x080223a0
 8001634:	08022274 	.word	0x08022274
 8001638:	080223c8 	.word	0x080223c8

0800163c <create_JSON_SensorDescriptor>:


static void create_JSON_SensorDescriptor(COM_SensorDescriptor_t *sensor_descriptor, JSON_Value *tempJSON)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  
  JSON_Object *JSON_SensorDescriptor = json_value_get_object(tempJSON);
 800164a:	6838      	ldr	r0, [r7, #0]
 800164c:	f01b fd69 	bl	801d122 <json_value_get_object>
 8001650:	61b8      	str	r0, [r7, #24]
  JSON_Array *JSON_SensorArray1;
  JSON_Value *tempJSON1;
  
  json_object_dotset_string(JSON_SensorDescriptor, "name", sensor_descriptor->name);  
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3301      	adds	r3, #1
 8001656:	461a      	mov	r2, r3
 8001658:	4965      	ldr	r1, [pc, #404]	; (80017f0 <create_JSON_SensorDescriptor+0x1b4>)
 800165a:	69b8      	ldr	r0, [r7, #24]
 800165c:	f01c f92e 	bl	801d8bc <json_object_dotset_string>
  
  switch (sensor_descriptor->dataType)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7c5b      	ldrb	r3, [r3, #17]
 8001664:	2b06      	cmp	r3, #6
 8001666:	d83b      	bhi.n	80016e0 <create_JSON_SensorDescriptor+0xa4>
 8001668:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <create_JSON_SensorDescriptor+0x34>)
 800166a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166e:	bf00      	nop
 8001670:	0800168d 	.word	0x0800168d
 8001674:	08001699 	.word	0x08001699
 8001678:	080016a5 	.word	0x080016a5
 800167c:	080016b1 	.word	0x080016b1
 8001680:	080016bd 	.word	0x080016bd
 8001684:	080016c9 	.word	0x080016c9
 8001688:	080016d5 	.word	0x080016d5
  {
  case DATA_TYPE_UINT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint8_t");
 800168c:	4a59      	ldr	r2, [pc, #356]	; (80017f4 <create_JSON_SensorDescriptor+0x1b8>)
 800168e:	495a      	ldr	r1, [pc, #360]	; (80017f8 <create_JSON_SensorDescriptor+0x1bc>)
 8001690:	69b8      	ldr	r0, [r7, #24]
 8001692:	f01c f913 	bl	801d8bc <json_object_dotset_string>
    break;
 8001696:	e029      	b.n	80016ec <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT8:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int8_t");
 8001698:	4a58      	ldr	r2, [pc, #352]	; (80017fc <create_JSON_SensorDescriptor+0x1c0>)
 800169a:	4957      	ldr	r1, [pc, #348]	; (80017f8 <create_JSON_SensorDescriptor+0x1bc>)
 800169c:	69b8      	ldr	r0, [r7, #24]
 800169e:	f01c f90d 	bl	801d8bc <json_object_dotset_string>
    break;
 80016a2:	e023      	b.n	80016ec <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint16_t");
 80016a4:	4a56      	ldr	r2, [pc, #344]	; (8001800 <create_JSON_SensorDescriptor+0x1c4>)
 80016a6:	4954      	ldr	r1, [pc, #336]	; (80017f8 <create_JSON_SensorDescriptor+0x1bc>)
 80016a8:	69b8      	ldr	r0, [r7, #24]
 80016aa:	f01c f907 	bl	801d8bc <json_object_dotset_string>
    break;
 80016ae:	e01d      	b.n	80016ec <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT16:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int16_t");
 80016b0:	4a54      	ldr	r2, [pc, #336]	; (8001804 <create_JSON_SensorDescriptor+0x1c8>)
 80016b2:	4951      	ldr	r1, [pc, #324]	; (80017f8 <create_JSON_SensorDescriptor+0x1bc>)
 80016b4:	69b8      	ldr	r0, [r7, #24]
 80016b6:	f01c f901 	bl	801d8bc <json_object_dotset_string>
    break;
 80016ba:	e017      	b.n	80016ec <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_UINT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "uint32_t");
 80016bc:	4a52      	ldr	r2, [pc, #328]	; (8001808 <create_JSON_SensorDescriptor+0x1cc>)
 80016be:	494e      	ldr	r1, [pc, #312]	; (80017f8 <create_JSON_SensorDescriptor+0x1bc>)
 80016c0:	69b8      	ldr	r0, [r7, #24]
 80016c2:	f01c f8fb 	bl	801d8bc <json_object_dotset_string>
    break;
 80016c6:	e011      	b.n	80016ec <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_INT32:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "int32_t");
 80016c8:	4a50      	ldr	r2, [pc, #320]	; (800180c <create_JSON_SensorDescriptor+0x1d0>)
 80016ca:	494b      	ldr	r1, [pc, #300]	; (80017f8 <create_JSON_SensorDescriptor+0x1bc>)
 80016cc:	69b8      	ldr	r0, [r7, #24]
 80016ce:	f01c f8f5 	bl	801d8bc <json_object_dotset_string>
    break;
 80016d2:	e00b      	b.n	80016ec <create_JSON_SensorDescriptor+0xb0>
  case DATA_TYPE_FLOAT:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "float");
 80016d4:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <create_JSON_SensorDescriptor+0x1d4>)
 80016d6:	4948      	ldr	r1, [pc, #288]	; (80017f8 <create_JSON_SensorDescriptor+0x1bc>)
 80016d8:	69b8      	ldr	r0, [r7, #24]
 80016da:	f01c f8ef 	bl	801d8bc <json_object_dotset_string>
    break;
 80016de:	e005      	b.n	80016ec <create_JSON_SensorDescriptor+0xb0>
  default:
    json_object_dotset_string(JSON_SensorDescriptor, "dataType", "NA");
 80016e0:	4a4c      	ldr	r2, [pc, #304]	; (8001814 <create_JSON_SensorDescriptor+0x1d8>)
 80016e2:	4945      	ldr	r1, [pc, #276]	; (80017f8 <create_JSON_SensorDescriptor+0x1bc>)
 80016e4:	69b8      	ldr	r0, [r7, #24]
 80016e6:	f01c f8e9 	bl	801d8bc <json_object_dotset_string>
    break;
 80016ea:	bf00      	nop
  }  
  
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.min", sensor_descriptor->samplesPerTimestamp[0]);  
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff2e 	bl	8000554 <__aeabi_ui2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	4945      	ldr	r1, [pc, #276]	; (8001818 <create_JSON_SensorDescriptor+0x1dc>)
 8001702:	69b8      	ldr	r0, [r7, #24]
 8001704:	f01c f8fe 	bl	801d904 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorDescriptor, "samplesPerTs.max", sensor_descriptor->samplesPerTimestamp[1]);  
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff20 	bl	8000554 <__aeabi_ui2d>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	ec43 2b10 	vmov	d0, r2, r3
 800171c:	493f      	ldr	r1, [pc, #252]	; (800181c <create_JSON_SensorDescriptor+0x1e0>)
 800171e:	69b8      	ldr	r0, [r7, #24]
 8001720:	f01c f8f0 	bl	801d904 <json_object_dotset_number>
  json_object_dotset_string(JSON_SensorDescriptor, "samplesPerTs.dataType", "int16_t");  
 8001724:	4a37      	ldr	r2, [pc, #220]	; (8001804 <create_JSON_SensorDescriptor+0x1c8>)
 8001726:	493e      	ldr	r1, [pc, #248]	; (8001820 <create_JSON_SensorDescriptor+0x1e4>)
 8001728:	69b8      	ldr	r0, [r7, #24]
 800172a:	f01c f8c7 	bl	801d8bc <json_object_dotset_string>
  
  json_object_dotset_value(JSON_SensorDescriptor, "odr.values", json_value_init_array());
 800172e:	f01b fdb7 	bl	801d2a0 <json_value_init_array>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	493b      	ldr	r1, [pc, #236]	; (8001824 <create_JSON_SensorDescriptor+0x1e8>)
 8001738:	69b8      	ldr	r0, [r7, #24]
 800173a:	f01c f832 	bl	801d7a2 <json_object_dotset_value>
  JSON_Array *JSON_SensorArray = json_object_dotget_array(JSON_SensorDescriptor, "odr.values");
 800173e:	4939      	ldr	r1, [pc, #228]	; (8001824 <create_JSON_SensorDescriptor+0x1e8>)
 8001740:	69b8      	ldr	r0, [r7, #24]
 8001742:	f01b fc23 	bl	801cf8c <json_object_dotget_array>
 8001746:	6178      	str	r0, [r7, #20]
  
  while (sensor_descriptor->ODR[ii] > 0)
 8001748:	e013      	b.n	8001772 <create_JSON_SensorDescriptor+0x136>
  {
    json_array_append_number(JSON_SensorArray, sensor_descriptor->ODR[ii]);
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	3304      	adds	r3, #4
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3304      	adds	r3, #4
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe ff1d 	bl	8000598 <__aeabi_f2d>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	ec43 2b10 	vmov	d0, r2, r3
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f01b ffa1 	bl	801d6ae <json_array_append_number>
    ii++;
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	3301      	adds	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
  while (sensor_descriptor->ODR[ii] > 0)
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	3304      	adds	r3, #4
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	3304      	adds	r3, #4
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	dcde      	bgt.n	800174a <create_JSON_SensorDescriptor+0x10e>
  }
  
  json_object_dotset_value(JSON_SensorDescriptor, "subSensorDescriptor", json_value_init_array());  
 800178c:	f01b fd88 	bl	801d2a0 <json_value_init_array>
 8001790:	4603      	mov	r3, r0
 8001792:	461a      	mov	r2, r3
 8001794:	4924      	ldr	r1, [pc, #144]	; (8001828 <create_JSON_SensorDescriptor+0x1ec>)
 8001796:	69b8      	ldr	r0, [r7, #24]
 8001798:	f01c f803 	bl	801d7a2 <json_object_dotset_value>
  JSON_SensorArray1 = json_object_dotget_array(JSON_SensorDescriptor, "subSensorDescriptor"); 
 800179c:	4922      	ldr	r1, [pc, #136]	; (8001828 <create_JSON_SensorDescriptor+0x1ec>)
 800179e:	69b8      	ldr	r0, [r7, #24]
 80017a0:	f01b fbf4 	bl	801cf8c <json_object_dotget_array>
 80017a4:	6138      	str	r0, [r7, #16]
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	e015      	b.n	80017d8 <create_JSON_SensorDescriptor+0x19c>
  {
    tempJSON1 = json_value_init_object();  
 80017ac:	f01b fd4c 	bl	801d248 <json_value_init_object>
 80017b0:	60f8      	str	r0, [r7, #12]
    create_JSON_SubSensorDescriptor(&sensor_descriptor->subSensorDescriptor[ii], tempJSON1);  
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	2254      	movs	r2, #84	; 0x54
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	3358      	adds	r3, #88	; 0x58
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	4413      	add	r3, r2
 80017c0:	3304      	adds	r3, #4
 80017c2:	68f9      	ldr	r1, [r7, #12]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 f8b1 	bl	800192c <create_JSON_SubSensorDescriptor>
    json_array_append_value(JSON_SensorArray1,tempJSON1);
 80017ca:	68f9      	ldr	r1, [r7, #12]
 80017cc:	6938      	ldr	r0, [r7, #16]
 80017ce:	f01b ff53 	bl	801d678 <json_array_append_value>
  for (ii = 0; ii < sensor_descriptor->nSubSensors; ii++)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3301      	adds	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80017de:	461a      	mov	r2, r3
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d3e2      	bcc.n	80017ac <create_JSON_SensorDescriptor+0x170>
  }  
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	080223e8 	.word	0x080223e8
 80017f4:	080223f0 	.word	0x080223f0
 80017f8:	080223f8 	.word	0x080223f8
 80017fc:	08022404 	.word	0x08022404
 8001800:	0802240c 	.word	0x0802240c
 8001804:	08022418 	.word	0x08022418
 8001808:	08022420 	.word	0x08022420
 800180c:	0802242c 	.word	0x0802242c
 8001810:	08022434 	.word	0x08022434
 8001814:	0802243c 	.word	0x0802243c
 8001818:	08022440 	.word	0x08022440
 800181c:	08022454 	.word	0x08022454
 8001820:	08022468 	.word	0x08022468
 8001824:	08022480 	.word	0x08022480
 8001828:	0802248c 	.word	0x0802248c

0800182c <create_JSON_SensorStatus>:


static void create_JSON_SensorStatus(COM_SensorStatus_t *sensor_status, JSON_Value *tempJSON)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SensorStatus= json_value_get_object(tempJSON);
 8001836:	6838      	ldr	r0, [r7, #0]
 8001838:	f01b fc73 	bl	801d122 <json_value_get_object>
 800183c:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SensorStatus, "odr", sensor_status->ODR);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fea8 	bl	8000598 <__aeabi_f2d>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	ec43 2b10 	vmov	d0, r2, r3
 8001850:	492e      	ldr	r1, [pc, #184]	; (800190c <create_JSON_SensorStatus+0xe0>)
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f01c f856 	bl	801d904 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "odrMeasured", sensor_status->measuredODR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe9b 	bl	8000598 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	ec43 2b10 	vmov	d0, r2, r3
 800186a:	4929      	ldr	r1, [pc, #164]	; (8001910 <create_JSON_SensorStatus+0xe4>)
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f01c f849 	bl	801d904 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "initialOffset", sensor_status->initialOffset);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe8e 	bl	8000598 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	ec43 2b10 	vmov	d0, r2, r3
 8001884:	4923      	ldr	r1, [pc, #140]	; (8001914 <create_JSON_SensorStatus+0xe8>)
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f01c f83c 	bl	801d904 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SensorStatus, "isActive", sensor_status->isActive);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	7b9b      	ldrb	r3, [r3, #14]
 8001890:	461a      	mov	r2, r3
 8001892:	4921      	ldr	r1, [pc, #132]	; (8001918 <create_JSON_SensorStatus+0xec>)
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f01c f85b 	bl	801d950 <json_object_dotset_boolean>
  json_object_dotset_number(JSON_SensorStatus, "samplesPerTs", sensor_status->samplesPerTimestamp);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	899b      	ldrh	r3, [r3, #12]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe58 	bl	8000554 <__aeabi_ui2d>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	ec43 2b10 	vmov	d0, r2, r3
 80018ac:	491b      	ldr	r1, [pc, #108]	; (800191c <create_JSON_SensorStatus+0xf0>)
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f01c f828 	bl	801d904 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "usbDataPacketSize", sensor_status->usbDataPacketSize);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	8a1b      	ldrh	r3, [r3, #16]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe4b 	bl	8000554 <__aeabi_ui2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	ec43 2b10 	vmov	d0, r2, r3
 80018c6:	4916      	ldr	r1, [pc, #88]	; (8001920 <create_JSON_SensorStatus+0xf4>)
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f01c f81b 	bl	801d904 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "sdWriteBufferSize", sensor_status->sdWriteBufferSize);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe3e 	bl	8000554 <__aeabi_ui2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	ec43 2b10 	vmov	d0, r2, r3
 80018e0:	4910      	ldr	r1, [pc, #64]	; (8001924 <create_JSON_SensorStatus+0xf8>)
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f01c f80e 	bl	801d904 <json_object_dotset_number>
  json_object_dotset_number(JSON_SensorStatus, "comChannelNumber", sensor_status->comChannelNumber);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe40 	bl	8000574 <__aeabi_i2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	ec43 2b10 	vmov	d0, r2, r3
 80018fc:	490a      	ldr	r1, [pc, #40]	; (8001928 <create_JSON_SensorStatus+0xfc>)
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f01c f800 	bl	801d904 <json_object_dotset_number>
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	080222ec 	.word	0x080222ec
 8001910:	080224a0 	.word	0x080224a0
 8001914:	080224ac 	.word	0x080224ac
 8001918:	0802233c 	.word	0x0802233c
 800191c:	0802232c 	.word	0x0802232c
 8001920:	080222f0 	.word	0x080222f0
 8001924:	08022304 	.word	0x08022304
 8001928:	08022318 	.word	0x08022318

0800192c <create_JSON_SubSensorDescriptor>:


static void create_JSON_SubSensorDescriptor(COM_SubSensorDescriptor_t *sub_sensor_descriptor, JSON_Value *tempJSON)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t ii = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  
  JSON_Value *tempJSONarray = json_value_init_object();
 800193a:	f01b fc85 	bl	801d248 <json_value_init_object>
 800193e:	6138      	str	r0, [r7, #16]
  JSON_Array *JSON_SensorArray = json_value_get_array(tempJSONarray);
 8001940:	6938      	ldr	r0, [r7, #16]
 8001942:	f01b fc00 	bl	801d146 <json_value_get_array>
 8001946:	60f8      	str	r0, [r7, #12]
  JSON_Object *JSON_SubSensorDescriptor= json_value_get_object(tempJSON);
 8001948:	6838      	ldr	r0, [r7, #0]
 800194a:	f01b fbea 	bl	801d122 <json_value_get_object>
 800194e:	60b8      	str	r0, [r7, #8]
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "id", sub_sensor_descriptor->id);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fdfd 	bl	8000554 <__aeabi_ui2d>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	ec43 2b10 	vmov	d0, r2, r3
 8001962:	494a      	ldr	r1, [pc, #296]	; (8001a8c <create_JSON_SubSensorDescriptor+0x160>)
 8001964:	68b8      	ldr	r0, [r7, #8]
 8001966:	f01b ffcd 	bl	801d904 <json_object_dotset_number>
  
  switch (sub_sensor_descriptor->sensorType)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	785b      	ldrb	r3, [r3, #1]
 800196e:	3b01      	subs	r3, #1
 8001970:	2b06      	cmp	r3, #6
 8001972:	d83b      	bhi.n	80019ec <create_JSON_SubSensorDescriptor+0xc0>
 8001974:	a201      	add	r2, pc, #4	; (adr r2, 800197c <create_JSON_SubSensorDescriptor+0x50>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	08001999 	.word	0x08001999
 8001980:	080019a5 	.word	0x080019a5
 8001984:	080019b1 	.word	0x080019b1
 8001988:	080019bd 	.word	0x080019bd
 800198c:	080019c9 	.word	0x080019c9
 8001990:	080019d5 	.word	0x080019d5
 8001994:	080019e1 	.word	0x080019e1
  {
  case COM_TYPE_ACC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "ACC");
 8001998:	4a3d      	ldr	r2, [pc, #244]	; (8001a90 <create_JSON_SubSensorDescriptor+0x164>)
 800199a:	493e      	ldr	r1, [pc, #248]	; (8001a94 <create_JSON_SubSensorDescriptor+0x168>)
 800199c:	68b8      	ldr	r0, [r7, #8]
 800199e:	f01b ff8d 	bl	801d8bc <json_object_dotset_string>
    break;
 80019a2:	e029      	b.n	80019f8 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MAG:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MAG");
 80019a4:	4a3c      	ldr	r2, [pc, #240]	; (8001a98 <create_JSON_SubSensorDescriptor+0x16c>)
 80019a6:	493b      	ldr	r1, [pc, #236]	; (8001a94 <create_JSON_SubSensorDescriptor+0x168>)
 80019a8:	68b8      	ldr	r0, [r7, #8]
 80019aa:	f01b ff87 	bl	801d8bc <json_object_dotset_string>
    break;
 80019ae:	e023      	b.n	80019f8 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_GYRO:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "GYRO");
 80019b0:	4a3a      	ldr	r2, [pc, #232]	; (8001a9c <create_JSON_SubSensorDescriptor+0x170>)
 80019b2:	4938      	ldr	r1, [pc, #224]	; (8001a94 <create_JSON_SubSensorDescriptor+0x168>)
 80019b4:	68b8      	ldr	r0, [r7, #8]
 80019b6:	f01b ff81 	bl	801d8bc <json_object_dotset_string>
    break;
 80019ba:	e01d      	b.n	80019f8 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_TEMP:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "TEMP");
 80019bc:	4a38      	ldr	r2, [pc, #224]	; (8001aa0 <create_JSON_SubSensorDescriptor+0x174>)
 80019be:	4935      	ldr	r1, [pc, #212]	; (8001a94 <create_JSON_SubSensorDescriptor+0x168>)
 80019c0:	68b8      	ldr	r0, [r7, #8]
 80019c2:	f01b ff7b 	bl	801d8bc <json_object_dotset_string>
    break;
 80019c6:	e017      	b.n	80019f8 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_PRESS:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "PRESS");
 80019c8:	4a36      	ldr	r2, [pc, #216]	; (8001aa4 <create_JSON_SubSensorDescriptor+0x178>)
 80019ca:	4932      	ldr	r1, [pc, #200]	; (8001a94 <create_JSON_SubSensorDescriptor+0x168>)
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f01b ff75 	bl	801d8bc <json_object_dotset_string>
    break;
 80019d2:	e011      	b.n	80019f8 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_HUM:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "HUM");
 80019d4:	4a34      	ldr	r2, [pc, #208]	; (8001aa8 <create_JSON_SubSensorDescriptor+0x17c>)
 80019d6:	492f      	ldr	r1, [pc, #188]	; (8001a94 <create_JSON_SubSensorDescriptor+0x168>)
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f01b ff6f 	bl	801d8bc <json_object_dotset_string>
    break;
 80019de:	e00b      	b.n	80019f8 <create_JSON_SubSensorDescriptor+0xcc>
  case COM_TYPE_MIC:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "MIC");
 80019e0:	4a32      	ldr	r2, [pc, #200]	; (8001aac <create_JSON_SubSensorDescriptor+0x180>)
 80019e2:	492c      	ldr	r1, [pc, #176]	; (8001a94 <create_JSON_SubSensorDescriptor+0x168>)
 80019e4:	68b8      	ldr	r0, [r7, #8]
 80019e6:	f01b ff69 	bl	801d8bc <json_object_dotset_string>
    break;
 80019ea:	e005      	b.n	80019f8 <create_JSON_SubSensorDescriptor+0xcc>
  default:
    json_object_dotset_string(JSON_SubSensorDescriptor, "sensorType", "NA");
 80019ec:	4a30      	ldr	r2, [pc, #192]	; (8001ab0 <create_JSON_SubSensorDescriptor+0x184>)
 80019ee:	4929      	ldr	r1, [pc, #164]	; (8001a94 <create_JSON_SubSensorDescriptor+0x168>)
 80019f0:	68b8      	ldr	r0, [r7, #8]
 80019f2:	f01b ff63 	bl	801d8bc <json_object_dotset_string>
    break;      
 80019f6:	bf00      	nop
  }
  
  json_object_dotset_number(JSON_SubSensorDescriptor, "dataPerSample", sub_sensor_descriptor->dataPerSample);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	789b      	ldrb	r3, [r3, #2]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fda9 	bl	8000554 <__aeabi_ui2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	ec43 2b10 	vmov	d0, r2, r3
 8001a0a:	492a      	ldr	r1, [pc, #168]	; (8001ab4 <create_JSON_SubSensorDescriptor+0x188>)
 8001a0c:	68b8      	ldr	r0, [r7, #8]
 8001a0e:	f01b ff79 	bl	801d904 <json_object_dotset_number>
  json_object_dotset_string(JSON_SubSensorDescriptor, "unit", sub_sensor_descriptor->unit);  
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3303      	adds	r3, #3
 8001a16:	461a      	mov	r2, r3
 8001a18:	4927      	ldr	r1, [pc, #156]	; (8001ab8 <create_JSON_SubSensorDescriptor+0x18c>)
 8001a1a:	68b8      	ldr	r0, [r7, #8]
 8001a1c:	f01b ff4e 	bl	801d8bc <json_object_dotset_string>
  json_object_dotset_value(JSON_SubSensorDescriptor, "fs.values", json_value_init_array());
 8001a20:	f01b fc3e 	bl	801d2a0 <json_value_init_array>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	4924      	ldr	r1, [pc, #144]	; (8001abc <create_JSON_SubSensorDescriptor+0x190>)
 8001a2a:	68b8      	ldr	r0, [r7, #8]
 8001a2c:	f01b feb9 	bl	801d7a2 <json_object_dotset_value>
  JSON_SensorArray = json_object_dotget_array(JSON_SubSensorDescriptor, "fs.values");
 8001a30:	4922      	ldr	r1, [pc, #136]	; (8001abc <create_JSON_SubSensorDescriptor+0x190>)
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f01b faaa 	bl	801cf8c <json_object_dotget_array>
 8001a38:	60f8      	str	r0, [r7, #12]
  
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001a3a:	e013      	b.n	8001a64 <create_JSON_SubSensorDescriptor+0x138>
  {
    json_array_append_number(JSON_SensorArray, sub_sensor_descriptor->FS[ii]);
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3304      	adds	r3, #4
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	3304      	adds	r3, #4
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fda4 	bl	8000598 <__aeabi_f2d>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	ec43 2b10 	vmov	d0, r2, r3
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f01b fe28 	bl	801d6ae <json_array_append_number>
    ii++;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
  while (sub_sensor_descriptor->FS[ii] > 0)
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3304      	adds	r3, #4
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	dcde      	bgt.n	8001a3c <create_JSON_SubSensorDescriptor+0x110>
  }  
  json_value_free(tempJSONarray);
 8001a7e:	6938      	ldr	r0, [r7, #16]
 8001a80:	f01b fbb4 	bl	801d1ec <json_value_free>
}
 8001a84:	bf00      	nop
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	08022358 	.word	0x08022358
 8001a90:	080224bc 	.word	0x080224bc
 8001a94:	080224c0 	.word	0x080224c0
 8001a98:	080224cc 	.word	0x080224cc
 8001a9c:	080224d0 	.word	0x080224d0
 8001aa0:	080224d8 	.word	0x080224d8
 8001aa4:	080224e0 	.word	0x080224e0
 8001aa8:	080224e8 	.word	0x080224e8
 8001aac:	080224ec 	.word	0x080224ec
 8001ab0:	0802243c 	.word	0x0802243c
 8001ab4:	080224f0 	.word	0x080224f0
 8001ab8:	08022500 	.word	0x08022500
 8001abc:	08022508 	.word	0x08022508

08001ac0 <create_JSON_SubSensorStatus>:


static void create_JSON_SubSensorStatus(COM_SubSensorStatus_t *sub_sensor_status, JSON_Value *tempJSON)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  JSON_Object *JSON_SubSensorStatus = json_value_get_object(tempJSON);
 8001aca:	6838      	ldr	r0, [r7, #0]
 8001acc:	f01b fb29 	bl	801d122 <json_value_get_object>
 8001ad0:	60f8      	str	r0, [r7, #12]
  
  json_object_dotset_number(JSON_SubSensorStatus, "fs", sub_sensor_status->FS);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd5e 	bl	8000598 <__aeabi_f2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	ec43 2b10 	vmov	d0, r2, r3
 8001ae4:	490d      	ldr	r1, [pc, #52]	; (8001b1c <create_JSON_SubSensorStatus+0x5c>)
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f01b ff0c 	bl	801d904 <json_object_dotset_number>
  json_object_dotset_number(JSON_SubSensorStatus, "sensitivity", sub_sensor_status->sensitivity);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd51 	bl	8000598 <__aeabi_f2d>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	ec43 2b10 	vmov	d0, r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <create_JSON_SubSensorStatus+0x60>)
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f01b feff 	bl	801d904 <json_object_dotset_number>
  json_object_dotset_boolean(JSON_SubSensorStatus, "isActive", sub_sensor_status->isActive);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7a1b      	ldrb	r3, [r3, #8]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4905      	ldr	r1, [pc, #20]	; (8001b24 <create_JSON_SubSensorStatus+0x64>)
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f01b ff1e 	bl	801d950 <json_object_dotset_boolean>
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	0802235c 	.word	0x0802235c
 8001b20:	08022360 	.word	0x08022360
 8001b24:	0802233c 	.word	0x0802233c

08001b28 <COM_AddSensor>:
* @brief Add Sensor to Db
* @param None
* @retval Sensor unique sID
*/
int32_t COM_AddSensor(void)
{  
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
  uint32_t ii = COM_device.deviceDescriptor.nSensor;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <COM_AddSensor+0x68>)
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	607b      	str	r3, [r7, #4]
  
  COM_device.sensors[ii] = calloc(1, sizeof(COM_Sensor_t));   
 8001b34:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f01c f827 	bl	801db8c <calloc>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4619      	mov	r1, r3
 8001b42:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <COM_AddSensor+0x68>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	330a      	adds	r3, #10
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	6059      	str	r1, [r3, #4]
  
  if(COM_device.sensors[ii] == NULL)
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <COM_AddSensor+0x68>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	330a      	adds	r3, #10
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <COM_AddSensor+0x3c>
    return -1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e010      	b.n	8001b86 <COM_AddSensor+0x5e>
  
  COM_device.sensors[ii]->sensorDescriptor.id = ii;
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <COM_AddSensor+0x68>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	330a      	adds	r3, #10
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	701a      	strb	r2, [r3, #0]
  COM_device.deviceDescriptor.nSensor++;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <COM_AddSensor+0x68>)
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <COM_AddSensor+0x68>)
 8001b7e:	6293      	str	r3, [r2, #40]	; 0x28
  return COM_device.deviceDescriptor.nSensor - 1;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <COM_AddSensor+0x68>)
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	3b01      	subs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000280 	.word	0x20000280

08001b94 <COM_GetDevice>:
* @brief Get Device Struct
* @param None
* @retval whole device Structure
*/
COM_Device_t * COM_GetDevice(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return (COM_Device_t *)&COM_device;
 8001b98:	4b02      	ldr	r3, [pc, #8]	; (8001ba4 <COM_GetDevice+0x10>)
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	20000280 	.word	0x20000280

08001ba8 <COM_GetDeviceDescriptor>:
* @brief Get Device Descriptor
* @param None
* @retval Device Descriptor
*/
COM_DeviceDescriptor_t * COM_GetDeviceDescriptor(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return (COM_DeviceDescriptor_t *)&(COM_device.deviceDescriptor);
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <COM_GetDeviceDescriptor+0x10>)
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	20000280 	.word	0x20000280

08001bbc <COM_GetSensor>:
* @brief Get Sensor 
* @param None
* @retval Sensor unique sID
*/
COM_Sensor_t * COM_GetSensor(uint8_t sID)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  return COM_device.sensors[sID];
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <COM_GetSensor+0x24>)
 8001bca:	330a      	adds	r3, #10
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	685b      	ldr	r3, [r3, #4]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000280 	.word	0x20000280

08001be4 <COM_GetSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SensorDescriptor_t * COM_GetSensorDescriptor(uint8_t sID)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorDescriptor);  
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <COM_GetSensorDescriptor+0x24>)
 8001bf2:	330a      	adds	r3, #10
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	685b      	ldr	r3, [r3, #4]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000280 	.word	0x20000280

08001c0c <COM_GetSensorStatus>:
* @brief Get Sensor Status
* @param None
* @retval Sensor unique sID
*/
COM_SensorStatus_t * COM_GetSensorStatus(uint8_t sID)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
    return &(COM_device.sensors[sID]->sensorStatus);  
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <COM_GetSensorStatus+0x28>)
 8001c1a:	330a      	adds	r3, #10
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000280 	.word	0x20000280

08001c38 <COM_GetSubSensorDescriptor>:
* @brief Get Sensor Descriptor
* @param None
* @retval Sensor unique sID
*/
COM_SubSensorDescriptor_t * COM_GetSubSensorDescriptor(uint8_t sID, uint8_t ssID)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460a      	mov	r2, r1
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71bb      	strb	r3, [r7, #6]
    return &(COM_device.sensors[sID]->sensorDescriptor.subSensorDescriptor[ssID]);  
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <COM_GetSubSensorDescriptor+0x38>)
 8001c4c:	330a      	adds	r3, #10
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	79bb      	ldrb	r3, [r7, #6]
 8001c56:	2154      	movs	r1, #84	; 0x54
 8001c58:	fb01 f303 	mul.w	r3, r1, r3
 8001c5c:	3358      	adds	r3, #88	; 0x58
 8001c5e:	4413      	add	r3, r2
 8001c60:	3304      	adds	r3, #4
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000280 	.word	0x20000280

08001c74 <COM_GetSubSensorNumber>:
* @brief Get Sensor Status
* @param Sensor unique sID
* @retval number of subsensors
*/
uint8_t COM_GetSubSensorNumber(uint8_t sID)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
    return COM_device.sensors[sID]->sensorDescriptor.nSubSensors;  
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <COM_GetSubSensorNumber+0x28>)
 8001c82:	330a      	adds	r3, #10
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000280 	.word	0x20000280

08001ca0 <COM_IsOdrLegal>:
  
  return ret;
}

uint8_t COM_IsOdrLegal(float value, uint8_t sID)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001caa:	4603      	mov	r3, r0
 8001cac:	70fb      	strb	r3, [r7, #3]
  uint16_t i = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	737b      	strb	r3, [r7, #13]
  float * list = COM_device.sensors[sID]->sensorDescriptor.ODR;
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	4a16      	ldr	r2, [pc, #88]	; (8001d14 <COM_IsOdrLegal+0x74>)
 8001cba:	330a      	adds	r3, #10
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	3314      	adds	r3, #20
 8001cc4:	60bb      	str	r3, [r7, #8]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001cc6:	e011      	b.n	8001cec <COM_IsOdrLegal+0x4c>
  {
    if(list[i] == value)
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	4413      	add	r3, r2
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cd8:	eeb4 7a67 	vcmp.f32	s14, s15
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	d101      	bne.n	8001ce6 <COM_IsOdrLegal+0x46>
      ret = 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	737b      	strb	r3, [r7, #13]
    i++;
 8001ce6:	89fb      	ldrh	r3, [r7, #14]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	81fb      	strh	r3, [r7, #14]
  while(list[i] != COM_END_OF_LIST_FLOAT)
 8001cec:	89fb      	ldrh	r3, [r7, #14]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001cfc:	eef4 7a47 	vcmp.f32	s15, s14
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	d1e0      	bne.n	8001cc8 <COM_IsOdrLegal+0x28>
  }
  
  return ret;
 8001d06:	7b7b      	ldrb	r3, [r7, #13]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	20000280 	.word	0x20000280

08001d18 <get_unique_id>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


static void get_unique_id(char * id)
{ 
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t deviceserial[3];
  
  deviceserial[0] = *(uint32_t*)DEVICE_ID_REG_1;
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <get_unique_id+0xd4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  deviceserial[1] = *(uint32_t*)DEVICE_ID_REG_2;
 8001d26:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <get_unique_id+0xd8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	613b      	str	r3, [r7, #16]
  deviceserial[2] = *(uint32_t*)DEVICE_ID_REG_3; 
 8001d2c:	4b31      	ldr	r3, [pc, #196]	; (8001df4 <get_unique_id+0xdc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	617b      	str	r3, [r7, #20]
  
  uint16_t y = (deviceserial[0] & 0xFFFF);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t x = ((deviceserial[0] >> 16) & 0xFFFF);  
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint8_t waf_num = (deviceserial[1] & 0xFF);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
  id[0] = (deviceserial[1]>>8) & 0xFF;
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	701a      	strb	r2, [r3, #0]
  id[1] = (deviceserial[1]>>16) & 0xFF;
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	0c1a      	lsrs	r2, r3, #16
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3301      	adds	r3, #1
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]
  id[2] = (deviceserial[1]>>24) & 0xFF;  
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	0e1a      	lsrs	r2, r3, #24
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3302      	adds	r3, #2
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	701a      	strb	r2, [r3, #0]
  id[3] = (deviceserial[2]) & 0xFF;
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3303      	adds	r3, #3
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]
  id[4] = (deviceserial[2]>>8) & 0xFF;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	0a1a      	lsrs	r2, r3, #8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3304      	adds	r3, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]
  id[5] = (deviceserial[2]>>16) & 0xFF;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	0c1a      	lsrs	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3305      	adds	r3, #5
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	701a      	strb	r2, [r3, #0]
  id[6] = (deviceserial[2]>>24) & 0xFF;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	0e1a      	lsrs	r2, r3, #24
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3306      	adds	r3, #6
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]
  
  int n;
  char * p = &id[7];
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3307      	adds	r3, #7
 8001d96:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%03u", waf_num);
 8001d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4916      	ldr	r1, [pc, #88]	; (8001df8 <get_unique_id+0xe0>)
 8001da0:	69f8      	ldr	r0, [r7, #28]
 8001da2:	f01c ff0f 	bl	801ebc4 <siprintf>
 8001da6:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	4413      	add	r3, r2
 8001dae:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", x);
 8001db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001db2:	461a      	mov	r2, r3
 8001db4:	4911      	ldr	r1, [pc, #68]	; (8001dfc <get_unique_id+0xe4>)
 8001db6:	69f8      	ldr	r0, [r7, #28]
 8001db8:	f01c ff04 	bl	801ebc4 <siprintf>
 8001dbc:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	61fb      	str	r3, [r7, #28]
  
  n = sprintf(p, "%05u", y);
 8001dc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001dc8:	461a      	mov	r2, r3
 8001dca:	490c      	ldr	r1, [pc, #48]	; (8001dfc <get_unique_id+0xe4>)
 8001dcc:	69f8      	ldr	r0, [r7, #28]
 8001dce:	f01c fef9 	bl	801ebc4 <siprintf>
 8001dd2:	61b8      	str	r0, [r7, #24]
  p+=n;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	4413      	add	r3, r2
 8001dda:	61fb      	str	r3, [r7, #28]
  
  *p = '\0';
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
  /*OUT: | LOT NUMBER [7] | WAF NUMBER [3] | X ON WAF [5] | Y ON WAF [5] | */  
}
 8001de2:	bf00      	nop
 8001de4:	3728      	adds	r7, #40	; 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	1fff7590 	.word	0x1fff7590
 8001df0:	1fff7594 	.word	0x1fff7594
 8001df4:	1fff7598 	.word	0x1fff7598
 8001df8:	08022514 	.word	0x08022514
 8001dfc:	0802251c 	.word	0x0802251c

08001e00 <set_default_description>:
* @brief Set default device description
* @param None
* @retval None
*/
void set_default_description(void)
{  
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;
  COM_DeviceDescriptor_t * tempDeviceDescriptor;
  tempDeviceDescriptor = COM_GetDeviceDescriptor();
 8001e06:	f7ff fecf 	bl	8001ba8 <COM_GetDeviceDescriptor>
 8001e0a:	6078      	str	r0, [r7, #4]
  
  get_unique_id(tempDeviceDescriptor->serialNumber);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff82 	bl	8001d18 <get_unique_id>
  strcpy(tempDeviceDescriptor->alias, "STWIN_001"); 
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3315      	adds	r3, #21
 8001e18:	495e      	ldr	r1, [pc, #376]	; (8001f94 <set_default_description+0x194>)
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	cb03      	ldmia	r3!, {r0, r1}
 8001e20:	6010      	str	r0, [r2, #0]
 8001e22:	6051      	str	r1, [r2, #4]
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	8113      	strh	r3, [r2, #8]
    
  /***** IIS3DWB *****/
  iis3dwb_com_id = COM_AddSensor();
 8001e28:	f7ff fe7e 	bl	8001b28 <COM_AddSensor>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <set_default_description+0x198>)
 8001e32:	701a      	strb	r2, [r3, #0]
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);
 8001e34:	4b58      	ldr	r3, [pc, #352]	; (8001f98 <set_default_description+0x198>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff febf 	bl	8001bbc <COM_GetSensor>
 8001e3e:	6038      	str	r0, [r7, #0]
  
  /* SENSOR DESCRIPTOR */
  strcpy(tempSensor->sensorDescriptor.name, "IIS3DWB"); 
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	4955      	ldr	r1, [pc, #340]	; (8001f9c <set_default_description+0x19c>)
 8001e46:	461a      	mov	r2, r3
 8001e48:	460b      	mov	r3, r1
 8001e4a:	cb03      	ldmia	r3!, {r0, r1}
 8001e4c:	6010      	str	r0, [r2, #0]
 8001e4e:	6051      	str	r1, [r2, #4]
  tempSensor->sensorDescriptor.dataType = DATA_TYPE_INT16;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2203      	movs	r2, #3
 8001e54:	745a      	strb	r2, [r3, #17]
  tempSensor->sensorDescriptor.ODR[0] = 26667.0f;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	4a51      	ldr	r2, [pc, #324]	; (8001fa0 <set_default_description+0x1a0>)
 8001e5a:	615a      	str	r2, [r3, #20]
  tempSensor->sensorDescriptor.ODR[1] = COM_END_OF_LIST_FLOAT;  /* Terminate list */
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4a51      	ldr	r2, [pc, #324]	; (8001fa4 <set_default_description+0x1a4>)
 8001e60:	619a      	str	r2, [r3, #24]
  tempSensor->sensorDescriptor.samplesPerTimestamp[0] = 0;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  tempSensor->sensorDescriptor.samplesPerTimestamp[1] = 1000;  
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  tempSensor->sensorDescriptor.nSubSensors = 1;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  
  /* SENSOR STATUS */
  tempSensor->sensorStatus.ODR = 26667.0f;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4a48      	ldr	r2, [pc, #288]	; (8001fa0 <set_default_description+0x1a0>)
 8001e80:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  tempSensor->sensorStatus.measuredODR = 0.0f;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  tempSensor->sensorStatus.initialOffset = 0.0f;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  tempSensor->sensorStatus.samplesPerTimestamp = 1000;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e9e:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
  tempSensor->sensorStatus.isActive = 1;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
  tempSensor->sensorStatus.usbDataPacketSize = 3000;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001eb0:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
  tempSensor->sensorStatus.sdWriteBufferSize = WRITE_BUFFER_SIZE_IIS3DWB;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001eba:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  tempSensor->sensorStatus.comChannelNumber = -1;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec4:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
  
  /* SUBSENSOR 0 DESCRIPTOR */
  tempSensor->sensorDescriptor.subSensorDescriptor[0].id = 0;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].sensorType = COM_TYPE_ACC; 
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  tempSensor->sensorDescriptor.subSensorDescriptor[0].dataPerSample = 3;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2203      	movs	r2, #3
 8001edc:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  strcpy(tempSensor->sensorDescriptor.subSensorDescriptor[0].unit, "mg"); 
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	335f      	adds	r3, #95	; 0x5f
 8001ee4:	4a30      	ldr	r2, [pc, #192]	; (8001fa8 <set_default_description+0x1a8>)
 8001ee6:	8811      	ldrh	r1, [r2, #0]
 8001ee8:	7892      	ldrb	r2, [r2, #2]
 8001eea:	8019      	strh	r1, [r3, #0]
 8001eec:	709a      	strb	r2, [r3, #2]
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[0] = 2.0f; 
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef4:	671a      	str	r2, [r3, #112]	; 0x70
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[1] = 4.0f;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001efc:	675a      	str	r2, [r3, #116]	; 0x74
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[2] = 8.0f;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001f04:	679a      	str	r2, [r3, #120]	; 0x78
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[3] = 16.0f;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001f0c:	67da      	str	r2, [r3, #124]	; 0x7c
  tempSensor->sensorDescriptor.subSensorDescriptor[0].FS[4] = COM_END_OF_LIST_FLOAT;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <set_default_description+0x1a4>)
 8001f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* SUBSENSOR 0 STATUS */
  tempSensor->sensorStatus.subSensorStatus[0].FS = 16.0f;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001f1c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  tempSensor->sensorStatus.subSensorStatus[0].isActive = 1;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  tempSensor->sensorStatus.subSensorStatus[0].sensitivity = 0.061f *  tempSensor->sensorStatus.subSensorStatus[0].FS/2;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8001f2e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001fac <set_default_description+0x1ac>
 8001f32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f36:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc

  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8001f4a:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <set_default_description+0x1b0>)
 8001f4c:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001f54:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <set_default_description+0x1b0>)
 8001f56:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <set_default_description+0x1b0>)
 8001f60:	751a      	strb	r2, [r3, #20]
  
  maxWriteTimeSensor[iis3dwb_com_id] = 1000 * WRITE_BUFFER_SIZE_IIS3DWB / (uint32_t)(IIS3DWB_Init_Param.ODR * 6); 
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <set_default_description+0x1b0>)
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f74:	ee17 2a90 	vmov	r2, s15
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <set_default_description+0x198>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <set_default_description+0x1b4>)
 8001f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f84:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <set_default_description+0x1b8>)
 8001f86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  

  maxWriteTimeSensor[stts751_com_id] = 1000 * WRITE_BUFFER_SIZE_STTS751 / (uint32_t)(STTS751_Init_Param.ODR * 4); 
#endif
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	08022524 	.word	0x08022524
 8001f98:	20000a28 	.word	0x20000a28
 8001f9c:	08022530 	.word	0x08022530
 8001fa0:	46d05600 	.word	0x46d05600
 8001fa4:	bf800000 	.word	0xbf800000
 8001fa8:	08022538 	.word	0x08022538
 8001fac:	3d79db23 	.word	0x3d79db23
 8001fb0:	20000344 	.word	0x20000344
 8001fb4:	01e84800 	.word	0x01e84800
 8001fb8:	20000ad0 	.word	0x20000ad0

08001fbc <update_sensorStatus>:

void update_sensorStatus(COM_SensorStatus_t * oldSensorStatus, COM_SensorStatus_t * newSensorStatus, uint8_t sID)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	71fb      	strb	r3, [r7, #7]
  /* Check differencies between oldSensorStatus and newSensorStatus, act properly*/
  /* ODR */
  if(oldSensorStatus->ODR != newSensorStatus->ODR)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	ed93 7a00 	vldr	s14, [r3]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	d00f      	beq.n	8002000 <update_sensorStatus+0x44>
  {
    if(COM_IsOdrLegal(newSensorStatus->ODR, sID))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	eeb0 0a67 	vmov.f32	s0, s15
 8001fee:	f7ff fe57 	bl	8001ca0 <COM_IsOdrLegal>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <update_sensorStatus+0x44>
    {
      oldSensorStatus->ODR = newSensorStatus->ODR; /* Todo Setters and getters */
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* isActive */
  if(oldSensorStatus->isActive != newSensorStatus->isActive)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	7b9a      	ldrb	r2, [r3, #14]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	7b9b      	ldrb	r3, [r3, #14]
 8002008:	429a      	cmp	r2, r3
 800200a:	d003      	beq.n	8002014 <update_sensorStatus+0x58>
  {
    oldSensorStatus->isActive = newSensorStatus->isActive;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	7b9a      	ldrb	r2, [r3, #14]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	739a      	strb	r2, [r3, #14]
  }
  
  /* subsensor: FS, is Active*/
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e054      	b.n	80020c4 <update_sensorStatus+0x108>
  {
    if(oldSensorStatus->subSensorStatus[i].FS != newSensorStatus->subSensorStatus[i].FS)
 800201a:	68f9      	ldr	r1, [r7, #12]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	331c      	adds	r3, #28
 800202a:	ed93 7a00 	vldr	s14, [r3]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	331c      	adds	r3, #28
 800203e:	edd3 7a00 	vldr	s15, [r3]
 8002042:	eeb4 7a67 	vcmp.f32	s14, s15
 8002046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204a:	d011      	beq.n	8002070 <update_sensorStatus+0xb4>
    {
      oldSensorStatus->subSensorStatus[i].FS = newSensorStatus->subSensorStatus[i].FS; /* Todo Setters and getters */
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	331c      	adds	r3, #28
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4403      	add	r3, r0
 800206c:	331c      	adds	r3, #28
 800206e:	6019      	str	r1, [r3, #0]
    }
    
    if(oldSensorStatus->subSensorStatus[i].isActive != newSensorStatus->subSensorStatus[i].isActive)
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	3324      	adds	r3, #36	; 0x24
 8002080:	7819      	ldrb	r1, [r3, #0]
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4403      	add	r3, r0
 8002090:	3324      	adds	r3, #36	; 0x24
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4299      	cmp	r1, r3
 8002096:	d012      	beq.n	80020be <update_sensorStatus+0x102>
    {
      oldSensorStatus->subSensorStatus[i].isActive = newSensorStatus->subSensorStatus[i].isActive; /* Todo Setters and getters */
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	3324      	adds	r3, #36	; 0x24
 80020a8:	7818      	ldrb	r0, [r3, #0]
 80020aa:	68f9      	ldr	r1, [r7, #12]
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	3324      	adds	r3, #36	; 0x24
 80020ba:	4602      	mov	r2, r0
 80020bc:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < COM_GetSubSensorNumber(sID); i++)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3301      	adds	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fdd4 	bl	8001c74 <COM_GetSubSensorNumber>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	4293      	cmp	r3, r2
 80020d4:	dba1      	blt.n	800201a <update_sensorStatus+0x5e>
    }
  }
  
  if (sID == iis3dwb_com_id)
 80020d6:	4b39      	ldr	r3, [pc, #228]	; (80021bc <update_sensorStatus+0x200>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	79fa      	ldrb	r2, [r7, #7]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d10e      	bne.n	80020fe <update_sensorStatus+0x142>
  {
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80020e6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80021c0 <update_sensorStatus+0x204>
 80020ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	edc3 7a08 	vstr	s15, [r3, #32]
 80020fc:	e043      	b.n	8002186 <update_sensorStatus+0x1ca>
  }
  else if (sID == iis2dh_com_id)
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <update_sensorStatus+0x208>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	79fa      	ldrb	r2, [r7, #7]
 8002104:	429a      	cmp	r2, r3
 8002106:	d11d      	bne.n	8002144 <update_sensorStatus+0x188>
  {    
    if (oldSensorStatus->subSensorStatus[0].FS == 16.0f)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	edd3 7a07 	vldr	s15, [r3, #28]
 800210e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002112:	eef4 7a47 	vcmp.f32	s15, s14
 8002116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211a:	d104      	bne.n	8002126 <update_sensorStatus+0x16a>
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.75f;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002122:	621a      	str	r2, [r3, #32]
 8002124:	e02f      	b.n	8002186 <update_sensorStatus+0x1ca>
    }
    else
    {
      oldSensorStatus->subSensorStatus[0].sensitivity = 0.0625f *  oldSensorStatus->subSensorStatus[0].FS/2;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	edd3 7a07 	vldr	s15, [r3, #28]
 800212c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80021c8 <update_sensorStatus+0x20c>
 8002130:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002134:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	edc3 7a08 	vstr	s15, [r3, #32]
 8002142:	e020      	b.n	8002186 <update_sensorStatus+0x1ca>
    }
  }
  else if (sID == ism330dhcx_com_id)
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <update_sensorStatus+0x210>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	79fa      	ldrb	r2, [r7, #7]
 800214a:	429a      	cmp	r2, r3
 800214c:	d11b      	bne.n	8002186 <update_sensorStatus+0x1ca>
  {        
    oldSensorStatus->subSensorStatus[0].sensitivity = 0.061f *  oldSensorStatus->subSensorStatus[0].FS/2;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	edd3 7a07 	vldr	s15, [r3, #28]
 8002154:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021c0 <update_sensorStatus+0x204>
 8002158:	ee27 7a87 	vmul.f32	s14, s15, s14
 800215c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002160:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	edc3 7a08 	vstr	s15, [r3, #32]
    oldSensorStatus->subSensorStatus[1].sensitivity = 4.375f * oldSensorStatus->subSensorStatus[1].FS/125.0f;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002170:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80021d0 <update_sensorStatus+0x214>
 8002174:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002178:	eddf 6a16 	vldr	s13, [pc, #88]	; 80021d4 <update_sensorStatus+0x218>
 800217c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  }
  
  /* CHANNEL NUMBER */
  if(oldSensorStatus->comChannelNumber != newSensorStatus->comChannelNumber)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002192:	429a      	cmp	r2, r3
 8002194:	d004      	beq.n	80021a0 <update_sensorStatus+0x1e4>
  {
    oldSensorStatus->comChannelNumber = newSensorStatus->comChannelNumber; /* Todo Setters and getters */         
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	831a      	strh	r2, [r3, #24]
  }  
  
   /* CHANNEL NUMBER */
  if(oldSensorStatus->samplesPerTimestamp != newSensorStatus->samplesPerTimestamp)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	899a      	ldrh	r2, [r3, #12]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	899b      	ldrh	r3, [r3, #12]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d003      	beq.n	80021b4 <update_sensorStatus+0x1f8>
  {
    oldSensorStatus->samplesPerTimestamp = newSensorStatus->samplesPerTimestamp; /* Todo Setters and getters */         
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	899a      	ldrh	r2, [r3, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	819a      	strh	r2, [r3, #12]
  }  
}
 80021b4:	bf00      	nop
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000a28 	.word	0x20000a28
 80021c0:	3d79db23 	.word	0x3d79db23
 80021c4:	20000a2a 	.word	0x20000a2a
 80021c8:	3d800000 	.word	0x3d800000
 80021cc:	20000a2e 	.word	0x20000a2e
 80021d0:	408c0000 	.word	0x408c0000
 80021d4:	42fa0000 	.word	0x42fa0000

080021d8 <update_sensors_config>:

void update_sensors_config(void)
{  
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
  COM_Sensor_t * tempSensor;  
  
  tempSensor = COM_GetSensor(iis3dwb_com_id);  
 80021de:	4b6f      	ldr	r3, [pc, #444]	; (800239c <update_sensors_config+0x1c4>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fcea 	bl	8001bbc <COM_GetSensor>
 80021e8:	6078      	str	r0, [r7, #4]
  IIS3DWB_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80021f0:	4a6b      	ldr	r2, [pc, #428]	; (80023a0 <update_sensors_config+0x1c8>)
 80021f2:	6013      	str	r3, [r2, #0]
  IIS3DWB_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80021fa:	4a69      	ldr	r2, [pc, #420]	; (80023a0 <update_sensors_config+0x1c8>)
 80021fc:	6053      	str	r3, [r2, #4]
  IIS3DWB_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002204:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <update_sensors_config+0x1c8>)
 8002206:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(hts221_com_id);
 8002208:	4b66      	ldr	r3, [pc, #408]	; (80023a4 <update_sensors_config+0x1cc>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fcd5 	bl	8001bbc <COM_GetSensor>
 8002212:	6078      	str	r0, [r7, #4]
  HTS221_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800221a:	4a63      	ldr	r2, [pc, #396]	; (80023a8 <update_sensors_config+0x1d0>)
 800221c:	6013      	str	r3, [r2, #0]
  HTS221_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002224:	4a60      	ldr	r2, [pc, #384]	; (80023a8 <update_sensors_config+0x1d0>)
 8002226:	6053      	str	r3, [r2, #4]
  HTS221_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800222e:	4a5e      	ldr	r2, [pc, #376]	; (80023a8 <update_sensors_config+0x1d0>)
 8002230:	6093      	str	r3, [r2, #8]
  HTS221_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002238:	4b5b      	ldr	r3, [pc, #364]	; (80023a8 <update_sensors_config+0x1d0>)
 800223a:	751a      	strb	r2, [r3, #20]
  HTS221_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 8002242:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <update_sensors_config+0x1d0>)
 8002244:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(iis2dh_com_id);
 8002246:	4b59      	ldr	r3, [pc, #356]	; (80023ac <update_sensors_config+0x1d4>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fcb6 	bl	8001bbc <COM_GetSensor>
 8002250:	6078      	str	r0, [r7, #4]
  IIS2DH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002258:	4a55      	ldr	r2, [pc, #340]	; (80023b0 <update_sensors_config+0x1d8>)
 800225a:	6013      	str	r3, [r2, #0]
  IIS2DH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002262:	4a53      	ldr	r2, [pc, #332]	; (80023b0 <update_sensors_config+0x1d8>)
 8002264:	6053      	str	r3, [r2, #4]
  IIS2DH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 800226c:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <update_sensors_config+0x1d8>)
 800226e:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(iis2mdc_com_id);
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <update_sensors_config+0x1dc>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fca1 	bl	8001bbc <COM_GetSensor>
 800227a:	6078      	str	r0, [r7, #4]
  IIS2MDC_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002282:	4a4d      	ldr	r2, [pc, #308]	; (80023b8 <update_sensors_config+0x1e0>)
 8002284:	6013      	str	r3, [r2, #0]
  IIS2MDC_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800228c:	4a4a      	ldr	r2, [pc, #296]	; (80023b8 <update_sensors_config+0x1e0>)
 800228e:	6053      	str	r3, [r2, #4]
  IIS2MDC_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002296:	4b48      	ldr	r3, [pc, #288]	; (80023b8 <update_sensors_config+0x1e0>)
 8002298:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(imp34dt05_com_id);
 800229a:	4b48      	ldr	r3, [pc, #288]	; (80023bc <update_sensors_config+0x1e4>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fc8c 	bl	8001bbc <COM_GetSensor>
 80022a4:	6078      	str	r0, [r7, #4]
  IMP34DT05_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80022ac:	4a44      	ldr	r2, [pc, #272]	; (80023c0 <update_sensors_config+0x1e8>)
 80022ae:	6013      	str	r3, [r2, #0]
  IMP34DT05_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80022b6:	4a42      	ldr	r2, [pc, #264]	; (80023c0 <update_sensors_config+0x1e8>)
 80022b8:	6053      	str	r3, [r2, #4]
  IMP34DT05_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80022c0:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <update_sensors_config+0x1e8>)
 80022c2:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(ism330dhcx_com_id);
 80022c4:	4b3f      	ldr	r3, [pc, #252]	; (80023c4 <update_sensors_config+0x1ec>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fc77 	bl	8001bbc <COM_GetSensor>
 80022ce:	6078      	str	r0, [r7, #4]
  ISM330DHCX_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80022d6:	4a3c      	ldr	r2, [pc, #240]	; (80023c8 <update_sensors_config+0x1f0>)
 80022d8:	6013      	str	r3, [r2, #0]
  ISM330DHCX_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80022e0:	4a39      	ldr	r2, [pc, #228]	; (80023c8 <update_sensors_config+0x1f0>)
 80022e2:	6053      	str	r3, [r2, #4]
  ISM330DHCX_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80022ea:	4a37      	ldr	r2, [pc, #220]	; (80023c8 <update_sensors_config+0x1f0>)
 80022ec:	6093      	str	r3, [r2, #8]
  ISM330DHCX_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 80022f4:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <update_sensors_config+0x1f0>)
 80022f6:	751a      	strb	r2, [r3, #20]
  ISM330DHCX_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 80022fe:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <update_sensors_config+0x1f0>)
 8002300:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(lps22hh_com_id);
 8002302:	4b32      	ldr	r3, [pc, #200]	; (80023cc <update_sensors_config+0x1f4>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fc58 	bl	8001bbc <COM_GetSensor>
 800230c:	6078      	str	r0, [r7, #4]
  LPS22HH_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002314:	4a2e      	ldr	r2, [pc, #184]	; (80023d0 <update_sensors_config+0x1f8>)
 8002316:	6013      	str	r3, [r2, #0]
  LPS22HH_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800231e:	4a2c      	ldr	r2, [pc, #176]	; (80023d0 <update_sensors_config+0x1f8>)
 8002320:	6053      	str	r3, [r2, #4]
  LPS22HH_Init_Param.FS[1] = tempSensor->sensorStatus.subSensorStatus[1].FS;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002328:	4a29      	ldr	r2, [pc, #164]	; (80023d0 <update_sensors_config+0x1f8>)
 800232a:	6093      	str	r3, [r2, #8]
  LPS22HH_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002332:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <update_sensors_config+0x1f8>)
 8002334:	751a      	strb	r2, [r3, #20]
  LPS22HH_Init_Param.subSensorActive[1] = tempSensor->sensorStatus.subSensorStatus[1].isActive; 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 21dc 	ldrb.w	r2, [r3, #476]	; 0x1dc
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <update_sensors_config+0x1f8>)
 800233e:	755a      	strb	r2, [r3, #21]
  
  tempSensor = COM_GetSensor(mp23abs1_com_id);
 8002340:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <update_sensors_config+0x1fc>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fc39 	bl	8001bbc <COM_GetSensor>
 800234a:	6078      	str	r0, [r7, #4]
  MP23ABS1_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002352:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <update_sensors_config+0x200>)
 8002354:	6013      	str	r3, [r2, #0]
  MP23ABS1_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800235c:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <update_sensors_config+0x200>)
 800235e:	6053      	str	r3, [r2, #4]
  MP23ABS1_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <update_sensors_config+0x200>)
 8002368:	751a      	strb	r2, [r3, #20]
  
  tempSensor = COM_GetSensor(stts751_com_id);
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <update_sensors_config+0x204>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fc24 	bl	8001bbc <COM_GetSensor>
 8002374:	6078      	str	r0, [r7, #4]
  STTS751_Init_Param.ODR = tempSensor->sensorStatus.ODR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800237c:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <update_sensors_config+0x208>)
 800237e:	6013      	str	r3, [r2, #0]
  STTS751_Init_Param.FS[0] = tempSensor->sensorStatus.subSensorStatus[0].FS;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002386:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <update_sensors_config+0x208>)
 8002388:	6053      	str	r3, [r2, #4]
  STTS751_Init_Param.subSensorActive[0] = tempSensor->sensorStatus.subSensorStatus[0].isActive;  
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <update_sensors_config+0x208>)
 8002392:	751a      	strb	r2, [r3, #20]
  
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000a28 	.word	0x20000a28
 80023a0:	20000344 	.word	0x20000344
 80023a4:	20000a29 	.word	0x20000a29
 80023a8:	200002d8 	.word	0x200002d8
 80023ac:	20000a2a 	.word	0x20000a2a
 80023b0:	20000304 	.word	0x20000304
 80023b4:	20000a2b 	.word	0x20000a2b
 80023b8:	20000320 	.word	0x20000320
 80023bc:	20000a2c 	.word	0x20000a2c
 80023c0:	20000708 	.word	0x20000708
 80023c4:	20000a2e 	.word	0x20000a2e
 80023c8:	20000724 	.word	0x20000724
 80023cc:	20000a2f 	.word	0x20000a2f
 80023d0:	20000748 	.word	0x20000748
 80023d4:	20000a2d 	.word	0x20000a2d
 80023d8:	20000b98 	.word	0x20000b98
 80023dc:	20000a30 	.word	0x20000a30
 80023e0:	20002f00 	.word	0x20002f00

080023e4 <HTS221_Set_State>:
  
  osSemaphoreRelease(hts221_data_ready_sem_id);    
}

void HTS221_Set_State(SM_Sensor_State_t newState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  HTS221_Sensor_State = newState;
 80023ee:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HTS221_Set_State+0x1c>)
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	7013      	strb	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	20000001 	.word	0x20000001

08002404 <HTS221_Start>:
  HTS221_Init_Param.FS[0] = newFS1;
  HTS221_Init_Param.FS[0] = newFS2;
}

void HTS221_Start(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002408:	2003      	movs	r0, #3
 800240a:	f7ff ffeb 	bl	80023e4 <HTS221_Set_State>
  osThreadResume(HTS221_Thread_Id);
 800240e:	4b03      	ldr	r3, [pc, #12]	; (800241c <HTS221_Start+0x18>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f015 fa4a 	bl	80178ac <osThreadResume>
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200002f0 	.word	0x200002f0

08002420 <HTS221_Stop>:

void HTS221_Stop(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  HTS221_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002424:	2001      	movs	r0, #1
 8002426:	f7ff ffdd 	bl	80023e4 <HTS221_Set_State>
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <IIS2DH_Set_State>:
{
  osSemaphoreRelease( iis2dh_DreadySem_id);    
}

void IIS2DH_Set_State(SM_Sensor_State_t newState)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  IIS2DH_Sensor_State = newState;
 800243a:	4a04      	ldr	r2, [pc, #16]	; (800244c <IIS2DH_Set_State+0x1c>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	7013      	strb	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	20000002 	.word	0x20000002

08002450 <IIS2DH_Start>:
  IIS2DH_Init_Param.FS[0] = newFS1;
  IIS2DH_Init_Param.FS[0] = newFS2;
}

void IIS2DH_Start(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002454:	2003      	movs	r0, #3
 8002456:	f7ff ffeb 	bl	8002430 <IIS2DH_Set_State>
  osThreadResume(IIS2DH_Thread_Id);
 800245a:	4b03      	ldr	r3, [pc, #12]	; (8002468 <IIS2DH_Start+0x18>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f015 fa24 	bl	80178ac <osThreadResume>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	2000031c 	.word	0x2000031c

0800246c <IIS2DH_Stop>:

void IIS2DH_Stop(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  IIS2DH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002470:	2001      	movs	r0, #1
 8002472:	f7ff ffdd 	bl	8002430 <IIS2DH_Set_State>
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <IIS2MDC_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(iis2mdc_data_ready_sem_id);    
}

void IIS2MDC_Set_State(SM_Sensor_State_t newState)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  IIS2MDC_Sensor_State = newState;
 8002486:	4a04      	ldr	r2, [pc, #16]	; (8002498 <IIS2MDC_Set_State+0x1c>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	7013      	strb	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	20000003 	.word	0x20000003

0800249c <IIS2MDC_Start>:
  IIS2MDC_Init_Param.FS[0] = newFS1;
  IIS2MDC_Init_Param.FS[0] = newFS2;
}

void IIS2MDC_Start(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_INITIALIZING);
 80024a0:	2003      	movs	r0, #3
 80024a2:	f7ff ffeb 	bl	800247c <IIS2MDC_Set_State>
  osThreadResume(IIS2MDC_Thread_Id);
 80024a6:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <IIS2MDC_Start+0x18>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f015 f9fe 	bl	80178ac <osThreadResume>
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000340 	.word	0x20000340

080024b8 <IIS2MDC_Stop>:

void IIS2MDC_Stop(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  IIS2MDC_Set_State(SM_SENSOR_STATE_SUSPENDING);
 80024bc:	2001      	movs	r0, #1
 80024be:	f7ff ffdd 	bl	800247c <IIS2MDC_Set_State>
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <IIS3DWB_Peripheral_Init>:
* @brief IIS3DWB GPIO Initialization Function
* @param None
* @retval None
*/
void IIS3DWB_Peripheral_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
//  __HAL_RCC_GPIOE_CLK_ENABLE();
//  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();		//SPI2_CS
 80024de:	4b3e      	ldr	r3, [pc, #248]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	4a3d      	ldr	r2, [pc, #244]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();		//SPI2_MOSI,SPI2_INT
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a37      	ldr	r2, [pc, #220]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();		//SPI2_CLK,SPI2_MISO
 800250e:	4b32      	ldr	r3, [pc, #200]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	4a31      	ldr	r2, [pc, #196]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 8002514:	f043 0308 	orr.w	r3, r3, #8
 8002518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251a:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();		//SEL_3_4
 8002526:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	4a2b      	ldr	r2, [pc, #172]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 800252c:	f043 0320 	orr.w	r3, r3, #32
 8002530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();		//SEL_1_2
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 8002544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800254a:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <IIS3DWB_Peripheral_Init+0x110>)
 800254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);
 8002556:	2201      	movs	r2, #1
 8002558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800255c:	481f      	ldr	r0, [pc, #124]	; (80025dc <IIS3DWB_Peripheral_Init+0x114>)
 800255e:	f006 faad 	bl	8008abc <HAL_GPIO_WritePin>

  //Configure GPIO pin Output Level of 1_2_SEL and 3_4_SEL
  HAL_GPIO_WritePin(IIS3DWB_1_2_SEL_GPIO_Port, IIS3DWB_1_2_SEL_Pin, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
 8002564:	2101      	movs	r1, #1
 8002566:	481e      	ldr	r0, [pc, #120]	; (80025e0 <IIS3DWB_Peripheral_Init+0x118>)
 8002568:	f006 faa8 	bl	8008abc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IIS3DWB_3_4_SEL_GPIO_Port, IIS3DWB_3_4_SEL_Pin, GPIO_PIN_SET);
 800256c:	2201      	movs	r2, #1
 800256e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002572:	481c      	ldr	r0, [pc, #112]	; (80025e4 <IIS3DWB_Peripheral_Init+0x11c>)
 8002574:	f006 faa2 	bl	8008abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IIS3DWB_SPI_CS_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 8002578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800257c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257e:	2301      	movs	r3, #1
 8002580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002586:	2302      	movs	r3, #2
 8002588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	4812      	ldr	r0, [pc, #72]	; (80025dc <IIS3DWB_Peripheral_Init+0x114>)
 8002592:	f006 f8e9 	bl	8008768 <HAL_GPIO_Init>

  /*Configure GPIO pins : STTS751_INT_Pin IIS3DWB_INT1_Pin */
  GPIO_InitStruct.Pin =  IIS3DWB_INT1_Pin ;
 8002596:	2320      	movs	r3, #32
 8002598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <IIS3DWB_Peripheral_Init+0x120>)
 800259c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IIS3DWB_INT1_GPIO_Port, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	4810      	ldr	r0, [pc, #64]	; (80025ec <IIS3DWB_Peripheral_Init+0x124>)
 80025aa:	f006 f8dd 	bl	8008768 <HAL_GPIO_Init>
//
//  SM_SPIx_CLK_ENABLE();
  //---------------------------------------------------------

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2105      	movs	r1, #5
 80025b2:	2017      	movs	r0, #23
 80025b4:	f005 fe21 	bl	80081fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80025b8:	2017      	movs	r0, #23
 80025ba:	f005 fe3a 	bl	8008232 <HAL_NVIC_EnableIRQ>
  HAL_EXTI_GetHandle(&iis3dwb_exti, EXTI_LINE_5);											//Enabled from disabled
 80025be:	490c      	ldr	r1, [pc, #48]	; (80025f0 <IIS3DWB_Peripheral_Init+0x128>)
 80025c0:	480c      	ldr	r0, [pc, #48]	; (80025f4 <IIS3DWB_Peripheral_Init+0x12c>)
 80025c2:	f006 f88d 	bl	80086e0 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&iis3dwb_exti,  HAL_EXTI_COMMON_CB_ID, IIS3DWB_Int_Callback);	//Enabled from disabled
 80025c6:	4a0c      	ldr	r2, [pc, #48]	; (80025f8 <IIS3DWB_Peripheral_Init+0x130>)
 80025c8:	2100      	movs	r1, #0
 80025ca:	480a      	ldr	r0, [pc, #40]	; (80025f4 <IIS3DWB_Peripheral_Init+0x12c>)
 80025cc:	f006 f86e 	bl	80086ac <HAL_EXTI_RegisterCallback>
}
 80025d0:	bf00      	nop
 80025d2:	3728      	adds	r7, #40	; 0x28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40021000 	.word	0x40021000
 80025dc:	48000400 	.word	0x48000400
 80025e0:	48001800 	.word	0x48001800
 80025e4:	48001400 	.word	0x48001400
 80025e8:	10110000 	.word	0x10110000
 80025ec:	48000800 	.word	0x48000800
 80025f0:	16000005 	.word	0x16000005
 80025f4:	20000364 	.word	0x20000364
 80025f8:	080029a5 	.word	0x080029a5

080025fc <IIS3DWB_OS_Init>:
* @brief IIS3DWB Threads Creation
* @param None
* @retval None
*/
void IIS3DWB_OS_Init(void)
{  
 80025fc:	b5b0      	push	{r4, r5, r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
  /* Data read complete semaphore initialization */  
  iis3dwb_data_read_cmplt_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_read_cmplt_sem), 1);
 8002602:	2101      	movs	r1, #1
 8002604:	481f      	ldr	r0, [pc, #124]	; (8002684 <IIS3DWB_OS_Init+0x88>)
 8002606:	f014 fecb 	bl	80173a0 <osSemaphoreCreate>
 800260a:	4603      	mov	r3, r0
 800260c:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <IIS3DWB_OS_Init+0x8c>)
 800260e:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_read_cmplt_sem_id, "iis3dwb_data_read_cmplt_sem_id" );
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <IIS3DWB_OS_Init+0x8c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	491d      	ldr	r1, [pc, #116]	; (800268c <IIS3DWB_OS_Init+0x90>)
 8002616:	4618      	mov	r0, r3
 8002618:	f016 f8d0 	bl	80187bc <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_read_cmplt_sem_id,osWaitForever);
 800261c:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <IIS3DWB_OS_Init+0x8c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	4618      	mov	r0, r3
 8002626:	f014 fedf 	bl	80173e8 <osSemaphoreWait>
  
  /* Data ready interrupt semaphore initialization */  
  iis3dwb_data_ready_sem_id = osSemaphoreCreate(osSemaphore(iis3dwb_data_ready_sem), 1);
 800262a:	2101      	movs	r1, #1
 800262c:	4818      	ldr	r0, [pc, #96]	; (8002690 <IIS3DWB_OS_Init+0x94>)
 800262e:	f014 feb7 	bl	80173a0 <osSemaphoreCreate>
 8002632:	4603      	mov	r3, r0
 8002634:	4a17      	ldr	r2, [pc, #92]	; (8002694 <IIS3DWB_OS_Init+0x98>)
 8002636:	6013      	str	r3, [r2, #0]
  vQueueAddToRegistry( iis3dwb_data_ready_sem_id, "iis3dwb_data_ready_sem_id" );
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <IIS3DWB_OS_Init+0x98>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4916      	ldr	r1, [pc, #88]	; (8002698 <IIS3DWB_OS_Init+0x9c>)
 800263e:	4618      	mov	r0, r3
 8002640:	f016 f8bc 	bl	80187bc <vQueueAddToRegistry>

  osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <IIS3DWB_OS_Init+0x98>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f04f 31ff 	mov.w	r1, #4294967295
 800264c:	4618      	mov	r0, r3
 800264e:	f014 fecb 	bl	80173e8 <osSemaphoreWait>
  

  /* Thread definition: read data */  
  osThreadDef(IIS3DWB_Acquisition_Thread, IIS3DWB_Thread, IIS3DWB_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);  
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <IIS3DWB_OS_Init+0xa0>)
 8002654:	1d3c      	adds	r4, r7, #4
 8002656:	461d      	mov	r5, r3
 8002658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  IIS3DWB_Thread_Id = osThreadCreate(osThread(IIS3DWB_Acquisition_Thread), NULL); 
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f014 fe74 	bl	8017352 <osThreadCreate>
 800266a:	4603      	mov	r3, r0
 800266c:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <IIS3DWB_OS_Init+0xa4>)
 800266e:	6013      	str	r3, [r2, #0]
  osThreadSuspend(IIS3DWB_Thread_Id);
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <IIS3DWB_OS_Init+0xa4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f015 f90c 	bl	8017892 <osThreadSuspend>
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bdb0      	pop	{r4, r5, r7, pc}
 8002682:	bf00      	nop
 8002684:	08022928 	.word	0x08022928
 8002688:	20000360 	.word	0x20000360
 800268c:	08022558 	.word	0x08022558
 8002690:	08022924 	.word	0x08022924
 8002694:	2000035c 	.word	0x2000035c
 8002698:	08022578 	.word	0x08022578
 800269c:	08022594 	.word	0x08022594
 80026a0:	200006ec 	.word	0x200006ec

080026a4 <IIS3DWB_Thread>:


static void IIS3DWB_Thread(void const *argument)
{
 80026a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a8:	b088      	sub	sp, #32
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  (void) argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_IIS3DWB_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_IIS3DWB_DEBUG_PIN );
 80026ae:	2101      	movs	r1, #1
 80026b0:	2000      	movs	r0, #0
 80026b2:	f016 fd7f 	bl	80191b4 <vTaskSetApplicationTaskTag>
#endif
  
  uint8_t reg0;
  uint8_t reg1;
  
  volatile uint16_t fifo_level = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	823b      	strh	r3, [r7, #16]
  
  for (;;)
  {
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 80026ba:	4baf      	ldr	r3, [pc, #700]	; (8002978 <IIS3DWB_Thread+0x2d4>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	f040 8094 	bne.w	80027ec <IIS3DWB_Thread+0x148>
    {  
      ts_iis3dwb = 0;
 80026c4:	49ad      	ldr	r1, [pc, #692]	; (800297c <IIS3DWB_Thread+0x2d8>)
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9c1 2300 	strd	r2, r3, [r1]
      tim_value_old = 0;
 80026d2:	4bab      	ldr	r3, [pc, #684]	; (8002980 <IIS3DWB_Thread+0x2dc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
      
      iis3dwb_device_id_get( &iis3dwb_ctx_instance, (uint8_t *)&reg0);
 80026d8:	f107 0313 	add.w	r3, r7, #19
 80026dc:	4619      	mov	r1, r3
 80026de:	48a9      	ldr	r0, [pc, #676]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 80026e0:	f002 fec9 	bl	8005476 <iis3dwb_device_id_get>
      iis3dwb_reset_set(&iis3dwb_ctx_instance, 1);
 80026e4:	2101      	movs	r1, #1
 80026e6:	48a7      	ldr	r0, [pc, #668]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 80026e8:	f002 fed6 	bl	8005498 <iis3dwb_reset_set>
      iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 80026ec:	f107 0213 	add.w	r2, r7, #19
 80026f0:	2301      	movs	r3, #1
 80026f2:	2110      	movs	r1, #16
 80026f4:	48a3      	ldr	r0, [pc, #652]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 80026f6:	f002 fe42 	bl	800537e <iis3dwb_read_reg>
      reg0 |= 0xA0;
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8002700:	b2db      	uxtb	r3, r3
 8002702:	74fb      	strb	r3, [r7, #19]
      iis3dwb_write_reg(&iis3dwb_ctx_instance, IIS3DWB_CTRL1_XL, (uint8_t *)&reg0, 1);
 8002704:	f107 0213 	add.w	r2, r7, #19
 8002708:	2301      	movs	r3, #1
 800270a:	2110      	movs	r1, #16
 800270c:	489d      	ldr	r0, [pc, #628]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 800270e:	f002 fe4e 	bl	80053ae <iis3dwb_write_reg>
      /*Set fifo in continuous / stream mode*/
      iis3dwb_i2c_interface_set(&iis3dwb_ctx_instance, IIS3DWB_I2C_DISABLE); 
 8002712:	2101      	movs	r1, #1
 8002714:	489b      	ldr	r0, [pc, #620]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 8002716:	f002 ff3d 	bl	8005594 <iis3dwb_i2c_interface_set>
      iis3dwb_fifo_mode_set(&iis3dwb_ctx_instance, IIS3DWB_STREAM_MODE); 
 800271a:	2106      	movs	r1, #6
 800271c:	4899      	ldr	r0, [pc, #612]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 800271e:	f002 ffd7 	bl	80056d0 <iis3dwb_fifo_mode_set>
      /*Set watermark*/
      iis3dwb_fifo_watermark_set(&iis3dwb_ctx_instance, IIS3DWB_WTM_LEVEL);
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	4897      	ldr	r0, [pc, #604]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 8002726:	f002 ff77 	bl	8005618 <iis3dwb_fifo_watermark_set>
      /*Data Ready pulse mode*/
      iis3dwb_data_ready_mode_set(&iis3dwb_ctx_instance, IIS3DWB_DRDY_PULSED);
 800272a:	2101      	movs	r1, #1
 800272c:	4895      	ldr	r0, [pc, #596]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 800272e:	f002 fe7c 	bl	800542a <iis3dwb_data_ready_mode_set>
      /*Set full scale*/
      if(IIS3DWB_Init_Param.FS[0] < 3.0f)
 8002732:	4b95      	ldr	r3, [pc, #596]	; (8002988 <IIS3DWB_Thread+0x2e4>)
 8002734:	edd3 7a01 	vldr	s15, [r3, #4]
 8002738:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800273c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	d504      	bpl.n	8002750 <IIS3DWB_Thread+0xac>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_2g);
 8002746:	2100      	movs	r1, #0
 8002748:	488e      	ldr	r0, [pc, #568]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 800274a:	f002 fe48 	bl	80053de <iis3dwb_xl_full_scale_set>
 800274e:	e02b      	b.n	80027a8 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 5.0f)
 8002750:	4b8d      	ldr	r3, [pc, #564]	; (8002988 <IIS3DWB_Thread+0x2e4>)
 8002752:	edd3 7a01 	vldr	s15, [r3, #4]
 8002756:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800275a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	d504      	bpl.n	800276e <IIS3DWB_Thread+0xca>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_4g);
 8002764:	2102      	movs	r1, #2
 8002766:	4887      	ldr	r0, [pc, #540]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 8002768:	f002 fe39 	bl	80053de <iis3dwb_xl_full_scale_set>
 800276c:	e01c      	b.n	80027a8 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 9.0f)
 800276e:	4b86      	ldr	r3, [pc, #536]	; (8002988 <IIS3DWB_Thread+0x2e4>)
 8002770:	edd3 7a01 	vldr	s15, [r3, #4]
 8002774:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	d504      	bpl.n	800278c <IIS3DWB_Thread+0xe8>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_8g);
 8002782:	2103      	movs	r1, #3
 8002784:	487f      	ldr	r0, [pc, #508]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 8002786:	f002 fe2a 	bl	80053de <iis3dwb_xl_full_scale_set>
 800278a:	e00d      	b.n	80027a8 <IIS3DWB_Thread+0x104>
      else if(IIS3DWB_Init_Param.FS[0] < 17.0f)
 800278c:	4b7e      	ldr	r3, [pc, #504]	; (8002988 <IIS3DWB_Thread+0x2e4>)
 800278e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002792:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	d503      	bpl.n	80027a8 <IIS3DWB_Thread+0x104>
        iis3dwb_xl_full_scale_set(&iis3dwb_ctx_instance, IIS3DWB_16g);
 80027a0:	2101      	movs	r1, #1
 80027a2:	4878      	ldr	r0, [pc, #480]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 80027a4:	f002 fe1b 	bl	80053de <iis3dwb_xl_full_scale_set>
      
      /*Set 2nd stage filter*/
      iis3dwb_xl_hp_path_on_out_set(&iis3dwb_ctx_instance,IIS3DWB_LP_5kHz);
 80027a8:	2100      	movs	r1, #0
 80027aa:	4876      	ldr	r0, [pc, #472]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 80027ac:	f002 fe9a 	bl	80054e4 <iis3dwb_xl_hp_path_on_out_set>
      /* FIFO_WTM_IA routing on pin INT1 */
      iis3dwb_pin_int1_route_t pin_int1_route;
      *(uint8_t*)&(pin_int1_route.int1_ctrl) = 0;
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
      *(uint8_t*)&(pin_int1_route.md1_cfg) = 0;
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	3301      	adds	r3, #1
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
      pin_int1_route.int1_ctrl.int1_fifo_th = 1;
 80027c2:	7b3b      	ldrb	r3, [r7, #12]
 80027c4:	f043 0308 	orr.w	r3, r3, #8
 80027c8:	733b      	strb	r3, [r7, #12]
      iis3dwb_pin_int1_route_set(&iis3dwb_ctx_instance, &pin_int1_route);
 80027ca:	f107 030c 	add.w	r3, r7, #12
 80027ce:	4619      	mov	r1, r3
 80027d0:	486c      	ldr	r0, [pc, #432]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 80027d2:	f002 ff05 	bl	80055e0 <iis3dwb_pin_int1_route_set>
      
      /*Enable writing to FIFO*/
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_BATCHED_AT_26k7Hz);
 80027d6:	210a      	movs	r1, #10
 80027d8:	486a      	ldr	r0, [pc, #424]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 80027da:	f002 ff53 	bl	8005684 <iis3dwb_fifo_xl_batch_set>
      
      HAL_NVIC_EnableIRQ(IIS3DWB_INT1_EXTI_IRQn); 
 80027de:	2017      	movs	r0, #23
 80027e0:	f005 fd27 	bl	8008232 <HAL_NVIC_EnableIRQ>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_RUNNING;      
 80027e4:	4b64      	ldr	r3, [pc, #400]	; (8002978 <IIS3DWB_Thread+0x2d4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	e766      	b.n	80026ba <IIS3DWB_Thread+0x16>
    }
    else if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING)
 80027ec:	4b62      	ldr	r3, [pc, #392]	; (8002978 <IIS3DWB_Thread+0x2d4>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f040 80ae 	bne.w	8002952 <IIS3DWB_Thread+0x2ae>
    {  
      osSemaphoreWait(iis3dwb_data_ready_sem_id,  osWaitForever);     
 80027f6:	4b65      	ldr	r3, [pc, #404]	; (800298c <IIS3DWB_Thread+0x2e8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f04f 31ff 	mov.w	r1, #4294967295
 80027fe:	4618      	mov	r0, r3
 8002800:	f014 fdf2 	bl	80173e8 <osSemaphoreWait>
      
      if(IIS3DWB_Sensor_State == SM_SENSOR_STATE_RUNNING) /* Change of state can happen while task blocked */
 8002804:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <IIS3DWB_Thread+0x2d4>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f47f af56 	bne.w	80026ba <IIS3DWB_Thread+0x16>
      {
        /* Check FIFO_WTM_IA anf fifo level. We do not use PID in order to avoid reading one register twice */
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS1, &reg0, 1);
 800280e:	f107 0213 	add.w	r2, r7, #19
 8002812:	2301      	movs	r3, #1
 8002814:	213a      	movs	r1, #58	; 0x3a
 8002816:	485b      	ldr	r0, [pc, #364]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 8002818:	f002 fdb1 	bl	800537e <iis3dwb_read_reg>
        iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_STATUS2, &reg1, 1);        
 800281c:	f107 0212 	add.w	r2, r7, #18
 8002820:	2301      	movs	r3, #1
 8002822:	213b      	movs	r1, #59	; 0x3b
 8002824:	4857      	ldr	r0, [pc, #348]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 8002826:	f002 fdaa 	bl	800537e <iis3dwb_read_reg>
        fifo_level = ((reg1 & 0x03) << 8) + reg0; 
 800282a:	7cbb      	ldrb	r3, [r7, #18]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	b29b      	uxth	r3, r3
 8002830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002834:	b29a      	uxth	r2, r3
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	b29b      	uxth	r3, r3
 800283a:	4413      	add	r3, r2
 800283c:	b29b      	uxth	r3, r3
 800283e:	823b      	strh	r3, [r7, #16]
        if((reg1) & 0x80  && (fifo_level>=IIS3DWB_SAMPLES_PER_IT) )
 8002840:	7cbb      	ldrb	r3, [r7, #18]
 8002842:	b25b      	sxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	f6bf af38 	bge.w	80026ba <IIS3DWB_Thread+0x16>
 800284a:	8a3b      	ldrh	r3, [r7, #16]
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b7f      	cmp	r3, #127	; 0x7f
 8002850:	f67f af33 	bls.w	80026ba <IIS3DWB_Thread+0x16>
        {        
          if(tim_value >= tim_value_old)
 8002854:	4b4e      	ldr	r3, [pc, #312]	; (8002990 <IIS3DWB_Thread+0x2ec>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b49      	ldr	r3, [pc, #292]	; (8002980 <IIS3DWB_Thread+0x2dc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d307      	bcc.n	8002870 <IIS3DWB_Thread+0x1cc>
          {
            period = tim_value - tim_value_old;
 8002860:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <IIS3DWB_Thread+0x2ec>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b46      	ldr	r3, [pc, #280]	; (8002980 <IIS3DWB_Thread+0x2dc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	4a4a      	ldr	r2, [pc, #296]	; (8002994 <IIS3DWB_Thread+0x2f0>)
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e007      	b.n	8002880 <IIS3DWB_Thread+0x1dc>
          }
          else
          {
            period = tim_value + (0xFFFFFFFF - tim_value_old);
 8002870:	4b47      	ldr	r3, [pc, #284]	; (8002990 <IIS3DWB_Thread+0x2ec>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b42      	ldr	r3, [pc, #264]	; (8002980 <IIS3DWB_Thread+0x2dc>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	4a45      	ldr	r2, [pc, #276]	; (8002994 <IIS3DWB_Thread+0x2f0>)
 800287e:	6013      	str	r3, [r2, #0]
          }
          
          tim_value_old = tim_value;
 8002880:	4b43      	ldr	r3, [pc, #268]	; (8002990 <IIS3DWB_Thread+0x2ec>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a3e      	ldr	r2, [pc, #248]	; (8002980 <IIS3DWB_Thread+0x2dc>)
 8002886:	6013      	str	r3, [r2, #0]
          ts_iis3dwb +=  period;
 8002888:	4b42      	ldr	r3, [pc, #264]	; (8002994 <IIS3DWB_Thread+0x2f0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2200      	movs	r2, #0
 800288e:	461c      	mov	r4, r3
 8002890:	4615      	mov	r5, r2
 8002892:	4b3a      	ldr	r3, [pc, #232]	; (800297c <IIS3DWB_Thread+0x2d8>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	eb14 0802 	adds.w	r8, r4, r2
 800289c:	eb45 0903 	adc.w	r9, r5, r3
 80028a0:	4b36      	ldr	r3, [pc, #216]	; (800297c <IIS3DWB_Thread+0x2d8>)
 80028a2:	e9c3 8900 	strd	r8, r9, [r3]
          
          uint16_t i = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	83fb      	strh	r3, [r7, #30]
          iis3dwb_read_reg(&iis3dwb_ctx_instance, IIS3DWB_FIFO_DATA_OUT_TAG, (uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 7);
 80028aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80028ae:	4a3a      	ldr	r2, [pc, #232]	; (8002998 <IIS3DWB_Thread+0x2f4>)
 80028b0:	2178      	movs	r1, #120	; 0x78
 80028b2:	4834      	ldr	r0, [pc, #208]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 80028b4:	f002 fd63 	bl	800537e <iis3dwb_read_reg>
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
            *p16++ = usbTestData++;
          }
#else
          int16_t * p16src = (int16_t *)iis3dwb_mem;
 80028b8:	4b37      	ldr	r3, [pc, #220]	; (8002998 <IIS3DWB_Thread+0x2f4>)
 80028ba:	61bb      	str	r3, [r7, #24]
          int16_t * p16dest = (int16_t *)iis3dwb_mem;
 80028bc:	4b36      	ldr	r3, [pc, #216]	; (8002998 <IIS3DWB_Thread+0x2f4>)
 80028be:	617b      	str	r3, [r7, #20]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 80028c0:	2300      	movs	r3, #0
 80028c2:	83fb      	strh	r3, [r7, #30]
 80028c4:	e020      	b.n	8002908 <IIS3DWB_Thread+0x264>
          {      
            p16src = (int16_t *)&((uint8_t *)(p16src))[1];          
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	3301      	adds	r3, #1
 80028ca:	61bb      	str	r3, [r7, #24]
            *p16dest++ = *p16src++;
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	1c93      	adds	r3, r2, #2
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	1c99      	adds	r1, r3, #2
 80028d6:	6179      	str	r1, [r7, #20]
 80028d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80028dc:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	1c93      	adds	r3, r2, #2
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	1c99      	adds	r1, r3, #2
 80028e8:	6179      	str	r1, [r7, #20]
 80028ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80028ee:	801a      	strh	r2, [r3, #0]
            *p16dest++ = *p16src++;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	1c93      	adds	r3, r2, #2
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	1c99      	adds	r1, r3, #2
 80028fa:	6179      	str	r1, [r7, #20]
 80028fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002900:	801a      	strh	r2, [r3, #0]
          for (i = 0; i < IIS3DWB_SAMPLES_PER_IT; i++)    
 8002902:	8bfb      	ldrh	r3, [r7, #30]
 8002904:	3301      	adds	r3, #1
 8002906:	83fb      	strh	r3, [r7, #30]
 8002908:	8bfb      	ldrh	r3, [r7, #30]
 800290a:	2b7f      	cmp	r3, #127	; 0x7f
 800290c:	d9db      	bls.n	80028c6 <IIS3DWB_Thread+0x222>
          }
#endif  
          IIS3DWB_Data_Ready((uint8_t *)iis3dwb_mem, IIS3DWB_SAMPLES_PER_IT * 6, (double)ts_iis3dwb/(double)SystemCoreClock);        
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <IIS3DWB_Thread+0x2d8>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f7fd fe60 	bl	80005dc <__aeabi_ul2d>
 800291c:	4682      	mov	sl, r0
 800291e:	468b      	mov	fp, r1
 8002920:	4b1e      	ldr	r3, [pc, #120]	; (800299c <IIS3DWB_Thread+0x2f8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fe15 	bl	8000554 <__aeabi_ui2d>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4650      	mov	r0, sl
 8002930:	4659      	mov	r1, fp
 8002932:	f7fd ffb3 	bl	800089c <__aeabi_ddiv>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	ec43 2b17 	vmov	d7, r2, r3
 800293e:	eeb0 0a47 	vmov.f32	s0, s14
 8002942:	eef0 0a67 	vmov.f32	s1, s15
 8002946:	f44f 7140 	mov.w	r1, #768	; 0x300
 800294a:	4813      	ldr	r0, [pc, #76]	; (8002998 <IIS3DWB_Thread+0x2f4>)
 800294c:	f000 fd10 	bl	8003370 <IIS3DWB_Data_Ready>
 8002950:	e6b3      	b.n	80026ba <IIS3DWB_Thread+0x16>
        }
      }
    }
    else if ( IIS3DWB_Sensor_State == SM_SENSOR_STATE_SUSPENDING)
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <IIS3DWB_Thread+0x2d4>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b01      	cmp	r3, #1
 8002958:	f47f aeaf 	bne.w	80026ba <IIS3DWB_Thread+0x16>
    {
#ifdef DATA_TEST
      usbTestData = 0;
#endif      
      iis3dwb_fifo_xl_batch_set(&iis3dwb_ctx_instance, IIS3DWB_XL_NOT_BATCHED);
 800295c:	2100      	movs	r1, #0
 800295e:	4809      	ldr	r0, [pc, #36]	; (8002984 <IIS3DWB_Thread+0x2e0>)
 8002960:	f002 fe90 	bl	8005684 <iis3dwb_fifo_xl_batch_set>
      IIS3DWB_Sensor_State = SM_SENSOR_STATE_SUSPENDED;
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <IIS3DWB_Thread+0x2d4>)
 8002966:	2202      	movs	r2, #2
 8002968:	701a      	strb	r2, [r3, #0]
      osThreadSuspend(IIS3DWB_Thread_Id);
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <IIS3DWB_Thread+0x2fc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f014 ff8f 	bl	8017892 <osThreadSuspend>
    if (IIS3DWB_Sensor_State == SM_SENSOR_STATE_INITIALIZING)
 8002974:	e6a1      	b.n	80026ba <IIS3DWB_Thread+0x16>
 8002976:	bf00      	nop
 8002978:	20000004 	.word	0x20000004
 800297c:	20000700 	.word	0x20000700
 8002980:	200006f4 	.word	0x200006f4
 8002984:	20000018 	.word	0x20000018
 8002988:	20000344 	.word	0x20000344
 800298c:	2000035c 	.word	0x2000035c
 8002990:	200006f0 	.word	0x200006f0
 8002994:	200006f8 	.word	0x200006f8
 8002998:	2000036c 	.word	0x2000036c
 800299c:	20000038 	.word	0x20000038
 80029a0:	200006ec 	.word	0x200006ec

080029a4 <IIS3DWB_Int_Callback>:
}



static void IIS3DWB_Int_Callback(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  tim_value = hsm_tim.Instance->CNT;
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <IIS3DWB_Int_Callback+0x1c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <IIS3DWB_Int_Callback+0x20>)
 80029b0:	6013      	str	r3, [r2, #0]
  osSemaphoreRelease(iis3dwb_data_ready_sem_id);
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <IIS3DWB_Int_Callback+0x24>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f014 fd64 	bl	8017484 <osSemaphoreRelease>
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20002eb4 	.word	0x20002eb4
 80029c4:	200006f0 	.word	0x200006f0
 80029c8:	2000035c 	.word	0x2000035c

080029cc <UpdateTimerValue>:

void UpdateTimerValue(void){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
	tim_value = hsm_tim.Instance->CNT;
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <UpdateTimerValue+0x1c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <UpdateTimerValue+0x20>)
 80029d8:	6013      	str	r3, [r2, #0]
	osSemaphoreRelease(iis3dwb_data_ready_sem_id);
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <UpdateTimerValue+0x24>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f014 fd50 	bl	8017484 <osSemaphoreRelease>
}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20002eb4 	.word	0x20002eb4
 80029ec:	200006f0 	.word	0x200006f0
 80029f0:	2000035c 	.word	0x2000035c

080029f4 <IIS3DWB_Set_State>:

void IIS3DWB_Set_State(SM_Sensor_State_t newState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
  IIS3DWB_Sensor_State = newState;
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <IIS3DWB_Set_State+0x1c>)
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	7013      	strb	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	20000004 	.word	0x20000004

08002a14 <IIS3DWB_Start>:
  IIS3DWB_Init_Param.FS[0] = newFS1;
  IIS3DWB_Init_Param.FS[0] = newFS2;
}

void IIS3DWB_Start(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002a18:	2003      	movs	r0, #3
 8002a1a:	f7ff ffeb 	bl	80029f4 <IIS3DWB_Set_State>
  osThreadResume(IIS3DWB_Thread_Id);
 8002a1e:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <IIS3DWB_Start+0x18>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f014 ff42 	bl	80178ac <osThreadResume>
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200006ec 	.word	0x200006ec

08002a30 <IIS3DWB_Stop>:

void IIS3DWB_Stop(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  IIS3DWB_Set_State(SM_SENSOR_STATE_SUSPENDING);  
 8002a34:	2001      	movs	r0, #1
 8002a36:	f7ff ffdd 	bl	80029f4 <IIS3DWB_Set_State>
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <IMP34DT05_Set_State>:
  
}


void IMP34DT05_Set_State(SM_Sensor_State_t newState)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  IMP34DT05_Sensor_State = newState;
 8002a4a:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <IMP34DT05_Set_State+0x1c>)
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	7013      	strb	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	20000024 	.word	0x20000024

08002a60 <IMP34DT05_Start>:
  IMP34DT05_Init_Param.FS[0] = newFS1;
  IMP34DT05_Init_Param.FS[0] = newFS2;
}

void IMP34DT05_Start(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002a64:	2003      	movs	r0, #3
 8002a66:	f7ff ffeb 	bl	8002a40 <IMP34DT05_Set_State>
  osThreadResume(IMP34DT05_Thread_Id);
 8002a6a:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <IMP34DT05_Start+0x18>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f014 ff1c 	bl	80178ac <osThreadResume>
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000720 	.word	0x20000720

08002a7c <IMP34DT05_Stop>:

void IMP34DT05_Stop(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  IMP34DT05_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002a80:	2001      	movs	r0, #1
 8002a82:	f7ff ffdd 	bl	8002a40 <IMP34DT05_Set_State>
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <ISM330DHCX_Set_State>:
  tim_value = hsm_tim.Instance->CNT;
  osSemaphoreRelease(ism330dhcx_DreadySem_id);    
}

void ISM330DHCX_Set_State(SM_Sensor_State_t newState)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  ISM330DHCX_Sensor_State = newState;
 8002a96:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <ISM330DHCX_Set_State+0x1c>)
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	7013      	strb	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	20000025 	.word	0x20000025

08002aac <ISM330DHCX_Start>:
  ISM330DHCX_Init_Param.FS[0] = newFS1;
  ISM330DHCX_Init_Param.FS[0] = newFS2;
}

void ISM330DHCX_Start(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	f7ff ffeb 	bl	8002a8c <ISM330DHCX_Set_State>
  osThreadResume(ISM330DHCX_Thread_Id);
 8002ab6:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <ISM330DHCX_Start+0x18>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f014 fef6 	bl	80178ac <osThreadResume>
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000744 	.word	0x20000744

08002ac8 <ISM330DHCX_Stop>:

void ISM330DHCX_Stop(void)
{  
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  ISM330DHCX_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002acc:	2001      	movs	r0, #1
 8002ace:	f7ff ffdd 	bl	8002a8c <ISM330DHCX_Set_State>
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <LPS22HH_Set_State>:
    }    
  }     
}

void LPS22HH_Set_State(SM_Sensor_State_t newState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  LPS22HH_Sensor_State = newState;
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <LPS22HH_Set_State+0x1c>)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	7013      	strb	r3, [r2, #0]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	20000026 	.word	0x20000026

08002af8 <LPS22HH_Start>:
  LPS22HH_Init_Param.FS[0] = newFS1;
  LPS22HH_Init_Param.FS[0] = newFS2;
}

void LPS22HH_Start(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8002afc:	2003      	movs	r0, #3
 8002afe:	f7ff ffeb 	bl	8002ad8 <LPS22HH_Set_State>
  osThreadResume(LPS22HH_Thread_Id);
 8002b02:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <LPS22HH_Start+0x18>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f014 fed0 	bl	80178ac <osThreadResume>
}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000760 	.word	0x20000760

08002b14 <LPS22HH_Stop>:

void LPS22HH_Stop(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  LPS22HH_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f7ff ffdd 	bl	8002ad8 <LPS22HH_Set_State>
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <main>:
* @brief  Main program
* @param  None
* @retval None
*/  
int main(void)
{
 8002b24:	b5b0      	push	{r4, r5, r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0



	HAL_Init();
 8002b2a:	f003 fd9f 	bl	800666c <HAL_Init>

	SystemClock_Config();
 8002b2e:	f000 f8e5 	bl	8002cfc <SystemClock_Config>
    
	/* Enable Power Clock for low power modes*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <main+0xbc>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	4a2a      	ldr	r2, [pc, #168]	; (8002be0 <main+0xbc>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b3e:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <main+0xbc>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
	//HAL_PWREx_EnableVddUSB();		/* USB */
	//HAL_PWREx_EnableVddIO2();		/* VddIO2 is for Port G, since we are not using it */
	//BSP_Enable_DCDC2();				//Only for I2C 3, WiFi
  
	/* Configure the Battery Charger */
	BattChrg_Init();
 8002b4a:	f000 f971 	bl	8002e30 <BattChrg_Init>
  
	/* Configure Power Voltage Detector(PVD) to detect if battery voltage is low */
	PVD_Config();
 8002b4e:	f000 f9a3 	bl	8002e98 <PVD_Config>
  
	/* Configure DEBUG PIN and LED */
	BSP_DEBUG_PIN_Init_All();
 8002b52:	f003 fae3 	bl	800611c <BSP_DEBUG_PIN_Init_All>
	BSP_LED_Init(LED1);				//Green
 8002b56:	2000      	movs	r0, #0
 8002b58:	f002 fef2 	bl	8005940 <BSP_LED_Init>
	BSP_LED_Init(LED2);				//Orange
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f002 feef 	bl	8005940 <BSP_LED_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE();		//PA13, 14 are for DEBUG
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <main+0xbc>)
 8002b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b66:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <main+0xbc>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <main+0xbc>)
 8002b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	683b      	ldr	r3, [r7, #0]
   
	HSD_JSON_set_allocation_functions(HSD_malloc, HSD_free);
 8002b7a:	491a      	ldr	r1, [pc, #104]	; (8002be4 <main+0xc0>)
 8002b7c:	481a      	ldr	r0, [pc, #104]	; (8002be8 <main+0xc4>)
 8002b7e:	f7fe fa63 	bl	8001048 <HSD_JSON_set_allocation_functions>
  
  /* Start USB */  
  //MX_USB_DEVICE_Init();			//Dont know why this is disabled
  
  /* Set default device description */
  set_default_description();
 8002b82:	f7ff f93d 	bl	8001e00 <set_default_description>
  
  /* USER Button initialization */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002b86:	2101      	movs	r1, #1
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f002 fe87 	bl	800589c <BSP_PB_Init>
  BSP_PB_PWR_Init();
 8002b8e:	f002 fe55 	bl	800583c <BSP_PB_PWR_Init>
  
  /* Sensor Manager initilization, only using PID (Platform Indepentent Drivers) */
  SM_Peripheral_Init();
 8002b92:	f001 ffdd 	bl	8004b50 <SM_Peripheral_Init>
  SM_OS_Init();
 8002b96:	f001 fe9f 	bl	80048d8 <SM_OS_Init>
  
  MX_USART2_Init();
 8002b9a:	f000 f82f 	bl	8002bfc <MX_USART2_Init>
  Peripheral_MSP_Init_All();  
 8002b9e:	f000 fbff 	bl	80033a0 <Peripheral_MSP_Init_All>
  SDM_Peripheral_Init();
 8002ba2:	f001 f83d 	bl	8003c20 <SDM_Peripheral_Init>
  
  Peripheral_OS_Init_All();  
 8002ba6:	f000 fc01 	bl	80033ac <Peripheral_OS_Init_All>
  SDM_OS_Init();
 8002baa:	f001 f83f 	bl	8003c2c <SDM_OS_Init>
  
  //Show reset
  char wakeUp [] = {"MCU wake up from main \n"};
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <main+0xc8>)
 8002bb0:	f107 0408 	add.w	r4, r7, #8
 8002bb4:	461d      	mov	r5, r3
 8002bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bbe:	e884 0003 	stmia.w	r4, {r0, r1}
  HAL_UART_Transmit(&huart2, (uint8_t *) wakeUp, sizeof(wakeUp), HAL_MAX_DELAY);
 8002bc2:	f107 0108 	add.w	r1, r7, #8
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	2218      	movs	r2, #24
 8002bcc:	4808      	ldr	r0, [pc, #32]	; (8002bf0 <main+0xcc>)
 8002bce:	f00c fc91 	bl	800f4f4 <HAL_UART_Transmit>

  //Get SOC
  BSP_BC_GetVoltageAndLevel(&mvLevel, &batteryLevel);
 8002bd2:	4908      	ldr	r1, [pc, #32]	; (8002bf4 <main+0xd0>)
 8002bd4:	4808      	ldr	r0, [pc, #32]	; (8002bf8 <main+0xd4>)
 8002bd6:	f002 ffc5 	bl	8005b64 <BSP_BC_GetVoltageAndLevel>
//  //strcat(soc, batVal);
//  sprintf(soc,"SOC in %d%% \n",batVal);
//  HAL_UART_Transmit(&huart2, (uint8_t *) soc, sizeof(soc), HAL_MAX_DELAY);

  /* Start scheduler */
  osKernelStart();
 8002bda:	f014 fbb3 	bl	8017344 <osKernelStart>
  
  while(1);  
 8002bde:	e7fe      	b.n	8002bde <main+0xba>
 8002be0:	40021000 	.word	0x40021000
 8002be4:	0801e075 	.word	0x0801e075
 8002be8:	0801e065 	.word	0x0801e065
 8002bec:	080225a8 	.word	0x080225a8
 8002bf0:	20000b04 	.word	0x20000b04
 8002bf4:	20000b94 	.word	0x20000b94
 8002bf8:	20000b90 	.word	0x20000b90

08002bfc <MX_USART2_Init>:
//}


//UART2 INIT
void MX_USART2_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c02:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <MX_USART2_Init+0x98>)
 8002c04:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002c06:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c0c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002c14:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c22:	220c      	movs	r2, #12
 8002c24:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c2c:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c40:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c46:	4812      	ldr	r0, [pc, #72]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c48:	f00c fc04 	bl	800f454 <HAL_UART_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_USART2_Init+0x5a>
	{
		Error_Handler();
 8002c52:	f000 fbc7 	bl	80033e4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c56:	2100      	movs	r1, #0
 8002c58:	480d      	ldr	r0, [pc, #52]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c5a:	f00e f85e 	bl	8010d1a <HAL_UARTEx_SetTxFifoThreshold>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_USART2_Init+0x6c>
	{
		Error_Handler();
 8002c64:	f000 fbbe 	bl	80033e4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4809      	ldr	r0, [pc, #36]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c6c:	f00e f893 	bl	8010d96 <HAL_UARTEx_SetRxFifoThreshold>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_USART2_Init+0x7e>
	{
		Error_Handler();
 8002c76:	f000 fbb5 	bl	80033e4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002c7a:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_USART2_Init+0x94>)
 8002c7c:	f00e f814 	bl	8010ca8 <HAL_UARTEx_DisableFifoMode>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_USART2_Init+0x8e>
	{
		Error_Handler();
 8002c86:	f000 fbad 	bl	80033e4 <Error_Handler>
	}

}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000b04 	.word	0x20000b04
 8002c94:	40004400 	.word	0x40004400

08002c98 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
 // UNUSED(huart);
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_UART_MspInit+0x58>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <HAL_UART_MspInit+0x58>)
 8002cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cba:	6593      	str	r3, [r2, #88]	; 0x58
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_UART_MspInit+0x58>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART_CR2_RXINV|USART2_RTS_Pin|USART2_TX_Pin;
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_UART_MspInit+0x5c>)
 8002cca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cd8:	2307      	movs	r3, #7
 8002cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cdc:	f107 030c 	add.w	r3, r7, #12
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <HAL_UART_MspInit+0x60>)
 8002ce4:	f005 fd40 	bl	8008768 <HAL_GPIO_Init>
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	3720      	adds	r7, #32
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	00010030 	.word	0x00010030
 8002cf8:	48000c00 	.word	0x48000c00

08002cfc <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b0be      	sub	sp, #248	; 0xf8
 8002d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d02:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d06:	2244      	movs	r2, #68	; 0x44
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f01b f9e2 	bl	801e0d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d10:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	229c      	movs	r2, #156	; 0x9c
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f01b f9d4 	bl	801e0d4 <memset>
  
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f007 fafb 	bl	800a328 <HAL_PWREx_ControlVoltageScaling>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8002d38:	f000 fb54 	bl	80033e4 <Error_Handler>
  /**Initializes the CPU, AHB and APB busses clocks 
  */
//  HAL_PWR_EnableBkUpAccess();
//  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
//  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;	//Changed
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;	//Changed
 8002d3c:	2321      	movs	r3, #33	; 0x21
 8002d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
//  RCC_OscInitStruct.LSEState = RCC_LSE_ON;					//Changed
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d50:	2302      	movs	r3, #2
 8002d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d56:	2303      	movs	r3, #3
 8002d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
//  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLN = 30;
 8002d62:	231e      	movs	r3, #30
 8002d64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;				//Changed
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;				//Changed
 8002d68:	2305      	movs	r3, #5
 8002d6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d74:	2302      	movs	r3, #2
 8002d76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d7a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f007 fbfa 	bl	800a578 <HAL_RCC_OscConfig>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002d8a:	f000 fb2b 	bl	80033e4 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d8e:	230f      	movs	r3, #15
 8002d90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d94:	2303      	movs	r3, #3
 8002d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002dac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002db0:	2105      	movs	r1, #5
 8002db2:	4618      	mov	r0, r3
 8002db4:	f008 f806 	bl	800adc4 <HAL_RCC_ClockConfig>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002dbe:	f000 fb11 	bl	80033e4 <Error_Handler>
  }
#if 1
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_I2C2
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <SystemClock_Config+0x12c>)
 8002dc4:	607b      	str	r3, [r7, #4]
#endif

#if 1
//  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
//  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	673b      	str	r3, [r7, #112]	; 0x70
#endif

  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002dce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002dd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	647b      	str	r3, [r7, #68]	; 0x44

#if 1
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002de6:	2300      	movs	r3, #0
 8002de8:	67bb      	str	r3, [r7, #120]	; 0x78
#endif

  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8002dea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dee:	67fb      	str	r3, [r7, #124]	; 0x7c
//  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;

#if 1
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002df0:	2303      	movs	r3, #3
 8002df2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8002df4:	2305      	movs	r3, #5
 8002df6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8002df8:	2360      	movs	r3, #96	; 0x60
 8002dfa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8002dfc:	2319      	movs	r3, #25
 8002dfe:	617b      	str	r3, [r7, #20]
//  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002e00:	2302      	movs	r3, #2
 8002e02:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8002e04:	2304      	movs	r3, #4
 8002e06:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <SystemClock_Config+0x130>)
 8002e0a:	623b      	str	r3, [r7, #32]
#endif

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f008 fa86 	bl	800b320 <HAL_RCCEx_PeriphCLKConfig>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <SystemClock_Config+0x122>
  {
    Error_Handler();
 8002e1a:	f000 fae3 	bl	80033e4 <Error_Handler>
  }  
}
 8002e1e:	bf00      	nop
 8002e20:	37f8      	adds	r7, #248	; 0xf8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	00296882 	.word	0x00296882
 8002e2c:	01010000 	.word	0x01010000

08002e30 <BattChrg_Init>:


void BattChrg_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  BSP_BC_Init();
 8002e34:	f002 fdfa 	bl	8005a2c <BSP_BC_Init>
  BSP_BC_BatMS_Init();
 8002e38:	f002 fe3c 	bl	8005ab4 <BSP_BC_BatMS_Init>
  BSP_BC_CmdSend(BATMS_ON);  
 8002e3c:	200a      	movs	r0, #10
 8002e3e:	f002 fdfd 	bl	8005a3c <BSP_BC_CmdSend>
  
  HAL_EXTI_GetHandle(&BC_exti, EXTI_LINE_10);  
 8002e42:	4908      	ldr	r1, [pc, #32]	; (8002e64 <BattChrg_Init+0x34>)
 8002e44:	4808      	ldr	r0, [pc, #32]	; (8002e68 <BattChrg_Init+0x38>)
 8002e46:	f005 fc4b 	bl	80086e0 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&BC_exti,  HAL_EXTI_COMMON_CB_ID, BC_Int_Callback);
 8002e4a:	4a08      	ldr	r2, [pc, #32]	; (8002e6c <BattChrg_Init+0x3c>)
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4806      	ldr	r0, [pc, #24]	; (8002e68 <BattChrg_Init+0x38>)
 8002e50:	f005 fc2c 	bl	80086ac <HAL_EXTI_RegisterCallback>
  
  t_stwin = HAL_GetTick(); 
 8002e54:	f003 fc76 	bl	8006744 <HAL_GetTick>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4a05      	ldr	r2, [pc, #20]	; (8002e70 <BattChrg_Init+0x40>)
 8002e5c:	6013      	str	r3, [r2, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	1600000a 	.word	0x1600000a
 8002e68:	20000af8 	.word	0x20000af8
 8002e6c:	08002e75 	.word	0x08002e75
 8002e70:	20000b00 	.word	0x20000b00

08002e74 <BC_Int_Callback>:
* @brief  Battery Charger Interrupt callback
* @param  None
* @retval None
*/
void BC_Int_Callback(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  if(HAL_GetTick() - t_stwin > 4000)
 8002e78:	f003 fc64 	bl	8006744 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <BC_Int_Callback+0x20>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002e88:	d902      	bls.n	8002e90 <BC_Int_Callback+0x1c>
  {
    BSP_BC_CmdSend(SHIPPING_MODE_ON);
 8002e8a:	2017      	movs	r0, #23
 8002e8c:	f002 fdd6 	bl	8005a3c <BSP_BC_CmdSend>
  }
}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000b00 	.word	0x20000b00

08002e98 <PVD_Config>:
* @brief  Configures the PVD resources.
* @param  None
* @retval None
*/
void PVD_Config(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD;
  
  /*##-1- Enable Power Clock #################################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <PVD_Config+0x50>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	4a11      	ldr	r2, [pc, #68]	; (8002ee8 <PVD_Config+0x50>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <PVD_Config+0x50>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
  
  /*##-2- Configure the NVIC for PVD #########################################*/
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f005 f99d 	bl	80081fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f005 f9b6 	bl	8008232 <HAL_NVIC_EnableIRQ>
  
  /* Configure the PVD Level to 6 and generate an interrupt on falling
  edge(PVD detection level set to 2.9V, refer to the electrical characteristics
  of you device datasheet for more details) */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8002eca:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002ece:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002ed0:	f107 0308 	add.w	r3, r7, #8
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f007 f997 	bl	800a208 <HAL_PWR_ConfigPVD>
  
  /* Enable the PVD Output */
  HAL_PWR_EnablePVD();
 8002eda:	f007 f9f5 	bl	800a2c8 <HAL_PWR_EnablePVD>
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000

08002eec <vApplicationIdleHook>:


void vApplicationIdleHook( void )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	//Starts measurement manually


#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT) 
	//If SD_Logging enabled start measurement
  if(SD_Logging_Enabled)
 8002ef0:	4b3d      	ldr	r3, [pc, #244]	; (8002fe8 <vApplicationIdleHook+0xfc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <vApplicationIdleHook+0x10>
  {
    SDM_AutosaveFile();
 8002ef8:	f001 fc48 	bl	800478c <SDM_AutosaveFile>
  }
#endif
  
  if (!SD_Logging_Active)
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <vApplicationIdleHook+0x100>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d16f      	bne.n	8002fe4 <vApplicationIdleHook+0xf8>
  {
    if(com_status == HS_DATALOG_USB_STARTED)
 8002f04:	4b3a      	ldr	r3, [pc, #232]	; (8002ff0 <vApplicationIdleHook+0x104>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d121      	bne.n	8002f52 <vApplicationIdleHook+0x66>
    {
        if(!(HAL_GetTick()%100)) 
 8002f0e:	f003 fc19 	bl	8006744 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <vApplicationIdleHook+0x108>)
 8002f16:	fba3 1302 	umull	r1, r3, r3, r2
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2164      	movs	r1, #100	; 0x64
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d103      	bne.n	8002f30 <vApplicationIdleHook+0x44>
        {
          BSP_LED_On(LED_ORANGE);
 8002f28:	2001      	movs	r0, #1
 8002f2a:	f002 fd4b 	bl	80059c4 <BSP_LED_On>
    }
    //Start Measurement manually
    //Show reset
//    SDM_StartMeasurements();
  }
}
 8002f2e:	e059      	b.n	8002fe4 <vApplicationIdleHook+0xf8>
          if(!(HAL_GetTick()%50)) 
 8002f30:	f003 fc08 	bl	8006744 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b2f      	ldr	r3, [pc, #188]	; (8002ff4 <vApplicationIdleHook+0x108>)
 8002f38:	fba3 1302 	umull	r1, r3, r3, r2
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	2132      	movs	r1, #50	; 0x32
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14c      	bne.n	8002fe4 <vApplicationIdleHook+0xf8>
            BSP_LED_Off(LED_ORANGE);
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	f002 fd54 	bl	80059f8 <BSP_LED_Off>
}
 8002f50:	e048      	b.n	8002fe4 <vApplicationIdleHook+0xf8>
      if (!BSP_SD_IsDetected())
 8002f52:	f003 faaf 	bl	80064b4 <BSP_SD_IsDetected>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d121      	bne.n	8002fa0 <vApplicationIdleHook+0xb4>
        if(!(HAL_GetTick()%200)) 
 8002f5c:	f003 fbf2 	bl	8006744 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <vApplicationIdleHook+0x108>)
 8002f64:	fba3 1302 	umull	r1, r3, r3, r2
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	21c8      	movs	r1, #200	; 0xc8
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d103      	bne.n	8002f7e <vApplicationIdleHook+0x92>
          BSP_LED_On(LED_ORANGE);
 8002f76:	2001      	movs	r0, #1
 8002f78:	f002 fd24 	bl	80059c4 <BSP_LED_On>
}
 8002f7c:	e032      	b.n	8002fe4 <vApplicationIdleHook+0xf8>
          if(!(HAL_GetTick()%100)) 
 8002f7e:	f003 fbe1 	bl	8006744 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <vApplicationIdleHook+0x108>)
 8002f86:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2164      	movs	r1, #100	; 0x64
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d125      	bne.n	8002fe4 <vApplicationIdleHook+0xf8>
            BSP_LED_Off(LED_ORANGE);
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f002 fd2d 	bl	80059f8 <BSP_LED_Off>
}
 8002f9e:	e021      	b.n	8002fe4 <vApplicationIdleHook+0xf8>
        if(!(HAL_GetTick()%1000)) 
 8002fa0:	f003 fbd0 	bl	8006744 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <vApplicationIdleHook+0x10c>)
 8002fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fb2:	fb01 f303 	mul.w	r3, r1, r3
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d103      	bne.n	8002fc4 <vApplicationIdleHook+0xd8>
          BSP_LED_On(LED_ORANGE);
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	f002 fd01 	bl	80059c4 <BSP_LED_On>
}
 8002fc2:	e00f      	b.n	8002fe4 <vApplicationIdleHook+0xf8>
          if(!(HAL_GetTick()%50)) 
 8002fc4:	f003 fbbe 	bl	8006744 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <vApplicationIdleHook+0x108>)
 8002fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	2132      	movs	r1, #50	; 0x32
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <vApplicationIdleHook+0xf8>
            BSP_LED_Off(LED_ORANGE);
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f002 fd0a 	bl	80059f8 <BSP_LED_Off>
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20002b78 	.word	0x20002b78
 8002fec:	20002b64 	.word	0x20002b64
 8002ff0:	200002d4 	.word	0x200002d4
 8002ff4:	51eb851f 	.word	0x51eb851f
 8002ff8:	10624dd3 	.word	0x10624dd3

08002ffc <SENSOR_Generic_Data_Ready>:
* @param  size: input data buffer size [bytes]
* @param  timeStamp: timestamp of the latest sample in the input buffer
* @retval 
*/
void SENSOR_Generic_Data_Ready(uint16_t sId, uint8_t *buf, uint16_t size, double timeStamp)
{ 
 8002ffc:	b5b0      	push	{r4, r5, r7, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	ed87 0b00 	vstr	d0, [r7]
 800300a:	81fb      	strh	r3, [r7, #14]
 800300c:	4613      	mov	r3, r2
 800300e:	81bb      	strh	r3, [r7, #12]
  COM_SensorStatus_t * tempStatus = COM_GetSensorStatus(sId);    
 8003010:	89fb      	ldrh	r3, [r7, #14]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fdf9 	bl	8001c0c <COM_GetSensorStatus>
 800301a:	6238      	str	r0, [r7, #32]
  COM_SensorDescriptor_t * tempDescriptor = COM_GetSensorDescriptor(sId); 
 800301c:	89fb      	ldrh	r3, [r7, #14]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe fddf 	bl	8001be4 <COM_GetSensorDescriptor>
 8003026:	61f8      	str	r0, [r7, #28]
  COM_SubSensorDescriptor_t *tempSubSensorDescriptor; 
  uint16_t toSend = 0, nBytesPerSample = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800302c:	2300      	movs	r3, #0
 800302e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  
  if (sensor_first_dataReady[sId]) // Discard first set of sensor data
 8003030:	89fb      	ldrh	r3, [r7, #14]
 8003032:	4a89      	ldr	r2, [pc, #548]	; (8003258 <SENSOR_Generic_Data_Ready+0x25c>)
 8003034:	5cd3      	ldrb	r3, [r2, r3]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d020      	beq.n	800307c <SENSOR_Generic_Data_Ready+0x80>
  {
    sensor_first_dataReady[sId] = 0;    
 800303a:	89fb      	ldrh	r3, [r7, #14]
 800303c:	4a86      	ldr	r2, [pc, #536]	; (8003258 <SENSOR_Generic_Data_Ready+0x25c>)
 800303e:	2100      	movs	r1, #0
 8003040:	54d1      	strb	r1, [r2, r3]
    sensor_n_samples_acc[sId] = 0.0f;    
 8003042:	89fb      	ldrh	r3, [r7, #14]
 8003044:	4a85      	ldr	r2, [pc, #532]	; (800325c <SENSOR_Generic_Data_Ready+0x260>)
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
    tempStatus->initialOffset = (float)timeStamp;
 8003050:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003054:	f7fd fdf0 	bl	8000c38 <__aeabi_d2f>
 8003058:	4602      	mov	r2, r0
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	609a      	str	r2, [r3, #8]
    old_time_stamp[sId] = timeStamp;
 800305e:	89fb      	ldrh	r3, [r7, #14]
 8003060:	4a7f      	ldr	r2, [pc, #508]	; (8003260 <SENSOR_Generic_Data_Ready+0x264>)
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	18d1      	adds	r1, r2, r3
 8003066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800306a:	e9c1 2300 	strd	r2, r3, [r1]
    sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;
 800306e:	89fb      	ldrh	r3, [r7, #14]
 8003070:	6a3a      	ldr	r2, [r7, #32]
 8003072:	8991      	ldrh	r1, [r2, #12]
 8003074:	4a7b      	ldr	r2, [pc, #492]	; (8003264 <SENSOR_Generic_Data_Ready+0x268>)
 8003076:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
      }      
    }    
  }    
}
 800307a:	e16c      	b.n	8003356 <SENSOR_Generic_Data_Ready+0x35a>
    if(tempDescriptor->dataType == DATA_TYPE_FLOAT || tempDescriptor->dataType == DATA_TYPE_INT32 || tempDescriptor->dataType == DATA_TYPE_UINT32) 
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	7c5b      	ldrb	r3, [r3, #17]
 8003080:	2b06      	cmp	r3, #6
 8003082:	d007      	beq.n	8003094 <SENSOR_Generic_Data_Ready+0x98>
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	7c5b      	ldrb	r3, [r3, #17]
 8003088:	2b05      	cmp	r3, #5
 800308a:	d003      	beq.n	8003094 <SENSOR_Generic_Data_Ready+0x98>
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	7c5b      	ldrb	r3, [r3, #17]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d102      	bne.n	800309a <SENSOR_Generic_Data_Ready+0x9e>
      nBytesPerSample = 4;
 8003094:	2304      	movs	r3, #4
 8003096:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003098:	e014      	b.n	80030c4 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT16 || tempDescriptor->dataType == DATA_TYPE_INT16) 
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	7c5b      	ldrb	r3, [r3, #17]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d003      	beq.n	80030aa <SENSOR_Generic_Data_Ready+0xae>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	7c5b      	ldrb	r3, [r3, #17]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d102      	bne.n	80030b0 <SENSOR_Generic_Data_Ready+0xb4>
      nBytesPerSample = 2;
 80030aa:	2302      	movs	r3, #2
 80030ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80030ae:	e009      	b.n	80030c4 <SENSOR_Generic_Data_Ready+0xc8>
    else if(tempDescriptor->dataType == DATA_TYPE_UINT8 || tempDescriptor->dataType == DATA_TYPE_INT8) 
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	7c5b      	ldrb	r3, [r3, #17]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <SENSOR_Generic_Data_Ready+0xc4>
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	7c5b      	ldrb	r3, [r3, #17]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <SENSOR_Generic_Data_Ready+0xc8>
      nBytesPerSample = 1;
 80030c0:	2301      	movs	r3, #1
 80030c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint8_t totalDataPerSample = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	e01d      	b.n	800310c <SENSOR_Generic_Data_Ready+0x110>
      if (tempStatus->subSensorStatus[i].isActive)
 80030d0:	6a39      	ldr	r1, [r7, #32]
 80030d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	3324      	adds	r3, #36	; 0x24
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00f      	beq.n	8003106 <SENSOR_Generic_Data_Ready+0x10a>
        tempSubSensorDescriptor = COM_GetSubSensorDescriptor(sId, i);
 80030e6:	89fb      	ldrh	r3, [r7, #14]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fe fda1 	bl	8001c38 <COM_GetSubSensorDescriptor>
 80030f6:	61b8      	str	r0, [r7, #24]
        totalDataPerSample += tempSubSensorDescriptor->dataPerSample;     
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	789a      	ldrb	r2, [r3, #2]
 80030fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003100:	4413      	add	r3, r2
 8003102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (int i = 0; i < tempDescriptor->nSubSensors; i++)
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	3301      	adds	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003112:	461a      	mov	r2, r3
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	4293      	cmp	r3, r2
 8003118:	dbda      	blt.n	80030d0 <SENSOR_Generic_Data_Ready+0xd4>
    nBytesPerSample *= totalDataPerSample;
 800311a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800311e:	b29b      	uxth	r3, r3
 8003120:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003122:	fb12 f303 	smulbb	r3, r2, r3
 8003126:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sensor_n_samples_acc[sId] = (float)(size / nBytesPerSample);
 8003128:	89ba      	ldrh	r2, [r7, #12]
 800312a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	b29b      	uxth	r3, r3
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	89fb      	ldrh	r3, [r7, #14]
 8003138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800313c:	4a47      	ldr	r2, [pc, #284]	; (800325c <SENSOR_Generic_Data_Ready+0x260>)
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	edc3 7a00 	vstr	s15, [r3]
    tempStatus->measuredODR = sensor_n_samples_acc[sId]/(timeStamp - old_time_stamp[sId]);
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	4a44      	ldr	r2, [pc, #272]	; (800325c <SENSOR_Generic_Data_Ready+0x260>)
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd fa21 	bl	8000598 <__aeabi_f2d>
 8003156:	4604      	mov	r4, r0
 8003158:	460d      	mov	r5, r1
 800315a:	89fb      	ldrh	r3, [r7, #14]
 800315c:	4a40      	ldr	r2, [pc, #256]	; (8003260 <SENSOR_Generic_Data_Ready+0x264>)
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	e9d7 0100 	ldrd	r0, r1, [r7]
 800316a:	f7fd f8b5 	bl	80002d8 <__aeabi_dsub>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4620      	mov	r0, r4
 8003174:	4629      	mov	r1, r5
 8003176:	f7fd fb91 	bl	800089c <__aeabi_ddiv>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	f7fd fd59 	bl	8000c38 <__aeabi_d2f>
 8003186:	4602      	mov	r2, r0
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	605a      	str	r2, [r3, #4]
    old_time_stamp[sId] = timeStamp;
 800318c:	89fb      	ldrh	r3, [r7, #14]
 800318e:	4a34      	ldr	r2, [pc, #208]	; (8003260 <SENSOR_Generic_Data_Ready+0x264>)
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	18d1      	adds	r1, r2, r3
 8003194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003198:	e9c1 2300 	strd	r2, r3, [r1]
    toSend = size/nBytesPerSample;
 800319c:	89ba      	ldrh	r2, [r7, #12]
 800319e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while(toSend > 0)
 80031a6:	e0d2      	b.n	800334e <SENSOR_Generic_Data_Ready+0x352>
      if(toSend < sensor_n_samples_to_timestamp[sId] || sensor_n_samples_to_timestamp[sId] == 0)
 80031a8:	89fb      	ldrh	r3, [r7, #14]
 80031aa:	4a2e      	ldr	r2, [pc, #184]	; (8003264 <SENSOR_Generic_Data_Ready+0x268>)
 80031ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d305      	bcc.n	80031c2 <SENSOR_Generic_Data_Ready+0x1c6>
 80031b6:	89fb      	ldrh	r3, [r7, #14]
 80031b8:	4a2a      	ldr	r2, [pc, #168]	; (8003264 <SENSOR_Generic_Data_Ready+0x268>)
 80031ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d135      	bne.n	800322e <SENSOR_Generic_Data_Ready+0x232>
        if(com_status == HS_DATALOG_SD_STARTED)
 80031c2:	4b29      	ldr	r3, [pc, #164]	; (8003268 <SENSOR_Generic_Data_Ready+0x26c>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d10b      	bne.n	80031e4 <SENSOR_Generic_Data_Ready+0x1e8>
          SDM_Fill_Buffer(sId , (uint8_t *)buf, toSend * nBytesPerSample);
 80031cc:	89fb      	ldrh	r3, [r7, #14]
 80031ce:	b2d8      	uxtb	r0, r3
 80031d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80031d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80031d4:	fb12 f303 	smulbb	r3, r2, r3
 80031d8:	b29b      	uxth	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	f001 f8b9 	bl	8004354 <SDM_Fill_Buffer>
 80031e2:	e010      	b.n	8003206 <SENSOR_Generic_Data_Ready+0x20a>
        else if (com_status == HS_DATALOG_USB_STARTED )
 80031e4:	4b20      	ldr	r3, [pc, #128]	; (8003268 <SENSOR_Generic_Data_Ready+0x26c>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d10b      	bne.n	8003206 <SENSOR_Generic_Data_Ready+0x20a>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber  , (uint8_t *)buf, toSend * nBytesPerSample);
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80031f4:	b2d9      	uxtb	r1, r3
 80031f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031f8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	481a      	ldr	r0, [pc, #104]	; (800326c <SENSOR_Generic_Data_Ready+0x270>)
 8003202:	f00f fb03 	bl	801280c <USBD_WCID_STREAMING_FillTxDataBuffer>
        if(sensor_n_samples_to_timestamp[sId] != 0)
 8003206:	89fb      	ldrh	r3, [r7, #14]
 8003208:	4a16      	ldr	r2, [pc, #88]	; (8003264 <SENSOR_Generic_Data_Ready+0x268>)
 800320a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <SENSOR_Generic_Data_Ready+0x22c>
          sensor_n_samples_to_timestamp[sId] -= toSend;
 8003212:	89fb      	ldrh	r3, [r7, #14]
 8003214:	4a13      	ldr	r2, [pc, #76]	; (8003264 <SENSOR_Generic_Data_Ready+0x268>)
 8003216:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800321a:	89fb      	ldrh	r3, [r7, #14]
 800321c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800321e:	1a8a      	subs	r2, r1, r2
 8003220:	b291      	uxth	r1, r2
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <SENSOR_Generic_Data_Ready+0x268>)
 8003224:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        toSend = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800322c:	e08f      	b.n	800334e <SENSOR_Generic_Data_Ready+0x352>
        if(com_status == HS_DATALOG_SD_STARTED)
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <SENSOR_Generic_Data_Ready+0x26c>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d11b      	bne.n	8003270 <SENSOR_Generic_Data_Ready+0x274>
          SDM_Fill_Buffer(sId, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	b2d8      	uxtb	r0, r3
 800323c:	89fb      	ldrh	r3, [r7, #14]
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <SENSOR_Generic_Data_Ready+0x268>)
 8003240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003244:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003246:	fb12 f303 	smulbb	r3, r2, r3
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	f001 f880 	bl	8004354 <SDM_Fill_Buffer>
 8003254:	e021      	b.n	800329a <SENSOR_Generic_Data_Ready+0x29e>
 8003256:	bf00      	nop
 8003258:	20000028 	.word	0x20000028
 800325c:	20000a34 	.word	0x20000a34
 8003260:	20000a60 	.word	0x20000a60
 8003264:	20000ab8 	.word	0x20000ab8
 8003268:	200002d4 	.word	0x200002d4
 800326c:	20000764 	.word	0x20000764
        else if (com_status == HS_DATALOG_USB_STARTED )
 8003270:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <SENSOR_Generic_Data_Ready+0x364>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d10f      	bne.n	800329a <SENSOR_Generic_Data_Ready+0x29e>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)buf, sensor_n_samples_to_timestamp[sId] * nBytesPerSample);
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003280:	b2d9      	uxtb	r1, r3
 8003282:	89fb      	ldrh	r3, [r7, #14]
 8003284:	4a37      	ldr	r2, [pc, #220]	; (8003364 <SENSOR_Generic_Data_Ready+0x368>)
 8003286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800328a:	461a      	mov	r2, r3
 800328c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4834      	ldr	r0, [pc, #208]	; (8003368 <SENSOR_Generic_Data_Ready+0x36c>)
 8003296:	f00f fab9 	bl	801280c <USBD_WCID_STREAMING_FillTxDataBuffer>
        buf+=sensor_n_samples_to_timestamp[sId] * nBytesPerSample;
 800329a:	89fb      	ldrh	r3, [r7, #14]
 800329c:	4a31      	ldr	r2, [pc, #196]	; (8003364 <SENSOR_Generic_Data_Ready+0x368>)
 800329e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032a2:	461a      	mov	r2, r3
 80032a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4413      	add	r3, r2
 80032b0:	60bb      	str	r3, [r7, #8]
        toSend -= sensor_n_samples_to_timestamp[sId];
 80032b2:	89fb      	ldrh	r3, [r7, #14]
 80032b4:	4a2b      	ldr	r2, [pc, #172]	; (8003364 <SENSOR_Generic_Data_Ready+0x368>)
 80032b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	85fb      	strh	r3, [r7, #46]	; 0x2e
        double newTS = timeStamp - ((1.0 / (double)tempStatus->measuredODR) * toSend);   
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd f967 	bl	8000598 <__aeabi_f2d>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	f04f 0000 	mov.w	r0, #0
 80032d2:	4926      	ldr	r1, [pc, #152]	; (800336c <SENSOR_Generic_Data_Ready+0x370>)
 80032d4:	f7fd fae2 	bl	800089c <__aeabi_ddiv>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4614      	mov	r4, r2
 80032de:	461d      	mov	r5, r3
 80032e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f946 	bl	8000574 <__aeabi_i2d>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4620      	mov	r0, r4
 80032ee:	4629      	mov	r1, r5
 80032f0:	f7fd f9aa 	bl	8000648 <__aeabi_dmul>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032fc:	f7fc ffec 	bl	80002d8 <__aeabi_dsub>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if(com_status == HS_DATALOG_SD_STARTED)
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <SENSOR_Generic_Data_Ready+0x364>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d108      	bne.n	8003324 <SENSOR_Generic_Data_Ready+0x328>
          SDM_Fill_Buffer(sId, (uint8_t *)&newTS, 8);
 8003312:	89fb      	ldrh	r3, [r7, #14]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f107 0110 	add.w	r1, r7, #16
 800331a:	2208      	movs	r2, #8
 800331c:	4618      	mov	r0, r3
 800331e:	f001 f819 	bl	8004354 <SDM_Fill_Buffer>
 8003322:	e00e      	b.n	8003342 <SENSOR_Generic_Data_Ready+0x346>
        else if (com_status == HS_DATALOG_USB_STARTED )
 8003324:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <SENSOR_Generic_Data_Ready+0x364>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d109      	bne.n	8003342 <SENSOR_Generic_Data_Ready+0x346>
          USBD_WCID_STREAMING_FillTxDataBuffer(&USBD_Device, tempStatus->comChannelNumber, (uint8_t *)&newTS, 8);
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003334:	b2d9      	uxtb	r1, r3
 8003336:	f107 0210 	add.w	r2, r7, #16
 800333a:	2308      	movs	r3, #8
 800333c:	480a      	ldr	r0, [pc, #40]	; (8003368 <SENSOR_Generic_Data_Ready+0x36c>)
 800333e:	f00f fa65 	bl	801280c <USBD_WCID_STREAMING_FillTxDataBuffer>
        sensor_n_samples_to_timestamp[sId] = tempStatus->samplesPerTimestamp;  
 8003342:	89fb      	ldrh	r3, [r7, #14]
 8003344:	6a3a      	ldr	r2, [r7, #32]
 8003346:	8991      	ldrh	r1, [r2, #12]
 8003348:	4a06      	ldr	r2, [pc, #24]	; (8003364 <SENSOR_Generic_Data_Ready+0x368>)
 800334a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    while(toSend > 0)
 800334e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003350:	2b00      	cmp	r3, #0
 8003352:	f47f af29 	bne.w	80031a8 <SENSOR_Generic_Data_Ready+0x1ac>
}
 8003356:	bf00      	nop
 8003358:	3730      	adds	r7, #48	; 0x30
 800335a:	46bd      	mov	sp, r7
 800335c:	bdb0      	pop	{r4, r5, r7, pc}
 800335e:	bf00      	nop
 8003360:	200002d4 	.word	0x200002d4
 8003364:	20000ab8 	.word	0x20000ab8
 8003368:	20000764 	.word	0x20000764
 800336c:	3ff00000 	.word	0x3ff00000

08003370 <IIS3DWB_Data_Ready>:


/*  ---------- Sensors data ready functions ----------- */
void IIS3DWB_Data_Ready(uint8_t * buf, uint16_t size, double timeStamp)
{  
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	460b      	mov	r3, r1
 800337a:	ed87 0b00 	vstr	d0, [r7]
 800337e:	817b      	strh	r3, [r7, #10]
  SENSOR_Generic_Data_Ready(iis3dwb_com_id, buf, size, timeStamp);
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <IIS3DWB_Data_Ready+0x2c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b29b      	uxth	r3, r3
 8003386:	897a      	ldrh	r2, [r7, #10]
 8003388:	ed97 0b00 	vldr	d0, [r7]
 800338c:	68f9      	ldr	r1, [r7, #12]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fe34 	bl	8002ffc <SENSOR_Generic_Data_Ready>
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000a28 	.word	0x20000a28

080033a0 <Peripheral_MSP_Init_All>:
}



void Peripheral_MSP_Init_All(void)
{  
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  HTS221_Peripheral_Init();
  IMP34DT05_Peripheral_Init();
  MP23ABS1_Peripheral_Init();
  ISM330DHCX_Peripheral_Init();
#endif
  IIS3DWB_Peripheral_Init();
 80033a4:	f7ff f890 	bl	80024c8 <IIS3DWB_Peripheral_Init>
#if 0
  IIS2DH_Peripheral_Init();
#endif
}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}

080033ac <Peripheral_OS_Init_All>:


void Peripheral_OS_Init_All(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  HTS221_OS_Init();
  IMP34DT05_OS_Init();
  MP23ABS1_OS_Init();
  ISM330DHCX_OS_Init();
#endif
  IIS3DWB_OS_Init();
 80033b0:	f7ff f924 	bl	80025fc <IIS3DWB_OS_Init>
#if 0
  IIS2DH_OS_Init();
#endif
}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d002      	beq.n	80033ce <HAL_GPIO_EXTI_Callback+0x16>
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d004      	beq.n	80033d6 <HAL_GPIO_EXTI_Callback+0x1e>
		  userButtonCallback(GPIO_Pin);
	  case  IIS3DWB_INT1_Pin:
		  UpdateTimerValue();

	  default:
		break;
 80033cc:	e005      	b.n	80033da <HAL_GPIO_EXTI_Callback+0x22>
		  userButtonCallback(GPIO_Pin);
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f001 f96a 	bl	80046aa <userButtonCallback>
		  UpdateTimerValue();
 80033d6:	f7ff faf9 	bl	80029cc <UpdateTimerValue>
		break;
 80033da:	bf00      	nop
  }
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void Error_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  while(1);
 80033e8:	e7fe      	b.n	80033e8 <Error_Handler+0x4>
	...

080033ec <MP23ABS1_Set_State>:
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }
}

void MP23ABS1_Set_State(SM_Sensor_State_t newState)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
  MP23ABS1_Sensor_State = newState;
 80033f6:	4a04      	ldr	r2, [pc, #16]	; (8003408 <MP23ABS1_Set_State+0x1c>)
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	7013      	strb	r3, [r2, #0]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	20000033 	.word	0x20000033

0800340c <MP23ABS1_Start>:
  MP23ABS1_Init_Param.FS[0] = newFS1;
  MP23ABS1_Init_Param.FS[0] = newFS2;
}

void MP23ABS1_Start(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8003410:	2003      	movs	r0, #3
 8003412:	f7ff ffeb 	bl	80033ec <MP23ABS1_Set_State>
  osThreadResume(MP23ABS1_Thread_Id);
 8003416:	4b03      	ldr	r3, [pc, #12]	; (8003424 <MP23ABS1_Start+0x18>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f014 fa46 	bl	80178ac <osThreadResume>
}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000bb0 	.word	0x20000bb0

08003428 <MP23ABS1_Stop>:

void MP23ABS1_Stop(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  MP23ABS1_Set_State(SM_SENSOR_STATE_SUSPENDING);
 800342c:	2001      	movs	r0, #1
 800342e:	f7ff ffdd 	bl	80033ec <MP23ABS1_Set_State>
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b09c      	sub	sp, #112	; 0x70
 800343c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800343e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	60da      	str	r2, [r3, #12]
 800344c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800344e:	2300      	movs	r3, #0
 8003450:	65bb      	str	r3, [r7, #88]	; 0x58
  RTC_AlarmTypeDef sAlarm = {0};
 8003452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003456:	222c      	movs	r2, #44	; 0x2c
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f01a fe3a 	bl	801e0d4 <memset>
  RTC_TamperTypeDef sTamper = {0};
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	2228      	movs	r2, #40	; 0x28
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f01a fe34 	bl	801e0d4 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800346c:	4b3f      	ldr	r3, [pc, #252]	; (800356c <MX_RTC_Init+0x134>)
 800346e:	4a40      	ldr	r2, [pc, #256]	; (8003570 <MX_RTC_Init+0x138>)
 8003470:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003472:	4b3e      	ldr	r3, [pc, #248]	; (800356c <MX_RTC_Init+0x134>)
 8003474:	2200      	movs	r2, #0
 8003476:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003478:	4b3c      	ldr	r3, [pc, #240]	; (800356c <MX_RTC_Init+0x134>)
 800347a:	227f      	movs	r2, #127	; 0x7f
 800347c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800347e:	4b3b      	ldr	r3, [pc, #236]	; (800356c <MX_RTC_Init+0x134>)
 8003480:	22ff      	movs	r2, #255	; 0xff
 8003482:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <MX_RTC_Init+0x134>)
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800348a:	4b38      	ldr	r3, [pc, #224]	; (800356c <MX_RTC_Init+0x134>)
 800348c:	2200      	movs	r2, #0
 800348e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003490:	4b36      	ldr	r3, [pc, #216]	; (800356c <MX_RTC_Init+0x134>)
 8003492:	2200      	movs	r2, #0
 8003494:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003496:	4b35      	ldr	r3, [pc, #212]	; (800356c <MX_RTC_Init+0x134>)
 8003498:	2200      	movs	r2, #0
 800349a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800349c:	4833      	ldr	r0, [pc, #204]	; (800356c <MX_RTC_Init+0x134>)
 800349e:	f008 fcb7 	bl	800be10 <HAL_RTC_Init>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  sTime.Minutes = 0x0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  sTime.Seconds = 0x0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	66bb      	str	r3, [r7, #104]	; 0x68
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80034b8:	2300      	movs	r3, #0
 80034ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80034bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034c0:	2201      	movs	r2, #1
 80034c2:	4619      	mov	r1, r3
 80034c4:	4829      	ldr	r0, [pc, #164]	; (800356c <MX_RTC_Init+0x134>)
 80034c6:	f008 fd1e 	bl	800bf06 <HAL_RTC_SetTime>
  {
//    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  sDate.Month = RTC_MONTH_JANUARY;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  sDate.Date = 0x1;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
  sDate.Year = 0x0;
 80034dc:	2300      	movs	r3, #0
 80034de:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80034e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034e6:	2201      	movs	r2, #1
 80034e8:	4619      	mov	r1, r3
 80034ea:	4820      	ldr	r0, [pc, #128]	; (800356c <MX_RTC_Init+0x134>)
 80034ec:	f008 fda8 	bl	800c040 <HAL_RTC_SetDate>
  {
//   Error_Handler();
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sAlarm.AlarmTime.Minutes = 0x0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sAlarm.AlarmTime.Seconds = 0x15;
 80034fc:	2315      	movs	r3, #21
 80034fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003502:	2300      	movs	r3, #0
 8003504:	633b      	str	r3, [r7, #48]	; 0x30
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003506:	2300      	movs	r3, #0
 8003508:	63bb      	str	r3, [r7, #56]	; 0x38
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800350e:	2300      	movs	r3, #0
 8003510:	643b      	str	r3, [r7, #64]	; 0x40
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003512:	2300      	movs	r3, #0
 8003514:	64bb      	str	r3, [r7, #72]	; 0x48
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003516:	2300      	movs	r3, #0
 8003518:	64fb      	str	r3, [r7, #76]	; 0x4c
  sAlarm.AlarmDateWeekDay = 0x1;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  sAlarm.Alarm = RTC_ALARM_A;
 8003520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003524:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800352a:	2201      	movs	r2, #1
 800352c:	4619      	mov	r1, r3
 800352e:	480f      	ldr	r0, [pc, #60]	; (800356c <MX_RTC_Init+0x134>)
 8003530:	f008 fe0e 	bl	800c150 <HAL_RTC_SetAlarm_IT>
  {
//    Error_Handler();
  }
  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8003534:	2301      	movs	r3, #1
 8003536:	607b      	str	r3, [r7, #4]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8003544:	2300      	movs	r3, #0
 8003546:	61bb      	str	r3, [r7, #24]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 800354c:	2300      	movs	r3, #0
 800354e:	623b      	str	r3, [r7, #32]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8003550:	2300      	movs	r3, #0
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8003558:	1d3b      	adds	r3, r7, #4
 800355a:	4619      	mov	r1, r3
 800355c:	4803      	ldr	r0, [pc, #12]	; (800356c <MX_RTC_Init+0x134>)
 800355e:	f008 ffeb 	bl	800c538 <HAL_RTCEx_SetTamper>
  {
//    Error_Handler();
  }

}
 8003562:	bf00      	nop
 8003564:	3770      	adds	r7, #112	; 0x70
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000bb4 	.word	0x20000bb4
 8003570:	40002800 	.word	0x40002800

08003574 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <HAL_RTC_MspInit+0x3c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10f      	bne.n	80035a6 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RTC_MspInit+0x40>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RTC_MspInit+0x40>)
 800358e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8003596:	2200      	movs	r2, #0
 8003598:	2100      	movs	r1, #0
 800359a:	2029      	movs	r0, #41	; 0x29
 800359c:	f004 fe2d 	bl	80081fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80035a0:	2029      	movs	r0, #41	; 0x29
 80035a2:	f004 fe46 	bl	8008232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40002800 	.word	0x40002800
 80035b4:	40021000 	.word	0x40021000

080035b8 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80035c2:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <SD_CheckStatus+0x38>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80035c8:	f003 f81e 	bl	8006608 <BSP_SD_GetCardState>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d107      	bne.n	80035e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <SD_CheckStatus+0x38>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <SD_CheckStatus+0x38>)
 80035e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80035e2:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <SD_CheckStatus+0x38>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	b2db      	uxtb	r3, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000034 	.word	0x20000034

080035f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <SD_initialize+0x38>)
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003604:	f002 fefe 	bl	8006404 <BSP_SD_Init>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d107      	bne.n	800361e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff ffd1 	bl	80035b8 <SD_CheckStatus>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <SD_initialize+0x38>)
 800361c:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800361e:	4b03      	ldr	r3, [pc, #12]	; (800362c <SD_initialize+0x38>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b2db      	uxtb	r3, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000034 	.word	0x20000034

08003630 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff ffbb 	bl	80035b8 <SD_CheckStatus>
 8003642:	4603      	mov	r3, r0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	4603      	mov	r3, r0
 800365a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
  ReadStatus = 0;
 8003660:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <SD_read+0x94>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68b8      	ldr	r0, [r7, #8]
 800366c:	f002 ff3c 	bl	80064e8 <BSP_SD_ReadBlocks_DMA>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d12f      	bne.n	80036d6 <SD_read+0x8a>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 8003676:	f003 f865 	bl	8006744 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800367c:	bf00      	nop
 800367e:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <SD_read+0x94>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d108      	bne.n	8003698 <SD_read+0x4c>
 8003686:	f003 f85d 	bl	8006744 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f247 522f 	movw	r2, #29999	; 0x752f
 8003694:	4293      	cmp	r3, r2
 8003696:	d9f2      	bls.n	800367e <SD_read+0x32>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <SD_read+0x94>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <SD_read+0x5a>
    {
      res = RES_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	75fb      	strb	r3, [r7, #23]
 80036a4:	e017      	b.n	80036d6 <SD_read+0x8a>
    }
    else
    {
      ReadStatus = 0;
 80036a6:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <SD_read+0x94>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 80036ac:	f003 f84a 	bl	8006744 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80036b2:	e007      	b.n	80036c4 <SD_read+0x78>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80036b4:	f002 ffa8 	bl	8006608 <BSP_SD_GetCardState>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d102      	bne.n	80036c4 <SD_read+0x78>
        {
          res = RES_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	75fb      	strb	r3, [r7, #23]
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
           break;
 80036c2:	e008      	b.n	80036d6 <SD_read+0x8a>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80036c4:	f003 f83e 	bl	8006744 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f247 522f 	movw	r2, #29999	; 0x752f
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d9ee      	bls.n	80036b4 <SD_read+0x68>
        }
      }
    }
  }

  return res;
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20000bdc 	.word	0x20000bdc

080036e4 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4603      	mov	r3, r0
 80036f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	75fb      	strb	r3, [r7, #23]
  WriteStatus = 0;
 80036f8:	4b1c      	ldr	r3, [pc, #112]	; (800376c <SD_write+0x88>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	68b8      	ldr	r0, [r7, #8]
 8003704:	f002 ff0a 	bl	800651c <BSP_SD_WriteBlocks_DMA>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d128      	bne.n	8003760 <SD_write+0x7c>
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */
//    BSP_DBG_On(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
    timeout = HAL_GetTick();
 800370e:	f003 f819 	bl	8006744 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]
    osSemaphoreWait(sdioSem_id, SD_TIMEOUT);
 8003714:	4b16      	ldr	r3, [pc, #88]	; (8003770 <SD_write+0x8c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f247 5130 	movw	r1, #30000	; 0x7530
 800371c:	4618      	mov	r0, r3
 800371e:	f013 fe63 	bl	80173e8 <osSemaphoreWait>
//    {
//    }
//    BSP_DBG_Off(DBG5);
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 8003722:	4b12      	ldr	r3, [pc, #72]	; (800376c <SD_write+0x88>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d102      	bne.n	8003730 <SD_write+0x4c>
    {
      res = RES_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
 800372e:	e017      	b.n	8003760 <SD_write+0x7c>
    }
    else
    {
      WriteStatus = 0;
 8003730:	4b0e      	ldr	r3, [pc, #56]	; (800376c <SD_write+0x88>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
      timeout = HAL_GetTick();
 8003736:	f003 f805 	bl	8006744 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800373c:	e007      	b.n	800374e <SD_write+0x6a>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800373e:	f002 ff63 	bl	8006608 <BSP_SD_GetCardState>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <SD_write+0x6a>
        {
          res = RES_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	75fb      	strb	r3, [r7, #23]
          break;
 800374c:	e008      	b.n	8003760 <SD_write+0x7c>
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800374e:	f002 fff9 	bl	8006744 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f247 522f 	movw	r2, #29999	; 0x752f
 800375c:	4293      	cmp	r3, r2
 800375e:	d9ee      	bls.n	800373e <SD_write+0x5a>
        }
      }
    }
  }

  return res;
 8003760:	7dfb      	ldrb	r3, [r7, #23]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000bd8 	.word	0x20000bd8
 8003770:	20002b0c 	.word	0x20002b0c

08003774 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	; 0x30
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	603a      	str	r2, [r7, #0]
 800377e:	71fb      	strb	r3, [r7, #7]
 8003780:	460b      	mov	r3, r1
 8003782:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800378a:	4b25      	ldr	r3, [pc, #148]	; (8003820 <SD_ioctl+0xac>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <SD_ioctl+0x28>
 8003798:	2303      	movs	r3, #3
 800379a:	e03c      	b.n	8003816 <SD_ioctl+0xa2>

  switch (cmd)
 800379c:	79bb      	ldrb	r3, [r7, #6]
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d834      	bhi.n	800380c <SD_ioctl+0x98>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <SD_ioctl+0x34>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037c1 	.word	0x080037c1
 80037b0:	080037d9 	.word	0x080037d9
 80037b4:	080037f3 	.word	0x080037f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80037be:	e028      	b.n	8003812 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80037c0:	f107 0308 	add.w	r3, r7, #8
 80037c4:	4618      	mov	r0, r3
 80037c6:	f002 ff2f 	bl	8006628 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80037ca:	6a3a      	ldr	r2, [r7, #32]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80037d6:	e01c      	b.n	8003812 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80037d8:	f107 0308 	add.w	r3, r7, #8
 80037dc:	4618      	mov	r0, r3
 80037de:	f002 ff23 	bl	8006628 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80037f0:	e00f      	b.n	8003812 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	4618      	mov	r0, r3
 80037f8:	f002 ff16 	bl	8006628 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	0a5a      	lsrs	r2, r3, #9
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800380a:	e002      	b.n	8003812 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800380c:	2304      	movs	r3, #4
 800380e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8003812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003816:	4618      	mov	r0, r3
 8003818:	3730      	adds	r7, #48	; 0x30
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000034 	.word	0x20000034

08003824 <BSP_SD_WriteCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_WriteCpltCallback(uint32_t SdCard)
void BSP_SD_WriteCpltCallback(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  WriteStatus = 1;
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <BSP_SD_WriteCpltCallback+0x18>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]
  osSemaphoreRelease(sdioSem_id);
 800382e:	4b04      	ldr	r3, [pc, #16]	; (8003840 <BSP_SD_WriteCpltCallback+0x1c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f013 fe26 	bl	8017484 <osSemaphoreRelease>
}
 8003838:	bf00      	nop
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000bd8 	.word	0x20000bd8
 8003840:	20002b0c 	.word	0x20002b0c

08003844 <BSP_SD_ReadCpltCallback>:
    prototype
   ===============================================================================
  */
//void BSP_SD_ReadCpltCallback(uint32_t SdCard)
void BSP_SD_ReadCpltCallback(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <BSP_SD_ReadCpltCallback+0x14>)
 800384a:	2201      	movs	r2, #1
 800384c:	601a      	str	r2, [r3, #0]
}
 800384e:	bf00      	nop
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	20000bdc 	.word	0x20000bdc

0800385c <Enable_Sensors>:
uint32_t SD_Logging_Enabled = 0;
#endif

/*----------------------------------------------------------------------------*/
void Enable_Sensors(void)
{  
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* Comment or uncomment each of the following lines
  * to chose which sensor you want to log.         */
  
  Activate_Sensor(iis3dwb_com_id);
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <Enable_Sensors+0x14>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f805 	bl	8003874 <Activate_Sensor>
  Activate_Sensor(mp23abs1_com_id);
  Activate_Sensor(ism330dhcx_com_id);
  Activate_Sensor(lps22hh_com_id);
  Activate_Sensor(stts751_com_id);
#endif
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000a28 	.word	0x20000a28

08003874 <Activate_Sensor>:


void Activate_Sensor(uint32_t id)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  COM_SensorStatus_t * sensor_status = COM_GetSensorStatus(id);  
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe f9c3 	bl	8001c0c <COM_GetSensorStatus>
 8003886:	60f8      	str	r0, [r7, #12]
  sensor_status->isActive = 1;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	739a      	strb	r2, [r3, #14]
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <SDM_Thread>:



/*----------------------------------------------------------------------------*/
static void SDM_Thread(void const *argument)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b09a      	sub	sp, #104	; 0x68
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  (void)argument;
  osEvent evt;
  DIR dir;
  static FILINFO fno;
  int isJSON = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	667b      	str	r3, [r7, #100]	; 0x64
  
  if (BSP_SD_IsDetected())
 80038a4:	f002 fe06 	bl	80064b4 <BSP_SD_IsDetected>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d063      	beq.n	8003976 <SDM_Thread+0xde>
  {        
    if (init_SD_peripheral != 1)
 80038ae:	4b91      	ldr	r3, [pc, #580]	; (8003af4 <SDM_Thread+0x25c>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d004      	beq.n	80038c0 <SDM_Thread+0x28>
    {
      SDM_SD_Init();
 80038b6:	f000 f9f9 	bl	8003cac <SDM_SD_Init>
      init_SD_peripheral = 1;
 80038ba:	4b8e      	ldr	r3, [pc, #568]	; (8003af4 <SDM_Thread+0x25c>)
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
    }
    
    /* Check if a custom configuration JSON is available in the root folder of the SD Card*/   
    (void)f_opendir(&dir, "/"); /* Open the root directory */
 80038c0:	f107 030c 	add.w	r3, r7, #12
 80038c4:	498c      	ldr	r1, [pc, #560]	; (8003af8 <SDM_Thread+0x260>)
 80038c6:	4618      	mov	r0, r3
 80038c8:	f013 f986 	bl	8016bd8 <f_opendir>
    
    for (;;) 
    {
      (void)f_readdir(&dir, &fno); /* Read files in root folder */
 80038cc:	f107 030c 	add.w	r3, r7, #12
 80038d0:	498a      	ldr	r1, [pc, #552]	; (8003afc <SDM_Thread+0x264>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	f013 fa19 	bl	8016d0a <f_readdir>
      if (fno.fname[0] == 0) break;
 80038d8:	4b88      	ldr	r3, [pc, #544]	; (8003afc <SDM_Thread+0x264>)
 80038da:	7d9b      	ldrb	r3, [r3, #22]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d034      	beq.n	800394a <SDM_Thread+0xb2>
      if (fno.fattrib & AM_ARC) /* It is a file. */
 80038e0:	4b86      	ldr	r3, [pc, #536]	; (8003afc <SDM_Thread+0x264>)
 80038e2:	7a1b      	ldrb	r3, [r3, #8]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0ef      	beq.n	80038cc <SDM_Thread+0x34>
      {
        isJSON = strcmp(".json",fno.fname);
 80038ec:	4984      	ldr	r1, [pc, #528]	; (8003b00 <SDM_Thread+0x268>)
 80038ee:	4885      	ldr	r0, [pc, #532]	; (8003b04 <SDM_Thread+0x26c>)
 80038f0:	f7fc fc86 	bl	8000200 <strcmp>
 80038f4:	6678      	str	r0, [r7, #100]	; 0x64
        if (isJSON)
 80038f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d028      	beq.n	800394e <SDM_Thread+0xb6>
        {
          if(f_open(&FileConfigJSON, fno.fname, FA_OPEN_EXISTING | FA_READ) == FR_OK)
 80038fc:	2201      	movs	r2, #1
 80038fe:	4980      	ldr	r1, [pc, #512]	; (8003b00 <SDM_Thread+0x268>)
 8003900:	4881      	ldr	r0, [pc, #516]	; (8003b08 <SDM_Thread+0x270>)
 8003902:	f012 fc4f 	bl	80161a4 <f_open>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d120      	bne.n	800394e <SDM_Thread+0xb6>
          {  
            char* config_JSON_string = NULL;
 800390c:	2300      	movs	r3, #0
 800390e:	663b      	str	r3, [r7, #96]	; 0x60
            int sizeFile;
            uint32_t br;  
            sizeFile = f_size(&FileConfigJSON)+1;
 8003910:	4b7d      	ldr	r3, [pc, #500]	; (8003b08 <SDM_Thread+0x270>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	3301      	adds	r3, #1
 8003916:	65fb      	str	r3, [r7, #92]	; 0x5c
            config_JSON_string = HSD_malloc(sizeFile);
 8003918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391a:	4618      	mov	r0, r3
 800391c:	f01a fba2 	bl	801e064 <malloc>
 8003920:	4603      	mov	r3, r0
 8003922:	663b      	str	r3, [r7, #96]	; 0x60
            f_read (&FileConfigJSON, config_JSON_string, sizeFile, &br);
 8003924:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800392c:	4876      	ldr	r0, [pc, #472]	; (8003b08 <SDM_Thread+0x270>)
 800392e:	f012 fdf7 	bl	8016520 <f_read>
            SDM_ReadJSON(config_JSON_string);
 8003932:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003934:	f000 fe6c 	bl	8004610 <SDM_ReadJSON>
            HSD_JSON_free(config_JSON_string);
 8003938:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800393a:	f7fd fb99 	bl	8001070 <HSD_JSON_free>
            config_JSON_string = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	663b      	str	r3, [r7, #96]	; 0x60
            f_close(&FileConfigJSON);
 8003942:	4871      	ldr	r0, [pc, #452]	; (8003b08 <SDM_Thread+0x270>)
 8003944:	f013 f91e 	bl	8016b84 <f_close>
          }
        }
        break; 
 8003948:	e001      	b.n	800394e <SDM_Thread+0xb6>
      if (fno.fname[0] == 0) break;
 800394a:	bf00      	nop
 800394c:	e000      	b.n	8003950 <SDM_Thread+0xb8>
        break; 
 800394e:	bf00      	nop
      }
    }
    f_closedir(&dir);
 8003950:	f107 030c 	add.w	r3, r7, #12
 8003954:	4618      	mov	r0, r3
 8003956:	f013 f9b2 	bl	8016cbe <f_closedir>
    
    if (isJSON == 0)
 800395a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <SDM_Thread+0xcc>
    {
      Enable_Sensors();    
 8003960:	f7ff ff7c 	bl	800385c <Enable_Sensors>
    }
    
    if (init_SD_peripheral != 0)
 8003964:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <SDM_Thread+0x25c>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d004      	beq.n	8003976 <SDM_Thread+0xde>
    {
      SDM_SD_DeInit();
 800396c:	f000 f9c6 	bl	8003cfc <SDM_SD_DeInit>
      init_SD_peripheral = 0;
 8003970:	4b60      	ldr	r3, [pc, #384]	; (8003af4 <SDM_Thread+0x25c>)
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
    }   
  }
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SDM_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SDM_DEBUG_PIN );
 8003976:	2102      	movs	r1, #2
 8003978:	2000      	movs	r0, #0
 800397a:	f015 fc1b 	bl	80191b4 <vTaskSetApplicationTaskTag>
#endif
  for (;;)
  {
    BSP_LED_Off(LED1); 
 800397e:	2000      	movs	r0, #0
 8003980:	f002 f83a 	bl	80059f8 <BSP_LED_Off>
    
    /* If the battery is too low close the file and turn off the system */
    if(BatteryLow == 1)
 8003984:	4b61      	ldr	r3, [pc, #388]	; (8003b0c <SDM_Thread+0x274>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d117      	bne.n	80039be <SDM_Thread+0x126>
    {
#ifdef LOG_ERROR
      batt_error();
#endif      
      SM_TIM_Stop();
 800398e:	f001 fa97 	bl	8004ec0 <SM_TIM_Stop>
      if(SDM_CloseFiles() == 0)
 8003992:	f000 fb9d 	bl	80040d0 <SDM_CloseFiles>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d102      	bne.n	80039a2 <SDM_Thread+0x10a>
      {
        SD_Logging_Active = 0;
 800399c:	4b5c      	ldr	r3, [pc, #368]	; (8003b10 <SDM_Thread+0x278>)
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
      }
      SDM_Memory_Deinit();
 80039a2:	f000 f909 	bl	8003bb8 <SDM_Memory_Deinit>
      
      if (init_SD_peripheral != 0)
 80039a6:	4b53      	ldr	r3, [pc, #332]	; (8003af4 <SDM_Thread+0x25c>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <SDM_Thread+0x120>
      {
        SDM_SD_DeInit();
 80039ae:	f000 f9a5 	bl	8003cfc <SDM_SD_DeInit>
        init_SD_peripheral = 0;
 80039b2:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <SDM_Thread+0x25c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
      }
      BSP_BC_CmdSend(SHIPPING_MODE_ON);
 80039b8:	2017      	movs	r0, #23
 80039ba:	f002 f83f 	bl	8005a3c <BSP_BC_CmdSend>
    }      
    
    evt = osMessageGet(sdThreadQueue_id, osWaitForever);  // wait for message      
 80039be:	4b55      	ldr	r3, [pc, #340]	; (8003b14 <SDM_Thread+0x27c>)
 80039c0:	6819      	ldr	r1, [r3, #0]
 80039c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039c6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ca:	4618      	mov	r0, r3
 80039cc:	f013 fee2 	bl	8017794 <osMessageGet>
    
    if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 80039d0:	4b51      	ldr	r3, [pc, #324]	; (8003b18 <SDM_Thread+0x280>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d004      	beq.n	80039e4 <SDM_Thread+0x14c>
 80039da:	4b4f      	ldr	r3, [pc, #316]	; (8003b18 <SDM_Thread+0x280>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d1cc      	bne.n	800397e <SDM_Thread+0xe6>
    {      
      BSP_LED_On(LED1);
 80039e4:	2000      	movs	r0, #0
 80039e6:	f001 ffed 	bl	80059c4 <BSP_LED_On>
      
      if (evt.status == osEventMessage)
 80039ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d1c6      	bne.n	800397e <SDM_Thread+0xe6>
      {
        if(evt.value.v == SDM_START_STOP)
 80039f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f2:	f248 0201 	movw	r2, #32769	; 0x8001
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d14b      	bne.n	8003a92 <SDM_Thread+0x1fa>
        {
          if(SD_Logging_Active == 0)
 80039fa:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <SDM_Thread+0x278>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d12a      	bne.n	8003a58 <SDM_Thread+0x1c0>
          {
            com_status = HS_DATALOG_SD_STARTED;            
 8003a02:	4b45      	ldr	r3, [pc, #276]	; (8003b18 <SDM_Thread+0x280>)
 8003a04:	2202      	movs	r2, #2
 8003a06:	701a      	strb	r2, [r3, #0]
            SM_TIM_Start();
 8003a08:	f001 fa50 	bl	8004eac <SM_TIM_Start>
            if (BSP_SD_IsDetected())
 8003a0c:	f002 fd52 	bl	80064b4 <BSP_SD_IsDetected>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01c      	beq.n	8003a50 <SDM_Thread+0x1b8>
            {              
              if (init_SD_peripheral != 1)
 8003a16:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <SDM_Thread+0x25c>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d004      	beq.n	8003a28 <SDM_Thread+0x190>
              {
                SDM_SD_Init();
 8003a1e:	f000 f945 	bl	8003cac <SDM_SD_Init>
                init_SD_peripheral = 1;
 8003a22:	4b34      	ldr	r3, [pc, #208]	; (8003af4 <SDM_Thread+0x25c>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
              }
              SD_present = 1;
 8003a28:	4b3c      	ldr	r3, [pc, #240]	; (8003b1c <SDM_Thread+0x284>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
              if(SDM_InitFiles() == 0)
 8003a2e:	f000 fa51 	bl	8003ed4 <SDM_InitFiles>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <SDM_Thread+0x1ac>
              {
                SD_Logging_Active = 1;
 8003a38:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <SDM_Thread+0x278>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]
                BSP_LED_Off(LED_ORANGE);
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f001 ffda 	bl	80059f8 <BSP_LED_Off>
              }
              testTime = HAL_GetTick();
 8003a44:	f002 fe7e 	bl	8006744 <HAL_GetTick>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	4a35      	ldr	r2, [pc, #212]	; (8003b20 <SDM_Thread+0x288>)
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e796      	b.n	800397e <SDM_Thread+0xe6>
            }
            else
            {
              SD_present = 0;
 8003a50:	4b32      	ldr	r3, [pc, #200]	; (8003b1c <SDM_Thread+0x284>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	e792      	b.n	800397e <SDM_Thread+0xe6>
            }
          }
          else if (SD_Logging_Active == 1)
 8003a58:	4b2d      	ldr	r3, [pc, #180]	; (8003b10 <SDM_Thread+0x278>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d18e      	bne.n	800397e <SDM_Thread+0xe6>
          {      
            SM_TIM_Stop();
 8003a60:	f001 fa2e 	bl	8004ec0 <SM_TIM_Stop>
            
            if(SDM_CloseFiles() == 0)
 8003a64:	f000 fb34 	bl	80040d0 <SDM_CloseFiles>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <SDM_Thread+0x1dc>
            {
              SD_Logging_Active = 0;
 8003a6e:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <SDM_Thread+0x278>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
            }
            SDM_Memory_Deinit();
 8003a74:	f000 f8a0 	bl	8003bb8 <SDM_Memory_Deinit>
            
            if (init_SD_peripheral != 0)
 8003a78:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <SDM_Thread+0x25c>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <SDM_Thread+0x1f2>
            {
              SDM_SD_DeInit();
 8003a80:	f000 f93c 	bl	8003cfc <SDM_SD_DeInit>
              init_SD_peripheral = 0;
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <SDM_Thread+0x25c>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
            }
            com_status = HS_DATALOG_IDLE;
 8003a8a:	4b23      	ldr	r3, [pc, #140]	; (8003b18 <SDM_Thread+0x280>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	e775      	b.n	800397e <SDM_Thread+0xe6>
          }
        }
        else
        {
          if(evt.value.v & SDM_DATA_READY_MASK)
 8003a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f43f af70 	beq.w	800397e <SDM_Thread+0xe6>
          {
            COM_SensorStatus_t * sensor_status; 
            uint32_t buf_size;
            uint8_t sensor_id = (uint8_t)(evt.value.v & SDM_SENSOR_ID_MASK);
 8003a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            {
              oldTime[sensor_id] = HAL_GetTick();
            }
#endif          
            
            sensor_status = COM_GetSensorStatus(sensor_id);
 8003aa4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe f8af 	bl	8001c0c <COM_GetSensorStatus>
 8003aae:	6578      	str	r0, [r7, #84]	; 0x54
            buf_size = sensor_status->sdWriteBufferSize;
 8003ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	653b      	str	r3, [r7, #80]	; 0x50
            
            if(evt.value.v & SDM_DATA_FIRST_HALF_MASK) // Data available on first half of the circular buffer
 8003ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <SDM_Thread+0x240>
            {
              SDM_WriteBuffer(sensor_id, SD_WriteBuffer[sensor_id], buf_size);
 8003ac0:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 8003ac4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003ac8:	4a16      	ldr	r2, [pc, #88]	; (8003b24 <SDM_Thread+0x28c>)
 8003aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ace:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	f000 fbbf 	bl	8004254 <SDM_WriteBuffer>
 8003ad6:	e752      	b.n	800397e <SDM_Thread+0xe6>
            }
            else // Data available on second half of the circular buffer
            {
              SDM_WriteBuffer(sensor_id, (uint8_t *)(SD_WriteBuffer[sensor_id]+buf_size), buf_size);
 8003ad8:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 8003adc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003ae0:	4a10      	ldr	r2, [pc, #64]	; (8003b24 <SDM_Thread+0x28c>)
 8003ae2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae8:	4413      	add	r3, r2
 8003aea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003aec:	4619      	mov	r1, r3
 8003aee:	f000 fbb1 	bl	8004254 <SDM_WriteBuffer>
    BSP_LED_Off(LED1); 
 8003af2:	e744      	b.n	800397e <SDM_Thread+0xe6>
 8003af4:	20002b66 	.word	0x20002b66
 8003af8:	080225d4 	.word	0x080225d4
 8003afc:	20002b7c 	.word	0x20002b7c
 8003b00:	20002b92 	.word	0x20002b92
 8003b04:	080225d8 	.word	0x080225d8
 8003b08:	20002854 	.word	0x20002854
 8003b0c:	20002b70 	.word	0x20002b70
 8003b10:	20002b64 	.word	0x20002b64
 8003b14:	20002b10 	.word	0x20002b10
 8003b18:	200002d4 	.word	0x200002d4
 8003b1c:	20002b65 	.word	0x20002b65
 8003b20:	20002b6c 	.word	0x20002b6c
 8003b24:	20002b14 	.word	0x20002b14

08003b28 <HAL_PWR_PVDCallback>:
* @brief  PWR PVD interrupt callback
* @param  None 
* @retval None
*/
void HAL_PWR_PVDCallback(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  BatteryLow = 1;
 8003b2c:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <HAL_PWR_PVDCallback+0x14>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	701a      	strb	r2, [r3, #0]
}
 8003b32:	bf00      	nop
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	20002b70 	.word	0x20002b70

08003b40 <SDM_Memory_Init>:
*         the SD_WriteBuffer associated to each active sensor.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 8003b46:	f7fe f82f 	bl	8001ba8 <COM_GetDeviceDescriptor>
 8003b4a:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e026      	b.n	8003ba0 <SDM_Memory_Init+0x60>
  {
    sensor_status = COM_GetSensorStatus(i);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe f858 	bl	8001c0c <COM_GetSensorStatus>
 8003b5c:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	7b9b      	ldrb	r3, [r3, #14]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d014      	beq.n	8003b90 <SDM_Memory_Init+0x50>
    {
      SD_WriteBuffer[i] = HSD_malloc(sensor_status->sdWriteBufferSize*2);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f01a fa79 	bl	801e064 <malloc>
 8003b72:	4603      	mov	r3, r0
 8003b74:	4619      	mov	r1, r3
 8003b76:	4a0f      	ldr	r2, [pc, #60]	; (8003bb4 <SDM_Memory_Init+0x74>)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      if(!SD_WriteBuffer[i])
 8003b7e:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <SDM_Memory_Init+0x74>)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <SDM_Memory_Init+0x5a>
      {
        _Error_Handler();
 8003b8a:	f000 fe51 	bl	8004830 <_Error_Handler>
 8003b8e:	e004      	b.n	8003b9a <SDM_Memory_Init+0x5a>
      }
    }
    else
    {
      SD_WriteBuffer[i] = 0;
 8003b90:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <SDM_Memory_Init+0x74>)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2100      	movs	r1, #0
 8003b96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3d3      	bcc.n	8003b52 <SDM_Memory_Init+0x12>
    }
  }
  return 1;
 8003baa:	2301      	movs	r3, #1
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20002b14 	.word	0x20002b14

08003bb8 <SDM_Memory_Deinit>:
* @brief  SD Card Manager memory De-initialization.
* @param  
* @retval 1: no error
*/
uint8_t SDM_Memory_Deinit(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t i;
  
  device_descriptor = COM_GetDeviceDescriptor();
 8003bbe:	f7fd fff3 	bl	8001ba8 <COM_GetDeviceDescriptor>
 8003bc2:	60b8      	str	r0, [r7, #8]
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	e01e      	b.n	8003c08 <SDM_Memory_Deinit+0x50>
  {
    sensor_status = COM_GetSensorStatus(i);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe f81c 	bl	8001c0c <COM_GetSensorStatus>
 8003bd4:	6078      	str	r0, [r7, #4]
    if(sensor_status->isActive && SD_WriteBuffer[i]!=0)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	7b9b      	ldrb	r3, [r3, #14]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d011      	beq.n	8003c02 <SDM_Memory_Deinit+0x4a>
 8003bde:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <SDM_Memory_Deinit+0x64>)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <SDM_Memory_Deinit+0x4a>
    {
      HSD_free(SD_WriteBuffer[i]);
 8003bea:	4a0c      	ldr	r2, [pc, #48]	; (8003c1c <SDM_Memory_Deinit+0x64>)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f01a fa3e 	bl	801e074 <free>
      SD_WriteBuffer[i] = NULL;
 8003bf8:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <SDM_Memory_Deinit+0x64>)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i=0;i<device_descriptor->nSensor;i++)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d3db      	bcc.n	8003bca <SDM_Memory_Deinit+0x12>
    }
  }
  return 1;
 8003c12:	2301      	movs	r3, #1
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20002b14 	.word	0x20002b14

08003c20 <SDM_Peripheral_Init>:


void SDM_Peripheral_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  BSP_SD_Detect_Init();   
 8003c24:	f002 fc20 	bl	8006468 <BSP_SD_Detect_Init>
}
 8003c28:	bf00      	nop
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <SDM_OS_Init>:
* @brief  Initialize SD Card Manager thread and queue
* @param  None
* @retval None
*/
void SDM_OS_Init(void)
{
 8003c2c:	b5b0      	push	{r4, r5, r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
  sdioSem_id = osSemaphoreCreate(osSemaphore(sdioSem), 1);
 8003c32:	2101      	movs	r1, #1
 8003c34:	4816      	ldr	r0, [pc, #88]	; (8003c90 <SDM_OS_Init+0x64>)
 8003c36:	f013 fbb3 	bl	80173a0 <osSemaphoreCreate>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <SDM_OS_Init+0x68>)
 8003c3e:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(sdioSem_id, osWaitForever);
 8003c40:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <SDM_OS_Init+0x68>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f04f 31ff 	mov.w	r1, #4294967295
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f013 fbcd 	bl	80173e8 <osSemaphoreWait>
  
  sdThreadQueue_id = osMessageCreate(osMessageQ(sdThreadQueue), NULL);
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4811      	ldr	r0, [pc, #68]	; (8003c98 <SDM_OS_Init+0x6c>)
 8003c52:	f013 fd4d 	bl	80176f0 <osMessageCreate>
 8003c56:	4603      	mov	r3, r0
 8003c58:	4a10      	ldr	r2, [pc, #64]	; (8003c9c <SDM_OS_Init+0x70>)
 8003c5a:	6013      	str	r3, [r2, #0]
  
  vQueueAddToRegistry( sdThreadQueue_id, "sdThreadQueue_id" );
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <SDM_OS_Init+0x70>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	490f      	ldr	r1, [pc, #60]	; (8003ca0 <SDM_OS_Init+0x74>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f014 fdaa 	bl	80187bc <vQueueAddToRegistry>
  
  /* Thread definition: read data */
  osThreadDef(SDM_On_Off_Thread, SDM_Thread, SD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE*4);
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <SDM_OS_Init+0x78>)
 8003c6a:	1d3c      	adds	r4, r7, #4
 8003c6c:	461d      	mov	r5, r3
 8003c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c72:	682b      	ldr	r3, [r5, #0]
 8003c74:	6023      	str	r3, [r4, #0]
  /* Start thread 1 */
  SDM_Thread_Id = osThreadCreate(osThread(SDM_On_Off_Thread), NULL);
 8003c76:	1d3b      	adds	r3, r7, #4
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f013 fb69 	bl	8017352 <osThreadCreate>
 8003c80:	4603      	mov	r3, r0
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <SDM_OS_Init+0x7c>)
 8003c84:	6013      	str	r3, [r2, #0]
}
 8003c86:	bf00      	nop
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	08022940 	.word	0x08022940
 8003c94:	20002b0c 	.word	0x20002b0c
 8003c98:	08022944 	.word	0x08022944
 8003c9c:	20002b10 	.word	0x20002b10
 8003ca0:	08022610 	.word	0x08022610
 8003ca4:	08022624 	.word	0x08022624
 8003ca8:	20002b08 	.word	0x20002b08

08003cac <SDM_SD_Init>:
* @brief  Initialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8003cb0:	490f      	ldr	r1, [pc, #60]	; (8003cf0 <SDM_SD_Init+0x44>)
 8003cb2:	4810      	ldr	r0, [pc, #64]	; (8003cf4 <SDM_SD_Init+0x48>)
 8003cb4:	f013 fa00 	bl	80170b8 <FATFS_LinkDriver>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d115      	bne.n	8003cea <SDM_SD_Init+0x3e>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	490b      	ldr	r1, [pc, #44]	; (8003cf0 <SDM_SD_Init+0x44>)
 8003cc2:	480d      	ldr	r0, [pc, #52]	; (8003cf8 <SDM_SD_Init+0x4c>)
 8003cc4:	f012 fa28 	bl	8016118 <f_mount>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <SDM_SD_Init+0x3e>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 8003cce:	2000      	movs	r0, #0
 8003cd0:	f001 fe78 	bl	80059c4 <BSP_LED_On>
        HAL_Delay(500);
 8003cd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cd8:	f002 fd40 	bl	800675c <HAL_Delay>
        BSP_LED_Off(LED1);
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f001 fe8b 	bl	80059f8 <BSP_LED_Off>
        HAL_Delay(100);
 8003ce2:	2064      	movs	r0, #100	; 0x64
 8003ce4:	f002 fd3a 	bl	800675c <HAL_Delay>
        BSP_LED_On(LED1);
 8003ce8:	e7f1      	b.n	8003cce <SDM_SD_Init+0x22>
      }
    }
  }
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20002a84 	.word	0x20002a84
 8003cf4:	0802292c 	.word	0x0802292c
 8003cf8:	20000be0 	.word	0x20000be0

08003cfc <SDM_SD_DeInit>:
* @brief  Deinitialize SD Card and file system
* @param  None
* @retval None
*/
void SDM_SD_DeInit(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  if(FATFS_UnLinkDriver(SDPath) == 0)
 8003d00:	480e      	ldr	r0, [pc, #56]	; (8003d3c <SDM_SD_DeInit+0x40>)
 8003d02:	f013 fa21 	bl	8017148 <FATFS_UnLinkDriver>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d115      	bne.n	8003d38 <SDM_SD_DeInit+0x3c>
  {
    /* Register the file system object to the FatFs module */
    if(f_mount(NULL, (TCHAR const*)SDPath, 0) != FR_OK)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	490b      	ldr	r1, [pc, #44]	; (8003d3c <SDM_SD_DeInit+0x40>)
 8003d10:	2000      	movs	r0, #0
 8003d12:	f012 fa01 	bl	8016118 <f_mount>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <SDM_SD_DeInit+0x3c>
    {
      /* FatFs Initialization Error */
      while(1)
      {
        BSP_LED_On(LED1);
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f001 fe51 	bl	80059c4 <BSP_LED_On>
        HAL_Delay(500);
 8003d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d26:	f002 fd19 	bl	800675c <HAL_Delay>
        BSP_LED_Off(LED1);
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f001 fe64 	bl	80059f8 <BSP_LED_Off>
        HAL_Delay(100);
 8003d30:	2064      	movs	r0, #100	; 0x64
 8003d32:	f002 fd13 	bl	800675c <HAL_Delay>
        BSP_LED_On(LED1);
 8003d36:	e7f1      	b.n	8003d1c <SDM_SD_DeInit+0x20>
      }
    }
  }
}
 8003d38:	bf00      	nop
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20002a84 	.word	0x20002a84

08003d40 <SDM_OpenFile>:
  return 0; // OK
}


uint8_t SDM_OpenFile(uint32_t id, const char *sensorName)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b090      	sub	sp, #64	; 0x40
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  char file_name[50];
  
  sprintf(file_name, "%s%s", sensorName, ".dat");
 8003d4a:	f107 000c 	add.w	r0, r7, #12
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <SDM_OpenFile+0x48>)
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	490e      	ldr	r1, [pc, #56]	; (8003d8c <SDM_OpenFile+0x4c>)
 8003d54:	f01a ff36 	bl	801ebc4 <siprintf>
  
  if(f_open(&FileHandler[id], (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <SDM_OpenFile+0x50>)
 8003d64:	4413      	add	r3, r2
 8003d66:	f107 010c 	add.w	r1, r7, #12
 8003d6a:	220a      	movs	r2, #10
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f012 fa19 	bl	80161a4 <f_open>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <SDM_OpenFile+0x3c>
  {
    return 1;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <SDM_OpenFile+0x3e>
  }
  
  return 0; // OK
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3740      	adds	r7, #64	; 0x40
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	0802266c 	.word	0x0802266c
 8003d8c:	08022674 	.word	0x08022674
 8003d90:	20000e14 	.word	0x20000e14

08003d94 <SDM_CloseFile>:


uint8_t SDM_CloseFile(uint32_t id)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  return f_close(&FileHandler[id]);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <SDM_CloseFile+0x28>)
 8003da8:	4413      	add	r3, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f012 feea 	bl	8016b84 <f_close>
 8003db0:	4603      	mov	r3, r0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000e14 	.word	0x20000e14

08003dc0 <SDM_GetLastDirNumber>:
* @brief  Scan SD Card file system to find the latest directory number that includes to the LOG_DIR_PREFIX
* @param  None
* @retval 
*/
uint32_t SDM_GetLastDirNumber(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b0da      	sub	sp, #360	; 0x168
 8003dc4:	af00      	add	r7, sp, #0
  FRESULT fr;     /* Return value */
  DIR dj;         /* Directory search object */
  FILINFO fno;    /* File information */
  int dir_n = 0, tmp;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  char dir_name[sizeof(LOG_DIR_PREFIX)+1] = LOG_DIR_PREFIX;
 8003dcc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003dd0:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8003dd4:	493d      	ldr	r1, [pc, #244]	; (8003ecc <SDM_GetLastDirNumber+0x10c>)
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	c903      	ldmia	r1, {r0, r1}
 8003dda:	6018      	str	r0, [r3, #0]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	8019      	strh	r1, [r3, #0]
 8003de0:	3302      	adds	r3, #2
 8003de2:	0c09      	lsrs	r1, r1, #16
 8003de4:	7019      	strb	r1, [r3, #0]
 8003de6:	2300      	movs	r3, #0
 8003de8:	71d3      	strb	r3, [r2, #7]
  
  dir_name[sizeof(LOG_DIR_PREFIX)-1] = '*';  /* wildcard */
 8003dea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003dee:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003df2:	222a      	movs	r2, #42	; 0x2a
 8003df4:	719a      	strb	r2, [r3, #6]
  dir_name[sizeof(LOG_DIR_PREFIX)] = 0;
 8003df6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003dfa:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003dfe:	2200      	movs	r2, #0
 8003e00:	71da      	strb	r2, [r3, #7]
  
  fr = f_findfirst(&dj, &fno, "", dir_name);  /* Start to search for matching directories */
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	f107 010c 	add.w	r1, r7, #12
 8003e08:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8003e0c:	4a30      	ldr	r2, [pc, #192]	; (8003ed0 <SDM_GetLastDirNumber+0x110>)
 8003e0e:	f012 ffe1 	bl	8016dd4 <f_findfirst>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  if(fno.fname[0])
 8003e18:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003e1c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003e20:	7d9b      	ldrb	r3, [r3, #22]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d03a      	beq.n	8003e9c <SDM_GetLastDirNumber+0xdc>
  {
    tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8003e26:	f107 030c 	add.w	r3, r7, #12
 8003e2a:	331d      	adds	r3, #29
 8003e2c:	220a      	movs	r2, #10
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f01b fe1d 	bl	801fa70 <strtol>
 8003e36:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
    if(dir_n<tmp)
 8003e3a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8003e3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e42:	429a      	cmp	r2, r3
 8003e44:	da2a      	bge.n	8003e9c <SDM_GetLastDirNumber+0xdc>
    {
      dir_n = tmp;
 8003e46:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    }
  }
  
  /* Repeat while an item is found */
  while (fr == FR_OK && fno.fname[0])
 8003e4e:	e025      	b.n	8003e9c <SDM_GetLastDirNumber+0xdc>
  {
    fr = f_findnext(&dj, &fno);   /* Search for next item */
 8003e50:	f107 020c 	add.w	r2, r7, #12
 8003e54:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f012 ff92 	bl	8016d84 <f_findnext>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    if(fno.fname[0])
 8003e66:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003e6a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003e6e:	7d9b      	ldrb	r3, [r3, #22]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d013      	beq.n	8003e9c <SDM_GetLastDirNumber+0xdc>
    {
      tmp = strtol(&fno.fname[sizeof(LOG_DIR_PREFIX)],NULL,10);
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	331d      	adds	r3, #29
 8003e7a:	220a      	movs	r2, #10
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f01b fdf6 	bl	801fa70 <strtol>
 8003e84:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
      if(tmp > dir_n)
 8003e88:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003e8c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003e90:	429a      	cmp	r2, r3
 8003e92:	dd03      	ble.n	8003e9c <SDM_GetLastDirNumber+0xdc>
      {
        dir_n = tmp;
 8003e94:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e98:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  while (fr == FR_OK && fno.fname[0])
 8003e9c:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <SDM_GetLastDirNumber+0xf2>
 8003ea4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003ea8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003eac:	7d9b      	ldrb	r3, [r3, #22]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1ce      	bne.n	8003e50 <SDM_GetLastDirNumber+0x90>
      }
    }
  }
  
  f_closedir(&dj);
 8003eb2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f012 ff01 	bl	8016cbe <f_closedir>
  return (uint32_t)dir_n;
 8003ebc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	08022680 	.word	0x08022680
 8003ed0:	0802267c 	.word	0x0802267c

08003ed4 <SDM_InitFiles>:
* @brief  Open one file for each sensor to store raw data and a JSON file with the device configuration
* @param  None
* @retval None
*/
uint8_t SDM_InitFiles(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b0a4      	sub	sp, #144	; 0x90
 8003ed8:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  COM_SensorDescriptor_t * sensor_descriptor; 
  
  uint32_t i = 0, dir_n = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  
  device_descriptor = COM_GetDeviceDescriptor();  
 8003ee6:	f7fd fe5f 	bl	8001ba8 <COM_GetDeviceDescriptor>
 8003eea:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  dir_n = SDM_GetLastDirNumber();
 8003eee:	f7ff ff67 	bl	8003dc0 <SDM_GetLastDirNumber>
 8003ef2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  dir_n++;
 8003ef6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003efa:	3301      	adds	r3, #1
 8003efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  
  //Open or Create new File in SD Card for Battery SOC
  char BatSocFileName [20] = "Battery_SOC";
 8003f00:	4a6b      	ldr	r2, [pc, #428]	; (80040b0 <SDM_InitFiles+0x1dc>)
 8003f02:	f107 0320 	add.w	r3, r7, #32
 8003f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
  char dir_n_string [4];
  itoa(dir_n,dir_n_string,10);
 8003f16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f1a:	f107 011c 	add.w	r1, r7, #28
 8003f1e:	220a      	movs	r2, #10
 8003f20:	4618      	mov	r0, r3
 8003f22:	f01a f835 	bl	801df90 <itoa>
  strcat(BatSocFileName,dir_n_string);
 8003f26:	f107 021c 	add.w	r2, r7, #28
 8003f2a:	f107 0320 	add.w	r3, r7, #32
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f01a feaa 	bl	801ec8a <strcat>
  strcat(BatSocFileName,".txt");
 8003f36:	f107 0320 	add.w	r3, r7, #32
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc f96a 	bl	8000214 <strlen>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	f107 0320 	add.w	r3, r7, #32
 8003f48:	4413      	add	r3, r2
 8003f4a:	4a5a      	ldr	r2, [pc, #360]	; (80040b4 <SDM_InitFiles+0x1e0>)
 8003f4c:	6810      	ldr	r0, [r2, #0]
 8003f4e:	6018      	str	r0, [r3, #0]
 8003f50:	7912      	ldrb	r2, [r2, #4]
 8003f52:	711a      	strb	r2, [r3, #4]
  if(f_open(&BatteryFileHandler, BatSocFileName, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8003f54:	f107 0320 	add.w	r3, r7, #32
 8003f58:	220a      	movs	r2, #10
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4856      	ldr	r0, [pc, #344]	; (80040b8 <SDM_InitFiles+0x1e4>)
 8003f5e:	f012 f921 	bl	80161a4 <f_open>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <SDM_InitFiles+0x98>
   {
     return 1;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e09d      	b.n	80040a8 <SDM_InitFiles+0x1d4>
   }

  //Write data 8 in text file
  char buffer [20] = "SOC:";
 8003f6c:	4a53      	ldr	r2, [pc, #332]	; (80040bc <SDM_InitFiles+0x1e8>)
 8003f6e:	f107 0308 	add.w	r3, r7, #8
 8003f72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f76:	6018      	str	r0, [r3, #0]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	7019      	strb	r1, [r3, #0]
 8003f7c:	f107 030d 	add.w	r3, r7, #13
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	609a      	str	r2, [r3, #8]
 8003f88:	f8c3 200b 	str.w	r2, [r3, #11]
  char socString[2];
  itoa(batteryLevel,socString,10);
 8003f8c:	4b4c      	ldr	r3, [pc, #304]	; (80040c0 <SDM_InitFiles+0x1ec>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	1d3b      	adds	r3, r7, #4
 8003f94:	220a      	movs	r2, #10
 8003f96:	4619      	mov	r1, r3
 8003f98:	f019 fffa 	bl	801df90 <itoa>
  strcat(buffer,socString);
 8003f9c:	1d3a      	adds	r2, r7, #4
 8003f9e:	f107 0308 	add.w	r3, r7, #8
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f01a fe70 	bl	801ec8a <strcat>
  uint32_t buffSize = sizeof(buffer);
 8003faa:	2314      	movs	r3, #20
 8003fac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t byteswritten, bytesread; /*File write/read counts */

  if(f_write(&BatteryFileHandler, (uint8_t*) buffer, buffSize, (void *)&byteswritten) != FR_OK)
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	f107 0108 	add.w	r1, r7, #8
 8003fb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fba:	483f      	ldr	r0, [pc, #252]	; (80040b8 <SDM_InitFiles+0x1e4>)
 8003fbc:	f012 fbef 	bl	801679e <f_write>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <SDM_InitFiles+0xf6>
  {
    return 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e06e      	b.n	80040a8 <SDM_InitFiles+0x1d4>
  }

  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8003fca:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003fce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fd2:	4a3c      	ldr	r2, [pc, #240]	; (80040c4 <SDM_InitFiles+0x1f0>)
 8003fd4:	493c      	ldr	r1, [pc, #240]	; (80040c8 <SDM_InitFiles+0x1f4>)
 8003fd6:	f01a fdf5 	bl	801ebc4 <siprintf>
  
  FRESULT test = f_mkdir(dir_name);
 8003fda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f012 ff16 	bl	8016e10 <f_mkdir>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  if(test != FR_OK)
 8003fea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <SDM_InitFiles+0x122>
  {
    return 1;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e058      	b.n	80040a8 <SDM_InitFiles+0x1d4>
  {
    return 1;    
  }
#endif
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ffc:	e02b      	b.n	8004056 <SDM_InitFiles+0x182>
  {
    sensor_status = COM_GetSensorStatus(i);
 8003ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004002:	b2db      	uxtb	r3, r3
 8004004:	4618      	mov	r0, r3
 8004006:	f7fd fe01 	bl	8001c0c <COM_GetSensorStatus>
 800400a:	67b8      	str	r0, [r7, #120]	; 0x78
    
    if(sensor_status->isActive)
 800400c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800400e:	7b9b      	ldrb	r3, [r3, #14]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01b      	beq.n	800404c <SDM_InitFiles+0x178>
    {
      sensor_descriptor = COM_GetSensorDescriptor(i);
 8004014:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004018:	b2db      	uxtb	r3, r3
 800401a:	4618      	mov	r0, r3
 800401c:	f7fd fde2 	bl	8001be4 <COM_GetSensorDescriptor>
 8004020:	6778      	str	r0, [r7, #116]	; 0x74
      sprintf(file_name, "%s/%s", dir_name, sensor_descriptor->name);
 8004022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004024:	3301      	adds	r3, #1
 8004026:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800402a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800402e:	4927      	ldr	r1, [pc, #156]	; (80040cc <SDM_InitFiles+0x1f8>)
 8004030:	f01a fdc8 	bl	801ebc4 <siprintf>
      
      if(SDM_OpenFile(i, file_name)!=0)
 8004034:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004038:	4619      	mov	r1, r3
 800403a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800403e:	f7ff fe7f 	bl	8003d40 <SDM_OpenFile>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <SDM_InitFiles+0x178>
      {
        return 1;
 8004048:	2301      	movs	r3, #1
 800404a:	e02d      	b.n	80040a8 <SDM_InitFiles+0x1d4>
  for(i=0;i<device_descriptor->nSensor;i++)
 800404c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004050:	3301      	adds	r3, #1
 8004052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004056:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004060:	429a      	cmp	r2, r3
 8004062:	d3cc      	bcc.n	8003ffe <SDM_InitFiles+0x12a>
      }
    }
  }
  
  SDM_Memory_Init();
 8004064:	f7ff fd6c 	bl	8003b40 <SDM_Memory_Init>
  
  for(i=0;i<device_descriptor->nSensor;i++)
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800406e:	e013      	b.n	8004098 <SDM_InitFiles+0x1c4>
  {
    sensor_status = COM_GetSensorStatus(i);
 8004070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004074:	b2db      	uxtb	r3, r3
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd fdc8 	bl	8001c0c <COM_GetSensorStatus>
 800407c:	67b8      	str	r0, [r7, #120]	; 0x78
    
    if(sensor_status->isActive)
 800407e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004080:	7b9b      	ldrb	r3, [r3, #14]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <SDM_InitFiles+0x1ba>
    {
      SDM_StartSensorThread(i);
 8004086:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800408a:	f000 f9dd 	bl	8004448 <SDM_StartSensorThread>
  for(i=0;i<device_descriptor->nSensor;i++)
 800408e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004092:	3301      	adds	r3, #1
 8004094:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d3e4      	bcc.n	8004070 <SDM_InitFiles+0x19c>
    }
  }  
  
  return 0;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3790      	adds	r7, #144	; 0x90
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	080226a8 	.word	0x080226a8
 80040b4:	08022688 	.word	0x08022688
 80040b8:	200023f4 	.word	0x200023f4
 80040bc:	080226bc 	.word	0x080226bc
 80040c0:	20000b94 	.word	0x20000b94
 80040c4:	08022690 	.word	0x08022690
 80040c8:	08022698 	.word	0x08022698
 80040cc:	080226a0 	.word	0x080226a0

080040d0 <SDM_CloseFiles>:

uint8_t SDM_CloseFiles(void)
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b09b      	sub	sp, #108	; 0x6c
 80040d4:	af00      	add	r7, sp, #0
  COM_SensorStatus_t * sensor_status; 
  COM_DeviceDescriptor_t * device_descriptor;
  uint32_t id = 0, dir_n = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	667b      	str	r3, [r7, #100]	; 0x64
 80040da:	2300      	movs	r3, #0
 80040dc:	663b      	str	r3, [r7, #96]	; 0x60
  char dir_name[sizeof(LOG_DIR_PREFIX)+4];
  char file_name[50];
  char* JSON_string = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
  
  device_descriptor = COM_GetDeviceDescriptor();
 80040e2:	f7fd fd61 	bl	8001ba8 <COM_GetDeviceDescriptor>
 80040e6:	65f8      	str	r0, [r7, #92]	; 0x5c
  
  /* Put all the sensors in "SUSPENDED" mode */
  for(id=0;id<device_descriptor->nSensor;id++)
 80040e8:	2300      	movs	r3, #0
 80040ea:	667b      	str	r3, [r7, #100]	; 0x64
 80040ec:	e00f      	b.n	800410e <SDM_CloseFiles+0x3e>
  {
    sensor_status = COM_GetSensorStatus(id);
 80040ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd fd8a 	bl	8001c0c <COM_GetSensorStatus>
 80040f8:	65b8      	str	r0, [r7, #88]	; 0x58
    
    if(sensor_status->isActive)
 80040fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040fc:	7b9b      	ldrb	r3, [r3, #14]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <SDM_CloseFiles+0x38>
    {
      SDM_StopSensorThread(id);
 8004102:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004104:	f000 fa12 	bl	800452c <SDM_StopSensorThread>
  for(id=0;id<device_descriptor->nSensor;id++)
 8004108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800410a:	3301      	adds	r3, #1
 800410c:	667b      	str	r3, [r7, #100]	; 0x64
 800410e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004114:	429a      	cmp	r2, r3
 8004116:	d3ea      	bcc.n	80040ee <SDM_CloseFiles+0x1e>
    }
  }
  
  /* Flush remaining data and close the files  */
  for(id=0;id<device_descriptor->nSensor;id++)
 8004118:	2300      	movs	r3, #0
 800411a:	667b      	str	r3, [r7, #100]	; 0x64
 800411c:	e017      	b.n	800414e <SDM_CloseFiles+0x7e>
  {
    sensor_status = COM_GetSensorStatus(id);
 800411e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004120:	b2db      	uxtb	r3, r3
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd fd72 	bl	8001c0c <COM_GetSensorStatus>
 8004128:	65b8      	str	r0, [r7, #88]	; 0x58
    
    if(sensor_status->isActive)
 800412a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800412c:	7b9b      	ldrb	r3, [r3, #14]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <SDM_CloseFiles+0x78>
    {
      SDM_Flush_Buffer(id);
 8004132:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004134:	f000 f8ae 	bl	8004294 <SDM_Flush_Buffer>
      if(SDM_CloseFile(id)!=0)
 8004138:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800413a:	f7ff fe2b 	bl	8003d94 <SDM_CloseFile>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <SDM_CloseFiles+0x78>
      {
        return 1;
 8004144:	2301      	movs	r3, #1
 8004146:	e058      	b.n	80041fa <SDM_CloseFiles+0x12a>
  for(id=0;id<device_descriptor->nSensor;id++)
 8004148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800414a:	3301      	adds	r3, #1
 800414c:	667b      	str	r3, [r7, #100]	; 0x64
 800414e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004154:	429a      	cmp	r2, r3
 8004156:	d3e2      	bcc.n	800411e <SDM_CloseFiles+0x4e>
      }
    }
  }
  f_close(&BatteryFileHandler);
 8004158:	482a      	ldr	r0, [pc, #168]	; (8004204 <SDM_CloseFiles+0x134>)
 800415a:	f012 fd13 	bl	8016b84 <f_close>
  {
    return 1;
  }  
#endif
  
  dir_n = SDM_GetLastDirNumber();
 800415e:	f7ff fe2f 	bl	8003dc0 <SDM_GetLastDirNumber>
 8004162:	6638      	str	r0, [r7, #96]	; 0x60
  sprintf(dir_name, "%s%03ld", LOG_DIR_PREFIX, dir_n);
 8004164:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8004168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800416a:	4a27      	ldr	r2, [pc, #156]	; (8004208 <SDM_CloseFiles+0x138>)
 800416c:	4927      	ldr	r1, [pc, #156]	; (800420c <SDM_CloseFiles+0x13c>)
 800416e:	f01a fd29 	bl	801ebc4 <siprintf>
  sprintf(file_name, "%s/DeviceConfig.json", dir_name);
 8004172:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004176:	f107 0318 	add.w	r3, r7, #24
 800417a:	4925      	ldr	r1, [pc, #148]	; (8004210 <SDM_CloseFiles+0x140>)
 800417c:	4618      	mov	r0, r3
 800417e:	f01a fd21 	bl	801ebc4 <siprintf>
  
  if(f_open(&FileConfigHandler, (char const*)file_name, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8004182:	f107 0318 	add.w	r3, r7, #24
 8004186:	220a      	movs	r2, #10
 8004188:	4619      	mov	r1, r3
 800418a:	4822      	ldr	r0, [pc, #136]	; (8004214 <SDM_CloseFiles+0x144>)
 800418c:	f012 f80a 	bl	80161a4 <f_open>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <SDM_CloseFiles+0xca>
  {
    return 1;
 8004196:	2301      	movs	r3, #1
 8004198:	e02f      	b.n	80041fa <SDM_CloseFiles+0x12a>
  }
  
  (void)SDM_CreateJSON(&JSON_string);
 800419a:	f107 0314 	add.w	r3, r7, #20
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fa70 	bl	8004684 <SDM_CreateJSON>
  SDM_WriteConfigBuffer((uint8_t*)JSON_string, strlen(JSON_string));  
 80041a4:	697c      	ldr	r4, [r7, #20]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fc f833 	bl	8000214 <strlen>
 80041ae:	4603      	mov	r3, r0
 80041b0:	4619      	mov	r1, r3
 80041b2:	4620      	mov	r0, r4
 80041b4:	f000 f834 	bl	8004220 <SDM_WriteConfigBuffer>
  
  if (f_close(&FileConfigHandler)!= FR_OK)
 80041b8:	4816      	ldr	r0, [pc, #88]	; (8004214 <SDM_CloseFiles+0x144>)
 80041ba:	f012 fce3 	bl	8016b84 <f_close>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <SDM_CloseFiles+0xf8>
  {
    return 1;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e018      	b.n	80041fa <SDM_CloseFiles+0x12a>
  }
  
  HSD_JSON_free(JSON_string);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc ff50 	bl	8001070 <HSD_JSON_free>
  JSON_string = NULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
  
  //-------------------------If SDM_FILE closed go in standby mode------------------------------------
  //-------------------------Before entering the the standby-mode set Alarm---------------------------
  char standbyMode [] = {"Standby-Mode!!!"};
 80041d4:	4b10      	ldr	r3, [pc, #64]	; (8004218 <SDM_CloseFiles+0x148>)
 80041d6:	1d3c      	adds	r4, r7, #4
 80041d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart2, (uint8_t *) standbyMode, sizeof(standbyMode), HAL_MAX_DELAY);
 80041de:	1d39      	adds	r1, r7, #4
 80041e0:	f04f 33ff 	mov.w	r3, #4294967295
 80041e4:	2210      	movs	r2, #16
 80041e6:	480d      	ldr	r0, [pc, #52]	; (800421c <SDM_CloseFiles+0x14c>)
 80041e8:	f00b f984 	bl	800f4f4 <HAL_UART_Transmit>
  MX_RTC_Init();
 80041ec:	f7ff f924 	bl	8003438 <MX_RTC_Init>
  HAL_SuspendTick();
 80041f0:	f002 fad6 	bl	80067a0 <HAL_SuspendTick>
  //HAL_PWR_EnterSTANDBYMode();
  HAL_PWREx_EnterSHUTDOWNMode();
 80041f4:	f006 f94c 	bl	800a490 <HAL_PWREx_EnterSHUTDOWNMode>

  return 0;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	376c      	adds	r7, #108	; 0x6c
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd90      	pop	{r4, r7, pc}
 8004202:	bf00      	nop
 8004204:	200023f4 	.word	0x200023f4
 8004208:	08022690 	.word	0x08022690
 800420c:	08022698 	.word	0x08022698
 8004210:	080226d0 	.word	0x080226d0
 8004214:	20002624 	.word	0x20002624
 8004218:	080226e8 	.word	0x080226e8
 800421c:	20000b04 	.word	0x20000b04

08004220 <SDM_WriteConfigBuffer>:


uint8_t SDM_WriteConfigBuffer(uint8_t *buffer, uint32_t size)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t byteswritten;
  FRESULT returnWrite;
  
  returnWrite = f_write(&FileConfigHandler, buffer, size, (void *)&byteswritten);
 800422a:	f107 0308 	add.w	r3, r7, #8
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4807      	ldr	r0, [pc, #28]	; (8004250 <SDM_WriteConfigBuffer+0x30>)
 8004234:	f012 fab3 	bl	801679e <f_write>
 8004238:	4603      	mov	r3, r0
 800423a:	73fb      	strb	r3, [r7, #15]
  if(returnWrite != FR_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <SDM_WriteConfigBuffer+0x26>
  {
    return 0;
 8004242:	2300      	movs	r3, #0
 8004244:	e000      	b.n	8004248 <SDM_WriteConfigBuffer+0x28>
  }  
  return 1;
 8004246:	2301      	movs	r3, #1
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20002624 	.word	0x20002624

08004254 <SDM_WriteBuffer>:


uint8_t SDM_WriteBuffer(uint32_t id, uint8_t *buffer, uint32_t size)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  uint32_t byteswritten;
  
  if(f_write(&FileHandler[id], buffer, size, (void *)&byteswritten) != FR_OK)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <SDM_WriteBuffer+0x3c>)
 800426c:	1898      	adds	r0, r3, r2
 800426e:	f107 0314 	add.w	r3, r7, #20
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	f012 fa92 	bl	801679e <f_write>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <SDM_WriteBuffer+0x30>
  {
    return 0;
 8004280:	2300      	movs	r3, #0
 8004282:	e000      	b.n	8004286 <SDM_WriteBuffer+0x32>
  }  
  return 1;
 8004284:	2301      	movs	r3, #1
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000e14 	.word	0x20000e14

08004294 <SDM_Flush_Buffer>:

/* Write remaining data to file */
uint8_t SDM_Flush_Buffer(uint32_t id)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint8_t ret = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	75fb      	strb	r3, [r7, #23]
  uint32_t buf_size;
  COM_SensorStatus_t * sensor_status;   
  
  sensor_status = COM_GetSensorStatus(id);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fd fcb1 	bl	8001c0c <COM_GetSensorStatus>
 80042aa:	6138      	str	r0, [r7, #16]
  buf_size = sensor_status->sdWriteBufferSize;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	60fb      	str	r3, [r7, #12]
  
  if(SD_WriteBufferIdx[id]>0 && SD_WriteBufferIdx[id]<(buf_size-1))
 80042b2:	4a26      	ldr	r2, [pc, #152]	; (800434c <SDM_Flush_Buffer+0xb8>)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d017      	beq.n	80042ee <SDM_Flush_Buffer+0x5a>
 80042be:	4a23      	ldr	r2, [pc, #140]	; (800434c <SDM_Flush_Buffer+0xb8>)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d20f      	bcs.n	80042ee <SDM_Flush_Buffer+0x5a>
  {
    /* flush from the beginning */
    ret = SDM_WriteBuffer(id, SD_WriteBuffer[id], SD_WriteBufferIdx[id]+1);
 80042ce:	4a20      	ldr	r2, [pc, #128]	; (8004350 <SDM_Flush_Buffer+0xbc>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042d6:	4a1d      	ldr	r2, [pc, #116]	; (800434c <SDM_Flush_Buffer+0xb8>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042de:	3301      	adds	r3, #1
 80042e0:	461a      	mov	r2, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff ffb6 	bl	8004254 <SDM_WriteBuffer>
 80042e8:	4603      	mov	r3, r0
 80042ea:	75fb      	strb	r3, [r7, #23]
 80042ec:	e023      	b.n	8004336 <SDM_Flush_Buffer+0xa2>
  }
  else if (SD_WriteBufferIdx[id]>(buf_size-1) && SD_WriteBufferIdx[id]<(buf_size*2-1))
 80042ee:	4a17      	ldr	r2, [pc, #92]	; (800434c <SDM_Flush_Buffer+0xb8>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d91b      	bls.n	8004336 <SDM_Flush_Buffer+0xa2>
 80042fe:	4a13      	ldr	r2, [pc, #76]	; (800434c <SDM_Flush_Buffer+0xb8>)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	3b01      	subs	r3, #1
 800430c:	429a      	cmp	r2, r3
 800430e:	d212      	bcs.n	8004336 <SDM_Flush_Buffer+0xa2>
  {
    /* flush from half buffer */
    ret =  SDM_WriteBuffer(id, (uint8_t *)(SD_WriteBuffer[id]+buf_size), SD_WriteBufferIdx[id]+1-buf_size);
 8004310:	4a0f      	ldr	r2, [pc, #60]	; (8004350 <SDM_Flush_Buffer+0xbc>)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	18d1      	adds	r1, r2, r3
 800431c:	4a0b      	ldr	r2, [pc, #44]	; (800434c <SDM_Flush_Buffer+0xb8>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	3301      	adds	r3, #1
 800432a:	461a      	mov	r2, r3
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ff91 	bl	8004254 <SDM_WriteBuffer>
 8004332:	4603      	mov	r3, r0
 8004334:	75fb      	strb	r3, [r7, #23]
  }
  
  SD_WriteBufferIdx[id] = 0;
 8004336:	4a05      	ldr	r2, [pc, #20]	; (800434c <SDM_Flush_Buffer+0xb8>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2100      	movs	r1, #0
 800433c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  return ret;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20002b3c 	.word	0x20002b3c
 8004350:	20002b14 	.word	0x20002b14

08004354 <SDM_Fill_Buffer>:

/* Fill SD buffer with new data */
uint8_t SDM_Fill_Buffer(uint8_t id, uint8_t *src, uint16_t srcSize)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	71fb      	strb	r3, [r7, #7]
 8004360:	4613      	mov	r3, r2
 8004362:	80bb      	strh	r3, [r7, #4]
  uint8_t *dst;
  uint32_t dstP, srcP=0;
 8004364:	2300      	movs	r3, #0
 8004366:	61bb      	str	r3, [r7, #24]
  COM_SensorStatus_t * sensor_status; 
  uint32_t dstSize, sdBufSize;
  
  
  sensor_status = COM_GetSensorStatus(id);
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd fc4e 	bl	8001c0c <COM_GetSensorStatus>
 8004370:	6178      	str	r0, [r7, #20]
  dst = SD_WriteBuffer[id];
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	4a31      	ldr	r2, [pc, #196]	; (800443c <SDM_Fill_Buffer+0xe8>)
 8004376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437a:	613b      	str	r3, [r7, #16]
  dstP = SD_WriteBufferIdx[id];
 800437c:	79fb      	ldrb	r3, [r7, #7]
 800437e:	4a30      	ldr	r2, [pc, #192]	; (8004440 <SDM_Fill_Buffer+0xec>)
 8004380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004384:	61fb      	str	r3, [r7, #28]
  sdBufSize = sensor_status->sdWriteBufferSize;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	60fb      	str	r3, [r7, #12]
  dstSize = sdBufSize*2;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	60bb      	str	r3, [r7, #8]
  
  /* byte per byte copy */
  while(srcP < srcSize)
 8004392:	e013      	b.n	80043bc <SDM_Fill_Buffer+0x68>
  {
    dst[dstP] = src[srcP];
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	441a      	add	r2, r3
 800439a:	6939      	ldr	r1, [r7, #16]
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	440b      	add	r3, r1
 80043a0:	7812      	ldrb	r2, [r2, #0]
 80043a2:	701a      	strb	r2, [r3, #0]
    dstP++;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	3301      	adds	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
    srcP++;
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	3301      	adds	r3, #1
 80043ae:	61bb      	str	r3, [r7, #24]
    if(dstP>=dstSize)
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d301      	bcc.n	80043bc <SDM_Fill_Buffer+0x68>
    {
      dstP=0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
  while(srcP < srcSize)
 80043bc:	88bb      	ldrh	r3, [r7, #4]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d3e7      	bcc.n	8004394 <SDM_Fill_Buffer+0x40>
    }
  }
  
  if(SD_WriteBufferIdx[id]<(dstSize/2) && dstP>=(dstSize/2)) // first half full
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <SDM_Fill_Buffer+0xec>)
 80043c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d213      	bcs.n	80043fc <SDM_Fill_Buffer+0xa8>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d30e      	bcc.n	80043fc <SDM_Fill_Buffer+0xa8>
  {           
    // unlock write task
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 80043de:	4b19      	ldr	r3, [pc, #100]	; (8004444 <SDM_Fill_Buffer+0xf0>)
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80043e8:	2200      	movs	r2, #0
 80043ea:	4619      	mov	r1, r3
 80043ec:	f013 f992 	bl	8017714 <osMessagePut>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d017      	beq.n	8004426 <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 80043f6:	f000 fa1b 	bl	8004830 <_Error_Handler>
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_FIRST_HALF_MASK, 0) != osOK)
 80043fa:	e014      	b.n	8004426 <SDM_Fill_Buffer+0xd2>
    }
    
    // check for buffer consistency
  }
  else if(dstP<SD_WriteBufferIdx[id])  // second half full
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	4a10      	ldr	r2, [pc, #64]	; (8004440 <SDM_Fill_Buffer+0xec>)
 8004400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	429a      	cmp	r2, r3
 8004408:	d20d      	bcs.n	8004426 <SDM_Fill_Buffer+0xd2>
  {
    if(osMessagePut(sdThreadQueue_id, id|SDM_DATA_READY_MASK|SDM_DATA_SECOND_HALF_MASK, 0) != osOK)
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <SDM_Fill_Buffer+0xf0>)
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004414:	2200      	movs	r2, #0
 8004416:	4619      	mov	r1, r3
 8004418:	f013 f97c 	bl	8017714 <osMessagePut>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <SDM_Fill_Buffer+0xd2>
    {
      _Error_Handler();
 8004422:	f000 fa05 	bl	8004830 <_Error_Handler>
    }
  }
  SD_WriteBufferIdx[id] = dstP;
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	4905      	ldr	r1, [pc, #20]	; (8004440 <SDM_Fill_Buffer+0xec>)
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  return 0;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3720      	adds	r7, #32
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20002b14 	.word	0x20002b14
 8004440:	20002b3c 	.word	0x20002b3c
 8004444:	20002b10 	.word	0x20002b10

08004448 <SDM_StartSensorThread>:
* @brief  Start sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StartSensorThread(uint32_t id)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 8004450:	4b2c      	ldr	r3, [pc, #176]	; (8004504 <SDM_StartSensorThread+0xbc>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4293      	cmp	r3, r2
 800445a:	d102      	bne.n	8004462 <SDM_StartSensorThread+0x1a>
  {
    IIS3DWB_Start();
 800445c:	f7fe fada 	bl	8002a14 <IIS3DWB_Start>
 8004460:	e046      	b.n	80044f0 <SDM_StartSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 8004462:	4b29      	ldr	r3, [pc, #164]	; (8004508 <SDM_StartSensorThread+0xc0>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4293      	cmp	r3, r2
 800446c:	d102      	bne.n	8004474 <SDM_StartSensorThread+0x2c>
  {
    HTS221_Start();
 800446e:	f7fd ffc9 	bl	8002404 <HTS221_Start>
 8004472:	e03d      	b.n	80044f0 <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 8004474:	4b25      	ldr	r3, [pc, #148]	; (800450c <SDM_StartSensorThread+0xc4>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4293      	cmp	r3, r2
 800447e:	d102      	bne.n	8004486 <SDM_StartSensorThread+0x3e>
  {
    IIS2DH_Start();
 8004480:	f7fd ffe6 	bl	8002450 <IIS2DH_Start>
 8004484:	e034      	b.n	80044f0 <SDM_StartSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 8004486:	4b22      	ldr	r3, [pc, #136]	; (8004510 <SDM_StartSensorThread+0xc8>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4293      	cmp	r3, r2
 8004490:	d102      	bne.n	8004498 <SDM_StartSensorThread+0x50>
  {
    IIS2MDC_Start();
 8004492:	f7fe f803 	bl	800249c <IIS2MDC_Start>
 8004496:	e02b      	b.n	80044f0 <SDM_StartSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 8004498:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <SDM_StartSensorThread+0xcc>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d102      	bne.n	80044aa <SDM_StartSensorThread+0x62>
  {
    IMP34DT05_Start();
 80044a4:	f7fe fadc 	bl	8002a60 <IMP34DT05_Start>
 80044a8:	e022      	b.n	80044f0 <SDM_StartSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 80044aa:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <SDM_StartSensorThread+0xd0>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d102      	bne.n	80044bc <SDM_StartSensorThread+0x74>
  {
    MP23ABS1_Start();
 80044b6:	f7fe ffa9 	bl	800340c <MP23ABS1_Start>
 80044ba:	e019      	b.n	80044f0 <SDM_StartSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 80044bc:	4b17      	ldr	r3, [pc, #92]	; (800451c <SDM_StartSensorThread+0xd4>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d102      	bne.n	80044ce <SDM_StartSensorThread+0x86>
  {
    ISM330DHCX_Start();
 80044c8:	f7fe faf0 	bl	8002aac <ISM330DHCX_Start>
 80044cc:	e010      	b.n	80044f0 <SDM_StartSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 80044ce:	4b14      	ldr	r3, [pc, #80]	; (8004520 <SDM_StartSensorThread+0xd8>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d102      	bne.n	80044e0 <SDM_StartSensorThread+0x98>
  {
    LPS22HH_Start();
 80044da:	f7fe fb0d 	bl	8002af8 <LPS22HH_Start>
 80044de:	e007      	b.n	80044f0 <SDM_StartSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 80044e0:	4b10      	ldr	r3, [pc, #64]	; (8004524 <SDM_StartSensorThread+0xdc>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <SDM_StartSensorThread+0xa8>
  {
    STTS751_Start();
 80044ec:	f000 fd88 	bl	8005000 <STTS751_Start>
  }
  sensor_first_dataReady[id] = 1;
 80044f0:	4a0d      	ldr	r2, [pc, #52]	; (8004528 <SDM_StartSensorThread+0xe0>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]
  
  return 0;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000a28 	.word	0x20000a28
 8004508:	20000a29 	.word	0x20000a29
 800450c:	20000a2a 	.word	0x20000a2a
 8004510:	20000a2b 	.word	0x20000a2b
 8004514:	20000a2c 	.word	0x20000a2c
 8004518:	20000a2d 	.word	0x20000a2d
 800451c:	20000a2e 	.word	0x20000a2e
 8004520:	20000a2f 	.word	0x20000a2f
 8004524:	20000a30 	.word	0x20000a30
 8004528:	20000028 	.word	0x20000028

0800452c <SDM_StopSensorThread>:
* @brief  Stop sensor thread
* @param  id: Sensor id
* @retval 0: no error
*/
uint8_t SDM_StopSensorThread(uint32_t id)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  if(id == iis3dwb_com_id)
 8004534:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <SDM_StopSensorThread+0xbc>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4293      	cmp	r3, r2
 800453e:	d102      	bne.n	8004546 <SDM_StopSensorThread+0x1a>
  {
    IIS3DWB_Stop();
 8004540:	f7fe fa76 	bl	8002a30 <IIS3DWB_Stop>
 8004544:	e046      	b.n	80045d4 <SDM_StopSensorThread+0xa8>
  }
  else if(id == hts221_com_id)
 8004546:	4b29      	ldr	r3, [pc, #164]	; (80045ec <SDM_StopSensorThread+0xc0>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4293      	cmp	r3, r2
 8004550:	d102      	bne.n	8004558 <SDM_StopSensorThread+0x2c>
  {
    HTS221_Stop();
 8004552:	f7fd ff65 	bl	8002420 <HTS221_Stop>
 8004556:	e03d      	b.n	80045d4 <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2dh_com_id)
 8004558:	4b25      	ldr	r3, [pc, #148]	; (80045f0 <SDM_StopSensorThread+0xc4>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4293      	cmp	r3, r2
 8004562:	d102      	bne.n	800456a <SDM_StopSensorThread+0x3e>
  {
    IIS2DH_Stop();
 8004564:	f7fd ff82 	bl	800246c <IIS2DH_Stop>
 8004568:	e034      	b.n	80045d4 <SDM_StopSensorThread+0xa8>
  }
  else if(id == iis2mdc_com_id)
 800456a:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <SDM_StopSensorThread+0xc8>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4293      	cmp	r3, r2
 8004574:	d102      	bne.n	800457c <SDM_StopSensorThread+0x50>
  {
    IIS2MDC_Stop();
 8004576:	f7fd ff9f 	bl	80024b8 <IIS2MDC_Stop>
 800457a:	e02b      	b.n	80045d4 <SDM_StopSensorThread+0xa8>
  }
  else if(id == imp34dt05_com_id)
 800457c:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <SDM_StopSensorThread+0xcc>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4293      	cmp	r3, r2
 8004586:	d102      	bne.n	800458e <SDM_StopSensorThread+0x62>
  {
    IMP34DT05_Stop();
 8004588:	f7fe fa78 	bl	8002a7c <IMP34DT05_Stop>
 800458c:	e022      	b.n	80045d4 <SDM_StopSensorThread+0xa8>
  }
  else if(id == mp23abs1_com_id)
 800458e:	4b1b      	ldr	r3, [pc, #108]	; (80045fc <SDM_StopSensorThread+0xd0>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4293      	cmp	r3, r2
 8004598:	d102      	bne.n	80045a0 <SDM_StopSensorThread+0x74>
  {
    MP23ABS1_Stop();
 800459a:	f7fe ff45 	bl	8003428 <MP23ABS1_Stop>
 800459e:	e019      	b.n	80045d4 <SDM_StopSensorThread+0xa8>
  }
  else if(id == ism330dhcx_com_id)
 80045a0:	4b17      	ldr	r3, [pc, #92]	; (8004600 <SDM_StopSensorThread+0xd4>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d102      	bne.n	80045b2 <SDM_StopSensorThread+0x86>
  {
    ISM330DHCX_Stop();
 80045ac:	f7fe fa8c 	bl	8002ac8 <ISM330DHCX_Stop>
 80045b0:	e010      	b.n	80045d4 <SDM_StopSensorThread+0xa8>
  }
  else if(id == lps22hh_com_id)
 80045b2:	4b14      	ldr	r3, [pc, #80]	; (8004604 <SDM_StopSensorThread+0xd8>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d102      	bne.n	80045c4 <SDM_StopSensorThread+0x98>
  {
    LPS22HH_Stop();
 80045be:	f7fe faa9 	bl	8002b14 <LPS22HH_Stop>
 80045c2:	e007      	b.n	80045d4 <SDM_StopSensorThread+0xa8>
  }
  else if(id == stts751_com_id)
 80045c4:	4b10      	ldr	r3, [pc, #64]	; (8004608 <SDM_StopSensorThread+0xdc>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d101      	bne.n	80045d4 <SDM_StopSensorThread+0xa8>
  {
    STTS751_Stop();
 80045d0:	f000 fd24 	bl	800501c <STTS751_Stop>
  }
  sensor_first_dataReady[id] = 0;
 80045d4:	4a0d      	ldr	r2, [pc, #52]	; (800460c <SDM_StopSensorThread+0xe0>)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4413      	add	r3, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
  return 0;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20000a28 	.word	0x20000a28
 80045ec:	20000a29 	.word	0x20000a29
 80045f0:	20000a2a 	.word	0x20000a2a
 80045f4:	20000a2b 	.word	0x20000a2b
 80045f8:	20000a2c 	.word	0x20000a2c
 80045fc:	20000a2d 	.word	0x20000a2d
 8004600:	20000a2e 	.word	0x20000a2e
 8004604:	20000a2f 	.word	0x20000a2f
 8004608:	20000a30 	.word	0x20000a30
 800460c:	20000028 	.word	0x20000028

08004610 <SDM_ReadJSON>:



uint32_t SDM_ReadJSON(char *serialized_string)
{  
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  static COM_Device_t JSON_device; 
  COM_Device_t *local_device; 
  uint8_t ii;
  uint32_t size;
  
  local_device = COM_GetDevice();  
 8004618:	f7fd fabc 	bl	8001b94 <COM_GetDevice>
 800461c:	6138      	str	r0, [r7, #16]
  size = sizeof(COM_Device_t);
 800461e:	2354      	movs	r3, #84	; 0x54
 8004620:	60fb      	str	r3, [r7, #12]
  
  memcpy(&JSON_device, local_device, size);       
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	6939      	ldr	r1, [r7, #16]
 8004626:	4816      	ldr	r0, [pc, #88]	; (8004680 <SDM_ReadJSON+0x70>)
 8004628:	f019 fd2c 	bl	801e084 <memcpy>
  HSD_JSON_parse_Device(serialized_string, &JSON_device);      
 800462c:	4914      	ldr	r1, [pc, #80]	; (8004680 <SDM_ReadJSON+0x70>)
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc fd40 	bl	80010b4 <HSD_JSON_parse_Device>
  
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 8004634:	2300      	movs	r3, #0
 8004636:	75fb      	strb	r3, [r7, #23]
 8004638:	e016      	b.n	8004668 <SDM_ReadJSON+0x58>
  {
    update_sensorStatus(&local_device->sensors[ii]->sensorStatus, &JSON_device.sensors[ii]->sensorStatus, ii);
 800463a:	7dfb      	ldrb	r3, [r7, #23]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	330a      	adds	r3, #10
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <SDM_ReadJSON+0x70>)
 800464e:	330a      	adds	r3, #10
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800465a:	7dfa      	ldrb	r2, [r7, #23]
 800465c:	4619      	mov	r1, r3
 800465e:	f7fd fcad 	bl	8001fbc <update_sensorStatus>
  for (ii = 0; ii < JSON_device.deviceDescriptor.nSensor; ii++)
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	3301      	adds	r3, #1
 8004666:	75fb      	strb	r3, [r7, #23]
 8004668:	7dfa      	ldrb	r2, [r7, #23]
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <SDM_ReadJSON+0x70>)
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	429a      	cmp	r2, r3
 8004670:	d3e3      	bcc.n	800463a <SDM_ReadJSON+0x2a>
  }
  
  update_sensors_config();  
 8004672:	f7fd fdb1 	bl	80021d8 <update_sensors_config>
  
  return 0;  
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20002c94 	.word	0x20002c94

08004684 <SDM_CreateJSON>:

uint32_t SDM_CreateJSON(char **serialized_string)
{  
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  COM_Device_t *device; 
  uint32_t size;
  
  device = COM_GetDevice();  
 800468c:	f7fd fa82 	bl	8001b94 <COM_GetDevice>
 8004690:	60f8      	str	r0, [r7, #12]
  size = HSD_JSON_serialize_Device(device, serialized_string, PRETTY_JSON);
 8004692:	2201      	movs	r2, #1
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f7fc fcfa 	bl	8001090 <HSD_JSON_serialize_Device>
 800469c:	4603      	mov	r3, r0
 800469e:	60bb      	str	r3, [r7, #8]
  
  return size;
 80046a0:	68bb      	ldr	r3, [r7, #8]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <userButtonCallback>:



void userButtonCallback(uint16_t GPIO_Pin)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4603      	mov	r3, r0
 80046b2:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <userButtonCallback+0x14>
  {
  case USER_BUTTON_PIN:
	  SDM_StartMeasurements();
 80046ba:	f000 f805 	bl	80046c8 <SDM_StartMeasurements>
  default:
    break;
 80046be:	bf00      	nop
  }
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <SDM_StartMeasurements>:

void SDM_StartMeasurements(void)
{
 80046c8:	b5b0      	push	{r4, r5, r7, lr}
 80046ca:	b08a      	sub	sp, #40	; 0x28
 80046cc:	af00      	add	r7, sp, #0
    if( HAL_GetTick() - t_start > 1000 )
 80046ce:	f002 f839 	bl	8006744 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	4b26      	ldr	r3, [pc, #152]	; (8004770 <SDM_StartMeasurements+0xa8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046de:	d942      	bls.n	8004766 <SDM_StartMeasurements+0x9e>
    {
      if (com_status == HS_DATALOG_IDLE || com_status == HS_DATALOG_SD_STARTED )
 80046e0:	4b24      	ldr	r3, [pc, #144]	; (8004774 <SDM_StartMeasurements+0xac>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d004      	beq.n	80046f4 <SDM_StartMeasurements+0x2c>
 80046ea:	4b22      	ldr	r3, [pc, #136]	; (8004774 <SDM_StartMeasurements+0xac>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d138      	bne.n	8004766 <SDM_StartMeasurements+0x9e>
      {
    	 char startMeasurements [] = {"Start Measurements from USR Button!\n"};
 80046f4:	4b20      	ldr	r3, [pc, #128]	; (8004778 <SDM_StartMeasurements+0xb0>)
 80046f6:	463c      	mov	r4, r7
 80046f8:	461d      	mov	r5, r3
 80046fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004702:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004706:	6020      	str	r0, [r4, #0]
 8004708:	3404      	adds	r4, #4
 800470a:	7021      	strb	r1, [r4, #0]
    	 HAL_UART_Transmit(&huart2, (uint8_t *) startMeasurements, sizeof(startMeasurements), HAL_MAX_DELAY);
 800470c:	4639      	mov	r1, r7
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
 8004712:	2225      	movs	r2, #37	; 0x25
 8004714:	4819      	ldr	r0, [pc, #100]	; (800477c <SDM_StartMeasurements+0xb4>)
 8004716:	f00a feed 	bl	800f4f4 <HAL_UART_Transmit>

        // Cannot wait since we are in an ISR
        if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 800471a:	4b19      	ldr	r3, [pc, #100]	; (8004780 <SDM_StartMeasurements+0xb8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2200      	movs	r2, #0
 8004720:	f248 0101 	movw	r1, #32769	; 0x8001
 8004724:	4618      	mov	r0, r3
 8004726:	f012 fff5 	bl	8017714 <osMessagePut>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <SDM_StartMeasurements+0x6c>
        {
          _Error_Handler();
 8004730:	f000 f87e 	bl	8004830 <_Error_Handler>
        }

        t_start = HAL_GetTick();
 8004734:	f002 f806 	bl	8006744 <HAL_GetTick>
 8004738:	4603      	mov	r3, r0
 800473a:	4a0d      	ldr	r2, [pc, #52]	; (8004770 <SDM_StartMeasurements+0xa8>)
 800473c:	6013      	str	r3, [r2, #0]

#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
        t_start = SD_Logging_Time_Start = HAL_GetTick();
 800473e:	f002 f801 	bl	8006744 <HAL_GetTick>
 8004742:	4603      	mov	r3, r0
 8004744:	4a0f      	ldr	r2, [pc, #60]	; (8004784 <SDM_StartMeasurements+0xbc>)
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <SDM_StartMeasurements+0xbc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a08      	ldr	r2, [pc, #32]	; (8004770 <SDM_StartMeasurements+0xa8>)
 800474e:	6013      	str	r3, [r2, #0]

        if (SD_Logging_Enabled == 1)
 8004750:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <SDM_StartMeasurements+0xc0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d103      	bne.n	8004760 <SDM_StartMeasurements+0x98>
          SD_Logging_Enabled = 0;
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <SDM_StartMeasurements+0xc0>)
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
          SD_Logging_Enabled = 1;
#endif
      }
    }

}
 800475e:	e002      	b.n	8004766 <SDM_StartMeasurements+0x9e>
          SD_Logging_Enabled = 1;
 8004760:	4b09      	ldr	r3, [pc, #36]	; (8004788 <SDM_StartMeasurements+0xc0>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]
}
 8004766:	bf00      	nop
 8004768:	3728      	adds	r7, #40	; 0x28
 800476a:	46bd      	mov	sp, r7
 800476c:	bdb0      	pop	{r4, r5, r7, pc}
 800476e:	bf00      	nop
 8004770:	20002b68 	.word	0x20002b68
 8004774:	200002d4 	.word	0x200002d4
 8004778:	080226f8 	.word	0x080226f8
 800477c:	20000b04 	.word	0x20000b04
 8004780:	20002b10 	.word	0x20002b10
 8004784:	20002b74 	.word	0x20002b74
 8004788:	20002b78 	.word	0x20002b78

0800478c <SDM_AutosaveFile>:

#if (HSD_SD_LOGGING_MODE == HSD_SD_LOGGING_MODE_INTERMITTENT)
void SDM_AutosaveFile(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  if (SD_Logging_Active)
 8004790:	4b23      	ldr	r3, [pc, #140]	; (8004820 <SDM_AutosaveFile+0x94>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d020      	beq.n	80047da <SDM_AutosaveFile+0x4e>
  {
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_ACTIVE*1000 )
 8004798:	f001 ffd4 	bl	8006744 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	4b21      	ldr	r3, [pc, #132]	; (8004824 <SDM_AutosaveFile+0x98>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d936      	bls.n	800481a <SDM_AutosaveFile+0x8e>
    {
      // Cannot wait since we are in an ISR
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 80047ac:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <SDM_AutosaveFile+0x9c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f248 0101 	movw	r1, #32769	; 0x8001
 80047b6:	4618      	mov	r0, r3
 80047b8:	f012 ffac 	bl	8017714 <osMessagePut>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <SDM_AutosaveFile+0x3a>
      {
        _Error_Handler();
 80047c2:	f000 f835 	bl	8004830 <_Error_Handler>
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 80047c6:	f001 ffbd 	bl	8006744 <HAL_GetTick>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4a15      	ldr	r2, [pc, #84]	; (8004824 <SDM_AutosaveFile+0x98>)
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	4b14      	ldr	r3, [pc, #80]	; (8004824 <SDM_AutosaveFile+0x98>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a15      	ldr	r2, [pc, #84]	; (800482c <SDM_AutosaveFile+0xa0>)
 80047d6:	6013      	str	r3, [r2, #0]
        _Error_Handler();
      }      
      t_start = SD_Logging_Time_Start = HAL_GetTick();
    }
  }
}
 80047d8:	e01f      	b.n	800481a <SDM_AutosaveFile+0x8e>
    if( (HAL_GetTick() - SD_Logging_Time_Start) > HSD_LOGGING_TIME_SECONDS_IDLE*1000 )
 80047da:	f001 ffb3 	bl	8006744 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	4b10      	ldr	r3, [pc, #64]	; (8004824 <SDM_AutosaveFile+0x98>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d915      	bls.n	800481a <SDM_AutosaveFile+0x8e>
      if(osMessagePut(sdThreadQueue_id, SDM_START_STOP, 0) != osOK)
 80047ee:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <SDM_AutosaveFile+0x9c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f248 0101 	movw	r1, #32769	; 0x8001
 80047f8:	4618      	mov	r0, r3
 80047fa:	f012 ff8b 	bl	8017714 <osMessagePut>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <SDM_AutosaveFile+0x7c>
        _Error_Handler();
 8004804:	f000 f814 	bl	8004830 <_Error_Handler>
      t_start = SD_Logging_Time_Start = HAL_GetTick();
 8004808:	f001 ff9c 	bl	8006744 <HAL_GetTick>
 800480c:	4603      	mov	r3, r0
 800480e:	4a05      	ldr	r2, [pc, #20]	; (8004824 <SDM_AutosaveFile+0x98>)
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4b04      	ldr	r3, [pc, #16]	; (8004824 <SDM_AutosaveFile+0x98>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a05      	ldr	r2, [pc, #20]	; (800482c <SDM_AutosaveFile+0xa0>)
 8004818:	6013      	str	r3, [r2, #0]
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20002b64 	.word	0x20002b64
 8004824:	20002b74 	.word	0x20002b74
 8004828:	20002b10 	.word	0x20002b10
 800482c:	20002b68 	.word	0x20002b68

08004830 <_Error_Handler>:
* @brief  This function is executed in case of error occurrence
* @param  None
* @retval None
*/
static void _Error_Handler( void )
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  while (1)
 8004834:	e7fe      	b.n	8004834 <_Error_Handler+0x4>
	...

08004838 <SM_SPI_Init>:
* @param None
* @retval None
* @note callbacks to the MSP
*/
static void SM_SPI_Init(void)
{  
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* SPI3 parameter configuration*/
  hsm_spi.Instance = SM_SPI_x;
 800483c:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <SM_SPI_Init+0x88>)
 800483e:	4a21      	ldr	r2, [pc, #132]	; (80048c4 <SM_SPI_Init+0x8c>)
 8004840:	601a      	str	r2, [r3, #0]
  hsm_spi.Init.Mode = SPI_MODE_MASTER;
 8004842:	4b1f      	ldr	r3, [pc, #124]	; (80048c0 <SM_SPI_Init+0x88>)
 8004844:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004848:	605a      	str	r2, [r3, #4]
  hsm_spi.Init.Direction = SPI_DIRECTION_2LINES;
 800484a:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <SM_SPI_Init+0x88>)
 800484c:	2200      	movs	r2, #0
 800484e:	609a      	str	r2, [r3, #8]
  hsm_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8004850:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <SM_SPI_Init+0x88>)
 8004852:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004856:	60da      	str	r2, [r3, #12]
  hsm_spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004858:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <SM_SPI_Init+0x88>)
 800485a:	2202      	movs	r2, #2
 800485c:	611a      	str	r2, [r3, #16]
  hsm_spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 800485e:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <SM_SPI_Init+0x88>)
 8004860:	2201      	movs	r2, #1
 8004862:	615a      	str	r2, [r3, #20]
  hsm_spi.Init.NSS = SPI_NSS_SOFT;
 8004864:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <SM_SPI_Init+0x88>)
 8004866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800486a:	619a      	str	r2, [r3, #24]
  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /*SPI running @ 10 MHz */ /*stwin*/
 800486c:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <SM_SPI_Init+0x88>)
 800486e:	2218      	movs	r2, #24
 8004870:	61da      	str	r2, [r3, #28]
//  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; /*SPI running @ 10 MHz */ /*stwin*/
//  hsm_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /*SPI running @ 10 MHz */ /*stwin*/
  hsm_spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004872:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <SM_SPI_Init+0x88>)
 8004874:	2200      	movs	r2, #0
 8004876:	621a      	str	r2, [r3, #32]
  hsm_spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8004878:	4b11      	ldr	r3, [pc, #68]	; (80048c0 <SM_SPI_Init+0x88>)
 800487a:	2200      	movs	r2, #0
 800487c:	625a      	str	r2, [r3, #36]	; 0x24
  hsm_spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800487e:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <SM_SPI_Init+0x88>)
 8004880:	2200      	movs	r2, #0
 8004882:	629a      	str	r2, [r3, #40]	; 0x28
  hsm_spi.Init.CRCPolynomial = 7;
 8004884:	4b0e      	ldr	r3, [pc, #56]	; (80048c0 <SM_SPI_Init+0x88>)
 8004886:	2207      	movs	r2, #7
 8004888:	62da      	str	r2, [r3, #44]	; 0x2c
  hsm_spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800488a:	4b0d      	ldr	r3, [pc, #52]	; (80048c0 <SM_SPI_Init+0x88>)
 800488c:	2200      	movs	r2, #0
 800488e:	631a      	str	r2, [r3, #48]	; 0x30
  hsm_spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <SM_SPI_Init+0x88>)
 8004892:	2200      	movs	r2, #0
 8004894:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Register MSP Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_MSPINIT_CB_ID, SM_SPI_MspInit);
 8004896:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <SM_SPI_Init+0x90>)
 8004898:	2108      	movs	r1, #8
 800489a:	4809      	ldr	r0, [pc, #36]	; (80048c0 <SM_SPI_Init+0x88>)
 800489c:	f009 fc52 	bl	800e144 <HAL_SPI_RegisterCallback>
  
  if (HAL_SPI_Init(&hsm_spi) != HAL_OK)
 80048a0:	4807      	ldr	r0, [pc, #28]	; (80048c0 <SM_SPI_Init+0x88>)
 80048a2:	f009 fb85 	bl	800dfb0 <HAL_SPI_Init>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <SM_SPI_Init+0x78>
  {
    SM_Error_Handler();
 80048ac:	f000 f810 	bl	80048d0 <SM_Error_Handler>
  }
  
  /* Register SPI DMA complete Callback */
  HAL_SPI_RegisterCallback(&hsm_spi, HAL_SPI_TX_RX_COMPLETE_CB_ID, SM_SPI_TxRxCpltCallback);
 80048b0:	4a06      	ldr	r2, [pc, #24]	; (80048cc <SM_SPI_Init+0x94>)
 80048b2:	2102      	movs	r1, #2
 80048b4:	4802      	ldr	r0, [pc, #8]	; (80048c0 <SM_SPI_Init+0x88>)
 80048b6:	f009 fc45 	bl	800e144 <HAL_SPI_RegisterCallback>
}
 80048ba:	bf00      	nop
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20002cec 	.word	0x20002cec
 80048c4:	40003800 	.word	0x40003800
 80048c8:	08004bc9 	.word	0x08004bc9
 80048cc:	08004b31 	.word	0x08004b31

080048d0 <SM_Error_Handler>:

void SM_Error_Handler( void )
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  while (1)
 80048d4:	e7fe      	b.n	80048d4 <SM_Error_Handler+0x4>
	...

080048d8 <SM_OS_Init>:
*        read requests and a semaphore used to wait for DMA transfer complete
* @param None
* @retval None
*/
void SM_OS_Init(void)
{
 80048d8:	b5b0      	push	{r4, r5, r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
  /* Bus read semaphores */
  spiThreadSem_id = osSemaphoreCreate(osSemaphore(spiThreadSem), 1);
 80048de:	2101      	movs	r1, #1
 80048e0:	4819      	ldr	r0, [pc, #100]	; (8004948 <SM_OS_Init+0x70>)
 80048e2:	f012 fd5d 	bl	80173a0 <osSemaphoreCreate>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <SM_OS_Init+0x74>)
 80048ea:	6013      	str	r3, [r2, #0]
  osSemaphoreWait(spiThreadSem_id,osWaitForever);
 80048ec:	4b17      	ldr	r3, [pc, #92]	; (800494c <SM_OS_Init+0x74>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f04f 31ff 	mov.w	r1, #4294967295
 80048f4:	4618      	mov	r0, r3
 80048f6:	f012 fd77 	bl	80173e8 <osSemaphoreWait>
#if 0
  i2cThreadSem_id = osSemaphoreCreate(osSemaphore(i2cThreadSem), 1);
  osSemaphoreWait(i2cThreadSem_id,osWaitForever);    
#endif
  /* Bus read functions memory pools */  
  spiPool_id = osPoolCreate(osPool(spiPool));
 80048fa:	4815      	ldr	r0, [pc, #84]	; (8004950 <SM_OS_Init+0x78>)
 80048fc:	f012 fdf8 	bl	80174f0 <osPoolCreate>
 8004900:	4603      	mov	r3, r0
 8004902:	4a14      	ldr	r2, [pc, #80]	; (8004954 <SM_OS_Init+0x7c>)
 8004904:	6013      	str	r3, [r2, #0]
#if 0
  i2cPool_id = osPoolCreate(osPool(i2cPool));    
#endif
  /* Bus read queues */
  spiReqQueue_id = osMessageCreate(osMessageQ(spireqqueue), NULL);
 8004906:	2100      	movs	r1, #0
 8004908:	4813      	ldr	r0, [pc, #76]	; (8004958 <SM_OS_Init+0x80>)
 800490a:	f012 fef1 	bl	80176f0 <osMessageCreate>
 800490e:	4603      	mov	r3, r0
 8004910:	4a12      	ldr	r2, [pc, #72]	; (800495c <SM_OS_Init+0x84>)
 8004912:	6013      	str	r3, [r2, #0]
#if 0
  i2cReqQueue_id = osMessageCreate(osMessageQ(i2creqqueue), NULL);
#endif
  vQueueAddToRegistry( spiReqQueue_id, "spiReqQueue_id" );
 8004914:	4b11      	ldr	r3, [pc, #68]	; (800495c <SM_OS_Init+0x84>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4911      	ldr	r1, [pc, #68]	; (8004960 <SM_OS_Init+0x88>)
 800491a:	4618      	mov	r0, r3
 800491c:	f013 ff4e 	bl	80187bc <vQueueAddToRegistry>
  
  /* SPI read Thread*/
  osThreadDef(SPI_THREAD, spi_Thread, SPI_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
 8004920:	4b10      	ldr	r3, [pc, #64]	; (8004964 <SM_OS_Init+0x8c>)
 8004922:	1d3c      	adds	r4, r7, #4
 8004924:	461d      	mov	r5, r3
 8004926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800492a:	682b      	ldr	r3, [r5, #0]
 800492c:	6023      	str	r3, [r4, #0]
#if 0
  /* I2C read Thread*/
  osThreadDef(I2C_THREAD, i2c_Thread, I2C_RD_THREAD_PRIO, 1, configMINIMAL_STACK_SIZE);
#endif
  /* Start SPI read Thread */
  spiThreadId = osThreadCreate(osThread(SPI_THREAD), NULL);
 800492e:	1d3b      	adds	r3, r7, #4
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f012 fd0d 	bl	8017352 <osThreadCreate>
 8004938:	4603      	mov	r3, r0
 800493a:	4a0b      	ldr	r2, [pc, #44]	; (8004968 <SM_OS_Init+0x90>)
 800493c:	6013      	str	r3, [r2, #0]
#if 0
  /* Start I2C read Thread */
  i2cThreadId = osThreadCreate(osThread(I2C_THREAD), NULL);
#endif
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bdb0      	pop	{r4, r5, r7, pc}
 8004946:	bf00      	nop
 8004948:	0802294c 	.word	0x0802294c
 800494c:	20002ce8 	.word	0x20002ce8
 8004950:	08022958 	.word	0x08022958
 8004954:	20002efc 	.word	0x20002efc
 8004958:	08022950 	.word	0x08022950
 800495c:	20002ef4 	.word	0x20002ef4
 8004960:	0802272c 	.word	0x0802272c
 8004964:	0802273c 	.word	0x0802273c
 8004968:	20002ef8 	.word	0x20002ef8

0800496c <SM_SPI_Read_Os>:
* @note when the function is used and linked to the sensor context, all the calls made by the PID driver will result in a
*       call to this function. If this is the case, be sure to make all the calls to the PID driver functions from a freeRTOS thread
* @retval None
*/
int32_t SM_SPI_Read_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	461a      	mov	r2, r3
 8004978:	460b      	mov	r3, r1
 800497a:	72fb      	strb	r3, [r7, #11]
 800497c:	4613      	mov	r3, r2
 800497e:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 8004980:	2300      	movs	r3, #0
 8004982:	75fb      	strb	r3, [r7, #23]
  SM_Message_t * msg;
  
  msg = osPoolAlloc(spiPool_id);
 8004984:	4b1a      	ldr	r3, [pc, #104]	; (80049f0 <SM_SPI_Read_Os+0x84>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f012 fe0e 	bl	80175aa <osPoolAlloc>
 800498e:	6138      	str	r0, [r7, #16]
  
  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	2b33      	cmp	r3, #51	; 0x33
 8004996:	d104      	bne.n	80049a2 <SM_SPI_Read_Os+0x36>
 8004998:	893b      	ldrh	r3, [r7, #8]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d901      	bls.n	80049a2 <SM_SPI_Read_Os+0x36>
  {
    autoInc = 0x40;
 800499e:	2340      	movs	r3, #64	; 0x40
 80049a0:	75fb      	strb	r3, [r7, #23]
  }
  
  msg->sensorHandler = handle;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg | 0x80 | autoInc;
 80049a8:	7afa      	ldrb	r2, [r7, #11]
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	893a      	ldrh	r2, [r7, #8]
 80049be:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <SM_SPI_Read_Os+0x88>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6939      	ldr	r1, [r7, #16]
 80049cc:	f04f 32ff 	mov.w	r2, #4294967295
 80049d0:	4618      	mov	r0, r3
 80049d2:	f012 fe9f 	bl	8017714 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f04f 31ff 	mov.w	r1, #4294967295
 80049e0:	4618      	mov	r0, r3
 80049e2:	f012 fd01 	bl	80173e8 <osSemaphoreWait>
  
  return 0;  
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20002efc 	.word	0x20002efc
 80049f4:	20002ef4 	.word	0x20002ef4

080049f8 <SM_SPI_Write_Os>:

int32_t SM_SPI_Write_Os(void * handle, uint8_t reg, uint8_t * data, uint16_t len)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	461a      	mov	r2, r3
 8004a04:	460b      	mov	r3, r1
 8004a06:	72fb      	strb	r3, [r7, #11]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	813b      	strh	r3, [r7, #8]
  uint8_t autoInc = 0x00;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]

  if (((sensor_handle_t *)handle)->WhoAmI == IIS2DH_ID && len > 1) 
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b33      	cmp	r3, #51	; 0x33
 8004a16:	d104      	bne.n	8004a22 <SM_SPI_Write_Os+0x2a>
 8004a18:	893b      	ldrh	r3, [r7, #8]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d901      	bls.n	8004a22 <SM_SPI_Write_Os+0x2a>
  {
    autoInc = 0x40;
 8004a1e:	2340      	movs	r3, #64	; 0x40
 8004a20:	75fb      	strb	r3, [r7, #23]
  }
  
  SM_Message_t * msg;  
  msg = osPoolAlloc(spiPool_id);
 8004a22:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <SM_SPI_Write_Os+0x80>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f012 fdbf 	bl	80175aa <osPoolAlloc>
 8004a2c:	6138      	str	r0, [r7, #16]
  msg->sensorHandler = handle;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	601a      	str	r2, [r3, #0]
  msg->regAddr = reg|autoInc ;
 8004a34:	7afa      	ldrb	r2, [r7, #11]
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	731a      	strb	r2, [r3, #12]
  msg->readSize = len;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	893a      	ldrh	r2, [r7, #8]
 8004a44:	81da      	strh	r2, [r3, #14]
  msg->dataPtr = data;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
  
  osMessagePut(spiReqQueue_id, (uint32_t)(msg), osWaitForever);  
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <SM_SPI_Write_Os+0x84>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6939      	ldr	r1, [r7, #16]
 8004a52:	f04f 32ff 	mov.w	r2, #4294967295
 8004a56:	4618      	mov	r0, r3
 8004a58:	f012 fe5c 	bl	8017714 <osMessagePut>
  osSemaphoreWait(*(((sensor_handle_t *)handle)->sem), osWaitForever);    
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f04f 31ff 	mov.w	r1, #4294967295
 8004a66:	4618      	mov	r0, r3
 8004a68:	f012 fcbe 	bl	80173e8 <osSemaphoreWait>
  
  return 0;  
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20002efc 	.word	0x20002efc
 8004a7c:	20002ef4 	.word	0x20002ef4

08004a80 <spi_Thread>:
*         the thread which made the request at the end of the read.
* @param  argument not used
* @retval None
*/
static void spi_Thread(void const *argument)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  (void)argument;
  
#if (configUSE_APPLICATION_TASK_TAG == 1 && defined(TASK_SM_SPI_DEBUG_PIN))
  vTaskSetApplicationTaskTag( NULL, (TaskHookFunction_t)TASK_SM_SPI_DEBUG_PIN );
 8004a88:	210a      	movs	r1, #10
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f014 fb92 	bl	80191b4 <vTaskSetApplicationTaskTag>
#endif

  osEvent evt;
  for (;;)
  {    
    evt = osMessageGet(spiReqQueue_id, osWaitForever); 
 8004a90:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <spi_Thread+0xa0>)
 8004a92:	6819      	ldr	r1, [r3, #0]
 8004a94:	f107 030c 	add.w	r3, r7, #12
 8004a98:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f012 fe79 	bl	8017794 <osMessageGet>

    SM_Message_t * msg = evt.value.p;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_RESET);
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6858      	ldr	r0, [r3, #4]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	891b      	ldrh	r3, [r3, #8]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f004 f801 	bl	8008abc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hsm_spi, &msg->regAddr, 1, 1000);
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	f103 010c 	add.w	r1, r3, #12
 8004ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	4817      	ldr	r0, [pc, #92]	; (8004b24 <spi_Thread+0xa4>)
 8004ac8:	f009 fbe2 	bl	800e290 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive_DMA(&hsm_spi, msg->dataPtr, msg->dataPtr, msg->readSize);
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	6899      	ldr	r1, [r3, #8]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	89db      	ldrh	r3, [r3, #14]
 8004ad8:	4812      	ldr	r0, [pc, #72]	; (8004b24 <spi_Thread+0xa4>)
 8004ada:	f009 fd3f 	bl	800e55c <HAL_SPI_TransmitReceive_DMA>
    
    osSemaphoreWait(spiThreadSem_id, osWaitForever);
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <spi_Thread+0xa8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f012 fc7e 	bl	80173e8 <osSemaphoreWait>
    
    HAL_GPIO_WritePin(((sensor_handle_t *)msg->sensorHandler)->GPIOx, ((sensor_handle_t *)msg->sensorHandler)->GPIO_Pin , GPIO_PIN_SET); 
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6858      	ldr	r0, [r3, #4]
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	891b      	ldrh	r3, [r3, #8]
 8004af8:	2201      	movs	r2, #1
 8004afa:	4619      	mov	r1, r3
 8004afc:	f003 ffde 	bl	8008abc <HAL_GPIO_WritePin>

    osSemaphoreId * sem = ((sensor_handle_t *)msg->sensorHandler)->sem;
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	61bb      	str	r3, [r7, #24]
    osPoolFree(spiPool_id, msg);
 8004b08:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <spi_Thread+0xac>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69f9      	ldr	r1, [r7, #28]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f012 fdad 	bl	801766e <osPoolFree>
    osSemaphoreRelease(*sem);
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f012 fcb3 	bl	8017484 <osSemaphoreRelease>
  {    
 8004b1e:	e7b7      	b.n	8004a90 <spi_Thread+0x10>
 8004b20:	20002ef4 	.word	0x20002ef4
 8004b24:	20002cec 	.word	0x20002cec
 8004b28:	20002ce8 	.word	0x20002ce8
 8004b2c:	20002efc 	.word	0x20002efc

08004b30 <SM_SPI_TxRxCpltCallback>:
  }
}

static void SM_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(spiThreadSem_id);    
 8004b38:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <SM_SPI_TxRxCpltCallback+0x1c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f012 fca1 	bl	8017484 <osSemaphoreRelease>
}
 8004b42:	bf00      	nop
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20002ce8 	.word	0x20002ce8

08004b50 <SM_Peripheral_Init>:
{
  errors++;
}

void SM_Peripheral_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  SM_DMA_Init();
 8004b54:	f000 f806 	bl	8004b64 <SM_DMA_Init>
//  SM_I2C_Init();
  SM_SPI_Init();
 8004b58:	f7ff fe6e 	bl	8004838 <SM_SPI_Init>
  SM_TIM_Init();
 8004b5c:	f000 f976 	bl	8004e4c <SM_TIM_Init>
}
 8004b60:	bf00      	nop
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <SM_DMA_Init>:

/** 
* Enable DMA controller clock
*/
static void SM_DMA_Init(void) 
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004b6a:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <SM_DMA_Init+0x60>)
 8004b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6e:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <SM_DMA_Init+0x60>)
 8004b70:	f043 0304 	orr.w	r3, r3, #4
 8004b74:	6493      	str	r3, [r2, #72]	; 0x48
 8004b76:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <SM_DMA_Init+0x60>)
 8004b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	607b      	str	r3, [r7, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
  SM_SPIx_DMA_CLK_ENABLE();
 8004b82:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <SM_DMA_Init+0x60>)
 8004b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b86:	4a0f      	ldr	r2, [pc, #60]	; (8004bc4 <SM_DMA_Init+0x60>)
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	6493      	str	r3, [r2, #72]	; 0x48
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <SM_DMA_Init+0x60>)
 8004b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_I2C_RX_DMA_IRQn, 3, 0);
  HAL_NVIC_EnableIRQ(SM_I2C_RX_DMA_IRQn);
#endif
  /* SM_SPI_RX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_RX_DMA_IRQn, 3, 0);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2103      	movs	r1, #3
 8004b9e:	200b      	movs	r0, #11
 8004ba0:	f003 fb2b 	bl	80081fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_RX_DMA_IRQn);
 8004ba4:	200b      	movs	r0, #11
 8004ba6:	f003 fb44 	bl	8008232 <HAL_NVIC_EnableIRQ>
  
  /* SM_SPI_TX_DMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SM_SPI_TX_DMA_IRQn, 3, 0);
 8004baa:	2200      	movs	r2, #0
 8004bac:	2103      	movs	r1, #3
 8004bae:	200c      	movs	r0, #12
 8004bb0:	f003 fb23 	bl	80081fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SM_SPI_TX_DMA_IRQn);
 8004bb4:	200c      	movs	r0, #12
 8004bb6:	f003 fb3c 	bl	8008232 <HAL_NVIC_EnableIRQ>
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <SM_SPI_MspInit>:

static void SM_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08e      	sub	sp, #56	; 0x38
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	611a      	str	r2, [r3, #16]
  
//  HAL_GPIO_WritePin(IIS3DWB_1_2_SEL_GPIO_Port, IIS3DWB_1_2_SEL_Pin, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(IIS3DWB_3_4_SEL_GPIO_Port, IIS3DWB_3_4_SEL_Pin, GPIO_PIN_SET);

  SM_SPI_CLK_PIN_CLK_ENABLE(); 
 8004be0:	4b8f      	ldr	r3, [pc, #572]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be4:	4a8e      	ldr	r2, [pc, #568]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004be6:	f043 0308 	orr.w	r3, r3, #8
 8004bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bec:	4b8c      	ldr	r3, [pc, #560]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	623b      	str	r3, [r7, #32]
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
  SM_SPI_MISO_PIN_CLK_ENABLE(); 
 8004bf8:	4b89      	ldr	r3, [pc, #548]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfc:	4a88      	ldr	r2, [pc, #544]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004bfe:	f043 0308 	orr.w	r3, r3, #8
 8004c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c04:	4b86      	ldr	r3, [pc, #536]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
  SM_SPI_MOSI_PIN_CLK_ENABLE(); 
 8004c10:	4b83      	ldr	r3, [pc, #524]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c14:	4a82      	ldr	r2, [pc, #520]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c16:	f043 0304 	orr.w	r3, r3, #4
 8004c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c1c:	4b80      	ldr	r3, [pc, #512]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();		//SPI2_CS		Enabled from disabled
 8004c28:	4b7d      	ldr	r3, [pc, #500]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2c:	4a7c      	ldr	r2, [pc, #496]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c2e:	f043 0302 	orr.w	r3, r3, #2
 8004c32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c34:	4b7a      	ldr	r3, [pc, #488]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();		//SEL_3_4		Enabled from disabled
 8004c40:	4b77      	ldr	r3, [pc, #476]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c44:	4a76      	ldr	r2, [pc, #472]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c46:	f043 0320 	orr.w	r3, r3, #32
 8004c4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c4c:	4b74      	ldr	r3, [pc, #464]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();		//SEL_1_2		Enabled from disabled
 8004c58:	4b71      	ldr	r3, [pc, #452]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5c:	4a70      	ldr	r2, [pc, #448]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c64:	4b6e      	ldr	r3, [pc, #440]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	68fb      	ldr	r3, [r7, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIS3DWB_SPI_CS_GPIO_Port, IIS3DWB_SPI_CS_Pin, GPIO_PIN_SET);		//Enabled from disabled
 8004c70:	2201      	movs	r2, #1
 8004c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c76:	486b      	ldr	r0, [pc, #428]	; (8004e24 <SM_SPI_MspInit+0x25c>)
 8004c78:	f003 ff20 	bl	8008abc <HAL_GPIO_WritePin>

  //Configure GPIO pin Output Level of 1_2_SEL and 3_4_SEL
  HAL_GPIO_WritePin(IIS3DWB_1_2_SEL_GPIO_Port, IIS3DWB_1_2_SEL_Pin, GPIO_PIN_RESET);	//Enabled from disabled
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2101      	movs	r1, #1
 8004c80:	4869      	ldr	r0, [pc, #420]	; (8004e28 <SM_SPI_MspInit+0x260>)
 8004c82:	f003 ff1b 	bl	8008abc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IIS3DWB_3_4_SEL_GPIO_Port, IIS3DWB_3_4_SEL_Pin, GPIO_PIN_SET);		//Enabled from disabled
 8004c86:	2201      	movs	r2, #1
 8004c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c8c:	4867      	ldr	r0, [pc, #412]	; (8004e2c <SM_SPI_MspInit+0x264>)
 8004c8e:	f003 ff15 	bl	8008abc <HAL_GPIO_WritePin>
  
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c92:	2302      	movs	r3, #2
 8004c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	633b      	str	r3, [r7, #48]	; 0x30
  
  GPIO_InitStruct.Alternate = SM_SPI_CLK_AF;
 8004c9e:	2305      	movs	r3, #5
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Pin = SM_SPI_CLK_PIN;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM_SPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004caa:	4619      	mov	r1, r3
 8004cac:	4860      	ldr	r0, [pc, #384]	; (8004e30 <SM_SPI_MspInit+0x268>)
 8004cae:	f003 fd5b 	bl	8008768 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MISO_AF;
 8004cb2:	2305      	movs	r3, #5
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Pin = SM_SPI_MISO_PIN;
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	485b      	ldr	r0, [pc, #364]	; (8004e30 <SM_SPI_MspInit+0x268>)
 8004cc2:	f003 fd51 	bl	8008768 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = SM_SPI_MOSI_AF;
 8004cc6:	2305      	movs	r3, #5
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Pin = SM_SPI_MOSI_PIN;
 8004cca:	2308      	movs	r3, #8
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4857      	ldr	r0, [pc, #348]	; (8004e34 <SM_SPI_MspInit+0x26c>)
 8004cd6:	f003 fd47 	bl	8008768 <HAL_GPIO_Init>

//Import from IIS3DWB_Peripheral_Init() in iis3dwb_app.c
  /*Configure GPIO pin : IIS3DWB_SPI_CS_Pin */
  GPIO_InitStruct.Pin = IIS3DWB_SPI_CS_Pin;
 8004cda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IIS3DWB_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8004cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	484c      	ldr	r0, [pc, #304]	; (8004e24 <SM_SPI_MspInit+0x25c>)
 8004cf4:	f003 fd38 	bl	8008768 <HAL_GPIO_Init>

  /*Configure GPIO pins : STTS751_INT_Pin IIS3DWB_INT1_Pin */
  GPIO_InitStruct.Pin =  IIS3DWB_INT1_Pin ;
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cfc:	4b4e      	ldr	r3, [pc, #312]	; (8004e38 <SM_SPI_MspInit+0x270>)
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IIS3DWB_INT1_GPIO_Port, &GPIO_InitStruct);
 8004d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d08:	4619      	mov	r1, r3
 8004d0a:	484a      	ldr	r0, [pc, #296]	; (8004e34 <SM_SPI_MspInit+0x26c>)
 8004d0c:	f003 fd2c 	bl	8008768 <HAL_GPIO_Init>

  /*Configure GPIO pins: Select_1_2*/
  GPIO_InitStruct.Pin = IIS3DWB_1_2_SEL_Pin;
 8004d10:	2301      	movs	r3, #1
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d14:	2301      	movs	r3, #1
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IIS3DWB_1_2_SEL_GPIO_Port, &GPIO_InitStruct);
 8004d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d24:	4619      	mov	r1, r3
 8004d26:	4840      	ldr	r0, [pc, #256]	; (8004e28 <SM_SPI_MspInit+0x260>)
 8004d28:	f003 fd1e 	bl	8008768 <HAL_GPIO_Init>

  /*Configure GPIO pins: Select_3_4*/
  GPIO_InitStruct.Pin = IIS3DWB_3_4_SEL_Pin;
 8004d2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d32:	2301      	movs	r3, #1
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(IIS3DWB_3_4_SEL_GPIO_Port, &GPIO_InitStruct);
 8004d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d42:	4619      	mov	r1, r3
 8004d44:	4839      	ldr	r0, [pc, #228]	; (8004e2c <SM_SPI_MspInit+0x264>)
 8004d46:	f003 fd0f 	bl	8008768 <HAL_GPIO_Init>
//Import from IIS3DWB_Peripheral_Init() in iis3dwb_app.c

  SM_SPIx_CLK_ENABLE();
 8004d4a:	4b35      	ldr	r3, [pc, #212]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4e:	4a34      	ldr	r2, [pc, #208]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d54:	6593      	str	r3, [r2, #88]	; 0x58
 8004d56:	4b32      	ldr	r3, [pc, #200]	; (8004e20 <SM_SPI_MspInit+0x258>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
    
  /* SPI DMA Init */
  /* SPI_RX Init */
  hdma_sm_spi_rx.Instance = SM_SPI_RX_DMA_CHANNEL;
 8004d62:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <SM_SPI_MspInit+0x274>)
 8004d64:	4a36      	ldr	r2, [pc, #216]	; (8004e40 <SM_SPI_MspInit+0x278>)
 8004d66:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_rx.Init.Request = SM_SPI_RX_DMA_REQUEST;
 8004d68:	4b34      	ldr	r3, [pc, #208]	; (8004e3c <SM_SPI_MspInit+0x274>)
 8004d6a:	220c      	movs	r2, #12
 8004d6c:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d6e:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <SM_SPI_MspInit+0x274>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d74:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <SM_SPI_MspInit+0x274>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d7a:	4b30      	ldr	r3, [pc, #192]	; (8004e3c <SM_SPI_MspInit+0x274>)
 8004d7c:	2280      	movs	r2, #128	; 0x80
 8004d7e:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d80:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <SM_SPI_MspInit+0x274>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d86:	4b2d      	ldr	r3, [pc, #180]	; (8004e3c <SM_SPI_MspInit+0x274>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_rx.Init.Mode = DMA_NORMAL;
 8004d8c:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <SM_SPI_MspInit+0x274>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d92:	4b2a      	ldr	r3, [pc, #168]	; (8004e3c <SM_SPI_MspInit+0x274>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_rx) != HAL_OK)
 8004d98:	4828      	ldr	r0, [pc, #160]	; (8004e3c <SM_SPI_MspInit+0x274>)
 8004d9a:	f003 fa65 	bl	8008268 <HAL_DMA_Init>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <SM_SPI_MspInit+0x1e0>
  {
    SM_Error_Handler();
 8004da4:	f7ff fd94 	bl	80048d0 <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmarx,hdma_sm_spi_rx);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a24      	ldr	r2, [pc, #144]	; (8004e3c <SM_SPI_MspInit+0x274>)
 8004dac:	659a      	str	r2, [r3, #88]	; 0x58
 8004dae:	4a23      	ldr	r2, [pc, #140]	; (8004e3c <SM_SPI_MspInit+0x274>)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6293      	str	r3, [r2, #40]	; 0x28
  
  /* SPI_TX Init */
  hdma_sm_spi_tx.Instance = SM_SPI_TX_DMA_CHANNEL;
 8004db4:	4b23      	ldr	r3, [pc, #140]	; (8004e44 <SM_SPI_MspInit+0x27c>)
 8004db6:	4a24      	ldr	r2, [pc, #144]	; (8004e48 <SM_SPI_MspInit+0x280>)
 8004db8:	601a      	str	r2, [r3, #0]
  hdma_sm_spi_tx.Init.Request = SM_SPI_TX_DMA_REQUEST;
 8004dba:	4b22      	ldr	r3, [pc, #136]	; (8004e44 <SM_SPI_MspInit+0x27c>)
 8004dbc:	220d      	movs	r2, #13
 8004dbe:	605a      	str	r2, [r3, #4]
  hdma_sm_spi_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004dc0:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <SM_SPI_MspInit+0x27c>)
 8004dc2:	2210      	movs	r2, #16
 8004dc4:	609a      	str	r2, [r3, #8]
  hdma_sm_spi_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dc6:	4b1f      	ldr	r3, [pc, #124]	; (8004e44 <SM_SPI_MspInit+0x27c>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	60da      	str	r2, [r3, #12]
  hdma_sm_spi_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <SM_SPI_MspInit+0x27c>)
 8004dce:	2280      	movs	r2, #128	; 0x80
 8004dd0:	611a      	str	r2, [r3, #16]
  hdma_sm_spi_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dd2:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <SM_SPI_MspInit+0x27c>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	615a      	str	r2, [r3, #20]
  hdma_sm_spi_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dd8:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <SM_SPI_MspInit+0x27c>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	619a      	str	r2, [r3, #24]
  hdma_sm_spi_tx.Init.Mode = DMA_NORMAL;
 8004dde:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <SM_SPI_MspInit+0x27c>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	61da      	str	r2, [r3, #28]
  hdma_sm_spi_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004de4:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <SM_SPI_MspInit+0x27c>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_sm_spi_tx) != HAL_OK)
 8004dea:	4816      	ldr	r0, [pc, #88]	; (8004e44 <SM_SPI_MspInit+0x27c>)
 8004dec:	f003 fa3c 	bl	8008268 <HAL_DMA_Init>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <SM_SPI_MspInit+0x232>
  {
    SM_Error_Handler();
 8004df6:	f7ff fd6b 	bl	80048d0 <SM_Error_Handler>
  }
  
  __HAL_LINKDMA(hspi,hdmatx,hdma_sm_spi_tx);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <SM_SPI_MspInit+0x27c>)
 8004dfe:	655a      	str	r2, [r3, #84]	; 0x54
 8004e00:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <SM_SPI_MspInit+0x27c>)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6293      	str	r3, [r2, #40]	; 0x28

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8004e06:	2200      	movs	r2, #0
 8004e08:	2105      	movs	r1, #5
 8004e0a:	2017      	movs	r0, #23
 8004e0c:	f003 f9f5 	bl	80081fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004e10:	2017      	movs	r0, #23
 8004e12:	f003 fa0e 	bl	8008232 <HAL_NVIC_EnableIRQ>
}
 8004e16:	bf00      	nop
 8004e18:	3738      	adds	r7, #56	; 0x38
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40021000 	.word	0x40021000
 8004e24:	48000400 	.word	0x48000400
 8004e28:	48001800 	.word	0x48001800
 8004e2c:	48001400 	.word	0x48001400
 8004e30:	48000c00 	.word	0x48000c00
 8004e34:	48000800 	.word	0x48000800
 8004e38:	10110000 	.word	0x10110000
 8004e3c:	20002e54 	.word	0x20002e54
 8004e40:	40020008 	.word	0x40020008
 8004e44:	20002df4 	.word	0x20002df4
 8004e48:	4002001c 	.word	0x4002001c

08004e4c <SM_TIM_Init>:
  HAL_NVIC_SetPriority(I2C2_ER_IRQn, 4, 0);
  HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);  
}

void SM_TIM_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
  SM_TIMx_CLK_ENABLE();
 8004e52:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <SM_TIM_Init+0x54>)
 8004e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e56:	4a12      	ldr	r2, [pc, #72]	; (8004ea0 <SM_TIM_Init+0x54>)
 8004e58:	f043 0308 	orr.w	r3, r3, #8
 8004e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e5e:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <SM_TIM_Init+0x54>)
 8004e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	607b      	str	r3, [r7, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
  /* Set TIMx instance */
  hsm_tim.Instance = SM_TIMx;
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <SM_TIM_Init+0x58>)
 8004e6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ea8 <SM_TIM_Init+0x5c>)
 8004e6e:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = (SystemCoreClock/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  hsm_tim.Init.Period            = 0xFFFFFFFF;
 8004e70:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <SM_TIM_Init+0x58>)
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295
 8004e76:	60da      	str	r2, [r3, #12]
  hsm_tim.Init.Prescaler         = 0;
 8004e78:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <SM_TIM_Init+0x58>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	605a      	str	r2, [r3, #4]
  hsm_tim.Init.ClockDivision     = 0;
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <SM_TIM_Init+0x58>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	611a      	str	r2, [r3, #16]
  hsm_tim.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8004e84:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <SM_TIM_Init+0x58>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	609a      	str	r2, [r3, #8]
  hsm_tim.Init.RepetitionCounter = 0;
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <SM_TIM_Init+0x58>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	615a      	str	r2, [r3, #20]

  if (HAL_TIM_Base_Init(&hsm_tim) != HAL_OK)
 8004e90:	4804      	ldr	r0, [pc, #16]	; (8004ea4 <SM_TIM_Init+0x58>)
 8004e92:	f009 ff81 	bl	800ed98 <HAL_TIM_Base_Init>
  {
    /* Initialization Error */
//    Error_Handler();
  }
}
 8004e96:	bf00      	nop
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	20002eb4 	.word	0x20002eb4
 8004ea8:	40000c00 	.word	0x40000c00

08004eac <SM_TIM_Start>:

void SM_TIM_Start(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Start(&hsm_tim) != HAL_OK)
 8004eb0:	4802      	ldr	r0, [pc, #8]	; (8004ebc <SM_TIM_Start+0x10>)
 8004eb2:	f009 ffa7 	bl	800ee04 <HAL_TIM_Base_Start>
  {
    /* Starting Error */
//    Error_Handler();
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20002eb4 	.word	0x20002eb4

08004ec0 <SM_TIM_Stop>:

void SM_TIM_Stop(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /*##-2- Start the TIM Base generation ####################*/
  if (HAL_TIM_Base_Stop(&hsm_tim) != HAL_OK)
 8004ec4:	4804      	ldr	r0, [pc, #16]	; (8004ed8 <SM_TIM_Stop+0x18>)
 8004ec6:	f009 ffc7 	bl	800ee58 <HAL_TIM_Base_Stop>
  {
    /* Starting Error */
//    Error_Handler();
  }
  hsm_tim.Instance->CNT = 0;
 8004eca:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <SM_TIM_Stop+0x18>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004ed2:	bf00      	nop
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20002eb4 	.word	0x20002eb4

08004edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004eea:	b480      	push	{r7}
 8004eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eee:	e7fe      	b.n	8004eee <HardFault_Handler+0x4>

08004ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ef4:	e7fe      	b.n	8004ef4 <MemManage_Handler+0x4>

08004ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004efa:	e7fe      	b.n	8004efa <BusFault_Handler+0x4>

08004efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f00:	e7fe      	b.n	8004f00 <UsageFault_Handler+0x4>

08004f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f02:	b480      	push	{r7}
 8004f04:	af00      	add	r7, sp, #0

}
 8004f06:	bf00      	nop
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
 HAL_IncTick();
 8004f14:	f001 fc04 	bl	8006720 <HAL_IncTick>
 osSystickHandler();
 8004f18:	f012 fcb0 	bl	801787c <osSystickHandler>
}
 8004f1c:	bf00      	nop
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <PVD_PVM_IRQHandler>:
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/
void PVD_PVM_IRQHandler(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  HAL_PWREx_PVD_PVM_IRQHandler();
 8004f24:	f005 face 	bl	800a4c4 <HAL_PWREx_PVD_PVM_IRQHandler>
}
 8004f28:	bf00      	nop
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line[0] interrupts.
  */
void EXTI0_IRQHandler(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8004f30:	2001      	movs	r0, #1
 8004f32:	f003 fdf5 	bl	8008b20 <HAL_GPIO_EXTI_IRQHandler>
}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
   HAL_EXTI_IRQHandler(&hts221_exti);  
 8004f40:	4806      	ldr	r0, [pc, #24]	; (8004f5c <EXTI9_5_IRQHandler+0x20>)
 8004f42:	f003 fbe1 	bl	8008708 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&ism330dhcx_exti);  
 8004f46:	4806      	ldr	r0, [pc, #24]	; (8004f60 <EXTI9_5_IRQHandler+0x24>)
 8004f48:	f003 fbde 	bl	8008708 <HAL_EXTI_IRQHandler>
   HAL_EXTI_IRQHandler(&iis2mdc_exti);
 8004f4c:	4805      	ldr	r0, [pc, #20]	; (8004f64 <EXTI9_5_IRQHandler+0x28>)
 8004f4e:	f003 fbdb 	bl	8008708 <HAL_EXTI_IRQHandler>
   HAL_GPIO_EXTI_IRQHandler(IIS3DWB_INT1_Pin);
 8004f52:	2020      	movs	r0, #32
 8004f54:	f003 fde4 	bl	8008b20 <HAL_GPIO_EXTI_IRQHandler>
}
 8004f58:	bf00      	nop
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	200002f4 	.word	0x200002f4
 8004f60:	2000073c 	.word	0x2000073c
 8004f64:	20000338 	.word	0x20000338

08004f68 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hsm_i2c);
 8004f6c:	4802      	ldr	r0, [pc, #8]	; (8004f78 <I2C2_EV_IRQHandler+0x10>)
 8004f6e:	f003 fdef 	bl	8008b50 <HAL_I2C_EV_IRQHandler>
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20002d78 	.word	0x20002d78

08004f7c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hsm_i2c);
 8004f80:	4802      	ldr	r0, [pc, #8]	; (8004f8c <I2C2_ER_IRQHandler+0x10>)
 8004f82:	f003 fdff 	bl	8008b84 <HAL_I2C_ER_IRQHandler>
}
 8004f86:	bf00      	nop
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20002d78 	.word	0x20002d78

08004f90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
//  HAL_EXTI_IRQHandler(&iis3dwb_exti);
  HAL_EXTI_IRQHandler(&BC_exti);
 8004f94:	4802      	ldr	r0, [pc, #8]	; (8004fa0 <EXTI15_10_IRQHandler+0x10>)
 8004f96:	f003 fbb7 	bl	8008708 <HAL_EXTI_IRQHandler>
}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000af8 	.word	0x20000af8

08004fa4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI2_IRQHandler(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&iis2dh_exti);
 8004fa8:	4802      	ldr	r0, [pc, #8]	; (8004fb4 <EXTI2_IRQHandler+0x10>)
 8004faa:	f003 fbad 	bl	8008708 <HAL_EXTI_IRQHandler>
}
 8004fae:	bf00      	nop
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	200002fc 	.word	0x200002fc

08004fb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004fbc:	4802      	ldr	r0, [pc, #8]	; (8004fc8 <OTG_FS_IRQHandler+0x10>)
 8004fbe:	f004 faa8 	bl	8009512 <HAL_PCD_IRQHandler>
}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20002f1c 	.word	0x20002f1c

08004fcc <SDMMC1_IRQHandler>:

void SDMMC1_IRQHandler(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&hsd1);
 8004fd0:	4802      	ldr	r0, [pc, #8]	; (8004fdc <SDMMC1_IRQHandler+0x10>)
 8004fd2:	f007 fdd3 	bl	800cb7c <HAL_SD_IRQHandler>
}
 8004fd6:	bf00      	nop
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20002a88 	.word	0x20002a88

08004fe0 <STTS751_Set_State>:
    }      
  }
}

void STTS751_Set_State(SM_Sensor_State_t newState)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	71fb      	strb	r3, [r7, #7]
  STTS751_Sensor_State = newState;
 8004fea:	4a04      	ldr	r2, [pc, #16]	; (8004ffc <STTS751_Set_State+0x1c>)
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	7013      	strb	r3, [r2, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	20000035 	.word	0x20000035

08005000 <STTS751_Start>:
  STTS751_Init_Param.FS[0] = newFS1;
  STTS751_Init_Param.FS[0] = newFS2;
}

void STTS751_Start(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_INITIALIZING);
 8005004:	2003      	movs	r0, #3
 8005006:	f7ff ffeb 	bl	8004fe0 <STTS751_Set_State>
  osThreadResume(STTS751_Thread_Id);
 800500a:	4b03      	ldr	r3, [pc, #12]	; (8005018 <STTS751_Start+0x18>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f012 fc4c 	bl	80178ac <osThreadResume>
}
 8005014:	bf00      	nop
 8005016:	bd80      	pop	{r7, pc}
 8005018:	20002f18 	.word	0x20002f18

0800501c <STTS751_Stop>:

void STTS751_Stop(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  STTS751_Set_State(SM_SENSOR_STATE_SUSPENDING);
 8005020:	2001      	movs	r0, #1
 8005022:	f7ff ffdd 	bl	8004fe0 <STTS751_Set_State>
}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <SystemInit>:
#define VECTOR_TABLE 0x08000000
#endif


void SystemInit(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005030:	4b17      	ldr	r3, [pc, #92]	; (8005090 <SystemInit+0x64>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005036:	4a16      	ldr	r2, [pc, #88]	; (8005090 <SystemInit+0x64>)
 8005038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800503c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005040:	4b14      	ldr	r3, [pc, #80]	; (8005094 <SystemInit+0x68>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a13      	ldr	r2, [pc, #76]	; (8005094 <SystemInit+0x68>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800504c:	4b11      	ldr	r3, [pc, #68]	; (8005094 <SystemInit+0x68>)
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <SystemInit+0x68>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a0f      	ldr	r2, [pc, #60]	; (8005094 <SystemInit+0x68>)
 8005058:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800505c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005060:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <SystemInit+0x68>)
 8005064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005068:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <SystemInit+0x68>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a09      	ldr	r2, [pc, #36]	; (8005094 <SystemInit+0x68>)
 8005070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005074:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005076:	4b07      	ldr	r3, [pc, #28]	; (8005094 <SystemInit+0x68>)
 8005078:	2200      	movs	r2, #0
 800507a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800507c:	4b04      	ldr	r3, [pc, #16]	; (8005090 <SystemInit+0x64>)
 800507e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005082:	609a      	str	r2, [r3, #8]
#endif
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	e000ed00 	.word	0xe000ed00
 8005094:	40021000 	.word	0x40021000

08005098 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f00d fc99 	bl	80129e6 <USBD_LL_SetupStage>
}
 80050b4:	bf00      	nop
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	4619      	mov	r1, r3
 80050e6:	f00d fccb 	bl	8012a80 <USBD_LL_DataOutStage>
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	460b      	mov	r3, r1
 80050fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005104:	78fa      	ldrb	r2, [r7, #3]
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	3348      	adds	r3, #72	; 0x48
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	4619      	mov	r1, r3
 800511a:	f00d fd22 	bl	8012b62 <USBD_LL_DataInStage>
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005134:	4618      	mov	r0, r3
 8005136:	f00d fe35 	bl	8012da4 <USBD_LL_SOF>
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005150:	4618      	mov	r0, r3
 8005152:	f00d fdab 	bl	8012cac <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800515c:	2101      	movs	r1, #1
 800515e:	4618      	mov	r0, r3
 8005160:	f00d fde5 	bl	8012d2e <USBD_LL_SetSpeed>
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800517a:	4618      	mov	r0, r3
 800517c:	f00d fde7 	bl	8012d4e <USBD_LL_Suspend>
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005196:	4618      	mov	r0, r3
 8005198:	f00d fdee 	bl	8012d78 <USBD_LL_Resume>
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80051b6:	78fa      	ldrb	r2, [r7, #3]
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f00d fe19 	bl	8012df2 <USBD_LL_IsoOUTIncomplete>
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80051da:	78fa      	ldrb	r2, [r7, #3]
 80051dc:	4611      	mov	r1, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	f00d fdfa 	bl	8012dd8 <USBD_LL_IsoINIncomplete>
}
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80051fa:	4618      	mov	r0, r3
 80051fc:	f00d fe06 	bl	8012e0c <USBD_LL_DevConnected>
}
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005216:	4618      	mov	r0, r3
 8005218:	f00d fe03 	bl	8012e22 <USBD_LL_DevDisconnected>
}
 800521c:	bf00      	nop
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	4608      	mov	r0, r1
 800522e:	4611      	mov	r1, r2
 8005230:	461a      	mov	r2, r3
 8005232:	4603      	mov	r3, r0
 8005234:	70fb      	strb	r3, [r7, #3]
 8005236:	460b      	mov	r3, r1
 8005238:	70bb      	strb	r3, [r7, #2]
 800523a:	4613      	mov	r3, r2
 800523c:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005244:	78bb      	ldrb	r3, [r7, #2]
 8005246:	883a      	ldrh	r2, [r7, #0]
 8005248:	78f9      	ldrb	r1, [r7, #3]
 800524a:	f004 fd2b 	bl	8009ca4 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800526a:	78fa      	ldrb	r2, [r7, #3]
 800526c:	4611      	mov	r1, r2
 800526e:	4618      	mov	r0, r3
 8005270:	f004 fdfb 	bl	8009e6a <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	460b      	mov	r3, r1
 8005288:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005290:	78fa      	ldrb	r2, [r7, #3]
 8005292:	4611      	mov	r1, r2
 8005294:	4618      	mov	r0, r3
 8005296:	f004 fe4a 	bl	8009f2e <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052b6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80052b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	da0b      	bge.n	80052d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	4613      	mov	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	333e      	adds	r3, #62	; 0x3e
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	e00b      	b.n	80052f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052de:	68f9      	ldr	r1, [r7, #12]
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80052ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f004 fca1 	bl	8009c5a <HAL_PCD_SetAddress>
  return USBD_OK; 
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	461a      	mov	r2, r3
 800532e:	460b      	mov	r3, r1
 8005330:	72fb      	strb	r3, [r7, #11]
 8005332:	4613      	mov	r3, r2
 8005334:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800533c:	893b      	ldrh	r3, [r7, #8]
 800533e:	7af9      	ldrb	r1, [r7, #11]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	f004 fd55 	bl	8009df0 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	607a      	str	r2, [r7, #4]
 800535a:	461a      	mov	r2, r3
 800535c:	460b      	mov	r3, r1
 800535e:	72fb      	strb	r3, [r7, #11]
 8005360:	4613      	mov	r3, r2
 8005362:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800536a:	893b      	ldrh	r3, [r7, #8]
 800536c:	7af9      	ldrb	r1, [r7, #11]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	f004 fd00 	bl	8009d74 <HAL_PCD_EP_Receive>
  return USBD_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <iis3dwb_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 800537e:	b590      	push	{r4, r7, lr}
 8005380:	b087      	sub	sp, #28
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	461a      	mov	r2, r3
 800538a:	460b      	mov	r3, r1
 800538c:	72fb      	strb	r3, [r7, #11]
 800538e:	4613      	mov	r3, r2
 8005390:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685c      	ldr	r4, [r3, #4]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6898      	ldr	r0, [r3, #8]
 800539a:	893b      	ldrh	r3, [r7, #8]
 800539c:	7af9      	ldrb	r1, [r7, #11]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	47a0      	blx	r4
 80053a2:	6178      	str	r0, [r7, #20]
  return ret;
 80053a4:	697b      	ldr	r3, [r7, #20]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd90      	pop	{r4, r7, pc}

080053ae <iis3dwb_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 80053ae:	b590      	push	{r4, r7, lr}
 80053b0:	b087      	sub	sp, #28
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	461a      	mov	r2, r3
 80053ba:	460b      	mov	r3, r1
 80053bc:	72fb      	strb	r3, [r7, #11]
 80053be:	4613      	mov	r3, r2
 80053c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681c      	ldr	r4, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6898      	ldr	r0, [r3, #8]
 80053ca:	893b      	ldrh	r3, [r7, #8]
 80053cc:	7af9      	ldrb	r1, [r7, #11]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	47a0      	blx	r4
 80053d2:	6178      	str	r0, [r7, #20]
  return ret;
 80053d4:	697b      	ldr	r3, [r7, #20]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd90      	pop	{r4, r7, pc}

080053de <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    iis3dwb_fs_xl_t val)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	460b      	mov	r3, r1
 80053e8:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80053ea:	f107 0208 	add.w	r2, r7, #8
 80053ee:	2301      	movs	r3, #1
 80053f0:	2110      	movs	r1, #16
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff ffc3 	bl	800537e <iis3dwb_read_reg>
 80053f8:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10f      	bne.n	8005420 <iis3dwb_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	b2da      	uxtb	r2, r3
 8005408:	7a3b      	ldrb	r3, [r7, #8]
 800540a:	f362 0383 	bfi	r3, r2, #2, #2
 800540e:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8005410:	f107 0208 	add.w	r2, r7, #8
 8005414:	2301      	movs	r3, #1
 8005416:	2110      	movs	r1, #16
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff ffc8 	bl	80053ae <iis3dwb_write_reg>
 800541e:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 8005420:	68fb      	ldr	r3, [r7, #12]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                      iis3dwb_dataready_pulsed_t val)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	460b      	mov	r3, r1
 8005434:	70fb      	strb	r3, [r7, #3]
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 8005436:	f107 0208 	add.w	r2, r7, #8
 800543a:	2301      	movs	r3, #1
 800543c:	210b      	movs	r1, #11
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff ff9d 	bl	800537e <iis3dwb_read_reg>
 8005444:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&counter_bdr_reg1, 1);
  if(ret == 0){
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10f      	bne.n	800546c <iis3dwb_data_ready_mode_set+0x42>
    counter_bdr_reg1.dataready_pulsed= (uint8_t)val;
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	b2da      	uxtb	r2, r3
 8005454:	7a3b      	ldrb	r3, [r7, #8]
 8005456:	f362 13c7 	bfi	r3, r2, #7, #1
 800545a:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 800545c:	f107 0208 	add.w	r2, r7, #8
 8005460:	2301      	movs	r3, #1
 8005462:	210b      	movs	r1, #11
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff ffa2 	bl	80053ae <iis3dwb_write_reg>
 800546a:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&counter_bdr_reg1, 1);
  }
  return ret;
 800546c:	68fb      	ldr	r3, [r7, #12]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 8005480:	2301      	movs	r3, #1
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	210f      	movs	r1, #15
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff ff79 	bl	800537e <iis3dwb_read_reg>
 800548c:	60f8      	str	r0, [r7, #12]
  return ret;
 800548e:	68fb      	ldr	r3, [r7, #12]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80054a4:	f107 0208 	add.w	r2, r7, #8
 80054a8:	2301      	movs	r3, #1
 80054aa:	2112      	movs	r1, #18
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff ff66 	bl	800537e <iis3dwb_read_reg>
 80054b2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10f      	bne.n	80054da <iis3dwb_reset_set+0x42>
    ctrl3_c.sw_reset= (uint8_t)val;
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	7a3b      	ldrb	r3, [r7, #8]
 80054c4:	f362 0300 	bfi	r3, r2, #0, #1
 80054c8:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80054ca:	f107 0208 	add.w	r2, r7, #8
 80054ce:	2301      	movs	r3, #1
 80054d0:	2112      	movs	r1, #18
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff ff6b 	bl	80053ae <iis3dwb_write_reg>
 80054d8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80054da:	68fb      	ldr	r3, [r7, #12]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <iis3dwb_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_hp_slope_xl_en_t val)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80054f0:	f107 0210 	add.w	r2, r7, #16
 80054f4:	2301      	movs	r3, #1
 80054f6:	2110      	movs	r1, #16
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff ff40 	bl	800537e <iis3dwb_read_reg>
 80054fe:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d111      	bne.n	800552a <iis3dwb_xl_hp_path_on_out_set+0x46>
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	09db      	lsrs	r3, r3, #7
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	b2da      	uxtb	r2, r3
 8005512:	7c3b      	ldrb	r3, [r7, #16]
 8005514:	f362 0341 	bfi	r3, r2, #1, #1
 8005518:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800551a:	f107 0210 	add.w	r2, r7, #16
 800551e:	2301      	movs	r3, #1
 8005520:	2110      	movs	r1, #16
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff ff43 	bl	80053ae <iis3dwb_write_reg>
 8005528:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d107      	bne.n	8005540 <iis3dwb_xl_hp_path_on_out_set+0x5c>
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8005530:	f107 020c 	add.w	r2, r7, #12
 8005534:	2301      	movs	r3, #1
 8005536:	2117      	movs	r1, #23
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ff20 	bl	800537e <iis3dwb_read_reg>
 800553e:	6178      	str	r0, [r7, #20]
  }
  if(ret == 0){
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d121      	bne.n	800558a <iis3dwb_xl_hp_path_on_out_set+0xa6>
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 8005546:	78fb      	ldrb	r3, [r7, #3]
 8005548:	091b      	lsrs	r3, r3, #4
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	b2da      	uxtb	r2, r3
 8005550:	7b3b      	ldrb	r3, [r7, #12]
 8005552:	f362 0382 	bfi	r3, r2, #2, #1
 8005556:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	b2da      	uxtb	r2, r3
 8005562:	7b3b      	ldrb	r3, [r7, #12]
 8005564:	f362 1304 	bfi	r3, r2, #4, #1
 8005568:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	b2da      	uxtb	r2, r3
 8005572:	7b3b      	ldrb	r3, [r7, #12]
 8005574:	f362 1347 	bfi	r3, r2, #5, #3
 8005578:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 800557a:	f107 020c 	add.w	r2, r7, #12
 800557e:	2301      	movs	r3, #1
 8005580:	2117      	movs	r1, #23
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff ff13 	bl	80053ae <iis3dwb_write_reg>
 8005588:	6178      	str	r0, [r7, #20]
  }
  return ret;
 800558a:	697b      	ldr	r3, [r7, #20]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                    iis3dwb_i2c_disable_t val)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80055a0:	f107 0208 	add.w	r2, r7, #8
 80055a4:	2301      	movs	r3, #1
 80055a6:	2113      	movs	r1, #19
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff fee8 	bl	800537e <iis3dwb_read_reg>
 80055ae:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10f      	bne.n	80055d6 <iis3dwb_i2c_interface_set+0x42>
    ctrl4_c.i2c_disable= (uint8_t)val;
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	7a3b      	ldrb	r3, [r7, #8]
 80055c0:	f362 0382 	bfi	r3, r2, #2, #1
 80055c4:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 80055c6:	f107 0208 	add.w	r2, r7, #8
 80055ca:	2301      	movs	r3, #1
 80055cc:	2113      	movs	r1, #19
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff feed 	bl	80053ae <iis3dwb_write_reg>
 80055d4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80055d6:	68fb      	ldr	r3, [r7, #12]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <iis3dwb_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                     iis3dwb_pin_int1_route_t *val)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
                            (uint8_t*)&val->int1_ctrl, 1);
 80055ea:	683a      	ldr	r2, [r7, #0]
  ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL,
 80055ec:	2301      	movs	r3, #1
 80055ee:	210d      	movs	r1, #13
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff fedc 	bl	80053ae <iis3dwb_write_reg>
 80055f6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d107      	bne.n	800560e <iis3dwb_pin_int1_route_set+0x2e>
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
                              (uint8_t*)&val->md1_cfg, 1);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	1c5a      	adds	r2, r3, #1
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG,
 8005602:	2301      	movs	r3, #1
 8005604:	215e      	movs	r1, #94	; 0x5e
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff fed1 	bl	80053ae <iis3dwb_write_reg>
 800560c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800560e:	68fb      	ldr	r3, [r7, #12]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	807b      	strh	r3, [r7, #2]
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8005624:	f107 020c 	add.w	r2, r7, #12
 8005628:	2301      	movs	r3, #1
 800562a:	2108      	movs	r1, #8
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fea6 	bl	800537e <iis3dwb_read_reg>
 8005632:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_ctrl2, 1);
  if(ret == 0){
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <iis3dwb_fifo_watermark_set+0x38>
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 800563a:	887b      	ldrh	r3, [r7, #2]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
 8005640:	f107 0210 	add.w	r2, r7, #16
 8005644:	2301      	movs	r3, #1
 8005646:	2107      	movs	r1, #7
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff feb0 	bl	80053ae <iis3dwb_write_reg>
 800564e:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl1, 1);
  }
  if(ret == 0){
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d111      	bne.n	800567a <iis3dwb_fifo_watermark_set+0x62>
    fifo_ctrl2.wtm = (uint8_t)(( 0x0100U & val ) >> 8);
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	0a1b      	lsrs	r3, r3, #8
 800565a:	b29b      	uxth	r3, r3
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	b2da      	uxtb	r2, r3
 8005662:	7b3b      	ldrb	r3, [r7, #12]
 8005664:	f362 0300 	bfi	r3, r2, #0, #1
 8005668:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
 800566a:	f107 020c 	add.w	r2, r7, #12
 800566e:	2301      	movs	r3, #1
 8005670:	2108      	movs	r1, #8
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fe9b 	bl	80053ae <iis3dwb_write_reg>
 8005678:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
  }
  return ret;
 800567a:	697b      	ldr	r3, [r7, #20]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                    iis3dwb_bdr_xl_t val)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8005690:	f107 0208 	add.w	r2, r7, #8
 8005694:	2301      	movs	r3, #1
 8005696:	2109      	movs	r1, #9
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fe70 	bl	800537e <iis3dwb_read_reg>
 800569e:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl3, 1);
  if(ret == 0){
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10f      	bne.n	80056c6 <iis3dwb_fifo_xl_batch_set+0x42>
    fifo_ctrl3.bdr_xl= (uint8_t)val;
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	7a3b      	ldrb	r3, [r7, #8]
 80056b0:	f362 0303 	bfi	r3, r2, #0, #4
 80056b4:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
 80056b6:	f107 0208 	add.w	r2, r7, #8
 80056ba:	2301      	movs	r3, #1
 80056bc:	2109      	movs	r1, #9
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fe75 	bl	80053ae <iis3dwb_write_reg>
 80056c4:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 80056c6:	68fb      	ldr	r3, [r7, #12]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                                iis3dwb_fifo_mode_t val)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 80056dc:	f107 0208 	add.w	r2, r7, #8
 80056e0:	2301      	movs	r3, #1
 80056e2:	210a      	movs	r1, #10
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fe4a 	bl	800537e <iis3dwb_read_reg>
 80056ea:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10f      	bne.n	8005712 <iis3dwb_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	7a3b      	ldrb	r3, [r7, #8]
 80056fc:	f362 0302 	bfi	r3, r2, #0, #3
 8005700:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8005702:	f107 0208 	add.w	r2, r7, #8
 8005706:	2301      	movs	r3, #1
 8005708:	210a      	movs	r1, #10
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff fe4f 	bl	80053ae <iis3dwb_write_reg>
 8005710:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <BSP_ADC1_Initialization>:
* @param  ADC_InitFor who wants to Init the ADC: Audio or Battery Charger
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_PERIPH_FAILURE in case of failures
*/
int32_t BSP_ADC1_Initialization(ADC_InitUsedDef ADC_InitFor)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	71fb      	strb	r3, [r7, #7]
  /* If the ADC is not yet initialized */
  if(ADC_UsedFor == ADC1_NOT_USED){
 8005726:	4b31      	ldr	r3, [pc, #196]	; (80057ec <BSP_ADC1_Initialization+0xd0>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d152      	bne.n	80057d4 <BSP_ADC1_Initialization+0xb8>
   
    /**Common config */
    ADC1_Handle.Instance = ADC1;
 800572e:	4b30      	ldr	r3, [pc, #192]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 8005730:	4a30      	ldr	r2, [pc, #192]	; (80057f4 <BSP_ADC1_Initialization+0xd8>)
 8005732:	601a      	str	r2, [r3, #0]
    ADC1_Handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005734:	4b2e      	ldr	r3, [pc, #184]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 8005736:	2200      	movs	r2, #0
 8005738:	605a      	str	r2, [r3, #4]
    ADC1_Handle.Init.Resolution = ADC_RESOLUTION_12B;
 800573a:	4b2d      	ldr	r3, [pc, #180]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 800573c:	2200      	movs	r2, #0
 800573e:	609a      	str	r2, [r3, #8]
    ADC1_Handle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005740:	4b2b      	ldr	r3, [pc, #172]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 8005742:	2200      	movs	r2, #0
 8005744:	60da      	str	r2, [r3, #12]
    ADC1_Handle.Init.ScanConvMode = (uint32_t)DISABLE;
 8005746:	4b2a      	ldr	r3, [pc, #168]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 8005748:	2200      	movs	r2, #0
 800574a:	611a      	str	r2, [r3, #16]
    ADC1_Handle.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800574c:	4b28      	ldr	r3, [pc, #160]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 800574e:	2204      	movs	r2, #4
 8005750:	615a      	str	r2, [r3, #20]
    ADC1_Handle.Init.LowPowerAutoWait = DISABLE;
 8005752:	4b27      	ldr	r3, [pc, #156]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 8005754:	2200      	movs	r2, #0
 8005756:	761a      	strb	r2, [r3, #24]
    ADC1_Handle.Init.ContinuousConvMode = ENABLE;
 8005758:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 800575a:	2201      	movs	r2, #1
 800575c:	765a      	strb	r2, [r3, #25]
    ADC1_Handle.Init.NbrOfConversion = 1; 
 800575e:	4b24      	ldr	r3, [pc, #144]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 8005760:	2201      	movs	r2, #1
 8005762:	61da      	str	r2, [r3, #28]
    ADC1_Handle.Init.NbrOfDiscConversion      = 1;
 8005764:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 8005766:	2201      	movs	r2, #1
 8005768:	625a      	str	r2, [r3, #36]	; 0x24
    ADC1_Handle.Init.DiscontinuousConvMode = DISABLE;
 800576a:	4b21      	ldr	r3, [pc, #132]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2020 	strb.w	r2, [r3, #32]
    ADC1_Handle.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005772:	4b1f      	ldr	r3, [pc, #124]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 8005774:	2200      	movs	r2, #0
 8005776:	629a      	str	r2, [r3, #40]	; 0x28
    ADC1_Handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005778:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 800577a:	2200      	movs	r2, #0
 800577c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    ADC1_Handle.Init.DMAContinuousRequests = DISABLE;
 800577e:	4b1c      	ldr	r3, [pc, #112]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    
    ADC1_Handle.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005786:	4b1a      	ldr	r3, [pc, #104]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 8005788:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800578c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Oversampling enabled */
    ADC1_Handle.Init.OversamplingMode = DISABLE;
 800578e:	4b18      	ldr	r3, [pc, #96]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    
    ADC1_Handle.Init.Oversampling.RightBitShift         = ADC_RIGHTBITSHIFT_NONE;         /* Right shift of the oversampled summation */
 8005796:	4b16      	ldr	r3, [pc, #88]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 8005798:	2200      	movs	r2, #0
 800579a:	641a      	str	r2, [r3, #64]	; 0x40
    ADC1_Handle.Init.Oversampling.TriggeredMode         = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;         /* Specifies whether or not a trigger is needed for each sample */
 800579c:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 800579e:	2200      	movs	r2, #0
 80057a0:	645a      	str	r2, [r3, #68]	; 0x44
    ADC1_Handle.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE; /* Specifies whether or not the oversampling buffer is maintained during injection sequence */    
 80057a2:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	649a      	str	r2, [r3, #72]	; 0x48
    ADC1_Handle.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80057a8:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 80057aa:	2204      	movs	r2, #4
 80057ac:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if(HAL_ADC_Init(&ADC1_Handle) != HAL_OK)
 80057ae:	4810      	ldr	r0, [pc, #64]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 80057b0:	f001 f918 	bl	80069e4 <HAL_ADC_Init>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <BSP_ADC1_Initialization+0xa4>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80057ba:	f06f 0303 	mvn.w	r3, #3
 80057be:	e011      	b.n	80057e4 <BSP_ADC1_Initialization+0xc8>
    }

    /* ### Start calibration ############################################ */
    if (HAL_ADCEx_Calibration_Start(&ADC1_Handle, ADC_SINGLE_ENDED) != HAL_OK)
 80057c0:	217f      	movs	r1, #127	; 0x7f
 80057c2:	480b      	ldr	r0, [pc, #44]	; (80057f0 <BSP_ADC1_Initialization+0xd4>)
 80057c4:	f001 fe42 	bl	800744c <HAL_ADCEx_Calibration_Start>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <BSP_ADC1_Initialization+0xb8>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80057ce:	f06f 0303 	mvn.w	r3, #3
 80057d2:	e007      	b.n	80057e4 <BSP_ADC1_Initialization+0xc8>
    } 
  }

  /* Set that we had Initiliazed the ADC for Audio or For Battery Charger */
  ADC_UsedFor |= ADC_InitFor;
 80057d4:	4b05      	ldr	r3, [pc, #20]	; (80057ec <BSP_ADC1_Initialization+0xd0>)
 80057d6:	781a      	ldrb	r2, [r3, #0]
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	4313      	orrs	r3, r2
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	4b03      	ldr	r3, [pc, #12]	; (80057ec <BSP_ADC1_Initialization+0xd0>)
 80057e0:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	200033b8 	.word	0x200033b8
 80057f0:	20003324 	.word	0x20003324
 80057f4:	50040000 	.word	0x50040000

080057f8 <HAL_ADC_MspInit>:
* @brief  Initialize the ADC MSP.
* @param  hDfsdmFilter ADC handle
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{ 
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  /*##-1- Enable peripherals  ################################################*/
  /* ADC Periph clock enable */
  __HAL_RCC_ADC_CLK_ENABLE();
 8005800:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <HAL_ADC_MspInit+0x40>)
 8005802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005804:	4a0c      	ldr	r2, [pc, #48]	; (8005838 <HAL_ADC_MspInit+0x40>)
 8005806:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800580a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <HAL_ADC_MspInit+0x40>)
 800580e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]
  /* ADC Periph interface clock configuration */
  __HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_PLLSAI1);
 8005818:	4b07      	ldr	r3, [pc, #28]	; (8005838 <HAL_ADC_MspInit+0x40>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005822:	4a05      	ldr	r2, [pc, #20]	; (8005838 <HAL_ADC_MspInit+0x40>)
 8005824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40021000 	.word	0x40021000

0800583c <BSP_PB_PWR_Init>:
* @brief  Initialize the Power button PWR.
* @param  None
* @retval None
*/
void BSP_PB_PWR_Init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  POWER_BUTTON_GPIO_CLK_ENABLE();
 8005842:	4b13      	ldr	r3, [pc, #76]	; (8005890 <BSP_PB_PWR_Init+0x54>)
 8005844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005846:	4a12      	ldr	r2, [pc, #72]	; (8005890 <BSP_PB_PWR_Init+0x54>)
 8005848:	f043 0308 	orr.w	r3, r3, #8
 800584c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800584e:	4b10      	ldr	r3, [pc, #64]	; (8005890 <BSP_PB_PWR_Init+0x54>)
 8005850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	683b      	ldr	r3, [r7, #0]
  
  /* Configure Button pin as input with External interrupt */
  GPIO_InitStruct.Pin = POWER_BUTTON_PIN;
 800585a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800585e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005860:	2302      	movs	r3, #2
 8005862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005864:	2302      	movs	r3, #2
 8005866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005868:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <BSP_PB_PWR_Init+0x58>)
 800586a:	60bb      	str	r3, [r7, #8]
  
  HAL_GPIO_Init(POWER_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800586c:	1d3b      	adds	r3, r7, #4
 800586e:	4619      	mov	r1, r3
 8005870:	4809      	ldr	r0, [pc, #36]	; (8005898 <BSP_PB_PWR_Init+0x5c>)
 8005872:	f002 ff79 	bl	8008768 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type) POWER_BUTTON_EXTI_IRQn, 0x0F, 0x00);
 8005876:	2200      	movs	r2, #0
 8005878:	210f      	movs	r1, #15
 800587a:	2028      	movs	r0, #40	; 0x28
 800587c:	f002 fcbd 	bl	80081fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) POWER_BUTTON_EXTI_IRQn);
 8005880:	2028      	movs	r0, #40	; 0x28
 8005882:	f002 fcd6 	bl	8008232 <HAL_NVIC_EnableIRQ>
  
}
 8005886:	bf00      	nop
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40021000 	.word	0x40021000
 8005894:	10110000 	.word	0x10110000
 8005898:	48000c00 	.word	0x48000c00

0800589c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	460a      	mov	r2, r1
 80058a6:	71fb      	strb	r3, [r7, #7]
 80058a8:	4613      	mov	r3, r2
 80058aa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80058ac:	4b21      	ldr	r3, [pc, #132]	; (8005934 <BSP_PB_Init+0x98>)
 80058ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b0:	4a20      	ldr	r2, [pc, #128]	; (8005934 <BSP_PB_Init+0x98>)
 80058b2:	f043 0310 	orr.w	r3, r3, #16
 80058b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058b8:	4b1e      	ldr	r3, [pc, #120]	; (8005934 <BSP_PB_Init+0x98>)
 80058ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	68bb      	ldr	r3, [r7, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80058c4:	79bb      	ldrb	r3, [r7, #6]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d112      	bne.n	80058f0 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80058ca:	2301      	movs	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058ce:	2300      	movs	r3, #0
 80058d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058d2:	2302      	movs	r3, #2
 80058d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80058d6:	2302      	movs	r3, #2
 80058d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	4a16      	ldr	r2, [pc, #88]	; (8005938 <BSP_PB_Init+0x9c>)
 80058de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e2:	f107 020c 	add.w	r2, r7, #12
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f002 ff3d 	bl	8008768 <HAL_GPIO_Init>
 80058ee:	e01b      	b.n	8005928 <BSP_PB_Init+0x8c>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80058f0:	2301      	movs	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80058f8:	4b10      	ldr	r3, [pc, #64]	; (800593c <BSP_PB_Init+0xa0>)
 80058fa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	4a0e      	ldr	r2, [pc, #56]	; (8005938 <BSP_PB_Init+0x9c>)
 8005900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005904:	f107 020c 	add.w	r2, r7, #12
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f002 ff2c 	bl	8008768 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005910:	2306      	movs	r3, #6
 8005912:	b25b      	sxtb	r3, r3
 8005914:	2200      	movs	r2, #0
 8005916:	210f      	movs	r1, #15
 8005918:	4618      	mov	r0, r3
 800591a:	f002 fc6e 	bl	80081fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800591e:	2306      	movs	r3, #6
 8005920:	b25b      	sxtb	r3, r3
 8005922:	4618      	mov	r0, r3
 8005924:	f002 fc85 	bl	8008232 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;  
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000
 8005938:	2000003c 	.word	0x2000003c
 800593c:	10210000 	.word	0x10210000

08005940 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE((int8_t)Led);
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10c      	bne.n	800596a <BSP_LED_Init+0x2a>
 8005950:	4b19      	ldr	r3, [pc, #100]	; (80059b8 <BSP_LED_Init+0x78>)
 8005952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005954:	4a18      	ldr	r2, [pc, #96]	; (80059b8 <BSP_LED_Init+0x78>)
 8005956:	f043 0310 	orr.w	r3, r3, #16
 800595a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800595c:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <BSP_LED_Init+0x78>)
 800595e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	e00b      	b.n	8005982 <BSP_LED_Init+0x42>
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <BSP_LED_Init+0x78>)
 800596c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800596e:	4a12      	ldr	r2, [pc, #72]	; (80059b8 <BSP_LED_Init+0x78>)
 8005970:	f043 0308 	orr.w	r3, r3, #8
 8005974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <BSP_LED_Init+0x78>)
 8005978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <BSP_LED_Init+0x7c>)
 8005986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800598a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800598c:	2301      	movs	r3, #1
 800598e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005990:	2300      	movs	r3, #0
 8005992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005994:	2302      	movs	r3, #2
 8005996:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <BSP_LED_Init+0x80>)
 800599c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a0:	f107 0214 	add.w	r2, r7, #20
 80059a4:	4611      	mov	r1, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f002 fede 	bl	8008768 <HAL_GPIO_Init>
  
  return BSP_ERROR_NONE;    
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3728      	adds	r7, #40	; 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40021000 	.word	0x40021000
 80059bc:	080229ac 	.word	0x080229ac
 80059c0:	20000040 	.word	0x20000040

080059c4 <BSP_LED_On>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	4a07      	ldr	r2, [pc, #28]	; (80059f0 <BSP_LED_On+0x2c>)
 80059d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	4a06      	ldr	r2, [pc, #24]	; (80059f4 <BSP_LED_On+0x30>)
 80059da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059de:	2201      	movs	r2, #1
 80059e0:	4619      	mov	r1, r3
 80059e2:	f003 f86b 	bl	8008abc <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000040 	.word	0x20000040
 80059f4:	080229ac 	.word	0x080229ac

080059f8 <BSP_LED_Off>:
*            @arg  LED1
*            @arg  LED2
* @retval None
*/
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	4a07      	ldr	r2, [pc, #28]	; (8005a24 <BSP_LED_Off+0x2c>)
 8005a06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	4a06      	ldr	r2, [pc, #24]	; (8005a28 <BSP_LED_Off+0x30>)
 8005a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a12:	2200      	movs	r2, #0
 8005a14:	4619      	mov	r1, r3
 8005a16:	f003 f851 	bl	8008abc <HAL_GPIO_WritePin>
  return BSP_ERROR_NONE;    
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000040 	.word	0x20000040
 8005a28:	080229ac 	.word	0x080229ac

08005a2c <BSP_BC_Init>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BSP_BC_Init(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
  BC_InitCommon();
 8005a30:	f000 f908 	bl	8005c44 <BC_InitCommon>
  /* Init the related GPIOs */
  BC_IO_Init();
 8005a34:	f000 f90c 	bl	8005c50 <BC_IO_Init>
}
 8005a38:	bf00      	nop
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <BSP_BC_CmdSend>:
  * @param stbc02_SwCmd The command to be sent
  * @retval 0 in case of success
  * @retval 1 in case of failure
  */
int32_t BSP_BC_CmdSend(stbc02_SwCmd_TypeDef stbc02_SwCmd)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	4603      	mov	r3, r0
 8005a44:	71fb      	strb	r3, [r7, #7]
  uint32_t tk = STBC02_GetTick();
 8005a46:	f000 fe7d 	bl	8006744 <HAL_GetTick>
 8005a4a:	60f8      	str	r0, [r7, #12]
  
  stbc02_SwCmdSel = stbc02_SwCmd;
 8005a4c:	4a0f      	ldr	r2, [pc, #60]	; (8005a8c <BSP_BC_CmdSend+0x50>)
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	7013      	strb	r3, [r2, #0]
  stbc02_SwState = start;
 8005a52:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <BSP_BC_CmdSend+0x54>)
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
  
  /* Start the time base */
  (void)HAL_TIM_Base_Start_IT(&hstbc02_UsedTim);
 8005a58:	480e      	ldr	r0, [pc, #56]	; (8005a94 <BSP_BC_CmdSend+0x58>)
 8005a5a:	f009 fa29 	bl	800eeb0 <HAL_TIM_Base_Start_IT>
    
  while(stbc02_SwState != idle)
 8005a5e:	e008      	b.n	8005a72 <BSP_BC_CmdSend+0x36>
  {
    if ( (STBC02_GetTick() - tk) > 10U )
 8005a60:	f000 fe70 	bl	8006744 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b0a      	cmp	r3, #10
 8005a6c:	d901      	bls.n	8005a72 <BSP_BC_CmdSend+0x36>
    {
      return 1;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e007      	b.n	8005a82 <BSP_BC_CmdSend+0x46>
  while(stbc02_SwState != idle)
 8005a72:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <BSP_BC_CmdSend+0x54>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f2      	bne.n	8005a60 <BSP_BC_CmdSend+0x24>
    }
  }
    /* Stop the time base */
  (void)HAL_TIM_Base_Stop_IT(&hstbc02_UsedTim);
 8005a7a:	4806      	ldr	r0, [pc, #24]	; (8005a94 <BSP_BC_CmdSend+0x58>)
 8005a7c:	f009 fa42 	bl	800ef04 <HAL_TIM_Base_Stop_IT>
  
  return 0;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	200033c0 	.word	0x200033c0
 8005a90:	200033c1 	.word	0x200033c1
 8005a94:	200033c8 	.word	0x200033c8

08005a98 <BSP_BC_ChgPinHasToggled>:
  * @brief Call the function for measuring the toggling frequency of the charging pin of the STBC02
  * @note Must be called when the charging pin of the STBC02 has toggled
  * @retval None
  */
void BSP_BC_ChgPinHasToggled(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  BC_ChgPinFreqGet();
 8005a9c:	f000 f9c6 	bl	8005e2c <BC_ChgPinFreqGet>
  stbc02_ChgPinToggledTime = STBC02_GetTick();
 8005aa0:	f000 fe50 	bl	8006744 <HAL_GetTick>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	4a02      	ldr	r2, [pc, #8]	; (8005ab0 <BSP_BC_ChgPinHasToggled+0x18>)
 8005aa8:	6013      	str	r3, [r2, #0]
}
 8005aaa:	bf00      	nop
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	200033c4 	.word	0x200033c4

08005ab4 <BSP_BC_BatMS_Init>:
* @param  None
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_BatMS_Init(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
   /* Enable ADC1 if it's necessary */
  (void)BSP_ADC1_Initialization(ADC1_FOR_BC);
 8005ab8:	2002      	movs	r0, #2
 8005aba:	f7ff fe2f 	bl	800571c <BSP_ADC1_Initialization>
  /* Configure the Injection Channel for Voltage ADC convertion */
  (void)Channel_ADC1_Init();
 8005abe:	f000 faad 	bl	800601c <Channel_ADC1_Init>
  return 0;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <BSP_BC_GetVoltage>:
* @param  mV pointer to destination variable
* @retval BSP_ERROR_NONE in case of success
* @retval BSP_ERROR_COMPONENT_FAILURE in case of failures
*/
int32_t BSP_BC_GetVoltage(uint32_t *mV)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t Voltage;
  
  if (HAL_ADCEx_InjectedStart(&ADC1_Handle) != HAL_OK)
 8005ad0:	4820      	ldr	r0, [pc, #128]	; (8005b54 <BSP_BC_GetVoltage+0x8c>)
 8005ad2:	f001 fd1b 	bl	800750c <HAL_ADCEx_InjectedStart>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <BSP_BC_GetVoltage+0x1a>
  {
    /* Start Conversation Error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8005adc:	f06f 0304 	mvn.w	r3, #4
 8005ae0:	e034      	b.n	8005b4c <BSP_BC_GetVoltage+0x84>
  }
  
  if (HAL_ADCEx_InjectedPollForConversion(&ADC1_Handle, 10) != HAL_OK)
 8005ae2:	210a      	movs	r1, #10
 8005ae4:	481b      	ldr	r0, [pc, #108]	; (8005b54 <BSP_BC_GetVoltage+0x8c>)
 8005ae6:	f001 fd83 	bl	80075f0 <HAL_ADCEx_InjectedPollForConversion>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <BSP_BC_GetVoltage+0x2e>
  {
    /* End Of Conversion flag not set on time */
    return BSP_ERROR_CLOCK_FAILURE;
 8005af0:	f06f 0308 	mvn.w	r3, #8
 8005af4:	e02a      	b.n	8005b4c <BSP_BC_GetVoltage+0x84>
  }
  
  /* Check if the continuous conversion of regular channel is finished */
  if ((HAL_ADC_GetState(&ADC1_Handle) & HAL_ADC_STATE_INJ_EOC) == HAL_ADC_STATE_INJ_EOC)
 8005af6:	4817      	ldr	r0, [pc, #92]	; (8005b54 <BSP_BC_GetVoltage+0x8c>)
 8005af8:	f001 f9b8 	bl	8006e6c <HAL_ADC_GetState>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b06:	d106      	bne.n	8005b16 <BSP_BC_GetVoltage+0x4e>
  {
    /*##-5- Get the converted value of regular channel  ########################*/
    uhADCxConvertedValue = HAL_ADCEx_InjectedGetValue(&ADC1_Handle,ADC_INJECTED_RANK_1);
 8005b08:	2108      	movs	r1, #8
 8005b0a:	4812      	ldr	r0, [pc, #72]	; (8005b54 <BSP_BC_GetVoltage+0x8c>)
 8005b0c:	f001 fdfe 	bl	800770c <HAL_ADCEx_InjectedGetValue>
 8005b10:	4603      	mov	r3, r0
 8005b12:	4a11      	ldr	r2, [pc, #68]	; (8005b58 <BSP_BC_GetVoltage+0x90>)
 8005b14:	6013      	str	r3, [r2, #0]
  }
  
  Voltage = (2700U * (uint32_t)uhADCxConvertedValue) / (4095U);  // [0-2.7V]
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <BSP_BC_GetVoltage+0x90>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f640 228c 	movw	r2, #2700	; 0xa8c
 8005b1e:	fb03 f202 	mul.w	r2, r3, r2
 8005b22:	4b0e      	ldr	r3, [pc, #56]	; (8005b5c <BSP_BC_GetVoltage+0x94>)
 8005b24:	fba3 1302 	umull	r1, r3, r3, r2
 8005b28:	1ad2      	subs	r2, r2, r3
 8005b2a:	0852      	lsrs	r2, r2, #1
 8005b2c:	4413      	add	r3, r2
 8005b2e:	0adb      	lsrs	r3, r3, #11
 8005b30:	60fb      	str	r3, [r7, #12]
  Voltage = ((56U+100U)*Voltage)/100U;   // [0-4.2V]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	229c      	movs	r2, #156	; 0x9c
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <BSP_BC_GetVoltage+0x98>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	60fb      	str	r3, [r7, #12]
  
  *mV= Voltage;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	601a      	str	r2, [r3, #0]
  return BSP_ERROR_NONE;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	20003324 	.word	0x20003324
 8005b58:	200033bc 	.word	0x200033bc
 8005b5c:	00100101 	.word	0x00100101
 8005b60:	51eb851f 	.word	0x51eb851f

08005b64 <BSP_BC_GetVoltageAndLevel>:
* @param  uint32_t *Volt battery Voltage Value
* @param  uint32_t *BatteryLevel Battery % Level
* @retval BSP status
*/
int32_t BSP_BC_GetVoltageAndLevel(uint32_t *mV, uint32_t *BatteryLevel)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t Voltage = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60bb      	str	r3, [r7, #8]
  static int32_t VoltageWindowInit=0;
  static uint32_t WindowVoltage[WINDOW_VOLTAGE_DIM];
  static int32_t WindowPostion =0;
  
  (void)BSP_BC_GetVoltage(&Voltage);
 8005b72:	f107 0308 	add.w	r3, r7, #8
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff ffa6 	bl	8005ac8 <BSP_BC_GetVoltage>
  
  /* We Filter the Voltage for understanding the Battery % Level */
  
  /* Insert the new Value */
  WindowVoltage[WindowPostion]= Voltage;
 8005b7c:	4b2d      	ldr	r3, [pc, #180]	; (8005c34 <BSP_BC_GetVoltageAndLevel+0xd0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	492d      	ldr	r1, [pc, #180]	; (8005c38 <BSP_BC_GetVoltageAndLevel+0xd4>)
 8005b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  WindowPostion++;  
 8005b88:	4b2a      	ldr	r3, [pc, #168]	; (8005c34 <BSP_BC_GetVoltageAndLevel+0xd0>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	4a29      	ldr	r2, [pc, #164]	; (8005c34 <BSP_BC_GetVoltageAndLevel+0xd0>)
 8005b90:	6013      	str	r3, [r2, #0]
  
  /* Control if we have reached the end */    
  if(WindowPostion==WINDOW_VOLTAGE_DIM)
 8005b92:	4b28      	ldr	r3, [pc, #160]	; (8005c34 <BSP_BC_GetVoltageAndLevel+0xd0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b10      	cmp	r3, #16
 8005b98:	d109      	bne.n	8005bae <BSP_BC_GetVoltageAndLevel+0x4a>
  {
    if(VoltageWindowInit==0)
 8005b9a:	4b28      	ldr	r3, [pc, #160]	; (8005c3c <BSP_BC_GetVoltageAndLevel+0xd8>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d102      	bne.n	8005ba8 <BSP_BC_GetVoltageAndLevel+0x44>
    {
      VoltageWindowInit =1;
 8005ba2:	4b26      	ldr	r3, [pc, #152]	; (8005c3c <BSP_BC_GetVoltageAndLevel+0xd8>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
    }
    WindowPostion     =0;
 8005ba8:	4b22      	ldr	r3, [pc, #136]	; (8005c34 <BSP_BC_GetVoltageAndLevel+0xd0>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
  }
  
  /* Make the mean of latest voltage values */
  if(VoltageWindowInit == 1)
 8005bae:	4b23      	ldr	r3, [pc, #140]	; (8005c3c <BSP_BC_GetVoltageAndLevel+0xd8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d114      	bne.n	8005be0 <BSP_BC_GetVoltageAndLevel+0x7c>
  {    
    int32_t Counter;   
    Voltage =0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60bb      	str	r3, [r7, #8]
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) 
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	e009      	b.n	8005bd4 <BSP_BC_GetVoltageAndLevel+0x70>
    {
      Voltage+=WindowVoltage[Counter];
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <BSP_BC_GetVoltageAndLevel+0xd4>)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4413      	add	r3, r2
 8005bcc:	60bb      	str	r3, [r7, #8]
    for(Counter=0;Counter<WINDOW_VOLTAGE_DIM;Counter++) 
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b0f      	cmp	r3, #15
 8005bd8:	ddf2      	ble.n	8005bc0 <BSP_BC_GetVoltageAndLevel+0x5c>
    }
    Voltage>>=4;    
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	091b      	lsrs	r3, r3, #4
 8005bde:	60bb      	str	r3, [r7, #8]
  }
  
  /* Limits check */
  if(Voltage > (uint32_t)MAX_VOLTAGE) 
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f241 0281 	movw	r2, #4225	; 0x1081
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d902      	bls.n	8005bf0 <BSP_BC_GetVoltageAndLevel+0x8c>
  {
    Voltage= MAX_VOLTAGE;
 8005bea:	f241 0381 	movw	r3, #4225	; 0x1081
 8005bee:	60bb      	str	r3, [r7, #8]
  }   
  if(Voltage < (uint32_t)MIN_VOLTAGE) 
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f640 42b1 	movw	r2, #3249	; 0xcb1
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d802      	bhi.n	8005c00 <BSP_BC_GetVoltageAndLevel+0x9c>
  {
    Voltage= MIN_VOLTAGE;
 8005bfa:	f640 43b2 	movw	r3, #3250	; 0xcb2
 8005bfe:	60bb      	str	r3, [r7, #8]
  }
  
  *BatteryLevel= (((Voltage - (uint32_t)MIN_VOLTAGE) * 100U)/(uint32_t)(MAX_VOLTAGE - MIN_VOLTAGE));
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2264      	movs	r2, #100	; 0x64
 8005c04:	fb02 f303 	mul.w	r3, r2, r3
 8005c08:	f5a3 239e 	sub.w	r3, r3, #323584	; 0x4f000
 8005c0c:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 8005c10:	4a0b      	ldr	r2, [pc, #44]	; (8005c40 <BSP_BC_GetVoltageAndLevel+0xdc>)
 8005c12:	fba2 1203 	umull	r1, r2, r2, r3
 8005c16:	1a9b      	subs	r3, r3, r2
 8005c18:	085b      	lsrs	r3, r3, #1
 8005c1a:	4413      	add	r3, r2
 8005c1c:	0a5a      	lsrs	r2, r3, #9
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	601a      	str	r2, [r3, #0]
  *mV = Voltage;
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	601a      	str	r2, [r3, #0]
  
  return BSP_ERROR_NONE;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	2000345c 	.word	0x2000345c
 8005c38:	20003460 	.word	0x20003460
 8005c3c:	200034a0 	.word	0x200034a0
 8005c40:	0cdd9aa7 	.word	0x0cdd9aa7

08005c44 <BC_InitCommon>:
/**
  * @brief Initialize the STBC02
  * @retval None
  */
void BC_InitCommon(void)
{  
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  /* Init the time base */
  BC_TIMx_Init();
 8005c48:	f000 f93a 	bl	8005ec0 <BC_TIMx_Init>
}
 8005c4c:	bf00      	nop
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <BC_IO_Init>:
/**
  * @brief  Initializes the GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_Init(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  BC_IO_SW_SEL_Init();
 8005c54:	f000 f802 	bl	8005c5c <BC_IO_SW_SEL_Init>
}
 8005c58:	bf00      	nop
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <BC_IO_SW_SEL_Init>:
/**
  * @brief  Initializes the SW_SEL GPIO used for the Li-Ion Battery Charger
  * @retval None
  */
void BC_IO_SW_SEL_Init(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  STBC02_SW_SEL_GPIO_CLK_ENABLE();
 8005c62:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <BC_IO_SW_SEL_Init+0x4c>)
 8005c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c66:	4a10      	ldr	r2, [pc, #64]	; (8005ca8 <BC_IO_SW_SEL_Init+0x4c>)
 8005c68:	f043 0320 	orr.w	r3, r3, #32
 8005c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <BC_IO_SW_SEL_Init+0x4c>)
 8005c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin = STBC02_SW_SEL_PIN;
 8005c7a:	2340      	movs	r3, #64	; 0x40
 8005c7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c86:	2302      	movs	r3, #2
 8005c88:	613b      	str	r3, [r7, #16]

  HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2140      	movs	r1, #64	; 0x40
 8005c8e:	4807      	ldr	r0, [pc, #28]	; (8005cac <BC_IO_SW_SEL_Init+0x50>)
 8005c90:	f002 ff14 	bl	8008abc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(STBC02_SW_SEL_GPIO_PORT, &GPIO_InitStruct);
 8005c94:	1d3b      	adds	r3, r7, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	4804      	ldr	r0, [pc, #16]	; (8005cac <BC_IO_SW_SEL_Init+0x50>)
 8005c9a:	f002 fd65 	bl	8008768 <HAL_GPIO_Init>
}
 8005c9e:	bf00      	nop
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	48001400 	.word	0x48001400

08005cb0 <BC_CmdMng>:
  * @brief Single wire command manager for the STBC02
  * @note This function have to be called every 5 us
  * @retval None
  */
void BC_CmdMng(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  static uint16_t TIMx_Pulse = 0;                           //! Actual timer pulse number
  static uint16_t TIMx_PulseTCS = 0;                        //! Timer pulse number to change state
  static stbc02_SwState_TypeDef stbc02_sw_state_prv = idle; //! Previous state
  static uint8_t CmdPulse = 0;                              //! Cmd pulse number

  TIMx_Pulse++;
 8005cb4:	4b56      	ldr	r3, [pc, #344]	; (8005e10 <BC_CmdMng+0x160>)
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	4b54      	ldr	r3, [pc, #336]	; (8005e10 <BC_CmdMng+0x160>)
 8005cbe:	801a      	strh	r2, [r3, #0]
  switch (stbc02_SwState)
 8005cc0:	4b54      	ldr	r3, [pc, #336]	; (8005e14 <BC_CmdMng+0x164>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b06      	cmp	r3, #6
 8005cc6:	f200 809e 	bhi.w	8005e06 <BC_CmdMng+0x156>
 8005cca:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <BC_CmdMng+0x20>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005e07 	.word	0x08005e07
 8005cd4:	08005ced 	.word	0x08005ced
 8005cd8:	08005d11 	.word	0x08005d11
 8005cdc:	08005d35 	.word	0x08005d35
 8005ce0:	08005d59 	.word	0x08005d59
 8005ce4:	08005d7d 	.word	0x08005d7d
 8005ce8:	08005da1 	.word	0x08005da1
  {
  case idle:
    break;
  case start:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005cec:	2140      	movs	r1, #64	; 0x40
 8005cee:	484a      	ldr	r0, [pc, #296]	; (8005e18 <BC_CmdMng+0x168>)
 8005cf0:	f002 fefc 	bl	8008aec <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(350/5);
 8005cf4:	4b46      	ldr	r3, [pc, #280]	; (8005e10 <BC_CmdMng+0x160>)
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	3346      	adds	r3, #70	; 0x46
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	4b47      	ldr	r3, [pc, #284]	; (8005e1c <BC_CmdMng+0x16c>)
 8005cfe:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005d00:	4b44      	ldr	r3, [pc, #272]	; (8005e14 <BC_CmdMng+0x164>)
 8005d02:	781a      	ldrb	r2, [r3, #0]
 8005d04:	4b46      	ldr	r3, [pc, #280]	; (8005e20 <BC_CmdMng+0x170>)
 8005d06:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005d08:	4b42      	ldr	r3, [pc, #264]	; (8005e14 <BC_CmdMng+0x164>)
 8005d0a:	2206      	movs	r2, #6
 8005d0c:	701a      	strb	r2, [r3, #0]
    break;
 8005d0e:	e07d      	b.n	8005e0c <BC_CmdMng+0x15c>
  case pulse_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005d10:	2140      	movs	r1, #64	; 0x40
 8005d12:	4841      	ldr	r0, [pc, #260]	; (8005e18 <BC_CmdMng+0x168>)
 8005d14:	f002 feea 	bl	8008aec <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005d18:	4b3d      	ldr	r3, [pc, #244]	; (8005e10 <BC_CmdMng+0x160>)
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	3314      	adds	r3, #20
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	4b3e      	ldr	r3, [pc, #248]	; (8005e1c <BC_CmdMng+0x16c>)
 8005d22:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005d24:	4b3b      	ldr	r3, [pc, #236]	; (8005e14 <BC_CmdMng+0x164>)
 8005d26:	781a      	ldrb	r2, [r3, #0]
 8005d28:	4b3d      	ldr	r3, [pc, #244]	; (8005e20 <BC_CmdMng+0x170>)
 8005d2a:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005d2c:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <BC_CmdMng+0x164>)
 8005d2e:	2206      	movs	r2, #6
 8005d30:	701a      	strb	r2, [r3, #0]
    break;
 8005d32:	e06b      	b.n	8005e0c <BC_CmdMng+0x15c>
  case pulse_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005d34:	2140      	movs	r1, #64	; 0x40
 8005d36:	4838      	ldr	r0, [pc, #224]	; (8005e18 <BC_CmdMng+0x168>)
 8005d38:	f002 fed8 	bl	8008aec <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005d3c:	4b34      	ldr	r3, [pc, #208]	; (8005e10 <BC_CmdMng+0x160>)
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	3314      	adds	r3, #20
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	4b35      	ldr	r3, [pc, #212]	; (8005e1c <BC_CmdMng+0x16c>)
 8005d46:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005d48:	4b32      	ldr	r3, [pc, #200]	; (8005e14 <BC_CmdMng+0x164>)
 8005d4a:	781a      	ldrb	r2, [r3, #0]
 8005d4c:	4b34      	ldr	r3, [pc, #208]	; (8005e20 <BC_CmdMng+0x170>)
 8005d4e:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005d50:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <BC_CmdMng+0x164>)
 8005d52:	2206      	movs	r2, #6
 8005d54:	701a      	strb	r2, [r3, #0]
    break;
 8005d56:	e059      	b.n	8005e0c <BC_CmdMng+0x15c>
  case stop_l:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005d58:	2140      	movs	r1, #64	; 0x40
 8005d5a:	482f      	ldr	r0, [pc, #188]	; (8005e18 <BC_CmdMng+0x168>)
 8005d5c:	f002 fec6 	bl	8008aec <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(100/5);
 8005d60:	4b2b      	ldr	r3, [pc, #172]	; (8005e10 <BC_CmdMng+0x160>)
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	3314      	adds	r3, #20
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	4b2c      	ldr	r3, [pc, #176]	; (8005e1c <BC_CmdMng+0x16c>)
 8005d6a:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005d6c:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <BC_CmdMng+0x164>)
 8005d6e:	781a      	ldrb	r2, [r3, #0]
 8005d70:	4b2b      	ldr	r3, [pc, #172]	; (8005e20 <BC_CmdMng+0x170>)
 8005d72:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005d74:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <BC_CmdMng+0x164>)
 8005d76:	2206      	movs	r2, #6
 8005d78:	701a      	strb	r2, [r3, #0]
    break;
 8005d7a:	e047      	b.n	8005e0c <BC_CmdMng+0x15c>
  case stop_h:
    HAL_GPIO_TogglePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN);
 8005d7c:	2140      	movs	r1, #64	; 0x40
 8005d7e:	4826      	ldr	r0, [pc, #152]	; (8005e18 <BC_CmdMng+0x168>)
 8005d80:	f002 feb4 	bl	8008aec <HAL_GPIO_TogglePin>
    TIMx_PulseTCS = TIMx_Pulse + (uint16_t)(500/5);
 8005d84:	4b22      	ldr	r3, [pc, #136]	; (8005e10 <BC_CmdMng+0x160>)
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	3364      	adds	r3, #100	; 0x64
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	4b23      	ldr	r3, [pc, #140]	; (8005e1c <BC_CmdMng+0x16c>)
 8005d8e:	801a      	strh	r2, [r3, #0]
    stbc02_sw_state_prv = stbc02_SwState;
 8005d90:	4b20      	ldr	r3, [pc, #128]	; (8005e14 <BC_CmdMng+0x164>)
 8005d92:	781a      	ldrb	r2, [r3, #0]
 8005d94:	4b22      	ldr	r3, [pc, #136]	; (8005e20 <BC_CmdMng+0x170>)
 8005d96:	701a      	strb	r2, [r3, #0]
    stbc02_SwState = wait;
 8005d98:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <BC_CmdMng+0x164>)
 8005d9a:	2206      	movs	r2, #6
 8005d9c:	701a      	strb	r2, [r3, #0]
    break;
 8005d9e:	e035      	b.n	8005e0c <BC_CmdMng+0x15c>
  case wait:
    if ( TIMx_Pulse > TIMx_PulseTCS )
 8005da0:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <BC_CmdMng+0x160>)
 8005da2:	881a      	ldrh	r2, [r3, #0]
 8005da4:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <BC_CmdMng+0x16c>)
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d92e      	bls.n	8005e0a <BC_CmdMng+0x15a>
    {
      if ( stbc02_sw_state_prv == stop_h )
 8005dac:	4b1c      	ldr	r3, [pc, #112]	; (8005e20 <BC_CmdMng+0x170>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2b05      	cmp	r3, #5
 8005db2:	d10b      	bne.n	8005dcc <BC_CmdMng+0x11c>
      {
        CmdPulse = 0;
 8005db4:	4b1b      	ldr	r3, [pc, #108]	; (8005e24 <BC_CmdMng+0x174>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
        stbc02_SwState = idle;
 8005dba:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <BC_CmdMng+0x164>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(STBC02_SW_SEL_GPIO_PORT, STBC02_SW_SEL_PIN, GPIO_PIN_RESET);
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2140      	movs	r1, #64	; 0x40
 8005dc4:	4814      	ldr	r0, [pc, #80]	; (8005e18 <BC_CmdMng+0x168>)
 8005dc6:	f002 fe79 	bl	8008abc <HAL_GPIO_WritePin>
        }
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
        __NOP();
      }
    }
    break;
 8005dca:	e01e      	b.n	8005e0a <BC_CmdMng+0x15a>
        if ( stbc02_sw_state_prv == pulse_h )
 8005dcc:	4b14      	ldr	r3, [pc, #80]	; (8005e20 <BC_CmdMng+0x170>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d110      	bne.n	8005df6 <BC_CmdMng+0x146>
          CmdPulse++;
 8005dd4:	4b13      	ldr	r3, [pc, #76]	; (8005e24 <BC_CmdMng+0x174>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <BC_CmdMng+0x174>)
 8005dde:	701a      	strb	r2, [r3, #0]
          if ( CmdPulse < (uint8_t)stbc02_SwCmdSel )
 8005de0:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <BC_CmdMng+0x174>)
 8005de2:	781a      	ldrb	r2, [r3, #0]
 8005de4:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <BC_CmdMng+0x178>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d203      	bcs.n	8005df4 <BC_CmdMng+0x144>
            stbc02_sw_state_prv = start;
 8005dec:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <BC_CmdMng+0x170>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	e000      	b.n	8005df6 <BC_CmdMng+0x146>
            __NOP();
 8005df4:	bf00      	nop
        stbc02_SwState = (stbc02_SwState_TypeDef)(stbc02_sw_state_prv + 1);
 8005df6:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <BC_CmdMng+0x170>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <BC_CmdMng+0x164>)
 8005e00:	701a      	strb	r2, [r3, #0]
        __NOP();
 8005e02:	bf00      	nop
    break;
 8005e04:	e001      	b.n	8005e0a <BC_CmdMng+0x15a>
  default:
    break;
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <BC_CmdMng+0x15c>
    break;
 8005e0a:	bf00      	nop
  }
}
 8005e0c:	bf00      	nop
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	200034a4 	.word	0x200034a4
 8005e14:	200033c1 	.word	0x200033c1
 8005e18:	48001400 	.word	0x48001400
 8005e1c:	200034a6 	.word	0x200034a6
 8005e20:	200034a8 	.word	0x200034a8
 8005e24:	200034a9 	.word	0x200034a9
 8005e28:	200033c0 	.word	0x200033c0

08005e2c <BC_ChgPinFreqGet>:
* @brief Measure the toggling frequency of the charging pin of the STBC02
* @note This function works with 1 ms as time base
* @retval None
*/
void BC_ChgPinFreqGet(void)
{  
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  if(uhCaptureIndex == 0U)
 8005e30:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <BC_ChgPinFreqGet+0x7c>)
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d107      	bne.n	8005e48 <BC_ChgPinFreqGet+0x1c>
  {
    /* Get the 1st Input Capture value */
    uwIC2Value1 = HAL_GetTick();
 8005e38:	f000 fc84 	bl	8006744 <HAL_GetTick>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	4a1b      	ldr	r2, [pc, #108]	; (8005eac <BC_ChgPinFreqGet+0x80>)
 8005e40:	6013      	str	r3, [r2, #0]
    uhCaptureIndex = 1;
 8005e42:	4b19      	ldr	r3, [pc, #100]	; (8005ea8 <BC_ChgPinFreqGet+0x7c>)
 8005e44:	2201      	movs	r2, #1
 8005e46:	801a      	strh	r2, [r3, #0]
  }
   if(uhCaptureIndex == 1U)
 8005e48:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <BC_ChgPinFreqGet+0x7c>)
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d128      	bne.n	8005ea2 <BC_ChgPinFreqGet+0x76>
  {
    /* Get the 2nd Input Capture value */
    uwIC2Value2 = HAL_GetTick();
 8005e50:	f000 fc78 	bl	8006744 <HAL_GetTick>
 8005e54:	4603      	mov	r3, r0
 8005e56:	4a16      	ldr	r2, [pc, #88]	; (8005eb0 <BC_ChgPinFreqGet+0x84>)
 8005e58:	6013      	str	r3, [r2, #0]
    
    /* Capture computation */
    if (uwIC2Value2 > uwIC2Value1)
 8005e5a:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <BC_ChgPinFreqGet+0x84>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4b13      	ldr	r3, [pc, #76]	; (8005eac <BC_ChgPinFreqGet+0x80>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d907      	bls.n	8005e76 <BC_ChgPinFreqGet+0x4a>
    {
      uwDiffCapture = (uwIC2Value2 - uwIC2Value1); 
 8005e66:	4b12      	ldr	r3, [pc, #72]	; (8005eb0 <BC_ChgPinFreqGet+0x84>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4b10      	ldr	r3, [pc, #64]	; (8005eac <BC_ChgPinFreqGet+0x80>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	4a10      	ldr	r2, [pc, #64]	; (8005eb4 <BC_ChgPinFreqGet+0x88>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	e006      	b.n	8005e84 <BC_ChgPinFreqGet+0x58>
    }
    else
    {
      uwDiffCapture = ((0xFFFFFFFF - uwIC2Value1) + uwIC2Value2) + 1U;
 8005e76:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <BC_ChgPinFreqGet+0x84>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <BC_ChgPinFreqGet+0x80>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	4a0c      	ldr	r2, [pc, #48]	; (8005eb4 <BC_ChgPinFreqGet+0x88>)
 8005e82:	6013      	str	r3, [r2, #0]
    }
    
    if (uwDiffCapture != 0U)
 8005e84:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <BC_ChgPinFreqGet+0x88>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <BC_ChgPinFreqGet+0x76>
    {
      /* Frequency computation */      
      uwFrequency = 10000U / uwDiffCapture;
 8005e8c:	4b09      	ldr	r3, [pc, #36]	; (8005eb4 <BC_ChgPinFreqGet+0x88>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	4a07      	ldr	r2, [pc, #28]	; (8005eb8 <BC_ChgPinFreqGet+0x8c>)
 8005e9a:	6013      	str	r3, [r2, #0]
      uhCaptureIndex = 0U;
 8005e9c:	4b02      	ldr	r3, [pc, #8]	; (8005ea8 <BC_ChgPinFreqGet+0x7c>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8005ea2:	bf00      	nop
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20003454 	.word	0x20003454
 8005eac:	20003448 	.word	0x20003448
 8005eb0:	2000344c 	.word	0x2000344c
 8005eb4:	20003450 	.word	0x20003450
 8005eb8:	20003458 	.word	0x20003458
 8005ebc:	00000000 	.word	0x00000000

08005ec0 <BC_TIMx_Init>:
/**
  * @brief  Initializes the used timer
  * @retval None
  */
void BC_TIMx_Init(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	605a      	str	r2, [r3, #4]
 8005ece:	609a      	str	r2, [r3, #8]
  uint32_t freq = STBC02_USED_TIM_CLKFreq;
 8005ed0:	f005 f93a 	bl	800b148 <HAL_RCC_GetPCLK1Freq>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	4b26      	ldr	r3, [pc, #152]	; (8005f70 <BC_TIMx_Init+0xb0>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <BC_TIMx_Init+0x26>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e000      	b.n	8005ee8 <BC_TIMx_Init+0x28>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	fb02 f303 	mul.w	r3, r2, r3
 8005eec:	613b      	str	r3, [r7, #16]
  uint32_t prescaler = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
  uint32_t period;
  
  do
  {
    prescaler++;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	617b      	str	r3, [r7, #20]
    period = (uint32_t)(freq/(prescaler) * STBC02_USED_TIM_PERIOD);
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fa fb27 	bl	8000554 <__aeabi_ui2d>
 8005f06:	a318      	add	r3, pc, #96	; (adr r3, 8005f68 <BC_TIMx_Init+0xa8>)
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f7fa fb9c 	bl	8000648 <__aeabi_dmul>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4610      	mov	r0, r2
 8005f16:	4619      	mov	r1, r3
 8005f18:	f7fa fe6e 	bl	8000bf8 <__aeabi_d2uiz>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	60fb      	str	r3, [r7, #12]
  } while (period > 65535U);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f26:	d2e4      	bcs.n	8005ef2 <BC_TIMx_Init+0x32>

  hstbc02_UsedTim.Instance = STBC02_USED_TIM;
 8005f28:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <BC_TIMx_Init+0xb4>)
 8005f2a:	4a13      	ldr	r2, [pc, #76]	; (8005f78 <BC_TIMx_Init+0xb8>)
 8005f2c:	601a      	str	r2, [r3, #0]
  hstbc02_UsedTim.Init.Prescaler = (prescaler-1U);
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	4a10      	ldr	r2, [pc, #64]	; (8005f74 <BC_TIMx_Init+0xb4>)
 8005f34:	6053      	str	r3, [r2, #4]
  hstbc02_UsedTim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f36:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <BC_TIMx_Init+0xb4>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	609a      	str	r2, [r3, #8]
  hstbc02_UsedTim.Init.Period = period;
 8005f3c:	4a0d      	ldr	r2, [pc, #52]	; (8005f74 <BC_TIMx_Init+0xb4>)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	60d3      	str	r3, [r2, #12]
#if USE_TIM_AUTORELOAD_PRELOAD
  hstbc02_UsedTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
#endif //USE_TIM_AUTORELOAD_PRELOAD
  
  HAL_TIM_BC_MspInit(&hstbc02_UsedTim);    
 8005f42:	480c      	ldr	r0, [pc, #48]	; (8005f74 <BC_TIMx_Init+0xb4>)
 8005f44:	f000 f81a 	bl	8005f7c <HAL_TIM_BC_MspInit>
  (void)HAL_TIM_Base_Init(&hstbc02_UsedTim);
 8005f48:	480a      	ldr	r0, [pc, #40]	; (8005f74 <BC_TIMx_Init+0xb4>)
 8005f4a:	f008 ff25 	bl	800ed98 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60bb      	str	r3, [r7, #8]
  (void)HAL_TIMEx_MasterConfigSynchronization(&hstbc02_UsedTim, &sMasterConfig);
 8005f56:	463b      	mov	r3, r7
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4806      	ldr	r0, [pc, #24]	; (8005f74 <BC_TIMx_Init+0xb4>)
 8005f5c:	f009 f9d4 	bl	800f308 <HAL_TIMEx_MasterConfigSynchronization>
}
 8005f60:	bf00      	nop
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	88e368f1 	.word	0x88e368f1
 8005f6c:	3ed4f8b5 	.word	0x3ed4f8b5
 8005f70:	40021000 	.word	0x40021000
 8005f74:	200033c8 	.word	0x200033c8
 8005f78:	40001400 	.word	0x40001400

08005f7c <HAL_TIM_BC_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_BC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

  if(htim->Instance==STBC02_USED_TIM)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a0d      	ldr	r2, [pc, #52]	; (8005fc0 <HAL_TIM_BC_MspInit+0x44>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d113      	bne.n	8005fb6 <HAL_TIM_BC_MspInit+0x3a>
  {
    /* STBC02_USED_TIM clock enable */
    STBC02_USED_TIM_CLK_ENABLE();
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <HAL_TIM_BC_MspInit+0x48>)
 8005f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f92:	4a0c      	ldr	r2, [pc, #48]	; (8005fc4 <HAL_TIM_BC_MspInit+0x48>)
 8005f94:	f043 0320 	orr.w	r3, r3, #32
 8005f98:	6593      	str	r3, [r2, #88]	; 0x58
 8005f9a:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <HAL_TIM_BC_MspInit+0x48>)
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]

    /* STBC02_USED_TIM interrupt Init */
    HAL_NVIC_SetPriority(STBC02_USED_TIM_IRQn, STBC02_USED_TIM_IRQ_PP, STBC02_USED_TIM_IRQ_SP);
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2103      	movs	r1, #3
 8005faa:	2037      	movs	r0, #55	; 0x37
 8005fac:	f002 f925 	bl	80081fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(STBC02_USED_TIM_IRQn);
 8005fb0:	2037      	movs	r0, #55	; 0x37
 8005fb2:	f002 f93e 	bl	8008232 <HAL_NVIC_EnableIRQ>
  }
}
 8005fb6:	bf00      	nop
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40001400 	.word	0x40001400
 8005fc4:	40021000 	.word	0x40021000

08005fc8 <HAL_ADC_BC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param BC_AdcHandle ADC handle
  * @retval None
  */
void HAL_ADC_BC_MspInit()
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fce:	1d3b      	adds	r3, r7, #4
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	605a      	str	r2, [r3, #4]
 8005fd6:	609a      	str	r2, [r3, #8]
 8005fd8:	60da      	str	r2, [r3, #12]
 8005fda:	611a      	str	r2, [r3, #16]
  
  /* STBC02_USED_ADC GPIO Configuration */
  STBC02_BATMS_GPIO_CLK_ENABLE();
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <HAL_ADC_BC_MspInit+0x4c>)
 8005fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe0:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <HAL_ADC_BC_MspInit+0x4c>)
 8005fe2:	f043 0304 	orr.w	r3, r3, #4
 8005fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <HAL_ADC_BC_MspInit+0x4c>)
 8005fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	603b      	str	r3, [r7, #0]
 8005ff2:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = STBC02_BATMS_PIN;
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = STBC02_BATMS_GPIO_MODE;
 8005ff8:	230b      	movs	r3, #11
 8005ffa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(STBC02_BATMS_GPIO_PORT, &GPIO_InitStruct);
 8006000:	1d3b      	adds	r3, r7, #4
 8006002:	4619      	mov	r1, r3
 8006004:	4804      	ldr	r0, [pc, #16]	; (8006018 <HAL_ADC_BC_MspInit+0x50>)
 8006006:	f002 fbaf 	bl	8008768 <HAL_GPIO_Init>
  
}
 800600a:	bf00      	nop
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40021000 	.word	0x40021000
 8006018:	48000800 	.word	0x48000800

0800601c <Channel_ADC1_Init>:
  * @brief  Initializes the used ADC
  * @retval 0 in case of success
  * @retval 1 in case of failure
*/
static int32_t Channel_ADC1_Init(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08e      	sub	sp, #56	; 0x38
 8006020:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8006022:	463b      	mov	r3, r7
 8006024:	2234      	movs	r2, #52	; 0x34
 8006026:	2100      	movs	r1, #0
 8006028:	4618      	mov	r0, r3
 800602a:	f018 f853 	bl	801e0d4 <memset>
  static uint8_t ADC_stopped=0;
  uint32_t ADC_Status;
  
  
  ADC_Status= HAL_ADC_GetState(&ADC1_Handle);
 800602e:	481e      	ldr	r0, [pc, #120]	; (80060a8 <Channel_ADC1_Init+0x8c>)
 8006030:	f000 ff1c 	bl	8006e6c <HAL_ADC_GetState>
 8006034:	6378      	str	r0, [r7, #52]	; 0x34
  if ((ADC_Status & HAL_ADC_STATE_REG_BUSY) == HAL_ADC_STATE_REG_BUSY)
 8006036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <Channel_ADC1_Init+0x30>
  {
    (void)HAL_ADC_Stop(&ADC1_Handle);
 8006040:	4819      	ldr	r0, [pc, #100]	; (80060a8 <Channel_ADC1_Init+0x8c>)
 8006042:	f000 feb8 	bl	8006db6 <HAL_ADC_Stop>
    ADC_stopped=1;
 8006046:	4b19      	ldr	r3, [pc, #100]	; (80060ac <Channel_ADC1_Init+0x90>)
 8006048:	2201      	movs	r2, #1
 800604a:	701a      	strb	r2, [r3, #0]
  }

    
  /* Configure ADC injected channel */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 800604c:	4b18      	ldr	r3, [pc, #96]	; (80060b0 <Channel_ADC1_Init+0x94>)
 800604e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8006050:	2308      	movs	r3, #8
 8006052:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8006054:	2307      	movs	r3, #7
 8006056:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8006058:	237f      	movs	r3, #127	; 0x7f
 800605a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800605c:	2304      	movs	r3, #4
 800605e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8006064:	2301      	movs	r3, #1
 8006066:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8006068:	2300      	movs	r3, #0
 800606a:	773b      	strb	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800606c:	2300      	movs	r3, #0
 800606e:	777b      	strb	r3, [r7, #29]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8006070:	2300      	movs	r3, #0
 8006072:	77bb      	strb	r3, [r7, #30]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8006074:	2300      	movs	r3, #0
 8006076:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8006078:	2300      	movs	r3, #0
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjecOversamplingMode = DISABLE; 
 800607c:	2300      	movs	r3, #0
 800607e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  
  HAL_ADC_BC_MspInit();
 8006082:	f7ff ffa1 	bl	8005fc8 <HAL_ADC_BC_MspInit>
  
  
  (void)HAL_ADCEx_InjectedConfigChannel(&ADC1_Handle, &sConfigInjected);
 8006086:	463b      	mov	r3, r7
 8006088:	4619      	mov	r1, r3
 800608a:	4807      	ldr	r0, [pc, #28]	; (80060a8 <Channel_ADC1_Init+0x8c>)
 800608c:	f001 fba8 	bl	80077e0 <HAL_ADCEx_InjectedConfigChannel>
    
  if (ADC_stopped == 1U)
 8006090:	4b06      	ldr	r3, [pc, #24]	; (80060ac <Channel_ADC1_Init+0x90>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d102      	bne.n	800609e <Channel_ADC1_Init+0x82>
  {
    (void)HAL_ADC_Start(&ADC1_Handle);
 8006098:	4803      	ldr	r0, [pc, #12]	; (80060a8 <Channel_ADC1_Init+0x8c>)
 800609a:	f000 fe29 	bl	8006cf0 <HAL_ADC_Start>
  }
  
  return 0;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3738      	adds	r7, #56	; 0x38
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	20003324 	.word	0x20003324
 80060ac:	200034aa 	.word	0x200034aa
 80060b0:	36902000 	.word	0x36902000

080060b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  if (htim->Instance == STBC02_USED_TIM)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a04      	ldr	r2, [pc, #16]	; (80060d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    BC_CmdMng();
 80060c6:	f7ff fdf3 	bl	8005cb0 <BC_CmdMng>
  }
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40001400 	.word	0x40001400

080060d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  htim : hadc handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7f1b      	ldrb	r3, [r3, #28]
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_IC_CaptureCallback+0x14>
  {
    BSP_BC_ChgPinHasToggled();
 80060e8:	f7ff fcd6 	bl	8005a98 <BSP_BC_ChgPinHasToggled>
  }
}
 80060ec:	bf00      	nop
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <TIM7_IRQHandler>:
 */
/**
* @brief This function handles STBC02_USED_TIM global interrupt.
*/
void STBC02_USED_TIM_IRQHandler(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hstbc02_UsedTim);
 80060f8:	4802      	ldr	r0, [pc, #8]	; (8006104 <TIM7_IRQHandler+0x10>)
 80060fa:	f008 ff2e 	bl	800ef5a <HAL_TIM_IRQHandler>
}
 80060fe:	bf00      	nop
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	200033c8 	.word	0x200033c8

08006108 <TIM3_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimBCHandle);
 800610c:	4802      	ldr	r0, [pc, #8]	; (8006118 <TIM3_IRQHandler+0x10>)
 800610e:	f008 ff24 	bl	800ef5a <HAL_TIM_IRQHandler>
}
 8006112:	bf00      	nop
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20003408 	.word	0x20003408

0800611c <BSP_DEBUG_PIN_Init_All>:
*         Pin name also identifies the pin number on STMOD+.
* @param  None
* @retval None
*/  
void BSP_DEBUG_PIN_Init_All(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  BSP_DEBUG_PIN_Off(DEBUG_PIN7);
 8006120:	2000      	movs	r0, #0
 8006122:	f000 f955 	bl	80063d0 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN8);
 8006126:	2001      	movs	r0, #1
 8006128:	f000 f952 	bl	80063d0 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN9);
 800612c:	2002      	movs	r0, #2
 800612e:	f000 f94f 	bl	80063d0 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN10);
 8006132:	2003      	movs	r0, #3
 8006134:	f000 f94c 	bl	80063d0 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN11);
 8006138:	2004      	movs	r0, #4
 800613a:	f000 f949 	bl	80063d0 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN12);
 800613e:	2005      	movs	r0, #5
 8006140:	f000 f946 	bl	80063d0 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN13);
 8006144:	2006      	movs	r0, #6
 8006146:	f000 f943 	bl	80063d0 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN14);
 800614a:	2007      	movs	r0, #7
 800614c:	f000 f940 	bl	80063d0 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN17);
 8006150:	2008      	movs	r0, #8
 8006152:	f000 f93d 	bl	80063d0 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN18);
 8006156:	2009      	movs	r0, #9
 8006158:	f000 f93a 	bl	80063d0 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN19);
 800615c:	200a      	movs	r0, #10
 800615e:	f000 f937 	bl	80063d0 <BSP_DEBUG_PIN_Off>
  BSP_DEBUG_PIN_Off(DEBUG_PIN20);
 8006162:	200b      	movs	r0, #11
 8006164:	f000 f934 	bl	80063d0 <BSP_DEBUG_PIN_Off>
  
  BSP_DEBUG_PIN_Init(DEBUG_PIN7);
 8006168:	2000      	movs	r0, #0
 800616a:	f000 f823 	bl	80061b4 <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN8);
 800616e:	2001      	movs	r0, #1
 8006170:	f000 f820 	bl	80061b4 <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN9);
 8006174:	2002      	movs	r0, #2
 8006176:	f000 f81d 	bl	80061b4 <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN10);
 800617a:	2003      	movs	r0, #3
 800617c:	f000 f81a 	bl	80061b4 <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN11);
 8006180:	2004      	movs	r0, #4
 8006182:	f000 f817 	bl	80061b4 <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN12);
 8006186:	2005      	movs	r0, #5
 8006188:	f000 f814 	bl	80061b4 <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN13);  
 800618c:	2006      	movs	r0, #6
 800618e:	f000 f811 	bl	80061b4 <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN14);
 8006192:	2007      	movs	r0, #7
 8006194:	f000 f80e 	bl	80061b4 <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN17);  
 8006198:	2008      	movs	r0, #8
 800619a:	f000 f80b 	bl	80061b4 <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN18);
 800619e:	2009      	movs	r0, #9
 80061a0:	f000 f808 	bl	80061b4 <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN19);
 80061a4:	200a      	movs	r0, #10
 80061a6:	f000 f805 	bl	80061b4 <BSP_DEBUG_PIN_Init>
  BSP_DEBUG_PIN_Init(DEBUG_PIN20);
 80061aa:	200b      	movs	r0, #11
 80061ac:	f000 f802 	bl	80061b4 <BSP_DEBUG_PIN_Init>
}
 80061b0:	bf00      	nop
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <BSP_DEBUG_PIN_Init>:
  
  
void BSP_DEBUG_PIN_Init(Debug_Pin_TypeDef Pin)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b094      	sub	sp, #80	; 0x50
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* Enable the GPIO clock */
  DEBUG_PINx_GPIO_CLK_ENABLE(Pin);
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10c      	bne.n	80061de <BSP_DEBUG_PIN_Init+0x2a>
 80061c4:	4b72      	ldr	r3, [pc, #456]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80061c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c8:	4a71      	ldr	r2, [pc, #452]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80061ca:	f043 0308 	orr.w	r3, r3, #8
 80061ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061d0:	4b6f      	ldr	r3, [pc, #444]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80061d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	e0b4      	b.n	8006348 <BSP_DEBUG_PIN_Init+0x194>
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d10c      	bne.n	80061fe <BSP_DEBUG_PIN_Init+0x4a>
 80061e4:	4b6a      	ldr	r3, [pc, #424]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80061e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e8:	4a69      	ldr	r2, [pc, #420]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80061ea:	f043 0302 	orr.w	r3, r3, #2
 80061ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061f0:	4b67      	ldr	r3, [pc, #412]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80061f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
 80061fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fc:	e0a4      	b.n	8006348 <BSP_DEBUG_PIN_Init+0x194>
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d10c      	bne.n	800621e <BSP_DEBUG_PIN_Init+0x6a>
 8006204:	4b62      	ldr	r3, [pc, #392]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006208:	4a61      	ldr	r2, [pc, #388]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 800620a:	f043 0304 	orr.w	r3, r3, #4
 800620e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006210:	4b5f      	ldr	r3, [pc, #380]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	633b      	str	r3, [r7, #48]	; 0x30
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	e094      	b.n	8006348 <BSP_DEBUG_PIN_Init+0x194>
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	2b03      	cmp	r3, #3
 8006222:	d10c      	bne.n	800623e <BSP_DEBUG_PIN_Init+0x8a>
 8006224:	4b5a      	ldr	r3, [pc, #360]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006228:	4a59      	ldr	r2, [pc, #356]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 800622a:	f043 0308 	orr.w	r3, r3, #8
 800622e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006230:	4b57      	ldr	r3, [pc, #348]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	e084      	b.n	8006348 <BSP_DEBUG_PIN_Init+0x194>
 800623e:	79fb      	ldrb	r3, [r7, #7]
 8006240:	2b04      	cmp	r3, #4
 8006242:	d10c      	bne.n	800625e <BSP_DEBUG_PIN_Init+0xaa>
 8006244:	4b52      	ldr	r3, [pc, #328]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006248:	4a51      	ldr	r2, [pc, #324]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 800624a:	f043 0304 	orr.w	r3, r3, #4
 800624e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006250:	4b4f      	ldr	r3, [pc, #316]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	62bb      	str	r3, [r7, #40]	; 0x28
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	e074      	b.n	8006348 <BSP_DEBUG_PIN_Init+0x194>
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	2b05      	cmp	r3, #5
 8006262:	d10c      	bne.n	800627e <BSP_DEBUG_PIN_Init+0xca>
 8006264:	4b4a      	ldr	r3, [pc, #296]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006268:	4a49      	ldr	r2, [pc, #292]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 800626a:	f043 0308 	orr.w	r3, r3, #8
 800626e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006270:	4b47      	ldr	r3, [pc, #284]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	e064      	b.n	8006348 <BSP_DEBUG_PIN_Init+0x194>
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	2b06      	cmp	r3, #6
 8006282:	d10c      	bne.n	800629e <BSP_DEBUG_PIN_Init+0xea>
 8006284:	4b42      	ldr	r3, [pc, #264]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006288:	4a41      	ldr	r2, [pc, #260]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006290:	4b3f      	ldr	r3, [pc, #252]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	623b      	str	r3, [r7, #32]
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	e054      	b.n	8006348 <BSP_DEBUG_PIN_Init+0x194>
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	2b07      	cmp	r3, #7
 80062a2:	d10c      	bne.n	80062be <BSP_DEBUG_PIN_Init+0x10a>
 80062a4:	4b3a      	ldr	r3, [pc, #232]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80062a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a8:	4a39      	ldr	r2, [pc, #228]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062b0:	4b37      	ldr	r3, [pc, #220]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80062b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	61fb      	str	r3, [r7, #28]
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	e044      	b.n	8006348 <BSP_DEBUG_PIN_Init+0x194>
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d10c      	bne.n	80062de <BSP_DEBUG_PIN_Init+0x12a>
 80062c4:	4b32      	ldr	r3, [pc, #200]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80062c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c8:	4a31      	ldr	r2, [pc, #196]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80062ca:	f043 0302 	orr.w	r3, r3, #2
 80062ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062d0:	4b2f      	ldr	r3, [pc, #188]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80062d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	e034      	b.n	8006348 <BSP_DEBUG_PIN_Init+0x194>
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	2b09      	cmp	r3, #9
 80062e2:	d10e      	bne.n	8006302 <BSP_DEBUG_PIN_Init+0x14e>
 80062e4:	f004 f8c4 	bl	800a470 <HAL_PWREx_EnableVddIO2>
 80062e8:	4b29      	ldr	r3, [pc, #164]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80062ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ec:	4a28      	ldr	r2, [pc, #160]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80062ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062f4:	4b26      	ldr	r3, [pc, #152]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 80062f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	e022      	b.n	8006348 <BSP_DEBUG_PIN_Init+0x194>
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	2b0a      	cmp	r3, #10
 8006306:	d10e      	bne.n	8006326 <BSP_DEBUG_PIN_Init+0x172>
 8006308:	f004 f8b2 	bl	800a470 <HAL_PWREx_EnableVddIO2>
 800630c:	4b20      	ldr	r3, [pc, #128]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 800630e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006310:	4a1f      	ldr	r2, [pc, #124]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006316:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006318:	4b1d      	ldr	r3, [pc, #116]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 800631a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800631c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	e010      	b.n	8006348 <BSP_DEBUG_PIN_Init+0x194>
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	2b0b      	cmp	r3, #11
 800632a:	d10d      	bne.n	8006348 <BSP_DEBUG_PIN_Init+0x194>
 800632c:	f004 f8a0 	bl	800a470 <HAL_PWREx_EnableVddIO2>
 8006330:	4b17      	ldr	r3, [pc, #92]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006334:	4a16      	ldr	r2, [pc, #88]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 8006336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800633a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800633c:	4b14      	ldr	r3, [pc, #80]	; (8006390 <BSP_DEBUG_PIN_Init+0x1dc>)
 800633e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO pin */
  GPIO_InitStructure.Pin = DEBUG_PIN[Pin];
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	4a12      	ldr	r2, [pc, #72]	; (8006394 <BSP_DEBUG_PIN_Init+0x1e0>)
 800634c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006350:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;    
 8006352:	2301      	movs	r3, #1
 8006354:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8006356:	2300      	movs	r3, #0
 8006358:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800635a:	2303      	movs	r3, #3
 800635c:	64bb      	str	r3, [r7, #72]	; 0x48

  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], GPIO_InitStructure.Pin, GPIO_PIN_RESET);  
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	4a0d      	ldr	r2, [pc, #52]	; (8006398 <BSP_DEBUG_PIN_Init+0x1e4>)
 8006362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006368:	b291      	uxth	r1, r2
 800636a:	2200      	movs	r2, #0
 800636c:	4618      	mov	r0, r3
 800636e:	f002 fba5 	bl	8008abc <HAL_GPIO_WritePin>

  HAL_GPIO_Init(DEBUG_PIN_PORT[Pin], &GPIO_InitStructure);
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	4a08      	ldr	r2, [pc, #32]	; (8006398 <BSP_DEBUG_PIN_Init+0x1e4>)
 8006376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800637a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800637e:	4611      	mov	r1, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f002 f9f1 	bl	8008768 <HAL_GPIO_Init>
}
 8006386:	bf00      	nop
 8006388:	3750      	adds	r7, #80	; 0x50
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40021000 	.word	0x40021000
 8006394:	080229b0 	.word	0x080229b0
 8006398:	20000048 	.word	0x20000048

0800639c <BSP_DEBUG_PIN_On>:
  HAL_GPIO_DeInit(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin]);
  DEBUG_PINx_GPIO_CLK_DISABLE(Pin);
}

void BSP_DEBUG_PIN_On(Debug_Pin_TypeDef Pin)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_SET);
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	4a07      	ldr	r2, [pc, #28]	; (80063c8 <BSP_DEBUG_PIN_On+0x2c>)
 80063aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	4a06      	ldr	r2, [pc, #24]	; (80063cc <BSP_DEBUG_PIN_On+0x30>)
 80063b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063b6:	2201      	movs	r2, #1
 80063b8:	4619      	mov	r1, r3
 80063ba:	f002 fb7f 	bl	8008abc <HAL_GPIO_WritePin>
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000048 	.word	0x20000048
 80063cc:	080229b0 	.word	0x080229b0

080063d0 <BSP_DEBUG_PIN_Off>:

void BSP_DEBUG_PIN_Off(Debug_Pin_TypeDef Pin)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	4603      	mov	r3, r0
 80063d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DEBUG_PIN_PORT[Pin], DEBUG_PIN[Pin], GPIO_PIN_RESET);
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	4a07      	ldr	r2, [pc, #28]	; (80063fc <BSP_DEBUG_PIN_Off+0x2c>)
 80063de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	4a06      	ldr	r2, [pc, #24]	; (8006400 <BSP_DEBUG_PIN_Off+0x30>)
 80063e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ea:	2200      	movs	r2, #0
 80063ec:	4619      	mov	r1, r3
 80063ee:	f002 fb65 	bl	8008abc <HAL_GPIO_WritePin>
}
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20000048 	.word	0x20000048
 8006400:	080229b0 	.word	0x080229b0

08006404 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
  uint8_t sd_state;
  /* Check if the SD card is plugged in the slot */
  
  /* Initialize all configured peripherals */

  hsd1.Instance = SDMMC1;
 800640a:	4b15      	ldr	r3, [pc, #84]	; (8006460 <BSP_SD_Init+0x5c>)
 800640c:	4a15      	ldr	r2, [pc, #84]	; (8006464 <BSP_SD_Init+0x60>)
 800640e:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8006410:	4b13      	ldr	r3, [pc, #76]	; (8006460 <BSP_SD_Init+0x5c>)
 8006412:	2200      	movs	r2, #0
 8006414:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006416:	4b12      	ldr	r3, [pc, #72]	; (8006460 <BSP_SD_Init+0x5c>)
 8006418:	2200      	movs	r2, #0
 800641a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800641c:	4b10      	ldr	r3, [pc, #64]	; (8006460 <BSP_SD_Init+0x5c>)
 800641e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006422:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8006424:	4b0e      	ldr	r3, [pc, #56]	; (8006460 <BSP_SD_Init+0x5c>)
 8006426:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800642a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1;
 800642c:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <BSP_SD_Init+0x5c>)
 800642e:	2201      	movs	r2, #1
 8006430:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <BSP_SD_Init+0x5c>)
 8006434:	2200      	movs	r2, #0
 8006436:	619a      	str	r2, [r3, #24]
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&hsd1);
 8006438:	4809      	ldr	r0, [pc, #36]	; (8006460 <BSP_SD_Init+0x5c>)
 800643a:	f000 f889 	bl	8006550 <BSP_SD_MspInit>
  
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800643e:	f000 f839 	bl	80064b4 <BSP_SD_IsDetected>
 8006442:	4603      	mov	r3, r0
 8006444:	2b01      	cmp	r3, #1
 8006446:	d001      	beq.n	800644c <BSP_SD_Init+0x48>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006448:	2302      	movs	r3, #2
 800644a:	e005      	b.n	8006458 <BSP_SD_Init+0x54>
  }
  /* HAL SD initialization */
  sd_state = (uint8_t)HAL_SD_Init(&hsd1);
 800644c:	4804      	ldr	r0, [pc, #16]	; (8006460 <BSP_SD_Init+0x5c>)
 800644e:	f006 f92f 	bl	800c6b0 <HAL_SD_Init>
 8006452:	4603      	mov	r3, r0
 8006454:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006456:	79fb      	ldrb	r3, [r7, #7]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20002a88 	.word	0x20002a88
 8006464:	50062400 	.word	0x50062400

08006468 <BSP_SD_Detect_Init>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
void BSP_SD_Detect_Init(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
  
  SD_DETECT_GPIO_CLK_ENABLE();
 800646e:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <BSP_SD_Detect_Init+0x44>)
 8006470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006472:	4a0e      	ldr	r2, [pc, #56]	; (80064ac <BSP_SD_Detect_Init+0x44>)
 8006474:	f043 0302 	orr.w	r3, r3, #2
 8006478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800647a:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <BSP_SD_Detect_Init+0x44>)
 800647c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	683b      	ldr	r3, [r7, #0]

  /* Configure MFX Interrupt GPIO */
  gpio_init_structure.Pin   = SD_DETECT_GPIO_PIN;
 8006486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800648a:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800648c:	2301      	movs	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_LOW;
 8006490:	2300      	movs	r3, #0
 8006492:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode  = GPIO_MODE_INPUT;
 8006494:	2300      	movs	r3, #0
 8006496:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8006498:	1d3b      	adds	r3, r7, #4
 800649a:	4619      	mov	r1, r3
 800649c:	4804      	ldr	r0, [pc, #16]	; (80064b0 <BSP_SD_Detect_Init+0x48>)
 800649e:	f002 f963 	bl	8008768 <HAL_GPIO_Init>
}
 80064a2:	bf00      	nop
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40021000 	.word	0x40021000
 80064b0:	48000400 	.word	0x48000400

080064b4 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Return 1 if SD is detected, 0 if not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* Check SD card detect pin */
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_GPIO_PIN) == GPIO_PIN_RESET)
 80064b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064bc:	4808      	ldr	r0, [pc, #32]	; (80064e0 <BSP_SD_IsDetected+0x2c>)
 80064be:	f002 fae5 	bl	8008a8c <HAL_GPIO_ReadPin>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d103      	bne.n	80064d0 <BSP_SD_IsDetected+0x1c>
  {
    SD_Status = SD_NOT_PRESENT;
 80064c8:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <BSP_SD_IsDetected+0x30>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	e002      	b.n	80064d6 <BSP_SD_IsDetected+0x22>
  }
  else
  {
    SD_Status = SD_PRESENT;
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <BSP_SD_IsDetected+0x30>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
  }
  
  return SD_Status;
 80064d6:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <BSP_SD_IsDetected+0x30>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	b2db      	uxtb	r3, r3
}
 80064dc:	4618      	mov	r0, r3
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	48000400 	.word	0x48000400
 80064e4:	200034ab 	.word	0x200034ab

080064e8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	68f9      	ldr	r1, [r7, #12]
 80064fe:	4806      	ldr	r0, [pc, #24]	; (8006518 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006500:	f006 f9ec 	bl	800c8dc <HAL_SD_ReadBlocks_DMA>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800650e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20002a88 	.word	0x20002a88

0800651c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	68f9      	ldr	r1, [r7, #12]
 8006532:	4806      	ldr	r0, [pc, #24]	; (800654c <BSP_SD_WriteBlocks_DMA+0x30>)
 8006534:	f006 fa7a 	bl	800ca2c <HAL_SD_WriteBlocks_DMA>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006542:	7dfb      	ldrb	r3, [r7, #23]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20002a88 	.word	0x20002a88

08006550 <BSP_SD_MspInit>:

  return sd_state; 
}

void BSP_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	; 0x28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  GPIO_InitTypeDef gpioinitstruct = {0};
 8006558:	f107 0314 	add.w	r3, r7, #20
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	609a      	str	r2, [r3, #8]
 8006564:	60da      	str	r2, [r3, #12]
 8006566:	611a      	str	r2, [r3, #16]
  
  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006568:	4b24      	ldr	r3, [pc, #144]	; (80065fc <BSP_SD_MspInit+0xac>)
 800656a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656c:	4a23      	ldr	r2, [pc, #140]	; (80065fc <BSP_SD_MspInit+0xac>)
 800656e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006572:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006574:	4b21      	ldr	r3, [pc, #132]	; (80065fc <BSP_SD_MspInit+0xac>)
 8006576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006580:	4b1e      	ldr	r3, [pc, #120]	; (80065fc <BSP_SD_MspInit+0xac>)
 8006582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006584:	4a1d      	ldr	r2, [pc, #116]	; (80065fc <BSP_SD_MspInit+0xac>)
 8006586:	f043 0304 	orr.w	r3, r3, #4
 800658a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800658c:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <BSP_SD_MspInit+0xac>)
 800658e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006598:	4b18      	ldr	r3, [pc, #96]	; (80065fc <BSP_SD_MspInit+0xac>)
 800659a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659c:	4a17      	ldr	r2, [pc, #92]	; (80065fc <BSP_SD_MspInit+0xac>)
 800659e:	f043 0308 	orr.w	r3, r3, #8
 80065a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065a4:	4b15      	ldr	r3, [pc, #84]	; (80065fc <BSP_SD_MspInit+0xac>)
 80065a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 80065b0:	2302      	movs	r3, #2
 80065b2:	61bb      	str	r3, [r7, #24]
  gpioinitstruct.Pull      = GPIO_PULLUP;
 80065b4:	2301      	movs	r3, #1
 80065b6:	61fb      	str	r3, [r7, #28]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80065b8:	2303      	movs	r3, #3
 80065ba:	623b      	str	r3, [r7, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 80065bc:	230c      	movs	r3, #12
 80065be:	627b      	str	r3, [r7, #36]	; 0x24

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80065c0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80065c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80065c6:	f107 0314 	add.w	r3, r7, #20
 80065ca:	4619      	mov	r1, r3
 80065cc:	480c      	ldr	r0, [pc, #48]	; (8006600 <BSP_SD_MspInit+0xb0>)
 80065ce:	f002 f8cb 	bl	8008768 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 80065d2:	2304      	movs	r3, #4
 80065d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80065d6:	f107 0314 	add.w	r3, r7, #20
 80065da:	4619      	mov	r1, r3
 80065dc:	4809      	ldr	r0, [pc, #36]	; (8006604 <BSP_SD_MspInit+0xb4>)
 80065de:	f002 f8c3 	bl	8008768 <HAL_GPIO_Init>

  /* NVIC configuration for SDMMC1 interrupts */
  HAL_NVIC_SetPriority(SDMMCx_IRQn, 5, 0);
 80065e2:	2200      	movs	r2, #0
 80065e4:	2105      	movs	r1, #5
 80065e6:	2031      	movs	r0, #49	; 0x31
 80065e8:	f001 fe07 	bl	80081fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMCx_IRQn);
 80065ec:	2031      	movs	r0, #49	; 0x31
 80065ee:	f001 fe20 	bl	8008232 <HAL_NVIC_EnableIRQ>


}
 80065f2:	bf00      	nop
 80065f4:	3728      	adds	r7, #40	; 0x28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40021000 	.word	0x40021000
 8006600:	48000800 	.word	0x48000800
 8006604:	48000c00 	.word	0x48000c00

08006608 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800660c:	4805      	ldr	r0, [pc, #20]	; (8006624 <BSP_SD_GetCardState+0x1c>)
 800660e:	f006 ffa5 	bl	800d55c <HAL_SD_GetCardState>
 8006612:	4603      	mov	r3, r0
 8006614:	2b04      	cmp	r3, #4
 8006616:	bf14      	ite	ne
 8006618:	2301      	movne	r3, #1
 800661a:	2300      	moveq	r3, #0
 800661c:	b2db      	uxtb	r3, r3
}
 800661e:	4618      	mov	r0, r3
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20002a88 	.word	0x20002a88

08006628 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  (void)HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	4803      	ldr	r0, [pc, #12]	; (8006640 <BSP_SD_GetCardInfo+0x18>)
 8006634:	f006 febc 	bl	800d3b0 <HAL_SD_GetCardInfo>
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20002a88 	.word	0x20002a88

08006644 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_WriteCpltCallback();
 800664c:	f7fd f8ea 	bl	8003824 <BSP_SD_WriteCpltCallback>
}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
  BSP_SD_ReadCpltCallback();
 8006660:	f7fd f8f0 	bl	8003844 <BSP_SD_ReadCpltCallback>
}
 8006664:	bf00      	nop
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006676:	2003      	movs	r0, #3
 8006678:	f001 fdb4 	bl	80081e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800667c:	2000      	movs	r0, #0
 800667e:	f000 f815 	bl	80066ac <HAL_InitTick>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	71fb      	strb	r3, [r7, #7]
 800668c:	e001      	b.n	8006692 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800668e:	f000 f805 	bl	800669c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006692:	79fb      	ldrb	r3, [r7, #7]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
	...

080066ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80066b8:	4b16      	ldr	r3, [pc, #88]	; (8006714 <HAL_InitTick+0x68>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d022      	beq.n	8006706 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80066c0:	4b15      	ldr	r3, [pc, #84]	; (8006718 <HAL_InitTick+0x6c>)
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	4b13      	ldr	r3, [pc, #76]	; (8006714 <HAL_InitTick+0x68>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80066cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80066d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 fdba 	bl	800824e <HAL_SYSTICK_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10f      	bne.n	8006700 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b0f      	cmp	r3, #15
 80066e4:	d809      	bhi.n	80066fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066e6:	2200      	movs	r2, #0
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	f04f 30ff 	mov.w	r0, #4294967295
 80066ee:	f001 fd84 	bl	80081fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80066f2:	4a0a      	ldr	r2, [pc, #40]	; (800671c <HAL_InitTick+0x70>)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	e007      	b.n	800670a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	73fb      	strb	r3, [r7, #15]
 80066fe:	e004      	b.n	800670a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
 8006704:	e001      	b.n	800670a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	2000007c 	.word	0x2000007c
 8006718:	20000038 	.word	0x20000038
 800671c:	20000078 	.word	0x20000078

08006720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <HAL_IncTick+0x1c>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4b05      	ldr	r3, [pc, #20]	; (8006740 <HAL_IncTick+0x20>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4413      	add	r3, r2
 800672e:	4a03      	ldr	r2, [pc, #12]	; (800673c <HAL_IncTick+0x1c>)
 8006730:	6013      	str	r3, [r2, #0]
}
 8006732:	bf00      	nop
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	200034ac 	.word	0x200034ac
 8006740:	2000007c 	.word	0x2000007c

08006744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  return uwTick;
 8006748:	4b03      	ldr	r3, [pc, #12]	; (8006758 <HAL_GetTick+0x14>)
 800674a:	681b      	ldr	r3, [r3, #0]
}
 800674c:	4618      	mov	r0, r3
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	200034ac 	.word	0x200034ac

0800675c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006764:	f7ff ffee 	bl	8006744 <HAL_GetTick>
 8006768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006774:	d004      	beq.n	8006780 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <HAL_Delay+0x40>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4413      	add	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006780:	bf00      	nop
 8006782:	f7ff ffdf 	bl	8006744 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	429a      	cmp	r2, r3
 8006790:	d8f7      	bhi.n	8006782 <HAL_Delay+0x26>
  {
  }
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	2000007c 	.word	0x2000007c

080067a0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <HAL_SuspendTick+0x1c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a04      	ldr	r2, [pc, #16]	; (80067bc <HAL_SuspendTick+0x1c>)
 80067aa:	f023 0302 	bic.w	r3, r3, #2
 80067ae:	6013      	str	r3, [r2, #0]
}
 80067b0:	bf00      	nop
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	e000e010 	.word	0xe000e010

080067c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	609a      	str	r2, [r3, #8]
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80067f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6093      	str	r3, [r2, #8]
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800681a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800681e:	d101      	bne.n	8006824 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006842:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006846:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800686e:	d101      	bne.n	8006874 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006892:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006896:	f043 0201 	orr.w	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80068be:	f043 0202 	orr.w	r2, r3, #2
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <LL_ADC_IsEnabled+0x18>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <LL_ADC_IsEnabled+0x1a>
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b02      	cmp	r3, #2
 800690a:	d101      	bne.n	8006910 <LL_ADC_IsDisableOngoing+0x18>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <LL_ADC_IsDisableOngoing+0x1a>
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800692e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006932:	f043 0204 	orr.w	r2, r3, #4
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006956:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800695a:	f043 0210 	orr.w	r2, r3, #16
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b04      	cmp	r3, #4
 8006980:	d101      	bne.n	8006986 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d101      	bne.n	80069d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
	...

080069e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b088      	sub	sp, #32
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e174      	b.n	8006ce8 <HAL_ADC_Init+0x304>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d132      	bne.n	8006a72 <HAL_ADC_Init+0x8e>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a9a      	ldr	r2, [pc, #616]	; (8006c78 <HAL_ADC_Init+0x294>)
 8006a10:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a99      	ldr	r2, [pc, #612]	; (8006c7c <HAL_ADC_Init+0x298>)
 8006a16:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a99      	ldr	r2, [pc, #612]	; (8006c80 <HAL_ADC_Init+0x29c>)
 8006a1c:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a98      	ldr	r2, [pc, #608]	; (8006c84 <HAL_ADC_Init+0x2a0>)
 8006a22:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a98      	ldr	r2, [pc, #608]	; (8006c88 <HAL_ADC_Init+0x2a4>)
 8006a28:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a97      	ldr	r2, [pc, #604]	; (8006c8c <HAL_ADC_Init+0x2a8>)
 8006a2e:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a97      	ldr	r2, [pc, #604]	; (8006c90 <HAL_ADC_Init+0x2ac>)
 8006a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a96      	ldr	r2, [pc, #600]	; (8006c94 <HAL_ADC_Init+0x2b0>)
 8006a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a95      	ldr	r2, [pc, #596]	; (8006c98 <HAL_ADC_Init+0x2b4>)
 8006a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (hadc->MspInitCallback == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <HAL_ADC_Init+0x76>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a91      	ldr	r2, [pc, #580]	; (8006c9c <HAL_ADC_Init+0x2b8>)
 8006a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff fec7 	bl	800680a <LL_ADC_IsDeepPowerDownEnabled>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <HAL_ADC_Init+0xa8>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff fead 	bl	80067e6 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff fee2 	bl	800685a <LL_ADC_IsInternalRegulatorEnabled>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d113      	bne.n	8006ac4 <HAL_ADC_Init+0xe0>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff fec6 	bl	8006832 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006aa6:	4b7e      	ldr	r3, [pc, #504]	; (8006ca0 <HAL_ADC_Init+0x2bc>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	099b      	lsrs	r3, r3, #6
 8006aac:	4a7d      	ldr	r2, [pc, #500]	; (8006ca4 <HAL_ADC_Init+0x2c0>)
 8006aae:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab2:	099b      	lsrs	r3, r3, #6
 8006ab4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006ab6:	e002      	b.n	8006abe <HAL_ADC_Init+0xda>
    {
      wait_loop_index--;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1f9      	bne.n	8006ab8 <HAL_ADC_Init+0xd4>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff fec6 	bl	800685a <LL_ADC_IsInternalRegulatorEnabled>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10d      	bne.n	8006af0 <HAL_ADC_Init+0x10c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad8:	f043 0210 	orr.w	r2, r3, #16
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae4:	f043 0201 	orr.w	r2, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff ff3a 	bl	800696e <LL_ADC_REG_IsConversionOngoing>
 8006afa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b00:	f003 0310 	and.w	r3, r3, #16
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f040 80e6 	bne.w	8006cd6 <HAL_ADC_Init+0x2f2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f040 80e2 	bne.w	8006cd6 <HAL_ADC_Init+0x2f2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006b1a:	f043 0202 	orr.w	r2, r3, #2
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fed3 	bl	80068d2 <LL_ADC_IsEnabled>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10b      	bne.n	8006b4a <HAL_ADC_Init+0x166>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b32:	485d      	ldr	r0, [pc, #372]	; (8006ca8 <HAL_ADC_Init+0x2c4>)
 8006b34:	f7ff fecd 	bl	80068d2 <LL_ADC_IsEnabled>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d105      	bne.n	8006b4a <HAL_ADC_Init+0x166>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	4619      	mov	r1, r3
 8006b44:	4859      	ldr	r0, [pc, #356]	; (8006cac <HAL_ADC_Init+0x2c8>)
 8006b46:	f7ff fe3b 	bl	80067c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	7e5b      	ldrb	r3, [r3, #25]
 8006b4e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b54:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006b5a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006b60:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b68:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d106      	bne.n	8006b86 <HAL_ADC_Init+0x1a2>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	045b      	lsls	r3, r3, #17
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d009      	beq.n	8006ba2 <HAL_ADC_Init+0x1be>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b92:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	4b41      	ldr	r3, [pc, #260]	; (8006cb0 <HAL_ADC_Init+0x2cc>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	69b9      	ldr	r1, [r7, #24]
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fed7 	bl	800696e <LL_ADC_REG_IsConversionOngoing>
 8006bc0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fef8 	bl	80069bc <LL_ADC_INJ_IsConversionOngoing>
 8006bcc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d140      	bne.n	8006c56 <HAL_ADC_Init+0x272>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d13d      	bne.n	8006c56 <HAL_ADC_Init+0x272>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	7e1b      	ldrb	r3, [r3, #24]
 8006be2:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006be4:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bfc:	f023 0306 	bic.w	r3, r3, #6
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	69b9      	ldr	r1, [r7, #24]
 8006c06:	430b      	orrs	r3, r1
 8006c08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d118      	bne.n	8006c46 <HAL_ADC_Init+0x262>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c1e:	f023 0304 	bic.w	r3, r3, #4
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006c2a:	4311      	orrs	r1, r2
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006c30:	4311      	orrs	r1, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c36:	430a      	orrs	r2, r1
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0201 	orr.w	r2, r2, #1
 8006c42:	611a      	str	r2, [r3, #16]
 8006c44:	e007      	b.n	8006c56 <HAL_ADC_Init+0x272>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d12a      	bne.n	8006cb4 <HAL_ADC_Init+0x2d0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	f023 010f 	bic.w	r1, r3, #15
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	1e5a      	subs	r2, r3, #1
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30
 8006c76:	e025      	b.n	8006cc4 <HAL_ADC_Init+0x2e0>
 8006c78:	08006e1d 	.word	0x08006e1d
 8006c7c:	08006e31 	.word	0x08006e31
 8006c80:	08006e45 	.word	0x08006e45
 8006c84:	08006e59 	.word	0x08006e59
 8006c88:	0800777b 	.word	0x0800777b
 8006c8c:	0800778f 	.word	0x0800778f
 8006c90:	080077a3 	.word	0x080077a3
 8006c94:	080077b7 	.word	0x080077b7
 8006c98:	080077cb 	.word	0x080077cb
 8006c9c:	080057f9 	.word	0x080057f9
 8006ca0:	20000038 	.word	0x20000038
 8006ca4:	053e2d63 	.word	0x053e2d63
 8006ca8:	50040000 	.word	0x50040000
 8006cac:	50040300 	.word	0x50040300
 8006cb0:	fff0c007 	.word	0xfff0c007
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 020f 	bic.w	r2, r2, #15
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc8:	f023 0303 	bic.w	r3, r3, #3
 8006ccc:	f043 0201 	orr.w	r2, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	659a      	str	r2, [r3, #88]	; 0x58
 8006cd4:	e007      	b.n	8006ce6 <HAL_ADC_Init+0x302>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cda:	f043 0210 	orr.w	r2, r3, #16
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006ce6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3720      	adds	r7, #32
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff fe36 	bl	800696e <LL_ADC_REG_IsConversionOngoing>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d14f      	bne.n	8006da8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_ADC_Start+0x26>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e04b      	b.n	8006dae <HAL_ADC_Start+0xbe>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f964 	bl	8006fec <ADC_Enable>
 8006d24:	4603      	mov	r3, r0
 8006d26:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d137      	bne.n	8006d9e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d36:	f023 0301 	bic.w	r3, r3, #1
 8006d3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4e:	d106      	bne.n	8006d5e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d54:	f023 0206 	bic.w	r2, r3, #6
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d5c:	e002      	b.n	8006d64 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	221c      	movs	r2, #28
 8006d6a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d007      	beq.n	8006d92 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006d8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff fdc1 	bl	800691e <LL_ADC_REG_StartConversion>
 8006d9c:	e006      	b.n	8006dac <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006da6:	e001      	b.n	8006dac <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006da8:	2302      	movs	r3, #2
 8006daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_ADC_Stop+0x16>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e023      	b.n	8006e14 <HAL_ADC_Stop+0x5e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006dd4:	2103      	movs	r1, #3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f854 	bl	8006e84 <ADC_ConversionStop>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d111      	bne.n	8006e0a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f95a 	bl	80070a0 <ADC_Disable>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d109      	bne.n	8006e0a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	f043 0201 	orr.w	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff fd67 	bl	800696e <LL_ADC_REG_IsConversionOngoing>
 8006ea0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff fd88 	bl	80069bc <LL_ADC_INJ_IsConversionOngoing>
 8006eac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8091 	beq.w	8006fde <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d02a      	beq.n	8006f20 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	7e5b      	ldrb	r3, [r3, #25]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d126      	bne.n	8006f20 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	7e1b      	ldrb	r3, [r3, #24]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d122      	bne.n	8006f20 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006eda:	2301      	movs	r3, #1
 8006edc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006ede:	e014      	b.n	8006f0a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4a41      	ldr	r2, [pc, #260]	; (8006fe8 <ADC_ConversionStop+0x164>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d90d      	bls.n	8006f04 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eec:	f043 0210 	orr.w	r2, r3, #16
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef8:	f043 0201 	orr.w	r2, r3, #1
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e06d      	b.n	8006fe0 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	3301      	adds	r3, #1
 8006f08:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f14:	2b40      	cmp	r3, #64	; 0x40
 8006f16:	d1e3      	bne.n	8006ee0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2240      	movs	r2, #64	; 0x40
 8006f1e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d014      	beq.n	8006f50 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff fd1f 	bl	800696e <LL_ADC_REG_IsConversionOngoing>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00c      	beq.n	8006f50 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff fcdc 	bl	80068f8 <LL_ADC_IsDisableOngoing>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d104      	bne.n	8006f50 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fcfb 	bl	8006946 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d014      	beq.n	8006f80 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff fd2e 	bl	80069bc <LL_ADC_INJ_IsConversionOngoing>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00c      	beq.n	8006f80 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff fcc4 	bl	80068f8 <LL_ADC_IsDisableOngoing>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d104      	bne.n	8006f80 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff fd0a 	bl	8006994 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d005      	beq.n	8006f92 <ADC_ConversionStop+0x10e>
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d105      	bne.n	8006f98 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006f8c:	230c      	movs	r3, #12
 8006f8e:	617b      	str	r3, [r7, #20]
        break;
 8006f90:	e005      	b.n	8006f9e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006f92:	2308      	movs	r3, #8
 8006f94:	617b      	str	r3, [r7, #20]
        break;
 8006f96:	e002      	b.n	8006f9e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006f98:	2304      	movs	r3, #4
 8006f9a:	617b      	str	r3, [r7, #20]
        break;
 8006f9c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006f9e:	f7ff fbd1 	bl	8006744 <HAL_GetTick>
 8006fa2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006fa4:	e014      	b.n	8006fd0 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006fa6:	f7ff fbcd 	bl	8006744 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b05      	cmp	r3, #5
 8006fb2:	d90d      	bls.n	8006fd0 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb8:	f043 0210 	orr.w	r2, r3, #16
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc4:	f043 0201 	orr.w	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e007      	b.n	8006fe0 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1e3      	bne.n	8006fa6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3720      	adds	r7, #32
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	a33fffff 	.word	0xa33fffff

08006fec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff fc6a 	bl	80068d2 <LL_ADC_IsEnabled>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d146      	bne.n	8007092 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	4b24      	ldr	r3, [pc, #144]	; (800709c <ADC_Enable+0xb0>)
 800700c:	4013      	ands	r3, r2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00d      	beq.n	800702e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007016:	f043 0210 	orr.w	r2, r3, #16
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007022:	f043 0201 	orr.w	r2, r3, #1
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e032      	b.n	8007094 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff fc25 	bl	8006882 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007038:	f7ff fb84 	bl	8006744 <HAL_GetTick>
 800703c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800703e:	e021      	b.n	8007084 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff fc44 	bl	80068d2 <LL_ADC_IsEnabled>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff fc14 	bl	8006882 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800705a:	f7ff fb73 	bl	8006744 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d90d      	bls.n	8007084 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706c:	f043 0210 	orr.w	r2, r3, #16
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007078:	f043 0201 	orr.w	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e007      	b.n	8007094 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b01      	cmp	r3, #1
 8007090:	d1d6      	bne.n	8007040 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	8000003f 	.word	0x8000003f

080070a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff fc23 	bl	80068f8 <LL_ADC_IsDisableOngoing>
 80070b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7ff fc0a 	bl	80068d2 <LL_ADC_IsEnabled>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d040      	beq.n	8007146 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d13d      	bne.n	8007146 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f003 030d 	and.w	r3, r3, #13
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d10c      	bne.n	80070f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff fbe4 	bl	80068aa <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2203      	movs	r2, #3
 80070e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80070ea:	f7ff fb2b 	bl	8006744 <HAL_GetTick>
 80070ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80070f0:	e022      	b.n	8007138 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f6:	f043 0210 	orr.w	r2, r3, #16
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007102:	f043 0201 	orr.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e01c      	b.n	8007148 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800710e:	f7ff fb19 	bl	8006744 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d90d      	bls.n	8007138 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007120:	f043 0210 	orr.w	r2, r3, #16
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712c:	f043 0201 	orr.w	r2, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e007      	b.n	8007148 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e3      	bne.n	800710e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <LL_ADC_SetCommonPathInternalCh>:
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	609a      	str	r2, [r3, #8]
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <LL_ADC_GetCommonPathInternalCh>:
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
	...

08007194 <LL_ADC_SetOffset>:
{
 8007194:	b490      	push	{r4, r7}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3360      	adds	r3, #96	; 0x60
 80071a6:	461a      	mov	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80071b0:	6822      	ldr	r2, [r4, #0]
 80071b2:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <LL_ADC_SetOffset+0x40>)
 80071b4:	4013      	ands	r3, r2
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071c6:	6023      	str	r3, [r4, #0]
}
 80071c8:	bf00      	nop
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc90      	pop	{r4, r7}
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	03fff000 	.word	0x03fff000

080071d8 <LL_ADC_GetOffsetChannel>:
{
 80071d8:	b490      	push	{r4, r7}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3360      	adds	r3, #96	; 0x60
 80071e6:	461a      	mov	r2, r3
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc90      	pop	{r4, r7}
 80071fe:	4770      	bx	lr

08007200 <LL_ADC_SetOffsetState>:
{
 8007200:	b490      	push	{r4, r7}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3360      	adds	r3, #96	; 0x60
 8007210:	461a      	mov	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4313      	orrs	r3, r2
 8007224:	6023      	str	r3, [r4, #0]
}
 8007226:	bf00      	nop
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bc90      	pop	{r4, r7}
 800722e:	4770      	bx	lr

08007230 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	615a      	str	r2, [r3, #20]
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800726a:	2301      	movs	r3, #1
 800726c:	e000      	b.n	8007270 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <LL_ADC_INJ_IsTriggerSourceSWStart>:
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007288:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007290:	2301      	movs	r3, #1
 8007292:	e000      	b.n	8007296 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <LL_ADC_INJ_GetTrigAuto>:
{
 80072a2:	b480      	push	{r7}
 80072a4:	b083      	sub	sp, #12
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <LL_ADC_SetChannelSamplingTime>:
{
 80072be:	b490      	push	{r4, r7}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3314      	adds	r3, #20
 80072ce:	461a      	mov	r2, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	0e5b      	lsrs	r3, r3, #25
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	f003 0304 	and.w	r3, r3, #4
 80072da:	4413      	add	r3, r2
 80072dc:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80072de:	6822      	ldr	r2, [r4, #0]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	0d1b      	lsrs	r3, r3, #20
 80072e4:	f003 031f 	and.w	r3, r3, #31
 80072e8:	2107      	movs	r1, #7
 80072ea:	fa01 f303 	lsl.w	r3, r1, r3
 80072ee:	43db      	mvns	r3, r3
 80072f0:	401a      	ands	r2, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	0d1b      	lsrs	r3, r3, #20
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007300:	4313      	orrs	r3, r2
 8007302:	6023      	str	r3, [r4, #0]
}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bc90      	pop	{r4, r7}
 800730c:	4770      	bx	lr
	...

08007310 <LL_ADC_SetChannelSingleDiff>:
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007328:	43db      	mvns	r3, r3
 800732a:	401a      	ands	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f003 0318 	and.w	r3, r3, #24
 8007332:	4908      	ldr	r1, [pc, #32]	; (8007354 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007334:	40d9      	lsrs	r1, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	400b      	ands	r3, r1
 800733a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800733e:	431a      	orrs	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	0007ffff 	.word	0x0007ffff

08007358 <LL_ADC_IsEnabled>:
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b01      	cmp	r3, #1
 800736a:	d101      	bne.n	8007370 <LL_ADC_IsEnabled+0x18>
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <LL_ADC_IsEnabled+0x1a>
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <LL_ADC_StartCalibration>:
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007390:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800739a:	4313      	orrs	r3, r2
 800739c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	609a      	str	r2, [r3, #8]
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <LL_ADC_IsCalibrationOnGoing>:
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c4:	d101      	bne.n	80073ca <LL_ADC_IsCalibrationOnGoing+0x1a>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <LL_ADC_REG_IsConversionOngoing>:
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d101      	bne.n	80073f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80073ec:	2301      	movs	r3, #1
 80073ee:	e000      	b.n	80073f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <LL_ADC_INJ_StartConversion>:
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800740e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007412:	f043 0208 	orr.w	r2, r3, #8
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	609a      	str	r2, [r3, #8]
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <LL_ADC_INJ_IsConversionOngoing>:
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b08      	cmp	r3, #8
 8007438:	d101      	bne.n	800743e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007456:	2300      	movs	r3, #0
 8007458:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_ADCEx_Calibration_Start+0x1c>
 8007464:	2302      	movs	r3, #2
 8007466:	e04d      	b.n	8007504 <HAL_ADCEx_Calibration_Start+0xb8>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff fe15 	bl	80070a0 <ADC_Disable>
 8007476:	4603      	mov	r3, r0
 8007478:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d136      	bne.n	80074ee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007484:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007488:	f023 0302 	bic.w	r3, r3, #2
 800748c:	f043 0202 	orr.w	r2, r3, #2
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff ff6f 	bl	800737e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80074a0:	e014      	b.n	80074cc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	3301      	adds	r3, #1
 80074a6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80074ae:	d30d      	bcc.n	80074cc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b4:	f023 0312 	bic.w	r3, r3, #18
 80074b8:	f043 0210 	orr.w	r2, r3, #16
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e01b      	b.n	8007504 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff ff6d 	bl	80073b0 <LL_ADC_IsCalibrationOnGoing>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e2      	bne.n	80074a2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e0:	f023 0303 	bic.w	r3, r3, #3
 80074e4:	f043 0201 	orr.w	r2, r3, #1
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	659a      	str	r2, [r3, #88]	; 0x58
 80074ec:	e005      	b.n	80074fa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f2:	f043 0210 	orr.w	r2, r3, #16
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8007502:	7bfb      	ldrb	r3, [r7, #15]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff ff84 	bl	8007426 <LL_ADC_INJ_IsConversionOngoing>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <HAL_ADCEx_InjectedStart+0x1c>
  {
    return HAL_BUSY;
 8007524:	2302      	movs	r3, #2
 8007526:	e05f      	b.n	80075e8 <HAL_ADCEx_InjectedStart+0xdc>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007532:	60fb      	str	r3, [r7, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800753a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <HAL_ADCEx_InjectedStart+0x4c>
        && (tmp_config_injected_queue == 0UL)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d107      	bne.n	8007558 <HAL_ADCEx_InjectedStart+0x4c>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754c:	f043 0220 	orr.w	r2, r3, #32
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e047      	b.n	80075e8 <HAL_ADCEx_InjectedStart+0xdc>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <HAL_ADCEx_InjectedStart+0x5a>
 8007562:	2302      	movs	r3, #2
 8007564:	e040      	b.n	80075e8 <HAL_ADCEx_InjectedStart+0xdc>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fd3c 	bl	8006fec <ADC_Enable>
 8007574:	4603      	mov	r3, r0
 8007576:	72fb      	strb	r3, [r7, #11]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007578:	7afb      	ldrb	r3, [r7, #11]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d12f      	bne.n	80075de <HAL_ADCEx_InjectedStart+0xd2>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007586:	2b00      	cmp	r3, #0
 8007588:	d006      	beq.n	8007598 <HAL_ADCEx_InjectedStart+0x8c>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758e:	f023 0208 	bic.w	r2, r3, #8
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	65da      	str	r2, [r3, #92]	; 0x5c
 8007596:	e002      	b.n	800759e <HAL_ADCEx_InjectedStart+0x92>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80075a6:	f023 0301 	bic.w	r3, r3, #1
 80075aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2260      	movs	r2, #96	; 0x60
 80075b8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
      }
#else
      if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff fe6b 	bl	80072a2 <LL_ADC_INJ_GetTrigAuto>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <HAL_ADCEx_InjectedStart+0xda>
      {
        /* Start ADC group injected conversion */
        LL_ADC_INJ_StartConversion(hadc->Instance);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff ff11 	bl	80073fe <LL_ADC_INJ_StartConversion>
 80075dc:	e003      	b.n	80075e6 <HAL_ADCEx_InjectedStart+0xda>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
 80075e6:	7afb      	ldrb	r3, [r7, #11]
  }
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_ADCEx_InjectedPollForConversion>:
  * @note   Depending on hadc->Init.EOCSelection, JEOS or JEOC is
  *         checked and cleared depending on AUTDLY bit status.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of sequence selected */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	2b08      	cmp	r3, #8
 8007600:	d102      	bne.n	8007608 <HAL_ADCEx_InjectedPollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_JEOS;
 8007602:	2340      	movs	r3, #64	; 0x40
 8007604:	61fb      	str	r3, [r7, #28]
 8007606:	e001      	b.n	800760c <HAL_ADCEx_InjectedPollForConversion+0x1c>
  }
  else /* end of conversion selected */
  {
    tmp_Flag_End = ADC_FLAG_JEOC;
 8007608:	2320      	movs	r3, #32
 800760a:	61fb      	str	r3, [r7, #28]
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 800760c:	f7ff f89a 	bl	8006744 <HAL_GetTick>
 8007610:	61b8      	str	r0, [r7, #24]

  /* Wait until End of Conversion or Sequence flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8007612:	e01a      	b.n	800764a <HAL_ADCEx_InjectedPollForConversion+0x5a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761a:	d016      	beq.n	800764a <HAL_ADCEx_InjectedPollForConversion+0x5a>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800761c:	f7ff f892 	bl	8006744 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	429a      	cmp	r2, r3
 800762a:	d302      	bcc.n	8007632 <HAL_ADCEx_InjectedPollForConversion+0x42>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10b      	bne.n	800764a <HAL_ADCEx_InjectedPollForConversion+0x5a>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007636:	f043 0204 	orr.w	r2, r3, #4
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e05c      	b.n	8007704 <HAL_ADCEx_InjectedPollForConversion+0x114>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	4013      	ands	r3, r2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0dd      	beq.n	8007614 <HAL_ADCEx_InjectedPollForConversion+0x24>
      }
    }
  }

  /* Retrieve ADC configuration */
  tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff fe0d 	bl	800727c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007662:	6178      	str	r0, [r7, #20]
  tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff fdf4 	bl	8007256 <LL_ADC_REG_IsTriggerSourceSWStart>
 800766e:	6138      	str	r0, [r7, #16]
  {
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	60fb      	str	r3, [r7, #12]
#endif

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10c      	bne.n	80076a4 <HAL_ADCEx_InjectedPollForConversion+0xb4>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8007690:	2b00      	cmp	r3, #0
 8007692:	d125      	bne.n	80076e0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
      ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d022      	beq.n	80076e0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
        (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
       ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d11d      	bne.n	80076e0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ae:	2b40      	cmp	r3, #64	; 0x40
 80076b0:	d116      	bne.n	80076e0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
      /* when the last context has been fully processed, JSQR is reset      */
      /* by the hardware. Even if no injected conversion is planned to come */
      /* (queue empty, triggers are ignored), it can start again            */
      /* immediately after setting a new context (JADSTART is still set).   */
      /* Therefore, state of HAL ADC injected group is kept to busy.        */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d111      	bne.n	80076e0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	659a      	str	r2, [r3, #88]	; 0x58

        if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d105      	bne.n	80076e0 <HAL_ADCEx_InjectedPollForConversion+0xf0>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d8:	f043 0201 	orr.w	r2, r3, #1
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_JEOS)
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d109      	bne.n	80076fa <HAL_ADCEx_InjectedPollForConversion+0x10a>
  {
    /* Clear end of sequence JEOS flag of injected group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature.   */
    /* For injected groups, no new conversion will start before JEOS is       */
    /* cleared.                                                               */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d108      	bne.n	8007702 <HAL_ADCEx_InjectedPollForConversion+0x112>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2260      	movs	r2, #96	; 0x60
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	e003      	b.n	8007702 <HAL_ADCEx_InjectedPollForConversion+0x112>
    }
  }
  else
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2220      	movs	r2, #32
 8007700:	601a      	str	r2, [r3, #0]
  }

  /* Return API HAL status */
  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3720      	adds	r7, #32
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	f240 321a 	movw	r2, #794	; 0x31a
 800771c:	4293      	cmp	r3, r2
 800771e:	d00d      	beq.n	800773c <HAL_ADCEx_InjectedGetValue+0x30>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	f240 321a 	movw	r2, #794	; 0x31a
 8007726:	4293      	cmp	r3, r2
 8007728:	d81a      	bhi.n	8007760 <HAL_ADCEx_InjectedGetValue+0x54>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007730:	d010      	beq.n	8007754 <HAL_ADCEx_InjectedGetValue+0x48>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	f5b3 7f05 	cmp.w	r3, #532	; 0x214
 8007738:	d006      	beq.n	8007748 <HAL_ADCEx_InjectedGetValue+0x3c>
 800773a:	e011      	b.n	8007760 <HAL_ADCEx_InjectedGetValue+0x54>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007744:	60fb      	str	r3, [r7, #12]
      break;
 8007746:	e011      	b.n	800776c <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007750:	60fb      	str	r3, [r7, #12]
      break;
 8007752:	e00b      	b.n	800776c <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800775c:	60fb      	str	r3, [r7, #12]
      break;
 800775e:	e005      	b.n	800776c <HAL_ADCEx_InjectedGetValue+0x60>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007768:	60fb      	str	r3, [r7, #12]
      break;
 800776a:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 800776c:	68fb      	ldr	r3, [r7, #12]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007782:	bf00      	nop
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800778e:	b480      	push	{r7}
 8007790:	b083      	sub	sp, #12
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80077aa:	bf00      	nop
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b0a8      	sub	sp, #160	; 0xa0
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007800:	2b01      	cmp	r3, #1
 8007802:	d102      	bne.n	800780a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8007804:	2302      	movs	r3, #2
 8007806:	f000 bc13 	b.w	8008030 <HAL_ADCEx_InjectedConfigChannel+0x850>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800781e:	2b01      	cmp	r3, #1
 8007820:	d130      	bne.n	8007884 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b08      	cmp	r3, #8
 8007828:	d179      	bne.n	800791e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d010      	beq.n	8007854 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	0e9b      	lsrs	r3, r3, #26
 8007838:	021b      	lsls	r3, r3, #8
 800783a:	f403 52f8 	and.w	r2, r3, #7936	; 0x1f00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007846:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800784c:	4313      	orrs	r3, r2
 800784e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007852:	e007      	b.n	8007864 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	0e9b      	lsrs	r3, r3, #26
 800785a:	021b      	lsls	r3, r3, #8
 800785c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8007860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800786a:	4b96      	ldr	r3, [pc, #600]	; (8007ac4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>)
 800786c:	4013      	ands	r3, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6812      	ldr	r2, [r2, #0]
 8007872:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8007876:	430b      	orrs	r3, r1
 8007878:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007880:	661a      	str	r2, [r3, #96]	; 0x60
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8007882:	e04c      	b.n	800791e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007888:	2b00      	cmp	r3, #0
 800788a:	d11d      	bne.n	80078c8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	699a      	ldr	r2, [r3, #24]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	665a      	str	r2, [r3, #100]	; 0x64
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	661a      	str	r2, [r3, #96]	; 0x60
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00d      	beq.n	80078be <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80078b0:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078bc:	e004      	b.n	80078c8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	0e9b      	lsrs	r3, r3, #26
 80078ce:	f003 021f 	and.w	r2, r3, #31
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f003 031f 	and.w	r3, r3, #31
 80078da:	fa02 f303 	lsl.w	r3, r2, r3
 80078de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ec:	1e5a      	subs	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	665a      	str	r2, [r3, #100]	; 0x64

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80078f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800790e:	4b6d      	ldr	r3, [pc, #436]	; (8007ac4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>)
 8007910:	4013      	ands	r3, r2
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6812      	ldr	r2, [r2, #0]
 800791a:	430b      	orrs	r3, r1
 800791c:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff fd7f 	bl	8007426 <LL_ADC_INJ_IsConversionOngoing>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d120      	bne.n	8007970 <HAL_ADCEx_InjectedConfigChannel+0x190>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	7f5b      	ldrb	r3, [r3, #29]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d110      	bne.n	8007958 <HAL_ADCEx_InjectedConfigChannel+0x178>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	7f9b      	ldrb	r3, [r3, #30]
 8007944:	055a      	lsls	r2, r3, #21
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	7f1b      	ldrb	r3, [r3, #28]
 800794a:	051b      	lsls	r3, r3, #20
 800794c:	431a      	orrs	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	60da      	str	r2, [r3, #12]
 8007956:	e00b      	b.n	8007970 <HAL_ADCEx_InjectedConfigChannel+0x190>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	7f9b      	ldrb	r3, [r3, #30]
 8007966:	055a      	lsls	r2, r3, #21
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fd2f 	bl	80073d8 <LL_ADC_REG_IsConversionOngoing>
 800797a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff fd4f 	bl	8007426 <LL_ADC_INJ_IsConversionOngoing>
 8007988:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800798c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007990:	2b00      	cmp	r3, #0
 8007992:	f040 81b9 	bne.w	8007d08 <HAL_ADCEx_InjectedConfigChannel+0x528>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007996:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800799a:	2b00      	cmp	r3, #0
 800799c:	f040 81b4 	bne.w	8007d08 <HAL_ADCEx_InjectedConfigChannel+0x528>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_ADCEx_InjectedConfigChannel+0x1d0>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d115      	bne.n	80079dc <HAL_ADCEx_InjectedConfigChannel+0x1fc>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	7f5b      	ldrb	r3, [r3, #29]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d108      	bne.n	80079ca <HAL_ADCEx_InjectedConfigChannel+0x1ea>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80079c6:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80079c8:	e01e      	b.n	8007a08 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80079d8:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80079da:	e015      	b.n	8007a08 <HAL_ADCEx_InjectedConfigChannel+0x228>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	7f5b      	ldrb	r3, [r3, #29]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d109      	bne.n	80079f8 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e8:	f043 0220 	orr.w	r2, r3, #32
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	659a      	str	r2, [r3, #88]	; 0x58

        tmp_hal_status = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80079f6:	e007      	b.n	8007a08 <HAL_ADCEx_InjectedConfigChannel+0x228>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007a06:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d110      	bne.n	8007a34 <HAL_ADCEx_InjectedConfigChannel+0x254>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a24:	430b      	orrs	r3, r1
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f042 0202 	orr.w	r2, r2, #2
 8007a30:	611a      	str	r2, [r3, #16]
 8007a32:	e007      	b.n	8007a44 <HAL_ADCEx_InjectedConfigChannel+0x264>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	691a      	ldr	r2, [r3, #16]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0202 	bic.w	r2, r2, #2
 8007a42:	611a      	str	r2, [r3, #16]
    }

#if defined(ADC_SMPR1_SMPPLUS)
    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a4c:	d10f      	bne.n	8007a6e <HAL_ADCEx_InjectedConfigChannel+0x28e>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2200      	movs	r2, #0
 8007a58:	4619      	mov	r1, r3
 8007a5a:	f7ff fc30 	bl	80072be <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff fbe2 	bl	8007230 <LL_ADC_SetSamplingTimeCommonConfig>
 8007a6c:	e00e      	b.n	8007a8c <HAL_ADCEx_InjectedConfigChannel+0x2ac>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	6819      	ldr	r1, [r3, #0]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f7ff fc1f 	bl	80072be <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2100      	movs	r1, #0
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff fbd2 	bl	8007230 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	695a      	ldr	r2, [r3, #20]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	08db      	lsrs	r3, r3, #3
 8007a98:	f003 0303 	and.w	r3, r3, #3
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d00c      	beq.n	8007ac8 <HAL_ADCEx_InjectedConfigChannel+0x2e8>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6818      	ldr	r0, [r3, #0]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	6919      	ldr	r1, [r3, #16]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007abe:	f7ff fb69 	bl	8007194 <LL_ADC_SetOffset>
 8007ac2:	e121      	b.n	8007d08 <HAL_ADCEx_InjectedConfigChannel+0x528>
 8007ac4:	82082000 	.word	0x82082000
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2100      	movs	r1, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff fb82 	bl	80071d8 <LL_ADC_GetOffsetChannel>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10a      	bne.n	8007af4 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff fb77 	bl	80071d8 <LL_ADC_GetOffsetChannel>
 8007aea:	4603      	mov	r3, r0
 8007aec:	0e9b      	lsrs	r3, r3, #26
 8007aee:	f003 021f 	and.w	r2, r3, #31
 8007af2:	e014      	b.n	8007b1e <HAL_ADCEx_InjectedConfigChannel+0x33e>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2100      	movs	r1, #0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff fb6c 	bl	80071d8 <LL_ADC_GetOffsetChannel>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b0a:	fa93 f3a3 	rbit	r3, r3
 8007b0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007b12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b16:	fab3 f383 	clz	r3, r3
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d105      	bne.n	8007b36 <HAL_ADCEx_InjectedConfigChannel+0x356>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	0e9b      	lsrs	r3, r3, #26
 8007b30:	f003 031f 	and.w	r3, r3, #31
 8007b34:	e00a      	b.n	8007b4c <HAL_ADCEx_InjectedConfigChannel+0x36c>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b3e:	fa93 f3a3 	rbit	r3, r3
 8007b42:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8007b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b46:	fab3 f383 	clz	r3, r3
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d106      	bne.n	8007b5e <HAL_ADCEx_InjectedConfigChannel+0x37e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2200      	movs	r2, #0
 8007b56:	2100      	movs	r1, #0
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff fb51 	bl	8007200 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2101      	movs	r1, #1
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7ff fb37 	bl	80071d8 <LL_ADC_GetOffsetChannel>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2101      	movs	r1, #1
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff fb2c 	bl	80071d8 <LL_ADC_GetOffsetChannel>
 8007b80:	4603      	mov	r3, r0
 8007b82:	0e9b      	lsrs	r3, r3, #26
 8007b84:	f003 021f 	and.w	r2, r3, #31
 8007b88:	e010      	b.n	8007bac <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2101      	movs	r1, #1
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff fb21 	bl	80071d8 <LL_ADC_GetOffsetChannel>
 8007b96:	4603      	mov	r3, r0
 8007b98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b9c:	fa93 f3a3 	rbit	r3, r3
 8007ba0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ba4:	fab3 f383 	clz	r3, r3
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	461a      	mov	r2, r3
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d105      	bne.n	8007bc4 <HAL_ADCEx_InjectedConfigChannel+0x3e4>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	0e9b      	lsrs	r3, r3, #26
 8007bbe:	f003 031f 	and.w	r3, r3, #31
 8007bc2:	e00a      	b.n	8007bda <HAL_ADCEx_InjectedConfigChannel+0x3fa>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bcc:	fa93 f3a3 	rbit	r3, r3
 8007bd0:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8007bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bd4:	fab3 f383 	clz	r3, r3
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d106      	bne.n	8007bec <HAL_ADCEx_InjectedConfigChannel+0x40c>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2200      	movs	r2, #0
 8007be4:	2101      	movs	r1, #1
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff fb0a 	bl	8007200 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2102      	movs	r1, #2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff faf0 	bl	80071d8 <LL_ADC_GetOffsetChannel>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10a      	bne.n	8007c18 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2102      	movs	r1, #2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7ff fae5 	bl	80071d8 <LL_ADC_GetOffsetChannel>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	0e9b      	lsrs	r3, r3, #26
 8007c12:	f003 021f 	and.w	r2, r3, #31
 8007c16:	e010      	b.n	8007c3a <HAL_ADCEx_InjectedConfigChannel+0x45a>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2102      	movs	r1, #2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff fada 	bl	80071d8 <LL_ADC_GetOffsetChannel>
 8007c24:	4603      	mov	r3, r0
 8007c26:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c2a:	fa93 f3a3 	rbit	r3, r3
 8007c2e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8007c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c32:	fab3 f383 	clz	r3, r3
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	461a      	mov	r2, r3
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d105      	bne.n	8007c52 <HAL_ADCEx_InjectedConfigChannel+0x472>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	0e9b      	lsrs	r3, r3, #26
 8007c4c:	f003 031f 	and.w	r3, r3, #31
 8007c50:	e00a      	b.n	8007c68 <HAL_ADCEx_InjectedConfigChannel+0x488>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c5a:	fa93 f3a3 	rbit	r3, r3
 8007c5e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8007c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c62:	fab3 f383 	clz	r3, r3
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d106      	bne.n	8007c7a <HAL_ADCEx_InjectedConfigChannel+0x49a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2200      	movs	r2, #0
 8007c72:	2102      	movs	r1, #2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff fac3 	bl	8007200 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2103      	movs	r1, #3
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff faa9 	bl	80071d8 <LL_ADC_GetOffsetChannel>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2103      	movs	r1, #3
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff fa9e 	bl	80071d8 <LL_ADC_GetOffsetChannel>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	0e9b      	lsrs	r3, r3, #26
 8007ca0:	f003 021f 	and.w	r2, r3, #31
 8007ca4:	e010      	b.n	8007cc8 <HAL_ADCEx_InjectedConfigChannel+0x4e8>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2103      	movs	r1, #3
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7ff fa93 	bl	80071d8 <LL_ADC_GetOffsetChannel>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb8:	fa93 f3a3 	rbit	r3, r3
 8007cbc:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8007cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cc0:	fab3 f383 	clz	r3, r3
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d105      	bne.n	8007ce0 <HAL_ADCEx_InjectedConfigChannel+0x500>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	0e9b      	lsrs	r3, r3, #26
 8007cda:	f003 031f 	and.w	r3, r3, #31
 8007cde:	e00a      	b.n	8007cf6 <HAL_ADCEx_InjectedConfigChannel+0x516>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce8:	fa93 f3a3 	rbit	r3, r3
 8007cec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8007cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cf0:	fab3 f383 	clz	r3, r3
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d106      	bne.n	8007d08 <HAL_ADCEx_InjectedConfigChannel+0x528>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2103      	movs	r1, #3
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff fa7c 	bl	8007200 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff fb23 	bl	8007358 <LL_ADC_IsEnabled>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 810c 	bne.w	8007f32 <HAL_ADCEx_InjectedConfigChannel+0x752>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	6819      	ldr	r1, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	461a      	mov	r2, r3
 8007d28:	f7ff faf2 	bl	8007310 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4aa8      	ldr	r2, [pc, #672]	; (8007fd4 <HAL_ADCEx_InjectedConfigChannel+0x7f4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	f040 80fd 	bne.w	8007f32 <HAL_ADCEx_InjectedConfigChannel+0x752>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10b      	bne.n	8007d60 <HAL_ADCEx_InjectedConfigChannel+0x580>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	0e9b      	lsrs	r3, r3, #26
 8007d4e:	3301      	adds	r3, #1
 8007d50:	f003 031f 	and.w	r3, r3, #31
 8007d54:	2b09      	cmp	r3, #9
 8007d56:	bf94      	ite	ls
 8007d58:	2301      	movls	r3, #1
 8007d5a:	2300      	movhi	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	e012      	b.n	8007d86 <HAL_ADCEx_InjectedConfigChannel+0x5a6>
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d68:	fa93 f3a3 	rbit	r3, r3
 8007d6c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d70:	fab3 f383 	clz	r3, r3
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	3301      	adds	r3, #1
 8007d78:	f003 031f 	and.w	r3, r3, #31
 8007d7c:	2b09      	cmp	r3, #9
 8007d7e:	bf94      	ite	ls
 8007d80:	2301      	movls	r3, #1
 8007d82:	2300      	movhi	r3, #0
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d064      	beq.n	8007e54 <HAL_ADCEx_InjectedConfigChannel+0x674>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d107      	bne.n	8007da6 <HAL_ADCEx_InjectedConfigChannel+0x5c6>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	0e9b      	lsrs	r3, r3, #26
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	069b      	lsls	r3, r3, #26
 8007da0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007da4:	e00e      	b.n	8007dc4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dae:	fa93 f3a3 	rbit	r3, r3
 8007db2:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	fab3 f383 	clz	r3, r3
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	069b      	lsls	r3, r3, #26
 8007dc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d109      	bne.n	8007de4 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	0e9b      	lsrs	r3, r3, #26
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	f003 031f 	and.w	r3, r3, #31
 8007ddc:	2101      	movs	r1, #1
 8007dde:	fa01 f303 	lsl.w	r3, r1, r3
 8007de2:	e010      	b.n	8007e06 <HAL_ADCEx_InjectedConfigChannel+0x626>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dec:	fa93 f3a3 	rbit	r3, r3
 8007df0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	fab3 f383 	clz	r3, r3
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	f003 031f 	and.w	r3, r3, #31
 8007e00:	2101      	movs	r1, #1
 8007e02:	fa01 f303 	lsl.w	r3, r1, r3
 8007e06:	ea42 0103 	orr.w	r1, r2, r3
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <HAL_ADCEx_InjectedConfigChannel+0x64c>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	0e9b      	lsrs	r3, r3, #26
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	f003 021f 	and.w	r2, r3, #31
 8007e22:	4613      	mov	r3, r2
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	4413      	add	r3, r2
 8007e28:	051b      	lsls	r3, r3, #20
 8007e2a:	e011      	b.n	8007e50 <HAL_ADCEx_InjectedConfigChannel+0x670>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	fa93 f3a3 	rbit	r3, r3
 8007e38:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	fab3 f383 	clz	r3, r3
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	3301      	adds	r3, #1
 8007e44:	f003 021f 	and.w	r2, r3, #31
 8007e48:	4613      	mov	r3, r2
 8007e4a:	005b      	lsls	r3, r3, #1
 8007e4c:	4413      	add	r3, r2
 8007e4e:	051b      	lsls	r3, r3, #20
 8007e50:	430b      	orrs	r3, r1
 8007e52:	e069      	b.n	8007f28 <HAL_ADCEx_InjectedConfigChannel+0x748>
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d107      	bne.n	8007e70 <HAL_ADCEx_InjectedConfigChannel+0x690>
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	0e9b      	lsrs	r3, r3, #26
 8007e66:	3301      	adds	r3, #1
 8007e68:	069b      	lsls	r3, r3, #26
 8007e6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007e6e:	e00e      	b.n	8007e8e <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	fa93 f3a3 	rbit	r3, r3
 8007e7c:	623b      	str	r3, [r7, #32]
  return result;
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	fab3 f383 	clz	r3, r3
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	3301      	adds	r3, #1
 8007e88:	069b      	lsls	r3, r3, #26
 8007e8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	0e9b      	lsrs	r3, r3, #26
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	f003 031f 	and.w	r3, r3, #31
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8007eac:	e010      	b.n	8007ed0 <HAL_ADCEx_InjectedConfigChannel+0x6f0>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	fa93 f3a3 	rbit	r3, r3
 8007eba:	61bb      	str	r3, [r7, #24]
  return result;
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	fab3 f383 	clz	r3, r3
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	f003 031f 	and.w	r3, r3, #31
 8007eca:	2101      	movs	r1, #1
 8007ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed0:	ea42 0103 	orr.w	r1, r2, r3
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10d      	bne.n	8007efc <HAL_ADCEx_InjectedConfigChannel+0x71c>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	0e9b      	lsrs	r3, r3, #26
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	f003 021f 	and.w	r2, r3, #31
 8007eec:	4613      	mov	r3, r2
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	4413      	add	r3, r2
 8007ef2:	3b1e      	subs	r3, #30
 8007ef4:	051b      	lsls	r3, r3, #20
 8007ef6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007efa:	e014      	b.n	8007f26 <HAL_ADCEx_InjectedConfigChannel+0x746>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	fa93 f3a3 	rbit	r3, r3
 8007f08:	613b      	str	r3, [r7, #16]
  return result;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	fab3 f383 	clz	r3, r3
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	3301      	adds	r3, #1
 8007f14:	f003 021f 	and.w	r2, r3, #31
 8007f18:	4613      	mov	r3, r2
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	4413      	add	r3, r2
 8007f1e:	3b1e      	subs	r3, #30
 8007f20:	051b      	lsls	r3, r3, #20
 8007f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007f26:	430b      	orrs	r3, r1
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	6892      	ldr	r2, [r2, #8]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	f7ff f9c6 	bl	80072be <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4b28      	ldr	r3, [pc, #160]	; (8007fd8 <HAL_ADCEx_InjectedConfigChannel+0x7f8>)
 8007f38:	4013      	ands	r3, r2
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d072      	beq.n	8008024 <HAL_ADCEx_InjectedConfigChannel+0x844>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007f3e:	4827      	ldr	r0, [pc, #156]	; (8007fdc <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8007f40:	f7ff f919 	bl	8007176 <LL_ADC_GetCommonPathInternalCh>
 8007f44:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a24      	ldr	r2, [pc, #144]	; (8007fe0 <HAL_ADCEx_InjectedConfigChannel+0x800>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d126      	bne.n	8007fa0 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007f52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d120      	bne.n	8007fa0 <HAL_ADCEx_InjectedConfigChannel+0x7c0>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a20      	ldr	r2, [pc, #128]	; (8007fe4 <HAL_ADCEx_InjectedConfigChannel+0x804>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d15d      	bne.n	8008024 <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f70:	4619      	mov	r1, r3
 8007f72:	481a      	ldr	r0, [pc, #104]	; (8007fdc <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8007f74:	f7ff f8ec 	bl	8007150 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007f78:	4b1b      	ldr	r3, [pc, #108]	; (8007fe8 <HAL_ADCEx_InjectedConfigChannel+0x808>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	099b      	lsrs	r3, r3, #6
 8007f7e:	4a1b      	ldr	r2, [pc, #108]	; (8007fec <HAL_ADCEx_InjectedConfigChannel+0x80c>)
 8007f80:	fba2 2303 	umull	r2, r3, r2, r3
 8007f84:	099a      	lsrs	r2, r3, #6
 8007f86:	4613      	mov	r3, r2
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8007f90:	e002      	b.n	8007f98 <HAL_ADCEx_InjectedConfigChannel+0x7b8>
        {
          wait_loop_index--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1f9      	bne.n	8007f92 <HAL_ADCEx_InjectedConfigChannel+0x7b2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007f9e:	e041      	b.n	8008024 <HAL_ADCEx_InjectedConfigChannel+0x844>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a12      	ldr	r2, [pc, #72]	; (8007ff0 <HAL_ADCEx_InjectedConfigChannel+0x810>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d124      	bne.n	8007ff4 <HAL_ADCEx_InjectedConfigChannel+0x814>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007faa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d11e      	bne.n	8007ff4 <HAL_ADCEx_InjectedConfigChannel+0x814>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a0a      	ldr	r2, [pc, #40]	; (8007fe4 <HAL_ADCEx_InjectedConfigChannel+0x804>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d131      	bne.n	8008024 <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4804      	ldr	r0, [pc, #16]	; (8007fdc <HAL_ADCEx_InjectedConfigChannel+0x7fc>)
 8007fcc:	f7ff f8c0 	bl	8007150 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007fd0:	e028      	b.n	8008024 <HAL_ADCEx_InjectedConfigChannel+0x844>
 8007fd2:	bf00      	nop
 8007fd4:	407f0000 	.word	0x407f0000
 8007fd8:	80080000 	.word	0x80080000
 8007fdc:	50040300 	.word	0x50040300
 8007fe0:	c7520000 	.word	0xc7520000
 8007fe4:	50040000 	.word	0x50040000
 8007fe8:	20000038 	.word	0x20000038
 8007fec:	053e2d63 	.word	0x053e2d63
 8007ff0:	cb840000 	.word	0xcb840000
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a0f      	ldr	r2, [pc, #60]	; (8008038 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d112      	bne.n	8008024 <HAL_ADCEx_InjectedConfigChannel+0x844>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007ffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10c      	bne.n	8008024 <HAL_ADCEx_InjectedConfigChannel+0x844>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a0b      	ldr	r2, [pc, #44]	; (800803c <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d107      	bne.n	8008024 <HAL_ADCEx_InjectedConfigChannel+0x844>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008018:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800801c:	4619      	mov	r1, r3
 800801e:	4808      	ldr	r0, [pc, #32]	; (8008040 <HAL_ADCEx_InjectedConfigChannel+0x860>)
 8008020:	f7ff f896 	bl	8007150 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800802c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8008030:	4618      	mov	r0, r3
 8008032:	37a0      	adds	r7, #160	; 0xa0
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	80000001 	.word	0x80000001
 800803c:	50040000 	.word	0x50040000
 8008040:	50040300 	.word	0x50040300

08008044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008054:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <__NVIC_SetPriorityGrouping+0x44>)
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008060:	4013      	ands	r3, r2
 8008062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800806c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008076:	4a04      	ldr	r2, [pc, #16]	; (8008088 <__NVIC_SetPriorityGrouping+0x44>)
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	60d3      	str	r3, [r2, #12]
}
 800807c:	bf00      	nop
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	e000ed00 	.word	0xe000ed00

0800808c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008090:	4b04      	ldr	r3, [pc, #16]	; (80080a4 <__NVIC_GetPriorityGrouping+0x18>)
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	0a1b      	lsrs	r3, r3, #8
 8008096:	f003 0307 	and.w	r3, r3, #7
}
 800809a:	4618      	mov	r0, r3
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	e000ed00 	.word	0xe000ed00

080080a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	db0b      	blt.n	80080d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080ba:	79fb      	ldrb	r3, [r7, #7]
 80080bc:	f003 021f 	and.w	r2, r3, #31
 80080c0:	4907      	ldr	r1, [pc, #28]	; (80080e0 <__NVIC_EnableIRQ+0x38>)
 80080c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c6:	095b      	lsrs	r3, r3, #5
 80080c8:	2001      	movs	r0, #1
 80080ca:	fa00 f202 	lsl.w	r2, r0, r2
 80080ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	e000e100 	.word	0xe000e100

080080e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	6039      	str	r1, [r7, #0]
 80080ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	db0a      	blt.n	800810e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	490c      	ldr	r1, [pc, #48]	; (8008130 <__NVIC_SetPriority+0x4c>)
 80080fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008102:	0112      	lsls	r2, r2, #4
 8008104:	b2d2      	uxtb	r2, r2
 8008106:	440b      	add	r3, r1
 8008108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800810c:	e00a      	b.n	8008124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	b2da      	uxtb	r2, r3
 8008112:	4908      	ldr	r1, [pc, #32]	; (8008134 <__NVIC_SetPriority+0x50>)
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	3b04      	subs	r3, #4
 800811c:	0112      	lsls	r2, r2, #4
 800811e:	b2d2      	uxtb	r2, r2
 8008120:	440b      	add	r3, r1
 8008122:	761a      	strb	r2, [r3, #24]
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	e000e100 	.word	0xe000e100
 8008134:	e000ed00 	.word	0xe000ed00

08008138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008138:	b480      	push	{r7}
 800813a:	b089      	sub	sp, #36	; 0x24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f1c3 0307 	rsb	r3, r3, #7
 8008152:	2b04      	cmp	r3, #4
 8008154:	bf28      	it	cs
 8008156:	2304      	movcs	r3, #4
 8008158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	3304      	adds	r3, #4
 800815e:	2b06      	cmp	r3, #6
 8008160:	d902      	bls.n	8008168 <NVIC_EncodePriority+0x30>
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	3b03      	subs	r3, #3
 8008166:	e000      	b.n	800816a <NVIC_EncodePriority+0x32>
 8008168:	2300      	movs	r3, #0
 800816a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800816c:	f04f 32ff 	mov.w	r2, #4294967295
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	fa02 f303 	lsl.w	r3, r2, r3
 8008176:	43da      	mvns	r2, r3
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	401a      	ands	r2, r3
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008180:	f04f 31ff 	mov.w	r1, #4294967295
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	fa01 f303 	lsl.w	r3, r1, r3
 800818a:	43d9      	mvns	r1, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008190:	4313      	orrs	r3, r2
         );
}
 8008192:	4618      	mov	r0, r3
 8008194:	3724      	adds	r7, #36	; 0x24
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
	...

080081a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081b0:	d301      	bcc.n	80081b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80081b2:	2301      	movs	r3, #1
 80081b4:	e00f      	b.n	80081d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80081b6:	4a0a      	ldr	r2, [pc, #40]	; (80081e0 <SysTick_Config+0x40>)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3b01      	subs	r3, #1
 80081bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80081be:	210f      	movs	r1, #15
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295
 80081c4:	f7ff ff8e 	bl	80080e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <SysTick_Config+0x40>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80081ce:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <SysTick_Config+0x40>)
 80081d0:	2207      	movs	r2, #7
 80081d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	e000e010 	.word	0xe000e010

080081e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7ff ff29 	bl	8008044 <__NVIC_SetPriorityGrouping>
}
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b086      	sub	sp, #24
 80081fe:	af00      	add	r7, sp, #0
 8008200:	4603      	mov	r3, r0
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008208:	2300      	movs	r3, #0
 800820a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800820c:	f7ff ff3e 	bl	800808c <__NVIC_GetPriorityGrouping>
 8008210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	68b9      	ldr	r1, [r7, #8]
 8008216:	6978      	ldr	r0, [r7, #20]
 8008218:	f7ff ff8e 	bl	8008138 <NVIC_EncodePriority>
 800821c:	4602      	mov	r2, r0
 800821e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff ff5d 	bl	80080e4 <__NVIC_SetPriority>
}
 800822a:	bf00      	nop
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	4603      	mov	r3, r0
 800823a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800823c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff ff31 	bl	80080a8 <__NVIC_EnableIRQ>
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff ffa2 	bl	80081a0 <SysTick_Config>
 800825c:	4603      	mov	r3, r0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e08d      	b.n	8008396 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	4b47      	ldr	r3, [pc, #284]	; (80083a0 <HAL_DMA_Init+0x138>)
 8008282:	429a      	cmp	r2, r3
 8008284:	d80f      	bhi.n	80082a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	4b45      	ldr	r3, [pc, #276]	; (80083a4 <HAL_DMA_Init+0x13c>)
 800828e:	4413      	add	r3, r2
 8008290:	4a45      	ldr	r2, [pc, #276]	; (80083a8 <HAL_DMA_Init+0x140>)
 8008292:	fba2 2303 	umull	r2, r3, r2, r3
 8008296:	091b      	lsrs	r3, r3, #4
 8008298:	009a      	lsls	r2, r3, #2
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a42      	ldr	r2, [pc, #264]	; (80083ac <HAL_DMA_Init+0x144>)
 80082a2:	641a      	str	r2, [r3, #64]	; 0x40
 80082a4:	e00e      	b.n	80082c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	4b40      	ldr	r3, [pc, #256]	; (80083b0 <HAL_DMA_Init+0x148>)
 80082ae:	4413      	add	r3, r2
 80082b0:	4a3d      	ldr	r2, [pc, #244]	; (80083a8 <HAL_DMA_Init+0x140>)
 80082b2:	fba2 2303 	umull	r2, r3, r2, r3
 80082b6:	091b      	lsrs	r3, r3, #4
 80082b8:	009a      	lsls	r2, r3, #2
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a3c      	ldr	r2, [pc, #240]	; (80083b4 <HAL_DMA_Init+0x14c>)
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80082da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80082e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f966 	bl	80085e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008324:	d102      	bne.n	800832c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008334:	b2d2      	uxtb	r2, r2
 8008336:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008340:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d010      	beq.n	800836c <HAL_DMA_Init+0x104>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2b04      	cmp	r3, #4
 8008350:	d80c      	bhi.n	800836c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f986 	bl	8008664 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	e008      	b.n	800837e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	40020407 	.word	0x40020407
 80083a4:	bffdfff8 	.word	0xbffdfff8
 80083a8:	cccccccd 	.word	0xcccccccd
 80083ac:	40020000 	.word	0x40020000
 80083b0:	bffdfbf8 	.word	0xbffdfbf8
 80083b4:	40020400 	.word	0x40020400

080083b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d101      	bne.n	80083d8 <HAL_DMA_Start_IT+0x20>
 80083d4:	2302      	movs	r3, #2
 80083d6:	e066      	b.n	80084a6 <HAL_DMA_Start_IT+0xee>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d155      	bne.n	8008498 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0201 	bic.w	r2, r2, #1
 8008408:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	68b9      	ldr	r1, [r7, #8]
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 f8ab 	bl	800856c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841a:	2b00      	cmp	r3, #0
 800841c:	d008      	beq.n	8008430 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f042 020e 	orr.w	r2, r2, #14
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	e00f      	b.n	8008450 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0204 	bic.w	r2, r2, #4
 800843e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 020a 	orr.w	r2, r2, #10
 800844e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d007      	beq.n	800846e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800846c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008472:	2b00      	cmp	r3, #0
 8008474:	d007      	beq.n	8008486 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008484:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f042 0201 	orr.w	r2, r2, #1
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	e005      	b.n	80084a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80084a0:	2302      	movs	r3, #2
 80084a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3718      	adds	r7, #24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d005      	beq.n	80084d2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2204      	movs	r2, #4
 80084ca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	73fb      	strb	r3, [r7, #15]
 80084d0:	e047      	b.n	8008562 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 020e 	bic.w	r2, r2, #14
 80084e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f022 0201 	bic.w	r2, r2, #1
 80084f0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008500:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008506:	f003 021c 	and.w	r2, r3, #28
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	2101      	movs	r1, #1
 8008510:	fa01 f202 	lsl.w	r2, r1, r2
 8008514:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800851e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00c      	beq.n	8008542 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008536:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008540:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
    }
  }
  return status;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008582:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008588:	2b00      	cmp	r3, #0
 800858a:	d004      	beq.n	8008596 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008594:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800859a:	f003 021c 	and.w	r2, r3, #28
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	2101      	movs	r1, #1
 80085a4:	fa01 f202 	lsl.w	r2, r1, r2
 80085a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	2b10      	cmp	r3, #16
 80085b8:	d108      	bne.n	80085cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80085ca:	e007      	b.n	80085dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	60da      	str	r2, [r3, #12]
}
 80085dc:	bf00      	nop
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	461a      	mov	r2, r3
 80085f6:	4b17      	ldr	r3, [pc, #92]	; (8008654 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d80a      	bhi.n	8008612 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008600:	089b      	lsrs	r3, r3, #2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008608:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6493      	str	r3, [r2, #72]	; 0x48
 8008610:	e007      	b.n	8008622 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008616:	089b      	lsrs	r3, r3, #2
 8008618:	009a      	lsls	r2, r3, #2
 800861a:	4b0f      	ldr	r3, [pc, #60]	; (8008658 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800861c:	4413      	add	r3, r2
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	3b08      	subs	r3, #8
 800862a:	4a0c      	ldr	r2, [pc, #48]	; (800865c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	091b      	lsrs	r3, r3, #4
 8008632:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a0a      	ldr	r2, [pc, #40]	; (8008660 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008638:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f003 031f 	and.w	r3, r3, #31
 8008640:	2201      	movs	r2, #1
 8008642:	409a      	lsls	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008648:	bf00      	nop
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	40020407 	.word	0x40020407
 8008658:	4002081c 	.word	0x4002081c
 800865c:	cccccccd 	.word	0xcccccccd
 8008660:	40020880 	.word	0x40020880

08008664 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	b2db      	uxtb	r3, r3
 8008672:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008678:	4413      	add	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	461a      	mov	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a08      	ldr	r2, [pc, #32]	; (80086a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008686:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3b01      	subs	r3, #1
 800868c:	f003 0303 	and.w	r3, r3, #3
 8008690:	2201      	movs	r2, #1
 8008692:	409a      	lsls	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008698:	bf00      	nop
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	1000823f 	.word	0x1000823f
 80086a8:	40020940 	.word	0x40020940

080086ac <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	460b      	mov	r3, r1
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80086be:	7afb      	ldrb	r3, [r7, #11]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d103      	bne.n	80086cc <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	605a      	str	r2, [r3, #4]
      break;
 80086ca:	e002      	b.n	80086d2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	75fb      	strb	r3, [r7, #23]
      break;
 80086d0:	bf00      	nop
  }

  return status;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e003      	b.n	80086fc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80086fa:	2300      	movs	r3, #0
  }
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	0c1b      	lsrs	r3, r3, #16
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	2201      	movs	r2, #1
 8008726:	fa02 f303 	lsl.w	r3, r2, r3
 800872a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	4b0c      	ldr	r3, [pc, #48]	; (8008764 <HAL_EXTI_IRQHandler+0x5c>)
 8008732:	4413      	add	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	4013      	ands	r3, r2
 800873e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d009      	beq.n	800875a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4798      	blx	r3
    }
  }
}
 800875a:	bf00      	nop
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	40010414 	.word	0x40010414

08008768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008772:	2300      	movs	r3, #0
 8008774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008776:	e166      	b.n	8008a46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	2101      	movs	r1, #1
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	fa01 f303 	lsl.w	r3, r1, r3
 8008784:	4013      	ands	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	f000 8158 	beq.w	8008a40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d003      	beq.n	80087a0 <HAL_GPIO_Init+0x38>
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	2b12      	cmp	r3, #18
 800879e:	d123      	bne.n	80087e8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	08da      	lsrs	r2, r3, #3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3208      	adds	r2, #8
 80087a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	220f      	movs	r2, #15
 80087b8:	fa02 f303 	lsl.w	r3, r2, r3
 80087bc:	43db      	mvns	r3, r3
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	4013      	ands	r3, r2
 80087c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	691a      	ldr	r2, [r3, #16]
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f003 0307 	and.w	r3, r3, #7
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	fa02 f303 	lsl.w	r3, r2, r3
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	08da      	lsrs	r2, r3, #3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3208      	adds	r2, #8
 80087e2:	6939      	ldr	r1, [r7, #16]
 80087e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	2203      	movs	r2, #3
 80087f4:	fa02 f303 	lsl.w	r3, r2, r3
 80087f8:	43db      	mvns	r3, r3
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	4013      	ands	r3, r2
 80087fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f003 0203 	and.w	r2, r3, #3
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	fa02 f303 	lsl.w	r3, r2, r3
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	4313      	orrs	r3, r2
 8008814:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d00b      	beq.n	800883c <HAL_GPIO_Init+0xd4>
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d007      	beq.n	800883c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008830:	2b11      	cmp	r3, #17
 8008832:	d003      	beq.n	800883c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2b12      	cmp	r3, #18
 800883a:	d130      	bne.n	800889e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	2203      	movs	r2, #3
 8008848:	fa02 f303 	lsl.w	r3, r2, r3
 800884c:	43db      	mvns	r3, r3
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	4013      	ands	r3, r2
 8008852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	fa02 f303 	lsl.w	r3, r2, r3
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	4313      	orrs	r3, r2
 8008864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008872:	2201      	movs	r2, #1
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	fa02 f303 	lsl.w	r3, r2, r3
 800887a:	43db      	mvns	r3, r3
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4013      	ands	r3, r2
 8008880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	091b      	lsrs	r3, r3, #4
 8008888:	f003 0201 	and.w	r2, r3, #1
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	fa02 f303 	lsl.w	r3, r2, r3
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	2203      	movs	r2, #3
 80088aa:	fa02 f303 	lsl.w	r3, r2, r3
 80088ae:	43db      	mvns	r3, r3
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	4013      	ands	r3, r2
 80088b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	fa02 f303 	lsl.w	r3, r2, r3
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f000 80b2 	beq.w	8008a40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088dc:	4b61      	ldr	r3, [pc, #388]	; (8008a64 <HAL_GPIO_Init+0x2fc>)
 80088de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088e0:	4a60      	ldr	r2, [pc, #384]	; (8008a64 <HAL_GPIO_Init+0x2fc>)
 80088e2:	f043 0301 	orr.w	r3, r3, #1
 80088e6:	6613      	str	r3, [r2, #96]	; 0x60
 80088e8:	4b5e      	ldr	r3, [pc, #376]	; (8008a64 <HAL_GPIO_Init+0x2fc>)
 80088ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	60bb      	str	r3, [r7, #8]
 80088f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80088f4:	4a5c      	ldr	r2, [pc, #368]	; (8008a68 <HAL_GPIO_Init+0x300>)
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	089b      	lsrs	r3, r3, #2
 80088fa:	3302      	adds	r3, #2
 80088fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008900:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	220f      	movs	r2, #15
 800890c:	fa02 f303 	lsl.w	r3, r2, r3
 8008910:	43db      	mvns	r3, r3
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	4013      	ands	r3, r2
 8008916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800891e:	d02b      	beq.n	8008978 <HAL_GPIO_Init+0x210>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a52      	ldr	r2, [pc, #328]	; (8008a6c <HAL_GPIO_Init+0x304>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d025      	beq.n	8008974 <HAL_GPIO_Init+0x20c>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a51      	ldr	r2, [pc, #324]	; (8008a70 <HAL_GPIO_Init+0x308>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d01f      	beq.n	8008970 <HAL_GPIO_Init+0x208>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a50      	ldr	r2, [pc, #320]	; (8008a74 <HAL_GPIO_Init+0x30c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d019      	beq.n	800896c <HAL_GPIO_Init+0x204>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a4f      	ldr	r2, [pc, #316]	; (8008a78 <HAL_GPIO_Init+0x310>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d013      	beq.n	8008968 <HAL_GPIO_Init+0x200>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a4e      	ldr	r2, [pc, #312]	; (8008a7c <HAL_GPIO_Init+0x314>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00d      	beq.n	8008964 <HAL_GPIO_Init+0x1fc>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a4d      	ldr	r2, [pc, #308]	; (8008a80 <HAL_GPIO_Init+0x318>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d007      	beq.n	8008960 <HAL_GPIO_Init+0x1f8>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a4c      	ldr	r2, [pc, #304]	; (8008a84 <HAL_GPIO_Init+0x31c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d101      	bne.n	800895c <HAL_GPIO_Init+0x1f4>
 8008958:	2307      	movs	r3, #7
 800895a:	e00e      	b.n	800897a <HAL_GPIO_Init+0x212>
 800895c:	2308      	movs	r3, #8
 800895e:	e00c      	b.n	800897a <HAL_GPIO_Init+0x212>
 8008960:	2306      	movs	r3, #6
 8008962:	e00a      	b.n	800897a <HAL_GPIO_Init+0x212>
 8008964:	2305      	movs	r3, #5
 8008966:	e008      	b.n	800897a <HAL_GPIO_Init+0x212>
 8008968:	2304      	movs	r3, #4
 800896a:	e006      	b.n	800897a <HAL_GPIO_Init+0x212>
 800896c:	2303      	movs	r3, #3
 800896e:	e004      	b.n	800897a <HAL_GPIO_Init+0x212>
 8008970:	2302      	movs	r3, #2
 8008972:	e002      	b.n	800897a <HAL_GPIO_Init+0x212>
 8008974:	2301      	movs	r3, #1
 8008976:	e000      	b.n	800897a <HAL_GPIO_Init+0x212>
 8008978:	2300      	movs	r3, #0
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	f002 0203 	and.w	r2, r2, #3
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	4093      	lsls	r3, r2
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	4313      	orrs	r3, r2
 8008988:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800898a:	4937      	ldr	r1, [pc, #220]	; (8008a68 <HAL_GPIO_Init+0x300>)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	089b      	lsrs	r3, r3, #2
 8008990:	3302      	adds	r3, #2
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008998:	4b3b      	ldr	r3, [pc, #236]	; (8008a88 <HAL_GPIO_Init+0x320>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	43db      	mvns	r3, r3
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	4013      	ands	r3, r2
 80089a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80089bc:	4a32      	ldr	r2, [pc, #200]	; (8008a88 <HAL_GPIO_Init+0x320>)
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80089c2:	4b31      	ldr	r3, [pc, #196]	; (8008a88 <HAL_GPIO_Init+0x320>)
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	43db      	mvns	r3, r3
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4013      	ands	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80089e6:	4a28      	ldr	r2, [pc, #160]	; (8008a88 <HAL_GPIO_Init+0x320>)
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80089ec:	4b26      	ldr	r3, [pc, #152]	; (8008a88 <HAL_GPIO_Init+0x320>)
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	43db      	mvns	r3, r3
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	4013      	ands	r3, r2
 80089fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008a10:	4a1d      	ldr	r2, [pc, #116]	; (8008a88 <HAL_GPIO_Init+0x320>)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008a16:	4b1c      	ldr	r3, [pc, #112]	; (8008a88 <HAL_GPIO_Init+0x320>)
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	43db      	mvns	r3, r3
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	4013      	ands	r3, r2
 8008a24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008a3a:	4a13      	ldr	r2, [pc, #76]	; (8008a88 <HAL_GPIO_Init+0x320>)
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	3301      	adds	r3, #1
 8008a44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f47f ae91 	bne.w	8008778 <HAL_GPIO_Init+0x10>
  }
}
 8008a56:	bf00      	nop
 8008a58:	bf00      	nop
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	40021000 	.word	0x40021000
 8008a68:	40010000 	.word	0x40010000
 8008a6c:	48000400 	.word	0x48000400
 8008a70:	48000800 	.word	0x48000800
 8008a74:	48000c00 	.word	0x48000c00
 8008a78:	48001000 	.word	0x48001000
 8008a7c:	48001400 	.word	0x48001400
 8008a80:	48001800 	.word	0x48001800
 8008a84:	48001c00 	.word	0x48001c00
 8008a88:	40010400 	.word	0x40010400

08008a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691a      	ldr	r2, [r3, #16]
 8008a9c:	887b      	ldrh	r3, [r7, #2]
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	73fb      	strb	r3, [r7, #15]
 8008aa8:	e001      	b.n	8008aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	807b      	strh	r3, [r7, #2]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008acc:	787b      	ldrb	r3, [r7, #1]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ad2:	887a      	ldrh	r2, [r7, #2]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008ad8:	e002      	b.n	8008ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008ada:	887a      	ldrh	r2, [r7, #2]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	695a      	ldr	r2, [r3, #20]
 8008afc:	887b      	ldrh	r3, [r7, #2]
 8008afe:	4013      	ands	r3, r2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008b04:	887a      	ldrh	r2, [r7, #2]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8008b0a:	e002      	b.n	8008b12 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008b0c:	887a      	ldrh	r2, [r7, #2]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	619a      	str	r2, [r3, #24]
}
 8008b12:	bf00      	nop
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
	...

08008b20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	4603      	mov	r3, r0
 8008b28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008b2a:	4b08      	ldr	r3, [pc, #32]	; (8008b4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b2c:	695a      	ldr	r2, [r3, #20]
 8008b2e:	88fb      	ldrh	r3, [r7, #6]
 8008b30:	4013      	ands	r3, r2
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d006      	beq.n	8008b44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b36:	4a05      	ldr	r2, [pc, #20]	; (8008b4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b38:	88fb      	ldrh	r3, [r7, #6]
 8008b3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008b3c:	88fb      	ldrh	r3, [r7, #6]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fa fc3a 	bl	80033b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	40010400 	.word	0x40010400

08008b50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d005      	beq.n	8008b7c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	68f9      	ldr	r1, [r7, #12]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	4798      	blx	r3
  }
}
 8008b7c:	bf00      	nop
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	0a1b      	lsrs	r3, r3, #8
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d010      	beq.n	8008bca <HAL_I2C_ER_IRQHandler+0x46>
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	09db      	lsrs	r3, r3, #7
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb8:	f043 0201 	orr.w	r2, r3, #1
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bc8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	0a9b      	lsrs	r3, r3, #10
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d010      	beq.n	8008bf8 <HAL_I2C_ER_IRQHandler+0x74>
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	09db      	lsrs	r3, r3, #7
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00a      	beq.n	8008bf8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be6:	f043 0208 	orr.w	r2, r3, #8
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008bf6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	0a5b      	lsrs	r3, r3, #9
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d010      	beq.n	8008c26 <HAL_I2C_ER_IRQHandler+0xa2>
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	09db      	lsrs	r3, r3, #7
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c14:	f043 0202 	orr.w	r2, r3, #2
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c24:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f003 030b 	and.w	r3, r3, #11
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8008c36:	68f9      	ldr	r1, [r7, #12]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 faf9 	bl	8009230 <I2C_ITError>
  }
}
 8008c3e:	bf00      	nop
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b086      	sub	sp, #24
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c56:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d101      	bne.n	8008c6a <I2C_Slave_ISR_IT+0x24>
 8008c66:	2302      	movs	r3, #2
 8008c68:	e0ec      	b.n	8008e44 <I2C_Slave_ISR_IT+0x1fe>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	095b      	lsrs	r3, r3, #5
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d009      	beq.n	8008c92 <I2C_Slave_ISR_IT+0x4c>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	095b      	lsrs	r3, r3, #5
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008c8a:	6939      	ldr	r1, [r7, #16]
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 f99f 	bl	8008fd0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	091b      	lsrs	r3, r3, #4
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d04d      	beq.n	8008d3a <I2C_Slave_ISR_IT+0xf4>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	091b      	lsrs	r3, r3, #4
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d047      	beq.n	8008d3a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d128      	bne.n	8008d06 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b28      	cmp	r3, #40	; 0x28
 8008cbe:	d108      	bne.n	8008cd2 <I2C_Slave_ISR_IT+0x8c>
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cc6:	d104      	bne.n	8008cd2 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008cc8:	6939      	ldr	r1, [r7, #16]
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 fa5a 	bl	8009184 <I2C_ITListenCplt>
 8008cd0:	e032      	b.n	8008d38 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b29      	cmp	r3, #41	; 0x29
 8008cdc:	d10e      	bne.n	8008cfc <I2C_Slave_ISR_IT+0xb6>
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008ce4:	d00a      	beq.n	8008cfc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2210      	movs	r2, #16
 8008cec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 fb60 	bl	80093b4 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 f92b 	bl	8008f50 <I2C_ITSlaveSeqCplt>
 8008cfa:	e01d      	b.n	8008d38 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2210      	movs	r2, #16
 8008d02:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008d04:	e096      	b.n	8008e34 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2210      	movs	r2, #16
 8008d0c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d12:	f043 0204 	orr.w	r2, r3, #4
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d004      	beq.n	8008d2a <I2C_Slave_ISR_IT+0xe4>
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d26:	f040 8085 	bne.w	8008e34 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d2e:	4619      	mov	r1, r3
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 fa7d 	bl	8009230 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008d36:	e07d      	b.n	8008e34 <I2C_Slave_ISR_IT+0x1ee>
 8008d38:	e07c      	b.n	8008e34 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	089b      	lsrs	r3, r3, #2
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d030      	beq.n	8008da8 <I2C_Slave_ISR_IT+0x162>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	089b      	lsrs	r3, r3, #2
 8008d4a:	f003 0301 	and.w	r3, r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d02a      	beq.n	8008da8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d018      	beq.n	8008d8e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	b2d2      	uxtb	r2, r2
 8008d68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	3b01      	subs	r3, #1
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d14f      	bne.n	8008e38 <I2C_Slave_ISR_IT+0x1f2>
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d9e:	d04b      	beq.n	8008e38 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 f8d5 	bl	8008f50 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008da6:	e047      	b.n	8008e38 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	08db      	lsrs	r3, r3, #3
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00a      	beq.n	8008dca <I2C_Slave_ISR_IT+0x184>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	08db      	lsrs	r3, r3, #3
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d004      	beq.n	8008dca <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008dc0:	6939      	ldr	r1, [r7, #16]
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 f842 	bl	8008e4c <I2C_ITAddrCplt>
 8008dc8:	e037      	b.n	8008e3a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	085b      	lsrs	r3, r3, #1
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d031      	beq.n	8008e3a <I2C_Slave_ISR_IT+0x1f4>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	085b      	lsrs	r3, r3, #1
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d02b      	beq.n	8008e3a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d018      	beq.n	8008e1e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	781a      	ldrb	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e14:	3b01      	subs	r3, #1
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	851a      	strh	r2, [r3, #40]	; 0x28
 8008e1c:	e00d      	b.n	8008e3a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e24:	d002      	beq.n	8008e2c <I2C_Slave_ISR_IT+0x1e6>
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d106      	bne.n	8008e3a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 f88f 	bl	8008f50 <I2C_ITSlaveSeqCplt>
 8008e32:	e002      	b.n	8008e3a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008e34:	bf00      	nop
 8008e36:	e000      	b.n	8008e3a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008e38:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008e62:	2b28      	cmp	r3, #40	; 0x28
 8008e64:	d168      	bne.n	8008f38 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	0c1b      	lsrs	r3, r3, #16
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	0c1b      	lsrs	r3, r3, #16
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008e84:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e92:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008ea0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d137      	bne.n	8008f1a <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8008eaa:	897b      	ldrh	r3, [r7, #10]
 8008eac:	09db      	lsrs	r3, r3, #7
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	89bb      	ldrh	r3, [r7, #12]
 8008eb2:	4053      	eors	r3, r2
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	f003 0306 	and.w	r3, r3, #6
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d11c      	bne.n	8008ef8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008ebe:	897b      	ldrh	r3, [r7, #10]
 8008ec0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d139      	bne.n	8008f48 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2208      	movs	r2, #8
 8008ee0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eee:	89ba      	ldrh	r2, [r7, #12]
 8008ef0:	7bf9      	ldrb	r1, [r7, #15]
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008ef6:	e027      	b.n	8008f48 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8008ef8:	893b      	ldrh	r3, [r7, #8]
 8008efa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008efc:	2104      	movs	r1, #4
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 faa2 	bl	8009448 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f10:	89ba      	ldrh	r2, [r7, #12]
 8008f12:	7bf9      	ldrb	r1, [r7, #15]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	4798      	blx	r3
}
 8008f18:	e016      	b.n	8008f48 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008f1a:	2104      	movs	r1, #4
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fa93 	bl	8009448 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f2e:	89ba      	ldrh	r2, [r7, #12]
 8008f30:	7bf9      	ldrb	r1, [r7, #15]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	4798      	blx	r3
}
 8008f36:	e007      	b.n	8008f48 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2208      	movs	r2, #8
 8008f3e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008f48:	bf00      	nop
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2b29      	cmp	r3, #41	; 0x29
 8008f6a:	d113      	bne.n	8008f94 <I2C_ITSlaveSeqCplt+0x44>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2228      	movs	r2, #40	; 0x28
 8008f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2221      	movs	r2, #33	; 0x21
 8008f78:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008f7a:	2101      	movs	r1, #1
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fa63 	bl	8009448 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8008f92:	e018      	b.n	8008fc6 <I2C_ITSlaveSeqCplt+0x76>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f9e:	d112      	bne.n	8008fc6 <I2C_ITSlaveSeqCplt+0x76>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2228      	movs	r2, #40	; 0x28
 8008fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2222      	movs	r2, #34	; 0x22
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008fae:	2102      	movs	r1, #2
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fa49 	bl	8009448 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	4798      	blx	r3
}
 8008fc6:	bf00      	nop
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2220      	movs	r2, #32
 8008fec:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008fee:	2107      	movs	r1, #7
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fa29 	bl	8009448 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009004:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6859      	ldr	r1, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	4b5a      	ldr	r3, [pc, #360]	; (800917c <I2C_ITSlaveCplt+0x1ac>)
 8009012:	400b      	ands	r3, r1
 8009014:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f9cc 	bl	80093b4 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	0b9b      	lsrs	r3, r3, #14
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00b      	beq.n	8009040 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902c:	2b00      	cmp	r3, #0
 800902e:	d018      	beq.n	8009062 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	b29a      	uxth	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800903e:	e010      	b.n	8009062 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	0bdb      	lsrs	r3, r3, #15
 8009044:	f003 0301 	and.w	r3, r3, #1
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00a      	beq.n	8009062 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009050:	2b00      	cmp	r3, #0
 8009052:	d006      	beq.n	8009062 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	b29a      	uxth	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	089b      	lsrs	r3, r3, #2
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d020      	beq.n	80090b0 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f023 0304 	bic.w	r3, r3, #4
 8009074:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	b2d2      	uxtb	r2, r2
 8009082:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00c      	beq.n	80090b0 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800909a:	3b01      	subs	r3, #1
 800909c:	b29a      	uxth	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	3b01      	subs	r3, #1
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d005      	beq.n	80090c6 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090be:	f043 0204 	orr.w	r2, r3, #4
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d010      	beq.n	8009104 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f8a1 	bl	8009230 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b28      	cmp	r3, #40	; 0x28
 80090f8:	d13b      	bne.n	8009172 <I2C_ITSlaveCplt+0x1a2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80090fa:	68f9      	ldr	r1, [r7, #12]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f841 	bl	8009184 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009102:	e036      	b.n	8009172 <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009108:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800910c:	d012      	beq.n	8009134 <I2C_ITSlaveCplt+0x164>
    I2C_ITSlaveSeqCplt(hi2c);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff ff1e 	bl	8008f50 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a1a      	ldr	r2, [pc, #104]	; (8009180 <I2C_ITSlaveCplt+0x1b0>)
 8009118:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2220      	movs	r2, #32
 800911e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	4798      	blx	r3
}
 8009132:	e01e      	b.n	8009172 <I2C_ITSlaveCplt+0x1a2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800913a:	b2db      	uxtb	r3, r3
 800913c:	2b22      	cmp	r3, #34	; 0x22
 800913e:	d10c      	bne.n	800915a <I2C_ITSlaveCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2220      	movs	r2, #32
 8009144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	4798      	blx	r3
}
 8009158:	e00b      	b.n	8009172 <I2C_ITSlaveCplt+0x1a2>
    hi2c->State = HAL_I2C_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2220      	movs	r2, #32
 800915e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	4798      	blx	r3
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	fe00e800 	.word	0xfe00e800
 8009180:	ffff0000 	.word	0xffff0000

08009184 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a26      	ldr	r2, [pc, #152]	; (800922c <I2C_ITListenCplt+0xa8>)
 8009192:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	089b      	lsrs	r3, r3, #2
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d022      	beq.n	8009202 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	b2d2      	uxtb	r2, r2
 80091c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d012      	beq.n	8009202 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	3b01      	subs	r3, #1
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fa:	f043 0204 	orr.w	r2, r3, #4
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009202:	2107      	movs	r1, #7
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f91f 	bl	8009448 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2210      	movs	r2, #16
 8009210:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009222:	bf00      	nop
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	ffff0000 	.word	0xffff0000

08009230 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009240:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a56      	ldr	r2, [pc, #344]	; (80093a8 <I2C_ITError+0x178>)
 800924e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	431a      	orrs	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	2b28      	cmp	r3, #40	; 0x28
 8009266:	d005      	beq.n	8009274 <I2C_ITError+0x44>
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	2b29      	cmp	r3, #41	; 0x29
 800926c:	d002      	beq.n	8009274 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	2b2a      	cmp	r3, #42	; 0x2a
 8009272:	d10e      	bne.n	8009292 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009274:	2103      	movs	r1, #3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f8e6 	bl	8009448 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2228      	movs	r2, #40	; 0x28
 8009280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a47      	ldr	r2, [pc, #284]	; (80093ac <I2C_ITError+0x17c>)
 800928e:	635a      	str	r2, [r3, #52]	; 0x34
 8009290:	e013      	b.n	80092ba <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009292:	2107      	movs	r1, #7
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f8d7 	bl	8009448 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b60      	cmp	r3, #96	; 0x60
 80092a4:	d003      	beq.n	80092ae <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092c8:	d123      	bne.n	8009312 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d05e      	beq.n	80093a0 <I2C_ITError+0x170>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e6:	4a32      	ldr	r2, [pc, #200]	; (80093b0 <I2C_ITError+0x180>)
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7ff f8d9 	bl	80084ae <HAL_DMA_Abort_IT>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d04e      	beq.n	80093a0 <I2C_ITError+0x170>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009310:	e046      	b.n	80093a0 <I2C_ITError+0x170>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800931c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009320:	d123      	bne.n	800936a <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009330:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009336:	2b00      	cmp	r3, #0
 8009338:	d032      	beq.n	80093a0 <I2C_ITError+0x170>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933e:	4a1c      	ldr	r2, [pc, #112]	; (80093b0 <I2C_ITError+0x180>)
 8009340:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff f8ad 	bl	80084ae <HAL_DMA_Abort_IT>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d022      	beq.n	80093a0 <I2C_ITError+0x170>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
}
 8009368:	e01a      	b.n	80093a0 <I2C_ITError+0x170>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b60      	cmp	r3, #96	; 0x60
 8009374:	d10c      	bne.n	8009390 <I2C_ITError+0x160>
    hi2c->State = HAL_I2C_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2220      	movs	r2, #32
 800937a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->AbortCpltCallback(hi2c);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
}
 800938e:	e007      	b.n	80093a0 <I2C_ITError+0x170>
    __HAL_UNLOCK(hi2c);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	4798      	blx	r3
}
 80093a0:	bf00      	nop
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	ffff0000 	.word	0xffff0000
 80093ac:	08008c47 	.word	0x08008c47
 80093b0:	080093fd 	.word	0x080093fd

080093b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	f003 0302 	and.w	r3, r3, #2
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d103      	bne.n	80093d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2200      	movs	r2, #0
 80093d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d007      	beq.n	80093f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	699a      	ldr	r2, [r3, #24]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f042 0201 	orr.w	r2, r2, #1
 80093ee:	619a      	str	r2, [r3, #24]
  }
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009408:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940e:	2200      	movs	r2, #0
 8009410:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009416:	2200      	movs	r2, #0
 8009418:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b60      	cmp	r3, #96	; 0x60
 8009424:	d108      	bne.n	8009438 <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2220      	movs	r2, #32
 800942a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009436:	e003      	b.n	8009440 <I2C_DMAAbort+0x44>
    hi2c->ErrorCallback(hi2c);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	4798      	blx	r3
}
 8009440:	bf00      	nop
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009454:	2300      	movs	r3, #0
 8009456:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009458:	887b      	ldrh	r3, [r7, #2]
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00f      	beq.n	8009482 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009468:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009470:	b2db      	uxtb	r3, r3
 8009472:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009476:	2b28      	cmp	r3, #40	; 0x28
 8009478:	d003      	beq.n	8009482 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009480:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009482:	887b      	ldrh	r3, [r7, #2]
 8009484:	f003 0302 	and.w	r3, r3, #2
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00f      	beq.n	80094ac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009492:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800949a:	b2db      	uxtb	r3, r3
 800949c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80094a0:	2b28      	cmp	r3, #40	; 0x28
 80094a2:	d003      	beq.n	80094ac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80094aa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80094ac:	887b      	ldrh	r3, [r7, #2]
 80094ae:	f003 0304 	and.w	r3, r3, #4
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80094bc:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80094be:	887b      	ldrh	r3, [r7, #2]
 80094c0:	f003 0311 	and.w	r3, r3, #17
 80094c4:	2b11      	cmp	r3, #17
 80094c6:	d103      	bne.n	80094d0 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80094ce:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80094d0:	887b      	ldrh	r3, [r7, #2]
 80094d2:	f003 0312 	and.w	r3, r3, #18
 80094d6:	2b12      	cmp	r3, #18
 80094d8:	d103      	bne.n	80094e2 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f043 0320 	orr.w	r3, r3, #32
 80094e0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80094e2:	887b      	ldrh	r3, [r7, #2]
 80094e4:	f003 0312 	and.w	r3, r3, #18
 80094e8:	2b12      	cmp	r3, #18
 80094ea:	d103      	bne.n	80094f4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6819      	ldr	r1, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	43da      	mvns	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	400a      	ands	r2, r1
 8009504:	601a      	str	r2, [r3, #0]
}
 8009506:	bf00      	nop
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009512:	b590      	push	{r4, r7, lr}
 8009514:	b08d      	sub	sp, #52	; 0x34
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4618      	mov	r0, r3
 800952a:	f009 f8f6 	bl	801271a <USB_GetMode>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	f040 838f 	bne.w	8009c54 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4618      	mov	r0, r3
 800953c:	f009 f85a 	bl	80125f4 <USB_ReadInterrupts>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 8385 	beq.w	8009c52 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4618      	mov	r0, r3
 800954e:	f009 f851 	bl	80125f4 <USB_ReadInterrupts>
 8009552:	4603      	mov	r3, r0
 8009554:	f003 0302 	and.w	r3, r3, #2
 8009558:	2b02      	cmp	r3, #2
 800955a:	d107      	bne.n	800956c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	695a      	ldr	r2, [r3, #20]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f002 0202 	and.w	r2, r2, #2
 800956a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4618      	mov	r0, r3
 8009572:	f009 f83f 	bl	80125f4 <USB_ReadInterrupts>
 8009576:	4603      	mov	r3, r0
 8009578:	f003 0310 	and.w	r3, r3, #16
 800957c:	2b10      	cmp	r3, #16
 800957e:	d161      	bne.n	8009644 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	699a      	ldr	r2, [r3, #24]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 0210 	bic.w	r2, r2, #16
 800958e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	6a1b      	ldr	r3, [r3, #32]
 8009594:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	f003 020f 	and.w	r2, r3, #15
 800959c:	4613      	mov	r3, r2
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	1a9b      	subs	r3, r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	4413      	add	r3, r2
 80095ac:	3304      	adds	r3, #4
 80095ae:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	0c5b      	lsrs	r3, r3, #17
 80095b4:	f003 030f 	and.w	r3, r3, #15
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d124      	bne.n	8009606 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80095c2:	4013      	ands	r3, r2
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d035      	beq.n	8009634 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	091b      	lsrs	r3, r3, #4
 80095d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80095d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	461a      	mov	r2, r3
 80095da:	6a38      	ldr	r0, [r7, #32]
 80095dc:	f008 fee7 	bl	80123ae <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	091b      	lsrs	r3, r3, #4
 80095e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095ec:	441a      	add	r2, r3
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	699a      	ldr	r2, [r3, #24]
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	091b      	lsrs	r3, r3, #4
 80095fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095fe:	441a      	add	r2, r3
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	619a      	str	r2, [r3, #24]
 8009604:	e016      	b.n	8009634 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	0c5b      	lsrs	r3, r3, #17
 800960a:	f003 030f 	and.w	r3, r3, #15
 800960e:	2b06      	cmp	r3, #6
 8009610:	d110      	bne.n	8009634 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009618:	2208      	movs	r2, #8
 800961a:	4619      	mov	r1, r3
 800961c:	6a38      	ldr	r0, [r7, #32]
 800961e:	f008 fec6 	bl	80123ae <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	699a      	ldr	r2, [r3, #24]
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	091b      	lsrs	r3, r3, #4
 800962a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800962e:	441a      	add	r2, r3
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	699a      	ldr	r2, [r3, #24]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 0210 	orr.w	r2, r2, #16
 8009642:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4618      	mov	r0, r3
 800964a:	f008 ffd3 	bl	80125f4 <USB_ReadInterrupts>
 800964e:	4603      	mov	r3, r0
 8009650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009654:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009658:	d16e      	bne.n	8009738 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800965a:	2300      	movs	r3, #0
 800965c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4618      	mov	r0, r3
 8009664:	f008 ffd9 	bl	801261a <USB_ReadDevAllOutEpInterrupt>
 8009668:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800966a:	e062      	b.n	8009732 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d057      	beq.n	8009726 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800967c:	b2d2      	uxtb	r2, r2
 800967e:	4611      	mov	r1, r2
 8009680:	4618      	mov	r0, r3
 8009682:	f008 fffe 	bl	8012682 <USB_ReadDevOutEPInterrupt>
 8009686:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00c      	beq.n	80096ac <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	4413      	add	r3, r2
 800969a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969e:	461a      	mov	r2, r3
 80096a0:	2301      	movs	r3, #1
 80096a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80096a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fd20 	bl	800a0ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	f003 0308 	and.w	r3, r3, #8
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00c      	beq.n	80096d0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80096b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c2:	461a      	mov	r2, r3
 80096c4:	2308      	movs	r3, #8
 80096c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80096c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fd5c 	bl	800a188 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	f003 0310 	and.w	r3, r3, #16
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d008      	beq.n	80096ec <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e6:	461a      	mov	r2, r3
 80096e8:	2310      	movs	r3, #16
 80096ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f003 0320 	and.w	r3, r3, #32
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d008      	beq.n	8009708 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009702:	461a      	mov	r2, r3
 8009704:	2320      	movs	r3, #32
 8009706:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d009      	beq.n	8009726 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971e:	461a      	mov	r2, r3
 8009720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009724:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	3301      	adds	r3, #1
 800972a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	085b      	lsrs	r3, r3, #1
 8009730:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009734:	2b00      	cmp	r3, #0
 8009736:	d199      	bne.n	800966c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4618      	mov	r0, r3
 800973e:	f008 ff59 	bl	80125f4 <USB_ReadInterrupts>
 8009742:	4603      	mov	r3, r0
 8009744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009748:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800974c:	f040 8087 	bne.w	800985e <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4618      	mov	r0, r3
 8009756:	f008 ff7a 	bl	801264e <USB_ReadDevAllInEpInterrupt>
 800975a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009760:	e07a      	b.n	8009858 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b00      	cmp	r3, #0
 800976a:	d06f      	beq.n	800984c <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009772:	b2d2      	uxtb	r2, r2
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f008 ffa1 	bl	80126be <USB_ReadDevInEPInterrupt>
 800977c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d020      	beq.n	80097ca <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978a:	f003 030f 	and.w	r3, r3, #15
 800978e:	2201      	movs	r2, #1
 8009790:	fa02 f303 	lsl.w	r3, r2, r3
 8009794:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800979c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	43db      	mvns	r3, r3
 80097a2:	69f9      	ldr	r1, [r7, #28]
 80097a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097a8:	4013      	ands	r3, r2
 80097aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b8:	461a      	mov	r2, r3
 80097ba:	2301      	movs	r3, #1
 80097bc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7fb fc94 	bl	80050f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	f003 0308 	and.w	r3, r3, #8
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d008      	beq.n	80097e6 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e0:	461a      	mov	r2, r3
 80097e2:	2308      	movs	r3, #8
 80097e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d008      	beq.n	8009802 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fc:	461a      	mov	r2, r3
 80097fe:	2310      	movs	r3, #16
 8009800:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009808:	2b00      	cmp	r3, #0
 800980a:	d008      	beq.n	800981e <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009818:	461a      	mov	r2, r3
 800981a:	2340      	movs	r3, #64	; 0x40
 800981c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f003 0302 	and.w	r3, r3, #2
 8009824:	2b00      	cmp	r3, #0
 8009826:	d008      	beq.n	800983a <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	4413      	add	r3, r2
 8009830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009834:	461a      	mov	r2, r3
 8009836:	2302      	movs	r3, #2
 8009838:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009840:	2b00      	cmp	r3, #0
 8009842:	d003      	beq.n	800984c <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fbc7 	bl	8009fda <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984e:	3301      	adds	r3, #1
 8009850:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009854:	085b      	lsrs	r3, r3, #1
 8009856:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	2b00      	cmp	r3, #0
 800985c:	d181      	bne.n	8009762 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4618      	mov	r0, r3
 8009864:	f008 fec6 	bl	80125f4 <USB_ReadInterrupts>
 8009868:	4603      	mov	r3, r0
 800986a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800986e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009872:	d122      	bne.n	80098ba <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009882:	f023 0301 	bic.w	r3, r3, #1
 8009886:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800988e:	2b01      	cmp	r3, #1
 8009890:	d108      	bne.n	80098a4 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800989a:	2100      	movs	r1, #0
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fca7 	bl	800a1f0 <HAL_PCDEx_LPM_Callback>
 80098a2:	e002      	b.n	80098aa <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7fb fc6f 	bl	8005188 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	695a      	ldr	r2, [r3, #20]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80098b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4618      	mov	r0, r3
 80098c0:	f008 fe98 	bl	80125f4 <USB_ReadInterrupts>
 80098c4:	4603      	mov	r3, r0
 80098c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098ce:	d112      	bne.n	80098f6 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f003 0301 	and.w	r3, r3, #1
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d102      	bne.n	80098e6 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7fb fc43 	bl	800516c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	695a      	ldr	r2, [r3, #20]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80098f4:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f008 fe7a 	bl	80125f4 <USB_ReadInterrupts>
 8009900:	4603      	mov	r3, r0
 8009902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009906:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800990a:	d121      	bne.n	8009950 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	695a      	ldr	r2, [r3, #20]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800991a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009922:	2b00      	cmp	r3, #0
 8009924:	d111      	bne.n	800994a <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009934:	089b      	lsrs	r3, r3, #2
 8009936:	f003 020f 	and.w	r2, r3, #15
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009940:	2101      	movs	r1, #1
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fc54 	bl	800a1f0 <HAL_PCDEx_LPM_Callback>
 8009948:	e002      	b.n	8009950 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7fb fc0e 	bl	800516c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4618      	mov	r0, r3
 8009956:	f008 fe4d 	bl	80125f4 <USB_ReadInterrupts>
 800995a:	4603      	mov	r3, r0
 800995c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009964:	f040 80c5 	bne.w	8009af2 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	69fa      	ldr	r2, [r7, #28]
 8009972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009976:	f023 0301 	bic.w	r3, r3, #1
 800997a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2110      	movs	r1, #16
 8009982:	4618      	mov	r0, r3
 8009984:	f008 f91c 	bl	8011bc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009988:	2300      	movs	r3, #0
 800998a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800998c:	e056      	b.n	8009a3c <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800998e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009990:	015a      	lsls	r2, r3, #5
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	4413      	add	r3, r2
 8009996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999a:	461a      	mov	r2, r3
 800999c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80099a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b2:	0151      	lsls	r1, r2, #5
 80099b4:	69fa      	ldr	r2, [r7, #28]
 80099b6:	440a      	add	r2, r1
 80099b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099c0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80099c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099d2:	0151      	lsls	r1, r2, #5
 80099d4:	69fa      	ldr	r2, [r7, #28]
 80099d6:	440a      	add	r2, r1
 80099d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80099e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ee:	461a      	mov	r2, r3
 80099f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a06:	0151      	lsls	r1, r2, #5
 8009a08:	69fa      	ldr	r2, [r7, #28]
 8009a0a:	440a      	add	r2, r1
 8009a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	015a      	lsls	r2, r3, #5
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a26:	0151      	lsls	r1, r2, #5
 8009a28:	69fa      	ldr	r2, [r7, #28]
 8009a2a:	440a      	add	r2, r1
 8009a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a34:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a38:	3301      	adds	r3, #1
 8009a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d3a3      	bcc.n	800998e <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a4c:	69db      	ldr	r3, [r3, #28]
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a54:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009a58:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d016      	beq.n	8009a90 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a6c:	69fa      	ldr	r2, [r7, #28]
 8009a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a72:	f043 030b 	orr.w	r3, r3, #11
 8009a76:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a82:	69fa      	ldr	r2, [r7, #28]
 8009a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a88:	f043 030b 	orr.w	r3, r3, #11
 8009a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8009a8e:	e015      	b.n	8009abc <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	69fa      	ldr	r2, [r7, #28]
 8009a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009aa2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009aa6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	69fa      	ldr	r2, [r7, #28]
 8009ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ab6:	f043 030b 	orr.w	r3, r3, #11
 8009aba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	69fa      	ldr	r2, [r7, #28]
 8009ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009aca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009ace:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ada:	4619      	mov	r1, r3
 8009adc:	4610      	mov	r0, r2
 8009ade:	f008 fe4d 	bl	801277c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	695a      	ldr	r2, [r3, #20]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f008 fd7c 	bl	80125f4 <USB_ReadInterrupts>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b06:	d124      	bne.n	8009b52 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f008 fe12 	bl	8012736 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f008 f878 	bl	8011c0c <USB_GetDevSpeed>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	461a      	mov	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681c      	ldr	r4, [r3, #0]
 8009b28:	f001 fb02 	bl	800b130 <HAL_RCC_GetHCLKFreq>
 8009b2c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	461a      	mov	r2, r3
 8009b36:	4620      	mov	r0, r4
 8009b38:	f007 ffa6 	bl	8011a88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7fb fb00 	bl	8005142 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	695a      	ldr	r2, [r3, #20]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f008 fd4c 	bl	80125f4 <USB_ReadInterrupts>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f003 0308 	and.w	r3, r3, #8
 8009b62:	2b08      	cmp	r3, #8
 8009b64:	d10a      	bne.n	8009b7c <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7fb fadd 	bl	8005126 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	695a      	ldr	r2, [r3, #20]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f002 0208 	and.w	r2, r2, #8
 8009b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f008 fd37 	bl	80125f4 <USB_ReadInterrupts>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b90:	d10f      	bne.n	8009bb2 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7fb fb13 	bl	80051c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	695a      	ldr	r2, [r3, #20]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f008 fd1c 	bl	80125f4 <USB_ReadInterrupts>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bc6:	d10f      	bne.n	8009be8 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7fb fae6 	bl	80051a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	695a      	ldr	r2, [r3, #20]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f008 fd01 	bl	80125f4 <USB_ReadInterrupts>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bfc:	d10a      	bne.n	8009c14 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7fb faf4 	bl	80051ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	695a      	ldr	r2, [r3, #20]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f008 fceb 	bl	80125f4 <USB_ReadInterrupts>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	f003 0304 	and.w	r3, r3, #4
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d115      	bne.n	8009c54 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	f003 0304 	and.w	r3, r3, #4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7fb fae4 	bl	8005208 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6859      	ldr	r1, [r3, #4]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	69ba      	ldr	r2, [r7, #24]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	605a      	str	r2, [r3, #4]
 8009c50:	e000      	b.n	8009c54 <HAL_PCD_IRQHandler+0x742>
      return;
 8009c52:	bf00      	nop
    }
  }
}
 8009c54:	3734      	adds	r7, #52	; 0x34
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd90      	pop	{r4, r7, pc}

08009c5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b082      	sub	sp, #8
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	460b      	mov	r3, r1
 8009c64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d101      	bne.n	8009c74 <HAL_PCD_SetAddress+0x1a>
 8009c70:	2302      	movs	r3, #2
 8009c72:	e013      	b.n	8009c9c <HAL_PCD_SetAddress+0x42>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	78fa      	ldrb	r2, [r7, #3]
 8009c80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	78fa      	ldrb	r2, [r7, #3]
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f008 fc8b 	bl	80125a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	4608      	mov	r0, r1
 8009cae:	4611      	mov	r1, r2
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	70fb      	strb	r3, [r7, #3]
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	803b      	strh	r3, [r7, #0]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	da0f      	bge.n	8009cea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009cca:	78fb      	ldrb	r3, [r7, #3]
 8009ccc:	f003 020f 	and.w	r2, r3, #15
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	00db      	lsls	r3, r3, #3
 8009cd4:	1a9b      	subs	r3, r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	3338      	adds	r3, #56	; 0x38
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	4413      	add	r3, r2
 8009cde:	3304      	adds	r3, #4
 8009ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	705a      	strb	r2, [r3, #1]
 8009ce8:	e00f      	b.n	8009d0a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009cea:	78fb      	ldrb	r3, [r7, #3]
 8009cec:	f003 020f 	and.w	r2, r3, #15
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	00db      	lsls	r3, r3, #3
 8009cf4:	1a9b      	subs	r3, r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	4413      	add	r3, r2
 8009d00:	3304      	adds	r3, #4
 8009d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	f003 030f 	and.w	r3, r3, #15
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009d16:	883a      	ldrh	r2, [r7, #0]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	78ba      	ldrb	r2, [r7, #2]
 8009d20:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	785b      	ldrb	r3, [r3, #1]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d004      	beq.n	8009d34 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009d34:	78bb      	ldrb	r3, [r7, #2]
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d102      	bne.n	8009d40 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d101      	bne.n	8009d4e <HAL_PCD_EP_Open+0xaa>
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	e00e      	b.n	8009d6c <HAL_PCD_EP_Open+0xc8>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68f9      	ldr	r1, [r7, #12]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f007 ff74 	bl	8011c4a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009d6a:	7afb      	ldrb	r3, [r7, #11]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	607a      	str	r2, [r7, #4]
 8009d7e:	603b      	str	r3, [r7, #0]
 8009d80:	460b      	mov	r3, r1
 8009d82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d84:	7afb      	ldrb	r3, [r7, #11]
 8009d86:	f003 020f 	and.w	r2, r3, #15
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	00db      	lsls	r3, r3, #3
 8009d8e:	1a9b      	subs	r3, r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	4413      	add	r3, r2
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2200      	movs	r2, #0
 8009dae:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2200      	movs	r2, #0
 8009db4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009db6:	7afb      	ldrb	r3, [r7, #11]
 8009db8:	f003 030f 	and.w	r3, r3, #15
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009dc2:	7afb      	ldrb	r3, [r7, #11]
 8009dc4:	f003 030f 	and.w	r3, r3, #15
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d106      	bne.n	8009dda <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6979      	ldr	r1, [r7, #20]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f008 f99c 	bl	8012110 <USB_EP0StartXfer>
 8009dd8:	e005      	b.n	8009de6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6979      	ldr	r1, [r7, #20]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f007 ffb9 	bl	8011d58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3718      	adds	r7, #24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	607a      	str	r2, [r7, #4]
 8009dfa:	603b      	str	r3, [r7, #0]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e00:	7afb      	ldrb	r3, [r7, #11]
 8009e02:	f003 020f 	and.w	r2, r3, #15
 8009e06:	4613      	mov	r3, r2
 8009e08:	00db      	lsls	r3, r3, #3
 8009e0a:	1a9b      	subs	r3, r3, r2
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	3338      	adds	r3, #56	; 0x38
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	4413      	add	r3, r2
 8009e14:	3304      	adds	r3, #4
 8009e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2200      	movs	r2, #0
 8009e28:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e30:	7afb      	ldrb	r3, [r7, #11]
 8009e32:	f003 030f 	and.w	r3, r3, #15
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009e3c:	7afb      	ldrb	r3, [r7, #11]
 8009e3e:	f003 030f 	and.w	r3, r3, #15
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d106      	bne.n	8009e54 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6979      	ldr	r1, [r7, #20]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f008 f95f 	bl	8012110 <USB_EP0StartXfer>
 8009e52:	e005      	b.n	8009e60 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6979      	ldr	r1, [r7, #20]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f007 ff7c 	bl	8011d58 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b084      	sub	sp, #16
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	460b      	mov	r3, r1
 8009e74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009e76:	78fb      	ldrb	r3, [r7, #3]
 8009e78:	f003 020f 	and.w	r2, r3, #15
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d901      	bls.n	8009e88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e04e      	b.n	8009f26 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	da0f      	bge.n	8009eb0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	f003 020f 	and.w	r2, r3, #15
 8009e96:	4613      	mov	r3, r2
 8009e98:	00db      	lsls	r3, r3, #3
 8009e9a:	1a9b      	subs	r3, r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	3338      	adds	r3, #56	; 0x38
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	705a      	strb	r2, [r3, #1]
 8009eae:	e00d      	b.n	8009ecc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009eb0:	78fa      	ldrb	r2, [r7, #3]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	1a9b      	subs	r3, r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ed2:	78fb      	ldrb	r3, [r7, #3]
 8009ed4:	f003 030f 	and.w	r3, r3, #15
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d101      	bne.n	8009eec <HAL_PCD_EP_SetStall+0x82>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	e01c      	b.n	8009f26 <HAL_PCD_EP_SetStall+0xbc>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68f9      	ldr	r1, [r7, #12]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f008 fa80 	bl	8012400 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009f00:	78fb      	ldrb	r3, [r7, #3]
 8009f02:	f003 030f 	and.w	r3, r3, #15
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d108      	bne.n	8009f1c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f008 fc30 	bl	801277c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b084      	sub	sp, #16
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009f3a:	78fb      	ldrb	r3, [r7, #3]
 8009f3c:	f003 020f 	and.w	r2, r3, #15
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d901      	bls.n	8009f4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e042      	b.n	8009fd2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	da0f      	bge.n	8009f74 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	f003 020f 	and.w	r2, r3, #15
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	00db      	lsls	r3, r3, #3
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	3338      	adds	r3, #56	; 0x38
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	4413      	add	r3, r2
 8009f68:	3304      	adds	r3, #4
 8009f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	705a      	strb	r2, [r3, #1]
 8009f72:	e00f      	b.n	8009f94 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	f003 020f 	and.w	r2, r3, #15
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	00db      	lsls	r3, r3, #3
 8009f7e:	1a9b      	subs	r3, r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	4413      	add	r3, r2
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f9a:	78fb      	ldrb	r3, [r7, #3]
 8009f9c:	f003 030f 	and.w	r3, r3, #15
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d101      	bne.n	8009fb4 <HAL_PCD_EP_ClrStall+0x86>
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	e00e      	b.n	8009fd2 <HAL_PCD_EP_ClrStall+0xa4>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68f9      	ldr	r1, [r7, #12]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f008 fa8a 	bl	80124dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b088      	sub	sp, #32
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	1a9b      	subs	r3, r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	3338      	adds	r3, #56	; 0x38
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	3304      	adds	r3, #4
 800a000:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	699a      	ldr	r2, [r3, #24]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d901      	bls.n	800a012 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e067      	b.n	800a0e2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	695a      	ldr	r2, [r3, #20]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	69fa      	ldr	r2, [r7, #28]
 800a024:	429a      	cmp	r2, r3
 800a026:	d902      	bls.n	800a02e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	3303      	adds	r3, #3
 800a032:	089b      	lsrs	r3, r3, #2
 800a034:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a036:	e026      	b.n	800a086 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	695a      	ldr	r2, [r3, #20]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	69fa      	ldr	r2, [r7, #28]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d902      	bls.n	800a054 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	3303      	adds	r3, #3
 800a058:	089b      	lsrs	r3, r3, #2
 800a05a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	68d9      	ldr	r1, [r3, #12]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	b2da      	uxtb	r2, r3
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	b29b      	uxth	r3, r3
 800a068:	6978      	ldr	r0, [r7, #20]
 800a06a:	f008 f96f 	bl	801234c <USB_WritePacket>

    ep->xfer_buff  += len;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	68da      	ldr	r2, [r3, #12]
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	441a      	add	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	699a      	ldr	r2, [r3, #24]
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	441a      	add	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	b29b      	uxth	r3, r3
 800a096:	69ba      	ldr	r2, [r7, #24]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d809      	bhi.n	800a0b0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	699a      	ldr	r2, [r3, #24]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d203      	bcs.n	800a0b0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1c3      	bne.n	800a038 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	695a      	ldr	r2, [r3, #20]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d811      	bhi.n	800a0e0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	f003 030f 	and.w	r3, r3, #15
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	43db      	mvns	r3, r3
 800a0d6:	6939      	ldr	r1, [r7, #16]
 800a0d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0dc:	4013      	ands	r3, r2
 800a0de:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3720      	adds	r7, #32
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	333c      	adds	r3, #60	; 0x3c
 800a104:	3304      	adds	r3, #4
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	015a      	lsls	r2, r3, #5
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	4413      	add	r3, r2
 800a112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4a19      	ldr	r2, [pc, #100]	; (800a184 <PCD_EP_OutXfrComplete_int+0x98>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d124      	bne.n	800a16c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00a      	beq.n	800a142 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	015a      	lsls	r2, r3, #5
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	4413      	add	r3, r2
 800a134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a138:	461a      	mov	r2, r3
 800a13a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a13e:	6093      	str	r3, [r2, #8]
 800a140:	e01a      	b.n	800a178 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	f003 0320 	and.w	r3, r3, #32
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d008      	beq.n	800a15e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a158:	461a      	mov	r2, r3
 800a15a:	2320      	movs	r3, #32
 800a15c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	b2db      	uxtb	r3, r3
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7fa ffa9 	bl	80050bc <HAL_PCD_DataOutStageCallback>
 800a16a:	e005      	b.n	800a178 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7fa ffa2 	bl	80050bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	4f54310a 	.word	0x4f54310a

0800a188 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	333c      	adds	r3, #60	; 0x3c
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	015a      	lsls	r2, r3, #5
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	4a0c      	ldr	r2, [pc, #48]	; (800a1ec <PCD_EP_OutSetupPacket_int+0x64>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d90e      	bls.n	800a1dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d009      	beq.n	800a1dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7fa ff5b 	bl	8005098 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	4f54300a 	.word	0x4f54300a

0800a1f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800a210:	4b2b      	ldr	r3, [pc, #172]	; (800a2c0 <HAL_PWR_ConfigPVD+0xb8>)
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	f023 020e 	bic.w	r2, r3, #14
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4928      	ldr	r1, [pc, #160]	; (800a2c0 <HAL_PWR_ConfigPVD+0xb8>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800a222:	4b28      	ldr	r3, [pc, #160]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	4a27      	ldr	r2, [pc, #156]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a22c:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800a22e:	4b25      	ldr	r3, [pc, #148]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a24      	ldr	r2, [pc, #144]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a238:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800a23a:	4b22      	ldr	r3, [pc, #136]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	4a21      	ldr	r2, [pc, #132]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a244:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800a246:	4b1f      	ldr	r3, [pc, #124]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	4a1e      	ldr	r2, [pc, #120]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a24c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a250:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d005      	beq.n	800a26a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800a25e:	4b19      	ldr	r3, [pc, #100]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a18      	ldr	r2, [pc, #96]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a268:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d005      	beq.n	800a282 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800a276:	4b13      	ldr	r3, [pc, #76]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	4a12      	ldr	r2, [pc, #72]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a27c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a280:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d005      	beq.n	800a29a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800a28e:	4b0d      	ldr	r3, [pc, #52]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	4a0c      	ldr	r2, [pc, #48]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a298:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f003 0302 	and.w	r3, r3, #2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d005      	beq.n	800a2b2 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800a2a6:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	4a06      	ldr	r2, [pc, #24]	; (800a2c4 <HAL_PWR_ConfigPVD+0xbc>)
 800a2ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2b0:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	40007000 	.word	0x40007000
 800a2c4:	40010400 	.word	0x40010400

0800a2c8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800a2cc:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <HAL_PWR_EnablePVD+0x1c>)
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	4a04      	ldr	r2, [pc, #16]	; (800a2e4 <HAL_PWR_EnablePVD+0x1c>)
 800a2d2:	f043 0301 	orr.w	r3, r3, #1
 800a2d6:	6053      	str	r3, [r2, #4]
}
 800a2d8:	bf00      	nop
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	40007000 	.word	0x40007000

0800a2e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a2ec:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <HAL_PWREx_GetVoltageRange+0x3c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a2f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2f8:	d102      	bne.n	800a300 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800a2fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2fe:	e00b      	b.n	800a318 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800a300:	4b08      	ldr	r3, [pc, #32]	; (800a324 <HAL_PWREx_GetVoltageRange+0x3c>)
 800a302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a30a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a30e:	d102      	bne.n	800a316 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800a310:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a314:	e000      	b.n	800a318 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800a316:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800a318:	4618      	mov	r0, r3
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	40007000 	.word	0x40007000

0800a328 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d141      	bne.n	800a3ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a336:	4b4b      	ldr	r3, [pc, #300]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a33e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a342:	d131      	bne.n	800a3a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a344:	4b47      	ldr	r3, [pc, #284]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a34a:	4a46      	ldr	r2, [pc, #280]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a34c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a354:	4b43      	ldr	r3, [pc, #268]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a35c:	4a41      	ldr	r2, [pc, #260]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a35e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a362:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800a364:	4b40      	ldr	r3, [pc, #256]	; (800a468 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2232      	movs	r2, #50	; 0x32
 800a36a:	fb02 f303 	mul.w	r3, r2, r3
 800a36e:	4a3f      	ldr	r2, [pc, #252]	; (800a46c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a370:	fba2 2303 	umull	r2, r3, r2, r3
 800a374:	0c9b      	lsrs	r3, r3, #18
 800a376:	3301      	adds	r3, #1
 800a378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a37a:	e002      	b.n	800a382 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	3b01      	subs	r3, #1
 800a380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a382:	4b38      	ldr	r3, [pc, #224]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a38a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a38e:	d102      	bne.n	800a396 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1f2      	bne.n	800a37c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a396:	4b33      	ldr	r3, [pc, #204]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a39e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a2:	d158      	bne.n	800a456 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e057      	b.n	800a458 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a3a8:	4b2e      	ldr	r3, [pc, #184]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ae:	4a2d      	ldr	r2, [pc, #180]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a3b8:	e04d      	b.n	800a456 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3c0:	d141      	bne.n	800a446 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a3c2:	4b28      	ldr	r3, [pc, #160]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ce:	d131      	bne.n	800a434 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a3d0:	4b24      	ldr	r3, [pc, #144]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3d6:	4a23      	ldr	r2, [pc, #140]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a3e0:	4b20      	ldr	r3, [pc, #128]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a3e8:	4a1e      	ldr	r2, [pc, #120]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800a3f0:	4b1d      	ldr	r3, [pc, #116]	; (800a468 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2232      	movs	r2, #50	; 0x32
 800a3f6:	fb02 f303 	mul.w	r3, r2, r3
 800a3fa:	4a1c      	ldr	r2, [pc, #112]	; (800a46c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a3fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a400:	0c9b      	lsrs	r3, r3, #18
 800a402:	3301      	adds	r3, #1
 800a404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a406:	e002      	b.n	800a40e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a40e:	4b15      	ldr	r3, [pc, #84]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a41a:	d102      	bne.n	800a422 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1f2      	bne.n	800a408 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a422:	4b10      	ldr	r3, [pc, #64]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a42a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a42e:	d112      	bne.n	800a456 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a430:	2303      	movs	r3, #3
 800a432:	e011      	b.n	800a458 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a434:	4b0b      	ldr	r3, [pc, #44]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a43a:	4a0a      	ldr	r2, [pc, #40]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a43c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a440:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a444:	e007      	b.n	800a456 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a446:	4b07      	ldr	r3, [pc, #28]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a44e:	4a05      	ldr	r2, [pc, #20]	; (800a464 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a450:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a454:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr
 800a464:	40007000 	.word	0x40007000
 800a468:	20000038 	.word	0x20000038
 800a46c:	431bde83 	.word	0x431bde83

0800a470 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800a470:	b480      	push	{r7}
 800a472:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800a474:	4b05      	ldr	r3, [pc, #20]	; (800a48c <HAL_PWREx_EnableVddIO2+0x1c>)
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	4a04      	ldr	r2, [pc, #16]	; (800a48c <HAL_PWREx_EnableVddIO2+0x1c>)
 800a47a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a47e:	6053      	str	r3, [r2, #4]
}
 800a480:	bf00      	nop
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	40007000 	.word	0x40007000

0800a490 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 800a490:	b480      	push	{r7}
 800a492:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 800a494:	4b09      	ldr	r3, [pc, #36]	; (800a4bc <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f023 0307 	bic.w	r3, r3, #7
 800a49c:	4a07      	ldr	r2, [pc, #28]	; (800a4bc <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800a49e:	f043 0304 	orr.w	r3, r3, #4
 800a4a2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a4a4:	4b06      	ldr	r3, [pc, #24]	; (800a4c0 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	4a05      	ldr	r2, [pc, #20]	; (800a4c0 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800a4aa:	f043 0304 	orr.w	r3, r3, #4
 800a4ae:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800a4b0:	bf30      	wfi
}
 800a4b2:	bf00      	nop
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	40007000 	.word	0x40007000
 800a4c0:	e000ed00 	.word	0xe000ed00

0800a4c4 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 800a4c8:	4b1c      	ldr	r3, [pc, #112]	; (800a53c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d005      	beq.n	800a4e0 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800a4d4:	f7f9 fb28 	bl	8003b28 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800a4d8:	4b18      	ldr	r3, [pc, #96]	; (800a53c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a4da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a4de:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 800a4e0:	4b16      	ldr	r3, [pc, #88]	; (800a53c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e4:	f003 0308 	and.w	r3, r3, #8
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d004      	beq.n	800a4f6 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800a4ec:	f000 f828 	bl	800a540 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800a4f0:	4b12      	ldr	r3, [pc, #72]	; (800a53c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a4f2:	2208      	movs	r2, #8
 800a4f4:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 800a4f6:	4b11      	ldr	r3, [pc, #68]	; (800a53c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fa:	f003 0310 	and.w	r3, r3, #16
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d004      	beq.n	800a50c <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 800a502:	f000 f824 	bl	800a54e <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 800a506:	4b0d      	ldr	r3, [pc, #52]	; (800a53c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a508:	2210      	movs	r2, #16
 800a50a:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 800a50c:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a510:	f003 0320 	and.w	r3, r3, #32
 800a514:	2b00      	cmp	r3, #0
 800a516:	d004      	beq.n	800a522 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800a518:	f000 f820 	bl	800a55c <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800a51c:	4b07      	ldr	r3, [pc, #28]	; (800a53c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a51e:	2220      	movs	r2, #32
 800a520:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 800a522:	4b06      	ldr	r3, [pc, #24]	; (800a53c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d004      	beq.n	800a538 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 800a52e:	f000 f81c 	bl	800a56a <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 800a532:	4b02      	ldr	r3, [pc, #8]	; (800a53c <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800a534:	2240      	movs	r2, #64	; 0x40
 800a536:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800a538:	bf00      	nop
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	40010400 	.word	0x40010400

0800a540 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800a540:	b480      	push	{r7}
 800a542:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800a544:	bf00      	nop
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 800a54e:	b480      	push	{r7}
 800a550:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 800a552:	bf00      	nop
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800a55c:	b480      	push	{r7}
 800a55e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800a560:	bf00      	nop
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800a56a:	b480      	push	{r7}
 800a56c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800a56e:	bf00      	nop
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b088      	sub	sp, #32
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d102      	bne.n	800a58c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	f000 bc16 	b.w	800adb8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a58c:	4b96      	ldr	r3, [pc, #600]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f003 030c 	and.w	r3, r3, #12
 800a594:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a596:	4b94      	ldr	r3, [pc, #592]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	f003 0303 	and.w	r3, r3, #3
 800a59e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 0310 	and.w	r3, r3, #16
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 80e4 	beq.w	800a776 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d007      	beq.n	800a5c4 <HAL_RCC_OscConfig+0x4c>
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	2b0c      	cmp	r3, #12
 800a5b8:	f040 808b 	bne.w	800a6d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	f040 8087 	bne.w	800a6d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a5c4:	4b88      	ldr	r3, [pc, #544]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 0302 	and.w	r3, r3, #2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <HAL_RCC_OscConfig+0x64>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e3ed      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a1a      	ldr	r2, [r3, #32]
 800a5e0:	4b81      	ldr	r3, [pc, #516]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0308 	and.w	r3, r3, #8
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d004      	beq.n	800a5f6 <HAL_RCC_OscConfig+0x7e>
 800a5ec:	4b7e      	ldr	r3, [pc, #504]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5f4:	e005      	b.n	800a602 <HAL_RCC_OscConfig+0x8a>
 800a5f6:	4b7c      	ldr	r3, [pc, #496]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a5f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5fc:	091b      	lsrs	r3, r3, #4
 800a5fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a602:	4293      	cmp	r3, r2
 800a604:	d223      	bcs.n	800a64e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a1b      	ldr	r3, [r3, #32]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 fdc8 	bl	800b1a0 <RCC_SetFlashLatencyFromMSIRange>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e3ce      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a61a:	4b73      	ldr	r3, [pc, #460]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a72      	ldr	r2, [pc, #456]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a620:	f043 0308 	orr.w	r3, r3, #8
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	4b70      	ldr	r3, [pc, #448]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	496d      	ldr	r1, [pc, #436]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a634:	4313      	orrs	r3, r2
 800a636:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a638:	4b6b      	ldr	r3, [pc, #428]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	69db      	ldr	r3, [r3, #28]
 800a644:	021b      	lsls	r3, r3, #8
 800a646:	4968      	ldr	r1, [pc, #416]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a648:	4313      	orrs	r3, r2
 800a64a:	604b      	str	r3, [r1, #4]
 800a64c:	e025      	b.n	800a69a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a64e:	4b66      	ldr	r3, [pc, #408]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a65      	ldr	r2, [pc, #404]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a654:	f043 0308 	orr.w	r3, r3, #8
 800a658:	6013      	str	r3, [r2, #0]
 800a65a:	4b63      	ldr	r3, [pc, #396]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	4960      	ldr	r1, [pc, #384]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a668:	4313      	orrs	r3, r2
 800a66a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a66c:	4b5e      	ldr	r3, [pc, #376]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	69db      	ldr	r3, [r3, #28]
 800a678:	021b      	lsls	r3, r3, #8
 800a67a:	495b      	ldr	r1, [pc, #364]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d109      	bne.n	800a69a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 fd88 	bl	800b1a0 <RCC_SetFlashLatencyFromMSIRange>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e38e      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a69a:	f000 fcbf 	bl	800b01c <HAL_RCC_GetSysClockFreq>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	4b51      	ldr	r3, [pc, #324]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	091b      	lsrs	r3, r3, #4
 800a6a6:	f003 030f 	and.w	r3, r3, #15
 800a6aa:	4950      	ldr	r1, [pc, #320]	; (800a7ec <HAL_RCC_OscConfig+0x274>)
 800a6ac:	5ccb      	ldrb	r3, [r1, r3]
 800a6ae:	f003 031f 	and.w	r3, r3, #31
 800a6b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6b6:	4a4e      	ldr	r2, [pc, #312]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a6b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a6ba:	4b4e      	ldr	r3, [pc, #312]	; (800a7f4 <HAL_RCC_OscConfig+0x27c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fb fff4 	bl	80066ac <HAL_InitTick>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d052      	beq.n	800a774 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
 800a6d0:	e372      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d032      	beq.n	800a740 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a6da:	4b43      	ldr	r3, [pc, #268]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a42      	ldr	r2, [pc, #264]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a6e0:	f043 0301 	orr.w	r3, r3, #1
 800a6e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a6e6:	f7fc f82d 	bl	8006744 <HAL_GetTick>
 800a6ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a6ec:	e008      	b.n	800a700 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a6ee:	f7fc f829 	bl	8006744 <HAL_GetTick>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d901      	bls.n	800a700 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e35b      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a700:	4b39      	ldr	r3, [pc, #228]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0302 	and.w	r3, r3, #2
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d0f0      	beq.n	800a6ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a70c:	4b36      	ldr	r3, [pc, #216]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a35      	ldr	r2, [pc, #212]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a712:	f043 0308 	orr.w	r3, r3, #8
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	4b33      	ldr	r3, [pc, #204]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a1b      	ldr	r3, [r3, #32]
 800a724:	4930      	ldr	r1, [pc, #192]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a726:	4313      	orrs	r3, r2
 800a728:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a72a:	4b2f      	ldr	r3, [pc, #188]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	021b      	lsls	r3, r3, #8
 800a738:	492b      	ldr	r1, [pc, #172]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a73a:	4313      	orrs	r3, r2
 800a73c:	604b      	str	r3, [r1, #4]
 800a73e:	e01a      	b.n	800a776 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a740:	4b29      	ldr	r3, [pc, #164]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a28      	ldr	r2, [pc, #160]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a746:	f023 0301 	bic.w	r3, r3, #1
 800a74a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a74c:	f7fb fffa 	bl	8006744 <HAL_GetTick>
 800a750:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a752:	e008      	b.n	800a766 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a754:	f7fb fff6 	bl	8006744 <HAL_GetTick>
 800a758:	4602      	mov	r2, r0
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d901      	bls.n	800a766 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e328      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a766:	4b20      	ldr	r3, [pc, #128]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1f0      	bne.n	800a754 <HAL_RCC_OscConfig+0x1dc>
 800a772:	e000      	b.n	800a776 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a774:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d073      	beq.n	800a86a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	2b08      	cmp	r3, #8
 800a786:	d005      	beq.n	800a794 <HAL_RCC_OscConfig+0x21c>
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	2b0c      	cmp	r3, #12
 800a78c:	d10e      	bne.n	800a7ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	2b03      	cmp	r3, #3
 800a792:	d10b      	bne.n	800a7ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a794:	4b14      	ldr	r3, [pc, #80]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d063      	beq.n	800a868 <HAL_RCC_OscConfig+0x2f0>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d15f      	bne.n	800a868 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e305      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7b4:	d106      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x24c>
 800a7b6:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a0b      	ldr	r2, [pc, #44]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a7bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7c0:	6013      	str	r3, [r2, #0]
 800a7c2:	e025      	b.n	800a810 <HAL_RCC_OscConfig+0x298>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7cc:	d114      	bne.n	800a7f8 <HAL_RCC_OscConfig+0x280>
 800a7ce:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a05      	ldr	r2, [pc, #20]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a7d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	4b03      	ldr	r3, [pc, #12]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a02      	ldr	r2, [pc, #8]	; (800a7e8 <HAL_RCC_OscConfig+0x270>)
 800a7e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	e013      	b.n	800a810 <HAL_RCC_OscConfig+0x298>
 800a7e8:	40021000 	.word	0x40021000
 800a7ec:	08022964 	.word	0x08022964
 800a7f0:	20000038 	.word	0x20000038
 800a7f4:	20000078 	.word	0x20000078
 800a7f8:	4ba0      	ldr	r3, [pc, #640]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a9f      	ldr	r2, [pc, #636]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a7fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a802:	6013      	str	r3, [r2, #0]
 800a804:	4b9d      	ldr	r3, [pc, #628]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a9c      	ldr	r2, [pc, #624]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a80a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a80e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d013      	beq.n	800a840 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a818:	f7fb ff94 	bl	8006744 <HAL_GetTick>
 800a81c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a81e:	e008      	b.n	800a832 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a820:	f7fb ff90 	bl	8006744 <HAL_GetTick>
 800a824:	4602      	mov	r2, r0
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	2b64      	cmp	r3, #100	; 0x64
 800a82c:	d901      	bls.n	800a832 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a82e:	2303      	movs	r3, #3
 800a830:	e2c2      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a832:	4b92      	ldr	r3, [pc, #584]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d0f0      	beq.n	800a820 <HAL_RCC_OscConfig+0x2a8>
 800a83e:	e014      	b.n	800a86a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a840:	f7fb ff80 	bl	8006744 <HAL_GetTick>
 800a844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a846:	e008      	b.n	800a85a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a848:	f7fb ff7c 	bl	8006744 <HAL_GetTick>
 800a84c:	4602      	mov	r2, r0
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	2b64      	cmp	r3, #100	; 0x64
 800a854:	d901      	bls.n	800a85a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a856:	2303      	movs	r3, #3
 800a858:	e2ae      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a85a:	4b88      	ldr	r3, [pc, #544]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1f0      	bne.n	800a848 <HAL_RCC_OscConfig+0x2d0>
 800a866:	e000      	b.n	800a86a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0302 	and.w	r3, r3, #2
 800a872:	2b00      	cmp	r3, #0
 800a874:	d060      	beq.n	800a938 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	2b04      	cmp	r3, #4
 800a87a:	d005      	beq.n	800a888 <HAL_RCC_OscConfig+0x310>
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	2b0c      	cmp	r3, #12
 800a880:	d119      	bne.n	800a8b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	2b02      	cmp	r3, #2
 800a886:	d116      	bne.n	800a8b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a888:	4b7c      	ldr	r3, [pc, #496]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a890:	2b00      	cmp	r3, #0
 800a892:	d005      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x328>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d101      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e28b      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8a0:	4b76      	ldr	r3, [pc, #472]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	061b      	lsls	r3, r3, #24
 800a8ae:	4973      	ldr	r1, [pc, #460]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8b4:	e040      	b.n	800a938 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d023      	beq.n	800a906 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a8be:	4b6f      	ldr	r3, [pc, #444]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a6e      	ldr	r2, [pc, #440]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a8c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ca:	f7fb ff3b 	bl	8006744 <HAL_GetTick>
 800a8ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8d0:	e008      	b.n	800a8e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8d2:	f7fb ff37 	bl	8006744 <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d901      	bls.n	800a8e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e269      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8e4:	4b65      	ldr	r3, [pc, #404]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d0f0      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8f0:	4b62      	ldr	r3, [pc, #392]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	061b      	lsls	r3, r3, #24
 800a8fe:	495f      	ldr	r1, [pc, #380]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a900:	4313      	orrs	r3, r2
 800a902:	604b      	str	r3, [r1, #4]
 800a904:	e018      	b.n	800a938 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a906:	4b5d      	ldr	r3, [pc, #372]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a5c      	ldr	r2, [pc, #368]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a90c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a912:	f7fb ff17 	bl	8006744 <HAL_GetTick>
 800a916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a918:	e008      	b.n	800a92c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a91a:	f7fb ff13 	bl	8006744 <HAL_GetTick>
 800a91e:	4602      	mov	r2, r0
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	2b02      	cmp	r3, #2
 800a926:	d901      	bls.n	800a92c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e245      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a92c:	4b53      	ldr	r3, [pc, #332]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1f0      	bne.n	800a91a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0308 	and.w	r3, r3, #8
 800a940:	2b00      	cmp	r3, #0
 800a942:	d03c      	beq.n	800a9be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d01c      	beq.n	800a986 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a94c:	4b4b      	ldr	r3, [pc, #300]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a94e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a952:	4a4a      	ldr	r2, [pc, #296]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a954:	f043 0301 	orr.w	r3, r3, #1
 800a958:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a95c:	f7fb fef2 	bl	8006744 <HAL_GetTick>
 800a960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a962:	e008      	b.n	800a976 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a964:	f7fb feee 	bl	8006744 <HAL_GetTick>
 800a968:	4602      	mov	r2, r0
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d901      	bls.n	800a976 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a972:	2303      	movs	r3, #3
 800a974:	e220      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a976:	4b41      	ldr	r3, [pc, #260]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a97c:	f003 0302 	and.w	r3, r3, #2
 800a980:	2b00      	cmp	r3, #0
 800a982:	d0ef      	beq.n	800a964 <HAL_RCC_OscConfig+0x3ec>
 800a984:	e01b      	b.n	800a9be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a986:	4b3d      	ldr	r3, [pc, #244]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a98c:	4a3b      	ldr	r2, [pc, #236]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a98e:	f023 0301 	bic.w	r3, r3, #1
 800a992:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a996:	f7fb fed5 	bl	8006744 <HAL_GetTick>
 800a99a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a99c:	e008      	b.n	800a9b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a99e:	f7fb fed1 	bl	8006744 <HAL_GetTick>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d901      	bls.n	800a9b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e203      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a9b0:	4b32      	ldr	r3, [pc, #200]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a9b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9b6:	f003 0302 	and.w	r3, r3, #2
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1ef      	bne.n	800a99e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0304 	and.w	r3, r3, #4
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f000 80a6 	beq.w	800ab18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a9d0:	4b2a      	ldr	r3, [pc, #168]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a9d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10d      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9dc:	4b27      	ldr	r3, [pc, #156]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a9de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e0:	4a26      	ldr	r2, [pc, #152]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a9e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9e6:	6593      	str	r3, [r2, #88]	; 0x58
 800a9e8:	4b24      	ldr	r3, [pc, #144]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800a9ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9f0:	60bb      	str	r3, [r7, #8]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a9f8:	4b21      	ldr	r3, [pc, #132]	; (800aa80 <HAL_RCC_OscConfig+0x508>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d118      	bne.n	800aa36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa04:	4b1e      	ldr	r3, [pc, #120]	; (800aa80 <HAL_RCC_OscConfig+0x508>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a1d      	ldr	r2, [pc, #116]	; (800aa80 <HAL_RCC_OscConfig+0x508>)
 800aa0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa10:	f7fb fe98 	bl	8006744 <HAL_GetTick>
 800aa14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa16:	e008      	b.n	800aa2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa18:	f7fb fe94 	bl	8006744 <HAL_GetTick>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d901      	bls.n	800aa2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e1c6      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa2a:	4b15      	ldr	r3, [pc, #84]	; (800aa80 <HAL_RCC_OscConfig+0x508>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d0f0      	beq.n	800aa18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d108      	bne.n	800aa50 <HAL_RCC_OscConfig+0x4d8>
 800aa3e:	4b0f      	ldr	r3, [pc, #60]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800aa40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa44:	4a0d      	ldr	r2, [pc, #52]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800aa46:	f043 0301 	orr.w	r3, r3, #1
 800aa4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aa4e:	e029      	b.n	800aaa4 <HAL_RCC_OscConfig+0x52c>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	2b05      	cmp	r3, #5
 800aa56:	d115      	bne.n	800aa84 <HAL_RCC_OscConfig+0x50c>
 800aa58:	4b08      	ldr	r3, [pc, #32]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800aa5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa5e:	4a07      	ldr	r2, [pc, #28]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800aa60:	f043 0304 	orr.w	r3, r3, #4
 800aa64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aa68:	4b04      	ldr	r3, [pc, #16]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800aa6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa6e:	4a03      	ldr	r2, [pc, #12]	; (800aa7c <HAL_RCC_OscConfig+0x504>)
 800aa70:	f043 0301 	orr.w	r3, r3, #1
 800aa74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aa78:	e014      	b.n	800aaa4 <HAL_RCC_OscConfig+0x52c>
 800aa7a:	bf00      	nop
 800aa7c:	40021000 	.word	0x40021000
 800aa80:	40007000 	.word	0x40007000
 800aa84:	4b9d      	ldr	r3, [pc, #628]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800aa86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa8a:	4a9c      	ldr	r2, [pc, #624]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800aa8c:	f023 0301 	bic.w	r3, r3, #1
 800aa90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aa94:	4b99      	ldr	r3, [pc, #612]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800aa96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa9a:	4a98      	ldr	r2, [pc, #608]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800aa9c:	f023 0304 	bic.w	r3, r3, #4
 800aaa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d016      	beq.n	800aada <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaac:	f7fb fe4a 	bl	8006744 <HAL_GetTick>
 800aab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aab2:	e00a      	b.n	800aaca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aab4:	f7fb fe46 	bl	8006744 <HAL_GetTick>
 800aab8:	4602      	mov	r2, r0
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	f241 3288 	movw	r2, #5000	; 0x1388
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d901      	bls.n	800aaca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e176      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aaca:	4b8c      	ldr	r3, [pc, #560]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800aacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d0ed      	beq.n	800aab4 <HAL_RCC_OscConfig+0x53c>
 800aad8:	e015      	b.n	800ab06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aada:	f7fb fe33 	bl	8006744 <HAL_GetTick>
 800aade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aae0:	e00a      	b.n	800aaf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aae2:	f7fb fe2f 	bl	8006744 <HAL_GetTick>
 800aae6:	4602      	mov	r2, r0
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d901      	bls.n	800aaf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	e15f      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aaf8:	4b80      	ldr	r3, [pc, #512]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800aafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aafe:	f003 0302 	and.w	r3, r3, #2
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1ed      	bne.n	800aae2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab06:	7ffb      	ldrb	r3, [r7, #31]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d105      	bne.n	800ab18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab0c:	4b7b      	ldr	r3, [pc, #492]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ab0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab10:	4a7a      	ldr	r2, [pc, #488]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ab12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 0320 	and.w	r3, r3, #32
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d03c      	beq.n	800ab9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d01c      	beq.n	800ab66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ab2c:	4b73      	ldr	r3, [pc, #460]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ab2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab32:	4a72      	ldr	r2, [pc, #456]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ab34:	f043 0301 	orr.w	r3, r3, #1
 800ab38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab3c:	f7fb fe02 	bl	8006744 <HAL_GetTick>
 800ab40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ab42:	e008      	b.n	800ab56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab44:	f7fb fdfe 	bl	8006744 <HAL_GetTick>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d901      	bls.n	800ab56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e130      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ab56:	4b69      	ldr	r3, [pc, #420]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ab58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d0ef      	beq.n	800ab44 <HAL_RCC_OscConfig+0x5cc>
 800ab64:	e01b      	b.n	800ab9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ab66:	4b65      	ldr	r3, [pc, #404]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ab68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab6c:	4a63      	ldr	r2, [pc, #396]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ab6e:	f023 0301 	bic.w	r3, r3, #1
 800ab72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab76:	f7fb fde5 	bl	8006744 <HAL_GetTick>
 800ab7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ab7c:	e008      	b.n	800ab90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab7e:	f7fb fde1 	bl	8006744 <HAL_GetTick>
 800ab82:	4602      	mov	r2, r0
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d901      	bls.n	800ab90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e113      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ab90:	4b5a      	ldr	r3, [pc, #360]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ab92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab96:	f003 0302 	and.w	r3, r3, #2
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1ef      	bne.n	800ab7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f000 8107 	beq.w	800adb6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abac:	2b02      	cmp	r3, #2
 800abae:	f040 80cf 	bne.w	800ad50 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800abb2:	4b52      	ldr	r3, [pc, #328]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f003 0203 	and.w	r2, r3, #3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d12c      	bne.n	800ac20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd0:	3b01      	subs	r3, #1
 800abd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d123      	bne.n	800ac20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d11b      	bne.n	800ac20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d113      	bne.n	800ac20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac02:	085b      	lsrs	r3, r3, #1
 800ac04:	3b01      	subs	r3, #1
 800ac06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d109      	bne.n	800ac20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac16:	085b      	lsrs	r3, r3, #1
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d071      	beq.n	800ad04 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	2b0c      	cmp	r3, #12
 800ac24:	d068      	beq.n	800acf8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ac26:	4b35      	ldr	r3, [pc, #212]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d105      	bne.n	800ac3e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ac32:	4b32      	ldr	r3, [pc, #200]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e0ba      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ac42:	4b2e      	ldr	r3, [pc, #184]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a2d      	ldr	r2, [pc, #180]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ac48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ac4e:	f7fb fd79 	bl	8006744 <HAL_GetTick>
 800ac52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac54:	e008      	b.n	800ac68 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac56:	f7fb fd75 	bl	8006744 <HAL_GetTick>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d901      	bls.n	800ac68 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800ac64:	2303      	movs	r3, #3
 800ac66:	e0a7      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac68:	4b24      	ldr	r3, [pc, #144]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1f0      	bne.n	800ac56 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac74:	4b21      	ldr	r3, [pc, #132]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800ac76:	68da      	ldr	r2, [r3, #12]
 800ac78:	4b21      	ldr	r3, [pc, #132]	; (800ad00 <HAL_RCC_OscConfig+0x788>)
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ac84:	3a01      	subs	r2, #1
 800ac86:	0112      	lsls	r2, r2, #4
 800ac88:	4311      	orrs	r1, r2
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac8e:	0212      	lsls	r2, r2, #8
 800ac90:	4311      	orrs	r1, r2
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ac96:	0852      	lsrs	r2, r2, #1
 800ac98:	3a01      	subs	r2, #1
 800ac9a:	0552      	lsls	r2, r2, #21
 800ac9c:	4311      	orrs	r1, r2
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aca2:	0852      	lsrs	r2, r2, #1
 800aca4:	3a01      	subs	r2, #1
 800aca6:	0652      	lsls	r2, r2, #25
 800aca8:	4311      	orrs	r1, r2
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800acae:	06d2      	lsls	r2, r2, #27
 800acb0:	430a      	orrs	r2, r1
 800acb2:	4912      	ldr	r1, [pc, #72]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800acb4:	4313      	orrs	r3, r2
 800acb6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800acb8:	4b10      	ldr	r3, [pc, #64]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a0f      	ldr	r2, [pc, #60]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800acbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800acc4:	4b0d      	ldr	r3, [pc, #52]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	4a0c      	ldr	r2, [pc, #48]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800acca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800acd0:	f7fb fd38 	bl	8006744 <HAL_GetTick>
 800acd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acd6:	e008      	b.n	800acea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acd8:	f7fb fd34 	bl	8006744 <HAL_GetTick>
 800acdc:	4602      	mov	r2, r0
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d901      	bls.n	800acea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e066      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acea:	4b04      	ldr	r3, [pc, #16]	; (800acfc <HAL_RCC_OscConfig+0x784>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d0f0      	beq.n	800acd8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800acf6:	e05e      	b.n	800adb6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e05d      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
 800acfc:	40021000 	.word	0x40021000
 800ad00:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad04:	4b2e      	ldr	r3, [pc, #184]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d152      	bne.n	800adb6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ad10:	4b2b      	ldr	r3, [pc, #172]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a2a      	ldr	r2, [pc, #168]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ad1c:	4b28      	ldr	r3, [pc, #160]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	4a27      	ldr	r2, [pc, #156]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ad28:	f7fb fd0c 	bl	8006744 <HAL_GetTick>
 800ad2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad2e:	e008      	b.n	800ad42 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad30:	f7fb fd08 	bl	8006744 <HAL_GetTick>
 800ad34:	4602      	mov	r2, r0
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d901      	bls.n	800ad42 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	e03a      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad42:	4b1f      	ldr	r3, [pc, #124]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d0f0      	beq.n	800ad30 <HAL_RCC_OscConfig+0x7b8>
 800ad4e:	e032      	b.n	800adb6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	2b0c      	cmp	r3, #12
 800ad54:	d02d      	beq.n	800adb2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad56:	4b1a      	ldr	r3, [pc, #104]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a19      	ldr	r2, [pc, #100]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad60:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800ad62:	4b17      	ldr	r3, [pc, #92]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d105      	bne.n	800ad7a <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800ad6e:	4b14      	ldr	r3, [pc, #80]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	4a13      	ldr	r2, [pc, #76]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad74:	f023 0303 	bic.w	r3, r3, #3
 800ad78:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ad7a:	4b11      	ldr	r3, [pc, #68]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	4a10      	ldr	r2, [pc, #64]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ad80:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ad84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad88:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad8a:	f7fb fcdb 	bl	8006744 <HAL_GetTick>
 800ad8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad90:	e008      	b.n	800ada4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad92:	f7fb fcd7 	bl	8006744 <HAL_GetTick>
 800ad96:	4602      	mov	r2, r0
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d901      	bls.n	800ada4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e009      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ada4:	4b06      	ldr	r3, [pc, #24]	; (800adc0 <HAL_RCC_OscConfig+0x848>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1f0      	bne.n	800ad92 <HAL_RCC_OscConfig+0x81a>
 800adb0:	e001      	b.n	800adb6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e000      	b.n	800adb8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3720      	adds	r7, #32
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	40021000 	.word	0x40021000

0800adc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800adce:	2300      	movs	r3, #0
 800add0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d101      	bne.n	800addc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e10f      	b.n	800affc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800addc:	4b89      	ldr	r3, [pc, #548]	; (800b004 <HAL_RCC_ClockConfig+0x240>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 030f 	and.w	r3, r3, #15
 800ade4:	683a      	ldr	r2, [r7, #0]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d910      	bls.n	800ae0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adea:	4b86      	ldr	r3, [pc, #536]	; (800b004 <HAL_RCC_ClockConfig+0x240>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f023 020f 	bic.w	r2, r3, #15
 800adf2:	4984      	ldr	r1, [pc, #528]	; (800b004 <HAL_RCC_ClockConfig+0x240>)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800adfa:	4b82      	ldr	r3, [pc, #520]	; (800b004 <HAL_RCC_ClockConfig+0x240>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 030f 	and.w	r3, r3, #15
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d001      	beq.n	800ae0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e0f7      	b.n	800affc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 8089 	beq.w	800af2c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	2b03      	cmp	r3, #3
 800ae20:	d133      	bne.n	800ae8a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae22:	4b79      	ldr	r3, [pc, #484]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e0e4      	b.n	800affc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800ae32:	f000 fa0f 	bl	800b254 <RCC_GetSysClockFreqFromPLLSource>
 800ae36:	4603      	mov	r3, r0
 800ae38:	4a74      	ldr	r2, [pc, #464]	; (800b00c <HAL_RCC_ClockConfig+0x248>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d955      	bls.n	800aeea <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800ae3e:	4b72      	ldr	r3, [pc, #456]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10a      	bne.n	800ae60 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ae4a:	4b6f      	ldr	r3, [pc, #444]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae52:	4a6d      	ldr	r2, [pc, #436]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800ae54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ae5a:	2380      	movs	r3, #128	; 0x80
 800ae5c:	617b      	str	r3, [r7, #20]
 800ae5e:	e044      	b.n	800aeea <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0302 	and.w	r3, r3, #2
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d03e      	beq.n	800aeea <HAL_RCC_ClockConfig+0x126>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d13a      	bne.n	800aeea <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ae74:	4b64      	ldr	r3, [pc, #400]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae7c:	4a62      	ldr	r2, [pc, #392]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800ae7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae82:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ae84:	2380      	movs	r3, #128	; 0x80
 800ae86:	617b      	str	r3, [r7, #20]
 800ae88:	e02f      	b.n	800aeea <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d107      	bne.n	800aea2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ae92:	4b5d      	ldr	r3, [pc, #372]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d115      	bne.n	800aeca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e0ac      	b.n	800affc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d107      	bne.n	800aeba <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aeaa:	4b57      	ldr	r3, [pc, #348]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0302 	and.w	r3, r3, #2
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d109      	bne.n	800aeca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e0a0      	b.n	800affc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aeba:	4b53      	ldr	r3, [pc, #332]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e098      	b.n	800affc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800aeca:	f000 f8a7 	bl	800b01c <HAL_RCC_GetSysClockFreq>
 800aece:	4603      	mov	r3, r0
 800aed0:	4a4e      	ldr	r2, [pc, #312]	; (800b00c <HAL_RCC_ClockConfig+0x248>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d909      	bls.n	800aeea <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aed6:	4b4c      	ldr	r3, [pc, #304]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aede:	4a4a      	ldr	r2, [pc, #296]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800aee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800aee6:	2380      	movs	r3, #128	; 0x80
 800aee8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aeea:	4b47      	ldr	r3, [pc, #284]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	f023 0203 	bic.w	r2, r3, #3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	4944      	ldr	r1, [pc, #272]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aefc:	f7fb fc22 	bl	8006744 <HAL_GetTick>
 800af00:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af02:	e00a      	b.n	800af1a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af04:	f7fb fc1e 	bl	8006744 <HAL_GetTick>
 800af08:	4602      	mov	r2, r0
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af12:	4293      	cmp	r3, r2
 800af14:	d901      	bls.n	800af1a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	e070      	b.n	800affc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af1a:	4b3b      	ldr	r3, [pc, #236]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	f003 020c 	and.w	r2, r3, #12
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	429a      	cmp	r2, r3
 800af2a:	d1eb      	bne.n	800af04 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 0302 	and.w	r3, r3, #2
 800af34:	2b00      	cmp	r3, #0
 800af36:	d009      	beq.n	800af4c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af38:	4b33      	ldr	r3, [pc, #204]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	4930      	ldr	r1, [pc, #192]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800af46:	4313      	orrs	r3, r2
 800af48:	608b      	str	r3, [r1, #8]
 800af4a:	e008      	b.n	800af5e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	2b80      	cmp	r3, #128	; 0x80
 800af50:	d105      	bne.n	800af5e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800af52:	4b2d      	ldr	r3, [pc, #180]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	4a2c      	ldr	r2, [pc, #176]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800af58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af5c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800af5e:	4b29      	ldr	r3, [pc, #164]	; (800b004 <HAL_RCC_ClockConfig+0x240>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 030f 	and.w	r3, r3, #15
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d210      	bcs.n	800af8e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af6c:	4b25      	ldr	r3, [pc, #148]	; (800b004 <HAL_RCC_ClockConfig+0x240>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f023 020f 	bic.w	r2, r3, #15
 800af74:	4923      	ldr	r1, [pc, #140]	; (800b004 <HAL_RCC_ClockConfig+0x240>)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	4313      	orrs	r3, r2
 800af7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af7c:	4b21      	ldr	r3, [pc, #132]	; (800b004 <HAL_RCC_ClockConfig+0x240>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 030f 	and.w	r3, r3, #15
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	429a      	cmp	r2, r3
 800af88:	d001      	beq.n	800af8e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e036      	b.n	800affc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 0304 	and.w	r3, r3, #4
 800af96:	2b00      	cmp	r3, #0
 800af98:	d008      	beq.n	800afac <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af9a:	4b1b      	ldr	r3, [pc, #108]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	4918      	ldr	r1, [pc, #96]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800afa8:	4313      	orrs	r3, r2
 800afaa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 0308 	and.w	r3, r3, #8
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d009      	beq.n	800afcc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800afb8:	4b13      	ldr	r3, [pc, #76]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	00db      	lsls	r3, r3, #3
 800afc6:	4910      	ldr	r1, [pc, #64]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800afc8:	4313      	orrs	r3, r2
 800afca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800afcc:	f000 f826 	bl	800b01c <HAL_RCC_GetSysClockFreq>
 800afd0:	4602      	mov	r2, r0
 800afd2:	4b0d      	ldr	r3, [pc, #52]	; (800b008 <HAL_RCC_ClockConfig+0x244>)
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	091b      	lsrs	r3, r3, #4
 800afd8:	f003 030f 	and.w	r3, r3, #15
 800afdc:	490c      	ldr	r1, [pc, #48]	; (800b010 <HAL_RCC_ClockConfig+0x24c>)
 800afde:	5ccb      	ldrb	r3, [r1, r3]
 800afe0:	f003 031f 	and.w	r3, r3, #31
 800afe4:	fa22 f303 	lsr.w	r3, r2, r3
 800afe8:	4a0a      	ldr	r2, [pc, #40]	; (800b014 <HAL_RCC_ClockConfig+0x250>)
 800afea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800afec:	4b0a      	ldr	r3, [pc, #40]	; (800b018 <HAL_RCC_ClockConfig+0x254>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fb fb5b 	bl	80066ac <HAL_InitTick>
 800aff6:	4603      	mov	r3, r0
 800aff8:	73fb      	strb	r3, [r7, #15]

  return status;
 800affa:	7bfb      	ldrb	r3, [r7, #15]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	40022000 	.word	0x40022000
 800b008:	40021000 	.word	0x40021000
 800b00c:	04c4b400 	.word	0x04c4b400
 800b010:	08022964 	.word	0x08022964
 800b014:	20000038 	.word	0x20000038
 800b018:	20000078 	.word	0x20000078

0800b01c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b089      	sub	sp, #36	; 0x24
 800b020:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b022:	2300      	movs	r3, #0
 800b024:	61fb      	str	r3, [r7, #28]
 800b026:	2300      	movs	r3, #0
 800b028:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b02a:	4b3e      	ldr	r3, [pc, #248]	; (800b124 <HAL_RCC_GetSysClockFreq+0x108>)
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	f003 030c 	and.w	r3, r3, #12
 800b032:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b034:	4b3b      	ldr	r3, [pc, #236]	; (800b124 <HAL_RCC_GetSysClockFreq+0x108>)
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	f003 0303 	and.w	r3, r3, #3
 800b03c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d005      	beq.n	800b050 <HAL_RCC_GetSysClockFreq+0x34>
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	2b0c      	cmp	r3, #12
 800b048:	d121      	bne.n	800b08e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d11e      	bne.n	800b08e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b050:	4b34      	ldr	r3, [pc, #208]	; (800b124 <HAL_RCC_GetSysClockFreq+0x108>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0308 	and.w	r3, r3, #8
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d107      	bne.n	800b06c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b05c:	4b31      	ldr	r3, [pc, #196]	; (800b124 <HAL_RCC_GetSysClockFreq+0x108>)
 800b05e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b062:	0a1b      	lsrs	r3, r3, #8
 800b064:	f003 030f 	and.w	r3, r3, #15
 800b068:	61fb      	str	r3, [r7, #28]
 800b06a:	e005      	b.n	800b078 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b06c:	4b2d      	ldr	r3, [pc, #180]	; (800b124 <HAL_RCC_GetSysClockFreq+0x108>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	091b      	lsrs	r3, r3, #4
 800b072:	f003 030f 	and.w	r3, r3, #15
 800b076:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b078:	4a2b      	ldr	r2, [pc, #172]	; (800b128 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b080:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10d      	bne.n	800b0a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b08c:	e00a      	b.n	800b0a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	2b04      	cmp	r3, #4
 800b092:	d102      	bne.n	800b09a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b094:	4b25      	ldr	r3, [pc, #148]	; (800b12c <HAL_RCC_GetSysClockFreq+0x110>)
 800b096:	61bb      	str	r3, [r7, #24]
 800b098:	e004      	b.n	800b0a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	2b08      	cmp	r3, #8
 800b09e:	d101      	bne.n	800b0a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b0a0:	4b22      	ldr	r3, [pc, #136]	; (800b12c <HAL_RCC_GetSysClockFreq+0x110>)
 800b0a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	2b0c      	cmp	r3, #12
 800b0a8:	d134      	bne.n	800b114 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b0aa:	4b1e      	ldr	r3, [pc, #120]	; (800b124 <HAL_RCC_GetSysClockFreq+0x108>)
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	f003 0303 	and.w	r3, r3, #3
 800b0b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d003      	beq.n	800b0c2 <HAL_RCC_GetSysClockFreq+0xa6>
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d003      	beq.n	800b0c8 <HAL_RCC_GetSysClockFreq+0xac>
 800b0c0:	e005      	b.n	800b0ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b0c2:	4b1a      	ldr	r3, [pc, #104]	; (800b12c <HAL_RCC_GetSysClockFreq+0x110>)
 800b0c4:	617b      	str	r3, [r7, #20]
      break;
 800b0c6:	e005      	b.n	800b0d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b0c8:	4b18      	ldr	r3, [pc, #96]	; (800b12c <HAL_RCC_GetSysClockFreq+0x110>)
 800b0ca:	617b      	str	r3, [r7, #20]
      break;
 800b0cc:	e002      	b.n	800b0d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	617b      	str	r3, [r7, #20]
      break;
 800b0d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b0d4:	4b13      	ldr	r3, [pc, #76]	; (800b124 <HAL_RCC_GetSysClockFreq+0x108>)
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	091b      	lsrs	r3, r3, #4
 800b0da:	f003 030f 	and.w	r3, r3, #15
 800b0de:	3301      	adds	r3, #1
 800b0e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b0e2:	4b10      	ldr	r3, [pc, #64]	; (800b124 <HAL_RCC_GetSysClockFreq+0x108>)
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	0a1b      	lsrs	r3, r3, #8
 800b0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ec:	697a      	ldr	r2, [r7, #20]
 800b0ee:	fb03 f202 	mul.w	r2, r3, r2
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b0fa:	4b0a      	ldr	r3, [pc, #40]	; (800b124 <HAL_RCC_GetSysClockFreq+0x108>)
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	0e5b      	lsrs	r3, r3, #25
 800b100:	f003 0303 	and.w	r3, r3, #3
 800b104:	3301      	adds	r3, #1
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b112:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b114:	69bb      	ldr	r3, [r7, #24]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3724      	adds	r7, #36	; 0x24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	40021000 	.word	0x40021000
 800b128:	0802297c 	.word	0x0802297c
 800b12c:	00f42400 	.word	0x00f42400

0800b130 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b130:	b480      	push	{r7}
 800b132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b134:	4b03      	ldr	r3, [pc, #12]	; (800b144 <HAL_RCC_GetHCLKFreq+0x14>)
 800b136:	681b      	ldr	r3, [r3, #0]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	20000038 	.word	0x20000038

0800b148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b14c:	f7ff fff0 	bl	800b130 <HAL_RCC_GetHCLKFreq>
 800b150:	4602      	mov	r2, r0
 800b152:	4b06      	ldr	r3, [pc, #24]	; (800b16c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	0a1b      	lsrs	r3, r3, #8
 800b158:	f003 0307 	and.w	r3, r3, #7
 800b15c:	4904      	ldr	r1, [pc, #16]	; (800b170 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b15e:	5ccb      	ldrb	r3, [r1, r3]
 800b160:	f003 031f 	and.w	r3, r3, #31
 800b164:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b168:	4618      	mov	r0, r3
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	40021000 	.word	0x40021000
 800b170:	08022974 	.word	0x08022974

0800b174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b178:	f7ff ffda 	bl	800b130 <HAL_RCC_GetHCLKFreq>
 800b17c:	4602      	mov	r2, r0
 800b17e:	4b06      	ldr	r3, [pc, #24]	; (800b198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	0adb      	lsrs	r3, r3, #11
 800b184:	f003 0307 	and.w	r3, r3, #7
 800b188:	4904      	ldr	r1, [pc, #16]	; (800b19c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b18a:	5ccb      	ldrb	r3, [r1, r3]
 800b18c:	f003 031f 	and.w	r3, r3, #31
 800b190:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b194:	4618      	mov	r0, r3
 800b196:	bd80      	pop	{r7, pc}
 800b198:	40021000 	.word	0x40021000
 800b19c:	08022974 	.word	0x08022974

0800b1a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b1ac:	4b27      	ldr	r3, [pc, #156]	; (800b24c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b1ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d003      	beq.n	800b1c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b1b8:	f7ff f896 	bl	800a2e8 <HAL_PWREx_GetVoltageRange>
 800b1bc:	6178      	str	r0, [r7, #20]
 800b1be:	e014      	b.n	800b1ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b1c0:	4b22      	ldr	r3, [pc, #136]	; (800b24c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b1c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c4:	4a21      	ldr	r2, [pc, #132]	; (800b24c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b1c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1ca:	6593      	str	r3, [r2, #88]	; 0x58
 800b1cc:	4b1f      	ldr	r3, [pc, #124]	; (800b24c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b1ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1d4:	60fb      	str	r3, [r7, #12]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b1d8:	f7ff f886 	bl	800a2e8 <HAL_PWREx_GetVoltageRange>
 800b1dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b1de:	4b1b      	ldr	r3, [pc, #108]	; (800b24c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e2:	4a1a      	ldr	r2, [pc, #104]	; (800b24c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b1e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1f0:	d10b      	bne.n	800b20a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2b80      	cmp	r3, #128	; 0x80
 800b1f6:	d913      	bls.n	800b220 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2ba0      	cmp	r3, #160	; 0xa0
 800b1fc:	d902      	bls.n	800b204 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b1fe:	2302      	movs	r3, #2
 800b200:	613b      	str	r3, [r7, #16]
 800b202:	e00d      	b.n	800b220 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b204:	2301      	movs	r3, #1
 800b206:	613b      	str	r3, [r7, #16]
 800b208:	e00a      	b.n	800b220 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2b7f      	cmp	r3, #127	; 0x7f
 800b20e:	d902      	bls.n	800b216 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800b210:	2302      	movs	r3, #2
 800b212:	613b      	str	r3, [r7, #16]
 800b214:	e004      	b.n	800b220 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b70      	cmp	r3, #112	; 0x70
 800b21a:	d101      	bne.n	800b220 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b21c:	2301      	movs	r3, #1
 800b21e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b220:	4b0b      	ldr	r3, [pc, #44]	; (800b250 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f023 020f 	bic.w	r2, r3, #15
 800b228:	4909      	ldr	r1, [pc, #36]	; (800b250 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b230:	4b07      	ldr	r3, [pc, #28]	; (800b250 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 030f 	and.w	r3, r3, #15
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d001      	beq.n	800b242 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e000      	b.n	800b244 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3718      	adds	r7, #24
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	40021000 	.word	0x40021000
 800b250:	40022000 	.word	0x40022000

0800b254 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b254:	b480      	push	{r7}
 800b256:	b087      	sub	sp, #28
 800b258:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800b25e:	4b2d      	ldr	r3, [pc, #180]	; (800b314 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	f003 0303 	and.w	r3, r3, #3
 800b266:	2b01      	cmp	r3, #1
 800b268:	d118      	bne.n	800b29c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b26a:	4b2a      	ldr	r3, [pc, #168]	; (800b314 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 0308 	and.w	r3, r3, #8
 800b272:	2b00      	cmp	r3, #0
 800b274:	d107      	bne.n	800b286 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b276:	4b27      	ldr	r3, [pc, #156]	; (800b314 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b27c:	0a1b      	lsrs	r3, r3, #8
 800b27e:	f003 030f 	and.w	r3, r3, #15
 800b282:	617b      	str	r3, [r7, #20]
 800b284:	e005      	b.n	800b292 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b286:	4b23      	ldr	r3, [pc, #140]	; (800b314 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	091b      	lsrs	r3, r3, #4
 800b28c:	f003 030f 	and.w	r3, r3, #15
 800b290:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b292:	4a21      	ldr	r2, [pc, #132]	; (800b318 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b29a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b29c:	4b1d      	ldr	r3, [pc, #116]	; (800b314 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	f003 0303 	and.w	r3, r3, #3
 800b2a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d003      	beq.n	800b2b4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2b03      	cmp	r3, #3
 800b2b0:	d003      	beq.n	800b2ba <RCC_GetSysClockFreqFromPLLSource+0x66>
 800b2b2:	e005      	b.n	800b2c0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800b2b4:	4b19      	ldr	r3, [pc, #100]	; (800b31c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800b2b6:	613b      	str	r3, [r7, #16]
    break;
 800b2b8:	e005      	b.n	800b2c6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800b2ba:	4b18      	ldr	r3, [pc, #96]	; (800b31c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800b2bc:	613b      	str	r3, [r7, #16]
    break;
 800b2be:	e002      	b.n	800b2c6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	613b      	str	r3, [r7, #16]
    break;
 800b2c4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b2c6:	4b13      	ldr	r3, [pc, #76]	; (800b314 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	091b      	lsrs	r3, r3, #4
 800b2cc:	f003 030f 	and.w	r3, r3, #15
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b2d4:	4b0f      	ldr	r3, [pc, #60]	; (800b314 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	0a1b      	lsrs	r3, r3, #8
 800b2da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	fb03 f202 	mul.w	r2, r3, r2
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b2ec:	4b09      	ldr	r3, [pc, #36]	; (800b314 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	0e5b      	lsrs	r3, r3, #25
 800b2f2:	f003 0303 	and.w	r3, r3, #3
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	005b      	lsls	r3, r3, #1
 800b2fa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	fbb2 f3f3 	udiv	r3, r2, r3
 800b304:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800b306:	683b      	ldr	r3, [r7, #0]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	371c      	adds	r7, #28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr
 800b314:	40021000 	.word	0x40021000
 800b318:	0802297c 	.word	0x0802297c
 800b31c:	00f42400 	.word	0x00f42400

0800b320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b328:	2300      	movs	r3, #0
 800b32a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b32c:	2300      	movs	r3, #0
 800b32e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d040      	beq.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b340:	2b80      	cmp	r3, #128	; 0x80
 800b342:	d02a      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b344:	2b80      	cmp	r3, #128	; 0x80
 800b346:	d825      	bhi.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b348:	2b60      	cmp	r3, #96	; 0x60
 800b34a:	d026      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b34c:	2b60      	cmp	r3, #96	; 0x60
 800b34e:	d821      	bhi.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b350:	2b40      	cmp	r3, #64	; 0x40
 800b352:	d006      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800b354:	2b40      	cmp	r3, #64	; 0x40
 800b356:	d81d      	bhi.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d009      	beq.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800b35c:	2b20      	cmp	r3, #32
 800b35e:	d010      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800b360:	e018      	b.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b362:	4b89      	ldr	r3, [pc, #548]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	4a88      	ldr	r2, [pc, #544]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b36c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b36e:	e015      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	3304      	adds	r3, #4
 800b374:	2100      	movs	r1, #0
 800b376:	4618      	mov	r0, r3
 800b378:	f000 fb62 	bl	800ba40 <RCCEx_PLLSAI1_Config>
 800b37c:	4603      	mov	r3, r0
 800b37e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b380:	e00c      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	3320      	adds	r3, #32
 800b386:	2100      	movs	r1, #0
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 fc4d 	bl	800bc28 <RCCEx_PLLSAI2_Config>
 800b38e:	4603      	mov	r3, r0
 800b390:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b392:	e003      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	74fb      	strb	r3, [r7, #19]
      break;
 800b398:	e000      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800b39a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b39c:	7cfb      	ldrb	r3, [r7, #19]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10b      	bne.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b3a2:	4b79      	ldr	r3, [pc, #484]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b3a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3a8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3b0:	4975      	ldr	r1, [pc, #468]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800b3b8:	e001      	b.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ba:	7cfb      	ldrb	r3, [r7, #19]
 800b3bc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d047      	beq.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3d2:	d030      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b3d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3d8:	d82a      	bhi.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b3da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3de:	d02a      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b3e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3e4:	d824      	bhi.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b3e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ea:	d008      	beq.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xde>
 800b3ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3f0:	d81e      	bhi.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00a      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0xec>
 800b3f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3fa:	d010      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b3fc:	e018      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b3fe:	4b62      	ldr	r3, [pc, #392]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	4a61      	ldr	r2, [pc, #388]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b408:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b40a:	e015      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3304      	adds	r3, #4
 800b410:	2100      	movs	r1, #0
 800b412:	4618      	mov	r0, r3
 800b414:	f000 fb14 	bl	800ba40 <RCCEx_PLLSAI1_Config>
 800b418:	4603      	mov	r3, r0
 800b41a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b41c:	e00c      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3320      	adds	r3, #32
 800b422:	2100      	movs	r1, #0
 800b424:	4618      	mov	r0, r3
 800b426:	f000 fbff 	bl	800bc28 <RCCEx_PLLSAI2_Config>
 800b42a:	4603      	mov	r3, r0
 800b42c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b42e:	e003      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	74fb      	strb	r3, [r7, #19]
      break;
 800b434:	e000      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800b436:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b438:	7cfb      	ldrb	r3, [r7, #19]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10b      	bne.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b43e:	4b52      	ldr	r3, [pc, #328]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b440:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b44c:	494e      	ldr	r1, [pc, #312]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b44e:	4313      	orrs	r3, r2
 800b450:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800b454:	e001      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b456:	7cfb      	ldrb	r3, [r7, #19]
 800b458:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b462:	2b00      	cmp	r3, #0
 800b464:	f000 809f 	beq.w	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b468:	2300      	movs	r3, #0
 800b46a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b46c:	4b46      	ldr	r3, [pc, #280]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b46e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800b478:	2301      	movs	r3, #1
 800b47a:	e000      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800b47c:	2300      	movs	r3, #0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00d      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b482:	4b41      	ldr	r3, [pc, #260]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b486:	4a40      	ldr	r2, [pc, #256]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b48c:	6593      	str	r3, [r2, #88]	; 0x58
 800b48e:	4b3e      	ldr	r3, [pc, #248]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b496:	60bb      	str	r3, [r7, #8]
 800b498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b49a:	2301      	movs	r3, #1
 800b49c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b49e:	4b3b      	ldr	r3, [pc, #236]	; (800b58c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a3a      	ldr	r2, [pc, #232]	; (800b58c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b4a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b4aa:	f7fb f94b 	bl	8006744 <HAL_GetTick>
 800b4ae:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b4b0:	e009      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4b2:	f7fb f947 	bl	8006744 <HAL_GetTick>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d902      	bls.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	74fb      	strb	r3, [r7, #19]
        break;
 800b4c4:	e005      	b.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b4c6:	4b31      	ldr	r3, [pc, #196]	; (800b58c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d0ef      	beq.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800b4d2:	7cfb      	ldrb	r3, [r7, #19]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d15b      	bne.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b4d8:	4b2b      	ldr	r3, [pc, #172]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4e2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d01f      	beq.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d019      	beq.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b4f6:	4b24      	ldr	r3, [pc, #144]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b500:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b502:	4b21      	ldr	r3, [pc, #132]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b508:	4a1f      	ldr	r2, [pc, #124]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b50a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b50e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b512:	4b1d      	ldr	r3, [pc, #116]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b518:	4a1b      	ldr	r2, [pc, #108]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b51a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b51e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b522:	4a19      	ldr	r2, [pc, #100]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f003 0301 	and.w	r3, r3, #1
 800b530:	2b00      	cmp	r3, #0
 800b532:	d016      	beq.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b534:	f7fb f906 	bl	8006744 <HAL_GetTick>
 800b538:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b53a:	e00b      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b53c:	f7fb f902 	bl	8006744 <HAL_GetTick>
 800b540:	4602      	mov	r2, r0
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	f241 3288 	movw	r2, #5000	; 0x1388
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d902      	bls.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800b54e:	2303      	movs	r3, #3
 800b550:	74fb      	strb	r3, [r7, #19]
            break;
 800b552:	e006      	b.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b554:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b55a:	f003 0302 	and.w	r3, r3, #2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d0ec      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800b562:	7cfb      	ldrb	r3, [r7, #19]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10c      	bne.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b568:	4b07      	ldr	r3, [pc, #28]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b56a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b56e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b578:	4903      	ldr	r1, [pc, #12]	; (800b588 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b580:	e008      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b582:	7cfb      	ldrb	r3, [r7, #19]
 800b584:	74bb      	strb	r3, [r7, #18]
 800b586:	e005      	b.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800b588:	40021000 	.word	0x40021000
 800b58c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b590:	7cfb      	ldrb	r3, [r7, #19]
 800b592:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b594:	7c7b      	ldrb	r3, [r7, #17]
 800b596:	2b01      	cmp	r3, #1
 800b598:	d105      	bne.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b59a:	4ba0      	ldr	r3, [pc, #640]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b59c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b59e:	4a9f      	ldr	r2, [pc, #636]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 0301 	and.w	r3, r3, #1
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00a      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b5b2:	4b9a      	ldr	r3, [pc, #616]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5b8:	f023 0203 	bic.w	r2, r3, #3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c0:	4996      	ldr	r1, [pc, #600]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 0302 	and.w	r3, r3, #2
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00a      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b5d4:	4b91      	ldr	r3, [pc, #580]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5da:	f023 020c 	bic.w	r2, r3, #12
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e2:	498e      	ldr	r1, [pc, #568]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 0304 	and.w	r3, r3, #4
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00a      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b5f6:	4b89      	ldr	r3, [pc, #548]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b604:	4985      	ldr	r1, [pc, #532]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b606:	4313      	orrs	r3, r2
 800b608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 0308 	and.w	r3, r3, #8
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00a      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b618:	4b80      	ldr	r3, [pc, #512]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b61e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b626:	497d      	ldr	r1, [pc, #500]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b628:	4313      	orrs	r3, r2
 800b62a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0310 	and.w	r3, r3, #16
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00a      	beq.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b63a:	4b78      	ldr	r3, [pc, #480]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b640:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b648:	4974      	ldr	r1, [pc, #464]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b64a:	4313      	orrs	r3, r2
 800b64c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 0320 	and.w	r3, r3, #32
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00a      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b65c:	4b6f      	ldr	r3, [pc, #444]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b662:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66a:	496c      	ldr	r1, [pc, #432]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b66c:	4313      	orrs	r3, r2
 800b66e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00a      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b67e:	4b67      	ldr	r3, [pc, #412]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b684:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b68c:	4963      	ldr	r1, [pc, #396]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b68e:	4313      	orrs	r3, r2
 800b690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00a      	beq.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b6a0:	4b5e      	ldr	r3, [pc, #376]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6ae:	495b      	ldr	r1, [pc, #364]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00a      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b6c2:	4b56      	ldr	r3, [pc, #344]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b6c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d0:	4952      	ldr	r1, [pc, #328]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00a      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b6e4:	4b4d      	ldr	r3, [pc, #308]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b6e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f2:	494a      	ldr	r1, [pc, #296]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00a      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b706:	4b45      	ldr	r3, [pc, #276]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b70c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b714:	4941      	ldr	r1, [pc, #260]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b716:	4313      	orrs	r3, r2
 800b718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00a      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b728:	4b3c      	ldr	r3, [pc, #240]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b72a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b72e:	f023 0203 	bic.w	r2, r3, #3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b736:	4939      	ldr	r1, [pc, #228]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b738:	4313      	orrs	r3, r2
 800b73a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b746:	2b00      	cmp	r3, #0
 800b748:	d028      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b74a:	4b34      	ldr	r3, [pc, #208]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b74c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b750:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b758:	4930      	ldr	r1, [pc, #192]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b75a:	4313      	orrs	r3, r2
 800b75c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b768:	d106      	bne.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b76a:	4b2c      	ldr	r3, [pc, #176]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	4a2b      	ldr	r2, [pc, #172]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b774:	60d3      	str	r3, [r2, #12]
 800b776:	e011      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b77c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b780:	d10c      	bne.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	3304      	adds	r3, #4
 800b786:	2101      	movs	r1, #1
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 f959 	bl	800ba40 <RCCEx_PLLSAI1_Config>
 800b78e:	4603      	mov	r3, r0
 800b790:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b792:	7cfb      	ldrb	r3, [r7, #19]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d001      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800b798:	7cfb      	ldrb	r3, [r7, #19]
 800b79a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d04d      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7b0:	d108      	bne.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800b7b2:	4b1a      	ldr	r3, [pc, #104]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b7b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7b8:	4a18      	ldr	r2, [pc, #96]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b7ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b7be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b7c2:	e012      	b.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800b7c4:	4b15      	ldr	r3, [pc, #84]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b7c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7ca:	4a14      	ldr	r2, [pc, #80]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b7cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7d0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b7d4:	4b11      	ldr	r3, [pc, #68]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b7d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7e2:	490e      	ldr	r1, [pc, #56]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7f2:	d106      	bne.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b7f4:	4b09      	ldr	r3, [pc, #36]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	4a08      	ldr	r2, [pc, #32]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b7fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7fe:	60d3      	str	r3, [r2, #12]
 800b800:	e020      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b80a:	d109      	bne.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b80c:	4b03      	ldr	r3, [pc, #12]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	4a02      	ldr	r2, [pc, #8]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b816:	60d3      	str	r3, [r2, #12]
 800b818:	e014      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b81a:	bf00      	nop
 800b81c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b824:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b828:	d10c      	bne.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	3304      	adds	r3, #4
 800b82e:	2101      	movs	r1, #1
 800b830:	4618      	mov	r0, r3
 800b832:	f000 f905 	bl	800ba40 <RCCEx_PLLSAI1_Config>
 800b836:	4603      	mov	r3, r0
 800b838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b83a:	7cfb      	ldrb	r3, [r7, #19]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800b840:	7cfb      	ldrb	r3, [r7, #19]
 800b842:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d028      	beq.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b850:	4b7a      	ldr	r3, [pc, #488]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b856:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b85e:	4977      	ldr	r1, [pc, #476]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b860:	4313      	orrs	r3, r2
 800b862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b86a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b86e:	d106      	bne.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b870:	4b72      	ldr	r3, [pc, #456]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	4a71      	ldr	r2, [pc, #452]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b87a:	60d3      	str	r3, [r2, #12]
 800b87c:	e011      	b.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b882:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b886:	d10c      	bne.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3304      	adds	r3, #4
 800b88c:	2101      	movs	r1, #1
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 f8d6 	bl	800ba40 <RCCEx_PLLSAI1_Config>
 800b894:	4603      	mov	r3, r0
 800b896:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b898:	7cfb      	ldrb	r3, [r7, #19]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d001      	beq.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800b89e:	7cfb      	ldrb	r3, [r7, #19]
 800b8a0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d01e      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b8ae:	4b63      	ldr	r3, [pc, #396]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8be:	495f      	ldr	r1, [pc, #380]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8d0:	d10c      	bne.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	2102      	movs	r1, #2
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f000 f8b1 	bl	800ba40 <RCCEx_PLLSAI1_Config>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b8e2:	7cfb      	ldrb	r3, [r7, #19]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d001      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800b8e8:	7cfb      	ldrb	r3, [r7, #19]
 800b8ea:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00b      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b8f8:	4b50      	ldr	r3, [pc, #320]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b8fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8fe:	f023 0204 	bic.w	r2, r3, #4
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b908:	494c      	ldr	r1, [pc, #304]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b90a:	4313      	orrs	r3, r2
 800b90c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00b      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b91c:	4b47      	ldr	r3, [pc, #284]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b91e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b922:	f023 0218 	bic.w	r2, r3, #24
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b92c:	4943      	ldr	r1, [pc, #268]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b92e:	4313      	orrs	r3, r2
 800b930:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d035      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b940:	4b3e      	ldr	r3, [pc, #248]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a3d      	ldr	r2, [pc, #244]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b94a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b94c:	f7fa fefa 	bl	8006744 <HAL_GetTick>
 800b950:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b952:	e009      	b.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b954:	f7fa fef6 	bl	8006744 <HAL_GetTick>
 800b958:	4602      	mov	r2, r0
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d902      	bls.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	74fb      	strb	r3, [r7, #19]
        break;
 800b966:	e005      	b.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b968:	4b34      	ldr	r3, [pc, #208]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1ef      	bne.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800b974:	7cfb      	ldrb	r3, [r7, #19]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d113      	bne.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800b97a:	4b30      	ldr	r3, [pc, #192]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b97c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b980:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b98a:	492c      	ldr	r1, [pc, #176]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b98c:	4313      	orrs	r3, r2
 800b98e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	3320      	adds	r3, #32
 800b996:	2102      	movs	r1, #2
 800b998:	4618      	mov	r0, r3
 800b99a:	f000 f945 	bl	800bc28 <RCCEx_PLLSAI2_Config>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800b9a2:	7cfb      	ldrb	r3, [r7, #19]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800b9a8:	7cfb      	ldrb	r3, [r7, #19]
 800b9aa:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d01e      	beq.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800b9b8:	4b20      	ldr	r3, [pc, #128]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b9ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b9be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9c8:	491c      	ldr	r1, [pc, #112]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9da:	d10c      	bne.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	3320      	adds	r3, #32
 800b9e0:	2101      	movs	r1, #1
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 f920 	bl	800bc28 <RCCEx_PLLSAI2_Config>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b9ec:	7cfb      	ldrb	r3, [r7, #19]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800b9f2:	7cfb      	ldrb	r3, [r7, #19]
 800b9f4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d017      	beq.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ba02:	4b0e      	ldr	r3, [pc, #56]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ba04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba12:	490a      	ldr	r1, [pc, #40]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ba14:	4313      	orrs	r3, r2
 800ba16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba24:	d105      	bne.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba26:	4b05      	ldr	r3, [pc, #20]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	4a04      	ldr	r2, [pc, #16]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ba2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba30:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ba32:	7cbb      	ldrb	r3, [r7, #18]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3718      	adds	r7, #24
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	40021000 	.word	0x40021000

0800ba40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ba4e:	4b72      	ldr	r3, [pc, #456]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	f003 0303 	and.w	r3, r3, #3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00e      	beq.n	800ba78 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ba5a:	4b6f      	ldr	r3, [pc, #444]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	f003 0203 	and.w	r2, r3, #3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d103      	bne.n	800ba72 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
       ||
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d142      	bne.n	800baf8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	73fb      	strb	r3, [r7, #15]
 800ba76:	e03f      	b.n	800baf8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b03      	cmp	r3, #3
 800ba7e:	d018      	beq.n	800bab2 <RCCEx_PLLSAI1_Config+0x72>
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d825      	bhi.n	800bad0 <RCCEx_PLLSAI1_Config+0x90>
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d002      	beq.n	800ba8e <RCCEx_PLLSAI1_Config+0x4e>
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d009      	beq.n	800baa0 <RCCEx_PLLSAI1_Config+0x60>
 800ba8c:	e020      	b.n	800bad0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ba8e:	4b62      	ldr	r3, [pc, #392]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 0302 	and.w	r3, r3, #2
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d11d      	bne.n	800bad6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba9e:	e01a      	b.n	800bad6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800baa0:	4b5d      	ldr	r3, [pc, #372]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d116      	bne.n	800bada <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bab0:	e013      	b.n	800bada <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800bab2:	4b59      	ldr	r3, [pc, #356]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10f      	bne.n	800bade <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800babe:	4b56      	ldr	r3, [pc, #344]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d109      	bne.n	800bade <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bace:	e006      	b.n	800bade <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	73fb      	strb	r3, [r7, #15]
      break;
 800bad4:	e004      	b.n	800bae0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800bad6:	bf00      	nop
 800bad8:	e002      	b.n	800bae0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800bada:	bf00      	nop
 800badc:	e000      	b.n	800bae0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800bade:	bf00      	nop
    }

    if(status == HAL_OK)
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d108      	bne.n	800baf8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800bae6:	4b4c      	ldr	r3, [pc, #304]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	f023 0203 	bic.w	r2, r3, #3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4949      	ldr	r1, [pc, #292]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800baf4:	4313      	orrs	r3, r2
 800baf6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f040 8086 	bne.w	800bc0c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800bb00:	4b45      	ldr	r3, [pc, #276]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a44      	ldr	r2, [pc, #272]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bb06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb0c:	f7fa fe1a 	bl	8006744 <HAL_GetTick>
 800bb10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bb12:	e009      	b.n	800bb28 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb14:	f7fa fe16 	bl	8006744 <HAL_GetTick>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d902      	bls.n	800bb28 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	73fb      	strb	r3, [r7, #15]
        break;
 800bb26:	e005      	b.n	800bb34 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bb28:	4b3b      	ldr	r3, [pc, #236]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d1ef      	bne.n	800bb14 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d168      	bne.n	800bc0c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d113      	bne.n	800bb68 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb40:	4b35      	ldr	r3, [pc, #212]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bb42:	691a      	ldr	r2, [r3, #16]
 800bb44:	4b35      	ldr	r3, [pc, #212]	; (800bc1c <RCCEx_PLLSAI1_Config+0x1dc>)
 800bb46:	4013      	ands	r3, r2
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	6892      	ldr	r2, [r2, #8]
 800bb4c:	0211      	lsls	r1, r2, #8
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	68d2      	ldr	r2, [r2, #12]
 800bb52:	06d2      	lsls	r2, r2, #27
 800bb54:	4311      	orrs	r1, r2
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	6852      	ldr	r2, [r2, #4]
 800bb5a:	3a01      	subs	r2, #1
 800bb5c:	0112      	lsls	r2, r2, #4
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	492d      	ldr	r1, [pc, #180]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bb62:	4313      	orrs	r3, r2
 800bb64:	610b      	str	r3, [r1, #16]
 800bb66:	e02d      	b.n	800bbc4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d115      	bne.n	800bb9a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb6e:	4b2a      	ldr	r3, [pc, #168]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bb70:	691a      	ldr	r2, [r3, #16]
 800bb72:	4b2b      	ldr	r3, [pc, #172]	; (800bc20 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb74:	4013      	ands	r3, r2
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	6892      	ldr	r2, [r2, #8]
 800bb7a:	0211      	lsls	r1, r2, #8
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	6912      	ldr	r2, [r2, #16]
 800bb80:	0852      	lsrs	r2, r2, #1
 800bb82:	3a01      	subs	r2, #1
 800bb84:	0552      	lsls	r2, r2, #21
 800bb86:	4311      	orrs	r1, r2
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	6852      	ldr	r2, [r2, #4]
 800bb8c:	3a01      	subs	r2, #1
 800bb8e:	0112      	lsls	r2, r2, #4
 800bb90:	430a      	orrs	r2, r1
 800bb92:	4921      	ldr	r1, [pc, #132]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bb94:	4313      	orrs	r3, r2
 800bb96:	610b      	str	r3, [r1, #16]
 800bb98:	e014      	b.n	800bbc4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb9a:	4b1f      	ldr	r3, [pc, #124]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bb9c:	691a      	ldr	r2, [r3, #16]
 800bb9e:	4b21      	ldr	r3, [pc, #132]	; (800bc24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800bba0:	4013      	ands	r3, r2
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	6892      	ldr	r2, [r2, #8]
 800bba6:	0211      	lsls	r1, r2, #8
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	6952      	ldr	r2, [r2, #20]
 800bbac:	0852      	lsrs	r2, r2, #1
 800bbae:	3a01      	subs	r2, #1
 800bbb0:	0652      	lsls	r2, r2, #25
 800bbb2:	4311      	orrs	r1, r2
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	6852      	ldr	r2, [r2, #4]
 800bbb8:	3a01      	subs	r2, #1
 800bbba:	0112      	lsls	r2, r2, #4
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	4916      	ldr	r1, [pc, #88]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800bbc4:	4b14      	ldr	r3, [pc, #80]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a13      	ldr	r2, [pc, #76]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bbca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bbce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbd0:	f7fa fdb8 	bl	8006744 <HAL_GetTick>
 800bbd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bbd6:	e009      	b.n	800bbec <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bbd8:	f7fa fdb4 	bl	8006744 <HAL_GetTick>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d902      	bls.n	800bbec <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	73fb      	strb	r3, [r7, #15]
          break;
 800bbea:	e005      	b.n	800bbf8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bbec:	4b0a      	ldr	r3, [pc, #40]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d0ef      	beq.n	800bbd8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d106      	bne.n	800bc0c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800bbfe:	4b06      	ldr	r3, [pc, #24]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bc00:	691a      	ldr	r2, [r3, #16]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	699b      	ldr	r3, [r3, #24]
 800bc06:	4904      	ldr	r1, [pc, #16]	; (800bc18 <RCCEx_PLLSAI1_Config+0x1d8>)
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800bc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	40021000 	.word	0x40021000
 800bc1c:	07ff800f 	.word	0x07ff800f
 800bc20:	ff9f800f 	.word	0xff9f800f
 800bc24:	f9ff800f 	.word	0xf9ff800f

0800bc28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800bc36:	4b72      	ldr	r3, [pc, #456]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	f003 0303 	and.w	r3, r3, #3
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00e      	beq.n	800bc60 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800bc42:	4b6f      	ldr	r3, [pc, #444]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	f003 0203 	and.w	r2, r3, #3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d103      	bne.n	800bc5a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
       ||
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d142      	bne.n	800bce0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	73fb      	strb	r3, [r7, #15]
 800bc5e:	e03f      	b.n	800bce0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b03      	cmp	r3, #3
 800bc66:	d018      	beq.n	800bc9a <RCCEx_PLLSAI2_Config+0x72>
 800bc68:	2b03      	cmp	r3, #3
 800bc6a:	d825      	bhi.n	800bcb8 <RCCEx_PLLSAI2_Config+0x90>
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d002      	beq.n	800bc76 <RCCEx_PLLSAI2_Config+0x4e>
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d009      	beq.n	800bc88 <RCCEx_PLLSAI2_Config+0x60>
 800bc74:	e020      	b.n	800bcb8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800bc76:	4b62      	ldr	r3, [pc, #392]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f003 0302 	and.w	r3, r3, #2
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d11d      	bne.n	800bcbe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc86:	e01a      	b.n	800bcbe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800bc88:	4b5d      	ldr	r3, [pc, #372]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d116      	bne.n	800bcc2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc98:	e013      	b.n	800bcc2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800bc9a:	4b59      	ldr	r3, [pc, #356]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10f      	bne.n	800bcc6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800bca6:	4b56      	ldr	r3, [pc, #344]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d109      	bne.n	800bcc6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bcb6:	e006      	b.n	800bcc6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	73fb      	strb	r3, [r7, #15]
      break;
 800bcbc:	e004      	b.n	800bcc8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800bcbe:	bf00      	nop
 800bcc0:	e002      	b.n	800bcc8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800bcc2:	bf00      	nop
 800bcc4:	e000      	b.n	800bcc8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800bcc6:	bf00      	nop
    }

    if(status == HAL_OK)
 800bcc8:	7bfb      	ldrb	r3, [r7, #15]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d108      	bne.n	800bce0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800bcce:	4b4c      	ldr	r3, [pc, #304]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	f023 0203 	bic.w	r2, r3, #3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4949      	ldr	r1, [pc, #292]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800bce0:	7bfb      	ldrb	r3, [r7, #15]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	f040 8086 	bne.w	800bdf4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800bce8:	4b45      	ldr	r3, [pc, #276]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a44      	ldr	r2, [pc, #272]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bcee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcf4:	f7fa fd26 	bl	8006744 <HAL_GetTick>
 800bcf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bcfa:	e009      	b.n	800bd10 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bcfc:	f7fa fd22 	bl	8006744 <HAL_GetTick>
 800bd00:	4602      	mov	r2, r0
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	1ad3      	subs	r3, r2, r3
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d902      	bls.n	800bd10 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800bd0a:	2303      	movs	r3, #3
 800bd0c:	73fb      	strb	r3, [r7, #15]
        break;
 800bd0e:	e005      	b.n	800bd1c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bd10:	4b3b      	ldr	r3, [pc, #236]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1ef      	bne.n	800bcfc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d168      	bne.n	800bdf4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d113      	bne.n	800bd50 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bd28:	4b35      	ldr	r3, [pc, #212]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bd2a:	695a      	ldr	r2, [r3, #20]
 800bd2c:	4b35      	ldr	r3, [pc, #212]	; (800be04 <RCCEx_PLLSAI2_Config+0x1dc>)
 800bd2e:	4013      	ands	r3, r2
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	6892      	ldr	r2, [r2, #8]
 800bd34:	0211      	lsls	r1, r2, #8
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	68d2      	ldr	r2, [r2, #12]
 800bd3a:	06d2      	lsls	r2, r2, #27
 800bd3c:	4311      	orrs	r1, r2
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	6852      	ldr	r2, [r2, #4]
 800bd42:	3a01      	subs	r2, #1
 800bd44:	0112      	lsls	r2, r2, #4
 800bd46:	430a      	orrs	r2, r1
 800bd48:	492d      	ldr	r1, [pc, #180]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	614b      	str	r3, [r1, #20]
 800bd4e:	e02d      	b.n	800bdac <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d115      	bne.n	800bd82 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bd56:	4b2a      	ldr	r3, [pc, #168]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bd58:	695a      	ldr	r2, [r3, #20]
 800bd5a:	4b2b      	ldr	r3, [pc, #172]	; (800be08 <RCCEx_PLLSAI2_Config+0x1e0>)
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	6892      	ldr	r2, [r2, #8]
 800bd62:	0211      	lsls	r1, r2, #8
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	6912      	ldr	r2, [r2, #16]
 800bd68:	0852      	lsrs	r2, r2, #1
 800bd6a:	3a01      	subs	r2, #1
 800bd6c:	0552      	lsls	r2, r2, #21
 800bd6e:	4311      	orrs	r1, r2
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	6852      	ldr	r2, [r2, #4]
 800bd74:	3a01      	subs	r2, #1
 800bd76:	0112      	lsls	r2, r2, #4
 800bd78:	430a      	orrs	r2, r1
 800bd7a:	4921      	ldr	r1, [pc, #132]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	614b      	str	r3, [r1, #20]
 800bd80:	e014      	b.n	800bdac <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bd82:	4b1f      	ldr	r3, [pc, #124]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bd84:	695a      	ldr	r2, [r3, #20]
 800bd86:	4b21      	ldr	r3, [pc, #132]	; (800be0c <RCCEx_PLLSAI2_Config+0x1e4>)
 800bd88:	4013      	ands	r3, r2
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	6892      	ldr	r2, [r2, #8]
 800bd8e:	0211      	lsls	r1, r2, #8
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	6952      	ldr	r2, [r2, #20]
 800bd94:	0852      	lsrs	r2, r2, #1
 800bd96:	3a01      	subs	r2, #1
 800bd98:	0652      	lsls	r2, r2, #25
 800bd9a:	4311      	orrs	r1, r2
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	6852      	ldr	r2, [r2, #4]
 800bda0:	3a01      	subs	r2, #1
 800bda2:	0112      	lsls	r2, r2, #4
 800bda4:	430a      	orrs	r2, r1
 800bda6:	4916      	ldr	r1, [pc, #88]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800bdac:	4b14      	ldr	r3, [pc, #80]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a13      	ldr	r2, [pc, #76]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bdb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdb8:	f7fa fcc4 	bl	8006744 <HAL_GetTick>
 800bdbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bdbe:	e009      	b.n	800bdd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bdc0:	f7fa fcc0 	bl	8006744 <HAL_GetTick>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	d902      	bls.n	800bdd4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	73fb      	strb	r3, [r7, #15]
          break;
 800bdd2:	e005      	b.n	800bde0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bdd4:	4b0a      	ldr	r3, [pc, #40]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d0ef      	beq.n	800bdc0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d106      	bne.n	800bdf4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800bde6:	4b06      	ldr	r3, [pc, #24]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bde8:	695a      	ldr	r2, [r3, #20]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	4904      	ldr	r1, [pc, #16]	; (800be00 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	40021000 	.word	0x40021000
 800be04:	07ff800f 	.word	0x07ff800f
 800be08:	ff9f800f 	.word	0xff9f800f
 800be0c:	f9ff800f 	.word	0xf9ff800f

0800be10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800be18:	2301      	movs	r3, #1
 800be1a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d06c      	beq.n	800befc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d106      	bne.n	800be3c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f7f7 fb9c 	bl	8003574 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2202      	movs	r2, #2
 800be40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	22ca      	movs	r2, #202	; 0xca
 800be4a:	625a      	str	r2, [r3, #36]	; 0x24
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2253      	movs	r2, #83	; 0x53
 800be52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fadd 	bl	800c414 <RTC_EnterInitMode>
 800be5a:	4603      	mov	r3, r0
 800be5c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d14b      	bne.n	800befc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	6812      	ldr	r2, [r2, #0]
 800be6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be76:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	6899      	ldr	r1, [r3, #8]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	685a      	ldr	r2, [r3, #4]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	431a      	orrs	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	699b      	ldr	r3, [r3, #24]
 800be8c:	431a      	orrs	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	430a      	orrs	r2, r1
 800be94:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	68d2      	ldr	r2, [r2, #12]
 800be9e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	6919      	ldr	r1, [r3, #16]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	041a      	lsls	r2, r3, #16
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	430a      	orrs	r2, r1
 800beb2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fae1 	bl	800c47c <RTC_ExitInitMode>
 800beba:	4603      	mov	r3, r0
 800bebc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800bebe:	7bfb      	ldrb	r3, [r7, #15]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d11b      	bne.n	800befc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f022 0203 	bic.w	r2, r2, #3
 800bed2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	69da      	ldr	r2, [r3, #28]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	695b      	ldr	r3, [r3, #20]
 800bee2:	431a      	orrs	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	430a      	orrs	r2, r1
 800beea:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	22ff      	movs	r2, #255	; 0xff
 800bef2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800befc:	7bfb      	ldrb	r3, [r7, #15]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bf06:	b590      	push	{r4, r7, lr}
 800bf08:	b087      	sub	sp, #28
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	60f8      	str	r0, [r7, #12]
 800bf0e:	60b9      	str	r1, [r7, #8]
 800bf10:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d101      	bne.n	800bf20 <HAL_RTC_SetTime+0x1a>
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	e08b      	b.n	800c038 <HAL_RTC_SetTime+0x132>
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	22ca      	movs	r2, #202	; 0xca
 800bf36:	625a      	str	r2, [r3, #36]	; 0x24
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2253      	movs	r2, #83	; 0x53
 800bf3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f000 fa67 	bl	800c414 <RTC_EnterInitMode>
 800bf46:	4603      	mov	r3, r0
 800bf48:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bf4a:	7cfb      	ldrb	r3, [r7, #19]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d163      	bne.n	800c018 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d126      	bne.n	800bfa4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d102      	bne.n	800bf6a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	2200      	movs	r2, #0
 800bf68:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 fac2 	bl	800c4f8 <RTC_ByteToBcd2>
 800bf74:	4603      	mov	r3, r0
 800bf76:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	785b      	ldrb	r3, [r3, #1]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f000 fabb 	bl	800c4f8 <RTC_ByteToBcd2>
 800bf82:	4603      	mov	r3, r0
 800bf84:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bf86:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	789b      	ldrb	r3, [r3, #2]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 fab3 	bl	800c4f8 <RTC_ByteToBcd2>
 800bf92:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bf94:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	78db      	ldrb	r3, [r3, #3]
 800bf9c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	617b      	str	r3, [r7, #20]
 800bfa2:	e018      	b.n	800bfd6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d102      	bne.n	800bfb8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	785b      	ldrb	r3, [r3, #1]
 800bfc2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bfc4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bfca:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	78db      	ldrb	r3, [r3, #3]
 800bfd0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bfe0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bfe4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	689a      	ldr	r2, [r3, #8]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bff4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	6899      	ldr	r1, [r3, #8]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	68da      	ldr	r2, [r3, #12]
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	431a      	orrs	r2, r3
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	430a      	orrs	r2, r1
 800c00c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f000 fa34 	bl	800c47c <RTC_ExitInitMode>
 800c014:	4603      	mov	r3, r0
 800c016:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	22ff      	movs	r2, #255	; 0xff
 800c01e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c020:	7cfb      	ldrb	r3, [r7, #19]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d103      	bne.n	800c02e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2201      	movs	r2, #1
 800c02a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2200      	movs	r2, #0
 800c032:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c036:	7cfb      	ldrb	r3, [r7, #19]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	371c      	adds	r7, #28
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd90      	pop	{r4, r7, pc}

0800c040 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c040:	b590      	push	{r4, r7, lr}
 800c042:	b087      	sub	sp, #28
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d101      	bne.n	800c05a <HAL_RTC_SetDate+0x1a>
 800c056:	2302      	movs	r3, #2
 800c058:	e075      	b.n	800c146 <HAL_RTC_SetDate+0x106>
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2202      	movs	r2, #2
 800c066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10e      	bne.n	800c08e <HAL_RTC_SetDate+0x4e>
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	785b      	ldrb	r3, [r3, #1]
 800c074:	f003 0310 	and.w	r3, r3, #16
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d008      	beq.n	800c08e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	785b      	ldrb	r3, [r3, #1]
 800c080:	f023 0310 	bic.w	r3, r3, #16
 800c084:	b2db      	uxtb	r3, r3
 800c086:	330a      	adds	r3, #10
 800c088:	b2da      	uxtb	r2, r3
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d11c      	bne.n	800c0ce <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	78db      	ldrb	r3, [r3, #3]
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 fa2d 	bl	800c4f8 <RTC_ByteToBcd2>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	785b      	ldrb	r3, [r3, #1]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 fa26 	bl	800c4f8 <RTC_ByteToBcd2>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c0b0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	789b      	ldrb	r3, [r3, #2]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f000 fa1e 	bl	800c4f8 <RTC_ByteToBcd2>
 800c0bc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c0be:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	617b      	str	r3, [r7, #20]
 800c0cc:	e00e      	b.n	800c0ec <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	78db      	ldrb	r3, [r3, #3]
 800c0d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	785b      	ldrb	r3, [r3, #1]
 800c0d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c0da:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c0e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	22ca      	movs	r2, #202	; 0xca
 800c0f2:	625a      	str	r2, [r3, #36]	; 0x24
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2253      	movs	r2, #83	; 0x53
 800c0fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f000 f989 	bl	800c414 <RTC_EnterInitMode>
 800c102:	4603      	mov	r3, r0
 800c104:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c106:	7cfb      	ldrb	r3, [r7, #19]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10c      	bne.n	800c126 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c116:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c11a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f000 f9ad 	bl	800c47c <RTC_ExitInitMode>
 800c122:	4603      	mov	r3, r0
 800c124:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	22ff      	movs	r2, #255	; 0xff
 800c12c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c12e:	7cfb      	ldrb	r3, [r7, #19]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d103      	bne.n	800c13c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2201      	movs	r2, #1
 800c138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c144:	7cfb      	ldrb	r3, [r7, #19]
}
 800c146:	4618      	mov	r0, r3
 800c148:	371c      	adds	r7, #28
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd90      	pop	{r4, r7, pc}
	...

0800c150 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c150:	b590      	push	{r4, r7, lr}
 800c152:	b089      	sub	sp, #36	; 0x24
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d101      	bne.n	800c16a <HAL_RTC_SetAlarm_IT+0x1a>
 800c166:	2302      	movs	r3, #2
 800c168:	e127      	b.n	800c3ba <HAL_RTC_SetAlarm_IT+0x26a>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2202      	movs	r2, #2
 800c176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d137      	bne.n	800c1f0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d102      	bne.n	800c194 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	2200      	movs	r2, #0
 800c192:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	4618      	mov	r0, r3
 800c19a:	f000 f9ad 	bl	800c4f8 <RTC_ByteToBcd2>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	785b      	ldrb	r3, [r3, #1]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 f9a6 	bl	800c4f8 <RTC_ByteToBcd2>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c1b0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	789b      	ldrb	r3, [r3, #2]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f000 f99e 	bl	800c4f8 <RTC_ByteToBcd2>
 800c1bc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c1be:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	78db      	ldrb	r3, [r3, #3]
 800c1c6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800c1c8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f000 f990 	bl	800c4f8 <RTC_ByteToBcd2>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800c1dc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800c1e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	61fb      	str	r3, [r7, #28]
 800c1ee:	e023      	b.n	800c238 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d102      	bne.n	800c204 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	2200      	movs	r2, #0
 800c202:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	785b      	ldrb	r3, [r3, #1]
 800c20e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c210:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c216:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	78db      	ldrb	r3, [r3, #3]
 800c21c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800c21e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c226:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800c228:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800c22e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800c234:	4313      	orrs	r3, r2
 800c236:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	685a      	ldr	r2, [r3, #4]
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	69db      	ldr	r3, [r3, #28]
 800c240:	4313      	orrs	r3, r2
 800c242:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	22ca      	movs	r2, #202	; 0xca
 800c24a:	625a      	str	r2, [r3, #36]	; 0x24
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2253      	movs	r2, #83	; 0x53
 800c252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c25c:	d14a      	bne.n	800c2f4 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	689a      	ldr	r2, [r3, #8]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c26c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	b2da      	uxtb	r2, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800c27e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800c280:	f7fa fa60 	bl	8006744 <HAL_GetTick>
 800c284:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c286:	e015      	b.n	800c2b4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c288:	f7fa fa5c 	bl	8006744 <HAL_GetTick>
 800c28c:	4602      	mov	r2, r0
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c296:	d90d      	bls.n	800c2b4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	22ff      	movs	r2, #255	; 0xff
 800c29e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2203      	movs	r2, #3
 800c2a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	e082      	b.n	800c3ba <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	f003 0301 	and.w	r3, r3, #1
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d0e2      	beq.n	800c288 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	69fa      	ldr	r2, [r7, #28]
 800c2c8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	69ba      	ldr	r2, [r7, #24]
 800c2d0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	689a      	ldr	r2, [r3, #8]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2e0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	689a      	ldr	r2, [r3, #8]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c2f0:	609a      	str	r2, [r3, #8]
 800c2f2:	e049      	b.n	800c388 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	689a      	ldr	r2, [r3, #8]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c302:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	b2da      	uxtb	r2, r3
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f462 7220 	orn	r2, r2, #640	; 0x280
 800c314:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800c316:	f7fa fa15 	bl	8006744 <HAL_GetTick>
 800c31a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c31c:	e015      	b.n	800c34a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c31e:	f7fa fa11 	bl	8006744 <HAL_GetTick>
 800c322:	4602      	mov	r2, r0
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c32c:	d90d      	bls.n	800c34a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	22ff      	movs	r2, #255	; 0xff
 800c334:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2203      	movs	r2, #3
 800c33a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2200      	movs	r2, #0
 800c342:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800c346:	2303      	movs	r3, #3
 800c348:	e037      	b.n	800c3ba <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	f003 0302 	and.w	r3, r3, #2
 800c354:	2b00      	cmp	r3, #0
 800c356:	d0e2      	beq.n	800c31e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	69fa      	ldr	r2, [r7, #28]
 800c35e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	69ba      	ldr	r2, [r7, #24]
 800c366:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	689a      	ldr	r2, [r3, #8]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c376:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	689a      	ldr	r2, [r3, #8]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c386:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800c388:	4b0e      	ldr	r3, [pc, #56]	; (800c3c4 <HAL_RTC_SetAlarm_IT+0x274>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a0d      	ldr	r2, [pc, #52]	; (800c3c4 <HAL_RTC_SetAlarm_IT+0x274>)
 800c38e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c392:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800c394:	4b0b      	ldr	r3, [pc, #44]	; (800c3c4 <HAL_RTC_SetAlarm_IT+0x274>)
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	4a0a      	ldr	r2, [pc, #40]	; (800c3c4 <HAL_RTC_SetAlarm_IT+0x274>)
 800c39a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c39e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	22ff      	movs	r2, #255	; 0xff
 800c3a6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3724      	adds	r7, #36	; 0x24
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd90      	pop	{r4, r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	40010400 	.word	0x40010400

0800c3c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68da      	ldr	r2, [r3, #12]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c3de:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800c3e0:	f7fa f9b0 	bl	8006744 <HAL_GetTick>
 800c3e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c3e6:	e009      	b.n	800c3fc <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c3e8:	f7fa f9ac 	bl	8006744 <HAL_GetTick>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c3f6:	d901      	bls.n	800c3fc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	e007      	b.n	800c40c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	f003 0320 	and.w	r3, r3, #32
 800c406:	2b00      	cmp	r3, #0
 800c408:	d0ee      	beq.n	800c3e8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c41c:	2300      	movs	r3, #0
 800c41e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d120      	bne.n	800c470 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f04f 32ff 	mov.w	r2, #4294967295
 800c436:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c438:	f7fa f984 	bl	8006744 <HAL_GetTick>
 800c43c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c43e:	e00d      	b.n	800c45c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c440:	f7fa f980 	bl	8006744 <HAL_GetTick>
 800c444:	4602      	mov	r2, r0
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c44e:	d905      	bls.n	800c45c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c450:	2303      	movs	r3, #3
 800c452:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2203      	movs	r2, #3
 800c458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c466:	2b00      	cmp	r3, #0
 800c468:	d102      	bne.n	800c470 <RTC_EnterInitMode+0x5c>
 800c46a:	7bfb      	ldrb	r3, [r7, #15]
 800c46c:	2b03      	cmp	r3, #3
 800c46e:	d1e7      	bne.n	800c440 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800c470:	7bfb      	ldrb	r3, [r7, #15]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
	...

0800c47c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c484:	2300      	movs	r3, #0
 800c486:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c488:	4b1a      	ldr	r3, [pc, #104]	; (800c4f4 <RTC_ExitInitMode+0x78>)
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	4a19      	ldr	r2, [pc, #100]	; (800c4f4 <RTC_ExitInitMode+0x78>)
 800c48e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c492:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c494:	4b17      	ldr	r3, [pc, #92]	; (800c4f4 <RTC_ExitInitMode+0x78>)
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f003 0320 	and.w	r3, r3, #32
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10c      	bne.n	800c4ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7ff ff91 	bl	800c3c8 <HAL_RTC_WaitForSynchro>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d01e      	beq.n	800c4ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2203      	movs	r2, #3
 800c4b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	73fb      	strb	r3, [r7, #15]
 800c4b8:	e017      	b.n	800c4ea <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c4ba:	4b0e      	ldr	r3, [pc, #56]	; (800c4f4 <RTC_ExitInitMode+0x78>)
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	4a0d      	ldr	r2, [pc, #52]	; (800c4f4 <RTC_ExitInitMode+0x78>)
 800c4c0:	f023 0320 	bic.w	r3, r3, #32
 800c4c4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7ff ff7e 	bl	800c3c8 <HAL_RTC_WaitForSynchro>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d005      	beq.n	800c4de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2203      	movs	r2, #3
 800c4d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c4de:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <RTC_ExitInitMode+0x78>)
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	4a04      	ldr	r2, [pc, #16]	; (800c4f4 <RTC_ExitInitMode+0x78>)
 800c4e4:	f043 0320 	orr.w	r3, r3, #32
 800c4e8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3710      	adds	r7, #16
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	40002800 	.word	0x40002800

0800c4f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c502:	2300      	movs	r3, #0
 800c504:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800c506:	79fb      	ldrb	r3, [r7, #7]
 800c508:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800c50a:	e005      	b.n	800c518 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	3301      	adds	r3, #1
 800c510:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800c512:	7afb      	ldrb	r3, [r7, #11]
 800c514:	3b0a      	subs	r3, #10
 800c516:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800c518:	7afb      	ldrb	r3, [r7, #11]
 800c51a:	2b09      	cmp	r3, #9
 800c51c:	d8f6      	bhi.n	800c50c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	b2db      	uxtb	r3, r3
 800c522:	011b      	lsls	r3, r3, #4
 800c524:	b2da      	uxtb	r2, r3
 800c526:	7afb      	ldrb	r3, [r7, #11]
 800c528:	4313      	orrs	r3, r2
 800c52a:	b2db      	uxtb	r3, r3
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d101      	bne.n	800c550 <HAL_RTCEx_SetTamper+0x18>
 800c54c:	2302      	movs	r3, #2
 800c54e:	e0a9      	b.n	800c6a4 <HAL_RTCEx_SetTamper+0x16c>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2202      	movs	r2, #2
 800c55c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Read register */
  tmpreg = hrtc->Instance->TAMPCR;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c566:	60fb      	str	r3, [r7, #12]

#if defined(RTC_TAMPER1_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_1) != 0)
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	d021      	beq.n	800c5b8 <HAL_RTCEx_SetTamper+0x80>
  {
    MODIFY_REG(tmpreg,
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f023 1207 	bic.w	r2, r3, #458759	; 0x70007
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	6889      	ldr	r1, [r1, #8]
 800c582:	2900      	cmp	r1, #0
 800c584:	d101      	bne.n	800c58a <HAL_RTCEx_SetTamper+0x52>
 800c586:	2100      	movs	r1, #0
 800c588:	e000      	b.n	800c58c <HAL_RTCEx_SetTamper+0x54>
 800c58a:	2102      	movs	r1, #2
 800c58c:	430b      	orrs	r3, r1
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	68c9      	ldr	r1, [r1, #12]
 800c592:	2900      	cmp	r1, #0
 800c594:	d101      	bne.n	800c59a <HAL_RTCEx_SetTamper+0x62>
 800c596:	2100      	movs	r1, #0
 800c598:	e001      	b.n	800c59e <HAL_RTCEx_SetTamper+0x66>
 800c59a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800c59e:	430b      	orrs	r3, r1
 800c5a0:	6839      	ldr	r1, [r7, #0]
 800c5a2:	6909      	ldr	r1, [r1, #16]
 800c5a4:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800c5a8:	d102      	bne.n	800c5b0 <HAL_RTCEx_SetTamper+0x78>
 800c5aa:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800c5ae:	e000      	b.n	800c5b2 <HAL_RTCEx_SetTamper+0x7a>
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	430b      	orrs	r3, r1
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER1_SUPPORT */

#if defined(RTC_TAMPER2_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_2) != 0)
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f003 0308 	and.w	r3, r3, #8
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d023      	beq.n	800c60c <HAL_RTCEx_SetTamper+0xd4>
  {
    MODIFY_REG(tmpreg,
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 800c5ca:	f023 031c 	bic.w	r3, r3, #28
 800c5ce:	683a      	ldr	r2, [r7, #0]
 800c5d0:	6812      	ldr	r2, [r2, #0]
 800c5d2:	6839      	ldr	r1, [r7, #0]
 800c5d4:	6889      	ldr	r1, [r1, #8]
 800c5d6:	2900      	cmp	r1, #0
 800c5d8:	d101      	bne.n	800c5de <HAL_RTCEx_SetTamper+0xa6>
 800c5da:	2100      	movs	r1, #0
 800c5dc:	e000      	b.n	800c5e0 <HAL_RTCEx_SetTamper+0xa8>
 800c5de:	2110      	movs	r1, #16
 800c5e0:	430a      	orrs	r2, r1
 800c5e2:	6839      	ldr	r1, [r7, #0]
 800c5e4:	68c9      	ldr	r1, [r1, #12]
 800c5e6:	2900      	cmp	r1, #0
 800c5e8:	d101      	bne.n	800c5ee <HAL_RTCEx_SetTamper+0xb6>
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	e001      	b.n	800c5f2 <HAL_RTCEx_SetTamper+0xba>
 800c5ee:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	6909      	ldr	r1, [r1, #16]
 800c5f8:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800c5fc:	d102      	bne.n	800c604 <HAL_RTCEx_SetTamper+0xcc>
 800c5fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c602:	e000      	b.n	800c606 <HAL_RTCEx_SetTamper+0xce>
 800c604:	2100      	movs	r1, #0
 800c606:	430a      	orrs	r2, r1
 800c608:	4313      	orrs	r3, r2
 800c60a:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER2_SUPPORT */

#if defined(RTC_TAMPER3_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_3) != 0)
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f003 0320 	and.w	r3, r3, #32
 800c614:	2b00      	cmp	r3, #0
 800c616:	d023      	beq.n	800c660 <HAL_RTCEx_SetTamper+0x128>
  {
    MODIFY_REG(tmpreg,
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800c61e:	f023 0364 	bic.w	r3, r3, #100	; 0x64
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	6812      	ldr	r2, [r2, #0]
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6889      	ldr	r1, [r1, #8]
 800c62a:	2900      	cmp	r1, #0
 800c62c:	d101      	bne.n	800c632 <HAL_RTCEx_SetTamper+0xfa>
 800c62e:	2100      	movs	r1, #0
 800c630:	e000      	b.n	800c634 <HAL_RTCEx_SetTamper+0xfc>
 800c632:	2140      	movs	r1, #64	; 0x40
 800c634:	430a      	orrs	r2, r1
 800c636:	6839      	ldr	r1, [r7, #0]
 800c638:	68c9      	ldr	r1, [r1, #12]
 800c63a:	2900      	cmp	r1, #0
 800c63c:	d101      	bne.n	800c642 <HAL_RTCEx_SetTamper+0x10a>
 800c63e:	2100      	movs	r1, #0
 800c640:	e001      	b.n	800c646 <HAL_RTCEx_SetTamper+0x10e>
 800c642:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800c646:	430a      	orrs	r2, r1
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6909      	ldr	r1, [r1, #16]
 800c64c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800c650:	d102      	bne.n	800c658 <HAL_RTCEx_SetTamper+0x120>
 800c652:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c656:	e000      	b.n	800c65a <HAL_RTCEx_SetTamper+0x122>
 800c658:	2100      	movs	r1, #0
 800c65a:	430a      	orrs	r2, r1
 800c65c:	4313      	orrs	r3, r2
 800c65e:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Update common parameters */
  MODIFY_REG(tmpreg,
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	6951      	ldr	r1, [r2, #20]
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	6992      	ldr	r2, [r2, #24]
 800c672:	4311      	orrs	r1, r2
 800c674:	683a      	ldr	r2, [r7, #0]
 800c676:	69d2      	ldr	r2, [r2, #28]
 800c678:	4311      	orrs	r1, r2
 800c67a:	683a      	ldr	r2, [r7, #0]
 800c67c:	6a12      	ldr	r2, [r2, #32]
 800c67e:	4311      	orrs	r1, r2
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c684:	430a      	orrs	r2, r1
 800c686:	4313      	orrs	r3, r2
 800c688:	60fb      	str	r3, [r7, #12]
             sTamper->Filter | sTamper->SamplingFrequency | sTamper->PrechargeDuration | sTamper->TamperPullUp | \
             sTamper->TimeStampOnTamperDetection \
             );

  /* Set register */
  WRITE_REG (hrtc->Instance->TAMPCR, tmpreg);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2201      	movs	r2, #1
 800c696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08a      	sub	sp, #40	; 0x28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d101      	bne.n	800c6c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e075      	b.n	800c7ae <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d105      	bne.n	800c6da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f8f7 	bl	800c8c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2203      	movs	r2, #3
 800c6de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f868 	bl	800c7b8 <HAL_SD_InitCard>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e05d      	b.n	800c7ae <HAL_SD_Init+0xfe>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c6f2:	f107 0308 	add.w	r3, r7, #8
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fda3 	bl	800d244 <HAL_SD_GetCardStatus>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	e052      	b.n	800c7ae <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c708:	7e3b      	ldrb	r3, [r7, #24]
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c70e:	7e7b      	ldrb	r3, [r7, #25]
 800c710:	b2db      	uxtb	r3, r3
 800c712:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d10a      	bne.n	800c732 <HAL_SD_Init+0x82>
 800c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d102      	bne.n	800c728 <HAL_SD_Init+0x78>
 800c722:	6a3b      	ldr	r3, [r7, #32]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d004      	beq.n	800c732 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c72e:	65da      	str	r2, [r3, #92]	; 0x5c
 800c730:	e00b      	b.n	800c74a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c736:	2b01      	cmp	r3, #1
 800c738:	d104      	bne.n	800c744 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c740:	65da      	str	r2, [r3, #92]	; 0x5c
 800c742:	e002      	b.n	800c74a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 fe59 	bl	800d408 <HAL_SD_ConfigWideBusOperation>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	e026      	b.n	800c7ae <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c760:	f7f9 fff0 	bl	8006744 <HAL_GetTick>
 800c764:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c766:	e011      	b.n	800c78c <HAL_SD_Init+0xdc>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800c768:	f7f9 ffec 	bl	8006744 <HAL_GetTick>
 800c76c:	4602      	mov	r2, r0
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c776:	d109      	bne.n	800c78c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c77e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800c788:	2303      	movs	r3, #3
 800c78a:	e010      	b.n	800c7ae <HAL_SD_Init+0xfe>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 fee5 	bl	800d55c <HAL_SD_GetCardState>
 800c792:	4603      	mov	r3, r0
 800c794:	2b04      	cmp	r3, #4
 800c796:	d1e7      	bne.n	800c768 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3728      	adds	r7, #40	; 0x28
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
	...

0800c7b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c7b8:	b5b0      	push	{r4, r5, r7, lr}
 800c7ba:	b08e      	sub	sp, #56	; 0x38
 800c7bc:	af04      	add	r7, sp, #16
 800c7be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	617b      	str	r3, [r7, #20]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c7d0:	238a      	movs	r3, #138	; 0x8a
 800c7d2:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d107      	bne.n	800c7ec <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f042 0210 	orr.w	r2, r2, #16
 800c7ea:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681d      	ldr	r5, [r3, #0]
 800c7f0:	466c      	mov	r4, sp
 800c7f2:	f107 0314 	add.w	r3, r7, #20
 800c7f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c7fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c7fe:	f107 0308 	add.w	r3, r7, #8
 800c802:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c804:	4628      	mov	r0, r5
 800c806:	f004 fb69 	bl	8010edc <SDMMC_Init>
 800c80a:	4603      	mov	r3, r0
 800c80c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c814:	2b00      	cmp	r3, #0
 800c816:	d001      	beq.n	800c81c <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 800c818:	2301      	movs	r3, #1
 800c81a:	e04f      	b.n	800c8bc <HAL_SD_InitCard+0x104>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4618      	mov	r0, r3
 800c822:	f004 fba3 	bl	8010f6c <SDMMC_PowerState_ON>
 800c826:	4603      	mov	r3, r0
 800c828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c82c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 800c834:	2301      	movs	r3, #1
 800c836:	e041      	b.n	800c8bc <HAL_SD_InitCard+0x104>
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 ff6f 	bl	800d71c <SD_PowerON>
 800c83e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00b      	beq.n	800c85e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c852:	6a3b      	ldr	r3, [r7, #32]
 800c854:	431a      	orrs	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e02e      	b.n	800c8bc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fe9c 	bl	800d59c <SD_InitCard>
 800c864:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c866:	6a3b      	ldr	r3, [r7, #32]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00b      	beq.n	800c884 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c878:	6a3b      	ldr	r3, [r7, #32]
 800c87a:	431a      	orrs	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c880:	2301      	movs	r3, #1
 800c882:	e01b      	b.n	800c8bc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c88c:	4618      	mov	r0, r3
 800c88e:	f004 fc03 	bl	8011098 <SDMMC_CmdBlockLength>
 800c892:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c894:	6a3b      	ldr	r3, [r7, #32]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00f      	beq.n	800c8ba <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a09      	ldr	r2, [pc, #36]	; (800c8c4 <HAL_SD_InitCard+0x10c>)
 800c8a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8a6:	6a3b      	ldr	r3, [r7, #32]
 800c8a8:	431a      	orrs	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e000      	b.n	800c8bc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3728      	adds	r7, #40	; 0x28
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bdb0      	pop	{r4, r5, r7, pc}
 800c8c4:	1fe00fff 	.word	0x1fe00fff

0800c8c8 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08c      	sub	sp, #48	; 0x30
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	607a      	str	r2, [r7, #4]
 800c8e8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d107      	bne.n	800c904 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	e08d      	b.n	800ca20 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	f040 8086 	bne.w	800ca1e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2200      	movs	r2, #0
 800c916:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	441a      	add	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c922:	429a      	cmp	r2, r3
 800c924:	d907      	bls.n	800c936 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	e074      	b.n	800ca20 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2203      	movs	r2, #3
 800c93a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2200      	movs	r2, #0
 800c944:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	025a      	lsls	r2, r3, #9
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d002      	beq.n	800c962 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 800c95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95e:	025b      	lsls	r3, r3, #9
 800c960:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c962:	f04f 33ff 	mov.w	r3, #4294967295
 800c966:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	025b      	lsls	r3, r3, #9
 800c96c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c96e:	2390      	movs	r3, #144	; 0x90
 800c970:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c972:	2302      	movs	r3, #2
 800c974:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c976:	2300      	movs	r3, #0
 800c978:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800c97a:	2300      	movs	r3, #0
 800c97c:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f107 0210 	add.w	r2, r7, #16
 800c986:	4611      	mov	r1, r2
 800c988:	4618      	mov	r0, r3
 800c98a:	f004 fb59 	bl	8011040 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	68da      	ldr	r2, [r3, #12]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c99c:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d90a      	bls.n	800c9ca <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2282      	movs	r2, #130	; 0x82
 800c9b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f004 fbaf 	bl	8011124 <SDMMC_CmdReadMultiBlock>
 800c9c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c9c8:	e009      	b.n	800c9de <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2281      	movs	r2, #129	; 0x81
 800c9ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f004 fb81 	bl	80110de <SDMMC_CmdReadSingleBlock>
 800c9dc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d012      	beq.n	800ca0a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a0f      	ldr	r2, [pc, #60]	; (800ca28 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c9ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	431a      	orrs	r2, r3
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e00a      	b.n	800ca20 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ca18:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	e000      	b.n	800ca20 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800ca1e:	2302      	movs	r3, #2
  }
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3730      	adds	r7, #48	; 0x30
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	1fe00fff 	.word	0x1fe00fff

0800ca2c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08c      	sub	sp, #48	; 0x30
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
 800ca38:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d107      	bne.n	800ca54 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca50:	2301      	movs	r3, #1
 800ca52:	e08d      	b.n	800cb70 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	f040 8086 	bne.w	800cb6e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	441a      	add	r2, r3
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d907      	bls.n	800ca86 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	e074      	b.n	800cb70 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2203      	movs	r2, #3
 800ca8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2200      	movs	r2, #0
 800ca94:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	68ba      	ldr	r2, [r7, #8]
 800ca9a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	025a      	lsls	r2, r3, #9
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d002      	beq.n	800cab2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caae:	025b      	lsls	r3, r3, #9
 800cab0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cab2:	f04f 33ff 	mov.w	r3, #4294967295
 800cab6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	025b      	lsls	r3, r3, #9
 800cabc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cabe:	2390      	movs	r3, #144	; 0x90
 800cac0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cac2:	2300      	movs	r3, #0
 800cac4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800caca:	2300      	movs	r3, #0
 800cacc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f107 0210 	add.w	r2, r7, #16
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f004 fab1 	bl	8011040 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	68da      	ldr	r2, [r3, #12]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800caec:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2201      	movs	r2, #1
 800cafc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d90a      	bls.n	800cb1a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	22a0      	movs	r2, #160	; 0xa0
 800cb08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb10:	4618      	mov	r0, r3
 800cb12:	f004 fb4d 	bl	80111b0 <SDMMC_CmdWriteMultiBlock>
 800cb16:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cb18:	e009      	b.n	800cb2e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2290      	movs	r2, #144	; 0x90
 800cb1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb26:	4618      	mov	r0, r3
 800cb28:	f004 fb1f 	bl	801116a <SDMMC_CmdWriteSingleBlock>
 800cb2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d012      	beq.n	800cb5a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a0f      	ldr	r2, [pc, #60]	; (800cb78 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800cb3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb42:	431a      	orrs	r2, r3
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2200      	movs	r2, #0
 800cb54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e00a      	b.n	800cb70 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800cb68:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	e000      	b.n	800cb70 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800cb6e:	2302      	movs	r3, #2
  }
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3730      	adds	r7, #48	; 0x30
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	1fe00fff 	.word	0x1fe00fff

0800cb7c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb88:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d008      	beq.n	800cbaa <HAL_SD_IRQHandler+0x2e>
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f003 0308 	and.w	r3, r3, #8
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d003      	beq.n	800cbaa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f001 f92a 	bl	800ddfc <SD_Read_IT>
 800cba8:	e199      	b.n	800cede <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 80ae 	beq.w	800cd16 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cbc2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	6812      	ldr	r2, [r2, #0]
 800cbce:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800cbd2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800cbd6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cbe6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	68da      	ldr	r2, [r3, #12]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbf6:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f003 0308 	and.w	r3, r3, #8
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d038      	beq.n	800cc74 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f003 0302 	and.w	r3, r3, #2
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d104      	bne.n	800cc16 <HAL_SD_IRQHandler+0x9a>
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f003 0320 	and.w	r3, r3, #32
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d011      	beq.n	800cc3a <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f004 faec 	bl	80111f8 <SDMMC_CmdStopTransfer>
 800cc20:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d008      	beq.n	800cc3a <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	431a      	orrs	r2, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 f957 	bl	800cee8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a90      	ldr	r2, [pc, #576]	; (800ce80 <HAL_SD_IRQHandler+0x304>)
 800cc40:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2201      	movs	r2, #1
 800cc46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f003 0301 	and.w	r3, r3, #1
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d104      	bne.n	800cc64 <HAL_SD_IRQHandler+0xe8>
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f003 0302 	and.w	r3, r3, #2
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d003      	beq.n	800cc6c <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7f9 fcf7 	bl	8006658 <HAL_SD_RxCpltCallback>
 800cc6a:	e138      	b.n	800cede <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7f9 fce9 	bl	8006644 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800cc72:	e134      	b.n	800cede <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	f000 812f 	beq.w	800cede <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2200      	movs	r2, #0
 800cc86:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2200      	movs	r2, #0
 800cc96:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f003 0302 	and.w	r3, r3, #2
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d104      	bne.n	800ccac <HAL_SD_IRQHandler+0x130>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f003 0320 	and.w	r3, r3, #32
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d011      	beq.n	800ccd0 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f004 faa1 	bl	80111f8 <SDMMC_CmdStopTransfer>
 800ccb6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d008      	beq.n	800ccd0 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	431a      	orrs	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f90c 	bl	800cee8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f003 0310 	and.w	r3, r3, #16
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d104      	bne.n	800ccf2 <HAL_SD_IRQHandler+0x176>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f003 0320 	and.w	r3, r3, #32
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d002      	beq.n	800ccf8 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f7f9 fca6 	bl	8006644 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f003 0301 	and.w	r3, r3, #1
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d105      	bne.n	800cd0e <HAL_SD_IRQHandler+0x192>
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f003 0302 	and.w	r3, r3, #2
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 80e8 	beq.w	800cede <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7f9 fca2 	bl	8006658 <HAL_SD_RxCpltCallback>
}
 800cd14:	e0e3      	b.n	800cede <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d008      	beq.n	800cd36 <HAL_SD_IRQHandler+0x1ba>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f003 0308 	and.w	r3, r3, #8
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d003      	beq.n	800cd36 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f001 f8b5 	bl	800de9e <SD_Write_IT>
 800cd34:	e0d3      	b.n	800cede <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd3c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 809f 	beq.w	800ce84 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd4c:	f003 0302 	and.w	r3, r3, #2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d005      	beq.n	800cd60 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd58:	f043 0202 	orr.w	r2, r3, #2
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd66:	f003 0308 	and.w	r3, r3, #8
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d005      	beq.n	800cd7a <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd72:	f043 0208 	orr.w	r2, r3, #8
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd80:	f003 0320 	and.w	r3, r3, #32
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d005      	beq.n	800cd94 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8c:	f043 0220 	orr.w	r2, r3, #32
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd9a:	f003 0310 	and.w	r3, r3, #16
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d005      	beq.n	800cdae <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda6:	f043 0210 	orr.w	r2, r3, #16
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a33      	ldr	r2, [pc, #204]	; (800ce80 <HAL_SD_IRQHandler+0x304>)
 800cdb4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cdc4:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	68da      	ldr	r2, [r3, #12]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdd4:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cde4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68da      	ldr	r2, [r3, #12]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cdf4:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f004 f9fc 	bl	80111f8 <SDMMC_CmdStopTransfer>
 800ce00:	4602      	mov	r2, r0
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce06:	431a      	orrs	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	68da      	ldr	r2, [r3, #12]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce1a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce24:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f003 0308 	and.w	r3, r3, #8
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00a      	beq.n	800ce46 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f852 	bl	800cee8 <HAL_SD_ErrorCallback>
}
 800ce44:	e04b      	b.n	800cede <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d046      	beq.n	800cede <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d042      	beq.n	800cede <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ce66:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 f835 	bl	800cee8 <HAL_SD_ErrorCallback>
}
 800ce7e:	e02e      	b.n	800cede <HAL_SD_IRQHandler+0x362>
 800ce80:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d025      	beq.n	800cede <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce9a:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cea2:	f003 0304 	and.w	r3, r3, #4
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d10c      	bne.n	800cec4 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f003 0320 	and.w	r3, r3, #32
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d003      	beq.n	800cebc <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f001 f870 	bl	800df9a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800ceba:	e010      	b.n	800cede <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f001 f858 	bl	800df72 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800cec2:	e00c      	b.n	800cede <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f003 0320 	and.w	r3, r3, #32
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d003      	beq.n	800ced6 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f001 f859 	bl	800df86 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800ced4:	e003      	b.n	800cede <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f001 f841 	bl	800df5e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800cedc:	e7ff      	b.n	800cede <HAL_SD_IRQHandler+0x362>
 800cede:	bf00      	nop
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop

0800cee8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cef0:	bf00      	nop
 800cef2:	370c      	adds	r7, #12
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf0a:	0f9b      	lsrs	r3, r3, #30
 800cf0c:	b2da      	uxtb	r2, r3
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf16:	0e9b      	lsrs	r3, r3, #26
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	f003 030f 	and.w	r3, r3, #15
 800cf1e:	b2da      	uxtb	r2, r3
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf28:	0e1b      	lsrs	r3, r3, #24
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	f003 0303 	and.w	r3, r3, #3
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf3a:	0c1b      	lsrs	r3, r3, #16
 800cf3c:	b2da      	uxtb	r2, r3
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf46:	0a1b      	lsrs	r3, r3, #8
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf52:	b2da      	uxtb	r2, r3
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf5c:	0d1b      	lsrs	r3, r3, #20
 800cf5e:	b29a      	uxth	r2, r3
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf68:	0c1b      	lsrs	r3, r3, #16
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	f003 030f 	and.w	r3, r3, #15
 800cf70:	b2da      	uxtb	r2, r3
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf7a:	0bdb      	lsrs	r3, r3, #15
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	f003 0301 	and.w	r3, r3, #1
 800cf82:	b2da      	uxtb	r2, r3
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf8c:	0b9b      	lsrs	r3, r3, #14
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	f003 0301 	and.w	r3, r3, #1
 800cf94:	b2da      	uxtb	r2, r3
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf9e:	0b5b      	lsrs	r3, r3, #13
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	f003 0301 	and.w	r3, r3, #1
 800cfa6:	b2da      	uxtb	r2, r3
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfb0:	0b1b      	lsrs	r3, r3, #12
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	f003 0301 	and.w	r3, r3, #1
 800cfb8:	b2da      	uxtb	r2, r3
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d163      	bne.n	800d094 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfd0:	009a      	lsls	r2, r3, #2
 800cfd2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cfd6:	4013      	ands	r3, r2
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cfdc:	0f92      	lsrs	r2, r2, #30
 800cfde:	431a      	orrs	r2, r3
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfe8:	0edb      	lsrs	r3, r3, #27
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	f003 0307 	and.w	r3, r3, #7
 800cff0:	b2da      	uxtb	r2, r3
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cffa:	0e1b      	lsrs	r3, r3, #24
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	f003 0307 	and.w	r3, r3, #7
 800d002:	b2da      	uxtb	r2, r3
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d00c:	0d5b      	lsrs	r3, r3, #21
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	f003 0307 	and.w	r3, r3, #7
 800d014:	b2da      	uxtb	r2, r3
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d01e:	0c9b      	lsrs	r3, r3, #18
 800d020:	b2db      	uxtb	r3, r3
 800d022:	f003 0307 	and.w	r3, r3, #7
 800d026:	b2da      	uxtb	r2, r3
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d030:	0bdb      	lsrs	r3, r3, #15
 800d032:	b2db      	uxtb	r3, r3
 800d034:	f003 0307 	and.w	r3, r3, #7
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	1c5a      	adds	r2, r3, #1
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	7e1b      	ldrb	r3, [r3, #24]
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	f003 0307 	and.w	r3, r3, #7
 800d052:	3302      	adds	r3, #2
 800d054:	2201      	movs	r2, #1
 800d056:	fa02 f303 	lsl.w	r3, r2, r3
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d05e:	fb03 f202 	mul.w	r2, r3, r2
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	7a1b      	ldrb	r3, [r3, #8]
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	f003 030f 	and.w	r3, r3, #15
 800d070:	2201      	movs	r2, #1
 800d072:	409a      	lsls	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d080:	0a52      	lsrs	r2, r2, #9
 800d082:	fb03 f202 	mul.w	r2, r3, r2
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d090:	659a      	str	r2, [r3, #88]	; 0x58
 800d092:	e031      	b.n	800d0f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d11d      	bne.n	800d0d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0a0:	041b      	lsls	r3, r3, #16
 800d0a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0aa:	0c1b      	lsrs	r3, r3, #16
 800d0ac:	431a      	orrs	r2, r3
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	029a      	lsls	r2, r3, #10
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0cc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	659a      	str	r2, [r3, #88]	; 0x58
 800d0d6:	e00f      	b.n	800d0f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a58      	ldr	r2, [pc, #352]	; (800d240 <HAL_SD_GetCardCSD+0x344>)
 800d0de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e09d      	b.n	800d234 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0fc:	0b9b      	lsrs	r3, r3, #14
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	f003 0301 	and.w	r3, r3, #1
 800d104:	b2da      	uxtb	r2, r3
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d10e:	09db      	lsrs	r3, r3, #7
 800d110:	b2db      	uxtb	r3, r3
 800d112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d116:	b2da      	uxtb	r2, r3
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d120:	b2db      	uxtb	r3, r3
 800d122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d126:	b2da      	uxtb	r2, r3
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d130:	0fdb      	lsrs	r3, r3, #31
 800d132:	b2da      	uxtb	r2, r3
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d13c:	0f5b      	lsrs	r3, r3, #29
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	f003 0303 	and.w	r3, r3, #3
 800d144:	b2da      	uxtb	r2, r3
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d14e:	0e9b      	lsrs	r3, r3, #26
 800d150:	b2db      	uxtb	r3, r3
 800d152:	f003 0307 	and.w	r3, r3, #7
 800d156:	b2da      	uxtb	r2, r3
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d160:	0d9b      	lsrs	r3, r3, #22
 800d162:	b2db      	uxtb	r3, r3
 800d164:	f003 030f 	and.w	r3, r3, #15
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d172:	0d5b      	lsrs	r3, r3, #21
 800d174:	b2db      	uxtb	r3, r3
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	b2da      	uxtb	r2, r3
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	2200      	movs	r2, #0
 800d186:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d18e:	0c1b      	lsrs	r3, r3, #16
 800d190:	b2db      	uxtb	r3, r3
 800d192:	f003 0301 	and.w	r3, r3, #1
 800d196:	b2da      	uxtb	r2, r3
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1a2:	0bdb      	lsrs	r3, r3, #15
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	f003 0301 	and.w	r3, r3, #1
 800d1aa:	b2da      	uxtb	r2, r3
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b6:	0b9b      	lsrs	r3, r3, #14
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	f003 0301 	and.w	r3, r3, #1
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1ca:	0b5b      	lsrs	r3, r3, #13
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	f003 0301 	and.w	r3, r3, #1
 800d1d2:	b2da      	uxtb	r2, r3
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1de:	0b1b      	lsrs	r3, r3, #12
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	f003 0301 	and.w	r3, r3, #1
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f2:	0a9b      	lsrs	r3, r3, #10
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	f003 0303 	and.w	r3, r3, #3
 800d1fa:	b2da      	uxtb	r2, r3
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d206:	0a1b      	lsrs	r3, r3, #8
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	f003 0303 	and.w	r3, r3, #3
 800d20e:	b2da      	uxtb	r2, r3
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d21a:	085b      	lsrs	r3, r3, #1
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d222:	b2da      	uxtb	r2, r3
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	2201      	movs	r2, #1
 800d22e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	1fe00fff 	.word	0x1fe00fff

0800d244 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b094      	sub	sp, #80	; 0x50
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d24e:	2300      	movs	r3, #0
 800d250:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d254:	f107 0308 	add.w	r3, r7, #8
 800d258:	4619      	mov	r1, r3
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 fb70 	bl	800d940 <SD_SendSDStatus>
 800d260:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800d262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d264:	2b00      	cmp	r3, #0
 800d266:	d011      	beq.n	800d28c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a4f      	ldr	r2, [pc, #316]	; (800d3ac <HAL_SD_GetCardStatus+0x168>)
 800d26e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d276:	431a      	orrs	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2201      	movs	r2, #1
 800d280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d28a:	e070      	b.n	800d36e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	099b      	lsrs	r3, r3, #6
 800d290:	b2db      	uxtb	r3, r3
 800d292:	f003 0303 	and.w	r3, r3, #3
 800d296:	b2da      	uxtb	r2, r3
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	095b      	lsrs	r3, r3, #5
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	f003 0301 	and.w	r3, r3, #1
 800d2a6:	b2da      	uxtb	r2, r3
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	0a1b      	lsrs	r3, r3, #8
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	0e1b      	lsrs	r3, r3, #24
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	061a      	lsls	r2, r3, #24
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	021b      	lsls	r3, r3, #8
 800d2ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d2d2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	0a1b      	lsrs	r3, r3, #8
 800d2d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d2dc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	0e1b      	lsrs	r3, r3, #24
 800d2e2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	b2da      	uxtb	r2, r3
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	0a1b      	lsrs	r3, r3, #8
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	0d1b      	lsrs	r3, r3, #20
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	f003 030f 	and.w	r3, r3, #15
 800d304:	b2da      	uxtb	r2, r3
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	0c1b      	lsrs	r3, r3, #16
 800d30e:	b29b      	uxth	r3, r3
 800d310:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d314:	b29a      	uxth	r2, r3
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	b29b      	uxth	r3, r3
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	4313      	orrs	r3, r2
 800d320:	b29a      	uxth	r2, r3
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	0a9b      	lsrs	r3, r3, #10
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d330:	b2da      	uxtb	r2, r3
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	0a1b      	lsrs	r3, r3, #8
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	f003 0303 	and.w	r3, r3, #3
 800d340:	b2da      	uxtb	r2, r3
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	091b      	lsrs	r3, r3, #4
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	f003 030f 	and.w	r3, r3, #15
 800d350:	b2da      	uxtb	r2, r3
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	f003 030f 	and.w	r3, r3, #15
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	0e1b      	lsrs	r3, r3, #24
 800d368:	b2da      	uxtb	r2, r3
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d376:	4618      	mov	r0, r3
 800d378:	f003 fe8e 	bl	8011098 <SDMMC_CmdBlockLength>
 800d37c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800d37e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00d      	beq.n	800d3a0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a08      	ldr	r2, [pc, #32]	; (800d3ac <HAL_SD_GetCardStatus+0x168>)
 800d38a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d390:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2201      	movs	r2, #1
 800d396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800d3a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3750      	adds	r7, #80	; 0x50
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	1fe00fff 	.word	0x1fe00fff

0800d3b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d3fa:	2300      	movs	r3, #0
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr

0800d408 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d408:	b5b0      	push	{r4, r5, r7, lr}
 800d40a:	b08e      	sub	sp, #56	; 0x38
 800d40c:	af04      	add	r7, sp, #16
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d412:	2300      	movs	r3, #0
 800d414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2203      	movs	r2, #3
 800d41c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d424:	2b03      	cmp	r3, #3
 800d426:	d02e      	beq.n	800d486 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d42e:	d106      	bne.n	800d43e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d434:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	639a      	str	r2, [r3, #56]	; 0x38
 800d43c:	e029      	b.n	800d492 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d444:	d10a      	bne.n	800d45c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fb72 	bl	800db30 <SD_WideBus_Enable>
 800d44c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d452:	6a3b      	ldr	r3, [r7, #32]
 800d454:	431a      	orrs	r2, r3
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	639a      	str	r2, [r3, #56]	; 0x38
 800d45a:	e01a      	b.n	800d492 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10a      	bne.n	800d478 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 fbaf 	bl	800dbc6 <SD_WideBus_Disable>
 800d468:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d46e:	6a3b      	ldr	r3, [r7, #32]
 800d470:	431a      	orrs	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	639a      	str	r2, [r3, #56]	; 0x38
 800d476:	e00c      	b.n	800d492 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	639a      	str	r2, [r3, #56]	; 0x38
 800d484:	e005      	b.n	800d492 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d496:	2b00      	cmp	r3, #0
 800d498:	d007      	beq.n	800d4aa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a2e      	ldr	r2, [pc, #184]	; (800d558 <HAL_SD_ConfigWideBusOperation+0x150>)
 800d4a0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4a8:	e034      	b.n	800d514 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	691b      	ldr	r3, [r3, #16]
 800d4be:	617b      	str	r3, [r7, #20]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	695b      	ldr	r3, [r3, #20]
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	d903      	bls.n	800d4d0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	695b      	ldr	r3, [r3, #20]
 800d4cc:	61bb      	str	r3, [r7, #24]
 800d4ce:	e012      	b.n	800d4f6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4d8:	d103      	bne.n	800d4e2 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	695b      	ldr	r3, [r3, #20]
 800d4de:	61bb      	str	r3, [r7, #24]
 800d4e0:	e009      	b.n	800d4f6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4ea:	d102      	bne.n	800d4f2 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800d4ec:	2302      	movs	r3, #2
 800d4ee:	61bb      	str	r3, [r7, #24]
 800d4f0:	e001      	b.n	800d4f6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800d4f2:	2303      	movs	r3, #3
 800d4f4:	61bb      	str	r3, [r7, #24]
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681d      	ldr	r5, [r3, #0]
 800d4fa:	466c      	mov	r4, sp
 800d4fc:	f107 0314 	add.w	r3, r7, #20
 800d500:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d504:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d508:	f107 0308 	add.w	r3, r7, #8
 800d50c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d50e:	4628      	mov	r0, r5
 800d510:	f003 fce4 	bl	8010edc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d51c:	4618      	mov	r0, r3
 800d51e:	f003 fdbb 	bl	8011098 <SDMMC_CmdBlockLength>
 800d522:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d524:	6a3b      	ldr	r3, [r7, #32]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00c      	beq.n	800d544 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a0a      	ldr	r2, [pc, #40]	; (800d558 <HAL_SD_ConfigWideBusOperation+0x150>)
 800d530:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d536:	6a3b      	ldr	r3, [r7, #32]
 800d538:	431a      	orrs	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d53e:	2301      	movs	r3, #1
 800d540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2201      	movs	r2, #1
 800d548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d54c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d550:	4618      	mov	r0, r3
 800d552:	3728      	adds	r7, #40	; 0x28
 800d554:	46bd      	mov	sp, r7
 800d556:	bdb0      	pop	{r4, r5, r7, pc}
 800d558:	1fe00fff 	.word	0x1fe00fff

0800d55c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d564:	2300      	movs	r3, #0
 800d566:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d568:	f107 030c 	add.w	r3, r7, #12
 800d56c:	4619      	mov	r1, r3
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 fab6 	bl	800dae0 <SD_SendStatus>
 800d574:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d005      	beq.n	800d588 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	431a      	orrs	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	0a5b      	lsrs	r3, r3, #9
 800d58c:	f003 030f 	and.w	r3, r3, #15
 800d590:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d592:	693b      	ldr	r3, [r7, #16]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3718      	adds	r7, #24
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d59c:	b5b0      	push	{r4, r5, r7, lr}
 800d59e:	b090      	sub	sp, #64	; 0x40
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f003 fcef 	bl	8010f90 <SDMMC_GetPowerState>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d102      	bne.n	800d5be <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d5b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d5bc:	e0a9      	b.n	800d712 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5c2:	2b03      	cmp	r3, #3
 800d5c4:	d02e      	beq.n	800d624 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f003 ff34 	bl	8011438 <SDMMC_CmdSendCID>
 800d5d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d001      	beq.n	800d5dc <SD_InitCard+0x40>
    {
      return errorstate;
 800d5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5da:	e09a      	b.n	800d712 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f003 fd19 	bl	801101a <SDMMC_GetResponse>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2104      	movs	r1, #4
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f003 fd10 	bl	801101a <SDMMC_GetResponse>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2108      	movs	r1, #8
 800d606:	4618      	mov	r0, r3
 800d608:	f003 fd07 	bl	801101a <SDMMC_GetResponse>
 800d60c:	4602      	mov	r2, r0
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	210c      	movs	r1, #12
 800d618:	4618      	mov	r0, r3
 800d61a:	f003 fcfe 	bl	801101a <SDMMC_GetResponse>
 800d61e:	4602      	mov	r2, r0
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d628:	2b03      	cmp	r3, #3
 800d62a:	d00d      	beq.n	800d648 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f107 020e 	add.w	r2, r7, #14
 800d634:	4611      	mov	r1, r2
 800d636:	4618      	mov	r0, r3
 800d638:	f003 ff3d 	bl	80114b6 <SDMMC_CmdSetRelAdd>
 800d63c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d640:	2b00      	cmp	r3, #0
 800d642:	d001      	beq.n	800d648 <SD_InitCard+0xac>
    {
      return errorstate;
 800d644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d646:	e064      	b.n	800d712 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d64c:	2b03      	cmp	r3, #3
 800d64e:	d036      	beq.n	800d6be <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d650:	89fb      	ldrh	r3, [r7, #14]
 800d652:	461a      	mov	r2, r3
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d660:	041b      	lsls	r3, r3, #16
 800d662:	4619      	mov	r1, r3
 800d664:	4610      	mov	r0, r2
 800d666:	f003 ff06 	bl	8011476 <SDMMC_CmdSendCSD>
 800d66a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d66c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <SD_InitCard+0xda>
    {
      return errorstate;
 800d672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d674:	e04d      	b.n	800d712 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2100      	movs	r1, #0
 800d67c:	4618      	mov	r0, r3
 800d67e:	f003 fccc 	bl	801101a <SDMMC_GetResponse>
 800d682:	4602      	mov	r2, r0
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2104      	movs	r1, #4
 800d68e:	4618      	mov	r0, r3
 800d690:	f003 fcc3 	bl	801101a <SDMMC_GetResponse>
 800d694:	4602      	mov	r2, r0
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2108      	movs	r1, #8
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f003 fcba 	bl	801101a <SDMMC_GetResponse>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	210c      	movs	r1, #12
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f003 fcb1 	bl	801101a <SDMMC_GetResponse>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2104      	movs	r1, #4
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f003 fca8 	bl	801101a <SDMMC_GetResponse>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	0d1a      	lsrs	r2, r3, #20
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d6d2:	f107 0310 	add.w	r3, r7, #16
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff fc0f 	bl	800cefc <HAL_SD_GetCardCSD>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d6e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d6e8:	e013      	b.n	800d712 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6819      	ldr	r1, [r3, #0]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6f2:	041b      	lsls	r3, r3, #16
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	461c      	mov	r4, r3
 800d6f8:	4615      	mov	r5, r2
 800d6fa:	4622      	mov	r2, r4
 800d6fc:	462b      	mov	r3, r5
 800d6fe:	4608      	mov	r0, r1
 800d700:	f003 fdb0 	bl	8011264 <SDMMC_CmdSelDesel>
 800d704:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <SD_InitCard+0x174>
  {
    return errorstate;
 800d70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d70e:	e000      	b.n	800d712 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d710:	2300      	movs	r3, #0
}
 800d712:	4618      	mov	r0, r3
 800d714:	3740      	adds	r7, #64	; 0x40
 800d716:	46bd      	mov	sp, r7
 800d718:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d71c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b088      	sub	sp, #32
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d724:	2300      	movs	r3, #0
 800d726:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800d728:	2300      	movs	r3, #0
 800d72a:	61fb      	str	r3, [r7, #28]
 800d72c:	2300      	movs	r3, #0
 800d72e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800d730:	f7f9 f808 	bl	8006744 <HAL_GetTick>
 800d734:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f003 fdb6 	bl	80112ac <SDMMC_CmdGoIdleState>
 800d740:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <SD_PowerON+0x30>
  {
    return errorstate;
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	e0f2      	b.n	800d932 <SD_PowerON+0x216>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4618      	mov	r0, r3
 800d752:	f003 fdc9 	bl	80112e8 <SDMMC_CmdOperCond>
 800d756:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00d      	beq.n	800d77a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4618      	mov	r0, r3
 800d76a:	f003 fd9f 	bl	80112ac <SDMMC_CmdGoIdleState>
 800d76e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d004      	beq.n	800d780 <SD_PowerON+0x64>
    {
      return errorstate;
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	e0db      	b.n	800d932 <SD_PowerON+0x216>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2201      	movs	r2, #1
 800d77e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d784:	2b01      	cmp	r3, #1
 800d786:	d137      	bne.n	800d7f8 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2100      	movs	r1, #0
 800d78e:	4618      	mov	r0, r3
 800d790:	f003 fdca 	bl	8011328 <SDMMC_CmdAppCommand>
 800d794:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d02d      	beq.n	800d7f8 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d79c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d7a0:	e0c7      	b.n	800d932 <SD_PowerON+0x216>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f003 fdbd 	bl	8011328 <SDMMC_CmdAppCommand>
 800d7ae:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <SD_PowerON+0x9e>
    {
      return errorstate;
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	e0bb      	b.n	800d932 <SD_PowerON+0x216>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	495f      	ldr	r1, [pc, #380]	; (800d93c <SD_PowerON+0x220>)
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f003 fdd4 	bl	801136e <SDMMC_CmdAppOperCommand>
 800d7c6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d002      	beq.n	800d7d4 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d7d2:	e0ae      	b.n	800d932 <SD_PowerON+0x216>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2100      	movs	r1, #0
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f003 fc1d 	bl	801101a <SDMMC_GetResponse>
 800d7e0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	0fdb      	lsrs	r3, r3, #31
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d101      	bne.n	800d7ee <SD_PowerON+0xd2>
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e000      	b.n	800d7f0 <SD_PowerON+0xd4>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	61bb      	str	r3, [r7, #24]

    count++;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d802      	bhi.n	800d808 <SD_PowerON+0xec>
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d0cc      	beq.n	800d7a2 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d80e:	4293      	cmp	r3, r2
 800d810:	d902      	bls.n	800d818 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d812:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d816:	e08c      	b.n	800d932 <SD_PowerON+0x216>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d81e:	2b00      	cmp	r3, #0
 800d820:	f000 8083 	beq.w	800d92a <SD_PowerON+0x20e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2201      	movs	r2, #1
 800d828:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	699b      	ldr	r3, [r3, #24]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d17e      	bne.n	800d930 <SD_PowerON+0x214>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d079      	beq.n	800d930 <SD_PowerON+0x214>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d842:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f042 0208 	orr.w	r2, r2, #8
 800d852:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4618      	mov	r0, r3
 800d85a:	f003 fe93 	bl	8011584 <SDMMC_CmdVoltageSwitch>
 800d85e:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00c      	beq.n	800d880 <SD_PowerON+0x164>
        {
          return errorstate;
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	e063      	b.n	800d932 <SD_PowerON+0x216>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d86a:	f7f8 ff6b 	bl	8006744 <HAL_GetTick>
 800d86e:	4602      	mov	r2, r0
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d878:	d102      	bne.n	800d880 <SD_PowerON+0x164>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800d87a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d87e:	e058      	b.n	800d932 <SD_PowerON+0x216>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d886:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d88a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d88e:	d1ec      	bne.n	800d86a <SD_PowerON+0x14e>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d898:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d8a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8a8:	d002      	beq.n	800d8b0 <SD_PowerON+0x194>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800d8aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d8ae:	e040      	b.n	800d932 <SD_PowerON+0x216>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800d8b0:	2001      	movs	r0, #1
 800d8b2:	f000 fb49 	bl	800df48 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f042 0204 	orr.w	r2, r2, #4
 800d8c4:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d8c6:	e00a      	b.n	800d8de <SD_PowerON+0x1c2>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d8c8:	f7f8 ff3c 	bl	8006744 <HAL_GetTick>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d6:	d102      	bne.n	800d8de <SD_PowerON+0x1c2>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800d8d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d8dc:	e029      	b.n	800d932 <SD_PowerON+0x216>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d8ec:	d1ec      	bne.n	800d8c8 <SD_PowerON+0x1ac>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800d8f6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d906:	d102      	bne.n	800d90e <SD_PowerON+0x1f2>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d90c:	e011      	b.n	800d932 <SD_PowerON+0x216>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2213      	movs	r2, #19
 800d914:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f04f 32ff 	mov.w	r2, #4294967295
 800d91e:	639a      	str	r2, [r3, #56]	; 0x38
        }

        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d926:	65da      	str	r2, [r3, #92]	; 0x5c
 800d928:	e002      	b.n	800d930 <SD_PowerON+0x214>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3720      	adds	r7, #32
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	c1100000 	.word	0xc1100000

0800d940 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b08c      	sub	sp, #48	; 0x30
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d94a:	f7f8 fefb 	bl	8006744 <HAL_GetTick>
 800d94e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2100      	movs	r1, #0
 800d95a:	4618      	mov	r0, r3
 800d95c:	f003 fb5d 	bl	801101a <SDMMC_GetResponse>
 800d960:	4603      	mov	r3, r0
 800d962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d96a:	d102      	bne.n	800d972 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d96c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d970:	e0b0      	b.n	800dad4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2140      	movs	r1, #64	; 0x40
 800d978:	4618      	mov	r0, r3
 800d97a:	f003 fb8d 	bl	8011098 <SDMMC_CmdBlockLength>
 800d97e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d005      	beq.n	800d992 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d98e:	6a3b      	ldr	r3, [r7, #32]
 800d990:	e0a0      	b.n	800dad4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d99a:	041b      	lsls	r3, r3, #16
 800d99c:	4619      	mov	r1, r3
 800d99e:	4610      	mov	r0, r2
 800d9a0:	f003 fcc2 	bl	8011328 <SDMMC_CmdAppCommand>
 800d9a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9a6:	6a3b      	ldr	r3, [r7, #32]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d005      	beq.n	800d9b8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d9b4:	6a3b      	ldr	r3, [r7, #32]
 800d9b6:	e08d      	b.n	800dad4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9bc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d9be:	2340      	movs	r3, #64	; 0x40
 800d9c0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d9c2:	2360      	movs	r3, #96	; 0x60
 800d9c4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d9c6:	2302      	movs	r3, #2
 800d9c8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f107 0208 	add.w	r2, r7, #8
 800d9da:	4611      	mov	r1, r2
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f003 fb2f 	bl	8011040 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f003 fdaa 	bl	8011540 <SDMMC_CmdStatusRegister>
 800d9ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9ee:	6a3b      	ldr	r3, [r7, #32]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d02b      	beq.n	800da4c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800d9fc:	6a3b      	ldr	r3, [r7, #32]
 800d9fe:	e069      	b.n	800dad4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d013      	beq.n	800da36 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800da0e:	2300      	movs	r3, #0
 800da10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da12:	e00d      	b.n	800da30 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4618      	mov	r0, r3
 800da1a:	f003 fa89 	bl	8010f30 <SDMMC_ReadFIFO>
 800da1e:	4602      	mov	r2, r0
 800da20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da22:	601a      	str	r2, [r3, #0]
        pData++;
 800da24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da26:	3304      	adds	r3, #4
 800da28:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800da2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2c:	3301      	adds	r3, #1
 800da2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da32:	2b07      	cmp	r3, #7
 800da34:	d9ee      	bls.n	800da14 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800da36:	f7f8 fe85 	bl	8006744 <HAL_GetTick>
 800da3a:	4602      	mov	r2, r0
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	1ad3      	subs	r3, r2, r3
 800da40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da44:	d102      	bne.n	800da4c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800da46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da4a:	e043      	b.n	800dad4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da52:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800da56:	2b00      	cmp	r3, #0
 800da58:	d0d2      	beq.n	800da00 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da60:	f003 0308 	and.w	r3, r3, #8
 800da64:	2b00      	cmp	r3, #0
 800da66:	d001      	beq.n	800da6c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800da68:	2308      	movs	r3, #8
 800da6a:	e033      	b.n	800dad4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da72:	f003 0302 	and.w	r3, r3, #2
 800da76:	2b00      	cmp	r3, #0
 800da78:	d001      	beq.n	800da7e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800da7a:	2302      	movs	r3, #2
 800da7c:	e02a      	b.n	800dad4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da84:	f003 0320 	and.w	r3, r3, #32
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d017      	beq.n	800dabc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800da8c:	2320      	movs	r3, #32
 800da8e:	e021      	b.n	800dad4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4618      	mov	r0, r3
 800da96:	f003 fa4b 	bl	8010f30 <SDMMC_ReadFIFO>
 800da9a:	4602      	mov	r2, r0
 800da9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9e:	601a      	str	r2, [r3, #0]
    pData++;
 800daa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa2:	3304      	adds	r3, #4
 800daa4:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800daa6:	f7f8 fe4d 	bl	8006744 <HAL_GetTick>
 800daaa:	4602      	mov	r2, r0
 800daac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daae:	1ad3      	subs	r3, r2, r3
 800dab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab4:	d102      	bne.n	800dabc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dab6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800daba:	e00b      	b.n	800dad4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1e2      	bne.n	800da90 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a03      	ldr	r2, [pc, #12]	; (800dadc <SD_SendSDStatus+0x19c>)
 800dad0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3730      	adds	r7, #48	; 0x30
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	18000f3a 	.word	0x18000f3a

0800dae0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d102      	bne.n	800daf6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800daf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800daf4:	e018      	b.n	800db28 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dafe:	041b      	lsls	r3, r3, #16
 800db00:	4619      	mov	r1, r3
 800db02:	4610      	mov	r0, r2
 800db04:	f003 fcf9 	bl	80114fa <SDMMC_CmdSendStatus>
 800db08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <SD_SendStatus+0x34>
  {
    return errorstate;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	e009      	b.n	800db28 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2100      	movs	r1, #0
 800db1a:	4618      	mov	r0, r3
 800db1c:	f003 fa7d 	bl	801101a <SDMMC_GetResponse>
 800db20:	4602      	mov	r2, r0
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800db38:	2300      	movs	r3, #0
 800db3a:	60fb      	str	r3, [r7, #12]
 800db3c:	2300      	movs	r3, #0
 800db3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2100      	movs	r1, #0
 800db46:	4618      	mov	r0, r3
 800db48:	f003 fa67 	bl	801101a <SDMMC_GetResponse>
 800db4c:	4603      	mov	r3, r0
 800db4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db56:	d102      	bne.n	800db5e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db5c:	e02f      	b.n	800dbbe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db5e:	f107 030c 	add.w	r3, r7, #12
 800db62:	4619      	mov	r1, r3
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 f879 	bl	800dc5c <SD_FindSCR>
 800db6a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d001      	beq.n	800db76 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	e023      	b.n	800dbbe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d01c      	beq.n	800dbba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db88:	041b      	lsls	r3, r3, #16
 800db8a:	4619      	mov	r1, r3
 800db8c:	4610      	mov	r0, r2
 800db8e:	f003 fbcb 	bl	8011328 <SDMMC_CmdAppCommand>
 800db92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d001      	beq.n	800db9e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	e00f      	b.n	800dbbe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2102      	movs	r1, #2
 800dba4:	4618      	mov	r0, r3
 800dba6:	f003 fc02 	bl	80113ae <SDMMC_CmdBusWidth>
 800dbaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d001      	beq.n	800dbb6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	e003      	b.n	800dbbe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	e001      	b.n	800dbbe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3718      	adds	r7, #24
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b086      	sub	sp, #24
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dbce:	2300      	movs	r3, #0
 800dbd0:	60fb      	str	r3, [r7, #12]
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2100      	movs	r1, #0
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f003 fa1c 	bl	801101a <SDMMC_GetResponse>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dbec:	d102      	bne.n	800dbf4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dbee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dbf2:	e02f      	b.n	800dc54 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dbf4:	f107 030c 	add.w	r3, r7, #12
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f82e 	bl	800dc5c <SD_FindSCR>
 800dc00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d001      	beq.n	800dc0c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	e023      	b.n	800dc54 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d01c      	beq.n	800dc50 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc1e:	041b      	lsls	r3, r3, #16
 800dc20:	4619      	mov	r1, r3
 800dc22:	4610      	mov	r0, r2
 800dc24:	f003 fb80 	bl	8011328 <SDMMC_CmdAppCommand>
 800dc28:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d001      	beq.n	800dc34 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	e00f      	b.n	800dc54 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2100      	movs	r1, #0
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f003 fbb7 	bl	80113ae <SDMMC_CmdBusWidth>
 800dc40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d001      	beq.n	800dc4c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	e003      	b.n	800dc54 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	e001      	b.n	800dc54 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3718      	adds	r7, #24
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b08e      	sub	sp, #56	; 0x38
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc66:	f7f8 fd6d 	bl	8006744 <HAL_GetTick>
 800dc6a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dc70:	2300      	movs	r3, #0
 800dc72:	60bb      	str	r3, [r7, #8]
 800dc74:	2300      	movs	r3, #0
 800dc76:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2108      	movs	r1, #8
 800dc82:	4618      	mov	r0, r3
 800dc84:	f003 fa08 	bl	8011098 <SDMMC_CmdBlockLength>
 800dc88:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d001      	beq.n	800dc94 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc92:	e0ad      	b.n	800ddf0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc9c:	041b      	lsls	r3, r3, #16
 800dc9e:	4619      	mov	r1, r3
 800dca0:	4610      	mov	r0, r2
 800dca2:	f003 fb41 	bl	8011328 <SDMMC_CmdAppCommand>
 800dca6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d001      	beq.n	800dcb2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb0:	e09e      	b.n	800ddf0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dcb2:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dcb8:	2308      	movs	r3, #8
 800dcba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dcbc:	2330      	movs	r3, #48	; 0x30
 800dcbe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f107 0210 	add.w	r2, r7, #16
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f003 f9b2 	bl	8011040 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f003 fb87 	bl	80113f4 <SDMMC_CmdSendSCR>
 800dce6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d027      	beq.n	800dd3e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800dcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf0:	e07e      	b.n	800ddf0 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d113      	bne.n	800dd28 <SD_FindSCR+0xcc>
 800dd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d110      	bne.n	800dd28 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f003 f910 	bl	8010f30 <SDMMC_ReadFIFO>
 800dd10:	4603      	mov	r3, r0
 800dd12:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f003 f909 	bl	8010f30 <SDMMC_ReadFIFO>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	60fb      	str	r3, [r7, #12]
      index++;
 800dd22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd24:	3301      	adds	r3, #1
 800dd26:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dd28:	f7f8 fd0c 	bl	8006744 <HAL_GetTick>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd36:	d102      	bne.n	800dd3e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dd38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd3c:	e058      	b.n	800ddf0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd44:	f240 532a 	movw	r3, #1322	; 0x52a
 800dd48:	4013      	ands	r3, r2
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d0d1      	beq.n	800dcf2 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd54:	f003 0308 	and.w	r3, r3, #8
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d005      	beq.n	800dd68 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2208      	movs	r2, #8
 800dd62:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dd64:	2308      	movs	r3, #8
 800dd66:	e043      	b.n	800ddf0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd6e:	f003 0302 	and.w	r3, r3, #2
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d005      	beq.n	800dd82 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2202      	movs	r2, #2
 800dd7c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd7e:	2302      	movs	r3, #2
 800dd80:	e036      	b.n	800ddf0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd88:	f003 0320 	and.w	r3, r3, #32
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d005      	beq.n	800dd9c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2220      	movs	r2, #32
 800dd96:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dd98:	2320      	movs	r3, #32
 800dd9a:	e029      	b.n	800ddf0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a15      	ldr	r2, [pc, #84]	; (800ddf8 <SD_FindSCR+0x19c>)
 800dda2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	061a      	lsls	r2, r3, #24
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	021b      	lsls	r3, r3, #8
 800ddac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddb0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	0a1b      	lsrs	r3, r3, #8
 800ddb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ddba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	0e1b      	lsrs	r3, r3, #24
 800ddc0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ddc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc4:	601a      	str	r2, [r3, #0]
    scr++;
 800ddc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc8:	3304      	adds	r3, #4
 800ddca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	061a      	lsls	r2, r3, #24
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	021b      	lsls	r3, r3, #8
 800ddd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddd8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	0a1b      	lsrs	r3, r3, #8
 800ddde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dde2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	0e1b      	lsrs	r3, r3, #24
 800dde8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ddea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3738      	adds	r7, #56	; 0x38
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	18000f3a 	.word	0x18000f3a

0800ddfc <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b086      	sub	sp, #24
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de08:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de0e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d03f      	beq.n	800de96 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800de16:	2300      	movs	r3, #0
 800de18:	617b      	str	r3, [r7, #20]
 800de1a:	e033      	b.n	800de84 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4618      	mov	r0, r3
 800de22:	f003 f885 	bl	8010f30 <SDMMC_ReadFIFO>
 800de26:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	3301      	adds	r3, #1
 800de34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	3b01      	subs	r3, #1
 800de3a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	0a1b      	lsrs	r3, r3, #8
 800de40:	b2da      	uxtb	r2, r3
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	3301      	adds	r3, #1
 800de4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	3b01      	subs	r3, #1
 800de50:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	0c1b      	lsrs	r3, r3, #16
 800de56:	b2da      	uxtb	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	3301      	adds	r3, #1
 800de60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	3b01      	subs	r3, #1
 800de66:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	0e1b      	lsrs	r3, r3, #24
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	3301      	adds	r3, #1
 800de76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	3b01      	subs	r3, #1
 800de7c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	3301      	adds	r3, #1
 800de82:	617b      	str	r3, [r7, #20]
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	2b07      	cmp	r3, #7
 800de88:	d9c8      	bls.n	800de1c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	693a      	ldr	r2, [r7, #16]
 800de94:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800de96:	bf00      	nop
 800de98:	3718      	adds	r7, #24
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b086      	sub	sp, #24
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6a1b      	ldr	r3, [r3, #32]
 800deaa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d043      	beq.n	800df40 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800deb8:	2300      	movs	r3, #0
 800deba:	617b      	str	r3, [r7, #20]
 800debc:	e037      	b.n	800df2e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3301      	adds	r3, #1
 800dec8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	3b01      	subs	r3, #1
 800dece:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	021a      	lsls	r2, r3, #8
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	4313      	orrs	r3, r2
 800deda:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3301      	adds	r3, #1
 800dee0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	3b01      	subs	r3, #1
 800dee6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	041a      	lsls	r2, r3, #16
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	4313      	orrs	r3, r2
 800def2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3301      	adds	r3, #1
 800def8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	3b01      	subs	r3, #1
 800defe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	061a      	lsls	r2, r3, #24
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	4313      	orrs	r3, r2
 800df0a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	3301      	adds	r3, #1
 800df10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	3b01      	subs	r3, #1
 800df16:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f107 0208 	add.w	r2, r7, #8
 800df20:	4611      	mov	r1, r2
 800df22:	4618      	mov	r0, r3
 800df24:	f003 f811 	bl	8010f4a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	3301      	adds	r3, #1
 800df2c:	617b      	str	r3, [r7, #20]
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	2b07      	cmp	r3, #7
 800df32:	d9c4      	bls.n	800debe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	693a      	ldr	r2, [r7, #16]
 800df3e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800df40:	bf00      	nop
 800df42:	3718      	adds	r7, #24
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	4603      	mov	r3, r0
 800df50:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800df52:	bf00      	nop
 800df54:	370c      	adds	r7, #12
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr

0800df5e <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800df5e:	b480      	push	{r7}
 800df60:	b083      	sub	sp, #12
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800df66:	bf00      	nop
 800df68:	370c      	adds	r7, #12
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr

0800df72 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800df72:	b480      	push	{r7}
 800df74:	b083      	sub	sp, #12
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800df7a:	bf00      	nop
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800df86:	b480      	push	{r7}
 800df88:	b083      	sub	sp, #12
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800df8e:	bf00      	nop
 800df90:	370c      	adds	r7, #12
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr

0800df9a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800df9a:	b480      	push	{r7}
 800df9c:	b083      	sub	sp, #12
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800dfa2:	bf00      	nop
 800dfa4:	370c      	adds	r7, #12
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr
	...

0800dfb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d101      	bne.n	800dfc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e0a0      	b.n	800e104 <HAL_SPI_Init+0x154>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d12a      	bne.n	800e02a <HAL_SPI_Init+0x7a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4a4b      	ldr	r2, [pc, #300]	; (800e10c <HAL_SPI_Init+0x15c>)
 800dfe0:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4a4a      	ldr	r2, [pc, #296]	; (800e110 <HAL_SPI_Init+0x160>)
 800dfe6:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4a4a      	ldr	r2, [pc, #296]	; (800e114 <HAL_SPI_Init+0x164>)
 800dfec:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4a49      	ldr	r2, [pc, #292]	; (800e118 <HAL_SPI_Init+0x168>)
 800dff2:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a49      	ldr	r2, [pc, #292]	; (800e11c <HAL_SPI_Init+0x16c>)
 800dff8:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4a48      	ldr	r2, [pc, #288]	; (800e120 <HAL_SPI_Init+0x170>)
 800dffe:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	4a48      	ldr	r2, [pc, #288]	; (800e124 <HAL_SPI_Init+0x174>)
 800e004:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4a47      	ldr	r2, [pc, #284]	; (800e128 <HAL_SPI_Init+0x178>)
 800e00a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e014:	2b00      	cmp	r3, #0
 800e016:	d103      	bne.n	800e020 <HAL_SPI_Init+0x70>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	4a44      	ldr	r2, [pc, #272]	; (800e12c <HAL_SPI_Init+0x17c>)
 800e01c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2202      	movs	r2, #2
 800e02e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e040:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e04a:	d902      	bls.n	800e052 <HAL_SPI_Init+0xa2>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e04c:	2300      	movs	r3, #0
 800e04e:	60fb      	str	r3, [r7, #12]
 800e050:	e002      	b.n	800e058 <HAL_SPI_Init+0xa8>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e056:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e060:	d007      	beq.n	800e072 <HAL_SPI_Init+0xc2>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e06a:	d002      	beq.n	800e072 <HAL_SPI_Init+0xc2>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2200      	movs	r2, #0
 800e070:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10b      	bne.n	800e092 <HAL_SPI_Init+0xe2>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e082:	d903      	bls.n	800e08c <HAL_SPI_Init+0xdc>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2202      	movs	r2, #2
 800e088:	631a      	str	r2, [r3, #48]	; 0x30
 800e08a:	e002      	b.n	800e092 <HAL_SPI_Init+0xe2>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2201      	movs	r2, #1
 800e090:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	685a      	ldr	r2, [r3, #4]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	431a      	orrs	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	431a      	orrs	r2, r3
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	695b      	ldr	r3, [r3, #20]
 800e0a6:	431a      	orrs	r2, r3
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e0b0:	431a      	orrs	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	69db      	ldr	r3, [r3, #28]
 800e0b6:	431a      	orrs	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6a1b      	ldr	r3, [r3, #32]
 800e0bc:	ea42 0103 	orr.w	r1, r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	430a      	orrs	r2, r1
 800e0ca:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	699b      	ldr	r3, [r3, #24]
 800e0d0:	0c1b      	lsrs	r3, r3, #16
 800e0d2:	f003 0204 	and.w	r2, r3, #4
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0da:	431a      	orrs	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e0:	431a      	orrs	r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	ea42 0103 	orr.w	r1, r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	68fa      	ldr	r2, [r7, #12]
 800e0f0:	430a      	orrs	r2, r1
 800e0f2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e102:	2300      	movs	r3, #0
}
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	0800e875 	.word	0x0800e875
 800e110:	0800e889 	.word	0x0800e889
 800e114:	0800e89d 	.word	0x0800e89d
 800e118:	0800e8b1 	.word	0x0800e8b1
 800e11c:	0800e8c5 	.word	0x0800e8c5
 800e120:	0800e8d9 	.word	0x0800e8d9
 800e124:	0800e8ed 	.word	0x0800e8ed
 800e128:	0800e901 	.word	0x0800e901
 800e12c:	0800e131 	.word	0x0800e131

0800e130 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800e138:	bf00      	nop
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <HAL_SPI_RegisterCallback>:
  * @param  CallbackID ID of the callback to be registered
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID, pSPI_CallbackTypeDef pCallback)
{
 800e144:	b480      	push	{r7}
 800e146:	b087      	sub	sp, #28
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	460b      	mov	r3, r1
 800e14e:	607a      	str	r2, [r7, #4]
 800e150:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800e152:	2300      	movs	r3, #0
 800e154:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d107      	bne.n	800e16c <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e160:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800e168:	2301      	movs	r3, #1
 800e16a:	e08b      	b.n	800e284 <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e172:	2b01      	cmp	r3, #1
 800e174:	d101      	bne.n	800e17a <HAL_SPI_RegisterCallback+0x36>
 800e176:	2302      	movs	r3, #2
 800e178:	e084      	b.n	800e284 <HAL_SPI_RegisterCallback+0x140>
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2201      	movs	r2, #1
 800e17e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d14e      	bne.n	800e22c <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 800e18e:	7afb      	ldrb	r3, [r7, #11]
 800e190:	2b09      	cmp	r3, #9
 800e192:	d842      	bhi.n	800e21a <HAL_SPI_RegisterCallback+0xd6>
 800e194:	a201      	add	r2, pc, #4	; (adr r2, 800e19c <HAL_SPI_RegisterCallback+0x58>)
 800e196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e19a:	bf00      	nop
 800e19c:	0800e1c5 	.word	0x0800e1c5
 800e1a0:	0800e1cd 	.word	0x0800e1cd
 800e1a4:	0800e1d5 	.word	0x0800e1d5
 800e1a8:	0800e1dd 	.word	0x0800e1dd
 800e1ac:	0800e1e5 	.word	0x0800e1e5
 800e1b0:	0800e1ed 	.word	0x0800e1ed
 800e1b4:	0800e1f5 	.word	0x0800e1f5
 800e1b8:	0800e1fd 	.word	0x0800e1fd
 800e1bc:	0800e207 	.word	0x0800e207
 800e1c0:	0800e211 	.word	0x0800e211
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800e1ca:	e056      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800e1d2:	e052      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800e1da:	e04e      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800e1e2:	e04a      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800e1ea:	e046      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800e1f2:	e042      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800e1fa:	e03e      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800e204:	e039      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800e20e:	e034      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800e218:	e02f      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e21e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800e226:	2301      	movs	r3, #1
 800e228:	75fb      	strb	r3, [r7, #23]
        break;
 800e22a:	e026      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e232:	b2db      	uxtb	r3, r3
 800e234:	2b00      	cmp	r3, #0
 800e236:	d118      	bne.n	800e26a <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 800e238:	7afb      	ldrb	r3, [r7, #11]
 800e23a:	2b08      	cmp	r3, #8
 800e23c:	d002      	beq.n	800e244 <HAL_SPI_RegisterCallback+0x100>
 800e23e:	2b09      	cmp	r3, #9
 800e240:	d005      	beq.n	800e24e <HAL_SPI_RegisterCallback+0x10a>
 800e242:	e009      	b.n	800e258 <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800e24c:	e015      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800e256:	e010      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e25c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 800e264:	2301      	movs	r3, #1
 800e266:	75fb      	strb	r3, [r7, #23]
        break;
 800e268:	e007      	b.n	800e27a <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e26e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 800e276:	2301      	movs	r3, #1
 800e278:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2200      	movs	r2, #0
 800e27e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 800e282:	7dfb      	ldrb	r3, [r7, #23]
}
 800e284:	4618      	mov	r0, r3
 800e286:	371c      	adds	r7, #28
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr

0800e290 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b088      	sub	sp, #32
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	60b9      	str	r1, [r7, #8]
 800e29a:	603b      	str	r3, [r7, #0]
 800e29c:	4613      	mov	r3, r2
 800e29e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d101      	bne.n	800e2b2 <HAL_SPI_Transmit+0x22>
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	e150      	b.n	800e554 <HAL_SPI_Transmit+0x2c4>
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e2ba:	f7f8 fa43 	bl	8006744 <HAL_GetTick>
 800e2be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e2c0:	88fb      	ldrh	r3, [r7, #6]
 800e2c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d002      	beq.n	800e2d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e2d4:	e135      	b.n	800e542 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d002      	beq.n	800e2e2 <HAL_SPI_Transmit+0x52>
 800e2dc:	88fb      	ldrh	r3, [r7, #6]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d102      	bne.n	800e2e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e2e6:	e12c      	b.n	800e542 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2203      	movs	r2, #3
 800e2ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	88fa      	ldrh	r2, [r7, #6]
 800e300:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	88fa      	ldrh	r2, [r7, #6]
 800e306:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2200      	movs	r2, #0
 800e30c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2200      	movs	r2, #0
 800e312:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2200      	movs	r2, #0
 800e31a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2200      	movs	r2, #0
 800e322:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2200      	movs	r2, #0
 800e328:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	689b      	ldr	r3, [r3, #8]
 800e32e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e332:	d107      	bne.n	800e344 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e342:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e34e:	2b40      	cmp	r3, #64	; 0x40
 800e350:	d007      	beq.n	800e362 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e360:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e36a:	d94b      	bls.n	800e404 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <HAL_SPI_Transmit+0xea>
 800e374:	8afb      	ldrh	r3, [r7, #22]
 800e376:	2b01      	cmp	r3, #1
 800e378:	d13e      	bne.n	800e3f8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e37e:	881a      	ldrh	r2, [r3, #0]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e38a:	1c9a      	adds	r2, r3, #2
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e394:	b29b      	uxth	r3, r3
 800e396:	3b01      	subs	r3, #1
 800e398:	b29a      	uxth	r2, r3
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e39e:	e02b      	b.n	800e3f8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	689b      	ldr	r3, [r3, #8]
 800e3a6:	f003 0302 	and.w	r3, r3, #2
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	d112      	bne.n	800e3d4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3b2:	881a      	ldrh	r2, [r3, #0]
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3be:	1c9a      	adds	r2, r3, #2
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e3d2:	e011      	b.n	800e3f8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3d4:	f7f8 f9b6 	bl	8006744 <HAL_GetTick>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	69bb      	ldr	r3, [r7, #24]
 800e3dc:	1ad3      	subs	r3, r2, r3
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d803      	bhi.n	800e3ec <HAL_SPI_Transmit+0x15c>
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ea:	d102      	bne.n	800e3f2 <HAL_SPI_Transmit+0x162>
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d102      	bne.n	800e3f8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800e3f2:	2303      	movs	r3, #3
 800e3f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e3f6:	e0a4      	b.n	800e542 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d1ce      	bne.n	800e3a0 <HAL_SPI_Transmit+0x110>
 800e402:	e07c      	b.n	800e4fe <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d002      	beq.n	800e412 <HAL_SPI_Transmit+0x182>
 800e40c:	8afb      	ldrh	r3, [r7, #22]
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d170      	bne.n	800e4f4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e416:	b29b      	uxth	r3, r3
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d912      	bls.n	800e442 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e420:	881a      	ldrh	r2, [r3, #0]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e42c:	1c9a      	adds	r2, r3, #2
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e436:	b29b      	uxth	r3, r3
 800e438:	3b02      	subs	r3, #2
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e440:	e058      	b.n	800e4f4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	330c      	adds	r3, #12
 800e44c:	7812      	ldrb	r2, [r2, #0]
 800e44e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e454:	1c5a      	adds	r2, r3, #1
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e45e:	b29b      	uxth	r3, r3
 800e460:	3b01      	subs	r3, #1
 800e462:	b29a      	uxth	r2, r3
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e468:	e044      	b.n	800e4f4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	689b      	ldr	r3, [r3, #8]
 800e470:	f003 0302 	and.w	r3, r3, #2
 800e474:	2b02      	cmp	r3, #2
 800e476:	d12b      	bne.n	800e4d0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d912      	bls.n	800e4a8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e486:	881a      	ldrh	r2, [r3, #0]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e492:	1c9a      	adds	r2, r3, #2
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	3b02      	subs	r3, #2
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e4a6:	e025      	b.n	800e4f4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	330c      	adds	r3, #12
 800e4b2:	7812      	ldrb	r2, [r2, #0]
 800e4b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ba:	1c5a      	adds	r2, r3, #1
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e4ce:	e011      	b.n	800e4f4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4d0:	f7f8 f938 	bl	8006744 <HAL_GetTick>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	69bb      	ldr	r3, [r7, #24]
 800e4d8:	1ad3      	subs	r3, r2, r3
 800e4da:	683a      	ldr	r2, [r7, #0]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d803      	bhi.n	800e4e8 <HAL_SPI_Transmit+0x258>
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4e6:	d102      	bne.n	800e4ee <HAL_SPI_Transmit+0x25e>
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d102      	bne.n	800e4f4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800e4ee:	2303      	movs	r3, #3
 800e4f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e4f2:	e026      	b.n	800e542 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1b5      	bne.n	800e46a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e4fe:	69ba      	ldr	r2, [r7, #24]
 800e500:	6839      	ldr	r1, [r7, #0]
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	f000 fc02 	bl	800ed0c <SPI_EndRxTxTransaction>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d002      	beq.n	800e514 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2220      	movs	r2, #32
 800e512:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d10a      	bne.n	800e532 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e51c:	2300      	movs	r3, #0
 800e51e:	613b      	str	r3, [r7, #16]
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	613b      	str	r3, [r7, #16]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	689b      	ldr	r3, [r3, #8]
 800e52e:	613b      	str	r3, [r7, #16]
 800e530:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e536:	2b00      	cmp	r3, #0
 800e538:	d002      	beq.n	800e540 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800e53a:	2301      	movs	r3, #1
 800e53c:	77fb      	strb	r3, [r7, #31]
 800e53e:	e000      	b.n	800e542 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800e540:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2201      	movs	r2, #1
 800e546:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2200      	movs	r2, #0
 800e54e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e552:	7ffb      	ldrb	r3, [r7, #31]
}
 800e554:	4618      	mov	r0, r3
 800e556:	3720      	adds	r7, #32
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b086      	sub	sp, #24
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	607a      	str	r2, [r7, #4]
 800e568:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e56a:	2300      	movs	r3, #0
 800e56c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e574:	2b01      	cmp	r3, #1
 800e576:	d101      	bne.n	800e57c <HAL_SPI_TransmitReceive_DMA+0x20>
 800e578:	2302      	movs	r3, #2
 800e57a:	e16c      	b.n	800e856 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e58a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800e592:	7dbb      	ldrb	r3, [r7, #22]
 800e594:	2b01      	cmp	r3, #1
 800e596:	d00d      	beq.n	800e5b4 <HAL_SPI_TransmitReceive_DMA+0x58>
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e59e:	d106      	bne.n	800e5ae <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	689b      	ldr	r3, [r3, #8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d102      	bne.n	800e5ae <HAL_SPI_TransmitReceive_DMA+0x52>
 800e5a8:	7dbb      	ldrb	r3, [r7, #22]
 800e5aa:	2b04      	cmp	r3, #4
 800e5ac:	d002      	beq.n	800e5b4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800e5ae:	2302      	movs	r3, #2
 800e5b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e5b2:	e14b      	b.n	800e84c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d005      	beq.n	800e5c6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d002      	beq.n	800e5c6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800e5c0:	887b      	ldrh	r3, [r7, #2]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d102      	bne.n	800e5cc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e5ca:	e13f      	b.n	800e84c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	2b04      	cmp	r3, #4
 800e5d6:	d003      	beq.n	800e5e0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2205      	movs	r2, #5
 800e5dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	68ba      	ldr	r2, [r7, #8]
 800e5ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	887a      	ldrh	r2, [r7, #2]
 800e5f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	887a      	ldrh	r2, [r7, #2]
 800e5f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	887a      	ldrh	r2, [r7, #2]
 800e602:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	887a      	ldrh	r2, [r7, #2]
 800e60a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	2200      	movs	r2, #0
 800e612:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2200      	movs	r2, #0
 800e618:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800e628:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e632:	d908      	bls.n	800e646 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	685a      	ldr	r2, [r3, #4]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e642:	605a      	str	r2, [r3, #4]
 800e644:	e06f      	b.n	800e726 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	685a      	ldr	r2, [r3, #4]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e654:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e65a:	699b      	ldr	r3, [r3, #24]
 800e65c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e660:	d126      	bne.n	800e6b0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d10f      	bne.n	800e68e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	685a      	ldr	r2, [r3, #4]
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e67c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e682:	b29b      	uxth	r3, r3
 800e684:	085b      	lsrs	r3, r3, #1
 800e686:	b29a      	uxth	r2, r3
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e68c:	e010      	b.n	800e6b0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	685a      	ldr	r2, [r3, #4]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e69c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	085b      	lsrs	r3, r3, #1
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6b4:	699b      	ldr	r3, [r3, #24]
 800e6b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6ba:	d134      	bne.n	800e726 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	685a      	ldr	r2, [r3, #4]
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e6ca:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	f003 0301 	and.w	r3, r3, #1
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d111      	bne.n	800e700 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	685a      	ldr	r2, [r3, #4]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e6ea:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	085b      	lsrs	r3, r3, #1
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e6fe:	e012      	b.n	800e726 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	685a      	ldr	r2, [r3, #4]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e70e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e716:	b29b      	uxth	r3, r3
 800e718:	085b      	lsrs	r3, r3, #1
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	3301      	adds	r3, #1
 800e71e:	b29a      	uxth	r2, r3
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	2b04      	cmp	r3, #4
 800e730:	d108      	bne.n	800e744 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e736:	4a4a      	ldr	r2, [pc, #296]	; (800e860 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800e738:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e73e:	4a49      	ldr	r2, [pc, #292]	; (800e864 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800e740:	62da      	str	r2, [r3, #44]	; 0x2c
 800e742:	e007      	b.n	800e754 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e748:	4a47      	ldr	r2, [pc, #284]	; (800e868 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800e74a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e750:	4a46      	ldr	r2, [pc, #280]	; (800e86c <HAL_SPI_TransmitReceive_DMA+0x310>)
 800e752:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e758:	4a45      	ldr	r2, [pc, #276]	; (800e870 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800e75a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e760:	2200      	movs	r2, #0
 800e762:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	330c      	adds	r3, #12
 800e76e:	4619      	mov	r1, r3
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e774:	461a      	mov	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	f7f9 fe1b 	bl	80083b8 <HAL_DMA_Start_IT>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00c      	beq.n	800e7a2 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e78c:	f043 0210 	orr.w	r2, r3, #16
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e794:	2301      	movs	r3, #1
 800e796:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2201      	movs	r2, #1
 800e79c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e7a0:	e054      	b.n	800e84c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	685a      	ldr	r2, [r3, #4]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f042 0201 	orr.w	r2, r2, #1
 800e7b0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7be:	2200      	movs	r2, #0
 800e7c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7da:	4619      	mov	r1, r3
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	330c      	adds	r3, #12
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	f7f9 fde5 	bl	80083b8 <HAL_DMA_Start_IT>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d00c      	beq.n	800e80e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7f8:	f043 0210 	orr.w	r2, r3, #16
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e800:	2301      	movs	r3, #1
 800e802:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2201      	movs	r2, #1
 800e808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e80c:	e01e      	b.n	800e84c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e818:	2b40      	cmp	r3, #64	; 0x40
 800e81a:	d007      	beq.n	800e82c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e82a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	685a      	ldr	r2, [r3, #4]
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f042 0220 	orr.w	r2, r2, #32
 800e83a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	685a      	ldr	r2, [r3, #4]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f042 0202 	orr.w	r2, r2, #2
 800e84a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2200      	movs	r2, #0
 800e850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e854:	7dfb      	ldrb	r3, [r7, #23]
}
 800e856:	4618      	mov	r0, r3
 800e858:	3718      	adds	r7, #24
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	0800ea31 	.word	0x0800ea31
 800e864:	0800e915 	.word	0x0800e915
 800e868:	0800ea4f 	.word	0x0800ea4f
 800e86c:	0800e99d 	.word	0x0800e99d
 800e870:	0800ea6d 	.word	0x0800ea6d

0800e874 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e87c:	bf00      	nop
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e890:	bf00      	nop
 800e892:	370c      	adds	r7, #12
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr

0800e89c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b083      	sub	sp, #12
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e8a4:	bf00      	nop
 800e8a6:	370c      	adds	r7, #12
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e8b8:	bf00      	nop
 800e8ba:	370c      	adds	r7, #12
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c2:	4770      	bx	lr

0800e8c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e8cc:	bf00      	nop
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e8e0:	bf00      	nop
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800e908:	bf00      	nop
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e920:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e922:	f7f7 ff0f 	bl	8006744 <HAL_GetTick>
 800e926:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f003 0320 	and.w	r3, r3, #32
 800e932:	2b20      	cmp	r3, #32
 800e934:	d02b      	beq.n	800e98e <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	685a      	ldr	r2, [r3, #4]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f022 0220 	bic.w	r2, r2, #32
 800e944:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	685a      	ldr	r2, [r3, #4]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f022 0203 	bic.w	r2, r2, #3
 800e954:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e956:	68ba      	ldr	r2, [r7, #8]
 800e958:	2164      	movs	r1, #100	; 0x64
 800e95a:	68f8      	ldr	r0, [r7, #12]
 800e95c:	f000 f97e 	bl	800ec5c <SPI_EndRxTransaction>
 800e960:	4603      	mov	r3, r0
 800e962:	2b00      	cmp	r3, #0
 800e964:	d002      	beq.n	800e96c <SPI_DMAReceiveCplt+0x58>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2220      	movs	r2, #32
 800e96a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2200      	movs	r2, #0
 800e970:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2201      	movs	r2, #1
 800e978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e980:	2b00      	cmp	r3, #0
 800e982:	d004      	beq.n	800e98e <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e98c:	e003      	b.n	800e996 <SPI_DMAReceiveCplt+0x82>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e992:	68f8      	ldr	r0, [r7, #12]
 800e994:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e996:	3710      	adds	r7, #16
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9a8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e9aa:	f7f7 fecb 	bl	8006744 <HAL_GetTick>
 800e9ae:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f003 0320 	and.w	r3, r3, #32
 800e9ba:	2b20      	cmp	r3, #32
 800e9bc:	d031      	beq.n	800ea22 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	685a      	ldr	r2, [r3, #4]
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f022 0220 	bic.w	r2, r2, #32
 800e9cc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	2164      	movs	r1, #100	; 0x64
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f000 f99a 	bl	800ed0c <SPI_EndRxTxTransaction>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d005      	beq.n	800e9ea <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9e2:	f043 0220 	orr.w	r2, r3, #32
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	685a      	ldr	r2, [r3, #4]
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f022 0203 	bic.w	r2, r2, #3
 800e9f8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2200      	movs	r2, #0
 800ea04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d004      	beq.n	800ea22 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ea20:	e003      	b.n	800ea2a <SPI_DMATransmitReceiveCplt+0x8e>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea26:	68f8      	ldr	r0, [r7, #12]
 800ea28:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea3c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea42:	68f8      	ldr	r0, [r7, #12]
 800ea44:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea46:	bf00      	nop
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b084      	sub	sp, #16
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea5a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea64:	bf00      	nop
 800ea66:	3710      	adds	r7, #16
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea78:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	685a      	ldr	r2, [r3, #4]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f022 0203 	bic.w	r2, r2, #3
 800ea88:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea8e:	f043 0210 	orr.w	r2, r3, #16
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaa2:	68f8      	ldr	r0, [r7, #12]
 800eaa4:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800eaa6:	bf00      	nop
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b084      	sub	sp, #16
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	60f8      	str	r0, [r7, #12]
 800eab6:	60b9      	str	r1, [r7, #8]
 800eab8:	603b      	str	r3, [r7, #0]
 800eaba:	4613      	mov	r3, r2
 800eabc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eabe:	e04c      	b.n	800eb5a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac6:	d048      	beq.n	800eb5a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800eac8:	f7f7 fe3c 	bl	8006744 <HAL_GetTick>
 800eacc:	4602      	mov	r2, r0
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	1ad3      	subs	r3, r2, r3
 800ead2:	683a      	ldr	r2, [r7, #0]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d902      	bls.n	800eade <SPI_WaitFlagStateUntilTimeout+0x30>
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d13d      	bne.n	800eb5a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	685a      	ldr	r2, [r3, #4]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eaec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eaf6:	d111      	bne.n	800eb1c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb00:	d004      	beq.n	800eb0c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb0a:	d107      	bne.n	800eb1c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb24:	d10f      	bne.n	800eb46 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eb34:	601a      	str	r2, [r3, #0]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eb44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800eb56:	2303      	movs	r3, #3
 800eb58:	e00f      	b.n	800eb7a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	689a      	ldr	r2, [r3, #8]
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	4013      	ands	r3, r2
 800eb64:	68ba      	ldr	r2, [r7, #8]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	bf0c      	ite	eq
 800eb6a:	2301      	moveq	r3, #1
 800eb6c:	2300      	movne	r3, #0
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	461a      	mov	r2, r3
 800eb72:	79fb      	ldrb	r3, [r7, #7]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d1a3      	bne.n	800eac0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800eb78:	2300      	movs	r3, #0
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b084      	sub	sp, #16
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	60f8      	str	r0, [r7, #12]
 800eb8a:	60b9      	str	r1, [r7, #8]
 800eb8c:	607a      	str	r2, [r7, #4]
 800eb8e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800eb90:	e057      	b.n	800ec42 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800eb98:	d106      	bne.n	800eba8 <SPI_WaitFifoStateUntilTimeout+0x26>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d103      	bne.n	800eba8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	330c      	adds	r3, #12
 800eba6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebae:	d048      	beq.n	800ec42 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ebb0:	f7f7 fdc8 	bl	8006744 <HAL_GetTick>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	69bb      	ldr	r3, [r7, #24]
 800ebb8:	1ad3      	subs	r3, r2, r3
 800ebba:	683a      	ldr	r2, [r7, #0]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d902      	bls.n	800ebc6 <SPI_WaitFifoStateUntilTimeout+0x44>
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d13d      	bne.n	800ec42 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	685a      	ldr	r2, [r3, #4]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ebd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebde:	d111      	bne.n	800ec04 <SPI_WaitFifoStateUntilTimeout+0x82>
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebe8:	d004      	beq.n	800ebf4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	689b      	ldr	r3, [r3, #8]
 800ebee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebf2:	d107      	bne.n	800ec04 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec0c:	d10f      	bne.n	800ec2e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ec1c:	601a      	str	r2, [r3, #0]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ec2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2201      	movs	r2, #1
 800ec32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ec3e:	2303      	movs	r3, #3
 800ec40:	e008      	b.n	800ec54 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	689a      	ldr	r2, [r3, #8]
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	4013      	ands	r3, r2
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d19f      	bne.n	800eb92 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800ec52:	2300      	movs	r3, #0
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3710      	adds	r7, #16
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af02      	add	r7, sp, #8
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec70:	d111      	bne.n	800ec96 <SPI_EndRxTransaction+0x3a>
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec7a:	d004      	beq.n	800ec86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec84:	d107      	bne.n	800ec96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec94:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	9300      	str	r3, [sp, #0]
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	2180      	movs	r1, #128	; 0x80
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f7ff ff04 	bl	800eaae <SPI_WaitFlagStateUntilTimeout>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d007      	beq.n	800ecbc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ecb0:	f043 0220 	orr.w	r2, r3, #32
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	e023      	b.n	800ed04 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ecc4:	d11d      	bne.n	800ed02 <SPI_EndRxTransaction+0xa6>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecce:	d004      	beq.n	800ecda <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	689b      	ldr	r3, [r3, #8]
 800ecd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecd8:	d113      	bne.n	800ed02 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	9300      	str	r3, [sp, #0]
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	2200      	movs	r2, #0
 800ece2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ece6:	68f8      	ldr	r0, [r7, #12]
 800ece8:	f7ff ff4b 	bl	800eb82 <SPI_WaitFifoStateUntilTimeout>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d007      	beq.n	800ed02 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ecf6:	f043 0220 	orr.w	r2, r3, #32
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ecfe:	2303      	movs	r3, #3
 800ed00:	e000      	b.n	800ed04 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ed02:	2300      	movs	r3, #0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3710      	adds	r7, #16
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b086      	sub	sp, #24
 800ed10:	af02      	add	r7, sp, #8
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	9300      	str	r3, [sp, #0]
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ed24:	68f8      	ldr	r0, [r7, #12]
 800ed26:	f7ff ff2c 	bl	800eb82 <SPI_WaitFifoStateUntilTimeout>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d007      	beq.n	800ed40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed34:	f043 0220 	orr.w	r2, r3, #32
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ed3c:	2303      	movs	r3, #3
 800ed3e:	e027      	b.n	800ed90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	2200      	movs	r2, #0
 800ed48:	2180      	movs	r1, #128	; 0x80
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f7ff feaf 	bl	800eaae <SPI_WaitFlagStateUntilTimeout>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d007      	beq.n	800ed66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed5a:	f043 0220 	orr.w	r2, r3, #32
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ed62:	2303      	movs	r3, #3
 800ed64:	e014      	b.n	800ed90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ed72:	68f8      	ldr	r0, [r7, #12]
 800ed74:	f7ff ff05 	bl	800eb82 <SPI_WaitFifoStateUntilTimeout>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d007      	beq.n	800ed8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed82:	f043 0220 	orr.w	r2, r3, #32
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ed8a:	2303      	movs	r3, #3
 800ed8c:	e000      	b.n	800ed90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ed8e:	2300      	movs	r3, #0
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3710      	adds	r7, #16
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d101      	bne.n	800edaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eda6:	2301      	movs	r3, #1
 800eda8:	e01d      	b.n	800ede6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d106      	bne.n	800edc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 f815 	bl	800edee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2202      	movs	r2, #2
 800edc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681a      	ldr	r2, [r3, #0]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	3304      	adds	r3, #4
 800edd4:	4619      	mov	r1, r3
 800edd6:	4610      	mov	r0, r2
 800edd8:	f000 f9fc 	bl	800f1d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2201      	movs	r2, #1
 800ede0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ede4:	2300      	movs	r3, #0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3708      	adds	r7, #8
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800edee:	b480      	push	{r7}
 800edf0:	b083      	sub	sp, #12
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800edf6:	bf00      	nop
 800edf8:	370c      	adds	r7, #12
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr
	...

0800ee04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b085      	sub	sp, #20
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2202      	movs	r2, #2
 800ee10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	689a      	ldr	r2, [r3, #8]
 800ee1a:	4b0e      	ldr	r3, [pc, #56]	; (800ee54 <HAL_TIM_Base_Start+0x50>)
 800ee1c:	4013      	ands	r3, r2
 800ee1e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2b06      	cmp	r3, #6
 800ee24:	d00b      	beq.n	800ee3e <HAL_TIM_Base_Start+0x3a>
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee2c:	d007      	beq.n	800ee3e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f042 0201 	orr.w	r2, r2, #1
 800ee3c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2201      	movs	r2, #1
 800ee42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ee46:	2300      	movs	r3, #0
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3714      	adds	r7, #20
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr
 800ee54:	00010007 	.word	0x00010007

0800ee58 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2202      	movs	r2, #2
 800ee64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	6a1a      	ldr	r2, [r3, #32]
 800ee6e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ee72:	4013      	ands	r3, r2
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d10f      	bne.n	800ee98 <HAL_TIM_Base_Stop+0x40>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	6a1a      	ldr	r2, [r3, #32]
 800ee7e:	f240 4344 	movw	r3, #1092	; 0x444
 800ee82:	4013      	ands	r3, r2
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d107      	bne.n	800ee98 <HAL_TIM_Base_Stop+0x40>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f022 0201 	bic.w	r2, r2, #1
 800ee96:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800eea0:	2300      	movs	r3, #0
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	370c      	adds	r7, #12
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr
	...

0800eeb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b085      	sub	sp, #20
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	68da      	ldr	r2, [r3, #12]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f042 0201 	orr.w	r2, r2, #1
 800eec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	689a      	ldr	r2, [r3, #8]
 800eece:	4b0c      	ldr	r3, [pc, #48]	; (800ef00 <HAL_TIM_Base_Start_IT+0x50>)
 800eed0:	4013      	ands	r3, r2
 800eed2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b06      	cmp	r3, #6
 800eed8:	d00b      	beq.n	800eef2 <HAL_TIM_Base_Start_IT+0x42>
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eee0:	d007      	beq.n	800eef2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f042 0201 	orr.w	r2, r2, #1
 800eef0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eef2:	2300      	movs	r3, #0
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3714      	adds	r7, #20
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	00010007 	.word	0x00010007

0800ef04 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68da      	ldr	r2, [r3, #12]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f022 0201 	bic.w	r2, r2, #1
 800ef1a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6a1a      	ldr	r2, [r3, #32]
 800ef22:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef26:	4013      	ands	r3, r2
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d10f      	bne.n	800ef4c <HAL_TIM_Base_Stop_IT+0x48>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	6a1a      	ldr	r2, [r3, #32]
 800ef32:	f240 4344 	movw	r3, #1092	; 0x444
 800ef36:	4013      	ands	r3, r2
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d107      	bne.n	800ef4c <HAL_TIM_Base_Stop_IT+0x48>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f022 0201 	bic.w	r2, r2, #1
 800ef4a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ef4c:	2300      	movs	r3, #0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	370c      	adds	r7, #12
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr

0800ef5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b082      	sub	sp, #8
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	691b      	ldr	r3, [r3, #16]
 800ef68:	f003 0302 	and.w	r3, r3, #2
 800ef6c:	2b02      	cmp	r3, #2
 800ef6e:	d122      	bne.n	800efb6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	f003 0302 	and.w	r3, r3, #2
 800ef7a:	2b02      	cmp	r3, #2
 800ef7c:	d11b      	bne.n	800efb6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f06f 0202 	mvn.w	r2, #2
 800ef86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	699b      	ldr	r3, [r3, #24]
 800ef94:	f003 0303 	and.w	r3, r3, #3
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d003      	beq.n	800efa4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7f7 f89b 	bl	80060d8 <HAL_TIM_IC_CaptureCallback>
 800efa2:	e005      	b.n	800efb0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f000 f8f7 	bl	800f198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 f8fe 	bl	800f1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2200      	movs	r2, #0
 800efb4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	691b      	ldr	r3, [r3, #16]
 800efbc:	f003 0304 	and.w	r3, r3, #4
 800efc0:	2b04      	cmp	r3, #4
 800efc2:	d122      	bne.n	800f00a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	68db      	ldr	r3, [r3, #12]
 800efca:	f003 0304 	and.w	r3, r3, #4
 800efce:	2b04      	cmp	r3, #4
 800efd0:	d11b      	bne.n	800f00a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	f06f 0204 	mvn.w	r2, #4
 800efda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2202      	movs	r2, #2
 800efe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	699b      	ldr	r3, [r3, #24]
 800efe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800efec:	2b00      	cmp	r3, #0
 800efee:	d003      	beq.n	800eff8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f7f7 f871 	bl	80060d8 <HAL_TIM_IC_CaptureCallback>
 800eff6:	e005      	b.n	800f004 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 f8cd 	bl	800f198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f000 f8d4 	bl	800f1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	f003 0308 	and.w	r3, r3, #8
 800f014:	2b08      	cmp	r3, #8
 800f016:	d122      	bne.n	800f05e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	f003 0308 	and.w	r3, r3, #8
 800f022:	2b08      	cmp	r3, #8
 800f024:	d11b      	bne.n	800f05e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f06f 0208 	mvn.w	r2, #8
 800f02e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2204      	movs	r2, #4
 800f034:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	69db      	ldr	r3, [r3, #28]
 800f03c:	f003 0303 	and.w	r3, r3, #3
 800f040:	2b00      	cmp	r3, #0
 800f042:	d003      	beq.n	800f04c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f7f7 f847 	bl	80060d8 <HAL_TIM_IC_CaptureCallback>
 800f04a:	e005      	b.n	800f058 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f8a3 	bl	800f198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f000 f8aa 	bl	800f1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	691b      	ldr	r3, [r3, #16]
 800f064:	f003 0310 	and.w	r3, r3, #16
 800f068:	2b10      	cmp	r3, #16
 800f06a:	d122      	bne.n	800f0b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	68db      	ldr	r3, [r3, #12]
 800f072:	f003 0310 	and.w	r3, r3, #16
 800f076:	2b10      	cmp	r3, #16
 800f078:	d11b      	bne.n	800f0b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f06f 0210 	mvn.w	r2, #16
 800f082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2208      	movs	r2, #8
 800f088:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	69db      	ldr	r3, [r3, #28]
 800f090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f094:	2b00      	cmp	r3, #0
 800f096:	d003      	beq.n	800f0a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f7f7 f81d 	bl	80060d8 <HAL_TIM_IC_CaptureCallback>
 800f09e:	e005      	b.n	800f0ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 f879 	bl	800f198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 f880 	bl	800f1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	691b      	ldr	r3, [r3, #16]
 800f0b8:	f003 0301 	and.w	r3, r3, #1
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d10e      	bne.n	800f0de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	68db      	ldr	r3, [r3, #12]
 800f0c6:	f003 0301 	and.w	r3, r3, #1
 800f0ca:	2b01      	cmp	r3, #1
 800f0cc:	d107      	bne.n	800f0de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f06f 0201 	mvn.w	r2, #1
 800f0d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7f6 ffeb 	bl	80060b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	691b      	ldr	r3, [r3, #16]
 800f0e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0e8:	2b80      	cmp	r3, #128	; 0x80
 800f0ea:	d10e      	bne.n	800f10a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0f6:	2b80      	cmp	r3, #128	; 0x80
 800f0f8:	d107      	bne.n	800f10a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f000 f991 	bl	800f42c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	691b      	ldr	r3, [r3, #16]
 800f110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f118:	d10e      	bne.n	800f138 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f124:	2b80      	cmp	r3, #128	; 0x80
 800f126:	d107      	bne.n	800f138 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f000 f984 	bl	800f440 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	691b      	ldr	r3, [r3, #16]
 800f13e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f142:	2b40      	cmp	r3, #64	; 0x40
 800f144:	d10e      	bne.n	800f164 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	68db      	ldr	r3, [r3, #12]
 800f14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f150:	2b40      	cmp	r3, #64	; 0x40
 800f152:	d107      	bne.n	800f164 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f15c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 f82e 	bl	800f1c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	691b      	ldr	r3, [r3, #16]
 800f16a:	f003 0320 	and.w	r3, r3, #32
 800f16e:	2b20      	cmp	r3, #32
 800f170:	d10e      	bne.n	800f190 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	f003 0320 	and.w	r3, r3, #32
 800f17c:	2b20      	cmp	r3, #32
 800f17e:	d107      	bne.n	800f190 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f06f 0220 	mvn.w	r2, #32
 800f188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 f944 	bl	800f418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f190:	bf00      	nop
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f198:	b480      	push	{r7}
 800f19a:	b083      	sub	sp, #12
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f1a0:	bf00      	nop
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f1b4:	bf00      	nop
 800f1b6:	370c      	adds	r7, #12
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f1c8:	bf00      	nop
 800f1ca:	370c      	adds	r7, #12
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr

0800f1d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b085      	sub	sp, #20
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	4a40      	ldr	r2, [pc, #256]	; (800f2e8 <TIM_Base_SetConfig+0x114>)
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d013      	beq.n	800f214 <TIM_Base_SetConfig+0x40>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1f2:	d00f      	beq.n	800f214 <TIM_Base_SetConfig+0x40>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	4a3d      	ldr	r2, [pc, #244]	; (800f2ec <TIM_Base_SetConfig+0x118>)
 800f1f8:	4293      	cmp	r3, r2
 800f1fa:	d00b      	beq.n	800f214 <TIM_Base_SetConfig+0x40>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	4a3c      	ldr	r2, [pc, #240]	; (800f2f0 <TIM_Base_SetConfig+0x11c>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d007      	beq.n	800f214 <TIM_Base_SetConfig+0x40>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4a3b      	ldr	r2, [pc, #236]	; (800f2f4 <TIM_Base_SetConfig+0x120>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d003      	beq.n	800f214 <TIM_Base_SetConfig+0x40>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4a3a      	ldr	r2, [pc, #232]	; (800f2f8 <TIM_Base_SetConfig+0x124>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d108      	bne.n	800f226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f21a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	4313      	orrs	r3, r2
 800f224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	4a2f      	ldr	r2, [pc, #188]	; (800f2e8 <TIM_Base_SetConfig+0x114>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d01f      	beq.n	800f26e <TIM_Base_SetConfig+0x9a>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f234:	d01b      	beq.n	800f26e <TIM_Base_SetConfig+0x9a>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4a2c      	ldr	r2, [pc, #176]	; (800f2ec <TIM_Base_SetConfig+0x118>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d017      	beq.n	800f26e <TIM_Base_SetConfig+0x9a>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4a2b      	ldr	r2, [pc, #172]	; (800f2f0 <TIM_Base_SetConfig+0x11c>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d013      	beq.n	800f26e <TIM_Base_SetConfig+0x9a>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	4a2a      	ldr	r2, [pc, #168]	; (800f2f4 <TIM_Base_SetConfig+0x120>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d00f      	beq.n	800f26e <TIM_Base_SetConfig+0x9a>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4a29      	ldr	r2, [pc, #164]	; (800f2f8 <TIM_Base_SetConfig+0x124>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d00b      	beq.n	800f26e <TIM_Base_SetConfig+0x9a>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	4a28      	ldr	r2, [pc, #160]	; (800f2fc <TIM_Base_SetConfig+0x128>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d007      	beq.n	800f26e <TIM_Base_SetConfig+0x9a>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4a27      	ldr	r2, [pc, #156]	; (800f300 <TIM_Base_SetConfig+0x12c>)
 800f262:	4293      	cmp	r3, r2
 800f264:	d003      	beq.n	800f26e <TIM_Base_SetConfig+0x9a>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4a26      	ldr	r2, [pc, #152]	; (800f304 <TIM_Base_SetConfig+0x130>)
 800f26a:	4293      	cmp	r3, r2
 800f26c:	d108      	bne.n	800f280 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	4313      	orrs	r3, r2
 800f27e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	695b      	ldr	r3, [r3, #20]
 800f28a:	4313      	orrs	r3, r2
 800f28c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	68fa      	ldr	r2, [r7, #12]
 800f292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	689a      	ldr	r2, [r3, #8]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a10      	ldr	r2, [pc, #64]	; (800f2e8 <TIM_Base_SetConfig+0x114>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d00f      	beq.n	800f2cc <TIM_Base_SetConfig+0xf8>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a12      	ldr	r2, [pc, #72]	; (800f2f8 <TIM_Base_SetConfig+0x124>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d00b      	beq.n	800f2cc <TIM_Base_SetConfig+0xf8>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4a11      	ldr	r2, [pc, #68]	; (800f2fc <TIM_Base_SetConfig+0x128>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d007      	beq.n	800f2cc <TIM_Base_SetConfig+0xf8>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4a10      	ldr	r2, [pc, #64]	; (800f300 <TIM_Base_SetConfig+0x12c>)
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d003      	beq.n	800f2cc <TIM_Base_SetConfig+0xf8>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a0f      	ldr	r2, [pc, #60]	; (800f304 <TIM_Base_SetConfig+0x130>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d103      	bne.n	800f2d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	691a      	ldr	r2, [r3, #16]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	615a      	str	r2, [r3, #20]
}
 800f2da:	bf00      	nop
 800f2dc:	3714      	adds	r7, #20
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e4:	4770      	bx	lr
 800f2e6:	bf00      	nop
 800f2e8:	40012c00 	.word	0x40012c00
 800f2ec:	40000400 	.word	0x40000400
 800f2f0:	40000800 	.word	0x40000800
 800f2f4:	40000c00 	.word	0x40000c00
 800f2f8:	40013400 	.word	0x40013400
 800f2fc:	40014000 	.word	0x40014000
 800f300:	40014400 	.word	0x40014400
 800f304:	40014800 	.word	0x40014800

0800f308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f308:	b480      	push	{r7}
 800f30a:	b085      	sub	sp, #20
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d101      	bne.n	800f320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f31c:	2302      	movs	r3, #2
 800f31e:	e068      	b.n	800f3f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2201      	movs	r2, #1
 800f324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2202      	movs	r2, #2
 800f32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	689b      	ldr	r3, [r3, #8]
 800f33e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	4a2e      	ldr	r2, [pc, #184]	; (800f400 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f346:	4293      	cmp	r3, r2
 800f348:	d004      	beq.n	800f354 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	4a2d      	ldr	r2, [pc, #180]	; (800f404 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d108      	bne.n	800f366 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f35a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	4313      	orrs	r3, r2
 800f364:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f36c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	68fa      	ldr	r2, [r7, #12]
 800f374:	4313      	orrs	r3, r2
 800f376:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a1e      	ldr	r2, [pc, #120]	; (800f400 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d01d      	beq.n	800f3c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f392:	d018      	beq.n	800f3c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4a1b      	ldr	r2, [pc, #108]	; (800f408 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d013      	beq.n	800f3c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4a1a      	ldr	r2, [pc, #104]	; (800f40c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d00e      	beq.n	800f3c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4a18      	ldr	r2, [pc, #96]	; (800f410 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d009      	beq.n	800f3c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4a13      	ldr	r2, [pc, #76]	; (800f404 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d004      	beq.n	800f3c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a14      	ldr	r2, [pc, #80]	; (800f414 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d10c      	bne.n	800f3e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	68ba      	ldr	r2, [r7, #8]
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	68ba      	ldr	r2, [r7, #8]
 800f3de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f3f0:	2300      	movs	r3, #0
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3714      	adds	r7, #20
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr
 800f3fe:	bf00      	nop
 800f400:	40012c00 	.word	0x40012c00
 800f404:	40013400 	.word	0x40013400
 800f408:	40000400 	.word	0x40000400
 800f40c:	40000800 	.word	0x40000800
 800f410:	40000c00 	.word	0x40000c00
 800f414:	40014000 	.word	0x40014000

0800f418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f420:	bf00      	nop
 800f422:	370c      	adds	r7, #12
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr

0800f42c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f434:	bf00      	nop
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f448:	bf00      	nop
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d101      	bne.n	800f466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f462:	2301      	movs	r3, #1
 800f464:	e042      	b.n	800f4ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d106      	bne.n	800f47e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2200      	movs	r2, #0
 800f474:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f7f3 fc0d 	bl	8002c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2224      	movs	r2, #36	; 0x24
 800f482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f022 0201 	bic.w	r2, r2, #1
 800f494:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 f8c4 	bl	800f624 <UART_SetConfig>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d101      	bne.n	800f4a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e022      	b.n	800f4ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d002      	beq.n	800f4b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f001 fa90 	bl	80109d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	685a      	ldr	r2, [r3, #4]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f4c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	689a      	ldr	r2, [r3, #8]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f4d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f042 0201 	orr.w	r2, r2, #1
 800f4e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f001 fb17 	bl	8010b18 <UART_CheckIdleState>
 800f4ea:	4603      	mov	r3, r0
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b08a      	sub	sp, #40	; 0x28
 800f4f8:	af02      	add	r7, sp, #8
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	603b      	str	r3, [r7, #0]
 800f500:	4613      	mov	r3, r2
 800f502:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f50a:	2b20      	cmp	r3, #32
 800f50c:	f040 8084 	bne.w	800f618 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d002      	beq.n	800f51c <HAL_UART_Transmit+0x28>
 800f516:	88fb      	ldrh	r3, [r7, #6]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d101      	bne.n	800f520 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f51c:	2301      	movs	r3, #1
 800f51e:	e07c      	b.n	800f61a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800f526:	2b01      	cmp	r3, #1
 800f528:	d101      	bne.n	800f52e <HAL_UART_Transmit+0x3a>
 800f52a:	2302      	movs	r3, #2
 800f52c:	e075      	b.n	800f61a <HAL_UART_Transmit+0x126>
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2201      	movs	r2, #1
 800f532:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2200      	movs	r2, #0
 800f53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2221      	movs	r2, #33	; 0x21
 800f542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f546:	f7f7 f8fd 	bl	8006744 <HAL_GetTick>
 800f54a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	88fa      	ldrh	r2, [r7, #6]
 800f550:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	88fa      	ldrh	r2, [r7, #6]
 800f558:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f564:	d108      	bne.n	800f578 <HAL_UART_Transmit+0x84>
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	691b      	ldr	r3, [r3, #16]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d104      	bne.n	800f578 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f56e:	2300      	movs	r3, #0
 800f570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	61bb      	str	r3, [r7, #24]
 800f576:	e003      	b.n	800f580 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f57c:	2300      	movs	r3, #0
 800f57e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2200      	movs	r2, #0
 800f584:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800f588:	e02d      	b.n	800f5e6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	9300      	str	r3, [sp, #0]
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	2200      	movs	r2, #0
 800f592:	2180      	movs	r1, #128	; 0x80
 800f594:	68f8      	ldr	r0, [r7, #12]
 800f596:	f001 fb07 	bl	8010ba8 <UART_WaitOnFlagUntilTimeout>
 800f59a:	4603      	mov	r3, r0
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d001      	beq.n	800f5a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f5a0:	2303      	movs	r3, #3
 800f5a2:	e03a      	b.n	800f61a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d10b      	bne.n	800f5c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f5aa:	69bb      	ldr	r3, [r7, #24]
 800f5ac:	881a      	ldrh	r2, [r3, #0]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f5b6:	b292      	uxth	r2, r2
 800f5b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	3302      	adds	r3, #2
 800f5be:	61bb      	str	r3, [r7, #24]
 800f5c0:	e008      	b.n	800f5d4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f5c2:	69fb      	ldr	r3, [r7, #28]
 800f5c4:	781a      	ldrb	r2, [r3, #0]
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	b292      	uxth	r2, r2
 800f5cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	b29a      	uxth	r2, r3
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d1cb      	bne.n	800f58a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	9300      	str	r3, [sp, #0]
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	2140      	movs	r1, #64	; 0x40
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f001 fad3 	bl	8010ba8 <UART_WaitOnFlagUntilTimeout>
 800f602:	4603      	mov	r3, r0
 800f604:	2b00      	cmp	r3, #0
 800f606:	d001      	beq.n	800f60c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800f608:	2303      	movs	r3, #3
 800f60a:	e006      	b.n	800f61a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	2220      	movs	r2, #32
 800f610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800f614:	2300      	movs	r3, #0
 800f616:	e000      	b.n	800f61a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800f618:	2302      	movs	r3, #2
  }
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3720      	adds	r7, #32
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
	...

0800f624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f628:	b0a0      	sub	sp, #128	; 0x80
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800f62e:	2300      	movs	r3, #0
 800f630:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 800f632:	2300      	movs	r3, #0
 800f634:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800f638:	2300      	movs	r3, #0
 800f63a:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f63c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f63e:	689a      	ldr	r2, [r3, #8]
 800f640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f642:	691b      	ldr	r3, [r3, #16]
 800f644:	431a      	orrs	r2, r3
 800f646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f648:	695b      	ldr	r3, [r3, #20]
 800f64a:	431a      	orrs	r2, r3
 800f64c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f64e:	69db      	ldr	r3, [r3, #28]
 800f650:	4313      	orrs	r3, r2
 800f652:	67fb      	str	r3, [r7, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800f654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f656:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f658:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f65a:	4313      	orrs	r3, r2
 800f65c:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f65e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	49ab      	ldr	r1, [pc, #684]	; (800f914 <UART_SetConfig+0x2f0>)
 800f666:	4019      	ands	r1, r3
 800f668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f66e:	430b      	orrs	r3, r1
 800f670:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f67c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f67e:	68d9      	ldr	r1, [r3, #12]
 800f680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	ea40 0301 	orr.w	r3, r0, r1
 800f688:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f68a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f68c:	699b      	ldr	r3, [r3, #24]
 800f68e:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	4ba0      	ldr	r3, [pc, #640]	; (800f918 <UART_SetConfig+0x2f4>)
 800f696:	429a      	cmp	r2, r3
 800f698:	d004      	beq.n	800f6a4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f69a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f69c:	6a1a      	ldr	r2, [r3, #32]
 800f69e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f6a0:	4313      	orrs	r3, r2
 800f6a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f6a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800f6ae:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800f6b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f6b8:	430b      	orrs	r3, r1
 800f6ba:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f6bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c2:	f023 000f 	bic.w	r0, r3, #15
 800f6c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f6ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	ea40 0301 	orr.w	r3, r0, r1
 800f6d2:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f6d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	4b90      	ldr	r3, [pc, #576]	; (800f91c <UART_SetConfig+0x2f8>)
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d126      	bne.n	800f72c <UART_SetConfig+0x108>
 800f6de:	4b90      	ldr	r3, [pc, #576]	; (800f920 <UART_SetConfig+0x2fc>)
 800f6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6e4:	f003 0303 	and.w	r3, r3, #3
 800f6e8:	2b03      	cmp	r3, #3
 800f6ea:	d81b      	bhi.n	800f724 <UART_SetConfig+0x100>
 800f6ec:	a201      	add	r2, pc, #4	; (adr r2, 800f6f4 <UART_SetConfig+0xd0>)
 800f6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6f2:	bf00      	nop
 800f6f4:	0800f705 	.word	0x0800f705
 800f6f8:	0800f715 	.word	0x0800f715
 800f6fc:	0800f70d 	.word	0x0800f70d
 800f700:	0800f71d 	.word	0x0800f71d
 800f704:	2301      	movs	r3, #1
 800f706:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f70a:	e116      	b.n	800f93a <UART_SetConfig+0x316>
 800f70c:	2302      	movs	r3, #2
 800f70e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f712:	e112      	b.n	800f93a <UART_SetConfig+0x316>
 800f714:	2304      	movs	r3, #4
 800f716:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f71a:	e10e      	b.n	800f93a <UART_SetConfig+0x316>
 800f71c:	2308      	movs	r3, #8
 800f71e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f722:	e10a      	b.n	800f93a <UART_SetConfig+0x316>
 800f724:	2310      	movs	r3, #16
 800f726:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f72a:	e106      	b.n	800f93a <UART_SetConfig+0x316>
 800f72c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	4b7c      	ldr	r3, [pc, #496]	; (800f924 <UART_SetConfig+0x300>)
 800f732:	429a      	cmp	r2, r3
 800f734:	d138      	bne.n	800f7a8 <UART_SetConfig+0x184>
 800f736:	4b7a      	ldr	r3, [pc, #488]	; (800f920 <UART_SetConfig+0x2fc>)
 800f738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f73c:	f003 030c 	and.w	r3, r3, #12
 800f740:	2b0c      	cmp	r3, #12
 800f742:	d82d      	bhi.n	800f7a0 <UART_SetConfig+0x17c>
 800f744:	a201      	add	r2, pc, #4	; (adr r2, 800f74c <UART_SetConfig+0x128>)
 800f746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f74a:	bf00      	nop
 800f74c:	0800f781 	.word	0x0800f781
 800f750:	0800f7a1 	.word	0x0800f7a1
 800f754:	0800f7a1 	.word	0x0800f7a1
 800f758:	0800f7a1 	.word	0x0800f7a1
 800f75c:	0800f791 	.word	0x0800f791
 800f760:	0800f7a1 	.word	0x0800f7a1
 800f764:	0800f7a1 	.word	0x0800f7a1
 800f768:	0800f7a1 	.word	0x0800f7a1
 800f76c:	0800f789 	.word	0x0800f789
 800f770:	0800f7a1 	.word	0x0800f7a1
 800f774:	0800f7a1 	.word	0x0800f7a1
 800f778:	0800f7a1 	.word	0x0800f7a1
 800f77c:	0800f799 	.word	0x0800f799
 800f780:	2300      	movs	r3, #0
 800f782:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f786:	e0d8      	b.n	800f93a <UART_SetConfig+0x316>
 800f788:	2302      	movs	r3, #2
 800f78a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f78e:	e0d4      	b.n	800f93a <UART_SetConfig+0x316>
 800f790:	2304      	movs	r3, #4
 800f792:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f796:	e0d0      	b.n	800f93a <UART_SetConfig+0x316>
 800f798:	2308      	movs	r3, #8
 800f79a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f79e:	e0cc      	b.n	800f93a <UART_SetConfig+0x316>
 800f7a0:	2310      	movs	r3, #16
 800f7a2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f7a6:	e0c8      	b.n	800f93a <UART_SetConfig+0x316>
 800f7a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7aa:	681a      	ldr	r2, [r3, #0]
 800f7ac:	4b5e      	ldr	r3, [pc, #376]	; (800f928 <UART_SetConfig+0x304>)
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d125      	bne.n	800f7fe <UART_SetConfig+0x1da>
 800f7b2:	4b5b      	ldr	r3, [pc, #364]	; (800f920 <UART_SetConfig+0x2fc>)
 800f7b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f7bc:	2b30      	cmp	r3, #48	; 0x30
 800f7be:	d016      	beq.n	800f7ee <UART_SetConfig+0x1ca>
 800f7c0:	2b30      	cmp	r3, #48	; 0x30
 800f7c2:	d818      	bhi.n	800f7f6 <UART_SetConfig+0x1d2>
 800f7c4:	2b20      	cmp	r3, #32
 800f7c6:	d00a      	beq.n	800f7de <UART_SetConfig+0x1ba>
 800f7c8:	2b20      	cmp	r3, #32
 800f7ca:	d814      	bhi.n	800f7f6 <UART_SetConfig+0x1d2>
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d002      	beq.n	800f7d6 <UART_SetConfig+0x1b2>
 800f7d0:	2b10      	cmp	r3, #16
 800f7d2:	d008      	beq.n	800f7e6 <UART_SetConfig+0x1c2>
 800f7d4:	e00f      	b.n	800f7f6 <UART_SetConfig+0x1d2>
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f7dc:	e0ad      	b.n	800f93a <UART_SetConfig+0x316>
 800f7de:	2302      	movs	r3, #2
 800f7e0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f7e4:	e0a9      	b.n	800f93a <UART_SetConfig+0x316>
 800f7e6:	2304      	movs	r3, #4
 800f7e8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f7ec:	e0a5      	b.n	800f93a <UART_SetConfig+0x316>
 800f7ee:	2308      	movs	r3, #8
 800f7f0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f7f4:	e0a1      	b.n	800f93a <UART_SetConfig+0x316>
 800f7f6:	2310      	movs	r3, #16
 800f7f8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f7fc:	e09d      	b.n	800f93a <UART_SetConfig+0x316>
 800f7fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	4b4a      	ldr	r3, [pc, #296]	; (800f92c <UART_SetConfig+0x308>)
 800f804:	429a      	cmp	r2, r3
 800f806:	d125      	bne.n	800f854 <UART_SetConfig+0x230>
 800f808:	4b45      	ldr	r3, [pc, #276]	; (800f920 <UART_SetConfig+0x2fc>)
 800f80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f80e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f812:	2bc0      	cmp	r3, #192	; 0xc0
 800f814:	d016      	beq.n	800f844 <UART_SetConfig+0x220>
 800f816:	2bc0      	cmp	r3, #192	; 0xc0
 800f818:	d818      	bhi.n	800f84c <UART_SetConfig+0x228>
 800f81a:	2b80      	cmp	r3, #128	; 0x80
 800f81c:	d00a      	beq.n	800f834 <UART_SetConfig+0x210>
 800f81e:	2b80      	cmp	r3, #128	; 0x80
 800f820:	d814      	bhi.n	800f84c <UART_SetConfig+0x228>
 800f822:	2b00      	cmp	r3, #0
 800f824:	d002      	beq.n	800f82c <UART_SetConfig+0x208>
 800f826:	2b40      	cmp	r3, #64	; 0x40
 800f828:	d008      	beq.n	800f83c <UART_SetConfig+0x218>
 800f82a:	e00f      	b.n	800f84c <UART_SetConfig+0x228>
 800f82c:	2300      	movs	r3, #0
 800f82e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f832:	e082      	b.n	800f93a <UART_SetConfig+0x316>
 800f834:	2302      	movs	r3, #2
 800f836:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f83a:	e07e      	b.n	800f93a <UART_SetConfig+0x316>
 800f83c:	2304      	movs	r3, #4
 800f83e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f842:	e07a      	b.n	800f93a <UART_SetConfig+0x316>
 800f844:	2308      	movs	r3, #8
 800f846:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f84a:	e076      	b.n	800f93a <UART_SetConfig+0x316>
 800f84c:	2310      	movs	r3, #16
 800f84e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f852:	e072      	b.n	800f93a <UART_SetConfig+0x316>
 800f854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	4b35      	ldr	r3, [pc, #212]	; (800f930 <UART_SetConfig+0x30c>)
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d12a      	bne.n	800f8b4 <UART_SetConfig+0x290>
 800f85e:	4b30      	ldr	r3, [pc, #192]	; (800f920 <UART_SetConfig+0x2fc>)
 800f860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f86c:	d01a      	beq.n	800f8a4 <UART_SetConfig+0x280>
 800f86e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f872:	d81b      	bhi.n	800f8ac <UART_SetConfig+0x288>
 800f874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f878:	d00c      	beq.n	800f894 <UART_SetConfig+0x270>
 800f87a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f87e:	d815      	bhi.n	800f8ac <UART_SetConfig+0x288>
 800f880:	2b00      	cmp	r3, #0
 800f882:	d003      	beq.n	800f88c <UART_SetConfig+0x268>
 800f884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f888:	d008      	beq.n	800f89c <UART_SetConfig+0x278>
 800f88a:	e00f      	b.n	800f8ac <UART_SetConfig+0x288>
 800f88c:	2300      	movs	r3, #0
 800f88e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f892:	e052      	b.n	800f93a <UART_SetConfig+0x316>
 800f894:	2302      	movs	r3, #2
 800f896:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f89a:	e04e      	b.n	800f93a <UART_SetConfig+0x316>
 800f89c:	2304      	movs	r3, #4
 800f89e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f8a2:	e04a      	b.n	800f93a <UART_SetConfig+0x316>
 800f8a4:	2308      	movs	r3, #8
 800f8a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f8aa:	e046      	b.n	800f93a <UART_SetConfig+0x316>
 800f8ac:	2310      	movs	r3, #16
 800f8ae:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f8b2:	e042      	b.n	800f93a <UART_SetConfig+0x316>
 800f8b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8b6:	681a      	ldr	r2, [r3, #0]
 800f8b8:	4b17      	ldr	r3, [pc, #92]	; (800f918 <UART_SetConfig+0x2f4>)
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d13a      	bne.n	800f934 <UART_SetConfig+0x310>
 800f8be:	4b18      	ldr	r3, [pc, #96]	; (800f920 <UART_SetConfig+0x2fc>)
 800f8c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f8c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f8cc:	d01a      	beq.n	800f904 <UART_SetConfig+0x2e0>
 800f8ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f8d2:	d81b      	bhi.n	800f90c <UART_SetConfig+0x2e8>
 800f8d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8d8:	d00c      	beq.n	800f8f4 <UART_SetConfig+0x2d0>
 800f8da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8de:	d815      	bhi.n	800f90c <UART_SetConfig+0x2e8>
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d003      	beq.n	800f8ec <UART_SetConfig+0x2c8>
 800f8e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8e8:	d008      	beq.n	800f8fc <UART_SetConfig+0x2d8>
 800f8ea:	e00f      	b.n	800f90c <UART_SetConfig+0x2e8>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f8f2:	e022      	b.n	800f93a <UART_SetConfig+0x316>
 800f8f4:	2302      	movs	r3, #2
 800f8f6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f8fa:	e01e      	b.n	800f93a <UART_SetConfig+0x316>
 800f8fc:	2304      	movs	r3, #4
 800f8fe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f902:	e01a      	b.n	800f93a <UART_SetConfig+0x316>
 800f904:	2308      	movs	r3, #8
 800f906:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f90a:	e016      	b.n	800f93a <UART_SetConfig+0x316>
 800f90c:	2310      	movs	r3, #16
 800f90e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800f912:	e012      	b.n	800f93a <UART_SetConfig+0x316>
 800f914:	cfff69f3 	.word	0xcfff69f3
 800f918:	40008000 	.word	0x40008000
 800f91c:	40013800 	.word	0x40013800
 800f920:	40021000 	.word	0x40021000
 800f924:	40004400 	.word	0x40004400
 800f928:	40004800 	.word	0x40004800
 800f92c:	40004c00 	.word	0x40004c00
 800f930:	40005000 	.word	0x40005000
 800f934:	2310      	movs	r3, #16
 800f936:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f93a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	4b88      	ldr	r3, [pc, #544]	; (800fb60 <UART_SetConfig+0x53c>)
 800f940:	429a      	cmp	r2, r3
 800f942:	f040 8431 	bne.w	80101a8 <UART_SetConfig+0xb84>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f946:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800f94a:	2b08      	cmp	r3, #8
 800f94c:	f200 815c 	bhi.w	800fc08 <UART_SetConfig+0x5e4>
 800f950:	a201      	add	r2, pc, #4	; (adr r2, 800f958 <UART_SetConfig+0x334>)
 800f952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f956:	bf00      	nop
 800f958:	0800f97d 	.word	0x0800f97d
 800f95c:	0800fc09 	.word	0x0800fc09
 800f960:	0800fa1f 	.word	0x0800fa1f
 800f964:	0800fc09 	.word	0x0800fc09
 800f968:	0800fabd 	.word	0x0800fabd
 800f96c:	0800fc09 	.word	0x0800fc09
 800f970:	0800fc09 	.word	0x0800fc09
 800f974:	0800fc09 	.word	0x0800fc09
 800f978:	0800fb69 	.word	0x0800fb69
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800f97c:	f7fb fbe4 	bl	800b148 <HAL_RCC_GetPCLK1Freq>
 800f980:	4602      	mov	r2, r0
 800f982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f986:	2b00      	cmp	r3, #0
 800f988:	d044      	beq.n	800fa14 <UART_SetConfig+0x3f0>
 800f98a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d03e      	beq.n	800fa10 <UART_SetConfig+0x3ec>
 800f992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f996:	2b02      	cmp	r3, #2
 800f998:	d038      	beq.n	800fa0c <UART_SetConfig+0x3e8>
 800f99a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99e:	2b03      	cmp	r3, #3
 800f9a0:	d032      	beq.n	800fa08 <UART_SetConfig+0x3e4>
 800f9a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a6:	2b04      	cmp	r3, #4
 800f9a8:	d02c      	beq.n	800fa04 <UART_SetConfig+0x3e0>
 800f9aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ae:	2b05      	cmp	r3, #5
 800f9b0:	d026      	beq.n	800fa00 <UART_SetConfig+0x3dc>
 800f9b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b6:	2b06      	cmp	r3, #6
 800f9b8:	d020      	beq.n	800f9fc <UART_SetConfig+0x3d8>
 800f9ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9be:	2b07      	cmp	r3, #7
 800f9c0:	d01a      	beq.n	800f9f8 <UART_SetConfig+0x3d4>
 800f9c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c6:	2b08      	cmp	r3, #8
 800f9c8:	d014      	beq.n	800f9f4 <UART_SetConfig+0x3d0>
 800f9ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ce:	2b09      	cmp	r3, #9
 800f9d0:	d00e      	beq.n	800f9f0 <UART_SetConfig+0x3cc>
 800f9d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d6:	2b0a      	cmp	r3, #10
 800f9d8:	d008      	beq.n	800f9ec <UART_SetConfig+0x3c8>
 800f9da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9de:	2b0b      	cmp	r3, #11
 800f9e0:	d102      	bne.n	800f9e8 <UART_SetConfig+0x3c4>
 800f9e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f9e6:	e016      	b.n	800fa16 <UART_SetConfig+0x3f2>
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	e014      	b.n	800fa16 <UART_SetConfig+0x3f2>
 800f9ec:	2380      	movs	r3, #128	; 0x80
 800f9ee:	e012      	b.n	800fa16 <UART_SetConfig+0x3f2>
 800f9f0:	2340      	movs	r3, #64	; 0x40
 800f9f2:	e010      	b.n	800fa16 <UART_SetConfig+0x3f2>
 800f9f4:	2320      	movs	r3, #32
 800f9f6:	e00e      	b.n	800fa16 <UART_SetConfig+0x3f2>
 800f9f8:	2310      	movs	r3, #16
 800f9fa:	e00c      	b.n	800fa16 <UART_SetConfig+0x3f2>
 800f9fc:	230c      	movs	r3, #12
 800f9fe:	e00a      	b.n	800fa16 <UART_SetConfig+0x3f2>
 800fa00:	230a      	movs	r3, #10
 800fa02:	e008      	b.n	800fa16 <UART_SetConfig+0x3f2>
 800fa04:	2308      	movs	r3, #8
 800fa06:	e006      	b.n	800fa16 <UART_SetConfig+0x3f2>
 800fa08:	2306      	movs	r3, #6
 800fa0a:	e004      	b.n	800fa16 <UART_SetConfig+0x3f2>
 800fa0c:	2304      	movs	r3, #4
 800fa0e:	e002      	b.n	800fa16 <UART_SetConfig+0x3f2>
 800fa10:	2302      	movs	r3, #2
 800fa12:	e000      	b.n	800fa16 <UART_SetConfig+0x3f2>
 800fa14:	2301      	movs	r3, #1
 800fa16:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa1a:	66fb      	str	r3, [r7, #108]	; 0x6c
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800fa1c:	e0f8      	b.n	800fc10 <UART_SetConfig+0x5ec>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800fa1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d044      	beq.n	800fab0 <UART_SetConfig+0x48c>
 800fa26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	d03e      	beq.n	800faac <UART_SetConfig+0x488>
 800fa2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	d038      	beq.n	800faa8 <UART_SetConfig+0x484>
 800fa36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3a:	2b03      	cmp	r3, #3
 800fa3c:	d032      	beq.n	800faa4 <UART_SetConfig+0x480>
 800fa3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa42:	2b04      	cmp	r3, #4
 800fa44:	d02c      	beq.n	800faa0 <UART_SetConfig+0x47c>
 800fa46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa4a:	2b05      	cmp	r3, #5
 800fa4c:	d026      	beq.n	800fa9c <UART_SetConfig+0x478>
 800fa4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa52:	2b06      	cmp	r3, #6
 800fa54:	d020      	beq.n	800fa98 <UART_SetConfig+0x474>
 800fa56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa5a:	2b07      	cmp	r3, #7
 800fa5c:	d01a      	beq.n	800fa94 <UART_SetConfig+0x470>
 800fa5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa62:	2b08      	cmp	r3, #8
 800fa64:	d014      	beq.n	800fa90 <UART_SetConfig+0x46c>
 800fa66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa6a:	2b09      	cmp	r3, #9
 800fa6c:	d00e      	beq.n	800fa8c <UART_SetConfig+0x468>
 800fa6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa72:	2b0a      	cmp	r3, #10
 800fa74:	d008      	beq.n	800fa88 <UART_SetConfig+0x464>
 800fa76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa7a:	2b0b      	cmp	r3, #11
 800fa7c:	d102      	bne.n	800fa84 <UART_SetConfig+0x460>
 800fa7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa82:	e016      	b.n	800fab2 <UART_SetConfig+0x48e>
 800fa84:	2201      	movs	r2, #1
 800fa86:	e014      	b.n	800fab2 <UART_SetConfig+0x48e>
 800fa88:	2280      	movs	r2, #128	; 0x80
 800fa8a:	e012      	b.n	800fab2 <UART_SetConfig+0x48e>
 800fa8c:	2240      	movs	r2, #64	; 0x40
 800fa8e:	e010      	b.n	800fab2 <UART_SetConfig+0x48e>
 800fa90:	2220      	movs	r2, #32
 800fa92:	e00e      	b.n	800fab2 <UART_SetConfig+0x48e>
 800fa94:	2210      	movs	r2, #16
 800fa96:	e00c      	b.n	800fab2 <UART_SetConfig+0x48e>
 800fa98:	220c      	movs	r2, #12
 800fa9a:	e00a      	b.n	800fab2 <UART_SetConfig+0x48e>
 800fa9c:	220a      	movs	r2, #10
 800fa9e:	e008      	b.n	800fab2 <UART_SetConfig+0x48e>
 800faa0:	2208      	movs	r2, #8
 800faa2:	e006      	b.n	800fab2 <UART_SetConfig+0x48e>
 800faa4:	2206      	movs	r2, #6
 800faa6:	e004      	b.n	800fab2 <UART_SetConfig+0x48e>
 800faa8:	2204      	movs	r2, #4
 800faaa:	e002      	b.n	800fab2 <UART_SetConfig+0x48e>
 800faac:	2202      	movs	r2, #2
 800faae:	e000      	b.n	800fab2 <UART_SetConfig+0x48e>
 800fab0:	2201      	movs	r2, #1
 800fab2:	4b2c      	ldr	r3, [pc, #176]	; (800fb64 <UART_SetConfig+0x540>)
 800fab4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fab8:	66fb      	str	r3, [r7, #108]	; 0x6c
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 800faba:	e0a9      	b.n	800fc10 <UART_SetConfig+0x5ec>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800fabc:	f7fb faae 	bl	800b01c <HAL_RCC_GetSysClockFreq>
 800fac0:	4602      	mov	r2, r0
 800fac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d044      	beq.n	800fb54 <UART_SetConfig+0x530>
 800faca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800facc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800face:	2b01      	cmp	r3, #1
 800fad0:	d03e      	beq.n	800fb50 <UART_SetConfig+0x52c>
 800fad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad6:	2b02      	cmp	r3, #2
 800fad8:	d038      	beq.n	800fb4c <UART_SetConfig+0x528>
 800fada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fade:	2b03      	cmp	r3, #3
 800fae0:	d032      	beq.n	800fb48 <UART_SetConfig+0x524>
 800fae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae6:	2b04      	cmp	r3, #4
 800fae8:	d02c      	beq.n	800fb44 <UART_SetConfig+0x520>
 800faea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800faec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faee:	2b05      	cmp	r3, #5
 800faf0:	d026      	beq.n	800fb40 <UART_SetConfig+0x51c>
 800faf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800faf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faf6:	2b06      	cmp	r3, #6
 800faf8:	d020      	beq.n	800fb3c <UART_SetConfig+0x518>
 800fafa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fafe:	2b07      	cmp	r3, #7
 800fb00:	d01a      	beq.n	800fb38 <UART_SetConfig+0x514>
 800fb02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb06:	2b08      	cmp	r3, #8
 800fb08:	d014      	beq.n	800fb34 <UART_SetConfig+0x510>
 800fb0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb0e:	2b09      	cmp	r3, #9
 800fb10:	d00e      	beq.n	800fb30 <UART_SetConfig+0x50c>
 800fb12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb16:	2b0a      	cmp	r3, #10
 800fb18:	d008      	beq.n	800fb2c <UART_SetConfig+0x508>
 800fb1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb1e:	2b0b      	cmp	r3, #11
 800fb20:	d102      	bne.n	800fb28 <UART_SetConfig+0x504>
 800fb22:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb26:	e016      	b.n	800fb56 <UART_SetConfig+0x532>
 800fb28:	2301      	movs	r3, #1
 800fb2a:	e014      	b.n	800fb56 <UART_SetConfig+0x532>
 800fb2c:	2380      	movs	r3, #128	; 0x80
 800fb2e:	e012      	b.n	800fb56 <UART_SetConfig+0x532>
 800fb30:	2340      	movs	r3, #64	; 0x40
 800fb32:	e010      	b.n	800fb56 <UART_SetConfig+0x532>
 800fb34:	2320      	movs	r3, #32
 800fb36:	e00e      	b.n	800fb56 <UART_SetConfig+0x532>
 800fb38:	2310      	movs	r3, #16
 800fb3a:	e00c      	b.n	800fb56 <UART_SetConfig+0x532>
 800fb3c:	230c      	movs	r3, #12
 800fb3e:	e00a      	b.n	800fb56 <UART_SetConfig+0x532>
 800fb40:	230a      	movs	r3, #10
 800fb42:	e008      	b.n	800fb56 <UART_SetConfig+0x532>
 800fb44:	2308      	movs	r3, #8
 800fb46:	e006      	b.n	800fb56 <UART_SetConfig+0x532>
 800fb48:	2306      	movs	r3, #6
 800fb4a:	e004      	b.n	800fb56 <UART_SetConfig+0x532>
 800fb4c:	2304      	movs	r3, #4
 800fb4e:	e002      	b.n	800fb56 <UART_SetConfig+0x532>
 800fb50:	2302      	movs	r3, #2
 800fb52:	e000      	b.n	800fb56 <UART_SetConfig+0x532>
 800fb54:	2301      	movs	r3, #1
 800fb56:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb5a:	66fb      	str	r3, [r7, #108]	; 0x6c
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800fb5c:	e058      	b.n	800fc10 <UART_SetConfig+0x5ec>
 800fb5e:	bf00      	nop
 800fb60:	40008000 	.word	0x40008000
 800fb64:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800fb68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d044      	beq.n	800fbfa <UART_SetConfig+0x5d6>
 800fb70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	d03e      	beq.n	800fbf6 <UART_SetConfig+0x5d2>
 800fb78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb7c:	2b02      	cmp	r3, #2
 800fb7e:	d038      	beq.n	800fbf2 <UART_SetConfig+0x5ce>
 800fb80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb84:	2b03      	cmp	r3, #3
 800fb86:	d032      	beq.n	800fbee <UART_SetConfig+0x5ca>
 800fb88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb8c:	2b04      	cmp	r3, #4
 800fb8e:	d02c      	beq.n	800fbea <UART_SetConfig+0x5c6>
 800fb90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb94:	2b05      	cmp	r3, #5
 800fb96:	d026      	beq.n	800fbe6 <UART_SetConfig+0x5c2>
 800fb98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb9c:	2b06      	cmp	r3, #6
 800fb9e:	d020      	beq.n	800fbe2 <UART_SetConfig+0x5be>
 800fba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba4:	2b07      	cmp	r3, #7
 800fba6:	d01a      	beq.n	800fbde <UART_SetConfig+0x5ba>
 800fba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbac:	2b08      	cmp	r3, #8
 800fbae:	d014      	beq.n	800fbda <UART_SetConfig+0x5b6>
 800fbb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbb4:	2b09      	cmp	r3, #9
 800fbb6:	d00e      	beq.n	800fbd6 <UART_SetConfig+0x5b2>
 800fbb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbbc:	2b0a      	cmp	r3, #10
 800fbbe:	d008      	beq.n	800fbd2 <UART_SetConfig+0x5ae>
 800fbc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc4:	2b0b      	cmp	r3, #11
 800fbc6:	d102      	bne.n	800fbce <UART_SetConfig+0x5aa>
 800fbc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fbcc:	e016      	b.n	800fbfc <UART_SetConfig+0x5d8>
 800fbce:	2201      	movs	r2, #1
 800fbd0:	e014      	b.n	800fbfc <UART_SetConfig+0x5d8>
 800fbd2:	2280      	movs	r2, #128	; 0x80
 800fbd4:	e012      	b.n	800fbfc <UART_SetConfig+0x5d8>
 800fbd6:	2240      	movs	r2, #64	; 0x40
 800fbd8:	e010      	b.n	800fbfc <UART_SetConfig+0x5d8>
 800fbda:	2220      	movs	r2, #32
 800fbdc:	e00e      	b.n	800fbfc <UART_SetConfig+0x5d8>
 800fbde:	2210      	movs	r2, #16
 800fbe0:	e00c      	b.n	800fbfc <UART_SetConfig+0x5d8>
 800fbe2:	220c      	movs	r2, #12
 800fbe4:	e00a      	b.n	800fbfc <UART_SetConfig+0x5d8>
 800fbe6:	220a      	movs	r2, #10
 800fbe8:	e008      	b.n	800fbfc <UART_SetConfig+0x5d8>
 800fbea:	2208      	movs	r2, #8
 800fbec:	e006      	b.n	800fbfc <UART_SetConfig+0x5d8>
 800fbee:	2206      	movs	r2, #6
 800fbf0:	e004      	b.n	800fbfc <UART_SetConfig+0x5d8>
 800fbf2:	2204      	movs	r2, #4
 800fbf4:	e002      	b.n	800fbfc <UART_SetConfig+0x5d8>
 800fbf6:	2202      	movs	r2, #2
 800fbf8:	e000      	b.n	800fbfc <UART_SetConfig+0x5d8>
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc00:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc04:	66fb      	str	r3, [r7, #108]	; 0x6c
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 800fc06:	e003      	b.n	800fc10 <UART_SetConfig+0x5ec>
      default:
        ret = HAL_ERROR;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 800fc0e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800fc10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	f000 86c7 	beq.w	80109a6 <UART_SetConfig+0x1382>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc1a:	685a      	ldr	r2, [r3, #4]
 800fc1c:	4613      	mov	r3, r2
 800fc1e:	005b      	lsls	r3, r3, #1
 800fc20:	441a      	add	r2, r3
 800fc22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc24:	4293      	cmp	r3, r2
 800fc26:	d305      	bcc.n	800fc34 <UART_SetConfig+0x610>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fc28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d904      	bls.n	800fc3e <UART_SetConfig+0x61a>
      {
        ret = HAL_ERROR;
 800fc34:	2301      	movs	r3, #1
 800fc36:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800fc3a:	f000 beb4 	b.w	80109a6 <UART_SetConfig+0x1382>
      }
      else
      {
        switch (clocksource)
 800fc3e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800fc42:	2b08      	cmp	r3, #8
 800fc44:	f200 829a 	bhi.w	801017c <UART_SetConfig+0xb58>
 800fc48:	a201      	add	r2, pc, #4	; (adr r2, 800fc50 <UART_SetConfig+0x62c>)
 800fc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc4e:	bf00      	nop
 800fc50:	0800fc75 	.word	0x0800fc75
 800fc54:	0801017d 	.word	0x0801017d
 800fc58:	0800fdc1 	.word	0x0800fdc1
 800fc5c:	0801017d 	.word	0x0801017d
 800fc60:	0800fefb 	.word	0x0800fefb
 800fc64:	0801017d 	.word	0x0801017d
 800fc68:	0801017d 	.word	0x0801017d
 800fc6c:	0801017d 	.word	0x0801017d
 800fc70:	08010041 	.word	0x08010041
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800fc74:	f7fb fa68 	bl	800b148 <HAL_RCC_GetPCLK1Freq>
 800fc78:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	653b      	str	r3, [r7, #80]	; 0x50
 800fc80:	657a      	str	r2, [r7, #84]	; 0x54
 800fc82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d067      	beq.n	800fd5a <UART_SetConfig+0x736>
 800fc8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	d05e      	beq.n	800fd50 <UART_SetConfig+0x72c>
 800fc92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc96:	2b02      	cmp	r3, #2
 800fc98:	d055      	beq.n	800fd46 <UART_SetConfig+0x722>
 800fc9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9e:	2b03      	cmp	r3, #3
 800fca0:	d04c      	beq.n	800fd3c <UART_SetConfig+0x718>
 800fca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca6:	2b04      	cmp	r3, #4
 800fca8:	d043      	beq.n	800fd32 <UART_SetConfig+0x70e>
 800fcaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcae:	2b05      	cmp	r3, #5
 800fcb0:	d03a      	beq.n	800fd28 <UART_SetConfig+0x704>
 800fcb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb6:	2b06      	cmp	r3, #6
 800fcb8:	d031      	beq.n	800fd1e <UART_SetConfig+0x6fa>
 800fcba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcbe:	2b07      	cmp	r3, #7
 800fcc0:	d028      	beq.n	800fd14 <UART_SetConfig+0x6f0>
 800fcc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc6:	2b08      	cmp	r3, #8
 800fcc8:	d01f      	beq.n	800fd0a <UART_SetConfig+0x6e6>
 800fcca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcce:	2b09      	cmp	r3, #9
 800fcd0:	d016      	beq.n	800fd00 <UART_SetConfig+0x6dc>
 800fcd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd6:	2b0a      	cmp	r3, #10
 800fcd8:	d00d      	beq.n	800fcf6 <UART_SetConfig+0x6d2>
 800fcda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcde:	2b0b      	cmp	r3, #11
 800fce0:	d104      	bne.n	800fcec <UART_SetConfig+0x6c8>
 800fce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fce6:	f04f 0300 	mov.w	r3, #0
 800fcea:	e03a      	b.n	800fd62 <UART_SetConfig+0x73e>
 800fcec:	f04f 0201 	mov.w	r2, #1
 800fcf0:	f04f 0300 	mov.w	r3, #0
 800fcf4:	e035      	b.n	800fd62 <UART_SetConfig+0x73e>
 800fcf6:	f04f 0280 	mov.w	r2, #128	; 0x80
 800fcfa:	f04f 0300 	mov.w	r3, #0
 800fcfe:	e030      	b.n	800fd62 <UART_SetConfig+0x73e>
 800fd00:	f04f 0240 	mov.w	r2, #64	; 0x40
 800fd04:	f04f 0300 	mov.w	r3, #0
 800fd08:	e02b      	b.n	800fd62 <UART_SetConfig+0x73e>
 800fd0a:	f04f 0220 	mov.w	r2, #32
 800fd0e:	f04f 0300 	mov.w	r3, #0
 800fd12:	e026      	b.n	800fd62 <UART_SetConfig+0x73e>
 800fd14:	f04f 0210 	mov.w	r2, #16
 800fd18:	f04f 0300 	mov.w	r3, #0
 800fd1c:	e021      	b.n	800fd62 <UART_SetConfig+0x73e>
 800fd1e:	f04f 020c 	mov.w	r2, #12
 800fd22:	f04f 0300 	mov.w	r3, #0
 800fd26:	e01c      	b.n	800fd62 <UART_SetConfig+0x73e>
 800fd28:	f04f 020a 	mov.w	r2, #10
 800fd2c:	f04f 0300 	mov.w	r3, #0
 800fd30:	e017      	b.n	800fd62 <UART_SetConfig+0x73e>
 800fd32:	f04f 0208 	mov.w	r2, #8
 800fd36:	f04f 0300 	mov.w	r3, #0
 800fd3a:	e012      	b.n	800fd62 <UART_SetConfig+0x73e>
 800fd3c:	f04f 0206 	mov.w	r2, #6
 800fd40:	f04f 0300 	mov.w	r3, #0
 800fd44:	e00d      	b.n	800fd62 <UART_SetConfig+0x73e>
 800fd46:	f04f 0204 	mov.w	r2, #4
 800fd4a:	f04f 0300 	mov.w	r3, #0
 800fd4e:	e008      	b.n	800fd62 <UART_SetConfig+0x73e>
 800fd50:	f04f 0202 	mov.w	r2, #2
 800fd54:	f04f 0300 	mov.w	r3, #0
 800fd58:	e003      	b.n	800fd62 <UART_SetConfig+0x73e>
 800fd5a:	f04f 0201 	mov.w	r2, #1
 800fd5e:	f04f 0300 	mov.w	r3, #0
 800fd62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800fd66:	f7f0 ffb7 	bl	8000cd8 <__aeabi_uldivmod>
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	4610      	mov	r0, r2
 800fd70:	4619      	mov	r1, r3
 800fd72:	f04f 0200 	mov.w	r2, #0
 800fd76:	f04f 0300 	mov.w	r3, #0
 800fd7a:	020b      	lsls	r3, r1, #8
 800fd7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fd80:	0202      	lsls	r2, r0, #8
 800fd82:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800fd84:	6849      	ldr	r1, [r1, #4]
 800fd86:	0849      	lsrs	r1, r1, #1
 800fd88:	2000      	movs	r0, #0
 800fd8a:	64b9      	str	r1, [r7, #72]	; 0x48
 800fd8c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fd8e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800fd92:	4621      	mov	r1, r4
 800fd94:	1851      	adds	r1, r2, r1
 800fd96:	6439      	str	r1, [r7, #64]	; 0x40
 800fd98:	4629      	mov	r1, r5
 800fd9a:	eb43 0101 	adc.w	r1, r3, r1
 800fd9e:	6479      	str	r1, [r7, #68]	; 0x44
 800fda0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	2200      	movs	r2, #0
 800fda6:	63bb      	str	r3, [r7, #56]	; 0x38
 800fda8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fdaa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fdae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800fdb2:	f7f0 ff91 	bl	8000cd8 <__aeabi_uldivmod>
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	460b      	mov	r3, r1
 800fdba:	4613      	mov	r3, r2
 800fdbc:	677b      	str	r3, [r7, #116]	; 0x74
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800fdbe:	e1e1      	b.n	8010184 <UART_SetConfig+0xb60>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d067      	beq.n	800fe98 <UART_SetConfig+0x874>
 800fdc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	d05e      	beq.n	800fe8e <UART_SetConfig+0x86a>
 800fdd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd4:	2b02      	cmp	r3, #2
 800fdd6:	d055      	beq.n	800fe84 <UART_SetConfig+0x860>
 800fdd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fddc:	2b03      	cmp	r3, #3
 800fdde:	d04c      	beq.n	800fe7a <UART_SetConfig+0x856>
 800fde0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde4:	2b04      	cmp	r3, #4
 800fde6:	d043      	beq.n	800fe70 <UART_SetConfig+0x84c>
 800fde8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdec:	2b05      	cmp	r3, #5
 800fdee:	d03a      	beq.n	800fe66 <UART_SetConfig+0x842>
 800fdf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdf4:	2b06      	cmp	r3, #6
 800fdf6:	d031      	beq.n	800fe5c <UART_SetConfig+0x838>
 800fdf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfc:	2b07      	cmp	r3, #7
 800fdfe:	d028      	beq.n	800fe52 <UART_SetConfig+0x82e>
 800fe00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe04:	2b08      	cmp	r3, #8
 800fe06:	d01f      	beq.n	800fe48 <UART_SetConfig+0x824>
 800fe08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0c:	2b09      	cmp	r3, #9
 800fe0e:	d016      	beq.n	800fe3e <UART_SetConfig+0x81a>
 800fe10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe14:	2b0a      	cmp	r3, #10
 800fe16:	d00d      	beq.n	800fe34 <UART_SetConfig+0x810>
 800fe18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe1c:	2b0b      	cmp	r3, #11
 800fe1e:	d104      	bne.n	800fe2a <UART_SetConfig+0x806>
 800fe20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fe24:	f04f 0300 	mov.w	r3, #0
 800fe28:	e03a      	b.n	800fea0 <UART_SetConfig+0x87c>
 800fe2a:	f04f 0201 	mov.w	r2, #1
 800fe2e:	f04f 0300 	mov.w	r3, #0
 800fe32:	e035      	b.n	800fea0 <UART_SetConfig+0x87c>
 800fe34:	f04f 0280 	mov.w	r2, #128	; 0x80
 800fe38:	f04f 0300 	mov.w	r3, #0
 800fe3c:	e030      	b.n	800fea0 <UART_SetConfig+0x87c>
 800fe3e:	f04f 0240 	mov.w	r2, #64	; 0x40
 800fe42:	f04f 0300 	mov.w	r3, #0
 800fe46:	e02b      	b.n	800fea0 <UART_SetConfig+0x87c>
 800fe48:	f04f 0220 	mov.w	r2, #32
 800fe4c:	f04f 0300 	mov.w	r3, #0
 800fe50:	e026      	b.n	800fea0 <UART_SetConfig+0x87c>
 800fe52:	f04f 0210 	mov.w	r2, #16
 800fe56:	f04f 0300 	mov.w	r3, #0
 800fe5a:	e021      	b.n	800fea0 <UART_SetConfig+0x87c>
 800fe5c:	f04f 020c 	mov.w	r2, #12
 800fe60:	f04f 0300 	mov.w	r3, #0
 800fe64:	e01c      	b.n	800fea0 <UART_SetConfig+0x87c>
 800fe66:	f04f 020a 	mov.w	r2, #10
 800fe6a:	f04f 0300 	mov.w	r3, #0
 800fe6e:	e017      	b.n	800fea0 <UART_SetConfig+0x87c>
 800fe70:	f04f 0208 	mov.w	r2, #8
 800fe74:	f04f 0300 	mov.w	r3, #0
 800fe78:	e012      	b.n	800fea0 <UART_SetConfig+0x87c>
 800fe7a:	f04f 0206 	mov.w	r2, #6
 800fe7e:	f04f 0300 	mov.w	r3, #0
 800fe82:	e00d      	b.n	800fea0 <UART_SetConfig+0x87c>
 800fe84:	f04f 0204 	mov.w	r2, #4
 800fe88:	f04f 0300 	mov.w	r3, #0
 800fe8c:	e008      	b.n	800fea0 <UART_SetConfig+0x87c>
 800fe8e:	f04f 0202 	mov.w	r2, #2
 800fe92:	f04f 0300 	mov.w	r3, #0
 800fe96:	e003      	b.n	800fea0 <UART_SetConfig+0x87c>
 800fe98:	f04f 0201 	mov.w	r2, #1
 800fe9c:	f04f 0300 	mov.w	r3, #0
 800fea0:	489d      	ldr	r0, [pc, #628]	; (8010118 <UART_SetConfig+0xaf4>)
 800fea2:	f04f 0100 	mov.w	r1, #0
 800fea6:	f7f0 ff17 	bl	8000cd8 <__aeabi_uldivmod>
 800feaa:	4602      	mov	r2, r0
 800feac:	460b      	mov	r3, r1
 800feae:	4610      	mov	r0, r2
 800feb0:	4619      	mov	r1, r3
 800feb2:	f04f 0200 	mov.w	r2, #0
 800feb6:	f04f 0300 	mov.w	r3, #0
 800feba:	020b      	lsls	r3, r1, #8
 800febc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fec0:	0202      	lsls	r2, r0, #8
 800fec2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800fec4:	6849      	ldr	r1, [r1, #4]
 800fec6:	0849      	lsrs	r1, r1, #1
 800fec8:	2000      	movs	r0, #0
 800feca:	468a      	mov	sl, r1
 800fecc:	4683      	mov	fp, r0
 800fece:	eb12 010a 	adds.w	r1, r2, sl
 800fed2:	6339      	str	r1, [r7, #48]	; 0x30
 800fed4:	eb43 030b 	adc.w	r3, r3, fp
 800fed8:	637b      	str	r3, [r7, #52]	; 0x34
 800feda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	2200      	movs	r2, #0
 800fee0:	62bb      	str	r3, [r7, #40]	; 0x28
 800fee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fee8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800feec:	f7f0 fef4 	bl	8000cd8 <__aeabi_uldivmod>
 800fef0:	4602      	mov	r2, r0
 800fef2:	460b      	mov	r3, r1
 800fef4:	4613      	mov	r3, r2
 800fef6:	677b      	str	r3, [r7, #116]	; 0x74
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800fef8:	e144      	b.n	8010184 <UART_SetConfig+0xb60>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800fefa:	f7fb f88f 	bl	800b01c <HAL_RCC_GetSysClockFreq>
 800fefe:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff02:	2200      	movs	r2, #0
 800ff04:	623b      	str	r3, [r7, #32]
 800ff06:	627a      	str	r2, [r7, #36]	; 0x24
 800ff08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d067      	beq.n	800ffe0 <UART_SetConfig+0x9bc>
 800ff10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d05e      	beq.n	800ffd6 <UART_SetConfig+0x9b2>
 800ff18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff1c:	2b02      	cmp	r3, #2
 800ff1e:	d055      	beq.n	800ffcc <UART_SetConfig+0x9a8>
 800ff20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff24:	2b03      	cmp	r3, #3
 800ff26:	d04c      	beq.n	800ffc2 <UART_SetConfig+0x99e>
 800ff28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff2c:	2b04      	cmp	r3, #4
 800ff2e:	d043      	beq.n	800ffb8 <UART_SetConfig+0x994>
 800ff30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff34:	2b05      	cmp	r3, #5
 800ff36:	d03a      	beq.n	800ffae <UART_SetConfig+0x98a>
 800ff38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff3c:	2b06      	cmp	r3, #6
 800ff3e:	d031      	beq.n	800ffa4 <UART_SetConfig+0x980>
 800ff40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff44:	2b07      	cmp	r3, #7
 800ff46:	d028      	beq.n	800ff9a <UART_SetConfig+0x976>
 800ff48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4c:	2b08      	cmp	r3, #8
 800ff4e:	d01f      	beq.n	800ff90 <UART_SetConfig+0x96c>
 800ff50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff54:	2b09      	cmp	r3, #9
 800ff56:	d016      	beq.n	800ff86 <UART_SetConfig+0x962>
 800ff58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff5c:	2b0a      	cmp	r3, #10
 800ff5e:	d00d      	beq.n	800ff7c <UART_SetConfig+0x958>
 800ff60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff64:	2b0b      	cmp	r3, #11
 800ff66:	d104      	bne.n	800ff72 <UART_SetConfig+0x94e>
 800ff68:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ff6c:	f04f 0300 	mov.w	r3, #0
 800ff70:	e03a      	b.n	800ffe8 <UART_SetConfig+0x9c4>
 800ff72:	f04f 0201 	mov.w	r2, #1
 800ff76:	f04f 0300 	mov.w	r3, #0
 800ff7a:	e035      	b.n	800ffe8 <UART_SetConfig+0x9c4>
 800ff7c:	f04f 0280 	mov.w	r2, #128	; 0x80
 800ff80:	f04f 0300 	mov.w	r3, #0
 800ff84:	e030      	b.n	800ffe8 <UART_SetConfig+0x9c4>
 800ff86:	f04f 0240 	mov.w	r2, #64	; 0x40
 800ff8a:	f04f 0300 	mov.w	r3, #0
 800ff8e:	e02b      	b.n	800ffe8 <UART_SetConfig+0x9c4>
 800ff90:	f04f 0220 	mov.w	r2, #32
 800ff94:	f04f 0300 	mov.w	r3, #0
 800ff98:	e026      	b.n	800ffe8 <UART_SetConfig+0x9c4>
 800ff9a:	f04f 0210 	mov.w	r2, #16
 800ff9e:	f04f 0300 	mov.w	r3, #0
 800ffa2:	e021      	b.n	800ffe8 <UART_SetConfig+0x9c4>
 800ffa4:	f04f 020c 	mov.w	r2, #12
 800ffa8:	f04f 0300 	mov.w	r3, #0
 800ffac:	e01c      	b.n	800ffe8 <UART_SetConfig+0x9c4>
 800ffae:	f04f 020a 	mov.w	r2, #10
 800ffb2:	f04f 0300 	mov.w	r3, #0
 800ffb6:	e017      	b.n	800ffe8 <UART_SetConfig+0x9c4>
 800ffb8:	f04f 0208 	mov.w	r2, #8
 800ffbc:	f04f 0300 	mov.w	r3, #0
 800ffc0:	e012      	b.n	800ffe8 <UART_SetConfig+0x9c4>
 800ffc2:	f04f 0206 	mov.w	r2, #6
 800ffc6:	f04f 0300 	mov.w	r3, #0
 800ffca:	e00d      	b.n	800ffe8 <UART_SetConfig+0x9c4>
 800ffcc:	f04f 0204 	mov.w	r2, #4
 800ffd0:	f04f 0300 	mov.w	r3, #0
 800ffd4:	e008      	b.n	800ffe8 <UART_SetConfig+0x9c4>
 800ffd6:	f04f 0202 	mov.w	r2, #2
 800ffda:	f04f 0300 	mov.w	r3, #0
 800ffde:	e003      	b.n	800ffe8 <UART_SetConfig+0x9c4>
 800ffe0:	f04f 0201 	mov.w	r2, #1
 800ffe4:	f04f 0300 	mov.w	r3, #0
 800ffe8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ffec:	f7f0 fe74 	bl	8000cd8 <__aeabi_uldivmod>
 800fff0:	4602      	mov	r2, r0
 800fff2:	460b      	mov	r3, r1
 800fff4:	4610      	mov	r0, r2
 800fff6:	4619      	mov	r1, r3
 800fff8:	f04f 0200 	mov.w	r2, #0
 800fffc:	f04f 0300 	mov.w	r3, #0
 8010000:	020b      	lsls	r3, r1, #8
 8010002:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010006:	0202      	lsls	r2, r0, #8
 8010008:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801000a:	6849      	ldr	r1, [r1, #4]
 801000c:	0849      	lsrs	r1, r1, #1
 801000e:	2000      	movs	r0, #0
 8010010:	4688      	mov	r8, r1
 8010012:	4681      	mov	r9, r0
 8010014:	eb12 0108 	adds.w	r1, r2, r8
 8010018:	61b9      	str	r1, [r7, #24]
 801001a:	eb43 0309 	adc.w	r3, r3, r9
 801001e:	61fb      	str	r3, [r7, #28]
 8010020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	2200      	movs	r2, #0
 8010026:	613b      	str	r3, [r7, #16]
 8010028:	617a      	str	r2, [r7, #20]
 801002a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801002e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010032:	f7f0 fe51 	bl	8000cd8 <__aeabi_uldivmod>
 8010036:	4602      	mov	r2, r0
 8010038:	460b      	mov	r3, r1
 801003a:	4613      	mov	r3, r2
 801003c:	677b      	str	r3, [r7, #116]	; 0x74
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 801003e:	e0a1      	b.n	8010184 <UART_SetConfig+0xb60>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010044:	2b00      	cmp	r3, #0
 8010046:	d069      	beq.n	801011c <UART_SetConfig+0xaf8>
 8010048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801004a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801004c:	2b01      	cmp	r3, #1
 801004e:	d05e      	beq.n	801010e <UART_SetConfig+0xaea>
 8010050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010054:	2b02      	cmp	r3, #2
 8010056:	d055      	beq.n	8010104 <UART_SetConfig+0xae0>
 8010058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801005a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801005c:	2b03      	cmp	r3, #3
 801005e:	d04c      	beq.n	80100fa <UART_SetConfig+0xad6>
 8010060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010064:	2b04      	cmp	r3, #4
 8010066:	d043      	beq.n	80100f0 <UART_SetConfig+0xacc>
 8010068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801006a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801006c:	2b05      	cmp	r3, #5
 801006e:	d03a      	beq.n	80100e6 <UART_SetConfig+0xac2>
 8010070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010074:	2b06      	cmp	r3, #6
 8010076:	d031      	beq.n	80100dc <UART_SetConfig+0xab8>
 8010078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801007a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801007c:	2b07      	cmp	r3, #7
 801007e:	d028      	beq.n	80100d2 <UART_SetConfig+0xaae>
 8010080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010084:	2b08      	cmp	r3, #8
 8010086:	d01f      	beq.n	80100c8 <UART_SetConfig+0xaa4>
 8010088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801008a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008c:	2b09      	cmp	r3, #9
 801008e:	d016      	beq.n	80100be <UART_SetConfig+0xa9a>
 8010090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010094:	2b0a      	cmp	r3, #10
 8010096:	d00d      	beq.n	80100b4 <UART_SetConfig+0xa90>
 8010098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801009a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801009c:	2b0b      	cmp	r3, #11
 801009e:	d104      	bne.n	80100aa <UART_SetConfig+0xa86>
 80100a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80100a4:	f04f 0300 	mov.w	r3, #0
 80100a8:	e03c      	b.n	8010124 <UART_SetConfig+0xb00>
 80100aa:	f04f 0201 	mov.w	r2, #1
 80100ae:	f04f 0300 	mov.w	r3, #0
 80100b2:	e037      	b.n	8010124 <UART_SetConfig+0xb00>
 80100b4:	f04f 0280 	mov.w	r2, #128	; 0x80
 80100b8:	f04f 0300 	mov.w	r3, #0
 80100bc:	e032      	b.n	8010124 <UART_SetConfig+0xb00>
 80100be:	f04f 0240 	mov.w	r2, #64	; 0x40
 80100c2:	f04f 0300 	mov.w	r3, #0
 80100c6:	e02d      	b.n	8010124 <UART_SetConfig+0xb00>
 80100c8:	f04f 0220 	mov.w	r2, #32
 80100cc:	f04f 0300 	mov.w	r3, #0
 80100d0:	e028      	b.n	8010124 <UART_SetConfig+0xb00>
 80100d2:	f04f 0210 	mov.w	r2, #16
 80100d6:	f04f 0300 	mov.w	r3, #0
 80100da:	e023      	b.n	8010124 <UART_SetConfig+0xb00>
 80100dc:	f04f 020c 	mov.w	r2, #12
 80100e0:	f04f 0300 	mov.w	r3, #0
 80100e4:	e01e      	b.n	8010124 <UART_SetConfig+0xb00>
 80100e6:	f04f 020a 	mov.w	r2, #10
 80100ea:	f04f 0300 	mov.w	r3, #0
 80100ee:	e019      	b.n	8010124 <UART_SetConfig+0xb00>
 80100f0:	f04f 0208 	mov.w	r2, #8
 80100f4:	f04f 0300 	mov.w	r3, #0
 80100f8:	e014      	b.n	8010124 <UART_SetConfig+0xb00>
 80100fa:	f04f 0206 	mov.w	r2, #6
 80100fe:	f04f 0300 	mov.w	r3, #0
 8010102:	e00f      	b.n	8010124 <UART_SetConfig+0xb00>
 8010104:	f04f 0204 	mov.w	r2, #4
 8010108:	f04f 0300 	mov.w	r3, #0
 801010c:	e00a      	b.n	8010124 <UART_SetConfig+0xb00>
 801010e:	f04f 0202 	mov.w	r2, #2
 8010112:	f04f 0300 	mov.w	r3, #0
 8010116:	e005      	b.n	8010124 <UART_SetConfig+0xb00>
 8010118:	00f42400 	.word	0x00f42400
 801011c:	f04f 0201 	mov.w	r2, #1
 8010120:	f04f 0300 	mov.w	r3, #0
 8010124:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8010128:	f04f 0100 	mov.w	r1, #0
 801012c:	f7f0 fdd4 	bl	8000cd8 <__aeabi_uldivmod>
 8010130:	4602      	mov	r2, r0
 8010132:	460b      	mov	r3, r1
 8010134:	4610      	mov	r0, r2
 8010136:	4619      	mov	r1, r3
 8010138:	f04f 0200 	mov.w	r2, #0
 801013c:	f04f 0300 	mov.w	r3, #0
 8010140:	020b      	lsls	r3, r1, #8
 8010142:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010146:	0202      	lsls	r2, r0, #8
 8010148:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801014a:	6849      	ldr	r1, [r1, #4]
 801014c:	0849      	lsrs	r1, r1, #1
 801014e:	2000      	movs	r0, #0
 8010150:	460c      	mov	r4, r1
 8010152:	4605      	mov	r5, r0
 8010154:	1911      	adds	r1, r2, r4
 8010156:	60b9      	str	r1, [r7, #8]
 8010158:	416b      	adcs	r3, r5
 801015a:	60fb      	str	r3, [r7, #12]
 801015c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	603b      	str	r3, [r7, #0]
 8010164:	607a      	str	r2, [r7, #4]
 8010166:	e9d7 2300 	ldrd	r2, r3, [r7]
 801016a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801016e:	f7f0 fdb3 	bl	8000cd8 <__aeabi_uldivmod>
 8010172:	4602      	mov	r2, r0
 8010174:	460b      	mov	r3, r1
 8010176:	4613      	mov	r3, r2
 8010178:	677b      	str	r3, [r7, #116]	; 0x74
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 801017a:	e003      	b.n	8010184 <UART_SetConfig+0xb60>
          default:
            ret = HAL_ERROR;
 801017c:	2301      	movs	r3, #1
 801017e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            break;
 8010182:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801018a:	d309      	bcc.n	80101a0 <UART_SetConfig+0xb7c>
 801018c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801018e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010192:	d205      	bcs.n	80101a0 <UART_SetConfig+0xb7c>
        {
          huart->Instance->BRR = usartdiv;
 8010194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801019a:	60da      	str	r2, [r3, #12]
 801019c:	f000 bc03 	b.w	80109a6 <UART_SetConfig+0x1382>
        }
        else
        {
          ret = HAL_ERROR;
 80101a0:	2301      	movs	r3, #1
 80101a2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80101a6:	e3fe      	b.n	80109a6 <UART_SetConfig+0x1382>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80101a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101aa:	69db      	ldr	r3, [r3, #28]
 80101ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80101b0:	f040 8207 	bne.w	80105c2 <UART_SetConfig+0xf9e>
  {
    switch (clocksource)
 80101b4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80101b8:	2b08      	cmp	r3, #8
 80101ba:	f200 81dc 	bhi.w	8010576 <UART_SetConfig+0xf52>
 80101be:	a201      	add	r2, pc, #4	; (adr r2, 80101c4 <UART_SetConfig+0xba0>)
 80101c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101c4:	080101e9 	.word	0x080101e9
 80101c8:	080102a1 	.word	0x080102a1
 80101cc:	08010359 	.word	0x08010359
 80101d0:	08010577 	.word	0x08010577
 80101d4:	0801040b 	.word	0x0801040b
 80101d8:	08010577 	.word	0x08010577
 80101dc:	08010577 	.word	0x08010577
 80101e0:	08010577 	.word	0x08010577
 80101e4:	080104c3 	.word	0x080104c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80101e8:	f7fa ffae 	bl	800b148 <HAL_RCC_GetPCLK1Freq>
 80101ec:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d044      	beq.n	8010280 <UART_SetConfig+0xc5c>
 80101f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d03e      	beq.n	801027c <UART_SetConfig+0xc58>
 80101fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010202:	2b02      	cmp	r3, #2
 8010204:	d038      	beq.n	8010278 <UART_SetConfig+0xc54>
 8010206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801020a:	2b03      	cmp	r3, #3
 801020c:	d032      	beq.n	8010274 <UART_SetConfig+0xc50>
 801020e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010212:	2b04      	cmp	r3, #4
 8010214:	d02c      	beq.n	8010270 <UART_SetConfig+0xc4c>
 8010216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801021a:	2b05      	cmp	r3, #5
 801021c:	d026      	beq.n	801026c <UART_SetConfig+0xc48>
 801021e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010222:	2b06      	cmp	r3, #6
 8010224:	d020      	beq.n	8010268 <UART_SetConfig+0xc44>
 8010226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801022a:	2b07      	cmp	r3, #7
 801022c:	d01a      	beq.n	8010264 <UART_SetConfig+0xc40>
 801022e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010232:	2b08      	cmp	r3, #8
 8010234:	d014      	beq.n	8010260 <UART_SetConfig+0xc3c>
 8010236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801023a:	2b09      	cmp	r3, #9
 801023c:	d00e      	beq.n	801025c <UART_SetConfig+0xc38>
 801023e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010242:	2b0a      	cmp	r3, #10
 8010244:	d008      	beq.n	8010258 <UART_SetConfig+0xc34>
 8010246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024a:	2b0b      	cmp	r3, #11
 801024c:	d102      	bne.n	8010254 <UART_SetConfig+0xc30>
 801024e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010252:	e016      	b.n	8010282 <UART_SetConfig+0xc5e>
 8010254:	2301      	movs	r3, #1
 8010256:	e014      	b.n	8010282 <UART_SetConfig+0xc5e>
 8010258:	2380      	movs	r3, #128	; 0x80
 801025a:	e012      	b.n	8010282 <UART_SetConfig+0xc5e>
 801025c:	2340      	movs	r3, #64	; 0x40
 801025e:	e010      	b.n	8010282 <UART_SetConfig+0xc5e>
 8010260:	2320      	movs	r3, #32
 8010262:	e00e      	b.n	8010282 <UART_SetConfig+0xc5e>
 8010264:	2310      	movs	r3, #16
 8010266:	e00c      	b.n	8010282 <UART_SetConfig+0xc5e>
 8010268:	230c      	movs	r3, #12
 801026a:	e00a      	b.n	8010282 <UART_SetConfig+0xc5e>
 801026c:	230a      	movs	r3, #10
 801026e:	e008      	b.n	8010282 <UART_SetConfig+0xc5e>
 8010270:	2308      	movs	r3, #8
 8010272:	e006      	b.n	8010282 <UART_SetConfig+0xc5e>
 8010274:	2306      	movs	r3, #6
 8010276:	e004      	b.n	8010282 <UART_SetConfig+0xc5e>
 8010278:	2304      	movs	r3, #4
 801027a:	e002      	b.n	8010282 <UART_SetConfig+0xc5e>
 801027c:	2302      	movs	r3, #2
 801027e:	e000      	b.n	8010282 <UART_SetConfig+0xc5e>
 8010280:	2301      	movs	r3, #1
 8010282:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010284:	fbb2 f3f3 	udiv	r3, r2, r3
 8010288:	005a      	lsls	r2, r3, #1
 801028a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	085b      	lsrs	r3, r3, #1
 8010290:	441a      	add	r2, r3
 8010292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010294:	685b      	ldr	r3, [r3, #4]
 8010296:	fbb2 f3f3 	udiv	r3, r2, r3
 801029a:	b29b      	uxth	r3, r3
 801029c:	677b      	str	r3, [r7, #116]	; 0x74
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 801029e:	e16e      	b.n	801057e <UART_SetConfig+0xf5a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80102a0:	f7fa ff68 	bl	800b174 <HAL_RCC_GetPCLK2Freq>
 80102a4:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d044      	beq.n	8010338 <UART_SetConfig+0xd14>
 80102ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d03e      	beq.n	8010334 <UART_SetConfig+0xd10>
 80102b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ba:	2b02      	cmp	r3, #2
 80102bc:	d038      	beq.n	8010330 <UART_SetConfig+0xd0c>
 80102be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c2:	2b03      	cmp	r3, #3
 80102c4:	d032      	beq.n	801032c <UART_SetConfig+0xd08>
 80102c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ca:	2b04      	cmp	r3, #4
 80102cc:	d02c      	beq.n	8010328 <UART_SetConfig+0xd04>
 80102ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d2:	2b05      	cmp	r3, #5
 80102d4:	d026      	beq.n	8010324 <UART_SetConfig+0xd00>
 80102d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102da:	2b06      	cmp	r3, #6
 80102dc:	d020      	beq.n	8010320 <UART_SetConfig+0xcfc>
 80102de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e2:	2b07      	cmp	r3, #7
 80102e4:	d01a      	beq.n	801031c <UART_SetConfig+0xcf8>
 80102e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ea:	2b08      	cmp	r3, #8
 80102ec:	d014      	beq.n	8010318 <UART_SetConfig+0xcf4>
 80102ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102f2:	2b09      	cmp	r3, #9
 80102f4:	d00e      	beq.n	8010314 <UART_SetConfig+0xcf0>
 80102f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102fa:	2b0a      	cmp	r3, #10
 80102fc:	d008      	beq.n	8010310 <UART_SetConfig+0xcec>
 80102fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010302:	2b0b      	cmp	r3, #11
 8010304:	d102      	bne.n	801030c <UART_SetConfig+0xce8>
 8010306:	f44f 7380 	mov.w	r3, #256	; 0x100
 801030a:	e016      	b.n	801033a <UART_SetConfig+0xd16>
 801030c:	2301      	movs	r3, #1
 801030e:	e014      	b.n	801033a <UART_SetConfig+0xd16>
 8010310:	2380      	movs	r3, #128	; 0x80
 8010312:	e012      	b.n	801033a <UART_SetConfig+0xd16>
 8010314:	2340      	movs	r3, #64	; 0x40
 8010316:	e010      	b.n	801033a <UART_SetConfig+0xd16>
 8010318:	2320      	movs	r3, #32
 801031a:	e00e      	b.n	801033a <UART_SetConfig+0xd16>
 801031c:	2310      	movs	r3, #16
 801031e:	e00c      	b.n	801033a <UART_SetConfig+0xd16>
 8010320:	230c      	movs	r3, #12
 8010322:	e00a      	b.n	801033a <UART_SetConfig+0xd16>
 8010324:	230a      	movs	r3, #10
 8010326:	e008      	b.n	801033a <UART_SetConfig+0xd16>
 8010328:	2308      	movs	r3, #8
 801032a:	e006      	b.n	801033a <UART_SetConfig+0xd16>
 801032c:	2306      	movs	r3, #6
 801032e:	e004      	b.n	801033a <UART_SetConfig+0xd16>
 8010330:	2304      	movs	r3, #4
 8010332:	e002      	b.n	801033a <UART_SetConfig+0xd16>
 8010334:	2302      	movs	r3, #2
 8010336:	e000      	b.n	801033a <UART_SetConfig+0xd16>
 8010338:	2301      	movs	r3, #1
 801033a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801033c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010340:	005a      	lsls	r2, r3, #1
 8010342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	085b      	lsrs	r3, r3, #1
 8010348:	441a      	add	r2, r3
 801034a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010352:	b29b      	uxth	r3, r3
 8010354:	677b      	str	r3, [r7, #116]	; 0x74
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010356:	e112      	b.n	801057e <UART_SetConfig+0xf5a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801035a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801035c:	2b00      	cmp	r3, #0
 801035e:	d044      	beq.n	80103ea <UART_SetConfig+0xdc6>
 8010360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010364:	2b01      	cmp	r3, #1
 8010366:	d03e      	beq.n	80103e6 <UART_SetConfig+0xdc2>
 8010368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801036a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801036c:	2b02      	cmp	r3, #2
 801036e:	d038      	beq.n	80103e2 <UART_SetConfig+0xdbe>
 8010370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010374:	2b03      	cmp	r3, #3
 8010376:	d032      	beq.n	80103de <UART_SetConfig+0xdba>
 8010378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801037a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801037c:	2b04      	cmp	r3, #4
 801037e:	d02c      	beq.n	80103da <UART_SetConfig+0xdb6>
 8010380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010384:	2b05      	cmp	r3, #5
 8010386:	d026      	beq.n	80103d6 <UART_SetConfig+0xdb2>
 8010388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801038a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801038c:	2b06      	cmp	r3, #6
 801038e:	d020      	beq.n	80103d2 <UART_SetConfig+0xdae>
 8010390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010394:	2b07      	cmp	r3, #7
 8010396:	d01a      	beq.n	80103ce <UART_SetConfig+0xdaa>
 8010398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801039a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039c:	2b08      	cmp	r3, #8
 801039e:	d014      	beq.n	80103ca <UART_SetConfig+0xda6>
 80103a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103a4:	2b09      	cmp	r3, #9
 80103a6:	d00e      	beq.n	80103c6 <UART_SetConfig+0xda2>
 80103a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ac:	2b0a      	cmp	r3, #10
 80103ae:	d008      	beq.n	80103c2 <UART_SetConfig+0xd9e>
 80103b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b4:	2b0b      	cmp	r3, #11
 80103b6:	d102      	bne.n	80103be <UART_SetConfig+0xd9a>
 80103b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103bc:	e016      	b.n	80103ec <UART_SetConfig+0xdc8>
 80103be:	2301      	movs	r3, #1
 80103c0:	e014      	b.n	80103ec <UART_SetConfig+0xdc8>
 80103c2:	2380      	movs	r3, #128	; 0x80
 80103c4:	e012      	b.n	80103ec <UART_SetConfig+0xdc8>
 80103c6:	2340      	movs	r3, #64	; 0x40
 80103c8:	e010      	b.n	80103ec <UART_SetConfig+0xdc8>
 80103ca:	2320      	movs	r3, #32
 80103cc:	e00e      	b.n	80103ec <UART_SetConfig+0xdc8>
 80103ce:	2310      	movs	r3, #16
 80103d0:	e00c      	b.n	80103ec <UART_SetConfig+0xdc8>
 80103d2:	230c      	movs	r3, #12
 80103d4:	e00a      	b.n	80103ec <UART_SetConfig+0xdc8>
 80103d6:	230a      	movs	r3, #10
 80103d8:	e008      	b.n	80103ec <UART_SetConfig+0xdc8>
 80103da:	2308      	movs	r3, #8
 80103dc:	e006      	b.n	80103ec <UART_SetConfig+0xdc8>
 80103de:	2306      	movs	r3, #6
 80103e0:	e004      	b.n	80103ec <UART_SetConfig+0xdc8>
 80103e2:	2304      	movs	r3, #4
 80103e4:	e002      	b.n	80103ec <UART_SetConfig+0xdc8>
 80103e6:	2302      	movs	r3, #2
 80103e8:	e000      	b.n	80103ec <UART_SetConfig+0xdc8>
 80103ea:	2301      	movs	r3, #1
 80103ec:	4a82      	ldr	r2, [pc, #520]	; (80105f8 <UART_SetConfig+0xfd4>)
 80103ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80103f2:	005a      	lsls	r2, r3, #1
 80103f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	085b      	lsrs	r3, r3, #1
 80103fa:	441a      	add	r2, r3
 80103fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	fbb2 f3f3 	udiv	r3, r2, r3
 8010404:	b29b      	uxth	r3, r3
 8010406:	677b      	str	r3, [r7, #116]	; 0x74
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010408:	e0b9      	b.n	801057e <UART_SetConfig+0xf5a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801040a:	f7fa fe07 	bl	800b01c <HAL_RCC_GetSysClockFreq>
 801040e:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010414:	2b00      	cmp	r3, #0
 8010416:	d044      	beq.n	80104a2 <UART_SetConfig+0xe7e>
 8010418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801041a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801041c:	2b01      	cmp	r3, #1
 801041e:	d03e      	beq.n	801049e <UART_SetConfig+0xe7a>
 8010420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010424:	2b02      	cmp	r3, #2
 8010426:	d038      	beq.n	801049a <UART_SetConfig+0xe76>
 8010428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801042a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801042c:	2b03      	cmp	r3, #3
 801042e:	d032      	beq.n	8010496 <UART_SetConfig+0xe72>
 8010430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010434:	2b04      	cmp	r3, #4
 8010436:	d02c      	beq.n	8010492 <UART_SetConfig+0xe6e>
 8010438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801043a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801043c:	2b05      	cmp	r3, #5
 801043e:	d026      	beq.n	801048e <UART_SetConfig+0xe6a>
 8010440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010444:	2b06      	cmp	r3, #6
 8010446:	d020      	beq.n	801048a <UART_SetConfig+0xe66>
 8010448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801044c:	2b07      	cmp	r3, #7
 801044e:	d01a      	beq.n	8010486 <UART_SetConfig+0xe62>
 8010450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010454:	2b08      	cmp	r3, #8
 8010456:	d014      	beq.n	8010482 <UART_SetConfig+0xe5e>
 8010458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801045a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801045c:	2b09      	cmp	r3, #9
 801045e:	d00e      	beq.n	801047e <UART_SetConfig+0xe5a>
 8010460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010464:	2b0a      	cmp	r3, #10
 8010466:	d008      	beq.n	801047a <UART_SetConfig+0xe56>
 8010468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801046a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801046c:	2b0b      	cmp	r3, #11
 801046e:	d102      	bne.n	8010476 <UART_SetConfig+0xe52>
 8010470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010474:	e016      	b.n	80104a4 <UART_SetConfig+0xe80>
 8010476:	2301      	movs	r3, #1
 8010478:	e014      	b.n	80104a4 <UART_SetConfig+0xe80>
 801047a:	2380      	movs	r3, #128	; 0x80
 801047c:	e012      	b.n	80104a4 <UART_SetConfig+0xe80>
 801047e:	2340      	movs	r3, #64	; 0x40
 8010480:	e010      	b.n	80104a4 <UART_SetConfig+0xe80>
 8010482:	2320      	movs	r3, #32
 8010484:	e00e      	b.n	80104a4 <UART_SetConfig+0xe80>
 8010486:	2310      	movs	r3, #16
 8010488:	e00c      	b.n	80104a4 <UART_SetConfig+0xe80>
 801048a:	230c      	movs	r3, #12
 801048c:	e00a      	b.n	80104a4 <UART_SetConfig+0xe80>
 801048e:	230a      	movs	r3, #10
 8010490:	e008      	b.n	80104a4 <UART_SetConfig+0xe80>
 8010492:	2308      	movs	r3, #8
 8010494:	e006      	b.n	80104a4 <UART_SetConfig+0xe80>
 8010496:	2306      	movs	r3, #6
 8010498:	e004      	b.n	80104a4 <UART_SetConfig+0xe80>
 801049a:	2304      	movs	r3, #4
 801049c:	e002      	b.n	80104a4 <UART_SetConfig+0xe80>
 801049e:	2302      	movs	r3, #2
 80104a0:	e000      	b.n	80104a4 <UART_SetConfig+0xe80>
 80104a2:	2301      	movs	r3, #1
 80104a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80104a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80104aa:	005a      	lsls	r2, r3, #1
 80104ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	085b      	lsrs	r3, r3, #1
 80104b2:	441a      	add	r2, r3
 80104b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80104bc:	b29b      	uxth	r3, r3
 80104be:	677b      	str	r3, [r7, #116]	; 0x74
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80104c0:	e05d      	b.n	801057e <UART_SetConfig+0xf5a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d044      	beq.n	8010554 <UART_SetConfig+0xf30>
 80104ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ce:	2b01      	cmp	r3, #1
 80104d0:	d03e      	beq.n	8010550 <UART_SetConfig+0xf2c>
 80104d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104d6:	2b02      	cmp	r3, #2
 80104d8:	d038      	beq.n	801054c <UART_SetConfig+0xf28>
 80104da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104de:	2b03      	cmp	r3, #3
 80104e0:	d032      	beq.n	8010548 <UART_SetConfig+0xf24>
 80104e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e6:	2b04      	cmp	r3, #4
 80104e8:	d02c      	beq.n	8010544 <UART_SetConfig+0xf20>
 80104ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ee:	2b05      	cmp	r3, #5
 80104f0:	d026      	beq.n	8010540 <UART_SetConfig+0xf1c>
 80104f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104f6:	2b06      	cmp	r3, #6
 80104f8:	d020      	beq.n	801053c <UART_SetConfig+0xf18>
 80104fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104fe:	2b07      	cmp	r3, #7
 8010500:	d01a      	beq.n	8010538 <UART_SetConfig+0xf14>
 8010502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010506:	2b08      	cmp	r3, #8
 8010508:	d014      	beq.n	8010534 <UART_SetConfig+0xf10>
 801050a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801050c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801050e:	2b09      	cmp	r3, #9
 8010510:	d00e      	beq.n	8010530 <UART_SetConfig+0xf0c>
 8010512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010516:	2b0a      	cmp	r3, #10
 8010518:	d008      	beq.n	801052c <UART_SetConfig+0xf08>
 801051a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801051e:	2b0b      	cmp	r3, #11
 8010520:	d102      	bne.n	8010528 <UART_SetConfig+0xf04>
 8010522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010526:	e016      	b.n	8010556 <UART_SetConfig+0xf32>
 8010528:	2301      	movs	r3, #1
 801052a:	e014      	b.n	8010556 <UART_SetConfig+0xf32>
 801052c:	2380      	movs	r3, #128	; 0x80
 801052e:	e012      	b.n	8010556 <UART_SetConfig+0xf32>
 8010530:	2340      	movs	r3, #64	; 0x40
 8010532:	e010      	b.n	8010556 <UART_SetConfig+0xf32>
 8010534:	2320      	movs	r3, #32
 8010536:	e00e      	b.n	8010556 <UART_SetConfig+0xf32>
 8010538:	2310      	movs	r3, #16
 801053a:	e00c      	b.n	8010556 <UART_SetConfig+0xf32>
 801053c:	230c      	movs	r3, #12
 801053e:	e00a      	b.n	8010556 <UART_SetConfig+0xf32>
 8010540:	230a      	movs	r3, #10
 8010542:	e008      	b.n	8010556 <UART_SetConfig+0xf32>
 8010544:	2308      	movs	r3, #8
 8010546:	e006      	b.n	8010556 <UART_SetConfig+0xf32>
 8010548:	2306      	movs	r3, #6
 801054a:	e004      	b.n	8010556 <UART_SetConfig+0xf32>
 801054c:	2304      	movs	r3, #4
 801054e:	e002      	b.n	8010556 <UART_SetConfig+0xf32>
 8010550:	2302      	movs	r3, #2
 8010552:	e000      	b.n	8010556 <UART_SetConfig+0xf32>
 8010554:	2301      	movs	r3, #1
 8010556:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801055a:	fbb2 f3f3 	udiv	r3, r2, r3
 801055e:	005a      	lsls	r2, r3, #1
 8010560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	085b      	lsrs	r3, r3, #1
 8010566:	441a      	add	r2, r3
 8010568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010570:	b29b      	uxth	r3, r3
 8010572:	677b      	str	r3, [r7, #116]	; 0x74
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010574:	e003      	b.n	801057e <UART_SetConfig+0xf5a>
      default:
        ret = HAL_ERROR;
 8010576:	2301      	movs	r3, #1
 8010578:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 801057c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801057e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010580:	2b0f      	cmp	r3, #15
 8010582:	d91a      	bls.n	80105ba <UART_SetConfig+0xf96>
 8010584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801058a:	d216      	bcs.n	80105ba <UART_SetConfig+0xf96>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801058c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801058e:	b29b      	uxth	r3, r3
 8010590:	f023 030f 	bic.w	r3, r3, #15
 8010594:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801059a:	085b      	lsrs	r3, r3, #1
 801059c:	b29b      	uxth	r3, r3
 801059e:	f003 0307 	and.w	r3, r3, #7
 80105a2:	b29a      	uxth	r2, r3
 80105a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80105a8:	4313      	orrs	r3, r2
 80105aa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      huart->Instance->BRR = brrtemp;
 80105ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80105b6:	60da      	str	r2, [r3, #12]
 80105b8:	e1f5      	b.n	80109a6 <UART_SetConfig+0x1382>
    }
    else
    {
      ret = HAL_ERROR;
 80105ba:	2301      	movs	r3, #1
 80105bc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80105c0:	e1f1      	b.n	80109a6 <UART_SetConfig+0x1382>
    }
  }
  else
  {
    switch (clocksource)
 80105c2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80105c6:	2b08      	cmp	r3, #8
 80105c8:	f200 81da 	bhi.w	8010980 <UART_SetConfig+0x135c>
 80105cc:	a201      	add	r2, pc, #4	; (adr r2, 80105d4 <UART_SetConfig+0xfb0>)
 80105ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105d2:	bf00      	nop
 80105d4:	080105fd 	.word	0x080105fd
 80105d8:	080106b3 	.word	0x080106b3
 80105dc:	08010769 	.word	0x08010769
 80105e0:	08010981 	.word	0x08010981
 80105e4:	08010819 	.word	0x08010819
 80105e8:	08010981 	.word	0x08010981
 80105ec:	08010981 	.word	0x08010981
 80105f0:	08010981 	.word	0x08010981
 80105f4:	080108cf 	.word	0x080108cf
 80105f8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80105fc:	f7fa fda4 	bl	800b148 <HAL_RCC_GetPCLK1Freq>
 8010600:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010606:	2b00      	cmp	r3, #0
 8010608:	d044      	beq.n	8010694 <UART_SetConfig+0x1070>
 801060a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801060c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801060e:	2b01      	cmp	r3, #1
 8010610:	d03e      	beq.n	8010690 <UART_SetConfig+0x106c>
 8010612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010616:	2b02      	cmp	r3, #2
 8010618:	d038      	beq.n	801068c <UART_SetConfig+0x1068>
 801061a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801061c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801061e:	2b03      	cmp	r3, #3
 8010620:	d032      	beq.n	8010688 <UART_SetConfig+0x1064>
 8010622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010626:	2b04      	cmp	r3, #4
 8010628:	d02c      	beq.n	8010684 <UART_SetConfig+0x1060>
 801062a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801062c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801062e:	2b05      	cmp	r3, #5
 8010630:	d026      	beq.n	8010680 <UART_SetConfig+0x105c>
 8010632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010636:	2b06      	cmp	r3, #6
 8010638:	d020      	beq.n	801067c <UART_SetConfig+0x1058>
 801063a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801063e:	2b07      	cmp	r3, #7
 8010640:	d01a      	beq.n	8010678 <UART_SetConfig+0x1054>
 8010642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010646:	2b08      	cmp	r3, #8
 8010648:	d014      	beq.n	8010674 <UART_SetConfig+0x1050>
 801064a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801064c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801064e:	2b09      	cmp	r3, #9
 8010650:	d00e      	beq.n	8010670 <UART_SetConfig+0x104c>
 8010652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010656:	2b0a      	cmp	r3, #10
 8010658:	d008      	beq.n	801066c <UART_SetConfig+0x1048>
 801065a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801065c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801065e:	2b0b      	cmp	r3, #11
 8010660:	d102      	bne.n	8010668 <UART_SetConfig+0x1044>
 8010662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010666:	e016      	b.n	8010696 <UART_SetConfig+0x1072>
 8010668:	2301      	movs	r3, #1
 801066a:	e014      	b.n	8010696 <UART_SetConfig+0x1072>
 801066c:	2380      	movs	r3, #128	; 0x80
 801066e:	e012      	b.n	8010696 <UART_SetConfig+0x1072>
 8010670:	2340      	movs	r3, #64	; 0x40
 8010672:	e010      	b.n	8010696 <UART_SetConfig+0x1072>
 8010674:	2320      	movs	r3, #32
 8010676:	e00e      	b.n	8010696 <UART_SetConfig+0x1072>
 8010678:	2310      	movs	r3, #16
 801067a:	e00c      	b.n	8010696 <UART_SetConfig+0x1072>
 801067c:	230c      	movs	r3, #12
 801067e:	e00a      	b.n	8010696 <UART_SetConfig+0x1072>
 8010680:	230a      	movs	r3, #10
 8010682:	e008      	b.n	8010696 <UART_SetConfig+0x1072>
 8010684:	2308      	movs	r3, #8
 8010686:	e006      	b.n	8010696 <UART_SetConfig+0x1072>
 8010688:	2306      	movs	r3, #6
 801068a:	e004      	b.n	8010696 <UART_SetConfig+0x1072>
 801068c:	2304      	movs	r3, #4
 801068e:	e002      	b.n	8010696 <UART_SetConfig+0x1072>
 8010690:	2302      	movs	r3, #2
 8010692:	e000      	b.n	8010696 <UART_SetConfig+0x1072>
 8010694:	2301      	movs	r3, #1
 8010696:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010698:	fbb2 f2f3 	udiv	r2, r2, r3
 801069c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	085b      	lsrs	r3, r3, #1
 80106a2:	441a      	add	r2, r3
 80106a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106a6:	685b      	ldr	r3, [r3, #4]
 80106a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	677b      	str	r3, [r7, #116]	; 0x74
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80106b0:	e16a      	b.n	8010988 <UART_SetConfig+0x1364>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80106b2:	f7fa fd5f 	bl	800b174 <HAL_RCC_GetPCLK2Freq>
 80106b6:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d044      	beq.n	801074a <UART_SetConfig+0x1126>
 80106c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	d03e      	beq.n	8010746 <UART_SetConfig+0x1122>
 80106c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106cc:	2b02      	cmp	r3, #2
 80106ce:	d038      	beq.n	8010742 <UART_SetConfig+0x111e>
 80106d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d4:	2b03      	cmp	r3, #3
 80106d6:	d032      	beq.n	801073e <UART_SetConfig+0x111a>
 80106d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106dc:	2b04      	cmp	r3, #4
 80106de:	d02c      	beq.n	801073a <UART_SetConfig+0x1116>
 80106e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e4:	2b05      	cmp	r3, #5
 80106e6:	d026      	beq.n	8010736 <UART_SetConfig+0x1112>
 80106e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ec:	2b06      	cmp	r3, #6
 80106ee:	d020      	beq.n	8010732 <UART_SetConfig+0x110e>
 80106f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f4:	2b07      	cmp	r3, #7
 80106f6:	d01a      	beq.n	801072e <UART_SetConfig+0x110a>
 80106f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106fc:	2b08      	cmp	r3, #8
 80106fe:	d014      	beq.n	801072a <UART_SetConfig+0x1106>
 8010700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010704:	2b09      	cmp	r3, #9
 8010706:	d00e      	beq.n	8010726 <UART_SetConfig+0x1102>
 8010708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801070a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801070c:	2b0a      	cmp	r3, #10
 801070e:	d008      	beq.n	8010722 <UART_SetConfig+0x10fe>
 8010710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010714:	2b0b      	cmp	r3, #11
 8010716:	d102      	bne.n	801071e <UART_SetConfig+0x10fa>
 8010718:	f44f 7380 	mov.w	r3, #256	; 0x100
 801071c:	e016      	b.n	801074c <UART_SetConfig+0x1128>
 801071e:	2301      	movs	r3, #1
 8010720:	e014      	b.n	801074c <UART_SetConfig+0x1128>
 8010722:	2380      	movs	r3, #128	; 0x80
 8010724:	e012      	b.n	801074c <UART_SetConfig+0x1128>
 8010726:	2340      	movs	r3, #64	; 0x40
 8010728:	e010      	b.n	801074c <UART_SetConfig+0x1128>
 801072a:	2320      	movs	r3, #32
 801072c:	e00e      	b.n	801074c <UART_SetConfig+0x1128>
 801072e:	2310      	movs	r3, #16
 8010730:	e00c      	b.n	801074c <UART_SetConfig+0x1128>
 8010732:	230c      	movs	r3, #12
 8010734:	e00a      	b.n	801074c <UART_SetConfig+0x1128>
 8010736:	230a      	movs	r3, #10
 8010738:	e008      	b.n	801074c <UART_SetConfig+0x1128>
 801073a:	2308      	movs	r3, #8
 801073c:	e006      	b.n	801074c <UART_SetConfig+0x1128>
 801073e:	2306      	movs	r3, #6
 8010740:	e004      	b.n	801074c <UART_SetConfig+0x1128>
 8010742:	2304      	movs	r3, #4
 8010744:	e002      	b.n	801074c <UART_SetConfig+0x1128>
 8010746:	2302      	movs	r3, #2
 8010748:	e000      	b.n	801074c <UART_SetConfig+0x1128>
 801074a:	2301      	movs	r3, #1
 801074c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801074e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	085b      	lsrs	r3, r3, #1
 8010758:	441a      	add	r2, r3
 801075a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010762:	b29b      	uxth	r3, r3
 8010764:	677b      	str	r3, [r7, #116]	; 0x74
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010766:	e10f      	b.n	8010988 <UART_SetConfig+0x1364>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801076a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801076c:	2b00      	cmp	r3, #0
 801076e:	d044      	beq.n	80107fa <UART_SetConfig+0x11d6>
 8010770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010774:	2b01      	cmp	r3, #1
 8010776:	d03e      	beq.n	80107f6 <UART_SetConfig+0x11d2>
 8010778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801077a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801077c:	2b02      	cmp	r3, #2
 801077e:	d038      	beq.n	80107f2 <UART_SetConfig+0x11ce>
 8010780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010784:	2b03      	cmp	r3, #3
 8010786:	d032      	beq.n	80107ee <UART_SetConfig+0x11ca>
 8010788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801078a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801078c:	2b04      	cmp	r3, #4
 801078e:	d02c      	beq.n	80107ea <UART_SetConfig+0x11c6>
 8010790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010794:	2b05      	cmp	r3, #5
 8010796:	d026      	beq.n	80107e6 <UART_SetConfig+0x11c2>
 8010798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801079a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801079c:	2b06      	cmp	r3, #6
 801079e:	d020      	beq.n	80107e2 <UART_SetConfig+0x11be>
 80107a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a4:	2b07      	cmp	r3, #7
 80107a6:	d01a      	beq.n	80107de <UART_SetConfig+0x11ba>
 80107a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ac:	2b08      	cmp	r3, #8
 80107ae:	d014      	beq.n	80107da <UART_SetConfig+0x11b6>
 80107b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b4:	2b09      	cmp	r3, #9
 80107b6:	d00e      	beq.n	80107d6 <UART_SetConfig+0x11b2>
 80107b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107bc:	2b0a      	cmp	r3, #10
 80107be:	d008      	beq.n	80107d2 <UART_SetConfig+0x11ae>
 80107c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c4:	2b0b      	cmp	r3, #11
 80107c6:	d102      	bne.n	80107ce <UART_SetConfig+0x11aa>
 80107c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107cc:	e016      	b.n	80107fc <UART_SetConfig+0x11d8>
 80107ce:	2301      	movs	r3, #1
 80107d0:	e014      	b.n	80107fc <UART_SetConfig+0x11d8>
 80107d2:	2380      	movs	r3, #128	; 0x80
 80107d4:	e012      	b.n	80107fc <UART_SetConfig+0x11d8>
 80107d6:	2340      	movs	r3, #64	; 0x40
 80107d8:	e010      	b.n	80107fc <UART_SetConfig+0x11d8>
 80107da:	2320      	movs	r3, #32
 80107dc:	e00e      	b.n	80107fc <UART_SetConfig+0x11d8>
 80107de:	2310      	movs	r3, #16
 80107e0:	e00c      	b.n	80107fc <UART_SetConfig+0x11d8>
 80107e2:	230c      	movs	r3, #12
 80107e4:	e00a      	b.n	80107fc <UART_SetConfig+0x11d8>
 80107e6:	230a      	movs	r3, #10
 80107e8:	e008      	b.n	80107fc <UART_SetConfig+0x11d8>
 80107ea:	2308      	movs	r3, #8
 80107ec:	e006      	b.n	80107fc <UART_SetConfig+0x11d8>
 80107ee:	2306      	movs	r3, #6
 80107f0:	e004      	b.n	80107fc <UART_SetConfig+0x11d8>
 80107f2:	2304      	movs	r3, #4
 80107f4:	e002      	b.n	80107fc <UART_SetConfig+0x11d8>
 80107f6:	2302      	movs	r3, #2
 80107f8:	e000      	b.n	80107fc <UART_SetConfig+0x11d8>
 80107fa:	2301      	movs	r3, #1
 80107fc:	4a74      	ldr	r2, [pc, #464]	; (80109d0 <UART_SetConfig+0x13ac>)
 80107fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8010802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	085b      	lsrs	r3, r3, #1
 8010808:	441a      	add	r2, r3
 801080a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010812:	b29b      	uxth	r3, r3
 8010814:	677b      	str	r3, [r7, #116]	; 0x74
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8010816:	e0b7      	b.n	8010988 <UART_SetConfig+0x1364>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010818:	f7fa fc00 	bl	800b01c <HAL_RCC_GetSysClockFreq>
 801081c:	66b8      	str	r0, [r7, #104]	; 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801081e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010822:	2b00      	cmp	r3, #0
 8010824:	d044      	beq.n	80108b0 <UART_SetConfig+0x128c>
 8010826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801082a:	2b01      	cmp	r3, #1
 801082c:	d03e      	beq.n	80108ac <UART_SetConfig+0x1288>
 801082e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010832:	2b02      	cmp	r3, #2
 8010834:	d038      	beq.n	80108a8 <UART_SetConfig+0x1284>
 8010836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801083a:	2b03      	cmp	r3, #3
 801083c:	d032      	beq.n	80108a4 <UART_SetConfig+0x1280>
 801083e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010842:	2b04      	cmp	r3, #4
 8010844:	d02c      	beq.n	80108a0 <UART_SetConfig+0x127c>
 8010846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801084a:	2b05      	cmp	r3, #5
 801084c:	d026      	beq.n	801089c <UART_SetConfig+0x1278>
 801084e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010852:	2b06      	cmp	r3, #6
 8010854:	d020      	beq.n	8010898 <UART_SetConfig+0x1274>
 8010856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801085a:	2b07      	cmp	r3, #7
 801085c:	d01a      	beq.n	8010894 <UART_SetConfig+0x1270>
 801085e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010862:	2b08      	cmp	r3, #8
 8010864:	d014      	beq.n	8010890 <UART_SetConfig+0x126c>
 8010866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801086a:	2b09      	cmp	r3, #9
 801086c:	d00e      	beq.n	801088c <UART_SetConfig+0x1268>
 801086e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010872:	2b0a      	cmp	r3, #10
 8010874:	d008      	beq.n	8010888 <UART_SetConfig+0x1264>
 8010876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801087a:	2b0b      	cmp	r3, #11
 801087c:	d102      	bne.n	8010884 <UART_SetConfig+0x1260>
 801087e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010882:	e016      	b.n	80108b2 <UART_SetConfig+0x128e>
 8010884:	2301      	movs	r3, #1
 8010886:	e014      	b.n	80108b2 <UART_SetConfig+0x128e>
 8010888:	2380      	movs	r3, #128	; 0x80
 801088a:	e012      	b.n	80108b2 <UART_SetConfig+0x128e>
 801088c:	2340      	movs	r3, #64	; 0x40
 801088e:	e010      	b.n	80108b2 <UART_SetConfig+0x128e>
 8010890:	2320      	movs	r3, #32
 8010892:	e00e      	b.n	80108b2 <UART_SetConfig+0x128e>
 8010894:	2310      	movs	r3, #16
 8010896:	e00c      	b.n	80108b2 <UART_SetConfig+0x128e>
 8010898:	230c      	movs	r3, #12
 801089a:	e00a      	b.n	80108b2 <UART_SetConfig+0x128e>
 801089c:	230a      	movs	r3, #10
 801089e:	e008      	b.n	80108b2 <UART_SetConfig+0x128e>
 80108a0:	2308      	movs	r3, #8
 80108a2:	e006      	b.n	80108b2 <UART_SetConfig+0x128e>
 80108a4:	2306      	movs	r3, #6
 80108a6:	e004      	b.n	80108b2 <UART_SetConfig+0x128e>
 80108a8:	2304      	movs	r3, #4
 80108aa:	e002      	b.n	80108b2 <UART_SetConfig+0x128e>
 80108ac:	2302      	movs	r3, #2
 80108ae:	e000      	b.n	80108b2 <UART_SetConfig+0x128e>
 80108b0:	2301      	movs	r3, #1
 80108b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80108b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80108b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	085b      	lsrs	r3, r3, #1
 80108be:	441a      	add	r2, r3
 80108c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108c2:	685b      	ldr	r3, [r3, #4]
 80108c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	677b      	str	r3, [r7, #116]	; 0x74
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80108cc:	e05c      	b.n	8010988 <UART_SetConfig+0x1364>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d044      	beq.n	8010960 <UART_SetConfig+0x133c>
 80108d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d03e      	beq.n	801095c <UART_SetConfig+0x1338>
 80108de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e2:	2b02      	cmp	r3, #2
 80108e4:	d038      	beq.n	8010958 <UART_SetConfig+0x1334>
 80108e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108ea:	2b03      	cmp	r3, #3
 80108ec:	d032      	beq.n	8010954 <UART_SetConfig+0x1330>
 80108ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f2:	2b04      	cmp	r3, #4
 80108f4:	d02c      	beq.n	8010950 <UART_SetConfig+0x132c>
 80108f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108fa:	2b05      	cmp	r3, #5
 80108fc:	d026      	beq.n	801094c <UART_SetConfig+0x1328>
 80108fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010902:	2b06      	cmp	r3, #6
 8010904:	d020      	beq.n	8010948 <UART_SetConfig+0x1324>
 8010906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801090a:	2b07      	cmp	r3, #7
 801090c:	d01a      	beq.n	8010944 <UART_SetConfig+0x1320>
 801090e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010912:	2b08      	cmp	r3, #8
 8010914:	d014      	beq.n	8010940 <UART_SetConfig+0x131c>
 8010916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801091a:	2b09      	cmp	r3, #9
 801091c:	d00e      	beq.n	801093c <UART_SetConfig+0x1318>
 801091e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010922:	2b0a      	cmp	r3, #10
 8010924:	d008      	beq.n	8010938 <UART_SetConfig+0x1314>
 8010926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801092a:	2b0b      	cmp	r3, #11
 801092c:	d102      	bne.n	8010934 <UART_SetConfig+0x1310>
 801092e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010932:	e016      	b.n	8010962 <UART_SetConfig+0x133e>
 8010934:	2301      	movs	r3, #1
 8010936:	e014      	b.n	8010962 <UART_SetConfig+0x133e>
 8010938:	2380      	movs	r3, #128	; 0x80
 801093a:	e012      	b.n	8010962 <UART_SetConfig+0x133e>
 801093c:	2340      	movs	r3, #64	; 0x40
 801093e:	e010      	b.n	8010962 <UART_SetConfig+0x133e>
 8010940:	2320      	movs	r3, #32
 8010942:	e00e      	b.n	8010962 <UART_SetConfig+0x133e>
 8010944:	2310      	movs	r3, #16
 8010946:	e00c      	b.n	8010962 <UART_SetConfig+0x133e>
 8010948:	230c      	movs	r3, #12
 801094a:	e00a      	b.n	8010962 <UART_SetConfig+0x133e>
 801094c:	230a      	movs	r3, #10
 801094e:	e008      	b.n	8010962 <UART_SetConfig+0x133e>
 8010950:	2308      	movs	r3, #8
 8010952:	e006      	b.n	8010962 <UART_SetConfig+0x133e>
 8010954:	2306      	movs	r3, #6
 8010956:	e004      	b.n	8010962 <UART_SetConfig+0x133e>
 8010958:	2304      	movs	r3, #4
 801095a:	e002      	b.n	8010962 <UART_SetConfig+0x133e>
 801095c:	2302      	movs	r3, #2
 801095e:	e000      	b.n	8010962 <UART_SetConfig+0x133e>
 8010960:	2301      	movs	r3, #1
 8010962:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8010966:	fbb2 f2f3 	udiv	r2, r2, r3
 801096a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	085b      	lsrs	r3, r3, #1
 8010970:	441a      	add	r2, r3
 8010972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010974:	685b      	ldr	r3, [r3, #4]
 8010976:	fbb2 f3f3 	udiv	r3, r2, r3
 801097a:	b29b      	uxth	r3, r3
 801097c:	677b      	str	r3, [r7, #116]	; 0x74
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 801097e:	e003      	b.n	8010988 <UART_SetConfig+0x1364>
      default:
        ret = HAL_ERROR;
 8010980:	2301      	movs	r3, #1
 8010982:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        break;
 8010986:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801098a:	2b0f      	cmp	r3, #15
 801098c:	d908      	bls.n	80109a0 <UART_SetConfig+0x137c>
 801098e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010994:	d204      	bcs.n	80109a0 <UART_SetConfig+0x137c>
    {
      huart->Instance->BRR = usartdiv;
 8010996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801099c:	60da      	str	r2, [r3, #12]
 801099e:	e002      	b.n	80109a6 <UART_SetConfig+0x1382>
    }
    else
    {
      ret = HAL_ERROR;
 80109a0:	2301      	movs	r3, #1
 80109a2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80109a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109a8:	2201      	movs	r2, #1
 80109aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80109ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109b0:	2201      	movs	r2, #1
 80109b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80109b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109b8:	2200      	movs	r2, #0
 80109ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80109bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109be:	2200      	movs	r2, #0
 80109c0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80109c2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3780      	adds	r7, #128	; 0x80
 80109ca:	46bd      	mov	sp, r7
 80109cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80109d0:	00f42400 	.word	0x00f42400

080109d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80109d4:	b480      	push	{r7}
 80109d6:	b083      	sub	sp, #12
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e0:	f003 0301 	and.w	r3, r3, #1
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d00a      	beq.n	80109fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	430a      	orrs	r2, r1
 80109fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a02:	f003 0302 	and.w	r3, r3, #2
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d00a      	beq.n	8010a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	685b      	ldr	r3, [r3, #4]
 8010a10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	430a      	orrs	r2, r1
 8010a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a24:	f003 0304 	and.w	r3, r3, #4
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d00a      	beq.n	8010a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	430a      	orrs	r2, r1
 8010a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a46:	f003 0308 	and.w	r3, r3, #8
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d00a      	beq.n	8010a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	430a      	orrs	r2, r1
 8010a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a68:	f003 0310 	and.w	r3, r3, #16
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d00a      	beq.n	8010a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	689b      	ldr	r3, [r3, #8]
 8010a76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	430a      	orrs	r2, r1
 8010a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a8a:	f003 0320 	and.w	r3, r3, #32
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d00a      	beq.n	8010aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	430a      	orrs	r2, r1
 8010aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d01a      	beq.n	8010aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	430a      	orrs	r2, r1
 8010ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ad2:	d10a      	bne.n	8010aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	430a      	orrs	r2, r1
 8010ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d00a      	beq.n	8010b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	685b      	ldr	r3, [r3, #4]
 8010afc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	430a      	orrs	r2, r1
 8010b0a:	605a      	str	r2, [r3, #4]
  }
}
 8010b0c:	bf00      	nop
 8010b0e:	370c      	adds	r7, #12
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr

08010b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b086      	sub	sp, #24
 8010b1c:	af02      	add	r7, sp, #8
 8010b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2200      	movs	r2, #0
 8010b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8010b28:	f7f5 fe0c 	bl	8006744 <HAL_GetTick>
 8010b2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	f003 0308 	and.w	r3, r3, #8
 8010b38:	2b08      	cmp	r3, #8
 8010b3a:	d10e      	bne.n	8010b5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010b40:	9300      	str	r3, [sp, #0]
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	2200      	movs	r2, #0
 8010b46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f000 f82c 	bl	8010ba8 <UART_WaitOnFlagUntilTimeout>
 8010b50:	4603      	mov	r3, r0
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d001      	beq.n	8010b5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b56:	2303      	movs	r3, #3
 8010b58:	e022      	b.n	8010ba0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f003 0304 	and.w	r3, r3, #4
 8010b64:	2b04      	cmp	r3, #4
 8010b66:	d10e      	bne.n	8010b86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010b6c:	9300      	str	r3, [sp, #0]
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2200      	movs	r2, #0
 8010b72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 f816 	bl	8010ba8 <UART_WaitOnFlagUntilTimeout>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d001      	beq.n	8010b86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b82:	2303      	movs	r3, #3
 8010b84:	e00c      	b.n	8010ba0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2220      	movs	r2, #32
 8010b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2220      	movs	r2, #32
 8010b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010b9e:	2300      	movs	r3, #0
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3710      	adds	r7, #16
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	603b      	str	r3, [r7, #0]
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010bb8:	e062      	b.n	8010c80 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010bba:	69bb      	ldr	r3, [r7, #24]
 8010bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc0:	d05e      	beq.n	8010c80 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010bc2:	f7f5 fdbf 	bl	8006744 <HAL_GetTick>
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	1ad3      	subs	r3, r2, r3
 8010bcc:	69ba      	ldr	r2, [r7, #24]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d302      	bcc.n	8010bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8010bd2:	69bb      	ldr	r3, [r7, #24]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d11d      	bne.n	8010c14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	681a      	ldr	r2, [r3, #0]
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010be6:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	689a      	ldr	r2, [r3, #8]
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	f022 0201 	bic.w	r2, r2, #1
 8010bf6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2220      	movs	r2, #32
 8010bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2220      	movs	r2, #32
 8010c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8010c10:	2303      	movs	r3, #3
 8010c12:	e045      	b.n	8010ca0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f003 0304 	and.w	r3, r3, #4
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d02e      	beq.n	8010c80 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	69db      	ldr	r3, [r3, #28]
 8010c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c30:	d126      	bne.n	8010c80 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010c3a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010c4a:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	689a      	ldr	r2, [r3, #8]
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f022 0201 	bic.w	r2, r2, #1
 8010c5a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	2220      	movs	r2, #32
 8010c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2220      	movs	r2, #32
 8010c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2220      	movs	r2, #32
 8010c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2200      	movs	r2, #0
 8010c78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8010c7c:	2303      	movs	r3, #3
 8010c7e:	e00f      	b.n	8010ca0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	69da      	ldr	r2, [r3, #28]
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	4013      	ands	r3, r2
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	bf0c      	ite	eq
 8010c90:	2301      	moveq	r3, #1
 8010c92:	2300      	movne	r3, #0
 8010c94:	b2db      	uxtb	r3, r3
 8010c96:	461a      	mov	r2, r3
 8010c98:	79fb      	ldrb	r3, [r7, #7]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d08d      	beq.n	8010bba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c9e:	2300      	movs	r3, #0
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3710      	adds	r7, #16
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b085      	sub	sp, #20
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010cb6:	2b01      	cmp	r3, #1
 8010cb8:	d101      	bne.n	8010cbe <HAL_UARTEx_DisableFifoMode+0x16>
 8010cba:	2302      	movs	r3, #2
 8010cbc:	e027      	b.n	8010d0e <HAL_UARTEx_DisableFifoMode+0x66>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2224      	movs	r2, #36	; 0x24
 8010cca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	681a      	ldr	r2, [r3, #0]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f022 0201 	bic.w	r2, r2, #1
 8010ce4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010cec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	68fa      	ldr	r2, [r7, #12]
 8010cfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2220      	movs	r2, #32
 8010d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2200      	movs	r2, #0
 8010d08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010d0c:	2300      	movs	r3, #0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3714      	adds	r7, #20
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr

08010d1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010d1a:	b580      	push	{r7, lr}
 8010d1c:	b084      	sub	sp, #16
 8010d1e:	af00      	add	r7, sp, #0
 8010d20:	6078      	str	r0, [r7, #4]
 8010d22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010d2a:	2b01      	cmp	r3, #1
 8010d2c:	d101      	bne.n	8010d32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010d2e:	2302      	movs	r3, #2
 8010d30:	e02d      	b.n	8010d8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2201      	movs	r2, #1
 8010d36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2224      	movs	r2, #36	; 0x24
 8010d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	681a      	ldr	r2, [r3, #0]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	f022 0201 	bic.w	r2, r2, #1
 8010d58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	689b      	ldr	r3, [r3, #8]
 8010d60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	683a      	ldr	r2, [r7, #0]
 8010d6a:	430a      	orrs	r2, r1
 8010d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f000 f850 	bl	8010e14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	68fa      	ldr	r2, [r7, #12]
 8010d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2220      	movs	r2, #32
 8010d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2200      	movs	r2, #0
 8010d88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010d8c:	2300      	movs	r3, #0
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3710      	adds	r7, #16
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}

08010d96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010d96:	b580      	push	{r7, lr}
 8010d98:	b084      	sub	sp, #16
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	6078      	str	r0, [r7, #4]
 8010d9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010da6:	2b01      	cmp	r3, #1
 8010da8:	d101      	bne.n	8010dae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010daa:	2302      	movs	r3, #2
 8010dac:	e02d      	b.n	8010e0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2201      	movs	r2, #1
 8010db2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2224      	movs	r2, #36	; 0x24
 8010dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f022 0201 	bic.w	r2, r2, #1
 8010dd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	689b      	ldr	r3, [r3, #8]
 8010ddc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	683a      	ldr	r2, [r7, #0]
 8010de6:	430a      	orrs	r2, r1
 8010de8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f000 f812 	bl	8010e14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	68fa      	ldr	r2, [r7, #12]
 8010df6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2220      	movs	r2, #32
 8010dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2200      	movs	r2, #0
 8010e04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010e08:	2300      	movs	r3, #0
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3710      	adds	r7, #16
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
	...

08010e14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b089      	sub	sp, #36	; 0x24
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010e1c:	4a2d      	ldr	r2, [pc, #180]	; (8010ed4 <UARTEx_SetNbDataToProcess+0xc0>)
 8010e1e:	f107 0314 	add.w	r3, r7, #20
 8010e22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e26:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8010e2a:	4a2b      	ldr	r2, [pc, #172]	; (8010ed8 <UARTEx_SetNbDataToProcess+0xc4>)
 8010e2c:	f107 030c 	add.w	r3, r7, #12
 8010e30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e34:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d108      	bne.n	8010e52 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2201      	movs	r2, #1
 8010e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010e50:	e039      	b.n	8010ec6 <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010e52:	2308      	movs	r3, #8
 8010e54:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010e56:	2308      	movs	r3, #8
 8010e58:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	689b      	ldr	r3, [r3, #8]
 8010e60:	0e5b      	lsrs	r3, r3, #25
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	f003 0307 	and.w	r3, r3, #7
 8010e68:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	689b      	ldr	r3, [r3, #8]
 8010e70:	0f5b      	lsrs	r3, r3, #29
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	f003 0307 	and.w	r3, r3, #7
 8010e78:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8010e7a:	7fbb      	ldrb	r3, [r7, #30]
 8010e7c:	7f3a      	ldrb	r2, [r7, #28]
 8010e7e:	3220      	adds	r2, #32
 8010e80:	443a      	add	r2, r7
 8010e82:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010e86:	fb02 f303 	mul.w	r3, r2, r3
 8010e8a:	7f3a      	ldrb	r2, [r7, #28]
 8010e8c:	3220      	adds	r2, #32
 8010e8e:	443a      	add	r2, r7
 8010e90:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e98:	b29a      	uxth	r2, r3
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8010ea0:	7ffb      	ldrb	r3, [r7, #31]
 8010ea2:	7f7a      	ldrb	r2, [r7, #29]
 8010ea4:	3220      	adds	r2, #32
 8010ea6:	443a      	add	r2, r7
 8010ea8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010eac:	fb02 f303 	mul.w	r3, r2, r3
 8010eb0:	7f7a      	ldrb	r2, [r7, #29]
 8010eb2:	3220      	adds	r2, #32
 8010eb4:	443a      	add	r2, r7
 8010eb6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ebe:	b29a      	uxth	r2, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010ec6:	bf00      	nop
 8010ec8:	3724      	adds	r7, #36	; 0x24
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop
 8010ed4:	08022750 	.word	0x08022750
 8010ed8:	08022758 	.word	0x08022758

08010edc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010edc:	b084      	sub	sp, #16
 8010ede:	b480      	push	{r7}
 8010ee0:	b085      	sub	sp, #20
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
 8010ee6:	f107 001c 	add.w	r0, r7, #28
 8010eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8010ef2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8010ef4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010ef6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8010efa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8010efe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8010f02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010f04:	68fa      	ldr	r2, [r7, #12]
 8010f06:	4313      	orrs	r3, r2
 8010f08:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	685a      	ldr	r2, [r3, #4]
 8010f0e:	4b07      	ldr	r3, [pc, #28]	; (8010f2c <SDMMC_Init+0x50>)
 8010f10:	4013      	ands	r3, r2
 8010f12:	68fa      	ldr	r2, [r7, #12]
 8010f14:	431a      	orrs	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010f1a:	2300      	movs	r3, #0
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3714      	adds	r7, #20
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	b004      	add	sp, #16
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop
 8010f2c:	ffc02c00 	.word	0xffc02c00

08010f30 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	370c      	adds	r7, #12
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr

08010f4a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010f4a:	b480      	push	{r7}
 8010f4c:	b083      	sub	sp, #12
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	6078      	str	r0, [r7, #4]
 8010f52:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	681a      	ldr	r2, [r3, #0]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010f5e:	2300      	movs	r3, #0
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	370c      	adds	r7, #12
 8010f64:	46bd      	mov	sp, r7
 8010f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6a:	4770      	bx	lr

08010f6c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f043 0203 	orr.w	r2, r3, #3
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010f80:	2002      	movs	r0, #2
 8010f82:	f7f5 fbeb 	bl	800675c <HAL_Delay>

  return HAL_OK;
 8010f86:	2300      	movs	r3, #0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3708      	adds	r7, #8
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010f90:	b480      	push	{r7}
 8010f92:	b083      	sub	sp, #12
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f003 0303 	and.w	r3, r3, #3
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	370c      	adds	r7, #12
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010faa:	4770      	bx	lr

08010fac <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010fac:	b480      	push	{r7}
 8010fae:	b085      	sub	sp, #20
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
 8010fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	681a      	ldr	r2, [r3, #0]
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010fca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010fd0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010fd6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010fd8:	68fa      	ldr	r2, [r7, #12]
 8010fda:	4313      	orrs	r3, r2
 8010fdc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	68da      	ldr	r2, [r3, #12]
 8010fe2:	4b06      	ldr	r3, [pc, #24]	; (8010ffc <SDMMC_SendCommand+0x50>)
 8010fe4:	4013      	ands	r3, r2
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	431a      	orrs	r2, r3
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010fee:	2300      	movs	r3, #0
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3714      	adds	r7, #20
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr
 8010ffc:	fffee0c0 	.word	0xfffee0c0

08011000 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011000:	b480      	push	{r7}
 8011002:	b083      	sub	sp, #12
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	691b      	ldr	r3, [r3, #16]
 801100c:	b2db      	uxtb	r3, r3
}
 801100e:	4618      	mov	r0, r3
 8011010:	370c      	adds	r7, #12
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr

0801101a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801101a:	b480      	push	{r7}
 801101c:	b085      	sub	sp, #20
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
 8011022:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	3314      	adds	r3, #20
 8011028:	461a      	mov	r2, r3
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	4413      	add	r3, r2
 801102e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	681b      	ldr	r3, [r3, #0]
}
 8011034:	4618      	mov	r0, r3
 8011036:	3714      	adds	r7, #20
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr

08011040 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8011040:	b480      	push	{r7}
 8011042:	b085      	sub	sp, #20
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801104a:	2300      	movs	r3, #0
 801104c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	681a      	ldr	r2, [r3, #0]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	685a      	ldr	r2, [r3, #4]
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011066:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801106c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011072:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	4313      	orrs	r3, r2
 8011078:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801107e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	431a      	orrs	r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801108a:	2300      	movs	r3, #0

}
 801108c:	4618      	mov	r0, r3
 801108e:	3714      	adds	r7, #20
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr

08011098 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b088      	sub	sp, #32
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80110a6:	2310      	movs	r3, #16
 80110a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110b0:	2300      	movs	r3, #0
 80110b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110ba:	f107 0308 	add.w	r3, r7, #8
 80110be:	4619      	mov	r1, r3
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f7ff ff73 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80110c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80110ca:	2110      	movs	r1, #16
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f000 faa5 	bl	801161c <SDMMC_GetCmdResp1>
 80110d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110d4:	69fb      	ldr	r3, [r7, #28]
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3720      	adds	r7, #32
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80110de:	b580      	push	{r7, lr}
 80110e0:	b088      	sub	sp, #32
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
 80110e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80110ec:	2311      	movs	r3, #17
 80110ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110f6:	2300      	movs	r3, #0
 80110f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011100:	f107 0308 	add.w	r3, r7, #8
 8011104:	4619      	mov	r1, r3
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f7ff ff50 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801110c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011110:	2111      	movs	r1, #17
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f000 fa82 	bl	801161c <SDMMC_GetCmdResp1>
 8011118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801111a:	69fb      	ldr	r3, [r7, #28]
}
 801111c:	4618      	mov	r0, r3
 801111e:	3720      	adds	r7, #32
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b088      	sub	sp, #32
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011132:	2312      	movs	r3, #18
 8011134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011136:	f44f 7380 	mov.w	r3, #256	; 0x100
 801113a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801113c:	2300      	movs	r3, #0
 801113e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011144:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011146:	f107 0308 	add.w	r3, r7, #8
 801114a:	4619      	mov	r1, r3
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f7ff ff2d 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011152:	f241 3288 	movw	r2, #5000	; 0x1388
 8011156:	2112      	movs	r1, #18
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f000 fa5f 	bl	801161c <SDMMC_GetCmdResp1>
 801115e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011160:	69fb      	ldr	r3, [r7, #28]
}
 8011162:	4618      	mov	r0, r3
 8011164:	3720      	adds	r7, #32
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}

0801116a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801116a:	b580      	push	{r7, lr}
 801116c:	b088      	sub	sp, #32
 801116e:	af00      	add	r7, sp, #0
 8011170:	6078      	str	r0, [r7, #4]
 8011172:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011178:	2318      	movs	r3, #24
 801117a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801117c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011182:	2300      	movs	r3, #0
 8011184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801118a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801118c:	f107 0308 	add.w	r3, r7, #8
 8011190:	4619      	mov	r1, r3
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7ff ff0a 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011198:	f241 3288 	movw	r2, #5000	; 0x1388
 801119c:	2118      	movs	r1, #24
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f000 fa3c 	bl	801161c <SDMMC_GetCmdResp1>
 80111a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111a6:	69fb      	ldr	r3, [r7, #28]
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3720      	adds	r7, #32
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}

080111b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b088      	sub	sp, #32
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80111be:	2319      	movs	r3, #25
 80111c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111c8:	2300      	movs	r3, #0
 80111ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111d2:	f107 0308 	add.w	r3, r7, #8
 80111d6:	4619      	mov	r1, r3
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f7ff fee7 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80111de:	f241 3288 	movw	r2, #5000	; 0x1388
 80111e2:	2119      	movs	r1, #25
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f000 fa19 	bl	801161c <SDMMC_GetCmdResp1>
 80111ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111ec:	69fb      	ldr	r3, [r7, #28]
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3720      	adds	r7, #32
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
	...

080111f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b088      	sub	sp, #32
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011200:	2300      	movs	r3, #0
 8011202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011204:	230c      	movs	r3, #12
 8011206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011208:	f44f 7380 	mov.w	r3, #256	; 0x100
 801120c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801120e:	2300      	movs	r3, #0
 8011210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011216:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011230:	f107 0308 	add.w	r3, r7, #8
 8011234:	4619      	mov	r1, r3
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f7ff feb8 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801123c:	4a08      	ldr	r2, [pc, #32]	; (8011260 <SDMMC_CmdStopTransfer+0x68>)
 801123e:	210c      	movs	r1, #12
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f000 f9eb 	bl	801161c <SDMMC_GetCmdResp1>
 8011246:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	68db      	ldr	r3, [r3, #12]
 801124c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8011254:	69fb      	ldr	r3, [r7, #28]
}
 8011256:	4618      	mov	r0, r3
 8011258:	3720      	adds	r7, #32
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	05f5e100 	.word	0x05f5e100

08011264 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b08a      	sub	sp, #40	; 0x28
 8011268:	af00      	add	r7, sp, #0
 801126a:	60f8      	str	r0, [r7, #12]
 801126c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011274:	2307      	movs	r3, #7
 8011276:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011278:	f44f 7380 	mov.w	r3, #256	; 0x100
 801127c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801127e:	2300      	movs	r3, #0
 8011280:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011286:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011288:	f107 0310 	add.w	r3, r7, #16
 801128c:	4619      	mov	r1, r3
 801128e:	68f8      	ldr	r0, [r7, #12]
 8011290:	f7ff fe8c 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011294:	f241 3288 	movw	r2, #5000	; 0x1388
 8011298:	2107      	movs	r1, #7
 801129a:	68f8      	ldr	r0, [r7, #12]
 801129c:	f000 f9be 	bl	801161c <SDMMC_GetCmdResp1>
 80112a0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80112a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3728      	adds	r7, #40	; 0x28
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}

080112ac <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b088      	sub	sp, #32
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80112b4:	2300      	movs	r3, #0
 80112b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80112b8:	2300      	movs	r3, #0
 80112ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80112bc:	2300      	movs	r3, #0
 80112be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112c0:	2300      	movs	r3, #0
 80112c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112ca:	f107 0308 	add.w	r3, r7, #8
 80112ce:	4619      	mov	r1, r3
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f7ff fe6b 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f000 f976 	bl	80115c8 <SDMMC_GetCmdError>
 80112dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112de:	69fb      	ldr	r3, [r7, #28]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3720      	adds	r7, #32
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}

080112e8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b088      	sub	sp, #32
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80112f0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80112f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80112f6:	2308      	movs	r3, #8
 80112f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011300:	2300      	movs	r3, #0
 8011302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011308:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801130a:	f107 0308 	add.w	r3, r7, #8
 801130e:	4619      	mov	r1, r3
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f7ff fe4b 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f000 fb6a 	bl	80119f0 <SDMMC_GetCmdResp7>
 801131c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801131e:	69fb      	ldr	r3, [r7, #28]
}
 8011320:	4618      	mov	r0, r3
 8011322:	3720      	adds	r7, #32
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}

08011328 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b088      	sub	sp, #32
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011336:	2337      	movs	r3, #55	; 0x37
 8011338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801133a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801133e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011340:	2300      	movs	r3, #0
 8011342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011348:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801134a:	f107 0308 	add.w	r3, r7, #8
 801134e:	4619      	mov	r1, r3
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f7ff fe2b 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011356:	f241 3288 	movw	r2, #5000	; 0x1388
 801135a:	2137      	movs	r1, #55	; 0x37
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f000 f95d 	bl	801161c <SDMMC_GetCmdResp1>
 8011362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011364:	69fb      	ldr	r3, [r7, #28]
}
 8011366:	4618      	mov	r0, r3
 8011368:	3720      	adds	r7, #32
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}

0801136e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801136e:	b580      	push	{r7, lr}
 8011370:	b088      	sub	sp, #32
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
 8011376:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801137c:	2329      	movs	r3, #41	; 0x29
 801137e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011386:	2300      	movs	r3, #0
 8011388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801138e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011390:	f107 0308 	add.w	r3, r7, #8
 8011394:	4619      	mov	r1, r3
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f7ff fe08 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f000 fa75 	bl	801188c <SDMMC_GetCmdResp3>
 80113a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113a4:	69fb      	ldr	r3, [r7, #28]
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	3720      	adds	r7, #32
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}

080113ae <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80113ae:	b580      	push	{r7, lr}
 80113b0:	b088      	sub	sp, #32
 80113b2:	af00      	add	r7, sp, #0
 80113b4:	6078      	str	r0, [r7, #4]
 80113b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80113bc:	2306      	movs	r3, #6
 80113be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113c6:	2300      	movs	r3, #0
 80113c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113d0:	f107 0308 	add.w	r3, r7, #8
 80113d4:	4619      	mov	r1, r3
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f7ff fde8 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80113dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80113e0:	2106      	movs	r1, #6
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f000 f91a 	bl	801161c <SDMMC_GetCmdResp1>
 80113e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113ea:	69fb      	ldr	r3, [r7, #28]
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3720      	adds	r7, #32
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b088      	sub	sp, #32
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80113fc:	2300      	movs	r3, #0
 80113fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011400:	2333      	movs	r3, #51	; 0x33
 8011402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801140a:	2300      	movs	r3, #0
 801140c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801140e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011412:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011414:	f107 0308 	add.w	r3, r7, #8
 8011418:	4619      	mov	r1, r3
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f7ff fdc6 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011420:	f241 3288 	movw	r2, #5000	; 0x1388
 8011424:	2133      	movs	r1, #51	; 0x33
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 f8f8 	bl	801161c <SDMMC_GetCmdResp1>
 801142c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801142e:	69fb      	ldr	r3, [r7, #28]
}
 8011430:	4618      	mov	r0, r3
 8011432:	3720      	adds	r7, #32
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b088      	sub	sp, #32
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011440:	2300      	movs	r3, #0
 8011442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011444:	2302      	movs	r3, #2
 8011446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011448:	f44f 7340 	mov.w	r3, #768	; 0x300
 801144c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801144e:	2300      	movs	r3, #0
 8011450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011456:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011458:	f107 0308 	add.w	r3, r7, #8
 801145c:	4619      	mov	r1, r3
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f7ff fda4 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f000 f9c9 	bl	80117fc <SDMMC_GetCmdResp2>
 801146a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801146c:	69fb      	ldr	r3, [r7, #28]
}
 801146e:	4618      	mov	r0, r3
 8011470:	3720      	adds	r7, #32
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}

08011476 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011476:	b580      	push	{r7, lr}
 8011478:	b088      	sub	sp, #32
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
 801147e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011484:	2309      	movs	r3, #9
 8011486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011488:	f44f 7340 	mov.w	r3, #768	; 0x300
 801148c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801148e:	2300      	movs	r3, #0
 8011490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011496:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011498:	f107 0308 	add.w	r3, r7, #8
 801149c:	4619      	mov	r1, r3
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f7ff fd84 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f000 f9a9 	bl	80117fc <SDMMC_GetCmdResp2>
 80114aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114ac:	69fb      	ldr	r3, [r7, #28]
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3720      	adds	r7, #32
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}

080114b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80114b6:	b580      	push	{r7, lr}
 80114b8:	b088      	sub	sp, #32
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
 80114be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80114c0:	2300      	movs	r3, #0
 80114c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80114c4:	2303      	movs	r3, #3
 80114c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114ce:	2300      	movs	r3, #0
 80114d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114d8:	f107 0308 	add.w	r3, r7, #8
 80114dc:	4619      	mov	r1, r3
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f7ff fd64 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80114e4:	683a      	ldr	r2, [r7, #0]
 80114e6:	2103      	movs	r1, #3
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f000 fa0b 	bl	8011904 <SDMMC_GetCmdResp6>
 80114ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114f0:	69fb      	ldr	r3, [r7, #28]
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3720      	adds	r7, #32
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80114fa:	b580      	push	{r7, lr}
 80114fc:	b088      	sub	sp, #32
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
 8011502:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011508:	230d      	movs	r3, #13
 801150a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801150c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011510:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011512:	2300      	movs	r3, #0
 8011514:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801151a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801151c:	f107 0308 	add.w	r3, r7, #8
 8011520:	4619      	mov	r1, r3
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f7ff fd42 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011528:	f241 3288 	movw	r2, #5000	; 0x1388
 801152c:	210d      	movs	r1, #13
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 f874 	bl	801161c <SDMMC_GetCmdResp1>
 8011534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011536:	69fb      	ldr	r3, [r7, #28]
}
 8011538:	4618      	mov	r0, r3
 801153a:	3720      	adds	r7, #32
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b088      	sub	sp, #32
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011548:	2300      	movs	r3, #0
 801154a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801154c:	230d      	movs	r3, #13
 801154e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011556:	2300      	movs	r3, #0
 8011558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801155e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011560:	f107 0308 	add.w	r3, r7, #8
 8011564:	4619      	mov	r1, r3
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f7ff fd20 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011570:	210d      	movs	r1, #13
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f000 f852 	bl	801161c <SDMMC_GetCmdResp1>
 8011578:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801157a:	69fb      	ldr	r3, [r7, #28]
}
 801157c:	4618      	mov	r0, r3
 801157e:	3720      	adds	r7, #32
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}

08011584 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b088      	sub	sp, #32
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 801158c:	2300      	movs	r3, #0
 801158e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8011590:	230b      	movs	r3, #11
 8011592:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801159a:	2300      	movs	r3, #0
 801159c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801159e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115a4:	f107 0308 	add.w	r3, r7, #8
 80115a8:	4619      	mov	r1, r3
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f7ff fcfe 	bl	8010fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80115b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80115b4:	210b      	movs	r1, #11
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f000 f830 	bl	801161c <SDMMC_GetCmdResp1>
 80115bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115be:	69fb      	ldr	r3, [r7, #28]
}
 80115c0:	4618      	mov	r0, r3
 80115c2:	3720      	adds	r7, #32
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}

080115c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80115c8:	b490      	push	{r4, r7}
 80115ca:	b082      	sub	sp, #8
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80115d0:	4b0f      	ldr	r3, [pc, #60]	; (8011610 <SDMMC_GetCmdError+0x48>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	4a0f      	ldr	r2, [pc, #60]	; (8011614 <SDMMC_GetCmdError+0x4c>)
 80115d6:	fba2 2303 	umull	r2, r3, r2, r3
 80115da:	0a5b      	lsrs	r3, r3, #9
 80115dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80115e0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80115e4:	4623      	mov	r3, r4
 80115e6:	1e5c      	subs	r4, r3, #1
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d102      	bne.n	80115f2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80115ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80115f0:	e009      	b.n	8011606 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d0f2      	beq.n	80115e4 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	4a05      	ldr	r2, [pc, #20]	; (8011618 <SDMMC_GetCmdError+0x50>)
 8011602:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011604:	2300      	movs	r3, #0
}
 8011606:	4618      	mov	r0, r3
 8011608:	3708      	adds	r7, #8
 801160a:	46bd      	mov	sp, r7
 801160c:	bc90      	pop	{r4, r7}
 801160e:	4770      	bx	lr
 8011610:	20000038 	.word	0x20000038
 8011614:	10624dd3 	.word	0x10624dd3
 8011618:	002000c5 	.word	0x002000c5

0801161c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801161c:	b590      	push	{r4, r7, lr}
 801161e:	b087      	sub	sp, #28
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	460b      	mov	r3, r1
 8011626:	607a      	str	r2, [r7, #4]
 8011628:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801162a:	4b6f      	ldr	r3, [pc, #444]	; (80117e8 <SDMMC_GetCmdResp1+0x1cc>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	4a6f      	ldr	r2, [pc, #444]	; (80117ec <SDMMC_GetCmdResp1+0x1d0>)
 8011630:	fba2 2303 	umull	r2, r3, r2, r3
 8011634:	0a5b      	lsrs	r3, r3, #9
 8011636:	687a      	ldr	r2, [r7, #4]
 8011638:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 801163c:	4623      	mov	r3, r4
 801163e:	1e5c      	subs	r4, r3, #1
 8011640:	2b00      	cmp	r3, #0
 8011642:	d102      	bne.n	801164a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011644:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011648:	e0c9      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801164e:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011650:	697a      	ldr	r2, [r7, #20]
 8011652:	4b67      	ldr	r3, [pc, #412]	; (80117f0 <SDMMC_GetCmdResp1+0x1d4>)
 8011654:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011656:	2b00      	cmp	r3, #0
 8011658:	d0f0      	beq.n	801163c <SDMMC_GetCmdResp1+0x20>
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011660:	2b00      	cmp	r3, #0
 8011662:	d1eb      	bne.n	801163c <SDMMC_GetCmdResp1+0x20>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011668:	f003 0304 	and.w	r3, r3, #4
 801166c:	2b00      	cmp	r3, #0
 801166e:	d004      	beq.n	801167a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2204      	movs	r2, #4
 8011674:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011676:	2304      	movs	r3, #4
 8011678:	e0b1      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801167e:	f003 0301 	and.w	r3, r3, #1
 8011682:	2b00      	cmp	r3, #0
 8011684:	d004      	beq.n	8011690 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2201      	movs	r2, #1
 801168a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801168c:	2301      	movs	r3, #1
 801168e:	e0a6      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	4a58      	ldr	r2, [pc, #352]	; (80117f4 <SDMMC_GetCmdResp1+0x1d8>)
 8011694:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011696:	68f8      	ldr	r0, [r7, #12]
 8011698:	f7ff fcb2 	bl	8011000 <SDMMC_GetCommandResponse>
 801169c:	4603      	mov	r3, r0
 801169e:	461a      	mov	r2, r3
 80116a0:	7afb      	ldrb	r3, [r7, #11]
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d001      	beq.n	80116aa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80116a6:	2301      	movs	r3, #1
 80116a8:	e099      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80116aa:	2100      	movs	r1, #0
 80116ac:	68f8      	ldr	r0, [r7, #12]
 80116ae:	f7ff fcb4 	bl	801101a <SDMMC_GetResponse>
 80116b2:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80116b4:	693a      	ldr	r2, [r7, #16]
 80116b6:	4b50      	ldr	r3, [pc, #320]	; (80117f8 <SDMMC_GetCmdResp1+0x1dc>)
 80116b8:	4013      	ands	r3, r2
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d101      	bne.n	80116c2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80116be:	2300      	movs	r3, #0
 80116c0:	e08d      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	da02      	bge.n	80116ce <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80116c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80116cc:	e087      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d001      	beq.n	80116dc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80116d8:	2340      	movs	r3, #64	; 0x40
 80116da:	e080      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d001      	beq.n	80116ea <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80116e6:	2380      	movs	r3, #128	; 0x80
 80116e8:	e079      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80116ea:	693b      	ldr	r3, [r7, #16]
 80116ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d002      	beq.n	80116fa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80116f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116f8:	e071      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011700:	2b00      	cmp	r3, #0
 8011702:	d002      	beq.n	801170a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011708:	e069      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011710:	2b00      	cmp	r3, #0
 8011712:	d002      	beq.n	801171a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011718:	e061      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801171a:	693b      	ldr	r3, [r7, #16]
 801171c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011720:	2b00      	cmp	r3, #0
 8011722:	d002      	beq.n	801172a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011724:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011728:	e059      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011730:	2b00      	cmp	r3, #0
 8011732:	d002      	beq.n	801173a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011738:	e051      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801173a:	693b      	ldr	r3, [r7, #16]
 801173c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011740:	2b00      	cmp	r3, #0
 8011742:	d002      	beq.n	801174a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011748:	e049      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801174a:	693b      	ldr	r3, [r7, #16]
 801174c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011750:	2b00      	cmp	r3, #0
 8011752:	d002      	beq.n	801175a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011754:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011758:	e041      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801175a:	693b      	ldr	r3, [r7, #16]
 801175c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011760:	2b00      	cmp	r3, #0
 8011762:	d002      	beq.n	801176a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8011764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011768:	e039      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011770:	2b00      	cmp	r3, #0
 8011772:	d002      	beq.n	801177a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011778:	e031      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011780:	2b00      	cmp	r3, #0
 8011782:	d002      	beq.n	801178a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011784:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011788:	e029      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011790:	2b00      	cmp	r3, #0
 8011792:	d002      	beq.n	801179a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011794:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011798:	e021      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d002      	beq.n	80117aa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80117a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80117a8:	e019      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d002      	beq.n	80117ba <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80117b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80117b8:	e011      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d002      	beq.n	80117ca <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80117c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80117c8:	e009      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	f003 0308 	and.w	r3, r3, #8
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d002      	beq.n	80117da <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80117d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80117d8:	e001      	b.n	80117de <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80117da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80117de:	4618      	mov	r0, r3
 80117e0:	371c      	adds	r7, #28
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd90      	pop	{r4, r7, pc}
 80117e6:	bf00      	nop
 80117e8:	20000038 	.word	0x20000038
 80117ec:	10624dd3 	.word	0x10624dd3
 80117f0:	00200045 	.word	0x00200045
 80117f4:	002000c5 	.word	0x002000c5
 80117f8:	fdffe008 	.word	0xfdffe008

080117fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80117fc:	b490      	push	{r4, r7}
 80117fe:	b084      	sub	sp, #16
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011804:	4b1e      	ldr	r3, [pc, #120]	; (8011880 <SDMMC_GetCmdResp2+0x84>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	4a1e      	ldr	r2, [pc, #120]	; (8011884 <SDMMC_GetCmdResp2+0x88>)
 801180a:	fba2 2303 	umull	r2, r3, r2, r3
 801180e:	0a5b      	lsrs	r3, r3, #9
 8011810:	f241 3288 	movw	r2, #5000	; 0x1388
 8011814:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011818:	4623      	mov	r3, r4
 801181a:	1e5c      	subs	r4, r3, #1
 801181c:	2b00      	cmp	r3, #0
 801181e:	d102      	bne.n	8011826 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011824:	e026      	b.n	8011874 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801182a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011832:	2b00      	cmp	r3, #0
 8011834:	d0f0      	beq.n	8011818 <SDMMC_GetCmdResp2+0x1c>
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801183c:	2b00      	cmp	r3, #0
 801183e:	d1eb      	bne.n	8011818 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011844:	f003 0304 	and.w	r3, r3, #4
 8011848:	2b00      	cmp	r3, #0
 801184a:	d004      	beq.n	8011856 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2204      	movs	r2, #4
 8011850:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011852:	2304      	movs	r3, #4
 8011854:	e00e      	b.n	8011874 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801185a:	f003 0301 	and.w	r3, r3, #1
 801185e:	2b00      	cmp	r3, #0
 8011860:	d004      	beq.n	801186c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2201      	movs	r2, #1
 8011866:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011868:	2301      	movs	r3, #1
 801186a:	e003      	b.n	8011874 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	4a06      	ldr	r2, [pc, #24]	; (8011888 <SDMMC_GetCmdResp2+0x8c>)
 8011870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011872:	2300      	movs	r3, #0
}
 8011874:	4618      	mov	r0, r3
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bc90      	pop	{r4, r7}
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	20000038 	.word	0x20000038
 8011884:	10624dd3 	.word	0x10624dd3
 8011888:	002000c5 	.word	0x002000c5

0801188c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801188c:	b490      	push	{r4, r7}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011894:	4b18      	ldr	r3, [pc, #96]	; (80118f8 <SDMMC_GetCmdResp3+0x6c>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4a18      	ldr	r2, [pc, #96]	; (80118fc <SDMMC_GetCmdResp3+0x70>)
 801189a:	fba2 2303 	umull	r2, r3, r2, r3
 801189e:	0a5b      	lsrs	r3, r3, #9
 80118a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80118a4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80118a8:	4623      	mov	r3, r4
 80118aa:	1e5c      	subs	r4, r3, #1
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d102      	bne.n	80118b6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80118b4:	e01b      	b.n	80118ee <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d0f0      	beq.n	80118a8 <SDMMC_GetCmdResp3+0x1c>
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d1eb      	bne.n	80118a8 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118d4:	f003 0304 	and.w	r3, r3, #4
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d004      	beq.n	80118e6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2204      	movs	r2, #4
 80118e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80118e2:	2304      	movs	r3, #4
 80118e4:	e003      	b.n	80118ee <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	4a05      	ldr	r2, [pc, #20]	; (8011900 <SDMMC_GetCmdResp3+0x74>)
 80118ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80118ec:	2300      	movs	r3, #0
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3710      	adds	r7, #16
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bc90      	pop	{r4, r7}
 80118f6:	4770      	bx	lr
 80118f8:	20000038 	.word	0x20000038
 80118fc:	10624dd3 	.word	0x10624dd3
 8011900:	002000c5 	.word	0x002000c5

08011904 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011904:	b590      	push	{r4, r7, lr}
 8011906:	b087      	sub	sp, #28
 8011908:	af00      	add	r7, sp, #0
 801190a:	60f8      	str	r0, [r7, #12]
 801190c:	460b      	mov	r3, r1
 801190e:	607a      	str	r2, [r7, #4]
 8011910:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011912:	4b34      	ldr	r3, [pc, #208]	; (80119e4 <SDMMC_GetCmdResp6+0xe0>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	4a34      	ldr	r2, [pc, #208]	; (80119e8 <SDMMC_GetCmdResp6+0xe4>)
 8011918:	fba2 2303 	umull	r2, r3, r2, r3
 801191c:	0a5b      	lsrs	r3, r3, #9
 801191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011922:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011926:	4623      	mov	r3, r4
 8011928:	1e5c      	subs	r4, r3, #1
 801192a:	2b00      	cmp	r3, #0
 801192c:	d102      	bne.n	8011934 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801192e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011932:	e052      	b.n	80119da <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011938:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011940:	2b00      	cmp	r3, #0
 8011942:	d0f0      	beq.n	8011926 <SDMMC_GetCmdResp6+0x22>
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801194a:	2b00      	cmp	r3, #0
 801194c:	d1eb      	bne.n	8011926 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011952:	f003 0304 	and.w	r3, r3, #4
 8011956:	2b00      	cmp	r3, #0
 8011958:	d004      	beq.n	8011964 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	2204      	movs	r2, #4
 801195e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011960:	2304      	movs	r3, #4
 8011962:	e03a      	b.n	80119da <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011968:	f003 0301 	and.w	r3, r3, #1
 801196c:	2b00      	cmp	r3, #0
 801196e:	d004      	beq.n	801197a <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	2201      	movs	r2, #1
 8011974:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011976:	2301      	movs	r3, #1
 8011978:	e02f      	b.n	80119da <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801197a:	68f8      	ldr	r0, [r7, #12]
 801197c:	f7ff fb40 	bl	8011000 <SDMMC_GetCommandResponse>
 8011980:	4603      	mov	r3, r0
 8011982:	461a      	mov	r2, r3
 8011984:	7afb      	ldrb	r3, [r7, #11]
 8011986:	4293      	cmp	r3, r2
 8011988:	d001      	beq.n	801198e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801198a:	2301      	movs	r3, #1
 801198c:	e025      	b.n	80119da <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	4a16      	ldr	r2, [pc, #88]	; (80119ec <SDMMC_GetCmdResp6+0xe8>)
 8011992:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011994:	2100      	movs	r1, #0
 8011996:	68f8      	ldr	r0, [r7, #12]
 8011998:	f7ff fb3f 	bl	801101a <SDMMC_GetResponse>
 801199c:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d106      	bne.n	80119b6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	0c1b      	lsrs	r3, r3, #16
 80119ac:	b29a      	uxth	r2, r3
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80119b2:	2300      	movs	r3, #0
 80119b4:	e011      	b.n	80119da <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d002      	beq.n	80119c6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80119c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80119c4:	e009      	b.n	80119da <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d002      	beq.n	80119d6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80119d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119d4:	e001      	b.n	80119da <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80119d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80119da:	4618      	mov	r0, r3
 80119dc:	371c      	adds	r7, #28
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd90      	pop	{r4, r7, pc}
 80119e2:	bf00      	nop
 80119e4:	20000038 	.word	0x20000038
 80119e8:	10624dd3 	.word	0x10624dd3
 80119ec:	002000c5 	.word	0x002000c5

080119f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80119f0:	b490      	push	{r4, r7}
 80119f2:	b084      	sub	sp, #16
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80119f8:	4b21      	ldr	r3, [pc, #132]	; (8011a80 <SDMMC_GetCmdResp7+0x90>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4a21      	ldr	r2, [pc, #132]	; (8011a84 <SDMMC_GetCmdResp7+0x94>)
 80119fe:	fba2 2303 	umull	r2, r3, r2, r3
 8011a02:	0a5b      	lsrs	r3, r3, #9
 8011a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a08:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8011a0c:	4623      	mov	r3, r4
 8011a0e:	1e5c      	subs	r4, r3, #1
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d102      	bne.n	8011a1a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a18:	e02c      	b.n	8011a74 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a1e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d0f0      	beq.n	8011a0c <SDMMC_GetCmdResp7+0x1c>
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d1eb      	bne.n	8011a0c <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a38:	f003 0304 	and.w	r3, r3, #4
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d004      	beq.n	8011a4a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2204      	movs	r2, #4
 8011a44:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a46:	2304      	movs	r3, #4
 8011a48:	e014      	b.n	8011a74 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a4e:	f003 0301 	and.w	r3, r3, #1
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d004      	beq.n	8011a60 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2201      	movs	r2, #1
 8011a5a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	e009      	b.n	8011a74 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d002      	beq.n	8011a72 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2240      	movs	r2, #64	; 0x40
 8011a70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011a72:	2300      	movs	r3, #0

}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3710      	adds	r7, #16
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bc90      	pop	{r4, r7}
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop
 8011a80:	20000038 	.word	0x20000038
 8011a84:	10624dd3 	.word	0x10624dd3

08011a88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b087      	sub	sp, #28
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	60f8      	str	r0, [r7, #12]
 8011a90:	60b9      	str	r1, [r7, #8]
 8011a92:	4613      	mov	r3, r2
 8011a94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011a96:	79fb      	ldrb	r3, [r7, #7]
 8011a98:	2b02      	cmp	r3, #2
 8011a9a:	d165      	bne.n	8011b68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	4a3e      	ldr	r2, [pc, #248]	; (8011b98 <USB_SetTurnaroundTime+0x110>)
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	d906      	bls.n	8011ab2 <USB_SetTurnaroundTime+0x2a>
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	4a3d      	ldr	r2, [pc, #244]	; (8011b9c <USB_SetTurnaroundTime+0x114>)
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	d202      	bcs.n	8011ab2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011aac:	230f      	movs	r3, #15
 8011aae:	617b      	str	r3, [r7, #20]
 8011ab0:	e05c      	b.n	8011b6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	4a39      	ldr	r2, [pc, #228]	; (8011b9c <USB_SetTurnaroundTime+0x114>)
 8011ab6:	4293      	cmp	r3, r2
 8011ab8:	d306      	bcc.n	8011ac8 <USB_SetTurnaroundTime+0x40>
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	4a38      	ldr	r2, [pc, #224]	; (8011ba0 <USB_SetTurnaroundTime+0x118>)
 8011abe:	4293      	cmp	r3, r2
 8011ac0:	d202      	bcs.n	8011ac8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011ac2:	230e      	movs	r3, #14
 8011ac4:	617b      	str	r3, [r7, #20]
 8011ac6:	e051      	b.n	8011b6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	4a35      	ldr	r2, [pc, #212]	; (8011ba0 <USB_SetTurnaroundTime+0x118>)
 8011acc:	4293      	cmp	r3, r2
 8011ace:	d306      	bcc.n	8011ade <USB_SetTurnaroundTime+0x56>
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	4a34      	ldr	r2, [pc, #208]	; (8011ba4 <USB_SetTurnaroundTime+0x11c>)
 8011ad4:	4293      	cmp	r3, r2
 8011ad6:	d202      	bcs.n	8011ade <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011ad8:	230d      	movs	r3, #13
 8011ada:	617b      	str	r3, [r7, #20]
 8011adc:	e046      	b.n	8011b6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	4a30      	ldr	r2, [pc, #192]	; (8011ba4 <USB_SetTurnaroundTime+0x11c>)
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	d306      	bcc.n	8011af4 <USB_SetTurnaroundTime+0x6c>
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	4a2f      	ldr	r2, [pc, #188]	; (8011ba8 <USB_SetTurnaroundTime+0x120>)
 8011aea:	4293      	cmp	r3, r2
 8011aec:	d802      	bhi.n	8011af4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011aee:	230c      	movs	r3, #12
 8011af0:	617b      	str	r3, [r7, #20]
 8011af2:	e03b      	b.n	8011b6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	4a2c      	ldr	r2, [pc, #176]	; (8011ba8 <USB_SetTurnaroundTime+0x120>)
 8011af8:	4293      	cmp	r3, r2
 8011afa:	d906      	bls.n	8011b0a <USB_SetTurnaroundTime+0x82>
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	4a2b      	ldr	r2, [pc, #172]	; (8011bac <USB_SetTurnaroundTime+0x124>)
 8011b00:	4293      	cmp	r3, r2
 8011b02:	d802      	bhi.n	8011b0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011b04:	230b      	movs	r3, #11
 8011b06:	617b      	str	r3, [r7, #20]
 8011b08:	e030      	b.n	8011b6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	4a27      	ldr	r2, [pc, #156]	; (8011bac <USB_SetTurnaroundTime+0x124>)
 8011b0e:	4293      	cmp	r3, r2
 8011b10:	d906      	bls.n	8011b20 <USB_SetTurnaroundTime+0x98>
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	4a26      	ldr	r2, [pc, #152]	; (8011bb0 <USB_SetTurnaroundTime+0x128>)
 8011b16:	4293      	cmp	r3, r2
 8011b18:	d802      	bhi.n	8011b20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011b1a:	230a      	movs	r3, #10
 8011b1c:	617b      	str	r3, [r7, #20]
 8011b1e:	e025      	b.n	8011b6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	4a23      	ldr	r2, [pc, #140]	; (8011bb0 <USB_SetTurnaroundTime+0x128>)
 8011b24:	4293      	cmp	r3, r2
 8011b26:	d906      	bls.n	8011b36 <USB_SetTurnaroundTime+0xae>
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	4a22      	ldr	r2, [pc, #136]	; (8011bb4 <USB_SetTurnaroundTime+0x12c>)
 8011b2c:	4293      	cmp	r3, r2
 8011b2e:	d202      	bcs.n	8011b36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011b30:	2309      	movs	r3, #9
 8011b32:	617b      	str	r3, [r7, #20]
 8011b34:	e01a      	b.n	8011b6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	4a1e      	ldr	r2, [pc, #120]	; (8011bb4 <USB_SetTurnaroundTime+0x12c>)
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	d306      	bcc.n	8011b4c <USB_SetTurnaroundTime+0xc4>
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	4a1d      	ldr	r2, [pc, #116]	; (8011bb8 <USB_SetTurnaroundTime+0x130>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d802      	bhi.n	8011b4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011b46:	2308      	movs	r3, #8
 8011b48:	617b      	str	r3, [r7, #20]
 8011b4a:	e00f      	b.n	8011b6c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	4a1a      	ldr	r2, [pc, #104]	; (8011bb8 <USB_SetTurnaroundTime+0x130>)
 8011b50:	4293      	cmp	r3, r2
 8011b52:	d906      	bls.n	8011b62 <USB_SetTurnaroundTime+0xda>
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	4a19      	ldr	r2, [pc, #100]	; (8011bbc <USB_SetTurnaroundTime+0x134>)
 8011b58:	4293      	cmp	r3, r2
 8011b5a:	d202      	bcs.n	8011b62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011b5c:	2307      	movs	r3, #7
 8011b5e:	617b      	str	r3, [r7, #20]
 8011b60:	e004      	b.n	8011b6c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011b62:	2306      	movs	r3, #6
 8011b64:	617b      	str	r3, [r7, #20]
 8011b66:	e001      	b.n	8011b6c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011b68:	2309      	movs	r3, #9
 8011b6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	68da      	ldr	r2, [r3, #12]
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	029b      	lsls	r3, r3, #10
 8011b80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011b84:	431a      	orrs	r2, r3
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011b8a:	2300      	movs	r3, #0
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	371c      	adds	r7, #28
 8011b90:	46bd      	mov	sp, r7
 8011b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b96:	4770      	bx	lr
 8011b98:	00d8acbf 	.word	0x00d8acbf
 8011b9c:	00e4e1c0 	.word	0x00e4e1c0
 8011ba0:	00f42400 	.word	0x00f42400
 8011ba4:	01067380 	.word	0x01067380
 8011ba8:	011a499f 	.word	0x011a499f
 8011bac:	01312cff 	.word	0x01312cff
 8011bb0:	014ca43f 	.word	0x014ca43f
 8011bb4:	016e3600 	.word	0x016e3600
 8011bb8:	01a6ab1f 	.word	0x01a6ab1f
 8011bbc:	01e84800 	.word	0x01e84800

08011bc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011bc0:	b480      	push	{r7}
 8011bc2:	b085      	sub	sp, #20
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	019b      	lsls	r3, r3, #6
 8011bd2:	f043 0220 	orr.w	r2, r3, #32
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	3301      	adds	r3, #1
 8011bde:	60fb      	str	r3, [r7, #12]
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	4a09      	ldr	r2, [pc, #36]	; (8011c08 <USB_FlushTxFifo+0x48>)
 8011be4:	4293      	cmp	r3, r2
 8011be6:	d901      	bls.n	8011bec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8011be8:	2303      	movs	r3, #3
 8011bea:	e006      	b.n	8011bfa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	691b      	ldr	r3, [r3, #16]
 8011bf0:	f003 0320 	and.w	r3, r3, #32
 8011bf4:	2b20      	cmp	r3, #32
 8011bf6:	d0f0      	beq.n	8011bda <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8011bf8:	2300      	movs	r3, #0
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3714      	adds	r7, #20
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c04:	4770      	bx	lr
 8011c06:	bf00      	nop
 8011c08:	00030d40 	.word	0x00030d40

08011c0c <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011c0c:	b480      	push	{r7}
 8011c0e:	b087      	sub	sp, #28
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c1e:	689b      	ldr	r3, [r3, #8]
 8011c20:	f003 0306 	and.w	r3, r3, #6
 8011c24:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	2b02      	cmp	r3, #2
 8011c2a:	d002      	beq.n	8011c32 <USB_GetDevSpeed+0x26>
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	2b06      	cmp	r3, #6
 8011c30:	d102      	bne.n	8011c38 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011c32:	2302      	movs	r3, #2
 8011c34:	75fb      	strb	r3, [r7, #23]
 8011c36:	e001      	b.n	8011c3c <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8011c38:	230f      	movs	r3, #15
 8011c3a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	371c      	adds	r7, #28
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr

08011c4a <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011c4a:	b480      	push	{r7}
 8011c4c:	b085      	sub	sp, #20
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
 8011c52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	781b      	ldrb	r3, [r3, #0]
 8011c5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	785b      	ldrb	r3, [r3, #1]
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d13a      	bne.n	8011cdc <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c6c:	69da      	ldr	r2, [r3, #28]
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	f003 030f 	and.w	r3, r3, #15
 8011c76:	2101      	movs	r1, #1
 8011c78:	fa01 f303 	lsl.w	r3, r1, r3
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	68f9      	ldr	r1, [r7, #12]
 8011c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011c84:	4313      	orrs	r3, r2
 8011c86:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	015a      	lsls	r2, r3, #5
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	4413      	add	r3, r2
 8011c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d155      	bne.n	8011d4a <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	015a      	lsls	r2, r3, #5
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	689b      	ldr	r3, [r3, #8]
 8011cb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	78db      	ldrb	r3, [r3, #3]
 8011cb8:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011cba:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	059b      	lsls	r3, r3, #22
 8011cc0:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	68ba      	ldr	r2, [r7, #8]
 8011cc6:	0151      	lsls	r1, r2, #5
 8011cc8:	68fa      	ldr	r2, [r7, #12]
 8011cca:	440a      	add	r2, r1
 8011ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011cd8:	6013      	str	r3, [r2, #0]
 8011cda:	e036      	b.n	8011d4a <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ce2:	69da      	ldr	r2, [r3, #28]
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	f003 030f 	and.w	r3, r3, #15
 8011cec:	2101      	movs	r1, #1
 8011cee:	fa01 f303 	lsl.w	r3, r1, r3
 8011cf2:	041b      	lsls	r3, r3, #16
 8011cf4:	68f9      	ldr	r1, [r7, #12]
 8011cf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011cfa:	4313      	orrs	r3, r2
 8011cfc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	015a      	lsls	r2, r3, #5
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	4413      	add	r3, r2
 8011d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d11a      	bne.n	8011d4a <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	015a      	lsls	r2, r3, #5
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	4413      	add	r3, r2
 8011d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	689b      	ldr	r3, [r3, #8]
 8011d26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	78db      	ldrb	r3, [r3, #3]
 8011d2e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011d30:	430b      	orrs	r3, r1
 8011d32:	4313      	orrs	r3, r2
 8011d34:	68ba      	ldr	r2, [r7, #8]
 8011d36:	0151      	lsls	r1, r2, #5
 8011d38:	68fa      	ldr	r2, [r7, #12]
 8011d3a:	440a      	add	r2, r1
 8011d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d48:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011d4a:	2300      	movs	r3, #0
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3714      	adds	r7, #20
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b086      	sub	sp, #24
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	785b      	ldrb	r3, [r3, #1]
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	f040 810a 	bne.w	8011f8a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	695b      	ldr	r3, [r3, #20]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d132      	bne.n	8011de4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	015a      	lsls	r2, r3, #5
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	4413      	add	r3, r2
 8011d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d8a:	691b      	ldr	r3, [r3, #16]
 8011d8c:	693a      	ldr	r2, [r7, #16]
 8011d8e:	0151      	lsls	r1, r2, #5
 8011d90:	697a      	ldr	r2, [r7, #20]
 8011d92:	440a      	add	r2, r1
 8011d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011d9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011da0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011da2:	693b      	ldr	r3, [r7, #16]
 8011da4:	015a      	lsls	r2, r3, #5
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	4413      	add	r3, r2
 8011daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dae:	691b      	ldr	r3, [r3, #16]
 8011db0:	693a      	ldr	r2, [r7, #16]
 8011db2:	0151      	lsls	r1, r2, #5
 8011db4:	697a      	ldr	r2, [r7, #20]
 8011db6:	440a      	add	r2, r1
 8011db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011dc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	015a      	lsls	r2, r3, #5
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	4413      	add	r3, r2
 8011dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dce:	691b      	ldr	r3, [r3, #16]
 8011dd0:	693a      	ldr	r2, [r7, #16]
 8011dd2:	0151      	lsls	r1, r2, #5
 8011dd4:	697a      	ldr	r2, [r7, #20]
 8011dd6:	440a      	add	r2, r1
 8011dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ddc:	0cdb      	lsrs	r3, r3, #19
 8011dde:	04db      	lsls	r3, r3, #19
 8011de0:	6113      	str	r3, [r2, #16]
 8011de2:	e074      	b.n	8011ece <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	015a      	lsls	r2, r3, #5
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	4413      	add	r3, r2
 8011dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011df0:	691b      	ldr	r3, [r3, #16]
 8011df2:	693a      	ldr	r2, [r7, #16]
 8011df4:	0151      	lsls	r1, r2, #5
 8011df6:	697a      	ldr	r2, [r7, #20]
 8011df8:	440a      	add	r2, r1
 8011dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011dfe:	0cdb      	lsrs	r3, r3, #19
 8011e00:	04db      	lsls	r3, r3, #19
 8011e02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	015a      	lsls	r2, r3, #5
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	4413      	add	r3, r2
 8011e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e10:	691b      	ldr	r3, [r3, #16]
 8011e12:	693a      	ldr	r2, [r7, #16]
 8011e14:	0151      	lsls	r1, r2, #5
 8011e16:	697a      	ldr	r2, [r7, #20]
 8011e18:	440a      	add	r2, r1
 8011e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011e22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011e26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	015a      	lsls	r2, r3, #5
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	4413      	add	r3, r2
 8011e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e34:	691a      	ldr	r2, [r3, #16]
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	6959      	ldr	r1, [r3, #20]
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	689b      	ldr	r3, [r3, #8]
 8011e3e:	440b      	add	r3, r1
 8011e40:	1e59      	subs	r1, r3, #1
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	689b      	ldr	r3, [r3, #8]
 8011e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8011e4a:	04d9      	lsls	r1, r3, #19
 8011e4c:	4baf      	ldr	r3, [pc, #700]	; (801210c <USB_EPStartXfer+0x3b4>)
 8011e4e:	400b      	ands	r3, r1
 8011e50:	6939      	ldr	r1, [r7, #16]
 8011e52:	0148      	lsls	r0, r1, #5
 8011e54:	6979      	ldr	r1, [r7, #20]
 8011e56:	4401      	add	r1, r0
 8011e58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011e5c:	4313      	orrs	r3, r2
 8011e5e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	015a      	lsls	r2, r3, #5
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	4413      	add	r3, r2
 8011e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e6c:	691a      	ldr	r2, [r3, #16]
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	695b      	ldr	r3, [r3, #20]
 8011e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e76:	6939      	ldr	r1, [r7, #16]
 8011e78:	0148      	lsls	r0, r1, #5
 8011e7a:	6979      	ldr	r1, [r7, #20]
 8011e7c:	4401      	add	r1, r0
 8011e7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011e82:	4313      	orrs	r3, r2
 8011e84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	78db      	ldrb	r3, [r3, #3]
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	d11f      	bne.n	8011ece <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	015a      	lsls	r2, r3, #5
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	4413      	add	r3, r2
 8011e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e9a:	691b      	ldr	r3, [r3, #16]
 8011e9c:	693a      	ldr	r2, [r7, #16]
 8011e9e:	0151      	lsls	r1, r2, #5
 8011ea0:	697a      	ldr	r2, [r7, #20]
 8011ea2:	440a      	add	r2, r1
 8011ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ea8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011eac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	015a      	lsls	r2, r3, #5
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	4413      	add	r3, r2
 8011eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011eba:	691b      	ldr	r3, [r3, #16]
 8011ebc:	693a      	ldr	r2, [r7, #16]
 8011ebe:	0151      	lsls	r1, r2, #5
 8011ec0:	697a      	ldr	r2, [r7, #20]
 8011ec2:	440a      	add	r2, r1
 8011ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ec8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011ecc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	015a      	lsls	r2, r3, #5
 8011ed2:	697b      	ldr	r3, [r7, #20]
 8011ed4:	4413      	add	r3, r2
 8011ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	693a      	ldr	r2, [r7, #16]
 8011ede:	0151      	lsls	r1, r2, #5
 8011ee0:	697a      	ldr	r2, [r7, #20]
 8011ee2:	440a      	add	r2, r1
 8011ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ee8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011eec:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	78db      	ldrb	r3, [r3, #3]
 8011ef2:	2b01      	cmp	r3, #1
 8011ef4:	d015      	beq.n	8011f22 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	695b      	ldr	r3, [r3, #20]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	f000 8100 	beq.w	8012100 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	f003 030f 	and.w	r3, r3, #15
 8011f10:	2101      	movs	r1, #1
 8011f12:	fa01 f303 	lsl.w	r3, r1, r3
 8011f16:	6979      	ldr	r1, [r7, #20]
 8011f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011f1c:	4313      	orrs	r3, r2
 8011f1e:	634b      	str	r3, [r1, #52]	; 0x34
 8011f20:	e0ee      	b.n	8012100 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f28:	689b      	ldr	r3, [r3, #8]
 8011f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d110      	bne.n	8011f54 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	015a      	lsls	r2, r3, #5
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	4413      	add	r3, r2
 8011f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	693a      	ldr	r2, [r7, #16]
 8011f42:	0151      	lsls	r1, r2, #5
 8011f44:	697a      	ldr	r2, [r7, #20]
 8011f46:	440a      	add	r2, r1
 8011f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011f50:	6013      	str	r3, [r2, #0]
 8011f52:	e00f      	b.n	8011f74 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	015a      	lsls	r2, r3, #5
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	4413      	add	r3, r2
 8011f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	693a      	ldr	r2, [r7, #16]
 8011f64:	0151      	lsls	r1, r2, #5
 8011f66:	697a      	ldr	r2, [r7, #20]
 8011f68:	440a      	add	r2, r1
 8011f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f72:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	68d9      	ldr	r1, [r3, #12]
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	781a      	ldrb	r2, [r3, #0]
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	695b      	ldr	r3, [r3, #20]
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f000 f9e2 	bl	801234c <USB_WritePacket>
 8011f88:	e0ba      	b.n	8012100 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	015a      	lsls	r2, r3, #5
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	4413      	add	r3, r2
 8011f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f96:	691b      	ldr	r3, [r3, #16]
 8011f98:	693a      	ldr	r2, [r7, #16]
 8011f9a:	0151      	lsls	r1, r2, #5
 8011f9c:	697a      	ldr	r2, [r7, #20]
 8011f9e:	440a      	add	r2, r1
 8011fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fa4:	0cdb      	lsrs	r3, r3, #19
 8011fa6:	04db      	lsls	r3, r3, #19
 8011fa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	015a      	lsls	r2, r3, #5
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fb6:	691b      	ldr	r3, [r3, #16]
 8011fb8:	693a      	ldr	r2, [r7, #16]
 8011fba:	0151      	lsls	r1, r2, #5
 8011fbc:	697a      	ldr	r2, [r7, #20]
 8011fbe:	440a      	add	r2, r1
 8011fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011fc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011fc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011fcc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	695b      	ldr	r3, [r3, #20]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d123      	bne.n	801201e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	015a      	lsls	r2, r3, #5
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	4413      	add	r3, r2
 8011fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fe2:	691a      	ldr	r2, [r3, #16]
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	689b      	ldr	r3, [r3, #8]
 8011fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011fec:	6939      	ldr	r1, [r7, #16]
 8011fee:	0148      	lsls	r0, r1, #5
 8011ff0:	6979      	ldr	r1, [r7, #20]
 8011ff2:	4401      	add	r1, r0
 8011ff4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011ff8:	4313      	orrs	r3, r2
 8011ffa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	015a      	lsls	r2, r3, #5
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	4413      	add	r3, r2
 8012004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012008:	691b      	ldr	r3, [r3, #16]
 801200a:	693a      	ldr	r2, [r7, #16]
 801200c:	0151      	lsls	r1, r2, #5
 801200e:	697a      	ldr	r2, [r7, #20]
 8012010:	440a      	add	r2, r1
 8012012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801201a:	6113      	str	r3, [r2, #16]
 801201c:	e033      	b.n	8012086 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	695a      	ldr	r2, [r3, #20]
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	689b      	ldr	r3, [r3, #8]
 8012026:	4413      	add	r3, r2
 8012028:	1e5a      	subs	r2, r3, #1
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	689b      	ldr	r3, [r3, #8]
 801202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012032:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	015a      	lsls	r2, r3, #5
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	4413      	add	r3, r2
 801203c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012040:	691a      	ldr	r2, [r3, #16]
 8012042:	89fb      	ldrh	r3, [r7, #14]
 8012044:	04d9      	lsls	r1, r3, #19
 8012046:	4b31      	ldr	r3, [pc, #196]	; (801210c <USB_EPStartXfer+0x3b4>)
 8012048:	400b      	ands	r3, r1
 801204a:	6939      	ldr	r1, [r7, #16]
 801204c:	0148      	lsls	r0, r1, #5
 801204e:	6979      	ldr	r1, [r7, #20]
 8012050:	4401      	add	r1, r0
 8012052:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012056:	4313      	orrs	r3, r2
 8012058:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	015a      	lsls	r2, r3, #5
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	4413      	add	r3, r2
 8012062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012066:	691a      	ldr	r2, [r3, #16]
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	689b      	ldr	r3, [r3, #8]
 801206c:	89f9      	ldrh	r1, [r7, #14]
 801206e:	fb01 f303 	mul.w	r3, r1, r3
 8012072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012076:	6939      	ldr	r1, [r7, #16]
 8012078:	0148      	lsls	r0, r1, #5
 801207a:	6979      	ldr	r1, [r7, #20]
 801207c:	4401      	add	r1, r0
 801207e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012082:	4313      	orrs	r3, r2
 8012084:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	78db      	ldrb	r3, [r3, #3]
 801208a:	2b01      	cmp	r3, #1
 801208c:	d128      	bne.n	80120e0 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012094:	689b      	ldr	r3, [r3, #8]
 8012096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801209a:	2b00      	cmp	r3, #0
 801209c:	d110      	bne.n	80120c0 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	015a      	lsls	r2, r3, #5
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	4413      	add	r3, r2
 80120a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	693a      	ldr	r2, [r7, #16]
 80120ae:	0151      	lsls	r1, r2, #5
 80120b0:	697a      	ldr	r2, [r7, #20]
 80120b2:	440a      	add	r2, r1
 80120b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80120b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80120bc:	6013      	str	r3, [r2, #0]
 80120be:	e00f      	b.n	80120e0 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	015a      	lsls	r2, r3, #5
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	4413      	add	r3, r2
 80120c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	693a      	ldr	r2, [r7, #16]
 80120d0:	0151      	lsls	r1, r2, #5
 80120d2:	697a      	ldr	r2, [r7, #20]
 80120d4:	440a      	add	r2, r1
 80120d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80120da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80120de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	015a      	lsls	r2, r3, #5
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	4413      	add	r3, r2
 80120e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	693a      	ldr	r2, [r7, #16]
 80120f0:	0151      	lsls	r1, r2, #5
 80120f2:	697a      	ldr	r2, [r7, #20]
 80120f4:	440a      	add	r2, r1
 80120f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80120fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80120fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012100:	2300      	movs	r3, #0
}
 8012102:	4618      	mov	r0, r3
 8012104:	3718      	adds	r7, #24
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	1ff80000 	.word	0x1ff80000

08012110 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012110:	b480      	push	{r7}
 8012112:	b085      	sub	sp, #20
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	785b      	ldrb	r3, [r3, #1]
 8012128:	2b01      	cmp	r3, #1
 801212a:	f040 80ab 	bne.w	8012284 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	695b      	ldr	r3, [r3, #20]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d132      	bne.n	801219c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	015a      	lsls	r2, r3, #5
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	4413      	add	r3, r2
 801213e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012142:	691b      	ldr	r3, [r3, #16]
 8012144:	68ba      	ldr	r2, [r7, #8]
 8012146:	0151      	lsls	r1, r2, #5
 8012148:	68fa      	ldr	r2, [r7, #12]
 801214a:	440a      	add	r2, r1
 801214c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012150:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012154:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012158:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	015a      	lsls	r2, r3, #5
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	4413      	add	r3, r2
 8012162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012166:	691b      	ldr	r3, [r3, #16]
 8012168:	68ba      	ldr	r2, [r7, #8]
 801216a:	0151      	lsls	r1, r2, #5
 801216c:	68fa      	ldr	r2, [r7, #12]
 801216e:	440a      	add	r2, r1
 8012170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012174:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012178:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	015a      	lsls	r2, r3, #5
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	4413      	add	r3, r2
 8012182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012186:	691b      	ldr	r3, [r3, #16]
 8012188:	68ba      	ldr	r2, [r7, #8]
 801218a:	0151      	lsls	r1, r2, #5
 801218c:	68fa      	ldr	r2, [r7, #12]
 801218e:	440a      	add	r2, r1
 8012190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012194:	0cdb      	lsrs	r3, r3, #19
 8012196:	04db      	lsls	r3, r3, #19
 8012198:	6113      	str	r3, [r2, #16]
 801219a:	e04e      	b.n	801223a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	015a      	lsls	r2, r3, #5
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	4413      	add	r3, r2
 80121a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121a8:	691b      	ldr	r3, [r3, #16]
 80121aa:	68ba      	ldr	r2, [r7, #8]
 80121ac:	0151      	lsls	r1, r2, #5
 80121ae:	68fa      	ldr	r2, [r7, #12]
 80121b0:	440a      	add	r2, r1
 80121b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121b6:	0cdb      	lsrs	r3, r3, #19
 80121b8:	04db      	lsls	r3, r3, #19
 80121ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	015a      	lsls	r2, r3, #5
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	4413      	add	r3, r2
 80121c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121c8:	691b      	ldr	r3, [r3, #16]
 80121ca:	68ba      	ldr	r2, [r7, #8]
 80121cc:	0151      	lsls	r1, r2, #5
 80121ce:	68fa      	ldr	r2, [r7, #12]
 80121d0:	440a      	add	r2, r1
 80121d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80121da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80121de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	695a      	ldr	r2, [r3, #20]
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	689b      	ldr	r3, [r3, #8]
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d903      	bls.n	80121f4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	689a      	ldr	r2, [r3, #8]
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	015a      	lsls	r2, r3, #5
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	4413      	add	r3, r2
 80121fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012200:	691b      	ldr	r3, [r3, #16]
 8012202:	68ba      	ldr	r2, [r7, #8]
 8012204:	0151      	lsls	r1, r2, #5
 8012206:	68fa      	ldr	r2, [r7, #12]
 8012208:	440a      	add	r2, r1
 801220a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801220e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	015a      	lsls	r2, r3, #5
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	4413      	add	r3, r2
 801221c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012220:	691a      	ldr	r2, [r3, #16]
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	695b      	ldr	r3, [r3, #20]
 8012226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801222a:	68b9      	ldr	r1, [r7, #8]
 801222c:	0148      	lsls	r0, r1, #5
 801222e:	68f9      	ldr	r1, [r7, #12]
 8012230:	4401      	add	r1, r0
 8012232:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012236:	4313      	orrs	r3, r2
 8012238:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	015a      	lsls	r2, r3, #5
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	4413      	add	r3, r2
 8012242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	68ba      	ldr	r2, [r7, #8]
 801224a:	0151      	lsls	r1, r2, #5
 801224c:	68fa      	ldr	r2, [r7, #12]
 801224e:	440a      	add	r2, r1
 8012250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012254:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012258:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	695b      	ldr	r3, [r3, #20]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d06d      	beq.n	801233e <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	f003 030f 	and.w	r3, r3, #15
 8012272:	2101      	movs	r1, #1
 8012274:	fa01 f303 	lsl.w	r3, r1, r3
 8012278:	68f9      	ldr	r1, [r7, #12]
 801227a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801227e:	4313      	orrs	r3, r2
 8012280:	634b      	str	r3, [r1, #52]	; 0x34
 8012282:	e05c      	b.n	801233e <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012284:	68bb      	ldr	r3, [r7, #8]
 8012286:	015a      	lsls	r2, r3, #5
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	4413      	add	r3, r2
 801228c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012290:	691b      	ldr	r3, [r3, #16]
 8012292:	68ba      	ldr	r2, [r7, #8]
 8012294:	0151      	lsls	r1, r2, #5
 8012296:	68fa      	ldr	r2, [r7, #12]
 8012298:	440a      	add	r2, r1
 801229a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801229e:	0cdb      	lsrs	r3, r3, #19
 80122a0:	04db      	lsls	r3, r3, #19
 80122a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	015a      	lsls	r2, r3, #5
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	4413      	add	r3, r2
 80122ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122b0:	691b      	ldr	r3, [r3, #16]
 80122b2:	68ba      	ldr	r2, [r7, #8]
 80122b4:	0151      	lsls	r1, r2, #5
 80122b6:	68fa      	ldr	r2, [r7, #12]
 80122b8:	440a      	add	r2, r1
 80122ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80122c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80122c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	695b      	ldr	r3, [r3, #20]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d003      	beq.n	80122d8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	689a      	ldr	r2, [r3, #8]
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	015a      	lsls	r2, r3, #5
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	4413      	add	r3, r2
 80122e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122e4:	691b      	ldr	r3, [r3, #16]
 80122e6:	68ba      	ldr	r2, [r7, #8]
 80122e8:	0151      	lsls	r1, r2, #5
 80122ea:	68fa      	ldr	r2, [r7, #12]
 80122ec:	440a      	add	r2, r1
 80122ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80122f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	015a      	lsls	r2, r3, #5
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	4413      	add	r3, r2
 8012300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012304:	691a      	ldr	r2, [r3, #16]
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	689b      	ldr	r3, [r3, #8]
 801230a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801230e:	68b9      	ldr	r1, [r7, #8]
 8012310:	0148      	lsls	r0, r1, #5
 8012312:	68f9      	ldr	r1, [r7, #12]
 8012314:	4401      	add	r1, r0
 8012316:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801231a:	4313      	orrs	r3, r2
 801231c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	015a      	lsls	r2, r3, #5
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	4413      	add	r3, r2
 8012326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	68ba      	ldr	r2, [r7, #8]
 801232e:	0151      	lsls	r1, r2, #5
 8012330:	68fa      	ldr	r2, [r7, #12]
 8012332:	440a      	add	r2, r1
 8012334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012338:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801233c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801233e:	2300      	movs	r3, #0
}
 8012340:	4618      	mov	r0, r3
 8012342:	3714      	adds	r7, #20
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr

0801234c <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 801234c:	b480      	push	{r7}
 801234e:	b089      	sub	sp, #36	; 0x24
 8012350:	af00      	add	r7, sp, #0
 8012352:	60f8      	str	r0, [r7, #12]
 8012354:	60b9      	str	r1, [r7, #8]
 8012356:	4611      	mov	r1, r2
 8012358:	461a      	mov	r2, r3
 801235a:	460b      	mov	r3, r1
 801235c:	71fb      	strb	r3, [r7, #7]
 801235e:	4613      	mov	r3, r2
 8012360:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 801236a:	88bb      	ldrh	r3, [r7, #4]
 801236c:	3303      	adds	r3, #3
 801236e:	089b      	lsrs	r3, r3, #2
 8012370:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8012372:	2300      	movs	r3, #0
 8012374:	61bb      	str	r3, [r7, #24]
 8012376:	e00f      	b.n	8012398 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012378:	79fb      	ldrb	r3, [r7, #7]
 801237a:	031a      	lsls	r2, r3, #12
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	4413      	add	r3, r2
 8012380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012384:	461a      	mov	r2, r3
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	6013      	str	r3, [r2, #0]
    pSrc++;
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	3304      	adds	r3, #4
 8012390:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	3301      	adds	r3, #1
 8012396:	61bb      	str	r3, [r7, #24]
 8012398:	69ba      	ldr	r2, [r7, #24]
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	429a      	cmp	r2, r3
 801239e:	d3eb      	bcc.n	8012378 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80123a0:	2300      	movs	r3, #0
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3724      	adds	r7, #36	; 0x24
 80123a6:	46bd      	mov	sp, r7
 80123a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ac:	4770      	bx	lr

080123ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80123ae:	b480      	push	{r7}
 80123b0:	b089      	sub	sp, #36	; 0x24
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	60f8      	str	r0, [r7, #12]
 80123b6:	60b9      	str	r1, [r7, #8]
 80123b8:	4613      	mov	r3, r2
 80123ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80123c4:	88fb      	ldrh	r3, [r7, #6]
 80123c6:	3303      	adds	r3, #3
 80123c8:	089b      	lsrs	r3, r3, #2
 80123ca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80123cc:	2300      	movs	r3, #0
 80123ce:	61bb      	str	r3, [r7, #24]
 80123d0:	e00b      	b.n	80123ea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80123d8:	681a      	ldr	r2, [r3, #0]
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	601a      	str	r2, [r3, #0]
    pDest++;
 80123de:	69fb      	ldr	r3, [r7, #28]
 80123e0:	3304      	adds	r3, #4
 80123e2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	3301      	adds	r3, #1
 80123e8:	61bb      	str	r3, [r7, #24]
 80123ea:	69ba      	ldr	r2, [r7, #24]
 80123ec:	693b      	ldr	r3, [r7, #16]
 80123ee:	429a      	cmp	r2, r3
 80123f0:	d3ef      	bcc.n	80123d2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80123f2:	69fb      	ldr	r3, [r7, #28]
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	3724      	adds	r7, #36	; 0x24
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr

08012400 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012400:	b480      	push	{r7}
 8012402:	b085      	sub	sp, #20
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	781b      	ldrb	r3, [r3, #0]
 8012412:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	785b      	ldrb	r3, [r3, #1]
 8012418:	2b01      	cmp	r3, #1
 801241a:	d12c      	bne.n	8012476 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	015a      	lsls	r2, r3, #5
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	4413      	add	r3, r2
 8012424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	2b00      	cmp	r3, #0
 801242c:	db12      	blt.n	8012454 <USB_EPSetStall+0x54>
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d00f      	beq.n	8012454 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	015a      	lsls	r2, r3, #5
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	4413      	add	r3, r2
 801243c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	68ba      	ldr	r2, [r7, #8]
 8012444:	0151      	lsls	r1, r2, #5
 8012446:	68fa      	ldr	r2, [r7, #12]
 8012448:	440a      	add	r2, r1
 801244a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801244e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012452:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	015a      	lsls	r2, r3, #5
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	4413      	add	r3, r2
 801245c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	68ba      	ldr	r2, [r7, #8]
 8012464:	0151      	lsls	r1, r2, #5
 8012466:	68fa      	ldr	r2, [r7, #12]
 8012468:	440a      	add	r2, r1
 801246a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801246e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012472:	6013      	str	r3, [r2, #0]
 8012474:	e02b      	b.n	80124ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	015a      	lsls	r2, r3, #5
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	4413      	add	r3, r2
 801247e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	db12      	blt.n	80124ae <USB_EPSetStall+0xae>
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d00f      	beq.n	80124ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	015a      	lsls	r2, r3, #5
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	4413      	add	r3, r2
 8012496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	68ba      	ldr	r2, [r7, #8]
 801249e:	0151      	lsls	r1, r2, #5
 80124a0:	68fa      	ldr	r2, [r7, #12]
 80124a2:	440a      	add	r2, r1
 80124a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80124a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80124ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	015a      	lsls	r2, r3, #5
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	4413      	add	r3, r2
 80124b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	68ba      	ldr	r2, [r7, #8]
 80124be:	0151      	lsls	r1, r2, #5
 80124c0:	68fa      	ldr	r2, [r7, #12]
 80124c2:	440a      	add	r2, r1
 80124c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80124c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80124cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80124ce:	2300      	movs	r3, #0
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	3714      	adds	r7, #20
 80124d4:	46bd      	mov	sp, r7
 80124d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124da:	4770      	bx	lr

080124dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80124dc:	b480      	push	{r7}
 80124de:	b085      	sub	sp, #20
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	781b      	ldrb	r3, [r3, #0]
 80124ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80124f0:	683b      	ldr	r3, [r7, #0]
 80124f2:	785b      	ldrb	r3, [r3, #1]
 80124f4:	2b01      	cmp	r3, #1
 80124f6:	d128      	bne.n	801254a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	015a      	lsls	r2, r3, #5
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	4413      	add	r3, r2
 8012500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	68ba      	ldr	r2, [r7, #8]
 8012508:	0151      	lsls	r1, r2, #5
 801250a:	68fa      	ldr	r2, [r7, #12]
 801250c:	440a      	add	r2, r1
 801250e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012512:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012516:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	78db      	ldrb	r3, [r3, #3]
 801251c:	2b03      	cmp	r3, #3
 801251e:	d003      	beq.n	8012528 <USB_EPClearStall+0x4c>
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	78db      	ldrb	r3, [r3, #3]
 8012524:	2b02      	cmp	r3, #2
 8012526:	d138      	bne.n	801259a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	015a      	lsls	r2, r3, #5
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	4413      	add	r3, r2
 8012530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	68ba      	ldr	r2, [r7, #8]
 8012538:	0151      	lsls	r1, r2, #5
 801253a:	68fa      	ldr	r2, [r7, #12]
 801253c:	440a      	add	r2, r1
 801253e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012546:	6013      	str	r3, [r2, #0]
 8012548:	e027      	b.n	801259a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	015a      	lsls	r2, r3, #5
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	4413      	add	r3, r2
 8012552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	68ba      	ldr	r2, [r7, #8]
 801255a:	0151      	lsls	r1, r2, #5
 801255c:	68fa      	ldr	r2, [r7, #12]
 801255e:	440a      	add	r2, r1
 8012560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012564:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012568:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	78db      	ldrb	r3, [r3, #3]
 801256e:	2b03      	cmp	r3, #3
 8012570:	d003      	beq.n	801257a <USB_EPClearStall+0x9e>
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	78db      	ldrb	r3, [r3, #3]
 8012576:	2b02      	cmp	r3, #2
 8012578:	d10f      	bne.n	801259a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	015a      	lsls	r2, r3, #5
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	4413      	add	r3, r2
 8012582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	68ba      	ldr	r2, [r7, #8]
 801258a:	0151      	lsls	r1, r2, #5
 801258c:	68fa      	ldr	r2, [r7, #12]
 801258e:	440a      	add	r2, r1
 8012590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012598:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801259a:	2300      	movs	r3, #0
}
 801259c:	4618      	mov	r0, r3
 801259e:	3714      	adds	r7, #20
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr

080125a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80125a8:	b480      	push	{r7}
 80125aa:	b085      	sub	sp, #20
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	460b      	mov	r3, r1
 80125b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	68fa      	ldr	r2, [r7, #12]
 80125c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80125c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80125ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80125d2:	681a      	ldr	r2, [r3, #0]
 80125d4:	78fb      	ldrb	r3, [r7, #3]
 80125d6:	011b      	lsls	r3, r3, #4
 80125d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80125dc:	68f9      	ldr	r1, [r7, #12]
 80125de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80125e2:	4313      	orrs	r3, r2
 80125e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80125e6:	2300      	movs	r3, #0
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3714      	adds	r7, #20
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr

080125f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80125f4:	b480      	push	{r7}
 80125f6:	b085      	sub	sp, #20
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	695b      	ldr	r3, [r3, #20]
 8012600:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	699b      	ldr	r3, [r3, #24]
 8012606:	68fa      	ldr	r2, [r7, #12]
 8012608:	4013      	ands	r3, r2
 801260a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801260c:	68fb      	ldr	r3, [r7, #12]
}
 801260e:	4618      	mov	r0, r3
 8012610:	3714      	adds	r7, #20
 8012612:	46bd      	mov	sp, r7
 8012614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012618:	4770      	bx	lr

0801261a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801261a:	b480      	push	{r7}
 801261c:	b085      	sub	sp, #20
 801261e:	af00      	add	r7, sp, #0
 8012620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801262c:	699b      	ldr	r3, [r3, #24]
 801262e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012636:	69db      	ldr	r3, [r3, #28]
 8012638:	68ba      	ldr	r2, [r7, #8]
 801263a:	4013      	ands	r3, r2
 801263c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	0c1b      	lsrs	r3, r3, #16
}
 8012642:	4618      	mov	r0, r3
 8012644:	3714      	adds	r7, #20
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr

0801264e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801264e:	b480      	push	{r7}
 8012650:	b085      	sub	sp, #20
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012660:	699b      	ldr	r3, [r3, #24]
 8012662:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801266a:	69db      	ldr	r3, [r3, #28]
 801266c:	68ba      	ldr	r2, [r7, #8]
 801266e:	4013      	ands	r3, r2
 8012670:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	b29b      	uxth	r3, r3
}
 8012676:	4618      	mov	r0, r3
 8012678:	3714      	adds	r7, #20
 801267a:	46bd      	mov	sp, r7
 801267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012680:	4770      	bx	lr

08012682 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012682:	b480      	push	{r7}
 8012684:	b085      	sub	sp, #20
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
 801268a:	460b      	mov	r3, r1
 801268c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012692:	78fb      	ldrb	r3, [r7, #3]
 8012694:	015a      	lsls	r2, r3, #5
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	4413      	add	r3, r2
 801269a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801269e:	689b      	ldr	r3, [r3, #8]
 80126a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126a8:	695b      	ldr	r3, [r3, #20]
 80126aa:	68ba      	ldr	r2, [r7, #8]
 80126ac:	4013      	ands	r3, r2
 80126ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80126b0:	68bb      	ldr	r3, [r7, #8]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3714      	adds	r7, #20
 80126b6:	46bd      	mov	sp, r7
 80126b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126bc:	4770      	bx	lr

080126be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80126be:	b480      	push	{r7}
 80126c0:	b087      	sub	sp, #28
 80126c2:	af00      	add	r7, sp, #0
 80126c4:	6078      	str	r0, [r7, #4]
 80126c6:	460b      	mov	r3, r1
 80126c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126d4:	691b      	ldr	r3, [r3, #16]
 80126d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80126d8:	697b      	ldr	r3, [r7, #20]
 80126da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80126e2:	78fb      	ldrb	r3, [r7, #3]
 80126e4:	f003 030f 	and.w	r3, r3, #15
 80126e8:	68fa      	ldr	r2, [r7, #12]
 80126ea:	fa22 f303 	lsr.w	r3, r2, r3
 80126ee:	01db      	lsls	r3, r3, #7
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	693a      	ldr	r2, [r7, #16]
 80126f4:	4313      	orrs	r3, r2
 80126f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80126f8:	78fb      	ldrb	r3, [r7, #3]
 80126fa:	015a      	lsls	r2, r3, #5
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	4413      	add	r3, r2
 8012700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012704:	689b      	ldr	r3, [r3, #8]
 8012706:	693a      	ldr	r2, [r7, #16]
 8012708:	4013      	ands	r3, r2
 801270a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801270c:	68bb      	ldr	r3, [r7, #8]
}
 801270e:	4618      	mov	r0, r3
 8012710:	371c      	adds	r7, #28
 8012712:	46bd      	mov	sp, r7
 8012714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012718:	4770      	bx	lr

0801271a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801271a:	b480      	push	{r7}
 801271c:	b083      	sub	sp, #12
 801271e:	af00      	add	r7, sp, #0
 8012720:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	695b      	ldr	r3, [r3, #20]
 8012726:	f003 0301 	and.w	r3, r3, #1
}
 801272a:	4618      	mov	r0, r3
 801272c:	370c      	adds	r7, #12
 801272e:	46bd      	mov	sp, r7
 8012730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012734:	4770      	bx	lr

08012736 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012736:	b480      	push	{r7}
 8012738:	b085      	sub	sp, #20
 801273a:	af00      	add	r7, sp, #0
 801273c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	68fa      	ldr	r2, [r7, #12]
 801274c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012750:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8012754:	f023 0307 	bic.w	r3, r3, #7
 8012758:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	68fa      	ldr	r2, [r7, #12]
 8012764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801276c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801276e:	2300      	movs	r3, #0
}
 8012770:	4618      	mov	r0, r3
 8012772:	3714      	adds	r7, #20
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr

0801277c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 801277c:	b480      	push	{r7}
 801277e:	b085      	sub	sp, #20
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	333c      	adds	r3, #60	; 0x3c
 801278e:	3304      	adds	r3, #4
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	4a1c      	ldr	r2, [pc, #112]	; (8012808 <USB_EP0_OutStart+0x8c>)
 8012798:	4293      	cmp	r3, r2
 801279a:	d90a      	bls.n	80127b2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80127a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80127ac:	d101      	bne.n	80127b2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80127ae:	2300      	movs	r3, #0
 80127b0:	e024      	b.n	80127fc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127b8:	461a      	mov	r2, r3
 80127ba:	2300      	movs	r3, #0
 80127bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127c4:	691b      	ldr	r3, [r3, #16]
 80127c6:	68fa      	ldr	r2, [r7, #12]
 80127c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80127d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127d8:	691b      	ldr	r3, [r3, #16]
 80127da:	68fa      	ldr	r2, [r7, #12]
 80127dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127e0:	f043 0318 	orr.w	r3, r3, #24
 80127e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127ec:	691b      	ldr	r3, [r3, #16]
 80127ee:	68fa      	ldr	r2, [r7, #12]
 80127f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80127f8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80127fa:	2300      	movs	r3, #0
}
 80127fc:	4618      	mov	r0, r3
 80127fe:	3714      	adds	r7, #20
 8012800:	46bd      	mov	sp, r7
 8012802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012806:	4770      	bx	lr
 8012808:	4f54300a 	.word	0x4f54300a

0801280c <USBD_WCID_STREAMING_FillTxDataBuffer>:
* @param  size: length of data in bytes
* @param  pdev: device instance
* @retval status
*/
uint8_t USBD_WCID_STREAMING_FillTxDataBuffer(USBD_HandleTypeDef *pdev, uint8_t ch_number, uint8_t* buf, uint32_t size)
{
 801280c:	b480      	push	{r7}
 801280e:	b08f      	sub	sp, #60	; 0x3c
 8012810:	af00      	add	r7, sp, #0
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	607a      	str	r2, [r7, #4]
 8012816:	603b      	str	r3, [r7, #0]
 8012818:	460b      	mov	r3, r1
 801281a:	72fb      	strb	r3, [r7, #11]
    USBD_WCID_STREAMING_HandleTypeDef   *hwcid = (USBD_WCID_STREAMING_HandleTypeDef*) pdev->pClassData;
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012822:	62fb      	str	r3, [r7, #44]	; 0x2c

   uint8_t ** TxBuffer = hwcid->TxBuffer;
 8012824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012826:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801282a:	62bb      	str	r3, [r7, #40]	; 0x28
   __IO uint8_t * TxBuffStatus = hwcid->TxBuffStatus;
 801282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801282e:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8012832:	627b      	str	r3, [r7, #36]	; 0x24
   uint32_t * TxBuffIdx = hwcid->TxBuffIdx;
 8012834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012836:	f503 739c 	add.w	r3, r3, #312	; 0x138
 801283a:	623b      	str	r3, [r7, #32]
   uint16_t * USB_DataSizePerEp = hwcid->USB_DataSizePerEp;
 801283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283e:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 8012842:	61fb      	str	r3, [r7, #28]
   __IO uint8_t * TxBuffReset = hwcid->TxBuffReset;
 8012844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012846:	f203 1365 	addw	r3, r3, #357	; 0x165
 801284a:	61bb      	str	r3, [r7, #24]
   
  uint32_t i;   
  uint8_t * txBuffptr = (uint8_t*)TxBuffer[ch_number];  
 801284c:	7afb      	ldrb	r3, [r7, #11]
 801284e:	009b      	lsls	r3, r3, #2
 8012850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012852:	4413      	add	r3, r2
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	617b      	str	r3, [r7, #20]
  
  if(TxBuffReset[ch_number] == 1)
 8012858:	7afb      	ldrb	r3, [r7, #11]
 801285a:	69ba      	ldr	r2, [r7, #24]
 801285c:	4413      	add	r3, r2
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	b2db      	uxtb	r3, r3
 8012862:	2b01      	cmp	r3, #1
 8012864:	d121      	bne.n	80128aa <USBD_WCID_STREAMING_FillTxDataBuffer+0x9e>
  {
    if(ch_number >= (N_IN_ENDPOINTS-1))
 8012866:	7afb      	ldrb	r3, [r7, #11]
 8012868:	2b03      	cmp	r3, #3
 801286a:	d90e      	bls.n	801288a <USBD_WCID_STREAMING_FillTxDataBuffer+0x7e>
    {
      txBuffptr[0] = ch_number;
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	7afa      	ldrb	r2, [r7, #11]
 8012870:	701a      	strb	r2, [r3, #0]
      TxBuffIdx[ch_number] = 1;
 8012872:	7afb      	ldrb	r3, [r7, #11]
 8012874:	009b      	lsls	r3, r3, #2
 8012876:	6a3a      	ldr	r2, [r7, #32]
 8012878:	4413      	add	r3, r2
 801287a:	2201      	movs	r2, #1
 801287c:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 801287e:	7afb      	ldrb	r3, [r7, #11]
 8012880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012882:	4413      	add	r3, r2
 8012884:	2200      	movs	r2, #0
 8012886:	701a      	strb	r2, [r3, #0]
 8012888:	e00a      	b.n	80128a0 <USBD_WCID_STREAMING_FillTxDataBuffer+0x94>
    }
    else
    {
      TxBuffIdx[ch_number] = 0;
 801288a:	7afb      	ldrb	r3, [r7, #11]
 801288c:	009b      	lsls	r3, r3, #2
 801288e:	6a3a      	ldr	r2, [r7, #32]
 8012890:	4413      	add	r3, r2
 8012892:	2200      	movs	r2, #0
 8012894:	601a      	str	r2, [r3, #0]
      TxBuffStatus[ch_number] = 0;
 8012896:	7afb      	ldrb	r3, [r7, #11]
 8012898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801289a:	4413      	add	r3, r2
 801289c:	2200      	movs	r2, #0
 801289e:	701a      	strb	r2, [r3, #0]
      
    }
    TxBuffReset[ch_number] = 0;
 80128a0:	7afb      	ldrb	r3, [r7, #11]
 80128a2:	69ba      	ldr	r2, [r7, #24]
 80128a4:	4413      	add	r3, r2
 80128a6:	2200      	movs	r2, #0
 80128a8:	701a      	strb	r2, [r3, #0]
  }
  
  uint32_t txBuffIdx = TxBuffIdx[ch_number];  
 80128aa:	7afb      	ldrb	r3, [r7, #11]
 80128ac:	009b      	lsls	r3, r3, #2
 80128ae:	6a3a      	ldr	r2, [r7, #32]
 80128b0:	4413      	add	r3, r2
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	633b      	str	r3, [r7, #48]	; 0x30
  
  for (i = 0; i < size; i++)
 80128b6:	2300      	movs	r3, #0
 80128b8:	637b      	str	r3, [r7, #52]	; 0x34
 80128ba:	e046      	b.n	801294a <USBD_WCID_STREAMING_FillTxDataBuffer+0x13e>
  {
    txBuffptr[txBuffIdx] = buf[i];    
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128c0:	441a      	add	r2, r3
 80128c2:	6979      	ldr	r1, [r7, #20]
 80128c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c6:	440b      	add	r3, r1
 80128c8:	7812      	ldrb	r2, [r2, #0]
 80128ca:	701a      	strb	r2, [r3, #0]
    txBuffIdx = (txBuffIdx + 1) %  (USB_DataSizePerEp[ch_number]);
 80128cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ce:	3301      	adds	r3, #1
 80128d0:	7afa      	ldrb	r2, [r7, #11]
 80128d2:	0052      	lsls	r2, r2, #1
 80128d4:	69f9      	ldr	r1, [r7, #28]
 80128d6:	440a      	add	r2, r1
 80128d8:	8812      	ldrh	r2, [r2, #0]
 80128da:	fbb3 f1f2 	udiv	r1, r3, r2
 80128de:	fb01 f202 	mul.w	r2, r1, r2
 80128e2:	1a9b      	subs	r3, r3, r2
 80128e4:	633b      	str	r3, [r7, #48]	; 0x30
    
    if(txBuffIdx == (USB_DataSizePerEp[ch_number]/2))
 80128e6:	7afb      	ldrb	r3, [r7, #11]
 80128e8:	005b      	lsls	r3, r3, #1
 80128ea:	69fa      	ldr	r2, [r7, #28]
 80128ec:	4413      	add	r3, r2
 80128ee:	881b      	ldrh	r3, [r3, #0]
 80128f0:	085b      	lsrs	r3, r3, #1
 80128f2:	b29b      	uxth	r3, r3
 80128f4:	461a      	mov	r2, r3
 80128f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f8:	4293      	cmp	r3, r2
 80128fa:	d110      	bne.n	801291e <USBD_WCID_STREAMING_FillTxDataBuffer+0x112>
    {
      TxBuffStatus[ch_number] = 1;
 80128fc:	7afb      	ldrb	r3, [r7, #11]
 80128fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012900:	4413      	add	r3, r2
 8012902:	2201      	movs	r2, #1
 8012904:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 8012906:	7afb      	ldrb	r3, [r7, #11]
 8012908:	2b03      	cmp	r3, #3
 801290a:	d91b      	bls.n	8012944 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 801290c:	697a      	ldr	r2, [r7, #20]
 801290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012910:	4413      	add	r3, r2
 8012912:	7afa      	ldrb	r2, [r7, #11]
 8012914:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 8012916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012918:	3301      	adds	r3, #1
 801291a:	633b      	str	r3, [r7, #48]	; 0x30
 801291c:	e012      	b.n	8012944 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      }
    }
    else if (txBuffIdx == 0)
 801291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012920:	2b00      	cmp	r3, #0
 8012922:	d10f      	bne.n	8012944 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
    {
      TxBuffStatus[ch_number] = 2;
 8012924:	7afb      	ldrb	r3, [r7, #11]
 8012926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012928:	4413      	add	r3, r2
 801292a:	2202      	movs	r2, #2
 801292c:	701a      	strb	r2, [r3, #0]
      if(ch_number >= (N_IN_ENDPOINTS-1))
 801292e:	7afb      	ldrb	r3, [r7, #11]
 8012930:	2b03      	cmp	r3, #3
 8012932:	d907      	bls.n	8012944 <USBD_WCID_STREAMING_FillTxDataBuffer+0x138>
      {
        txBuffptr[txBuffIdx] = ch_number;    
 8012934:	697a      	ldr	r2, [r7, #20]
 8012936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012938:	4413      	add	r3, r2
 801293a:	7afa      	ldrb	r2, [r7, #11]
 801293c:	701a      	strb	r2, [r3, #0]
        txBuffIdx = (txBuffIdx + 1); 
 801293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012940:	3301      	adds	r3, #1
 8012942:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < size; i++)
 8012944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012946:	3301      	adds	r3, #1
 8012948:	637b      	str	r3, [r7, #52]	; 0x34
 801294a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	429a      	cmp	r2, r3
 8012950:	d3b4      	bcc.n	80128bc <USBD_WCID_STREAMING_FillTxDataBuffer+0xb0>
      }
    }
  }  
  TxBuffIdx[ch_number] = txBuffIdx;  
 8012952:	7afb      	ldrb	r3, [r7, #11]
 8012954:	009b      	lsls	r3, r3, #2
 8012956:	6a3a      	ldr	r2, [r7, #32]
 8012958:	4413      	add	r3, r2
 801295a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801295c:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 801295e:	2300      	movs	r3, #0
}
 8012960:	4618      	mov	r0, r3
 8012962:	373c      	adds	r7, #60	; 0x3c
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr

0801296c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801296c:	b480      	push	{r7}
 801296e:	b083      	sub	sp, #12
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012974:	2300      	movs	r3, #0
}
 8012976:	4618      	mov	r0, r3
 8012978:	370c      	adds	r7, #12
 801297a:	46bd      	mov	sp, r7
 801297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012980:	4770      	bx	lr

08012982 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8012982:	b580      	push	{r7, lr}
 8012984:	b084      	sub	sp, #16
 8012986:	af00      	add	r7, sp, #0
 8012988:	6078      	str	r0, [r7, #4]
 801298a:	460b      	mov	r3, r1
 801298c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801298e:	2302      	movs	r3, #2
 8012990:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012998:	2b00      	cmp	r3, #0
 801299a:	d00c      	beq.n	80129b6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	78fa      	ldrb	r2, [r7, #3]
 80129a6:	4611      	mov	r1, r2
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	4798      	blx	r3
 80129ac:	4603      	mov	r3, r0
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d101      	bne.n	80129b6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80129b2:	2300      	movs	r3, #0
 80129b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80129b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3710      	adds	r7, #16
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}

080129c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	460b      	mov	r3, r1
 80129ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	78fa      	ldrb	r2, [r7, #3]
 80129d6:	4611      	mov	r1, r2
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	4798      	blx	r3

  return USBD_OK;
 80129dc:	2300      	movs	r3, #0
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3708      	adds	r7, #8
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}

080129e6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80129e6:	b580      	push	{r7, lr}
 80129e8:	b082      	sub	sp, #8
 80129ea:	af00      	add	r7, sp, #0
 80129ec:	6078      	str	r0, [r7, #4]
 80129ee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80129f6:	6839      	ldr	r1, [r7, #0]
 80129f8:	4618      	mov	r0, r3
 80129fa:	f000 ff28 	bl	801384e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2201      	movs	r2, #1
 8012a02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012a0c:	461a      	mov	r2, r3
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8012a1a:	f003 031f 	and.w	r3, r3, #31
 8012a1e:	2b02      	cmp	r3, #2
 8012a20:	d016      	beq.n	8012a50 <USBD_LL_SetupStage+0x6a>
 8012a22:	2b02      	cmp	r3, #2
 8012a24:	d81c      	bhi.n	8012a60 <USBD_LL_SetupStage+0x7a>
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d002      	beq.n	8012a30 <USBD_LL_SetupStage+0x4a>
 8012a2a:	2b01      	cmp	r3, #1
 8012a2c:	d008      	beq.n	8012a40 <USBD_LL_SetupStage+0x5a>
 8012a2e:	e017      	b.n	8012a60 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012a36:	4619      	mov	r1, r3
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f000 fa09 	bl	8012e50 <USBD_StdDevReq>
      break;
 8012a3e:	e01a      	b.n	8012a76 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012a46:	4619      	mov	r1, r3
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f000 fa6b 	bl	8012f24 <USBD_StdItfReq>
      break;
 8012a4e:	e012      	b.n	8012a76 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012a56:	4619      	mov	r1, r3
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f000 faab 	bl	8012fb4 <USBD_StdEPReq>
      break;
 8012a5e:	e00a      	b.n	8012a76 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8012a66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012a6a:	b2db      	uxtb	r3, r3
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f7f2 fbf2 	bl	8005258 <USBD_LL_StallEP>
      break;
 8012a74:	bf00      	nop
  }

  return USBD_OK;
 8012a76:	2300      	movs	r3, #0
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3708      	adds	r7, #8
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b086      	sub	sp, #24
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	460b      	mov	r3, r1
 8012a8a:	607a      	str	r2, [r7, #4]
 8012a8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012a8e:	7afb      	ldrb	r3, [r7, #11]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d14b      	bne.n	8012b2c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012a9a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012aa2:	2b03      	cmp	r3, #3
 8012aa4:	d134      	bne.n	8012b10 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	68da      	ldr	r2, [r3, #12]
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	691b      	ldr	r3, [r3, #16]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d919      	bls.n	8012ae6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	68da      	ldr	r2, [r3, #12]
 8012ab6:	697b      	ldr	r3, [r7, #20]
 8012ab8:	691b      	ldr	r3, [r3, #16]
 8012aba:	1ad2      	subs	r2, r2, r3
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	68da      	ldr	r2, [r3, #12]
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	d203      	bcs.n	8012ad4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8012ad0:	b29b      	uxth	r3, r3
 8012ad2:	e002      	b.n	8012ada <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	461a      	mov	r2, r3
 8012adc:	6879      	ldr	r1, [r7, #4]
 8012ade:	68f8      	ldr	r0, [r7, #12]
 8012ae0:	f000 ff31 	bl	8013946 <USBD_CtlContinueRx>
 8012ae4:	e038      	b.n	8012b58 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012aec:	691b      	ldr	r3, [r3, #16]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d00a      	beq.n	8012b08 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8012af8:	2b03      	cmp	r3, #3
 8012afa:	d105      	bne.n	8012b08 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b02:	691b      	ldr	r3, [r3, #16]
 8012b04:	68f8      	ldr	r0, [r7, #12]
 8012b06:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8012b08:	68f8      	ldr	r0, [r7, #12]
 8012b0a:	f000 ff2e 	bl	801396a <USBD_CtlSendStatus>
 8012b0e:	e023      	b.n	8012b58 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012b16:	2b05      	cmp	r3, #5
 8012b18:	d11e      	bne.n	8012b58 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8012b22:	2100      	movs	r1, #0
 8012b24:	68f8      	ldr	r0, [r7, #12]
 8012b26:	f7f2 fb97 	bl	8005258 <USBD_LL_StallEP>
 8012b2a:	e015      	b.n	8012b58 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b32:	699b      	ldr	r3, [r3, #24]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d00d      	beq.n	8012b54 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8012b3e:	2b03      	cmp	r3, #3
 8012b40:	d108      	bne.n	8012b54 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b48:	699b      	ldr	r3, [r3, #24]
 8012b4a:	7afa      	ldrb	r2, [r7, #11]
 8012b4c:	4611      	mov	r1, r2
 8012b4e:	68f8      	ldr	r0, [r7, #12]
 8012b50:	4798      	blx	r3
 8012b52:	e001      	b.n	8012b58 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012b54:	2302      	movs	r3, #2
 8012b56:	e000      	b.n	8012b5a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8012b58:	2300      	movs	r3, #0
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3718      	adds	r7, #24
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}

08012b62 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012b62:	b580      	push	{r7, lr}
 8012b64:	b086      	sub	sp, #24
 8012b66:	af00      	add	r7, sp, #0
 8012b68:	60f8      	str	r0, [r7, #12]
 8012b6a:	460b      	mov	r3, r1
 8012b6c:	607a      	str	r2, [r7, #4]
 8012b6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8012b70:	7afb      	ldrb	r3, [r7, #11]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d17f      	bne.n	8012c76 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	3314      	adds	r3, #20
 8012b7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012b82:	2b02      	cmp	r3, #2
 8012b84:	d15c      	bne.n	8012c40 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	68da      	ldr	r2, [r3, #12]
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	691b      	ldr	r3, [r3, #16]
 8012b8e:	429a      	cmp	r2, r3
 8012b90:	d915      	bls.n	8012bbe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	68da      	ldr	r2, [r3, #12]
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	691b      	ldr	r3, [r3, #16]
 8012b9a:	1ad2      	subs	r2, r2, r3
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	68db      	ldr	r3, [r3, #12]
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	6879      	ldr	r1, [r7, #4]
 8012baa:	68f8      	ldr	r0, [r7, #12]
 8012bac:	f000 feb9 	bl	8013922 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	2100      	movs	r1, #0
 8012bb6:	68f8      	ldr	r0, [r7, #12]
 8012bb8:	f7f2 fbca 	bl	8005350 <USBD_LL_PrepareReceive>
 8012bbc:	e04e      	b.n	8012c5c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	689b      	ldr	r3, [r3, #8]
 8012bc2:	697a      	ldr	r2, [r7, #20]
 8012bc4:	6912      	ldr	r2, [r2, #16]
 8012bc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8012bca:	fb01 f202 	mul.w	r2, r1, r2
 8012bce:	1a9b      	subs	r3, r3, r2
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d11c      	bne.n	8012c0e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	689a      	ldr	r2, [r3, #8]
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d316      	bcc.n	8012c0e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	689a      	ldr	r2, [r3, #8]
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d20f      	bcs.n	8012c0e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012bee:	2200      	movs	r2, #0
 8012bf0:	2100      	movs	r1, #0
 8012bf2:	68f8      	ldr	r0, [r7, #12]
 8012bf4:	f000 fe95 	bl	8013922 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c00:	2300      	movs	r3, #0
 8012c02:	2200      	movs	r2, #0
 8012c04:	2100      	movs	r1, #0
 8012c06:	68f8      	ldr	r0, [r7, #12]
 8012c08:	f7f2 fba2 	bl	8005350 <USBD_LL_PrepareReceive>
 8012c0c:	e026      	b.n	8012c5c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c14:	68db      	ldr	r3, [r3, #12]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d00a      	beq.n	8012c30 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8012c20:	2b03      	cmp	r3, #3
 8012c22:	d105      	bne.n	8012c30 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	68f8      	ldr	r0, [r7, #12]
 8012c2e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8012c30:	2180      	movs	r1, #128	; 0x80
 8012c32:	68f8      	ldr	r0, [r7, #12]
 8012c34:	f7f2 fb10 	bl	8005258 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8012c38:	68f8      	ldr	r0, [r7, #12]
 8012c3a:	f000 fea9 	bl	8013990 <USBD_CtlReceiveStatus>
 8012c3e:	e00d      	b.n	8012c5c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012c46:	2b04      	cmp	r3, #4
 8012c48:	d004      	beq.n	8012c54 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d103      	bne.n	8012c5c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8012c54:	2180      	movs	r1, #128	; 0x80
 8012c56:	68f8      	ldr	r0, [r7, #12]
 8012c58:	f7f2 fafe 	bl	8005258 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012c62:	2b01      	cmp	r3, #1
 8012c64:	d11d      	bne.n	8012ca2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8012c66:	68f8      	ldr	r0, [r7, #12]
 8012c68:	f7ff fe80 	bl	801296c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	2200      	movs	r2, #0
 8012c70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012c74:	e015      	b.n	8012ca2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c7c:	695b      	ldr	r3, [r3, #20]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d00d      	beq.n	8012c9e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8012c88:	2b03      	cmp	r3, #3
 8012c8a:	d108      	bne.n	8012c9e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c92:	695b      	ldr	r3, [r3, #20]
 8012c94:	7afa      	ldrb	r2, [r7, #11]
 8012c96:	4611      	mov	r1, r2
 8012c98:	68f8      	ldr	r0, [r7, #12]
 8012c9a:	4798      	blx	r3
 8012c9c:	e001      	b.n	8012ca2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012c9e:	2302      	movs	r3, #2
 8012ca0:	e000      	b.n	8012ca4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8012ca2:	2300      	movs	r3, #0
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3718      	adds	r7, #24
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}

08012cac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b082      	sub	sp, #8
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012cb4:	2340      	movs	r3, #64	; 0x40
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	2100      	movs	r1, #0
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f7f2 fab2 	bl	8005224 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	2240      	movs	r2, #64	; 0x40
 8012ccc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012cd0:	2340      	movs	r3, #64	; 0x40
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	2180      	movs	r1, #128	; 0x80
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f7f2 faa4 	bl	8005224 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2201      	movs	r2, #1
 8012ce0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2240      	movs	r2, #64	; 0x40
 8012ce6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2201      	movs	r2, #1
 8012cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2200      	movs	r2, #0
 8012d02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d009      	beq.n	8012d24 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d16:	685b      	ldr	r3, [r3, #4]
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	6852      	ldr	r2, [r2, #4]
 8012d1c:	b2d2      	uxtb	r2, r2
 8012d1e:	4611      	mov	r1, r2
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	4798      	blx	r3
  }

  return USBD_OK;
 8012d24:	2300      	movs	r3, #0
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3708      	adds	r7, #8
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}

08012d2e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012d2e:	b480      	push	{r7}
 8012d30:	b083      	sub	sp, #12
 8012d32:	af00      	add	r7, sp, #0
 8012d34:	6078      	str	r0, [r7, #4]
 8012d36:	460b      	mov	r3, r1
 8012d38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	78fa      	ldrb	r2, [r7, #3]
 8012d3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012d40:	2300      	movs	r3, #0
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	370c      	adds	r7, #12
 8012d46:	46bd      	mov	sp, r7
 8012d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4c:	4770      	bx	lr

08012d4e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012d4e:	b480      	push	{r7}
 8012d50:	b083      	sub	sp, #12
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2204      	movs	r2, #4
 8012d66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012d6a:	2300      	movs	r3, #0
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	370c      	adds	r7, #12
 8012d70:	46bd      	mov	sp, r7
 8012d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d76:	4770      	bx	lr

08012d78 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b083      	sub	sp, #12
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d86:	2b04      	cmp	r3, #4
 8012d88:	d105      	bne.n	8012d96 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012d96:	2300      	movs	r3, #0
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	370c      	adds	r7, #12
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da2:	4770      	bx	lr

08012da4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b082      	sub	sp, #8
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012db2:	2b03      	cmp	r3, #3
 8012db4:	d10b      	bne.n	8012dce <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012dbc:	69db      	ldr	r3, [r3, #28]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d005      	beq.n	8012dce <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012dc8:	69db      	ldr	r3, [r3, #28]
 8012dca:	6878      	ldr	r0, [r7, #4]
 8012dcc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012dce:	2300      	movs	r3, #0
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}

08012dd8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012dd8:	b480      	push	{r7}
 8012dda:	b083      	sub	sp, #12
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	460b      	mov	r3, r1
 8012de2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8012de4:	2300      	movs	r3, #0
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	370c      	adds	r7, #12
 8012dea:	46bd      	mov	sp, r7
 8012dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df0:	4770      	bx	lr

08012df2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012df2:	b480      	push	{r7}
 8012df4:	b083      	sub	sp, #12
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	6078      	str	r0, [r7, #4]
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8012dfe:	2300      	movs	r3, #0
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	370c      	adds	r7, #12
 8012e04:	46bd      	mov	sp, r7
 8012e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0a:	4770      	bx	lr

08012e0c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b083      	sub	sp, #12
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012e14:	2300      	movs	r3, #0
}
 8012e16:	4618      	mov	r0, r3
 8012e18:	370c      	adds	r7, #12
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e20:	4770      	bx	lr

08012e22 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012e22:	b580      	push	{r7, lr}
 8012e24:	b082      	sub	sp, #8
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2201      	movs	r2, #1
 8012e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e38:	685b      	ldr	r3, [r3, #4]
 8012e3a:	687a      	ldr	r2, [r7, #4]
 8012e3c:	6852      	ldr	r2, [r2, #4]
 8012e3e:	b2d2      	uxtb	r2, r2
 8012e40:	4611      	mov	r1, r2
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	4798      	blx	r3

  return USBD_OK;
 8012e46:	2300      	movs	r3, #0
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3708      	adds	r7, #8
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}

08012e50 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b084      	sub	sp, #16
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012e66:	2b40      	cmp	r3, #64	; 0x40
 8012e68:	d005      	beq.n	8012e76 <USBD_StdDevReq+0x26>
 8012e6a:	2b40      	cmp	r3, #64	; 0x40
 8012e6c:	d84f      	bhi.n	8012f0e <USBD_StdDevReq+0xbe>
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d009      	beq.n	8012e86 <USBD_StdDevReq+0x36>
 8012e72:	2b20      	cmp	r3, #32
 8012e74:	d14b      	bne.n	8012f0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012e7c:	689b      	ldr	r3, [r3, #8]
 8012e7e:	6839      	ldr	r1, [r7, #0]
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	4798      	blx	r3
      break;
 8012e84:	e048      	b.n	8012f18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	785b      	ldrb	r3, [r3, #1]
 8012e8a:	2b09      	cmp	r3, #9
 8012e8c:	d839      	bhi.n	8012f02 <USBD_StdDevReq+0xb2>
 8012e8e:	a201      	add	r2, pc, #4	; (adr r2, 8012e94 <USBD_StdDevReq+0x44>)
 8012e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e94:	08012ee5 	.word	0x08012ee5
 8012e98:	08012ef9 	.word	0x08012ef9
 8012e9c:	08012f03 	.word	0x08012f03
 8012ea0:	08012eef 	.word	0x08012eef
 8012ea4:	08012f03 	.word	0x08012f03
 8012ea8:	08012ec7 	.word	0x08012ec7
 8012eac:	08012ebd 	.word	0x08012ebd
 8012eb0:	08012f03 	.word	0x08012f03
 8012eb4:	08012edb 	.word	0x08012edb
 8012eb8:	08012ed1 	.word	0x08012ed1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012ebc:	6839      	ldr	r1, [r7, #0]
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f000 f9dc 	bl	801327c <USBD_GetDescriptor>
          break;
 8012ec4:	e022      	b.n	8012f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012ec6:	6839      	ldr	r1, [r7, #0]
 8012ec8:	6878      	ldr	r0, [r7, #4]
 8012eca:	f000 fb51 	bl	8013570 <USBD_SetAddress>
          break;
 8012ece:	e01d      	b.n	8012f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8012ed0:	6839      	ldr	r1, [r7, #0]
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f000 fb90 	bl	80135f8 <USBD_SetConfig>
          break;
 8012ed8:	e018      	b.n	8012f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012eda:	6839      	ldr	r1, [r7, #0]
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	f000 fc19 	bl	8013714 <USBD_GetConfig>
          break;
 8012ee2:	e013      	b.n	8012f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012ee4:	6839      	ldr	r1, [r7, #0]
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	f000 fc49 	bl	801377e <USBD_GetStatus>
          break;
 8012eec:	e00e      	b.n	8012f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012eee:	6839      	ldr	r1, [r7, #0]
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f000 fc77 	bl	80137e4 <USBD_SetFeature>
          break;
 8012ef6:	e009      	b.n	8012f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012ef8:	6839      	ldr	r1, [r7, #0]
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f000 fc86 	bl	801380c <USBD_ClrFeature>
          break;
 8012f00:	e004      	b.n	8012f0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8012f02:	6839      	ldr	r1, [r7, #0]
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f000 fcdf 	bl	80138c8 <USBD_CtlError>
          break;
 8012f0a:	bf00      	nop
      }
      break;
 8012f0c:	e004      	b.n	8012f18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8012f0e:	6839      	ldr	r1, [r7, #0]
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f000 fcd9 	bl	80138c8 <USBD_CtlError>
      break;
 8012f16:	bf00      	nop
  }

  return ret;
 8012f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3710      	adds	r7, #16
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	bf00      	nop

08012f24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b084      	sub	sp, #16
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012f3a:	2b40      	cmp	r3, #64	; 0x40
 8012f3c:	d005      	beq.n	8012f4a <USBD_StdItfReq+0x26>
 8012f3e:	2b40      	cmp	r3, #64	; 0x40
 8012f40:	d82e      	bhi.n	8012fa0 <USBD_StdItfReq+0x7c>
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d001      	beq.n	8012f4a <USBD_StdItfReq+0x26>
 8012f46:	2b20      	cmp	r3, #32
 8012f48:	d12a      	bne.n	8012fa0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f50:	3b01      	subs	r3, #1
 8012f52:	2b02      	cmp	r3, #2
 8012f54:	d81d      	bhi.n	8012f92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	889b      	ldrh	r3, [r3, #4]
 8012f5a:	b2db      	uxtb	r3, r3
 8012f5c:	2b01      	cmp	r3, #1
 8012f5e:	d813      	bhi.n	8012f88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012f66:	689b      	ldr	r3, [r3, #8]
 8012f68:	6839      	ldr	r1, [r7, #0]
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	4798      	blx	r3
 8012f6e:	4603      	mov	r3, r0
 8012f70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	88db      	ldrh	r3, [r3, #6]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d110      	bne.n	8012f9c <USBD_StdItfReq+0x78>
 8012f7a:	7bfb      	ldrb	r3, [r7, #15]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d10d      	bne.n	8012f9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f000 fcf2 	bl	801396a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012f86:	e009      	b.n	8012f9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8012f88:	6839      	ldr	r1, [r7, #0]
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f000 fc9c 	bl	80138c8 <USBD_CtlError>
          break;
 8012f90:	e004      	b.n	8012f9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8012f92:	6839      	ldr	r1, [r7, #0]
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f000 fc97 	bl	80138c8 <USBD_CtlError>
          break;
 8012f9a:	e000      	b.n	8012f9e <USBD_StdItfReq+0x7a>
          break;
 8012f9c:	bf00      	nop
      }
      break;
 8012f9e:	e004      	b.n	8012faa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8012fa0:	6839      	ldr	r1, [r7, #0]
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f000 fc90 	bl	80138c8 <USBD_CtlError>
      break;
 8012fa8:	bf00      	nop
  }

  return USBD_OK;
 8012faa:	2300      	movs	r3, #0
}
 8012fac:	4618      	mov	r0, r3
 8012fae:	3710      	adds	r7, #16
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b084      	sub	sp, #16
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	889b      	ldrh	r3, [r3, #4]
 8012fc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	781b      	ldrb	r3, [r3, #0]
 8012fcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012fd0:	2b40      	cmp	r3, #64	; 0x40
 8012fd2:	d007      	beq.n	8012fe4 <USBD_StdEPReq+0x30>
 8012fd4:	2b40      	cmp	r3, #64	; 0x40
 8012fd6:	f200 8146 	bhi.w	8013266 <USBD_StdEPReq+0x2b2>
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d00a      	beq.n	8012ff4 <USBD_StdEPReq+0x40>
 8012fde:	2b20      	cmp	r3, #32
 8012fe0:	f040 8141 	bne.w	8013266 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012fea:	689b      	ldr	r3, [r3, #8]
 8012fec:	6839      	ldr	r1, [r7, #0]
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	4798      	blx	r3
      break;
 8012ff2:	e13d      	b.n	8013270 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012ffc:	2b20      	cmp	r3, #32
 8012ffe:	d10a      	bne.n	8013016 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013006:	689b      	ldr	r3, [r3, #8]
 8013008:	6839      	ldr	r1, [r7, #0]
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	4798      	blx	r3
 801300e:	4603      	mov	r3, r0
 8013010:	73fb      	strb	r3, [r7, #15]

        return ret;
 8013012:	7bfb      	ldrb	r3, [r7, #15]
 8013014:	e12d      	b.n	8013272 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	785b      	ldrb	r3, [r3, #1]
 801301a:	2b03      	cmp	r3, #3
 801301c:	d007      	beq.n	801302e <USBD_StdEPReq+0x7a>
 801301e:	2b03      	cmp	r3, #3
 8013020:	f300 811b 	bgt.w	801325a <USBD_StdEPReq+0x2a6>
 8013024:	2b00      	cmp	r3, #0
 8013026:	d072      	beq.n	801310e <USBD_StdEPReq+0x15a>
 8013028:	2b01      	cmp	r3, #1
 801302a:	d03a      	beq.n	80130a2 <USBD_StdEPReq+0xee>
 801302c:	e115      	b.n	801325a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013034:	2b02      	cmp	r3, #2
 8013036:	d002      	beq.n	801303e <USBD_StdEPReq+0x8a>
 8013038:	2b03      	cmp	r3, #3
 801303a:	d015      	beq.n	8013068 <USBD_StdEPReq+0xb4>
 801303c:	e02b      	b.n	8013096 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801303e:	7bbb      	ldrb	r3, [r7, #14]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d00c      	beq.n	801305e <USBD_StdEPReq+0xaa>
 8013044:	7bbb      	ldrb	r3, [r7, #14]
 8013046:	2b80      	cmp	r3, #128	; 0x80
 8013048:	d009      	beq.n	801305e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801304a:	7bbb      	ldrb	r3, [r7, #14]
 801304c:	4619      	mov	r1, r3
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f7f2 f902 	bl	8005258 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013054:	2180      	movs	r1, #128	; 0x80
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f7f2 f8fe 	bl	8005258 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801305c:	e020      	b.n	80130a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 801305e:	6839      	ldr	r1, [r7, #0]
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f000 fc31 	bl	80138c8 <USBD_CtlError>
              break;
 8013066:	e01b      	b.n	80130a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	885b      	ldrh	r3, [r3, #2]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d10e      	bne.n	801308e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8013070:	7bbb      	ldrb	r3, [r7, #14]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d00b      	beq.n	801308e <USBD_StdEPReq+0xda>
 8013076:	7bbb      	ldrb	r3, [r7, #14]
 8013078:	2b80      	cmp	r3, #128	; 0x80
 801307a:	d008      	beq.n	801308e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	88db      	ldrh	r3, [r3, #6]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d104      	bne.n	801308e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8013084:	7bbb      	ldrb	r3, [r7, #14]
 8013086:	4619      	mov	r1, r3
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f7f2 f8e5 	bl	8005258 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f000 fc6b 	bl	801396a <USBD_CtlSendStatus>

              break;
 8013094:	e004      	b.n	80130a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8013096:	6839      	ldr	r1, [r7, #0]
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f000 fc15 	bl	80138c8 <USBD_CtlError>
              break;
 801309e:	bf00      	nop
          }
          break;
 80130a0:	e0e0      	b.n	8013264 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130a8:	2b02      	cmp	r3, #2
 80130aa:	d002      	beq.n	80130b2 <USBD_StdEPReq+0xfe>
 80130ac:	2b03      	cmp	r3, #3
 80130ae:	d015      	beq.n	80130dc <USBD_StdEPReq+0x128>
 80130b0:	e026      	b.n	8013100 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80130b2:	7bbb      	ldrb	r3, [r7, #14]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d00c      	beq.n	80130d2 <USBD_StdEPReq+0x11e>
 80130b8:	7bbb      	ldrb	r3, [r7, #14]
 80130ba:	2b80      	cmp	r3, #128	; 0x80
 80130bc:	d009      	beq.n	80130d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80130be:	7bbb      	ldrb	r3, [r7, #14]
 80130c0:	4619      	mov	r1, r3
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f7f2 f8c8 	bl	8005258 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80130c8:	2180      	movs	r1, #128	; 0x80
 80130ca:	6878      	ldr	r0, [r7, #4]
 80130cc:	f7f2 f8c4 	bl	8005258 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80130d0:	e01c      	b.n	801310c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80130d2:	6839      	ldr	r1, [r7, #0]
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f000 fbf7 	bl	80138c8 <USBD_CtlError>
              break;
 80130da:	e017      	b.n	801310c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	885b      	ldrh	r3, [r3, #2]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d112      	bne.n	801310a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80130e4:	7bbb      	ldrb	r3, [r7, #14]
 80130e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d004      	beq.n	80130f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80130ee:	7bbb      	ldrb	r3, [r7, #14]
 80130f0:	4619      	mov	r1, r3
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f7f2 f8c3 	bl	800527e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f000 fc36 	bl	801396a <USBD_CtlSendStatus>
              }
              break;
 80130fe:	e004      	b.n	801310a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8013100:	6839      	ldr	r1, [r7, #0]
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f000 fbe0 	bl	80138c8 <USBD_CtlError>
              break;
 8013108:	e000      	b.n	801310c <USBD_StdEPReq+0x158>
              break;
 801310a:	bf00      	nop
          }
          break;
 801310c:	e0aa      	b.n	8013264 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013114:	2b02      	cmp	r3, #2
 8013116:	d002      	beq.n	801311e <USBD_StdEPReq+0x16a>
 8013118:	2b03      	cmp	r3, #3
 801311a:	d032      	beq.n	8013182 <USBD_StdEPReq+0x1ce>
 801311c:	e097      	b.n	801324e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801311e:	7bbb      	ldrb	r3, [r7, #14]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d007      	beq.n	8013134 <USBD_StdEPReq+0x180>
 8013124:	7bbb      	ldrb	r3, [r7, #14]
 8013126:	2b80      	cmp	r3, #128	; 0x80
 8013128:	d004      	beq.n	8013134 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 801312a:	6839      	ldr	r1, [r7, #0]
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f000 fbcb 	bl	80138c8 <USBD_CtlError>
                break;
 8013132:	e091      	b.n	8013258 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013138:	2b00      	cmp	r3, #0
 801313a:	da0b      	bge.n	8013154 <USBD_StdEPReq+0x1a0>
 801313c:	7bbb      	ldrb	r3, [r7, #14]
 801313e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013142:	4613      	mov	r3, r2
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	4413      	add	r3, r2
 8013148:	009b      	lsls	r3, r3, #2
 801314a:	3310      	adds	r3, #16
 801314c:	687a      	ldr	r2, [r7, #4]
 801314e:	4413      	add	r3, r2
 8013150:	3304      	adds	r3, #4
 8013152:	e00b      	b.n	801316c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013154:	7bbb      	ldrb	r3, [r7, #14]
 8013156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801315a:	4613      	mov	r3, r2
 801315c:	009b      	lsls	r3, r3, #2
 801315e:	4413      	add	r3, r2
 8013160:	009b      	lsls	r3, r3, #2
 8013162:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013166:	687a      	ldr	r2, [r7, #4]
 8013168:	4413      	add	r3, r2
 801316a:	3304      	adds	r3, #4
 801316c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	2200      	movs	r2, #0
 8013172:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	2202      	movs	r2, #2
 8013178:	4619      	mov	r1, r3
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f000 fbb5 	bl	80138ea <USBD_CtlSendData>
              break;
 8013180:	e06a      	b.n	8013258 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013186:	2b00      	cmp	r3, #0
 8013188:	da11      	bge.n	80131ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801318a:	7bbb      	ldrb	r3, [r7, #14]
 801318c:	f003 020f 	and.w	r2, r3, #15
 8013190:	6879      	ldr	r1, [r7, #4]
 8013192:	4613      	mov	r3, r2
 8013194:	009b      	lsls	r3, r3, #2
 8013196:	4413      	add	r3, r2
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	440b      	add	r3, r1
 801319c:	3318      	adds	r3, #24
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d117      	bne.n	80131d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80131a4:	6839      	ldr	r1, [r7, #0]
 80131a6:	6878      	ldr	r0, [r7, #4]
 80131a8:	f000 fb8e 	bl	80138c8 <USBD_CtlError>
                  break;
 80131ac:	e054      	b.n	8013258 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80131ae:	7bbb      	ldrb	r3, [r7, #14]
 80131b0:	f003 020f 	and.w	r2, r3, #15
 80131b4:	6879      	ldr	r1, [r7, #4]
 80131b6:	4613      	mov	r3, r2
 80131b8:	009b      	lsls	r3, r3, #2
 80131ba:	4413      	add	r3, r2
 80131bc:	009b      	lsls	r3, r3, #2
 80131be:	440b      	add	r3, r1
 80131c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d104      	bne.n	80131d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80131ca:	6839      	ldr	r1, [r7, #0]
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	f000 fb7b 	bl	80138c8 <USBD_CtlError>
                  break;
 80131d2:	e041      	b.n	8013258 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80131d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	da0b      	bge.n	80131f4 <USBD_StdEPReq+0x240>
 80131dc:	7bbb      	ldrb	r3, [r7, #14]
 80131de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80131e2:	4613      	mov	r3, r2
 80131e4:	009b      	lsls	r3, r3, #2
 80131e6:	4413      	add	r3, r2
 80131e8:	009b      	lsls	r3, r3, #2
 80131ea:	3310      	adds	r3, #16
 80131ec:	687a      	ldr	r2, [r7, #4]
 80131ee:	4413      	add	r3, r2
 80131f0:	3304      	adds	r3, #4
 80131f2:	e00b      	b.n	801320c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80131f4:	7bbb      	ldrb	r3, [r7, #14]
 80131f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80131fa:	4613      	mov	r3, r2
 80131fc:	009b      	lsls	r3, r3, #2
 80131fe:	4413      	add	r3, r2
 8013200:	009b      	lsls	r3, r3, #2
 8013202:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013206:	687a      	ldr	r2, [r7, #4]
 8013208:	4413      	add	r3, r2
 801320a:	3304      	adds	r3, #4
 801320c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801320e:	7bbb      	ldrb	r3, [r7, #14]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d002      	beq.n	801321a <USBD_StdEPReq+0x266>
 8013214:	7bbb      	ldrb	r3, [r7, #14]
 8013216:	2b80      	cmp	r3, #128	; 0x80
 8013218:	d103      	bne.n	8013222 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	2200      	movs	r2, #0
 801321e:	601a      	str	r2, [r3, #0]
 8013220:	e00e      	b.n	8013240 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8013222:	7bbb      	ldrb	r3, [r7, #14]
 8013224:	4619      	mov	r1, r3
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f7f2 f83c 	bl	80052a4 <USBD_LL_IsStallEP>
 801322c:	4603      	mov	r3, r0
 801322e:	2b00      	cmp	r3, #0
 8013230:	d003      	beq.n	801323a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	2201      	movs	r2, #1
 8013236:	601a      	str	r2, [r3, #0]
 8013238:	e002      	b.n	8013240 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	2200      	movs	r2, #0
 801323e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	2202      	movs	r2, #2
 8013244:	4619      	mov	r1, r3
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f000 fb4f 	bl	80138ea <USBD_CtlSendData>
              break;
 801324c:	e004      	b.n	8013258 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 801324e:	6839      	ldr	r1, [r7, #0]
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f000 fb39 	bl	80138c8 <USBD_CtlError>
              break;
 8013256:	bf00      	nop
          }
          break;
 8013258:	e004      	b.n	8013264 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 801325a:	6839      	ldr	r1, [r7, #0]
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f000 fb33 	bl	80138c8 <USBD_CtlError>
          break;
 8013262:	bf00      	nop
      }
      break;
 8013264:	e004      	b.n	8013270 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8013266:	6839      	ldr	r1, [r7, #0]
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	f000 fb2d 	bl	80138c8 <USBD_CtlError>
      break;
 801326e:	bf00      	nop
  }

  return ret;
 8013270:	7bfb      	ldrb	r3, [r7, #15]
}
 8013272:	4618      	mov	r0, r3
 8013274:	3710      	adds	r7, #16
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
	...

0801327c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b084      	sub	sp, #16
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013286:	2300      	movs	r3, #0
 8013288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801328a:	2300      	movs	r3, #0
 801328c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801328e:	2300      	movs	r3, #0
 8013290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	885b      	ldrh	r3, [r3, #2]
 8013296:	0a1b      	lsrs	r3, r3, #8
 8013298:	b29b      	uxth	r3, r3
 801329a:	3b01      	subs	r3, #1
 801329c:	2b06      	cmp	r3, #6
 801329e:	f200 813b 	bhi.w	8013518 <USBD_GetDescriptor+0x29c>
 80132a2:	a201      	add	r2, pc, #4	; (adr r2, 80132a8 <USBD_GetDescriptor+0x2c>)
 80132a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132a8:	080132c5 	.word	0x080132c5
 80132ac:	080132dd 	.word	0x080132dd
 80132b0:	0801331d 	.word	0x0801331d
 80132b4:	08013519 	.word	0x08013519
 80132b8:	08013519 	.word	0x08013519
 80132bc:	080134b9 	.word	0x080134b9
 80132c0:	080134e5 	.word	0x080134e5
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	7c12      	ldrb	r2, [r2, #16]
 80132d0:	f107 0108 	add.w	r1, r7, #8
 80132d4:	4610      	mov	r0, r2
 80132d6:	4798      	blx	r3
 80132d8:	60f8      	str	r0, [r7, #12]
      break;
 80132da:	e125      	b.n	8013528 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	7c1b      	ldrb	r3, [r3, #16]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d10d      	bne.n	8013300 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80132ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132ec:	f107 0208 	add.w	r2, r7, #8
 80132f0:	4610      	mov	r0, r2
 80132f2:	4798      	blx	r3
 80132f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	3301      	adds	r3, #1
 80132fa:	2202      	movs	r2, #2
 80132fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80132fe:	e113      	b.n	8013528 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013308:	f107 0208 	add.w	r2, r7, #8
 801330c:	4610      	mov	r0, r2
 801330e:	4798      	blx	r3
 8013310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	3301      	adds	r3, #1
 8013316:	2202      	movs	r2, #2
 8013318:	701a      	strb	r2, [r3, #0]
      break;
 801331a:	e105      	b.n	8013528 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	885b      	ldrh	r3, [r3, #2]
 8013320:	b2db      	uxtb	r3, r3
 8013322:	2b05      	cmp	r3, #5
 8013324:	f200 80ac 	bhi.w	8013480 <USBD_GetDescriptor+0x204>
 8013328:	a201      	add	r2, pc, #4	; (adr r2, 8013330 <USBD_GetDescriptor+0xb4>)
 801332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801332e:	bf00      	nop
 8013330:	08013349 	.word	0x08013349
 8013334:	0801337d 	.word	0x0801337d
 8013338:	080133b1 	.word	0x080133b1
 801333c:	080133e5 	.word	0x080133e5
 8013340:	08013419 	.word	0x08013419
 8013344:	0801344d 	.word	0x0801344d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d00b      	beq.n	801336c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801335a:	685b      	ldr	r3, [r3, #4]
 801335c:	687a      	ldr	r2, [r7, #4]
 801335e:	7c12      	ldrb	r2, [r2, #16]
 8013360:	f107 0108 	add.w	r1, r7, #8
 8013364:	4610      	mov	r0, r2
 8013366:	4798      	blx	r3
 8013368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801336a:	e0a4      	b.n	80134b6 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 801336c:	6839      	ldr	r1, [r7, #0]
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f000 faaa 	bl	80138c8 <USBD_CtlError>
            err++;
 8013374:	7afb      	ldrb	r3, [r7, #11]
 8013376:	3301      	adds	r3, #1
 8013378:	72fb      	strb	r3, [r7, #11]
          break;
 801337a:	e09c      	b.n	80134b6 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013382:	689b      	ldr	r3, [r3, #8]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d00b      	beq.n	80133a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801338e:	689b      	ldr	r3, [r3, #8]
 8013390:	687a      	ldr	r2, [r7, #4]
 8013392:	7c12      	ldrb	r2, [r2, #16]
 8013394:	f107 0108 	add.w	r1, r7, #8
 8013398:	4610      	mov	r0, r2
 801339a:	4798      	blx	r3
 801339c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801339e:	e08a      	b.n	80134b6 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80133a0:	6839      	ldr	r1, [r7, #0]
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f000 fa90 	bl	80138c8 <USBD_CtlError>
            err++;
 80133a8:	7afb      	ldrb	r3, [r7, #11]
 80133aa:	3301      	adds	r3, #1
 80133ac:	72fb      	strb	r3, [r7, #11]
          break;
 80133ae:	e082      	b.n	80134b6 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80133b6:	68db      	ldr	r3, [r3, #12]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d00b      	beq.n	80133d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80133c2:	68db      	ldr	r3, [r3, #12]
 80133c4:	687a      	ldr	r2, [r7, #4]
 80133c6:	7c12      	ldrb	r2, [r2, #16]
 80133c8:	f107 0108 	add.w	r1, r7, #8
 80133cc:	4610      	mov	r0, r2
 80133ce:	4798      	blx	r3
 80133d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80133d2:	e070      	b.n	80134b6 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80133d4:	6839      	ldr	r1, [r7, #0]
 80133d6:	6878      	ldr	r0, [r7, #4]
 80133d8:	f000 fa76 	bl	80138c8 <USBD_CtlError>
            err++;
 80133dc:	7afb      	ldrb	r3, [r7, #11]
 80133de:	3301      	adds	r3, #1
 80133e0:	72fb      	strb	r3, [r7, #11]
          break;
 80133e2:	e068      	b.n	80134b6 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80133ea:	691b      	ldr	r3, [r3, #16]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d00b      	beq.n	8013408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80133f6:	691b      	ldr	r3, [r3, #16]
 80133f8:	687a      	ldr	r2, [r7, #4]
 80133fa:	7c12      	ldrb	r2, [r2, #16]
 80133fc:	f107 0108 	add.w	r1, r7, #8
 8013400:	4610      	mov	r0, r2
 8013402:	4798      	blx	r3
 8013404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013406:	e056      	b.n	80134b6 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013408:	6839      	ldr	r1, [r7, #0]
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f000 fa5c 	bl	80138c8 <USBD_CtlError>
            err++;
 8013410:	7afb      	ldrb	r3, [r7, #11]
 8013412:	3301      	adds	r3, #1
 8013414:	72fb      	strb	r3, [r7, #11]
          break;
 8013416:	e04e      	b.n	80134b6 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801341e:	695b      	ldr	r3, [r3, #20]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d00b      	beq.n	801343c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801342a:	695b      	ldr	r3, [r3, #20]
 801342c:	687a      	ldr	r2, [r7, #4]
 801342e:	7c12      	ldrb	r2, [r2, #16]
 8013430:	f107 0108 	add.w	r1, r7, #8
 8013434:	4610      	mov	r0, r2
 8013436:	4798      	blx	r3
 8013438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801343a:	e03c      	b.n	80134b6 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 801343c:	6839      	ldr	r1, [r7, #0]
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f000 fa42 	bl	80138c8 <USBD_CtlError>
            err++;
 8013444:	7afb      	ldrb	r3, [r7, #11]
 8013446:	3301      	adds	r3, #1
 8013448:	72fb      	strb	r3, [r7, #11]
          break;
 801344a:	e034      	b.n	80134b6 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013452:	699b      	ldr	r3, [r3, #24]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d00b      	beq.n	8013470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801345e:	699b      	ldr	r3, [r3, #24]
 8013460:	687a      	ldr	r2, [r7, #4]
 8013462:	7c12      	ldrb	r2, [r2, #16]
 8013464:	f107 0108 	add.w	r1, r7, #8
 8013468:	4610      	mov	r0, r2
 801346a:	4798      	blx	r3
 801346c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801346e:	e022      	b.n	80134b6 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8013470:	6839      	ldr	r1, [r7, #0]
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f000 fa28 	bl	80138c8 <USBD_CtlError>
            err++;
 8013478:	7afb      	ldrb	r3, [r7, #11]
 801347a:	3301      	adds	r3, #1
 801347c:	72fb      	strb	r3, [r7, #11]
          break;
 801347e:	e01a      	b.n	80134b6 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013488:	2b00      	cmp	r3, #0
 801348a:	d00c      	beq.n	80134a6 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013494:	683a      	ldr	r2, [r7, #0]
 8013496:	8852      	ldrh	r2, [r2, #2]
 8013498:	b2d1      	uxtb	r1, r2
 801349a:	f107 0208 	add.w	r2, r7, #8
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	4798      	blx	r3
 80134a2:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80134a4:	e006      	b.n	80134b4 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 80134a6:	6839      	ldr	r1, [r7, #0]
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f000 fa0d 	bl	80138c8 <USBD_CtlError>
            err++;
 80134ae:	7afb      	ldrb	r3, [r7, #11]
 80134b0:	3301      	adds	r3, #1
 80134b2:	72fb      	strb	r3, [r7, #11]
          break;
 80134b4:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 80134b6:	e037      	b.n	8013528 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	7c1b      	ldrb	r3, [r3, #16]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d109      	bne.n	80134d4 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80134c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134c8:	f107 0208 	add.w	r2, r7, #8
 80134cc:	4610      	mov	r0, r2
 80134ce:	4798      	blx	r3
 80134d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80134d2:	e029      	b.n	8013528 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80134d4:	6839      	ldr	r1, [r7, #0]
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	f000 f9f6 	bl	80138c8 <USBD_CtlError>
        err++;
 80134dc:	7afb      	ldrb	r3, [r7, #11]
 80134de:	3301      	adds	r3, #1
 80134e0:	72fb      	strb	r3, [r7, #11]
      break;
 80134e2:	e021      	b.n	8013528 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	7c1b      	ldrb	r3, [r3, #16]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d10d      	bne.n	8013508 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80134f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134f4:	f107 0208 	add.w	r2, r7, #8
 80134f8:	4610      	mov	r0, r2
 80134fa:	4798      	blx	r3
 80134fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	3301      	adds	r3, #1
 8013502:	2207      	movs	r2, #7
 8013504:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013506:	e00f      	b.n	8013528 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8013508:	6839      	ldr	r1, [r7, #0]
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	f000 f9dc 	bl	80138c8 <USBD_CtlError>
        err++;
 8013510:	7afb      	ldrb	r3, [r7, #11]
 8013512:	3301      	adds	r3, #1
 8013514:	72fb      	strb	r3, [r7, #11]
      break;
 8013516:	e007      	b.n	8013528 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8013518:	6839      	ldr	r1, [r7, #0]
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f000 f9d4 	bl	80138c8 <USBD_CtlError>
      err++;
 8013520:	7afb      	ldrb	r3, [r7, #11]
 8013522:	3301      	adds	r3, #1
 8013524:	72fb      	strb	r3, [r7, #11]
      break;
 8013526:	bf00      	nop
  }

  if (err != 0U)
 8013528:	7afb      	ldrb	r3, [r7, #11]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d11c      	bne.n	8013568 <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801352e:	893b      	ldrh	r3, [r7, #8]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d011      	beq.n	8013558 <USBD_GetDescriptor+0x2dc>
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	88db      	ldrh	r3, [r3, #6]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d00d      	beq.n	8013558 <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	88da      	ldrh	r2, [r3, #6]
 8013540:	893b      	ldrh	r3, [r7, #8]
 8013542:	4293      	cmp	r3, r2
 8013544:	bf28      	it	cs
 8013546:	4613      	movcs	r3, r2
 8013548:	b29b      	uxth	r3, r3
 801354a:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801354c:	893b      	ldrh	r3, [r7, #8]
 801354e:	461a      	mov	r2, r3
 8013550:	68f9      	ldr	r1, [r7, #12]
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f000 f9c9 	bl	80138ea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	88db      	ldrh	r3, [r3, #6]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d104      	bne.n	801356a <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f000 fa02 	bl	801396a <USBD_CtlSendStatus>
 8013566:	e000      	b.n	801356a <USBD_GetDescriptor+0x2ee>
    return;
 8013568:	bf00      	nop
    }
  }
}
 801356a:	3710      	adds	r7, #16
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}

08013570 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b084      	sub	sp, #16
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	889b      	ldrh	r3, [r3, #4]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d130      	bne.n	80135e4 <USBD_SetAddress+0x74>
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	88db      	ldrh	r3, [r3, #6]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d12c      	bne.n	80135e4 <USBD_SetAddress+0x74>
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	885b      	ldrh	r3, [r3, #2]
 801358e:	2b7f      	cmp	r3, #127	; 0x7f
 8013590:	d828      	bhi.n	80135e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	885b      	ldrh	r3, [r3, #2]
 8013596:	b2db      	uxtb	r3, r3
 8013598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801359c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135a4:	2b03      	cmp	r3, #3
 80135a6:	d104      	bne.n	80135b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80135a8:	6839      	ldr	r1, [r7, #0]
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f000 f98c 	bl	80138c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135b0:	e01d      	b.n	80135ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	7bfa      	ldrb	r2, [r7, #15]
 80135b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80135ba:	7bfb      	ldrb	r3, [r7, #15]
 80135bc:	4619      	mov	r1, r3
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f7f1 fe9c 	bl	80052fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80135c4:	6878      	ldr	r0, [r7, #4]
 80135c6:	f000 f9d0 	bl	801396a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80135ca:	7bfb      	ldrb	r3, [r7, #15]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d004      	beq.n	80135da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2202      	movs	r2, #2
 80135d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135d8:	e009      	b.n	80135ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2201      	movs	r2, #1
 80135de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135e2:	e004      	b.n	80135ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80135e4:	6839      	ldr	r1, [r7, #0]
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f000 f96e 	bl	80138c8 <USBD_CtlError>
  }
}
 80135ec:	bf00      	nop
 80135ee:	bf00      	nop
 80135f0:	3710      	adds	r7, #16
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
	...

080135f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b082      	sub	sp, #8
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	885b      	ldrh	r3, [r3, #2]
 8013606:	b2da      	uxtb	r2, r3
 8013608:	4b41      	ldr	r3, [pc, #260]	; (8013710 <USBD_SetConfig+0x118>)
 801360a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801360c:	4b40      	ldr	r3, [pc, #256]	; (8013710 <USBD_SetConfig+0x118>)
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	2b01      	cmp	r3, #1
 8013612:	d904      	bls.n	801361e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8013614:	6839      	ldr	r1, [r7, #0]
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f000 f956 	bl	80138c8 <USBD_CtlError>
 801361c:	e075      	b.n	801370a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013624:	2b02      	cmp	r3, #2
 8013626:	d002      	beq.n	801362e <USBD_SetConfig+0x36>
 8013628:	2b03      	cmp	r3, #3
 801362a:	d023      	beq.n	8013674 <USBD_SetConfig+0x7c>
 801362c:	e062      	b.n	80136f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801362e:	4b38      	ldr	r3, [pc, #224]	; (8013710 <USBD_SetConfig+0x118>)
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d01a      	beq.n	801366c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8013636:	4b36      	ldr	r3, [pc, #216]	; (8013710 <USBD_SetConfig+0x118>)
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	461a      	mov	r2, r3
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	2203      	movs	r2, #3
 8013644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8013648:	4b31      	ldr	r3, [pc, #196]	; (8013710 <USBD_SetConfig+0x118>)
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	4619      	mov	r1, r3
 801364e:	6878      	ldr	r0, [r7, #4]
 8013650:	f7ff f997 	bl	8012982 <USBD_SetClassConfig>
 8013654:	4603      	mov	r3, r0
 8013656:	2b02      	cmp	r3, #2
 8013658:	d104      	bne.n	8013664 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801365a:	6839      	ldr	r1, [r7, #0]
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f000 f933 	bl	80138c8 <USBD_CtlError>
            return;
 8013662:	e052      	b.n	801370a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f000 f980 	bl	801396a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801366a:	e04e      	b.n	801370a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f000 f97c 	bl	801396a <USBD_CtlSendStatus>
        break;
 8013672:	e04a      	b.n	801370a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8013674:	4b26      	ldr	r3, [pc, #152]	; (8013710 <USBD_SetConfig+0x118>)
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d112      	bne.n	80136a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2202      	movs	r2, #2
 8013680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8013684:	4b22      	ldr	r3, [pc, #136]	; (8013710 <USBD_SetConfig+0x118>)
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	461a      	mov	r2, r3
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801368e:	4b20      	ldr	r3, [pc, #128]	; (8013710 <USBD_SetConfig+0x118>)
 8013690:	781b      	ldrb	r3, [r3, #0]
 8013692:	4619      	mov	r1, r3
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f7ff f993 	bl	80129c0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f000 f965 	bl	801396a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80136a0:	e033      	b.n	801370a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80136a2:	4b1b      	ldr	r3, [pc, #108]	; (8013710 <USBD_SetConfig+0x118>)
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	461a      	mov	r2, r3
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	429a      	cmp	r2, r3
 80136ae:	d01d      	beq.n	80136ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	685b      	ldr	r3, [r3, #4]
 80136b4:	b2db      	uxtb	r3, r3
 80136b6:	4619      	mov	r1, r3
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f7ff f981 	bl	80129c0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80136be:	4b14      	ldr	r3, [pc, #80]	; (8013710 <USBD_SetConfig+0x118>)
 80136c0:	781b      	ldrb	r3, [r3, #0]
 80136c2:	461a      	mov	r2, r3
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80136c8:	4b11      	ldr	r3, [pc, #68]	; (8013710 <USBD_SetConfig+0x118>)
 80136ca:	781b      	ldrb	r3, [r3, #0]
 80136cc:	4619      	mov	r1, r3
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f7ff f957 	bl	8012982 <USBD_SetClassConfig>
 80136d4:	4603      	mov	r3, r0
 80136d6:	2b02      	cmp	r3, #2
 80136d8:	d104      	bne.n	80136e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80136da:	6839      	ldr	r1, [r7, #0]
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 f8f3 	bl	80138c8 <USBD_CtlError>
            return;
 80136e2:	e012      	b.n	801370a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f000 f940 	bl	801396a <USBD_CtlSendStatus>
        break;
 80136ea:	e00e      	b.n	801370a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f000 f93c 	bl	801396a <USBD_CtlSendStatus>
        break;
 80136f2:	e00a      	b.n	801370a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80136f4:	6839      	ldr	r1, [r7, #0]
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f000 f8e6 	bl	80138c8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80136fc:	4b04      	ldr	r3, [pc, #16]	; (8013710 <USBD_SetConfig+0x118>)
 80136fe:	781b      	ldrb	r3, [r3, #0]
 8013700:	4619      	mov	r1, r3
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f7ff f95c 	bl	80129c0 <USBD_ClrClassConfig>
        break;
 8013708:	bf00      	nop
    }
  }
}
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	200034b0 	.word	0x200034b0

08013714 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	88db      	ldrh	r3, [r3, #6]
 8013722:	2b01      	cmp	r3, #1
 8013724:	d004      	beq.n	8013730 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013726:	6839      	ldr	r1, [r7, #0]
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f000 f8cd 	bl	80138c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801372e:	e022      	b.n	8013776 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013736:	2b02      	cmp	r3, #2
 8013738:	dc02      	bgt.n	8013740 <USBD_GetConfig+0x2c>
 801373a:	2b00      	cmp	r3, #0
 801373c:	dc03      	bgt.n	8013746 <USBD_GetConfig+0x32>
 801373e:	e015      	b.n	801376c <USBD_GetConfig+0x58>
 8013740:	2b03      	cmp	r3, #3
 8013742:	d00b      	beq.n	801375c <USBD_GetConfig+0x48>
 8013744:	e012      	b.n	801376c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2200      	movs	r2, #0
 801374a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	3308      	adds	r3, #8
 8013750:	2201      	movs	r2, #1
 8013752:	4619      	mov	r1, r3
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f000 f8c8 	bl	80138ea <USBD_CtlSendData>
        break;
 801375a:	e00c      	b.n	8013776 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	3304      	adds	r3, #4
 8013760:	2201      	movs	r2, #1
 8013762:	4619      	mov	r1, r3
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f000 f8c0 	bl	80138ea <USBD_CtlSendData>
        break;
 801376a:	e004      	b.n	8013776 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 801376c:	6839      	ldr	r1, [r7, #0]
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	f000 f8aa 	bl	80138c8 <USBD_CtlError>
        break;
 8013774:	bf00      	nop
}
 8013776:	bf00      	nop
 8013778:	3708      	adds	r7, #8
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}

0801377e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801377e:	b580      	push	{r7, lr}
 8013780:	b082      	sub	sp, #8
 8013782:	af00      	add	r7, sp, #0
 8013784:	6078      	str	r0, [r7, #4]
 8013786:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801378e:	3b01      	subs	r3, #1
 8013790:	2b02      	cmp	r3, #2
 8013792:	d81e      	bhi.n	80137d2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	88db      	ldrh	r3, [r3, #6]
 8013798:	2b02      	cmp	r3, #2
 801379a:	d004      	beq.n	80137a6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801379c:	6839      	ldr	r1, [r7, #0]
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f000 f892 	bl	80138c8 <USBD_CtlError>
        break;
 80137a4:	e01a      	b.n	80137dc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2201      	movs	r2, #1
 80137aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d005      	beq.n	80137c2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	68db      	ldr	r3, [r3, #12]
 80137ba:	f043 0202 	orr.w	r2, r3, #2
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	330c      	adds	r3, #12
 80137c6:	2202      	movs	r2, #2
 80137c8:	4619      	mov	r1, r3
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f000 f88d 	bl	80138ea <USBD_CtlSendData>
      break;
 80137d0:	e004      	b.n	80137dc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80137d2:	6839      	ldr	r1, [r7, #0]
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f000 f877 	bl	80138c8 <USBD_CtlError>
      break;
 80137da:	bf00      	nop
  }
}
 80137dc:	bf00      	nop
 80137de:	3708      	adds	r7, #8
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}

080137e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b082      	sub	sp, #8
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
 80137ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	885b      	ldrh	r3, [r3, #2]
 80137f2:	2b01      	cmp	r3, #1
 80137f4:	d106      	bne.n	8013804 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2201      	movs	r2, #1
 80137fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f000 f8b3 	bl	801396a <USBD_CtlSendStatus>
  }
}
 8013804:	bf00      	nop
 8013806:	3708      	adds	r7, #8
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801381c:	3b01      	subs	r3, #1
 801381e:	2b02      	cmp	r3, #2
 8013820:	d80b      	bhi.n	801383a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	885b      	ldrh	r3, [r3, #2]
 8013826:	2b01      	cmp	r3, #1
 8013828:	d10c      	bne.n	8013844 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2200      	movs	r2, #0
 801382e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f000 f899 	bl	801396a <USBD_CtlSendStatus>
      }
      break;
 8013838:	e004      	b.n	8013844 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801383a:	6839      	ldr	r1, [r7, #0]
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f000 f843 	bl	80138c8 <USBD_CtlError>
      break;
 8013842:	e000      	b.n	8013846 <USBD_ClrFeature+0x3a>
      break;
 8013844:	bf00      	nop
  }
}
 8013846:	bf00      	nop
 8013848:	3708      	adds	r7, #8
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}

0801384e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801384e:	b480      	push	{r7}
 8013850:	b083      	sub	sp, #12
 8013852:	af00      	add	r7, sp, #0
 8013854:	6078      	str	r0, [r7, #4]
 8013856:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	781a      	ldrb	r2, [r3, #0]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	785a      	ldrb	r2, [r3, #1]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	3302      	adds	r3, #2
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	b29a      	uxth	r2, r3
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	3303      	adds	r3, #3
 8013874:	781b      	ldrb	r3, [r3, #0]
 8013876:	b29b      	uxth	r3, r3
 8013878:	021b      	lsls	r3, r3, #8
 801387a:	b29b      	uxth	r3, r3
 801387c:	4413      	add	r3, r2
 801387e:	b29a      	uxth	r2, r3
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	3304      	adds	r3, #4
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	b29a      	uxth	r2, r3
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	3305      	adds	r3, #5
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	b29b      	uxth	r3, r3
 8013894:	021b      	lsls	r3, r3, #8
 8013896:	b29b      	uxth	r3, r3
 8013898:	4413      	add	r3, r2
 801389a:	b29a      	uxth	r2, r3
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	3306      	adds	r3, #6
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	b29a      	uxth	r2, r3
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	3307      	adds	r3, #7
 80138ac:	781b      	ldrb	r3, [r3, #0]
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	021b      	lsls	r3, r3, #8
 80138b2:	b29b      	uxth	r3, r3
 80138b4:	4413      	add	r3, r2
 80138b6:	b29a      	uxth	r2, r3
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	80da      	strh	r2, [r3, #6]

}
 80138bc:	bf00      	nop
 80138be:	370c      	adds	r7, #12
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr

080138c8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b082      	sub	sp, #8
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80138d2:	2180      	movs	r1, #128	; 0x80
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7f1 fcbf 	bl	8005258 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80138da:	2100      	movs	r1, #0
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f7f1 fcbb 	bl	8005258 <USBD_LL_StallEP>
}
 80138e2:	bf00      	nop
 80138e4:	3708      	adds	r7, #8
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}

080138ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80138ea:	b580      	push	{r7, lr}
 80138ec:	b084      	sub	sp, #16
 80138ee:	af00      	add	r7, sp, #0
 80138f0:	60f8      	str	r0, [r7, #12]
 80138f2:	60b9      	str	r1, [r7, #8]
 80138f4:	4613      	mov	r3, r2
 80138f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	2202      	movs	r2, #2
 80138fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8013900:	88fa      	ldrh	r2, [r7, #6]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8013906:	88fa      	ldrh	r2, [r7, #6]
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801390c:	88fb      	ldrh	r3, [r7, #6]
 801390e:	68ba      	ldr	r2, [r7, #8]
 8013910:	2100      	movs	r1, #0
 8013912:	68f8      	ldr	r0, [r7, #12]
 8013914:	f7f1 fd05 	bl	8005322 <USBD_LL_Transmit>

  return USBD_OK;
 8013918:	2300      	movs	r3, #0
}
 801391a:	4618      	mov	r0, r3
 801391c:	3710      	adds	r7, #16
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}

08013922 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8013922:	b580      	push	{r7, lr}
 8013924:	b084      	sub	sp, #16
 8013926:	af00      	add	r7, sp, #0
 8013928:	60f8      	str	r0, [r7, #12]
 801392a:	60b9      	str	r1, [r7, #8]
 801392c:	4613      	mov	r3, r2
 801392e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013930:	88fb      	ldrh	r3, [r7, #6]
 8013932:	68ba      	ldr	r2, [r7, #8]
 8013934:	2100      	movs	r1, #0
 8013936:	68f8      	ldr	r0, [r7, #12]
 8013938:	f7f1 fcf3 	bl	8005322 <USBD_LL_Transmit>

  return USBD_OK;
 801393c:	2300      	movs	r3, #0
}
 801393e:	4618      	mov	r0, r3
 8013940:	3710      	adds	r7, #16
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}

08013946 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8013946:	b580      	push	{r7, lr}
 8013948:	b084      	sub	sp, #16
 801394a:	af00      	add	r7, sp, #0
 801394c:	60f8      	str	r0, [r7, #12]
 801394e:	60b9      	str	r1, [r7, #8]
 8013950:	4613      	mov	r3, r2
 8013952:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013954:	88fb      	ldrh	r3, [r7, #6]
 8013956:	68ba      	ldr	r2, [r7, #8]
 8013958:	2100      	movs	r1, #0
 801395a:	68f8      	ldr	r0, [r7, #12]
 801395c:	f7f1 fcf8 	bl	8005350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013960:	2300      	movs	r3, #0
}
 8013962:	4618      	mov	r0, r3
 8013964:	3710      	adds	r7, #16
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}

0801396a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801396a:	b580      	push	{r7, lr}
 801396c:	b082      	sub	sp, #8
 801396e:	af00      	add	r7, sp, #0
 8013970:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2204      	movs	r2, #4
 8013976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801397a:	2300      	movs	r3, #0
 801397c:	2200      	movs	r2, #0
 801397e:	2100      	movs	r1, #0
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f7f1 fcce 	bl	8005322 <USBD_LL_Transmit>

  return USBD_OK;
 8013986:	2300      	movs	r3, #0
}
 8013988:	4618      	mov	r0, r3
 801398a:	3708      	adds	r7, #8
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}

08013990 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2205      	movs	r2, #5
 801399c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80139a0:	2300      	movs	r3, #0
 80139a2:	2200      	movs	r2, #0
 80139a4:	2100      	movs	r1, #0
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f7f1 fcd2 	bl	8005350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80139ac:	2300      	movs	r3, #0
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	3708      	adds	r7, #8
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
	...

080139b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b084      	sub	sp, #16
 80139bc:	af00      	add	r7, sp, #0
 80139be:	4603      	mov	r3, r0
 80139c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80139c2:	79fb      	ldrb	r3, [r7, #7]
 80139c4:	4a08      	ldr	r2, [pc, #32]	; (80139e8 <disk_status+0x30>)
 80139c6:	009b      	lsls	r3, r3, #2
 80139c8:	4413      	add	r3, r2
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	685b      	ldr	r3, [r3, #4]
 80139ce:	79fa      	ldrb	r2, [r7, #7]
 80139d0:	4905      	ldr	r1, [pc, #20]	; (80139e8 <disk_status+0x30>)
 80139d2:	440a      	add	r2, r1
 80139d4:	7a12      	ldrb	r2, [r2, #8]
 80139d6:	4610      	mov	r0, r2
 80139d8:	4798      	blx	r3
 80139da:	4603      	mov	r3, r0
 80139dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80139de:	7bfb      	ldrb	r3, [r7, #15]
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	3710      	adds	r7, #16
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}
 80139e8:	200037fc 	.word	0x200037fc

080139ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b084      	sub	sp, #16
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	4603      	mov	r3, r0
 80139f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80139f6:	2300      	movs	r3, #0
 80139f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80139fa:	79fb      	ldrb	r3, [r7, #7]
 80139fc:	4a0d      	ldr	r2, [pc, #52]	; (8013a34 <disk_initialize+0x48>)
 80139fe:	5cd3      	ldrb	r3, [r2, r3]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d111      	bne.n	8013a28 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8013a04:	79fb      	ldrb	r3, [r7, #7]
 8013a06:	4a0b      	ldr	r2, [pc, #44]	; (8013a34 <disk_initialize+0x48>)
 8013a08:	2101      	movs	r1, #1
 8013a0a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013a0c:	79fb      	ldrb	r3, [r7, #7]
 8013a0e:	4a09      	ldr	r2, [pc, #36]	; (8013a34 <disk_initialize+0x48>)
 8013a10:	009b      	lsls	r3, r3, #2
 8013a12:	4413      	add	r3, r2
 8013a14:	685b      	ldr	r3, [r3, #4]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	79fa      	ldrb	r2, [r7, #7]
 8013a1a:	4906      	ldr	r1, [pc, #24]	; (8013a34 <disk_initialize+0x48>)
 8013a1c:	440a      	add	r2, r1
 8013a1e:	7a12      	ldrb	r2, [r2, #8]
 8013a20:	4610      	mov	r0, r2
 8013a22:	4798      	blx	r3
 8013a24:	4603      	mov	r3, r0
 8013a26:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8013a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3710      	adds	r7, #16
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}
 8013a32:	bf00      	nop
 8013a34:	200037fc 	.word	0x200037fc

08013a38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013a38:	b590      	push	{r4, r7, lr}
 8013a3a:	b087      	sub	sp, #28
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	60b9      	str	r1, [r7, #8]
 8013a40:	607a      	str	r2, [r7, #4]
 8013a42:	603b      	str	r3, [r7, #0]
 8013a44:	4603      	mov	r3, r0
 8013a46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013a48:	7bfb      	ldrb	r3, [r7, #15]
 8013a4a:	4a0a      	ldr	r2, [pc, #40]	; (8013a74 <disk_read+0x3c>)
 8013a4c:	009b      	lsls	r3, r3, #2
 8013a4e:	4413      	add	r3, r2
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	689c      	ldr	r4, [r3, #8]
 8013a54:	7bfb      	ldrb	r3, [r7, #15]
 8013a56:	4a07      	ldr	r2, [pc, #28]	; (8013a74 <disk_read+0x3c>)
 8013a58:	4413      	add	r3, r2
 8013a5a:	7a18      	ldrb	r0, [r3, #8]
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	68b9      	ldr	r1, [r7, #8]
 8013a62:	47a0      	blx	r4
 8013a64:	4603      	mov	r3, r0
 8013a66:	75fb      	strb	r3, [r7, #23]
  return res;
 8013a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	371c      	adds	r7, #28
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd90      	pop	{r4, r7, pc}
 8013a72:	bf00      	nop
 8013a74:	200037fc 	.word	0x200037fc

08013a78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013a78:	b590      	push	{r4, r7, lr}
 8013a7a:	b087      	sub	sp, #28
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	60b9      	str	r1, [r7, #8]
 8013a80:	607a      	str	r2, [r7, #4]
 8013a82:	603b      	str	r3, [r7, #0]
 8013a84:	4603      	mov	r3, r0
 8013a86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013a88:	7bfb      	ldrb	r3, [r7, #15]
 8013a8a:	4a0a      	ldr	r2, [pc, #40]	; (8013ab4 <disk_write+0x3c>)
 8013a8c:	009b      	lsls	r3, r3, #2
 8013a8e:	4413      	add	r3, r2
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	68dc      	ldr	r4, [r3, #12]
 8013a94:	7bfb      	ldrb	r3, [r7, #15]
 8013a96:	4a07      	ldr	r2, [pc, #28]	; (8013ab4 <disk_write+0x3c>)
 8013a98:	4413      	add	r3, r2
 8013a9a:	7a18      	ldrb	r0, [r3, #8]
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	68b9      	ldr	r1, [r7, #8]
 8013aa2:	47a0      	blx	r4
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	75fb      	strb	r3, [r7, #23]
  return res;
 8013aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	371c      	adds	r7, #28
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd90      	pop	{r4, r7, pc}
 8013ab2:	bf00      	nop
 8013ab4:	200037fc 	.word	0x200037fc

08013ab8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b084      	sub	sp, #16
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	4603      	mov	r3, r0
 8013ac0:	603a      	str	r2, [r7, #0]
 8013ac2:	71fb      	strb	r3, [r7, #7]
 8013ac4:	460b      	mov	r3, r1
 8013ac6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013ac8:	79fb      	ldrb	r3, [r7, #7]
 8013aca:	4a09      	ldr	r2, [pc, #36]	; (8013af0 <disk_ioctl+0x38>)
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	4413      	add	r3, r2
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	691b      	ldr	r3, [r3, #16]
 8013ad4:	79fa      	ldrb	r2, [r7, #7]
 8013ad6:	4906      	ldr	r1, [pc, #24]	; (8013af0 <disk_ioctl+0x38>)
 8013ad8:	440a      	add	r2, r1
 8013ada:	7a10      	ldrb	r0, [r2, #8]
 8013adc:	79b9      	ldrb	r1, [r7, #6]
 8013ade:	683a      	ldr	r2, [r7, #0]
 8013ae0:	4798      	blx	r3
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	73fb      	strb	r3, [r7, #15]
  return res;
 8013ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3710      	adds	r7, #16
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}
 8013af0:	200037fc 	.word	0x200037fc

08013af4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8013af4:	b480      	push	{r7}
 8013af6:	af00      	add	r7, sp, #0
  return 0;
 8013af8:	2300      	movs	r3, #0
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr

08013b04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013b04:	b480      	push	{r7}
 8013b06:	b085      	sub	sp, #20
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	3301      	adds	r3, #1
 8013b10:	781b      	ldrb	r3, [r3, #0]
 8013b12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013b14:	89fb      	ldrh	r3, [r7, #14]
 8013b16:	021b      	lsls	r3, r3, #8
 8013b18:	b21a      	sxth	r2, r3
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	b21b      	sxth	r3, r3
 8013b20:	4313      	orrs	r3, r2
 8013b22:	b21b      	sxth	r3, r3
 8013b24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8013b26:	89fb      	ldrh	r3, [r7, #14]
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3714      	adds	r7, #20
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b32:	4770      	bx	lr

08013b34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013b34:	b480      	push	{r7}
 8013b36:	b085      	sub	sp, #20
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	3303      	adds	r3, #3
 8013b40:	781b      	ldrb	r3, [r3, #0]
 8013b42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	021b      	lsls	r3, r3, #8
 8013b48:	687a      	ldr	r2, [r7, #4]
 8013b4a:	3202      	adds	r2, #2
 8013b4c:	7812      	ldrb	r2, [r2, #0]
 8013b4e:	4313      	orrs	r3, r2
 8013b50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	021b      	lsls	r3, r3, #8
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	3201      	adds	r2, #1
 8013b5a:	7812      	ldrb	r2, [r2, #0]
 8013b5c:	4313      	orrs	r3, r2
 8013b5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	021b      	lsls	r3, r3, #8
 8013b64:	687a      	ldr	r2, [r7, #4]
 8013b66:	7812      	ldrb	r2, [r2, #0]
 8013b68:	4313      	orrs	r3, r2
 8013b6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3714      	adds	r7, #20
 8013b72:	46bd      	mov	sp, r7
 8013b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b78:	4770      	bx	lr

08013b7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8013b7a:	b480      	push	{r7}
 8013b7c:	b083      	sub	sp, #12
 8013b7e:	af00      	add	r7, sp, #0
 8013b80:	6078      	str	r0, [r7, #4]
 8013b82:	460b      	mov	r3, r1
 8013b84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	1c5a      	adds	r2, r3, #1
 8013b8a:	607a      	str	r2, [r7, #4]
 8013b8c:	887a      	ldrh	r2, [r7, #2]
 8013b8e:	b2d2      	uxtb	r2, r2
 8013b90:	701a      	strb	r2, [r3, #0]
 8013b92:	887b      	ldrh	r3, [r7, #2]
 8013b94:	0a1b      	lsrs	r3, r3, #8
 8013b96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	1c5a      	adds	r2, r3, #1
 8013b9c:	607a      	str	r2, [r7, #4]
 8013b9e:	887a      	ldrh	r2, [r7, #2]
 8013ba0:	b2d2      	uxtb	r2, r2
 8013ba2:	701a      	strb	r2, [r3, #0]
}
 8013ba4:	bf00      	nop
 8013ba6:	370c      	adds	r7, #12
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bae:	4770      	bx	lr

08013bb0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	b083      	sub	sp, #12
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	1c5a      	adds	r2, r3, #1
 8013bbe:	607a      	str	r2, [r7, #4]
 8013bc0:	683a      	ldr	r2, [r7, #0]
 8013bc2:	b2d2      	uxtb	r2, r2
 8013bc4:	701a      	strb	r2, [r3, #0]
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	0a1b      	lsrs	r3, r3, #8
 8013bca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	1c5a      	adds	r2, r3, #1
 8013bd0:	607a      	str	r2, [r7, #4]
 8013bd2:	683a      	ldr	r2, [r7, #0]
 8013bd4:	b2d2      	uxtb	r2, r2
 8013bd6:	701a      	strb	r2, [r3, #0]
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	0a1b      	lsrs	r3, r3, #8
 8013bdc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	1c5a      	adds	r2, r3, #1
 8013be2:	607a      	str	r2, [r7, #4]
 8013be4:	683a      	ldr	r2, [r7, #0]
 8013be6:	b2d2      	uxtb	r2, r2
 8013be8:	701a      	strb	r2, [r3, #0]
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	0a1b      	lsrs	r3, r3, #8
 8013bee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	1c5a      	adds	r2, r3, #1
 8013bf4:	607a      	str	r2, [r7, #4]
 8013bf6:	683a      	ldr	r2, [r7, #0]
 8013bf8:	b2d2      	uxtb	r2, r2
 8013bfa:	701a      	strb	r2, [r3, #0]
}
 8013bfc:	bf00      	nop
 8013bfe:	370c      	adds	r7, #12
 8013c00:	46bd      	mov	sp, r7
 8013c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c06:	4770      	bx	lr

08013c08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013c08:	b480      	push	{r7}
 8013c0a:	b087      	sub	sp, #28
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	60f8      	str	r0, [r7, #12]
 8013c10:	60b9      	str	r1, [r7, #8]
 8013c12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d00d      	beq.n	8013c3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013c22:	693a      	ldr	r2, [r7, #16]
 8013c24:	1c53      	adds	r3, r2, #1
 8013c26:	613b      	str	r3, [r7, #16]
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	1c59      	adds	r1, r3, #1
 8013c2c:	6179      	str	r1, [r7, #20]
 8013c2e:	7812      	ldrb	r2, [r2, #0]
 8013c30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	3b01      	subs	r3, #1
 8013c36:	607b      	str	r3, [r7, #4]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d1f1      	bne.n	8013c22 <mem_cpy+0x1a>
	}
}
 8013c3e:	bf00      	nop
 8013c40:	371c      	adds	r7, #28
 8013c42:	46bd      	mov	sp, r7
 8013c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c48:	4770      	bx	lr

08013c4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013c4a:	b480      	push	{r7}
 8013c4c:	b087      	sub	sp, #28
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	60f8      	str	r0, [r7, #12]
 8013c52:	60b9      	str	r1, [r7, #8]
 8013c54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	1c5a      	adds	r2, r3, #1
 8013c5e:	617a      	str	r2, [r7, #20]
 8013c60:	68ba      	ldr	r2, [r7, #8]
 8013c62:	b2d2      	uxtb	r2, r2
 8013c64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	3b01      	subs	r3, #1
 8013c6a:	607b      	str	r3, [r7, #4]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d1f3      	bne.n	8013c5a <mem_set+0x10>
}
 8013c72:	bf00      	nop
 8013c74:	bf00      	nop
 8013c76:	371c      	adds	r7, #28
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7e:	4770      	bx	lr

08013c80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8013c80:	b480      	push	{r7}
 8013c82:	b089      	sub	sp, #36	; 0x24
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	60f8      	str	r0, [r7, #12]
 8013c88:	60b9      	str	r1, [r7, #8]
 8013c8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	61fb      	str	r3, [r7, #28]
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013c94:	2300      	movs	r3, #0
 8013c96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	1c5a      	adds	r2, r3, #1
 8013c9c:	61fa      	str	r2, [r7, #28]
 8013c9e:	781b      	ldrb	r3, [r3, #0]
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	69bb      	ldr	r3, [r7, #24]
 8013ca4:	1c5a      	adds	r2, r3, #1
 8013ca6:	61ba      	str	r2, [r7, #24]
 8013ca8:	781b      	ldrb	r3, [r3, #0]
 8013caa:	1acb      	subs	r3, r1, r3
 8013cac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	3b01      	subs	r3, #1
 8013cb2:	607b      	str	r3, [r7, #4]
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d002      	beq.n	8013cc0 <mem_cmp+0x40>
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d0eb      	beq.n	8013c98 <mem_cmp+0x18>

	return r;
 8013cc0:	697b      	ldr	r3, [r7, #20]
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3724      	adds	r7, #36	; 0x24
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ccc:	4770      	bx	lr

08013cce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8013cce:	b480      	push	{r7}
 8013cd0:	b083      	sub	sp, #12
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	6078      	str	r0, [r7, #4]
 8013cd6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8013cd8:	e002      	b.n	8013ce0 <chk_chr+0x12>
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	3301      	adds	r3, #1
 8013cde:	607b      	str	r3, [r7, #4]
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d005      	beq.n	8013cf4 <chk_chr+0x26>
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	781b      	ldrb	r3, [r3, #0]
 8013cec:	461a      	mov	r2, r3
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	d1f2      	bne.n	8013cda <chk_chr+0xc>
	return *str;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	781b      	ldrb	r3, [r3, #0]
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	370c      	adds	r7, #12
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d02:	4770      	bx	lr

08013d04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013d04:	b480      	push	{r7}
 8013d06:	b085      	sub	sp, #20
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
 8013d0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013d0e:	2300      	movs	r3, #0
 8013d10:	60bb      	str	r3, [r7, #8]
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	60fb      	str	r3, [r7, #12]
 8013d16:	e029      	b.n	8013d6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013d18:	4a27      	ldr	r2, [pc, #156]	; (8013db8 <chk_lock+0xb4>)
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	011b      	lsls	r3, r3, #4
 8013d1e:	4413      	add	r3, r2
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d01d      	beq.n	8013d62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013d26:	4a24      	ldr	r2, [pc, #144]	; (8013db8 <chk_lock+0xb4>)
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	011b      	lsls	r3, r3, #4
 8013d2c:	4413      	add	r3, r2
 8013d2e:	681a      	ldr	r2, [r3, #0]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d116      	bne.n	8013d66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013d38:	4a1f      	ldr	r2, [pc, #124]	; (8013db8 <chk_lock+0xb4>)
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	011b      	lsls	r3, r3, #4
 8013d3e:	4413      	add	r3, r2
 8013d40:	3304      	adds	r3, #4
 8013d42:	681a      	ldr	r2, [r3, #0]
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d10c      	bne.n	8013d66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013d4c:	4a1a      	ldr	r2, [pc, #104]	; (8013db8 <chk_lock+0xb4>)
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	011b      	lsls	r3, r3, #4
 8013d52:	4413      	add	r3, r2
 8013d54:	3308      	adds	r3, #8
 8013d56:	681a      	ldr	r2, [r3, #0]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d102      	bne.n	8013d66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013d60:	e007      	b.n	8013d72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013d62:	2301      	movs	r3, #1
 8013d64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	3301      	adds	r3, #1
 8013d6a:	60fb      	str	r3, [r7, #12]
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2b13      	cmp	r3, #19
 8013d70:	d9d2      	bls.n	8013d18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	2b14      	cmp	r3, #20
 8013d76:	d109      	bne.n	8013d8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d102      	bne.n	8013d84 <chk_lock+0x80>
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	2b02      	cmp	r3, #2
 8013d82:	d101      	bne.n	8013d88 <chk_lock+0x84>
 8013d84:	2300      	movs	r3, #0
 8013d86:	e010      	b.n	8013daa <chk_lock+0xa6>
 8013d88:	2312      	movs	r3, #18
 8013d8a:	e00e      	b.n	8013daa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d108      	bne.n	8013da4 <chk_lock+0xa0>
 8013d92:	4a09      	ldr	r2, [pc, #36]	; (8013db8 <chk_lock+0xb4>)
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	011b      	lsls	r3, r3, #4
 8013d98:	4413      	add	r3, r2
 8013d9a:	330c      	adds	r3, #12
 8013d9c:	881b      	ldrh	r3, [r3, #0]
 8013d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013da2:	d101      	bne.n	8013da8 <chk_lock+0xa4>
 8013da4:	2310      	movs	r3, #16
 8013da6:	e000      	b.n	8013daa <chk_lock+0xa6>
 8013da8:	2300      	movs	r3, #0
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3714      	adds	r7, #20
 8013dae:	46bd      	mov	sp, r7
 8013db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db4:	4770      	bx	lr
 8013db6:	bf00      	nop
 8013db8:	200034bc 	.word	0x200034bc

08013dbc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013dbc:	b480      	push	{r7}
 8013dbe:	b083      	sub	sp, #12
 8013dc0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	607b      	str	r3, [r7, #4]
 8013dc6:	e002      	b.n	8013dce <enq_lock+0x12>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	3301      	adds	r3, #1
 8013dcc:	607b      	str	r3, [r7, #4]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2b13      	cmp	r3, #19
 8013dd2:	d806      	bhi.n	8013de2 <enq_lock+0x26>
 8013dd4:	4a09      	ldr	r2, [pc, #36]	; (8013dfc <enq_lock+0x40>)
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	011b      	lsls	r3, r3, #4
 8013dda:	4413      	add	r3, r2
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d1f2      	bne.n	8013dc8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2b14      	cmp	r3, #20
 8013de6:	bf14      	ite	ne
 8013de8:	2301      	movne	r3, #1
 8013dea:	2300      	moveq	r3, #0
 8013dec:	b2db      	uxtb	r3, r3
}
 8013dee:	4618      	mov	r0, r3
 8013df0:	370c      	adds	r7, #12
 8013df2:	46bd      	mov	sp, r7
 8013df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df8:	4770      	bx	lr
 8013dfa:	bf00      	nop
 8013dfc:	200034bc 	.word	0x200034bc

08013e00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013e00:	b480      	push	{r7}
 8013e02:	b085      	sub	sp, #20
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
 8013e08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	60fb      	str	r3, [r7, #12]
 8013e0e:	e01f      	b.n	8013e50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013e10:	4a41      	ldr	r2, [pc, #260]	; (8013f18 <inc_lock+0x118>)
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	011b      	lsls	r3, r3, #4
 8013e16:	4413      	add	r3, r2
 8013e18:	681a      	ldr	r2, [r3, #0]
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d113      	bne.n	8013e4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8013e22:	4a3d      	ldr	r2, [pc, #244]	; (8013f18 <inc_lock+0x118>)
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	011b      	lsls	r3, r3, #4
 8013e28:	4413      	add	r3, r2
 8013e2a:	3304      	adds	r3, #4
 8013e2c:	681a      	ldr	r2, [r3, #0]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d109      	bne.n	8013e4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013e36:	4a38      	ldr	r2, [pc, #224]	; (8013f18 <inc_lock+0x118>)
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	011b      	lsls	r3, r3, #4
 8013e3c:	4413      	add	r3, r2
 8013e3e:	3308      	adds	r3, #8
 8013e40:	681a      	ldr	r2, [r3, #0]
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d006      	beq.n	8013e58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	3301      	adds	r3, #1
 8013e4e:	60fb      	str	r3, [r7, #12]
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2b13      	cmp	r3, #19
 8013e54:	d9dc      	bls.n	8013e10 <inc_lock+0x10>
 8013e56:	e000      	b.n	8013e5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013e58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	2b14      	cmp	r3, #20
 8013e5e:	d132      	bne.n	8013ec6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013e60:	2300      	movs	r3, #0
 8013e62:	60fb      	str	r3, [r7, #12]
 8013e64:	e002      	b.n	8013e6c <inc_lock+0x6c>
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	3301      	adds	r3, #1
 8013e6a:	60fb      	str	r3, [r7, #12]
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	2b13      	cmp	r3, #19
 8013e70:	d806      	bhi.n	8013e80 <inc_lock+0x80>
 8013e72:	4a29      	ldr	r2, [pc, #164]	; (8013f18 <inc_lock+0x118>)
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	011b      	lsls	r3, r3, #4
 8013e78:	4413      	add	r3, r2
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d1f2      	bne.n	8013e66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	2b14      	cmp	r3, #20
 8013e84:	d101      	bne.n	8013e8a <inc_lock+0x8a>
 8013e86:	2300      	movs	r3, #0
 8013e88:	e040      	b.n	8013f0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	4922      	ldr	r1, [pc, #136]	; (8013f18 <inc_lock+0x118>)
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	011b      	lsls	r3, r3, #4
 8013e94:	440b      	add	r3, r1
 8013e96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	689a      	ldr	r2, [r3, #8]
 8013e9c:	491e      	ldr	r1, [pc, #120]	; (8013f18 <inc_lock+0x118>)
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	011b      	lsls	r3, r3, #4
 8013ea2:	440b      	add	r3, r1
 8013ea4:	3304      	adds	r3, #4
 8013ea6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	695a      	ldr	r2, [r3, #20]
 8013eac:	491a      	ldr	r1, [pc, #104]	; (8013f18 <inc_lock+0x118>)
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	011b      	lsls	r3, r3, #4
 8013eb2:	440b      	add	r3, r1
 8013eb4:	3308      	adds	r3, #8
 8013eb6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013eb8:	4a17      	ldr	r2, [pc, #92]	; (8013f18 <inc_lock+0x118>)
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	011b      	lsls	r3, r3, #4
 8013ebe:	4413      	add	r3, r2
 8013ec0:	330c      	adds	r3, #12
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d009      	beq.n	8013ee0 <inc_lock+0xe0>
 8013ecc:	4a12      	ldr	r2, [pc, #72]	; (8013f18 <inc_lock+0x118>)
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	011b      	lsls	r3, r3, #4
 8013ed2:	4413      	add	r3, r2
 8013ed4:	330c      	adds	r3, #12
 8013ed6:	881b      	ldrh	r3, [r3, #0]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d001      	beq.n	8013ee0 <inc_lock+0xe0>
 8013edc:	2300      	movs	r3, #0
 8013ede:	e015      	b.n	8013f0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d108      	bne.n	8013ef8 <inc_lock+0xf8>
 8013ee6:	4a0c      	ldr	r2, [pc, #48]	; (8013f18 <inc_lock+0x118>)
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	011b      	lsls	r3, r3, #4
 8013eec:	4413      	add	r3, r2
 8013eee:	330c      	adds	r3, #12
 8013ef0:	881b      	ldrh	r3, [r3, #0]
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	b29a      	uxth	r2, r3
 8013ef6:	e001      	b.n	8013efc <inc_lock+0xfc>
 8013ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013efc:	4906      	ldr	r1, [pc, #24]	; (8013f18 <inc_lock+0x118>)
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	011b      	lsls	r3, r3, #4
 8013f02:	440b      	add	r3, r1
 8013f04:	330c      	adds	r3, #12
 8013f06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	3301      	adds	r3, #1
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3714      	adds	r7, #20
 8013f10:	46bd      	mov	sp, r7
 8013f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f16:	4770      	bx	lr
 8013f18:	200034bc 	.word	0x200034bc

08013f1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013f1c:	b480      	push	{r7}
 8013f1e:	b085      	sub	sp, #20
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	3b01      	subs	r3, #1
 8013f28:	607b      	str	r3, [r7, #4]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	2b13      	cmp	r3, #19
 8013f2e:	d825      	bhi.n	8013f7c <dec_lock+0x60>
		n = Files[i].ctr;
 8013f30:	4a17      	ldr	r2, [pc, #92]	; (8013f90 <dec_lock+0x74>)
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	011b      	lsls	r3, r3, #4
 8013f36:	4413      	add	r3, r2
 8013f38:	330c      	adds	r3, #12
 8013f3a:	881b      	ldrh	r3, [r3, #0]
 8013f3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8013f3e:	89fb      	ldrh	r3, [r7, #14]
 8013f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013f44:	d101      	bne.n	8013f4a <dec_lock+0x2e>
 8013f46:	2300      	movs	r3, #0
 8013f48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013f4a:	89fb      	ldrh	r3, [r7, #14]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d002      	beq.n	8013f56 <dec_lock+0x3a>
 8013f50:	89fb      	ldrh	r3, [r7, #14]
 8013f52:	3b01      	subs	r3, #1
 8013f54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013f56:	4a0e      	ldr	r2, [pc, #56]	; (8013f90 <dec_lock+0x74>)
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	011b      	lsls	r3, r3, #4
 8013f5c:	4413      	add	r3, r2
 8013f5e:	330c      	adds	r3, #12
 8013f60:	89fa      	ldrh	r2, [r7, #14]
 8013f62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013f64:	89fb      	ldrh	r3, [r7, #14]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d105      	bne.n	8013f76 <dec_lock+0x5a>
 8013f6a:	4a09      	ldr	r2, [pc, #36]	; (8013f90 <dec_lock+0x74>)
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	011b      	lsls	r3, r3, #4
 8013f70:	4413      	add	r3, r2
 8013f72:	2200      	movs	r2, #0
 8013f74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013f76:	2300      	movs	r3, #0
 8013f78:	737b      	strb	r3, [r7, #13]
 8013f7a:	e001      	b.n	8013f80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013f7c:	2302      	movs	r3, #2
 8013f7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013f80:	7b7b      	ldrb	r3, [r7, #13]
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3714      	adds	r7, #20
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr
 8013f8e:	bf00      	nop
 8013f90:	200034bc 	.word	0x200034bc

08013f94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013f94:	b480      	push	{r7}
 8013f96:	b085      	sub	sp, #20
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	60fb      	str	r3, [r7, #12]
 8013fa0:	e010      	b.n	8013fc4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013fa2:	4a0d      	ldr	r2, [pc, #52]	; (8013fd8 <clear_lock+0x44>)
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	011b      	lsls	r3, r3, #4
 8013fa8:	4413      	add	r3, r2
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	687a      	ldr	r2, [r7, #4]
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d105      	bne.n	8013fbe <clear_lock+0x2a>
 8013fb2:	4a09      	ldr	r2, [pc, #36]	; (8013fd8 <clear_lock+0x44>)
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	011b      	lsls	r3, r3, #4
 8013fb8:	4413      	add	r3, r2
 8013fba:	2200      	movs	r2, #0
 8013fbc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	3301      	adds	r3, #1
 8013fc2:	60fb      	str	r3, [r7, #12]
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	2b13      	cmp	r3, #19
 8013fc8:	d9eb      	bls.n	8013fa2 <clear_lock+0xe>
	}
}
 8013fca:	bf00      	nop
 8013fcc:	bf00      	nop
 8013fce:	3714      	adds	r7, #20
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd6:	4770      	bx	lr
 8013fd8:	200034bc 	.word	0x200034bc

08013fdc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b086      	sub	sp, #24
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	78db      	ldrb	r3, [r3, #3]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d034      	beq.n	801405a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ff4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	7858      	ldrb	r0, [r3, #1]
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8014000:	2301      	movs	r3, #1
 8014002:	697a      	ldr	r2, [r7, #20]
 8014004:	f7ff fd38 	bl	8013a78 <disk_write>
 8014008:	4603      	mov	r3, r0
 801400a:	2b00      	cmp	r3, #0
 801400c:	d002      	beq.n	8014014 <sync_window+0x38>
			res = FR_DISK_ERR;
 801400e:	2301      	movs	r3, #1
 8014010:	73fb      	strb	r3, [r7, #15]
 8014012:	e022      	b.n	801405a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2200      	movs	r2, #0
 8014018:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801401e:	697a      	ldr	r2, [r7, #20]
 8014020:	1ad2      	subs	r2, r2, r3
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	69db      	ldr	r3, [r3, #28]
 8014026:	429a      	cmp	r2, r3
 8014028:	d217      	bcs.n	801405a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	789b      	ldrb	r3, [r3, #2]
 801402e:	613b      	str	r3, [r7, #16]
 8014030:	e010      	b.n	8014054 <sync_window+0x78>
					wsect += fs->fsize;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	69db      	ldr	r3, [r3, #28]
 8014036:	697a      	ldr	r2, [r7, #20]
 8014038:	4413      	add	r3, r2
 801403a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	7858      	ldrb	r0, [r3, #1]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8014046:	2301      	movs	r3, #1
 8014048:	697a      	ldr	r2, [r7, #20]
 801404a:	f7ff fd15 	bl	8013a78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	3b01      	subs	r3, #1
 8014052:	613b      	str	r3, [r7, #16]
 8014054:	693b      	ldr	r3, [r7, #16]
 8014056:	2b01      	cmp	r3, #1
 8014058:	d8eb      	bhi.n	8014032 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801405a:	7bfb      	ldrb	r3, [r7, #15]
}
 801405c:	4618      	mov	r0, r3
 801405e:	3718      	adds	r7, #24
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}

08014064 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b084      	sub	sp, #16
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
 801406c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801406e:	2300      	movs	r3, #0
 8014070:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014076:	683a      	ldr	r2, [r7, #0]
 8014078:	429a      	cmp	r2, r3
 801407a:	d01b      	beq.n	80140b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	f7ff ffad 	bl	8013fdc <sync_window>
 8014082:	4603      	mov	r3, r0
 8014084:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014086:	7bfb      	ldrb	r3, [r7, #15]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d113      	bne.n	80140b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	7858      	ldrb	r0, [r3, #1]
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8014096:	2301      	movs	r3, #1
 8014098:	683a      	ldr	r2, [r7, #0]
 801409a:	f7ff fccd 	bl	8013a38 <disk_read>
 801409e:	4603      	mov	r3, r0
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d004      	beq.n	80140ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80140a4:	f04f 33ff 	mov.w	r3, #4294967295
 80140a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80140aa:	2301      	movs	r3, #1
 80140ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	683a      	ldr	r2, [r7, #0]
 80140b2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80140b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3710      	adds	r7, #16
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}
	...

080140c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b084      	sub	sp, #16
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f7ff ff87 	bl	8013fdc <sync_window>
 80140ce:	4603      	mov	r3, r0
 80140d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80140d2:	7bfb      	ldrb	r3, [r7, #15]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d158      	bne.n	801418a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	781b      	ldrb	r3, [r3, #0]
 80140dc:	2b03      	cmp	r3, #3
 80140de:	d148      	bne.n	8014172 <sync_fs+0xb2>
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	791b      	ldrb	r3, [r3, #4]
 80140e4:	2b01      	cmp	r3, #1
 80140e6:	d144      	bne.n	8014172 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	3334      	adds	r3, #52	; 0x34
 80140ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80140f0:	2100      	movs	r1, #0
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7ff fda9 	bl	8013c4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	3334      	adds	r3, #52	; 0x34
 80140fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014100:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014104:	4618      	mov	r0, r3
 8014106:	f7ff fd38 	bl	8013b7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	3334      	adds	r3, #52	; 0x34
 801410e:	4921      	ldr	r1, [pc, #132]	; (8014194 <sync_fs+0xd4>)
 8014110:	4618      	mov	r0, r3
 8014112:	f7ff fd4d 	bl	8013bb0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	3334      	adds	r3, #52	; 0x34
 801411a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801411e:	491e      	ldr	r1, [pc, #120]	; (8014198 <sync_fs+0xd8>)
 8014120:	4618      	mov	r0, r3
 8014122:	f7ff fd45 	bl	8013bb0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	3334      	adds	r3, #52	; 0x34
 801412a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	695b      	ldr	r3, [r3, #20]
 8014132:	4619      	mov	r1, r3
 8014134:	4610      	mov	r0, r2
 8014136:	f7ff fd3b 	bl	8013bb0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	3334      	adds	r3, #52	; 0x34
 801413e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	691b      	ldr	r3, [r3, #16]
 8014146:	4619      	mov	r1, r3
 8014148:	4610      	mov	r0, r2
 801414a:	f7ff fd31 	bl	8013bb0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6a1b      	ldr	r3, [r3, #32]
 8014152:	1c5a      	adds	r2, r3, #1
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	7858      	ldrb	r0, [r3, #1]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014166:	2301      	movs	r3, #1
 8014168:	f7ff fc86 	bl	8013a78 <disk_write>
			fs->fsi_flag = 0;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2200      	movs	r2, #0
 8014170:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	785b      	ldrb	r3, [r3, #1]
 8014176:	2200      	movs	r2, #0
 8014178:	2100      	movs	r1, #0
 801417a:	4618      	mov	r0, r3
 801417c:	f7ff fc9c 	bl	8013ab8 <disk_ioctl>
 8014180:	4603      	mov	r3, r0
 8014182:	2b00      	cmp	r3, #0
 8014184:	d001      	beq.n	801418a <sync_fs+0xca>
 8014186:	2301      	movs	r3, #1
 8014188:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801418a:	7bfb      	ldrb	r3, [r7, #15]
}
 801418c:	4618      	mov	r0, r3
 801418e:	3710      	adds	r7, #16
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}
 8014194:	41615252 	.word	0x41615252
 8014198:	61417272 	.word	0x61417272

0801419c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801419c:	b480      	push	{r7}
 801419e:	b083      	sub	sp, #12
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
 80141a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80141a6:	683b      	ldr	r3, [r7, #0]
 80141a8:	3b02      	subs	r3, #2
 80141aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	699b      	ldr	r3, [r3, #24]
 80141b0:	3b02      	subs	r3, #2
 80141b2:	683a      	ldr	r2, [r7, #0]
 80141b4:	429a      	cmp	r2, r3
 80141b6:	d301      	bcc.n	80141bc <clust2sect+0x20>
 80141b8:	2300      	movs	r3, #0
 80141ba:	e008      	b.n	80141ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	895b      	ldrh	r3, [r3, #10]
 80141c0:	461a      	mov	r2, r3
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	fb03 f202 	mul.w	r2, r3, r2
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141cc:	4413      	add	r3, r2
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	370c      	adds	r7, #12
 80141d2:	46bd      	mov	sp, r7
 80141d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d8:	4770      	bx	lr

080141da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80141da:	b580      	push	{r7, lr}
 80141dc:	b086      	sub	sp, #24
 80141de:	af00      	add	r7, sp, #0
 80141e0:	6078      	str	r0, [r7, #4]
 80141e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d904      	bls.n	80141fa <get_fat+0x20>
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	699b      	ldr	r3, [r3, #24]
 80141f4:	683a      	ldr	r2, [r7, #0]
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d302      	bcc.n	8014200 <get_fat+0x26>
		val = 1;	/* Internal error */
 80141fa:	2301      	movs	r3, #1
 80141fc:	617b      	str	r3, [r7, #20]
 80141fe:	e08f      	b.n	8014320 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014200:	f04f 33ff 	mov.w	r3, #4294967295
 8014204:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	2b03      	cmp	r3, #3
 801420c:	d062      	beq.n	80142d4 <get_fat+0xfa>
 801420e:	2b03      	cmp	r3, #3
 8014210:	dc7c      	bgt.n	801430c <get_fat+0x132>
 8014212:	2b01      	cmp	r3, #1
 8014214:	d002      	beq.n	801421c <get_fat+0x42>
 8014216:	2b02      	cmp	r3, #2
 8014218:	d042      	beq.n	80142a0 <get_fat+0xc6>
 801421a:	e077      	b.n	801430c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801421c:	683b      	ldr	r3, [r7, #0]
 801421e:	60fb      	str	r3, [r7, #12]
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	085b      	lsrs	r3, r3, #1
 8014224:	68fa      	ldr	r2, [r7, #12]
 8014226:	4413      	add	r3, r2
 8014228:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	0a5b      	lsrs	r3, r3, #9
 8014232:	4413      	add	r3, r2
 8014234:	4619      	mov	r1, r3
 8014236:	6938      	ldr	r0, [r7, #16]
 8014238:	f7ff ff14 	bl	8014064 <move_window>
 801423c:	4603      	mov	r3, r0
 801423e:	2b00      	cmp	r3, #0
 8014240:	d167      	bne.n	8014312 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	1c5a      	adds	r2, r3, #1
 8014246:	60fa      	str	r2, [r7, #12]
 8014248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801424c:	693a      	ldr	r2, [r7, #16]
 801424e:	4413      	add	r3, r2
 8014250:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014254:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014256:	693b      	ldr	r3, [r7, #16]
 8014258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	0a5b      	lsrs	r3, r3, #9
 801425e:	4413      	add	r3, r2
 8014260:	4619      	mov	r1, r3
 8014262:	6938      	ldr	r0, [r7, #16]
 8014264:	f7ff fefe 	bl	8014064 <move_window>
 8014268:	4603      	mov	r3, r0
 801426a:	2b00      	cmp	r3, #0
 801426c:	d153      	bne.n	8014316 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014274:	693a      	ldr	r2, [r7, #16]
 8014276:	4413      	add	r3, r2
 8014278:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801427c:	021b      	lsls	r3, r3, #8
 801427e:	461a      	mov	r2, r3
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	4313      	orrs	r3, r2
 8014284:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014286:	683b      	ldr	r3, [r7, #0]
 8014288:	f003 0301 	and.w	r3, r3, #1
 801428c:	2b00      	cmp	r3, #0
 801428e:	d002      	beq.n	8014296 <get_fat+0xbc>
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	091b      	lsrs	r3, r3, #4
 8014294:	e002      	b.n	801429c <get_fat+0xc2>
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801429c:	617b      	str	r3, [r7, #20]
			break;
 801429e:	e03f      	b.n	8014320 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80142a0:	693b      	ldr	r3, [r7, #16]
 80142a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	0a1b      	lsrs	r3, r3, #8
 80142a8:	4413      	add	r3, r2
 80142aa:	4619      	mov	r1, r3
 80142ac:	6938      	ldr	r0, [r7, #16]
 80142ae:	f7ff fed9 	bl	8014064 <move_window>
 80142b2:	4603      	mov	r3, r0
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d130      	bne.n	801431a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80142be:	683b      	ldr	r3, [r7, #0]
 80142c0:	005b      	lsls	r3, r3, #1
 80142c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80142c6:	4413      	add	r3, r2
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7ff fc1b 	bl	8013b04 <ld_word>
 80142ce:	4603      	mov	r3, r0
 80142d0:	617b      	str	r3, [r7, #20]
			break;
 80142d2:	e025      	b.n	8014320 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80142d4:	693b      	ldr	r3, [r7, #16]
 80142d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	09db      	lsrs	r3, r3, #7
 80142dc:	4413      	add	r3, r2
 80142de:	4619      	mov	r1, r3
 80142e0:	6938      	ldr	r0, [r7, #16]
 80142e2:	f7ff febf 	bl	8014064 <move_window>
 80142e6:	4603      	mov	r3, r0
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d118      	bne.n	801431e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	009b      	lsls	r3, r3, #2
 80142f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80142fa:	4413      	add	r3, r2
 80142fc:	4618      	mov	r0, r3
 80142fe:	f7ff fc19 	bl	8013b34 <ld_dword>
 8014302:	4603      	mov	r3, r0
 8014304:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014308:	617b      	str	r3, [r7, #20]
			break;
 801430a:	e009      	b.n	8014320 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801430c:	2301      	movs	r3, #1
 801430e:	617b      	str	r3, [r7, #20]
 8014310:	e006      	b.n	8014320 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014312:	bf00      	nop
 8014314:	e004      	b.n	8014320 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014316:	bf00      	nop
 8014318:	e002      	b.n	8014320 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801431a:	bf00      	nop
 801431c:	e000      	b.n	8014320 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801431e:	bf00      	nop
		}
	}

	return val;
 8014320:	697b      	ldr	r3, [r7, #20]
}
 8014322:	4618      	mov	r0, r3
 8014324:	3718      	adds	r7, #24
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}

0801432a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801432a:	b590      	push	{r4, r7, lr}
 801432c:	b089      	sub	sp, #36	; 0x24
 801432e:	af00      	add	r7, sp, #0
 8014330:	60f8      	str	r0, [r7, #12]
 8014332:	60b9      	str	r1, [r7, #8]
 8014334:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8014336:	2302      	movs	r3, #2
 8014338:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	2b01      	cmp	r3, #1
 801433e:	f240 80d2 	bls.w	80144e6 <put_fat+0x1bc>
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	699b      	ldr	r3, [r3, #24]
 8014346:	68ba      	ldr	r2, [r7, #8]
 8014348:	429a      	cmp	r2, r3
 801434a:	f080 80cc 	bcs.w	80144e6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	2b03      	cmp	r3, #3
 8014354:	f000 8096 	beq.w	8014484 <put_fat+0x15a>
 8014358:	2b03      	cmp	r3, #3
 801435a:	f300 80cd 	bgt.w	80144f8 <put_fat+0x1ce>
 801435e:	2b01      	cmp	r3, #1
 8014360:	d002      	beq.n	8014368 <put_fat+0x3e>
 8014362:	2b02      	cmp	r3, #2
 8014364:	d06e      	beq.n	8014444 <put_fat+0x11a>
 8014366:	e0c7      	b.n	80144f8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	61bb      	str	r3, [r7, #24]
 801436c:	69bb      	ldr	r3, [r7, #24]
 801436e:	085b      	lsrs	r3, r3, #1
 8014370:	69ba      	ldr	r2, [r7, #24]
 8014372:	4413      	add	r3, r2
 8014374:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801437a:	69bb      	ldr	r3, [r7, #24]
 801437c:	0a5b      	lsrs	r3, r3, #9
 801437e:	4413      	add	r3, r2
 8014380:	4619      	mov	r1, r3
 8014382:	68f8      	ldr	r0, [r7, #12]
 8014384:	f7ff fe6e 	bl	8014064 <move_window>
 8014388:	4603      	mov	r3, r0
 801438a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801438c:	7ffb      	ldrb	r3, [r7, #31]
 801438e:	2b00      	cmp	r3, #0
 8014390:	f040 80ab 	bne.w	80144ea <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801439a:	69bb      	ldr	r3, [r7, #24]
 801439c:	1c59      	adds	r1, r3, #1
 801439e:	61b9      	str	r1, [r7, #24]
 80143a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143a4:	4413      	add	r3, r2
 80143a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	f003 0301 	and.w	r3, r3, #1
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d00d      	beq.n	80143ce <put_fat+0xa4>
 80143b2:	697b      	ldr	r3, [r7, #20]
 80143b4:	781b      	ldrb	r3, [r3, #0]
 80143b6:	b25b      	sxtb	r3, r3
 80143b8:	f003 030f 	and.w	r3, r3, #15
 80143bc:	b25a      	sxtb	r2, r3
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	b2db      	uxtb	r3, r3
 80143c2:	011b      	lsls	r3, r3, #4
 80143c4:	b25b      	sxtb	r3, r3
 80143c6:	4313      	orrs	r3, r2
 80143c8:	b25b      	sxtb	r3, r3
 80143ca:	b2db      	uxtb	r3, r3
 80143cc:	e001      	b.n	80143d2 <put_fat+0xa8>
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	b2db      	uxtb	r3, r3
 80143d2:	697a      	ldr	r2, [r7, #20]
 80143d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	2201      	movs	r2, #1
 80143da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80143e0:	69bb      	ldr	r3, [r7, #24]
 80143e2:	0a5b      	lsrs	r3, r3, #9
 80143e4:	4413      	add	r3, r2
 80143e6:	4619      	mov	r1, r3
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f7ff fe3b 	bl	8014064 <move_window>
 80143ee:	4603      	mov	r3, r0
 80143f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80143f2:	7ffb      	ldrb	r3, [r7, #31]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d17a      	bne.n	80144ee <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80143fe:	69bb      	ldr	r3, [r7, #24]
 8014400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014404:	4413      	add	r3, r2
 8014406:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	f003 0301 	and.w	r3, r3, #1
 801440e:	2b00      	cmp	r3, #0
 8014410:	d003      	beq.n	801441a <put_fat+0xf0>
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	091b      	lsrs	r3, r3, #4
 8014416:	b2db      	uxtb	r3, r3
 8014418:	e00e      	b.n	8014438 <put_fat+0x10e>
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	781b      	ldrb	r3, [r3, #0]
 801441e:	b25b      	sxtb	r3, r3
 8014420:	f023 030f 	bic.w	r3, r3, #15
 8014424:	b25a      	sxtb	r2, r3
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	0a1b      	lsrs	r3, r3, #8
 801442a:	b25b      	sxtb	r3, r3
 801442c:	f003 030f 	and.w	r3, r3, #15
 8014430:	b25b      	sxtb	r3, r3
 8014432:	4313      	orrs	r3, r2
 8014434:	b25b      	sxtb	r3, r3
 8014436:	b2db      	uxtb	r3, r3
 8014438:	697a      	ldr	r2, [r7, #20]
 801443a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	2201      	movs	r2, #1
 8014440:	70da      	strb	r2, [r3, #3]
			break;
 8014442:	e059      	b.n	80144f8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	0a1b      	lsrs	r3, r3, #8
 801444c:	4413      	add	r3, r2
 801444e:	4619      	mov	r1, r3
 8014450:	68f8      	ldr	r0, [r7, #12]
 8014452:	f7ff fe07 	bl	8014064 <move_window>
 8014456:	4603      	mov	r3, r0
 8014458:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801445a:	7ffb      	ldrb	r3, [r7, #31]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d148      	bne.n	80144f2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	005b      	lsls	r3, r3, #1
 801446a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801446e:	4413      	add	r3, r2
 8014470:	687a      	ldr	r2, [r7, #4]
 8014472:	b292      	uxth	r2, r2
 8014474:	4611      	mov	r1, r2
 8014476:	4618      	mov	r0, r3
 8014478:	f7ff fb7f 	bl	8013b7a <st_word>
			fs->wflag = 1;
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	2201      	movs	r2, #1
 8014480:	70da      	strb	r2, [r3, #3]
			break;
 8014482:	e039      	b.n	80144f8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014488:	68bb      	ldr	r3, [r7, #8]
 801448a:	09db      	lsrs	r3, r3, #7
 801448c:	4413      	add	r3, r2
 801448e:	4619      	mov	r1, r3
 8014490:	68f8      	ldr	r0, [r7, #12]
 8014492:	f7ff fde7 	bl	8014064 <move_window>
 8014496:	4603      	mov	r3, r0
 8014498:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801449a:	7ffb      	ldrb	r3, [r7, #31]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d12a      	bne.n	80144f6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	009b      	lsls	r3, r3, #2
 80144b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80144b4:	4413      	add	r3, r2
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7ff fb3c 	bl	8013b34 <ld_dword>
 80144bc:	4603      	mov	r3, r0
 80144be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80144c2:	4323      	orrs	r3, r4
 80144c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80144d4:	4413      	add	r3, r2
 80144d6:	6879      	ldr	r1, [r7, #4]
 80144d8:	4618      	mov	r0, r3
 80144da:	f7ff fb69 	bl	8013bb0 <st_dword>
			fs->wflag = 1;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	2201      	movs	r2, #1
 80144e2:	70da      	strb	r2, [r3, #3]
			break;
 80144e4:	e008      	b.n	80144f8 <put_fat+0x1ce>
		}
	}
 80144e6:	bf00      	nop
 80144e8:	e006      	b.n	80144f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80144ea:	bf00      	nop
 80144ec:	e004      	b.n	80144f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80144ee:	bf00      	nop
 80144f0:	e002      	b.n	80144f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80144f2:	bf00      	nop
 80144f4:	e000      	b.n	80144f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80144f6:	bf00      	nop
	return res;
 80144f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3724      	adds	r7, #36	; 0x24
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd90      	pop	{r4, r7, pc}

08014502 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014502:	b580      	push	{r7, lr}
 8014504:	b088      	sub	sp, #32
 8014506:	af00      	add	r7, sp, #0
 8014508:	60f8      	str	r0, [r7, #12]
 801450a:	60b9      	str	r1, [r7, #8]
 801450c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801450e:	2300      	movs	r3, #0
 8014510:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	2b01      	cmp	r3, #1
 801451c:	d904      	bls.n	8014528 <remove_chain+0x26>
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	699b      	ldr	r3, [r3, #24]
 8014522:	68ba      	ldr	r2, [r7, #8]
 8014524:	429a      	cmp	r2, r3
 8014526:	d301      	bcc.n	801452c <remove_chain+0x2a>
 8014528:	2302      	movs	r3, #2
 801452a:	e04b      	b.n	80145c4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d00c      	beq.n	801454c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014532:	f04f 32ff 	mov.w	r2, #4294967295
 8014536:	6879      	ldr	r1, [r7, #4]
 8014538:	69b8      	ldr	r0, [r7, #24]
 801453a:	f7ff fef6 	bl	801432a <put_fat>
 801453e:	4603      	mov	r3, r0
 8014540:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014542:	7ffb      	ldrb	r3, [r7, #31]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d001      	beq.n	801454c <remove_chain+0x4a>
 8014548:	7ffb      	ldrb	r3, [r7, #31]
 801454a:	e03b      	b.n	80145c4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801454c:	68b9      	ldr	r1, [r7, #8]
 801454e:	68f8      	ldr	r0, [r7, #12]
 8014550:	f7ff fe43 	bl	80141da <get_fat>
 8014554:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d031      	beq.n	80145c0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801455c:	697b      	ldr	r3, [r7, #20]
 801455e:	2b01      	cmp	r3, #1
 8014560:	d101      	bne.n	8014566 <remove_chain+0x64>
 8014562:	2302      	movs	r3, #2
 8014564:	e02e      	b.n	80145c4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801456c:	d101      	bne.n	8014572 <remove_chain+0x70>
 801456e:	2301      	movs	r3, #1
 8014570:	e028      	b.n	80145c4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014572:	2200      	movs	r2, #0
 8014574:	68b9      	ldr	r1, [r7, #8]
 8014576:	69b8      	ldr	r0, [r7, #24]
 8014578:	f7ff fed7 	bl	801432a <put_fat>
 801457c:	4603      	mov	r3, r0
 801457e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014580:	7ffb      	ldrb	r3, [r7, #31]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d001      	beq.n	801458a <remove_chain+0x88>
 8014586:	7ffb      	ldrb	r3, [r7, #31]
 8014588:	e01c      	b.n	80145c4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801458a:	69bb      	ldr	r3, [r7, #24]
 801458c:	695a      	ldr	r2, [r3, #20]
 801458e:	69bb      	ldr	r3, [r7, #24]
 8014590:	699b      	ldr	r3, [r3, #24]
 8014592:	3b02      	subs	r3, #2
 8014594:	429a      	cmp	r2, r3
 8014596:	d20b      	bcs.n	80145b0 <remove_chain+0xae>
			fs->free_clst++;
 8014598:	69bb      	ldr	r3, [r7, #24]
 801459a:	695b      	ldr	r3, [r3, #20]
 801459c:	1c5a      	adds	r2, r3, #1
 801459e:	69bb      	ldr	r3, [r7, #24]
 80145a0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80145a2:	69bb      	ldr	r3, [r7, #24]
 80145a4:	791b      	ldrb	r3, [r3, #4]
 80145a6:	f043 0301 	orr.w	r3, r3, #1
 80145aa:	b2da      	uxtb	r2, r3
 80145ac:	69bb      	ldr	r3, [r7, #24]
 80145ae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80145b0:	697b      	ldr	r3, [r7, #20]
 80145b2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80145b4:	69bb      	ldr	r3, [r7, #24]
 80145b6:	699b      	ldr	r3, [r3, #24]
 80145b8:	68ba      	ldr	r2, [r7, #8]
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d3c6      	bcc.n	801454c <remove_chain+0x4a>
 80145be:	e000      	b.n	80145c2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80145c0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80145c2:	2300      	movs	r3, #0
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3720      	adds	r7, #32
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b088      	sub	sp, #32
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d10d      	bne.n	80145fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80145e2:	693b      	ldr	r3, [r7, #16]
 80145e4:	691b      	ldr	r3, [r3, #16]
 80145e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d004      	beq.n	80145f8 <create_chain+0x2c>
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	699b      	ldr	r3, [r3, #24]
 80145f2:	69ba      	ldr	r2, [r7, #24]
 80145f4:	429a      	cmp	r2, r3
 80145f6:	d31b      	bcc.n	8014630 <create_chain+0x64>
 80145f8:	2301      	movs	r3, #1
 80145fa:	61bb      	str	r3, [r7, #24]
 80145fc:	e018      	b.n	8014630 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80145fe:	6839      	ldr	r1, [r7, #0]
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f7ff fdea 	bl	80141da <get_fat>
 8014606:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	2b01      	cmp	r3, #1
 801460c:	d801      	bhi.n	8014612 <create_chain+0x46>
 801460e:	2301      	movs	r3, #1
 8014610:	e070      	b.n	80146f4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014618:	d101      	bne.n	801461e <create_chain+0x52>
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	e06a      	b.n	80146f4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801461e:	693b      	ldr	r3, [r7, #16]
 8014620:	699b      	ldr	r3, [r3, #24]
 8014622:	68fa      	ldr	r2, [r7, #12]
 8014624:	429a      	cmp	r2, r3
 8014626:	d201      	bcs.n	801462c <create_chain+0x60>
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	e063      	b.n	80146f4 <create_chain+0x128>
		scl = clst;
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014630:	69bb      	ldr	r3, [r7, #24]
 8014632:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014634:	69fb      	ldr	r3, [r7, #28]
 8014636:	3301      	adds	r3, #1
 8014638:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801463a:	693b      	ldr	r3, [r7, #16]
 801463c:	699b      	ldr	r3, [r3, #24]
 801463e:	69fa      	ldr	r2, [r7, #28]
 8014640:	429a      	cmp	r2, r3
 8014642:	d307      	bcc.n	8014654 <create_chain+0x88>
				ncl = 2;
 8014644:	2302      	movs	r3, #2
 8014646:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014648:	69fa      	ldr	r2, [r7, #28]
 801464a:	69bb      	ldr	r3, [r7, #24]
 801464c:	429a      	cmp	r2, r3
 801464e:	d901      	bls.n	8014654 <create_chain+0x88>
 8014650:	2300      	movs	r3, #0
 8014652:	e04f      	b.n	80146f4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014654:	69f9      	ldr	r1, [r7, #28]
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f7ff fdbf 	bl	80141da <get_fat>
 801465c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d00e      	beq.n	8014682 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	2b01      	cmp	r3, #1
 8014668:	d003      	beq.n	8014672 <create_chain+0xa6>
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014670:	d101      	bne.n	8014676 <create_chain+0xaa>
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	e03e      	b.n	80146f4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8014676:	69fa      	ldr	r2, [r7, #28]
 8014678:	69bb      	ldr	r3, [r7, #24]
 801467a:	429a      	cmp	r2, r3
 801467c:	d1da      	bne.n	8014634 <create_chain+0x68>
 801467e:	2300      	movs	r3, #0
 8014680:	e038      	b.n	80146f4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014682:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014684:	f04f 32ff 	mov.w	r2, #4294967295
 8014688:	69f9      	ldr	r1, [r7, #28]
 801468a:	6938      	ldr	r0, [r7, #16]
 801468c:	f7ff fe4d 	bl	801432a <put_fat>
 8014690:	4603      	mov	r3, r0
 8014692:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8014694:	7dfb      	ldrb	r3, [r7, #23]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d109      	bne.n	80146ae <create_chain+0xe2>
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d006      	beq.n	80146ae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80146a0:	69fa      	ldr	r2, [r7, #28]
 80146a2:	6839      	ldr	r1, [r7, #0]
 80146a4:	6938      	ldr	r0, [r7, #16]
 80146a6:	f7ff fe40 	bl	801432a <put_fat>
 80146aa:	4603      	mov	r3, r0
 80146ac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80146ae:	7dfb      	ldrb	r3, [r7, #23]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d116      	bne.n	80146e2 <create_chain+0x116>
		fs->last_clst = ncl;
 80146b4:	693b      	ldr	r3, [r7, #16]
 80146b6:	69fa      	ldr	r2, [r7, #28]
 80146b8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	695a      	ldr	r2, [r3, #20]
 80146be:	693b      	ldr	r3, [r7, #16]
 80146c0:	699b      	ldr	r3, [r3, #24]
 80146c2:	3b02      	subs	r3, #2
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d804      	bhi.n	80146d2 <create_chain+0x106>
 80146c8:	693b      	ldr	r3, [r7, #16]
 80146ca:	695b      	ldr	r3, [r3, #20]
 80146cc:	1e5a      	subs	r2, r3, #1
 80146ce:	693b      	ldr	r3, [r7, #16]
 80146d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80146d2:	693b      	ldr	r3, [r7, #16]
 80146d4:	791b      	ldrb	r3, [r3, #4]
 80146d6:	f043 0301 	orr.w	r3, r3, #1
 80146da:	b2da      	uxtb	r2, r3
 80146dc:	693b      	ldr	r3, [r7, #16]
 80146de:	711a      	strb	r2, [r3, #4]
 80146e0:	e007      	b.n	80146f2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80146e2:	7dfb      	ldrb	r3, [r7, #23]
 80146e4:	2b01      	cmp	r3, #1
 80146e6:	d102      	bne.n	80146ee <create_chain+0x122>
 80146e8:	f04f 33ff 	mov.w	r3, #4294967295
 80146ec:	e000      	b.n	80146f0 <create_chain+0x124>
 80146ee:	2301      	movs	r3, #1
 80146f0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80146f2:	69fb      	ldr	r3, [r7, #28]
}
 80146f4:	4618      	mov	r0, r3
 80146f6:	3720      	adds	r7, #32
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}

080146fc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80146fc:	b480      	push	{r7}
 80146fe:	b087      	sub	sp, #28
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
 8014704:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014710:	3304      	adds	r3, #4
 8014712:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	0a5b      	lsrs	r3, r3, #9
 8014718:	68fa      	ldr	r2, [r7, #12]
 801471a:	8952      	ldrh	r2, [r2, #10]
 801471c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014720:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	1d1a      	adds	r2, r3, #4
 8014726:	613a      	str	r2, [r7, #16]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d101      	bne.n	8014736 <clmt_clust+0x3a>
 8014732:	2300      	movs	r3, #0
 8014734:	e010      	b.n	8014758 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8014736:	697a      	ldr	r2, [r7, #20]
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	429a      	cmp	r2, r3
 801473c:	d307      	bcc.n	801474e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801473e:	697a      	ldr	r2, [r7, #20]
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	1ad3      	subs	r3, r2, r3
 8014744:	617b      	str	r3, [r7, #20]
 8014746:	693b      	ldr	r3, [r7, #16]
 8014748:	3304      	adds	r3, #4
 801474a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801474c:	e7e9      	b.n	8014722 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801474e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	681a      	ldr	r2, [r3, #0]
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	4413      	add	r3, r2
}
 8014758:	4618      	mov	r0, r3
 801475a:	371c      	adds	r7, #28
 801475c:	46bd      	mov	sp, r7
 801475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014762:	4770      	bx	lr

08014764 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b086      	sub	sp, #24
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
 801476c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801477a:	d204      	bcs.n	8014786 <dir_sdi+0x22>
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	f003 031f 	and.w	r3, r3, #31
 8014782:	2b00      	cmp	r3, #0
 8014784:	d001      	beq.n	801478a <dir_sdi+0x26>
		return FR_INT_ERR;
 8014786:	2302      	movs	r3, #2
 8014788:	e063      	b.n	8014852 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	683a      	ldr	r2, [r7, #0]
 801478e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	689b      	ldr	r3, [r3, #8]
 8014794:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d106      	bne.n	80147aa <dir_sdi+0x46>
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	781b      	ldrb	r3, [r3, #0]
 80147a0:	2b02      	cmp	r3, #2
 80147a2:	d902      	bls.n	80147aa <dir_sdi+0x46>
		clst = fs->dirbase;
 80147a4:	693b      	ldr	r3, [r7, #16]
 80147a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147a8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d10c      	bne.n	80147ca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	095b      	lsrs	r3, r3, #5
 80147b4:	693a      	ldr	r2, [r7, #16]
 80147b6:	8912      	ldrh	r2, [r2, #8]
 80147b8:	4293      	cmp	r3, r2
 80147ba:	d301      	bcc.n	80147c0 <dir_sdi+0x5c>
 80147bc:	2302      	movs	r3, #2
 80147be:	e048      	b.n	8014852 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80147c0:	693b      	ldr	r3, [r7, #16]
 80147c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	61da      	str	r2, [r3, #28]
 80147c8:	e029      	b.n	801481e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	895b      	ldrh	r3, [r3, #10]
 80147ce:	025b      	lsls	r3, r3, #9
 80147d0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80147d2:	e019      	b.n	8014808 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6979      	ldr	r1, [r7, #20]
 80147d8:	4618      	mov	r0, r3
 80147da:	f7ff fcfe 	bl	80141da <get_fat>
 80147de:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147e6:	d101      	bne.n	80147ec <dir_sdi+0x88>
 80147e8:	2301      	movs	r3, #1
 80147ea:	e032      	b.n	8014852 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	2b01      	cmp	r3, #1
 80147f0:	d904      	bls.n	80147fc <dir_sdi+0x98>
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	699b      	ldr	r3, [r3, #24]
 80147f6:	697a      	ldr	r2, [r7, #20]
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d301      	bcc.n	8014800 <dir_sdi+0x9c>
 80147fc:	2302      	movs	r3, #2
 80147fe:	e028      	b.n	8014852 <dir_sdi+0xee>
			ofs -= csz;
 8014800:	683a      	ldr	r2, [r7, #0]
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	1ad3      	subs	r3, r2, r3
 8014806:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014808:	683a      	ldr	r2, [r7, #0]
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	429a      	cmp	r2, r3
 801480e:	d2e1      	bcs.n	80147d4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8014810:	6979      	ldr	r1, [r7, #20]
 8014812:	6938      	ldr	r0, [r7, #16]
 8014814:	f7ff fcc2 	bl	801419c <clust2sect>
 8014818:	4602      	mov	r2, r0
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	697a      	ldr	r2, [r7, #20]
 8014822:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	69db      	ldr	r3, [r3, #28]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d101      	bne.n	8014830 <dir_sdi+0xcc>
 801482c:	2302      	movs	r3, #2
 801482e:	e010      	b.n	8014852 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	69da      	ldr	r2, [r3, #28]
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	0a5b      	lsrs	r3, r3, #9
 8014838:	441a      	add	r2, r3
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801483e:	693b      	ldr	r3, [r7, #16]
 8014840:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801484a:	441a      	add	r2, r3
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8014850:	2300      	movs	r3, #0
}
 8014852:	4618      	mov	r0, r3
 8014854:	3718      	adds	r7, #24
 8014856:	46bd      	mov	sp, r7
 8014858:	bd80      	pop	{r7, pc}

0801485a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801485a:	b580      	push	{r7, lr}
 801485c:	b086      	sub	sp, #24
 801485e:	af00      	add	r7, sp, #0
 8014860:	6078      	str	r0, [r7, #4]
 8014862:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	695b      	ldr	r3, [r3, #20]
 801486e:	3320      	adds	r3, #32
 8014870:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	69db      	ldr	r3, [r3, #28]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d003      	beq.n	8014882 <dir_next+0x28>
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014880:	d301      	bcc.n	8014886 <dir_next+0x2c>
 8014882:	2304      	movs	r3, #4
 8014884:	e0aa      	b.n	80149dc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014886:	68bb      	ldr	r3, [r7, #8]
 8014888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801488c:	2b00      	cmp	r3, #0
 801488e:	f040 8098 	bne.w	80149c2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	69db      	ldr	r3, [r3, #28]
 8014896:	1c5a      	adds	r2, r3, #1
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	699b      	ldr	r3, [r3, #24]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d10b      	bne.n	80148bc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	095b      	lsrs	r3, r3, #5
 80148a8:	68fa      	ldr	r2, [r7, #12]
 80148aa:	8912      	ldrh	r2, [r2, #8]
 80148ac:	4293      	cmp	r3, r2
 80148ae:	f0c0 8088 	bcc.w	80149c2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2200      	movs	r2, #0
 80148b6:	61da      	str	r2, [r3, #28]
 80148b8:	2304      	movs	r3, #4
 80148ba:	e08f      	b.n	80149dc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80148bc:	68bb      	ldr	r3, [r7, #8]
 80148be:	0a5b      	lsrs	r3, r3, #9
 80148c0:	68fa      	ldr	r2, [r7, #12]
 80148c2:	8952      	ldrh	r2, [r2, #10]
 80148c4:	3a01      	subs	r2, #1
 80148c6:	4013      	ands	r3, r2
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d17a      	bne.n	80149c2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80148cc:	687a      	ldr	r2, [r7, #4]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	699b      	ldr	r3, [r3, #24]
 80148d2:	4619      	mov	r1, r3
 80148d4:	4610      	mov	r0, r2
 80148d6:	f7ff fc80 	bl	80141da <get_fat>
 80148da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80148dc:	697b      	ldr	r3, [r7, #20]
 80148de:	2b01      	cmp	r3, #1
 80148e0:	d801      	bhi.n	80148e6 <dir_next+0x8c>
 80148e2:	2302      	movs	r3, #2
 80148e4:	e07a      	b.n	80149dc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148ec:	d101      	bne.n	80148f2 <dir_next+0x98>
 80148ee:	2301      	movs	r3, #1
 80148f0:	e074      	b.n	80149dc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	699b      	ldr	r3, [r3, #24]
 80148f6:	697a      	ldr	r2, [r7, #20]
 80148f8:	429a      	cmp	r2, r3
 80148fa:	d358      	bcc.n	80149ae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d104      	bne.n	801490c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	2200      	movs	r2, #0
 8014906:	61da      	str	r2, [r3, #28]
 8014908:	2304      	movs	r3, #4
 801490a:	e067      	b.n	80149dc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801490c:	687a      	ldr	r2, [r7, #4]
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	699b      	ldr	r3, [r3, #24]
 8014912:	4619      	mov	r1, r3
 8014914:	4610      	mov	r0, r2
 8014916:	f7ff fe59 	bl	80145cc <create_chain>
 801491a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d101      	bne.n	8014926 <dir_next+0xcc>
 8014922:	2307      	movs	r3, #7
 8014924:	e05a      	b.n	80149dc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8014926:	697b      	ldr	r3, [r7, #20]
 8014928:	2b01      	cmp	r3, #1
 801492a:	d101      	bne.n	8014930 <dir_next+0xd6>
 801492c:	2302      	movs	r3, #2
 801492e:	e055      	b.n	80149dc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014936:	d101      	bne.n	801493c <dir_next+0xe2>
 8014938:	2301      	movs	r3, #1
 801493a:	e04f      	b.n	80149dc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801493c:	68f8      	ldr	r0, [r7, #12]
 801493e:	f7ff fb4d 	bl	8013fdc <sync_window>
 8014942:	4603      	mov	r3, r0
 8014944:	2b00      	cmp	r3, #0
 8014946:	d001      	beq.n	801494c <dir_next+0xf2>
 8014948:	2301      	movs	r3, #1
 801494a:	e047      	b.n	80149dc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	3334      	adds	r3, #52	; 0x34
 8014950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014954:	2100      	movs	r1, #0
 8014956:	4618      	mov	r0, r3
 8014958:	f7ff f977 	bl	8013c4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801495c:	2300      	movs	r3, #0
 801495e:	613b      	str	r3, [r7, #16]
 8014960:	6979      	ldr	r1, [r7, #20]
 8014962:	68f8      	ldr	r0, [r7, #12]
 8014964:	f7ff fc1a 	bl	801419c <clust2sect>
 8014968:	4602      	mov	r2, r0
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	631a      	str	r2, [r3, #48]	; 0x30
 801496e:	e012      	b.n	8014996 <dir_next+0x13c>
						fs->wflag = 1;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	2201      	movs	r2, #1
 8014974:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8014976:	68f8      	ldr	r0, [r7, #12]
 8014978:	f7ff fb30 	bl	8013fdc <sync_window>
 801497c:	4603      	mov	r3, r0
 801497e:	2b00      	cmp	r3, #0
 8014980:	d001      	beq.n	8014986 <dir_next+0x12c>
 8014982:	2301      	movs	r3, #1
 8014984:	e02a      	b.n	80149dc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	3301      	adds	r3, #1
 801498a:	613b      	str	r3, [r7, #16]
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014990:	1c5a      	adds	r2, r3, #1
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	631a      	str	r2, [r3, #48]	; 0x30
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	895b      	ldrh	r3, [r3, #10]
 801499a:	461a      	mov	r2, r3
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	4293      	cmp	r3, r2
 80149a0:	d3e6      	bcc.n	8014970 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	1ad2      	subs	r2, r2, r3
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	697a      	ldr	r2, [r7, #20]
 80149b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80149b4:	6979      	ldr	r1, [r7, #20]
 80149b6:	68f8      	ldr	r0, [r7, #12]
 80149b8:	f7ff fbf0 	bl	801419c <clust2sect>
 80149bc:	4602      	mov	r2, r0
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	68ba      	ldr	r2, [r7, #8]
 80149c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80149d4:	441a      	add	r2, r3
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80149da:	2300      	movs	r3, #0
}
 80149dc:	4618      	mov	r0, r3
 80149de:	3718      	adds	r7, #24
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b086      	sub	sp, #24
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80149f4:	2100      	movs	r1, #0
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f7ff feb4 	bl	8014764 <dir_sdi>
 80149fc:	4603      	mov	r3, r0
 80149fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014a00:	7dfb      	ldrb	r3, [r7, #23]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d12b      	bne.n	8014a5e <dir_alloc+0x7a>
		n = 0;
 8014a06:	2300      	movs	r3, #0
 8014a08:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	69db      	ldr	r3, [r3, #28]
 8014a0e:	4619      	mov	r1, r3
 8014a10:	68f8      	ldr	r0, [r7, #12]
 8014a12:	f7ff fb27 	bl	8014064 <move_window>
 8014a16:	4603      	mov	r3, r0
 8014a18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014a1a:	7dfb      	ldrb	r3, [r7, #23]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d11d      	bne.n	8014a5c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6a1b      	ldr	r3, [r3, #32]
 8014a24:	781b      	ldrb	r3, [r3, #0]
 8014a26:	2be5      	cmp	r3, #229	; 0xe5
 8014a28:	d004      	beq.n	8014a34 <dir_alloc+0x50>
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	6a1b      	ldr	r3, [r3, #32]
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d107      	bne.n	8014a44 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014a34:	693b      	ldr	r3, [r7, #16]
 8014a36:	3301      	adds	r3, #1
 8014a38:	613b      	str	r3, [r7, #16]
 8014a3a:	693a      	ldr	r2, [r7, #16]
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d102      	bne.n	8014a48 <dir_alloc+0x64>
 8014a42:	e00c      	b.n	8014a5e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014a44:	2300      	movs	r3, #0
 8014a46:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8014a48:	2101      	movs	r1, #1
 8014a4a:	6878      	ldr	r0, [r7, #4]
 8014a4c:	f7ff ff05 	bl	801485a <dir_next>
 8014a50:	4603      	mov	r3, r0
 8014a52:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014a54:	7dfb      	ldrb	r3, [r7, #23]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d0d7      	beq.n	8014a0a <dir_alloc+0x26>
 8014a5a:	e000      	b.n	8014a5e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8014a5c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014a5e:	7dfb      	ldrb	r3, [r7, #23]
 8014a60:	2b04      	cmp	r3, #4
 8014a62:	d101      	bne.n	8014a68 <dir_alloc+0x84>
 8014a64:	2307      	movs	r3, #7
 8014a66:	75fb      	strb	r3, [r7, #23]
	return res;
 8014a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	3718      	adds	r7, #24
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	bd80      	pop	{r7, pc}

08014a72 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014a72:	b580      	push	{r7, lr}
 8014a74:	b084      	sub	sp, #16
 8014a76:	af00      	add	r7, sp, #0
 8014a78:	6078      	str	r0, [r7, #4]
 8014a7a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	331a      	adds	r3, #26
 8014a80:	4618      	mov	r0, r3
 8014a82:	f7ff f83f 	bl	8013b04 <ld_word>
 8014a86:	4603      	mov	r3, r0
 8014a88:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	781b      	ldrb	r3, [r3, #0]
 8014a8e:	2b03      	cmp	r3, #3
 8014a90:	d109      	bne.n	8014aa6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	3314      	adds	r3, #20
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7ff f834 	bl	8013b04 <ld_word>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	041b      	lsls	r3, r3, #16
 8014aa0:	68fa      	ldr	r2, [r7, #12]
 8014aa2:	4313      	orrs	r3, r2
 8014aa4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3710      	adds	r7, #16
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b084      	sub	sp, #16
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	60b9      	str	r1, [r7, #8]
 8014aba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	331a      	adds	r3, #26
 8014ac0:	687a      	ldr	r2, [r7, #4]
 8014ac2:	b292      	uxth	r2, r2
 8014ac4:	4611      	mov	r1, r2
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7ff f857 	bl	8013b7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	781b      	ldrb	r3, [r3, #0]
 8014ad0:	2b03      	cmp	r3, #3
 8014ad2:	d109      	bne.n	8014ae8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	f103 0214 	add.w	r2, r3, #20
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	0c1b      	lsrs	r3, r3, #16
 8014ade:	b29b      	uxth	r3, r3
 8014ae0:	4619      	mov	r1, r3
 8014ae2:	4610      	mov	r0, r2
 8014ae4:	f7ff f849 	bl	8013b7a <st_word>
	}
}
 8014ae8:	bf00      	nop
 8014aea:	3710      	adds	r7, #16
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}

08014af0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8014af0:	b590      	push	{r4, r7, lr}
 8014af2:	b087      	sub	sp, #28
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	331a      	adds	r3, #26
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7ff f800 	bl	8013b04 <ld_word>
 8014b04:	4603      	mov	r3, r0
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d001      	beq.n	8014b0e <cmp_lfn+0x1e>
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	e059      	b.n	8014bc2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	781b      	ldrb	r3, [r3, #0]
 8014b12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014b16:	1e5a      	subs	r2, r3, #1
 8014b18:	4613      	mov	r3, r2
 8014b1a:	005b      	lsls	r3, r3, #1
 8014b1c:	4413      	add	r3, r2
 8014b1e:	009b      	lsls	r3, r3, #2
 8014b20:	4413      	add	r3, r2
 8014b22:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014b24:	2301      	movs	r3, #1
 8014b26:	81fb      	strh	r3, [r7, #14]
 8014b28:	2300      	movs	r3, #0
 8014b2a:	613b      	str	r3, [r7, #16]
 8014b2c:	e033      	b.n	8014b96 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8014b2e:	4a27      	ldr	r2, [pc, #156]	; (8014bcc <cmp_lfn+0xdc>)
 8014b30:	693b      	ldr	r3, [r7, #16]
 8014b32:	4413      	add	r3, r2
 8014b34:	781b      	ldrb	r3, [r3, #0]
 8014b36:	461a      	mov	r2, r3
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	4413      	add	r3, r2
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7fe ffe1 	bl	8013b04 <ld_word>
 8014b42:	4603      	mov	r3, r0
 8014b44:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8014b46:	89fb      	ldrh	r3, [r7, #14]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d01a      	beq.n	8014b82 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	2bfe      	cmp	r3, #254	; 0xfe
 8014b50:	d812      	bhi.n	8014b78 <cmp_lfn+0x88>
 8014b52:	89bb      	ldrh	r3, [r7, #12]
 8014b54:	4618      	mov	r0, r3
 8014b56:	f002 fb41 	bl	80171dc <ff_wtoupper>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	461c      	mov	r4, r3
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	1c5a      	adds	r2, r3, #1
 8014b62:	617a      	str	r2, [r7, #20]
 8014b64:	005b      	lsls	r3, r3, #1
 8014b66:	687a      	ldr	r2, [r7, #4]
 8014b68:	4413      	add	r3, r2
 8014b6a:	881b      	ldrh	r3, [r3, #0]
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f002 fb35 	bl	80171dc <ff_wtoupper>
 8014b72:	4603      	mov	r3, r0
 8014b74:	429c      	cmp	r4, r3
 8014b76:	d001      	beq.n	8014b7c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8014b78:	2300      	movs	r3, #0
 8014b7a:	e022      	b.n	8014bc2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8014b7c:	89bb      	ldrh	r3, [r7, #12]
 8014b7e:	81fb      	strh	r3, [r7, #14]
 8014b80:	e006      	b.n	8014b90 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014b82:	89bb      	ldrh	r3, [r7, #12]
 8014b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b88:	4293      	cmp	r3, r2
 8014b8a:	d001      	beq.n	8014b90 <cmp_lfn+0xa0>
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	e018      	b.n	8014bc2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014b90:	693b      	ldr	r3, [r7, #16]
 8014b92:	3301      	adds	r3, #1
 8014b94:	613b      	str	r3, [r7, #16]
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	2b0c      	cmp	r3, #12
 8014b9a:	d9c8      	bls.n	8014b2e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	781b      	ldrb	r3, [r3, #0]
 8014ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d00b      	beq.n	8014bc0 <cmp_lfn+0xd0>
 8014ba8:	89fb      	ldrh	r3, [r7, #14]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d008      	beq.n	8014bc0 <cmp_lfn+0xd0>
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	005b      	lsls	r3, r3, #1
 8014bb2:	687a      	ldr	r2, [r7, #4]
 8014bb4:	4413      	add	r3, r2
 8014bb6:	881b      	ldrh	r3, [r3, #0]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d001      	beq.n	8014bc0 <cmp_lfn+0xd0>
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	e000      	b.n	8014bc2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8014bc0:	2301      	movs	r3, #1
}
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	371c      	adds	r7, #28
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd90      	pop	{r4, r7, pc}
 8014bca:	bf00      	nop
 8014bcc:	08022a48 	.word	0x08022a48

08014bd0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b086      	sub	sp, #24
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8014bda:	683b      	ldr	r3, [r7, #0]
 8014bdc:	331a      	adds	r3, #26
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fe ff90 	bl	8013b04 <ld_word>
 8014be4:	4603      	mov	r3, r0
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d001      	beq.n	8014bee <pick_lfn+0x1e>
 8014bea:	2300      	movs	r3, #0
 8014bec:	e04d      	b.n	8014c8a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	781b      	ldrb	r3, [r3, #0]
 8014bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014bf6:	1e5a      	subs	r2, r3, #1
 8014bf8:	4613      	mov	r3, r2
 8014bfa:	005b      	lsls	r3, r3, #1
 8014bfc:	4413      	add	r3, r2
 8014bfe:	009b      	lsls	r3, r3, #2
 8014c00:	4413      	add	r3, r2
 8014c02:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014c04:	2301      	movs	r3, #1
 8014c06:	81fb      	strh	r3, [r7, #14]
 8014c08:	2300      	movs	r3, #0
 8014c0a:	613b      	str	r3, [r7, #16]
 8014c0c:	e028      	b.n	8014c60 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8014c0e:	4a21      	ldr	r2, [pc, #132]	; (8014c94 <pick_lfn+0xc4>)
 8014c10:	693b      	ldr	r3, [r7, #16]
 8014c12:	4413      	add	r3, r2
 8014c14:	781b      	ldrb	r3, [r3, #0]
 8014c16:	461a      	mov	r2, r3
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	4413      	add	r3, r2
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7fe ff71 	bl	8013b04 <ld_word>
 8014c22:	4603      	mov	r3, r0
 8014c24:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8014c26:	89fb      	ldrh	r3, [r7, #14]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d00f      	beq.n	8014c4c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	2bfe      	cmp	r3, #254	; 0xfe
 8014c30:	d901      	bls.n	8014c36 <pick_lfn+0x66>
 8014c32:	2300      	movs	r3, #0
 8014c34:	e029      	b.n	8014c8a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014c36:	89bb      	ldrh	r3, [r7, #12]
 8014c38:	81fb      	strh	r3, [r7, #14]
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	1c5a      	adds	r2, r3, #1
 8014c3e:	617a      	str	r2, [r7, #20]
 8014c40:	005b      	lsls	r3, r3, #1
 8014c42:	687a      	ldr	r2, [r7, #4]
 8014c44:	4413      	add	r3, r2
 8014c46:	89fa      	ldrh	r2, [r7, #14]
 8014c48:	801a      	strh	r2, [r3, #0]
 8014c4a:	e006      	b.n	8014c5a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014c4c:	89bb      	ldrh	r3, [r7, #12]
 8014c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c52:	4293      	cmp	r3, r2
 8014c54:	d001      	beq.n	8014c5a <pick_lfn+0x8a>
 8014c56:	2300      	movs	r3, #0
 8014c58:	e017      	b.n	8014c8a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	3301      	adds	r3, #1
 8014c5e:	613b      	str	r3, [r7, #16]
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	2b0c      	cmp	r3, #12
 8014c64:	d9d3      	bls.n	8014c0e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	781b      	ldrb	r3, [r3, #0]
 8014c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d00a      	beq.n	8014c88 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	2bfe      	cmp	r3, #254	; 0xfe
 8014c76:	d901      	bls.n	8014c7c <pick_lfn+0xac>
 8014c78:	2300      	movs	r3, #0
 8014c7a:	e006      	b.n	8014c8a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8014c7c:	697b      	ldr	r3, [r7, #20]
 8014c7e:	005b      	lsls	r3, r3, #1
 8014c80:	687a      	ldr	r2, [r7, #4]
 8014c82:	4413      	add	r3, r2
 8014c84:	2200      	movs	r2, #0
 8014c86:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8014c88:	2301      	movs	r3, #1
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3718      	adds	r7, #24
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}
 8014c92:	bf00      	nop
 8014c94:	08022a48 	.word	0x08022a48

08014c98 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b088      	sub	sp, #32
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	60f8      	str	r0, [r7, #12]
 8014ca0:	60b9      	str	r1, [r7, #8]
 8014ca2:	4611      	mov	r1, r2
 8014ca4:	461a      	mov	r2, r3
 8014ca6:	460b      	mov	r3, r1
 8014ca8:	71fb      	strb	r3, [r7, #7]
 8014caa:	4613      	mov	r3, r2
 8014cac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	330d      	adds	r3, #13
 8014cb2:	79ba      	ldrb	r2, [r7, #6]
 8014cb4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8014cb6:	68bb      	ldr	r3, [r7, #8]
 8014cb8:	330b      	adds	r3, #11
 8014cba:	220f      	movs	r2, #15
 8014cbc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	330c      	adds	r3, #12
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	331a      	adds	r3, #26
 8014cca:	2100      	movs	r1, #0
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7fe ff54 	bl	8013b7a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8014cd2:	79fb      	ldrb	r3, [r7, #7]
 8014cd4:	1e5a      	subs	r2, r3, #1
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	005b      	lsls	r3, r3, #1
 8014cda:	4413      	add	r3, r2
 8014cdc:	009b      	lsls	r3, r3, #2
 8014cde:	4413      	add	r3, r2
 8014ce0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	82fb      	strh	r3, [r7, #22]
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8014cea:	8afb      	ldrh	r3, [r7, #22]
 8014cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014cf0:	4293      	cmp	r3, r2
 8014cf2:	d007      	beq.n	8014d04 <put_lfn+0x6c>
 8014cf4:	69fb      	ldr	r3, [r7, #28]
 8014cf6:	1c5a      	adds	r2, r3, #1
 8014cf8:	61fa      	str	r2, [r7, #28]
 8014cfa:	005b      	lsls	r3, r3, #1
 8014cfc:	68fa      	ldr	r2, [r7, #12]
 8014cfe:	4413      	add	r3, r2
 8014d00:	881b      	ldrh	r3, [r3, #0]
 8014d02:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8014d04:	4a17      	ldr	r2, [pc, #92]	; (8014d64 <put_lfn+0xcc>)
 8014d06:	69bb      	ldr	r3, [r7, #24]
 8014d08:	4413      	add	r3, r2
 8014d0a:	781b      	ldrb	r3, [r3, #0]
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	4413      	add	r3, r2
 8014d12:	8afa      	ldrh	r2, [r7, #22]
 8014d14:	4611      	mov	r1, r2
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7fe ff2f 	bl	8013b7a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8014d1c:	8afb      	ldrh	r3, [r7, #22]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d102      	bne.n	8014d28 <put_lfn+0x90>
 8014d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d26:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8014d28:	69bb      	ldr	r3, [r7, #24]
 8014d2a:	3301      	adds	r3, #1
 8014d2c:	61bb      	str	r3, [r7, #24]
 8014d2e:	69bb      	ldr	r3, [r7, #24]
 8014d30:	2b0c      	cmp	r3, #12
 8014d32:	d9da      	bls.n	8014cea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8014d34:	8afb      	ldrh	r3, [r7, #22]
 8014d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d3a:	4293      	cmp	r3, r2
 8014d3c:	d006      	beq.n	8014d4c <put_lfn+0xb4>
 8014d3e:	69fb      	ldr	r3, [r7, #28]
 8014d40:	005b      	lsls	r3, r3, #1
 8014d42:	68fa      	ldr	r2, [r7, #12]
 8014d44:	4413      	add	r3, r2
 8014d46:	881b      	ldrh	r3, [r3, #0]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d103      	bne.n	8014d54 <put_lfn+0xbc>
 8014d4c:	79fb      	ldrb	r3, [r7, #7]
 8014d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d52:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	79fa      	ldrb	r2, [r7, #7]
 8014d58:	701a      	strb	r2, [r3, #0]
}
 8014d5a:	bf00      	nop
 8014d5c:	3720      	adds	r7, #32
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	08022a48 	.word	0x08022a48

08014d68 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b08c      	sub	sp, #48	; 0x30
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	60f8      	str	r0, [r7, #12]
 8014d70:	60b9      	str	r1, [r7, #8]
 8014d72:	607a      	str	r2, [r7, #4]
 8014d74:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8014d76:	220b      	movs	r2, #11
 8014d78:	68b9      	ldr	r1, [r7, #8]
 8014d7a:	68f8      	ldr	r0, [r7, #12]
 8014d7c:	f7fe ff44 	bl	8013c08 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	2b05      	cmp	r3, #5
 8014d84:	d92b      	bls.n	8014dde <gen_numname+0x76>
		sr = seq;
 8014d86:	683b      	ldr	r3, [r7, #0]
 8014d88:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8014d8a:	e022      	b.n	8014dd2 <gen_numname+0x6a>
			wc = *lfn++;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	1c9a      	adds	r2, r3, #2
 8014d90:	607a      	str	r2, [r7, #4]
 8014d92:	881b      	ldrh	r3, [r3, #0]
 8014d94:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8014d96:	2300      	movs	r3, #0
 8014d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d9a:	e017      	b.n	8014dcc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8014d9c:	69fb      	ldr	r3, [r7, #28]
 8014d9e:	005a      	lsls	r2, r3, #1
 8014da0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014da2:	f003 0301 	and.w	r3, r3, #1
 8014da6:	4413      	add	r3, r2
 8014da8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8014daa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014dac:	085b      	lsrs	r3, r3, #1
 8014dae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8014db0:	69fb      	ldr	r3, [r7, #28]
 8014db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d005      	beq.n	8014dc6 <gen_numname+0x5e>
 8014dba:	69fb      	ldr	r3, [r7, #28]
 8014dbc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8014dc0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8014dc4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8014dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dc8:	3301      	adds	r3, #1
 8014dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8014dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dce:	2b0f      	cmp	r3, #15
 8014dd0:	d9e4      	bls.n	8014d9c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	881b      	ldrh	r3, [r3, #0]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d1d8      	bne.n	8014d8c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8014dda:	69fb      	ldr	r3, [r7, #28]
 8014ddc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8014dde:	2307      	movs	r3, #7
 8014de0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	b2db      	uxtb	r3, r3
 8014de6:	f003 030f 	and.w	r3, r3, #15
 8014dea:	b2db      	uxtb	r3, r3
 8014dec:	3330      	adds	r3, #48	; 0x30
 8014dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8014df2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014df6:	2b39      	cmp	r3, #57	; 0x39
 8014df8:	d904      	bls.n	8014e04 <gen_numname+0x9c>
 8014dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014dfe:	3307      	adds	r3, #7
 8014e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8014e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e06:	1e5a      	subs	r2, r3, #1
 8014e08:	62ba      	str	r2, [r7, #40]	; 0x28
 8014e0a:	3330      	adds	r3, #48	; 0x30
 8014e0c:	443b      	add	r3, r7
 8014e0e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014e12:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8014e16:	683b      	ldr	r3, [r7, #0]
 8014e18:	091b      	lsrs	r3, r3, #4
 8014e1a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d1df      	bne.n	8014de2 <gen_numname+0x7a>
	ns[i] = '~';
 8014e22:	f107 0214 	add.w	r2, r7, #20
 8014e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e28:	4413      	add	r3, r2
 8014e2a:	227e      	movs	r2, #126	; 0x7e
 8014e2c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8014e2e:	2300      	movs	r3, #0
 8014e30:	627b      	str	r3, [r7, #36]	; 0x24
 8014e32:	e002      	b.n	8014e3a <gen_numname+0xd2>
 8014e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e36:	3301      	adds	r3, #1
 8014e38:	627b      	str	r3, [r7, #36]	; 0x24
 8014e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d205      	bcs.n	8014e4e <gen_numname+0xe6>
 8014e42:	68fa      	ldr	r2, [r7, #12]
 8014e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e46:	4413      	add	r3, r2
 8014e48:	781b      	ldrb	r3, [r3, #0]
 8014e4a:	2b20      	cmp	r3, #32
 8014e4c:	d1f2      	bne.n	8014e34 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e50:	2b07      	cmp	r3, #7
 8014e52:	d807      	bhi.n	8014e64 <gen_numname+0xfc>
 8014e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e56:	1c5a      	adds	r2, r3, #1
 8014e58:	62ba      	str	r2, [r7, #40]	; 0x28
 8014e5a:	3330      	adds	r3, #48	; 0x30
 8014e5c:	443b      	add	r3, r7
 8014e5e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8014e62:	e000      	b.n	8014e66 <gen_numname+0xfe>
 8014e64:	2120      	movs	r1, #32
 8014e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e68:	1c5a      	adds	r2, r3, #1
 8014e6a:	627a      	str	r2, [r7, #36]	; 0x24
 8014e6c:	68fa      	ldr	r2, [r7, #12]
 8014e6e:	4413      	add	r3, r2
 8014e70:	460a      	mov	r2, r1
 8014e72:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8014e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e76:	2b07      	cmp	r3, #7
 8014e78:	d9e9      	bls.n	8014e4e <gen_numname+0xe6>
}
 8014e7a:	bf00      	nop
 8014e7c:	bf00      	nop
 8014e7e:	3730      	adds	r7, #48	; 0x30
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}

08014e84 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8014e84:	b480      	push	{r7}
 8014e86:	b085      	sub	sp, #20
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8014e90:	230b      	movs	r3, #11
 8014e92:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014e94:	7bfb      	ldrb	r3, [r7, #15]
 8014e96:	b2da      	uxtb	r2, r3
 8014e98:	0852      	lsrs	r2, r2, #1
 8014e9a:	01db      	lsls	r3, r3, #7
 8014e9c:	4313      	orrs	r3, r2
 8014e9e:	b2da      	uxtb	r2, r3
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	1c59      	adds	r1, r3, #1
 8014ea4:	6079      	str	r1, [r7, #4]
 8014ea6:	781b      	ldrb	r3, [r3, #0]
 8014ea8:	4413      	add	r3, r2
 8014eaa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8014eac:	68bb      	ldr	r3, [r7, #8]
 8014eae:	3b01      	subs	r3, #1
 8014eb0:	60bb      	str	r3, [r7, #8]
 8014eb2:	68bb      	ldr	r3, [r7, #8]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d1ed      	bne.n	8014e94 <sum_sfn+0x10>
	return sum;
 8014eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3714      	adds	r7, #20
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec4:	4770      	bx	lr

08014ec6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8014ec6:	b580      	push	{r7, lr}
 8014ec8:	b086      	sub	sp, #24
 8014eca:	af00      	add	r7, sp, #0
 8014ecc:	6078      	str	r0, [r7, #4]
 8014ece:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8014ed0:	2304      	movs	r3, #4
 8014ed2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8014eda:	23ff      	movs	r3, #255	; 0xff
 8014edc:	757b      	strb	r3, [r7, #21]
 8014ede:	23ff      	movs	r3, #255	; 0xff
 8014ee0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8014ee2:	e081      	b.n	8014fe8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	69db      	ldr	r3, [r3, #28]
 8014ee8:	4619      	mov	r1, r3
 8014eea:	6938      	ldr	r0, [r7, #16]
 8014eec:	f7ff f8ba 	bl	8014064 <move_window>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014ef4:	7dfb      	ldrb	r3, [r7, #23]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d17c      	bne.n	8014ff4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6a1b      	ldr	r3, [r3, #32]
 8014efe:	781b      	ldrb	r3, [r3, #0]
 8014f00:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8014f02:	7dbb      	ldrb	r3, [r7, #22]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d102      	bne.n	8014f0e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8014f08:	2304      	movs	r3, #4
 8014f0a:	75fb      	strb	r3, [r7, #23]
 8014f0c:	e077      	b.n	8014ffe <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	6a1b      	ldr	r3, [r3, #32]
 8014f12:	330b      	adds	r3, #11
 8014f14:	781b      	ldrb	r3, [r3, #0]
 8014f16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f1a:	73fb      	strb	r3, [r7, #15]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	7bfa      	ldrb	r2, [r7, #15]
 8014f20:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8014f22:	7dbb      	ldrb	r3, [r7, #22]
 8014f24:	2be5      	cmp	r3, #229	; 0xe5
 8014f26:	d00e      	beq.n	8014f46 <dir_read+0x80>
 8014f28:	7dbb      	ldrb	r3, [r7, #22]
 8014f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8014f2c:	d00b      	beq.n	8014f46 <dir_read+0x80>
 8014f2e:	7bfb      	ldrb	r3, [r7, #15]
 8014f30:	f023 0320 	bic.w	r3, r3, #32
 8014f34:	2b08      	cmp	r3, #8
 8014f36:	bf0c      	ite	eq
 8014f38:	2301      	moveq	r3, #1
 8014f3a:	2300      	movne	r3, #0
 8014f3c:	b2db      	uxtb	r3, r3
 8014f3e:	461a      	mov	r2, r3
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	4293      	cmp	r3, r2
 8014f44:	d002      	beq.n	8014f4c <dir_read+0x86>
				ord = 0xFF;
 8014f46:	23ff      	movs	r3, #255	; 0xff
 8014f48:	757b      	strb	r3, [r7, #21]
 8014f4a:	e044      	b.n	8014fd6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8014f4c:	7bfb      	ldrb	r3, [r7, #15]
 8014f4e:	2b0f      	cmp	r3, #15
 8014f50:	d12f      	bne.n	8014fb2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8014f52:	7dbb      	ldrb	r3, [r7, #22]
 8014f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d00d      	beq.n	8014f78 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	6a1b      	ldr	r3, [r3, #32]
 8014f60:	7b5b      	ldrb	r3, [r3, #13]
 8014f62:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8014f64:	7dbb      	ldrb	r3, [r7, #22]
 8014f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f6a:	75bb      	strb	r3, [r7, #22]
 8014f6c:	7dbb      	ldrb	r3, [r7, #22]
 8014f6e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	695a      	ldr	r2, [r3, #20]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014f78:	7dba      	ldrb	r2, [r7, #22]
 8014f7a:	7d7b      	ldrb	r3, [r7, #21]
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d115      	bne.n	8014fac <dir_read+0xe6>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	6a1b      	ldr	r3, [r3, #32]
 8014f84:	330d      	adds	r3, #13
 8014f86:	781b      	ldrb	r3, [r3, #0]
 8014f88:	7d3a      	ldrb	r2, [r7, #20]
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d10e      	bne.n	8014fac <dir_read+0xe6>
 8014f8e:	693b      	ldr	r3, [r7, #16]
 8014f90:	68da      	ldr	r2, [r3, #12]
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6a1b      	ldr	r3, [r3, #32]
 8014f96:	4619      	mov	r1, r3
 8014f98:	4610      	mov	r0, r2
 8014f9a:	f7ff fe19 	bl	8014bd0 <pick_lfn>
 8014f9e:	4603      	mov	r3, r0
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d003      	beq.n	8014fac <dir_read+0xe6>
 8014fa4:	7d7b      	ldrb	r3, [r7, #21]
 8014fa6:	3b01      	subs	r3, #1
 8014fa8:	b2db      	uxtb	r3, r3
 8014faa:	e000      	b.n	8014fae <dir_read+0xe8>
 8014fac:	23ff      	movs	r3, #255	; 0xff
 8014fae:	757b      	strb	r3, [r7, #21]
 8014fb0:	e011      	b.n	8014fd6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8014fb2:	7d7b      	ldrb	r3, [r7, #21]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d109      	bne.n	8014fcc <dir_read+0x106>
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6a1b      	ldr	r3, [r3, #32]
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f7ff ff61 	bl	8014e84 <sum_sfn>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	461a      	mov	r2, r3
 8014fc6:	7d3b      	ldrb	r3, [r7, #20]
 8014fc8:	4293      	cmp	r3, r2
 8014fca:	d015      	beq.n	8014ff8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f04f 32ff 	mov.w	r2, #4294967295
 8014fd2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8014fd4:	e010      	b.n	8014ff8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8014fd6:	2100      	movs	r1, #0
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f7ff fc3e 	bl	801485a <dir_next>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014fe2:	7dfb      	ldrb	r3, [r7, #23]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d109      	bne.n	8014ffc <dir_read+0x136>
	while (dp->sect) {
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	69db      	ldr	r3, [r3, #28]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	f47f af79 	bne.w	8014ee4 <dir_read+0x1e>
 8014ff2:	e004      	b.n	8014ffe <dir_read+0x138>
		if (res != FR_OK) break;
 8014ff4:	bf00      	nop
 8014ff6:	e002      	b.n	8014ffe <dir_read+0x138>
					break;
 8014ff8:	bf00      	nop
 8014ffa:	e000      	b.n	8014ffe <dir_read+0x138>
		if (res != FR_OK) break;
 8014ffc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014ffe:	7dfb      	ldrb	r3, [r7, #23]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d002      	beq.n	801500a <dir_read+0x144>
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2200      	movs	r2, #0
 8015008:	61da      	str	r2, [r3, #28]
	return res;
 801500a:	7dfb      	ldrb	r3, [r7, #23]
}
 801500c:	4618      	mov	r0, r3
 801500e:	3718      	adds	r7, #24
 8015010:	46bd      	mov	sp, r7
 8015012:	bd80      	pop	{r7, pc}

08015014 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b086      	sub	sp, #24
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015022:	2100      	movs	r1, #0
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f7ff fb9d 	bl	8014764 <dir_sdi>
 801502a:	4603      	mov	r3, r0
 801502c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801502e:	7dfb      	ldrb	r3, [r7, #23]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d001      	beq.n	8015038 <dir_find+0x24>
 8015034:	7dfb      	ldrb	r3, [r7, #23]
 8015036:	e0a9      	b.n	801518c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015038:	23ff      	movs	r3, #255	; 0xff
 801503a:	753b      	strb	r3, [r7, #20]
 801503c:	7d3b      	ldrb	r3, [r7, #20]
 801503e:	757b      	strb	r3, [r7, #21]
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f04f 32ff 	mov.w	r2, #4294967295
 8015046:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	69db      	ldr	r3, [r3, #28]
 801504c:	4619      	mov	r1, r3
 801504e:	6938      	ldr	r0, [r7, #16]
 8015050:	f7ff f808 	bl	8014064 <move_window>
 8015054:	4603      	mov	r3, r0
 8015056:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015058:	7dfb      	ldrb	r3, [r7, #23]
 801505a:	2b00      	cmp	r3, #0
 801505c:	f040 8090 	bne.w	8015180 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	6a1b      	ldr	r3, [r3, #32]
 8015064:	781b      	ldrb	r3, [r3, #0]
 8015066:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015068:	7dbb      	ldrb	r3, [r7, #22]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d102      	bne.n	8015074 <dir_find+0x60>
 801506e:	2304      	movs	r3, #4
 8015070:	75fb      	strb	r3, [r7, #23]
 8015072:	e08a      	b.n	801518a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6a1b      	ldr	r3, [r3, #32]
 8015078:	330b      	adds	r3, #11
 801507a:	781b      	ldrb	r3, [r3, #0]
 801507c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015080:	73fb      	strb	r3, [r7, #15]
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	7bfa      	ldrb	r2, [r7, #15]
 8015086:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015088:	7dbb      	ldrb	r3, [r7, #22]
 801508a:	2be5      	cmp	r3, #229	; 0xe5
 801508c:	d007      	beq.n	801509e <dir_find+0x8a>
 801508e:	7bfb      	ldrb	r3, [r7, #15]
 8015090:	f003 0308 	and.w	r3, r3, #8
 8015094:	2b00      	cmp	r3, #0
 8015096:	d009      	beq.n	80150ac <dir_find+0x98>
 8015098:	7bfb      	ldrb	r3, [r7, #15]
 801509a:	2b0f      	cmp	r3, #15
 801509c:	d006      	beq.n	80150ac <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801509e:	23ff      	movs	r3, #255	; 0xff
 80150a0:	757b      	strb	r3, [r7, #21]
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f04f 32ff 	mov.w	r2, #4294967295
 80150a8:	631a      	str	r2, [r3, #48]	; 0x30
 80150aa:	e05e      	b.n	801516a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80150ac:	7bfb      	ldrb	r3, [r7, #15]
 80150ae:	2b0f      	cmp	r3, #15
 80150b0:	d136      	bne.n	8015120 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80150b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d154      	bne.n	801516a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80150c0:	7dbb      	ldrb	r3, [r7, #22]
 80150c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d00d      	beq.n	80150e6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6a1b      	ldr	r3, [r3, #32]
 80150ce:	7b5b      	ldrb	r3, [r3, #13]
 80150d0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80150d2:	7dbb      	ldrb	r3, [r7, #22]
 80150d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80150d8:	75bb      	strb	r3, [r7, #22]
 80150da:	7dbb      	ldrb	r3, [r7, #22]
 80150dc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	695a      	ldr	r2, [r3, #20]
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80150e6:	7dba      	ldrb	r2, [r7, #22]
 80150e8:	7d7b      	ldrb	r3, [r7, #21]
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d115      	bne.n	801511a <dir_find+0x106>
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	6a1b      	ldr	r3, [r3, #32]
 80150f2:	330d      	adds	r3, #13
 80150f4:	781b      	ldrb	r3, [r3, #0]
 80150f6:	7d3a      	ldrb	r2, [r7, #20]
 80150f8:	429a      	cmp	r2, r3
 80150fa:	d10e      	bne.n	801511a <dir_find+0x106>
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	68da      	ldr	r2, [r3, #12]
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6a1b      	ldr	r3, [r3, #32]
 8015104:	4619      	mov	r1, r3
 8015106:	4610      	mov	r0, r2
 8015108:	f7ff fcf2 	bl	8014af0 <cmp_lfn>
 801510c:	4603      	mov	r3, r0
 801510e:	2b00      	cmp	r3, #0
 8015110:	d003      	beq.n	801511a <dir_find+0x106>
 8015112:	7d7b      	ldrb	r3, [r7, #21]
 8015114:	3b01      	subs	r3, #1
 8015116:	b2db      	uxtb	r3, r3
 8015118:	e000      	b.n	801511c <dir_find+0x108>
 801511a:	23ff      	movs	r3, #255	; 0xff
 801511c:	757b      	strb	r3, [r7, #21]
 801511e:	e024      	b.n	801516a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015120:	7d7b      	ldrb	r3, [r7, #21]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d109      	bne.n	801513a <dir_find+0x126>
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	6a1b      	ldr	r3, [r3, #32]
 801512a:	4618      	mov	r0, r3
 801512c:	f7ff feaa 	bl	8014e84 <sum_sfn>
 8015130:	4603      	mov	r3, r0
 8015132:	461a      	mov	r2, r3
 8015134:	7d3b      	ldrb	r3, [r7, #20]
 8015136:	4293      	cmp	r3, r2
 8015138:	d024      	beq.n	8015184 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015140:	f003 0301 	and.w	r3, r3, #1
 8015144:	2b00      	cmp	r3, #0
 8015146:	d10a      	bne.n	801515e <dir_find+0x14a>
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	6a18      	ldr	r0, [r3, #32]
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	3324      	adds	r3, #36	; 0x24
 8015150:	220b      	movs	r2, #11
 8015152:	4619      	mov	r1, r3
 8015154:	f7fe fd94 	bl	8013c80 <mem_cmp>
 8015158:	4603      	mov	r3, r0
 801515a:	2b00      	cmp	r3, #0
 801515c:	d014      	beq.n	8015188 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801515e:	23ff      	movs	r3, #255	; 0xff
 8015160:	757b      	strb	r3, [r7, #21]
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f04f 32ff 	mov.w	r2, #4294967295
 8015168:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801516a:	2100      	movs	r1, #0
 801516c:	6878      	ldr	r0, [r7, #4]
 801516e:	f7ff fb74 	bl	801485a <dir_next>
 8015172:	4603      	mov	r3, r0
 8015174:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015176:	7dfb      	ldrb	r3, [r7, #23]
 8015178:	2b00      	cmp	r3, #0
 801517a:	f43f af65 	beq.w	8015048 <dir_find+0x34>
 801517e:	e004      	b.n	801518a <dir_find+0x176>
		if (res != FR_OK) break;
 8015180:	bf00      	nop
 8015182:	e002      	b.n	801518a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015184:	bf00      	nop
 8015186:	e000      	b.n	801518a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015188:	bf00      	nop

	return res;
 801518a:	7dfb      	ldrb	r3, [r7, #23]
}
 801518c:	4618      	mov	r0, r3
 801518e:	3718      	adds	r7, #24
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}

08015194 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b08c      	sub	sp, #48	; 0x30
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80151a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d001      	beq.n	80151b4 <dir_register+0x20>
 80151b0:	2306      	movs	r3, #6
 80151b2:	e0e0      	b.n	8015376 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80151b4:	2300      	movs	r3, #0
 80151b6:	627b      	str	r3, [r7, #36]	; 0x24
 80151b8:	e002      	b.n	80151c0 <dir_register+0x2c>
 80151ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151bc:	3301      	adds	r3, #1
 80151be:	627b      	str	r3, [r7, #36]	; 0x24
 80151c0:	69fb      	ldr	r3, [r7, #28]
 80151c2:	68da      	ldr	r2, [r3, #12]
 80151c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c6:	005b      	lsls	r3, r3, #1
 80151c8:	4413      	add	r3, r2
 80151ca:	881b      	ldrh	r3, [r3, #0]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d1f4      	bne.n	80151ba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80151d6:	f107 030c 	add.w	r3, r7, #12
 80151da:	220c      	movs	r2, #12
 80151dc:	4618      	mov	r0, r3
 80151de:	f7fe fd13 	bl	8013c08 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80151e2:	7dfb      	ldrb	r3, [r7, #23]
 80151e4:	f003 0301 	and.w	r3, r3, #1
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d032      	beq.n	8015252 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2240      	movs	r2, #64	; 0x40
 80151f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80151f4:	2301      	movs	r3, #1
 80151f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80151f8:	e016      	b.n	8015228 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8015200:	69fb      	ldr	r3, [r7, #28]
 8015202:	68da      	ldr	r2, [r3, #12]
 8015204:	f107 010c 	add.w	r1, r7, #12
 8015208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801520a:	f7ff fdad 	bl	8014d68 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	f7ff ff00 	bl	8015014 <dir_find>
 8015214:	4603      	mov	r3, r0
 8015216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801521a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801521e:	2b00      	cmp	r3, #0
 8015220:	d106      	bne.n	8015230 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8015222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015224:	3301      	adds	r3, #1
 8015226:	62bb      	str	r3, [r7, #40]	; 0x28
 8015228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801522a:	2b63      	cmp	r3, #99	; 0x63
 801522c:	d9e5      	bls.n	80151fa <dir_register+0x66>
 801522e:	e000      	b.n	8015232 <dir_register+0x9e>
			if (res != FR_OK) break;
 8015230:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8015232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015234:	2b64      	cmp	r3, #100	; 0x64
 8015236:	d101      	bne.n	801523c <dir_register+0xa8>
 8015238:	2307      	movs	r3, #7
 801523a:	e09c      	b.n	8015376 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801523c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015240:	2b04      	cmp	r3, #4
 8015242:	d002      	beq.n	801524a <dir_register+0xb6>
 8015244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015248:	e095      	b.n	8015376 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801524a:	7dfa      	ldrb	r2, [r7, #23]
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015252:	7dfb      	ldrb	r3, [r7, #23]
 8015254:	f003 0302 	and.w	r3, r3, #2
 8015258:	2b00      	cmp	r3, #0
 801525a:	d007      	beq.n	801526c <dir_register+0xd8>
 801525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525e:	330c      	adds	r3, #12
 8015260:	4a47      	ldr	r2, [pc, #284]	; (8015380 <dir_register+0x1ec>)
 8015262:	fba2 2303 	umull	r2, r3, r2, r3
 8015266:	089b      	lsrs	r3, r3, #2
 8015268:	3301      	adds	r3, #1
 801526a:	e000      	b.n	801526e <dir_register+0xda>
 801526c:	2301      	movs	r3, #1
 801526e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015270:	6a39      	ldr	r1, [r7, #32]
 8015272:	6878      	ldr	r0, [r7, #4]
 8015274:	f7ff fbb6 	bl	80149e4 <dir_alloc>
 8015278:	4603      	mov	r3, r0
 801527a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801527e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015282:	2b00      	cmp	r3, #0
 8015284:	d148      	bne.n	8015318 <dir_register+0x184>
 8015286:	6a3b      	ldr	r3, [r7, #32]
 8015288:	3b01      	subs	r3, #1
 801528a:	623b      	str	r3, [r7, #32]
 801528c:	6a3b      	ldr	r3, [r7, #32]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d042      	beq.n	8015318 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	695a      	ldr	r2, [r3, #20]
 8015296:	6a3b      	ldr	r3, [r7, #32]
 8015298:	015b      	lsls	r3, r3, #5
 801529a:	1ad3      	subs	r3, r2, r3
 801529c:	4619      	mov	r1, r3
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f7ff fa60 	bl	8014764 <dir_sdi>
 80152a4:	4603      	mov	r3, r0
 80152a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80152aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d132      	bne.n	8015318 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	3324      	adds	r3, #36	; 0x24
 80152b6:	4618      	mov	r0, r3
 80152b8:	f7ff fde4 	bl	8014e84 <sum_sfn>
 80152bc:	4603      	mov	r3, r0
 80152be:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	69db      	ldr	r3, [r3, #28]
 80152c4:	4619      	mov	r1, r3
 80152c6:	69f8      	ldr	r0, [r7, #28]
 80152c8:	f7fe fecc 	bl	8014064 <move_window>
 80152cc:	4603      	mov	r3, r0
 80152ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80152d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d11d      	bne.n	8015316 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80152da:	69fb      	ldr	r3, [r7, #28]
 80152dc:	68d8      	ldr	r0, [r3, #12]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6a19      	ldr	r1, [r3, #32]
 80152e2:	6a3b      	ldr	r3, [r7, #32]
 80152e4:	b2da      	uxtb	r2, r3
 80152e6:	7efb      	ldrb	r3, [r7, #27]
 80152e8:	f7ff fcd6 	bl	8014c98 <put_lfn>
				fs->wflag = 1;
 80152ec:	69fb      	ldr	r3, [r7, #28]
 80152ee:	2201      	movs	r2, #1
 80152f0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80152f2:	2100      	movs	r1, #0
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f7ff fab0 	bl	801485a <dir_next>
 80152fa:	4603      	mov	r3, r0
 80152fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015300:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015304:	2b00      	cmp	r3, #0
 8015306:	d107      	bne.n	8015318 <dir_register+0x184>
 8015308:	6a3b      	ldr	r3, [r7, #32]
 801530a:	3b01      	subs	r3, #1
 801530c:	623b      	str	r3, [r7, #32]
 801530e:	6a3b      	ldr	r3, [r7, #32]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d1d5      	bne.n	80152c0 <dir_register+0x12c>
 8015314:	e000      	b.n	8015318 <dir_register+0x184>
				if (res != FR_OK) break;
 8015316:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015318:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801531c:	2b00      	cmp	r3, #0
 801531e:	d128      	bne.n	8015372 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	69db      	ldr	r3, [r3, #28]
 8015324:	4619      	mov	r1, r3
 8015326:	69f8      	ldr	r0, [r7, #28]
 8015328:	f7fe fe9c 	bl	8014064 <move_window>
 801532c:	4603      	mov	r3, r0
 801532e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015336:	2b00      	cmp	r3, #0
 8015338:	d11b      	bne.n	8015372 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	6a1b      	ldr	r3, [r3, #32]
 801533e:	2220      	movs	r2, #32
 8015340:	2100      	movs	r1, #0
 8015342:	4618      	mov	r0, r3
 8015344:	f7fe fc81 	bl	8013c4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	6a18      	ldr	r0, [r3, #32]
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	3324      	adds	r3, #36	; 0x24
 8015350:	220b      	movs	r2, #11
 8015352:	4619      	mov	r1, r3
 8015354:	f7fe fc58 	bl	8013c08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	6a1b      	ldr	r3, [r3, #32]
 8015362:	330c      	adds	r3, #12
 8015364:	f002 0218 	and.w	r2, r2, #24
 8015368:	b2d2      	uxtb	r2, r2
 801536a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801536c:	69fb      	ldr	r3, [r7, #28]
 801536e:	2201      	movs	r2, #1
 8015370:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015376:	4618      	mov	r0, r3
 8015378:	3730      	adds	r7, #48	; 0x30
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}
 801537e:	bf00      	nop
 8015380:	4ec4ec4f 	.word	0x4ec4ec4f

08015384 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b088      	sub	sp, #32
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
 801538c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8015394:	683b      	ldr	r3, [r7, #0]
 8015396:	2200      	movs	r2, #0
 8015398:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	69db      	ldr	r3, [r3, #28]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	f000 80c9 	beq.w	8015536 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153ac:	d032      	beq.n	8015414 <get_fileinfo+0x90>
			i = j = 0;
 80153ae:	2300      	movs	r3, #0
 80153b0:	61bb      	str	r3, [r7, #24]
 80153b2:	69bb      	ldr	r3, [r7, #24]
 80153b4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80153b6:	e01b      	b.n	80153f0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80153b8:	89fb      	ldrh	r3, [r7, #14]
 80153ba:	2100      	movs	r1, #0
 80153bc:	4618      	mov	r0, r3
 80153be:	f001 fed1 	bl	8017164 <ff_convert>
 80153c2:	4603      	mov	r3, r0
 80153c4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80153c6:	89fb      	ldrh	r3, [r7, #14]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d102      	bne.n	80153d2 <get_fileinfo+0x4e>
 80153cc:	2300      	movs	r3, #0
 80153ce:	61fb      	str	r3, [r7, #28]
 80153d0:	e01a      	b.n	8015408 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80153d2:	69fb      	ldr	r3, [r7, #28]
 80153d4:	2bfe      	cmp	r3, #254	; 0xfe
 80153d6:	d902      	bls.n	80153de <get_fileinfo+0x5a>
 80153d8:	2300      	movs	r3, #0
 80153da:	61fb      	str	r3, [r7, #28]
 80153dc:	e014      	b.n	8015408 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80153de:	69fb      	ldr	r3, [r7, #28]
 80153e0:	1c5a      	adds	r2, r3, #1
 80153e2:	61fa      	str	r2, [r7, #28]
 80153e4:	89fa      	ldrh	r2, [r7, #14]
 80153e6:	b2d1      	uxtb	r1, r2
 80153e8:	683a      	ldr	r2, [r7, #0]
 80153ea:	4413      	add	r3, r2
 80153ec:	460a      	mov	r2, r1
 80153ee:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	68da      	ldr	r2, [r3, #12]
 80153f4:	69bb      	ldr	r3, [r7, #24]
 80153f6:	1c59      	adds	r1, r3, #1
 80153f8:	61b9      	str	r1, [r7, #24]
 80153fa:	005b      	lsls	r3, r3, #1
 80153fc:	4413      	add	r3, r2
 80153fe:	881b      	ldrh	r3, [r3, #0]
 8015400:	81fb      	strh	r3, [r7, #14]
 8015402:	89fb      	ldrh	r3, [r7, #14]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d1d7      	bne.n	80153b8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8015408:	683a      	ldr	r2, [r7, #0]
 801540a:	69fb      	ldr	r3, [r7, #28]
 801540c:	4413      	add	r3, r2
 801540e:	3316      	adds	r3, #22
 8015410:	2200      	movs	r2, #0
 8015412:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8015414:	2300      	movs	r3, #0
 8015416:	61bb      	str	r3, [r7, #24]
 8015418:	69bb      	ldr	r3, [r7, #24]
 801541a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801541c:	683a      	ldr	r2, [r7, #0]
 801541e:	69fb      	ldr	r3, [r7, #28]
 8015420:	4413      	add	r3, r2
 8015422:	3316      	adds	r3, #22
 8015424:	781b      	ldrb	r3, [r3, #0]
 8015426:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8015428:	e04c      	b.n	80154c4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	6a1a      	ldr	r2, [r3, #32]
 801542e:	69fb      	ldr	r3, [r7, #28]
 8015430:	1c59      	adds	r1, r3, #1
 8015432:	61f9      	str	r1, [r7, #28]
 8015434:	4413      	add	r3, r2
 8015436:	781b      	ldrb	r3, [r3, #0]
 8015438:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801543a:	7dfb      	ldrb	r3, [r7, #23]
 801543c:	2b20      	cmp	r3, #32
 801543e:	d100      	bne.n	8015442 <get_fileinfo+0xbe>
 8015440:	e040      	b.n	80154c4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8015442:	7dfb      	ldrb	r3, [r7, #23]
 8015444:	2b05      	cmp	r3, #5
 8015446:	d101      	bne.n	801544c <get_fileinfo+0xc8>
 8015448:	23e5      	movs	r3, #229	; 0xe5
 801544a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	2b09      	cmp	r3, #9
 8015450:	d10f      	bne.n	8015472 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8015452:	89bb      	ldrh	r3, [r7, #12]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d105      	bne.n	8015464 <get_fileinfo+0xe0>
 8015458:	683a      	ldr	r2, [r7, #0]
 801545a:	69bb      	ldr	r3, [r7, #24]
 801545c:	4413      	add	r3, r2
 801545e:	3316      	adds	r3, #22
 8015460:	222e      	movs	r2, #46	; 0x2e
 8015462:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8015464:	69bb      	ldr	r3, [r7, #24]
 8015466:	1c5a      	adds	r2, r3, #1
 8015468:	61ba      	str	r2, [r7, #24]
 801546a:	683a      	ldr	r2, [r7, #0]
 801546c:	4413      	add	r3, r2
 801546e:	222e      	movs	r2, #46	; 0x2e
 8015470:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8015472:	683a      	ldr	r2, [r7, #0]
 8015474:	69bb      	ldr	r3, [r7, #24]
 8015476:	4413      	add	r3, r2
 8015478:	3309      	adds	r3, #9
 801547a:	7dfa      	ldrb	r2, [r7, #23]
 801547c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801547e:	89bb      	ldrh	r3, [r7, #12]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d11c      	bne.n	80154be <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8015484:	7dfb      	ldrb	r3, [r7, #23]
 8015486:	2b40      	cmp	r3, #64	; 0x40
 8015488:	d913      	bls.n	80154b2 <get_fileinfo+0x12e>
 801548a:	7dfb      	ldrb	r3, [r7, #23]
 801548c:	2b5a      	cmp	r3, #90	; 0x5a
 801548e:	d810      	bhi.n	80154b2 <get_fileinfo+0x12e>
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	6a1b      	ldr	r3, [r3, #32]
 8015494:	330c      	adds	r3, #12
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	461a      	mov	r2, r3
 801549a:	69fb      	ldr	r3, [r7, #28]
 801549c:	2b08      	cmp	r3, #8
 801549e:	d901      	bls.n	80154a4 <get_fileinfo+0x120>
 80154a0:	2310      	movs	r3, #16
 80154a2:	e000      	b.n	80154a6 <get_fileinfo+0x122>
 80154a4:	2308      	movs	r3, #8
 80154a6:	4013      	ands	r3, r2
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d002      	beq.n	80154b2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80154ac:	7dfb      	ldrb	r3, [r7, #23]
 80154ae:	3320      	adds	r3, #32
 80154b0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80154b2:	683a      	ldr	r2, [r7, #0]
 80154b4:	69bb      	ldr	r3, [r7, #24]
 80154b6:	4413      	add	r3, r2
 80154b8:	3316      	adds	r3, #22
 80154ba:	7dfa      	ldrb	r2, [r7, #23]
 80154bc:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80154be:	69bb      	ldr	r3, [r7, #24]
 80154c0:	3301      	adds	r3, #1
 80154c2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80154c4:	69fb      	ldr	r3, [r7, #28]
 80154c6:	2b0a      	cmp	r3, #10
 80154c8:	d9af      	bls.n	801542a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80154ca:	89bb      	ldrh	r3, [r7, #12]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d10d      	bne.n	80154ec <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80154d0:	683a      	ldr	r2, [r7, #0]
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	4413      	add	r3, r2
 80154d6:	3316      	adds	r3, #22
 80154d8:	2200      	movs	r2, #0
 80154da:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	6a1b      	ldr	r3, [r3, #32]
 80154e0:	330c      	adds	r3, #12
 80154e2:	781b      	ldrb	r3, [r3, #0]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d101      	bne.n	80154ec <get_fileinfo+0x168>
 80154e8:	2300      	movs	r3, #0
 80154ea:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80154ec:	683a      	ldr	r2, [r7, #0]
 80154ee:	69bb      	ldr	r3, [r7, #24]
 80154f0:	4413      	add	r3, r2
 80154f2:	3309      	adds	r3, #9
 80154f4:	2200      	movs	r2, #0
 80154f6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6a1b      	ldr	r3, [r3, #32]
 80154fc:	7ada      	ldrb	r2, [r3, #11]
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	6a1b      	ldr	r3, [r3, #32]
 8015506:	331c      	adds	r3, #28
 8015508:	4618      	mov	r0, r3
 801550a:	f7fe fb13 	bl	8013b34 <ld_dword>
 801550e:	4602      	mov	r2, r0
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	6a1b      	ldr	r3, [r3, #32]
 8015518:	3316      	adds	r3, #22
 801551a:	4618      	mov	r0, r3
 801551c:	f7fe fb0a 	bl	8013b34 <ld_dword>
 8015520:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8015522:	68bb      	ldr	r3, [r7, #8]
 8015524:	b29a      	uxth	r2, r3
 8015526:	683b      	ldr	r3, [r7, #0]
 8015528:	80da      	strh	r2, [r3, #6]
 801552a:	68bb      	ldr	r3, [r7, #8]
 801552c:	0c1b      	lsrs	r3, r3, #16
 801552e:	b29a      	uxth	r2, r3
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	809a      	strh	r2, [r3, #4]
 8015534:	e000      	b.n	8015538 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8015536:	bf00      	nop
}
 8015538:	3720      	adds	r7, #32
 801553a:	46bd      	mov	sp, r7
 801553c:	bd80      	pop	{r7, pc}
	...

08015540 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8015540:	b480      	push	{r7}
 8015542:	b085      	sub	sp, #20
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	1c59      	adds	r1, r3, #1
 801554e:	687a      	ldr	r2, [r7, #4]
 8015550:	6011      	str	r1, [r2, #0]
 8015552:	781b      	ldrb	r3, [r3, #0]
 8015554:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8015556:	89fb      	ldrh	r3, [r7, #14]
 8015558:	2b60      	cmp	r3, #96	; 0x60
 801555a:	d905      	bls.n	8015568 <get_achar+0x28>
 801555c:	89fb      	ldrh	r3, [r7, #14]
 801555e:	2b7a      	cmp	r3, #122	; 0x7a
 8015560:	d802      	bhi.n	8015568 <get_achar+0x28>
 8015562:	89fb      	ldrh	r3, [r7, #14]
 8015564:	3b20      	subs	r3, #32
 8015566:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8015568:	89fb      	ldrh	r3, [r7, #14]
 801556a:	2b7f      	cmp	r3, #127	; 0x7f
 801556c:	d904      	bls.n	8015578 <get_achar+0x38>
 801556e:	89fb      	ldrh	r3, [r7, #14]
 8015570:	3b80      	subs	r3, #128	; 0x80
 8015572:	4a05      	ldr	r2, [pc, #20]	; (8015588 <get_achar+0x48>)
 8015574:	5cd3      	ldrb	r3, [r2, r3]
 8015576:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8015578:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 801557a:	4618      	mov	r0, r3
 801557c:	3714      	adds	r7, #20
 801557e:	46bd      	mov	sp, r7
 8015580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015584:	4770      	bx	lr
 8015586:	bf00      	nop
 8015588:	080229c8 	.word	0x080229c8

0801558c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b08a      	sub	sp, #40	; 0x28
 8015590:	af00      	add	r7, sp, #0
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	60b9      	str	r1, [r7, #8]
 8015596:	607a      	str	r2, [r7, #4]
 8015598:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 801559a:	e009      	b.n	80155b0 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 801559c:	f107 0308 	add.w	r3, r7, #8
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7ff ffcd 	bl	8015540 <get_achar>
 80155a6:	4603      	mov	r3, r0
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d101      	bne.n	80155b0 <pattern_matching+0x24>
 80155ac:	2300      	movs	r3, #0
 80155ae:	e064      	b.n	801567a <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	1e5a      	subs	r2, r3, #1
 80155b4:	607a      	str	r2, [r7, #4]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d1f0      	bne.n	801559c <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	781b      	ldrb	r3, [r3, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d104      	bne.n	80155cc <pattern_matching+0x40>
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d001      	beq.n	80155cc <pattern_matching+0x40>
 80155c8:	2301      	movs	r3, #1
 80155ca:	e056      	b.n	801567a <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	617b      	str	r3, [r7, #20]
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	781b      	ldrb	r3, [r3, #0]
 80155d8:	2b3f      	cmp	r3, #63	; 0x3f
 80155da:	d003      	beq.n	80155e4 <pattern_matching+0x58>
 80155dc:	697b      	ldr	r3, [r7, #20]
 80155de:	781b      	ldrb	r3, [r3, #0]
 80155e0:	2b2a      	cmp	r3, #42	; 0x2a
 80155e2:	d126      	bne.n	8015632 <pattern_matching+0xa6>
				nm = nx = 0;
 80155e4:	2300      	movs	r3, #0
 80155e6:	61fb      	str	r3, [r7, #28]
 80155e8:	69fb      	ldr	r3, [r7, #28]
 80155ea:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	1c5a      	adds	r2, r3, #1
 80155f0:	617a      	str	r2, [r7, #20]
 80155f2:	781b      	ldrb	r3, [r3, #0]
 80155f4:	2b3f      	cmp	r3, #63	; 0x3f
 80155f6:	d103      	bne.n	8015600 <pattern_matching+0x74>
 80155f8:	6a3b      	ldr	r3, [r7, #32]
 80155fa:	3301      	adds	r3, #1
 80155fc:	623b      	str	r3, [r7, #32]
 80155fe:	e001      	b.n	8015604 <pattern_matching+0x78>
 8015600:	2301      	movs	r3, #1
 8015602:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	781b      	ldrb	r3, [r3, #0]
 8015608:	2b3f      	cmp	r3, #63	; 0x3f
 801560a:	d0ef      	beq.n	80155ec <pattern_matching+0x60>
 801560c:	697b      	ldr	r3, [r7, #20]
 801560e:	781b      	ldrb	r3, [r3, #0]
 8015610:	2b2a      	cmp	r3, #42	; 0x2a
 8015612:	d0eb      	beq.n	80155ec <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8015614:	6978      	ldr	r0, [r7, #20]
 8015616:	6939      	ldr	r1, [r7, #16]
 8015618:	69fb      	ldr	r3, [r7, #28]
 801561a:	6a3a      	ldr	r2, [r7, #32]
 801561c:	f7ff ffb6 	bl	801558c <pattern_matching>
 8015620:	4603      	mov	r3, r0
 8015622:	2b00      	cmp	r3, #0
 8015624:	d001      	beq.n	801562a <pattern_matching+0x9e>
 8015626:	2301      	movs	r3, #1
 8015628:	e027      	b.n	801567a <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 801562a:	693b      	ldr	r3, [r7, #16]
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015630:	e017      	b.n	8015662 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8015632:	f107 0314 	add.w	r3, r7, #20
 8015636:	4618      	mov	r0, r3
 8015638:	f7ff ff82 	bl	8015540 <get_achar>
 801563c:	4603      	mov	r3, r0
 801563e:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8015640:	f107 0310 	add.w	r3, r7, #16
 8015644:	4618      	mov	r0, r3
 8015646:	f7ff ff7b 	bl	8015540 <get_achar>
 801564a:	4603      	mov	r3, r0
 801564c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 801564e:	8b7a      	ldrh	r2, [r7, #26]
 8015650:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015652:	429a      	cmp	r2, r3
 8015654:	d104      	bne.n	8015660 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8015656:	8b7b      	ldrh	r3, [r7, #26]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d1bb      	bne.n	80155d4 <pattern_matching+0x48>
 801565c:	2301      	movs	r3, #1
 801565e:	e00c      	b.n	801567a <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8015660:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8015662:	f107 0308 	add.w	r3, r7, #8
 8015666:	4618      	mov	r0, r3
 8015668:	f7ff ff6a 	bl	8015540 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d002      	beq.n	8015678 <pattern_matching+0xec>
 8015672:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015674:	2b00      	cmp	r3, #0
 8015676:	d1a9      	bne.n	80155cc <pattern_matching+0x40>

	return 0;
 8015678:	2300      	movs	r3, #0
}
 801567a:	4618      	mov	r0, r3
 801567c:	3728      	adds	r7, #40	; 0x28
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}
	...

08015684 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b08a      	sub	sp, #40	; 0x28
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
 801568c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	613b      	str	r3, [r7, #16]
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	68db      	ldr	r3, [r3, #12]
 801569a:	60fb      	str	r3, [r7, #12]
 801569c:	2300      	movs	r3, #0
 801569e:	617b      	str	r3, [r7, #20]
 80156a0:	697b      	ldr	r3, [r7, #20]
 80156a2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80156a4:	69bb      	ldr	r3, [r7, #24]
 80156a6:	1c5a      	adds	r2, r3, #1
 80156a8:	61ba      	str	r2, [r7, #24]
 80156aa:	693a      	ldr	r2, [r7, #16]
 80156ac:	4413      	add	r3, r2
 80156ae:	781b      	ldrb	r3, [r3, #0]
 80156b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80156b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156b4:	2b1f      	cmp	r3, #31
 80156b6:	d940      	bls.n	801573a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80156b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156ba:	2b2f      	cmp	r3, #47	; 0x2f
 80156bc:	d006      	beq.n	80156cc <create_name+0x48>
 80156be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156c0:	2b5c      	cmp	r3, #92	; 0x5c
 80156c2:	d110      	bne.n	80156e6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80156c4:	e002      	b.n	80156cc <create_name+0x48>
 80156c6:	69bb      	ldr	r3, [r7, #24]
 80156c8:	3301      	adds	r3, #1
 80156ca:	61bb      	str	r3, [r7, #24]
 80156cc:	693a      	ldr	r2, [r7, #16]
 80156ce:	69bb      	ldr	r3, [r7, #24]
 80156d0:	4413      	add	r3, r2
 80156d2:	781b      	ldrb	r3, [r3, #0]
 80156d4:	2b2f      	cmp	r3, #47	; 0x2f
 80156d6:	d0f6      	beq.n	80156c6 <create_name+0x42>
 80156d8:	693a      	ldr	r2, [r7, #16]
 80156da:	69bb      	ldr	r3, [r7, #24]
 80156dc:	4413      	add	r3, r2
 80156de:	781b      	ldrb	r3, [r3, #0]
 80156e0:	2b5c      	cmp	r3, #92	; 0x5c
 80156e2:	d0f0      	beq.n	80156c6 <create_name+0x42>
			break;
 80156e4:	e02a      	b.n	801573c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	2bfe      	cmp	r3, #254	; 0xfe
 80156ea:	d901      	bls.n	80156f0 <create_name+0x6c>
 80156ec:	2306      	movs	r3, #6
 80156ee:	e17d      	b.n	80159ec <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80156f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156f2:	b2db      	uxtb	r3, r3
 80156f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80156f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156f8:	2101      	movs	r1, #1
 80156fa:	4618      	mov	r0, r3
 80156fc:	f001 fd32 	bl	8017164 <ff_convert>
 8015700:	4603      	mov	r3, r0
 8015702:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015706:	2b00      	cmp	r3, #0
 8015708:	d101      	bne.n	801570e <create_name+0x8a>
 801570a:	2306      	movs	r3, #6
 801570c:	e16e      	b.n	80159ec <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801570e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015710:	2b7f      	cmp	r3, #127	; 0x7f
 8015712:	d809      	bhi.n	8015728 <create_name+0xa4>
 8015714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015716:	4619      	mov	r1, r3
 8015718:	488d      	ldr	r0, [pc, #564]	; (8015950 <create_name+0x2cc>)
 801571a:	f7fe fad8 	bl	8013cce <chk_chr>
 801571e:	4603      	mov	r3, r0
 8015720:	2b00      	cmp	r3, #0
 8015722:	d001      	beq.n	8015728 <create_name+0xa4>
 8015724:	2306      	movs	r3, #6
 8015726:	e161      	b.n	80159ec <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	1c5a      	adds	r2, r3, #1
 801572c:	617a      	str	r2, [r7, #20]
 801572e:	005b      	lsls	r3, r3, #1
 8015730:	68fa      	ldr	r2, [r7, #12]
 8015732:	4413      	add	r3, r2
 8015734:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015736:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8015738:	e7b4      	b.n	80156a4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801573a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801573c:	693a      	ldr	r2, [r7, #16]
 801573e:	69bb      	ldr	r3, [r7, #24]
 8015740:	441a      	add	r2, r3
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015748:	2b1f      	cmp	r3, #31
 801574a:	d801      	bhi.n	8015750 <create_name+0xcc>
 801574c:	2304      	movs	r3, #4
 801574e:	e000      	b.n	8015752 <create_name+0xce>
 8015750:	2300      	movs	r3, #0
 8015752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015756:	e011      	b.n	801577c <create_name+0xf8>
		w = lfn[di - 1];
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801575e:	3b01      	subs	r3, #1
 8015760:	005b      	lsls	r3, r3, #1
 8015762:	68fa      	ldr	r2, [r7, #12]
 8015764:	4413      	add	r3, r2
 8015766:	881b      	ldrh	r3, [r3, #0]
 8015768:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801576a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801576c:	2b20      	cmp	r3, #32
 801576e:	d002      	beq.n	8015776 <create_name+0xf2>
 8015770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015772:	2b2e      	cmp	r3, #46	; 0x2e
 8015774:	d106      	bne.n	8015784 <create_name+0x100>
		di--;
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	3b01      	subs	r3, #1
 801577a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801577c:	697b      	ldr	r3, [r7, #20]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d1ea      	bne.n	8015758 <create_name+0xd4>
 8015782:	e000      	b.n	8015786 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8015784:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	005b      	lsls	r3, r3, #1
 801578a:	68fa      	ldr	r2, [r7, #12]
 801578c:	4413      	add	r3, r2
 801578e:	2200      	movs	r2, #0
 8015790:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015792:	697b      	ldr	r3, [r7, #20]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d101      	bne.n	801579c <create_name+0x118>
 8015798:	2306      	movs	r3, #6
 801579a:	e127      	b.n	80159ec <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	3324      	adds	r3, #36	; 0x24
 80157a0:	220b      	movs	r2, #11
 80157a2:	2120      	movs	r1, #32
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7fe fa50 	bl	8013c4a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80157aa:	2300      	movs	r3, #0
 80157ac:	61bb      	str	r3, [r7, #24]
 80157ae:	e002      	b.n	80157b6 <create_name+0x132>
 80157b0:	69bb      	ldr	r3, [r7, #24]
 80157b2:	3301      	adds	r3, #1
 80157b4:	61bb      	str	r3, [r7, #24]
 80157b6:	69bb      	ldr	r3, [r7, #24]
 80157b8:	005b      	lsls	r3, r3, #1
 80157ba:	68fa      	ldr	r2, [r7, #12]
 80157bc:	4413      	add	r3, r2
 80157be:	881b      	ldrh	r3, [r3, #0]
 80157c0:	2b20      	cmp	r3, #32
 80157c2:	d0f5      	beq.n	80157b0 <create_name+0x12c>
 80157c4:	69bb      	ldr	r3, [r7, #24]
 80157c6:	005b      	lsls	r3, r3, #1
 80157c8:	68fa      	ldr	r2, [r7, #12]
 80157ca:	4413      	add	r3, r2
 80157cc:	881b      	ldrh	r3, [r3, #0]
 80157ce:	2b2e      	cmp	r3, #46	; 0x2e
 80157d0:	d0ee      	beq.n	80157b0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d009      	beq.n	80157ec <create_name+0x168>
 80157d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157dc:	f043 0303 	orr.w	r3, r3, #3
 80157e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80157e4:	e002      	b.n	80157ec <create_name+0x168>
 80157e6:	697b      	ldr	r3, [r7, #20]
 80157e8:	3b01      	subs	r3, #1
 80157ea:	617b      	str	r3, [r7, #20]
 80157ec:	697b      	ldr	r3, [r7, #20]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d009      	beq.n	8015806 <create_name+0x182>
 80157f2:	697b      	ldr	r3, [r7, #20]
 80157f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80157f8:	3b01      	subs	r3, #1
 80157fa:	005b      	lsls	r3, r3, #1
 80157fc:	68fa      	ldr	r2, [r7, #12]
 80157fe:	4413      	add	r3, r2
 8015800:	881b      	ldrh	r3, [r3, #0]
 8015802:	2b2e      	cmp	r3, #46	; 0x2e
 8015804:	d1ef      	bne.n	80157e6 <create_name+0x162>

	i = b = 0; ni = 8;
 8015806:	2300      	movs	r3, #0
 8015808:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801580c:	2300      	movs	r3, #0
 801580e:	623b      	str	r3, [r7, #32]
 8015810:	2308      	movs	r3, #8
 8015812:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8015814:	69bb      	ldr	r3, [r7, #24]
 8015816:	1c5a      	adds	r2, r3, #1
 8015818:	61ba      	str	r2, [r7, #24]
 801581a:	005b      	lsls	r3, r3, #1
 801581c:	68fa      	ldr	r2, [r7, #12]
 801581e:	4413      	add	r3, r2
 8015820:	881b      	ldrh	r3, [r3, #0]
 8015822:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8015824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015826:	2b00      	cmp	r3, #0
 8015828:	f000 8090 	beq.w	801594c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801582c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801582e:	2b20      	cmp	r3, #32
 8015830:	d006      	beq.n	8015840 <create_name+0x1bc>
 8015832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015834:	2b2e      	cmp	r3, #46	; 0x2e
 8015836:	d10a      	bne.n	801584e <create_name+0x1ca>
 8015838:	69ba      	ldr	r2, [r7, #24]
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	429a      	cmp	r2, r3
 801583e:	d006      	beq.n	801584e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8015840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015844:	f043 0303 	orr.w	r3, r3, #3
 8015848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801584c:	e07d      	b.n	801594a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801584e:	6a3a      	ldr	r2, [r7, #32]
 8015850:	69fb      	ldr	r3, [r7, #28]
 8015852:	429a      	cmp	r2, r3
 8015854:	d203      	bcs.n	801585e <create_name+0x1da>
 8015856:	69ba      	ldr	r2, [r7, #24]
 8015858:	697b      	ldr	r3, [r7, #20]
 801585a:	429a      	cmp	r2, r3
 801585c:	d123      	bne.n	80158a6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	2b0b      	cmp	r3, #11
 8015862:	d106      	bne.n	8015872 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8015864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015868:	f043 0303 	orr.w	r3, r3, #3
 801586c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015870:	e075      	b.n	801595e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8015872:	69ba      	ldr	r2, [r7, #24]
 8015874:	697b      	ldr	r3, [r7, #20]
 8015876:	429a      	cmp	r2, r3
 8015878:	d005      	beq.n	8015886 <create_name+0x202>
 801587a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801587e:	f043 0303 	orr.w	r3, r3, #3
 8015882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8015886:	69ba      	ldr	r2, [r7, #24]
 8015888:	697b      	ldr	r3, [r7, #20]
 801588a:	429a      	cmp	r2, r3
 801588c:	d866      	bhi.n	801595c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801588e:	697b      	ldr	r3, [r7, #20]
 8015890:	61bb      	str	r3, [r7, #24]
 8015892:	2308      	movs	r3, #8
 8015894:	623b      	str	r3, [r7, #32]
 8015896:	230b      	movs	r3, #11
 8015898:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801589a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801589e:	009b      	lsls	r3, r3, #2
 80158a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80158a4:	e051      	b.n	801594a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80158a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158a8:	2b7f      	cmp	r3, #127	; 0x7f
 80158aa:	d914      	bls.n	80158d6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80158ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158ae:	2100      	movs	r1, #0
 80158b0:	4618      	mov	r0, r3
 80158b2:	f001 fc57 	bl	8017164 <ff_convert>
 80158b6:	4603      	mov	r3, r0
 80158b8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80158ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d004      	beq.n	80158ca <create_name+0x246>
 80158c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158c2:	3b80      	subs	r3, #128	; 0x80
 80158c4:	4a23      	ldr	r2, [pc, #140]	; (8015954 <create_name+0x2d0>)
 80158c6:	5cd3      	ldrb	r3, [r2, r3]
 80158c8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80158ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158ce:	f043 0302 	orr.w	r3, r3, #2
 80158d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80158d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d007      	beq.n	80158ec <create_name+0x268>
 80158dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158de:	4619      	mov	r1, r3
 80158e0:	481d      	ldr	r0, [pc, #116]	; (8015958 <create_name+0x2d4>)
 80158e2:	f7fe f9f4 	bl	8013cce <chk_chr>
 80158e6:	4603      	mov	r3, r0
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d008      	beq.n	80158fe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80158ec:	235f      	movs	r3, #95	; 0x5f
 80158ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80158f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158f4:	f043 0303 	orr.w	r3, r3, #3
 80158f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80158fc:	e01b      	b.n	8015936 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80158fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015900:	2b40      	cmp	r3, #64	; 0x40
 8015902:	d909      	bls.n	8015918 <create_name+0x294>
 8015904:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015906:	2b5a      	cmp	r3, #90	; 0x5a
 8015908:	d806      	bhi.n	8015918 <create_name+0x294>
					b |= 2;
 801590a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801590e:	f043 0302 	orr.w	r3, r3, #2
 8015912:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015916:	e00e      	b.n	8015936 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8015918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801591a:	2b60      	cmp	r3, #96	; 0x60
 801591c:	d90b      	bls.n	8015936 <create_name+0x2b2>
 801591e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015920:	2b7a      	cmp	r3, #122	; 0x7a
 8015922:	d808      	bhi.n	8015936 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8015924:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015928:	f043 0301 	orr.w	r3, r3, #1
 801592c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015932:	3b20      	subs	r3, #32
 8015934:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8015936:	6a3b      	ldr	r3, [r7, #32]
 8015938:	1c5a      	adds	r2, r3, #1
 801593a:	623a      	str	r2, [r7, #32]
 801593c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801593e:	b2d1      	uxtb	r1, r2
 8015940:	687a      	ldr	r2, [r7, #4]
 8015942:	4413      	add	r3, r2
 8015944:	460a      	mov	r2, r1
 8015946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801594a:	e763      	b.n	8015814 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801594c:	bf00      	nop
 801594e:	e006      	b.n	801595e <create_name+0x2da>
 8015950:	08022760 	.word	0x08022760
 8015954:	080229c8 	.word	0x080229c8
 8015958:	0802276c 	.word	0x0802276c
			if (si > di) break;			/* No extension */
 801595c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015964:	2be5      	cmp	r3, #229	; 0xe5
 8015966:	d103      	bne.n	8015970 <create_name+0x2ec>
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	2205      	movs	r2, #5
 801596c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8015970:	69fb      	ldr	r3, [r7, #28]
 8015972:	2b08      	cmp	r3, #8
 8015974:	d104      	bne.n	8015980 <create_name+0x2fc>
 8015976:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801597a:	009b      	lsls	r3, r3, #2
 801597c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015980:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015984:	f003 030c 	and.w	r3, r3, #12
 8015988:	2b0c      	cmp	r3, #12
 801598a:	d005      	beq.n	8015998 <create_name+0x314>
 801598c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015990:	f003 0303 	and.w	r3, r3, #3
 8015994:	2b03      	cmp	r3, #3
 8015996:	d105      	bne.n	80159a4 <create_name+0x320>
 8015998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801599c:	f043 0302 	orr.w	r3, r3, #2
 80159a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80159a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159a8:	f003 0302 	and.w	r3, r3, #2
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d117      	bne.n	80159e0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80159b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159b4:	f003 0303 	and.w	r3, r3, #3
 80159b8:	2b01      	cmp	r3, #1
 80159ba:	d105      	bne.n	80159c8 <create_name+0x344>
 80159bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159c0:	f043 0310 	orr.w	r3, r3, #16
 80159c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80159c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159cc:	f003 030c 	and.w	r3, r3, #12
 80159d0:	2b04      	cmp	r3, #4
 80159d2:	d105      	bne.n	80159e0 <create_name+0x35c>
 80159d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159d8:	f043 0308 	orr.w	r3, r3, #8
 80159dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80159e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80159ea:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80159ec:	4618      	mov	r0, r3
 80159ee:	3728      	adds	r7, #40	; 0x28
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}

080159f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b086      	sub	sp, #24
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
 80159fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8015a02:	693b      	ldr	r3, [r7, #16]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015a08:	e002      	b.n	8015a10 <follow_path+0x1c>
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	603b      	str	r3, [r7, #0]
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	2b2f      	cmp	r3, #47	; 0x2f
 8015a16:	d0f8      	beq.n	8015a0a <follow_path+0x16>
 8015a18:	683b      	ldr	r3, [r7, #0]
 8015a1a:	781b      	ldrb	r3, [r3, #0]
 8015a1c:	2b5c      	cmp	r3, #92	; 0x5c
 8015a1e:	d0f4      	beq.n	8015a0a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8015a20:	693b      	ldr	r3, [r7, #16]
 8015a22:	2200      	movs	r2, #0
 8015a24:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	2b1f      	cmp	r3, #31
 8015a2c:	d80a      	bhi.n	8015a44 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	2280      	movs	r2, #128	; 0x80
 8015a32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8015a36:	2100      	movs	r1, #0
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	f7fe fe93 	bl	8014764 <dir_sdi>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	75fb      	strb	r3, [r7, #23]
 8015a42:	e043      	b.n	8015acc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015a44:	463b      	mov	r3, r7
 8015a46:	4619      	mov	r1, r3
 8015a48:	6878      	ldr	r0, [r7, #4]
 8015a4a:	f7ff fe1b 	bl	8015684 <create_name>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015a52:	7dfb      	ldrb	r3, [r7, #23]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d134      	bne.n	8015ac2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015a58:	6878      	ldr	r0, [r7, #4]
 8015a5a:	f7ff fadb 	bl	8015014 <dir_find>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015a68:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8015a6a:	7dfb      	ldrb	r3, [r7, #23]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d00a      	beq.n	8015a86 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015a70:	7dfb      	ldrb	r3, [r7, #23]
 8015a72:	2b04      	cmp	r3, #4
 8015a74:	d127      	bne.n	8015ac6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015a76:	7afb      	ldrb	r3, [r7, #11]
 8015a78:	f003 0304 	and.w	r3, r3, #4
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d122      	bne.n	8015ac6 <follow_path+0xd2>
 8015a80:	2305      	movs	r3, #5
 8015a82:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015a84:	e01f      	b.n	8015ac6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015a86:	7afb      	ldrb	r3, [r7, #11]
 8015a88:	f003 0304 	and.w	r3, r3, #4
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d11c      	bne.n	8015aca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015a90:	693b      	ldr	r3, [r7, #16]
 8015a92:	799b      	ldrb	r3, [r3, #6]
 8015a94:	f003 0310 	and.w	r3, r3, #16
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d102      	bne.n	8015aa2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015a9c:	2305      	movs	r3, #5
 8015a9e:	75fb      	strb	r3, [r7, #23]
 8015aa0:	e014      	b.n	8015acc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	695b      	ldr	r3, [r3, #20]
 8015aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ab0:	4413      	add	r3, r2
 8015ab2:	4619      	mov	r1, r3
 8015ab4:	68f8      	ldr	r0, [r7, #12]
 8015ab6:	f7fe ffdc 	bl	8014a72 <ld_clust>
 8015aba:	4602      	mov	r2, r0
 8015abc:	693b      	ldr	r3, [r7, #16]
 8015abe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015ac0:	e7c0      	b.n	8015a44 <follow_path+0x50>
			if (res != FR_OK) break;
 8015ac2:	bf00      	nop
 8015ac4:	e002      	b.n	8015acc <follow_path+0xd8>
				break;
 8015ac6:	bf00      	nop
 8015ac8:	e000      	b.n	8015acc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015aca:	bf00      	nop
			}
		}
	}

	return res;
 8015acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3718      	adds	r7, #24
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}

08015ad6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015ad6:	b480      	push	{r7}
 8015ad8:	b087      	sub	sp, #28
 8015ada:	af00      	add	r7, sp, #0
 8015adc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8015ade:	f04f 33ff 	mov.w	r3, #4294967295
 8015ae2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d031      	beq.n	8015b50 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	617b      	str	r3, [r7, #20]
 8015af2:	e002      	b.n	8015afa <get_ldnumber+0x24>
 8015af4:	697b      	ldr	r3, [r7, #20]
 8015af6:	3301      	adds	r3, #1
 8015af8:	617b      	str	r3, [r7, #20]
 8015afa:	697b      	ldr	r3, [r7, #20]
 8015afc:	781b      	ldrb	r3, [r3, #0]
 8015afe:	2b1f      	cmp	r3, #31
 8015b00:	d903      	bls.n	8015b0a <get_ldnumber+0x34>
 8015b02:	697b      	ldr	r3, [r7, #20]
 8015b04:	781b      	ldrb	r3, [r3, #0]
 8015b06:	2b3a      	cmp	r3, #58	; 0x3a
 8015b08:	d1f4      	bne.n	8015af4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	2b3a      	cmp	r3, #58	; 0x3a
 8015b10:	d11c      	bne.n	8015b4c <get_ldnumber+0x76>
			tp = *path;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	1c5a      	adds	r2, r3, #1
 8015b1c:	60fa      	str	r2, [r7, #12]
 8015b1e:	781b      	ldrb	r3, [r3, #0]
 8015b20:	3b30      	subs	r3, #48	; 0x30
 8015b22:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	2b09      	cmp	r3, #9
 8015b28:	d80e      	bhi.n	8015b48 <get_ldnumber+0x72>
 8015b2a:	68fa      	ldr	r2, [r7, #12]
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	429a      	cmp	r2, r3
 8015b30:	d10a      	bne.n	8015b48 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d107      	bne.n	8015b48 <get_ldnumber+0x72>
					vol = (int)i;
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8015b3c:	697b      	ldr	r3, [r7, #20]
 8015b3e:	3301      	adds	r3, #1
 8015b40:	617b      	str	r3, [r7, #20]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	697a      	ldr	r2, [r7, #20]
 8015b46:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8015b48:	693b      	ldr	r3, [r7, #16]
 8015b4a:	e002      	b.n	8015b52 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8015b50:	693b      	ldr	r3, [r7, #16]
}
 8015b52:	4618      	mov	r0, r3
 8015b54:	371c      	adds	r7, #28
 8015b56:	46bd      	mov	sp, r7
 8015b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5c:	4770      	bx	lr
	...

08015b60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b082      	sub	sp, #8
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
 8015b68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	70da      	strb	r2, [r3, #3]
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	f04f 32ff 	mov.w	r2, #4294967295
 8015b76:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015b78:	6839      	ldr	r1, [r7, #0]
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	f7fe fa72 	bl	8014064 <move_window>
 8015b80:	4603      	mov	r3, r0
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d001      	beq.n	8015b8a <check_fs+0x2a>
 8015b86:	2304      	movs	r3, #4
 8015b88:	e038      	b.n	8015bfc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	3334      	adds	r3, #52	; 0x34
 8015b8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7fd ffb6 	bl	8013b04 <ld_word>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	461a      	mov	r2, r3
 8015b9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015ba0:	429a      	cmp	r2, r3
 8015ba2:	d001      	beq.n	8015ba8 <check_fs+0x48>
 8015ba4:	2303      	movs	r3, #3
 8015ba6:	e029      	b.n	8015bfc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015bae:	2be9      	cmp	r3, #233	; 0xe9
 8015bb0:	d009      	beq.n	8015bc6 <check_fs+0x66>
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015bb8:	2beb      	cmp	r3, #235	; 0xeb
 8015bba:	d11e      	bne.n	8015bfa <check_fs+0x9a>
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8015bc2:	2b90      	cmp	r3, #144	; 0x90
 8015bc4:	d119      	bne.n	8015bfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	3334      	adds	r3, #52	; 0x34
 8015bca:	3336      	adds	r3, #54	; 0x36
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7fd ffb1 	bl	8013b34 <ld_dword>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015bd8:	4a0a      	ldr	r2, [pc, #40]	; (8015c04 <check_fs+0xa4>)
 8015bda:	4293      	cmp	r3, r2
 8015bdc:	d101      	bne.n	8015be2 <check_fs+0x82>
 8015bde:	2300      	movs	r3, #0
 8015be0:	e00c      	b.n	8015bfc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	3334      	adds	r3, #52	; 0x34
 8015be6:	3352      	adds	r3, #82	; 0x52
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7fd ffa3 	bl	8013b34 <ld_dword>
 8015bee:	4603      	mov	r3, r0
 8015bf0:	4a05      	ldr	r2, [pc, #20]	; (8015c08 <check_fs+0xa8>)
 8015bf2:	4293      	cmp	r3, r2
 8015bf4:	d101      	bne.n	8015bfa <check_fs+0x9a>
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	e000      	b.n	8015bfc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8015bfa:	2302      	movs	r3, #2
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	3708      	adds	r7, #8
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}
 8015c04:	00544146 	.word	0x00544146
 8015c08:	33544146 	.word	0x33544146

08015c0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b096      	sub	sp, #88	; 0x58
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	60f8      	str	r0, [r7, #12]
 8015c14:	60b9      	str	r1, [r7, #8]
 8015c16:	4613      	mov	r3, r2
 8015c18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8015c20:	68f8      	ldr	r0, [r7, #12]
 8015c22:	f7ff ff58 	bl	8015ad6 <get_ldnumber>
 8015c26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8015c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	da01      	bge.n	8015c32 <find_volume+0x26>
 8015c2e:	230b      	movs	r3, #11
 8015c30:	e230      	b.n	8016094 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8015c32:	4aa1      	ldr	r2, [pc, #644]	; (8015eb8 <find_volume+0x2ac>)
 8015c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8015c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d101      	bne.n	8015c46 <find_volume+0x3a>
 8015c42:	230c      	movs	r3, #12
 8015c44:	e226      	b.n	8016094 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8015c46:	68bb      	ldr	r3, [r7, #8]
 8015c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015c4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015c4c:	79fb      	ldrb	r3, [r7, #7]
 8015c4e:	f023 0301 	bic.w	r3, r3, #1
 8015c52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c56:	781b      	ldrb	r3, [r3, #0]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d01a      	beq.n	8015c92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8015c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c5e:	785b      	ldrb	r3, [r3, #1]
 8015c60:	4618      	mov	r0, r3
 8015c62:	f7fd fea9 	bl	80139b8 <disk_status>
 8015c66:	4603      	mov	r3, r0
 8015c68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015c6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015c70:	f003 0301 	and.w	r3, r3, #1
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d10c      	bne.n	8015c92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015c78:	79fb      	ldrb	r3, [r7, #7]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d007      	beq.n	8015c8e <find_volume+0x82>
 8015c7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015c82:	f003 0304 	and.w	r3, r3, #4
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d001      	beq.n	8015c8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8015c8a:	230a      	movs	r3, #10
 8015c8c:	e202      	b.n	8016094 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8015c8e:	2300      	movs	r3, #0
 8015c90:	e200      	b.n	8016094 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8015c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c94:	2200      	movs	r2, #0
 8015c96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8015c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c9a:	b2da      	uxtb	r2, r3
 8015c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8015ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca2:	785b      	ldrb	r3, [r3, #1]
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	f7fd fea1 	bl	80139ec <disk_initialize>
 8015caa:	4603      	mov	r3, r0
 8015cac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8015cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015cb4:	f003 0301 	and.w	r3, r3, #1
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d001      	beq.n	8015cc0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015cbc:	2303      	movs	r3, #3
 8015cbe:	e1e9      	b.n	8016094 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8015cc0:	79fb      	ldrb	r3, [r7, #7]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d007      	beq.n	8015cd6 <find_volume+0xca>
 8015cc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015cca:	f003 0304 	and.w	r3, r3, #4
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d001      	beq.n	8015cd6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8015cd2:	230a      	movs	r3, #10
 8015cd4:	e1de      	b.n	8016094 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8015cda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015cdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015cde:	f7ff ff3f 	bl	8015b60 <check_fs>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8015ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015cec:	2b02      	cmp	r3, #2
 8015cee:	d149      	bne.n	8015d84 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8015cf4:	e01e      	b.n	8015d34 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8015cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cf8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8015cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015cfe:	011b      	lsls	r3, r3, #4
 8015d00:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8015d04:	4413      	add	r3, r2
 8015d06:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d0a:	3304      	adds	r3, #4
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d006      	beq.n	8015d20 <find_volume+0x114>
 8015d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d14:	3308      	adds	r3, #8
 8015d16:	4618      	mov	r0, r3
 8015d18:	f7fd ff0c 	bl	8013b34 <ld_dword>
 8015d1c:	4602      	mov	r2, r0
 8015d1e:	e000      	b.n	8015d22 <find_volume+0x116>
 8015d20:	2200      	movs	r2, #0
 8015d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d24:	009b      	lsls	r3, r3, #2
 8015d26:	3358      	adds	r3, #88	; 0x58
 8015d28:	443b      	add	r3, r7
 8015d2a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d30:	3301      	adds	r3, #1
 8015d32:	643b      	str	r3, [r7, #64]	; 0x40
 8015d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d36:	2b03      	cmp	r3, #3
 8015d38:	d9dd      	bls.n	8015cf6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8015d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d002      	beq.n	8015d4a <find_volume+0x13e>
 8015d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d46:	3b01      	subs	r3, #1
 8015d48:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d4c:	009b      	lsls	r3, r3, #2
 8015d4e:	3358      	adds	r3, #88	; 0x58
 8015d50:	443b      	add	r3, r7
 8015d52:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8015d56:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d005      	beq.n	8015d6a <find_volume+0x15e>
 8015d5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015d60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015d62:	f7ff fefd 	bl	8015b60 <check_fs>
 8015d66:	4603      	mov	r3, r0
 8015d68:	e000      	b.n	8015d6c <find_volume+0x160>
 8015d6a:	2303      	movs	r3, #3
 8015d6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015d70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d74:	2b01      	cmp	r3, #1
 8015d76:	d905      	bls.n	8015d84 <find_volume+0x178>
 8015d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d7a:	3301      	adds	r3, #1
 8015d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8015d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d80:	2b03      	cmp	r3, #3
 8015d82:	d9e2      	bls.n	8015d4a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015d84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d88:	2b04      	cmp	r3, #4
 8015d8a:	d101      	bne.n	8015d90 <find_volume+0x184>
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	e181      	b.n	8016094 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015d90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d94:	2b01      	cmp	r3, #1
 8015d96:	d901      	bls.n	8015d9c <find_volume+0x190>
 8015d98:	230d      	movs	r3, #13
 8015d9a:	e17b      	b.n	8016094 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8015d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d9e:	3334      	adds	r3, #52	; 0x34
 8015da0:	330b      	adds	r3, #11
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7fd feae 	bl	8013b04 <ld_word>
 8015da8:	4603      	mov	r3, r0
 8015daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015dae:	d001      	beq.n	8015db4 <find_volume+0x1a8>
 8015db0:	230d      	movs	r3, #13
 8015db2:	e16f      	b.n	8016094 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8015db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015db6:	3334      	adds	r3, #52	; 0x34
 8015db8:	3316      	adds	r3, #22
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f7fd fea2 	bl	8013b04 <ld_word>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8015dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d106      	bne.n	8015dd8 <find_volume+0x1cc>
 8015dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dcc:	3334      	adds	r3, #52	; 0x34
 8015dce:	3324      	adds	r3, #36	; 0x24
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7fd feaf 	bl	8013b34 <ld_dword>
 8015dd6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8015dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015ddc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8015dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015de0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8015de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015de6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8015de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dea:	789b      	ldrb	r3, [r3, #2]
 8015dec:	2b01      	cmp	r3, #1
 8015dee:	d005      	beq.n	8015dfc <find_volume+0x1f0>
 8015df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015df2:	789b      	ldrb	r3, [r3, #2]
 8015df4:	2b02      	cmp	r3, #2
 8015df6:	d001      	beq.n	8015dfc <find_volume+0x1f0>
 8015df8:	230d      	movs	r3, #13
 8015dfa:	e14b      	b.n	8016094 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dfe:	789b      	ldrb	r3, [r3, #2]
 8015e00:	461a      	mov	r2, r3
 8015e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e04:	fb02 f303 	mul.w	r3, r2, r3
 8015e08:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8015e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015e10:	b29a      	uxth	r2, r3
 8015e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e14:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8015e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e18:	895b      	ldrh	r3, [r3, #10]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d008      	beq.n	8015e30 <find_volume+0x224>
 8015e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e20:	895b      	ldrh	r3, [r3, #10]
 8015e22:	461a      	mov	r2, r3
 8015e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e26:	895b      	ldrh	r3, [r3, #10]
 8015e28:	3b01      	subs	r3, #1
 8015e2a:	4013      	ands	r3, r2
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d001      	beq.n	8015e34 <find_volume+0x228>
 8015e30:	230d      	movs	r3, #13
 8015e32:	e12f      	b.n	8016094 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e36:	3334      	adds	r3, #52	; 0x34
 8015e38:	3311      	adds	r3, #17
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7fd fe62 	bl	8013b04 <ld_word>
 8015e40:	4603      	mov	r3, r0
 8015e42:	461a      	mov	r2, r3
 8015e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e46:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e4a:	891b      	ldrh	r3, [r3, #8]
 8015e4c:	f003 030f 	and.w	r3, r3, #15
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d001      	beq.n	8015e5a <find_volume+0x24e>
 8015e56:	230d      	movs	r3, #13
 8015e58:	e11c      	b.n	8016094 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e5c:	3334      	adds	r3, #52	; 0x34
 8015e5e:	3313      	adds	r3, #19
 8015e60:	4618      	mov	r0, r3
 8015e62:	f7fd fe4f 	bl	8013b04 <ld_word>
 8015e66:	4603      	mov	r3, r0
 8015e68:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d106      	bne.n	8015e7e <find_volume+0x272>
 8015e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e72:	3334      	adds	r3, #52	; 0x34
 8015e74:	3320      	adds	r3, #32
 8015e76:	4618      	mov	r0, r3
 8015e78:	f7fd fe5c 	bl	8013b34 <ld_dword>
 8015e7c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e80:	3334      	adds	r3, #52	; 0x34
 8015e82:	330e      	adds	r3, #14
 8015e84:	4618      	mov	r0, r3
 8015e86:	f7fd fe3d 	bl	8013b04 <ld_word>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d101      	bne.n	8015e98 <find_volume+0x28c>
 8015e94:	230d      	movs	r3, #13
 8015e96:	e0fd      	b.n	8016094 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8015e98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e9c:	4413      	add	r3, r2
 8015e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ea0:	8912      	ldrh	r2, [r2, #8]
 8015ea2:	0912      	lsrs	r2, r2, #4
 8015ea4:	b292      	uxth	r2, r2
 8015ea6:	4413      	add	r3, r2
 8015ea8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8015eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	d204      	bcs.n	8015ebc <find_volume+0x2b0>
 8015eb2:	230d      	movs	r3, #13
 8015eb4:	e0ee      	b.n	8016094 <find_volume+0x488>
 8015eb6:	bf00      	nop
 8015eb8:	200034b4 	.word	0x200034b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec0:	1ad3      	subs	r3, r2, r3
 8015ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ec4:	8952      	ldrh	r2, [r2, #10]
 8015ec6:	fbb3 f3f2 	udiv	r3, r3, r2
 8015eca:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d101      	bne.n	8015ed6 <find_volume+0x2ca>
 8015ed2:	230d      	movs	r3, #13
 8015ed4:	e0de      	b.n	8016094 <find_volume+0x488>
		fmt = FS_FAT32;
 8015ed6:	2303      	movs	r3, #3
 8015ed8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8015edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ede:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	d802      	bhi.n	8015eec <find_volume+0x2e0>
 8015ee6:	2302      	movs	r3, #2
 8015ee8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8015eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eee:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015ef2:	4293      	cmp	r3, r2
 8015ef4:	d802      	bhi.n	8015efc <find_volume+0x2f0>
 8015ef6:	2301      	movs	r3, #1
 8015ef8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015efe:	1c9a      	adds	r2, r3, #2
 8015f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f02:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8015f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015f08:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015f0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f0e:	441a      	add	r2, r3
 8015f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f12:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8015f14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f18:	441a      	add	r2, r3
 8015f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f1c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8015f1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015f22:	2b03      	cmp	r3, #3
 8015f24:	d11e      	bne.n	8015f64 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8015f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f28:	3334      	adds	r3, #52	; 0x34
 8015f2a:	332a      	adds	r3, #42	; 0x2a
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f7fd fde9 	bl	8013b04 <ld_word>
 8015f32:	4603      	mov	r3, r0
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d001      	beq.n	8015f3c <find_volume+0x330>
 8015f38:	230d      	movs	r3, #13
 8015f3a:	e0ab      	b.n	8016094 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f3e:	891b      	ldrh	r3, [r3, #8]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d001      	beq.n	8015f48 <find_volume+0x33c>
 8015f44:	230d      	movs	r3, #13
 8015f46:	e0a5      	b.n	8016094 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f4a:	3334      	adds	r3, #52	; 0x34
 8015f4c:	332c      	adds	r3, #44	; 0x2c
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f7fd fdf0 	bl	8013b34 <ld_dword>
 8015f54:	4602      	mov	r2, r0
 8015f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f58:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f5c:	699b      	ldr	r3, [r3, #24]
 8015f5e:	009b      	lsls	r3, r3, #2
 8015f60:	647b      	str	r3, [r7, #68]	; 0x44
 8015f62:	e01f      	b.n	8015fa4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f66:	891b      	ldrh	r3, [r3, #8]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d101      	bne.n	8015f70 <find_volume+0x364>
 8015f6c:	230d      	movs	r3, #13
 8015f6e:	e091      	b.n	8016094 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f76:	441a      	add	r2, r3
 8015f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f7a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015f7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015f80:	2b02      	cmp	r3, #2
 8015f82:	d103      	bne.n	8015f8c <find_volume+0x380>
 8015f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f86:	699b      	ldr	r3, [r3, #24]
 8015f88:	005b      	lsls	r3, r3, #1
 8015f8a:	e00a      	b.n	8015fa2 <find_volume+0x396>
 8015f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f8e:	699a      	ldr	r2, [r3, #24]
 8015f90:	4613      	mov	r3, r2
 8015f92:	005b      	lsls	r3, r3, #1
 8015f94:	4413      	add	r3, r2
 8015f96:	085a      	lsrs	r2, r3, #1
 8015f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f9a:	699b      	ldr	r3, [r3, #24]
 8015f9c:	f003 0301 	and.w	r3, r3, #1
 8015fa0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8015fa2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fa6:	69da      	ldr	r2, [r3, #28]
 8015fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015faa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8015fae:	0a5b      	lsrs	r3, r3, #9
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	d201      	bcs.n	8015fb8 <find_volume+0x3ac>
 8015fb4:	230d      	movs	r3, #13
 8015fb6:	e06d      	b.n	8016094 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fba:	f04f 32ff 	mov.w	r2, #4294967295
 8015fbe:	615a      	str	r2, [r3, #20]
 8015fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fc2:	695a      	ldr	r2, [r3, #20]
 8015fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fc6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8015fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fca:	2280      	movs	r2, #128	; 0x80
 8015fcc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8015fce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015fd2:	2b03      	cmp	r3, #3
 8015fd4:	d149      	bne.n	801606a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fd8:	3334      	adds	r3, #52	; 0x34
 8015fda:	3330      	adds	r3, #48	; 0x30
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f7fd fd91 	bl	8013b04 <ld_word>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	2b01      	cmp	r3, #1
 8015fe6:	d140      	bne.n	801606a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8015fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fea:	3301      	adds	r3, #1
 8015fec:	4619      	mov	r1, r3
 8015fee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015ff0:	f7fe f838 	bl	8014064 <move_window>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d137      	bne.n	801606a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8015ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016002:	3334      	adds	r3, #52	; 0x34
 8016004:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016008:	4618      	mov	r0, r3
 801600a:	f7fd fd7b 	bl	8013b04 <ld_word>
 801600e:	4603      	mov	r3, r0
 8016010:	461a      	mov	r2, r3
 8016012:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016016:	429a      	cmp	r2, r3
 8016018:	d127      	bne.n	801606a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801601c:	3334      	adds	r3, #52	; 0x34
 801601e:	4618      	mov	r0, r3
 8016020:	f7fd fd88 	bl	8013b34 <ld_dword>
 8016024:	4603      	mov	r3, r0
 8016026:	4a1d      	ldr	r2, [pc, #116]	; (801609c <find_volume+0x490>)
 8016028:	4293      	cmp	r3, r2
 801602a:	d11e      	bne.n	801606a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801602c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801602e:	3334      	adds	r3, #52	; 0x34
 8016030:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016034:	4618      	mov	r0, r3
 8016036:	f7fd fd7d 	bl	8013b34 <ld_dword>
 801603a:	4603      	mov	r3, r0
 801603c:	4a18      	ldr	r2, [pc, #96]	; (80160a0 <find_volume+0x494>)
 801603e:	4293      	cmp	r3, r2
 8016040:	d113      	bne.n	801606a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016044:	3334      	adds	r3, #52	; 0x34
 8016046:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801604a:	4618      	mov	r0, r3
 801604c:	f7fd fd72 	bl	8013b34 <ld_dword>
 8016050:	4602      	mov	r2, r0
 8016052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016054:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016058:	3334      	adds	r3, #52	; 0x34
 801605a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801605e:	4618      	mov	r0, r3
 8016060:	f7fd fd68 	bl	8013b34 <ld_dword>
 8016064:	4602      	mov	r2, r0
 8016066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016068:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801606c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016070:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016072:	4b0c      	ldr	r3, [pc, #48]	; (80160a4 <find_volume+0x498>)
 8016074:	881b      	ldrh	r3, [r3, #0]
 8016076:	3301      	adds	r3, #1
 8016078:	b29a      	uxth	r2, r3
 801607a:	4b0a      	ldr	r3, [pc, #40]	; (80160a4 <find_volume+0x498>)
 801607c:	801a      	strh	r2, [r3, #0]
 801607e:	4b09      	ldr	r3, [pc, #36]	; (80160a4 <find_volume+0x498>)
 8016080:	881a      	ldrh	r2, [r3, #0]
 8016082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016084:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8016086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016088:	4a07      	ldr	r2, [pc, #28]	; (80160a8 <find_volume+0x49c>)
 801608a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801608c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801608e:	f7fd ff81 	bl	8013f94 <clear_lock>
#endif
	return FR_OK;
 8016092:	2300      	movs	r3, #0
}
 8016094:	4618      	mov	r0, r3
 8016096:	3758      	adds	r7, #88	; 0x58
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}
 801609c:	41615252 	.word	0x41615252
 80160a0:	61417272 	.word	0x61417272
 80160a4:	200034b8 	.word	0x200034b8
 80160a8:	200035fc 	.word	0x200035fc

080160ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b084      	sub	sp, #16
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
 80160b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80160b6:	2309      	movs	r3, #9
 80160b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d01c      	beq.n	80160fa <validate+0x4e>
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d018      	beq.n	80160fa <validate+0x4e>
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	781b      	ldrb	r3, [r3, #0]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d013      	beq.n	80160fa <validate+0x4e>
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	889a      	ldrh	r2, [r3, #4]
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	88db      	ldrh	r3, [r3, #6]
 80160dc:	429a      	cmp	r2, r3
 80160de:	d10c      	bne.n	80160fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	785b      	ldrb	r3, [r3, #1]
 80160e6:	4618      	mov	r0, r3
 80160e8:	f7fd fc66 	bl	80139b8 <disk_status>
 80160ec:	4603      	mov	r3, r0
 80160ee:	f003 0301 	and.w	r3, r3, #1
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d101      	bne.n	80160fa <validate+0x4e>
			res = FR_OK;
 80160f6:	2300      	movs	r3, #0
 80160f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80160fa:	7bfb      	ldrb	r3, [r7, #15]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d102      	bne.n	8016106 <validate+0x5a>
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	e000      	b.n	8016108 <validate+0x5c>
 8016106:	2300      	movs	r3, #0
 8016108:	683a      	ldr	r2, [r7, #0]
 801610a:	6013      	str	r3, [r2, #0]
	return res;
 801610c:	7bfb      	ldrb	r3, [r7, #15]
}
 801610e:	4618      	mov	r0, r3
 8016110:	3710      	adds	r7, #16
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}
	...

08016118 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b088      	sub	sp, #32
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	4613      	mov	r3, r2
 8016124:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801612a:	f107 0310 	add.w	r3, r7, #16
 801612e:	4618      	mov	r0, r3
 8016130:	f7ff fcd1 	bl	8015ad6 <get_ldnumber>
 8016134:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016136:	69fb      	ldr	r3, [r7, #28]
 8016138:	2b00      	cmp	r3, #0
 801613a:	da01      	bge.n	8016140 <f_mount+0x28>
 801613c:	230b      	movs	r3, #11
 801613e:	e02b      	b.n	8016198 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016140:	4a17      	ldr	r2, [pc, #92]	; (80161a0 <f_mount+0x88>)
 8016142:	69fb      	ldr	r3, [r7, #28]
 8016144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016148:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801614a:	69bb      	ldr	r3, [r7, #24]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d005      	beq.n	801615c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016150:	69b8      	ldr	r0, [r7, #24]
 8016152:	f7fd ff1f 	bl	8013f94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016156:	69bb      	ldr	r3, [r7, #24]
 8016158:	2200      	movs	r2, #0
 801615a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d002      	beq.n	8016168 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	2200      	movs	r2, #0
 8016166:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016168:	68fa      	ldr	r2, [r7, #12]
 801616a:	490d      	ldr	r1, [pc, #52]	; (80161a0 <f_mount+0x88>)
 801616c:	69fb      	ldr	r3, [r7, #28]
 801616e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d002      	beq.n	801617e <f_mount+0x66>
 8016178:	79fb      	ldrb	r3, [r7, #7]
 801617a:	2b01      	cmp	r3, #1
 801617c:	d001      	beq.n	8016182 <f_mount+0x6a>
 801617e:	2300      	movs	r3, #0
 8016180:	e00a      	b.n	8016198 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016182:	f107 010c 	add.w	r1, r7, #12
 8016186:	f107 0308 	add.w	r3, r7, #8
 801618a:	2200      	movs	r2, #0
 801618c:	4618      	mov	r0, r3
 801618e:	f7ff fd3d 	bl	8015c0c <find_volume>
 8016192:	4603      	mov	r3, r0
 8016194:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016196:	7dfb      	ldrb	r3, [r7, #23]
}
 8016198:	4618      	mov	r0, r3
 801619a:	3720      	adds	r7, #32
 801619c:	46bd      	mov	sp, r7
 801619e:	bd80      	pop	{r7, pc}
 80161a0:	200034b4 	.word	0x200034b4

080161a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b09a      	sub	sp, #104	; 0x68
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	60f8      	str	r0, [r7, #12]
 80161ac:	60b9      	str	r1, [r7, #8]
 80161ae:	4613      	mov	r3, r2
 80161b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d101      	bne.n	80161bc <f_open+0x18>
 80161b8:	2309      	movs	r3, #9
 80161ba:	e1ad      	b.n	8016518 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80161bc:	79fb      	ldrb	r3, [r7, #7]
 80161be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80161c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80161c4:	79fa      	ldrb	r2, [r7, #7]
 80161c6:	f107 0110 	add.w	r1, r7, #16
 80161ca:	f107 0308 	add.w	r3, r7, #8
 80161ce:	4618      	mov	r0, r3
 80161d0:	f7ff fd1c 	bl	8015c0c <find_volume>
 80161d4:	4603      	mov	r3, r0
 80161d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80161da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80161de:	2b00      	cmp	r3, #0
 80161e0:	f040 8191 	bne.w	8016506 <f_open+0x362>
		dj.obj.fs = fs;
 80161e4:	693b      	ldr	r3, [r7, #16]
 80161e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80161e8:	68ba      	ldr	r2, [r7, #8]
 80161ea:	f107 0314 	add.w	r3, r7, #20
 80161ee:	4611      	mov	r1, r2
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7ff fbff 	bl	80159f4 <follow_path>
 80161f6:	4603      	mov	r3, r0
 80161f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80161fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016200:	2b00      	cmp	r3, #0
 8016202:	d11a      	bne.n	801623a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016204:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016208:	b25b      	sxtb	r3, r3
 801620a:	2b00      	cmp	r3, #0
 801620c:	da03      	bge.n	8016216 <f_open+0x72>
				res = FR_INVALID_NAME;
 801620e:	2306      	movs	r3, #6
 8016210:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016214:	e011      	b.n	801623a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016216:	79fb      	ldrb	r3, [r7, #7]
 8016218:	f023 0301 	bic.w	r3, r3, #1
 801621c:	2b00      	cmp	r3, #0
 801621e:	bf14      	ite	ne
 8016220:	2301      	movne	r3, #1
 8016222:	2300      	moveq	r3, #0
 8016224:	b2db      	uxtb	r3, r3
 8016226:	461a      	mov	r2, r3
 8016228:	f107 0314 	add.w	r3, r7, #20
 801622c:	4611      	mov	r1, r2
 801622e:	4618      	mov	r0, r3
 8016230:	f7fd fd68 	bl	8013d04 <chk_lock>
 8016234:	4603      	mov	r3, r0
 8016236:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801623a:	79fb      	ldrb	r3, [r7, #7]
 801623c:	f003 031c 	and.w	r3, r3, #28
 8016240:	2b00      	cmp	r3, #0
 8016242:	d07f      	beq.n	8016344 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8016244:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016248:	2b00      	cmp	r3, #0
 801624a:	d017      	beq.n	801627c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801624c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016250:	2b04      	cmp	r3, #4
 8016252:	d10e      	bne.n	8016272 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016254:	f7fd fdb2 	bl	8013dbc <enq_lock>
 8016258:	4603      	mov	r3, r0
 801625a:	2b00      	cmp	r3, #0
 801625c:	d006      	beq.n	801626c <f_open+0xc8>
 801625e:	f107 0314 	add.w	r3, r7, #20
 8016262:	4618      	mov	r0, r3
 8016264:	f7fe ff96 	bl	8015194 <dir_register>
 8016268:	4603      	mov	r3, r0
 801626a:	e000      	b.n	801626e <f_open+0xca>
 801626c:	2312      	movs	r3, #18
 801626e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016272:	79fb      	ldrb	r3, [r7, #7]
 8016274:	f043 0308 	orr.w	r3, r3, #8
 8016278:	71fb      	strb	r3, [r7, #7]
 801627a:	e010      	b.n	801629e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801627c:	7ebb      	ldrb	r3, [r7, #26]
 801627e:	f003 0311 	and.w	r3, r3, #17
 8016282:	2b00      	cmp	r3, #0
 8016284:	d003      	beq.n	801628e <f_open+0xea>
					res = FR_DENIED;
 8016286:	2307      	movs	r3, #7
 8016288:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801628c:	e007      	b.n	801629e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801628e:	79fb      	ldrb	r3, [r7, #7]
 8016290:	f003 0304 	and.w	r3, r3, #4
 8016294:	2b00      	cmp	r3, #0
 8016296:	d002      	beq.n	801629e <f_open+0xfa>
 8016298:	2308      	movs	r3, #8
 801629a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801629e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d168      	bne.n	8016378 <f_open+0x1d4>
 80162a6:	79fb      	ldrb	r3, [r7, #7]
 80162a8:	f003 0308 	and.w	r3, r3, #8
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d063      	beq.n	8016378 <f_open+0x1d4>
				dw = GET_FATTIME();
 80162b0:	f7fd fc20 	bl	8013af4 <get_fattime>
 80162b4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80162b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162b8:	330e      	adds	r3, #14
 80162ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80162bc:	4618      	mov	r0, r3
 80162be:	f7fd fc77 	bl	8013bb0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80162c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162c4:	3316      	adds	r3, #22
 80162c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80162c8:	4618      	mov	r0, r3
 80162ca:	f7fd fc71 	bl	8013bb0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80162ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162d0:	330b      	adds	r3, #11
 80162d2:	2220      	movs	r2, #32
 80162d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80162d6:	693b      	ldr	r3, [r7, #16]
 80162d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80162da:	4611      	mov	r1, r2
 80162dc:	4618      	mov	r0, r3
 80162de:	f7fe fbc8 	bl	8014a72 <ld_clust>
 80162e2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80162e4:	693b      	ldr	r3, [r7, #16]
 80162e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80162e8:	2200      	movs	r2, #0
 80162ea:	4618      	mov	r0, r3
 80162ec:	f7fe fbe0 	bl	8014ab0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80162f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162f2:	331c      	adds	r3, #28
 80162f4:	2100      	movs	r1, #0
 80162f6:	4618      	mov	r0, r3
 80162f8:	f7fd fc5a 	bl	8013bb0 <st_dword>
					fs->wflag = 1;
 80162fc:	693b      	ldr	r3, [r7, #16]
 80162fe:	2201      	movs	r2, #1
 8016300:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016304:	2b00      	cmp	r3, #0
 8016306:	d037      	beq.n	8016378 <f_open+0x1d4>
						dw = fs->winsect;
 8016308:	693b      	ldr	r3, [r7, #16]
 801630a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801630c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801630e:	f107 0314 	add.w	r3, r7, #20
 8016312:	2200      	movs	r2, #0
 8016314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016316:	4618      	mov	r0, r3
 8016318:	f7fe f8f3 	bl	8014502 <remove_chain>
 801631c:	4603      	mov	r3, r0
 801631e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8016322:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016326:	2b00      	cmp	r3, #0
 8016328:	d126      	bne.n	8016378 <f_open+0x1d4>
							res = move_window(fs, dw);
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801632e:	4618      	mov	r0, r3
 8016330:	f7fd fe98 	bl	8014064 <move_window>
 8016334:	4603      	mov	r3, r0
 8016336:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801633a:	693b      	ldr	r3, [r7, #16]
 801633c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801633e:	3a01      	subs	r2, #1
 8016340:	611a      	str	r2, [r3, #16]
 8016342:	e019      	b.n	8016378 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016344:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016348:	2b00      	cmp	r3, #0
 801634a:	d115      	bne.n	8016378 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801634c:	7ebb      	ldrb	r3, [r7, #26]
 801634e:	f003 0310 	and.w	r3, r3, #16
 8016352:	2b00      	cmp	r3, #0
 8016354:	d003      	beq.n	801635e <f_open+0x1ba>
					res = FR_NO_FILE;
 8016356:	2304      	movs	r3, #4
 8016358:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801635c:	e00c      	b.n	8016378 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801635e:	79fb      	ldrb	r3, [r7, #7]
 8016360:	f003 0302 	and.w	r3, r3, #2
 8016364:	2b00      	cmp	r3, #0
 8016366:	d007      	beq.n	8016378 <f_open+0x1d4>
 8016368:	7ebb      	ldrb	r3, [r7, #26]
 801636a:	f003 0301 	and.w	r3, r3, #1
 801636e:	2b00      	cmp	r3, #0
 8016370:	d002      	beq.n	8016378 <f_open+0x1d4>
						res = FR_DENIED;
 8016372:	2307      	movs	r3, #7
 8016374:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8016378:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801637c:	2b00      	cmp	r3, #0
 801637e:	d128      	bne.n	80163d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016380:	79fb      	ldrb	r3, [r7, #7]
 8016382:	f003 0308 	and.w	r3, r3, #8
 8016386:	2b00      	cmp	r3, #0
 8016388:	d003      	beq.n	8016392 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801638a:	79fb      	ldrb	r3, [r7, #7]
 801638c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016390:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016392:	693b      	ldr	r3, [r7, #16]
 8016394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801639a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80163a0:	79fb      	ldrb	r3, [r7, #7]
 80163a2:	f023 0301 	bic.w	r3, r3, #1
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	bf14      	ite	ne
 80163aa:	2301      	movne	r3, #1
 80163ac:	2300      	moveq	r3, #0
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	461a      	mov	r2, r3
 80163b2:	f107 0314 	add.w	r3, r7, #20
 80163b6:	4611      	mov	r1, r2
 80163b8:	4618      	mov	r0, r3
 80163ba:	f7fd fd21 	bl	8013e00 <inc_lock>
 80163be:	4602      	mov	r2, r0
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	691b      	ldr	r3, [r3, #16]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d102      	bne.n	80163d2 <f_open+0x22e>
 80163cc:	2302      	movs	r3, #2
 80163ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80163d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	f040 8095 	bne.w	8016506 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80163dc:	693b      	ldr	r3, [r7, #16]
 80163de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80163e0:	4611      	mov	r1, r2
 80163e2:	4618      	mov	r0, r3
 80163e4:	f7fe fb45 	bl	8014a72 <ld_clust>
 80163e8:	4602      	mov	r2, r0
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80163ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163f0:	331c      	adds	r3, #28
 80163f2:	4618      	mov	r0, r3
 80163f4:	f7fd fb9e 	bl	8013b34 <ld_dword>
 80163f8:	4602      	mov	r2, r0
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	2200      	movs	r2, #0
 8016402:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016404:	693a      	ldr	r2, [r7, #16]
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801640a:	693b      	ldr	r3, [r7, #16]
 801640c:	88da      	ldrh	r2, [r3, #6]
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	79fa      	ldrb	r2, [r7, #7]
 8016416:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	2200      	movs	r2, #0
 801641c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	2200      	movs	r2, #0
 8016422:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	2200      	movs	r2, #0
 8016428:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	3330      	adds	r3, #48	; 0x30
 801642e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016432:	2100      	movs	r1, #0
 8016434:	4618      	mov	r0, r3
 8016436:	f7fd fc08 	bl	8013c4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801643a:	79fb      	ldrb	r3, [r7, #7]
 801643c:	f003 0320 	and.w	r3, r3, #32
 8016440:	2b00      	cmp	r3, #0
 8016442:	d060      	beq.n	8016506 <f_open+0x362>
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	68db      	ldr	r3, [r3, #12]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d05c      	beq.n	8016506 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	68da      	ldr	r2, [r3, #12]
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016454:	693b      	ldr	r3, [r7, #16]
 8016456:	895b      	ldrh	r3, [r3, #10]
 8016458:	025b      	lsls	r3, r3, #9
 801645a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	689b      	ldr	r3, [r3, #8]
 8016460:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	68db      	ldr	r3, [r3, #12]
 8016466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016468:	e016      	b.n	8016498 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801646e:	4618      	mov	r0, r3
 8016470:	f7fd feb3 	bl	80141da <get_fat>
 8016474:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8016476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016478:	2b01      	cmp	r3, #1
 801647a:	d802      	bhi.n	8016482 <f_open+0x2de>
 801647c:	2302      	movs	r3, #2
 801647e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016488:	d102      	bne.n	8016490 <f_open+0x2ec>
 801648a:	2301      	movs	r3, #1
 801648c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016490:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016494:	1ad3      	subs	r3, r2, r3
 8016496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016498:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801649c:	2b00      	cmp	r3, #0
 801649e:	d103      	bne.n	80164a8 <f_open+0x304>
 80164a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80164a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164a4:	429a      	cmp	r2, r3
 80164a6:	d8e0      	bhi.n	801646a <f_open+0x2c6>
				}
				fp->clust = clst;
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80164ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80164ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d127      	bne.n	8016506 <f_open+0x362>
 80164b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80164b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d022      	beq.n	8016506 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80164c0:	693b      	ldr	r3, [r7, #16]
 80164c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80164c4:	4618      	mov	r0, r3
 80164c6:	f7fd fe69 	bl	801419c <clust2sect>
 80164ca:	64f8      	str	r0, [r7, #76]	; 0x4c
 80164cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d103      	bne.n	80164da <f_open+0x336>
						res = FR_INT_ERR;
 80164d2:	2302      	movs	r3, #2
 80164d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80164d8:	e015      	b.n	8016506 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80164da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80164dc:	0a5a      	lsrs	r2, r3, #9
 80164de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164e0:	441a      	add	r2, r3
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80164e6:	693b      	ldr	r3, [r7, #16]
 80164e8:	7858      	ldrb	r0, [r3, #1]
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	6a1a      	ldr	r2, [r3, #32]
 80164f4:	2301      	movs	r3, #1
 80164f6:	f7fd fa9f 	bl	8013a38 <disk_read>
 80164fa:	4603      	mov	r3, r0
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d002      	beq.n	8016506 <f_open+0x362>
 8016500:	2301      	movs	r3, #1
 8016502:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016506:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801650a:	2b00      	cmp	r3, #0
 801650c:	d002      	beq.n	8016514 <f_open+0x370>
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	2200      	movs	r2, #0
 8016512:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016514:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8016518:	4618      	mov	r0, r3
 801651a:	3768      	adds	r7, #104	; 0x68
 801651c:	46bd      	mov	sp, r7
 801651e:	bd80      	pop	{r7, pc}

08016520 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b08e      	sub	sp, #56	; 0x38
 8016524:	af00      	add	r7, sp, #0
 8016526:	60f8      	str	r0, [r7, #12]
 8016528:	60b9      	str	r1, [r7, #8]
 801652a:	607a      	str	r2, [r7, #4]
 801652c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801652e:	68bb      	ldr	r3, [r7, #8]
 8016530:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8016532:	683b      	ldr	r3, [r7, #0]
 8016534:	2200      	movs	r2, #0
 8016536:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	f107 0214 	add.w	r2, r7, #20
 801653e:	4611      	mov	r1, r2
 8016540:	4618      	mov	r0, r3
 8016542:	f7ff fdb3 	bl	80160ac <validate>
 8016546:	4603      	mov	r3, r0
 8016548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801654c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016550:	2b00      	cmp	r3, #0
 8016552:	d107      	bne.n	8016564 <f_read+0x44>
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	7d5b      	ldrb	r3, [r3, #21]
 8016558:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801655c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016560:	2b00      	cmp	r3, #0
 8016562:	d002      	beq.n	801656a <f_read+0x4a>
 8016564:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016568:	e115      	b.n	8016796 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	7d1b      	ldrb	r3, [r3, #20]
 801656e:	f003 0301 	and.w	r3, r3, #1
 8016572:	2b00      	cmp	r3, #0
 8016574:	d101      	bne.n	801657a <f_read+0x5a>
 8016576:	2307      	movs	r3, #7
 8016578:	e10d      	b.n	8016796 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	68da      	ldr	r2, [r3, #12]
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	699b      	ldr	r3, [r3, #24]
 8016582:	1ad3      	subs	r3, r2, r3
 8016584:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8016586:	687a      	ldr	r2, [r7, #4]
 8016588:	6a3b      	ldr	r3, [r7, #32]
 801658a:	429a      	cmp	r2, r3
 801658c:	f240 80fe 	bls.w	801678c <f_read+0x26c>
 8016590:	6a3b      	ldr	r3, [r7, #32]
 8016592:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8016594:	e0fa      	b.n	801678c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	699b      	ldr	r3, [r3, #24]
 801659a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801659e:	2b00      	cmp	r3, #0
 80165a0:	f040 80c6 	bne.w	8016730 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	699b      	ldr	r3, [r3, #24]
 80165a8:	0a5b      	lsrs	r3, r3, #9
 80165aa:	697a      	ldr	r2, [r7, #20]
 80165ac:	8952      	ldrh	r2, [r2, #10]
 80165ae:	3a01      	subs	r2, #1
 80165b0:	4013      	ands	r3, r2
 80165b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80165b4:	69fb      	ldr	r3, [r7, #28]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d12f      	bne.n	801661a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	699b      	ldr	r3, [r3, #24]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d103      	bne.n	80165ca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	689b      	ldr	r3, [r3, #8]
 80165c6:	633b      	str	r3, [r7, #48]	; 0x30
 80165c8:	e013      	b.n	80165f2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d007      	beq.n	80165e2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	699b      	ldr	r3, [r3, #24]
 80165d6:	4619      	mov	r1, r3
 80165d8:	68f8      	ldr	r0, [r7, #12]
 80165da:	f7fe f88f 	bl	80146fc <clmt_clust>
 80165de:	6338      	str	r0, [r7, #48]	; 0x30
 80165e0:	e007      	b.n	80165f2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80165e2:	68fa      	ldr	r2, [r7, #12]
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	69db      	ldr	r3, [r3, #28]
 80165e8:	4619      	mov	r1, r3
 80165ea:	4610      	mov	r0, r2
 80165ec:	f7fd fdf5 	bl	80141da <get_fat>
 80165f0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80165f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f4:	2b01      	cmp	r3, #1
 80165f6:	d804      	bhi.n	8016602 <f_read+0xe2>
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	2202      	movs	r2, #2
 80165fc:	755a      	strb	r2, [r3, #21]
 80165fe:	2302      	movs	r3, #2
 8016600:	e0c9      	b.n	8016796 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016608:	d104      	bne.n	8016614 <f_read+0xf4>
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	2201      	movs	r2, #1
 801660e:	755a      	strb	r2, [r3, #21]
 8016610:	2301      	movs	r3, #1
 8016612:	e0c0      	b.n	8016796 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016618:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801661a:	697a      	ldr	r2, [r7, #20]
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	69db      	ldr	r3, [r3, #28]
 8016620:	4619      	mov	r1, r3
 8016622:	4610      	mov	r0, r2
 8016624:	f7fd fdba 	bl	801419c <clust2sect>
 8016628:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801662a:	69bb      	ldr	r3, [r7, #24]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d104      	bne.n	801663a <f_read+0x11a>
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2202      	movs	r2, #2
 8016634:	755a      	strb	r2, [r3, #21]
 8016636:	2302      	movs	r3, #2
 8016638:	e0ad      	b.n	8016796 <f_read+0x276>
			sect += csect;
 801663a:	69ba      	ldr	r2, [r7, #24]
 801663c:	69fb      	ldr	r3, [r7, #28]
 801663e:	4413      	add	r3, r2
 8016640:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	0a5b      	lsrs	r3, r3, #9
 8016646:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8016648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801664a:	2b00      	cmp	r3, #0
 801664c:	d039      	beq.n	80166c2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801664e:	69fa      	ldr	r2, [r7, #28]
 8016650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016652:	4413      	add	r3, r2
 8016654:	697a      	ldr	r2, [r7, #20]
 8016656:	8952      	ldrh	r2, [r2, #10]
 8016658:	4293      	cmp	r3, r2
 801665a:	d905      	bls.n	8016668 <f_read+0x148>
					cc = fs->csize - csect;
 801665c:	697b      	ldr	r3, [r7, #20]
 801665e:	895b      	ldrh	r3, [r3, #10]
 8016660:	461a      	mov	r2, r3
 8016662:	69fb      	ldr	r3, [r7, #28]
 8016664:	1ad3      	subs	r3, r2, r3
 8016666:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016668:	697b      	ldr	r3, [r7, #20]
 801666a:	7858      	ldrb	r0, [r3, #1]
 801666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801666e:	69ba      	ldr	r2, [r7, #24]
 8016670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016672:	f7fd f9e1 	bl	8013a38 <disk_read>
 8016676:	4603      	mov	r3, r0
 8016678:	2b00      	cmp	r3, #0
 801667a:	d004      	beq.n	8016686 <f_read+0x166>
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	2201      	movs	r2, #1
 8016680:	755a      	strb	r2, [r3, #21]
 8016682:	2301      	movs	r3, #1
 8016684:	e087      	b.n	8016796 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	7d1b      	ldrb	r3, [r3, #20]
 801668a:	b25b      	sxtb	r3, r3
 801668c:	2b00      	cmp	r3, #0
 801668e:	da14      	bge.n	80166ba <f_read+0x19a>
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	6a1a      	ldr	r2, [r3, #32]
 8016694:	69bb      	ldr	r3, [r7, #24]
 8016696:	1ad3      	subs	r3, r2, r3
 8016698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801669a:	429a      	cmp	r2, r3
 801669c:	d90d      	bls.n	80166ba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	6a1a      	ldr	r2, [r3, #32]
 80166a2:	69bb      	ldr	r3, [r7, #24]
 80166a4:	1ad3      	subs	r3, r2, r3
 80166a6:	025b      	lsls	r3, r3, #9
 80166a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166aa:	18d0      	adds	r0, r2, r3
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	3330      	adds	r3, #48	; 0x30
 80166b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80166b4:	4619      	mov	r1, r3
 80166b6:	f7fd faa7 	bl	8013c08 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80166ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166bc:	025b      	lsls	r3, r3, #9
 80166be:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80166c0:	e050      	b.n	8016764 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	6a1b      	ldr	r3, [r3, #32]
 80166c6:	69ba      	ldr	r2, [r7, #24]
 80166c8:	429a      	cmp	r2, r3
 80166ca:	d02e      	beq.n	801672a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	7d1b      	ldrb	r3, [r3, #20]
 80166d0:	b25b      	sxtb	r3, r3
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	da18      	bge.n	8016708 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80166d6:	697b      	ldr	r3, [r7, #20]
 80166d8:	7858      	ldrb	r0, [r3, #1]
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	6a1a      	ldr	r2, [r3, #32]
 80166e4:	2301      	movs	r3, #1
 80166e6:	f7fd f9c7 	bl	8013a78 <disk_write>
 80166ea:	4603      	mov	r3, r0
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d004      	beq.n	80166fa <f_read+0x1da>
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	2201      	movs	r2, #1
 80166f4:	755a      	strb	r2, [r3, #21]
 80166f6:	2301      	movs	r3, #1
 80166f8:	e04d      	b.n	8016796 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	7d1b      	ldrb	r3, [r3, #20]
 80166fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016702:	b2da      	uxtb	r2, r3
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8016708:	697b      	ldr	r3, [r7, #20]
 801670a:	7858      	ldrb	r0, [r3, #1]
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016712:	2301      	movs	r3, #1
 8016714:	69ba      	ldr	r2, [r7, #24]
 8016716:	f7fd f98f 	bl	8013a38 <disk_read>
 801671a:	4603      	mov	r3, r0
 801671c:	2b00      	cmp	r3, #0
 801671e:	d004      	beq.n	801672a <f_read+0x20a>
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	2201      	movs	r2, #1
 8016724:	755a      	strb	r2, [r3, #21]
 8016726:	2301      	movs	r3, #1
 8016728:	e035      	b.n	8016796 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	69ba      	ldr	r2, [r7, #24]
 801672e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	699b      	ldr	r3, [r3, #24]
 8016734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016738:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801673c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801673e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	429a      	cmp	r2, r3
 8016744:	d901      	bls.n	801674a <f_read+0x22a>
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	699b      	ldr	r3, [r3, #24]
 8016754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016758:	4413      	add	r3, r2
 801675a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801675c:	4619      	mov	r1, r3
 801675e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016760:	f7fd fa52 	bl	8013c08 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8016764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016768:	4413      	add	r3, r2
 801676a:	627b      	str	r3, [r7, #36]	; 0x24
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	699a      	ldr	r2, [r3, #24]
 8016770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016772:	441a      	add	r2, r3
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	619a      	str	r2, [r3, #24]
 8016778:	683b      	ldr	r3, [r7, #0]
 801677a:	681a      	ldr	r2, [r3, #0]
 801677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801677e:	441a      	add	r2, r3
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	601a      	str	r2, [r3, #0]
 8016784:	687a      	ldr	r2, [r7, #4]
 8016786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016788:	1ad3      	subs	r3, r2, r3
 801678a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	2b00      	cmp	r3, #0
 8016790:	f47f af01 	bne.w	8016596 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8016794:	2300      	movs	r3, #0
}
 8016796:	4618      	mov	r0, r3
 8016798:	3738      	adds	r7, #56	; 0x38
 801679a:	46bd      	mov	sp, r7
 801679c:	bd80      	pop	{r7, pc}

0801679e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801679e:	b580      	push	{r7, lr}
 80167a0:	b08c      	sub	sp, #48	; 0x30
 80167a2:	af00      	add	r7, sp, #0
 80167a4:	60f8      	str	r0, [r7, #12]
 80167a6:	60b9      	str	r1, [r7, #8]
 80167a8:	607a      	str	r2, [r7, #4]
 80167aa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80167ac:	68bb      	ldr	r3, [r7, #8]
 80167ae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80167b0:	683b      	ldr	r3, [r7, #0]
 80167b2:	2200      	movs	r2, #0
 80167b4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	f107 0210 	add.w	r2, r7, #16
 80167bc:	4611      	mov	r1, r2
 80167be:	4618      	mov	r0, r3
 80167c0:	f7ff fc74 	bl	80160ac <validate>
 80167c4:	4603      	mov	r3, r0
 80167c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80167ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d107      	bne.n	80167e2 <f_write+0x44>
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	7d5b      	ldrb	r3, [r3, #21]
 80167d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80167da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d002      	beq.n	80167e8 <f_write+0x4a>
 80167e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80167e6:	e14b      	b.n	8016a80 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	7d1b      	ldrb	r3, [r3, #20]
 80167ec:	f003 0302 	and.w	r3, r3, #2
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d101      	bne.n	80167f8 <f_write+0x5a>
 80167f4:	2307      	movs	r3, #7
 80167f6:	e143      	b.n	8016a80 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	699a      	ldr	r2, [r3, #24]
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	441a      	add	r2, r3
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	699b      	ldr	r3, [r3, #24]
 8016804:	429a      	cmp	r2, r3
 8016806:	f080 812d 	bcs.w	8016a64 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	699b      	ldr	r3, [r3, #24]
 801680e:	43db      	mvns	r3, r3
 8016810:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016812:	e127      	b.n	8016a64 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	699b      	ldr	r3, [r3, #24]
 8016818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801681c:	2b00      	cmp	r3, #0
 801681e:	f040 80e3 	bne.w	80169e8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	699b      	ldr	r3, [r3, #24]
 8016826:	0a5b      	lsrs	r3, r3, #9
 8016828:	693a      	ldr	r2, [r7, #16]
 801682a:	8952      	ldrh	r2, [r2, #10]
 801682c:	3a01      	subs	r2, #1
 801682e:	4013      	ands	r3, r2
 8016830:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8016832:	69bb      	ldr	r3, [r7, #24]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d143      	bne.n	80168c0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	699b      	ldr	r3, [r3, #24]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d10c      	bne.n	801685a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	689b      	ldr	r3, [r3, #8]
 8016844:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016848:	2b00      	cmp	r3, #0
 801684a:	d11a      	bne.n	8016882 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	2100      	movs	r1, #0
 8016850:	4618      	mov	r0, r3
 8016852:	f7fd febb 	bl	80145cc <create_chain>
 8016856:	62b8      	str	r0, [r7, #40]	; 0x28
 8016858:	e013      	b.n	8016882 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801685e:	2b00      	cmp	r3, #0
 8016860:	d007      	beq.n	8016872 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	699b      	ldr	r3, [r3, #24]
 8016866:	4619      	mov	r1, r3
 8016868:	68f8      	ldr	r0, [r7, #12]
 801686a:	f7fd ff47 	bl	80146fc <clmt_clust>
 801686e:	62b8      	str	r0, [r7, #40]	; 0x28
 8016870:	e007      	b.n	8016882 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016872:	68fa      	ldr	r2, [r7, #12]
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	69db      	ldr	r3, [r3, #28]
 8016878:	4619      	mov	r1, r3
 801687a:	4610      	mov	r0, r2
 801687c:	f7fd fea6 	bl	80145cc <create_chain>
 8016880:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016884:	2b00      	cmp	r3, #0
 8016886:	f000 80f2 	beq.w	8016a6e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801688c:	2b01      	cmp	r3, #1
 801688e:	d104      	bne.n	801689a <f_write+0xfc>
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	2202      	movs	r2, #2
 8016894:	755a      	strb	r2, [r3, #21]
 8016896:	2302      	movs	r3, #2
 8016898:	e0f2      	b.n	8016a80 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801689c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168a0:	d104      	bne.n	80168ac <f_write+0x10e>
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	2201      	movs	r2, #1
 80168a6:	755a      	strb	r2, [r3, #21]
 80168a8:	2301      	movs	r3, #1
 80168aa:	e0e9      	b.n	8016a80 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168b0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	689b      	ldr	r3, [r3, #8]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d102      	bne.n	80168c0 <f_write+0x122>
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168be:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	7d1b      	ldrb	r3, [r3, #20]
 80168c4:	b25b      	sxtb	r3, r3
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	da18      	bge.n	80168fc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80168ca:	693b      	ldr	r3, [r7, #16]
 80168cc:	7858      	ldrb	r0, [r3, #1]
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	6a1a      	ldr	r2, [r3, #32]
 80168d8:	2301      	movs	r3, #1
 80168da:	f7fd f8cd 	bl	8013a78 <disk_write>
 80168de:	4603      	mov	r3, r0
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d004      	beq.n	80168ee <f_write+0x150>
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	2201      	movs	r2, #1
 80168e8:	755a      	strb	r2, [r3, #21]
 80168ea:	2301      	movs	r3, #1
 80168ec:	e0c8      	b.n	8016a80 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	7d1b      	ldrb	r3, [r3, #20]
 80168f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168f6:	b2da      	uxtb	r2, r3
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80168fc:	693a      	ldr	r2, [r7, #16]
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	69db      	ldr	r3, [r3, #28]
 8016902:	4619      	mov	r1, r3
 8016904:	4610      	mov	r0, r2
 8016906:	f7fd fc49 	bl	801419c <clust2sect>
 801690a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801690c:	697b      	ldr	r3, [r7, #20]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d104      	bne.n	801691c <f_write+0x17e>
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	2202      	movs	r2, #2
 8016916:	755a      	strb	r2, [r3, #21]
 8016918:	2302      	movs	r3, #2
 801691a:	e0b1      	b.n	8016a80 <f_write+0x2e2>
			sect += csect;
 801691c:	697a      	ldr	r2, [r7, #20]
 801691e:	69bb      	ldr	r3, [r7, #24]
 8016920:	4413      	add	r3, r2
 8016922:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	0a5b      	lsrs	r3, r3, #9
 8016928:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801692a:	6a3b      	ldr	r3, [r7, #32]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d03c      	beq.n	80169aa <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016930:	69ba      	ldr	r2, [r7, #24]
 8016932:	6a3b      	ldr	r3, [r7, #32]
 8016934:	4413      	add	r3, r2
 8016936:	693a      	ldr	r2, [r7, #16]
 8016938:	8952      	ldrh	r2, [r2, #10]
 801693a:	4293      	cmp	r3, r2
 801693c:	d905      	bls.n	801694a <f_write+0x1ac>
					cc = fs->csize - csect;
 801693e:	693b      	ldr	r3, [r7, #16]
 8016940:	895b      	ldrh	r3, [r3, #10]
 8016942:	461a      	mov	r2, r3
 8016944:	69bb      	ldr	r3, [r7, #24]
 8016946:	1ad3      	subs	r3, r2, r3
 8016948:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801694a:	693b      	ldr	r3, [r7, #16]
 801694c:	7858      	ldrb	r0, [r3, #1]
 801694e:	6a3b      	ldr	r3, [r7, #32]
 8016950:	697a      	ldr	r2, [r7, #20]
 8016952:	69f9      	ldr	r1, [r7, #28]
 8016954:	f7fd f890 	bl	8013a78 <disk_write>
 8016958:	4603      	mov	r3, r0
 801695a:	2b00      	cmp	r3, #0
 801695c:	d004      	beq.n	8016968 <f_write+0x1ca>
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	2201      	movs	r2, #1
 8016962:	755a      	strb	r2, [r3, #21]
 8016964:	2301      	movs	r3, #1
 8016966:	e08b      	b.n	8016a80 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	6a1a      	ldr	r2, [r3, #32]
 801696c:	697b      	ldr	r3, [r7, #20]
 801696e:	1ad3      	subs	r3, r2, r3
 8016970:	6a3a      	ldr	r2, [r7, #32]
 8016972:	429a      	cmp	r2, r3
 8016974:	d915      	bls.n	80169a2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	6a1a      	ldr	r2, [r3, #32]
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	1ad3      	subs	r3, r2, r3
 8016984:	025b      	lsls	r3, r3, #9
 8016986:	69fa      	ldr	r2, [r7, #28]
 8016988:	4413      	add	r3, r2
 801698a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801698e:	4619      	mov	r1, r3
 8016990:	f7fd f93a 	bl	8013c08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	7d1b      	ldrb	r3, [r3, #20]
 8016998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801699c:	b2da      	uxtb	r2, r3
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80169a2:	6a3b      	ldr	r3, [r7, #32]
 80169a4:	025b      	lsls	r3, r3, #9
 80169a6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80169a8:	e03f      	b.n	8016a2a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	6a1b      	ldr	r3, [r3, #32]
 80169ae:	697a      	ldr	r2, [r7, #20]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d016      	beq.n	80169e2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	699a      	ldr	r2, [r3, #24]
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80169bc:	429a      	cmp	r2, r3
 80169be:	d210      	bcs.n	80169e2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80169c0:	693b      	ldr	r3, [r7, #16]
 80169c2:	7858      	ldrb	r0, [r3, #1]
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80169ca:	2301      	movs	r3, #1
 80169cc:	697a      	ldr	r2, [r7, #20]
 80169ce:	f7fd f833 	bl	8013a38 <disk_read>
 80169d2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d004      	beq.n	80169e2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	2201      	movs	r2, #1
 80169dc:	755a      	strb	r2, [r3, #21]
 80169de:	2301      	movs	r3, #1
 80169e0:	e04e      	b.n	8016a80 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	697a      	ldr	r2, [r7, #20]
 80169e6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	699b      	ldr	r3, [r3, #24]
 80169ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80169f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80169f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80169f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	429a      	cmp	r2, r3
 80169fc:	d901      	bls.n	8016a02 <f_write+0x264>
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	699b      	ldr	r3, [r3, #24]
 8016a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016a10:	4413      	add	r3, r2
 8016a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a14:	69f9      	ldr	r1, [r7, #28]
 8016a16:	4618      	mov	r0, r3
 8016a18:	f7fd f8f6 	bl	8013c08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	7d1b      	ldrb	r3, [r3, #20]
 8016a20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016a24:	b2da      	uxtb	r2, r3
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016a2a:	69fa      	ldr	r2, [r7, #28]
 8016a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2e:	4413      	add	r3, r2
 8016a30:	61fb      	str	r3, [r7, #28]
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	699a      	ldr	r2, [r3, #24]
 8016a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a38:	441a      	add	r2, r3
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	619a      	str	r2, [r3, #24]
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	68da      	ldr	r2, [r3, #12]
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	699b      	ldr	r3, [r3, #24]
 8016a46:	429a      	cmp	r2, r3
 8016a48:	bf38      	it	cc
 8016a4a:	461a      	movcc	r2, r3
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	60da      	str	r2, [r3, #12]
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	681a      	ldr	r2, [r3, #0]
 8016a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a56:	441a      	add	r2, r3
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	601a      	str	r2, [r3, #0]
 8016a5c:	687a      	ldr	r2, [r7, #4]
 8016a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a60:	1ad3      	subs	r3, r2, r3
 8016a62:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	f47f aed4 	bne.w	8016814 <f_write+0x76>
 8016a6c:	e000      	b.n	8016a70 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016a6e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	7d1b      	ldrb	r3, [r3, #20]
 8016a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a78:	b2da      	uxtb	r2, r3
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8016a7e:	2300      	movs	r3, #0
}
 8016a80:	4618      	mov	r0, r3
 8016a82:	3730      	adds	r7, #48	; 0x30
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}

08016a88 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b086      	sub	sp, #24
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f107 0208 	add.w	r2, r7, #8
 8016a96:	4611      	mov	r1, r2
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f7ff fb07 	bl	80160ac <validate>
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016aa2:	7dfb      	ldrb	r3, [r7, #23]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d168      	bne.n	8016b7a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	7d1b      	ldrb	r3, [r3, #20]
 8016aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d062      	beq.n	8016b7a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	7d1b      	ldrb	r3, [r3, #20]
 8016ab8:	b25b      	sxtb	r3, r3
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	da15      	bge.n	8016aea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016abe:	68bb      	ldr	r3, [r7, #8]
 8016ac0:	7858      	ldrb	r0, [r3, #1]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	6a1a      	ldr	r2, [r3, #32]
 8016acc:	2301      	movs	r3, #1
 8016ace:	f7fc ffd3 	bl	8013a78 <disk_write>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d001      	beq.n	8016adc <f_sync+0x54>
 8016ad8:	2301      	movs	r3, #1
 8016ada:	e04f      	b.n	8016b7c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	7d1b      	ldrb	r3, [r3, #20]
 8016ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016ae4:	b2da      	uxtb	r2, r3
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8016aea:	f7fd f803 	bl	8013af4 <get_fattime>
 8016aee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8016af0:	68ba      	ldr	r2, [r7, #8]
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016af6:	4619      	mov	r1, r3
 8016af8:	4610      	mov	r0, r2
 8016afa:	f7fd fab3 	bl	8014064 <move_window>
 8016afe:	4603      	mov	r3, r0
 8016b00:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8016b02:	7dfb      	ldrb	r3, [r7, #23]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d138      	bne.n	8016b7a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b0c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	330b      	adds	r3, #11
 8016b12:	781a      	ldrb	r2, [r3, #0]
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	330b      	adds	r3, #11
 8016b18:	f042 0220 	orr.w	r2, r2, #32
 8016b1c:	b2d2      	uxtb	r2, r2
 8016b1e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6818      	ldr	r0, [r3, #0]
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	689b      	ldr	r3, [r3, #8]
 8016b28:	461a      	mov	r2, r3
 8016b2a:	68f9      	ldr	r1, [r7, #12]
 8016b2c:	f7fd ffc0 	bl	8014ab0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	f103 021c 	add.w	r2, r3, #28
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	68db      	ldr	r3, [r3, #12]
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	4610      	mov	r0, r2
 8016b3e:	f7fd f837 	bl	8013bb0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	3316      	adds	r3, #22
 8016b46:	6939      	ldr	r1, [r7, #16]
 8016b48:	4618      	mov	r0, r3
 8016b4a:	f7fd f831 	bl	8013bb0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	3312      	adds	r3, #18
 8016b52:	2100      	movs	r1, #0
 8016b54:	4618      	mov	r0, r3
 8016b56:	f7fd f810 	bl	8013b7a <st_word>
					fs->wflag = 1;
 8016b5a:	68bb      	ldr	r3, [r7, #8]
 8016b5c:	2201      	movs	r2, #1
 8016b5e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8016b60:	68bb      	ldr	r3, [r7, #8]
 8016b62:	4618      	mov	r0, r3
 8016b64:	f7fd faac 	bl	80140c0 <sync_fs>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	7d1b      	ldrb	r3, [r3, #20]
 8016b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016b74:	b2da      	uxtb	r2, r3
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8016b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3718      	adds	r7, #24
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd80      	pop	{r7, pc}

08016b84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b084      	sub	sp, #16
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	f7ff ff7b 	bl	8016a88 <f_sync>
 8016b92:	4603      	mov	r3, r0
 8016b94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8016b96:	7bfb      	ldrb	r3, [r7, #15]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d118      	bne.n	8016bce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f107 0208 	add.w	r2, r7, #8
 8016ba2:	4611      	mov	r1, r2
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f7ff fa81 	bl	80160ac <validate>
 8016baa:	4603      	mov	r3, r0
 8016bac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8016bae:	7bfb      	ldrb	r3, [r7, #15]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d10c      	bne.n	8016bce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	691b      	ldr	r3, [r3, #16]
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f7fd f9af 	bl	8013f1c <dec_lock>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8016bc2:	7bfb      	ldrb	r3, [r7, #15]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d102      	bne.n	8016bce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	2200      	movs	r2, #0
 8016bcc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8016bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	3710      	adds	r7, #16
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}

08016bd8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b086      	sub	sp, #24
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
 8016be0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d101      	bne.n	8016bec <f_opendir+0x14>
 8016be8:	2309      	movs	r3, #9
 8016bea:	e064      	b.n	8016cb6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8016bf0:	f107 010c 	add.w	r1, r7, #12
 8016bf4:	463b      	mov	r3, r7
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	f7ff f807 	bl	8015c0c <find_volume>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016c02:	7dfb      	ldrb	r3, [r7, #23]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d14f      	bne.n	8016ca8 <f_opendir+0xd0>
		obj->fs = fs;
 8016c08:	68fa      	ldr	r2, [r7, #12]
 8016c0a:	693b      	ldr	r3, [r7, #16]
 8016c0c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	4619      	mov	r1, r3
 8016c12:	6878      	ldr	r0, [r7, #4]
 8016c14:	f7fe feee 	bl	80159f4 <follow_path>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8016c1c:	7dfb      	ldrb	r3, [r7, #23]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d13d      	bne.n	8016c9e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016c28:	b25b      	sxtb	r3, r3
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	db12      	blt.n	8016c54 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8016c2e:	693b      	ldr	r3, [r7, #16]
 8016c30:	799b      	ldrb	r3, [r3, #6]
 8016c32:	f003 0310 	and.w	r3, r3, #16
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d00a      	beq.n	8016c50 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8016c3a:	68fa      	ldr	r2, [r7, #12]
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	6a1b      	ldr	r3, [r3, #32]
 8016c40:	4619      	mov	r1, r3
 8016c42:	4610      	mov	r0, r2
 8016c44:	f7fd ff15 	bl	8014a72 <ld_clust>
 8016c48:	4602      	mov	r2, r0
 8016c4a:	693b      	ldr	r3, [r7, #16]
 8016c4c:	609a      	str	r2, [r3, #8]
 8016c4e:	e001      	b.n	8016c54 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8016c50:	2305      	movs	r3, #5
 8016c52:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8016c54:	7dfb      	ldrb	r3, [r7, #23]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d121      	bne.n	8016c9e <f_opendir+0xc6>
				obj->id = fs->id;
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	88da      	ldrh	r2, [r3, #6]
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8016c62:	2100      	movs	r1, #0
 8016c64:	6878      	ldr	r0, [r7, #4]
 8016c66:	f7fd fd7d 	bl	8014764 <dir_sdi>
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8016c6e:	7dfb      	ldrb	r3, [r7, #23]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d114      	bne.n	8016c9e <f_opendir+0xc6>
					if (obj->sclust) {
 8016c74:	693b      	ldr	r3, [r7, #16]
 8016c76:	689b      	ldr	r3, [r3, #8]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d00d      	beq.n	8016c98 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8016c7c:	2100      	movs	r1, #0
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	f7fd f8be 	bl	8013e00 <inc_lock>
 8016c84:	4602      	mov	r2, r0
 8016c86:	693b      	ldr	r3, [r7, #16]
 8016c88:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8016c8a:	693b      	ldr	r3, [r7, #16]
 8016c8c:	691b      	ldr	r3, [r3, #16]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d105      	bne.n	8016c9e <f_opendir+0xc6>
 8016c92:	2312      	movs	r3, #18
 8016c94:	75fb      	strb	r3, [r7, #23]
 8016c96:	e002      	b.n	8016c9e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8016c98:	693b      	ldr	r3, [r7, #16]
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8016c9e:	7dfb      	ldrb	r3, [r7, #23]
 8016ca0:	2b04      	cmp	r3, #4
 8016ca2:	d101      	bne.n	8016ca8 <f_opendir+0xd0>
 8016ca4:	2305      	movs	r3, #5
 8016ca6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8016ca8:	7dfb      	ldrb	r3, [r7, #23]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d002      	beq.n	8016cb4 <f_opendir+0xdc>
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	3718      	adds	r7, #24
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	bd80      	pop	{r7, pc}

08016cbe <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8016cbe:	b580      	push	{r7, lr}
 8016cc0:	b084      	sub	sp, #16
 8016cc2:	af00      	add	r7, sp, #0
 8016cc4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	f107 0208 	add.w	r2, r7, #8
 8016ccc:	4611      	mov	r1, r2
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7ff f9ec 	bl	80160ac <validate>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016cd8:	7bfb      	ldrb	r3, [r7, #15]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d110      	bne.n	8016d00 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	691b      	ldr	r3, [r3, #16]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d006      	beq.n	8016cf4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	691b      	ldr	r3, [r3, #16]
 8016cea:	4618      	mov	r0, r3
 8016cec:	f7fd f916 	bl	8013f1c <dec_lock>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8016cf4:	7bfb      	ldrb	r3, [r7, #15]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d102      	bne.n	8016d00 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8016d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d02:	4618      	mov	r0, r3
 8016d04:	3710      	adds	r7, #16
 8016d06:	46bd      	mov	sp, r7
 8016d08:	bd80      	pop	{r7, pc}

08016d0a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8016d0a:	b580      	push	{r7, lr}
 8016d0c:	b084      	sub	sp, #16
 8016d0e:	af00      	add	r7, sp, #0
 8016d10:	6078      	str	r0, [r7, #4]
 8016d12:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	f107 0208 	add.w	r2, r7, #8
 8016d1a:	4611      	mov	r1, r2
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f7ff f9c5 	bl	80160ac <validate>
 8016d22:	4603      	mov	r3, r0
 8016d24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016d26:	7bfb      	ldrb	r3, [r7, #15]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d126      	bne.n	8016d7a <f_readdir+0x70>
		if (!fno) {
 8016d2c:	683b      	ldr	r3, [r7, #0]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d106      	bne.n	8016d40 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8016d32:	2100      	movs	r1, #0
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f7fd fd15 	bl	8014764 <dir_sdi>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	73fb      	strb	r3, [r7, #15]
 8016d3e:	e01c      	b.n	8016d7a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8016d40:	2100      	movs	r1, #0
 8016d42:	6878      	ldr	r0, [r7, #4]
 8016d44:	f7fe f8bf 	bl	8014ec6 <dir_read>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8016d4c:	7bfb      	ldrb	r3, [r7, #15]
 8016d4e:	2b04      	cmp	r3, #4
 8016d50:	d101      	bne.n	8016d56 <f_readdir+0x4c>
 8016d52:	2300      	movs	r3, #0
 8016d54:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8016d56:	7bfb      	ldrb	r3, [r7, #15]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d10e      	bne.n	8016d7a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8016d5c:	6839      	ldr	r1, [r7, #0]
 8016d5e:	6878      	ldr	r0, [r7, #4]
 8016d60:	f7fe fb10 	bl	8015384 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8016d64:	2100      	movs	r1, #0
 8016d66:	6878      	ldr	r0, [r7, #4]
 8016d68:	f7fd fd77 	bl	801485a <dir_next>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8016d70:	7bfb      	ldrb	r3, [r7, #15]
 8016d72:	2b04      	cmp	r3, #4
 8016d74:	d101      	bne.n	8016d7a <f_readdir+0x70>
 8016d76:	2300      	movs	r3, #0
 8016d78:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8016d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	3710      	adds	r7, #16
 8016d80:	46bd      	mov	sp, r7
 8016d82:	bd80      	pop	{r7, pc}

08016d84 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8016d84:	b580      	push	{r7, lr}
 8016d86:	b084      	sub	sp, #16
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	6078      	str	r0, [r7, #4]
 8016d8c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8016d8e:	6839      	ldr	r1, [r7, #0]
 8016d90:	6878      	ldr	r0, [r7, #4]
 8016d92:	f7ff ffba 	bl	8016d0a <f_readdir>
 8016d96:	4603      	mov	r3, r0
 8016d98:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8016d9a:	7bfb      	ldrb	r3, [r7, #15]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d114      	bne.n	8016dca <f_findnext+0x46>
 8016da0:	683b      	ldr	r3, [r7, #0]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d011      	beq.n	8016dca <f_findnext+0x46>
 8016da6:	683b      	ldr	r3, [r7, #0]
 8016da8:	7d9b      	ldrb	r3, [r3, #22]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d00d      	beq.n	8016dca <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016db2:	683b      	ldr	r3, [r7, #0]
 8016db4:	f103 0116 	add.w	r1, r3, #22
 8016db8:	2300      	movs	r3, #0
 8016dba:	2200      	movs	r2, #0
 8016dbc:	f7fe fbe6 	bl	801558c <pattern_matching>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d100      	bne.n	8016dc8 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8016dc6:	e7e2      	b.n	8016d8e <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8016dc8:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8016dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8016dcc:	4618      	mov	r0, r3
 8016dce:	3710      	adds	r7, #16
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	bd80      	pop	{r7, pc}

08016dd4 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b086      	sub	sp, #24
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	60f8      	str	r0, [r7, #12]
 8016ddc:	60b9      	str	r1, [r7, #8]
 8016dde:	607a      	str	r2, [r7, #4]
 8016de0:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	683a      	ldr	r2, [r7, #0]
 8016de6:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8016de8:	6879      	ldr	r1, [r7, #4]
 8016dea:	68f8      	ldr	r0, [r7, #12]
 8016dec:	f7ff fef4 	bl	8016bd8 <f_opendir>
 8016df0:	4603      	mov	r3, r0
 8016df2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016df4:	7dfb      	ldrb	r3, [r7, #23]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d105      	bne.n	8016e06 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8016dfa:	68b9      	ldr	r1, [r7, #8]
 8016dfc:	68f8      	ldr	r0, [r7, #12]
 8016dfe:	f7ff ffc1 	bl	8016d84 <f_findnext>
 8016e02:	4603      	mov	r3, r0
 8016e04:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8016e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e08:	4618      	mov	r0, r3
 8016e0a:	3718      	adds	r7, #24
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bd80      	pop	{r7, pc}

08016e10 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b098      	sub	sp, #96	; 0x60
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8016e18:	f107 0108 	add.w	r1, r7, #8
 8016e1c:	1d3b      	adds	r3, r7, #4
 8016e1e:	2202      	movs	r2, #2
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7fe fef3 	bl	8015c0c <find_volume>
 8016e26:	4603      	mov	r3, r0
 8016e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8016e2c:	68bb      	ldr	r3, [r7, #8]
 8016e2e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8016e30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	f040 80ec 	bne.w	8017012 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8016e3a:	687a      	ldr	r2, [r7, #4]
 8016e3c:	f107 030c 	add.w	r3, r7, #12
 8016e40:	4611      	mov	r1, r2
 8016e42:	4618      	mov	r0, r3
 8016e44:	f7fe fdd6 	bl	80159f4 <follow_path>
 8016e48:	4603      	mov	r3, r0
 8016e4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8016e4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d102      	bne.n	8016e5c <f_mkdir+0x4c>
 8016e56:	2308      	movs	r3, #8
 8016e58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8016e5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016e60:	2b04      	cmp	r3, #4
 8016e62:	f040 80d6 	bne.w	8017012 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8016e66:	f107 030c 	add.w	r3, r7, #12
 8016e6a:	2100      	movs	r1, #0
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	f7fd fbad 	bl	80145cc <create_chain>
 8016e72:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	895b      	ldrh	r3, [r3, #10]
 8016e78:	025b      	lsls	r3, r3, #9
 8016e7a:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8016e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d102      	bne.n	8016e8e <f_mkdir+0x7e>
 8016e88:	2307      	movs	r3, #7
 8016e8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8016e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e90:	2b01      	cmp	r3, #1
 8016e92:	d102      	bne.n	8016e9a <f_mkdir+0x8a>
 8016e94:	2302      	movs	r3, #2
 8016e96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ea0:	d102      	bne.n	8016ea8 <f_mkdir+0x98>
 8016ea2:	2301      	movs	r3, #1
 8016ea4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8016ea8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d106      	bne.n	8016ebe <f_mkdir+0xae>
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7fd f892 	bl	8013fdc <sync_window>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8016ebe:	f7fc fe19 	bl	8013af4 <get_fattime>
 8016ec2:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8016ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d16a      	bne.n	8016fa2 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8016ecc:	68bb      	ldr	r3, [r7, #8]
 8016ece:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f7fd f963 	bl	801419c <clust2sect>
 8016ed6:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8016ed8:	68bb      	ldr	r3, [r7, #8]
 8016eda:	3334      	adds	r3, #52	; 0x34
 8016edc:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8016ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016ee2:	2100      	movs	r1, #0
 8016ee4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016ee6:	f7fc feb0 	bl	8013c4a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8016eea:	220b      	movs	r2, #11
 8016eec:	2120      	movs	r1, #32
 8016eee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016ef0:	f7fc feab 	bl	8013c4a <mem_set>
					dir[DIR_Name] = '.';
 8016ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ef6:	222e      	movs	r2, #46	; 0x2e
 8016ef8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8016efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016efc:	330b      	adds	r3, #11
 8016efe:	2210      	movs	r2, #16
 8016f00:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8016f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f04:	3316      	adds	r3, #22
 8016f06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f7fc fe51 	bl	8013bb0 <st_dword>
					st_clust(fs, dir, dcl);
 8016f0e:	68bb      	ldr	r3, [r7, #8]
 8016f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016f12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7fd fdcb 	bl	8014ab0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8016f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f1c:	3320      	adds	r3, #32
 8016f1e:	2220      	movs	r2, #32
 8016f20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016f22:	4618      	mov	r0, r3
 8016f24:	f7fc fe70 	bl	8013c08 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8016f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f2a:	3321      	adds	r3, #33	; 0x21
 8016f2c:	222e      	movs	r2, #46	; 0x2e
 8016f2e:	701a      	strb	r2, [r3, #0]
 8016f30:	697b      	ldr	r3, [r7, #20]
 8016f32:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8016f34:	68bb      	ldr	r3, [r7, #8]
 8016f36:	781b      	ldrb	r3, [r3, #0]
 8016f38:	2b03      	cmp	r3, #3
 8016f3a:	d106      	bne.n	8016f4a <f_mkdir+0x13a>
 8016f3c:	68bb      	ldr	r3, [r7, #8]
 8016f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016f42:	429a      	cmp	r2, r3
 8016f44:	d101      	bne.n	8016f4a <f_mkdir+0x13a>
 8016f46:	2300      	movs	r3, #0
 8016f48:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8016f4a:	68b8      	ldr	r0, [r7, #8]
 8016f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f4e:	3320      	adds	r3, #32
 8016f50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016f52:	4619      	mov	r1, r3
 8016f54:	f7fd fdac 	bl	8014ab0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	895b      	ldrh	r3, [r3, #10]
 8016f5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8016f5e:	e01b      	b.n	8016f98 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8016f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016f62:	1c5a      	adds	r2, r3, #1
 8016f64:	657a      	str	r2, [r7, #84]	; 0x54
 8016f66:	68ba      	ldr	r2, [r7, #8]
 8016f68:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8016f6a:	68bb      	ldr	r3, [r7, #8]
 8016f6c:	2201      	movs	r2, #1
 8016f6e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8016f70:	68bb      	ldr	r3, [r7, #8]
 8016f72:	4618      	mov	r0, r3
 8016f74:	f7fd f832 	bl	8013fdc <sync_window>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8016f7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d10c      	bne.n	8016fa0 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8016f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f8a:	2100      	movs	r1, #0
 8016f8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016f8e:	f7fc fe5c 	bl	8013c4a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f94:	3b01      	subs	r3, #1
 8016f96:	65bb      	str	r3, [r7, #88]	; 0x58
 8016f98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d1e0      	bne.n	8016f60 <f_mkdir+0x150>
 8016f9e:	e000      	b.n	8016fa2 <f_mkdir+0x192>
					if (res != FR_OK) break;
 8016fa0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8016fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d107      	bne.n	8016fba <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8016faa:	f107 030c 	add.w	r3, r7, #12
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f7fe f8f0 	bl	8015194 <dir_register>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8016fba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d120      	bne.n	8017004 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8016fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc4:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8016fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016fc8:	3316      	adds	r3, #22
 8016fca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f7fc fdef 	bl	8013bb0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8016fd2:	68bb      	ldr	r3, [r7, #8]
 8016fd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016fd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7fd fd69 	bl	8014ab0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8016fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016fe0:	330b      	adds	r3, #11
 8016fe2:	2210      	movs	r2, #16
 8016fe4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8016fe6:	68bb      	ldr	r3, [r7, #8]
 8016fe8:	2201      	movs	r2, #1
 8016fea:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8016fec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d10e      	bne.n	8017012 <f_mkdir+0x202>
					res = sync_fs(fs);
 8016ff4:	68bb      	ldr	r3, [r7, #8]
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f7fd f862 	bl	80140c0 <sync_fs>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017002:	e006      	b.n	8017012 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8017004:	f107 030c 	add.w	r3, r7, #12
 8017008:	2200      	movs	r2, #0
 801700a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801700c:	4618      	mov	r0, r3
 801700e:	f7fd fa78 	bl	8014502 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8017012:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8017016:	4618      	mov	r0, r3
 8017018:	3760      	adds	r7, #96	; 0x60
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}
	...

08017020 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017020:	b480      	push	{r7}
 8017022:	b087      	sub	sp, #28
 8017024:	af00      	add	r7, sp, #0
 8017026:	60f8      	str	r0, [r7, #12]
 8017028:	60b9      	str	r1, [r7, #8]
 801702a:	4613      	mov	r3, r2
 801702c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801702e:	2301      	movs	r3, #1
 8017030:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017032:	2300      	movs	r3, #0
 8017034:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017036:	4b1f      	ldr	r3, [pc, #124]	; (80170b4 <FATFS_LinkDriverEx+0x94>)
 8017038:	7a5b      	ldrb	r3, [r3, #9]
 801703a:	b2db      	uxtb	r3, r3
 801703c:	2b00      	cmp	r3, #0
 801703e:	d131      	bne.n	80170a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017040:	4b1c      	ldr	r3, [pc, #112]	; (80170b4 <FATFS_LinkDriverEx+0x94>)
 8017042:	7a5b      	ldrb	r3, [r3, #9]
 8017044:	b2db      	uxtb	r3, r3
 8017046:	461a      	mov	r2, r3
 8017048:	4b1a      	ldr	r3, [pc, #104]	; (80170b4 <FATFS_LinkDriverEx+0x94>)
 801704a:	2100      	movs	r1, #0
 801704c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801704e:	4b19      	ldr	r3, [pc, #100]	; (80170b4 <FATFS_LinkDriverEx+0x94>)
 8017050:	7a5b      	ldrb	r3, [r3, #9]
 8017052:	b2db      	uxtb	r3, r3
 8017054:	4a17      	ldr	r2, [pc, #92]	; (80170b4 <FATFS_LinkDriverEx+0x94>)
 8017056:	009b      	lsls	r3, r3, #2
 8017058:	4413      	add	r3, r2
 801705a:	68fa      	ldr	r2, [r7, #12]
 801705c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801705e:	4b15      	ldr	r3, [pc, #84]	; (80170b4 <FATFS_LinkDriverEx+0x94>)
 8017060:	7a5b      	ldrb	r3, [r3, #9]
 8017062:	b2db      	uxtb	r3, r3
 8017064:	461a      	mov	r2, r3
 8017066:	4b13      	ldr	r3, [pc, #76]	; (80170b4 <FATFS_LinkDriverEx+0x94>)
 8017068:	4413      	add	r3, r2
 801706a:	79fa      	ldrb	r2, [r7, #7]
 801706c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801706e:	4b11      	ldr	r3, [pc, #68]	; (80170b4 <FATFS_LinkDriverEx+0x94>)
 8017070:	7a5b      	ldrb	r3, [r3, #9]
 8017072:	b2db      	uxtb	r3, r3
 8017074:	1c5a      	adds	r2, r3, #1
 8017076:	b2d1      	uxtb	r1, r2
 8017078:	4a0e      	ldr	r2, [pc, #56]	; (80170b4 <FATFS_LinkDriverEx+0x94>)
 801707a:	7251      	strb	r1, [r2, #9]
 801707c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801707e:	7dbb      	ldrb	r3, [r7, #22]
 8017080:	3330      	adds	r3, #48	; 0x30
 8017082:	b2da      	uxtb	r2, r3
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017088:	68bb      	ldr	r3, [r7, #8]
 801708a:	3301      	adds	r3, #1
 801708c:	223a      	movs	r2, #58	; 0x3a
 801708e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	3302      	adds	r3, #2
 8017094:	222f      	movs	r2, #47	; 0x2f
 8017096:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017098:	68bb      	ldr	r3, [r7, #8]
 801709a:	3303      	adds	r3, #3
 801709c:	2200      	movs	r2, #0
 801709e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80170a0:	2300      	movs	r3, #0
 80170a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80170a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80170a6:	4618      	mov	r0, r3
 80170a8:	371c      	adds	r7, #28
 80170aa:	46bd      	mov	sp, r7
 80170ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b0:	4770      	bx	lr
 80170b2:	bf00      	nop
 80170b4:	200037fc 	.word	0x200037fc

080170b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b082      	sub	sp, #8
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
 80170c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80170c2:	2200      	movs	r2, #0
 80170c4:	6839      	ldr	r1, [r7, #0]
 80170c6:	6878      	ldr	r0, [r7, #4]
 80170c8:	f7ff ffaa 	bl	8017020 <FATFS_LinkDriverEx>
 80170cc:	4603      	mov	r3, r0
}
 80170ce:	4618      	mov	r0, r3
 80170d0:	3708      	adds	r7, #8
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd80      	pop	{r7, pc}
	...

080170d8 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 80170d8:	b480      	push	{r7}
 80170da:	b085      	sub	sp, #20
 80170dc:	af00      	add	r7, sp, #0
 80170de:	6078      	str	r0, [r7, #4]
 80170e0:	460b      	mov	r3, r1
 80170e2:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80170e4:	2300      	movs	r3, #0
 80170e6:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80170e8:	2301      	movs	r3, #1
 80170ea:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80170ec:	4b15      	ldr	r3, [pc, #84]	; (8017144 <FATFS_UnLinkDriverEx+0x6c>)
 80170ee:	7a5b      	ldrb	r3, [r3, #9]
 80170f0:	b2db      	uxtb	r3, r3
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d01e      	beq.n	8017134 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	781b      	ldrb	r3, [r3, #0]
 80170fa:	3b30      	subs	r3, #48	; 0x30
 80170fc:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 80170fe:	7bbb      	ldrb	r3, [r7, #14]
 8017100:	4a10      	ldr	r2, [pc, #64]	; (8017144 <FATFS_UnLinkDriverEx+0x6c>)
 8017102:	009b      	lsls	r3, r3, #2
 8017104:	4413      	add	r3, r2
 8017106:	685b      	ldr	r3, [r3, #4]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d013      	beq.n	8017134 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 801710c:	7bbb      	ldrb	r3, [r7, #14]
 801710e:	4a0d      	ldr	r2, [pc, #52]	; (8017144 <FATFS_UnLinkDriverEx+0x6c>)
 8017110:	009b      	lsls	r3, r3, #2
 8017112:	4413      	add	r3, r2
 8017114:	2200      	movs	r2, #0
 8017116:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8017118:	7bbb      	ldrb	r3, [r7, #14]
 801711a:	4a0a      	ldr	r2, [pc, #40]	; (8017144 <FATFS_UnLinkDriverEx+0x6c>)
 801711c:	4413      	add	r3, r2
 801711e:	2200      	movs	r2, #0
 8017120:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8017122:	4b08      	ldr	r3, [pc, #32]	; (8017144 <FATFS_UnLinkDriverEx+0x6c>)
 8017124:	7a5b      	ldrb	r3, [r3, #9]
 8017126:	b2db      	uxtb	r3, r3
 8017128:	3b01      	subs	r3, #1
 801712a:	b2da      	uxtb	r2, r3
 801712c:	4b05      	ldr	r3, [pc, #20]	; (8017144 <FATFS_UnLinkDriverEx+0x6c>)
 801712e:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8017130:	2300      	movs	r3, #0
 8017132:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8017134:	7bfb      	ldrb	r3, [r7, #15]
}
 8017136:	4618      	mov	r0, r3
 8017138:	3714      	adds	r7, #20
 801713a:	46bd      	mov	sp, r7
 801713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017140:	4770      	bx	lr
 8017142:	bf00      	nop
 8017144:	200037fc 	.word	0x200037fc

08017148 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b082      	sub	sp, #8
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8017150:	2100      	movs	r1, #0
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f7ff ffc0 	bl	80170d8 <FATFS_UnLinkDriverEx>
 8017158:	4603      	mov	r3, r0
}
 801715a:	4618      	mov	r0, r3
 801715c:	3708      	adds	r7, #8
 801715e:	46bd      	mov	sp, r7
 8017160:	bd80      	pop	{r7, pc}
	...

08017164 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8017164:	b480      	push	{r7}
 8017166:	b085      	sub	sp, #20
 8017168:	af00      	add	r7, sp, #0
 801716a:	4603      	mov	r3, r0
 801716c:	6039      	str	r1, [r7, #0]
 801716e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8017170:	88fb      	ldrh	r3, [r7, #6]
 8017172:	2b7f      	cmp	r3, #127	; 0x7f
 8017174:	d802      	bhi.n	801717c <ff_convert+0x18>
		c = chr;
 8017176:	88fb      	ldrh	r3, [r7, #6]
 8017178:	81fb      	strh	r3, [r7, #14]
 801717a:	e025      	b.n	80171c8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801717c:	683b      	ldr	r3, [r7, #0]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d00b      	beq.n	801719a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8017182:	88fb      	ldrh	r3, [r7, #6]
 8017184:	2bff      	cmp	r3, #255	; 0xff
 8017186:	d805      	bhi.n	8017194 <ff_convert+0x30>
 8017188:	88fb      	ldrh	r3, [r7, #6]
 801718a:	3b80      	subs	r3, #128	; 0x80
 801718c:	4a12      	ldr	r2, [pc, #72]	; (80171d8 <ff_convert+0x74>)
 801718e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017192:	e000      	b.n	8017196 <ff_convert+0x32>
 8017194:	2300      	movs	r3, #0
 8017196:	81fb      	strh	r3, [r7, #14]
 8017198:	e016      	b.n	80171c8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801719a:	2300      	movs	r3, #0
 801719c:	81fb      	strh	r3, [r7, #14]
 801719e:	e009      	b.n	80171b4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80171a0:	89fb      	ldrh	r3, [r7, #14]
 80171a2:	4a0d      	ldr	r2, [pc, #52]	; (80171d8 <ff_convert+0x74>)
 80171a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80171a8:	88fa      	ldrh	r2, [r7, #6]
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d006      	beq.n	80171bc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80171ae:	89fb      	ldrh	r3, [r7, #14]
 80171b0:	3301      	adds	r3, #1
 80171b2:	81fb      	strh	r3, [r7, #14]
 80171b4:	89fb      	ldrh	r3, [r7, #14]
 80171b6:	2b7f      	cmp	r3, #127	; 0x7f
 80171b8:	d9f2      	bls.n	80171a0 <ff_convert+0x3c>
 80171ba:	e000      	b.n	80171be <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80171bc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80171be:	89fb      	ldrh	r3, [r7, #14]
 80171c0:	3380      	adds	r3, #128	; 0x80
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	b2db      	uxtb	r3, r3
 80171c6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80171c8:	89fb      	ldrh	r3, [r7, #14]
}
 80171ca:	4618      	mov	r0, r3
 80171cc:	3714      	adds	r7, #20
 80171ce:	46bd      	mov	sp, r7
 80171d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d4:	4770      	bx	lr
 80171d6:	bf00      	nop
 80171d8:	08022a58 	.word	0x08022a58

080171dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80171dc:	b480      	push	{r7}
 80171de:	b087      	sub	sp, #28
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	4603      	mov	r3, r0
 80171e4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80171e6:	88fb      	ldrh	r3, [r7, #6]
 80171e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80171ec:	d201      	bcs.n	80171f2 <ff_wtoupper+0x16>
 80171ee:	4b3e      	ldr	r3, [pc, #248]	; (80172e8 <ff_wtoupper+0x10c>)
 80171f0:	e000      	b.n	80171f4 <ff_wtoupper+0x18>
 80171f2:	4b3e      	ldr	r3, [pc, #248]	; (80172ec <ff_wtoupper+0x110>)
 80171f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80171f6:	697b      	ldr	r3, [r7, #20]
 80171f8:	1c9a      	adds	r2, r3, #2
 80171fa:	617a      	str	r2, [r7, #20]
 80171fc:	881b      	ldrh	r3, [r3, #0]
 80171fe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8017200:	8a7b      	ldrh	r3, [r7, #18]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d068      	beq.n	80172d8 <ff_wtoupper+0xfc>
 8017206:	88fa      	ldrh	r2, [r7, #6]
 8017208:	8a7b      	ldrh	r3, [r7, #18]
 801720a:	429a      	cmp	r2, r3
 801720c:	d364      	bcc.n	80172d8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801720e:	697b      	ldr	r3, [r7, #20]
 8017210:	1c9a      	adds	r2, r3, #2
 8017212:	617a      	str	r2, [r7, #20]
 8017214:	881b      	ldrh	r3, [r3, #0]
 8017216:	823b      	strh	r3, [r7, #16]
 8017218:	8a3b      	ldrh	r3, [r7, #16]
 801721a:	0a1b      	lsrs	r3, r3, #8
 801721c:	81fb      	strh	r3, [r7, #14]
 801721e:	8a3b      	ldrh	r3, [r7, #16]
 8017220:	b2db      	uxtb	r3, r3
 8017222:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8017224:	88fa      	ldrh	r2, [r7, #6]
 8017226:	8a79      	ldrh	r1, [r7, #18]
 8017228:	8a3b      	ldrh	r3, [r7, #16]
 801722a:	440b      	add	r3, r1
 801722c:	429a      	cmp	r2, r3
 801722e:	da49      	bge.n	80172c4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8017230:	89fb      	ldrh	r3, [r7, #14]
 8017232:	2b08      	cmp	r3, #8
 8017234:	d84f      	bhi.n	80172d6 <ff_wtoupper+0xfa>
 8017236:	a201      	add	r2, pc, #4	; (adr r2, 801723c <ff_wtoupper+0x60>)
 8017238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801723c:	08017261 	.word	0x08017261
 8017240:	08017273 	.word	0x08017273
 8017244:	08017289 	.word	0x08017289
 8017248:	08017291 	.word	0x08017291
 801724c:	08017299 	.word	0x08017299
 8017250:	080172a1 	.word	0x080172a1
 8017254:	080172a9 	.word	0x080172a9
 8017258:	080172b1 	.word	0x080172b1
 801725c:	080172b9 	.word	0x080172b9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8017260:	88fa      	ldrh	r2, [r7, #6]
 8017262:	8a7b      	ldrh	r3, [r7, #18]
 8017264:	1ad3      	subs	r3, r2, r3
 8017266:	005b      	lsls	r3, r3, #1
 8017268:	697a      	ldr	r2, [r7, #20]
 801726a:	4413      	add	r3, r2
 801726c:	881b      	ldrh	r3, [r3, #0]
 801726e:	80fb      	strh	r3, [r7, #6]
 8017270:	e027      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017272:	88fa      	ldrh	r2, [r7, #6]
 8017274:	8a7b      	ldrh	r3, [r7, #18]
 8017276:	1ad3      	subs	r3, r2, r3
 8017278:	b29b      	uxth	r3, r3
 801727a:	f003 0301 	and.w	r3, r3, #1
 801727e:	b29b      	uxth	r3, r3
 8017280:	88fa      	ldrh	r2, [r7, #6]
 8017282:	1ad3      	subs	r3, r2, r3
 8017284:	80fb      	strh	r3, [r7, #6]
 8017286:	e01c      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8017288:	88fb      	ldrh	r3, [r7, #6]
 801728a:	3b10      	subs	r3, #16
 801728c:	80fb      	strh	r3, [r7, #6]
 801728e:	e018      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8017290:	88fb      	ldrh	r3, [r7, #6]
 8017292:	3b20      	subs	r3, #32
 8017294:	80fb      	strh	r3, [r7, #6]
 8017296:	e014      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8017298:	88fb      	ldrh	r3, [r7, #6]
 801729a:	3b30      	subs	r3, #48	; 0x30
 801729c:	80fb      	strh	r3, [r7, #6]
 801729e:	e010      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80172a0:	88fb      	ldrh	r3, [r7, #6]
 80172a2:	3b1a      	subs	r3, #26
 80172a4:	80fb      	strh	r3, [r7, #6]
 80172a6:	e00c      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80172a8:	88fb      	ldrh	r3, [r7, #6]
 80172aa:	3308      	adds	r3, #8
 80172ac:	80fb      	strh	r3, [r7, #6]
 80172ae:	e008      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80172b0:	88fb      	ldrh	r3, [r7, #6]
 80172b2:	3b50      	subs	r3, #80	; 0x50
 80172b4:	80fb      	strh	r3, [r7, #6]
 80172b6:	e004      	b.n	80172c2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80172b8:	88fb      	ldrh	r3, [r7, #6]
 80172ba:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80172be:	80fb      	strh	r3, [r7, #6]
 80172c0:	bf00      	nop
			}
			break;
 80172c2:	e008      	b.n	80172d6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80172c4:	89fb      	ldrh	r3, [r7, #14]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d195      	bne.n	80171f6 <ff_wtoupper+0x1a>
 80172ca:	8a3b      	ldrh	r3, [r7, #16]
 80172cc:	005b      	lsls	r3, r3, #1
 80172ce:	697a      	ldr	r2, [r7, #20]
 80172d0:	4413      	add	r3, r2
 80172d2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80172d4:	e78f      	b.n	80171f6 <ff_wtoupper+0x1a>
			break;
 80172d6:	bf00      	nop
	}

	return chr;
 80172d8:	88fb      	ldrh	r3, [r7, #6]
}
 80172da:	4618      	mov	r0, r3
 80172dc:	371c      	adds	r7, #28
 80172de:	46bd      	mov	sp, r7
 80172e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e4:	4770      	bx	lr
 80172e6:	bf00      	nop
 80172e8:	08022b58 	.word	0x08022b58
 80172ec:	08022d4c 	.word	0x08022d4c

080172f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80172f0:	b480      	push	{r7}
 80172f2:	b085      	sub	sp, #20
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	4603      	mov	r3, r0
 80172f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80172fa:	2300      	movs	r3, #0
 80172fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80172fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017302:	2b84      	cmp	r3, #132	; 0x84
 8017304:	d005      	beq.n	8017312 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8017306:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	4413      	add	r3, r2
 801730e:	3303      	adds	r3, #3
 8017310:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8017312:	68fb      	ldr	r3, [r7, #12]
}
 8017314:	4618      	mov	r0, r3
 8017316:	3714      	adds	r7, #20
 8017318:	46bd      	mov	sp, r7
 801731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731e:	4770      	bx	lr

08017320 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8017320:	b480      	push	{r7}
 8017322:	b083      	sub	sp, #12
 8017324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017326:	f3ef 8305 	mrs	r3, IPSR
 801732a:	607b      	str	r3, [r7, #4]
  return(result);
 801732c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801732e:	2b00      	cmp	r3, #0
 8017330:	bf14      	ite	ne
 8017332:	2301      	movne	r3, #1
 8017334:	2300      	moveq	r3, #0
 8017336:	b2db      	uxtb	r3, r3
}
 8017338:	4618      	mov	r0, r3
 801733a:	370c      	adds	r7, #12
 801733c:	46bd      	mov	sp, r7
 801733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017342:	4770      	bx	lr

08017344 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8017344:	b580      	push	{r7, lr}
 8017346:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8017348:	f001 fd6c 	bl	8018e24 <vTaskStartScheduler>
  
  return osOK;
 801734c:	2300      	movs	r3, #0
}
 801734e:	4618      	mov	r0, r3
 8017350:	bd80      	pop	{r7, pc}

08017352 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8017352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017354:	b087      	sub	sp, #28
 8017356:	af02      	add	r7, sp, #8
 8017358:	6078      	str	r0, [r7, #4]
 801735a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	685c      	ldr	r4, [r3, #4]
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8017368:	b29e      	uxth	r6, r3
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8017370:	4618      	mov	r0, r3
 8017372:	f7ff ffbd 	bl	80172f0 <makeFreeRtosPriority>
 8017376:	4602      	mov	r2, r0
 8017378:	f107 030c 	add.w	r3, r7, #12
 801737c:	9301      	str	r3, [sp, #4]
 801737e:	9200      	str	r2, [sp, #0]
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	4632      	mov	r2, r6
 8017384:	4629      	mov	r1, r5
 8017386:	4620      	mov	r0, r4
 8017388:	f001 fa76 	bl	8018878 <xTaskCreate>
 801738c:	4603      	mov	r3, r0
 801738e:	2b01      	cmp	r3, #1
 8017390:	d001      	beq.n	8017396 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8017392:	2300      	movs	r3, #0
 8017394:	e000      	b.n	8017398 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8017396:	68fb      	ldr	r3, [r7, #12]
}
 8017398:	4618      	mov	r0, r3
 801739a:	3714      	adds	r7, #20
 801739c:	46bd      	mov	sp, r7
 801739e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080173a0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b084      	sub	sp, #16
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
 80173a8:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80173aa:	683b      	ldr	r3, [r7, #0]
 80173ac:	2b01      	cmp	r3, #1
 80173ae:	d110      	bne.n	80173d2 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 80173b0:	2203      	movs	r2, #3
 80173b2:	2100      	movs	r1, #0
 80173b4:	2001      	movs	r0, #1
 80173b6:	f000 fbb7 	bl	8017b28 <xQueueGenericCreate>
 80173ba:	60f8      	str	r0, [r7, #12]
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d005      	beq.n	80173ce <osSemaphoreCreate+0x2e>
 80173c2:	2300      	movs	r3, #0
 80173c4:	2200      	movs	r2, #0
 80173c6:	2100      	movs	r1, #0
 80173c8:	68f8      	ldr	r0, [r7, #12]
 80173ca:	f000 fc3f 	bl	8017c4c <xQueueGenericSend>
    return sema;
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	e006      	b.n	80173e0 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 80173d2:	683b      	ldr	r3, [r7, #0]
 80173d4:	683a      	ldr	r2, [r7, #0]
 80173d6:	4611      	mov	r1, r2
 80173d8:	4618      	mov	r0, r3
 80173da:	f000 fc04 	bl	8017be6 <xQueueCreateCountingSemaphore>
 80173de:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80173e0:	4618      	mov	r0, r3
 80173e2:	3710      	adds	r7, #16
 80173e4:	46bd      	mov	sp, r7
 80173e6:	bd80      	pop	{r7, pc}

080173e8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b084      	sub	sp, #16
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
 80173f0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80173f2:	2300      	movs	r3, #0
 80173f4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d101      	bne.n	8017400 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80173fc:	2380      	movs	r3, #128	; 0x80
 80173fe:	e03a      	b.n	8017476 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8017400:	2300      	movs	r3, #0
 8017402:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8017404:	683b      	ldr	r3, [r7, #0]
 8017406:	f1b3 3fff 	cmp.w	r3, #4294967295
 801740a:	d103      	bne.n	8017414 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801740c:	f04f 33ff 	mov.w	r3, #4294967295
 8017410:	60fb      	str	r3, [r7, #12]
 8017412:	e009      	b.n	8017428 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8017414:	683b      	ldr	r3, [r7, #0]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d006      	beq.n	8017428 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801741a:	683b      	ldr	r3, [r7, #0]
 801741c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d101      	bne.n	8017428 <osSemaphoreWait+0x40>
      ticks = 1;
 8017424:	2301      	movs	r3, #1
 8017426:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8017428:	f7ff ff7a 	bl	8017320 <inHandlerMode>
 801742c:	4603      	mov	r3, r0
 801742e:	2b00      	cmp	r3, #0
 8017430:	d017      	beq.n	8017462 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8017432:	f107 0308 	add.w	r3, r7, #8
 8017436:	461a      	mov	r2, r3
 8017438:	2100      	movs	r1, #0
 801743a:	6878      	ldr	r0, [r7, #4]
 801743c:	f001 f816 	bl	801846c <xQueueReceiveFromISR>
 8017440:	4603      	mov	r3, r0
 8017442:	2b01      	cmp	r3, #1
 8017444:	d001      	beq.n	801744a <osSemaphoreWait+0x62>
      return osErrorOS;
 8017446:	23ff      	movs	r3, #255	; 0xff
 8017448:	e015      	b.n	8017476 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801744a:	68bb      	ldr	r3, [r7, #8]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d011      	beq.n	8017474 <osSemaphoreWait+0x8c>
 8017450:	4b0b      	ldr	r3, [pc, #44]	; (8017480 <osSemaphoreWait+0x98>)
 8017452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017456:	601a      	str	r2, [r3, #0]
 8017458:	f3bf 8f4f 	dsb	sy
 801745c:	f3bf 8f6f 	isb	sy
 8017460:	e008      	b.n	8017474 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8017462:	68f9      	ldr	r1, [r7, #12]
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	f000 fef5 	bl	8018254 <xQueueSemaphoreTake>
 801746a:	4603      	mov	r3, r0
 801746c:	2b01      	cmp	r3, #1
 801746e:	d001      	beq.n	8017474 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8017470:	23ff      	movs	r3, #255	; 0xff
 8017472:	e000      	b.n	8017476 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8017474:	2300      	movs	r3, #0
}
 8017476:	4618      	mov	r0, r3
 8017478:	3710      	adds	r7, #16
 801747a:	46bd      	mov	sp, r7
 801747c:	bd80      	pop	{r7, pc}
 801747e:	bf00      	nop
 8017480:	e000ed04 	.word	0xe000ed04

08017484 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b084      	sub	sp, #16
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801748c:	2300      	movs	r3, #0
 801748e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8017490:	2300      	movs	r3, #0
 8017492:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8017494:	f7ff ff44 	bl	8017320 <inHandlerMode>
 8017498:	4603      	mov	r3, r0
 801749a:	2b00      	cmp	r3, #0
 801749c:	d016      	beq.n	80174cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801749e:	f107 0308 	add.w	r3, r7, #8
 80174a2:	4619      	mov	r1, r3
 80174a4:	6878      	ldr	r0, [r7, #4]
 80174a6:	f000 fd67 	bl	8017f78 <xQueueGiveFromISR>
 80174aa:	4603      	mov	r3, r0
 80174ac:	2b01      	cmp	r3, #1
 80174ae:	d001      	beq.n	80174b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80174b0:	23ff      	movs	r3, #255	; 0xff
 80174b2:	e017      	b.n	80174e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80174b4:	68bb      	ldr	r3, [r7, #8]
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d013      	beq.n	80174e2 <osSemaphoreRelease+0x5e>
 80174ba:	4b0c      	ldr	r3, [pc, #48]	; (80174ec <osSemaphoreRelease+0x68>)
 80174bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174c0:	601a      	str	r2, [r3, #0]
 80174c2:	f3bf 8f4f 	dsb	sy
 80174c6:	f3bf 8f6f 	isb	sy
 80174ca:	e00a      	b.n	80174e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80174cc:	2300      	movs	r3, #0
 80174ce:	2200      	movs	r2, #0
 80174d0:	2100      	movs	r1, #0
 80174d2:	6878      	ldr	r0, [r7, #4]
 80174d4:	f000 fbba 	bl	8017c4c <xQueueGenericSend>
 80174d8:	4603      	mov	r3, r0
 80174da:	2b01      	cmp	r3, #1
 80174dc:	d001      	beq.n	80174e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80174de:	23ff      	movs	r3, #255	; 0xff
 80174e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80174e2:	68fb      	ldr	r3, [r7, #12]
}
 80174e4:	4618      	mov	r0, r3
 80174e6:	3710      	adds	r7, #16
 80174e8:	46bd      	mov	sp, r7
 80174ea:	bd80      	pop	{r7, pc}
 80174ec:	e000ed04 	.word	0xe000ed04

080174f0 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b086      	sub	sp, #24
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	685b      	ldr	r3, [r3, #4]
 80174fc:	3303      	adds	r3, #3
 80174fe:	f023 0303 	bic.w	r3, r3, #3
 8017502:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8017504:	2014      	movs	r0, #20
 8017506:	f003 f85f 	bl	801a5c8 <pvPortMalloc>
 801750a:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 801750c:	697b      	ldr	r3, [r7, #20]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d046      	beq.n	80175a0 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	681a      	ldr	r2, [r3, #0]
 8017516:	697b      	ldr	r3, [r7, #20]
 8017518:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 801751a:	68fa      	ldr	r2, [r7, #12]
 801751c:	697b      	ldr	r3, [r7, #20]
 801751e:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8017520:	697b      	ldr	r3, [r7, #20]
 8017522:	2200      	movs	r2, #0
 8017524:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	4618      	mov	r0, r3
 801752c:	f003 f84c 	bl	801a5c8 <pvPortMalloc>
 8017530:	4602      	mov	r2, r0
 8017532:	697b      	ldr	r3, [r7, #20]
 8017534:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8017536:	697b      	ldr	r3, [r7, #20]
 8017538:	685b      	ldr	r3, [r3, #4]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d02b      	beq.n	8017596 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	68fa      	ldr	r2, [r7, #12]
 8017544:	fb02 f303 	mul.w	r3, r2, r3
 8017548:	4618      	mov	r0, r3
 801754a:	f003 f83d 	bl	801a5c8 <pvPortMalloc>
 801754e:	4602      	mov	r2, r0
 8017550:	697b      	ldr	r3, [r7, #20]
 8017552:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8017554:	697b      	ldr	r3, [r7, #20]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d011      	beq.n	8017580 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 801755c:	2300      	movs	r3, #0
 801755e:	613b      	str	r3, [r7, #16]
 8017560:	e008      	b.n	8017574 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8017562:	697b      	ldr	r3, [r7, #20]
 8017564:	685a      	ldr	r2, [r3, #4]
 8017566:	693b      	ldr	r3, [r7, #16]
 8017568:	4413      	add	r3, r2
 801756a:	2200      	movs	r2, #0
 801756c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	3301      	adds	r3, #1
 8017572:	613b      	str	r3, [r7, #16]
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	693a      	ldr	r2, [r7, #16]
 801757a:	429a      	cmp	r2, r3
 801757c:	d3f1      	bcc.n	8017562 <osPoolCreate+0x72>
 801757e:	e00f      	b.n	80175a0 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8017580:	697b      	ldr	r3, [r7, #20]
 8017582:	685b      	ldr	r3, [r3, #4]
 8017584:	4618      	mov	r0, r3
 8017586:	f003 f8e3 	bl	801a750 <vPortFree>
        vPortFree(thePool);
 801758a:	6978      	ldr	r0, [r7, #20]
 801758c:	f003 f8e0 	bl	801a750 <vPortFree>
        thePool = NULL;
 8017590:	2300      	movs	r3, #0
 8017592:	617b      	str	r3, [r7, #20]
 8017594:	e004      	b.n	80175a0 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8017596:	6978      	ldr	r0, [r7, #20]
 8017598:	f003 f8da 	bl	801a750 <vPortFree>
      thePool = NULL;
 801759c:	2300      	movs	r3, #0
 801759e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80175a0:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80175a2:	4618      	mov	r0, r3
 80175a4:	3718      	adds	r7, #24
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}

080175aa <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80175aa:	b580      	push	{r7, lr}
 80175ac:	b08a      	sub	sp, #40	; 0x28
 80175ae:	af00      	add	r7, sp, #0
 80175b0:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80175b2:	2300      	movs	r3, #0
 80175b4:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80175b6:	2300      	movs	r3, #0
 80175b8:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80175ba:	f7ff feb1 	bl	8017320 <inHandlerMode>
 80175be:	4603      	mov	r3, r0
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d00e      	beq.n	80175e2 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80175c4:	f3ef 8211 	mrs	r2, BASEPRI
 80175c8:	f04f 0320 	mov.w	r3, #32
 80175cc:	f383 8811 	msr	BASEPRI, r3
 80175d0:	f3bf 8f6f 	isb	sy
 80175d4:	f3bf 8f4f 	dsb	sy
 80175d8:	617a      	str	r2, [r7, #20]
 80175da:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80175dc:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80175de:	627b      	str	r3, [r7, #36]	; 0x24
 80175e0:	e001      	b.n	80175e6 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80175e2:	f002 fecf 	bl	801a384 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80175e6:	2300      	movs	r3, #0
 80175e8:	61fb      	str	r3, [r7, #28]
 80175ea:	e029      	b.n	8017640 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	691a      	ldr	r2, [r3, #16]
 80175f0:	69fb      	ldr	r3, [r7, #28]
 80175f2:	4413      	add	r3, r2
 80175f4:	687a      	ldr	r2, [r7, #4]
 80175f6:	6892      	ldr	r2, [r2, #8]
 80175f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80175fc:	fb01 f202 	mul.w	r2, r1, r2
 8017600:	1a9b      	subs	r3, r3, r2
 8017602:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	685a      	ldr	r2, [r3, #4]
 8017608:	69bb      	ldr	r3, [r7, #24]
 801760a:	4413      	add	r3, r2
 801760c:	781b      	ldrb	r3, [r3, #0]
 801760e:	2b00      	cmp	r3, #0
 8017610:	d113      	bne.n	801763a <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	685a      	ldr	r2, [r3, #4]
 8017616:	69bb      	ldr	r3, [r7, #24]
 8017618:	4413      	add	r3, r2
 801761a:	2201      	movs	r2, #1
 801761c:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	4619      	mov	r1, r3
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	68db      	ldr	r3, [r3, #12]
 8017628:	69ba      	ldr	r2, [r7, #24]
 801762a:	fb02 f303 	mul.w	r3, r2, r3
 801762e:	440b      	add	r3, r1
 8017630:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	69ba      	ldr	r2, [r7, #24]
 8017636:	611a      	str	r2, [r3, #16]
      break;
 8017638:	e007      	b.n	801764a <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 801763a:	69fb      	ldr	r3, [r7, #28]
 801763c:	3301      	adds	r3, #1
 801763e:	61fb      	str	r3, [r7, #28]
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	689b      	ldr	r3, [r3, #8]
 8017644:	69fa      	ldr	r2, [r7, #28]
 8017646:	429a      	cmp	r2, r3
 8017648:	d3d0      	bcc.n	80175ec <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 801764a:	f7ff fe69 	bl	8017320 <inHandlerMode>
 801764e:	4603      	mov	r3, r0
 8017650:	2b00      	cmp	r3, #0
 8017652:	d005      	beq.n	8017660 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8017654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017656:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801765e:	e001      	b.n	8017664 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8017660:	f002 fec0 	bl	801a3e4 <vPortExitCritical>
  }
  
  return p;
 8017664:	6a3b      	ldr	r3, [r7, #32]
}
 8017666:	4618      	mov	r0, r3
 8017668:	3728      	adds	r7, #40	; 0x28
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}

0801766e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 801766e:	b480      	push	{r7}
 8017670:	b085      	sub	sp, #20
 8017672:	af00      	add	r7, sp, #0
 8017674:	6078      	str	r0, [r7, #4]
 8017676:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d101      	bne.n	8017682 <osPoolFree+0x14>
    return osErrorParameter;
 801767e:	2380      	movs	r3, #128	; 0x80
 8017680:	e030      	b.n	80176e4 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d101      	bne.n	801768c <osPoolFree+0x1e>
    return osErrorParameter;
 8017688:	2380      	movs	r3, #128	; 0x80
 801768a:	e02b      	b.n	80176e4 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	683a      	ldr	r2, [r7, #0]
 8017692:	429a      	cmp	r2, r3
 8017694:	d201      	bcs.n	801769a <osPoolFree+0x2c>
    return osErrorParameter;
 8017696:	2380      	movs	r3, #128	; 0x80
 8017698:	e024      	b.n	80176e4 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 801769a:	683b      	ldr	r3, [r7, #0]
 801769c:	687a      	ldr	r2, [r7, #4]
 801769e:	6812      	ldr	r2, [r2, #0]
 80176a0:	1a9b      	subs	r3, r3, r2
 80176a2:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	68da      	ldr	r2, [r3, #12]
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80176ae:	fb01 f202 	mul.w	r2, r1, r2
 80176b2:	1a9b      	subs	r3, r3, r2
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d001      	beq.n	80176bc <osPoolFree+0x4e>
    return osErrorParameter;
 80176b8:	2380      	movs	r3, #128	; 0x80
 80176ba:	e013      	b.n	80176e4 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	68db      	ldr	r3, [r3, #12]
 80176c0:	68fa      	ldr	r2, [r7, #12]
 80176c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80176c6:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	689b      	ldr	r3, [r3, #8]
 80176cc:	68fa      	ldr	r2, [r7, #12]
 80176ce:	429a      	cmp	r2, r3
 80176d0:	d301      	bcc.n	80176d6 <osPoolFree+0x68>
    return osErrorParameter;
 80176d2:	2380      	movs	r3, #128	; 0x80
 80176d4:	e006      	b.n	80176e4 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	685a      	ldr	r2, [r3, #4]
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	4413      	add	r3, r2
 80176de:	2200      	movs	r2, #0
 80176e0:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80176e2:	2300      	movs	r3, #0
}
 80176e4:	4618      	mov	r0, r3
 80176e6:	3714      	adds	r7, #20
 80176e8:	46bd      	mov	sp, r7
 80176ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ee:	4770      	bx	lr

080176f0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b082      	sub	sp, #8
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	6818      	ldr	r0, [r3, #0]
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	685b      	ldr	r3, [r3, #4]
 8017702:	2200      	movs	r2, #0
 8017704:	4619      	mov	r1, r3
 8017706:	f000 fa0f 	bl	8017b28 <xQueueGenericCreate>
 801770a:	4603      	mov	r3, r0
#endif
}
 801770c:	4618      	mov	r0, r3
 801770e:	3708      	adds	r7, #8
 8017710:	46bd      	mov	sp, r7
 8017712:	bd80      	pop	{r7, pc}

08017714 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b086      	sub	sp, #24
 8017718:	af00      	add	r7, sp, #0
 801771a:	60f8      	str	r0, [r7, #12]
 801771c:	60b9      	str	r1, [r7, #8]
 801771e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8017720:	2300      	movs	r3, #0
 8017722:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8017728:	697b      	ldr	r3, [r7, #20]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d101      	bne.n	8017732 <osMessagePut+0x1e>
    ticks = 1;
 801772e:	2301      	movs	r3, #1
 8017730:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8017732:	f7ff fdf5 	bl	8017320 <inHandlerMode>
 8017736:	4603      	mov	r3, r0
 8017738:	2b00      	cmp	r3, #0
 801773a:	d018      	beq.n	801776e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801773c:	f107 0210 	add.w	r2, r7, #16
 8017740:	f107 0108 	add.w	r1, r7, #8
 8017744:	2300      	movs	r3, #0
 8017746:	68f8      	ldr	r0, [r7, #12]
 8017748:	f000 fb7e 	bl	8017e48 <xQueueGenericSendFromISR>
 801774c:	4603      	mov	r3, r0
 801774e:	2b01      	cmp	r3, #1
 8017750:	d001      	beq.n	8017756 <osMessagePut+0x42>
      return osErrorOS;
 8017752:	23ff      	movs	r3, #255	; 0xff
 8017754:	e018      	b.n	8017788 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8017756:	693b      	ldr	r3, [r7, #16]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d014      	beq.n	8017786 <osMessagePut+0x72>
 801775c:	4b0c      	ldr	r3, [pc, #48]	; (8017790 <osMessagePut+0x7c>)
 801775e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017762:	601a      	str	r2, [r3, #0]
 8017764:	f3bf 8f4f 	dsb	sy
 8017768:	f3bf 8f6f 	isb	sy
 801776c:	e00b      	b.n	8017786 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801776e:	f107 0108 	add.w	r1, r7, #8
 8017772:	2300      	movs	r3, #0
 8017774:	697a      	ldr	r2, [r7, #20]
 8017776:	68f8      	ldr	r0, [r7, #12]
 8017778:	f000 fa68 	bl	8017c4c <xQueueGenericSend>
 801777c:	4603      	mov	r3, r0
 801777e:	2b01      	cmp	r3, #1
 8017780:	d001      	beq.n	8017786 <osMessagePut+0x72>
      return osErrorOS;
 8017782:	23ff      	movs	r3, #255	; 0xff
 8017784:	e000      	b.n	8017788 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8017786:	2300      	movs	r3, #0
}
 8017788:	4618      	mov	r0, r3
 801778a:	3718      	adds	r7, #24
 801778c:	46bd      	mov	sp, r7
 801778e:	bd80      	pop	{r7, pc}
 8017790:	e000ed04 	.word	0xe000ed04

08017794 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8017794:	b590      	push	{r4, r7, lr}
 8017796:	b08b      	sub	sp, #44	; 0x2c
 8017798:	af00      	add	r7, sp, #0
 801779a:	60f8      	str	r0, [r7, #12]
 801779c:	60b9      	str	r1, [r7, #8]
 801779e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80177a0:	68bb      	ldr	r3, [r7, #8]
 80177a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80177a4:	2300      	movs	r3, #0
 80177a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80177a8:	68bb      	ldr	r3, [r7, #8]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d10a      	bne.n	80177c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80177ae:	2380      	movs	r3, #128	; 0x80
 80177b0:	617b      	str	r3, [r7, #20]
    return event;
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	461c      	mov	r4, r3
 80177b6:	f107 0314 	add.w	r3, r7, #20
 80177ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80177be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80177c2:	e054      	b.n	801786e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80177c4:	2300      	movs	r3, #0
 80177c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80177c8:	2300      	movs	r3, #0
 80177ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177d2:	d103      	bne.n	80177dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80177d4:	f04f 33ff 	mov.w	r3, #4294967295
 80177d8:	627b      	str	r3, [r7, #36]	; 0x24
 80177da:	e009      	b.n	80177f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d006      	beq.n	80177f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80177e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d101      	bne.n	80177f0 <osMessageGet+0x5c>
      ticks = 1;
 80177ec:	2301      	movs	r3, #1
 80177ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80177f0:	f7ff fd96 	bl	8017320 <inHandlerMode>
 80177f4:	4603      	mov	r3, r0
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d01c      	beq.n	8017834 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80177fa:	f107 0220 	add.w	r2, r7, #32
 80177fe:	f107 0314 	add.w	r3, r7, #20
 8017802:	3304      	adds	r3, #4
 8017804:	4619      	mov	r1, r3
 8017806:	68b8      	ldr	r0, [r7, #8]
 8017808:	f000 fe30 	bl	801846c <xQueueReceiveFromISR>
 801780c:	4603      	mov	r3, r0
 801780e:	2b01      	cmp	r3, #1
 8017810:	d102      	bne.n	8017818 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8017812:	2310      	movs	r3, #16
 8017814:	617b      	str	r3, [r7, #20]
 8017816:	e001      	b.n	801781c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8017818:	2300      	movs	r3, #0
 801781a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801781c:	6a3b      	ldr	r3, [r7, #32]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d01d      	beq.n	801785e <osMessageGet+0xca>
 8017822:	4b15      	ldr	r3, [pc, #84]	; (8017878 <osMessageGet+0xe4>)
 8017824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017828:	601a      	str	r2, [r3, #0]
 801782a:	f3bf 8f4f 	dsb	sy
 801782e:	f3bf 8f6f 	isb	sy
 8017832:	e014      	b.n	801785e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8017834:	f107 0314 	add.w	r3, r7, #20
 8017838:	3304      	adds	r3, #4
 801783a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801783c:	4619      	mov	r1, r3
 801783e:	68b8      	ldr	r0, [r7, #8]
 8017840:	f000 fc28 	bl	8018094 <xQueueReceive>
 8017844:	4603      	mov	r3, r0
 8017846:	2b01      	cmp	r3, #1
 8017848:	d102      	bne.n	8017850 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801784a:	2310      	movs	r3, #16
 801784c:	617b      	str	r3, [r7, #20]
 801784e:	e006      	b.n	801785e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8017850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017852:	2b00      	cmp	r3, #0
 8017854:	d101      	bne.n	801785a <osMessageGet+0xc6>
 8017856:	2300      	movs	r3, #0
 8017858:	e000      	b.n	801785c <osMessageGet+0xc8>
 801785a:	2340      	movs	r3, #64	; 0x40
 801785c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	461c      	mov	r4, r3
 8017862:	f107 0314 	add.w	r3, r7, #20
 8017866:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801786a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801786e:	68f8      	ldr	r0, [r7, #12]
 8017870:	372c      	adds	r7, #44	; 0x2c
 8017872:	46bd      	mov	sp, r7
 8017874:	bd90      	pop	{r4, r7, pc}
 8017876:	bf00      	nop
 8017878:	e000ed04 	.word	0xe000ed04

0801787c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8017880:	f001 ff08 	bl	8019694 <xTaskGetSchedulerState>
 8017884:	4603      	mov	r3, r0
 8017886:	2b01      	cmp	r3, #1
 8017888:	d001      	beq.n	801788e <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 801788a:	f002 fe0d 	bl	801a4a8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 801788e:	bf00      	nop
 8017890:	bd80      	pop	{r7, pc}

08017892 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8017892:	b580      	push	{r7, lr}
 8017894:	b082      	sub	sp, #8
 8017896:	af00      	add	r7, sp, #0
 8017898:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 801789a:	6878      	ldr	r0, [r7, #4]
 801789c:	f001 f92e 	bl	8018afc <vTaskSuspend>
  
  return osOK;
 80178a0:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3708      	adds	r7, #8
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
	...

080178ac <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b082      	sub	sp, #8
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80178b4:	f7ff fd34 	bl	8017320 <inHandlerMode>
 80178b8:	4603      	mov	r3, r0
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d00e      	beq.n	80178dc <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f001 fa3e 	bl	8018d40 <xTaskResumeFromISR>
 80178c4:	4603      	mov	r3, r0
 80178c6:	2b01      	cmp	r3, #1
 80178c8:	d10b      	bne.n	80178e2 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80178ca:	4b08      	ldr	r3, [pc, #32]	; (80178ec <osThreadResume+0x40>)
 80178cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178d0:	601a      	str	r2, [r3, #0]
 80178d2:	f3bf 8f4f 	dsb	sy
 80178d6:	f3bf 8f6f 	isb	sy
 80178da:	e002      	b.n	80178e2 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80178dc:	6878      	ldr	r0, [r7, #4]
 80178de:	f001 f9d1 	bl	8018c84 <vTaskResume>
  }
  return osOK;
 80178e2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80178e4:	4618      	mov	r0, r3
 80178e6:	3708      	adds	r7, #8
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}
 80178ec:	e000ed04 	.word	0xe000ed04

080178f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80178f0:	b480      	push	{r7}
 80178f2:	b083      	sub	sp, #12
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	f103 0208 	add.w	r2, r3, #8
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	f04f 32ff 	mov.w	r2, #4294967295
 8017908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	f103 0208 	add.w	r2, r3, #8
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f103 0208 	add.w	r2, r3, #8
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	2200      	movs	r2, #0
 8017922:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017924:	bf00      	nop
 8017926:	370c      	adds	r7, #12
 8017928:	46bd      	mov	sp, r7
 801792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792e:	4770      	bx	lr

08017930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017930:	b480      	push	{r7}
 8017932:	b083      	sub	sp, #12
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2200      	movs	r2, #0
 801793c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801793e:	bf00      	nop
 8017940:	370c      	adds	r7, #12
 8017942:	46bd      	mov	sp, r7
 8017944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017948:	4770      	bx	lr

0801794a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801794a:	b480      	push	{r7}
 801794c:	b085      	sub	sp, #20
 801794e:	af00      	add	r7, sp, #0
 8017950:	6078      	str	r0, [r7, #4]
 8017952:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	685b      	ldr	r3, [r3, #4]
 8017958:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801795a:	683b      	ldr	r3, [r7, #0]
 801795c:	68fa      	ldr	r2, [r7, #12]
 801795e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	689a      	ldr	r2, [r3, #8]
 8017964:	683b      	ldr	r3, [r7, #0]
 8017966:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	689b      	ldr	r3, [r3, #8]
 801796c:	683a      	ldr	r2, [r7, #0]
 801796e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	683a      	ldr	r2, [r7, #0]
 8017974:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	687a      	ldr	r2, [r7, #4]
 801797a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	1c5a      	adds	r2, r3, #1
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	601a      	str	r2, [r3, #0]
}
 8017986:	bf00      	nop
 8017988:	3714      	adds	r7, #20
 801798a:	46bd      	mov	sp, r7
 801798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017990:	4770      	bx	lr

08017992 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017992:	b480      	push	{r7}
 8017994:	b085      	sub	sp, #20
 8017996:	af00      	add	r7, sp, #0
 8017998:	6078      	str	r0, [r7, #4]
 801799a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801799c:	683b      	ldr	r3, [r7, #0]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80179a2:	68bb      	ldr	r3, [r7, #8]
 80179a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179a8:	d103      	bne.n	80179b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	691b      	ldr	r3, [r3, #16]
 80179ae:	60fb      	str	r3, [r7, #12]
 80179b0:	e00c      	b.n	80179cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	3308      	adds	r3, #8
 80179b6:	60fb      	str	r3, [r7, #12]
 80179b8:	e002      	b.n	80179c0 <vListInsert+0x2e>
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	685b      	ldr	r3, [r3, #4]
 80179be:	60fb      	str	r3, [r7, #12]
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	685b      	ldr	r3, [r3, #4]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	68ba      	ldr	r2, [r7, #8]
 80179c8:	429a      	cmp	r2, r3
 80179ca:	d2f6      	bcs.n	80179ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	685a      	ldr	r2, [r3, #4]
 80179d0:	683b      	ldr	r3, [r7, #0]
 80179d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80179d4:	683b      	ldr	r3, [r7, #0]
 80179d6:	685b      	ldr	r3, [r3, #4]
 80179d8:	683a      	ldr	r2, [r7, #0]
 80179da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80179dc:	683b      	ldr	r3, [r7, #0]
 80179de:	68fa      	ldr	r2, [r7, #12]
 80179e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	683a      	ldr	r2, [r7, #0]
 80179e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	687a      	ldr	r2, [r7, #4]
 80179ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	1c5a      	adds	r2, r3, #1
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	601a      	str	r2, [r3, #0]
}
 80179f8:	bf00      	nop
 80179fa:	3714      	adds	r7, #20
 80179fc:	46bd      	mov	sp, r7
 80179fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a02:	4770      	bx	lr

08017a04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017a04:	b480      	push	{r7}
 8017a06:	b085      	sub	sp, #20
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	691b      	ldr	r3, [r3, #16]
 8017a10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	685b      	ldr	r3, [r3, #4]
 8017a16:	687a      	ldr	r2, [r7, #4]
 8017a18:	6892      	ldr	r2, [r2, #8]
 8017a1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	689b      	ldr	r3, [r3, #8]
 8017a20:	687a      	ldr	r2, [r7, #4]
 8017a22:	6852      	ldr	r2, [r2, #4]
 8017a24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	685b      	ldr	r3, [r3, #4]
 8017a2a:	687a      	ldr	r2, [r7, #4]
 8017a2c:	429a      	cmp	r2, r3
 8017a2e:	d103      	bne.n	8017a38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	689a      	ldr	r2, [r3, #8]
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	1e5a      	subs	r2, r3, #1
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	681b      	ldr	r3, [r3, #0]
}
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	3714      	adds	r7, #20
 8017a50:	46bd      	mov	sp, r7
 8017a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a56:	4770      	bx	lr

08017a58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b084      	sub	sp, #16
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
 8017a60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d10a      	bne.n	8017a82 <xQueueGenericReset+0x2a>
	__asm volatile
 8017a6c:	f04f 0320 	mov.w	r3, #32
 8017a70:	f383 8811 	msr	BASEPRI, r3
 8017a74:	f3bf 8f6f 	isb	sy
 8017a78:	f3bf 8f4f 	dsb	sy
 8017a7c:	60bb      	str	r3, [r7, #8]
}
 8017a7e:	bf00      	nop
 8017a80:	e7fe      	b.n	8017a80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017a82:	f002 fc7f 	bl	801a384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	681a      	ldr	r2, [r3, #0]
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a8e:	68f9      	ldr	r1, [r7, #12]
 8017a90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017a92:	fb01 f303 	mul.w	r3, r1, r3
 8017a96:	441a      	add	r2, r3
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	681a      	ldr	r2, [r3, #0]
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	681a      	ldr	r2, [r3, #0]
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ab2:	3b01      	subs	r3, #1
 8017ab4:	68f9      	ldr	r1, [r7, #12]
 8017ab6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017ab8:	fb01 f303 	mul.w	r3, r1, r3
 8017abc:	441a      	add	r2, r3
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	22ff      	movs	r2, #255	; 0xff
 8017ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	22ff      	movs	r2, #255	; 0xff
 8017ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017ad2:	683b      	ldr	r3, [r7, #0]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d114      	bne.n	8017b02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	691b      	ldr	r3, [r3, #16]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d01a      	beq.n	8017b16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	3310      	adds	r3, #16
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	f001 fc37 	bl	8019358 <xTaskRemoveFromEventList>
 8017aea:	4603      	mov	r3, r0
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d012      	beq.n	8017b16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017af0:	4b0c      	ldr	r3, [pc, #48]	; (8017b24 <xQueueGenericReset+0xcc>)
 8017af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017af6:	601a      	str	r2, [r3, #0]
 8017af8:	f3bf 8f4f 	dsb	sy
 8017afc:	f3bf 8f6f 	isb	sy
 8017b00:	e009      	b.n	8017b16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	3310      	adds	r3, #16
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7ff fef2 	bl	80178f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	3324      	adds	r3, #36	; 0x24
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7ff feed 	bl	80178f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017b16:	f002 fc65 	bl	801a3e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017b1a:	2301      	movs	r3, #1
}
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	3710      	adds	r7, #16
 8017b20:	46bd      	mov	sp, r7
 8017b22:	bd80      	pop	{r7, pc}
 8017b24:	e000ed04 	.word	0xe000ed04

08017b28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b08a      	sub	sp, #40	; 0x28
 8017b2c:	af02      	add	r7, sp, #8
 8017b2e:	60f8      	str	r0, [r7, #12]
 8017b30:	60b9      	str	r1, [r7, #8]
 8017b32:	4613      	mov	r3, r2
 8017b34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d10a      	bne.n	8017b52 <xQueueGenericCreate+0x2a>
	__asm volatile
 8017b3c:	f04f 0320 	mov.w	r3, #32
 8017b40:	f383 8811 	msr	BASEPRI, r3
 8017b44:	f3bf 8f6f 	isb	sy
 8017b48:	f3bf 8f4f 	dsb	sy
 8017b4c:	613b      	str	r3, [r7, #16]
}
 8017b4e:	bf00      	nop
 8017b50:	e7fe      	b.n	8017b50 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8017b52:	68bb      	ldr	r3, [r7, #8]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d102      	bne.n	8017b5e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8017b58:	2300      	movs	r3, #0
 8017b5a:	61fb      	str	r3, [r7, #28]
 8017b5c:	e004      	b.n	8017b68 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	68ba      	ldr	r2, [r7, #8]
 8017b62:	fb02 f303 	mul.w	r3, r2, r3
 8017b66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017b68:	69fb      	ldr	r3, [r7, #28]
 8017b6a:	3350      	adds	r3, #80	; 0x50
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	f002 fd2b 	bl	801a5c8 <pvPortMalloc>
 8017b72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8017b74:	69bb      	ldr	r3, [r7, #24]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d00d      	beq.n	8017b96 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017b7a:	69bb      	ldr	r3, [r7, #24]
 8017b7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017b7e:	697b      	ldr	r3, [r7, #20]
 8017b80:	3350      	adds	r3, #80	; 0x50
 8017b82:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017b84:	79fa      	ldrb	r2, [r7, #7]
 8017b86:	69bb      	ldr	r3, [r7, #24]
 8017b88:	9300      	str	r3, [sp, #0]
 8017b8a:	4613      	mov	r3, r2
 8017b8c:	697a      	ldr	r2, [r7, #20]
 8017b8e:	68b9      	ldr	r1, [r7, #8]
 8017b90:	68f8      	ldr	r0, [r7, #12]
 8017b92:	f000 f805 	bl	8017ba0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017b96:	69bb      	ldr	r3, [r7, #24]
	}
 8017b98:	4618      	mov	r0, r3
 8017b9a:	3720      	adds	r7, #32
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd80      	pop	{r7, pc}

08017ba0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b084      	sub	sp, #16
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	60f8      	str	r0, [r7, #12]
 8017ba8:	60b9      	str	r1, [r7, #8]
 8017baa:	607a      	str	r2, [r7, #4]
 8017bac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017bae:	68bb      	ldr	r3, [r7, #8]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d103      	bne.n	8017bbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017bb4:	69bb      	ldr	r3, [r7, #24]
 8017bb6:	69ba      	ldr	r2, [r7, #24]
 8017bb8:	601a      	str	r2, [r3, #0]
 8017bba:	e002      	b.n	8017bc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017bbc:	69bb      	ldr	r3, [r7, #24]
 8017bbe:	687a      	ldr	r2, [r7, #4]
 8017bc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017bc2:	69bb      	ldr	r3, [r7, #24]
 8017bc4:	68fa      	ldr	r2, [r7, #12]
 8017bc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017bc8:	69bb      	ldr	r3, [r7, #24]
 8017bca:	68ba      	ldr	r2, [r7, #8]
 8017bcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017bce:	2101      	movs	r1, #1
 8017bd0:	69b8      	ldr	r0, [r7, #24]
 8017bd2:	f7ff ff41 	bl	8017a58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017bd6:	69bb      	ldr	r3, [r7, #24]
 8017bd8:	78fa      	ldrb	r2, [r7, #3]
 8017bda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017bde:	bf00      	nop
 8017be0:	3710      	adds	r7, #16
 8017be2:	46bd      	mov	sp, r7
 8017be4:	bd80      	pop	{r7, pc}

08017be6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8017be6:	b580      	push	{r7, lr}
 8017be8:	b086      	sub	sp, #24
 8017bea:	af00      	add	r7, sp, #0
 8017bec:	6078      	str	r0, [r7, #4]
 8017bee:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d10a      	bne.n	8017c0c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8017bf6:	f04f 0320 	mov.w	r3, #32
 8017bfa:	f383 8811 	msr	BASEPRI, r3
 8017bfe:	f3bf 8f6f 	isb	sy
 8017c02:	f3bf 8f4f 	dsb	sy
 8017c06:	613b      	str	r3, [r7, #16]
}
 8017c08:	bf00      	nop
 8017c0a:	e7fe      	b.n	8017c0a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8017c0c:	683a      	ldr	r2, [r7, #0]
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	429a      	cmp	r2, r3
 8017c12:	d90a      	bls.n	8017c2a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8017c14:	f04f 0320 	mov.w	r3, #32
 8017c18:	f383 8811 	msr	BASEPRI, r3
 8017c1c:	f3bf 8f6f 	isb	sy
 8017c20:	f3bf 8f4f 	dsb	sy
 8017c24:	60fb      	str	r3, [r7, #12]
}
 8017c26:	bf00      	nop
 8017c28:	e7fe      	b.n	8017c28 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8017c2a:	2202      	movs	r2, #2
 8017c2c:	2100      	movs	r1, #0
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	f7ff ff7a 	bl	8017b28 <xQueueGenericCreate>
 8017c34:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8017c36:	697b      	ldr	r3, [r7, #20]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d002      	beq.n	8017c42 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8017c3c:	697b      	ldr	r3, [r7, #20]
 8017c3e:	683a      	ldr	r2, [r7, #0]
 8017c40:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8017c42:	697b      	ldr	r3, [r7, #20]
	}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3718      	adds	r7, #24
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}

08017c4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b08e      	sub	sp, #56	; 0x38
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	60f8      	str	r0, [r7, #12]
 8017c54:	60b9      	str	r1, [r7, #8]
 8017c56:	607a      	str	r2, [r7, #4]
 8017c58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d10a      	bne.n	8017c7e <xQueueGenericSend+0x32>
	__asm volatile
 8017c68:	f04f 0320 	mov.w	r3, #32
 8017c6c:	f383 8811 	msr	BASEPRI, r3
 8017c70:	f3bf 8f6f 	isb	sy
 8017c74:	f3bf 8f4f 	dsb	sy
 8017c78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017c7a:	bf00      	nop
 8017c7c:	e7fe      	b.n	8017c7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017c7e:	68bb      	ldr	r3, [r7, #8]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d103      	bne.n	8017c8c <xQueueGenericSend+0x40>
 8017c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d101      	bne.n	8017c90 <xQueueGenericSend+0x44>
 8017c8c:	2301      	movs	r3, #1
 8017c8e:	e000      	b.n	8017c92 <xQueueGenericSend+0x46>
 8017c90:	2300      	movs	r3, #0
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d10a      	bne.n	8017cac <xQueueGenericSend+0x60>
	__asm volatile
 8017c96:	f04f 0320 	mov.w	r3, #32
 8017c9a:	f383 8811 	msr	BASEPRI, r3
 8017c9e:	f3bf 8f6f 	isb	sy
 8017ca2:	f3bf 8f4f 	dsb	sy
 8017ca6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017ca8:	bf00      	nop
 8017caa:	e7fe      	b.n	8017caa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	2b02      	cmp	r3, #2
 8017cb0:	d103      	bne.n	8017cba <xQueueGenericSend+0x6e>
 8017cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cb6:	2b01      	cmp	r3, #1
 8017cb8:	d101      	bne.n	8017cbe <xQueueGenericSend+0x72>
 8017cba:	2301      	movs	r3, #1
 8017cbc:	e000      	b.n	8017cc0 <xQueueGenericSend+0x74>
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d10a      	bne.n	8017cda <xQueueGenericSend+0x8e>
	__asm volatile
 8017cc4:	f04f 0320 	mov.w	r3, #32
 8017cc8:	f383 8811 	msr	BASEPRI, r3
 8017ccc:	f3bf 8f6f 	isb	sy
 8017cd0:	f3bf 8f4f 	dsb	sy
 8017cd4:	623b      	str	r3, [r7, #32]
}
 8017cd6:	bf00      	nop
 8017cd8:	e7fe      	b.n	8017cd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017cda:	f001 fcdb 	bl	8019694 <xTaskGetSchedulerState>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d102      	bne.n	8017cea <xQueueGenericSend+0x9e>
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d101      	bne.n	8017cee <xQueueGenericSend+0xa2>
 8017cea:	2301      	movs	r3, #1
 8017cec:	e000      	b.n	8017cf0 <xQueueGenericSend+0xa4>
 8017cee:	2300      	movs	r3, #0
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d10a      	bne.n	8017d0a <xQueueGenericSend+0xbe>
	__asm volatile
 8017cf4:	f04f 0320 	mov.w	r3, #32
 8017cf8:	f383 8811 	msr	BASEPRI, r3
 8017cfc:	f3bf 8f6f 	isb	sy
 8017d00:	f3bf 8f4f 	dsb	sy
 8017d04:	61fb      	str	r3, [r7, #28]
}
 8017d06:	bf00      	nop
 8017d08:	e7fe      	b.n	8017d08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017d0a:	f002 fb3b 	bl	801a384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d16:	429a      	cmp	r2, r3
 8017d18:	d302      	bcc.n	8017d20 <xQueueGenericSend+0xd4>
 8017d1a:	683b      	ldr	r3, [r7, #0]
 8017d1c:	2b02      	cmp	r3, #2
 8017d1e:	d129      	bne.n	8017d74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017d20:	683a      	ldr	r2, [r7, #0]
 8017d22:	68b9      	ldr	r1, [r7, #8]
 8017d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d26:	f000 fc39 	bl	801859c <prvCopyDataToQueue>
 8017d2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d010      	beq.n	8017d56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d36:	3324      	adds	r3, #36	; 0x24
 8017d38:	4618      	mov	r0, r3
 8017d3a:	f001 fb0d 	bl	8019358 <xTaskRemoveFromEventList>
 8017d3e:	4603      	mov	r3, r0
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d013      	beq.n	8017d6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017d44:	4b3f      	ldr	r3, [pc, #252]	; (8017e44 <xQueueGenericSend+0x1f8>)
 8017d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d4a:	601a      	str	r2, [r3, #0]
 8017d4c:	f3bf 8f4f 	dsb	sy
 8017d50:	f3bf 8f6f 	isb	sy
 8017d54:	e00a      	b.n	8017d6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d007      	beq.n	8017d6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017d5c:	4b39      	ldr	r3, [pc, #228]	; (8017e44 <xQueueGenericSend+0x1f8>)
 8017d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d62:	601a      	str	r2, [r3, #0]
 8017d64:	f3bf 8f4f 	dsb	sy
 8017d68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017d6c:	f002 fb3a 	bl	801a3e4 <vPortExitCritical>
				return pdPASS;
 8017d70:	2301      	movs	r3, #1
 8017d72:	e063      	b.n	8017e3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d103      	bne.n	8017d82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017d7a:	f002 fb33 	bl	801a3e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017d7e:	2300      	movs	r3, #0
 8017d80:	e05c      	b.n	8017e3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d106      	bne.n	8017d96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017d88:	f107 0314 	add.w	r3, r7, #20
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f001 fb45 	bl	801941c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017d92:	2301      	movs	r3, #1
 8017d94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017d96:	f002 fb25 	bl	801a3e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017d9a:	f001 f899 	bl	8018ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017d9e:	f002 faf1 	bl	801a384 <vPortEnterCritical>
 8017da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017da8:	b25b      	sxtb	r3, r3
 8017daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dae:	d103      	bne.n	8017db8 <xQueueGenericSend+0x16c>
 8017db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017db2:	2200      	movs	r2, #0
 8017db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017dbe:	b25b      	sxtb	r3, r3
 8017dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dc4:	d103      	bne.n	8017dce <xQueueGenericSend+0x182>
 8017dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dc8:	2200      	movs	r2, #0
 8017dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017dce:	f002 fb09 	bl	801a3e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017dd2:	1d3a      	adds	r2, r7, #4
 8017dd4:	f107 0314 	add.w	r3, r7, #20
 8017dd8:	4611      	mov	r1, r2
 8017dda:	4618      	mov	r0, r3
 8017ddc:	f001 fb34 	bl	8019448 <xTaskCheckForTimeOut>
 8017de0:	4603      	mov	r3, r0
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d124      	bne.n	8017e30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017de8:	f000 fcd0 	bl	801878c <prvIsQueueFull>
 8017dec:	4603      	mov	r3, r0
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d018      	beq.n	8017e24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017df4:	3310      	adds	r3, #16
 8017df6:	687a      	ldr	r2, [r7, #4]
 8017df8:	4611      	mov	r1, r2
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f001 fa5c 	bl	80192b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e02:	f000 fc5b 	bl	80186bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017e06:	f001 f871 	bl	8018eec <xTaskResumeAll>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	f47f af7c 	bne.w	8017d0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017e12:	4b0c      	ldr	r3, [pc, #48]	; (8017e44 <xQueueGenericSend+0x1f8>)
 8017e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e18:	601a      	str	r2, [r3, #0]
 8017e1a:	f3bf 8f4f 	dsb	sy
 8017e1e:	f3bf 8f6f 	isb	sy
 8017e22:	e772      	b.n	8017d0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e26:	f000 fc49 	bl	80186bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017e2a:	f001 f85f 	bl	8018eec <xTaskResumeAll>
 8017e2e:	e76c      	b.n	8017d0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e32:	f000 fc43 	bl	80186bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017e36:	f001 f859 	bl	8018eec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017e3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	3738      	adds	r7, #56	; 0x38
 8017e40:	46bd      	mov	sp, r7
 8017e42:	bd80      	pop	{r7, pc}
 8017e44:	e000ed04 	.word	0xe000ed04

08017e48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b08e      	sub	sp, #56	; 0x38
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	60f8      	str	r0, [r7, #12]
 8017e50:	60b9      	str	r1, [r7, #8]
 8017e52:	607a      	str	r2, [r7, #4]
 8017e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d10a      	bne.n	8017e76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017e60:	f04f 0320 	mov.w	r3, #32
 8017e64:	f383 8811 	msr	BASEPRI, r3
 8017e68:	f3bf 8f6f 	isb	sy
 8017e6c:	f3bf 8f4f 	dsb	sy
 8017e70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017e72:	bf00      	nop
 8017e74:	e7fe      	b.n	8017e74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017e76:	68bb      	ldr	r3, [r7, #8]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d103      	bne.n	8017e84 <xQueueGenericSendFromISR+0x3c>
 8017e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d101      	bne.n	8017e88 <xQueueGenericSendFromISR+0x40>
 8017e84:	2301      	movs	r3, #1
 8017e86:	e000      	b.n	8017e8a <xQueueGenericSendFromISR+0x42>
 8017e88:	2300      	movs	r3, #0
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d10a      	bne.n	8017ea4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017e8e:	f04f 0320 	mov.w	r3, #32
 8017e92:	f383 8811 	msr	BASEPRI, r3
 8017e96:	f3bf 8f6f 	isb	sy
 8017e9a:	f3bf 8f4f 	dsb	sy
 8017e9e:	623b      	str	r3, [r7, #32]
}
 8017ea0:	bf00      	nop
 8017ea2:	e7fe      	b.n	8017ea2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017ea4:	683b      	ldr	r3, [r7, #0]
 8017ea6:	2b02      	cmp	r3, #2
 8017ea8:	d103      	bne.n	8017eb2 <xQueueGenericSendFromISR+0x6a>
 8017eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017eae:	2b01      	cmp	r3, #1
 8017eb0:	d101      	bne.n	8017eb6 <xQueueGenericSendFromISR+0x6e>
 8017eb2:	2301      	movs	r3, #1
 8017eb4:	e000      	b.n	8017eb8 <xQueueGenericSendFromISR+0x70>
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d10a      	bne.n	8017ed2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017ebc:	f04f 0320 	mov.w	r3, #32
 8017ec0:	f383 8811 	msr	BASEPRI, r3
 8017ec4:	f3bf 8f6f 	isb	sy
 8017ec8:	f3bf 8f4f 	dsb	sy
 8017ecc:	61fb      	str	r3, [r7, #28]
}
 8017ece:	bf00      	nop
 8017ed0:	e7fe      	b.n	8017ed0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017ed2:	f002 fb39 	bl	801a548 <vPortValidateInterruptPriority>
	__asm volatile
 8017ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8017eda:	f04f 0320 	mov.w	r3, #32
 8017ede:	f383 8811 	msr	BASEPRI, r3
 8017ee2:	f3bf 8f6f 	isb	sy
 8017ee6:	f3bf 8f4f 	dsb	sy
 8017eea:	61ba      	str	r2, [r7, #24]
 8017eec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8017eee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017efa:	429a      	cmp	r2, r3
 8017efc:	d302      	bcc.n	8017f04 <xQueueGenericSendFromISR+0xbc>
 8017efe:	683b      	ldr	r3, [r7, #0]
 8017f00:	2b02      	cmp	r3, #2
 8017f02:	d12c      	bne.n	8017f5e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017f0e:	683a      	ldr	r2, [r7, #0]
 8017f10:	68b9      	ldr	r1, [r7, #8]
 8017f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f14:	f000 fb42 	bl	801859c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017f18:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f20:	d112      	bne.n	8017f48 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d016      	beq.n	8017f58 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f2c:	3324      	adds	r3, #36	; 0x24
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f001 fa12 	bl	8019358 <xTaskRemoveFromEventList>
 8017f34:	4603      	mov	r3, r0
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d00e      	beq.n	8017f58 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d00b      	beq.n	8017f58 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	2201      	movs	r2, #1
 8017f44:	601a      	str	r2, [r3, #0]
 8017f46:	e007      	b.n	8017f58 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017f48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017f4c:	3301      	adds	r3, #1
 8017f4e:	b2db      	uxtb	r3, r3
 8017f50:	b25a      	sxtb	r2, r3
 8017f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017f58:	2301      	movs	r3, #1
 8017f5a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8017f5c:	e001      	b.n	8017f62 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017f5e:	2300      	movs	r3, #0
 8017f60:	637b      	str	r3, [r7, #52]	; 0x34
 8017f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017f66:	693b      	ldr	r3, [r7, #16]
 8017f68:	f383 8811 	msr	BASEPRI, r3
}
 8017f6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017f70:	4618      	mov	r0, r3
 8017f72:	3738      	adds	r7, #56	; 0x38
 8017f74:	46bd      	mov	sp, r7
 8017f76:	bd80      	pop	{r7, pc}

08017f78 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b08e      	sub	sp, #56	; 0x38
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
 8017f80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d10a      	bne.n	8017fa2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8017f8c:	f04f 0320 	mov.w	r3, #32
 8017f90:	f383 8811 	msr	BASEPRI, r3
 8017f94:	f3bf 8f6f 	isb	sy
 8017f98:	f3bf 8f4f 	dsb	sy
 8017f9c:	623b      	str	r3, [r7, #32]
}
 8017f9e:	bf00      	nop
 8017fa0:	e7fe      	b.n	8017fa0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d00a      	beq.n	8017fc0 <xQueueGiveFromISR+0x48>
	__asm volatile
 8017faa:	f04f 0320 	mov.w	r3, #32
 8017fae:	f383 8811 	msr	BASEPRI, r3
 8017fb2:	f3bf 8f6f 	isb	sy
 8017fb6:	f3bf 8f4f 	dsb	sy
 8017fba:	61fb      	str	r3, [r7, #28]
}
 8017fbc:	bf00      	nop
 8017fbe:	e7fe      	b.n	8017fbe <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d103      	bne.n	8017fd0 <xQueueGiveFromISR+0x58>
 8017fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fca:	689b      	ldr	r3, [r3, #8]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d101      	bne.n	8017fd4 <xQueueGiveFromISR+0x5c>
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	e000      	b.n	8017fd6 <xQueueGiveFromISR+0x5e>
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d10a      	bne.n	8017ff0 <xQueueGiveFromISR+0x78>
	__asm volatile
 8017fda:	f04f 0320 	mov.w	r3, #32
 8017fde:	f383 8811 	msr	BASEPRI, r3
 8017fe2:	f3bf 8f6f 	isb	sy
 8017fe6:	f3bf 8f4f 	dsb	sy
 8017fea:	61bb      	str	r3, [r7, #24]
}
 8017fec:	bf00      	nop
 8017fee:	e7fe      	b.n	8017fee <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017ff0:	f002 faaa 	bl	801a548 <vPortValidateInterruptPriority>
	__asm volatile
 8017ff4:	f3ef 8211 	mrs	r2, BASEPRI
 8017ff8:	f04f 0320 	mov.w	r3, #32
 8017ffc:	f383 8811 	msr	BASEPRI, r3
 8018000:	f3bf 8f6f 	isb	sy
 8018004:	f3bf 8f4f 	dsb	sy
 8018008:	617a      	str	r2, [r7, #20]
 801800a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801800c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801800e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018014:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8018016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801801a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801801c:	429a      	cmp	r2, r3
 801801e:	d22b      	bcs.n	8018078 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801802c:	1c5a      	adds	r2, r3, #1
 801802e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018030:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018032:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018036:	f1b3 3fff 	cmp.w	r3, #4294967295
 801803a:	d112      	bne.n	8018062 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018040:	2b00      	cmp	r3, #0
 8018042:	d016      	beq.n	8018072 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018046:	3324      	adds	r3, #36	; 0x24
 8018048:	4618      	mov	r0, r3
 801804a:	f001 f985 	bl	8019358 <xTaskRemoveFromEventList>
 801804e:	4603      	mov	r3, r0
 8018050:	2b00      	cmp	r3, #0
 8018052:	d00e      	beq.n	8018072 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018054:	683b      	ldr	r3, [r7, #0]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d00b      	beq.n	8018072 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801805a:	683b      	ldr	r3, [r7, #0]
 801805c:	2201      	movs	r2, #1
 801805e:	601a      	str	r2, [r3, #0]
 8018060:	e007      	b.n	8018072 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018066:	3301      	adds	r3, #1
 8018068:	b2db      	uxtb	r3, r3
 801806a:	b25a      	sxtb	r2, r3
 801806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801806e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018072:	2301      	movs	r3, #1
 8018074:	637b      	str	r3, [r7, #52]	; 0x34
 8018076:	e001      	b.n	801807c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018078:	2300      	movs	r3, #0
 801807a:	637b      	str	r3, [r7, #52]	; 0x34
 801807c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801807e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	f383 8811 	msr	BASEPRI, r3
}
 8018086:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801808a:	4618      	mov	r0, r3
 801808c:	3738      	adds	r7, #56	; 0x38
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}
	...

08018094 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b08c      	sub	sp, #48	; 0x30
 8018098:	af00      	add	r7, sp, #0
 801809a:	60f8      	str	r0, [r7, #12]
 801809c:	60b9      	str	r1, [r7, #8]
 801809e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80180a0:	2300      	movs	r3, #0
 80180a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80180a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d10a      	bne.n	80180c4 <xQueueReceive+0x30>
	__asm volatile
 80180ae:	f04f 0320 	mov.w	r3, #32
 80180b2:	f383 8811 	msr	BASEPRI, r3
 80180b6:	f3bf 8f6f 	isb	sy
 80180ba:	f3bf 8f4f 	dsb	sy
 80180be:	623b      	str	r3, [r7, #32]
}
 80180c0:	bf00      	nop
 80180c2:	e7fe      	b.n	80180c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80180c4:	68bb      	ldr	r3, [r7, #8]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d103      	bne.n	80180d2 <xQueueReceive+0x3e>
 80180ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d101      	bne.n	80180d6 <xQueueReceive+0x42>
 80180d2:	2301      	movs	r3, #1
 80180d4:	e000      	b.n	80180d8 <xQueueReceive+0x44>
 80180d6:	2300      	movs	r3, #0
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d10a      	bne.n	80180f2 <xQueueReceive+0x5e>
	__asm volatile
 80180dc:	f04f 0320 	mov.w	r3, #32
 80180e0:	f383 8811 	msr	BASEPRI, r3
 80180e4:	f3bf 8f6f 	isb	sy
 80180e8:	f3bf 8f4f 	dsb	sy
 80180ec:	61fb      	str	r3, [r7, #28]
}
 80180ee:	bf00      	nop
 80180f0:	e7fe      	b.n	80180f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80180f2:	f001 facf 	bl	8019694 <xTaskGetSchedulerState>
 80180f6:	4603      	mov	r3, r0
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d102      	bne.n	8018102 <xQueueReceive+0x6e>
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d101      	bne.n	8018106 <xQueueReceive+0x72>
 8018102:	2301      	movs	r3, #1
 8018104:	e000      	b.n	8018108 <xQueueReceive+0x74>
 8018106:	2300      	movs	r3, #0
 8018108:	2b00      	cmp	r3, #0
 801810a:	d10a      	bne.n	8018122 <xQueueReceive+0x8e>
	__asm volatile
 801810c:	f04f 0320 	mov.w	r3, #32
 8018110:	f383 8811 	msr	BASEPRI, r3
 8018114:	f3bf 8f6f 	isb	sy
 8018118:	f3bf 8f4f 	dsb	sy
 801811c:	61bb      	str	r3, [r7, #24]
}
 801811e:	bf00      	nop
 8018120:	e7fe      	b.n	8018120 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018122:	f002 f92f 	bl	801a384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801812a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801812e:	2b00      	cmp	r3, #0
 8018130:	d01f      	beq.n	8018172 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018132:	68b9      	ldr	r1, [r7, #8]
 8018134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018136:	f000 fa9b 	bl	8018670 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801813c:	1e5a      	subs	r2, r3, #1
 801813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018140:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018144:	691b      	ldr	r3, [r3, #16]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d00f      	beq.n	801816a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801814c:	3310      	adds	r3, #16
 801814e:	4618      	mov	r0, r3
 8018150:	f001 f902 	bl	8019358 <xTaskRemoveFromEventList>
 8018154:	4603      	mov	r3, r0
 8018156:	2b00      	cmp	r3, #0
 8018158:	d007      	beq.n	801816a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801815a:	4b3d      	ldr	r3, [pc, #244]	; (8018250 <xQueueReceive+0x1bc>)
 801815c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018160:	601a      	str	r2, [r3, #0]
 8018162:	f3bf 8f4f 	dsb	sy
 8018166:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801816a:	f002 f93b 	bl	801a3e4 <vPortExitCritical>
				return pdPASS;
 801816e:	2301      	movs	r3, #1
 8018170:	e069      	b.n	8018246 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d103      	bne.n	8018180 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018178:	f002 f934 	bl	801a3e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801817c:	2300      	movs	r3, #0
 801817e:	e062      	b.n	8018246 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018182:	2b00      	cmp	r3, #0
 8018184:	d106      	bne.n	8018194 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018186:	f107 0310 	add.w	r3, r7, #16
 801818a:	4618      	mov	r0, r3
 801818c:	f001 f946 	bl	801941c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018190:	2301      	movs	r3, #1
 8018192:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018194:	f002 f926 	bl	801a3e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018198:	f000 fe9a 	bl	8018ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801819c:	f002 f8f2 	bl	801a384 <vPortEnterCritical>
 80181a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80181a6:	b25b      	sxtb	r3, r3
 80181a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181ac:	d103      	bne.n	80181b6 <xQueueReceive+0x122>
 80181ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181b0:	2200      	movs	r2, #0
 80181b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80181b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80181bc:	b25b      	sxtb	r3, r3
 80181be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181c2:	d103      	bne.n	80181cc <xQueueReceive+0x138>
 80181c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181c6:	2200      	movs	r2, #0
 80181c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80181cc:	f002 f90a 	bl	801a3e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80181d0:	1d3a      	adds	r2, r7, #4
 80181d2:	f107 0310 	add.w	r3, r7, #16
 80181d6:	4611      	mov	r1, r2
 80181d8:	4618      	mov	r0, r3
 80181da:	f001 f935 	bl	8019448 <xTaskCheckForTimeOut>
 80181de:	4603      	mov	r3, r0
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d123      	bne.n	801822c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80181e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181e6:	f000 fabb 	bl	8018760 <prvIsQueueEmpty>
 80181ea:	4603      	mov	r3, r0
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d017      	beq.n	8018220 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80181f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181f2:	3324      	adds	r3, #36	; 0x24
 80181f4:	687a      	ldr	r2, [r7, #4]
 80181f6:	4611      	mov	r1, r2
 80181f8:	4618      	mov	r0, r3
 80181fa:	f001 f85d 	bl	80192b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80181fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018200:	f000 fa5c 	bl	80186bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018204:	f000 fe72 	bl	8018eec <xTaskResumeAll>
 8018208:	4603      	mov	r3, r0
 801820a:	2b00      	cmp	r3, #0
 801820c:	d189      	bne.n	8018122 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801820e:	4b10      	ldr	r3, [pc, #64]	; (8018250 <xQueueReceive+0x1bc>)
 8018210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018214:	601a      	str	r2, [r3, #0]
 8018216:	f3bf 8f4f 	dsb	sy
 801821a:	f3bf 8f6f 	isb	sy
 801821e:	e780      	b.n	8018122 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018222:	f000 fa4b 	bl	80186bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018226:	f000 fe61 	bl	8018eec <xTaskResumeAll>
 801822a:	e77a      	b.n	8018122 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801822c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801822e:	f000 fa45 	bl	80186bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018232:	f000 fe5b 	bl	8018eec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018238:	f000 fa92 	bl	8018760 <prvIsQueueEmpty>
 801823c:	4603      	mov	r3, r0
 801823e:	2b00      	cmp	r3, #0
 8018240:	f43f af6f 	beq.w	8018122 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018246:	4618      	mov	r0, r3
 8018248:	3730      	adds	r7, #48	; 0x30
 801824a:	46bd      	mov	sp, r7
 801824c:	bd80      	pop	{r7, pc}
 801824e:	bf00      	nop
 8018250:	e000ed04 	.word	0xe000ed04

08018254 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8018254:	b580      	push	{r7, lr}
 8018256:	b08e      	sub	sp, #56	; 0x38
 8018258:	af00      	add	r7, sp, #0
 801825a:	6078      	str	r0, [r7, #4]
 801825c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801825e:	2300      	movs	r3, #0
 8018260:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018266:	2300      	movs	r3, #0
 8018268:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801826a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801826c:	2b00      	cmp	r3, #0
 801826e:	d10a      	bne.n	8018286 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8018270:	f04f 0320 	mov.w	r3, #32
 8018274:	f383 8811 	msr	BASEPRI, r3
 8018278:	f3bf 8f6f 	isb	sy
 801827c:	f3bf 8f4f 	dsb	sy
 8018280:	623b      	str	r3, [r7, #32]
}
 8018282:	bf00      	nop
 8018284:	e7fe      	b.n	8018284 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801828a:	2b00      	cmp	r3, #0
 801828c:	d00a      	beq.n	80182a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801828e:	f04f 0320 	mov.w	r3, #32
 8018292:	f383 8811 	msr	BASEPRI, r3
 8018296:	f3bf 8f6f 	isb	sy
 801829a:	f3bf 8f4f 	dsb	sy
 801829e:	61fb      	str	r3, [r7, #28]
}
 80182a0:	bf00      	nop
 80182a2:	e7fe      	b.n	80182a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80182a4:	f001 f9f6 	bl	8019694 <xTaskGetSchedulerState>
 80182a8:	4603      	mov	r3, r0
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d102      	bne.n	80182b4 <xQueueSemaphoreTake+0x60>
 80182ae:	683b      	ldr	r3, [r7, #0]
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d101      	bne.n	80182b8 <xQueueSemaphoreTake+0x64>
 80182b4:	2301      	movs	r3, #1
 80182b6:	e000      	b.n	80182ba <xQueueSemaphoreTake+0x66>
 80182b8:	2300      	movs	r3, #0
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d10a      	bne.n	80182d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80182be:	f04f 0320 	mov.w	r3, #32
 80182c2:	f383 8811 	msr	BASEPRI, r3
 80182c6:	f3bf 8f6f 	isb	sy
 80182ca:	f3bf 8f4f 	dsb	sy
 80182ce:	61bb      	str	r3, [r7, #24]
}
 80182d0:	bf00      	nop
 80182d2:	e7fe      	b.n	80182d2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80182d4:	f002 f856 	bl	801a384 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80182d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80182de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d024      	beq.n	801832e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80182e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182e6:	1e5a      	subs	r2, r3, #1
 80182e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80182ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d104      	bne.n	80182fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80182f4:	f001 fb8c 	bl	8019a10 <pvTaskIncrementMutexHeldCount>
 80182f8:	4602      	mov	r2, r0
 80182fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80182fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018300:	691b      	ldr	r3, [r3, #16]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d00f      	beq.n	8018326 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018308:	3310      	adds	r3, #16
 801830a:	4618      	mov	r0, r3
 801830c:	f001 f824 	bl	8019358 <xTaskRemoveFromEventList>
 8018310:	4603      	mov	r3, r0
 8018312:	2b00      	cmp	r3, #0
 8018314:	d007      	beq.n	8018326 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018316:	4b54      	ldr	r3, [pc, #336]	; (8018468 <xQueueSemaphoreTake+0x214>)
 8018318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801831c:	601a      	str	r2, [r3, #0]
 801831e:	f3bf 8f4f 	dsb	sy
 8018322:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018326:	f002 f85d 	bl	801a3e4 <vPortExitCritical>
				return pdPASS;
 801832a:	2301      	movs	r3, #1
 801832c:	e097      	b.n	801845e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801832e:	683b      	ldr	r3, [r7, #0]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d111      	bne.n	8018358 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8018334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018336:	2b00      	cmp	r3, #0
 8018338:	d00a      	beq.n	8018350 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801833a:	f04f 0320 	mov.w	r3, #32
 801833e:	f383 8811 	msr	BASEPRI, r3
 8018342:	f3bf 8f6f 	isb	sy
 8018346:	f3bf 8f4f 	dsb	sy
 801834a:	617b      	str	r3, [r7, #20]
}
 801834c:	bf00      	nop
 801834e:	e7fe      	b.n	801834e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8018350:	f002 f848 	bl	801a3e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018354:	2300      	movs	r3, #0
 8018356:	e082      	b.n	801845e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801835a:	2b00      	cmp	r3, #0
 801835c:	d106      	bne.n	801836c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801835e:	f107 030c 	add.w	r3, r7, #12
 8018362:	4618      	mov	r0, r3
 8018364:	f001 f85a 	bl	801941c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018368:	2301      	movs	r3, #1
 801836a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801836c:	f002 f83a 	bl	801a3e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018370:	f000 fdae 	bl	8018ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018374:	f002 f806 	bl	801a384 <vPortEnterCritical>
 8018378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801837a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801837e:	b25b      	sxtb	r3, r3
 8018380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018384:	d103      	bne.n	801838e <xQueueSemaphoreTake+0x13a>
 8018386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018388:	2200      	movs	r2, #0
 801838a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018394:	b25b      	sxtb	r3, r3
 8018396:	f1b3 3fff 	cmp.w	r3, #4294967295
 801839a:	d103      	bne.n	80183a4 <xQueueSemaphoreTake+0x150>
 801839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801839e:	2200      	movs	r2, #0
 80183a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80183a4:	f002 f81e 	bl	801a3e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80183a8:	463a      	mov	r2, r7
 80183aa:	f107 030c 	add.w	r3, r7, #12
 80183ae:	4611      	mov	r1, r2
 80183b0:	4618      	mov	r0, r3
 80183b2:	f001 f849 	bl	8019448 <xTaskCheckForTimeOut>
 80183b6:	4603      	mov	r3, r0
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d132      	bne.n	8018422 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80183bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80183be:	f000 f9cf 	bl	8018760 <prvIsQueueEmpty>
 80183c2:	4603      	mov	r3, r0
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d026      	beq.n	8018416 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80183c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d109      	bne.n	80183e4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80183d0:	f001 ffd8 	bl	801a384 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80183d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183d6:	689b      	ldr	r3, [r3, #8]
 80183d8:	4618      	mov	r0, r3
 80183da:	f001 f979 	bl	80196d0 <xTaskPriorityInherit>
 80183de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80183e0:	f002 f800 	bl	801a3e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80183e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183e6:	3324      	adds	r3, #36	; 0x24
 80183e8:	683a      	ldr	r2, [r7, #0]
 80183ea:	4611      	mov	r1, r2
 80183ec:	4618      	mov	r0, r3
 80183ee:	f000 ff63 	bl	80192b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80183f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80183f4:	f000 f962 	bl	80186bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80183f8:	f000 fd78 	bl	8018eec <xTaskResumeAll>
 80183fc:	4603      	mov	r3, r0
 80183fe:	2b00      	cmp	r3, #0
 8018400:	f47f af68 	bne.w	80182d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8018404:	4b18      	ldr	r3, [pc, #96]	; (8018468 <xQueueSemaphoreTake+0x214>)
 8018406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801840a:	601a      	str	r2, [r3, #0]
 801840c:	f3bf 8f4f 	dsb	sy
 8018410:	f3bf 8f6f 	isb	sy
 8018414:	e75e      	b.n	80182d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8018416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018418:	f000 f950 	bl	80186bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801841c:	f000 fd66 	bl	8018eec <xTaskResumeAll>
 8018420:	e758      	b.n	80182d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8018422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018424:	f000 f94a 	bl	80186bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018428:	f000 fd60 	bl	8018eec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801842c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801842e:	f000 f997 	bl	8018760 <prvIsQueueEmpty>
 8018432:	4603      	mov	r3, r0
 8018434:	2b00      	cmp	r3, #0
 8018436:	f43f af4d 	beq.w	80182d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801843c:	2b00      	cmp	r3, #0
 801843e:	d00d      	beq.n	801845c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8018440:	f001 ffa0 	bl	801a384 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018446:	f000 f891 	bl	801856c <prvGetDisinheritPriorityAfterTimeout>
 801844a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801844e:	689b      	ldr	r3, [r3, #8]
 8018450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018452:	4618      	mov	r0, r3
 8018454:	f001 fa42 	bl	80198dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8018458:	f001 ffc4 	bl	801a3e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801845c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801845e:	4618      	mov	r0, r3
 8018460:	3738      	adds	r7, #56	; 0x38
 8018462:	46bd      	mov	sp, r7
 8018464:	bd80      	pop	{r7, pc}
 8018466:	bf00      	nop
 8018468:	e000ed04 	.word	0xe000ed04

0801846c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b08e      	sub	sp, #56	; 0x38
 8018470:	af00      	add	r7, sp, #0
 8018472:	60f8      	str	r0, [r7, #12]
 8018474:	60b9      	str	r1, [r7, #8]
 8018476:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801847e:	2b00      	cmp	r3, #0
 8018480:	d10a      	bne.n	8018498 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8018482:	f04f 0320 	mov.w	r3, #32
 8018486:	f383 8811 	msr	BASEPRI, r3
 801848a:	f3bf 8f6f 	isb	sy
 801848e:	f3bf 8f4f 	dsb	sy
 8018492:	623b      	str	r3, [r7, #32]
}
 8018494:	bf00      	nop
 8018496:	e7fe      	b.n	8018496 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d103      	bne.n	80184a6 <xQueueReceiveFromISR+0x3a>
 801849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d101      	bne.n	80184aa <xQueueReceiveFromISR+0x3e>
 80184a6:	2301      	movs	r3, #1
 80184a8:	e000      	b.n	80184ac <xQueueReceiveFromISR+0x40>
 80184aa:	2300      	movs	r3, #0
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d10a      	bne.n	80184c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80184b0:	f04f 0320 	mov.w	r3, #32
 80184b4:	f383 8811 	msr	BASEPRI, r3
 80184b8:	f3bf 8f6f 	isb	sy
 80184bc:	f3bf 8f4f 	dsb	sy
 80184c0:	61fb      	str	r3, [r7, #28]
}
 80184c2:	bf00      	nop
 80184c4:	e7fe      	b.n	80184c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80184c6:	f002 f83f 	bl	801a548 <vPortValidateInterruptPriority>
	__asm volatile
 80184ca:	f3ef 8211 	mrs	r2, BASEPRI
 80184ce:	f04f 0320 	mov.w	r3, #32
 80184d2:	f383 8811 	msr	BASEPRI, r3
 80184d6:	f3bf 8f6f 	isb	sy
 80184da:	f3bf 8f4f 	dsb	sy
 80184de:	61ba      	str	r2, [r7, #24]
 80184e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80184e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80184e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80184e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80184ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d02f      	beq.n	8018552 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80184f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80184f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80184fc:	68b9      	ldr	r1, [r7, #8]
 80184fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018500:	f000 f8b6 	bl	8018670 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018506:	1e5a      	subs	r2, r3, #1
 8018508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801850a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801850c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018514:	d112      	bne.n	801853c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018518:	691b      	ldr	r3, [r3, #16]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d016      	beq.n	801854c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018520:	3310      	adds	r3, #16
 8018522:	4618      	mov	r0, r3
 8018524:	f000 ff18 	bl	8019358 <xTaskRemoveFromEventList>
 8018528:	4603      	mov	r3, r0
 801852a:	2b00      	cmp	r3, #0
 801852c:	d00e      	beq.n	801854c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d00b      	beq.n	801854c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	2201      	movs	r2, #1
 8018538:	601a      	str	r2, [r3, #0]
 801853a:	e007      	b.n	801854c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801853c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018540:	3301      	adds	r3, #1
 8018542:	b2db      	uxtb	r3, r3
 8018544:	b25a      	sxtb	r2, r3
 8018546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801854c:	2301      	movs	r3, #1
 801854e:	637b      	str	r3, [r7, #52]	; 0x34
 8018550:	e001      	b.n	8018556 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8018552:	2300      	movs	r3, #0
 8018554:	637b      	str	r3, [r7, #52]	; 0x34
 8018556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018558:	613b      	str	r3, [r7, #16]
	__asm volatile
 801855a:	693b      	ldr	r3, [r7, #16]
 801855c:	f383 8811 	msr	BASEPRI, r3
}
 8018560:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018564:	4618      	mov	r0, r3
 8018566:	3738      	adds	r7, #56	; 0x38
 8018568:	46bd      	mov	sp, r7
 801856a:	bd80      	pop	{r7, pc}

0801856c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801856c:	b480      	push	{r7}
 801856e:	b085      	sub	sp, #20
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018578:	2b00      	cmp	r3, #0
 801857a:	d006      	beq.n	801858a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	f1c3 0307 	rsb	r3, r3, #7
 8018586:	60fb      	str	r3, [r7, #12]
 8018588:	e001      	b.n	801858e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801858a:	2300      	movs	r3, #0
 801858c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801858e:	68fb      	ldr	r3, [r7, #12]
	}
 8018590:	4618      	mov	r0, r3
 8018592:	3714      	adds	r7, #20
 8018594:	46bd      	mov	sp, r7
 8018596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801859a:	4770      	bx	lr

0801859c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b086      	sub	sp, #24
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	60f8      	str	r0, [r7, #12]
 80185a4:	60b9      	str	r1, [r7, #8]
 80185a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80185a8:	2300      	movs	r3, #0
 80185aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d10d      	bne.n	80185d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d14d      	bne.n	801865e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	689b      	ldr	r3, [r3, #8]
 80185c6:	4618      	mov	r0, r3
 80185c8:	f001 f902 	bl	80197d0 <xTaskPriorityDisinherit>
 80185cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	2200      	movs	r2, #0
 80185d2:	609a      	str	r2, [r3, #8]
 80185d4:	e043      	b.n	801865e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d119      	bne.n	8018610 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	6858      	ldr	r0, [r3, #4]
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185e4:	461a      	mov	r2, r3
 80185e6:	68b9      	ldr	r1, [r7, #8]
 80185e8:	f005 fd4c 	bl	801e084 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	685a      	ldr	r2, [r3, #4]
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185f4:	441a      	add	r2, r3
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	685a      	ldr	r2, [r3, #4]
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	689b      	ldr	r3, [r3, #8]
 8018602:	429a      	cmp	r2, r3
 8018604:	d32b      	bcc.n	801865e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	681a      	ldr	r2, [r3, #0]
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	605a      	str	r2, [r3, #4]
 801860e:	e026      	b.n	801865e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	68d8      	ldr	r0, [r3, #12]
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018618:	461a      	mov	r2, r3
 801861a:	68b9      	ldr	r1, [r7, #8]
 801861c:	f005 fd32 	bl	801e084 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	68da      	ldr	r2, [r3, #12]
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018628:	425b      	negs	r3, r3
 801862a:	441a      	add	r2, r3
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	68da      	ldr	r2, [r3, #12]
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	429a      	cmp	r2, r3
 801863a:	d207      	bcs.n	801864c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	689a      	ldr	r2, [r3, #8]
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018644:	425b      	negs	r3, r3
 8018646:	441a      	add	r2, r3
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	2b02      	cmp	r3, #2
 8018650:	d105      	bne.n	801865e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018652:	693b      	ldr	r3, [r7, #16]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d002      	beq.n	801865e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018658:	693b      	ldr	r3, [r7, #16]
 801865a:	3b01      	subs	r3, #1
 801865c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801865e:	693b      	ldr	r3, [r7, #16]
 8018660:	1c5a      	adds	r2, r3, #1
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018666:	697b      	ldr	r3, [r7, #20]
}
 8018668:	4618      	mov	r0, r3
 801866a:	3718      	adds	r7, #24
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}

08018670 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b082      	sub	sp, #8
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
 8018678:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801867e:	2b00      	cmp	r3, #0
 8018680:	d018      	beq.n	80186b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	68da      	ldr	r2, [r3, #12]
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801868a:	441a      	add	r2, r3
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	68da      	ldr	r2, [r3, #12]
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	689b      	ldr	r3, [r3, #8]
 8018698:	429a      	cmp	r2, r3
 801869a:	d303      	bcc.n	80186a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	681a      	ldr	r2, [r3, #0]
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	68d9      	ldr	r1, [r3, #12]
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186ac:	461a      	mov	r2, r3
 80186ae:	6838      	ldr	r0, [r7, #0]
 80186b0:	f005 fce8 	bl	801e084 <memcpy>
	}
}
 80186b4:	bf00      	nop
 80186b6:	3708      	adds	r7, #8
 80186b8:	46bd      	mov	sp, r7
 80186ba:	bd80      	pop	{r7, pc}

080186bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80186bc:	b580      	push	{r7, lr}
 80186be:	b084      	sub	sp, #16
 80186c0:	af00      	add	r7, sp, #0
 80186c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80186c4:	f001 fe5e 	bl	801a384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80186ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80186d0:	e011      	b.n	80186f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d012      	beq.n	8018700 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	3324      	adds	r3, #36	; 0x24
 80186de:	4618      	mov	r0, r3
 80186e0:	f000 fe3a 	bl	8019358 <xTaskRemoveFromEventList>
 80186e4:	4603      	mov	r3, r0
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d001      	beq.n	80186ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80186ea:	f000 ff0f 	bl	801950c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80186ee:	7bfb      	ldrb	r3, [r7, #15]
 80186f0:	3b01      	subs	r3, #1
 80186f2:	b2db      	uxtb	r3, r3
 80186f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80186f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	dce9      	bgt.n	80186d2 <prvUnlockQueue+0x16>
 80186fe:	e000      	b.n	8018702 <prvUnlockQueue+0x46>
					break;
 8018700:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	22ff      	movs	r2, #255	; 0xff
 8018706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801870a:	f001 fe6b 	bl	801a3e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801870e:	f001 fe39 	bl	801a384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018718:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801871a:	e011      	b.n	8018740 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	691b      	ldr	r3, [r3, #16]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d012      	beq.n	801874a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	3310      	adds	r3, #16
 8018728:	4618      	mov	r0, r3
 801872a:	f000 fe15 	bl	8019358 <xTaskRemoveFromEventList>
 801872e:	4603      	mov	r3, r0
 8018730:	2b00      	cmp	r3, #0
 8018732:	d001      	beq.n	8018738 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018734:	f000 feea 	bl	801950c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018738:	7bbb      	ldrb	r3, [r7, #14]
 801873a:	3b01      	subs	r3, #1
 801873c:	b2db      	uxtb	r3, r3
 801873e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018744:	2b00      	cmp	r3, #0
 8018746:	dce9      	bgt.n	801871c <prvUnlockQueue+0x60>
 8018748:	e000      	b.n	801874c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801874a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	22ff      	movs	r2, #255	; 0xff
 8018750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018754:	f001 fe46 	bl	801a3e4 <vPortExitCritical>
}
 8018758:	bf00      	nop
 801875a:	3710      	adds	r7, #16
 801875c:	46bd      	mov	sp, r7
 801875e:	bd80      	pop	{r7, pc}

08018760 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b084      	sub	sp, #16
 8018764:	af00      	add	r7, sp, #0
 8018766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018768:	f001 fe0c 	bl	801a384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018770:	2b00      	cmp	r3, #0
 8018772:	d102      	bne.n	801877a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018774:	2301      	movs	r3, #1
 8018776:	60fb      	str	r3, [r7, #12]
 8018778:	e001      	b.n	801877e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801877a:	2300      	movs	r3, #0
 801877c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801877e:	f001 fe31 	bl	801a3e4 <vPortExitCritical>

	return xReturn;
 8018782:	68fb      	ldr	r3, [r7, #12]
}
 8018784:	4618      	mov	r0, r3
 8018786:	3710      	adds	r7, #16
 8018788:	46bd      	mov	sp, r7
 801878a:	bd80      	pop	{r7, pc}

0801878c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b084      	sub	sp, #16
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018794:	f001 fdf6 	bl	801a384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80187a0:	429a      	cmp	r2, r3
 80187a2:	d102      	bne.n	80187aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80187a4:	2301      	movs	r3, #1
 80187a6:	60fb      	str	r3, [r7, #12]
 80187a8:	e001      	b.n	80187ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80187aa:	2300      	movs	r3, #0
 80187ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80187ae:	f001 fe19 	bl	801a3e4 <vPortExitCritical>

	return xReturn;
 80187b2:	68fb      	ldr	r3, [r7, #12]
}
 80187b4:	4618      	mov	r0, r3
 80187b6:	3710      	adds	r7, #16
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}

080187bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80187bc:	b480      	push	{r7}
 80187be:	b085      	sub	sp, #20
 80187c0:	af00      	add	r7, sp, #0
 80187c2:	6078      	str	r0, [r7, #4]
 80187c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80187c6:	2300      	movs	r3, #0
 80187c8:	60fb      	str	r3, [r7, #12]
 80187ca:	e014      	b.n	80187f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80187cc:	4a0f      	ldr	r2, [pc, #60]	; (801880c <vQueueAddToRegistry+0x50>)
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d10b      	bne.n	80187f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80187d8:	490c      	ldr	r1, [pc, #48]	; (801880c <vQueueAddToRegistry+0x50>)
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	683a      	ldr	r2, [r7, #0]
 80187de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80187e2:	4a0a      	ldr	r2, [pc, #40]	; (801880c <vQueueAddToRegistry+0x50>)
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	00db      	lsls	r3, r3, #3
 80187e8:	4413      	add	r3, r2
 80187ea:	687a      	ldr	r2, [r7, #4]
 80187ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80187ee:	e006      	b.n	80187fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	3301      	adds	r3, #1
 80187f4:	60fb      	str	r3, [r7, #12]
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	2b63      	cmp	r3, #99	; 0x63
 80187fa:	d9e7      	bls.n	80187cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80187fc:	bf00      	nop
 80187fe:	bf00      	nop
 8018800:	3714      	adds	r7, #20
 8018802:	46bd      	mov	sp, r7
 8018804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018808:	4770      	bx	lr
 801880a:	bf00      	nop
 801880c:	20003808 	.word	0x20003808

08018810 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018810:	b580      	push	{r7, lr}
 8018812:	b086      	sub	sp, #24
 8018814:	af00      	add	r7, sp, #0
 8018816:	60f8      	str	r0, [r7, #12]
 8018818:	60b9      	str	r1, [r7, #8]
 801881a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018820:	f001 fdb0 	bl	801a384 <vPortEnterCritical>
 8018824:	697b      	ldr	r3, [r7, #20]
 8018826:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801882a:	b25b      	sxtb	r3, r3
 801882c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018830:	d103      	bne.n	801883a <vQueueWaitForMessageRestricted+0x2a>
 8018832:	697b      	ldr	r3, [r7, #20]
 8018834:	2200      	movs	r2, #0
 8018836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801883a:	697b      	ldr	r3, [r7, #20]
 801883c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018840:	b25b      	sxtb	r3, r3
 8018842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018846:	d103      	bne.n	8018850 <vQueueWaitForMessageRestricted+0x40>
 8018848:	697b      	ldr	r3, [r7, #20]
 801884a:	2200      	movs	r2, #0
 801884c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018850:	f001 fdc8 	bl	801a3e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018854:	697b      	ldr	r3, [r7, #20]
 8018856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018858:	2b00      	cmp	r3, #0
 801885a:	d106      	bne.n	801886a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801885c:	697b      	ldr	r3, [r7, #20]
 801885e:	3324      	adds	r3, #36	; 0x24
 8018860:	687a      	ldr	r2, [r7, #4]
 8018862:	68b9      	ldr	r1, [r7, #8]
 8018864:	4618      	mov	r0, r3
 8018866:	f000 fd4b 	bl	8019300 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801886a:	6978      	ldr	r0, [r7, #20]
 801886c:	f7ff ff26 	bl	80186bc <prvUnlockQueue>
	}
 8018870:	bf00      	nop
 8018872:	3718      	adds	r7, #24
 8018874:	46bd      	mov	sp, r7
 8018876:	bd80      	pop	{r7, pc}

08018878 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018878:	b580      	push	{r7, lr}
 801887a:	b08c      	sub	sp, #48	; 0x30
 801887c:	af04      	add	r7, sp, #16
 801887e:	60f8      	str	r0, [r7, #12]
 8018880:	60b9      	str	r1, [r7, #8]
 8018882:	603b      	str	r3, [r7, #0]
 8018884:	4613      	mov	r3, r2
 8018886:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018888:	88fb      	ldrh	r3, [r7, #6]
 801888a:	009b      	lsls	r3, r3, #2
 801888c:	4618      	mov	r0, r3
 801888e:	f001 fe9b 	bl	801a5c8 <pvPortMalloc>
 8018892:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018894:	697b      	ldr	r3, [r7, #20]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d00e      	beq.n	80188b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801889a:	2060      	movs	r0, #96	; 0x60
 801889c:	f001 fe94 	bl	801a5c8 <pvPortMalloc>
 80188a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80188a2:	69fb      	ldr	r3, [r7, #28]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d003      	beq.n	80188b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80188a8:	69fb      	ldr	r3, [r7, #28]
 80188aa:	697a      	ldr	r2, [r7, #20]
 80188ac:	631a      	str	r2, [r3, #48]	; 0x30
 80188ae:	e005      	b.n	80188bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80188b0:	6978      	ldr	r0, [r7, #20]
 80188b2:	f001 ff4d 	bl	801a750 <vPortFree>
 80188b6:	e001      	b.n	80188bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80188b8:	2300      	movs	r3, #0
 80188ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80188bc:	69fb      	ldr	r3, [r7, #28]
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d013      	beq.n	80188ea <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80188c2:	88fa      	ldrh	r2, [r7, #6]
 80188c4:	2300      	movs	r3, #0
 80188c6:	9303      	str	r3, [sp, #12]
 80188c8:	69fb      	ldr	r3, [r7, #28]
 80188ca:	9302      	str	r3, [sp, #8]
 80188cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188ce:	9301      	str	r3, [sp, #4]
 80188d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188d2:	9300      	str	r3, [sp, #0]
 80188d4:	683b      	ldr	r3, [r7, #0]
 80188d6:	68b9      	ldr	r1, [r7, #8]
 80188d8:	68f8      	ldr	r0, [r7, #12]
 80188da:	f000 f80e 	bl	80188fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80188de:	69f8      	ldr	r0, [r7, #28]
 80188e0:	f000 f89e 	bl	8018a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80188e4:	2301      	movs	r3, #1
 80188e6:	61bb      	str	r3, [r7, #24]
 80188e8:	e002      	b.n	80188f0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80188ea:	f04f 33ff 	mov.w	r3, #4294967295
 80188ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80188f0:	69bb      	ldr	r3, [r7, #24]
	}
 80188f2:	4618      	mov	r0, r3
 80188f4:	3720      	adds	r7, #32
 80188f6:	46bd      	mov	sp, r7
 80188f8:	bd80      	pop	{r7, pc}

080188fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80188fa:	b580      	push	{r7, lr}
 80188fc:	b088      	sub	sp, #32
 80188fe:	af00      	add	r7, sp, #0
 8018900:	60f8      	str	r0, [r7, #12]
 8018902:	60b9      	str	r1, [r7, #8]
 8018904:	607a      	str	r2, [r7, #4]
 8018906:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801890a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	009b      	lsls	r3, r3, #2
 8018910:	461a      	mov	r2, r3
 8018912:	21a5      	movs	r1, #165	; 0xa5
 8018914:	f005 fbde 	bl	801e0d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801891a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018922:	3b01      	subs	r3, #1
 8018924:	009b      	lsls	r3, r3, #2
 8018926:	4413      	add	r3, r2
 8018928:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801892a:	69bb      	ldr	r3, [r7, #24]
 801892c:	f023 0307 	bic.w	r3, r3, #7
 8018930:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018932:	69bb      	ldr	r3, [r7, #24]
 8018934:	f003 0307 	and.w	r3, r3, #7
 8018938:	2b00      	cmp	r3, #0
 801893a:	d00a      	beq.n	8018952 <prvInitialiseNewTask+0x58>
	__asm volatile
 801893c:	f04f 0320 	mov.w	r3, #32
 8018940:	f383 8811 	msr	BASEPRI, r3
 8018944:	f3bf 8f6f 	isb	sy
 8018948:	f3bf 8f4f 	dsb	sy
 801894c:	617b      	str	r3, [r7, #20]
}
 801894e:	bf00      	nop
 8018950:	e7fe      	b.n	8018950 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018952:	68bb      	ldr	r3, [r7, #8]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d01f      	beq.n	8018998 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018958:	2300      	movs	r3, #0
 801895a:	61fb      	str	r3, [r7, #28]
 801895c:	e012      	b.n	8018984 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801895e:	68ba      	ldr	r2, [r7, #8]
 8018960:	69fb      	ldr	r3, [r7, #28]
 8018962:	4413      	add	r3, r2
 8018964:	7819      	ldrb	r1, [r3, #0]
 8018966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018968:	69fb      	ldr	r3, [r7, #28]
 801896a:	4413      	add	r3, r2
 801896c:	3334      	adds	r3, #52	; 0x34
 801896e:	460a      	mov	r2, r1
 8018970:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018972:	68ba      	ldr	r2, [r7, #8]
 8018974:	69fb      	ldr	r3, [r7, #28]
 8018976:	4413      	add	r3, r2
 8018978:	781b      	ldrb	r3, [r3, #0]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d006      	beq.n	801898c <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801897e:	69fb      	ldr	r3, [r7, #28]
 8018980:	3301      	adds	r3, #1
 8018982:	61fb      	str	r3, [r7, #28]
 8018984:	69fb      	ldr	r3, [r7, #28]
 8018986:	2b0f      	cmp	r3, #15
 8018988:	d9e9      	bls.n	801895e <prvInitialiseNewTask+0x64>
 801898a:	e000      	b.n	801898e <prvInitialiseNewTask+0x94>
			{
				break;
 801898c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018990:	2200      	movs	r2, #0
 8018992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018996:	e003      	b.n	80189a0 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801899a:	2200      	movs	r2, #0
 801899c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80189a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189a2:	2b06      	cmp	r3, #6
 80189a4:	d901      	bls.n	80189aa <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80189a6:	2306      	movs	r3, #6
 80189a8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80189aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80189ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80189b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80189b4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80189b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189b8:	2200      	movs	r2, #0
 80189ba:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80189bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189be:	3304      	adds	r3, #4
 80189c0:	4618      	mov	r0, r3
 80189c2:	f7fe ffb5 	bl	8017930 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80189c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189c8:	3318      	adds	r3, #24
 80189ca:	4618      	mov	r0, r3
 80189cc:	f7fe ffb0 	bl	8017930 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80189d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80189d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80189d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189d8:	f1c3 0207 	rsb	r2, r3, #7
 80189dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80189e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80189e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80189e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189e8:	2200      	movs	r2, #0
 80189ea:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80189ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189ee:	2200      	movs	r2, #0
 80189f0:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80189f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189f4:	2200      	movs	r2, #0
 80189f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80189fa:	683a      	ldr	r2, [r7, #0]
 80189fc:	68f9      	ldr	r1, [r7, #12]
 80189fe:	69b8      	ldr	r0, [r7, #24]
 8018a00:	f001 fb92 	bl	801a128 <pxPortInitialiseStack>
 8018a04:	4602      	mov	r2, r0
 8018a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d002      	beq.n	8018a16 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018a16:	bf00      	nop
 8018a18:	3720      	adds	r7, #32
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bd80      	pop	{r7, pc}
	...

08018a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b082      	sub	sp, #8
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018a28:	f001 fcac 	bl	801a384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018a2c:	4b2c      	ldr	r3, [pc, #176]	; (8018ae0 <prvAddNewTaskToReadyList+0xc0>)
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	3301      	adds	r3, #1
 8018a32:	4a2b      	ldr	r2, [pc, #172]	; (8018ae0 <prvAddNewTaskToReadyList+0xc0>)
 8018a34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018a36:	4b2b      	ldr	r3, [pc, #172]	; (8018ae4 <prvAddNewTaskToReadyList+0xc4>)
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d109      	bne.n	8018a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018a3e:	4a29      	ldr	r2, [pc, #164]	; (8018ae4 <prvAddNewTaskToReadyList+0xc4>)
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018a44:	4b26      	ldr	r3, [pc, #152]	; (8018ae0 <prvAddNewTaskToReadyList+0xc0>)
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	2b01      	cmp	r3, #1
 8018a4a:	d110      	bne.n	8018a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018a4c:	f000 fd84 	bl	8019558 <prvInitialiseTaskLists>
 8018a50:	e00d      	b.n	8018a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018a52:	4b25      	ldr	r3, [pc, #148]	; (8018ae8 <prvAddNewTaskToReadyList+0xc8>)
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d109      	bne.n	8018a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018a5a:	4b22      	ldr	r3, [pc, #136]	; (8018ae4 <prvAddNewTaskToReadyList+0xc4>)
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a64:	429a      	cmp	r2, r3
 8018a66:	d802      	bhi.n	8018a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018a68:	4a1e      	ldr	r2, [pc, #120]	; (8018ae4 <prvAddNewTaskToReadyList+0xc4>)
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018a6e:	4b1f      	ldr	r3, [pc, #124]	; (8018aec <prvAddNewTaskToReadyList+0xcc>)
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	3301      	adds	r3, #1
 8018a74:	4a1d      	ldr	r2, [pc, #116]	; (8018aec <prvAddNewTaskToReadyList+0xcc>)
 8018a76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018a78:	4b1c      	ldr	r3, [pc, #112]	; (8018aec <prvAddNewTaskToReadyList+0xcc>)
 8018a7a:	681a      	ldr	r2, [r3, #0]
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a84:	2201      	movs	r2, #1
 8018a86:	409a      	lsls	r2, r3
 8018a88:	4b19      	ldr	r3, [pc, #100]	; (8018af0 <prvAddNewTaskToReadyList+0xd0>)
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	4313      	orrs	r3, r2
 8018a8e:	4a18      	ldr	r2, [pc, #96]	; (8018af0 <prvAddNewTaskToReadyList+0xd0>)
 8018a90:	6013      	str	r3, [r2, #0]
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a96:	4613      	mov	r3, r2
 8018a98:	009b      	lsls	r3, r3, #2
 8018a9a:	4413      	add	r3, r2
 8018a9c:	009b      	lsls	r3, r3, #2
 8018a9e:	4a15      	ldr	r2, [pc, #84]	; (8018af4 <prvAddNewTaskToReadyList+0xd4>)
 8018aa0:	441a      	add	r2, r3
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	3304      	adds	r3, #4
 8018aa6:	4619      	mov	r1, r3
 8018aa8:	4610      	mov	r0, r2
 8018aaa:	f7fe ff4e 	bl	801794a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018aae:	f001 fc99 	bl	801a3e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018ab2:	4b0d      	ldr	r3, [pc, #52]	; (8018ae8 <prvAddNewTaskToReadyList+0xc8>)
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d00e      	beq.n	8018ad8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018aba:	4b0a      	ldr	r3, [pc, #40]	; (8018ae4 <prvAddNewTaskToReadyList+0xc4>)
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ac4:	429a      	cmp	r2, r3
 8018ac6:	d207      	bcs.n	8018ad8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018ac8:	4b0b      	ldr	r3, [pc, #44]	; (8018af8 <prvAddNewTaskToReadyList+0xd8>)
 8018aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ace:	601a      	str	r2, [r3, #0]
 8018ad0:	f3bf 8f4f 	dsb	sy
 8018ad4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018ad8:	bf00      	nop
 8018ada:	3708      	adds	r7, #8
 8018adc:	46bd      	mov	sp, r7
 8018ade:	bd80      	pop	{r7, pc}
 8018ae0:	20003c28 	.word	0x20003c28
 8018ae4:	20003b28 	.word	0x20003b28
 8018ae8:	20003c34 	.word	0x20003c34
 8018aec:	20003c44 	.word	0x20003c44
 8018af0:	20003c30 	.word	0x20003c30
 8018af4:	20003b2c 	.word	0x20003b2c
 8018af8:	e000ed04 	.word	0xe000ed04

08018afc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8018afc:	b580      	push	{r7, lr}
 8018afe:	b084      	sub	sp, #16
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8018b04:	f001 fc3e 	bl	801a384 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d102      	bne.n	8018b14 <vTaskSuspend+0x18>
 8018b0e:	4b3c      	ldr	r3, [pc, #240]	; (8018c00 <vTaskSuspend+0x104>)
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	e000      	b.n	8018b16 <vTaskSuspend+0x1a>
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	3304      	adds	r3, #4
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	f7fe ff71 	bl	8017a04 <uxListRemove>
 8018b22:	4603      	mov	r3, r0
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d115      	bne.n	8018b54 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b2c:	4935      	ldr	r1, [pc, #212]	; (8018c04 <vTaskSuspend+0x108>)
 8018b2e:	4613      	mov	r3, r2
 8018b30:	009b      	lsls	r3, r3, #2
 8018b32:	4413      	add	r3, r2
 8018b34:	009b      	lsls	r3, r3, #2
 8018b36:	440b      	add	r3, r1
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d10a      	bne.n	8018b54 <vTaskSuspend+0x58>
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b42:	2201      	movs	r2, #1
 8018b44:	fa02 f303 	lsl.w	r3, r2, r3
 8018b48:	43da      	mvns	r2, r3
 8018b4a:	4b2f      	ldr	r3, [pc, #188]	; (8018c08 <vTaskSuspend+0x10c>)
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	4013      	ands	r3, r2
 8018b50:	4a2d      	ldr	r2, [pc, #180]	; (8018c08 <vTaskSuspend+0x10c>)
 8018b52:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d004      	beq.n	8018b66 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	3318      	adds	r3, #24
 8018b60:	4618      	mov	r0, r3
 8018b62:	f7fe ff4f 	bl	8017a04 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	3304      	adds	r3, #4
 8018b6a:	4619      	mov	r1, r3
 8018b6c:	4827      	ldr	r0, [pc, #156]	; (8018c0c <vTaskSuspend+0x110>)
 8018b6e:	f7fe feec 	bl	801794a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8018b78:	b2db      	uxtb	r3, r3
 8018b7a:	2b01      	cmp	r3, #1
 8018b7c:	d103      	bne.n	8018b86 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	2200      	movs	r2, #0
 8018b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8018b86:	f001 fc2d 	bl	801a3e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8018b8a:	4b21      	ldr	r3, [pc, #132]	; (8018c10 <vTaskSuspend+0x114>)
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d005      	beq.n	8018b9e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8018b92:	f001 fbf7 	bl	801a384 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8018b96:	f000 fd5d 	bl	8019654 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8018b9a:	f001 fc23 	bl	801a3e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8018b9e:	4b18      	ldr	r3, [pc, #96]	; (8018c00 <vTaskSuspend+0x104>)
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	68fa      	ldr	r2, [r7, #12]
 8018ba4:	429a      	cmp	r2, r3
 8018ba6:	d127      	bne.n	8018bf8 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8018ba8:	4b19      	ldr	r3, [pc, #100]	; (8018c10 <vTaskSuspend+0x114>)
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d017      	beq.n	8018be0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8018bb0:	4b18      	ldr	r3, [pc, #96]	; (8018c14 <vTaskSuspend+0x118>)
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d00a      	beq.n	8018bce <vTaskSuspend+0xd2>
	__asm volatile
 8018bb8:	f04f 0320 	mov.w	r3, #32
 8018bbc:	f383 8811 	msr	BASEPRI, r3
 8018bc0:	f3bf 8f6f 	isb	sy
 8018bc4:	f3bf 8f4f 	dsb	sy
 8018bc8:	60bb      	str	r3, [r7, #8]
}
 8018bca:	bf00      	nop
 8018bcc:	e7fe      	b.n	8018bcc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8018bce:	4b12      	ldr	r3, [pc, #72]	; (8018c18 <vTaskSuspend+0x11c>)
 8018bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018bd4:	601a      	str	r2, [r3, #0]
 8018bd6:	f3bf 8f4f 	dsb	sy
 8018bda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018bde:	e00b      	b.n	8018bf8 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8018be0:	4b0a      	ldr	r3, [pc, #40]	; (8018c0c <vTaskSuspend+0x110>)
 8018be2:	681a      	ldr	r2, [r3, #0]
 8018be4:	4b0d      	ldr	r3, [pc, #52]	; (8018c1c <vTaskSuspend+0x120>)
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	429a      	cmp	r2, r3
 8018bea:	d103      	bne.n	8018bf4 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8018bec:	4b04      	ldr	r3, [pc, #16]	; (8018c00 <vTaskSuspend+0x104>)
 8018bee:	2200      	movs	r2, #0
 8018bf0:	601a      	str	r2, [r3, #0]
	}
 8018bf2:	e001      	b.n	8018bf8 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8018bf4:	f000 fafa 	bl	80191ec <vTaskSwitchContext>
	}
 8018bf8:	bf00      	nop
 8018bfa:	3710      	adds	r7, #16
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	bd80      	pop	{r7, pc}
 8018c00:	20003b28 	.word	0x20003b28
 8018c04:	20003b2c 	.word	0x20003b2c
 8018c08:	20003c30 	.word	0x20003c30
 8018c0c:	20003c14 	.word	0x20003c14
 8018c10:	20003c34 	.word	0x20003c34
 8018c14:	20003c50 	.word	0x20003c50
 8018c18:	e000ed04 	.word	0xe000ed04
 8018c1c:	20003c28 	.word	0x20003c28

08018c20 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8018c20:	b480      	push	{r7}
 8018c22:	b087      	sub	sp, #28
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d10a      	bne.n	8018c4c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8018c36:	f04f 0320 	mov.w	r3, #32
 8018c3a:	f383 8811 	msr	BASEPRI, r3
 8018c3e:	f3bf 8f6f 	isb	sy
 8018c42:	f3bf 8f4f 	dsb	sy
 8018c46:	60fb      	str	r3, [r7, #12]
}
 8018c48:	bf00      	nop
 8018c4a:	e7fe      	b.n	8018c4a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018c4c:	693b      	ldr	r3, [r7, #16]
 8018c4e:	695b      	ldr	r3, [r3, #20]
 8018c50:	4a0a      	ldr	r2, [pc, #40]	; (8018c7c <prvTaskIsTaskSuspended+0x5c>)
 8018c52:	4293      	cmp	r3, r2
 8018c54:	d10a      	bne.n	8018c6c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8018c56:	693b      	ldr	r3, [r7, #16]
 8018c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c5a:	4a09      	ldr	r2, [pc, #36]	; (8018c80 <prvTaskIsTaskSuspended+0x60>)
 8018c5c:	4293      	cmp	r3, r2
 8018c5e:	d005      	beq.n	8018c6c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8018c60:	693b      	ldr	r3, [r7, #16]
 8018c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d101      	bne.n	8018c6c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8018c68:	2301      	movs	r3, #1
 8018c6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c6c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018c6e:	4618      	mov	r0, r3
 8018c70:	371c      	adds	r7, #28
 8018c72:	46bd      	mov	sp, r7
 8018c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c78:	4770      	bx	lr
 8018c7a:	bf00      	nop
 8018c7c:	20003c14 	.word	0x20003c14
 8018c80:	20003be8 	.word	0x20003be8

08018c84 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b084      	sub	sp, #16
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d10a      	bne.n	8018cac <vTaskResume+0x28>
	__asm volatile
 8018c96:	f04f 0320 	mov.w	r3, #32
 8018c9a:	f383 8811 	msr	BASEPRI, r3
 8018c9e:	f3bf 8f6f 	isb	sy
 8018ca2:	f3bf 8f4f 	dsb	sy
 8018ca6:	60bb      	str	r3, [r7, #8]
}
 8018ca8:	bf00      	nop
 8018caa:	e7fe      	b.n	8018caa <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8018cac:	4b20      	ldr	r3, [pc, #128]	; (8018d30 <vTaskResume+0xac>)
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	68fa      	ldr	r2, [r7, #12]
 8018cb2:	429a      	cmp	r2, r3
 8018cb4:	d037      	beq.n	8018d26 <vTaskResume+0xa2>
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d034      	beq.n	8018d26 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8018cbc:	f001 fb62 	bl	801a384 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018cc0:	68f8      	ldr	r0, [r7, #12]
 8018cc2:	f7ff ffad 	bl	8018c20 <prvTaskIsTaskSuspended>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d02a      	beq.n	8018d22 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8018ccc:	68fb      	ldr	r3, [r7, #12]
 8018cce:	3304      	adds	r3, #4
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f7fe fe97 	bl	8017a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cda:	2201      	movs	r2, #1
 8018cdc:	409a      	lsls	r2, r3
 8018cde:	4b15      	ldr	r3, [pc, #84]	; (8018d34 <vTaskResume+0xb0>)
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	4313      	orrs	r3, r2
 8018ce4:	4a13      	ldr	r2, [pc, #76]	; (8018d34 <vTaskResume+0xb0>)
 8018ce6:	6013      	str	r3, [r2, #0]
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cec:	4613      	mov	r3, r2
 8018cee:	009b      	lsls	r3, r3, #2
 8018cf0:	4413      	add	r3, r2
 8018cf2:	009b      	lsls	r3, r3, #2
 8018cf4:	4a10      	ldr	r2, [pc, #64]	; (8018d38 <vTaskResume+0xb4>)
 8018cf6:	441a      	add	r2, r3
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	3304      	adds	r3, #4
 8018cfc:	4619      	mov	r1, r3
 8018cfe:	4610      	mov	r0, r2
 8018d00:	f7fe fe23 	bl	801794a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d08:	4b09      	ldr	r3, [pc, #36]	; (8018d30 <vTaskResume+0xac>)
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d0e:	429a      	cmp	r2, r3
 8018d10:	d307      	bcc.n	8018d22 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8018d12:	4b0a      	ldr	r3, [pc, #40]	; (8018d3c <vTaskResume+0xb8>)
 8018d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d18:	601a      	str	r2, [r3, #0]
 8018d1a:	f3bf 8f4f 	dsb	sy
 8018d1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8018d22:	f001 fb5f 	bl	801a3e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018d26:	bf00      	nop
 8018d28:	3710      	adds	r7, #16
 8018d2a:	46bd      	mov	sp, r7
 8018d2c:	bd80      	pop	{r7, pc}
 8018d2e:	bf00      	nop
 8018d30:	20003b28 	.word	0x20003b28
 8018d34:	20003c30 	.word	0x20003c30
 8018d38:	20003b2c 	.word	0x20003b2c
 8018d3c:	e000ed04 	.word	0xe000ed04

08018d40 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b08a      	sub	sp, #40	; 0x28
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8018d48:	2300      	movs	r3, #0
 8018d4a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d10a      	bne.n	8018d6c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8018d56:	f04f 0320 	mov.w	r3, #32
 8018d5a:	f383 8811 	msr	BASEPRI, r3
 8018d5e:	f3bf 8f6f 	isb	sy
 8018d62:	f3bf 8f4f 	dsb	sy
 8018d66:	61bb      	str	r3, [r7, #24]
}
 8018d68:	bf00      	nop
 8018d6a:	e7fe      	b.n	8018d6a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018d6c:	f001 fbec 	bl	801a548 <vPortValidateInterruptPriority>
	__asm volatile
 8018d70:	f3ef 8211 	mrs	r2, BASEPRI
 8018d74:	f04f 0320 	mov.w	r3, #32
 8018d78:	f383 8811 	msr	BASEPRI, r3
 8018d7c:	f3bf 8f6f 	isb	sy
 8018d80:	f3bf 8f4f 	dsb	sy
 8018d84:	617a      	str	r2, [r7, #20]
 8018d86:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018d88:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018d8a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018d8c:	6a38      	ldr	r0, [r7, #32]
 8018d8e:	f7ff ff47 	bl	8018c20 <prvTaskIsTaskSuspended>
 8018d92:	4603      	mov	r3, r0
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d02f      	beq.n	8018df8 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018d98:	4b1d      	ldr	r3, [pc, #116]	; (8018e10 <xTaskResumeFromISR+0xd0>)
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d125      	bne.n	8018dec <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018da0:	6a3b      	ldr	r3, [r7, #32]
 8018da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018da4:	4b1b      	ldr	r3, [pc, #108]	; (8018e14 <xTaskResumeFromISR+0xd4>)
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018daa:	429a      	cmp	r2, r3
 8018dac:	d301      	bcc.n	8018db2 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8018dae:	2301      	movs	r3, #1
 8018db0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018db2:	6a3b      	ldr	r3, [r7, #32]
 8018db4:	3304      	adds	r3, #4
 8018db6:	4618      	mov	r0, r3
 8018db8:	f7fe fe24 	bl	8017a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018dbc:	6a3b      	ldr	r3, [r7, #32]
 8018dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dc0:	2201      	movs	r2, #1
 8018dc2:	409a      	lsls	r2, r3
 8018dc4:	4b14      	ldr	r3, [pc, #80]	; (8018e18 <xTaskResumeFromISR+0xd8>)
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	4313      	orrs	r3, r2
 8018dca:	4a13      	ldr	r2, [pc, #76]	; (8018e18 <xTaskResumeFromISR+0xd8>)
 8018dcc:	6013      	str	r3, [r2, #0]
 8018dce:	6a3b      	ldr	r3, [r7, #32]
 8018dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018dd2:	4613      	mov	r3, r2
 8018dd4:	009b      	lsls	r3, r3, #2
 8018dd6:	4413      	add	r3, r2
 8018dd8:	009b      	lsls	r3, r3, #2
 8018dda:	4a10      	ldr	r2, [pc, #64]	; (8018e1c <xTaskResumeFromISR+0xdc>)
 8018ddc:	441a      	add	r2, r3
 8018dde:	6a3b      	ldr	r3, [r7, #32]
 8018de0:	3304      	adds	r3, #4
 8018de2:	4619      	mov	r1, r3
 8018de4:	4610      	mov	r0, r2
 8018de6:	f7fe fdb0 	bl	801794a <vListInsertEnd>
 8018dea:	e005      	b.n	8018df8 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8018dec:	6a3b      	ldr	r3, [r7, #32]
 8018dee:	3318      	adds	r3, #24
 8018df0:	4619      	mov	r1, r3
 8018df2:	480b      	ldr	r0, [pc, #44]	; (8018e20 <xTaskResumeFromISR+0xe0>)
 8018df4:	f7fe fda9 	bl	801794a <vListInsertEnd>
 8018df8:	69fb      	ldr	r3, [r7, #28]
 8018dfa:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	f383 8811 	msr	BASEPRI, r3
}
 8018e02:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8018e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8018e06:	4618      	mov	r0, r3
 8018e08:	3728      	adds	r7, #40	; 0x28
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	bd80      	pop	{r7, pc}
 8018e0e:	bf00      	nop
 8018e10:	20003c50 	.word	0x20003c50
 8018e14:	20003b28 	.word	0x20003b28
 8018e18:	20003c30 	.word	0x20003c30
 8018e1c:	20003b2c 	.word	0x20003b2c
 8018e20:	20003be8 	.word	0x20003be8

08018e24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b086      	sub	sp, #24
 8018e28:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8018e2a:	4b22      	ldr	r3, [pc, #136]	; (8018eb4 <vTaskStartScheduler+0x90>)
 8018e2c:	9301      	str	r3, [sp, #4]
 8018e2e:	2300      	movs	r3, #0
 8018e30:	9300      	str	r3, [sp, #0]
 8018e32:	2300      	movs	r3, #0
 8018e34:	2280      	movs	r2, #128	; 0x80
 8018e36:	4920      	ldr	r1, [pc, #128]	; (8018eb8 <vTaskStartScheduler+0x94>)
 8018e38:	4820      	ldr	r0, [pc, #128]	; (8018ebc <vTaskStartScheduler+0x98>)
 8018e3a:	f7ff fd1d 	bl	8018878 <xTaskCreate>
 8018e3e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	2b01      	cmp	r3, #1
 8018e44:	d102      	bne.n	8018e4c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8018e46:	f000 fe5d 	bl	8019b04 <xTimerCreateTimerTask>
 8018e4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	2b01      	cmp	r3, #1
 8018e50:	d11c      	bne.n	8018e8c <vTaskStartScheduler+0x68>
	__asm volatile
 8018e52:	f04f 0320 	mov.w	r3, #32
 8018e56:	f383 8811 	msr	BASEPRI, r3
 8018e5a:	f3bf 8f6f 	isb	sy
 8018e5e:	f3bf 8f4f 	dsb	sy
 8018e62:	60bb      	str	r3, [r7, #8]
}
 8018e64:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018e66:	4b16      	ldr	r3, [pc, #88]	; (8018ec0 <vTaskStartScheduler+0x9c>)
 8018e68:	f04f 32ff 	mov.w	r2, #4294967295
 8018e6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018e6e:	4b15      	ldr	r3, [pc, #84]	; (8018ec4 <vTaskStartScheduler+0xa0>)
 8018e70:	2201      	movs	r2, #1
 8018e72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018e74:	4b14      	ldr	r3, [pc, #80]	; (8018ec8 <vTaskStartScheduler+0xa4>)
 8018e76:	2200      	movs	r2, #0
 8018e78:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8018e7a:	4b14      	ldr	r3, [pc, #80]	; (8018ecc <vTaskStartScheduler+0xa8>)
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e80:	4618      	mov	r0, r3
 8018e82:	f7ed fa8b 	bl	800639c <BSP_DEBUG_PIN_On>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018e86:	f001 f9db 	bl	801a240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018e8a:	e00e      	b.n	8018eaa <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e92:	d10a      	bne.n	8018eaa <vTaskStartScheduler+0x86>
	__asm volatile
 8018e94:	f04f 0320 	mov.w	r3, #32
 8018e98:	f383 8811 	msr	BASEPRI, r3
 8018e9c:	f3bf 8f6f 	isb	sy
 8018ea0:	f3bf 8f4f 	dsb	sy
 8018ea4:	607b      	str	r3, [r7, #4]
}
 8018ea6:	bf00      	nop
 8018ea8:	e7fe      	b.n	8018ea8 <vTaskStartScheduler+0x84>
}
 8018eaa:	bf00      	nop
 8018eac:	3710      	adds	r7, #16
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	bd80      	pop	{r7, pc}
 8018eb2:	bf00      	nop
 8018eb4:	20003c4c 	.word	0x20003c4c
 8018eb8:	080227a8 	.word	0x080227a8
 8018ebc:	08019525 	.word	0x08019525
 8018ec0:	20003c48 	.word	0x20003c48
 8018ec4:	20003c34 	.word	0x20003c34
 8018ec8:	20003c2c 	.word	0x20003c2c
 8018ecc:	20003b28 	.word	0x20003b28

08018ed0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018ed0:	b480      	push	{r7}
 8018ed2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8018ed4:	4b04      	ldr	r3, [pc, #16]	; (8018ee8 <vTaskSuspendAll+0x18>)
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	3301      	adds	r3, #1
 8018eda:	4a03      	ldr	r2, [pc, #12]	; (8018ee8 <vTaskSuspendAll+0x18>)
 8018edc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8018ede:	bf00      	nop
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ee6:	4770      	bx	lr
 8018ee8:	20003c50 	.word	0x20003c50

08018eec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018eec:	b580      	push	{r7, lr}
 8018eee:	b084      	sub	sp, #16
 8018ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018efa:	4b41      	ldr	r3, [pc, #260]	; (8019000 <xTaskResumeAll+0x114>)
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d10a      	bne.n	8018f18 <xTaskResumeAll+0x2c>
	__asm volatile
 8018f02:	f04f 0320 	mov.w	r3, #32
 8018f06:	f383 8811 	msr	BASEPRI, r3
 8018f0a:	f3bf 8f6f 	isb	sy
 8018f0e:	f3bf 8f4f 	dsb	sy
 8018f12:	603b      	str	r3, [r7, #0]
}
 8018f14:	bf00      	nop
 8018f16:	e7fe      	b.n	8018f16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018f18:	f001 fa34 	bl	801a384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018f1c:	4b38      	ldr	r3, [pc, #224]	; (8019000 <xTaskResumeAll+0x114>)
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	3b01      	subs	r3, #1
 8018f22:	4a37      	ldr	r2, [pc, #220]	; (8019000 <xTaskResumeAll+0x114>)
 8018f24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018f26:	4b36      	ldr	r3, [pc, #216]	; (8019000 <xTaskResumeAll+0x114>)
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d161      	bne.n	8018ff2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018f2e:	4b35      	ldr	r3, [pc, #212]	; (8019004 <xTaskResumeAll+0x118>)
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d05d      	beq.n	8018ff2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018f36:	e02e      	b.n	8018f96 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f38:	4b33      	ldr	r3, [pc, #204]	; (8019008 <xTaskResumeAll+0x11c>)
 8018f3a:	68db      	ldr	r3, [r3, #12]
 8018f3c:	68db      	ldr	r3, [r3, #12]
 8018f3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	3318      	adds	r3, #24
 8018f44:	4618      	mov	r0, r3
 8018f46:	f7fe fd5d 	bl	8017a04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	3304      	adds	r3, #4
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f7fe fd58 	bl	8017a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f58:	2201      	movs	r2, #1
 8018f5a:	409a      	lsls	r2, r3
 8018f5c:	4b2b      	ldr	r3, [pc, #172]	; (801900c <xTaskResumeAll+0x120>)
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	4313      	orrs	r3, r2
 8018f62:	4a2a      	ldr	r2, [pc, #168]	; (801900c <xTaskResumeAll+0x120>)
 8018f64:	6013      	str	r3, [r2, #0]
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f6a:	4613      	mov	r3, r2
 8018f6c:	009b      	lsls	r3, r3, #2
 8018f6e:	4413      	add	r3, r2
 8018f70:	009b      	lsls	r3, r3, #2
 8018f72:	4a27      	ldr	r2, [pc, #156]	; (8019010 <xTaskResumeAll+0x124>)
 8018f74:	441a      	add	r2, r3
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	3304      	adds	r3, #4
 8018f7a:	4619      	mov	r1, r3
 8018f7c:	4610      	mov	r0, r2
 8018f7e:	f7fe fce4 	bl	801794a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f86:	4b23      	ldr	r3, [pc, #140]	; (8019014 <xTaskResumeAll+0x128>)
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f8c:	429a      	cmp	r2, r3
 8018f8e:	d302      	bcc.n	8018f96 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8018f90:	4b21      	ldr	r3, [pc, #132]	; (8019018 <xTaskResumeAll+0x12c>)
 8018f92:	2201      	movs	r2, #1
 8018f94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018f96:	4b1c      	ldr	r3, [pc, #112]	; (8019008 <xTaskResumeAll+0x11c>)
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d1cc      	bne.n	8018f38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d001      	beq.n	8018fa8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018fa4:	f000 fb56 	bl	8019654 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8018fa8:	4b1c      	ldr	r3, [pc, #112]	; (801901c <xTaskResumeAll+0x130>)
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d010      	beq.n	8018fd6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018fb4:	f000 f846 	bl	8019044 <xTaskIncrementTick>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d002      	beq.n	8018fc4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8018fbe:	4b16      	ldr	r3, [pc, #88]	; (8019018 <xTaskResumeAll+0x12c>)
 8018fc0:	2201      	movs	r2, #1
 8018fc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	3b01      	subs	r3, #1
 8018fc8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d1f1      	bne.n	8018fb4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8018fd0:	4b12      	ldr	r3, [pc, #72]	; (801901c <xTaskResumeAll+0x130>)
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018fd6:	4b10      	ldr	r3, [pc, #64]	; (8019018 <xTaskResumeAll+0x12c>)
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d009      	beq.n	8018ff2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018fde:	2301      	movs	r3, #1
 8018fe0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018fe2:	4b0f      	ldr	r3, [pc, #60]	; (8019020 <xTaskResumeAll+0x134>)
 8018fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018fe8:	601a      	str	r2, [r3, #0]
 8018fea:	f3bf 8f4f 	dsb	sy
 8018fee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018ff2:	f001 f9f7 	bl	801a3e4 <vPortExitCritical>

	return xAlreadyYielded;
 8018ff6:	68bb      	ldr	r3, [r7, #8]
}
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	3710      	adds	r7, #16
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	bd80      	pop	{r7, pc}
 8019000:	20003c50 	.word	0x20003c50
 8019004:	20003c28 	.word	0x20003c28
 8019008:	20003be8 	.word	0x20003be8
 801900c:	20003c30 	.word	0x20003c30
 8019010:	20003b2c 	.word	0x20003b2c
 8019014:	20003b28 	.word	0x20003b28
 8019018:	20003c3c 	.word	0x20003c3c
 801901c:	20003c38 	.word	0x20003c38
 8019020:	e000ed04 	.word	0xe000ed04

08019024 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019024:	b480      	push	{r7}
 8019026:	b083      	sub	sp, #12
 8019028:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801902a:	4b05      	ldr	r3, [pc, #20]	; (8019040 <xTaskGetTickCount+0x1c>)
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8019030:	687b      	ldr	r3, [r7, #4]
}
 8019032:	4618      	mov	r0, r3
 8019034:	370c      	adds	r7, #12
 8019036:	46bd      	mov	sp, r7
 8019038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903c:	4770      	bx	lr
 801903e:	bf00      	nop
 8019040:	20003c2c 	.word	0x20003c2c

08019044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019044:	b580      	push	{r7, lr}
 8019046:	b086      	sub	sp, #24
 8019048:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801904a:	2300      	movs	r3, #0
 801904c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801904e:	4b4e      	ldr	r3, [pc, #312]	; (8019188 <xTaskIncrementTick+0x144>)
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	2b00      	cmp	r3, #0
 8019054:	f040 8088 	bne.w	8019168 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019058:	4b4c      	ldr	r3, [pc, #304]	; (801918c <xTaskIncrementTick+0x148>)
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	3301      	adds	r3, #1
 801905e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019060:	4a4a      	ldr	r2, [pc, #296]	; (801918c <xTaskIncrementTick+0x148>)
 8019062:	693b      	ldr	r3, [r7, #16]
 8019064:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019066:	693b      	ldr	r3, [r7, #16]
 8019068:	2b00      	cmp	r3, #0
 801906a:	d120      	bne.n	80190ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801906c:	4b48      	ldr	r3, [pc, #288]	; (8019190 <xTaskIncrementTick+0x14c>)
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d00a      	beq.n	801908c <xTaskIncrementTick+0x48>
	__asm volatile
 8019076:	f04f 0320 	mov.w	r3, #32
 801907a:	f383 8811 	msr	BASEPRI, r3
 801907e:	f3bf 8f6f 	isb	sy
 8019082:	f3bf 8f4f 	dsb	sy
 8019086:	603b      	str	r3, [r7, #0]
}
 8019088:	bf00      	nop
 801908a:	e7fe      	b.n	801908a <xTaskIncrementTick+0x46>
 801908c:	4b40      	ldr	r3, [pc, #256]	; (8019190 <xTaskIncrementTick+0x14c>)
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	60fb      	str	r3, [r7, #12]
 8019092:	4b40      	ldr	r3, [pc, #256]	; (8019194 <xTaskIncrementTick+0x150>)
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	4a3e      	ldr	r2, [pc, #248]	; (8019190 <xTaskIncrementTick+0x14c>)
 8019098:	6013      	str	r3, [r2, #0]
 801909a:	4a3e      	ldr	r2, [pc, #248]	; (8019194 <xTaskIncrementTick+0x150>)
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	6013      	str	r3, [r2, #0]
 80190a0:	4b3d      	ldr	r3, [pc, #244]	; (8019198 <xTaskIncrementTick+0x154>)
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	3301      	adds	r3, #1
 80190a6:	4a3c      	ldr	r2, [pc, #240]	; (8019198 <xTaskIncrementTick+0x154>)
 80190a8:	6013      	str	r3, [r2, #0]
 80190aa:	f000 fad3 	bl	8019654 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80190ae:	4b3b      	ldr	r3, [pc, #236]	; (801919c <xTaskIncrementTick+0x158>)
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	693a      	ldr	r2, [r7, #16]
 80190b4:	429a      	cmp	r2, r3
 80190b6:	d348      	bcc.n	801914a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80190b8:	4b35      	ldr	r3, [pc, #212]	; (8019190 <xTaskIncrementTick+0x14c>)
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d104      	bne.n	80190cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80190c2:	4b36      	ldr	r3, [pc, #216]	; (801919c <xTaskIncrementTick+0x158>)
 80190c4:	f04f 32ff 	mov.w	r2, #4294967295
 80190c8:	601a      	str	r2, [r3, #0]
					break;
 80190ca:	e03e      	b.n	801914a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80190cc:	4b30      	ldr	r3, [pc, #192]	; (8019190 <xTaskIncrementTick+0x14c>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	68db      	ldr	r3, [r3, #12]
 80190d2:	68db      	ldr	r3, [r3, #12]
 80190d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80190d6:	68bb      	ldr	r3, [r7, #8]
 80190d8:	685b      	ldr	r3, [r3, #4]
 80190da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80190dc:	693a      	ldr	r2, [r7, #16]
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	429a      	cmp	r2, r3
 80190e2:	d203      	bcs.n	80190ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80190e4:	4a2d      	ldr	r2, [pc, #180]	; (801919c <xTaskIncrementTick+0x158>)
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80190ea:	e02e      	b.n	801914a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80190ec:	68bb      	ldr	r3, [r7, #8]
 80190ee:	3304      	adds	r3, #4
 80190f0:	4618      	mov	r0, r3
 80190f2:	f7fe fc87 	bl	8017a04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80190f6:	68bb      	ldr	r3, [r7, #8]
 80190f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d004      	beq.n	8019108 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80190fe:	68bb      	ldr	r3, [r7, #8]
 8019100:	3318      	adds	r3, #24
 8019102:	4618      	mov	r0, r3
 8019104:	f7fe fc7e 	bl	8017a04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019108:	68bb      	ldr	r3, [r7, #8]
 801910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801910c:	2201      	movs	r2, #1
 801910e:	409a      	lsls	r2, r3
 8019110:	4b23      	ldr	r3, [pc, #140]	; (80191a0 <xTaskIncrementTick+0x15c>)
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	4313      	orrs	r3, r2
 8019116:	4a22      	ldr	r2, [pc, #136]	; (80191a0 <xTaskIncrementTick+0x15c>)
 8019118:	6013      	str	r3, [r2, #0]
 801911a:	68bb      	ldr	r3, [r7, #8]
 801911c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801911e:	4613      	mov	r3, r2
 8019120:	009b      	lsls	r3, r3, #2
 8019122:	4413      	add	r3, r2
 8019124:	009b      	lsls	r3, r3, #2
 8019126:	4a1f      	ldr	r2, [pc, #124]	; (80191a4 <xTaskIncrementTick+0x160>)
 8019128:	441a      	add	r2, r3
 801912a:	68bb      	ldr	r3, [r7, #8]
 801912c:	3304      	adds	r3, #4
 801912e:	4619      	mov	r1, r3
 8019130:	4610      	mov	r0, r2
 8019132:	f7fe fc0a 	bl	801794a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019136:	68bb      	ldr	r3, [r7, #8]
 8019138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801913a:	4b1b      	ldr	r3, [pc, #108]	; (80191a8 <xTaskIncrementTick+0x164>)
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019140:	429a      	cmp	r2, r3
 8019142:	d3b9      	bcc.n	80190b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8019144:	2301      	movs	r3, #1
 8019146:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019148:	e7b6      	b.n	80190b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801914a:	4b17      	ldr	r3, [pc, #92]	; (80191a8 <xTaskIncrementTick+0x164>)
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019150:	4914      	ldr	r1, [pc, #80]	; (80191a4 <xTaskIncrementTick+0x160>)
 8019152:	4613      	mov	r3, r2
 8019154:	009b      	lsls	r3, r3, #2
 8019156:	4413      	add	r3, r2
 8019158:	009b      	lsls	r3, r3, #2
 801915a:	440b      	add	r3, r1
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	2b01      	cmp	r3, #1
 8019160:	d907      	bls.n	8019172 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8019162:	2301      	movs	r3, #1
 8019164:	617b      	str	r3, [r7, #20]
 8019166:	e004      	b.n	8019172 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8019168:	4b10      	ldr	r3, [pc, #64]	; (80191ac <xTaskIncrementTick+0x168>)
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	3301      	adds	r3, #1
 801916e:	4a0f      	ldr	r2, [pc, #60]	; (80191ac <xTaskIncrementTick+0x168>)
 8019170:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8019172:	4b0f      	ldr	r3, [pc, #60]	; (80191b0 <xTaskIncrementTick+0x16c>)
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d001      	beq.n	801917e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801917a:	2301      	movs	r3, #1
 801917c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801917e:	697b      	ldr	r3, [r7, #20]
}
 8019180:	4618      	mov	r0, r3
 8019182:	3718      	adds	r7, #24
 8019184:	46bd      	mov	sp, r7
 8019186:	bd80      	pop	{r7, pc}
 8019188:	20003c50 	.word	0x20003c50
 801918c:	20003c2c 	.word	0x20003c2c
 8019190:	20003be0 	.word	0x20003be0
 8019194:	20003be4 	.word	0x20003be4
 8019198:	20003c40 	.word	0x20003c40
 801919c:	20003c48 	.word	0x20003c48
 80191a0:	20003c30 	.word	0x20003c30
 80191a4:	20003b2c 	.word	0x20003b2c
 80191a8:	20003b28 	.word	0x20003b28
 80191ac:	20003c38 	.word	0x20003c38
 80191b0:	20003c3c 	.word	0x20003c3c

080191b4 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b084      	sub	sp, #16
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
 80191bc:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d103      	bne.n	80191cc <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80191c4:	4b08      	ldr	r3, [pc, #32]	; (80191e8 <vTaskSetApplicationTaskTag+0x34>)
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	60fb      	str	r3, [r7, #12]
 80191ca:	e001      	b.n	80191d0 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 80191d0:	f001 f8d8 	bl	801a384 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	683a      	ldr	r2, [r7, #0]
 80191d8:	655a      	str	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80191da:	f001 f903 	bl	801a3e4 <vPortExitCritical>
	}
 80191de:	bf00      	nop
 80191e0:	3710      	adds	r7, #16
 80191e2:	46bd      	mov	sp, r7
 80191e4:	bd80      	pop	{r7, pc}
 80191e6:	bf00      	nop
 80191e8:	20003b28 	.word	0x20003b28

080191ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b086      	sub	sp, #24
 80191f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80191f2:	4b2c      	ldr	r3, [pc, #176]	; (80192a4 <vTaskSwitchContext+0xb8>)
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d003      	beq.n	8019202 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80191fa:	4b2b      	ldr	r3, [pc, #172]	; (80192a8 <vTaskSwitchContext+0xbc>)
 80191fc:	2201      	movs	r2, #1
 80191fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019200:	e04b      	b.n	801929a <vTaskSwitchContext+0xae>
		xYieldPending = pdFALSE;
 8019202:	4b29      	ldr	r3, [pc, #164]	; (80192a8 <vTaskSwitchContext+0xbc>)
 8019204:	2200      	movs	r2, #0
 8019206:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8019208:	4b28      	ldr	r3, [pc, #160]	; (80192ac <vTaskSwitchContext+0xc0>)
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801920e:	4618      	mov	r0, r3
 8019210:	f7ed f8de 	bl	80063d0 <BSP_DEBUG_PIN_Off>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019214:	4b26      	ldr	r3, [pc, #152]	; (80192b0 <vTaskSwitchContext+0xc4>)
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	fab3 f383 	clz	r3, r3
 8019220:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8019222:	7afb      	ldrb	r3, [r7, #11]
 8019224:	f1c3 031f 	rsb	r3, r3, #31
 8019228:	617b      	str	r3, [r7, #20]
 801922a:	4922      	ldr	r1, [pc, #136]	; (80192b4 <vTaskSwitchContext+0xc8>)
 801922c:	697a      	ldr	r2, [r7, #20]
 801922e:	4613      	mov	r3, r2
 8019230:	009b      	lsls	r3, r3, #2
 8019232:	4413      	add	r3, r2
 8019234:	009b      	lsls	r3, r3, #2
 8019236:	440b      	add	r3, r1
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	2b00      	cmp	r3, #0
 801923c:	d10a      	bne.n	8019254 <vTaskSwitchContext+0x68>
	__asm volatile
 801923e:	f04f 0320 	mov.w	r3, #32
 8019242:	f383 8811 	msr	BASEPRI, r3
 8019246:	f3bf 8f6f 	isb	sy
 801924a:	f3bf 8f4f 	dsb	sy
 801924e:	607b      	str	r3, [r7, #4]
}
 8019250:	bf00      	nop
 8019252:	e7fe      	b.n	8019252 <vTaskSwitchContext+0x66>
 8019254:	697a      	ldr	r2, [r7, #20]
 8019256:	4613      	mov	r3, r2
 8019258:	009b      	lsls	r3, r3, #2
 801925a:	4413      	add	r3, r2
 801925c:	009b      	lsls	r3, r3, #2
 801925e:	4a15      	ldr	r2, [pc, #84]	; (80192b4 <vTaskSwitchContext+0xc8>)
 8019260:	4413      	add	r3, r2
 8019262:	613b      	str	r3, [r7, #16]
 8019264:	693b      	ldr	r3, [r7, #16]
 8019266:	685b      	ldr	r3, [r3, #4]
 8019268:	685a      	ldr	r2, [r3, #4]
 801926a:	693b      	ldr	r3, [r7, #16]
 801926c:	605a      	str	r2, [r3, #4]
 801926e:	693b      	ldr	r3, [r7, #16]
 8019270:	685a      	ldr	r2, [r3, #4]
 8019272:	693b      	ldr	r3, [r7, #16]
 8019274:	3308      	adds	r3, #8
 8019276:	429a      	cmp	r2, r3
 8019278:	d104      	bne.n	8019284 <vTaskSwitchContext+0x98>
 801927a:	693b      	ldr	r3, [r7, #16]
 801927c:	685b      	ldr	r3, [r3, #4]
 801927e:	685a      	ldr	r2, [r3, #4]
 8019280:	693b      	ldr	r3, [r7, #16]
 8019282:	605a      	str	r2, [r3, #4]
 8019284:	693b      	ldr	r3, [r7, #16]
 8019286:	685b      	ldr	r3, [r3, #4]
 8019288:	68db      	ldr	r3, [r3, #12]
 801928a:	4a08      	ldr	r2, [pc, #32]	; (80192ac <vTaskSwitchContext+0xc0>)
 801928c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801928e:	4b07      	ldr	r3, [pc, #28]	; (80192ac <vTaskSwitchContext+0xc0>)
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019294:	4618      	mov	r0, r3
 8019296:	f7ed f881 	bl	800639c <BSP_DEBUG_PIN_On>
}
 801929a:	bf00      	nop
 801929c:	3718      	adds	r7, #24
 801929e:	46bd      	mov	sp, r7
 80192a0:	bd80      	pop	{r7, pc}
 80192a2:	bf00      	nop
 80192a4:	20003c50 	.word	0x20003c50
 80192a8:	20003c3c 	.word	0x20003c3c
 80192ac:	20003b28 	.word	0x20003b28
 80192b0:	20003c30 	.word	0x20003c30
 80192b4:	20003b2c 	.word	0x20003b2c

080192b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b084      	sub	sp, #16
 80192bc:	af00      	add	r7, sp, #0
 80192be:	6078      	str	r0, [r7, #4]
 80192c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d10a      	bne.n	80192de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80192c8:	f04f 0320 	mov.w	r3, #32
 80192cc:	f383 8811 	msr	BASEPRI, r3
 80192d0:	f3bf 8f6f 	isb	sy
 80192d4:	f3bf 8f4f 	dsb	sy
 80192d8:	60fb      	str	r3, [r7, #12]
}
 80192da:	bf00      	nop
 80192dc:	e7fe      	b.n	80192dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80192de:	4b07      	ldr	r3, [pc, #28]	; (80192fc <vTaskPlaceOnEventList+0x44>)
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	3318      	adds	r3, #24
 80192e4:	4619      	mov	r1, r3
 80192e6:	6878      	ldr	r0, [r7, #4]
 80192e8:	f7fe fb53 	bl	8017992 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80192ec:	2101      	movs	r1, #1
 80192ee:	6838      	ldr	r0, [r7, #0]
 80192f0:	f000 fba2 	bl	8019a38 <prvAddCurrentTaskToDelayedList>
}
 80192f4:	bf00      	nop
 80192f6:	3710      	adds	r7, #16
 80192f8:	46bd      	mov	sp, r7
 80192fa:	bd80      	pop	{r7, pc}
 80192fc:	20003b28 	.word	0x20003b28

08019300 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019300:	b580      	push	{r7, lr}
 8019302:	b086      	sub	sp, #24
 8019304:	af00      	add	r7, sp, #0
 8019306:	60f8      	str	r0, [r7, #12]
 8019308:	60b9      	str	r1, [r7, #8]
 801930a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	2b00      	cmp	r3, #0
 8019310:	d10a      	bne.n	8019328 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8019312:	f04f 0320 	mov.w	r3, #32
 8019316:	f383 8811 	msr	BASEPRI, r3
 801931a:	f3bf 8f6f 	isb	sy
 801931e:	f3bf 8f4f 	dsb	sy
 8019322:	617b      	str	r3, [r7, #20]
}
 8019324:	bf00      	nop
 8019326:	e7fe      	b.n	8019326 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019328:	4b0a      	ldr	r3, [pc, #40]	; (8019354 <vTaskPlaceOnEventListRestricted+0x54>)
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	3318      	adds	r3, #24
 801932e:	4619      	mov	r1, r3
 8019330:	68f8      	ldr	r0, [r7, #12]
 8019332:	f7fe fb0a 	bl	801794a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d002      	beq.n	8019342 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801933c:	f04f 33ff 	mov.w	r3, #4294967295
 8019340:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019342:	6879      	ldr	r1, [r7, #4]
 8019344:	68b8      	ldr	r0, [r7, #8]
 8019346:	f000 fb77 	bl	8019a38 <prvAddCurrentTaskToDelayedList>
	}
 801934a:	bf00      	nop
 801934c:	3718      	adds	r7, #24
 801934e:	46bd      	mov	sp, r7
 8019350:	bd80      	pop	{r7, pc}
 8019352:	bf00      	nop
 8019354:	20003b28 	.word	0x20003b28

08019358 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019358:	b580      	push	{r7, lr}
 801935a:	b086      	sub	sp, #24
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	68db      	ldr	r3, [r3, #12]
 8019364:	68db      	ldr	r3, [r3, #12]
 8019366:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019368:	693b      	ldr	r3, [r7, #16]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d10a      	bne.n	8019384 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801936e:	f04f 0320 	mov.w	r3, #32
 8019372:	f383 8811 	msr	BASEPRI, r3
 8019376:	f3bf 8f6f 	isb	sy
 801937a:	f3bf 8f4f 	dsb	sy
 801937e:	60fb      	str	r3, [r7, #12]
}
 8019380:	bf00      	nop
 8019382:	e7fe      	b.n	8019382 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019384:	693b      	ldr	r3, [r7, #16]
 8019386:	3318      	adds	r3, #24
 8019388:	4618      	mov	r0, r3
 801938a:	f7fe fb3b 	bl	8017a04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801938e:	4b1d      	ldr	r3, [pc, #116]	; (8019404 <xTaskRemoveFromEventList+0xac>)
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	2b00      	cmp	r3, #0
 8019394:	d11c      	bne.n	80193d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019396:	693b      	ldr	r3, [r7, #16]
 8019398:	3304      	adds	r3, #4
 801939a:	4618      	mov	r0, r3
 801939c:	f7fe fb32 	bl	8017a04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80193a0:	693b      	ldr	r3, [r7, #16]
 80193a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193a4:	2201      	movs	r2, #1
 80193a6:	409a      	lsls	r2, r3
 80193a8:	4b17      	ldr	r3, [pc, #92]	; (8019408 <xTaskRemoveFromEventList+0xb0>)
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	4313      	orrs	r3, r2
 80193ae:	4a16      	ldr	r2, [pc, #88]	; (8019408 <xTaskRemoveFromEventList+0xb0>)
 80193b0:	6013      	str	r3, [r2, #0]
 80193b2:	693b      	ldr	r3, [r7, #16]
 80193b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193b6:	4613      	mov	r3, r2
 80193b8:	009b      	lsls	r3, r3, #2
 80193ba:	4413      	add	r3, r2
 80193bc:	009b      	lsls	r3, r3, #2
 80193be:	4a13      	ldr	r2, [pc, #76]	; (801940c <xTaskRemoveFromEventList+0xb4>)
 80193c0:	441a      	add	r2, r3
 80193c2:	693b      	ldr	r3, [r7, #16]
 80193c4:	3304      	adds	r3, #4
 80193c6:	4619      	mov	r1, r3
 80193c8:	4610      	mov	r0, r2
 80193ca:	f7fe fabe 	bl	801794a <vListInsertEnd>
 80193ce:	e005      	b.n	80193dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80193d0:	693b      	ldr	r3, [r7, #16]
 80193d2:	3318      	adds	r3, #24
 80193d4:	4619      	mov	r1, r3
 80193d6:	480e      	ldr	r0, [pc, #56]	; (8019410 <xTaskRemoveFromEventList+0xb8>)
 80193d8:	f7fe fab7 	bl	801794a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80193dc:	693b      	ldr	r3, [r7, #16]
 80193de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193e0:	4b0c      	ldr	r3, [pc, #48]	; (8019414 <xTaskRemoveFromEventList+0xbc>)
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193e6:	429a      	cmp	r2, r3
 80193e8:	d905      	bls.n	80193f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80193ea:	2301      	movs	r3, #1
 80193ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80193ee:	4b0a      	ldr	r3, [pc, #40]	; (8019418 <xTaskRemoveFromEventList+0xc0>)
 80193f0:	2201      	movs	r2, #1
 80193f2:	601a      	str	r2, [r3, #0]
 80193f4:	e001      	b.n	80193fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80193f6:	2300      	movs	r3, #0
 80193f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80193fa:	697b      	ldr	r3, [r7, #20]
}
 80193fc:	4618      	mov	r0, r3
 80193fe:	3718      	adds	r7, #24
 8019400:	46bd      	mov	sp, r7
 8019402:	bd80      	pop	{r7, pc}
 8019404:	20003c50 	.word	0x20003c50
 8019408:	20003c30 	.word	0x20003c30
 801940c:	20003b2c 	.word	0x20003b2c
 8019410:	20003be8 	.word	0x20003be8
 8019414:	20003b28 	.word	0x20003b28
 8019418:	20003c3c 	.word	0x20003c3c

0801941c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801941c:	b480      	push	{r7}
 801941e:	b083      	sub	sp, #12
 8019420:	af00      	add	r7, sp, #0
 8019422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019424:	4b06      	ldr	r3, [pc, #24]	; (8019440 <vTaskInternalSetTimeOutState+0x24>)
 8019426:	681a      	ldr	r2, [r3, #0]
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801942c:	4b05      	ldr	r3, [pc, #20]	; (8019444 <vTaskInternalSetTimeOutState+0x28>)
 801942e:	681a      	ldr	r2, [r3, #0]
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	605a      	str	r2, [r3, #4]
}
 8019434:	bf00      	nop
 8019436:	370c      	adds	r7, #12
 8019438:	46bd      	mov	sp, r7
 801943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801943e:	4770      	bx	lr
 8019440:	20003c40 	.word	0x20003c40
 8019444:	20003c2c 	.word	0x20003c2c

08019448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019448:	b580      	push	{r7, lr}
 801944a:	b088      	sub	sp, #32
 801944c:	af00      	add	r7, sp, #0
 801944e:	6078      	str	r0, [r7, #4]
 8019450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d10a      	bne.n	801946e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8019458:	f04f 0320 	mov.w	r3, #32
 801945c:	f383 8811 	msr	BASEPRI, r3
 8019460:	f3bf 8f6f 	isb	sy
 8019464:	f3bf 8f4f 	dsb	sy
 8019468:	613b      	str	r3, [r7, #16]
}
 801946a:	bf00      	nop
 801946c:	e7fe      	b.n	801946c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801946e:	683b      	ldr	r3, [r7, #0]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d10a      	bne.n	801948a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019474:	f04f 0320 	mov.w	r3, #32
 8019478:	f383 8811 	msr	BASEPRI, r3
 801947c:	f3bf 8f6f 	isb	sy
 8019480:	f3bf 8f4f 	dsb	sy
 8019484:	60fb      	str	r3, [r7, #12]
}
 8019486:	bf00      	nop
 8019488:	e7fe      	b.n	8019488 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801948a:	f000 ff7b 	bl	801a384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801948e:	4b1d      	ldr	r3, [pc, #116]	; (8019504 <xTaskCheckForTimeOut+0xbc>)
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	685b      	ldr	r3, [r3, #4]
 8019498:	69ba      	ldr	r2, [r7, #24]
 801949a:	1ad3      	subs	r3, r2, r3
 801949c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801949e:	683b      	ldr	r3, [r7, #0]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194a6:	d102      	bne.n	80194ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80194a8:	2300      	movs	r3, #0
 80194aa:	61fb      	str	r3, [r7, #28]
 80194ac:	e023      	b.n	80194f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681a      	ldr	r2, [r3, #0]
 80194b2:	4b15      	ldr	r3, [pc, #84]	; (8019508 <xTaskCheckForTimeOut+0xc0>)
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	429a      	cmp	r2, r3
 80194b8:	d007      	beq.n	80194ca <xTaskCheckForTimeOut+0x82>
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	685b      	ldr	r3, [r3, #4]
 80194be:	69ba      	ldr	r2, [r7, #24]
 80194c0:	429a      	cmp	r2, r3
 80194c2:	d302      	bcc.n	80194ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80194c4:	2301      	movs	r3, #1
 80194c6:	61fb      	str	r3, [r7, #28]
 80194c8:	e015      	b.n	80194f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80194ca:	683b      	ldr	r3, [r7, #0]
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	697a      	ldr	r2, [r7, #20]
 80194d0:	429a      	cmp	r2, r3
 80194d2:	d20b      	bcs.n	80194ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80194d4:	683b      	ldr	r3, [r7, #0]
 80194d6:	681a      	ldr	r2, [r3, #0]
 80194d8:	697b      	ldr	r3, [r7, #20]
 80194da:	1ad2      	subs	r2, r2, r3
 80194dc:	683b      	ldr	r3, [r7, #0]
 80194de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80194e0:	6878      	ldr	r0, [r7, #4]
 80194e2:	f7ff ff9b 	bl	801941c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80194e6:	2300      	movs	r3, #0
 80194e8:	61fb      	str	r3, [r7, #28]
 80194ea:	e004      	b.n	80194f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80194ec:	683b      	ldr	r3, [r7, #0]
 80194ee:	2200      	movs	r2, #0
 80194f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80194f2:	2301      	movs	r3, #1
 80194f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80194f6:	f000 ff75 	bl	801a3e4 <vPortExitCritical>

	return xReturn;
 80194fa:	69fb      	ldr	r3, [r7, #28]
}
 80194fc:	4618      	mov	r0, r3
 80194fe:	3720      	adds	r7, #32
 8019500:	46bd      	mov	sp, r7
 8019502:	bd80      	pop	{r7, pc}
 8019504:	20003c2c 	.word	0x20003c2c
 8019508:	20003c40 	.word	0x20003c40

0801950c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801950c:	b480      	push	{r7}
 801950e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019510:	4b03      	ldr	r3, [pc, #12]	; (8019520 <vTaskMissedYield+0x14>)
 8019512:	2201      	movs	r2, #1
 8019514:	601a      	str	r2, [r3, #0]
}
 8019516:	bf00      	nop
 8019518:	46bd      	mov	sp, r7
 801951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951e:	4770      	bx	lr
 8019520:	20003c3c 	.word	0x20003c3c

08019524 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019524:	b580      	push	{r7, lr}
 8019526:	b082      	sub	sp, #8
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801952c:	f000 f854 	bl	80195d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019530:	4b07      	ldr	r3, [pc, #28]	; (8019550 <prvIdleTask+0x2c>)
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	2b01      	cmp	r3, #1
 8019536:	d907      	bls.n	8019548 <prvIdleTask+0x24>
			{
				taskYIELD();
 8019538:	4b06      	ldr	r3, [pc, #24]	; (8019554 <prvIdleTask+0x30>)
 801953a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801953e:	601a      	str	r2, [r3, #0]
 8019540:	f3bf 8f4f 	dsb	sy
 8019544:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8019548:	f7e9 fcd0 	bl	8002eec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801954c:	e7ee      	b.n	801952c <prvIdleTask+0x8>
 801954e:	bf00      	nop
 8019550:	20003b2c 	.word	0x20003b2c
 8019554:	e000ed04 	.word	0xe000ed04

08019558 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019558:	b580      	push	{r7, lr}
 801955a:	b082      	sub	sp, #8
 801955c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801955e:	2300      	movs	r3, #0
 8019560:	607b      	str	r3, [r7, #4]
 8019562:	e00c      	b.n	801957e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019564:	687a      	ldr	r2, [r7, #4]
 8019566:	4613      	mov	r3, r2
 8019568:	009b      	lsls	r3, r3, #2
 801956a:	4413      	add	r3, r2
 801956c:	009b      	lsls	r3, r3, #2
 801956e:	4a12      	ldr	r2, [pc, #72]	; (80195b8 <prvInitialiseTaskLists+0x60>)
 8019570:	4413      	add	r3, r2
 8019572:	4618      	mov	r0, r3
 8019574:	f7fe f9bc 	bl	80178f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	3301      	adds	r3, #1
 801957c:	607b      	str	r3, [r7, #4]
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	2b06      	cmp	r3, #6
 8019582:	d9ef      	bls.n	8019564 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019584:	480d      	ldr	r0, [pc, #52]	; (80195bc <prvInitialiseTaskLists+0x64>)
 8019586:	f7fe f9b3 	bl	80178f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801958a:	480d      	ldr	r0, [pc, #52]	; (80195c0 <prvInitialiseTaskLists+0x68>)
 801958c:	f7fe f9b0 	bl	80178f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019590:	480c      	ldr	r0, [pc, #48]	; (80195c4 <prvInitialiseTaskLists+0x6c>)
 8019592:	f7fe f9ad 	bl	80178f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019596:	480c      	ldr	r0, [pc, #48]	; (80195c8 <prvInitialiseTaskLists+0x70>)
 8019598:	f7fe f9aa 	bl	80178f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801959c:	480b      	ldr	r0, [pc, #44]	; (80195cc <prvInitialiseTaskLists+0x74>)
 801959e:	f7fe f9a7 	bl	80178f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80195a2:	4b0b      	ldr	r3, [pc, #44]	; (80195d0 <prvInitialiseTaskLists+0x78>)
 80195a4:	4a05      	ldr	r2, [pc, #20]	; (80195bc <prvInitialiseTaskLists+0x64>)
 80195a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80195a8:	4b0a      	ldr	r3, [pc, #40]	; (80195d4 <prvInitialiseTaskLists+0x7c>)
 80195aa:	4a05      	ldr	r2, [pc, #20]	; (80195c0 <prvInitialiseTaskLists+0x68>)
 80195ac:	601a      	str	r2, [r3, #0]
}
 80195ae:	bf00      	nop
 80195b0:	3708      	adds	r7, #8
 80195b2:	46bd      	mov	sp, r7
 80195b4:	bd80      	pop	{r7, pc}
 80195b6:	bf00      	nop
 80195b8:	20003b2c 	.word	0x20003b2c
 80195bc:	20003bb8 	.word	0x20003bb8
 80195c0:	20003bcc 	.word	0x20003bcc
 80195c4:	20003be8 	.word	0x20003be8
 80195c8:	20003bfc 	.word	0x20003bfc
 80195cc:	20003c14 	.word	0x20003c14
 80195d0:	20003be0 	.word	0x20003be0
 80195d4:	20003be4 	.word	0x20003be4

080195d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80195d8:	b580      	push	{r7, lr}
 80195da:	b082      	sub	sp, #8
 80195dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80195de:	e019      	b.n	8019614 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80195e0:	f000 fed0 	bl	801a384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80195e4:	4b10      	ldr	r3, [pc, #64]	; (8019628 <prvCheckTasksWaitingTermination+0x50>)
 80195e6:	68db      	ldr	r3, [r3, #12]
 80195e8:	68db      	ldr	r3, [r3, #12]
 80195ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	3304      	adds	r3, #4
 80195f0:	4618      	mov	r0, r3
 80195f2:	f7fe fa07 	bl	8017a04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80195f6:	4b0d      	ldr	r3, [pc, #52]	; (801962c <prvCheckTasksWaitingTermination+0x54>)
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	3b01      	subs	r3, #1
 80195fc:	4a0b      	ldr	r2, [pc, #44]	; (801962c <prvCheckTasksWaitingTermination+0x54>)
 80195fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019600:	4b0b      	ldr	r3, [pc, #44]	; (8019630 <prvCheckTasksWaitingTermination+0x58>)
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	3b01      	subs	r3, #1
 8019606:	4a0a      	ldr	r2, [pc, #40]	; (8019630 <prvCheckTasksWaitingTermination+0x58>)
 8019608:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801960a:	f000 feeb 	bl	801a3e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801960e:	6878      	ldr	r0, [r7, #4]
 8019610:	f000 f810 	bl	8019634 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019614:	4b06      	ldr	r3, [pc, #24]	; (8019630 <prvCheckTasksWaitingTermination+0x58>)
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d1e1      	bne.n	80195e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801961c:	bf00      	nop
 801961e:	bf00      	nop
 8019620:	3708      	adds	r7, #8
 8019622:	46bd      	mov	sp, r7
 8019624:	bd80      	pop	{r7, pc}
 8019626:	bf00      	nop
 8019628:	20003bfc 	.word	0x20003bfc
 801962c:	20003c28 	.word	0x20003c28
 8019630:	20003c10 	.word	0x20003c10

08019634 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019634:	b580      	push	{r7, lr}
 8019636:	b082      	sub	sp, #8
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019640:	4618      	mov	r0, r3
 8019642:	f001 f885 	bl	801a750 <vPortFree>
			vPortFree( pxTCB );
 8019646:	6878      	ldr	r0, [r7, #4]
 8019648:	f001 f882 	bl	801a750 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801964c:	bf00      	nop
 801964e:	3708      	adds	r7, #8
 8019650:	46bd      	mov	sp, r7
 8019652:	bd80      	pop	{r7, pc}

08019654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019654:	b480      	push	{r7}
 8019656:	b083      	sub	sp, #12
 8019658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801965a:	4b0c      	ldr	r3, [pc, #48]	; (801968c <prvResetNextTaskUnblockTime+0x38>)
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d104      	bne.n	801966e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019664:	4b0a      	ldr	r3, [pc, #40]	; (8019690 <prvResetNextTaskUnblockTime+0x3c>)
 8019666:	f04f 32ff 	mov.w	r2, #4294967295
 801966a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801966c:	e008      	b.n	8019680 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801966e:	4b07      	ldr	r3, [pc, #28]	; (801968c <prvResetNextTaskUnblockTime+0x38>)
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	68db      	ldr	r3, [r3, #12]
 8019674:	68db      	ldr	r3, [r3, #12]
 8019676:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	685b      	ldr	r3, [r3, #4]
 801967c:	4a04      	ldr	r2, [pc, #16]	; (8019690 <prvResetNextTaskUnblockTime+0x3c>)
 801967e:	6013      	str	r3, [r2, #0]
}
 8019680:	bf00      	nop
 8019682:	370c      	adds	r7, #12
 8019684:	46bd      	mov	sp, r7
 8019686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801968a:	4770      	bx	lr
 801968c:	20003be0 	.word	0x20003be0
 8019690:	20003c48 	.word	0x20003c48

08019694 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019694:	b480      	push	{r7}
 8019696:	b083      	sub	sp, #12
 8019698:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801969a:	4b0b      	ldr	r3, [pc, #44]	; (80196c8 <xTaskGetSchedulerState+0x34>)
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d102      	bne.n	80196a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80196a2:	2301      	movs	r3, #1
 80196a4:	607b      	str	r3, [r7, #4]
 80196a6:	e008      	b.n	80196ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80196a8:	4b08      	ldr	r3, [pc, #32]	; (80196cc <xTaskGetSchedulerState+0x38>)
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d102      	bne.n	80196b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80196b0:	2302      	movs	r3, #2
 80196b2:	607b      	str	r3, [r7, #4]
 80196b4:	e001      	b.n	80196ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80196b6:	2300      	movs	r3, #0
 80196b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80196ba:	687b      	ldr	r3, [r7, #4]
	}
 80196bc:	4618      	mov	r0, r3
 80196be:	370c      	adds	r7, #12
 80196c0:	46bd      	mov	sp, r7
 80196c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196c6:	4770      	bx	lr
 80196c8:	20003c34 	.word	0x20003c34
 80196cc:	20003c50 	.word	0x20003c50

080196d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80196d0:	b580      	push	{r7, lr}
 80196d2:	b084      	sub	sp, #16
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80196dc:	2300      	movs	r3, #0
 80196de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d069      	beq.n	80197ba <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80196e6:	68bb      	ldr	r3, [r7, #8]
 80196e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196ea:	4b36      	ldr	r3, [pc, #216]	; (80197c4 <xTaskPriorityInherit+0xf4>)
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196f0:	429a      	cmp	r2, r3
 80196f2:	d259      	bcs.n	80197a8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80196f4:	68bb      	ldr	r3, [r7, #8]
 80196f6:	699b      	ldr	r3, [r3, #24]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	db06      	blt.n	801970a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80196fc:	4b31      	ldr	r3, [pc, #196]	; (80197c4 <xTaskPriorityInherit+0xf4>)
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019702:	f1c3 0207 	rsb	r2, r3, #7
 8019706:	68bb      	ldr	r3, [r7, #8]
 8019708:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801970a:	68bb      	ldr	r3, [r7, #8]
 801970c:	6959      	ldr	r1, [r3, #20]
 801970e:	68bb      	ldr	r3, [r7, #8]
 8019710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019712:	4613      	mov	r3, r2
 8019714:	009b      	lsls	r3, r3, #2
 8019716:	4413      	add	r3, r2
 8019718:	009b      	lsls	r3, r3, #2
 801971a:	4a2b      	ldr	r2, [pc, #172]	; (80197c8 <xTaskPriorityInherit+0xf8>)
 801971c:	4413      	add	r3, r2
 801971e:	4299      	cmp	r1, r3
 8019720:	d13a      	bne.n	8019798 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019722:	68bb      	ldr	r3, [r7, #8]
 8019724:	3304      	adds	r3, #4
 8019726:	4618      	mov	r0, r3
 8019728:	f7fe f96c 	bl	8017a04 <uxListRemove>
 801972c:	4603      	mov	r3, r0
 801972e:	2b00      	cmp	r3, #0
 8019730:	d115      	bne.n	801975e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8019732:	68bb      	ldr	r3, [r7, #8]
 8019734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019736:	4924      	ldr	r1, [pc, #144]	; (80197c8 <xTaskPriorityInherit+0xf8>)
 8019738:	4613      	mov	r3, r2
 801973a:	009b      	lsls	r3, r3, #2
 801973c:	4413      	add	r3, r2
 801973e:	009b      	lsls	r3, r3, #2
 8019740:	440b      	add	r3, r1
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d10a      	bne.n	801975e <xTaskPriorityInherit+0x8e>
 8019748:	68bb      	ldr	r3, [r7, #8]
 801974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801974c:	2201      	movs	r2, #1
 801974e:	fa02 f303 	lsl.w	r3, r2, r3
 8019752:	43da      	mvns	r2, r3
 8019754:	4b1d      	ldr	r3, [pc, #116]	; (80197cc <xTaskPriorityInherit+0xfc>)
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	4013      	ands	r3, r2
 801975a:	4a1c      	ldr	r2, [pc, #112]	; (80197cc <xTaskPriorityInherit+0xfc>)
 801975c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801975e:	4b19      	ldr	r3, [pc, #100]	; (80197c4 <xTaskPriorityInherit+0xf4>)
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019764:	68bb      	ldr	r3, [r7, #8]
 8019766:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019768:	68bb      	ldr	r3, [r7, #8]
 801976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801976c:	2201      	movs	r2, #1
 801976e:	409a      	lsls	r2, r3
 8019770:	4b16      	ldr	r3, [pc, #88]	; (80197cc <xTaskPriorityInherit+0xfc>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	4313      	orrs	r3, r2
 8019776:	4a15      	ldr	r2, [pc, #84]	; (80197cc <xTaskPriorityInherit+0xfc>)
 8019778:	6013      	str	r3, [r2, #0]
 801977a:	68bb      	ldr	r3, [r7, #8]
 801977c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801977e:	4613      	mov	r3, r2
 8019780:	009b      	lsls	r3, r3, #2
 8019782:	4413      	add	r3, r2
 8019784:	009b      	lsls	r3, r3, #2
 8019786:	4a10      	ldr	r2, [pc, #64]	; (80197c8 <xTaskPriorityInherit+0xf8>)
 8019788:	441a      	add	r2, r3
 801978a:	68bb      	ldr	r3, [r7, #8]
 801978c:	3304      	adds	r3, #4
 801978e:	4619      	mov	r1, r3
 8019790:	4610      	mov	r0, r2
 8019792:	f7fe f8da 	bl	801794a <vListInsertEnd>
 8019796:	e004      	b.n	80197a2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019798:	4b0a      	ldr	r3, [pc, #40]	; (80197c4 <xTaskPriorityInherit+0xf4>)
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801979e:	68bb      	ldr	r3, [r7, #8]
 80197a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80197a2:	2301      	movs	r3, #1
 80197a4:	60fb      	str	r3, [r7, #12]
 80197a6:	e008      	b.n	80197ba <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80197a8:	68bb      	ldr	r3, [r7, #8]
 80197aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80197ac:	4b05      	ldr	r3, [pc, #20]	; (80197c4 <xTaskPriorityInherit+0xf4>)
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197b2:	429a      	cmp	r2, r3
 80197b4:	d201      	bcs.n	80197ba <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80197b6:	2301      	movs	r3, #1
 80197b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80197ba:	68fb      	ldr	r3, [r7, #12]
	}
 80197bc:	4618      	mov	r0, r3
 80197be:	3710      	adds	r7, #16
 80197c0:	46bd      	mov	sp, r7
 80197c2:	bd80      	pop	{r7, pc}
 80197c4:	20003b28 	.word	0x20003b28
 80197c8:	20003b2c 	.word	0x20003b2c
 80197cc:	20003c30 	.word	0x20003c30

080197d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b086      	sub	sp, #24
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80197dc:	2300      	movs	r3, #0
 80197de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d06e      	beq.n	80198c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80197e6:	4b3a      	ldr	r3, [pc, #232]	; (80198d0 <xTaskPriorityDisinherit+0x100>)
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	693a      	ldr	r2, [r7, #16]
 80197ec:	429a      	cmp	r2, r3
 80197ee:	d00a      	beq.n	8019806 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80197f0:	f04f 0320 	mov.w	r3, #32
 80197f4:	f383 8811 	msr	BASEPRI, r3
 80197f8:	f3bf 8f6f 	isb	sy
 80197fc:	f3bf 8f4f 	dsb	sy
 8019800:	60fb      	str	r3, [r7, #12]
}
 8019802:	bf00      	nop
 8019804:	e7fe      	b.n	8019804 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8019806:	693b      	ldr	r3, [r7, #16]
 8019808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801980a:	2b00      	cmp	r3, #0
 801980c:	d10a      	bne.n	8019824 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801980e:	f04f 0320 	mov.w	r3, #32
 8019812:	f383 8811 	msr	BASEPRI, r3
 8019816:	f3bf 8f6f 	isb	sy
 801981a:	f3bf 8f4f 	dsb	sy
 801981e:	60bb      	str	r3, [r7, #8]
}
 8019820:	bf00      	nop
 8019822:	e7fe      	b.n	8019822 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8019824:	693b      	ldr	r3, [r7, #16]
 8019826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019828:	1e5a      	subs	r2, r3, #1
 801982a:	693b      	ldr	r3, [r7, #16]
 801982c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801982e:	693b      	ldr	r3, [r7, #16]
 8019830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019832:	693b      	ldr	r3, [r7, #16]
 8019834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019836:	429a      	cmp	r2, r3
 8019838:	d044      	beq.n	80198c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801983a:	693b      	ldr	r3, [r7, #16]
 801983c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801983e:	2b00      	cmp	r3, #0
 8019840:	d140      	bne.n	80198c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019842:	693b      	ldr	r3, [r7, #16]
 8019844:	3304      	adds	r3, #4
 8019846:	4618      	mov	r0, r3
 8019848:	f7fe f8dc 	bl	8017a04 <uxListRemove>
 801984c:	4603      	mov	r3, r0
 801984e:	2b00      	cmp	r3, #0
 8019850:	d115      	bne.n	801987e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8019852:	693b      	ldr	r3, [r7, #16]
 8019854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019856:	491f      	ldr	r1, [pc, #124]	; (80198d4 <xTaskPriorityDisinherit+0x104>)
 8019858:	4613      	mov	r3, r2
 801985a:	009b      	lsls	r3, r3, #2
 801985c:	4413      	add	r3, r2
 801985e:	009b      	lsls	r3, r3, #2
 8019860:	440b      	add	r3, r1
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d10a      	bne.n	801987e <xTaskPriorityDisinherit+0xae>
 8019868:	693b      	ldr	r3, [r7, #16]
 801986a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801986c:	2201      	movs	r2, #1
 801986e:	fa02 f303 	lsl.w	r3, r2, r3
 8019872:	43da      	mvns	r2, r3
 8019874:	4b18      	ldr	r3, [pc, #96]	; (80198d8 <xTaskPriorityDisinherit+0x108>)
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	4013      	ands	r3, r2
 801987a:	4a17      	ldr	r2, [pc, #92]	; (80198d8 <xTaskPriorityDisinherit+0x108>)
 801987c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801987e:	693b      	ldr	r3, [r7, #16]
 8019880:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019882:	693b      	ldr	r3, [r7, #16]
 8019884:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019886:	693b      	ldr	r3, [r7, #16]
 8019888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801988a:	f1c3 0207 	rsb	r2, r3, #7
 801988e:	693b      	ldr	r3, [r7, #16]
 8019890:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019892:	693b      	ldr	r3, [r7, #16]
 8019894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019896:	2201      	movs	r2, #1
 8019898:	409a      	lsls	r2, r3
 801989a:	4b0f      	ldr	r3, [pc, #60]	; (80198d8 <xTaskPriorityDisinherit+0x108>)
 801989c:	681b      	ldr	r3, [r3, #0]
 801989e:	4313      	orrs	r3, r2
 80198a0:	4a0d      	ldr	r2, [pc, #52]	; (80198d8 <xTaskPriorityDisinherit+0x108>)
 80198a2:	6013      	str	r3, [r2, #0]
 80198a4:	693b      	ldr	r3, [r7, #16]
 80198a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198a8:	4613      	mov	r3, r2
 80198aa:	009b      	lsls	r3, r3, #2
 80198ac:	4413      	add	r3, r2
 80198ae:	009b      	lsls	r3, r3, #2
 80198b0:	4a08      	ldr	r2, [pc, #32]	; (80198d4 <xTaskPriorityDisinherit+0x104>)
 80198b2:	441a      	add	r2, r3
 80198b4:	693b      	ldr	r3, [r7, #16]
 80198b6:	3304      	adds	r3, #4
 80198b8:	4619      	mov	r1, r3
 80198ba:	4610      	mov	r0, r2
 80198bc:	f7fe f845 	bl	801794a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80198c0:	2301      	movs	r3, #1
 80198c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80198c4:	697b      	ldr	r3, [r7, #20]
	}
 80198c6:	4618      	mov	r0, r3
 80198c8:	3718      	adds	r7, #24
 80198ca:	46bd      	mov	sp, r7
 80198cc:	bd80      	pop	{r7, pc}
 80198ce:	bf00      	nop
 80198d0:	20003b28 	.word	0x20003b28
 80198d4:	20003b2c 	.word	0x20003b2c
 80198d8:	20003c30 	.word	0x20003c30

080198dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80198dc:	b580      	push	{r7, lr}
 80198de:	b088      	sub	sp, #32
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	6078      	str	r0, [r7, #4]
 80198e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80198ea:	2301      	movs	r3, #1
 80198ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	f000 8083 	beq.w	80199fc <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80198f6:	69bb      	ldr	r3, [r7, #24]
 80198f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d10a      	bne.n	8019914 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80198fe:	f04f 0320 	mov.w	r3, #32
 8019902:	f383 8811 	msr	BASEPRI, r3
 8019906:	f3bf 8f6f 	isb	sy
 801990a:	f3bf 8f4f 	dsb	sy
 801990e:	60fb      	str	r3, [r7, #12]
}
 8019910:	bf00      	nop
 8019912:	e7fe      	b.n	8019912 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8019914:	69bb      	ldr	r3, [r7, #24]
 8019916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019918:	683a      	ldr	r2, [r7, #0]
 801991a:	429a      	cmp	r2, r3
 801991c:	d902      	bls.n	8019924 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801991e:	683b      	ldr	r3, [r7, #0]
 8019920:	61fb      	str	r3, [r7, #28]
 8019922:	e002      	b.n	801992a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8019924:	69bb      	ldr	r3, [r7, #24]
 8019926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019928:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801992a:	69bb      	ldr	r3, [r7, #24]
 801992c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801992e:	69fa      	ldr	r2, [r7, #28]
 8019930:	429a      	cmp	r2, r3
 8019932:	d063      	beq.n	80199fc <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8019934:	69bb      	ldr	r3, [r7, #24]
 8019936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019938:	697a      	ldr	r2, [r7, #20]
 801993a:	429a      	cmp	r2, r3
 801993c:	d15e      	bne.n	80199fc <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801993e:	4b31      	ldr	r3, [pc, #196]	; (8019a04 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	69ba      	ldr	r2, [r7, #24]
 8019944:	429a      	cmp	r2, r3
 8019946:	d10a      	bne.n	801995e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8019948:	f04f 0320 	mov.w	r3, #32
 801994c:	f383 8811 	msr	BASEPRI, r3
 8019950:	f3bf 8f6f 	isb	sy
 8019954:	f3bf 8f4f 	dsb	sy
 8019958:	60bb      	str	r3, [r7, #8]
}
 801995a:	bf00      	nop
 801995c:	e7fe      	b.n	801995c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801995e:	69bb      	ldr	r3, [r7, #24]
 8019960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019962:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8019964:	69bb      	ldr	r3, [r7, #24]
 8019966:	69fa      	ldr	r2, [r7, #28]
 8019968:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801996a:	69bb      	ldr	r3, [r7, #24]
 801996c:	699b      	ldr	r3, [r3, #24]
 801996e:	2b00      	cmp	r3, #0
 8019970:	db04      	blt.n	801997c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019972:	69fb      	ldr	r3, [r7, #28]
 8019974:	f1c3 0207 	rsb	r2, r3, #7
 8019978:	69bb      	ldr	r3, [r7, #24]
 801997a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801997c:	69bb      	ldr	r3, [r7, #24]
 801997e:	6959      	ldr	r1, [r3, #20]
 8019980:	693a      	ldr	r2, [r7, #16]
 8019982:	4613      	mov	r3, r2
 8019984:	009b      	lsls	r3, r3, #2
 8019986:	4413      	add	r3, r2
 8019988:	009b      	lsls	r3, r3, #2
 801998a:	4a1f      	ldr	r2, [pc, #124]	; (8019a08 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801998c:	4413      	add	r3, r2
 801998e:	4299      	cmp	r1, r3
 8019990:	d134      	bne.n	80199fc <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019992:	69bb      	ldr	r3, [r7, #24]
 8019994:	3304      	adds	r3, #4
 8019996:	4618      	mov	r0, r3
 8019998:	f7fe f834 	bl	8017a04 <uxListRemove>
 801999c:	4603      	mov	r3, r0
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d115      	bne.n	80199ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80199a2:	69bb      	ldr	r3, [r7, #24]
 80199a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80199a6:	4918      	ldr	r1, [pc, #96]	; (8019a08 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80199a8:	4613      	mov	r3, r2
 80199aa:	009b      	lsls	r3, r3, #2
 80199ac:	4413      	add	r3, r2
 80199ae:	009b      	lsls	r3, r3, #2
 80199b0:	440b      	add	r3, r1
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d10a      	bne.n	80199ce <vTaskPriorityDisinheritAfterTimeout+0xf2>
 80199b8:	69bb      	ldr	r3, [r7, #24]
 80199ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199bc:	2201      	movs	r2, #1
 80199be:	fa02 f303 	lsl.w	r3, r2, r3
 80199c2:	43da      	mvns	r2, r3
 80199c4:	4b11      	ldr	r3, [pc, #68]	; (8019a0c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	4013      	ands	r3, r2
 80199ca:	4a10      	ldr	r2, [pc, #64]	; (8019a0c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80199cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80199ce:	69bb      	ldr	r3, [r7, #24]
 80199d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199d2:	2201      	movs	r2, #1
 80199d4:	409a      	lsls	r2, r3
 80199d6:	4b0d      	ldr	r3, [pc, #52]	; (8019a0c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	4313      	orrs	r3, r2
 80199dc:	4a0b      	ldr	r2, [pc, #44]	; (8019a0c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80199de:	6013      	str	r3, [r2, #0]
 80199e0:	69bb      	ldr	r3, [r7, #24]
 80199e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80199e4:	4613      	mov	r3, r2
 80199e6:	009b      	lsls	r3, r3, #2
 80199e8:	4413      	add	r3, r2
 80199ea:	009b      	lsls	r3, r3, #2
 80199ec:	4a06      	ldr	r2, [pc, #24]	; (8019a08 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80199ee:	441a      	add	r2, r3
 80199f0:	69bb      	ldr	r3, [r7, #24]
 80199f2:	3304      	adds	r3, #4
 80199f4:	4619      	mov	r1, r3
 80199f6:	4610      	mov	r0, r2
 80199f8:	f7fd ffa7 	bl	801794a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80199fc:	bf00      	nop
 80199fe:	3720      	adds	r7, #32
 8019a00:	46bd      	mov	sp, r7
 8019a02:	bd80      	pop	{r7, pc}
 8019a04:	20003b28 	.word	0x20003b28
 8019a08:	20003b2c 	.word	0x20003b2c
 8019a0c:	20003c30 	.word	0x20003c30

08019a10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8019a10:	b480      	push	{r7}
 8019a12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8019a14:	4b07      	ldr	r3, [pc, #28]	; (8019a34 <pvTaskIncrementMutexHeldCount+0x24>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d004      	beq.n	8019a26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8019a1c:	4b05      	ldr	r3, [pc, #20]	; (8019a34 <pvTaskIncrementMutexHeldCount+0x24>)
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019a22:	3201      	adds	r2, #1
 8019a24:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8019a26:	4b03      	ldr	r3, [pc, #12]	; (8019a34 <pvTaskIncrementMutexHeldCount+0x24>)
 8019a28:	681b      	ldr	r3, [r3, #0]
	}
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a32:	4770      	bx	lr
 8019a34:	20003b28 	.word	0x20003b28

08019a38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b084      	sub	sp, #16
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	6078      	str	r0, [r7, #4]
 8019a40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019a42:	4b29      	ldr	r3, [pc, #164]	; (8019ae8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019a48:	4b28      	ldr	r3, [pc, #160]	; (8019aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	3304      	adds	r3, #4
 8019a4e:	4618      	mov	r0, r3
 8019a50:	f7fd ffd8 	bl	8017a04 <uxListRemove>
 8019a54:	4603      	mov	r3, r0
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d10b      	bne.n	8019a72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8019a5a:	4b24      	ldr	r3, [pc, #144]	; (8019aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a60:	2201      	movs	r2, #1
 8019a62:	fa02 f303 	lsl.w	r3, r2, r3
 8019a66:	43da      	mvns	r2, r3
 8019a68:	4b21      	ldr	r3, [pc, #132]	; (8019af0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	4013      	ands	r3, r2
 8019a6e:	4a20      	ldr	r2, [pc, #128]	; (8019af0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8019a70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a78:	d10a      	bne.n	8019a90 <prvAddCurrentTaskToDelayedList+0x58>
 8019a7a:	683b      	ldr	r3, [r7, #0]
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d007      	beq.n	8019a90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019a80:	4b1a      	ldr	r3, [pc, #104]	; (8019aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	3304      	adds	r3, #4
 8019a86:	4619      	mov	r1, r3
 8019a88:	481a      	ldr	r0, [pc, #104]	; (8019af4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8019a8a:	f7fd ff5e 	bl	801794a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019a8e:	e026      	b.n	8019ade <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019a90:	68fa      	ldr	r2, [r7, #12]
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	4413      	add	r3, r2
 8019a96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019a98:	4b14      	ldr	r3, [pc, #80]	; (8019aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	68ba      	ldr	r2, [r7, #8]
 8019a9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019aa0:	68ba      	ldr	r2, [r7, #8]
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	429a      	cmp	r2, r3
 8019aa6:	d209      	bcs.n	8019abc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019aa8:	4b13      	ldr	r3, [pc, #76]	; (8019af8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8019aaa:	681a      	ldr	r2, [r3, #0]
 8019aac:	4b0f      	ldr	r3, [pc, #60]	; (8019aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	3304      	adds	r3, #4
 8019ab2:	4619      	mov	r1, r3
 8019ab4:	4610      	mov	r0, r2
 8019ab6:	f7fd ff6c 	bl	8017992 <vListInsert>
}
 8019aba:	e010      	b.n	8019ade <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019abc:	4b0f      	ldr	r3, [pc, #60]	; (8019afc <prvAddCurrentTaskToDelayedList+0xc4>)
 8019abe:	681a      	ldr	r2, [r3, #0]
 8019ac0:	4b0a      	ldr	r3, [pc, #40]	; (8019aec <prvAddCurrentTaskToDelayedList+0xb4>)
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	3304      	adds	r3, #4
 8019ac6:	4619      	mov	r1, r3
 8019ac8:	4610      	mov	r0, r2
 8019aca:	f7fd ff62 	bl	8017992 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019ace:	4b0c      	ldr	r3, [pc, #48]	; (8019b00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	68ba      	ldr	r2, [r7, #8]
 8019ad4:	429a      	cmp	r2, r3
 8019ad6:	d202      	bcs.n	8019ade <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8019ad8:	4a09      	ldr	r2, [pc, #36]	; (8019b00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8019ada:	68bb      	ldr	r3, [r7, #8]
 8019adc:	6013      	str	r3, [r2, #0]
}
 8019ade:	bf00      	nop
 8019ae0:	3710      	adds	r7, #16
 8019ae2:	46bd      	mov	sp, r7
 8019ae4:	bd80      	pop	{r7, pc}
 8019ae6:	bf00      	nop
 8019ae8:	20003c2c 	.word	0x20003c2c
 8019aec:	20003b28 	.word	0x20003b28
 8019af0:	20003c30 	.word	0x20003c30
 8019af4:	20003c14 	.word	0x20003c14
 8019af8:	20003be4 	.word	0x20003be4
 8019afc:	20003be0 	.word	0x20003be0
 8019b00:	20003c48 	.word	0x20003c48

08019b04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b084      	sub	sp, #16
 8019b08:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019b0e:	f000 fad5 	bl	801a0bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8019b12:	4b11      	ldr	r3, [pc, #68]	; (8019b58 <xTimerCreateTimerTask+0x54>)
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d00b      	beq.n	8019b32 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8019b1a:	4b10      	ldr	r3, [pc, #64]	; (8019b5c <xTimerCreateTimerTask+0x58>)
 8019b1c:	9301      	str	r3, [sp, #4]
 8019b1e:	2306      	movs	r3, #6
 8019b20:	9300      	str	r3, [sp, #0]
 8019b22:	2300      	movs	r3, #0
 8019b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019b28:	490d      	ldr	r1, [pc, #52]	; (8019b60 <xTimerCreateTimerTask+0x5c>)
 8019b2a:	480e      	ldr	r0, [pc, #56]	; (8019b64 <xTimerCreateTimerTask+0x60>)
 8019b2c:	f7fe fea4 	bl	8018878 <xTaskCreate>
 8019b30:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d10a      	bne.n	8019b4e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8019b38:	f04f 0320 	mov.w	r3, #32
 8019b3c:	f383 8811 	msr	BASEPRI, r3
 8019b40:	f3bf 8f6f 	isb	sy
 8019b44:	f3bf 8f4f 	dsb	sy
 8019b48:	603b      	str	r3, [r7, #0]
}
 8019b4a:	bf00      	nop
 8019b4c:	e7fe      	b.n	8019b4c <xTimerCreateTimerTask+0x48>
	return xReturn;
 8019b4e:	687b      	ldr	r3, [r7, #4]
}
 8019b50:	4618      	mov	r0, r3
 8019b52:	3708      	adds	r7, #8
 8019b54:	46bd      	mov	sp, r7
 8019b56:	bd80      	pop	{r7, pc}
 8019b58:	20003c84 	.word	0x20003c84
 8019b5c:	20003c88 	.word	0x20003c88
 8019b60:	080227b0 	.word	0x080227b0
 8019b64:	08019c9d 	.word	0x08019c9d

08019b68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b08a      	sub	sp, #40	; 0x28
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	60f8      	str	r0, [r7, #12]
 8019b70:	60b9      	str	r1, [r7, #8]
 8019b72:	607a      	str	r2, [r7, #4]
 8019b74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019b76:	2300      	movs	r3, #0
 8019b78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d10a      	bne.n	8019b96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8019b80:	f04f 0320 	mov.w	r3, #32
 8019b84:	f383 8811 	msr	BASEPRI, r3
 8019b88:	f3bf 8f6f 	isb	sy
 8019b8c:	f3bf 8f4f 	dsb	sy
 8019b90:	623b      	str	r3, [r7, #32]
}
 8019b92:	bf00      	nop
 8019b94:	e7fe      	b.n	8019b94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019b96:	4b1a      	ldr	r3, [pc, #104]	; (8019c00 <xTimerGenericCommand+0x98>)
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d02a      	beq.n	8019bf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019b9e:	68bb      	ldr	r3, [r7, #8]
 8019ba0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019baa:	68bb      	ldr	r3, [r7, #8]
 8019bac:	2b05      	cmp	r3, #5
 8019bae:	dc18      	bgt.n	8019be2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019bb0:	f7ff fd70 	bl	8019694 <xTaskGetSchedulerState>
 8019bb4:	4603      	mov	r3, r0
 8019bb6:	2b02      	cmp	r3, #2
 8019bb8:	d109      	bne.n	8019bce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019bba:	4b11      	ldr	r3, [pc, #68]	; (8019c00 <xTimerGenericCommand+0x98>)
 8019bbc:	6818      	ldr	r0, [r3, #0]
 8019bbe:	f107 0114 	add.w	r1, r7, #20
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019bc6:	f7fe f841 	bl	8017c4c <xQueueGenericSend>
 8019bca:	6278      	str	r0, [r7, #36]	; 0x24
 8019bcc:	e012      	b.n	8019bf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019bce:	4b0c      	ldr	r3, [pc, #48]	; (8019c00 <xTimerGenericCommand+0x98>)
 8019bd0:	6818      	ldr	r0, [r3, #0]
 8019bd2:	f107 0114 	add.w	r1, r7, #20
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	2200      	movs	r2, #0
 8019bda:	f7fe f837 	bl	8017c4c <xQueueGenericSend>
 8019bde:	6278      	str	r0, [r7, #36]	; 0x24
 8019be0:	e008      	b.n	8019bf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019be2:	4b07      	ldr	r3, [pc, #28]	; (8019c00 <xTimerGenericCommand+0x98>)
 8019be4:	6818      	ldr	r0, [r3, #0]
 8019be6:	f107 0114 	add.w	r1, r7, #20
 8019bea:	2300      	movs	r3, #0
 8019bec:	683a      	ldr	r2, [r7, #0]
 8019bee:	f7fe f92b 	bl	8017e48 <xQueueGenericSendFromISR>
 8019bf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019bf6:	4618      	mov	r0, r3
 8019bf8:	3728      	adds	r7, #40	; 0x28
 8019bfa:	46bd      	mov	sp, r7
 8019bfc:	bd80      	pop	{r7, pc}
 8019bfe:	bf00      	nop
 8019c00:	20003c84 	.word	0x20003c84

08019c04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019c04:	b580      	push	{r7, lr}
 8019c06:	b088      	sub	sp, #32
 8019c08:	af02      	add	r7, sp, #8
 8019c0a:	6078      	str	r0, [r7, #4]
 8019c0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019c0e:	4b22      	ldr	r3, [pc, #136]	; (8019c98 <prvProcessExpiredTimer+0x94>)
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	68db      	ldr	r3, [r3, #12]
 8019c14:	68db      	ldr	r3, [r3, #12]
 8019c16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019c18:	697b      	ldr	r3, [r7, #20]
 8019c1a:	3304      	adds	r3, #4
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f7fd fef1 	bl	8017a04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019c22:	697b      	ldr	r3, [r7, #20]
 8019c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c28:	f003 0304 	and.w	r3, r3, #4
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d022      	beq.n	8019c76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019c30:	697b      	ldr	r3, [r7, #20]
 8019c32:	699a      	ldr	r2, [r3, #24]
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	18d1      	adds	r1, r2, r3
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	683a      	ldr	r2, [r7, #0]
 8019c3c:	6978      	ldr	r0, [r7, #20]
 8019c3e:	f000 f8d1 	bl	8019de4 <prvInsertTimerInActiveList>
 8019c42:	4603      	mov	r3, r0
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d01f      	beq.n	8019c88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019c48:	2300      	movs	r3, #0
 8019c4a:	9300      	str	r3, [sp, #0]
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	687a      	ldr	r2, [r7, #4]
 8019c50:	2100      	movs	r1, #0
 8019c52:	6978      	ldr	r0, [r7, #20]
 8019c54:	f7ff ff88 	bl	8019b68 <xTimerGenericCommand>
 8019c58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019c5a:	693b      	ldr	r3, [r7, #16]
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d113      	bne.n	8019c88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019c60:	f04f 0320 	mov.w	r3, #32
 8019c64:	f383 8811 	msr	BASEPRI, r3
 8019c68:	f3bf 8f6f 	isb	sy
 8019c6c:	f3bf 8f4f 	dsb	sy
 8019c70:	60fb      	str	r3, [r7, #12]
}
 8019c72:	bf00      	nop
 8019c74:	e7fe      	b.n	8019c74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c7c:	f023 0301 	bic.w	r3, r3, #1
 8019c80:	b2da      	uxtb	r2, r3
 8019c82:	697b      	ldr	r3, [r7, #20]
 8019c84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019c88:	697b      	ldr	r3, [r7, #20]
 8019c8a:	6a1b      	ldr	r3, [r3, #32]
 8019c8c:	6978      	ldr	r0, [r7, #20]
 8019c8e:	4798      	blx	r3
}
 8019c90:	bf00      	nop
 8019c92:	3718      	adds	r7, #24
 8019c94:	46bd      	mov	sp, r7
 8019c96:	bd80      	pop	{r7, pc}
 8019c98:	20003c7c 	.word	0x20003c7c

08019c9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	b084      	sub	sp, #16
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019ca4:	f107 0308 	add.w	r3, r7, #8
 8019ca8:	4618      	mov	r0, r3
 8019caa:	f000 f857 	bl	8019d5c <prvGetNextExpireTime>
 8019cae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019cb0:	68bb      	ldr	r3, [r7, #8]
 8019cb2:	4619      	mov	r1, r3
 8019cb4:	68f8      	ldr	r0, [r7, #12]
 8019cb6:	f000 f803 	bl	8019cc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019cba:	f000 f8d5 	bl	8019e68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019cbe:	e7f1      	b.n	8019ca4 <prvTimerTask+0x8>

08019cc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b084      	sub	sp, #16
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	6078      	str	r0, [r7, #4]
 8019cc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019cca:	f7ff f901 	bl	8018ed0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019cce:	f107 0308 	add.w	r3, r7, #8
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f000 f866 	bl	8019da4 <prvSampleTimeNow>
 8019cd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019cda:	68bb      	ldr	r3, [r7, #8]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d130      	bne.n	8019d42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019ce0:	683b      	ldr	r3, [r7, #0]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d10a      	bne.n	8019cfc <prvProcessTimerOrBlockTask+0x3c>
 8019ce6:	687a      	ldr	r2, [r7, #4]
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	429a      	cmp	r2, r3
 8019cec:	d806      	bhi.n	8019cfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019cee:	f7ff f8fd 	bl	8018eec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019cf2:	68f9      	ldr	r1, [r7, #12]
 8019cf4:	6878      	ldr	r0, [r7, #4]
 8019cf6:	f7ff ff85 	bl	8019c04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019cfa:	e024      	b.n	8019d46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019cfc:	683b      	ldr	r3, [r7, #0]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d008      	beq.n	8019d14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019d02:	4b13      	ldr	r3, [pc, #76]	; (8019d50 <prvProcessTimerOrBlockTask+0x90>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d101      	bne.n	8019d10 <prvProcessTimerOrBlockTask+0x50>
 8019d0c:	2301      	movs	r3, #1
 8019d0e:	e000      	b.n	8019d12 <prvProcessTimerOrBlockTask+0x52>
 8019d10:	2300      	movs	r3, #0
 8019d12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019d14:	4b0f      	ldr	r3, [pc, #60]	; (8019d54 <prvProcessTimerOrBlockTask+0x94>)
 8019d16:	6818      	ldr	r0, [r3, #0]
 8019d18:	687a      	ldr	r2, [r7, #4]
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	1ad3      	subs	r3, r2, r3
 8019d1e:	683a      	ldr	r2, [r7, #0]
 8019d20:	4619      	mov	r1, r3
 8019d22:	f7fe fd75 	bl	8018810 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019d26:	f7ff f8e1 	bl	8018eec <xTaskResumeAll>
 8019d2a:	4603      	mov	r3, r0
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d10a      	bne.n	8019d46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019d30:	4b09      	ldr	r3, [pc, #36]	; (8019d58 <prvProcessTimerOrBlockTask+0x98>)
 8019d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d36:	601a      	str	r2, [r3, #0]
 8019d38:	f3bf 8f4f 	dsb	sy
 8019d3c:	f3bf 8f6f 	isb	sy
}
 8019d40:	e001      	b.n	8019d46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019d42:	f7ff f8d3 	bl	8018eec <xTaskResumeAll>
}
 8019d46:	bf00      	nop
 8019d48:	3710      	adds	r7, #16
 8019d4a:	46bd      	mov	sp, r7
 8019d4c:	bd80      	pop	{r7, pc}
 8019d4e:	bf00      	nop
 8019d50:	20003c80 	.word	0x20003c80
 8019d54:	20003c84 	.word	0x20003c84
 8019d58:	e000ed04 	.word	0xe000ed04

08019d5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019d5c:	b480      	push	{r7}
 8019d5e:	b085      	sub	sp, #20
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019d64:	4b0e      	ldr	r3, [pc, #56]	; (8019da0 <prvGetNextExpireTime+0x44>)
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d101      	bne.n	8019d72 <prvGetNextExpireTime+0x16>
 8019d6e:	2201      	movs	r2, #1
 8019d70:	e000      	b.n	8019d74 <prvGetNextExpireTime+0x18>
 8019d72:	2200      	movs	r2, #0
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d105      	bne.n	8019d8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019d80:	4b07      	ldr	r3, [pc, #28]	; (8019da0 <prvGetNextExpireTime+0x44>)
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	68db      	ldr	r3, [r3, #12]
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	60fb      	str	r3, [r7, #12]
 8019d8a:	e001      	b.n	8019d90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019d8c:	2300      	movs	r3, #0
 8019d8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019d90:	68fb      	ldr	r3, [r7, #12]
}
 8019d92:	4618      	mov	r0, r3
 8019d94:	3714      	adds	r7, #20
 8019d96:	46bd      	mov	sp, r7
 8019d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d9c:	4770      	bx	lr
 8019d9e:	bf00      	nop
 8019da0:	20003c7c 	.word	0x20003c7c

08019da4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019da4:	b580      	push	{r7, lr}
 8019da6:	b084      	sub	sp, #16
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019dac:	f7ff f93a 	bl	8019024 <xTaskGetTickCount>
 8019db0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019db2:	4b0b      	ldr	r3, [pc, #44]	; (8019de0 <prvSampleTimeNow+0x3c>)
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	68fa      	ldr	r2, [r7, #12]
 8019db8:	429a      	cmp	r2, r3
 8019dba:	d205      	bcs.n	8019dc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019dbc:	f000 f91a 	bl	8019ff4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	2201      	movs	r2, #1
 8019dc4:	601a      	str	r2, [r3, #0]
 8019dc6:	e002      	b.n	8019dce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	2200      	movs	r2, #0
 8019dcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019dce:	4a04      	ldr	r2, [pc, #16]	; (8019de0 <prvSampleTimeNow+0x3c>)
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019dd4:	68fb      	ldr	r3, [r7, #12]
}
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	3710      	adds	r7, #16
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	bd80      	pop	{r7, pc}
 8019dde:	bf00      	nop
 8019de0:	20003c8c 	.word	0x20003c8c

08019de4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	b086      	sub	sp, #24
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	60f8      	str	r0, [r7, #12]
 8019dec:	60b9      	str	r1, [r7, #8]
 8019dee:	607a      	str	r2, [r7, #4]
 8019df0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019df2:	2300      	movs	r3, #0
 8019df4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	68ba      	ldr	r2, [r7, #8]
 8019dfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019dfc:	68fb      	ldr	r3, [r7, #12]
 8019dfe:	68fa      	ldr	r2, [r7, #12]
 8019e00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019e02:	68ba      	ldr	r2, [r7, #8]
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	429a      	cmp	r2, r3
 8019e08:	d812      	bhi.n	8019e30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019e0a:	687a      	ldr	r2, [r7, #4]
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	1ad2      	subs	r2, r2, r3
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	699b      	ldr	r3, [r3, #24]
 8019e14:	429a      	cmp	r2, r3
 8019e16:	d302      	bcc.n	8019e1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019e18:	2301      	movs	r3, #1
 8019e1a:	617b      	str	r3, [r7, #20]
 8019e1c:	e01b      	b.n	8019e56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019e1e:	4b10      	ldr	r3, [pc, #64]	; (8019e60 <prvInsertTimerInActiveList+0x7c>)
 8019e20:	681a      	ldr	r2, [r3, #0]
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	3304      	adds	r3, #4
 8019e26:	4619      	mov	r1, r3
 8019e28:	4610      	mov	r0, r2
 8019e2a:	f7fd fdb2 	bl	8017992 <vListInsert>
 8019e2e:	e012      	b.n	8019e56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019e30:	687a      	ldr	r2, [r7, #4]
 8019e32:	683b      	ldr	r3, [r7, #0]
 8019e34:	429a      	cmp	r2, r3
 8019e36:	d206      	bcs.n	8019e46 <prvInsertTimerInActiveList+0x62>
 8019e38:	68ba      	ldr	r2, [r7, #8]
 8019e3a:	683b      	ldr	r3, [r7, #0]
 8019e3c:	429a      	cmp	r2, r3
 8019e3e:	d302      	bcc.n	8019e46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019e40:	2301      	movs	r3, #1
 8019e42:	617b      	str	r3, [r7, #20]
 8019e44:	e007      	b.n	8019e56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019e46:	4b07      	ldr	r3, [pc, #28]	; (8019e64 <prvInsertTimerInActiveList+0x80>)
 8019e48:	681a      	ldr	r2, [r3, #0]
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	3304      	adds	r3, #4
 8019e4e:	4619      	mov	r1, r3
 8019e50:	4610      	mov	r0, r2
 8019e52:	f7fd fd9e 	bl	8017992 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019e56:	697b      	ldr	r3, [r7, #20]
}
 8019e58:	4618      	mov	r0, r3
 8019e5a:	3718      	adds	r7, #24
 8019e5c:	46bd      	mov	sp, r7
 8019e5e:	bd80      	pop	{r7, pc}
 8019e60:	20003c80 	.word	0x20003c80
 8019e64:	20003c7c 	.word	0x20003c7c

08019e68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019e68:	b580      	push	{r7, lr}
 8019e6a:	b08c      	sub	sp, #48	; 0x30
 8019e6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019e6e:	e0ae      	b.n	8019fce <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019e70:	68bb      	ldr	r3, [r7, #8]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	f2c0 80aa 	blt.w	8019fcc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019e78:	693b      	ldr	r3, [r7, #16]
 8019e7a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e7e:	695b      	ldr	r3, [r3, #20]
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d004      	beq.n	8019e8e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e86:	3304      	adds	r3, #4
 8019e88:	4618      	mov	r0, r3
 8019e8a:	f7fd fdbb 	bl	8017a04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019e8e:	1d3b      	adds	r3, r7, #4
 8019e90:	4618      	mov	r0, r3
 8019e92:	f7ff ff87 	bl	8019da4 <prvSampleTimeNow>
 8019e96:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8019e98:	68bb      	ldr	r3, [r7, #8]
 8019e9a:	2b09      	cmp	r3, #9
 8019e9c:	f200 8097 	bhi.w	8019fce <prvProcessReceivedCommands+0x166>
 8019ea0:	a201      	add	r2, pc, #4	; (adr r2, 8019ea8 <prvProcessReceivedCommands+0x40>)
 8019ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ea6:	bf00      	nop
 8019ea8:	08019ed1 	.word	0x08019ed1
 8019eac:	08019ed1 	.word	0x08019ed1
 8019eb0:	08019ed1 	.word	0x08019ed1
 8019eb4:	08019f45 	.word	0x08019f45
 8019eb8:	08019f59 	.word	0x08019f59
 8019ebc:	08019fa3 	.word	0x08019fa3
 8019ec0:	08019ed1 	.word	0x08019ed1
 8019ec4:	08019ed1 	.word	0x08019ed1
 8019ec8:	08019f45 	.word	0x08019f45
 8019ecc:	08019f59 	.word	0x08019f59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ed6:	f043 0301 	orr.w	r3, r3, #1
 8019eda:	b2da      	uxtb	r2, r3
 8019edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019ee2:	68fa      	ldr	r2, [r7, #12]
 8019ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ee6:	699b      	ldr	r3, [r3, #24]
 8019ee8:	18d1      	adds	r1, r2, r3
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	6a3a      	ldr	r2, [r7, #32]
 8019eee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019ef0:	f7ff ff78 	bl	8019de4 <prvInsertTimerInActiveList>
 8019ef4:	4603      	mov	r3, r0
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d069      	beq.n	8019fce <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019efc:	6a1b      	ldr	r3, [r3, #32]
 8019efe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019f00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019f08:	f003 0304 	and.w	r3, r3, #4
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d05e      	beq.n	8019fce <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019f10:	68fa      	ldr	r2, [r7, #12]
 8019f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f14:	699b      	ldr	r3, [r3, #24]
 8019f16:	441a      	add	r2, r3
 8019f18:	2300      	movs	r3, #0
 8019f1a:	9300      	str	r3, [sp, #0]
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	2100      	movs	r1, #0
 8019f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019f22:	f7ff fe21 	bl	8019b68 <xTimerGenericCommand>
 8019f26:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8019f28:	69fb      	ldr	r3, [r7, #28]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d14f      	bne.n	8019fce <prvProcessReceivedCommands+0x166>
	__asm volatile
 8019f2e:	f04f 0320 	mov.w	r3, #32
 8019f32:	f383 8811 	msr	BASEPRI, r3
 8019f36:	f3bf 8f6f 	isb	sy
 8019f3a:	f3bf 8f4f 	dsb	sy
 8019f3e:	61bb      	str	r3, [r7, #24]
}
 8019f40:	bf00      	nop
 8019f42:	e7fe      	b.n	8019f42 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019f4a:	f023 0301 	bic.w	r3, r3, #1
 8019f4e:	b2da      	uxtb	r2, r3
 8019f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019f56:	e03a      	b.n	8019fce <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019f5e:	f043 0301 	orr.w	r3, r3, #1
 8019f62:	b2da      	uxtb	r2, r3
 8019f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019f6a:	68fa      	ldr	r2, [r7, #12]
 8019f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f72:	699b      	ldr	r3, [r3, #24]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d10a      	bne.n	8019f8e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8019f78:	f04f 0320 	mov.w	r3, #32
 8019f7c:	f383 8811 	msr	BASEPRI, r3
 8019f80:	f3bf 8f6f 	isb	sy
 8019f84:	f3bf 8f4f 	dsb	sy
 8019f88:	617b      	str	r3, [r7, #20]
}
 8019f8a:	bf00      	nop
 8019f8c:	e7fe      	b.n	8019f8c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f90:	699a      	ldr	r2, [r3, #24]
 8019f92:	6a3b      	ldr	r3, [r7, #32]
 8019f94:	18d1      	adds	r1, r2, r3
 8019f96:	6a3b      	ldr	r3, [r7, #32]
 8019f98:	6a3a      	ldr	r2, [r7, #32]
 8019f9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019f9c:	f7ff ff22 	bl	8019de4 <prvInsertTimerInActiveList>
					break;
 8019fa0:	e015      	b.n	8019fce <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019fa8:	f003 0302 	and.w	r3, r3, #2
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d103      	bne.n	8019fb8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8019fb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019fb2:	f000 fbcd 	bl	801a750 <vPortFree>
 8019fb6:	e00a      	b.n	8019fce <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019fbe:	f023 0301 	bic.w	r3, r3, #1
 8019fc2:	b2da      	uxtb	r2, r3
 8019fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019fca:	e000      	b.n	8019fce <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019fcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019fce:	4b08      	ldr	r3, [pc, #32]	; (8019ff0 <prvProcessReceivedCommands+0x188>)
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	f107 0108 	add.w	r1, r7, #8
 8019fd6:	2200      	movs	r2, #0
 8019fd8:	4618      	mov	r0, r3
 8019fda:	f7fe f85b 	bl	8018094 <xQueueReceive>
 8019fde:	4603      	mov	r3, r0
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	f47f af45 	bne.w	8019e70 <prvProcessReceivedCommands+0x8>
	}
}
 8019fe6:	bf00      	nop
 8019fe8:	bf00      	nop
 8019fea:	3728      	adds	r7, #40	; 0x28
 8019fec:	46bd      	mov	sp, r7
 8019fee:	bd80      	pop	{r7, pc}
 8019ff0:	20003c84 	.word	0x20003c84

08019ff4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019ff4:	b580      	push	{r7, lr}
 8019ff6:	b088      	sub	sp, #32
 8019ff8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019ffa:	e048      	b.n	801a08e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019ffc:	4b2d      	ldr	r3, [pc, #180]	; (801a0b4 <prvSwitchTimerLists+0xc0>)
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	68db      	ldr	r3, [r3, #12]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a006:	4b2b      	ldr	r3, [pc, #172]	; (801a0b4 <prvSwitchTimerLists+0xc0>)
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	68db      	ldr	r3, [r3, #12]
 801a00c:	68db      	ldr	r3, [r3, #12]
 801a00e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	3304      	adds	r3, #4
 801a014:	4618      	mov	r0, r3
 801a016:	f7fd fcf5 	bl	8017a04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a01a:	68fb      	ldr	r3, [r7, #12]
 801a01c:	6a1b      	ldr	r3, [r3, #32]
 801a01e:	68f8      	ldr	r0, [r7, #12]
 801a020:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a022:	68fb      	ldr	r3, [r7, #12]
 801a024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a028:	f003 0304 	and.w	r3, r3, #4
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d02e      	beq.n	801a08e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	699b      	ldr	r3, [r3, #24]
 801a034:	693a      	ldr	r2, [r7, #16]
 801a036:	4413      	add	r3, r2
 801a038:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801a03a:	68ba      	ldr	r2, [r7, #8]
 801a03c:	693b      	ldr	r3, [r7, #16]
 801a03e:	429a      	cmp	r2, r3
 801a040:	d90e      	bls.n	801a060 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	68ba      	ldr	r2, [r7, #8]
 801a046:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	68fa      	ldr	r2, [r7, #12]
 801a04c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a04e:	4b19      	ldr	r3, [pc, #100]	; (801a0b4 <prvSwitchTimerLists+0xc0>)
 801a050:	681a      	ldr	r2, [r3, #0]
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	3304      	adds	r3, #4
 801a056:	4619      	mov	r1, r3
 801a058:	4610      	mov	r0, r2
 801a05a:	f7fd fc9a 	bl	8017992 <vListInsert>
 801a05e:	e016      	b.n	801a08e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a060:	2300      	movs	r3, #0
 801a062:	9300      	str	r3, [sp, #0]
 801a064:	2300      	movs	r3, #0
 801a066:	693a      	ldr	r2, [r7, #16]
 801a068:	2100      	movs	r1, #0
 801a06a:	68f8      	ldr	r0, [r7, #12]
 801a06c:	f7ff fd7c 	bl	8019b68 <xTimerGenericCommand>
 801a070:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	2b00      	cmp	r3, #0
 801a076:	d10a      	bne.n	801a08e <prvSwitchTimerLists+0x9a>
	__asm volatile
 801a078:	f04f 0320 	mov.w	r3, #32
 801a07c:	f383 8811 	msr	BASEPRI, r3
 801a080:	f3bf 8f6f 	isb	sy
 801a084:	f3bf 8f4f 	dsb	sy
 801a088:	603b      	str	r3, [r7, #0]
}
 801a08a:	bf00      	nop
 801a08c:	e7fe      	b.n	801a08c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a08e:	4b09      	ldr	r3, [pc, #36]	; (801a0b4 <prvSwitchTimerLists+0xc0>)
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	2b00      	cmp	r3, #0
 801a096:	d1b1      	bne.n	8019ffc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801a098:	4b06      	ldr	r3, [pc, #24]	; (801a0b4 <prvSwitchTimerLists+0xc0>)
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801a09e:	4b06      	ldr	r3, [pc, #24]	; (801a0b8 <prvSwitchTimerLists+0xc4>)
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	4a04      	ldr	r2, [pc, #16]	; (801a0b4 <prvSwitchTimerLists+0xc0>)
 801a0a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801a0a6:	4a04      	ldr	r2, [pc, #16]	; (801a0b8 <prvSwitchTimerLists+0xc4>)
 801a0a8:	697b      	ldr	r3, [r7, #20]
 801a0aa:	6013      	str	r3, [r2, #0]
}
 801a0ac:	bf00      	nop
 801a0ae:	3718      	adds	r7, #24
 801a0b0:	46bd      	mov	sp, r7
 801a0b2:	bd80      	pop	{r7, pc}
 801a0b4:	20003c7c 	.word	0x20003c7c
 801a0b8:	20003c80 	.word	0x20003c80

0801a0bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a0c0:	f000 f960 	bl	801a384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a0c4:	4b12      	ldr	r3, [pc, #72]	; (801a110 <prvCheckForValidListAndQueue+0x54>)
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d11d      	bne.n	801a108 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 801a0cc:	4811      	ldr	r0, [pc, #68]	; (801a114 <prvCheckForValidListAndQueue+0x58>)
 801a0ce:	f7fd fc0f 	bl	80178f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a0d2:	4811      	ldr	r0, [pc, #68]	; (801a118 <prvCheckForValidListAndQueue+0x5c>)
 801a0d4:	f7fd fc0c 	bl	80178f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a0d8:	4b10      	ldr	r3, [pc, #64]	; (801a11c <prvCheckForValidListAndQueue+0x60>)
 801a0da:	4a0e      	ldr	r2, [pc, #56]	; (801a114 <prvCheckForValidListAndQueue+0x58>)
 801a0dc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a0de:	4b10      	ldr	r3, [pc, #64]	; (801a120 <prvCheckForValidListAndQueue+0x64>)
 801a0e0:	4a0d      	ldr	r2, [pc, #52]	; (801a118 <prvCheckForValidListAndQueue+0x5c>)
 801a0e2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801a0e4:	2200      	movs	r2, #0
 801a0e6:	210c      	movs	r1, #12
 801a0e8:	2064      	movs	r0, #100	; 0x64
 801a0ea:	f7fd fd1d 	bl	8017b28 <xQueueGenericCreate>
 801a0ee:	4603      	mov	r3, r0
 801a0f0:	4a07      	ldr	r2, [pc, #28]	; (801a110 <prvCheckForValidListAndQueue+0x54>)
 801a0f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801a0f4:	4b06      	ldr	r3, [pc, #24]	; (801a110 <prvCheckForValidListAndQueue+0x54>)
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d005      	beq.n	801a108 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a0fc:	4b04      	ldr	r3, [pc, #16]	; (801a110 <prvCheckForValidListAndQueue+0x54>)
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	4908      	ldr	r1, [pc, #32]	; (801a124 <prvCheckForValidListAndQueue+0x68>)
 801a102:	4618      	mov	r0, r3
 801a104:	f7fe fb5a 	bl	80187bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a108:	f000 f96c 	bl	801a3e4 <vPortExitCritical>
}
 801a10c:	bf00      	nop
 801a10e:	bd80      	pop	{r7, pc}
 801a110:	20003c84 	.word	0x20003c84
 801a114:	20003c54 	.word	0x20003c54
 801a118:	20003c68 	.word	0x20003c68
 801a11c:	20003c7c 	.word	0x20003c7c
 801a120:	20003c80 	.word	0x20003c80
 801a124:	080227b8 	.word	0x080227b8

0801a128 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a128:	b480      	push	{r7}
 801a12a:	b085      	sub	sp, #20
 801a12c:	af00      	add	r7, sp, #0
 801a12e:	60f8      	str	r0, [r7, #12]
 801a130:	60b9      	str	r1, [r7, #8]
 801a132:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	3b04      	subs	r3, #4
 801a138:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a140:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a142:	68fb      	ldr	r3, [r7, #12]
 801a144:	3b04      	subs	r3, #4
 801a146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a148:	68bb      	ldr	r3, [r7, #8]
 801a14a:	f023 0201 	bic.w	r2, r3, #1
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	3b04      	subs	r3, #4
 801a156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a158:	4a0c      	ldr	r2, [pc, #48]	; (801a18c <pxPortInitialiseStack+0x64>)
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	3b14      	subs	r3, #20
 801a162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a164:	687a      	ldr	r2, [r7, #4]
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	3b04      	subs	r3, #4
 801a16e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	f06f 0202 	mvn.w	r2, #2
 801a176:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	3b20      	subs	r3, #32
 801a17c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a17e:	68fb      	ldr	r3, [r7, #12]
}
 801a180:	4618      	mov	r0, r3
 801a182:	3714      	adds	r7, #20
 801a184:	46bd      	mov	sp, r7
 801a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a18a:	4770      	bx	lr
 801a18c:	0801a191 	.word	0x0801a191

0801a190 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a190:	b480      	push	{r7}
 801a192:	b085      	sub	sp, #20
 801a194:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a196:	2300      	movs	r3, #0
 801a198:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a19a:	4b12      	ldr	r3, [pc, #72]	; (801a1e4 <prvTaskExitError+0x54>)
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1a2:	d00a      	beq.n	801a1ba <prvTaskExitError+0x2a>
	__asm volatile
 801a1a4:	f04f 0320 	mov.w	r3, #32
 801a1a8:	f383 8811 	msr	BASEPRI, r3
 801a1ac:	f3bf 8f6f 	isb	sy
 801a1b0:	f3bf 8f4f 	dsb	sy
 801a1b4:	60fb      	str	r3, [r7, #12]
}
 801a1b6:	bf00      	nop
 801a1b8:	e7fe      	b.n	801a1b8 <prvTaskExitError+0x28>
	__asm volatile
 801a1ba:	f04f 0320 	mov.w	r3, #32
 801a1be:	f383 8811 	msr	BASEPRI, r3
 801a1c2:	f3bf 8f6f 	isb	sy
 801a1c6:	f3bf 8f4f 	dsb	sy
 801a1ca:	60bb      	str	r3, [r7, #8]
}
 801a1cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a1ce:	bf00      	nop
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d0fc      	beq.n	801a1d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a1d6:	bf00      	nop
 801a1d8:	bf00      	nop
 801a1da:	3714      	adds	r7, #20
 801a1dc:	46bd      	mov	sp, r7
 801a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e2:	4770      	bx	lr
 801a1e4:	20000080 	.word	0x20000080
	...

0801a1f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801a1f0:	4b07      	ldr	r3, [pc, #28]	; (801a210 <pxCurrentTCBConst2>)
 801a1f2:	6819      	ldr	r1, [r3, #0]
 801a1f4:	6808      	ldr	r0, [r1, #0]
 801a1f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1fa:	f380 8809 	msr	PSP, r0
 801a1fe:	f3bf 8f6f 	isb	sy
 801a202:	f04f 0000 	mov.w	r0, #0
 801a206:	f380 8811 	msr	BASEPRI, r0
 801a20a:	4770      	bx	lr
 801a20c:	f3af 8000 	nop.w

0801a210 <pxCurrentTCBConst2>:
 801a210:	20003b28 	.word	0x20003b28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801a214:	bf00      	nop
 801a216:	bf00      	nop

0801a218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a218:	4808      	ldr	r0, [pc, #32]	; (801a23c <prvPortStartFirstTask+0x24>)
 801a21a:	6800      	ldr	r0, [r0, #0]
 801a21c:	6800      	ldr	r0, [r0, #0]
 801a21e:	f380 8808 	msr	MSP, r0
 801a222:	f04f 0000 	mov.w	r0, #0
 801a226:	f380 8814 	msr	CONTROL, r0
 801a22a:	b662      	cpsie	i
 801a22c:	b661      	cpsie	f
 801a22e:	f3bf 8f4f 	dsb	sy
 801a232:	f3bf 8f6f 	isb	sy
 801a236:	df00      	svc	0
 801a238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a23a:	bf00      	nop
 801a23c:	e000ed08 	.word	0xe000ed08

0801a240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b086      	sub	sp, #24
 801a244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a246:	4b46      	ldr	r3, [pc, #280]	; (801a360 <xPortStartScheduler+0x120>)
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	4a46      	ldr	r2, [pc, #280]	; (801a364 <xPortStartScheduler+0x124>)
 801a24c:	4293      	cmp	r3, r2
 801a24e:	d10a      	bne.n	801a266 <xPortStartScheduler+0x26>
	__asm volatile
 801a250:	f04f 0320 	mov.w	r3, #32
 801a254:	f383 8811 	msr	BASEPRI, r3
 801a258:	f3bf 8f6f 	isb	sy
 801a25c:	f3bf 8f4f 	dsb	sy
 801a260:	613b      	str	r3, [r7, #16]
}
 801a262:	bf00      	nop
 801a264:	e7fe      	b.n	801a264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a266:	4b3e      	ldr	r3, [pc, #248]	; (801a360 <xPortStartScheduler+0x120>)
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	4a3f      	ldr	r2, [pc, #252]	; (801a368 <xPortStartScheduler+0x128>)
 801a26c:	4293      	cmp	r3, r2
 801a26e:	d10a      	bne.n	801a286 <xPortStartScheduler+0x46>
	__asm volatile
 801a270:	f04f 0320 	mov.w	r3, #32
 801a274:	f383 8811 	msr	BASEPRI, r3
 801a278:	f3bf 8f6f 	isb	sy
 801a27c:	f3bf 8f4f 	dsb	sy
 801a280:	60fb      	str	r3, [r7, #12]
}
 801a282:	bf00      	nop
 801a284:	e7fe      	b.n	801a284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a286:	4b39      	ldr	r3, [pc, #228]	; (801a36c <xPortStartScheduler+0x12c>)
 801a288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a28a:	697b      	ldr	r3, [r7, #20]
 801a28c:	781b      	ldrb	r3, [r3, #0]
 801a28e:	b2db      	uxtb	r3, r3
 801a290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a292:	697b      	ldr	r3, [r7, #20]
 801a294:	22ff      	movs	r2, #255	; 0xff
 801a296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a298:	697b      	ldr	r3, [r7, #20]
 801a29a:	781b      	ldrb	r3, [r3, #0]
 801a29c:	b2db      	uxtb	r3, r3
 801a29e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a2a0:	78fb      	ldrb	r3, [r7, #3]
 801a2a2:	b2db      	uxtb	r3, r3
 801a2a4:	f003 0320 	and.w	r3, r3, #32
 801a2a8:	b2da      	uxtb	r2, r3
 801a2aa:	4b31      	ldr	r3, [pc, #196]	; (801a370 <xPortStartScheduler+0x130>)
 801a2ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a2ae:	4b31      	ldr	r3, [pc, #196]	; (801a374 <xPortStartScheduler+0x134>)
 801a2b0:	2207      	movs	r2, #7
 801a2b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a2b4:	e009      	b.n	801a2ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801a2b6:	4b2f      	ldr	r3, [pc, #188]	; (801a374 <xPortStartScheduler+0x134>)
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	3b01      	subs	r3, #1
 801a2bc:	4a2d      	ldr	r2, [pc, #180]	; (801a374 <xPortStartScheduler+0x134>)
 801a2be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a2c0:	78fb      	ldrb	r3, [r7, #3]
 801a2c2:	b2db      	uxtb	r3, r3
 801a2c4:	005b      	lsls	r3, r3, #1
 801a2c6:	b2db      	uxtb	r3, r3
 801a2c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a2ca:	78fb      	ldrb	r3, [r7, #3]
 801a2cc:	b2db      	uxtb	r3, r3
 801a2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a2d2:	2b80      	cmp	r3, #128	; 0x80
 801a2d4:	d0ef      	beq.n	801a2b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a2d6:	4b27      	ldr	r3, [pc, #156]	; (801a374 <xPortStartScheduler+0x134>)
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	f1c3 0307 	rsb	r3, r3, #7
 801a2de:	2b04      	cmp	r3, #4
 801a2e0:	d00a      	beq.n	801a2f8 <xPortStartScheduler+0xb8>
	__asm volatile
 801a2e2:	f04f 0320 	mov.w	r3, #32
 801a2e6:	f383 8811 	msr	BASEPRI, r3
 801a2ea:	f3bf 8f6f 	isb	sy
 801a2ee:	f3bf 8f4f 	dsb	sy
 801a2f2:	60bb      	str	r3, [r7, #8]
}
 801a2f4:	bf00      	nop
 801a2f6:	e7fe      	b.n	801a2f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a2f8:	4b1e      	ldr	r3, [pc, #120]	; (801a374 <xPortStartScheduler+0x134>)
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	021b      	lsls	r3, r3, #8
 801a2fe:	4a1d      	ldr	r2, [pc, #116]	; (801a374 <xPortStartScheduler+0x134>)
 801a300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a302:	4b1c      	ldr	r3, [pc, #112]	; (801a374 <xPortStartScheduler+0x134>)
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a30a:	4a1a      	ldr	r2, [pc, #104]	; (801a374 <xPortStartScheduler+0x134>)
 801a30c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	b2da      	uxtb	r2, r3
 801a312:	697b      	ldr	r3, [r7, #20]
 801a314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a316:	4b18      	ldr	r3, [pc, #96]	; (801a378 <xPortStartScheduler+0x138>)
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	4a17      	ldr	r2, [pc, #92]	; (801a378 <xPortStartScheduler+0x138>)
 801a31c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a322:	4b15      	ldr	r3, [pc, #84]	; (801a378 <xPortStartScheduler+0x138>)
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	4a14      	ldr	r2, [pc, #80]	; (801a378 <xPortStartScheduler+0x138>)
 801a328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a32c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a32e:	f000 f8dd 	bl	801a4ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a332:	4b12      	ldr	r3, [pc, #72]	; (801a37c <xPortStartScheduler+0x13c>)
 801a334:	2200      	movs	r2, #0
 801a336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a338:	f000 f8fc 	bl	801a534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a33c:	4b10      	ldr	r3, [pc, #64]	; (801a380 <xPortStartScheduler+0x140>)
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	4a0f      	ldr	r2, [pc, #60]	; (801a380 <xPortStartScheduler+0x140>)
 801a342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a348:	f7ff ff66 	bl	801a218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a34c:	f7fe ff4e 	bl	80191ec <vTaskSwitchContext>
	prvTaskExitError();
 801a350:	f7ff ff1e 	bl	801a190 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a354:	2300      	movs	r3, #0
}
 801a356:	4618      	mov	r0, r3
 801a358:	3718      	adds	r7, #24
 801a35a:	46bd      	mov	sp, r7
 801a35c:	bd80      	pop	{r7, pc}
 801a35e:	bf00      	nop
 801a360:	e000ed00 	.word	0xe000ed00
 801a364:	410fc271 	.word	0x410fc271
 801a368:	410fc270 	.word	0x410fc270
 801a36c:	e000e400 	.word	0xe000e400
 801a370:	20003c90 	.word	0x20003c90
 801a374:	20003c94 	.word	0x20003c94
 801a378:	e000ed20 	.word	0xe000ed20
 801a37c:	20000080 	.word	0x20000080
 801a380:	e000ef34 	.word	0xe000ef34

0801a384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a384:	b480      	push	{r7}
 801a386:	b083      	sub	sp, #12
 801a388:	af00      	add	r7, sp, #0
	__asm volatile
 801a38a:	f04f 0320 	mov.w	r3, #32
 801a38e:	f383 8811 	msr	BASEPRI, r3
 801a392:	f3bf 8f6f 	isb	sy
 801a396:	f3bf 8f4f 	dsb	sy
 801a39a:	607b      	str	r3, [r7, #4]
}
 801a39c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a39e:	4b0f      	ldr	r3, [pc, #60]	; (801a3dc <vPortEnterCritical+0x58>)
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	3301      	adds	r3, #1
 801a3a4:	4a0d      	ldr	r2, [pc, #52]	; (801a3dc <vPortEnterCritical+0x58>)
 801a3a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a3a8:	4b0c      	ldr	r3, [pc, #48]	; (801a3dc <vPortEnterCritical+0x58>)
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	2b01      	cmp	r3, #1
 801a3ae:	d10f      	bne.n	801a3d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a3b0:	4b0b      	ldr	r3, [pc, #44]	; (801a3e0 <vPortEnterCritical+0x5c>)
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	b2db      	uxtb	r3, r3
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d00a      	beq.n	801a3d0 <vPortEnterCritical+0x4c>
	__asm volatile
 801a3ba:	f04f 0320 	mov.w	r3, #32
 801a3be:	f383 8811 	msr	BASEPRI, r3
 801a3c2:	f3bf 8f6f 	isb	sy
 801a3c6:	f3bf 8f4f 	dsb	sy
 801a3ca:	603b      	str	r3, [r7, #0]
}
 801a3cc:	bf00      	nop
 801a3ce:	e7fe      	b.n	801a3ce <vPortEnterCritical+0x4a>
	}
}
 801a3d0:	bf00      	nop
 801a3d2:	370c      	adds	r7, #12
 801a3d4:	46bd      	mov	sp, r7
 801a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3da:	4770      	bx	lr
 801a3dc:	20000080 	.word	0x20000080
 801a3e0:	e000ed04 	.word	0xe000ed04

0801a3e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a3e4:	b480      	push	{r7}
 801a3e6:	b083      	sub	sp, #12
 801a3e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a3ea:	4b12      	ldr	r3, [pc, #72]	; (801a434 <vPortExitCritical+0x50>)
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d10a      	bne.n	801a408 <vPortExitCritical+0x24>
	__asm volatile
 801a3f2:	f04f 0320 	mov.w	r3, #32
 801a3f6:	f383 8811 	msr	BASEPRI, r3
 801a3fa:	f3bf 8f6f 	isb	sy
 801a3fe:	f3bf 8f4f 	dsb	sy
 801a402:	607b      	str	r3, [r7, #4]
}
 801a404:	bf00      	nop
 801a406:	e7fe      	b.n	801a406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a408:	4b0a      	ldr	r3, [pc, #40]	; (801a434 <vPortExitCritical+0x50>)
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	3b01      	subs	r3, #1
 801a40e:	4a09      	ldr	r2, [pc, #36]	; (801a434 <vPortExitCritical+0x50>)
 801a410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a412:	4b08      	ldr	r3, [pc, #32]	; (801a434 <vPortExitCritical+0x50>)
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	2b00      	cmp	r3, #0
 801a418:	d105      	bne.n	801a426 <vPortExitCritical+0x42>
 801a41a:	2300      	movs	r3, #0
 801a41c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a41e:	683b      	ldr	r3, [r7, #0]
 801a420:	f383 8811 	msr	BASEPRI, r3
}
 801a424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a426:	bf00      	nop
 801a428:	370c      	adds	r7, #12
 801a42a:	46bd      	mov	sp, r7
 801a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a430:	4770      	bx	lr
 801a432:	bf00      	nop
 801a434:	20000080 	.word	0x20000080
	...

0801a440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a440:	f3ef 8009 	mrs	r0, PSP
 801a444:	f3bf 8f6f 	isb	sy
 801a448:	4b15      	ldr	r3, [pc, #84]	; (801a4a0 <pxCurrentTCBConst>)
 801a44a:	681a      	ldr	r2, [r3, #0]
 801a44c:	f01e 0f10 	tst.w	lr, #16
 801a450:	bf08      	it	eq
 801a452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a45a:	6010      	str	r0, [r2, #0]
 801a45c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a460:	f04f 0020 	mov.w	r0, #32
 801a464:	f380 8811 	msr	BASEPRI, r0
 801a468:	f3bf 8f4f 	dsb	sy
 801a46c:	f3bf 8f6f 	isb	sy
 801a470:	f7fe febc 	bl	80191ec <vTaskSwitchContext>
 801a474:	f04f 0000 	mov.w	r0, #0
 801a478:	f380 8811 	msr	BASEPRI, r0
 801a47c:	bc09      	pop	{r0, r3}
 801a47e:	6819      	ldr	r1, [r3, #0]
 801a480:	6808      	ldr	r0, [r1, #0]
 801a482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a486:	f01e 0f10 	tst.w	lr, #16
 801a48a:	bf08      	it	eq
 801a48c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a490:	f380 8809 	msr	PSP, r0
 801a494:	f3bf 8f6f 	isb	sy
 801a498:	4770      	bx	lr
 801a49a:	bf00      	nop
 801a49c:	f3af 8000 	nop.w

0801a4a0 <pxCurrentTCBConst>:
 801a4a0:	20003b28 	.word	0x20003b28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a4a4:	bf00      	nop
 801a4a6:	bf00      	nop

0801a4a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a4a8:	b580      	push	{r7, lr}
 801a4aa:	b082      	sub	sp, #8
 801a4ac:	af00      	add	r7, sp, #0
	__asm volatile
 801a4ae:	f04f 0320 	mov.w	r3, #32
 801a4b2:	f383 8811 	msr	BASEPRI, r3
 801a4b6:	f3bf 8f6f 	isb	sy
 801a4ba:	f3bf 8f4f 	dsb	sy
 801a4be:	607b      	str	r3, [r7, #4]
}
 801a4c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a4c2:	f7fe fdbf 	bl	8019044 <xTaskIncrementTick>
 801a4c6:	4603      	mov	r3, r0
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d003      	beq.n	801a4d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a4cc:	4b06      	ldr	r3, [pc, #24]	; (801a4e8 <xPortSysTickHandler+0x40>)
 801a4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a4d2:	601a      	str	r2, [r3, #0]
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a4d8:	683b      	ldr	r3, [r7, #0]
 801a4da:	f383 8811 	msr	BASEPRI, r3
}
 801a4de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a4e0:	bf00      	nop
 801a4e2:	3708      	adds	r7, #8
 801a4e4:	46bd      	mov	sp, r7
 801a4e6:	bd80      	pop	{r7, pc}
 801a4e8:	e000ed04 	.word	0xe000ed04

0801a4ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a4ec:	b480      	push	{r7}
 801a4ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a4f0:	4b0b      	ldr	r3, [pc, #44]	; (801a520 <vPortSetupTimerInterrupt+0x34>)
 801a4f2:	2200      	movs	r2, #0
 801a4f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a4f6:	4b0b      	ldr	r3, [pc, #44]	; (801a524 <vPortSetupTimerInterrupt+0x38>)
 801a4f8:	2200      	movs	r2, #0
 801a4fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a4fc:	4b0a      	ldr	r3, [pc, #40]	; (801a528 <vPortSetupTimerInterrupt+0x3c>)
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	4a0a      	ldr	r2, [pc, #40]	; (801a52c <vPortSetupTimerInterrupt+0x40>)
 801a502:	fba2 2303 	umull	r2, r3, r2, r3
 801a506:	099b      	lsrs	r3, r3, #6
 801a508:	4a09      	ldr	r2, [pc, #36]	; (801a530 <vPortSetupTimerInterrupt+0x44>)
 801a50a:	3b01      	subs	r3, #1
 801a50c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a50e:	4b04      	ldr	r3, [pc, #16]	; (801a520 <vPortSetupTimerInterrupt+0x34>)
 801a510:	2207      	movs	r2, #7
 801a512:	601a      	str	r2, [r3, #0]
}
 801a514:	bf00      	nop
 801a516:	46bd      	mov	sp, r7
 801a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a51c:	4770      	bx	lr
 801a51e:	bf00      	nop
 801a520:	e000e010 	.word	0xe000e010
 801a524:	e000e018 	.word	0xe000e018
 801a528:	20000038 	.word	0x20000038
 801a52c:	10624dd3 	.word	0x10624dd3
 801a530:	e000e014 	.word	0xe000e014

0801a534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a544 <vPortEnableVFP+0x10>
 801a538:	6801      	ldr	r1, [r0, #0]
 801a53a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a53e:	6001      	str	r1, [r0, #0]
 801a540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a542:	bf00      	nop
 801a544:	e000ed88 	.word	0xe000ed88

0801a548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a548:	b480      	push	{r7}
 801a54a:	b085      	sub	sp, #20
 801a54c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a54e:	f3ef 8305 	mrs	r3, IPSR
 801a552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	2b0f      	cmp	r3, #15
 801a558:	d914      	bls.n	801a584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a55a:	4a17      	ldr	r2, [pc, #92]	; (801a5b8 <vPortValidateInterruptPriority+0x70>)
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	4413      	add	r3, r2
 801a560:	781b      	ldrb	r3, [r3, #0]
 801a562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a564:	4b15      	ldr	r3, [pc, #84]	; (801a5bc <vPortValidateInterruptPriority+0x74>)
 801a566:	781b      	ldrb	r3, [r3, #0]
 801a568:	7afa      	ldrb	r2, [r7, #11]
 801a56a:	429a      	cmp	r2, r3
 801a56c:	d20a      	bcs.n	801a584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a56e:	f04f 0320 	mov.w	r3, #32
 801a572:	f383 8811 	msr	BASEPRI, r3
 801a576:	f3bf 8f6f 	isb	sy
 801a57a:	f3bf 8f4f 	dsb	sy
 801a57e:	607b      	str	r3, [r7, #4]
}
 801a580:	bf00      	nop
 801a582:	e7fe      	b.n	801a582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a584:	4b0e      	ldr	r3, [pc, #56]	; (801a5c0 <vPortValidateInterruptPriority+0x78>)
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a58c:	4b0d      	ldr	r3, [pc, #52]	; (801a5c4 <vPortValidateInterruptPriority+0x7c>)
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	429a      	cmp	r2, r3
 801a592:	d90a      	bls.n	801a5aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a594:	f04f 0320 	mov.w	r3, #32
 801a598:	f383 8811 	msr	BASEPRI, r3
 801a59c:	f3bf 8f6f 	isb	sy
 801a5a0:	f3bf 8f4f 	dsb	sy
 801a5a4:	603b      	str	r3, [r7, #0]
}
 801a5a6:	bf00      	nop
 801a5a8:	e7fe      	b.n	801a5a8 <vPortValidateInterruptPriority+0x60>
	}
 801a5aa:	bf00      	nop
 801a5ac:	3714      	adds	r7, #20
 801a5ae:	46bd      	mov	sp, r7
 801a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b4:	4770      	bx	lr
 801a5b6:	bf00      	nop
 801a5b8:	e000e3f0 	.word	0xe000e3f0
 801a5bc:	20003c90 	.word	0x20003c90
 801a5c0:	e000ed0c 	.word	0xe000ed0c
 801a5c4:	20003c94 	.word	0x20003c94

0801a5c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b08a      	sub	sp, #40	; 0x28
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a5d4:	f7fe fc7c 	bl	8018ed0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a5d8:	4b58      	ldr	r3, [pc, #352]	; (801a73c <pvPortMalloc+0x174>)
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d101      	bne.n	801a5e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a5e0:	f000 f910 	bl	801a804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a5e4:	4b56      	ldr	r3, [pc, #344]	; (801a740 <pvPortMalloc+0x178>)
 801a5e6:	681a      	ldr	r2, [r3, #0]
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	4013      	ands	r3, r2
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	f040 808e 	bne.w	801a70e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d01d      	beq.n	801a634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a5f8:	2208      	movs	r2, #8
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	4413      	add	r3, r2
 801a5fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	f003 0307 	and.w	r3, r3, #7
 801a606:	2b00      	cmp	r3, #0
 801a608:	d014      	beq.n	801a634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	f023 0307 	bic.w	r3, r3, #7
 801a610:	3308      	adds	r3, #8
 801a612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	f003 0307 	and.w	r3, r3, #7
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d00a      	beq.n	801a634 <pvPortMalloc+0x6c>
	__asm volatile
 801a61e:	f04f 0320 	mov.w	r3, #32
 801a622:	f383 8811 	msr	BASEPRI, r3
 801a626:	f3bf 8f6f 	isb	sy
 801a62a:	f3bf 8f4f 	dsb	sy
 801a62e:	617b      	str	r3, [r7, #20]
}
 801a630:	bf00      	nop
 801a632:	e7fe      	b.n	801a632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d069      	beq.n	801a70e <pvPortMalloc+0x146>
 801a63a:	4b42      	ldr	r3, [pc, #264]	; (801a744 <pvPortMalloc+0x17c>)
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	687a      	ldr	r2, [r7, #4]
 801a640:	429a      	cmp	r2, r3
 801a642:	d864      	bhi.n	801a70e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a644:	4b40      	ldr	r3, [pc, #256]	; (801a748 <pvPortMalloc+0x180>)
 801a646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a648:	4b3f      	ldr	r3, [pc, #252]	; (801a748 <pvPortMalloc+0x180>)
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a64e:	e004      	b.n	801a65a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a65c:	685b      	ldr	r3, [r3, #4]
 801a65e:	687a      	ldr	r2, [r7, #4]
 801a660:	429a      	cmp	r2, r3
 801a662:	d903      	bls.n	801a66c <pvPortMalloc+0xa4>
 801a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d1f1      	bne.n	801a650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a66c:	4b33      	ldr	r3, [pc, #204]	; (801a73c <pvPortMalloc+0x174>)
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a672:	429a      	cmp	r2, r3
 801a674:	d04b      	beq.n	801a70e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a676:	6a3b      	ldr	r3, [r7, #32]
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	2208      	movs	r2, #8
 801a67c:	4413      	add	r3, r2
 801a67e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a682:	681a      	ldr	r2, [r3, #0]
 801a684:	6a3b      	ldr	r3, [r7, #32]
 801a686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a68a:	685a      	ldr	r2, [r3, #4]
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	1ad2      	subs	r2, r2, r3
 801a690:	2308      	movs	r3, #8
 801a692:	005b      	lsls	r3, r3, #1
 801a694:	429a      	cmp	r2, r3
 801a696:	d91f      	bls.n	801a6d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	4413      	add	r3, r2
 801a69e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a6a0:	69bb      	ldr	r3, [r7, #24]
 801a6a2:	f003 0307 	and.w	r3, r3, #7
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d00a      	beq.n	801a6c0 <pvPortMalloc+0xf8>
	__asm volatile
 801a6aa:	f04f 0320 	mov.w	r3, #32
 801a6ae:	f383 8811 	msr	BASEPRI, r3
 801a6b2:	f3bf 8f6f 	isb	sy
 801a6b6:	f3bf 8f4f 	dsb	sy
 801a6ba:	613b      	str	r3, [r7, #16]
}
 801a6bc:	bf00      	nop
 801a6be:	e7fe      	b.n	801a6be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6c2:	685a      	ldr	r2, [r3, #4]
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	1ad2      	subs	r2, r2, r3
 801a6c8:	69bb      	ldr	r3, [r7, #24]
 801a6ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6ce:	687a      	ldr	r2, [r7, #4]
 801a6d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a6d2:	69b8      	ldr	r0, [r7, #24]
 801a6d4:	f000 f8f8 	bl	801a8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a6d8:	4b1a      	ldr	r3, [pc, #104]	; (801a744 <pvPortMalloc+0x17c>)
 801a6da:	681a      	ldr	r2, [r3, #0]
 801a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6de:	685b      	ldr	r3, [r3, #4]
 801a6e0:	1ad3      	subs	r3, r2, r3
 801a6e2:	4a18      	ldr	r2, [pc, #96]	; (801a744 <pvPortMalloc+0x17c>)
 801a6e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a6e6:	4b17      	ldr	r3, [pc, #92]	; (801a744 <pvPortMalloc+0x17c>)
 801a6e8:	681a      	ldr	r2, [r3, #0]
 801a6ea:	4b18      	ldr	r3, [pc, #96]	; (801a74c <pvPortMalloc+0x184>)
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	429a      	cmp	r2, r3
 801a6f0:	d203      	bcs.n	801a6fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a6f2:	4b14      	ldr	r3, [pc, #80]	; (801a744 <pvPortMalloc+0x17c>)
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	4a15      	ldr	r2, [pc, #84]	; (801a74c <pvPortMalloc+0x184>)
 801a6f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6fc:	685a      	ldr	r2, [r3, #4]
 801a6fe:	4b10      	ldr	r3, [pc, #64]	; (801a740 <pvPortMalloc+0x178>)
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	431a      	orrs	r2, r3
 801a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a70a:	2200      	movs	r2, #0
 801a70c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a70e:	f7fe fbed 	bl	8018eec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a712:	69fb      	ldr	r3, [r7, #28]
 801a714:	f003 0307 	and.w	r3, r3, #7
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d00a      	beq.n	801a732 <pvPortMalloc+0x16a>
	__asm volatile
 801a71c:	f04f 0320 	mov.w	r3, #32
 801a720:	f383 8811 	msr	BASEPRI, r3
 801a724:	f3bf 8f6f 	isb	sy
 801a728:	f3bf 8f4f 	dsb	sy
 801a72c:	60fb      	str	r3, [r7, #12]
}
 801a72e:	bf00      	nop
 801a730:	e7fe      	b.n	801a730 <pvPortMalloc+0x168>
	return pvReturn;
 801a732:	69fb      	ldr	r3, [r7, #28]
}
 801a734:	4618      	mov	r0, r3
 801a736:	3728      	adds	r7, #40	; 0x28
 801a738:	46bd      	mov	sp, r7
 801a73a:	bd80      	pop	{r7, pc}
 801a73c:	20012ca0 	.word	0x20012ca0
 801a740:	20012cac 	.word	0x20012cac
 801a744:	20012ca4 	.word	0x20012ca4
 801a748:	20012c98 	.word	0x20012c98
 801a74c:	20012ca8 	.word	0x20012ca8

0801a750 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a750:	b580      	push	{r7, lr}
 801a752:	b086      	sub	sp, #24
 801a754:	af00      	add	r7, sp, #0
 801a756:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d048      	beq.n	801a7f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a762:	2308      	movs	r3, #8
 801a764:	425b      	negs	r3, r3
 801a766:	697a      	ldr	r2, [r7, #20]
 801a768:	4413      	add	r3, r2
 801a76a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a76c:	697b      	ldr	r3, [r7, #20]
 801a76e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a770:	693b      	ldr	r3, [r7, #16]
 801a772:	685a      	ldr	r2, [r3, #4]
 801a774:	4b21      	ldr	r3, [pc, #132]	; (801a7fc <vPortFree+0xac>)
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	4013      	ands	r3, r2
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d10a      	bne.n	801a794 <vPortFree+0x44>
	__asm volatile
 801a77e:	f04f 0320 	mov.w	r3, #32
 801a782:	f383 8811 	msr	BASEPRI, r3
 801a786:	f3bf 8f6f 	isb	sy
 801a78a:	f3bf 8f4f 	dsb	sy
 801a78e:	60fb      	str	r3, [r7, #12]
}
 801a790:	bf00      	nop
 801a792:	e7fe      	b.n	801a792 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a794:	693b      	ldr	r3, [r7, #16]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d00a      	beq.n	801a7b2 <vPortFree+0x62>
	__asm volatile
 801a79c:	f04f 0320 	mov.w	r3, #32
 801a7a0:	f383 8811 	msr	BASEPRI, r3
 801a7a4:	f3bf 8f6f 	isb	sy
 801a7a8:	f3bf 8f4f 	dsb	sy
 801a7ac:	60bb      	str	r3, [r7, #8]
}
 801a7ae:	bf00      	nop
 801a7b0:	e7fe      	b.n	801a7b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a7b2:	693b      	ldr	r3, [r7, #16]
 801a7b4:	685a      	ldr	r2, [r3, #4]
 801a7b6:	4b11      	ldr	r3, [pc, #68]	; (801a7fc <vPortFree+0xac>)
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	4013      	ands	r3, r2
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d019      	beq.n	801a7f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a7c0:	693b      	ldr	r3, [r7, #16]
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d115      	bne.n	801a7f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a7c8:	693b      	ldr	r3, [r7, #16]
 801a7ca:	685a      	ldr	r2, [r3, #4]
 801a7cc:	4b0b      	ldr	r3, [pc, #44]	; (801a7fc <vPortFree+0xac>)
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	43db      	mvns	r3, r3
 801a7d2:	401a      	ands	r2, r3
 801a7d4:	693b      	ldr	r3, [r7, #16]
 801a7d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a7d8:	f7fe fb7a 	bl	8018ed0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a7dc:	693b      	ldr	r3, [r7, #16]
 801a7de:	685a      	ldr	r2, [r3, #4]
 801a7e0:	4b07      	ldr	r3, [pc, #28]	; (801a800 <vPortFree+0xb0>)
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	4413      	add	r3, r2
 801a7e6:	4a06      	ldr	r2, [pc, #24]	; (801a800 <vPortFree+0xb0>)
 801a7e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a7ea:	6938      	ldr	r0, [r7, #16]
 801a7ec:	f000 f86c 	bl	801a8c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801a7f0:	f7fe fb7c 	bl	8018eec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a7f4:	bf00      	nop
 801a7f6:	3718      	adds	r7, #24
 801a7f8:	46bd      	mov	sp, r7
 801a7fa:	bd80      	pop	{r7, pc}
 801a7fc:	20012cac 	.word	0x20012cac
 801a800:	20012ca4 	.word	0x20012ca4

0801a804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a804:	b480      	push	{r7}
 801a806:	b085      	sub	sp, #20
 801a808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a80a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 801a80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a810:	4b27      	ldr	r3, [pc, #156]	; (801a8b0 <prvHeapInit+0xac>)
 801a812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	f003 0307 	and.w	r3, r3, #7
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d00c      	beq.n	801a838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	3307      	adds	r3, #7
 801a822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	f023 0307 	bic.w	r3, r3, #7
 801a82a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a82c:	68ba      	ldr	r2, [r7, #8]
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	1ad3      	subs	r3, r2, r3
 801a832:	4a1f      	ldr	r2, [pc, #124]	; (801a8b0 <prvHeapInit+0xac>)
 801a834:	4413      	add	r3, r2
 801a836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a838:	68fb      	ldr	r3, [r7, #12]
 801a83a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a83c:	4a1d      	ldr	r2, [pc, #116]	; (801a8b4 <prvHeapInit+0xb0>)
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a842:	4b1c      	ldr	r3, [pc, #112]	; (801a8b4 <prvHeapInit+0xb0>)
 801a844:	2200      	movs	r2, #0
 801a846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	68ba      	ldr	r2, [r7, #8]
 801a84c:	4413      	add	r3, r2
 801a84e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a850:	2208      	movs	r2, #8
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	1a9b      	subs	r3, r3, r2
 801a856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	f023 0307 	bic.w	r3, r3, #7
 801a85e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	4a15      	ldr	r2, [pc, #84]	; (801a8b8 <prvHeapInit+0xb4>)
 801a864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a866:	4b14      	ldr	r3, [pc, #80]	; (801a8b8 <prvHeapInit+0xb4>)
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	2200      	movs	r2, #0
 801a86c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a86e:	4b12      	ldr	r3, [pc, #72]	; (801a8b8 <prvHeapInit+0xb4>)
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	2200      	movs	r2, #0
 801a874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a87a:	683b      	ldr	r3, [r7, #0]
 801a87c:	68fa      	ldr	r2, [r7, #12]
 801a87e:	1ad2      	subs	r2, r2, r3
 801a880:	683b      	ldr	r3, [r7, #0]
 801a882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a884:	4b0c      	ldr	r3, [pc, #48]	; (801a8b8 <prvHeapInit+0xb4>)
 801a886:	681a      	ldr	r2, [r3, #0]
 801a888:	683b      	ldr	r3, [r7, #0]
 801a88a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a88c:	683b      	ldr	r3, [r7, #0]
 801a88e:	685b      	ldr	r3, [r3, #4]
 801a890:	4a0a      	ldr	r2, [pc, #40]	; (801a8bc <prvHeapInit+0xb8>)
 801a892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a894:	683b      	ldr	r3, [r7, #0]
 801a896:	685b      	ldr	r3, [r3, #4]
 801a898:	4a09      	ldr	r2, [pc, #36]	; (801a8c0 <prvHeapInit+0xbc>)
 801a89a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a89c:	4b09      	ldr	r3, [pc, #36]	; (801a8c4 <prvHeapInit+0xc0>)
 801a89e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a8a2:	601a      	str	r2, [r3, #0]
}
 801a8a4:	bf00      	nop
 801a8a6:	3714      	adds	r7, #20
 801a8a8:	46bd      	mov	sp, r7
 801a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8ae:	4770      	bx	lr
 801a8b0:	20003c98 	.word	0x20003c98
 801a8b4:	20012c98 	.word	0x20012c98
 801a8b8:	20012ca0 	.word	0x20012ca0
 801a8bc:	20012ca8 	.word	0x20012ca8
 801a8c0:	20012ca4 	.word	0x20012ca4
 801a8c4:	20012cac 	.word	0x20012cac

0801a8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a8c8:	b480      	push	{r7}
 801a8ca:	b085      	sub	sp, #20
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a8d0:	4b28      	ldr	r3, [pc, #160]	; (801a974 <prvInsertBlockIntoFreeList+0xac>)
 801a8d2:	60fb      	str	r3, [r7, #12]
 801a8d4:	e002      	b.n	801a8dc <prvInsertBlockIntoFreeList+0x14>
 801a8d6:	68fb      	ldr	r3, [r7, #12]
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	60fb      	str	r3, [r7, #12]
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	687a      	ldr	r2, [r7, #4]
 801a8e2:	429a      	cmp	r2, r3
 801a8e4:	d8f7      	bhi.n	801a8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	685b      	ldr	r3, [r3, #4]
 801a8ee:	68ba      	ldr	r2, [r7, #8]
 801a8f0:	4413      	add	r3, r2
 801a8f2:	687a      	ldr	r2, [r7, #4]
 801a8f4:	429a      	cmp	r2, r3
 801a8f6:	d108      	bne.n	801a90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	685a      	ldr	r2, [r3, #4]
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	685b      	ldr	r3, [r3, #4]
 801a900:	441a      	add	r2, r3
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a906:	68fb      	ldr	r3, [r7, #12]
 801a908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	685b      	ldr	r3, [r3, #4]
 801a912:	68ba      	ldr	r2, [r7, #8]
 801a914:	441a      	add	r2, r3
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	429a      	cmp	r2, r3
 801a91c:	d118      	bne.n	801a950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	681a      	ldr	r2, [r3, #0]
 801a922:	4b15      	ldr	r3, [pc, #84]	; (801a978 <prvInsertBlockIntoFreeList+0xb0>)
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	429a      	cmp	r2, r3
 801a928:	d00d      	beq.n	801a946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	685a      	ldr	r2, [r3, #4]
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	685b      	ldr	r3, [r3, #4]
 801a934:	441a      	add	r2, r3
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	681a      	ldr	r2, [r3, #0]
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	601a      	str	r2, [r3, #0]
 801a944:	e008      	b.n	801a958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a946:	4b0c      	ldr	r3, [pc, #48]	; (801a978 <prvInsertBlockIntoFreeList+0xb0>)
 801a948:	681a      	ldr	r2, [r3, #0]
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	601a      	str	r2, [r3, #0]
 801a94e:	e003      	b.n	801a958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	681a      	ldr	r2, [r3, #0]
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a958:	68fa      	ldr	r2, [r7, #12]
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	429a      	cmp	r2, r3
 801a95e:	d002      	beq.n	801a966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	687a      	ldr	r2, [r7, #4]
 801a964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a966:	bf00      	nop
 801a968:	3714      	adds	r7, #20
 801a96a:	46bd      	mov	sp, r7
 801a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a970:	4770      	bx	lr
 801a972:	bf00      	nop
 801a974:	20012c98 	.word	0x20012c98
 801a978:	20012ca0 	.word	0x20012ca0

0801a97c <parson_strndup>:
static int    json_serialize_string(const char *string, char *buf);
static int    append_indent(char *buf, int level);
static int    append_string(char *buf, const char *string);

/* Various */
static char * parson_strndup(const char *string, size_t n) {
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b084      	sub	sp, #16
 801a980:	af00      	add	r7, sp, #0
 801a982:	6078      	str	r0, [r7, #4]
 801a984:	6039      	str	r1, [r7, #0]
    char *output_string = (char*)parson_malloc(n + 1);
 801a986:	4b0d      	ldr	r3, [pc, #52]	; (801a9bc <parson_strndup+0x40>)
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	683a      	ldr	r2, [r7, #0]
 801a98c:	3201      	adds	r2, #1
 801a98e:	4610      	mov	r0, r2
 801a990:	4798      	blx	r3
 801a992:	60f8      	str	r0, [r7, #12]
    if (!output_string) {
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d101      	bne.n	801a99e <parson_strndup+0x22>
        return NULL;
 801a99a:	2300      	movs	r3, #0
 801a99c:	e00a      	b.n	801a9b4 <parson_strndup+0x38>
    }
    output_string[n] = '\0';
 801a99e:	68fa      	ldr	r2, [r7, #12]
 801a9a0:	683b      	ldr	r3, [r7, #0]
 801a9a2:	4413      	add	r3, r2
 801a9a4:	2200      	movs	r2, #0
 801a9a6:	701a      	strb	r2, [r3, #0]
    strncpy(output_string, string, n);
 801a9a8:	683a      	ldr	r2, [r7, #0]
 801a9aa:	6879      	ldr	r1, [r7, #4]
 801a9ac:	68f8      	ldr	r0, [r7, #12]
 801a9ae:	f004 f99c 	bl	801ecea <strncpy>
    return output_string;
 801a9b2:	68fb      	ldr	r3, [r7, #12]
}
 801a9b4:	4618      	mov	r0, r3
 801a9b6:	3710      	adds	r7, #16
 801a9b8:	46bd      	mov	sp, r7
 801a9ba:	bd80      	pop	{r7, pc}
 801a9bc:	20000084 	.word	0x20000084

0801a9c0 <hex_char_to_int>:

static char * parson_strdup(const char *string) {
    return parson_strndup(string, strlen(string));
}

static int hex_char_to_int(char c) {
 801a9c0:	b480      	push	{r7}
 801a9c2:	b083      	sub	sp, #12
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	4603      	mov	r3, r0
 801a9c8:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 801a9ca:	79fb      	ldrb	r3, [r7, #7]
 801a9cc:	2b2f      	cmp	r3, #47	; 0x2f
 801a9ce:	d905      	bls.n	801a9dc <hex_char_to_int+0x1c>
 801a9d0:	79fb      	ldrb	r3, [r7, #7]
 801a9d2:	2b39      	cmp	r3, #57	; 0x39
 801a9d4:	d802      	bhi.n	801a9dc <hex_char_to_int+0x1c>
        return c - '0';
 801a9d6:	79fb      	ldrb	r3, [r7, #7]
 801a9d8:	3b30      	subs	r3, #48	; 0x30
 801a9da:	e013      	b.n	801aa04 <hex_char_to_int+0x44>
    } else if (c >= 'a' && c <= 'f') {
 801a9dc:	79fb      	ldrb	r3, [r7, #7]
 801a9de:	2b60      	cmp	r3, #96	; 0x60
 801a9e0:	d905      	bls.n	801a9ee <hex_char_to_int+0x2e>
 801a9e2:	79fb      	ldrb	r3, [r7, #7]
 801a9e4:	2b66      	cmp	r3, #102	; 0x66
 801a9e6:	d802      	bhi.n	801a9ee <hex_char_to_int+0x2e>
        return c - 'a' + 10;
 801a9e8:	79fb      	ldrb	r3, [r7, #7]
 801a9ea:	3b57      	subs	r3, #87	; 0x57
 801a9ec:	e00a      	b.n	801aa04 <hex_char_to_int+0x44>
    } else if (c >= 'A' && c <= 'F') {
 801a9ee:	79fb      	ldrb	r3, [r7, #7]
 801a9f0:	2b40      	cmp	r3, #64	; 0x40
 801a9f2:	d905      	bls.n	801aa00 <hex_char_to_int+0x40>
 801a9f4:	79fb      	ldrb	r3, [r7, #7]
 801a9f6:	2b46      	cmp	r3, #70	; 0x46
 801a9f8:	d802      	bhi.n	801aa00 <hex_char_to_int+0x40>
        return c - 'A' + 10;
 801a9fa:	79fb      	ldrb	r3, [r7, #7]
 801a9fc:	3b37      	subs	r3, #55	; 0x37
 801a9fe:	e001      	b.n	801aa04 <hex_char_to_int+0x44>
    }
    return -1;
 801aa00:	f04f 33ff 	mov.w	r3, #4294967295
}
 801aa04:	4618      	mov	r0, r3
 801aa06:	370c      	adds	r7, #12
 801aa08:	46bd      	mov	sp, r7
 801aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa0e:	4770      	bx	lr

0801aa10 <parse_utf16_hex>:

static int parse_utf16_hex(const char *s, unsigned int *result) {
 801aa10:	b580      	push	{r7, lr}
 801aa12:	b086      	sub	sp, #24
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	6078      	str	r0, [r7, #4]
 801aa18:	6039      	str	r1, [r7, #0]
    int x1, x2, x3, x4;
    if (s[0] == '\0' || s[1] == '\0' || s[2] == '\0' || s[3] == '\0') {
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	781b      	ldrb	r3, [r3, #0]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d00e      	beq.n	801aa40 <parse_utf16_hex+0x30>
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	3301      	adds	r3, #1
 801aa26:	781b      	ldrb	r3, [r3, #0]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d009      	beq.n	801aa40 <parse_utf16_hex+0x30>
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	3302      	adds	r3, #2
 801aa30:	781b      	ldrb	r3, [r3, #0]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d004      	beq.n	801aa40 <parse_utf16_hex+0x30>
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	3303      	adds	r3, #3
 801aa3a:	781b      	ldrb	r3, [r3, #0]
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d101      	bne.n	801aa44 <parse_utf16_hex+0x34>
        return 0;
 801aa40:	2300      	movs	r3, #0
 801aa42:	e03a      	b.n	801aaba <parse_utf16_hex+0xaa>
    }
    x1 = hex_char_to_int(s[0]);
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	781b      	ldrb	r3, [r3, #0]
 801aa48:	4618      	mov	r0, r3
 801aa4a:	f7ff ffb9 	bl	801a9c0 <hex_char_to_int>
 801aa4e:	6178      	str	r0, [r7, #20]
    x2 = hex_char_to_int(s[1]);
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	3301      	adds	r3, #1
 801aa54:	781b      	ldrb	r3, [r3, #0]
 801aa56:	4618      	mov	r0, r3
 801aa58:	f7ff ffb2 	bl	801a9c0 <hex_char_to_int>
 801aa5c:	6138      	str	r0, [r7, #16]
    x3 = hex_char_to_int(s[2]);
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	3302      	adds	r3, #2
 801aa62:	781b      	ldrb	r3, [r3, #0]
 801aa64:	4618      	mov	r0, r3
 801aa66:	f7ff ffab 	bl	801a9c0 <hex_char_to_int>
 801aa6a:	60f8      	str	r0, [r7, #12]
    x4 = hex_char_to_int(s[3]);
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	3303      	adds	r3, #3
 801aa70:	781b      	ldrb	r3, [r3, #0]
 801aa72:	4618      	mov	r0, r3
 801aa74:	f7ff ffa4 	bl	801a9c0 <hex_char_to_int>
 801aa78:	60b8      	str	r0, [r7, #8]
    if (x1 == -1 || x2 == -1 || x3 == -1 || x4 == -1) {
 801aa7a:	697b      	ldr	r3, [r7, #20]
 801aa7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa80:	d00b      	beq.n	801aa9a <parse_utf16_hex+0x8a>
 801aa82:	693b      	ldr	r3, [r7, #16]
 801aa84:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa88:	d007      	beq.n	801aa9a <parse_utf16_hex+0x8a>
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa90:	d003      	beq.n	801aa9a <parse_utf16_hex+0x8a>
 801aa92:	68bb      	ldr	r3, [r7, #8]
 801aa94:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa98:	d101      	bne.n	801aa9e <parse_utf16_hex+0x8e>
        return 0;
 801aa9a:	2300      	movs	r3, #0
 801aa9c:	e00d      	b.n	801aaba <parse_utf16_hex+0xaa>
    }
    *result = (unsigned int)((x1 << 12) | (x2 << 8) | (x3 << 4) | x4);
 801aa9e:	697b      	ldr	r3, [r7, #20]
 801aaa0:	031a      	lsls	r2, r3, #12
 801aaa2:	693b      	ldr	r3, [r7, #16]
 801aaa4:	021b      	lsls	r3, r3, #8
 801aaa6:	431a      	orrs	r2, r3
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	011b      	lsls	r3, r3, #4
 801aaac:	431a      	orrs	r2, r3
 801aaae:	68bb      	ldr	r3, [r7, #8]
 801aab0:	4313      	orrs	r3, r2
 801aab2:	461a      	mov	r2, r3
 801aab4:	683b      	ldr	r3, [r7, #0]
 801aab6:	601a      	str	r2, [r3, #0]
    return 1;
 801aab8:	2301      	movs	r3, #1
}
 801aaba:	4618      	mov	r0, r3
 801aabc:	3718      	adds	r7, #24
 801aabe:	46bd      	mov	sp, r7
 801aac0:	bd80      	pop	{r7, pc}

0801aac2 <num_bytes_in_utf8_sequence>:

static int num_bytes_in_utf8_sequence(unsigned char c) {
 801aac2:	b480      	push	{r7}
 801aac4:	b083      	sub	sp, #12
 801aac6:	af00      	add	r7, sp, #0
 801aac8:	4603      	mov	r3, r0
 801aaca:	71fb      	strb	r3, [r7, #7]
    if (c == 0xC0 || c == 0xC1 || c > 0xF4 || IS_CONT(c)) {
 801aacc:	79fb      	ldrb	r3, [r7, #7]
 801aace:	2bc0      	cmp	r3, #192	; 0xc0
 801aad0:	d00a      	beq.n	801aae8 <num_bytes_in_utf8_sequence+0x26>
 801aad2:	79fb      	ldrb	r3, [r7, #7]
 801aad4:	2bc1      	cmp	r3, #193	; 0xc1
 801aad6:	d007      	beq.n	801aae8 <num_bytes_in_utf8_sequence+0x26>
 801aad8:	79fb      	ldrb	r3, [r7, #7]
 801aada:	2bf4      	cmp	r3, #244	; 0xf4
 801aadc:	d804      	bhi.n	801aae8 <num_bytes_in_utf8_sequence+0x26>
 801aade:	79fb      	ldrb	r3, [r7, #7]
 801aae0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801aae4:	2b80      	cmp	r3, #128	; 0x80
 801aae6:	d101      	bne.n	801aaec <num_bytes_in_utf8_sequence+0x2a>
        return 0;
 801aae8:	2300      	movs	r3, #0
 801aaea:	e01b      	b.n	801ab24 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0x80) == 0) {    /* 0xxxxxxx */
 801aaec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	db01      	blt.n	801aaf8 <num_bytes_in_utf8_sequence+0x36>
        return 1;
 801aaf4:	2301      	movs	r3, #1
 801aaf6:	e015      	b.n	801ab24 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xE0) == 0xC0) { /* 110xxxxx */
 801aaf8:	79fb      	ldrb	r3, [r7, #7]
 801aafa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801aafe:	2bc0      	cmp	r3, #192	; 0xc0
 801ab00:	d101      	bne.n	801ab06 <num_bytes_in_utf8_sequence+0x44>
        return 2;
 801ab02:	2302      	movs	r3, #2
 801ab04:	e00e      	b.n	801ab24 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF0) == 0xE0) { /* 1110xxxx */
 801ab06:	79fb      	ldrb	r3, [r7, #7]
 801ab08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ab0c:	2be0      	cmp	r3, #224	; 0xe0
 801ab0e:	d101      	bne.n	801ab14 <num_bytes_in_utf8_sequence+0x52>
        return 3;
 801ab10:	2303      	movs	r3, #3
 801ab12:	e007      	b.n	801ab24 <num_bytes_in_utf8_sequence+0x62>
    } else if ((c & 0xF8) == 0xF0) { /* 11110xxx */
 801ab14:	79fb      	ldrb	r3, [r7, #7]
 801ab16:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ab1a:	2bf0      	cmp	r3, #240	; 0xf0
 801ab1c:	d101      	bne.n	801ab22 <num_bytes_in_utf8_sequence+0x60>
        return 4;
 801ab1e:	2304      	movs	r3, #4
 801ab20:	e000      	b.n	801ab24 <num_bytes_in_utf8_sequence+0x62>
    }
    return 0; /* won't happen */
 801ab22:	2300      	movs	r3, #0
}
 801ab24:	4618      	mov	r0, r3
 801ab26:	370c      	adds	r7, #12
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2e:	4770      	bx	lr

0801ab30 <verify_utf8_sequence>:

static int verify_utf8_sequence(const unsigned char *string, int *len) {
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b084      	sub	sp, #16
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]
 801ab38:	6039      	str	r1, [r7, #0]
    unsigned int cp = 0;
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	60fb      	str	r3, [r7, #12]
    *len = num_bytes_in_utf8_sequence(string[0]);
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	781b      	ldrb	r3, [r3, #0]
 801ab42:	4618      	mov	r0, r3
 801ab44:	f7ff ffbd 	bl	801aac2 <num_bytes_in_utf8_sequence>
 801ab48:	4602      	mov	r2, r0
 801ab4a:	683b      	ldr	r3, [r7, #0]
 801ab4c:	601a      	str	r2, [r3, #0]

    if (*len == 1) {
 801ab4e:	683b      	ldr	r3, [r7, #0]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	2b01      	cmp	r3, #1
 801ab54:	d103      	bne.n	801ab5e <verify_utf8_sequence+0x2e>
        cp = string[0];
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	781b      	ldrb	r3, [r3, #0]
 801ab5a:	60fb      	str	r3, [r7, #12]
 801ab5c:	e07f      	b.n	801ac5e <verify_utf8_sequence+0x12e>
    } else if (*len == 2 && IS_CONT(string[1])) {
 801ab5e:	683b      	ldr	r3, [r7, #0]
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	2b02      	cmp	r3, #2
 801ab64:	d115      	bne.n	801ab92 <verify_utf8_sequence+0x62>
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	3301      	adds	r3, #1
 801ab6a:	781b      	ldrb	r3, [r3, #0]
 801ab6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ab70:	2b80      	cmp	r3, #128	; 0x80
 801ab72:	d10e      	bne.n	801ab92 <verify_utf8_sequence+0x62>
        cp = string[0] & 0x1F;
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	781b      	ldrb	r3, [r3, #0]
 801ab78:	f003 031f 	and.w	r3, r3, #31
 801ab7c:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801ab7e:	68fb      	ldr	r3, [r7, #12]
 801ab80:	019a      	lsls	r2, r3, #6
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	3301      	adds	r3, #1
 801ab86:	781b      	ldrb	r3, [r3, #0]
 801ab88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ab8c:	4313      	orrs	r3, r2
 801ab8e:	60fb      	str	r3, [r7, #12]
 801ab90:	e065      	b.n	801ac5e <verify_utf8_sequence+0x12e>
    } else if (*len == 3 && IS_CONT(string[1]) && IS_CONT(string[2])) {
 801ab92:	683b      	ldr	r3, [r7, #0]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	2b03      	cmp	r3, #3
 801ab98:	d125      	bne.n	801abe6 <verify_utf8_sequence+0xb6>
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	3301      	adds	r3, #1
 801ab9e:	781b      	ldrb	r3, [r3, #0]
 801aba0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801aba4:	2b80      	cmp	r3, #128	; 0x80
 801aba6:	d11e      	bne.n	801abe6 <verify_utf8_sequence+0xb6>
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	3302      	adds	r3, #2
 801abac:	781b      	ldrb	r3, [r3, #0]
 801abae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801abb2:	2b80      	cmp	r3, #128	; 0x80
 801abb4:	d117      	bne.n	801abe6 <verify_utf8_sequence+0xb6>
        cp = ((unsigned char)string[0]) & 0xF;
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	781b      	ldrb	r3, [r3, #0]
 801abba:	f003 030f 	and.w	r3, r3, #15
 801abbe:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	019a      	lsls	r2, r3, #6
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	3301      	adds	r3, #1
 801abc8:	781b      	ldrb	r3, [r3, #0]
 801abca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801abce:	4313      	orrs	r3, r2
 801abd0:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	019a      	lsls	r2, r3, #6
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	3302      	adds	r3, #2
 801abda:	781b      	ldrb	r3, [r3, #0]
 801abdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801abe0:	4313      	orrs	r3, r2
 801abe2:	60fb      	str	r3, [r7, #12]
 801abe4:	e03b      	b.n	801ac5e <verify_utf8_sequence+0x12e>
    } else if (*len == 4 && IS_CONT(string[1]) && IS_CONT(string[2]) && IS_CONT(string[3])) {
 801abe6:	683b      	ldr	r3, [r7, #0]
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	2b04      	cmp	r3, #4
 801abec:	d135      	bne.n	801ac5a <verify_utf8_sequence+0x12a>
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	3301      	adds	r3, #1
 801abf2:	781b      	ldrb	r3, [r3, #0]
 801abf4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801abf8:	2b80      	cmp	r3, #128	; 0x80
 801abfa:	d12e      	bne.n	801ac5a <verify_utf8_sequence+0x12a>
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	3302      	adds	r3, #2
 801ac00:	781b      	ldrb	r3, [r3, #0]
 801ac02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ac06:	2b80      	cmp	r3, #128	; 0x80
 801ac08:	d127      	bne.n	801ac5a <verify_utf8_sequence+0x12a>
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	3303      	adds	r3, #3
 801ac0e:	781b      	ldrb	r3, [r3, #0]
 801ac10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ac14:	2b80      	cmp	r3, #128	; 0x80
 801ac16:	d120      	bne.n	801ac5a <verify_utf8_sequence+0x12a>
        cp = string[0] & 0x7;
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	781b      	ldrb	r3, [r3, #0]
 801ac1c:	f003 0307 	and.w	r3, r3, #7
 801ac20:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[1] & 0x3F);
 801ac22:	68fb      	ldr	r3, [r7, #12]
 801ac24:	019a      	lsls	r2, r3, #6
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	3301      	adds	r3, #1
 801ac2a:	781b      	ldrb	r3, [r3, #0]
 801ac2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ac30:	4313      	orrs	r3, r2
 801ac32:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[2] & 0x3F);
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	019a      	lsls	r2, r3, #6
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	3302      	adds	r3, #2
 801ac3c:	781b      	ldrb	r3, [r3, #0]
 801ac3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ac42:	4313      	orrs	r3, r2
 801ac44:	60fb      	str	r3, [r7, #12]
        cp = (cp << 6) | (string[3] & 0x3F);
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	019a      	lsls	r2, r3, #6
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	3303      	adds	r3, #3
 801ac4e:	781b      	ldrb	r3, [r3, #0]
 801ac50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ac54:	4313      	orrs	r3, r2
 801ac56:	60fb      	str	r3, [r7, #12]
 801ac58:	e001      	b.n	801ac5e <verify_utf8_sequence+0x12e>
    } else {
        return 0;
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	e029      	b.n	801acb2 <verify_utf8_sequence+0x182>
    }

    /* overlong encodings */
    if ((cp < 0x80    && *len > 1) ||
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	2b7f      	cmp	r3, #127	; 0x7f
 801ac62:	d803      	bhi.n	801ac6c <verify_utf8_sequence+0x13c>
 801ac64:	683b      	ldr	r3, [r7, #0]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	2b01      	cmp	r3, #1
 801ac6a:	dc0f      	bgt.n	801ac8c <verify_utf8_sequence+0x15c>
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ac72:	d203      	bcs.n	801ac7c <verify_utf8_sequence+0x14c>
        (cp < 0x800   && *len > 2) ||
 801ac74:	683b      	ldr	r3, [r7, #0]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	2b02      	cmp	r3, #2
 801ac7a:	dc07      	bgt.n	801ac8c <verify_utf8_sequence+0x15c>
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ac82:	d205      	bcs.n	801ac90 <verify_utf8_sequence+0x160>
        (cp < 0x10000 && *len > 3)) {
 801ac84:	683b      	ldr	r3, [r7, #0]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	2b03      	cmp	r3, #3
 801ac8a:	dd01      	ble.n	801ac90 <verify_utf8_sequence+0x160>
        return 0;
 801ac8c:	2300      	movs	r3, #0
 801ac8e:	e010      	b.n	801acb2 <verify_utf8_sequence+0x182>
    }

    /* invalid unicode */
    if (cp > 0x10FFFF) {
 801ac90:	68fb      	ldr	r3, [r7, #12]
 801ac92:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 801ac96:	d301      	bcc.n	801ac9c <verify_utf8_sequence+0x16c>
        return 0;
 801ac98:	2300      	movs	r3, #0
 801ac9a:	e00a      	b.n	801acb2 <verify_utf8_sequence+0x182>
    }

    /* surrogate halves */
    if (cp >= 0xD800 && cp <= 0xDFFF) {
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801aca2:	d305      	bcc.n	801acb0 <verify_utf8_sequence+0x180>
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801acaa:	d201      	bcs.n	801acb0 <verify_utf8_sequence+0x180>
        return 0;
 801acac:	2300      	movs	r3, #0
 801acae:	e000      	b.n	801acb2 <verify_utf8_sequence+0x182>
    }

    return 1;
 801acb0:	2301      	movs	r3, #1
}
 801acb2:	4618      	mov	r0, r3
 801acb4:	3710      	adds	r7, #16
 801acb6:	46bd      	mov	sp, r7
 801acb8:	bd80      	pop	{r7, pc}

0801acba <is_valid_utf8>:

static int is_valid_utf8(const char *string, size_t string_len) {
 801acba:	b580      	push	{r7, lr}
 801acbc:	b084      	sub	sp, #16
 801acbe:	af00      	add	r7, sp, #0
 801acc0:	6078      	str	r0, [r7, #4]
 801acc2:	6039      	str	r1, [r7, #0]
    int len = 0;
 801acc4:	2300      	movs	r3, #0
 801acc6:	60bb      	str	r3, [r7, #8]
    const char *string_end =  string + string_len;
 801acc8:	687a      	ldr	r2, [r7, #4]
 801acca:	683b      	ldr	r3, [r7, #0]
 801accc:	4413      	add	r3, r2
 801acce:	60fb      	str	r3, [r7, #12]
    while (string < string_end) {
 801acd0:	e00f      	b.n	801acf2 <is_valid_utf8+0x38>
        if (!verify_utf8_sequence((const unsigned char*)string, &len)) {
 801acd2:	f107 0308 	add.w	r3, r7, #8
 801acd6:	4619      	mov	r1, r3
 801acd8:	6878      	ldr	r0, [r7, #4]
 801acda:	f7ff ff29 	bl	801ab30 <verify_utf8_sequence>
 801acde:	4603      	mov	r3, r0
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d101      	bne.n	801ace8 <is_valid_utf8+0x2e>
            return 0;
 801ace4:	2300      	movs	r3, #0
 801ace6:	e009      	b.n	801acfc <is_valid_utf8+0x42>
        }
        string += len;
 801ace8:	68bb      	ldr	r3, [r7, #8]
 801acea:	461a      	mov	r2, r3
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	4413      	add	r3, r2
 801acf0:	607b      	str	r3, [r7, #4]
    while (string < string_end) {
 801acf2:	687a      	ldr	r2, [r7, #4]
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	429a      	cmp	r2, r3
 801acf8:	d3eb      	bcc.n	801acd2 <is_valid_utf8+0x18>
    }
    return 1;
 801acfa:	2301      	movs	r3, #1
}
 801acfc:	4618      	mov	r0, r3
 801acfe:	3710      	adds	r7, #16
 801ad00:	46bd      	mov	sp, r7
 801ad02:	bd80      	pop	{r7, pc}

0801ad04 <is_decimal>:

static int is_decimal(const char *string, size_t length) {
 801ad04:	b580      	push	{r7, lr}
 801ad06:	b082      	sub	sp, #8
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	6078      	str	r0, [r7, #4]
 801ad0c:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.') {
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	2b01      	cmp	r3, #1
 801ad12:	d90a      	bls.n	801ad2a <is_decimal+0x26>
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	781b      	ldrb	r3, [r3, #0]
 801ad18:	2b30      	cmp	r3, #48	; 0x30
 801ad1a:	d106      	bne.n	801ad2a <is_decimal+0x26>
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	3301      	adds	r3, #1
 801ad20:	781b      	ldrb	r3, [r3, #0]
 801ad22:	2b2e      	cmp	r3, #46	; 0x2e
 801ad24:	d001      	beq.n	801ad2a <is_decimal+0x26>
        return 0;
 801ad26:	2300      	movs	r3, #0
 801ad28:	e024      	b.n	801ad74 <is_decimal+0x70>
    }
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.') {
 801ad2a:	683b      	ldr	r3, [r7, #0]
 801ad2c:	2b02      	cmp	r3, #2
 801ad2e:	d91b      	bls.n	801ad68 <is_decimal+0x64>
 801ad30:	2202      	movs	r2, #2
 801ad32:	4912      	ldr	r1, [pc, #72]	; (801ad7c <is_decimal+0x78>)
 801ad34:	6878      	ldr	r0, [r7, #4]
 801ad36:	f003 ffc4 	bl	801ecc2 <strncmp>
 801ad3a:	4603      	mov	r3, r0
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d113      	bne.n	801ad68 <is_decimal+0x64>
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	3302      	adds	r3, #2
 801ad44:	781b      	ldrb	r3, [r3, #0]
 801ad46:	2b2e      	cmp	r3, #46	; 0x2e
 801ad48:	d00e      	beq.n	801ad68 <is_decimal+0x64>
        return 0;
 801ad4a:	2300      	movs	r3, #0
 801ad4c:	e012      	b.n	801ad74 <is_decimal+0x70>
    }
    while (length--) {
        if (strchr("xX", string[length])) {
 801ad4e:	687a      	ldr	r2, [r7, #4]
 801ad50:	683b      	ldr	r3, [r7, #0]
 801ad52:	4413      	add	r3, r2
 801ad54:	781b      	ldrb	r3, [r3, #0]
 801ad56:	4619      	mov	r1, r3
 801ad58:	4809      	ldr	r0, [pc, #36]	; (801ad80 <is_decimal+0x7c>)
 801ad5a:	f003 ffa5 	bl	801eca8 <strchr>
 801ad5e:	4603      	mov	r3, r0
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d001      	beq.n	801ad68 <is_decimal+0x64>
            return 0;
 801ad64:	2300      	movs	r3, #0
 801ad66:	e005      	b.n	801ad74 <is_decimal+0x70>
    while (length--) {
 801ad68:	683b      	ldr	r3, [r7, #0]
 801ad6a:	1e5a      	subs	r2, r3, #1
 801ad6c:	603a      	str	r2, [r7, #0]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d1ed      	bne.n	801ad4e <is_decimal+0x4a>
        }
    }
    return 1;
 801ad72:	2301      	movs	r3, #1
}
 801ad74:	4618      	mov	r0, r3
 801ad76:	3708      	adds	r7, #8
 801ad78:	46bd      	mov	sp, r7
 801ad7a:	bd80      	pop	{r7, pc}
 801ad7c:	080227c0 	.word	0x080227c0
 801ad80:	080227c4 	.word	0x080227c4

0801ad84 <json_object_init>:
        string++;
    }
}

/* JSON Object */
static JSON_Object * json_object_init(JSON_Value *wrapping_value) {
 801ad84:	b580      	push	{r7, lr}
 801ad86:	b084      	sub	sp, #16
 801ad88:	af00      	add	r7, sp, #0
 801ad8a:	6078      	str	r0, [r7, #4]
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
 801ad8c:	4b0e      	ldr	r3, [pc, #56]	; (801adc8 <json_object_init+0x44>)
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	2014      	movs	r0, #20
 801ad92:	4798      	blx	r3
 801ad94:	60f8      	str	r0, [r7, #12]
    if (new_obj == NULL) {
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	d101      	bne.n	801ada0 <json_object_init+0x1c>
        return NULL;
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	e00f      	b.n	801adc0 <json_object_init+0x3c>
    }
    new_obj->wrapping_value = wrapping_value;
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	687a      	ldr	r2, [r7, #4]
 801ada4:	601a      	str	r2, [r3, #0]
    new_obj->names = (char**)NULL;
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	2200      	movs	r2, #0
 801adaa:	605a      	str	r2, [r3, #4]
    new_obj->values = (JSON_Value**)NULL;
 801adac:	68fb      	ldr	r3, [r7, #12]
 801adae:	2200      	movs	r2, #0
 801adb0:	609a      	str	r2, [r3, #8]
    new_obj->capacity = 0;
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	2200      	movs	r2, #0
 801adb6:	611a      	str	r2, [r3, #16]
    new_obj->count = 0;
 801adb8:	68fb      	ldr	r3, [r7, #12]
 801adba:	2200      	movs	r2, #0
 801adbc:	60da      	str	r2, [r3, #12]
    return new_obj;
 801adbe:	68fb      	ldr	r3, [r7, #12]
}
 801adc0:	4618      	mov	r0, r3
 801adc2:	3710      	adds	r7, #16
 801adc4:	46bd      	mov	sp, r7
 801adc6:	bd80      	pop	{r7, pc}
 801adc8:	20000084 	.word	0x20000084

0801adcc <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
 801adcc:	b580      	push	{r7, lr}
 801adce:	b084      	sub	sp, #16
 801add0:	af00      	add	r7, sp, #0
 801add2:	60f8      	str	r0, [r7, #12]
 801add4:	60b9      	str	r1, [r7, #8]
 801add6:	607a      	str	r2, [r7, #4]
    if (name == NULL) {
 801add8:	68bb      	ldr	r3, [r7, #8]
 801adda:	2b00      	cmp	r3, #0
 801addc:	d102      	bne.n	801ade4 <json_object_add+0x18>
        return JSONFailure;
 801adde:	f04f 33ff 	mov.w	r3, #4294967295
 801ade2:	e009      	b.n	801adf8 <json_object_add+0x2c>
    }
    return json_object_addn(object, name, strlen(name), value);
 801ade4:	68b8      	ldr	r0, [r7, #8]
 801ade6:	f7e5 fa15 	bl	8000214 <strlen>
 801adea:	4602      	mov	r2, r0
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	68b9      	ldr	r1, [r7, #8]
 801adf0:	68f8      	ldr	r0, [r7, #12]
 801adf2:	f000 f805 	bl	801ae00 <json_object_addn>
 801adf6:	4603      	mov	r3, r0
}
 801adf8:	4618      	mov	r0, r3
 801adfa:	3710      	adds	r7, #16
 801adfc:	46bd      	mov	sp, r7
 801adfe:	bd80      	pop	{r7, pc}

0801ae00 <json_object_addn>:

static JSON_Status json_object_addn(JSON_Object *object, const char *name, size_t name_len, JSON_Value *value) {
 801ae00:	b590      	push	{r4, r7, lr}
 801ae02:	b087      	sub	sp, #28
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	60f8      	str	r0, [r7, #12]
 801ae08:	60b9      	str	r1, [r7, #8]
 801ae0a:	607a      	str	r2, [r7, #4]
 801ae0c:	603b      	str	r3, [r7, #0]
    size_t index = 0;
 801ae0e:	2300      	movs	r3, #0
 801ae10:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d005      	beq.n	801ae24 <json_object_addn+0x24>
 801ae18:	68bb      	ldr	r3, [r7, #8]
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d002      	beq.n	801ae24 <json_object_addn+0x24>
 801ae1e:	683b      	ldr	r3, [r7, #0]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d102      	bne.n	801ae2a <json_object_addn+0x2a>
        return JSONFailure;
 801ae24:	f04f 33ff 	mov.w	r3, #4294967295
 801ae28:	e04e      	b.n	801aec8 <json_object_addn+0xc8>
    }
    if (json_object_getn_value(object, name, name_len) != NULL) {
 801ae2a:	687a      	ldr	r2, [r7, #4]
 801ae2c:	68b9      	ldr	r1, [r7, #8]
 801ae2e:	68f8      	ldr	r0, [r7, #12]
 801ae30:	f000 f8c8 	bl	801afc4 <json_object_getn_value>
 801ae34:	4603      	mov	r3, r0
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d002      	beq.n	801ae40 <json_object_addn+0x40>
        return JSONFailure;
 801ae3a:	f04f 33ff 	mov.w	r3, #4294967295
 801ae3e:	e043      	b.n	801aec8 <json_object_addn+0xc8>
    }
    if (object->count >= object->capacity) {
 801ae40:	68fb      	ldr	r3, [r7, #12]
 801ae42:	68da      	ldr	r2, [r3, #12]
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	691b      	ldr	r3, [r3, #16]
 801ae48:	429a      	cmp	r2, r3
 801ae4a:	d311      	bcc.n	801ae70 <json_object_addn+0x70>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	691b      	ldr	r3, [r3, #16]
 801ae50:	005b      	lsls	r3, r3, #1
 801ae52:	2b10      	cmp	r3, #16
 801ae54:	bf38      	it	cc
 801ae56:	2310      	movcc	r3, #16
 801ae58:	613b      	str	r3, [r7, #16]
        if (json_object_resize(object, new_capacity) == JSONFailure) {
 801ae5a:	6939      	ldr	r1, [r7, #16]
 801ae5c:	68f8      	ldr	r0, [r7, #12]
 801ae5e:	f000 f837 	bl	801aed0 <json_object_resize>
 801ae62:	4603      	mov	r3, r0
 801ae64:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae68:	d102      	bne.n	801ae70 <json_object_addn+0x70>
            return JSONFailure;
 801ae6a:	f04f 33ff 	mov.w	r3, #4294967295
 801ae6e:	e02b      	b.n	801aec8 <json_object_addn+0xc8>
        }
    }
    index = object->count;
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	68db      	ldr	r3, [r3, #12]
 801ae74:	617b      	str	r3, [r7, #20]
    object->names[index] = parson_strndup(name, name_len);
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	685a      	ldr	r2, [r3, #4]
 801ae7a:	697b      	ldr	r3, [r7, #20]
 801ae7c:	009b      	lsls	r3, r3, #2
 801ae7e:	18d4      	adds	r4, r2, r3
 801ae80:	6879      	ldr	r1, [r7, #4]
 801ae82:	68b8      	ldr	r0, [r7, #8]
 801ae84:	f7ff fd7a 	bl	801a97c <parson_strndup>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	6023      	str	r3, [r4, #0]
    if (object->names[index] == NULL) {
 801ae8c:	68fb      	ldr	r3, [r7, #12]
 801ae8e:	685a      	ldr	r2, [r3, #4]
 801ae90:	697b      	ldr	r3, [r7, #20]
 801ae92:	009b      	lsls	r3, r3, #2
 801ae94:	4413      	add	r3, r2
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d102      	bne.n	801aea2 <json_object_addn+0xa2>
        return JSONFailure;
 801ae9c:	f04f 33ff 	mov.w	r3, #4294967295
 801aea0:	e012      	b.n	801aec8 <json_object_addn+0xc8>
    }
    value->parent = json_object_get_wrapping_value(object);
 801aea2:	68f8      	ldr	r0, [r7, #12]
 801aea4:	f002 f8c2 	bl	801d02c <json_object_get_wrapping_value>
 801aea8:	4602      	mov	r2, r0
 801aeaa:	683b      	ldr	r3, [r7, #0]
 801aeac:	601a      	str	r2, [r3, #0]
    object->values[index] = value;
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	689a      	ldr	r2, [r3, #8]
 801aeb2:	697b      	ldr	r3, [r7, #20]
 801aeb4:	009b      	lsls	r3, r3, #2
 801aeb6:	4413      	add	r3, r2
 801aeb8:	683a      	ldr	r2, [r7, #0]
 801aeba:	601a      	str	r2, [r3, #0]
    object->count++;
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	68db      	ldr	r3, [r3, #12]
 801aec0:	1c5a      	adds	r2, r3, #1
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801aec6:	2300      	movs	r3, #0
}
 801aec8:	4618      	mov	r0, r3
 801aeca:	371c      	adds	r7, #28
 801aecc:	46bd      	mov	sp, r7
 801aece:	bd90      	pop	{r4, r7, pc}

0801aed0 <json_object_resize>:

static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
 801aed0:	b580      	push	{r7, lr}
 801aed2:	b084      	sub	sp, #16
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	6078      	str	r0, [r7, #4]
 801aed8:	6039      	str	r1, [r7, #0]
    char **temp_names = NULL;
 801aeda:	2300      	movs	r3, #0
 801aedc:	60fb      	str	r3, [r7, #12]
    JSON_Value **temp_values = NULL;
 801aede:	2300      	movs	r3, #0
 801aee0:	60bb      	str	r3, [r7, #8]

    if ((object->names == NULL && object->values != NULL) ||
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	685b      	ldr	r3, [r3, #4]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d103      	bne.n	801aef2 <json_object_resize+0x22>
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	689b      	ldr	r3, [r3, #8]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d10a      	bne.n	801af08 <json_object_resize+0x38>
        (object->names != NULL && object->values == NULL) ||
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	685b      	ldr	r3, [r3, #4]
    if ((object->names == NULL && object->values != NULL) ||
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d003      	beq.n	801af02 <json_object_resize+0x32>
        (object->names != NULL && object->values == NULL) ||
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	689b      	ldr	r3, [r3, #8]
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d002      	beq.n	801af08 <json_object_resize+0x38>
 801af02:	683b      	ldr	r3, [r7, #0]
 801af04:	2b00      	cmp	r3, #0
 801af06:	d102      	bne.n	801af0e <json_object_resize+0x3e>
        new_capacity == 0) {
            return JSONFailure; /* Shouldn't happen */
 801af08:	f04f 33ff 	mov.w	r3, #4294967295
 801af0c:	e051      	b.n	801afb2 <json_object_resize+0xe2>
    }
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
 801af0e:	4b2b      	ldr	r3, [pc, #172]	; (801afbc <json_object_resize+0xec>)
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	683a      	ldr	r2, [r7, #0]
 801af14:	0092      	lsls	r2, r2, #2
 801af16:	4610      	mov	r0, r2
 801af18:	4798      	blx	r3
 801af1a:	60f8      	str	r0, [r7, #12]
    if (temp_names == NULL) {
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	2b00      	cmp	r3, #0
 801af20:	d102      	bne.n	801af28 <json_object_resize+0x58>
        return JSONFailure;
 801af22:	f04f 33ff 	mov.w	r3, #4294967295
 801af26:	e044      	b.n	801afb2 <json_object_resize+0xe2>
    }
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801af28:	4b24      	ldr	r3, [pc, #144]	; (801afbc <json_object_resize+0xec>)
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	683a      	ldr	r2, [r7, #0]
 801af2e:	0092      	lsls	r2, r2, #2
 801af30:	4610      	mov	r0, r2
 801af32:	4798      	blx	r3
 801af34:	60b8      	str	r0, [r7, #8]
    if (temp_values == NULL) {
 801af36:	68bb      	ldr	r3, [r7, #8]
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d106      	bne.n	801af4a <json_object_resize+0x7a>
        parson_free(temp_names);
 801af3c:	4b20      	ldr	r3, [pc, #128]	; (801afc0 <json_object_resize+0xf0>)
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	68f8      	ldr	r0, [r7, #12]
 801af42:	4798      	blx	r3
        return JSONFailure;
 801af44:	f04f 33ff 	mov.w	r3, #4294967295
 801af48:	e033      	b.n	801afb2 <json_object_resize+0xe2>
    }
    if (object->names != NULL && object->values != NULL && object->count > 0) {
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	685b      	ldr	r3, [r3, #4]
 801af4e:	2b00      	cmp	r3, #0
 801af50:	d019      	beq.n	801af86 <json_object_resize+0xb6>
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	689b      	ldr	r3, [r3, #8]
 801af56:	2b00      	cmp	r3, #0
 801af58:	d015      	beq.n	801af86 <json_object_resize+0xb6>
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	68db      	ldr	r3, [r3, #12]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d011      	beq.n	801af86 <json_object_resize+0xb6>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	6859      	ldr	r1, [r3, #4]
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	68db      	ldr	r3, [r3, #12]
 801af6a:	009b      	lsls	r3, r3, #2
 801af6c:	461a      	mov	r2, r3
 801af6e:	68f8      	ldr	r0, [r7, #12]
 801af70:	f003 f888 	bl	801e084 <memcpy>
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	6899      	ldr	r1, [r3, #8]
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	68db      	ldr	r3, [r3, #12]
 801af7c:	009b      	lsls	r3, r3, #2
 801af7e:	461a      	mov	r2, r3
 801af80:	68b8      	ldr	r0, [r7, #8]
 801af82:	f003 f87f 	bl	801e084 <memcpy>
    }
    parson_free(object->names);
 801af86:	4b0e      	ldr	r3, [pc, #56]	; (801afc0 <json_object_resize+0xf0>)
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	687a      	ldr	r2, [r7, #4]
 801af8c:	6852      	ldr	r2, [r2, #4]
 801af8e:	4610      	mov	r0, r2
 801af90:	4798      	blx	r3
    parson_free(object->values);
 801af92:	4b0b      	ldr	r3, [pc, #44]	; (801afc0 <json_object_resize+0xf0>)
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	687a      	ldr	r2, [r7, #4]
 801af98:	6892      	ldr	r2, [r2, #8]
 801af9a:	4610      	mov	r0, r2
 801af9c:	4798      	blx	r3
    object->names = temp_names;
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	68fa      	ldr	r2, [r7, #12]
 801afa2:	605a      	str	r2, [r3, #4]
    object->values = temp_values;
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	68ba      	ldr	r2, [r7, #8]
 801afa8:	609a      	str	r2, [r3, #8]
    object->capacity = new_capacity;
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	683a      	ldr	r2, [r7, #0]
 801afae:	611a      	str	r2, [r3, #16]
    return JSONSuccess;
 801afb0:	2300      	movs	r3, #0
}
 801afb2:	4618      	mov	r0, r3
 801afb4:	3710      	adds	r7, #16
 801afb6:	46bd      	mov	sp, r7
 801afb8:	bd80      	pop	{r7, pc}
 801afba:	bf00      	nop
 801afbc:	20000084 	.word	0x20000084
 801afc0:	20000088 	.word	0x20000088

0801afc4 <json_object_getn_value>:

static JSON_Value * json_object_getn_value(const JSON_Object *object, const char *name, size_t name_len) {
 801afc4:	b580      	push	{r7, lr}
 801afc6:	b086      	sub	sp, #24
 801afc8:	af00      	add	r7, sp, #0
 801afca:	60f8      	str	r0, [r7, #12]
 801afcc:	60b9      	str	r1, [r7, #8]
 801afce:	607a      	str	r2, [r7, #4]
    size_t i, name_length;
    for (i = 0; i < json_object_get_count(object); i++) {
 801afd0:	2300      	movs	r3, #0
 801afd2:	617b      	str	r3, [r7, #20]
 801afd4:	e026      	b.n	801b024 <json_object_getn_value+0x60>
        name_length = strlen(object->names[i]);
 801afd6:	68fb      	ldr	r3, [r7, #12]
 801afd8:	685a      	ldr	r2, [r3, #4]
 801afda:	697b      	ldr	r3, [r7, #20]
 801afdc:	009b      	lsls	r3, r3, #2
 801afde:	4413      	add	r3, r2
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	4618      	mov	r0, r3
 801afe4:	f7e5 f916 	bl	8000214 <strlen>
 801afe8:	6138      	str	r0, [r7, #16]
        if (name_length != name_len) {
 801afea:	693a      	ldr	r2, [r7, #16]
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	429a      	cmp	r2, r3
 801aff0:	d114      	bne.n	801b01c <json_object_getn_value+0x58>
            continue;
        }
        if (strncmp(object->names[i], name, name_len) == 0) {
 801aff2:	68fb      	ldr	r3, [r7, #12]
 801aff4:	685a      	ldr	r2, [r3, #4]
 801aff6:	697b      	ldr	r3, [r7, #20]
 801aff8:	009b      	lsls	r3, r3, #2
 801affa:	4413      	add	r3, r2
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	687a      	ldr	r2, [r7, #4]
 801b000:	68b9      	ldr	r1, [r7, #8]
 801b002:	4618      	mov	r0, r3
 801b004:	f003 fe5d 	bl	801ecc2 <strncmp>
 801b008:	4603      	mov	r3, r0
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d107      	bne.n	801b01e <json_object_getn_value+0x5a>
            return object->values[i];
 801b00e:	68fb      	ldr	r3, [r7, #12]
 801b010:	689a      	ldr	r2, [r3, #8]
 801b012:	697b      	ldr	r3, [r7, #20]
 801b014:	009b      	lsls	r3, r3, #2
 801b016:	4413      	add	r3, r2
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	e00b      	b.n	801b034 <json_object_getn_value+0x70>
            continue;
 801b01c:	bf00      	nop
    for (i = 0; i < json_object_get_count(object); i++) {
 801b01e:	697b      	ldr	r3, [r7, #20]
 801b020:	3301      	adds	r3, #1
 801b022:	617b      	str	r3, [r7, #20]
 801b024:	68f8      	ldr	r0, [r7, #12]
 801b026:	f001 ffd5 	bl	801cfd4 <json_object_get_count>
 801b02a:	4602      	mov	r2, r0
 801b02c:	697b      	ldr	r3, [r7, #20]
 801b02e:	4293      	cmp	r3, r2
 801b030:	d3d1      	bcc.n	801afd6 <json_object_getn_value+0x12>
        }
    }
    return NULL;
 801b032:	2300      	movs	r3, #0
}
 801b034:	4618      	mov	r0, r3
 801b036:	3718      	adds	r7, #24
 801b038:	46bd      	mov	sp, r7
 801b03a:	bd80      	pop	{r7, pc}

0801b03c <json_object_remove_internal>:

static JSON_Status json_object_remove_internal(JSON_Object *object, const char *name, int free_value) {
 801b03c:	b580      	push	{r7, lr}
 801b03e:	b086      	sub	sp, #24
 801b040:	af00      	add	r7, sp, #0
 801b042:	60f8      	str	r0, [r7, #12]
 801b044:	60b9      	str	r1, [r7, #8]
 801b046:	607a      	str	r2, [r7, #4]
    size_t i = 0, last_item_index = 0;
 801b048:	2300      	movs	r3, #0
 801b04a:	617b      	str	r3, [r7, #20]
 801b04c:	2300      	movs	r3, #0
 801b04e:	613b      	str	r3, [r7, #16]
    if (object == NULL || json_object_get_value(object, name) == NULL) {
 801b050:	68fb      	ldr	r3, [r7, #12]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d006      	beq.n	801b064 <json_object_remove_internal+0x28>
 801b056:	68b9      	ldr	r1, [r7, #8]
 801b058:	68f8      	ldr	r0, [r7, #12]
 801b05a:	f001 ff39 	bl	801ced0 <json_object_get_value>
 801b05e:	4603      	mov	r3, r0
 801b060:	2b00      	cmp	r3, #0
 801b062:	d102      	bne.n	801b06a <json_object_remove_internal+0x2e>
        return JSONFailure;
 801b064:	f04f 33ff 	mov.w	r3, #4294967295
 801b068:	e05a      	b.n	801b120 <json_object_remove_internal+0xe4>
    }
    last_item_index = json_object_get_count(object) - 1;
 801b06a:	68f8      	ldr	r0, [r7, #12]
 801b06c:	f001 ffb2 	bl	801cfd4 <json_object_get_count>
 801b070:	4603      	mov	r3, r0
 801b072:	3b01      	subs	r3, #1
 801b074:	613b      	str	r3, [r7, #16]
    for (i = 0; i < json_object_get_count(object); i++) {
 801b076:	2300      	movs	r3, #0
 801b078:	617b      	str	r3, [r7, #20]
 801b07a:	e048      	b.n	801b10e <json_object_remove_internal+0xd2>
        if (strcmp(object->names[i], name) == 0) {
 801b07c:	68fb      	ldr	r3, [r7, #12]
 801b07e:	685a      	ldr	r2, [r3, #4]
 801b080:	697b      	ldr	r3, [r7, #20]
 801b082:	009b      	lsls	r3, r3, #2
 801b084:	4413      	add	r3, r2
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	68b9      	ldr	r1, [r7, #8]
 801b08a:	4618      	mov	r0, r3
 801b08c:	f7e5 f8b8 	bl	8000200 <strcmp>
 801b090:	4603      	mov	r3, r0
 801b092:	2b00      	cmp	r3, #0
 801b094:	d138      	bne.n	801b108 <json_object_remove_internal+0xcc>
            parson_free(object->names[i]);
 801b096:	4b24      	ldr	r3, [pc, #144]	; (801b128 <json_object_remove_internal+0xec>)
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	68fa      	ldr	r2, [r7, #12]
 801b09c:	6851      	ldr	r1, [r2, #4]
 801b09e:	697a      	ldr	r2, [r7, #20]
 801b0a0:	0092      	lsls	r2, r2, #2
 801b0a2:	440a      	add	r2, r1
 801b0a4:	6812      	ldr	r2, [r2, #0]
 801b0a6:	4610      	mov	r0, r2
 801b0a8:	4798      	blx	r3
            if (free_value) {
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d008      	beq.n	801b0c2 <json_object_remove_internal+0x86>
                json_value_free(object->values[i]);
 801b0b0:	68fb      	ldr	r3, [r7, #12]
 801b0b2:	689a      	ldr	r2, [r3, #8]
 801b0b4:	697b      	ldr	r3, [r7, #20]
 801b0b6:	009b      	lsls	r3, r3, #2
 801b0b8:	4413      	add	r3, r2
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	4618      	mov	r0, r3
 801b0be:	f002 f895 	bl	801d1ec <json_value_free>
            }
            if (i != last_item_index) { /* Replace key value pair with one from the end */
 801b0c2:	697a      	ldr	r2, [r7, #20]
 801b0c4:	693b      	ldr	r3, [r7, #16]
 801b0c6:	429a      	cmp	r2, r3
 801b0c8:	d017      	beq.n	801b0fa <json_object_remove_internal+0xbe>
                object->names[i] = object->names[last_item_index];
 801b0ca:	68fb      	ldr	r3, [r7, #12]
 801b0cc:	685a      	ldr	r2, [r3, #4]
 801b0ce:	693b      	ldr	r3, [r7, #16]
 801b0d0:	009b      	lsls	r3, r3, #2
 801b0d2:	441a      	add	r2, r3
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	6859      	ldr	r1, [r3, #4]
 801b0d8:	697b      	ldr	r3, [r7, #20]
 801b0da:	009b      	lsls	r3, r3, #2
 801b0dc:	440b      	add	r3, r1
 801b0de:	6812      	ldr	r2, [r2, #0]
 801b0e0:	601a      	str	r2, [r3, #0]
                object->values[i] = object->values[last_item_index];
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	689a      	ldr	r2, [r3, #8]
 801b0e6:	693b      	ldr	r3, [r7, #16]
 801b0e8:	009b      	lsls	r3, r3, #2
 801b0ea:	441a      	add	r2, r3
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	6899      	ldr	r1, [r3, #8]
 801b0f0:	697b      	ldr	r3, [r7, #20]
 801b0f2:	009b      	lsls	r3, r3, #2
 801b0f4:	440b      	add	r3, r1
 801b0f6:	6812      	ldr	r2, [r2, #0]
 801b0f8:	601a      	str	r2, [r3, #0]
            }
            object->count -= 1;
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	68db      	ldr	r3, [r3, #12]
 801b0fe:	1e5a      	subs	r2, r3, #1
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	60da      	str	r2, [r3, #12]
            return JSONSuccess;
 801b104:	2300      	movs	r3, #0
 801b106:	e00b      	b.n	801b120 <json_object_remove_internal+0xe4>
    for (i = 0; i < json_object_get_count(object); i++) {
 801b108:	697b      	ldr	r3, [r7, #20]
 801b10a:	3301      	adds	r3, #1
 801b10c:	617b      	str	r3, [r7, #20]
 801b10e:	68f8      	ldr	r0, [r7, #12]
 801b110:	f001 ff60 	bl	801cfd4 <json_object_get_count>
 801b114:	4602      	mov	r2, r0
 801b116:	697b      	ldr	r3, [r7, #20]
 801b118:	4293      	cmp	r3, r2
 801b11a:	d3af      	bcc.n	801b07c <json_object_remove_internal+0x40>
        }
    }
    return JSONFailure; /* No execution path should end here */
 801b11c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b120:	4618      	mov	r0, r3
 801b122:	3718      	adds	r7, #24
 801b124:	46bd      	mov	sp, r7
 801b126:	bd80      	pop	{r7, pc}
 801b128:	20000088 	.word	0x20000088

0801b12c <json_object_dotremove_internal>:

static JSON_Status json_object_dotremove_internal(JSON_Object *object, const char *name, int free_value) {
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b088      	sub	sp, #32
 801b130:	af00      	add	r7, sp, #0
 801b132:	60f8      	str	r0, [r7, #12]
 801b134:	60b9      	str	r1, [r7, #8]
 801b136:	607a      	str	r2, [r7, #4]
    JSON_Value *temp_value = NULL;
 801b138:	2300      	movs	r3, #0
 801b13a:	61fb      	str	r3, [r7, #28]
    JSON_Object *temp_object = NULL;
 801b13c:	2300      	movs	r3, #0
 801b13e:	61bb      	str	r3, [r7, #24]
    const char *dot_pos = strchr(name, '.');
 801b140:	212e      	movs	r1, #46	; 0x2e
 801b142:	68b8      	ldr	r0, [r7, #8]
 801b144:	f003 fdb0 	bl	801eca8 <strchr>
 801b148:	6178      	str	r0, [r7, #20]
    if (dot_pos == NULL) {
 801b14a:	697b      	ldr	r3, [r7, #20]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d106      	bne.n	801b15e <json_object_dotremove_internal+0x32>
        return json_object_remove_internal(object, name, free_value);
 801b150:	687a      	ldr	r2, [r7, #4]
 801b152:	68b9      	ldr	r1, [r7, #8]
 801b154:	68f8      	ldr	r0, [r7, #12]
 801b156:	f7ff ff71 	bl	801b03c <json_object_remove_internal>
 801b15a:	4603      	mov	r3, r0
 801b15c:	e01d      	b.n	801b19a <json_object_dotremove_internal+0x6e>
    }
    temp_value = json_object_getn_value(object, name, dot_pos - name);
 801b15e:	697a      	ldr	r2, [r7, #20]
 801b160:	68bb      	ldr	r3, [r7, #8]
 801b162:	1ad3      	subs	r3, r2, r3
 801b164:	461a      	mov	r2, r3
 801b166:	68b9      	ldr	r1, [r7, #8]
 801b168:	68f8      	ldr	r0, [r7, #12]
 801b16a:	f7ff ff2b 	bl	801afc4 <json_object_getn_value>
 801b16e:	61f8      	str	r0, [r7, #28]
    if (json_value_get_type(temp_value) != JSONObject) {
 801b170:	69f8      	ldr	r0, [r7, #28]
 801b172:	f001 ffc4 	bl	801d0fe <json_value_get_type>
 801b176:	4603      	mov	r3, r0
 801b178:	2b04      	cmp	r3, #4
 801b17a:	d002      	beq.n	801b182 <json_object_dotremove_internal+0x56>
        return JSONFailure;
 801b17c:	f04f 33ff 	mov.w	r3, #4294967295
 801b180:	e00b      	b.n	801b19a <json_object_dotremove_internal+0x6e>
    }
    temp_object = json_value_get_object(temp_value);
 801b182:	69f8      	ldr	r0, [r7, #28]
 801b184:	f001 ffcd 	bl	801d122 <json_value_get_object>
 801b188:	61b8      	str	r0, [r7, #24]
    return json_object_dotremove_internal(temp_object, dot_pos + 1, free_value);
 801b18a:	697b      	ldr	r3, [r7, #20]
 801b18c:	3301      	adds	r3, #1
 801b18e:	687a      	ldr	r2, [r7, #4]
 801b190:	4619      	mov	r1, r3
 801b192:	69b8      	ldr	r0, [r7, #24]
 801b194:	f7ff ffca 	bl	801b12c <json_object_dotremove_internal>
 801b198:	4603      	mov	r3, r0
}
 801b19a:	4618      	mov	r0, r3
 801b19c:	3720      	adds	r7, #32
 801b19e:	46bd      	mov	sp, r7
 801b1a0:	bd80      	pop	{r7, pc}
	...

0801b1a4 <json_object_free>:

static void json_object_free(JSON_Object *object) {
 801b1a4:	b580      	push	{r7, lr}
 801b1a6:	b084      	sub	sp, #16
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < object->count; i++) {
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	60fb      	str	r3, [r7, #12]
 801b1b0:	e015      	b.n	801b1de <json_object_free+0x3a>
        parson_free(object->names[i]);
 801b1b2:	4b17      	ldr	r3, [pc, #92]	; (801b210 <json_object_free+0x6c>)
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	687a      	ldr	r2, [r7, #4]
 801b1b8:	6851      	ldr	r1, [r2, #4]
 801b1ba:	68fa      	ldr	r2, [r7, #12]
 801b1bc:	0092      	lsls	r2, r2, #2
 801b1be:	440a      	add	r2, r1
 801b1c0:	6812      	ldr	r2, [r2, #0]
 801b1c2:	4610      	mov	r0, r2
 801b1c4:	4798      	blx	r3
        json_value_free(object->values[i]);
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	689a      	ldr	r2, [r3, #8]
 801b1ca:	68fb      	ldr	r3, [r7, #12]
 801b1cc:	009b      	lsls	r3, r3, #2
 801b1ce:	4413      	add	r3, r2
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	f002 f80a 	bl	801d1ec <json_value_free>
    for (i = 0; i < object->count; i++) {
 801b1d8:	68fb      	ldr	r3, [r7, #12]
 801b1da:	3301      	adds	r3, #1
 801b1dc:	60fb      	str	r3, [r7, #12]
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	68db      	ldr	r3, [r3, #12]
 801b1e2:	68fa      	ldr	r2, [r7, #12]
 801b1e4:	429a      	cmp	r2, r3
 801b1e6:	d3e4      	bcc.n	801b1b2 <json_object_free+0xe>
    }
    parson_free(object->names);
 801b1e8:	4b09      	ldr	r3, [pc, #36]	; (801b210 <json_object_free+0x6c>)
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	687a      	ldr	r2, [r7, #4]
 801b1ee:	6852      	ldr	r2, [r2, #4]
 801b1f0:	4610      	mov	r0, r2
 801b1f2:	4798      	blx	r3
    parson_free(object->values);
 801b1f4:	4b06      	ldr	r3, [pc, #24]	; (801b210 <json_object_free+0x6c>)
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	687a      	ldr	r2, [r7, #4]
 801b1fa:	6892      	ldr	r2, [r2, #8]
 801b1fc:	4610      	mov	r0, r2
 801b1fe:	4798      	blx	r3
    parson_free(object);
 801b200:	4b03      	ldr	r3, [pc, #12]	; (801b210 <json_object_free+0x6c>)
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	6878      	ldr	r0, [r7, #4]
 801b206:	4798      	blx	r3
}
 801b208:	bf00      	nop
 801b20a:	3710      	adds	r7, #16
 801b20c:	46bd      	mov	sp, r7
 801b20e:	bd80      	pop	{r7, pc}
 801b210:	20000088 	.word	0x20000088

0801b214 <json_array_init>:

/* JSON Array */
static JSON_Array * json_array_init(JSON_Value *wrapping_value) {
 801b214:	b580      	push	{r7, lr}
 801b216:	b084      	sub	sp, #16
 801b218:	af00      	add	r7, sp, #0
 801b21a:	6078      	str	r0, [r7, #4]
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
 801b21c:	4b0d      	ldr	r3, [pc, #52]	; (801b254 <json_array_init+0x40>)
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	2010      	movs	r0, #16
 801b222:	4798      	blx	r3
 801b224:	60f8      	str	r0, [r7, #12]
    if (new_array == NULL) {
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d101      	bne.n	801b230 <json_array_init+0x1c>
        return NULL;
 801b22c:	2300      	movs	r3, #0
 801b22e:	e00c      	b.n	801b24a <json_array_init+0x36>
    }
    new_array->wrapping_value = wrapping_value;
 801b230:	68fb      	ldr	r3, [r7, #12]
 801b232:	687a      	ldr	r2, [r7, #4]
 801b234:	601a      	str	r2, [r3, #0]
    new_array->items = (JSON_Value**)NULL;
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	2200      	movs	r2, #0
 801b23a:	605a      	str	r2, [r3, #4]
    new_array->capacity = 0;
 801b23c:	68fb      	ldr	r3, [r7, #12]
 801b23e:	2200      	movs	r2, #0
 801b240:	60da      	str	r2, [r3, #12]
    new_array->count = 0;
 801b242:	68fb      	ldr	r3, [r7, #12]
 801b244:	2200      	movs	r2, #0
 801b246:	609a      	str	r2, [r3, #8]
    return new_array;
 801b248:	68fb      	ldr	r3, [r7, #12]
}
 801b24a:	4618      	mov	r0, r3
 801b24c:	3710      	adds	r7, #16
 801b24e:	46bd      	mov	sp, r7
 801b250:	bd80      	pop	{r7, pc}
 801b252:	bf00      	nop
 801b254:	20000084 	.word	0x20000084

0801b258 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
 801b258:	b580      	push	{r7, lr}
 801b25a:	b084      	sub	sp, #16
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	6078      	str	r0, [r7, #4]
 801b260:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	689a      	ldr	r2, [r3, #8]
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	68db      	ldr	r3, [r3, #12]
 801b26a:	429a      	cmp	r2, r3
 801b26c:	d311      	bcc.n	801b292 <json_array_add+0x3a>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	68db      	ldr	r3, [r3, #12]
 801b272:	005b      	lsls	r3, r3, #1
 801b274:	2b10      	cmp	r3, #16
 801b276:	bf38      	it	cc
 801b278:	2310      	movcc	r3, #16
 801b27a:	60fb      	str	r3, [r7, #12]
        if (json_array_resize(array, new_capacity) == JSONFailure) {
 801b27c:	68f9      	ldr	r1, [r7, #12]
 801b27e:	6878      	ldr	r0, [r7, #4]
 801b280:	f000 f820 	bl	801b2c4 <json_array_resize>
 801b284:	4603      	mov	r3, r0
 801b286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b28a:	d102      	bne.n	801b292 <json_array_add+0x3a>
            return JSONFailure;
 801b28c:	f04f 33ff 	mov.w	r3, #4294967295
 801b290:	e013      	b.n	801b2ba <json_array_add+0x62>
        }
    }
    value->parent = json_array_get_wrapping_value(array);
 801b292:	6878      	ldr	r0, [r7, #4]
 801b294:	f001 ff27 	bl	801d0e6 <json_array_get_wrapping_value>
 801b298:	4602      	mov	r2, r0
 801b29a:	683b      	ldr	r3, [r7, #0]
 801b29c:	601a      	str	r2, [r3, #0]
    array->items[array->count] = value;
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	685a      	ldr	r2, [r3, #4]
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	689b      	ldr	r3, [r3, #8]
 801b2a6:	009b      	lsls	r3, r3, #2
 801b2a8:	4413      	add	r3, r2
 801b2aa:	683a      	ldr	r2, [r7, #0]
 801b2ac:	601a      	str	r2, [r3, #0]
    array->count++;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	689b      	ldr	r3, [r3, #8]
 801b2b2:	1c5a      	adds	r2, r3, #1
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
 801b2b8:	2300      	movs	r3, #0
}
 801b2ba:	4618      	mov	r0, r3
 801b2bc:	3710      	adds	r7, #16
 801b2be:	46bd      	mov	sp, r7
 801b2c0:	bd80      	pop	{r7, pc}
	...

0801b2c4 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
 801b2c4:	b580      	push	{r7, lr}
 801b2c6:	b084      	sub	sp, #16
 801b2c8:	af00      	add	r7, sp, #0
 801b2ca:	6078      	str	r0, [r7, #4]
 801b2cc:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
 801b2d2:	683b      	ldr	r3, [r7, #0]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d102      	bne.n	801b2de <json_array_resize+0x1a>
        return JSONFailure;
 801b2d8:	f04f 33ff 	mov.w	r3, #4294967295
 801b2dc:	e02a      	b.n	801b334 <json_array_resize+0x70>
    }
    new_items = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
 801b2de:	4b17      	ldr	r3, [pc, #92]	; (801b33c <json_array_resize+0x78>)
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	683a      	ldr	r2, [r7, #0]
 801b2e4:	0092      	lsls	r2, r2, #2
 801b2e6:	4610      	mov	r0, r2
 801b2e8:	4798      	blx	r3
 801b2ea:	60f8      	str	r0, [r7, #12]
    if (new_items == NULL) {
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	d102      	bne.n	801b2f8 <json_array_resize+0x34>
        return JSONFailure;
 801b2f2:	f04f 33ff 	mov.w	r3, #4294967295
 801b2f6:	e01d      	b.n	801b334 <json_array_resize+0x70>
    }
    if (array->items != NULL && array->count > 0) {
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	685b      	ldr	r3, [r3, #4]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d00c      	beq.n	801b31a <json_array_resize+0x56>
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	689b      	ldr	r3, [r3, #8]
 801b304:	2b00      	cmp	r3, #0
 801b306:	d008      	beq.n	801b31a <json_array_resize+0x56>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	6859      	ldr	r1, [r3, #4]
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	689b      	ldr	r3, [r3, #8]
 801b310:	009b      	lsls	r3, r3, #2
 801b312:	461a      	mov	r2, r3
 801b314:	68f8      	ldr	r0, [r7, #12]
 801b316:	f002 feb5 	bl	801e084 <memcpy>
    }
    parson_free(array->items);
 801b31a:	4b09      	ldr	r3, [pc, #36]	; (801b340 <json_array_resize+0x7c>)
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	687a      	ldr	r2, [r7, #4]
 801b320:	6852      	ldr	r2, [r2, #4]
 801b322:	4610      	mov	r0, r2
 801b324:	4798      	blx	r3
    array->items = new_items;
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	68fa      	ldr	r2, [r7, #12]
 801b32a:	605a      	str	r2, [r3, #4]
    array->capacity = new_capacity;
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	683a      	ldr	r2, [r7, #0]
 801b330:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
 801b332:	2300      	movs	r3, #0
}
 801b334:	4618      	mov	r0, r3
 801b336:	3710      	adds	r7, #16
 801b338:	46bd      	mov	sp, r7
 801b33a:	bd80      	pop	{r7, pc}
 801b33c:	20000084 	.word	0x20000084
 801b340:	20000088 	.word	0x20000088

0801b344 <json_array_free>:

static void json_array_free(JSON_Array *array) {
 801b344:	b580      	push	{r7, lr}
 801b346:	b084      	sub	sp, #16
 801b348:	af00      	add	r7, sp, #0
 801b34a:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < array->count; i++) {
 801b34c:	2300      	movs	r3, #0
 801b34e:	60fb      	str	r3, [r7, #12]
 801b350:	e00b      	b.n	801b36a <json_array_free+0x26>
        json_value_free(array->items[i]);
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	685a      	ldr	r2, [r3, #4]
 801b356:	68fb      	ldr	r3, [r7, #12]
 801b358:	009b      	lsls	r3, r3, #2
 801b35a:	4413      	add	r3, r2
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	4618      	mov	r0, r3
 801b360:	f001 ff44 	bl	801d1ec <json_value_free>
    for (i = 0; i < array->count; i++) {
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	3301      	adds	r3, #1
 801b368:	60fb      	str	r3, [r7, #12]
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	689b      	ldr	r3, [r3, #8]
 801b36e:	68fa      	ldr	r2, [r7, #12]
 801b370:	429a      	cmp	r2, r3
 801b372:	d3ee      	bcc.n	801b352 <json_array_free+0xe>
    }
    parson_free(array->items);
 801b374:	4b06      	ldr	r3, [pc, #24]	; (801b390 <json_array_free+0x4c>)
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	687a      	ldr	r2, [r7, #4]
 801b37a:	6852      	ldr	r2, [r2, #4]
 801b37c:	4610      	mov	r0, r2
 801b37e:	4798      	blx	r3
    parson_free(array);
 801b380:	4b03      	ldr	r3, [pc, #12]	; (801b390 <json_array_free+0x4c>)
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	6878      	ldr	r0, [r7, #4]
 801b386:	4798      	blx	r3
}
 801b388:	bf00      	nop
 801b38a:	3710      	adds	r7, #16
 801b38c:	46bd      	mov	sp, r7
 801b38e:	bd80      	pop	{r7, pc}
 801b390:	20000088 	.word	0x20000088

0801b394 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string) {
 801b394:	b580      	push	{r7, lr}
 801b396:	b084      	sub	sp, #16
 801b398:	af00      	add	r7, sp, #0
 801b39a:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801b39c:	4b0b      	ldr	r3, [pc, #44]	; (801b3cc <json_value_init_string_no_copy+0x38>)
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	2010      	movs	r0, #16
 801b3a2:	4798      	blx	r3
 801b3a4:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801b3a6:	68fb      	ldr	r3, [r7, #12]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d101      	bne.n	801b3b0 <json_value_init_string_no_copy+0x1c>
        return NULL;
 801b3ac:	2300      	movs	r3, #0
 801b3ae:	e009      	b.n	801b3c4 <json_value_init_string_no_copy+0x30>
    }
    new_value->parent = NULL;
 801b3b0:	68fb      	ldr	r3, [r7, #12]
 801b3b2:	2200      	movs	r2, #0
 801b3b4:	601a      	str	r2, [r3, #0]
    new_value->type = JSONString;
 801b3b6:	68fb      	ldr	r3, [r7, #12]
 801b3b8:	2202      	movs	r2, #2
 801b3ba:	605a      	str	r2, [r3, #4]
    new_value->value.string = string;
 801b3bc:	68fb      	ldr	r3, [r7, #12]
 801b3be:	687a      	ldr	r2, [r7, #4]
 801b3c0:	609a      	str	r2, [r3, #8]
    return new_value;
 801b3c2:	68fb      	ldr	r3, [r7, #12]
}
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	3710      	adds	r7, #16
 801b3c8:	46bd      	mov	sp, r7
 801b3ca:	bd80      	pop	{r7, pc}
 801b3cc:	20000084 	.word	0x20000084

0801b3d0 <skip_quotes>:

/* Parser */
static JSON_Status skip_quotes(const char **string) {
 801b3d0:	b480      	push	{r7}
 801b3d2:	b083      	sub	sp, #12
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	6078      	str	r0, [r7, #4]
    if (**string != '\"') {
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	781b      	ldrb	r3, [r3, #0]
 801b3de:	2b22      	cmp	r3, #34	; 0x22
 801b3e0:	d002      	beq.n	801b3e8 <skip_quotes+0x18>
        return JSONFailure;
 801b3e2:	f04f 33ff 	mov.w	r3, #4294967295
 801b3e6:	e02f      	b.n	801b448 <skip_quotes+0x78>
    }
    SKIP_CHAR(string);
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	1c5a      	adds	r2, r3, #1
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801b3f2:	e01e      	b.n	801b432 <skip_quotes+0x62>
        if (**string == '\0') {
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	781b      	ldrb	r3, [r3, #0]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d102      	bne.n	801b404 <skip_quotes+0x34>
            return JSONFailure;
 801b3fe:	f04f 33ff 	mov.w	r3, #4294967295
 801b402:	e021      	b.n	801b448 <skip_quotes+0x78>
        } else if (**string == '\\') {
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	781b      	ldrb	r3, [r3, #0]
 801b40a:	2b5c      	cmp	r3, #92	; 0x5c
 801b40c:	d10c      	bne.n	801b428 <skip_quotes+0x58>
            SKIP_CHAR(string);
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	1c5a      	adds	r2, r3, #1
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	601a      	str	r2, [r3, #0]
            if (**string == '\0') {
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	781b      	ldrb	r3, [r3, #0]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d102      	bne.n	801b428 <skip_quotes+0x58>
                return JSONFailure;
 801b422:	f04f 33ff 	mov.w	r3, #4294967295
 801b426:	e00f      	b.n	801b448 <skip_quotes+0x78>
            }
        }
        SKIP_CHAR(string);
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	1c5a      	adds	r2, r3, #1
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	781b      	ldrb	r3, [r3, #0]
 801b438:	2b22      	cmp	r3, #34	; 0x22
 801b43a:	d1db      	bne.n	801b3f4 <skip_quotes+0x24>
    }
    SKIP_CHAR(string);
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	1c5a      	adds	r2, r3, #1
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801b446:	2300      	movs	r3, #0
}
 801b448:	4618      	mov	r0, r3
 801b44a:	370c      	adds	r7, #12
 801b44c:	46bd      	mov	sp, r7
 801b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b452:	4770      	bx	lr

0801b454 <parse_utf16>:

static int parse_utf16(const char **unprocessed, char **processed) {
 801b454:	b580      	push	{r7, lr}
 801b456:	b088      	sub	sp, #32
 801b458:	af00      	add	r7, sp, #0
 801b45a:	6078      	str	r0, [r7, #4]
 801b45c:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    int parse_succeeded = 0;
 801b45e:	2300      	movs	r3, #0
 801b460:	617b      	str	r3, [r7, #20]
    char *processed_ptr = *processed;
 801b462:	683b      	ldr	r3, [r7, #0]
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	61bb      	str	r3, [r7, #24]
    unprocessed_ptr++; /* skips u */
 801b46e:	69bb      	ldr	r3, [r7, #24]
 801b470:	3301      	adds	r3, #1
 801b472:	61bb      	str	r3, [r7, #24]
    parse_succeeded = parse_utf16_hex(unprocessed_ptr, &cp);
 801b474:	f107 030c 	add.w	r3, r7, #12
 801b478:	4619      	mov	r1, r3
 801b47a:	69b8      	ldr	r0, [r7, #24]
 801b47c:	f7ff fac8 	bl	801aa10 <parse_utf16_hex>
 801b480:	6178      	str	r0, [r7, #20]
    if (!parse_succeeded) {
 801b482:	697b      	ldr	r3, [r7, #20]
 801b484:	2b00      	cmp	r3, #0
 801b486:	d102      	bne.n	801b48e <parse_utf16+0x3a>
        return JSONFailure;
 801b488:	f04f 33ff 	mov.w	r3, #4294967295
 801b48c:	e0ce      	b.n	801b62c <parse_utf16+0x1d8>
    }
    if (cp < 0x80) {
 801b48e:	68fb      	ldr	r3, [r7, #12]
 801b490:	2b7f      	cmp	r3, #127	; 0x7f
 801b492:	d804      	bhi.n	801b49e <parse_utf16+0x4a>
        processed_ptr[0] = (char)cp; /* 0xxxxxxx */
 801b494:	68fb      	ldr	r3, [r7, #12]
 801b496:	b2da      	uxtb	r2, r3
 801b498:	69fb      	ldr	r3, [r7, #28]
 801b49a:	701a      	strb	r2, [r3, #0]
 801b49c:	e0bc      	b.n	801b618 <parse_utf16+0x1c4>
    } else if (cp < 0x800) {
 801b49e:	68fb      	ldr	r3, [r7, #12]
 801b4a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b4a4:	d219      	bcs.n	801b4da <parse_utf16+0x86>
        processed_ptr[0] = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
 801b4a6:	68fb      	ldr	r3, [r7, #12]
 801b4a8:	099b      	lsrs	r3, r3, #6
 801b4aa:	b2db      	uxtb	r3, r3
 801b4ac:	f003 031f 	and.w	r3, r3, #31
 801b4b0:	b2db      	uxtb	r3, r3
 801b4b2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801b4b6:	b2da      	uxtb	r2, r3
 801b4b8:	69fb      	ldr	r3, [r7, #28]
 801b4ba:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp)      & 0x3F) | 0x80; /* 10xxxxxx */
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	b2db      	uxtb	r3, r3
 801b4c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b4c4:	b2da      	uxtb	r2, r3
 801b4c6:	69fb      	ldr	r3, [r7, #28]
 801b4c8:	3301      	adds	r3, #1
 801b4ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b4ce:	b2d2      	uxtb	r2, r2
 801b4d0:	701a      	strb	r2, [r3, #0]
        processed_ptr += 1;
 801b4d2:	69fb      	ldr	r3, [r7, #28]
 801b4d4:	3301      	adds	r3, #1
 801b4d6:	61fb      	str	r3, [r7, #28]
 801b4d8:	e09e      	b.n	801b618 <parse_utf16+0x1c4>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
 801b4da:	68fb      	ldr	r3, [r7, #12]
 801b4dc:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801b4e0:	d303      	bcc.n	801b4ea <parse_utf16+0x96>
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801b4e8:	d325      	bcc.n	801b536 <parse_utf16+0xe2>
        processed_ptr[0] = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	0b1b      	lsrs	r3, r3, #12
 801b4ee:	b2db      	uxtb	r3, r3
 801b4f0:	f003 030f 	and.w	r3, r3, #15
 801b4f4:	b2db      	uxtb	r3, r3
 801b4f6:	f063 031f 	orn	r3, r3, #31
 801b4fa:	b2da      	uxtb	r2, r3
 801b4fc:	69fb      	ldr	r3, [r7, #28]
 801b4fe:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	099b      	lsrs	r3, r3, #6
 801b504:	b2db      	uxtb	r3, r3
 801b506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b50a:	b2da      	uxtb	r2, r3
 801b50c:	69fb      	ldr	r3, [r7, #28]
 801b50e:	3301      	adds	r3, #1
 801b510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b514:	b2d2      	uxtb	r2, r2
 801b516:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = ((cp)       & 0x3F) | 0x80; /* 10xxxxxx */
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	b2db      	uxtb	r3, r3
 801b51c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b520:	b2da      	uxtb	r2, r3
 801b522:	69fb      	ldr	r3, [r7, #28]
 801b524:	3302      	adds	r3, #2
 801b526:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b52a:	b2d2      	uxtb	r2, r2
 801b52c:	701a      	strb	r2, [r3, #0]
        processed_ptr += 2;
 801b52e:	69fb      	ldr	r3, [r7, #28]
 801b530:	3302      	adds	r3, #2
 801b532:	61fb      	str	r3, [r7, #28]
 801b534:	e070      	b.n	801b618 <parse_utf16+0x1c4>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 801b53c:	d369      	bcc.n	801b612 <parse_utf16+0x1be>
 801b53e:	68fb      	ldr	r3, [r7, #12]
 801b540:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801b544:	d265      	bcs.n	801b612 <parse_utf16+0x1be>
        lead = cp;
 801b546:	68fb      	ldr	r3, [r7, #12]
 801b548:	613b      	str	r3, [r7, #16]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
 801b54a:	69bb      	ldr	r3, [r7, #24]
 801b54c:	3304      	adds	r3, #4
 801b54e:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u') {
 801b550:	69bb      	ldr	r3, [r7, #24]
 801b552:	1c5a      	adds	r2, r3, #1
 801b554:	61ba      	str	r2, [r7, #24]
 801b556:	781b      	ldrb	r3, [r3, #0]
 801b558:	2b5c      	cmp	r3, #92	; 0x5c
 801b55a:	d105      	bne.n	801b568 <parse_utf16+0x114>
 801b55c:	69bb      	ldr	r3, [r7, #24]
 801b55e:	1c5a      	adds	r2, r3, #1
 801b560:	61ba      	str	r2, [r7, #24]
 801b562:	781b      	ldrb	r3, [r3, #0]
 801b564:	2b75      	cmp	r3, #117	; 0x75
 801b566:	d002      	beq.n	801b56e <parse_utf16+0x11a>
            return JSONFailure;
 801b568:	f04f 33ff 	mov.w	r3, #4294967295
 801b56c:	e05e      	b.n	801b62c <parse_utf16+0x1d8>
        }
        parse_succeeded = parse_utf16_hex(unprocessed_ptr, &trail);
 801b56e:	f107 0308 	add.w	r3, r7, #8
 801b572:	4619      	mov	r1, r3
 801b574:	69b8      	ldr	r0, [r7, #24]
 801b576:	f7ff fa4b 	bl	801aa10 <parse_utf16_hex>
 801b57a:	6178      	str	r0, [r7, #20]
        if (!parse_succeeded || trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
 801b57c:	697b      	ldr	r3, [r7, #20]
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d007      	beq.n	801b592 <parse_utf16+0x13e>
 801b582:	68bb      	ldr	r3, [r7, #8]
 801b584:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 801b588:	d303      	bcc.n	801b592 <parse_utf16+0x13e>
 801b58a:	68bb      	ldr	r3, [r7, #8]
 801b58c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 801b590:	d302      	bcc.n	801b598 <parse_utf16+0x144>
            return JSONFailure;
 801b592:	f04f 33ff 	mov.w	r3, #4294967295
 801b596:	e049      	b.n	801b62c <parse_utf16+0x1d8>
        }
        cp = ((((lead - 0xD800) & 0x3FF) << 10) | ((trail - 0xDC00) & 0x3FF)) + 0x010000;
 801b598:	693b      	ldr	r3, [r7, #16]
 801b59a:	029a      	lsls	r2, r3, #10
 801b59c:	4b25      	ldr	r3, [pc, #148]	; (801b634 <parse_utf16+0x1e0>)
 801b59e:	4013      	ands	r3, r2
 801b5a0:	68ba      	ldr	r2, [r7, #8]
 801b5a2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801b5a6:	4313      	orrs	r3, r2
 801b5a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801b5ac:	60fb      	str	r3, [r7, #12]
        processed_ptr[0] = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	0c9b      	lsrs	r3, r3, #18
 801b5b2:	b2db      	uxtb	r3, r3
 801b5b4:	f003 0307 	and.w	r3, r3, #7
 801b5b8:	b2db      	uxtb	r3, r3
 801b5ba:	f063 030f 	orn	r3, r3, #15
 801b5be:	b2da      	uxtb	r2, r3
 801b5c0:	69fb      	ldr	r3, [r7, #28]
 801b5c2:	701a      	strb	r2, [r3, #0]
        processed_ptr[1] = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	0b1b      	lsrs	r3, r3, #12
 801b5c8:	b2db      	uxtb	r3, r3
 801b5ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b5ce:	b2da      	uxtb	r2, r3
 801b5d0:	69fb      	ldr	r3, [r7, #28]
 801b5d2:	3301      	adds	r3, #1
 801b5d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b5d8:	b2d2      	uxtb	r2, r2
 801b5da:	701a      	strb	r2, [r3, #0]
        processed_ptr[2] = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
 801b5dc:	68fb      	ldr	r3, [r7, #12]
 801b5de:	099b      	lsrs	r3, r3, #6
 801b5e0:	b2db      	uxtb	r3, r3
 801b5e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b5e6:	b2da      	uxtb	r2, r3
 801b5e8:	69fb      	ldr	r3, [r7, #28]
 801b5ea:	3302      	adds	r3, #2
 801b5ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b5f0:	b2d2      	uxtb	r2, r2
 801b5f2:	701a      	strb	r2, [r3, #0]
        processed_ptr[3] = (((cp)       & 0x3F) | 0x80); /* 10xxxxxx */
 801b5f4:	68fb      	ldr	r3, [r7, #12]
 801b5f6:	b2db      	uxtb	r3, r3
 801b5f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b5fc:	b2da      	uxtb	r2, r3
 801b5fe:	69fb      	ldr	r3, [r7, #28]
 801b600:	3303      	adds	r3, #3
 801b602:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801b606:	b2d2      	uxtb	r2, r2
 801b608:	701a      	strb	r2, [r3, #0]
        processed_ptr += 3;
 801b60a:	69fb      	ldr	r3, [r7, #28]
 801b60c:	3303      	adds	r3, #3
 801b60e:	61fb      	str	r3, [r7, #28]
 801b610:	e002      	b.n	801b618 <parse_utf16+0x1c4>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
 801b612:	f04f 33ff 	mov.w	r3, #4294967295
 801b616:	e009      	b.n	801b62c <parse_utf16+0x1d8>
    }
    unprocessed_ptr += 3;
 801b618:	69bb      	ldr	r3, [r7, #24]
 801b61a:	3303      	adds	r3, #3
 801b61c:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
 801b61e:	683b      	ldr	r3, [r7, #0]
 801b620:	69fa      	ldr	r2, [r7, #28]
 801b622:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	69ba      	ldr	r2, [r7, #24]
 801b628:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
 801b62a:	2300      	movs	r3, #0
}
 801b62c:	4618      	mov	r0, r3
 801b62e:	3720      	adds	r7, #32
 801b630:	46bd      	mov	sp, r7
 801b632:	bd80      	pop	{r7, pc}
 801b634:	000ffc00 	.word	0x000ffc00

0801b638 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t len) {
 801b638:	b580      	push	{r7, lr}
 801b63a:	b088      	sub	sp, #32
 801b63c:	af00      	add	r7, sp, #0
 801b63e:	6078      	str	r0, [r7, #4]
 801b640:	6039      	str	r1, [r7, #0]
    const char *input_ptr = input;
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	60fb      	str	r3, [r7, #12]
    size_t initial_size = (len + 1) * sizeof(char);
 801b646:	683b      	ldr	r3, [r7, #0]
 801b648:	3301      	adds	r3, #1
 801b64a:	61fb      	str	r3, [r7, #28]
    size_t final_size = 0;
 801b64c:	2300      	movs	r3, #0
 801b64e:	61bb      	str	r3, [r7, #24]
    char *output = NULL, *output_ptr = NULL, *resized_output = NULL;
 801b650:	2300      	movs	r3, #0
 801b652:	617b      	str	r3, [r7, #20]
 801b654:	2300      	movs	r3, #0
 801b656:	60bb      	str	r3, [r7, #8]
 801b658:	2300      	movs	r3, #0
 801b65a:	613b      	str	r3, [r7, #16]
    output = (char*)parson_malloc(initial_size);
 801b65c:	4b66      	ldr	r3, [pc, #408]	; (801b7f8 <process_string+0x1c0>)
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	69f8      	ldr	r0, [r7, #28]
 801b662:	4798      	blx	r3
 801b664:	6178      	str	r0, [r7, #20]
    if (output == NULL) {
 801b666:	697b      	ldr	r3, [r7, #20]
 801b668:	2b00      	cmp	r3, #0
 801b66a:	f000 80b5 	beq.w	801b7d8 <process_string+0x1a0>
        goto error;
    }
    output_ptr = output;
 801b66e:	697b      	ldr	r3, [r7, #20]
 801b670:	60bb      	str	r3, [r7, #8]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801b672:	e08a      	b.n	801b78a <process_string+0x152>
        if (*input_ptr == '\\') {
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	781b      	ldrb	r3, [r3, #0]
 801b678:	2b5c      	cmp	r3, #92	; 0x5c
 801b67a:	d176      	bne.n	801b76a <process_string+0x132>
            input_ptr++;
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	3301      	adds	r3, #1
 801b680:	60fb      	str	r3, [r7, #12]
            switch (*input_ptr) {
 801b682:	68fb      	ldr	r3, [r7, #12]
 801b684:	781b      	ldrb	r3, [r3, #0]
 801b686:	2b75      	cmp	r3, #117	; 0x75
 801b688:	f300 80a8 	bgt.w	801b7dc <process_string+0x1a4>
 801b68c:	2b5c      	cmp	r3, #92	; 0x5c
 801b68e:	da04      	bge.n	801b69a <process_string+0x62>
 801b690:	2b22      	cmp	r3, #34	; 0x22
 801b692:	d03d      	beq.n	801b710 <process_string+0xd8>
 801b694:	2b2f      	cmp	r3, #47	; 0x2f
 801b696:	d043      	beq.n	801b720 <process_string+0xe8>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
                        goto error;
                    }
                    break;
                default:
                    goto error;
 801b698:	e0a0      	b.n	801b7dc <process_string+0x1a4>
            switch (*input_ptr) {
 801b69a:	3b5c      	subs	r3, #92	; 0x5c
 801b69c:	2b19      	cmp	r3, #25
 801b69e:	f200 809d 	bhi.w	801b7dc <process_string+0x1a4>
 801b6a2:	a201      	add	r2, pc, #4	; (adr r2, 801b6a8 <process_string+0x70>)
 801b6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b6a8:	0801b719 	.word	0x0801b719
 801b6ac:	0801b7dd 	.word	0x0801b7dd
 801b6b0:	0801b7dd 	.word	0x0801b7dd
 801b6b4:	0801b7dd 	.word	0x0801b7dd
 801b6b8:	0801b7dd 	.word	0x0801b7dd
 801b6bc:	0801b7dd 	.word	0x0801b7dd
 801b6c0:	0801b729 	.word	0x0801b729
 801b6c4:	0801b7dd 	.word	0x0801b7dd
 801b6c8:	0801b7dd 	.word	0x0801b7dd
 801b6cc:	0801b7dd 	.word	0x0801b7dd
 801b6d0:	0801b731 	.word	0x0801b731
 801b6d4:	0801b7dd 	.word	0x0801b7dd
 801b6d8:	0801b7dd 	.word	0x0801b7dd
 801b6dc:	0801b7dd 	.word	0x0801b7dd
 801b6e0:	0801b7dd 	.word	0x0801b7dd
 801b6e4:	0801b7dd 	.word	0x0801b7dd
 801b6e8:	0801b7dd 	.word	0x0801b7dd
 801b6ec:	0801b7dd 	.word	0x0801b7dd
 801b6f0:	0801b739 	.word	0x0801b739
 801b6f4:	0801b7dd 	.word	0x0801b7dd
 801b6f8:	0801b7dd 	.word	0x0801b7dd
 801b6fc:	0801b7dd 	.word	0x0801b7dd
 801b700:	0801b741 	.word	0x0801b741
 801b704:	0801b7dd 	.word	0x0801b7dd
 801b708:	0801b749 	.word	0x0801b749
 801b70c:	0801b751 	.word	0x0801b751
                case '\"': *output_ptr = '\"'; break;
 801b710:	68bb      	ldr	r3, [r7, #8]
 801b712:	2222      	movs	r2, #34	; 0x22
 801b714:	701a      	strb	r2, [r3, #0]
 801b716:	e032      	b.n	801b77e <process_string+0x146>
                case '\\': *output_ptr = '\\'; break;
 801b718:	68bb      	ldr	r3, [r7, #8]
 801b71a:	225c      	movs	r2, #92	; 0x5c
 801b71c:	701a      	strb	r2, [r3, #0]
 801b71e:	e02e      	b.n	801b77e <process_string+0x146>
                case '/':  *output_ptr = '/';  break;
 801b720:	68bb      	ldr	r3, [r7, #8]
 801b722:	222f      	movs	r2, #47	; 0x2f
 801b724:	701a      	strb	r2, [r3, #0]
 801b726:	e02a      	b.n	801b77e <process_string+0x146>
                case 'b':  *output_ptr = '\b'; break;
 801b728:	68bb      	ldr	r3, [r7, #8]
 801b72a:	2208      	movs	r2, #8
 801b72c:	701a      	strb	r2, [r3, #0]
 801b72e:	e026      	b.n	801b77e <process_string+0x146>
                case 'f':  *output_ptr = '\f'; break;
 801b730:	68bb      	ldr	r3, [r7, #8]
 801b732:	220c      	movs	r2, #12
 801b734:	701a      	strb	r2, [r3, #0]
 801b736:	e022      	b.n	801b77e <process_string+0x146>
                case 'n':  *output_ptr = '\n'; break;
 801b738:	68bb      	ldr	r3, [r7, #8]
 801b73a:	220a      	movs	r2, #10
 801b73c:	701a      	strb	r2, [r3, #0]
 801b73e:	e01e      	b.n	801b77e <process_string+0x146>
                case 'r':  *output_ptr = '\r'; break;
 801b740:	68bb      	ldr	r3, [r7, #8]
 801b742:	220d      	movs	r2, #13
 801b744:	701a      	strb	r2, [r3, #0]
 801b746:	e01a      	b.n	801b77e <process_string+0x146>
                case 't':  *output_ptr = '\t'; break;
 801b748:	68bb      	ldr	r3, [r7, #8]
 801b74a:	2209      	movs	r2, #9
 801b74c:	701a      	strb	r2, [r3, #0]
 801b74e:	e016      	b.n	801b77e <process_string+0x146>
                    if (parse_utf16(&input_ptr, &output_ptr) == JSONFailure) {
 801b750:	f107 0208 	add.w	r2, r7, #8
 801b754:	f107 030c 	add.w	r3, r7, #12
 801b758:	4611      	mov	r1, r2
 801b75a:	4618      	mov	r0, r3
 801b75c:	f7ff fe7a 	bl	801b454 <parse_utf16>
 801b760:	4603      	mov	r3, r0
 801b762:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b766:	d109      	bne.n	801b77c <process_string+0x144>
                        goto error;
 801b768:	e03d      	b.n	801b7e6 <process_string+0x1ae>
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	781b      	ldrb	r3, [r3, #0]
 801b76e:	2b1f      	cmp	r3, #31
 801b770:	d936      	bls.n	801b7e0 <process_string+0x1a8>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
 801b772:	68fa      	ldr	r2, [r7, #12]
 801b774:	68bb      	ldr	r3, [r7, #8]
 801b776:	7812      	ldrb	r2, [r2, #0]
 801b778:	701a      	strb	r2, [r3, #0]
 801b77a:	e000      	b.n	801b77e <process_string+0x146>
                    break;
 801b77c:	bf00      	nop
        }
        output_ptr++;
 801b77e:	68bb      	ldr	r3, [r7, #8]
 801b780:	3301      	adds	r3, #1
 801b782:	60bb      	str	r3, [r7, #8]
        input_ptr++;
 801b784:	68fb      	ldr	r3, [r7, #12]
 801b786:	3301      	adds	r3, #1
 801b788:	60fb      	str	r3, [r7, #12]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
 801b78a:	68fb      	ldr	r3, [r7, #12]
 801b78c:	781b      	ldrb	r3, [r3, #0]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d007      	beq.n	801b7a2 <process_string+0x16a>
 801b792:	68fa      	ldr	r2, [r7, #12]
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	1ad3      	subs	r3, r2, r3
 801b798:	461a      	mov	r2, r3
 801b79a:	683b      	ldr	r3, [r7, #0]
 801b79c:	4293      	cmp	r3, r2
 801b79e:	f63f af69 	bhi.w	801b674 <process_string+0x3c>
    }
    *output_ptr = '\0';
 801b7a2:	68bb      	ldr	r3, [r7, #8]
 801b7a4:	2200      	movs	r2, #0
 801b7a6:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
 801b7a8:	68ba      	ldr	r2, [r7, #8]
 801b7aa:	697b      	ldr	r3, [r7, #20]
 801b7ac:	1ad3      	subs	r3, r2, r3
 801b7ae:	3301      	adds	r3, #1
 801b7b0:	61bb      	str	r3, [r7, #24]
    /* todo: don't resize if final_size == initial_size */
    resized_output = (char*)parson_malloc(final_size);
 801b7b2:	4b11      	ldr	r3, [pc, #68]	; (801b7f8 <process_string+0x1c0>)
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	69b8      	ldr	r0, [r7, #24]
 801b7b8:	4798      	blx	r3
 801b7ba:	6138      	str	r0, [r7, #16]
    if (resized_output == NULL) {
 801b7bc:	693b      	ldr	r3, [r7, #16]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d010      	beq.n	801b7e4 <process_string+0x1ac>
        goto error;
    }
    memcpy(resized_output, output, final_size);
 801b7c2:	69ba      	ldr	r2, [r7, #24]
 801b7c4:	6979      	ldr	r1, [r7, #20]
 801b7c6:	6938      	ldr	r0, [r7, #16]
 801b7c8:	f002 fc5c 	bl	801e084 <memcpy>
    parson_free(output);
 801b7cc:	4b0b      	ldr	r3, [pc, #44]	; (801b7fc <process_string+0x1c4>)
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	6978      	ldr	r0, [r7, #20]
 801b7d2:	4798      	blx	r3
    return resized_output;
 801b7d4:	693b      	ldr	r3, [r7, #16]
 801b7d6:	e00b      	b.n	801b7f0 <process_string+0x1b8>
        goto error;
 801b7d8:	bf00      	nop
 801b7da:	e004      	b.n	801b7e6 <process_string+0x1ae>
                    goto error;
 801b7dc:	bf00      	nop
 801b7de:	e002      	b.n	801b7e6 <process_string+0x1ae>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
 801b7e0:	bf00      	nop
 801b7e2:	e000      	b.n	801b7e6 <process_string+0x1ae>
        goto error;
 801b7e4:	bf00      	nop
error:
    parson_free(output);
 801b7e6:	4b05      	ldr	r3, [pc, #20]	; (801b7fc <process_string+0x1c4>)
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	6978      	ldr	r0, [r7, #20]
 801b7ec:	4798      	blx	r3
    return NULL;
 801b7ee:	2300      	movs	r3, #0
}
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	3720      	adds	r7, #32
 801b7f4:	46bd      	mov	sp, r7
 801b7f6:	bd80      	pop	{r7, pc}
 801b7f8:	20000084 	.word	0x20000084
 801b7fc:	20000088 	.word	0x20000088

0801b800 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string) {
 801b800:	b580      	push	{r7, lr}
 801b802:	b086      	sub	sp, #24
 801b804:	af00      	add	r7, sp, #0
 801b806:	6078      	str	r0, [r7, #4]
    const char *string_start = *string;
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	617b      	str	r3, [r7, #20]
    size_t string_len = 0;
 801b80e:	2300      	movs	r3, #0
 801b810:	613b      	str	r3, [r7, #16]
    JSON_Status status = skip_quotes(string);
 801b812:	6878      	ldr	r0, [r7, #4]
 801b814:	f7ff fddc 	bl	801b3d0 <skip_quotes>
 801b818:	60f8      	str	r0, [r7, #12]
    if (status != JSONSuccess) {
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d001      	beq.n	801b824 <get_quoted_string+0x24>
        return NULL;
 801b820:	2300      	movs	r3, #0
 801b822:	e00c      	b.n	801b83e <get_quoted_string+0x3e>
    }
    string_len = *string - string_start - 2; /* length without quotes */
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	681a      	ldr	r2, [r3, #0]
 801b828:	697b      	ldr	r3, [r7, #20]
 801b82a:	1ad3      	subs	r3, r2, r3
 801b82c:	3b02      	subs	r3, #2
 801b82e:	613b      	str	r3, [r7, #16]
    return process_string(string_start + 1, string_len);
 801b830:	697b      	ldr	r3, [r7, #20]
 801b832:	3301      	adds	r3, #1
 801b834:	6939      	ldr	r1, [r7, #16]
 801b836:	4618      	mov	r0, r3
 801b838:	f7ff fefe 	bl	801b638 <process_string>
 801b83c:	4603      	mov	r3, r0
}
 801b83e:	4618      	mov	r0, r3
 801b840:	3718      	adds	r7, #24
 801b842:	46bd      	mov	sp, r7
 801b844:	bd80      	pop	{r7, pc}
	...

0801b848 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
 801b848:	b580      	push	{r7, lr}
 801b84a:	b082      	sub	sp, #8
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	6078      	str	r0, [r7, #4]
 801b850:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING) {
 801b852:	683b      	ldr	r3, [r7, #0]
 801b854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b858:	d906      	bls.n	801b868 <parse_value+0x20>
        return NULL;
 801b85a:	2300      	movs	r3, #0
 801b85c:	e08d      	b.n	801b97a <parse_value+0x132>
    }
    SKIP_WHITESPACES(string);
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	1c5a      	adds	r2, r3, #1
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	601a      	str	r2, [r3, #0]
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	681b      	ldr	r3, [r3, #0]
 801b86c:	781b      	ldrb	r3, [r3, #0]
 801b86e:	3301      	adds	r3, #1
 801b870:	4a44      	ldr	r2, [pc, #272]	; (801b984 <parse_value+0x13c>)
 801b872:	4413      	add	r3, r2
 801b874:	781b      	ldrb	r3, [r3, #0]
 801b876:	f003 0308 	and.w	r3, r3, #8
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d1ef      	bne.n	801b85e <parse_value+0x16>
    switch (**string) {
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	781b      	ldrb	r3, [r3, #0]
 801b884:	2b7b      	cmp	r3, #123	; 0x7b
 801b886:	dc77      	bgt.n	801b978 <parse_value+0x130>
 801b888:	2b5b      	cmp	r3, #91	; 0x5b
 801b88a:	da08      	bge.n	801b89e <parse_value+0x56>
 801b88c:	2b39      	cmp	r3, #57	; 0x39
 801b88e:	dc73      	bgt.n	801b978 <parse_value+0x130>
 801b890:	2b30      	cmp	r3, #48	; 0x30
 801b892:	da67      	bge.n	801b964 <parse_value+0x11c>
 801b894:	2b22      	cmp	r3, #34	; 0x22
 801b896:	d05b      	beq.n	801b950 <parse_value+0x108>
 801b898:	2b2d      	cmp	r3, #45	; 0x2d
 801b89a:	d063      	beq.n	801b964 <parse_value+0x11c>
 801b89c:	e06c      	b.n	801b978 <parse_value+0x130>
 801b89e:	3b5b      	subs	r3, #91	; 0x5b
 801b8a0:	2b20      	cmp	r3, #32
 801b8a2:	d869      	bhi.n	801b978 <parse_value+0x130>
 801b8a4:	a201      	add	r2, pc, #4	; (adr r2, 801b8ac <parse_value+0x64>)
 801b8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8aa:	bf00      	nop
 801b8ac:	0801b941 	.word	0x0801b941
 801b8b0:	0801b979 	.word	0x0801b979
 801b8b4:	0801b979 	.word	0x0801b979
 801b8b8:	0801b979 	.word	0x0801b979
 801b8bc:	0801b979 	.word	0x0801b979
 801b8c0:	0801b979 	.word	0x0801b979
 801b8c4:	0801b979 	.word	0x0801b979
 801b8c8:	0801b979 	.word	0x0801b979
 801b8cc:	0801b979 	.word	0x0801b979
 801b8d0:	0801b979 	.word	0x0801b979
 801b8d4:	0801b979 	.word	0x0801b979
 801b8d8:	0801b95b 	.word	0x0801b95b
 801b8dc:	0801b979 	.word	0x0801b979
 801b8e0:	0801b979 	.word	0x0801b979
 801b8e4:	0801b979 	.word	0x0801b979
 801b8e8:	0801b979 	.word	0x0801b979
 801b8ec:	0801b979 	.word	0x0801b979
 801b8f0:	0801b979 	.word	0x0801b979
 801b8f4:	0801b979 	.word	0x0801b979
 801b8f8:	0801b96f 	.word	0x0801b96f
 801b8fc:	0801b979 	.word	0x0801b979
 801b900:	0801b979 	.word	0x0801b979
 801b904:	0801b979 	.word	0x0801b979
 801b908:	0801b979 	.word	0x0801b979
 801b90c:	0801b979 	.word	0x0801b979
 801b910:	0801b95b 	.word	0x0801b95b
 801b914:	0801b979 	.word	0x0801b979
 801b918:	0801b979 	.word	0x0801b979
 801b91c:	0801b979 	.word	0x0801b979
 801b920:	0801b979 	.word	0x0801b979
 801b924:	0801b979 	.word	0x0801b979
 801b928:	0801b979 	.word	0x0801b979
 801b92c:	0801b931 	.word	0x0801b931
        case '{':
            return parse_object_value(string, nesting + 1);
 801b930:	683b      	ldr	r3, [r7, #0]
 801b932:	3301      	adds	r3, #1
 801b934:	4619      	mov	r1, r3
 801b936:	6878      	ldr	r0, [r7, #4]
 801b938:	f000 f826 	bl	801b988 <parse_object_value>
 801b93c:	4603      	mov	r3, r0
 801b93e:	e01c      	b.n	801b97a <parse_value+0x132>
        case '[':
            return parse_array_value(string, nesting + 1);
 801b940:	683b      	ldr	r3, [r7, #0]
 801b942:	3301      	adds	r3, #1
 801b944:	4619      	mov	r1, r3
 801b946:	6878      	ldr	r0, [r7, #4]
 801b948:	f000 f926 	bl	801bb98 <parse_array_value>
 801b94c:	4603      	mov	r3, r0
 801b94e:	e014      	b.n	801b97a <parse_value+0x132>
        case '\"':
            return parse_string_value(string);
 801b950:	6878      	ldr	r0, [r7, #4]
 801b952:	f000 f9e7 	bl	801bd24 <parse_string_value>
 801b956:	4603      	mov	r3, r0
 801b958:	e00f      	b.n	801b97a <parse_value+0x132>
        case 'f': case 't':
            return parse_boolean_value(string);
 801b95a:	6878      	ldr	r0, [r7, #4]
 801b95c:	f000 fa06 	bl	801bd6c <parse_boolean_value>
 801b960:	4603      	mov	r3, r0
 801b962:	e00a      	b.n	801b97a <parse_value+0x132>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
 801b964:	6878      	ldr	r0, [r7, #4]
 801b966:	f000 fa3d 	bl	801bde4 <parse_number_value>
 801b96a:	4603      	mov	r3, r0
 801b96c:	e005      	b.n	801b97a <parse_value+0x132>
        case 'n':
            return parse_null_value(string);
 801b96e:	6878      	ldr	r0, [r7, #4]
 801b970:	f000 fa72 	bl	801be58 <parse_null_value>
 801b974:	4603      	mov	r3, r0
 801b976:	e000      	b.n	801b97a <parse_value+0x132>
        default:
            return NULL;
 801b978:	2300      	movs	r3, #0
    }
}
 801b97a:	4618      	mov	r0, r3
 801b97c:	3708      	adds	r7, #8
 801b97e:	46bd      	mov	sp, r7
 801b980:	bd80      	pop	{r7, pc}
 801b982:	bf00      	nop
 801b984:	08022e08 	.word	0x08022e08

0801b988 <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
 801b988:	b580      	push	{r7, lr}
 801b98a:	b086      	sub	sp, #24
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	6078      	str	r0, [r7, #4]
 801b990:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_value = NULL;
 801b992:	2300      	movs	r3, #0
 801b994:	617b      	str	r3, [r7, #20]
 801b996:	2300      	movs	r3, #0
 801b998:	613b      	str	r3, [r7, #16]
    JSON_Object *output_object = NULL;
 801b99a:	2300      	movs	r3, #0
 801b99c:	60fb      	str	r3, [r7, #12]
    char *new_key = NULL;
 801b99e:	2300      	movs	r3, #0
 801b9a0:	60bb      	str	r3, [r7, #8]
    output_value = json_value_init_object();
 801b9a2:	f001 fc51 	bl	801d248 <json_value_init_object>
 801b9a6:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801b9a8:	697b      	ldr	r3, [r7, #20]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d101      	bne.n	801b9b2 <parse_object_value+0x2a>
        return NULL;
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	e0ea      	b.n	801bb88 <parse_object_value+0x200>
    }
    if (**string != '{') {
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	781b      	ldrb	r3, [r3, #0]
 801b9b8:	2b7b      	cmp	r3, #123	; 0x7b
 801b9ba:	d004      	beq.n	801b9c6 <parse_object_value+0x3e>
        json_value_free(output_value);
 801b9bc:	6978      	ldr	r0, [r7, #20]
 801b9be:	f001 fc15 	bl	801d1ec <json_value_free>
        return NULL;
 801b9c2:	2300      	movs	r3, #0
 801b9c4:	e0e0      	b.n	801bb88 <parse_object_value+0x200>
    }
    output_object = json_value_get_object(output_value);
 801b9c6:	6978      	ldr	r0, [r7, #20]
 801b9c8:	f001 fbab 	bl	801d122 <json_value_get_object>
 801b9cc:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	1c5a      	adds	r2, r3, #1
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801b9d8:	e004      	b.n	801b9e4 <parse_object_value+0x5c>
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	1c5a      	adds	r2, r3, #1
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	601a      	str	r2, [r3, #0]
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	781b      	ldrb	r3, [r3, #0]
 801b9ea:	3301      	adds	r3, #1
 801b9ec:	4a68      	ldr	r2, [pc, #416]	; (801bb90 <parse_object_value+0x208>)
 801b9ee:	4413      	add	r3, r2
 801b9f0:	781b      	ldrb	r3, [r3, #0]
 801b9f2:	f003 0308 	and.w	r3, r3, #8
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d1ef      	bne.n	801b9da <parse_object_value+0x52>
    if (**string == '}') { /* empty object */
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	681b      	ldr	r3, [r3, #0]
 801b9fe:	781b      	ldrb	r3, [r3, #0]
 801ba00:	2b7d      	cmp	r3, #125	; 0x7d
 801ba02:	f040 808c 	bne.w	801bb1e <parse_object_value+0x196>
        SKIP_CHAR(string);
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	1c5a      	adds	r2, r3, #1
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	601a      	str	r2, [r3, #0]
        return output_value;
 801ba10:	697b      	ldr	r3, [r7, #20]
 801ba12:	e0b9      	b.n	801bb88 <parse_object_value+0x200>
    }
    while (**string != '\0') {
        new_key = get_quoted_string(string);
 801ba14:	6878      	ldr	r0, [r7, #4]
 801ba16:	f7ff fef3 	bl	801b800 <get_quoted_string>
 801ba1a:	60b8      	str	r0, [r7, #8]
        if (new_key == NULL) {
 801ba1c:	68bb      	ldr	r3, [r7, #8]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d109      	bne.n	801ba36 <parse_object_value+0xae>
            json_value_free(output_value);
 801ba22:	6978      	ldr	r0, [r7, #20]
 801ba24:	f001 fbe2 	bl	801d1ec <json_value_free>
            return NULL;
 801ba28:	2300      	movs	r3, #0
 801ba2a:	e0ad      	b.n	801bb88 <parse_object_value+0x200>
        }
        SKIP_WHITESPACES(string);
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	1c5a      	adds	r2, r3, #1
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	601a      	str	r2, [r3, #0]
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	781b      	ldrb	r3, [r3, #0]
 801ba3c:	3301      	adds	r3, #1
 801ba3e:	4a54      	ldr	r2, [pc, #336]	; (801bb90 <parse_object_value+0x208>)
 801ba40:	4413      	add	r3, r2
 801ba42:	781b      	ldrb	r3, [r3, #0]
 801ba44:	f003 0308 	and.w	r3, r3, #8
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d1ef      	bne.n	801ba2c <parse_object_value+0xa4>
        if (**string != ':') {
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	781b      	ldrb	r3, [r3, #0]
 801ba52:	2b3a      	cmp	r3, #58	; 0x3a
 801ba54:	d008      	beq.n	801ba68 <parse_object_value+0xe0>
            parson_free(new_key);
 801ba56:	4b4f      	ldr	r3, [pc, #316]	; (801bb94 <parse_object_value+0x20c>)
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	68b8      	ldr	r0, [r7, #8]
 801ba5c:	4798      	blx	r3
            json_value_free(output_value);
 801ba5e:	6978      	ldr	r0, [r7, #20]
 801ba60:	f001 fbc4 	bl	801d1ec <json_value_free>
            return NULL;
 801ba64:	2300      	movs	r3, #0
 801ba66:	e08f      	b.n	801bb88 <parse_object_value+0x200>
        }
        SKIP_CHAR(string);
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	1c5a      	adds	r2, r3, #1
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
 801ba72:	6839      	ldr	r1, [r7, #0]
 801ba74:	6878      	ldr	r0, [r7, #4]
 801ba76:	f7ff fee7 	bl	801b848 <parse_value>
 801ba7a:	6138      	str	r0, [r7, #16]
        if (new_value == NULL) {
 801ba7c:	693b      	ldr	r3, [r7, #16]
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d108      	bne.n	801ba94 <parse_object_value+0x10c>
            parson_free(new_key);
 801ba82:	4b44      	ldr	r3, [pc, #272]	; (801bb94 <parse_object_value+0x20c>)
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	68b8      	ldr	r0, [r7, #8]
 801ba88:	4798      	blx	r3
            json_value_free(output_value);
 801ba8a:	6978      	ldr	r0, [r7, #20]
 801ba8c:	f001 fbae 	bl	801d1ec <json_value_free>
            return NULL;
 801ba90:	2300      	movs	r3, #0
 801ba92:	e079      	b.n	801bb88 <parse_object_value+0x200>
        }
        if (json_object_add(output_object, new_key, new_value) == JSONFailure) {
 801ba94:	693a      	ldr	r2, [r7, #16]
 801ba96:	68b9      	ldr	r1, [r7, #8]
 801ba98:	68f8      	ldr	r0, [r7, #12]
 801ba9a:	f7ff f997 	bl	801adcc <json_object_add>
 801ba9e:	4603      	mov	r3, r0
 801baa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801baa4:	d10b      	bne.n	801babe <parse_object_value+0x136>
            parson_free(new_key);
 801baa6:	4b3b      	ldr	r3, [pc, #236]	; (801bb94 <parse_object_value+0x20c>)
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	68b8      	ldr	r0, [r7, #8]
 801baac:	4798      	blx	r3
            json_value_free(new_value);
 801baae:	6938      	ldr	r0, [r7, #16]
 801bab0:	f001 fb9c 	bl	801d1ec <json_value_free>
            json_value_free(output_value);
 801bab4:	6978      	ldr	r0, [r7, #20]
 801bab6:	f001 fb99 	bl	801d1ec <json_value_free>
            return NULL;
 801baba:	2300      	movs	r3, #0
 801babc:	e064      	b.n	801bb88 <parse_object_value+0x200>
        }
        parson_free(new_key);
 801babe:	4b35      	ldr	r3, [pc, #212]	; (801bb94 <parse_object_value+0x20c>)
 801bac0:	681b      	ldr	r3, [r3, #0]
 801bac2:	68b8      	ldr	r0, [r7, #8]
 801bac4:	4798      	blx	r3
        SKIP_WHITESPACES(string);
 801bac6:	e004      	b.n	801bad2 <parse_object_value+0x14a>
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	1c5a      	adds	r2, r3, #1
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	601a      	str	r2, [r3, #0]
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	681b      	ldr	r3, [r3, #0]
 801bad6:	781b      	ldrb	r3, [r3, #0]
 801bad8:	3301      	adds	r3, #1
 801bada:	4a2d      	ldr	r2, [pc, #180]	; (801bb90 <parse_object_value+0x208>)
 801badc:	4413      	add	r3, r2
 801bade:	781b      	ldrb	r3, [r3, #0]
 801bae0:	f003 0308 	and.w	r3, r3, #8
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d1ef      	bne.n	801bac8 <parse_object_value+0x140>
        if (**string != ',') {
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	781b      	ldrb	r3, [r3, #0]
 801baee:	2b2c      	cmp	r3, #44	; 0x2c
 801baf0:	d11c      	bne.n	801bb2c <parse_object_value+0x1a4>
            break;
        }
        SKIP_CHAR(string);
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	1c5a      	adds	r2, r3, #1
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801bafc:	e004      	b.n	801bb08 <parse_object_value+0x180>
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	1c5a      	adds	r2, r3, #1
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	601a      	str	r2, [r3, #0]
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	781b      	ldrb	r3, [r3, #0]
 801bb0e:	3301      	adds	r3, #1
 801bb10:	4a1f      	ldr	r2, [pc, #124]	; (801bb90 <parse_object_value+0x208>)
 801bb12:	4413      	add	r3, r2
 801bb14:	781b      	ldrb	r3, [r3, #0]
 801bb16:	f003 0308 	and.w	r3, r3, #8
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d1ef      	bne.n	801bafe <parse_object_value+0x176>
    while (**string != '\0') {
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	781b      	ldrb	r3, [r3, #0]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	f47f af75 	bne.w	801ba14 <parse_object_value+0x8c>
 801bb2a:	e006      	b.n	801bb3a <parse_object_value+0x1b2>
            break;
 801bb2c:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801bb2e:	e004      	b.n	801bb3a <parse_object_value+0x1b2>
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	1c5a      	adds	r2, r3, #1
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	601a      	str	r2, [r3, #0]
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	781b      	ldrb	r3, [r3, #0]
 801bb40:	3301      	adds	r3, #1
 801bb42:	4a13      	ldr	r2, [pc, #76]	; (801bb90 <parse_object_value+0x208>)
 801bb44:	4413      	add	r3, r2
 801bb46:	781b      	ldrb	r3, [r3, #0]
 801bb48:	f003 0308 	and.w	r3, r3, #8
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d1ef      	bne.n	801bb30 <parse_object_value+0x1a8>
    if (**string != '}' || /* Trim object after parsing is over */
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	781b      	ldrb	r3, [r3, #0]
 801bb56:	2b7d      	cmp	r3, #125	; 0x7d
 801bb58:	d10b      	bne.n	801bb72 <parse_object_value+0x1ea>
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
 801bb5a:	68f8      	ldr	r0, [r7, #12]
 801bb5c:	f001 fa3a 	bl	801cfd4 <json_object_get_count>
 801bb60:	4603      	mov	r3, r0
 801bb62:	4619      	mov	r1, r3
 801bb64:	68f8      	ldr	r0, [r7, #12]
 801bb66:	f7ff f9b3 	bl	801aed0 <json_object_resize>
 801bb6a:	4603      	mov	r3, r0
    if (**string != '}' || /* Trim object after parsing is over */
 801bb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb70:	d104      	bne.n	801bb7c <parse_object_value+0x1f4>
            json_value_free(output_value);
 801bb72:	6978      	ldr	r0, [r7, #20]
 801bb74:	f001 fb3a 	bl	801d1ec <json_value_free>
            return NULL;
 801bb78:	2300      	movs	r3, #0
 801bb7a:	e005      	b.n	801bb88 <parse_object_value+0x200>
    }
    SKIP_CHAR(string);
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	1c5a      	adds	r2, r3, #1
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	601a      	str	r2, [r3, #0]
    return output_value;
 801bb86:	697b      	ldr	r3, [r7, #20]
}
 801bb88:	4618      	mov	r0, r3
 801bb8a:	3718      	adds	r7, #24
 801bb8c:	46bd      	mov	sp, r7
 801bb8e:	bd80      	pop	{r7, pc}
 801bb90:	08022e08 	.word	0x08022e08
 801bb94:	20000088 	.word	0x20000088

0801bb98 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
 801bb98:	b580      	push	{r7, lr}
 801bb9a:	b086      	sub	sp, #24
 801bb9c:	af00      	add	r7, sp, #0
 801bb9e:	6078      	str	r0, [r7, #4]
 801bba0:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = NULL, *new_array_value = NULL;
 801bba2:	2300      	movs	r3, #0
 801bba4:	617b      	str	r3, [r7, #20]
 801bba6:	2300      	movs	r3, #0
 801bba8:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = NULL;
 801bbaa:	2300      	movs	r3, #0
 801bbac:	60fb      	str	r3, [r7, #12]
    output_value = json_value_init_array();
 801bbae:	f001 fb77 	bl	801d2a0 <json_value_init_array>
 801bbb2:	6178      	str	r0, [r7, #20]
    if (output_value == NULL) {
 801bbb4:	697b      	ldr	r3, [r7, #20]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d101      	bne.n	801bbbe <parse_array_value+0x26>
        return NULL;
 801bbba:	2300      	movs	r3, #0
 801bbbc:	e0ab      	b.n	801bd16 <parse_array_value+0x17e>
    }
    if (**string != '[') {
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	781b      	ldrb	r3, [r3, #0]
 801bbc4:	2b5b      	cmp	r3, #91	; 0x5b
 801bbc6:	d004      	beq.n	801bbd2 <parse_array_value+0x3a>
        json_value_free(output_value);
 801bbc8:	6978      	ldr	r0, [r7, #20]
 801bbca:	f001 fb0f 	bl	801d1ec <json_value_free>
        return NULL;
 801bbce:	2300      	movs	r3, #0
 801bbd0:	e0a1      	b.n	801bd16 <parse_array_value+0x17e>
    }
    output_array = json_value_get_array(output_value);
 801bbd2:	6978      	ldr	r0, [r7, #20]
 801bbd4:	f001 fab7 	bl	801d146 <json_value_get_array>
 801bbd8:	60f8      	str	r0, [r7, #12]
    SKIP_CHAR(string);
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	1c5a      	adds	r2, r3, #1
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
 801bbe4:	e004      	b.n	801bbf0 <parse_array_value+0x58>
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	1c5a      	adds	r2, r3, #1
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	601a      	str	r2, [r3, #0]
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	681b      	ldr	r3, [r3, #0]
 801bbf4:	781b      	ldrb	r3, [r3, #0]
 801bbf6:	3301      	adds	r3, #1
 801bbf8:	4a49      	ldr	r2, [pc, #292]	; (801bd20 <parse_array_value+0x188>)
 801bbfa:	4413      	add	r3, r2
 801bbfc:	781b      	ldrb	r3, [r3, #0]
 801bbfe:	f003 0308 	and.w	r3, r3, #8
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d1ef      	bne.n	801bbe6 <parse_array_value+0x4e>
    if (**string == ']') { /* empty array */
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	781b      	ldrb	r3, [r3, #0]
 801bc0c:	2b5d      	cmp	r3, #93	; 0x5d
 801bc0e:	d14e      	bne.n	801bcae <parse_array_value+0x116>
        SKIP_CHAR(string);
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	1c5a      	adds	r2, r3, #1
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	601a      	str	r2, [r3, #0]
        return output_value;
 801bc1a:	697b      	ldr	r3, [r7, #20]
 801bc1c:	e07b      	b.n	801bd16 <parse_array_value+0x17e>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
 801bc1e:	6839      	ldr	r1, [r7, #0]
 801bc20:	6878      	ldr	r0, [r7, #4]
 801bc22:	f7ff fe11 	bl	801b848 <parse_value>
 801bc26:	6138      	str	r0, [r7, #16]
        if (new_array_value == NULL) {
 801bc28:	693b      	ldr	r3, [r7, #16]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d104      	bne.n	801bc38 <parse_array_value+0xa0>
            json_value_free(output_value);
 801bc2e:	6978      	ldr	r0, [r7, #20]
 801bc30:	f001 fadc 	bl	801d1ec <json_value_free>
            return NULL;
 801bc34:	2300      	movs	r3, #0
 801bc36:	e06e      	b.n	801bd16 <parse_array_value+0x17e>
        }
        if (json_array_add(output_array, new_array_value) == JSONFailure) {
 801bc38:	6939      	ldr	r1, [r7, #16]
 801bc3a:	68f8      	ldr	r0, [r7, #12]
 801bc3c:	f7ff fb0c 	bl	801b258 <json_array_add>
 801bc40:	4603      	mov	r3, r0
 801bc42:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc46:	d10c      	bne.n	801bc62 <parse_array_value+0xca>
            json_value_free(new_array_value);
 801bc48:	6938      	ldr	r0, [r7, #16]
 801bc4a:	f001 facf 	bl	801d1ec <json_value_free>
            json_value_free(output_value);
 801bc4e:	6978      	ldr	r0, [r7, #20]
 801bc50:	f001 facc 	bl	801d1ec <json_value_free>
            return NULL;
 801bc54:	2300      	movs	r3, #0
 801bc56:	e05e      	b.n	801bd16 <parse_array_value+0x17e>
        }
        SKIP_WHITESPACES(string);
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	1c5a      	adds	r2, r3, #1
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	601a      	str	r2, [r3, #0]
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	781b      	ldrb	r3, [r3, #0]
 801bc68:	3301      	adds	r3, #1
 801bc6a:	4a2d      	ldr	r2, [pc, #180]	; (801bd20 <parse_array_value+0x188>)
 801bc6c:	4413      	add	r3, r2
 801bc6e:	781b      	ldrb	r3, [r3, #0]
 801bc70:	f003 0308 	and.w	r3, r3, #8
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d1ef      	bne.n	801bc58 <parse_array_value+0xc0>
        if (**string != ',') {
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	781b      	ldrb	r3, [r3, #0]
 801bc7e:	2b2c      	cmp	r3, #44	; 0x2c
 801bc80:	d11b      	bne.n	801bcba <parse_array_value+0x122>
            break;
        }
        SKIP_CHAR(string);
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	1c5a      	adds	r2, r3, #1
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
 801bc8c:	e004      	b.n	801bc98 <parse_array_value+0x100>
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	1c5a      	adds	r2, r3, #1
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	601a      	str	r2, [r3, #0]
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	781b      	ldrb	r3, [r3, #0]
 801bc9e:	3301      	adds	r3, #1
 801bca0:	4a1f      	ldr	r2, [pc, #124]	; (801bd20 <parse_array_value+0x188>)
 801bca2:	4413      	add	r3, r2
 801bca4:	781b      	ldrb	r3, [r3, #0]
 801bca6:	f003 0308 	and.w	r3, r3, #8
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d1ef      	bne.n	801bc8e <parse_array_value+0xf6>
    while (**string != '\0') {
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	781b      	ldrb	r3, [r3, #0]
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d1b2      	bne.n	801bc1e <parse_array_value+0x86>
 801bcb8:	e006      	b.n	801bcc8 <parse_array_value+0x130>
            break;
 801bcba:	bf00      	nop
    }
    SKIP_WHITESPACES(string);
 801bcbc:	e004      	b.n	801bcc8 <parse_array_value+0x130>
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	1c5a      	adds	r2, r3, #1
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	601a      	str	r2, [r3, #0]
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	681b      	ldr	r3, [r3, #0]
 801bccc:	781b      	ldrb	r3, [r3, #0]
 801bcce:	3301      	adds	r3, #1
 801bcd0:	4a13      	ldr	r2, [pc, #76]	; (801bd20 <parse_array_value+0x188>)
 801bcd2:	4413      	add	r3, r2
 801bcd4:	781b      	ldrb	r3, [r3, #0]
 801bcd6:	f003 0308 	and.w	r3, r3, #8
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d1ef      	bne.n	801bcbe <parse_array_value+0x126>
    if (**string != ']' || /* Trim array after parsing is over */
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	681b      	ldr	r3, [r3, #0]
 801bce2:	781b      	ldrb	r3, [r3, #0]
 801bce4:	2b5d      	cmp	r3, #93	; 0x5d
 801bce6:	d10b      	bne.n	801bd00 <parse_array_value+0x168>
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
 801bce8:	68f8      	ldr	r0, [r7, #12]
 801bcea:	f001 f9eb 	bl	801d0c4 <json_array_get_count>
 801bcee:	4603      	mov	r3, r0
 801bcf0:	4619      	mov	r1, r3
 801bcf2:	68f8      	ldr	r0, [r7, #12]
 801bcf4:	f7ff fae6 	bl	801b2c4 <json_array_resize>
 801bcf8:	4603      	mov	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
 801bcfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bcfe:	d104      	bne.n	801bd0a <parse_array_value+0x172>
            json_value_free(output_value);
 801bd00:	6978      	ldr	r0, [r7, #20]
 801bd02:	f001 fa73 	bl	801d1ec <json_value_free>
            return NULL;
 801bd06:	2300      	movs	r3, #0
 801bd08:	e005      	b.n	801bd16 <parse_array_value+0x17e>
    }
    SKIP_CHAR(string);
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	1c5a      	adds	r2, r3, #1
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	601a      	str	r2, [r3, #0]
    return output_value;
 801bd14:	697b      	ldr	r3, [r7, #20]
}
 801bd16:	4618      	mov	r0, r3
 801bd18:	3718      	adds	r7, #24
 801bd1a:	46bd      	mov	sp, r7
 801bd1c:	bd80      	pop	{r7, pc}
 801bd1e:	bf00      	nop
 801bd20:	08022e08 	.word	0x08022e08

0801bd24 <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
 801bd24:	b580      	push	{r7, lr}
 801bd26:	b084      	sub	sp, #16
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
 801bd2c:	2300      	movs	r3, #0
 801bd2e:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string);
 801bd30:	6878      	ldr	r0, [r7, #4]
 801bd32:	f7ff fd65 	bl	801b800 <get_quoted_string>
 801bd36:	60b8      	str	r0, [r7, #8]
    if (new_string == NULL) {
 801bd38:	68bb      	ldr	r3, [r7, #8]
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d101      	bne.n	801bd42 <parse_string_value+0x1e>
        return NULL;
 801bd3e:	2300      	movs	r3, #0
 801bd40:	e00d      	b.n	801bd5e <parse_string_value+0x3a>
    }
    value = json_value_init_string_no_copy(new_string);
 801bd42:	68b8      	ldr	r0, [r7, #8]
 801bd44:	f7ff fb26 	bl	801b394 <json_value_init_string_no_copy>
 801bd48:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d105      	bne.n	801bd5c <parse_string_value+0x38>
        parson_free(new_string);
 801bd50:	4b05      	ldr	r3, [pc, #20]	; (801bd68 <parse_string_value+0x44>)
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	68b8      	ldr	r0, [r7, #8]
 801bd56:	4798      	blx	r3
        return NULL;
 801bd58:	2300      	movs	r3, #0
 801bd5a:	e000      	b.n	801bd5e <parse_string_value+0x3a>
    }
    return value;
 801bd5c:	68fb      	ldr	r3, [r7, #12]
}
 801bd5e:	4618      	mov	r0, r3
 801bd60:	3710      	adds	r7, #16
 801bd62:	46bd      	mov	sp, r7
 801bd64:	bd80      	pop	{r7, pc}
 801bd66:	bf00      	nop
 801bd68:	20000088 	.word	0x20000088

0801bd6c <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
 801bd6c:	b580      	push	{r7, lr}
 801bd6e:	b084      	sub	sp, #16
 801bd70:	af00      	add	r7, sp, #0
 801bd72:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
 801bd74:	2304      	movs	r3, #4
 801bd76:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
 801bd78:	2305      	movs	r3, #5
 801bd7a:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	68fa      	ldr	r2, [r7, #12]
 801bd82:	4619      	mov	r1, r3
 801bd84:	4815      	ldr	r0, [pc, #84]	; (801bddc <parse_boolean_value+0x70>)
 801bd86:	f002 ff9c 	bl	801ecc2 <strncmp>
 801bd8a:	4603      	mov	r3, r0
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d10a      	bne.n	801bda6 <parse_boolean_value+0x3a>
        *string += true_token_size;
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	681a      	ldr	r2, [r3, #0]
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	441a      	add	r2, r3
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
 801bd9c:	2001      	movs	r0, #1
 801bd9e:	f001 fb33 	bl	801d408 <json_value_init_boolean>
 801bda2:	4603      	mov	r3, r0
 801bda4:	e015      	b.n	801bdd2 <parse_boolean_value+0x66>
    } else if (strncmp("false", *string, false_token_size) == 0) {
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	681b      	ldr	r3, [r3, #0]
 801bdaa:	68ba      	ldr	r2, [r7, #8]
 801bdac:	4619      	mov	r1, r3
 801bdae:	480c      	ldr	r0, [pc, #48]	; (801bde0 <parse_boolean_value+0x74>)
 801bdb0:	f002 ff87 	bl	801ecc2 <strncmp>
 801bdb4:	4603      	mov	r3, r0
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d10a      	bne.n	801bdd0 <parse_boolean_value+0x64>
        *string += false_token_size;
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	681a      	ldr	r2, [r3, #0]
 801bdbe:	68bb      	ldr	r3, [r7, #8]
 801bdc0:	441a      	add	r2, r3
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
 801bdc6:	2000      	movs	r0, #0
 801bdc8:	f001 fb1e 	bl	801d408 <json_value_init_boolean>
 801bdcc:	4603      	mov	r3, r0
 801bdce:	e000      	b.n	801bdd2 <parse_boolean_value+0x66>
    }
    return NULL;
 801bdd0:	2300      	movs	r3, #0
}
 801bdd2:	4618      	mov	r0, r3
 801bdd4:	3710      	adds	r7, #16
 801bdd6:	46bd      	mov	sp, r7
 801bdd8:	bd80      	pop	{r7, pc}
 801bdda:	bf00      	nop
 801bddc:	080227cc 	.word	0x080227cc
 801bde0:	080227d4 	.word	0x080227d4

0801bde4 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
 801bde4:	b580      	push	{r7, lr}
 801bde6:	b086      	sub	sp, #24
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	6078      	str	r0, [r7, #4]
    char *end;
    double number = 0;
 801bdec:	f04f 0200 	mov.w	r2, #0
 801bdf0:	f04f 0300 	mov.w	r3, #0
 801bdf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    errno = 0;
 801bdf8:	f001 fed0 	bl	801db9c <__errno>
 801bdfc:	4603      	mov	r3, r0
 801bdfe:	2200      	movs	r2, #0
 801be00:	601a      	str	r2, [r3, #0]
    number = strtod(*string, &end);
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	681b      	ldr	r3, [r3, #0]
 801be06:	f107 020c 	add.w	r2, r7, #12
 801be0a:	4611      	mov	r1, r2
 801be0c:	4618      	mov	r0, r3
 801be0e:	f003 fda1 	bl	801f954 <strtod>
 801be12:	ed87 0b04 	vstr	d0, [r7, #16]
    if (errno || !is_decimal(*string, end - *string)) {
 801be16:	f001 fec1 	bl	801db9c <__errno>
 801be1a:	4603      	mov	r3, r0
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d10b      	bne.n	801be3a <parse_number_value+0x56>
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	6818      	ldr	r0, [r3, #0]
 801be26:	68fa      	ldr	r2, [r7, #12]
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	1ad3      	subs	r3, r2, r3
 801be2e:	4619      	mov	r1, r3
 801be30:	f7fe ff68 	bl	801ad04 <is_decimal>
 801be34:	4603      	mov	r3, r0
 801be36:	2b00      	cmp	r3, #0
 801be38:	d101      	bne.n	801be3e <parse_number_value+0x5a>
        return NULL;
 801be3a:	2300      	movs	r3, #0
 801be3c:	e007      	b.n	801be4e <parse_number_value+0x6a>
    }
    *string = end;
 801be3e:	68fa      	ldr	r2, [r7, #12]
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	601a      	str	r2, [r3, #0]
    return json_value_init_number(number);
 801be44:	ed97 0b04 	vldr	d0, [r7, #16]
 801be48:	f001 fa8c 	bl	801d364 <json_value_init_number>
 801be4c:	4603      	mov	r3, r0
}
 801be4e:	4618      	mov	r0, r3
 801be50:	3718      	adds	r7, #24
 801be52:	46bd      	mov	sp, r7
 801be54:	bd80      	pop	{r7, pc}
	...

0801be58 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
 801be58:	b580      	push	{r7, lr}
 801be5a:	b084      	sub	sp, #16
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
 801be60:	2304      	movs	r3, #4
 801be62:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	68fa      	ldr	r2, [r7, #12]
 801be6a:	4619      	mov	r1, r3
 801be6c:	480a      	ldr	r0, [pc, #40]	; (801be98 <parse_null_value+0x40>)
 801be6e:	f002 ff28 	bl	801ecc2 <strncmp>
 801be72:	4603      	mov	r3, r0
 801be74:	2b00      	cmp	r3, #0
 801be76:	d109      	bne.n	801be8c <parse_null_value+0x34>
        *string += token_size;
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	681a      	ldr	r2, [r3, #0]
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	441a      	add	r2, r3
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
 801be84:	f001 fae4 	bl	801d450 <json_value_init_null>
 801be88:	4603      	mov	r3, r0
 801be8a:	e000      	b.n	801be8e <parse_null_value+0x36>
    }
    return NULL;
 801be8c:	2300      	movs	r3, #0
}
 801be8e:	4618      	mov	r0, r3
 801be90:	3710      	adds	r7, #16
 801be92:	46bd      	mov	sp, r7
 801be94:	bd80      	pop	{r7, pc}
 801be96:	bf00      	nop
 801be98:	080227dc 	.word	0x080227dc

0801be9c <json_serialize_to_buffer_r>:
                                  if (written < 0) { return -1; }\
                                  if (buf != NULL) { buf += written; }\
                                  written_total += written; } while(0)

static int json_serialize_to_buffer_r(const JSON_Value *value, char *buf, int level, int is_pretty, char *num_buf)
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b092      	sub	sp, #72	; 0x48
 801bea0:	af02      	add	r7, sp, #8
 801bea2:	60f8      	str	r0, [r7, #12]
 801bea4:	60b9      	str	r1, [r7, #8]
 801bea6:	607a      	str	r2, [r7, #4]
 801bea8:	603b      	str	r3, [r7, #0]
    const char *key = NULL, *string = NULL;
 801beaa:	2300      	movs	r3, #0
 801beac:	637b      	str	r3, [r7, #52]	; 0x34
 801beae:	2300      	movs	r3, #0
 801beb0:	633b      	str	r3, [r7, #48]	; 0x30
    JSON_Value *temp_value = NULL;
 801beb2:	2300      	movs	r3, #0
 801beb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Array *array = NULL;
 801beb6:	2300      	movs	r3, #0
 801beb8:	62bb      	str	r3, [r7, #40]	; 0x28
    JSON_Object *object = NULL;
 801beba:	2300      	movs	r3, #0
 801bebc:	627b      	str	r3, [r7, #36]	; 0x24
    size_t i = 0, count = 0;
 801bebe:	2300      	movs	r3, #0
 801bec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bec2:	2300      	movs	r3, #0
 801bec4:	623b      	str	r3, [r7, #32]
    double num = 0.0;
 801bec6:	f04f 0200 	mov.w	r2, #0
 801beca:	f04f 0300 	mov.w	r3, #0
 801bece:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int written = -1, written_total = 0;
 801bed2:	f04f 33ff 	mov.w	r3, #4294967295
 801bed6:	617b      	str	r3, [r7, #20]
 801bed8:	2300      	movs	r3, #0
 801beda:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (json_value_get_type(value)) {
 801bedc:	68f8      	ldr	r0, [r7, #12]
 801bede:	f001 f90e 	bl	801d0fe <json_value_get_type>
 801bee2:	4603      	mov	r3, r0
 801bee4:	3301      	adds	r3, #1
 801bee6:	2b07      	cmp	r3, #7
 801bee8:	f200 82e1 	bhi.w	801c4ae <json_serialize_to_buffer_r+0x612>
 801beec:	a201      	add	r2, pc, #4	; (adr r2, 801bef4 <json_serialize_to_buffer_r+0x58>)
 801beee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bef2:	bf00      	nop
 801bef4:	0801c4a9 	.word	0x0801c4a9
 801bef8:	0801c4af 	.word	0x0801c4af
 801befc:	0801c479 	.word	0x0801c479
 801bf00:	0801c367 	.word	0x0801c367
 801bf04:	0801c431 	.word	0x0801c431
 801bf08:	0801c0e3 	.word	0x0801c0e3
 801bf0c:	0801bf15 	.word	0x0801bf15
 801bf10:	0801c3ab 	.word	0x0801c3ab
        case JSONArray:
            array = json_value_get_array(value);
 801bf14:	68f8      	ldr	r0, [r7, #12]
 801bf16:	f001 f916 	bl	801d146 <json_value_get_array>
 801bf1a:	62b8      	str	r0, [r7, #40]	; 0x28
            count = json_array_get_count(array);
 801bf1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bf1e:	f001 f8d1 	bl	801d0c4 <json_array_get_count>
 801bf22:	6238      	str	r0, [r7, #32]
            APPEND_STRING("[");
 801bf24:	498d      	ldr	r1, [pc, #564]	; (801c15c <json_serialize_to_buffer_r+0x2c0>)
 801bf26:	68b8      	ldr	r0, [r7, #8]
 801bf28:	f000 ff94 	bl	801ce54 <append_string>
 801bf2c:	6178      	str	r0, [r7, #20]
 801bf2e:	697b      	ldr	r3, [r7, #20]
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	da02      	bge.n	801bf3a <json_serialize_to_buffer_r+0x9e>
 801bf34:	f04f 33ff 	mov.w	r3, #4294967295
 801bf38:	e2bb      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801bf3a:	68bb      	ldr	r3, [r7, #8]
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d003      	beq.n	801bf48 <json_serialize_to_buffer_r+0xac>
 801bf40:	697b      	ldr	r3, [r7, #20]
 801bf42:	68ba      	ldr	r2, [r7, #8]
 801bf44:	4413      	add	r3, r2
 801bf46:	60bb      	str	r3, [r7, #8]
 801bf48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf4a:	697b      	ldr	r3, [r7, #20]
 801bf4c:	4413      	add	r3, r2
 801bf4e:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801bf50:	6a3b      	ldr	r3, [r7, #32]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d018      	beq.n	801bf88 <json_serialize_to_buffer_r+0xec>
 801bf56:	683b      	ldr	r3, [r7, #0]
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	d015      	beq.n	801bf88 <json_serialize_to_buffer_r+0xec>
                APPEND_STRING("\n");
 801bf5c:	4980      	ldr	r1, [pc, #512]	; (801c160 <json_serialize_to_buffer_r+0x2c4>)
 801bf5e:	68b8      	ldr	r0, [r7, #8]
 801bf60:	f000 ff78 	bl	801ce54 <append_string>
 801bf64:	6178      	str	r0, [r7, #20]
 801bf66:	697b      	ldr	r3, [r7, #20]
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	da02      	bge.n	801bf72 <json_serialize_to_buffer_r+0xd6>
 801bf6c:	f04f 33ff 	mov.w	r3, #4294967295
 801bf70:	e29f      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801bf72:	68bb      	ldr	r3, [r7, #8]
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d003      	beq.n	801bf80 <json_serialize_to_buffer_r+0xe4>
 801bf78:	697b      	ldr	r3, [r7, #20]
 801bf7a:	68ba      	ldr	r2, [r7, #8]
 801bf7c:	4413      	add	r3, r2
 801bf7e:	60bb      	str	r3, [r7, #8]
 801bf80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf82:	697b      	ldr	r3, [r7, #20]
 801bf84:	4413      	add	r3, r2
 801bf86:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801bf88:	2300      	movs	r3, #0
 801bf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bf8c:	e071      	b.n	801c072 <json_serialize_to_buffer_r+0x1d6>
                if (is_pretty) {
 801bf8e:	683b      	ldr	r3, [r7, #0]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d017      	beq.n	801bfc4 <json_serialize_to_buffer_r+0x128>
                    APPEND_INDENT(level+1);
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	3301      	adds	r3, #1
 801bf98:	4619      	mov	r1, r3
 801bf9a:	68b8      	ldr	r0, [r7, #8]
 801bf9c:	f000 ff28 	bl	801cdf0 <append_indent>
 801bfa0:	6178      	str	r0, [r7, #20]
 801bfa2:	697b      	ldr	r3, [r7, #20]
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	da02      	bge.n	801bfae <json_serialize_to_buffer_r+0x112>
 801bfa8:	f04f 33ff 	mov.w	r3, #4294967295
 801bfac:	e281      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801bfae:	68bb      	ldr	r3, [r7, #8]
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d003      	beq.n	801bfbc <json_serialize_to_buffer_r+0x120>
 801bfb4:	697b      	ldr	r3, [r7, #20]
 801bfb6:	68ba      	ldr	r2, [r7, #8]
 801bfb8:	4413      	add	r3, r2
 801bfba:	60bb      	str	r3, [r7, #8]
 801bfbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bfbe:	697b      	ldr	r3, [r7, #20]
 801bfc0:	4413      	add	r3, r2
 801bfc2:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_array_get_value(array, i);
 801bfc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801bfc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bfc8:	f001 f84f 	bl	801d06a <json_array_get_value>
 801bfcc:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	1c5a      	adds	r2, r3, #1
 801bfd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bfd4:	9300      	str	r3, [sp, #0]
 801bfd6:	683b      	ldr	r3, [r7, #0]
 801bfd8:	68b9      	ldr	r1, [r7, #8]
 801bfda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bfdc:	f7ff ff5e 	bl	801be9c <json_serialize_to_buffer_r>
 801bfe0:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801bfe2:	697b      	ldr	r3, [r7, #20]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	da02      	bge.n	801bfee <json_serialize_to_buffer_r+0x152>
                    return -1;
 801bfe8:	f04f 33ff 	mov.w	r3, #4294967295
 801bfec:	e261      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
                }
                if (buf != NULL) {
 801bfee:	68bb      	ldr	r3, [r7, #8]
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d003      	beq.n	801bffc <json_serialize_to_buffer_r+0x160>
                    buf += written;
 801bff4:	697b      	ldr	r3, [r7, #20]
 801bff6:	68ba      	ldr	r2, [r7, #8]
 801bff8:	4413      	add	r3, r2
 801bffa:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801bffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bffe:	697b      	ldr	r3, [r7, #20]
 801c000:	4413      	add	r3, r2
 801c002:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801c004:	6a3b      	ldr	r3, [r7, #32]
 801c006:	3b01      	subs	r3, #1
 801c008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c00a:	429a      	cmp	r2, r3
 801c00c:	d215      	bcs.n	801c03a <json_serialize_to_buffer_r+0x19e>
                    APPEND_STRING(",");
 801c00e:	4955      	ldr	r1, [pc, #340]	; (801c164 <json_serialize_to_buffer_r+0x2c8>)
 801c010:	68b8      	ldr	r0, [r7, #8]
 801c012:	f000 ff1f 	bl	801ce54 <append_string>
 801c016:	6178      	str	r0, [r7, #20]
 801c018:	697b      	ldr	r3, [r7, #20]
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	da02      	bge.n	801c024 <json_serialize_to_buffer_r+0x188>
 801c01e:	f04f 33ff 	mov.w	r3, #4294967295
 801c022:	e246      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c024:	68bb      	ldr	r3, [r7, #8]
 801c026:	2b00      	cmp	r3, #0
 801c028:	d003      	beq.n	801c032 <json_serialize_to_buffer_r+0x196>
 801c02a:	697b      	ldr	r3, [r7, #20]
 801c02c:	68ba      	ldr	r2, [r7, #8]
 801c02e:	4413      	add	r3, r2
 801c030:	60bb      	str	r3, [r7, #8]
 801c032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c034:	697b      	ldr	r3, [r7, #20]
 801c036:	4413      	add	r3, r2
 801c038:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801c03a:	683b      	ldr	r3, [r7, #0]
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d015      	beq.n	801c06c <json_serialize_to_buffer_r+0x1d0>
                    APPEND_STRING("\n");
 801c040:	4947      	ldr	r1, [pc, #284]	; (801c160 <json_serialize_to_buffer_r+0x2c4>)
 801c042:	68b8      	ldr	r0, [r7, #8]
 801c044:	f000 ff06 	bl	801ce54 <append_string>
 801c048:	6178      	str	r0, [r7, #20]
 801c04a:	697b      	ldr	r3, [r7, #20]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	da02      	bge.n	801c056 <json_serialize_to_buffer_r+0x1ba>
 801c050:	f04f 33ff 	mov.w	r3, #4294967295
 801c054:	e22d      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c056:	68bb      	ldr	r3, [r7, #8]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d003      	beq.n	801c064 <json_serialize_to_buffer_r+0x1c8>
 801c05c:	697b      	ldr	r3, [r7, #20]
 801c05e:	68ba      	ldr	r2, [r7, #8]
 801c060:	4413      	add	r3, r2
 801c062:	60bb      	str	r3, [r7, #8]
 801c064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c066:	697b      	ldr	r3, [r7, #20]
 801c068:	4413      	add	r3, r2
 801c06a:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801c06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c06e:	3301      	adds	r3, #1
 801c070:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c072:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c074:	6a3b      	ldr	r3, [r7, #32]
 801c076:	429a      	cmp	r2, r3
 801c078:	d389      	bcc.n	801bf8e <json_serialize_to_buffer_r+0xf2>
                }
            }
            if (count > 0 && is_pretty) {
 801c07a:	6a3b      	ldr	r3, [r7, #32]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d018      	beq.n	801c0b2 <json_serialize_to_buffer_r+0x216>
 801c080:	683b      	ldr	r3, [r7, #0]
 801c082:	2b00      	cmp	r3, #0
 801c084:	d015      	beq.n	801c0b2 <json_serialize_to_buffer_r+0x216>
                APPEND_INDENT(level);
 801c086:	6879      	ldr	r1, [r7, #4]
 801c088:	68b8      	ldr	r0, [r7, #8]
 801c08a:	f000 feb1 	bl	801cdf0 <append_indent>
 801c08e:	6178      	str	r0, [r7, #20]
 801c090:	697b      	ldr	r3, [r7, #20]
 801c092:	2b00      	cmp	r3, #0
 801c094:	da02      	bge.n	801c09c <json_serialize_to_buffer_r+0x200>
 801c096:	f04f 33ff 	mov.w	r3, #4294967295
 801c09a:	e20a      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c09c:	68bb      	ldr	r3, [r7, #8]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d003      	beq.n	801c0aa <json_serialize_to_buffer_r+0x20e>
 801c0a2:	697b      	ldr	r3, [r7, #20]
 801c0a4:	68ba      	ldr	r2, [r7, #8]
 801c0a6:	4413      	add	r3, r2
 801c0a8:	60bb      	str	r3, [r7, #8]
 801c0aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c0ac:	697b      	ldr	r3, [r7, #20]
 801c0ae:	4413      	add	r3, r2
 801c0b0:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("]");
 801c0b2:	492d      	ldr	r1, [pc, #180]	; (801c168 <json_serialize_to_buffer_r+0x2cc>)
 801c0b4:	68b8      	ldr	r0, [r7, #8]
 801c0b6:	f000 fecd 	bl	801ce54 <append_string>
 801c0ba:	6178      	str	r0, [r7, #20]
 801c0bc:	697b      	ldr	r3, [r7, #20]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	da02      	bge.n	801c0c8 <json_serialize_to_buffer_r+0x22c>
 801c0c2:	f04f 33ff 	mov.w	r3, #4294967295
 801c0c6:	e1f4      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c0c8:	68bb      	ldr	r3, [r7, #8]
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d003      	beq.n	801c0d6 <json_serialize_to_buffer_r+0x23a>
 801c0ce:	697b      	ldr	r3, [r7, #20]
 801c0d0:	68ba      	ldr	r2, [r7, #8]
 801c0d2:	4413      	add	r3, r2
 801c0d4:	60bb      	str	r3, [r7, #8]
 801c0d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c0d8:	697b      	ldr	r3, [r7, #20]
 801c0da:	4413      	add	r3, r2
 801c0dc:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0e0:	e1e7      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
        case JSONObject:
            object = json_value_get_object(value);
 801c0e2:	68f8      	ldr	r0, [r7, #12]
 801c0e4:	f001 f81d 	bl	801d122 <json_value_get_object>
 801c0e8:	6278      	str	r0, [r7, #36]	; 0x24
            count  = json_object_get_count(object);
 801c0ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c0ec:	f000 ff72 	bl	801cfd4 <json_object_get_count>
 801c0f0:	6238      	str	r0, [r7, #32]
            APPEND_STRING("{");
 801c0f2:	491e      	ldr	r1, [pc, #120]	; (801c16c <json_serialize_to_buffer_r+0x2d0>)
 801c0f4:	68b8      	ldr	r0, [r7, #8]
 801c0f6:	f000 fead 	bl	801ce54 <append_string>
 801c0fa:	6178      	str	r0, [r7, #20]
 801c0fc:	697b      	ldr	r3, [r7, #20]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	da02      	bge.n	801c108 <json_serialize_to_buffer_r+0x26c>
 801c102:	f04f 33ff 	mov.w	r3, #4294967295
 801c106:	e1d4      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c108:	68bb      	ldr	r3, [r7, #8]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d003      	beq.n	801c116 <json_serialize_to_buffer_r+0x27a>
 801c10e:	697b      	ldr	r3, [r7, #20]
 801c110:	68ba      	ldr	r2, [r7, #8]
 801c112:	4413      	add	r3, r2
 801c114:	60bb      	str	r3, [r7, #8]
 801c116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c118:	697b      	ldr	r3, [r7, #20]
 801c11a:	4413      	add	r3, r2
 801c11c:	63bb      	str	r3, [r7, #56]	; 0x38
            if (count > 0 && is_pretty) {
 801c11e:	6a3b      	ldr	r3, [r7, #32]
 801c120:	2b00      	cmp	r3, #0
 801c122:	d018      	beq.n	801c156 <json_serialize_to_buffer_r+0x2ba>
 801c124:	683b      	ldr	r3, [r7, #0]
 801c126:	2b00      	cmp	r3, #0
 801c128:	d015      	beq.n	801c156 <json_serialize_to_buffer_r+0x2ba>
                APPEND_STRING("\n");
 801c12a:	490d      	ldr	r1, [pc, #52]	; (801c160 <json_serialize_to_buffer_r+0x2c4>)
 801c12c:	68b8      	ldr	r0, [r7, #8]
 801c12e:	f000 fe91 	bl	801ce54 <append_string>
 801c132:	6178      	str	r0, [r7, #20]
 801c134:	697b      	ldr	r3, [r7, #20]
 801c136:	2b00      	cmp	r3, #0
 801c138:	da02      	bge.n	801c140 <json_serialize_to_buffer_r+0x2a4>
 801c13a:	f04f 33ff 	mov.w	r3, #4294967295
 801c13e:	e1b8      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c140:	68bb      	ldr	r3, [r7, #8]
 801c142:	2b00      	cmp	r3, #0
 801c144:	d003      	beq.n	801c14e <json_serialize_to_buffer_r+0x2b2>
 801c146:	697b      	ldr	r3, [r7, #20]
 801c148:	68ba      	ldr	r2, [r7, #8]
 801c14a:	4413      	add	r3, r2
 801c14c:	60bb      	str	r3, [r7, #8]
 801c14e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c150:	697b      	ldr	r3, [r7, #20]
 801c152:	4413      	add	r3, r2
 801c154:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            for (i = 0; i < count; i++) {
 801c156:	2300      	movs	r3, #0
 801c158:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c15a:	e0cb      	b.n	801c2f4 <json_serialize_to_buffer_r+0x458>
 801c15c:	080227e4 	.word	0x080227e4
 801c160:	080227e8 	.word	0x080227e8
 801c164:	080227ec 	.word	0x080227ec
 801c168:	080227f0 	.word	0x080227f0
 801c16c:	080227f4 	.word	0x080227f4
                key = json_object_get_name(object, i);
 801c170:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c174:	f000 ff3f 	bl	801cff6 <json_object_get_name>
 801c178:	6378      	str	r0, [r7, #52]	; 0x34
                if (key == NULL) {
 801c17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d102      	bne.n	801c186 <json_serialize_to_buffer_r+0x2ea>
                    return -1;
 801c180:	f04f 33ff 	mov.w	r3, #4294967295
 801c184:	e195      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
                }
                if (is_pretty) {
 801c186:	683b      	ldr	r3, [r7, #0]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d017      	beq.n	801c1bc <json_serialize_to_buffer_r+0x320>
                    APPEND_INDENT(level+1);
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	3301      	adds	r3, #1
 801c190:	4619      	mov	r1, r3
 801c192:	68b8      	ldr	r0, [r7, #8]
 801c194:	f000 fe2c 	bl	801cdf0 <append_indent>
 801c198:	6178      	str	r0, [r7, #20]
 801c19a:	697b      	ldr	r3, [r7, #20]
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	da02      	bge.n	801c1a6 <json_serialize_to_buffer_r+0x30a>
 801c1a0:	f04f 33ff 	mov.w	r3, #4294967295
 801c1a4:	e185      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c1a6:	68bb      	ldr	r3, [r7, #8]
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	d003      	beq.n	801c1b4 <json_serialize_to_buffer_r+0x318>
 801c1ac:	697b      	ldr	r3, [r7, #20]
 801c1ae:	68ba      	ldr	r2, [r7, #8]
 801c1b0:	4413      	add	r3, r2
 801c1b2:	60bb      	str	r3, [r7, #8]
 801c1b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c1b6:	697b      	ldr	r3, [r7, #20]
 801c1b8:	4413      	add	r3, r2
 801c1ba:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                written = json_serialize_string(key, buf);
 801c1bc:	68b9      	ldr	r1, [r7, #8]
 801c1be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801c1c0:	f000 f980 	bl	801c4c4 <json_serialize_string>
 801c1c4:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801c1c6:	697b      	ldr	r3, [r7, #20]
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	da02      	bge.n	801c1d2 <json_serialize_to_buffer_r+0x336>
                    return -1;
 801c1cc:	f04f 33ff 	mov.w	r3, #4294967295
 801c1d0:	e16f      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
                }
                if (buf != NULL) {
 801c1d2:	68bb      	ldr	r3, [r7, #8]
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	d003      	beq.n	801c1e0 <json_serialize_to_buffer_r+0x344>
                    buf += written;
 801c1d8:	697b      	ldr	r3, [r7, #20]
 801c1da:	68ba      	ldr	r2, [r7, #8]
 801c1dc:	4413      	add	r3, r2
 801c1de:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801c1e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c1e2:	697b      	ldr	r3, [r7, #20]
 801c1e4:	4413      	add	r3, r2
 801c1e6:	63bb      	str	r3, [r7, #56]	; 0x38
                APPEND_STRING(":");
 801c1e8:	498a      	ldr	r1, [pc, #552]	; (801c414 <json_serialize_to_buffer_r+0x578>)
 801c1ea:	68b8      	ldr	r0, [r7, #8]
 801c1ec:	f000 fe32 	bl	801ce54 <append_string>
 801c1f0:	6178      	str	r0, [r7, #20]
 801c1f2:	697b      	ldr	r3, [r7, #20]
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	da02      	bge.n	801c1fe <json_serialize_to_buffer_r+0x362>
 801c1f8:	f04f 33ff 	mov.w	r3, #4294967295
 801c1fc:	e159      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c1fe:	68bb      	ldr	r3, [r7, #8]
 801c200:	2b00      	cmp	r3, #0
 801c202:	d003      	beq.n	801c20c <json_serialize_to_buffer_r+0x370>
 801c204:	697b      	ldr	r3, [r7, #20]
 801c206:	68ba      	ldr	r2, [r7, #8]
 801c208:	4413      	add	r3, r2
 801c20a:	60bb      	str	r3, [r7, #8]
 801c20c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c20e:	697b      	ldr	r3, [r7, #20]
 801c210:	4413      	add	r3, r2
 801c212:	63bb      	str	r3, [r7, #56]	; 0x38
                if (is_pretty) {
 801c214:	683b      	ldr	r3, [r7, #0]
 801c216:	2b00      	cmp	r3, #0
 801c218:	d015      	beq.n	801c246 <json_serialize_to_buffer_r+0x3aa>
                    APPEND_STRING(" ");
 801c21a:	497f      	ldr	r1, [pc, #508]	; (801c418 <json_serialize_to_buffer_r+0x57c>)
 801c21c:	68b8      	ldr	r0, [r7, #8]
 801c21e:	f000 fe19 	bl	801ce54 <append_string>
 801c222:	6178      	str	r0, [r7, #20]
 801c224:	697b      	ldr	r3, [r7, #20]
 801c226:	2b00      	cmp	r3, #0
 801c228:	da02      	bge.n	801c230 <json_serialize_to_buffer_r+0x394>
 801c22a:	f04f 33ff 	mov.w	r3, #4294967295
 801c22e:	e140      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c230:	68bb      	ldr	r3, [r7, #8]
 801c232:	2b00      	cmp	r3, #0
 801c234:	d003      	beq.n	801c23e <json_serialize_to_buffer_r+0x3a2>
 801c236:	697b      	ldr	r3, [r7, #20]
 801c238:	68ba      	ldr	r2, [r7, #8]
 801c23a:	4413      	add	r3, r2
 801c23c:	60bb      	str	r3, [r7, #8]
 801c23e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c240:	697b      	ldr	r3, [r7, #20]
 801c242:	4413      	add	r3, r2
 801c244:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                temp_value = json_object_get_value(object, key);
 801c246:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c248:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c24a:	f000 fe41 	bl	801ced0 <json_object_get_value>
 801c24e:	62f8      	str	r0, [r7, #44]	; 0x2c
                written = json_serialize_to_buffer_r(temp_value, buf, level+1, is_pretty, num_buf);
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	1c5a      	adds	r2, r3, #1
 801c254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c256:	9300      	str	r3, [sp, #0]
 801c258:	683b      	ldr	r3, [r7, #0]
 801c25a:	68b9      	ldr	r1, [r7, #8]
 801c25c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c25e:	f7ff fe1d 	bl	801be9c <json_serialize_to_buffer_r>
 801c262:	6178      	str	r0, [r7, #20]
                if (written < 0) {
 801c264:	697b      	ldr	r3, [r7, #20]
 801c266:	2b00      	cmp	r3, #0
 801c268:	da02      	bge.n	801c270 <json_serialize_to_buffer_r+0x3d4>
                    return -1;
 801c26a:	f04f 33ff 	mov.w	r3, #4294967295
 801c26e:	e120      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
                }
                if (buf != NULL) {
 801c270:	68bb      	ldr	r3, [r7, #8]
 801c272:	2b00      	cmp	r3, #0
 801c274:	d003      	beq.n	801c27e <json_serialize_to_buffer_r+0x3e2>
                    buf += written;
 801c276:	697b      	ldr	r3, [r7, #20]
 801c278:	68ba      	ldr	r2, [r7, #8]
 801c27a:	4413      	add	r3, r2
 801c27c:	60bb      	str	r3, [r7, #8]
                }
                written_total += written;
 801c27e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c280:	697b      	ldr	r3, [r7, #20]
 801c282:	4413      	add	r3, r2
 801c284:	63bb      	str	r3, [r7, #56]	; 0x38
                if (i < (count - 1)) {
 801c286:	6a3b      	ldr	r3, [r7, #32]
 801c288:	3b01      	subs	r3, #1
 801c28a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c28c:	429a      	cmp	r2, r3
 801c28e:	d215      	bcs.n	801c2bc <json_serialize_to_buffer_r+0x420>
                    APPEND_STRING(",");
 801c290:	4962      	ldr	r1, [pc, #392]	; (801c41c <json_serialize_to_buffer_r+0x580>)
 801c292:	68b8      	ldr	r0, [r7, #8]
 801c294:	f000 fdde 	bl	801ce54 <append_string>
 801c298:	6178      	str	r0, [r7, #20]
 801c29a:	697b      	ldr	r3, [r7, #20]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	da02      	bge.n	801c2a6 <json_serialize_to_buffer_r+0x40a>
 801c2a0:	f04f 33ff 	mov.w	r3, #4294967295
 801c2a4:	e105      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c2a6:	68bb      	ldr	r3, [r7, #8]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d003      	beq.n	801c2b4 <json_serialize_to_buffer_r+0x418>
 801c2ac:	697b      	ldr	r3, [r7, #20]
 801c2ae:	68ba      	ldr	r2, [r7, #8]
 801c2b0:	4413      	add	r3, r2
 801c2b2:	60bb      	str	r3, [r7, #8]
 801c2b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c2b6:	697b      	ldr	r3, [r7, #20]
 801c2b8:	4413      	add	r3, r2
 801c2ba:	63bb      	str	r3, [r7, #56]	; 0x38
                }
                if (is_pretty) {
 801c2bc:	683b      	ldr	r3, [r7, #0]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d015      	beq.n	801c2ee <json_serialize_to_buffer_r+0x452>
                    APPEND_STRING("\n");
 801c2c2:	4957      	ldr	r1, [pc, #348]	; (801c420 <json_serialize_to_buffer_r+0x584>)
 801c2c4:	68b8      	ldr	r0, [r7, #8]
 801c2c6:	f000 fdc5 	bl	801ce54 <append_string>
 801c2ca:	6178      	str	r0, [r7, #20]
 801c2cc:	697b      	ldr	r3, [r7, #20]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	da02      	bge.n	801c2d8 <json_serialize_to_buffer_r+0x43c>
 801c2d2:	f04f 33ff 	mov.w	r3, #4294967295
 801c2d6:	e0ec      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c2d8:	68bb      	ldr	r3, [r7, #8]
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	d003      	beq.n	801c2e6 <json_serialize_to_buffer_r+0x44a>
 801c2de:	697b      	ldr	r3, [r7, #20]
 801c2e0:	68ba      	ldr	r2, [r7, #8]
 801c2e2:	4413      	add	r3, r2
 801c2e4:	60bb      	str	r3, [r7, #8]
 801c2e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c2e8:	697b      	ldr	r3, [r7, #20]
 801c2ea:	4413      	add	r3, r2
 801c2ec:	63bb      	str	r3, [r7, #56]	; 0x38
            for (i = 0; i < count; i++) {
 801c2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c2f0:	3301      	adds	r3, #1
 801c2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c2f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c2f6:	6a3b      	ldr	r3, [r7, #32]
 801c2f8:	429a      	cmp	r2, r3
 801c2fa:	f4ff af39 	bcc.w	801c170 <json_serialize_to_buffer_r+0x2d4>
                }
            }
            if (count > 0 && is_pretty) {
 801c2fe:	6a3b      	ldr	r3, [r7, #32]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d018      	beq.n	801c336 <json_serialize_to_buffer_r+0x49a>
 801c304:	683b      	ldr	r3, [r7, #0]
 801c306:	2b00      	cmp	r3, #0
 801c308:	d015      	beq.n	801c336 <json_serialize_to_buffer_r+0x49a>
                APPEND_INDENT(level);
 801c30a:	6879      	ldr	r1, [r7, #4]
 801c30c:	68b8      	ldr	r0, [r7, #8]
 801c30e:	f000 fd6f 	bl	801cdf0 <append_indent>
 801c312:	6178      	str	r0, [r7, #20]
 801c314:	697b      	ldr	r3, [r7, #20]
 801c316:	2b00      	cmp	r3, #0
 801c318:	da02      	bge.n	801c320 <json_serialize_to_buffer_r+0x484>
 801c31a:	f04f 33ff 	mov.w	r3, #4294967295
 801c31e:	e0c8      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c320:	68bb      	ldr	r3, [r7, #8]
 801c322:	2b00      	cmp	r3, #0
 801c324:	d003      	beq.n	801c32e <json_serialize_to_buffer_r+0x492>
 801c326:	697b      	ldr	r3, [r7, #20]
 801c328:	68ba      	ldr	r2, [r7, #8]
 801c32a:	4413      	add	r3, r2
 801c32c:	60bb      	str	r3, [r7, #8]
 801c32e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c330:	697b      	ldr	r3, [r7, #20]
 801c332:	4413      	add	r3, r2
 801c334:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            APPEND_STRING("}");
 801c336:	493b      	ldr	r1, [pc, #236]	; (801c424 <json_serialize_to_buffer_r+0x588>)
 801c338:	68b8      	ldr	r0, [r7, #8]
 801c33a:	f000 fd8b 	bl	801ce54 <append_string>
 801c33e:	6178      	str	r0, [r7, #20]
 801c340:	697b      	ldr	r3, [r7, #20]
 801c342:	2b00      	cmp	r3, #0
 801c344:	da02      	bge.n	801c34c <json_serialize_to_buffer_r+0x4b0>
 801c346:	f04f 33ff 	mov.w	r3, #4294967295
 801c34a:	e0b2      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c34c:	68bb      	ldr	r3, [r7, #8]
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d003      	beq.n	801c35a <json_serialize_to_buffer_r+0x4be>
 801c352:	697b      	ldr	r3, [r7, #20]
 801c354:	68ba      	ldr	r2, [r7, #8]
 801c356:	4413      	add	r3, r2
 801c358:	60bb      	str	r3, [r7, #8]
 801c35a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c35c:	697b      	ldr	r3, [r7, #20]
 801c35e:	4413      	add	r3, r2
 801c360:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c364:	e0a5      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
        case JSONString:
            string = json_value_get_string(value);
 801c366:	68f8      	ldr	r0, [r7, #12]
 801c368:	f000 feff 	bl	801d16a <json_value_get_string>
 801c36c:	6338      	str	r0, [r7, #48]	; 0x30
            if (string == NULL) {
 801c36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c370:	2b00      	cmp	r3, #0
 801c372:	d102      	bne.n	801c37a <json_serialize_to_buffer_r+0x4de>
                return -1;
 801c374:	f04f 33ff 	mov.w	r3, #4294967295
 801c378:	e09b      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
            }
            written = json_serialize_string(string, buf);
 801c37a:	68b9      	ldr	r1, [r7, #8]
 801c37c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c37e:	f000 f8a1 	bl	801c4c4 <json_serialize_string>
 801c382:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801c384:	697b      	ldr	r3, [r7, #20]
 801c386:	2b00      	cmp	r3, #0
 801c388:	da02      	bge.n	801c390 <json_serialize_to_buffer_r+0x4f4>
                return -1;
 801c38a:	f04f 33ff 	mov.w	r3, #4294967295
 801c38e:	e090      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
            }
            if (buf != NULL) {
 801c390:	68bb      	ldr	r3, [r7, #8]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d003      	beq.n	801c39e <json_serialize_to_buffer_r+0x502>
                buf += written;
 801c396:	697b      	ldr	r3, [r7, #20]
 801c398:	68ba      	ldr	r2, [r7, #8]
 801c39a:	4413      	add	r3, r2
 801c39c:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801c39e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c3a0:	697b      	ldr	r3, [r7, #20]
 801c3a2:	4413      	add	r3, r2
 801c3a4:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3a8:	e083      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
        case JSONBoolean:
            if (json_value_get_boolean(value)) {
 801c3aa:	68f8      	ldr	r0, [r7, #12]
 801c3ac:	f000 ff0a 	bl	801d1c4 <json_value_get_boolean>
 801c3b0:	4603      	mov	r3, r0
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d016      	beq.n	801c3e4 <json_serialize_to_buffer_r+0x548>
                APPEND_STRING("true");
 801c3b6:	491c      	ldr	r1, [pc, #112]	; (801c428 <json_serialize_to_buffer_r+0x58c>)
 801c3b8:	68b8      	ldr	r0, [r7, #8]
 801c3ba:	f000 fd4b 	bl	801ce54 <append_string>
 801c3be:	6178      	str	r0, [r7, #20]
 801c3c0:	697b      	ldr	r3, [r7, #20]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	da02      	bge.n	801c3cc <json_serialize_to_buffer_r+0x530>
 801c3c6:	f04f 33ff 	mov.w	r3, #4294967295
 801c3ca:	e072      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c3cc:	68bb      	ldr	r3, [r7, #8]
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d003      	beq.n	801c3da <json_serialize_to_buffer_r+0x53e>
 801c3d2:	697b      	ldr	r3, [r7, #20]
 801c3d4:	68ba      	ldr	r2, [r7, #8]
 801c3d6:	4413      	add	r3, r2
 801c3d8:	60bb      	str	r3, [r7, #8]
 801c3da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c3dc:	697b      	ldr	r3, [r7, #20]
 801c3de:	4413      	add	r3, r2
 801c3e0:	63bb      	str	r3, [r7, #56]	; 0x38
 801c3e2:	e015      	b.n	801c410 <json_serialize_to_buffer_r+0x574>
            } else {
                APPEND_STRING("false");
 801c3e4:	4911      	ldr	r1, [pc, #68]	; (801c42c <json_serialize_to_buffer_r+0x590>)
 801c3e6:	68b8      	ldr	r0, [r7, #8]
 801c3e8:	f000 fd34 	bl	801ce54 <append_string>
 801c3ec:	6178      	str	r0, [r7, #20]
 801c3ee:	697b      	ldr	r3, [r7, #20]
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	da02      	bge.n	801c3fa <json_serialize_to_buffer_r+0x55e>
 801c3f4:	f04f 33ff 	mov.w	r3, #4294967295
 801c3f8:	e05b      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c3fa:	68bb      	ldr	r3, [r7, #8]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d003      	beq.n	801c408 <json_serialize_to_buffer_r+0x56c>
 801c400:	697b      	ldr	r3, [r7, #20]
 801c402:	68ba      	ldr	r2, [r7, #8]
 801c404:	4413      	add	r3, r2
 801c406:	60bb      	str	r3, [r7, #8]
 801c408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c40a:	697b      	ldr	r3, [r7, #20]
 801c40c:	4413      	add	r3, r2
 801c40e:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            return written_total;
 801c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c412:	e04e      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c414:	080227f8 	.word	0x080227f8
 801c418:	080227fc 	.word	0x080227fc
 801c41c:	080227ec 	.word	0x080227ec
 801c420:	080227e8 	.word	0x080227e8
 801c424:	08022800 	.word	0x08022800
 801c428:	080227cc 	.word	0x080227cc
 801c42c:	080227d4 	.word	0x080227d4
        case JSONNumber:
            num = json_value_get_number(value);
 801c430:	68f8      	ldr	r0, [r7, #12]
 801c432:	f000 feac 	bl	801d18e <json_value_get_number>
 801c436:	ed87 0b06 	vstr	d0, [r7, #24]
            if (buf != NULL) {
 801c43a:	68bb      	ldr	r3, [r7, #8]
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d001      	beq.n	801c444 <json_serialize_to_buffer_r+0x5a8>
                num_buf = buf;
 801c440:	68bb      	ldr	r3, [r7, #8]
 801c442:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            written = sprintf(num_buf, FLOAT_FORMAT, num);
 801c444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c448:	491c      	ldr	r1, [pc, #112]	; (801c4bc <json_serialize_to_buffer_r+0x620>)
 801c44a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801c44c:	f002 fbba 	bl	801ebc4 <siprintf>
 801c450:	6178      	str	r0, [r7, #20]
            if (written < 0) {
 801c452:	697b      	ldr	r3, [r7, #20]
 801c454:	2b00      	cmp	r3, #0
 801c456:	da02      	bge.n	801c45e <json_serialize_to_buffer_r+0x5c2>
                return -1;
 801c458:	f04f 33ff 	mov.w	r3, #4294967295
 801c45c:	e029      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
            }
            if (buf != NULL) {
 801c45e:	68bb      	ldr	r3, [r7, #8]
 801c460:	2b00      	cmp	r3, #0
 801c462:	d003      	beq.n	801c46c <json_serialize_to_buffer_r+0x5d0>
                buf += written;
 801c464:	697b      	ldr	r3, [r7, #20]
 801c466:	68ba      	ldr	r2, [r7, #8]
 801c468:	4413      	add	r3, r2
 801c46a:	60bb      	str	r3, [r7, #8]
            }
            written_total += written;
 801c46c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c46e:	697b      	ldr	r3, [r7, #20]
 801c470:	4413      	add	r3, r2
 801c472:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c476:	e01c      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
        case JSONNull:
            APPEND_STRING("null");
 801c478:	4911      	ldr	r1, [pc, #68]	; (801c4c0 <json_serialize_to_buffer_r+0x624>)
 801c47a:	68b8      	ldr	r0, [r7, #8]
 801c47c:	f000 fcea 	bl	801ce54 <append_string>
 801c480:	6178      	str	r0, [r7, #20]
 801c482:	697b      	ldr	r3, [r7, #20]
 801c484:	2b00      	cmp	r3, #0
 801c486:	da02      	bge.n	801c48e <json_serialize_to_buffer_r+0x5f2>
 801c488:	f04f 33ff 	mov.w	r3, #4294967295
 801c48c:	e011      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
 801c48e:	68bb      	ldr	r3, [r7, #8]
 801c490:	2b00      	cmp	r3, #0
 801c492:	d003      	beq.n	801c49c <json_serialize_to_buffer_r+0x600>
 801c494:	697b      	ldr	r3, [r7, #20]
 801c496:	68ba      	ldr	r2, [r7, #8]
 801c498:	4413      	add	r3, r2
 801c49a:	60bb      	str	r3, [r7, #8]
 801c49c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c49e:	697b      	ldr	r3, [r7, #20]
 801c4a0:	4413      	add	r3, r2
 801c4a2:	63bb      	str	r3, [r7, #56]	; 0x38
            return written_total;
 801c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4a6:	e004      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
        case JSONError:
            return -1;
 801c4a8:	f04f 33ff 	mov.w	r3, #4294967295
 801c4ac:	e001      	b.n	801c4b2 <json_serialize_to_buffer_r+0x616>
        default:
            return -1;
 801c4ae:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801c4b2:	4618      	mov	r0, r3
 801c4b4:	3740      	adds	r7, #64	; 0x40
 801c4b6:	46bd      	mov	sp, r7
 801c4b8:	bd80      	pop	{r7, pc}
 801c4ba:	bf00      	nop
 801c4bc:	08022804 	.word	0x08022804
 801c4c0:	080227dc 	.word	0x080227dc

0801c4c4 <json_serialize_string>:

static int json_serialize_string(const char *string, char *buf) {
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b088      	sub	sp, #32
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	6078      	str	r0, [r7, #4]
 801c4cc:	6039      	str	r1, [r7, #0]
    size_t i = 0, len = strlen(string);
 801c4ce:	2300      	movs	r3, #0
 801c4d0:	61fb      	str	r3, [r7, #28]
 801c4d2:	6878      	ldr	r0, [r7, #4]
 801c4d4:	f7e3 fe9e 	bl	8000214 <strlen>
 801c4d8:	6178      	str	r0, [r7, #20]
    char c = '\0';
 801c4da:	2300      	movs	r3, #0
 801c4dc:	74fb      	strb	r3, [r7, #19]
    int written = -1, written_total = 0;
 801c4de:	f04f 33ff 	mov.w	r3, #4294967295
 801c4e2:	60fb      	str	r3, [r7, #12]
 801c4e4:	2300      	movs	r3, #0
 801c4e6:	61bb      	str	r3, [r7, #24]
    APPEND_STRING("\"");
 801c4e8:	49bb      	ldr	r1, [pc, #748]	; (801c7d8 <json_serialize_string+0x314>)
 801c4ea:	6838      	ldr	r0, [r7, #0]
 801c4ec:	f000 fcb2 	bl	801ce54 <append_string>
 801c4f0:	60f8      	str	r0, [r7, #12]
 801c4f2:	68fb      	ldr	r3, [r7, #12]
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	da03      	bge.n	801c500 <json_serialize_string+0x3c>
 801c4f8:	f04f 33ff 	mov.w	r3, #4294967295
 801c4fc:	f000 bc6e 	b.w	801cddc <json_serialize_string+0x918>
 801c500:	683b      	ldr	r3, [r7, #0]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d003      	beq.n	801c50e <json_serialize_string+0x4a>
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	683a      	ldr	r2, [r7, #0]
 801c50a:	4413      	add	r3, r2
 801c50c:	603b      	str	r3, [r7, #0]
 801c50e:	69ba      	ldr	r2, [r7, #24]
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	4413      	add	r3, r2
 801c514:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < len; i++) {
 801c516:	2300      	movs	r3, #0
 801c518:	61fb      	str	r3, [r7, #28]
 801c51a:	f000 bc43 	b.w	801cda4 <json_serialize_string+0x8e0>
        c = string[i];
 801c51e:	687a      	ldr	r2, [r7, #4]
 801c520:	69fb      	ldr	r3, [r7, #28]
 801c522:	4413      	add	r3, r2
 801c524:	781b      	ldrb	r3, [r3, #0]
 801c526:	74fb      	strb	r3, [r7, #19]
        switch (c) {
 801c528:	7cfb      	ldrb	r3, [r7, #19]
 801c52a:	2b5c      	cmp	r3, #92	; 0x5c
 801c52c:	f200 842a 	bhi.w	801cd84 <json_serialize_string+0x8c0>
 801c530:	a201      	add	r2, pc, #4	; (adr r2, 801c538 <json_serialize_string+0x74>)
 801c532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c536:	bf00      	nop
 801c538:	0801c83f 	.word	0x0801c83f
 801c53c:	0801c86d 	.word	0x0801c86d
 801c540:	0801c89b 	.word	0x0801c89b
 801c544:	0801c8c9 	.word	0x0801c8c9
 801c548:	0801c8f7 	.word	0x0801c8f7
 801c54c:	0801c925 	.word	0x0801c925
 801c550:	0801c953 	.word	0x0801c953
 801c554:	0801c981 	.word	0x0801c981
 801c558:	0801c737 	.word	0x0801c737
 801c55c:	0801c811 	.word	0x0801c811
 801c560:	0801c793 	.word	0x0801c793
 801c564:	0801c9af 	.word	0x0801c9af
 801c568:	0801c765 	.word	0x0801c765
 801c56c:	0801c7c1 	.word	0x0801c7c1
 801c570:	0801c9dd 	.word	0x0801c9dd
 801c574:	0801ca0b 	.word	0x0801ca0b
 801c578:	0801ca39 	.word	0x0801ca39
 801c57c:	0801ca9d 	.word	0x0801ca9d
 801c580:	0801cacb 	.word	0x0801cacb
 801c584:	0801caf9 	.word	0x0801caf9
 801c588:	0801cb27 	.word	0x0801cb27
 801c58c:	0801cb55 	.word	0x0801cb55
 801c590:	0801cb83 	.word	0x0801cb83
 801c594:	0801cbb1 	.word	0x0801cbb1
 801c598:	0801cbdf 	.word	0x0801cbdf
 801c59c:	0801cc0d 	.word	0x0801cc0d
 801c5a0:	0801cc3b 	.word	0x0801cc3b
 801c5a4:	0801cc69 	.word	0x0801cc69
 801c5a8:	0801cc97 	.word	0x0801cc97
 801c5ac:	0801ccc5 	.word	0x0801ccc5
 801c5b0:	0801cd29 	.word	0x0801cd29
 801c5b4:	0801cd57 	.word	0x0801cd57
 801c5b8:	0801cd85 	.word	0x0801cd85
 801c5bc:	0801cd85 	.word	0x0801cd85
 801c5c0:	0801c6ad 	.word	0x0801c6ad
 801c5c4:	0801cd85 	.word	0x0801cd85
 801c5c8:	0801cd85 	.word	0x0801cd85
 801c5cc:	0801cd85 	.word	0x0801cd85
 801c5d0:	0801cd85 	.word	0x0801cd85
 801c5d4:	0801cd85 	.word	0x0801cd85
 801c5d8:	0801cd85 	.word	0x0801cd85
 801c5dc:	0801cd85 	.word	0x0801cd85
 801c5e0:	0801cd85 	.word	0x0801cd85
 801c5e4:	0801cd85 	.word	0x0801cd85
 801c5e8:	0801cd85 	.word	0x0801cd85
 801c5ec:	0801cd85 	.word	0x0801cd85
 801c5f0:	0801cd85 	.word	0x0801cd85
 801c5f4:	0801c709 	.word	0x0801c709
 801c5f8:	0801cd85 	.word	0x0801cd85
 801c5fc:	0801cd85 	.word	0x0801cd85
 801c600:	0801cd85 	.word	0x0801cd85
 801c604:	0801cd85 	.word	0x0801cd85
 801c608:	0801cd85 	.word	0x0801cd85
 801c60c:	0801cd85 	.word	0x0801cd85
 801c610:	0801cd85 	.word	0x0801cd85
 801c614:	0801cd85 	.word	0x0801cd85
 801c618:	0801cd85 	.word	0x0801cd85
 801c61c:	0801cd85 	.word	0x0801cd85
 801c620:	0801cd85 	.word	0x0801cd85
 801c624:	0801cd85 	.word	0x0801cd85
 801c628:	0801cd85 	.word	0x0801cd85
 801c62c:	0801cd85 	.word	0x0801cd85
 801c630:	0801cd85 	.word	0x0801cd85
 801c634:	0801cd85 	.word	0x0801cd85
 801c638:	0801cd85 	.word	0x0801cd85
 801c63c:	0801cd85 	.word	0x0801cd85
 801c640:	0801cd85 	.word	0x0801cd85
 801c644:	0801cd85 	.word	0x0801cd85
 801c648:	0801cd85 	.word	0x0801cd85
 801c64c:	0801cd85 	.word	0x0801cd85
 801c650:	0801cd85 	.word	0x0801cd85
 801c654:	0801cd85 	.word	0x0801cd85
 801c658:	0801cd85 	.word	0x0801cd85
 801c65c:	0801cd85 	.word	0x0801cd85
 801c660:	0801cd85 	.word	0x0801cd85
 801c664:	0801cd85 	.word	0x0801cd85
 801c668:	0801cd85 	.word	0x0801cd85
 801c66c:	0801cd85 	.word	0x0801cd85
 801c670:	0801cd85 	.word	0x0801cd85
 801c674:	0801cd85 	.word	0x0801cd85
 801c678:	0801cd85 	.word	0x0801cd85
 801c67c:	0801cd85 	.word	0x0801cd85
 801c680:	0801cd85 	.word	0x0801cd85
 801c684:	0801cd85 	.word	0x0801cd85
 801c688:	0801cd85 	.word	0x0801cd85
 801c68c:	0801cd85 	.word	0x0801cd85
 801c690:	0801cd85 	.word	0x0801cd85
 801c694:	0801cd85 	.word	0x0801cd85
 801c698:	0801cd85 	.word	0x0801cd85
 801c69c:	0801cd85 	.word	0x0801cd85
 801c6a0:	0801cd85 	.word	0x0801cd85
 801c6a4:	0801cd85 	.word	0x0801cd85
 801c6a8:	0801c6db 	.word	0x0801c6db
            case '\"': APPEND_STRING("\\\""); break;
 801c6ac:	494b      	ldr	r1, [pc, #300]	; (801c7dc <json_serialize_string+0x318>)
 801c6ae:	6838      	ldr	r0, [r7, #0]
 801c6b0:	f000 fbd0 	bl	801ce54 <append_string>
 801c6b4:	60f8      	str	r0, [r7, #12]
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	da02      	bge.n	801c6c2 <json_serialize_string+0x1fe>
 801c6bc:	f04f 33ff 	mov.w	r3, #4294967295
 801c6c0:	e38c      	b.n	801cddc <json_serialize_string+0x918>
 801c6c2:	683b      	ldr	r3, [r7, #0]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d003      	beq.n	801c6d0 <json_serialize_string+0x20c>
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	683a      	ldr	r2, [r7, #0]
 801c6cc:	4413      	add	r3, r2
 801c6ce:	603b      	str	r3, [r7, #0]
 801c6d0:	69ba      	ldr	r2, [r7, #24]
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	4413      	add	r3, r2
 801c6d6:	61bb      	str	r3, [r7, #24]
 801c6d8:	e361      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\\': APPEND_STRING("\\\\"); break;
 801c6da:	4941      	ldr	r1, [pc, #260]	; (801c7e0 <json_serialize_string+0x31c>)
 801c6dc:	6838      	ldr	r0, [r7, #0]
 801c6de:	f000 fbb9 	bl	801ce54 <append_string>
 801c6e2:	60f8      	str	r0, [r7, #12]
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	da02      	bge.n	801c6f0 <json_serialize_string+0x22c>
 801c6ea:	f04f 33ff 	mov.w	r3, #4294967295
 801c6ee:	e375      	b.n	801cddc <json_serialize_string+0x918>
 801c6f0:	683b      	ldr	r3, [r7, #0]
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d003      	beq.n	801c6fe <json_serialize_string+0x23a>
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	683a      	ldr	r2, [r7, #0]
 801c6fa:	4413      	add	r3, r2
 801c6fc:	603b      	str	r3, [r7, #0]
 801c6fe:	69ba      	ldr	r2, [r7, #24]
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	4413      	add	r3, r2
 801c704:	61bb      	str	r3, [r7, #24]
 801c706:	e34a      	b.n	801cd9e <json_serialize_string+0x8da>
            case '/':  APPEND_STRING("\\/"); break; /* to make json embeddable in xml\/html */
 801c708:	4936      	ldr	r1, [pc, #216]	; (801c7e4 <json_serialize_string+0x320>)
 801c70a:	6838      	ldr	r0, [r7, #0]
 801c70c:	f000 fba2 	bl	801ce54 <append_string>
 801c710:	60f8      	str	r0, [r7, #12]
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	2b00      	cmp	r3, #0
 801c716:	da02      	bge.n	801c71e <json_serialize_string+0x25a>
 801c718:	f04f 33ff 	mov.w	r3, #4294967295
 801c71c:	e35e      	b.n	801cddc <json_serialize_string+0x918>
 801c71e:	683b      	ldr	r3, [r7, #0]
 801c720:	2b00      	cmp	r3, #0
 801c722:	d003      	beq.n	801c72c <json_serialize_string+0x268>
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	683a      	ldr	r2, [r7, #0]
 801c728:	4413      	add	r3, r2
 801c72a:	603b      	str	r3, [r7, #0]
 801c72c:	69ba      	ldr	r2, [r7, #24]
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	4413      	add	r3, r2
 801c732:	61bb      	str	r3, [r7, #24]
 801c734:	e333      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\b': APPEND_STRING("\\b"); break;
 801c736:	492c      	ldr	r1, [pc, #176]	; (801c7e8 <json_serialize_string+0x324>)
 801c738:	6838      	ldr	r0, [r7, #0]
 801c73a:	f000 fb8b 	bl	801ce54 <append_string>
 801c73e:	60f8      	str	r0, [r7, #12]
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	2b00      	cmp	r3, #0
 801c744:	da02      	bge.n	801c74c <json_serialize_string+0x288>
 801c746:	f04f 33ff 	mov.w	r3, #4294967295
 801c74a:	e347      	b.n	801cddc <json_serialize_string+0x918>
 801c74c:	683b      	ldr	r3, [r7, #0]
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d003      	beq.n	801c75a <json_serialize_string+0x296>
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	683a      	ldr	r2, [r7, #0]
 801c756:	4413      	add	r3, r2
 801c758:	603b      	str	r3, [r7, #0]
 801c75a:	69ba      	ldr	r2, [r7, #24]
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	4413      	add	r3, r2
 801c760:	61bb      	str	r3, [r7, #24]
 801c762:	e31c      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\f': APPEND_STRING("\\f"); break;
 801c764:	4921      	ldr	r1, [pc, #132]	; (801c7ec <json_serialize_string+0x328>)
 801c766:	6838      	ldr	r0, [r7, #0]
 801c768:	f000 fb74 	bl	801ce54 <append_string>
 801c76c:	60f8      	str	r0, [r7, #12]
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	2b00      	cmp	r3, #0
 801c772:	da02      	bge.n	801c77a <json_serialize_string+0x2b6>
 801c774:	f04f 33ff 	mov.w	r3, #4294967295
 801c778:	e330      	b.n	801cddc <json_serialize_string+0x918>
 801c77a:	683b      	ldr	r3, [r7, #0]
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d003      	beq.n	801c788 <json_serialize_string+0x2c4>
 801c780:	68fb      	ldr	r3, [r7, #12]
 801c782:	683a      	ldr	r2, [r7, #0]
 801c784:	4413      	add	r3, r2
 801c786:	603b      	str	r3, [r7, #0]
 801c788:	69ba      	ldr	r2, [r7, #24]
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	4413      	add	r3, r2
 801c78e:	61bb      	str	r3, [r7, #24]
 801c790:	e305      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\n': APPEND_STRING("\\n"); break;
 801c792:	4917      	ldr	r1, [pc, #92]	; (801c7f0 <json_serialize_string+0x32c>)
 801c794:	6838      	ldr	r0, [r7, #0]
 801c796:	f000 fb5d 	bl	801ce54 <append_string>
 801c79a:	60f8      	str	r0, [r7, #12]
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	da02      	bge.n	801c7a8 <json_serialize_string+0x2e4>
 801c7a2:	f04f 33ff 	mov.w	r3, #4294967295
 801c7a6:	e319      	b.n	801cddc <json_serialize_string+0x918>
 801c7a8:	683b      	ldr	r3, [r7, #0]
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	d003      	beq.n	801c7b6 <json_serialize_string+0x2f2>
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	683a      	ldr	r2, [r7, #0]
 801c7b2:	4413      	add	r3, r2
 801c7b4:	603b      	str	r3, [r7, #0]
 801c7b6:	69ba      	ldr	r2, [r7, #24]
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	4413      	add	r3, r2
 801c7bc:	61bb      	str	r3, [r7, #24]
 801c7be:	e2ee      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\r': APPEND_STRING("\\r"); break;
 801c7c0:	490c      	ldr	r1, [pc, #48]	; (801c7f4 <json_serialize_string+0x330>)
 801c7c2:	6838      	ldr	r0, [r7, #0]
 801c7c4:	f000 fb46 	bl	801ce54 <append_string>
 801c7c8:	60f8      	str	r0, [r7, #12]
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	da13      	bge.n	801c7f8 <json_serialize_string+0x334>
 801c7d0:	f04f 33ff 	mov.w	r3, #4294967295
 801c7d4:	e302      	b.n	801cddc <json_serialize_string+0x918>
 801c7d6:	bf00      	nop
 801c7d8:	0802280c 	.word	0x0802280c
 801c7dc:	08022810 	.word	0x08022810
 801c7e0:	08022814 	.word	0x08022814
 801c7e4:	08022818 	.word	0x08022818
 801c7e8:	0802281c 	.word	0x0802281c
 801c7ec:	08022820 	.word	0x08022820
 801c7f0:	08022824 	.word	0x08022824
 801c7f4:	08022828 	.word	0x08022828
 801c7f8:	683b      	ldr	r3, [r7, #0]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d003      	beq.n	801c806 <json_serialize_string+0x342>
 801c7fe:	68fb      	ldr	r3, [r7, #12]
 801c800:	683a      	ldr	r2, [r7, #0]
 801c802:	4413      	add	r3, r2
 801c804:	603b      	str	r3, [r7, #0]
 801c806:	69ba      	ldr	r2, [r7, #24]
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	4413      	add	r3, r2
 801c80c:	61bb      	str	r3, [r7, #24]
 801c80e:	e2c6      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\t': APPEND_STRING("\\t"); break;
 801c810:	498f      	ldr	r1, [pc, #572]	; (801ca50 <json_serialize_string+0x58c>)
 801c812:	6838      	ldr	r0, [r7, #0]
 801c814:	f000 fb1e 	bl	801ce54 <append_string>
 801c818:	60f8      	str	r0, [r7, #12]
 801c81a:	68fb      	ldr	r3, [r7, #12]
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	da02      	bge.n	801c826 <json_serialize_string+0x362>
 801c820:	f04f 33ff 	mov.w	r3, #4294967295
 801c824:	e2da      	b.n	801cddc <json_serialize_string+0x918>
 801c826:	683b      	ldr	r3, [r7, #0]
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d003      	beq.n	801c834 <json_serialize_string+0x370>
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	683a      	ldr	r2, [r7, #0]
 801c830:	4413      	add	r3, r2
 801c832:	603b      	str	r3, [r7, #0]
 801c834:	69ba      	ldr	r2, [r7, #24]
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	4413      	add	r3, r2
 801c83a:	61bb      	str	r3, [r7, #24]
 801c83c:	e2af      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x00': APPEND_STRING("\\u0000"); break;
 801c83e:	4985      	ldr	r1, [pc, #532]	; (801ca54 <json_serialize_string+0x590>)
 801c840:	6838      	ldr	r0, [r7, #0]
 801c842:	f000 fb07 	bl	801ce54 <append_string>
 801c846:	60f8      	str	r0, [r7, #12]
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	da02      	bge.n	801c854 <json_serialize_string+0x390>
 801c84e:	f04f 33ff 	mov.w	r3, #4294967295
 801c852:	e2c3      	b.n	801cddc <json_serialize_string+0x918>
 801c854:	683b      	ldr	r3, [r7, #0]
 801c856:	2b00      	cmp	r3, #0
 801c858:	d003      	beq.n	801c862 <json_serialize_string+0x39e>
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	683a      	ldr	r2, [r7, #0]
 801c85e:	4413      	add	r3, r2
 801c860:	603b      	str	r3, [r7, #0]
 801c862:	69ba      	ldr	r2, [r7, #24]
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	4413      	add	r3, r2
 801c868:	61bb      	str	r3, [r7, #24]
 801c86a:	e298      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x01': APPEND_STRING("\\u0001"); break;
 801c86c:	497a      	ldr	r1, [pc, #488]	; (801ca58 <json_serialize_string+0x594>)
 801c86e:	6838      	ldr	r0, [r7, #0]
 801c870:	f000 faf0 	bl	801ce54 <append_string>
 801c874:	60f8      	str	r0, [r7, #12]
 801c876:	68fb      	ldr	r3, [r7, #12]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	da02      	bge.n	801c882 <json_serialize_string+0x3be>
 801c87c:	f04f 33ff 	mov.w	r3, #4294967295
 801c880:	e2ac      	b.n	801cddc <json_serialize_string+0x918>
 801c882:	683b      	ldr	r3, [r7, #0]
 801c884:	2b00      	cmp	r3, #0
 801c886:	d003      	beq.n	801c890 <json_serialize_string+0x3cc>
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	683a      	ldr	r2, [r7, #0]
 801c88c:	4413      	add	r3, r2
 801c88e:	603b      	str	r3, [r7, #0]
 801c890:	69ba      	ldr	r2, [r7, #24]
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	4413      	add	r3, r2
 801c896:	61bb      	str	r3, [r7, #24]
 801c898:	e281      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x02': APPEND_STRING("\\u0002"); break;
 801c89a:	4970      	ldr	r1, [pc, #448]	; (801ca5c <json_serialize_string+0x598>)
 801c89c:	6838      	ldr	r0, [r7, #0]
 801c89e:	f000 fad9 	bl	801ce54 <append_string>
 801c8a2:	60f8      	str	r0, [r7, #12]
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	da02      	bge.n	801c8b0 <json_serialize_string+0x3ec>
 801c8aa:	f04f 33ff 	mov.w	r3, #4294967295
 801c8ae:	e295      	b.n	801cddc <json_serialize_string+0x918>
 801c8b0:	683b      	ldr	r3, [r7, #0]
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	d003      	beq.n	801c8be <json_serialize_string+0x3fa>
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	683a      	ldr	r2, [r7, #0]
 801c8ba:	4413      	add	r3, r2
 801c8bc:	603b      	str	r3, [r7, #0]
 801c8be:	69ba      	ldr	r2, [r7, #24]
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	4413      	add	r3, r2
 801c8c4:	61bb      	str	r3, [r7, #24]
 801c8c6:	e26a      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x03': APPEND_STRING("\\u0003"); break;
 801c8c8:	4965      	ldr	r1, [pc, #404]	; (801ca60 <json_serialize_string+0x59c>)
 801c8ca:	6838      	ldr	r0, [r7, #0]
 801c8cc:	f000 fac2 	bl	801ce54 <append_string>
 801c8d0:	60f8      	str	r0, [r7, #12]
 801c8d2:	68fb      	ldr	r3, [r7, #12]
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	da02      	bge.n	801c8de <json_serialize_string+0x41a>
 801c8d8:	f04f 33ff 	mov.w	r3, #4294967295
 801c8dc:	e27e      	b.n	801cddc <json_serialize_string+0x918>
 801c8de:	683b      	ldr	r3, [r7, #0]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d003      	beq.n	801c8ec <json_serialize_string+0x428>
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	683a      	ldr	r2, [r7, #0]
 801c8e8:	4413      	add	r3, r2
 801c8ea:	603b      	str	r3, [r7, #0]
 801c8ec:	69ba      	ldr	r2, [r7, #24]
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	4413      	add	r3, r2
 801c8f2:	61bb      	str	r3, [r7, #24]
 801c8f4:	e253      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x04': APPEND_STRING("\\u0004"); break;
 801c8f6:	495b      	ldr	r1, [pc, #364]	; (801ca64 <json_serialize_string+0x5a0>)
 801c8f8:	6838      	ldr	r0, [r7, #0]
 801c8fa:	f000 faab 	bl	801ce54 <append_string>
 801c8fe:	60f8      	str	r0, [r7, #12]
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	2b00      	cmp	r3, #0
 801c904:	da02      	bge.n	801c90c <json_serialize_string+0x448>
 801c906:	f04f 33ff 	mov.w	r3, #4294967295
 801c90a:	e267      	b.n	801cddc <json_serialize_string+0x918>
 801c90c:	683b      	ldr	r3, [r7, #0]
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d003      	beq.n	801c91a <json_serialize_string+0x456>
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	683a      	ldr	r2, [r7, #0]
 801c916:	4413      	add	r3, r2
 801c918:	603b      	str	r3, [r7, #0]
 801c91a:	69ba      	ldr	r2, [r7, #24]
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	4413      	add	r3, r2
 801c920:	61bb      	str	r3, [r7, #24]
 801c922:	e23c      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x05': APPEND_STRING("\\u0005"); break;
 801c924:	4950      	ldr	r1, [pc, #320]	; (801ca68 <json_serialize_string+0x5a4>)
 801c926:	6838      	ldr	r0, [r7, #0]
 801c928:	f000 fa94 	bl	801ce54 <append_string>
 801c92c:	60f8      	str	r0, [r7, #12]
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	2b00      	cmp	r3, #0
 801c932:	da02      	bge.n	801c93a <json_serialize_string+0x476>
 801c934:	f04f 33ff 	mov.w	r3, #4294967295
 801c938:	e250      	b.n	801cddc <json_serialize_string+0x918>
 801c93a:	683b      	ldr	r3, [r7, #0]
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d003      	beq.n	801c948 <json_serialize_string+0x484>
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	683a      	ldr	r2, [r7, #0]
 801c944:	4413      	add	r3, r2
 801c946:	603b      	str	r3, [r7, #0]
 801c948:	69ba      	ldr	r2, [r7, #24]
 801c94a:	68fb      	ldr	r3, [r7, #12]
 801c94c:	4413      	add	r3, r2
 801c94e:	61bb      	str	r3, [r7, #24]
 801c950:	e225      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x06': APPEND_STRING("\\u0006"); break;
 801c952:	4946      	ldr	r1, [pc, #280]	; (801ca6c <json_serialize_string+0x5a8>)
 801c954:	6838      	ldr	r0, [r7, #0]
 801c956:	f000 fa7d 	bl	801ce54 <append_string>
 801c95a:	60f8      	str	r0, [r7, #12]
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	2b00      	cmp	r3, #0
 801c960:	da02      	bge.n	801c968 <json_serialize_string+0x4a4>
 801c962:	f04f 33ff 	mov.w	r3, #4294967295
 801c966:	e239      	b.n	801cddc <json_serialize_string+0x918>
 801c968:	683b      	ldr	r3, [r7, #0]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d003      	beq.n	801c976 <json_serialize_string+0x4b2>
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	683a      	ldr	r2, [r7, #0]
 801c972:	4413      	add	r3, r2
 801c974:	603b      	str	r3, [r7, #0]
 801c976:	69ba      	ldr	r2, [r7, #24]
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	4413      	add	r3, r2
 801c97c:	61bb      	str	r3, [r7, #24]
 801c97e:	e20e      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x07': APPEND_STRING("\\u0007"); break;
 801c980:	493b      	ldr	r1, [pc, #236]	; (801ca70 <json_serialize_string+0x5ac>)
 801c982:	6838      	ldr	r0, [r7, #0]
 801c984:	f000 fa66 	bl	801ce54 <append_string>
 801c988:	60f8      	str	r0, [r7, #12]
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	da02      	bge.n	801c996 <json_serialize_string+0x4d2>
 801c990:	f04f 33ff 	mov.w	r3, #4294967295
 801c994:	e222      	b.n	801cddc <json_serialize_string+0x918>
 801c996:	683b      	ldr	r3, [r7, #0]
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d003      	beq.n	801c9a4 <json_serialize_string+0x4e0>
 801c99c:	68fb      	ldr	r3, [r7, #12]
 801c99e:	683a      	ldr	r2, [r7, #0]
 801c9a0:	4413      	add	r3, r2
 801c9a2:	603b      	str	r3, [r7, #0]
 801c9a4:	69ba      	ldr	r2, [r7, #24]
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	4413      	add	r3, r2
 801c9aa:	61bb      	str	r3, [r7, #24]
 801c9ac:	e1f7      	b.n	801cd9e <json_serialize_string+0x8da>
            /* '\x08' duplicate: '\b' */
            /* '\x09' duplicate: '\t' */
            /* '\x0a' duplicate: '\n' */
            case '\x0b': APPEND_STRING("\\u000b"); break;
 801c9ae:	4931      	ldr	r1, [pc, #196]	; (801ca74 <json_serialize_string+0x5b0>)
 801c9b0:	6838      	ldr	r0, [r7, #0]
 801c9b2:	f000 fa4f 	bl	801ce54 <append_string>
 801c9b6:	60f8      	str	r0, [r7, #12]
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	da02      	bge.n	801c9c4 <json_serialize_string+0x500>
 801c9be:	f04f 33ff 	mov.w	r3, #4294967295
 801c9c2:	e20b      	b.n	801cddc <json_serialize_string+0x918>
 801c9c4:	683b      	ldr	r3, [r7, #0]
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d003      	beq.n	801c9d2 <json_serialize_string+0x50e>
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	683a      	ldr	r2, [r7, #0]
 801c9ce:	4413      	add	r3, r2
 801c9d0:	603b      	str	r3, [r7, #0]
 801c9d2:	69ba      	ldr	r2, [r7, #24]
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	4413      	add	r3, r2
 801c9d8:	61bb      	str	r3, [r7, #24]
 801c9da:	e1e0      	b.n	801cd9e <json_serialize_string+0x8da>
            /* '\x0c' duplicate: '\f' */
            /* '\x0d' duplicate: '\r' */
            case '\x0e': APPEND_STRING("\\u000e"); break;
 801c9dc:	4926      	ldr	r1, [pc, #152]	; (801ca78 <json_serialize_string+0x5b4>)
 801c9de:	6838      	ldr	r0, [r7, #0]
 801c9e0:	f000 fa38 	bl	801ce54 <append_string>
 801c9e4:	60f8      	str	r0, [r7, #12]
 801c9e6:	68fb      	ldr	r3, [r7, #12]
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	da02      	bge.n	801c9f2 <json_serialize_string+0x52e>
 801c9ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c9f0:	e1f4      	b.n	801cddc <json_serialize_string+0x918>
 801c9f2:	683b      	ldr	r3, [r7, #0]
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d003      	beq.n	801ca00 <json_serialize_string+0x53c>
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	683a      	ldr	r2, [r7, #0]
 801c9fc:	4413      	add	r3, r2
 801c9fe:	603b      	str	r3, [r7, #0]
 801ca00:	69ba      	ldr	r2, [r7, #24]
 801ca02:	68fb      	ldr	r3, [r7, #12]
 801ca04:	4413      	add	r3, r2
 801ca06:	61bb      	str	r3, [r7, #24]
 801ca08:	e1c9      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x0f': APPEND_STRING("\\u000f"); break;
 801ca0a:	491c      	ldr	r1, [pc, #112]	; (801ca7c <json_serialize_string+0x5b8>)
 801ca0c:	6838      	ldr	r0, [r7, #0]
 801ca0e:	f000 fa21 	bl	801ce54 <append_string>
 801ca12:	60f8      	str	r0, [r7, #12]
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	da02      	bge.n	801ca20 <json_serialize_string+0x55c>
 801ca1a:	f04f 33ff 	mov.w	r3, #4294967295
 801ca1e:	e1dd      	b.n	801cddc <json_serialize_string+0x918>
 801ca20:	683b      	ldr	r3, [r7, #0]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d003      	beq.n	801ca2e <json_serialize_string+0x56a>
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	683a      	ldr	r2, [r7, #0]
 801ca2a:	4413      	add	r3, r2
 801ca2c:	603b      	str	r3, [r7, #0]
 801ca2e:	69ba      	ldr	r2, [r7, #24]
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	4413      	add	r3, r2
 801ca34:	61bb      	str	r3, [r7, #24]
 801ca36:	e1b2      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x10': APPEND_STRING("\\u0010"); break;
 801ca38:	4911      	ldr	r1, [pc, #68]	; (801ca80 <json_serialize_string+0x5bc>)
 801ca3a:	6838      	ldr	r0, [r7, #0]
 801ca3c:	f000 fa0a 	bl	801ce54 <append_string>
 801ca40:	60f8      	str	r0, [r7, #12]
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	da1d      	bge.n	801ca84 <json_serialize_string+0x5c0>
 801ca48:	f04f 33ff 	mov.w	r3, #4294967295
 801ca4c:	e1c6      	b.n	801cddc <json_serialize_string+0x918>
 801ca4e:	bf00      	nop
 801ca50:	0802282c 	.word	0x0802282c
 801ca54:	08022830 	.word	0x08022830
 801ca58:	08022838 	.word	0x08022838
 801ca5c:	08022840 	.word	0x08022840
 801ca60:	08022848 	.word	0x08022848
 801ca64:	08022850 	.word	0x08022850
 801ca68:	08022858 	.word	0x08022858
 801ca6c:	08022860 	.word	0x08022860
 801ca70:	08022868 	.word	0x08022868
 801ca74:	08022870 	.word	0x08022870
 801ca78:	08022878 	.word	0x08022878
 801ca7c:	08022880 	.word	0x08022880
 801ca80:	08022888 	.word	0x08022888
 801ca84:	683b      	ldr	r3, [r7, #0]
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d003      	beq.n	801ca92 <json_serialize_string+0x5ce>
 801ca8a:	68fb      	ldr	r3, [r7, #12]
 801ca8c:	683a      	ldr	r2, [r7, #0]
 801ca8e:	4413      	add	r3, r2
 801ca90:	603b      	str	r3, [r7, #0]
 801ca92:	69ba      	ldr	r2, [r7, #24]
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	4413      	add	r3, r2
 801ca98:	61bb      	str	r3, [r7, #24]
 801ca9a:	e180      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x11': APPEND_STRING("\\u0011"); break;
 801ca9c:	498f      	ldr	r1, [pc, #572]	; (801ccdc <json_serialize_string+0x818>)
 801ca9e:	6838      	ldr	r0, [r7, #0]
 801caa0:	f000 f9d8 	bl	801ce54 <append_string>
 801caa4:	60f8      	str	r0, [r7, #12]
 801caa6:	68fb      	ldr	r3, [r7, #12]
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	da02      	bge.n	801cab2 <json_serialize_string+0x5ee>
 801caac:	f04f 33ff 	mov.w	r3, #4294967295
 801cab0:	e194      	b.n	801cddc <json_serialize_string+0x918>
 801cab2:	683b      	ldr	r3, [r7, #0]
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d003      	beq.n	801cac0 <json_serialize_string+0x5fc>
 801cab8:	68fb      	ldr	r3, [r7, #12]
 801caba:	683a      	ldr	r2, [r7, #0]
 801cabc:	4413      	add	r3, r2
 801cabe:	603b      	str	r3, [r7, #0]
 801cac0:	69ba      	ldr	r2, [r7, #24]
 801cac2:	68fb      	ldr	r3, [r7, #12]
 801cac4:	4413      	add	r3, r2
 801cac6:	61bb      	str	r3, [r7, #24]
 801cac8:	e169      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x12': APPEND_STRING("\\u0012"); break;
 801caca:	4985      	ldr	r1, [pc, #532]	; (801cce0 <json_serialize_string+0x81c>)
 801cacc:	6838      	ldr	r0, [r7, #0]
 801cace:	f000 f9c1 	bl	801ce54 <append_string>
 801cad2:	60f8      	str	r0, [r7, #12]
 801cad4:	68fb      	ldr	r3, [r7, #12]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	da02      	bge.n	801cae0 <json_serialize_string+0x61c>
 801cada:	f04f 33ff 	mov.w	r3, #4294967295
 801cade:	e17d      	b.n	801cddc <json_serialize_string+0x918>
 801cae0:	683b      	ldr	r3, [r7, #0]
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	d003      	beq.n	801caee <json_serialize_string+0x62a>
 801cae6:	68fb      	ldr	r3, [r7, #12]
 801cae8:	683a      	ldr	r2, [r7, #0]
 801caea:	4413      	add	r3, r2
 801caec:	603b      	str	r3, [r7, #0]
 801caee:	69ba      	ldr	r2, [r7, #24]
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	4413      	add	r3, r2
 801caf4:	61bb      	str	r3, [r7, #24]
 801caf6:	e152      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x13': APPEND_STRING("\\u0013"); break;
 801caf8:	497a      	ldr	r1, [pc, #488]	; (801cce4 <json_serialize_string+0x820>)
 801cafa:	6838      	ldr	r0, [r7, #0]
 801cafc:	f000 f9aa 	bl	801ce54 <append_string>
 801cb00:	60f8      	str	r0, [r7, #12]
 801cb02:	68fb      	ldr	r3, [r7, #12]
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	da02      	bge.n	801cb0e <json_serialize_string+0x64a>
 801cb08:	f04f 33ff 	mov.w	r3, #4294967295
 801cb0c:	e166      	b.n	801cddc <json_serialize_string+0x918>
 801cb0e:	683b      	ldr	r3, [r7, #0]
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	d003      	beq.n	801cb1c <json_serialize_string+0x658>
 801cb14:	68fb      	ldr	r3, [r7, #12]
 801cb16:	683a      	ldr	r2, [r7, #0]
 801cb18:	4413      	add	r3, r2
 801cb1a:	603b      	str	r3, [r7, #0]
 801cb1c:	69ba      	ldr	r2, [r7, #24]
 801cb1e:	68fb      	ldr	r3, [r7, #12]
 801cb20:	4413      	add	r3, r2
 801cb22:	61bb      	str	r3, [r7, #24]
 801cb24:	e13b      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x14': APPEND_STRING("\\u0014"); break;
 801cb26:	4970      	ldr	r1, [pc, #448]	; (801cce8 <json_serialize_string+0x824>)
 801cb28:	6838      	ldr	r0, [r7, #0]
 801cb2a:	f000 f993 	bl	801ce54 <append_string>
 801cb2e:	60f8      	str	r0, [r7, #12]
 801cb30:	68fb      	ldr	r3, [r7, #12]
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	da02      	bge.n	801cb3c <json_serialize_string+0x678>
 801cb36:	f04f 33ff 	mov.w	r3, #4294967295
 801cb3a:	e14f      	b.n	801cddc <json_serialize_string+0x918>
 801cb3c:	683b      	ldr	r3, [r7, #0]
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d003      	beq.n	801cb4a <json_serialize_string+0x686>
 801cb42:	68fb      	ldr	r3, [r7, #12]
 801cb44:	683a      	ldr	r2, [r7, #0]
 801cb46:	4413      	add	r3, r2
 801cb48:	603b      	str	r3, [r7, #0]
 801cb4a:	69ba      	ldr	r2, [r7, #24]
 801cb4c:	68fb      	ldr	r3, [r7, #12]
 801cb4e:	4413      	add	r3, r2
 801cb50:	61bb      	str	r3, [r7, #24]
 801cb52:	e124      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x15': APPEND_STRING("\\u0015"); break;
 801cb54:	4965      	ldr	r1, [pc, #404]	; (801ccec <json_serialize_string+0x828>)
 801cb56:	6838      	ldr	r0, [r7, #0]
 801cb58:	f000 f97c 	bl	801ce54 <append_string>
 801cb5c:	60f8      	str	r0, [r7, #12]
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	da02      	bge.n	801cb6a <json_serialize_string+0x6a6>
 801cb64:	f04f 33ff 	mov.w	r3, #4294967295
 801cb68:	e138      	b.n	801cddc <json_serialize_string+0x918>
 801cb6a:	683b      	ldr	r3, [r7, #0]
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d003      	beq.n	801cb78 <json_serialize_string+0x6b4>
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	683a      	ldr	r2, [r7, #0]
 801cb74:	4413      	add	r3, r2
 801cb76:	603b      	str	r3, [r7, #0]
 801cb78:	69ba      	ldr	r2, [r7, #24]
 801cb7a:	68fb      	ldr	r3, [r7, #12]
 801cb7c:	4413      	add	r3, r2
 801cb7e:	61bb      	str	r3, [r7, #24]
 801cb80:	e10d      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x16': APPEND_STRING("\\u0016"); break;
 801cb82:	495b      	ldr	r1, [pc, #364]	; (801ccf0 <json_serialize_string+0x82c>)
 801cb84:	6838      	ldr	r0, [r7, #0]
 801cb86:	f000 f965 	bl	801ce54 <append_string>
 801cb8a:	60f8      	str	r0, [r7, #12]
 801cb8c:	68fb      	ldr	r3, [r7, #12]
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	da02      	bge.n	801cb98 <json_serialize_string+0x6d4>
 801cb92:	f04f 33ff 	mov.w	r3, #4294967295
 801cb96:	e121      	b.n	801cddc <json_serialize_string+0x918>
 801cb98:	683b      	ldr	r3, [r7, #0]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d003      	beq.n	801cba6 <json_serialize_string+0x6e2>
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	683a      	ldr	r2, [r7, #0]
 801cba2:	4413      	add	r3, r2
 801cba4:	603b      	str	r3, [r7, #0]
 801cba6:	69ba      	ldr	r2, [r7, #24]
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	4413      	add	r3, r2
 801cbac:	61bb      	str	r3, [r7, #24]
 801cbae:	e0f6      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x17': APPEND_STRING("\\u0017"); break;
 801cbb0:	4950      	ldr	r1, [pc, #320]	; (801ccf4 <json_serialize_string+0x830>)
 801cbb2:	6838      	ldr	r0, [r7, #0]
 801cbb4:	f000 f94e 	bl	801ce54 <append_string>
 801cbb8:	60f8      	str	r0, [r7, #12]
 801cbba:	68fb      	ldr	r3, [r7, #12]
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	da02      	bge.n	801cbc6 <json_serialize_string+0x702>
 801cbc0:	f04f 33ff 	mov.w	r3, #4294967295
 801cbc4:	e10a      	b.n	801cddc <json_serialize_string+0x918>
 801cbc6:	683b      	ldr	r3, [r7, #0]
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	d003      	beq.n	801cbd4 <json_serialize_string+0x710>
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	683a      	ldr	r2, [r7, #0]
 801cbd0:	4413      	add	r3, r2
 801cbd2:	603b      	str	r3, [r7, #0]
 801cbd4:	69ba      	ldr	r2, [r7, #24]
 801cbd6:	68fb      	ldr	r3, [r7, #12]
 801cbd8:	4413      	add	r3, r2
 801cbda:	61bb      	str	r3, [r7, #24]
 801cbdc:	e0df      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x18': APPEND_STRING("\\u0018"); break;
 801cbde:	4946      	ldr	r1, [pc, #280]	; (801ccf8 <json_serialize_string+0x834>)
 801cbe0:	6838      	ldr	r0, [r7, #0]
 801cbe2:	f000 f937 	bl	801ce54 <append_string>
 801cbe6:	60f8      	str	r0, [r7, #12]
 801cbe8:	68fb      	ldr	r3, [r7, #12]
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	da02      	bge.n	801cbf4 <json_serialize_string+0x730>
 801cbee:	f04f 33ff 	mov.w	r3, #4294967295
 801cbf2:	e0f3      	b.n	801cddc <json_serialize_string+0x918>
 801cbf4:	683b      	ldr	r3, [r7, #0]
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d003      	beq.n	801cc02 <json_serialize_string+0x73e>
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	683a      	ldr	r2, [r7, #0]
 801cbfe:	4413      	add	r3, r2
 801cc00:	603b      	str	r3, [r7, #0]
 801cc02:	69ba      	ldr	r2, [r7, #24]
 801cc04:	68fb      	ldr	r3, [r7, #12]
 801cc06:	4413      	add	r3, r2
 801cc08:	61bb      	str	r3, [r7, #24]
 801cc0a:	e0c8      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x19': APPEND_STRING("\\u0019"); break;
 801cc0c:	493b      	ldr	r1, [pc, #236]	; (801ccfc <json_serialize_string+0x838>)
 801cc0e:	6838      	ldr	r0, [r7, #0]
 801cc10:	f000 f920 	bl	801ce54 <append_string>
 801cc14:	60f8      	str	r0, [r7, #12]
 801cc16:	68fb      	ldr	r3, [r7, #12]
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	da02      	bge.n	801cc22 <json_serialize_string+0x75e>
 801cc1c:	f04f 33ff 	mov.w	r3, #4294967295
 801cc20:	e0dc      	b.n	801cddc <json_serialize_string+0x918>
 801cc22:	683b      	ldr	r3, [r7, #0]
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d003      	beq.n	801cc30 <json_serialize_string+0x76c>
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	683a      	ldr	r2, [r7, #0]
 801cc2c:	4413      	add	r3, r2
 801cc2e:	603b      	str	r3, [r7, #0]
 801cc30:	69ba      	ldr	r2, [r7, #24]
 801cc32:	68fb      	ldr	r3, [r7, #12]
 801cc34:	4413      	add	r3, r2
 801cc36:	61bb      	str	r3, [r7, #24]
 801cc38:	e0b1      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x1a': APPEND_STRING("\\u001a"); break;
 801cc3a:	4931      	ldr	r1, [pc, #196]	; (801cd00 <json_serialize_string+0x83c>)
 801cc3c:	6838      	ldr	r0, [r7, #0]
 801cc3e:	f000 f909 	bl	801ce54 <append_string>
 801cc42:	60f8      	str	r0, [r7, #12]
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	da02      	bge.n	801cc50 <json_serialize_string+0x78c>
 801cc4a:	f04f 33ff 	mov.w	r3, #4294967295
 801cc4e:	e0c5      	b.n	801cddc <json_serialize_string+0x918>
 801cc50:	683b      	ldr	r3, [r7, #0]
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d003      	beq.n	801cc5e <json_serialize_string+0x79a>
 801cc56:	68fb      	ldr	r3, [r7, #12]
 801cc58:	683a      	ldr	r2, [r7, #0]
 801cc5a:	4413      	add	r3, r2
 801cc5c:	603b      	str	r3, [r7, #0]
 801cc5e:	69ba      	ldr	r2, [r7, #24]
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	4413      	add	r3, r2
 801cc64:	61bb      	str	r3, [r7, #24]
 801cc66:	e09a      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x1b': APPEND_STRING("\\u001b"); break;
 801cc68:	4926      	ldr	r1, [pc, #152]	; (801cd04 <json_serialize_string+0x840>)
 801cc6a:	6838      	ldr	r0, [r7, #0]
 801cc6c:	f000 f8f2 	bl	801ce54 <append_string>
 801cc70:	60f8      	str	r0, [r7, #12]
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	da02      	bge.n	801cc7e <json_serialize_string+0x7ba>
 801cc78:	f04f 33ff 	mov.w	r3, #4294967295
 801cc7c:	e0ae      	b.n	801cddc <json_serialize_string+0x918>
 801cc7e:	683b      	ldr	r3, [r7, #0]
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d003      	beq.n	801cc8c <json_serialize_string+0x7c8>
 801cc84:	68fb      	ldr	r3, [r7, #12]
 801cc86:	683a      	ldr	r2, [r7, #0]
 801cc88:	4413      	add	r3, r2
 801cc8a:	603b      	str	r3, [r7, #0]
 801cc8c:	69ba      	ldr	r2, [r7, #24]
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	4413      	add	r3, r2
 801cc92:	61bb      	str	r3, [r7, #24]
 801cc94:	e083      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x1c': APPEND_STRING("\\u001c"); break;
 801cc96:	491c      	ldr	r1, [pc, #112]	; (801cd08 <json_serialize_string+0x844>)
 801cc98:	6838      	ldr	r0, [r7, #0]
 801cc9a:	f000 f8db 	bl	801ce54 <append_string>
 801cc9e:	60f8      	str	r0, [r7, #12]
 801cca0:	68fb      	ldr	r3, [r7, #12]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	da02      	bge.n	801ccac <json_serialize_string+0x7e8>
 801cca6:	f04f 33ff 	mov.w	r3, #4294967295
 801ccaa:	e097      	b.n	801cddc <json_serialize_string+0x918>
 801ccac:	683b      	ldr	r3, [r7, #0]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d003      	beq.n	801ccba <json_serialize_string+0x7f6>
 801ccb2:	68fb      	ldr	r3, [r7, #12]
 801ccb4:	683a      	ldr	r2, [r7, #0]
 801ccb6:	4413      	add	r3, r2
 801ccb8:	603b      	str	r3, [r7, #0]
 801ccba:	69ba      	ldr	r2, [r7, #24]
 801ccbc:	68fb      	ldr	r3, [r7, #12]
 801ccbe:	4413      	add	r3, r2
 801ccc0:	61bb      	str	r3, [r7, #24]
 801ccc2:	e06c      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x1d': APPEND_STRING("\\u001d"); break;
 801ccc4:	4911      	ldr	r1, [pc, #68]	; (801cd0c <json_serialize_string+0x848>)
 801ccc6:	6838      	ldr	r0, [r7, #0]
 801ccc8:	f000 f8c4 	bl	801ce54 <append_string>
 801cccc:	60f8      	str	r0, [r7, #12]
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	da1d      	bge.n	801cd10 <json_serialize_string+0x84c>
 801ccd4:	f04f 33ff 	mov.w	r3, #4294967295
 801ccd8:	e080      	b.n	801cddc <json_serialize_string+0x918>
 801ccda:	bf00      	nop
 801ccdc:	08022890 	.word	0x08022890
 801cce0:	08022898 	.word	0x08022898
 801cce4:	080228a0 	.word	0x080228a0
 801cce8:	080228a8 	.word	0x080228a8
 801ccec:	080228b0 	.word	0x080228b0
 801ccf0:	080228b8 	.word	0x080228b8
 801ccf4:	080228c0 	.word	0x080228c0
 801ccf8:	080228c8 	.word	0x080228c8
 801ccfc:	080228d0 	.word	0x080228d0
 801cd00:	080228d8 	.word	0x080228d8
 801cd04:	080228e0 	.word	0x080228e0
 801cd08:	080228e8 	.word	0x080228e8
 801cd0c:	080228f0 	.word	0x080228f0
 801cd10:	683b      	ldr	r3, [r7, #0]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d003      	beq.n	801cd1e <json_serialize_string+0x85a>
 801cd16:	68fb      	ldr	r3, [r7, #12]
 801cd18:	683a      	ldr	r2, [r7, #0]
 801cd1a:	4413      	add	r3, r2
 801cd1c:	603b      	str	r3, [r7, #0]
 801cd1e:	69ba      	ldr	r2, [r7, #24]
 801cd20:	68fb      	ldr	r3, [r7, #12]
 801cd22:	4413      	add	r3, r2
 801cd24:	61bb      	str	r3, [r7, #24]
 801cd26:	e03a      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x1e': APPEND_STRING("\\u001e"); break;
 801cd28:	492e      	ldr	r1, [pc, #184]	; (801cde4 <json_serialize_string+0x920>)
 801cd2a:	6838      	ldr	r0, [r7, #0]
 801cd2c:	f000 f892 	bl	801ce54 <append_string>
 801cd30:	60f8      	str	r0, [r7, #12]
 801cd32:	68fb      	ldr	r3, [r7, #12]
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	da02      	bge.n	801cd3e <json_serialize_string+0x87a>
 801cd38:	f04f 33ff 	mov.w	r3, #4294967295
 801cd3c:	e04e      	b.n	801cddc <json_serialize_string+0x918>
 801cd3e:	683b      	ldr	r3, [r7, #0]
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	d003      	beq.n	801cd4c <json_serialize_string+0x888>
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	683a      	ldr	r2, [r7, #0]
 801cd48:	4413      	add	r3, r2
 801cd4a:	603b      	str	r3, [r7, #0]
 801cd4c:	69ba      	ldr	r2, [r7, #24]
 801cd4e:	68fb      	ldr	r3, [r7, #12]
 801cd50:	4413      	add	r3, r2
 801cd52:	61bb      	str	r3, [r7, #24]
 801cd54:	e023      	b.n	801cd9e <json_serialize_string+0x8da>
            case '\x1f': APPEND_STRING("\\u001f"); break;
 801cd56:	4924      	ldr	r1, [pc, #144]	; (801cde8 <json_serialize_string+0x924>)
 801cd58:	6838      	ldr	r0, [r7, #0]
 801cd5a:	f000 f87b 	bl	801ce54 <append_string>
 801cd5e:	60f8      	str	r0, [r7, #12]
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	da02      	bge.n	801cd6c <json_serialize_string+0x8a8>
 801cd66:	f04f 33ff 	mov.w	r3, #4294967295
 801cd6a:	e037      	b.n	801cddc <json_serialize_string+0x918>
 801cd6c:	683b      	ldr	r3, [r7, #0]
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d003      	beq.n	801cd7a <json_serialize_string+0x8b6>
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	683a      	ldr	r2, [r7, #0]
 801cd76:	4413      	add	r3, r2
 801cd78:	603b      	str	r3, [r7, #0]
 801cd7a:	69ba      	ldr	r2, [r7, #24]
 801cd7c:	68fb      	ldr	r3, [r7, #12]
 801cd7e:	4413      	add	r3, r2
 801cd80:	61bb      	str	r3, [r7, #24]
 801cd82:	e00c      	b.n	801cd9e <json_serialize_string+0x8da>
            default:
                if (buf != NULL) {
 801cd84:	683b      	ldr	r3, [r7, #0]
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d005      	beq.n	801cd96 <json_serialize_string+0x8d2>
                    buf[0] = c;
 801cd8a:	683b      	ldr	r3, [r7, #0]
 801cd8c:	7cfa      	ldrb	r2, [r7, #19]
 801cd8e:	701a      	strb	r2, [r3, #0]
                    buf += 1;
 801cd90:	683b      	ldr	r3, [r7, #0]
 801cd92:	3301      	adds	r3, #1
 801cd94:	603b      	str	r3, [r7, #0]
                }
                written_total += 1;
 801cd96:	69bb      	ldr	r3, [r7, #24]
 801cd98:	3301      	adds	r3, #1
 801cd9a:	61bb      	str	r3, [r7, #24]
                break;
 801cd9c:	bf00      	nop
    for (i = 0; i < len; i++) {
 801cd9e:	69fb      	ldr	r3, [r7, #28]
 801cda0:	3301      	adds	r3, #1
 801cda2:	61fb      	str	r3, [r7, #28]
 801cda4:	69fa      	ldr	r2, [r7, #28]
 801cda6:	697b      	ldr	r3, [r7, #20]
 801cda8:	429a      	cmp	r2, r3
 801cdaa:	f4ff abb8 	bcc.w	801c51e <json_serialize_string+0x5a>
        }
    }
    APPEND_STRING("\"");
 801cdae:	490f      	ldr	r1, [pc, #60]	; (801cdec <json_serialize_string+0x928>)
 801cdb0:	6838      	ldr	r0, [r7, #0]
 801cdb2:	f000 f84f 	bl	801ce54 <append_string>
 801cdb6:	60f8      	str	r0, [r7, #12]
 801cdb8:	68fb      	ldr	r3, [r7, #12]
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	da02      	bge.n	801cdc4 <json_serialize_string+0x900>
 801cdbe:	f04f 33ff 	mov.w	r3, #4294967295
 801cdc2:	e00b      	b.n	801cddc <json_serialize_string+0x918>
 801cdc4:	683b      	ldr	r3, [r7, #0]
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d003      	beq.n	801cdd2 <json_serialize_string+0x90e>
 801cdca:	68fb      	ldr	r3, [r7, #12]
 801cdcc:	683a      	ldr	r2, [r7, #0]
 801cdce:	4413      	add	r3, r2
 801cdd0:	603b      	str	r3, [r7, #0]
 801cdd2:	69ba      	ldr	r2, [r7, #24]
 801cdd4:	68fb      	ldr	r3, [r7, #12]
 801cdd6:	4413      	add	r3, r2
 801cdd8:	61bb      	str	r3, [r7, #24]
    return written_total;
 801cdda:	69bb      	ldr	r3, [r7, #24]
}
 801cddc:	4618      	mov	r0, r3
 801cdde:	3720      	adds	r7, #32
 801cde0:	46bd      	mov	sp, r7
 801cde2:	bd80      	pop	{r7, pc}
 801cde4:	080228f8 	.word	0x080228f8
 801cde8:	08022900 	.word	0x08022900
 801cdec:	0802280c 	.word	0x0802280c

0801cdf0 <append_indent>:

static int append_indent(char *buf, int level) {
 801cdf0:	b580      	push	{r7, lr}
 801cdf2:	b086      	sub	sp, #24
 801cdf4:	af00      	add	r7, sp, #0
 801cdf6:	6078      	str	r0, [r7, #4]
 801cdf8:	6039      	str	r1, [r7, #0]
    int i;
    int written = -1, written_total = 0;
 801cdfa:	f04f 33ff 	mov.w	r3, #4294967295
 801cdfe:	60fb      	str	r3, [r7, #12]
 801ce00:	2300      	movs	r3, #0
 801ce02:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801ce04:	2300      	movs	r3, #0
 801ce06:	617b      	str	r3, [r7, #20]
 801ce08:	e018      	b.n	801ce3c <append_indent+0x4c>
        APPEND_STRING("    ");
 801ce0a:	4911      	ldr	r1, [pc, #68]	; (801ce50 <append_indent+0x60>)
 801ce0c:	6878      	ldr	r0, [r7, #4]
 801ce0e:	f000 f821 	bl	801ce54 <append_string>
 801ce12:	60f8      	str	r0, [r7, #12]
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	da02      	bge.n	801ce20 <append_indent+0x30>
 801ce1a:	f04f 33ff 	mov.w	r3, #4294967295
 801ce1e:	e012      	b.n	801ce46 <append_indent+0x56>
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	2b00      	cmp	r3, #0
 801ce24:	d003      	beq.n	801ce2e <append_indent+0x3e>
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	687a      	ldr	r2, [r7, #4]
 801ce2a:	4413      	add	r3, r2
 801ce2c:	607b      	str	r3, [r7, #4]
 801ce2e:	693a      	ldr	r2, [r7, #16]
 801ce30:	68fb      	ldr	r3, [r7, #12]
 801ce32:	4413      	add	r3, r2
 801ce34:	613b      	str	r3, [r7, #16]
    for (i = 0; i < level; i++) {
 801ce36:	697b      	ldr	r3, [r7, #20]
 801ce38:	3301      	adds	r3, #1
 801ce3a:	617b      	str	r3, [r7, #20]
 801ce3c:	697a      	ldr	r2, [r7, #20]
 801ce3e:	683b      	ldr	r3, [r7, #0]
 801ce40:	429a      	cmp	r2, r3
 801ce42:	dbe2      	blt.n	801ce0a <append_indent+0x1a>
    }
    return written_total;
 801ce44:	693b      	ldr	r3, [r7, #16]
}
 801ce46:	4618      	mov	r0, r3
 801ce48:	3718      	adds	r7, #24
 801ce4a:	46bd      	mov	sp, r7
 801ce4c:	bd80      	pop	{r7, pc}
 801ce4e:	bf00      	nop
 801ce50:	08022908 	.word	0x08022908

0801ce54 <append_string>:

static int append_string(char *buf, const char *string) {
 801ce54:	b580      	push	{r7, lr}
 801ce56:	b082      	sub	sp, #8
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
 801ce5c:	6039      	str	r1, [r7, #0]
    if (buf == NULL) {
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d104      	bne.n	801ce6e <append_string+0x1a>
        return (int)strlen(string);
 801ce64:	6838      	ldr	r0, [r7, #0]
 801ce66:	f7e3 f9d5 	bl	8000214 <strlen>
 801ce6a:	4603      	mov	r3, r0
 801ce6c:	e005      	b.n	801ce7a <append_string+0x26>
    }
    return sprintf(buf, "%s", string);
 801ce6e:	683a      	ldr	r2, [r7, #0]
 801ce70:	4904      	ldr	r1, [pc, #16]	; (801ce84 <append_string+0x30>)
 801ce72:	6878      	ldr	r0, [r7, #4]
 801ce74:	f001 fea6 	bl	801ebc4 <siprintf>
 801ce78:	4603      	mov	r3, r0
}
 801ce7a:	4618      	mov	r0, r3
 801ce7c:	3708      	adds	r7, #8
 801ce7e:	46bd      	mov	sp, r7
 801ce80:	bd80      	pop	{r7, pc}
 801ce82:	bf00      	nop
 801ce84:	08022910 	.word	0x08022910

0801ce88 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b082      	sub	sp, #8
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d101      	bne.n	801ce9a <json_parse_string+0x12>
        return NULL;
 801ce96:	2300      	movs	r3, #0
 801ce98:	e016      	b.n	801cec8 <json_parse_string+0x40>
    }
    if (string[0] == '\xEF' && string[1] == '\xBB' && string[2] == '\xBF') {
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	781b      	ldrb	r3, [r3, #0]
 801ce9e:	2bef      	cmp	r3, #239	; 0xef
 801cea0:	d10c      	bne.n	801cebc <json_parse_string+0x34>
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	3301      	adds	r3, #1
 801cea6:	781b      	ldrb	r3, [r3, #0]
 801cea8:	2bbb      	cmp	r3, #187	; 0xbb
 801ceaa:	d107      	bne.n	801cebc <json_parse_string+0x34>
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	3302      	adds	r3, #2
 801ceb0:	781b      	ldrb	r3, [r3, #0]
 801ceb2:	2bbf      	cmp	r3, #191	; 0xbf
 801ceb4:	d102      	bne.n	801cebc <json_parse_string+0x34>
        string = string + 3; /* Support for UTF-8 BOM */
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	3303      	adds	r3, #3
 801ceba:	607b      	str	r3, [r7, #4]
    }
    return parse_value((const char**)&string, 0);
 801cebc:	1d3b      	adds	r3, r7, #4
 801cebe:	2100      	movs	r1, #0
 801cec0:	4618      	mov	r0, r3
 801cec2:	f7fe fcc1 	bl	801b848 <parse_value>
 801cec6:	4603      	mov	r3, r0
}
 801cec8:	4618      	mov	r0, r3
 801ceca:	3708      	adds	r7, #8
 801cecc:	46bd      	mov	sp, r7
 801cece:	bd80      	pop	{r7, pc}

0801ced0 <json_object_get_value>:
    return result;
}

/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
 801ced0:	b580      	push	{r7, lr}
 801ced2:	b082      	sub	sp, #8
 801ced4:	af00      	add	r7, sp, #0
 801ced6:	6078      	str	r0, [r7, #4]
 801ced8:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL) {
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d002      	beq.n	801cee6 <json_object_get_value+0x16>
 801cee0:	683b      	ldr	r3, [r7, #0]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d101      	bne.n	801ceea <json_object_get_value+0x1a>
        return NULL;
 801cee6:	2300      	movs	r3, #0
 801cee8:	e009      	b.n	801cefe <json_object_get_value+0x2e>
    }
    return json_object_getn_value(object, name, strlen(name));
 801ceea:	6838      	ldr	r0, [r7, #0]
 801ceec:	f7e3 f992 	bl	8000214 <strlen>
 801cef0:	4603      	mov	r3, r0
 801cef2:	461a      	mov	r2, r3
 801cef4:	6839      	ldr	r1, [r7, #0]
 801cef6:	6878      	ldr	r0, [r7, #4]
 801cef8:	f7fe f864 	bl	801afc4 <json_object_getn_value>
 801cefc:	4603      	mov	r3, r0
}
 801cefe:	4618      	mov	r0, r3
 801cf00:	3708      	adds	r7, #8
 801cf02:	46bd      	mov	sp, r7
 801cf04:	bd80      	pop	{r7, pc}

0801cf06 <json_object_dotget_value>:

int json_object_get_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_get_value(object, name));
}

JSON_Value * json_object_dotget_value(const JSON_Object *object, const char *name) {
 801cf06:	b580      	push	{r7, lr}
 801cf08:	b084      	sub	sp, #16
 801cf0a:	af00      	add	r7, sp, #0
 801cf0c:	6078      	str	r0, [r7, #4]
 801cf0e:	6039      	str	r1, [r7, #0]
    const char *dot_position = strchr(name, '.');
 801cf10:	212e      	movs	r1, #46	; 0x2e
 801cf12:	6838      	ldr	r0, [r7, #0]
 801cf14:	f001 fec8 	bl	801eca8 <strchr>
 801cf18:	60f8      	str	r0, [r7, #12]
    if (!dot_position) {
 801cf1a:	68fb      	ldr	r3, [r7, #12]
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	d105      	bne.n	801cf2c <json_object_dotget_value+0x26>
        return json_object_get_value(object, name);
 801cf20:	6839      	ldr	r1, [r7, #0]
 801cf22:	6878      	ldr	r0, [r7, #4]
 801cf24:	f7ff ffd4 	bl	801ced0 <json_object_get_value>
 801cf28:	4603      	mov	r3, r0
 801cf2a:	e013      	b.n	801cf54 <json_object_dotget_value+0x4e>
    }
    object = json_value_get_object(json_object_getn_value(object, name, dot_position - name));
 801cf2c:	68fa      	ldr	r2, [r7, #12]
 801cf2e:	683b      	ldr	r3, [r7, #0]
 801cf30:	1ad3      	subs	r3, r2, r3
 801cf32:	461a      	mov	r2, r3
 801cf34:	6839      	ldr	r1, [r7, #0]
 801cf36:	6878      	ldr	r0, [r7, #4]
 801cf38:	f7fe f844 	bl	801afc4 <json_object_getn_value>
 801cf3c:	4603      	mov	r3, r0
 801cf3e:	4618      	mov	r0, r3
 801cf40:	f000 f8ef 	bl	801d122 <json_value_get_object>
 801cf44:	6078      	str	r0, [r7, #4]
    return json_object_dotget_value(object, dot_position + 1);
 801cf46:	68fb      	ldr	r3, [r7, #12]
 801cf48:	3301      	adds	r3, #1
 801cf4a:	4619      	mov	r1, r3
 801cf4c:	6878      	ldr	r0, [r7, #4]
 801cf4e:	f7ff ffda 	bl	801cf06 <json_object_dotget_value>
 801cf52:	4603      	mov	r3, r0
}
 801cf54:	4618      	mov	r0, r3
 801cf56:	3710      	adds	r7, #16
 801cf58:	46bd      	mov	sp, r7
 801cf5a:	bd80      	pop	{r7, pc}

0801cf5c <json_object_dotget_number>:

const char * json_object_dotget_string(const JSON_Object *object, const char *name) {
    return json_value_get_string(json_object_dotget_value(object, name));
}

double json_object_dotget_number(const JSON_Object *object, const char *name) {
 801cf5c:	b580      	push	{r7, lr}
 801cf5e:	b082      	sub	sp, #8
 801cf60:	af00      	add	r7, sp, #0
 801cf62:	6078      	str	r0, [r7, #4]
 801cf64:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_dotget_value(object, name));
 801cf66:	6839      	ldr	r1, [r7, #0]
 801cf68:	6878      	ldr	r0, [r7, #4]
 801cf6a:	f7ff ffcc 	bl	801cf06 <json_object_dotget_value>
 801cf6e:	4603      	mov	r3, r0
 801cf70:	4618      	mov	r0, r3
 801cf72:	f000 f90c 	bl	801d18e <json_value_get_number>
 801cf76:	eeb0 7a40 	vmov.f32	s14, s0
 801cf7a:	eef0 7a60 	vmov.f32	s15, s1
}
 801cf7e:	eeb0 0a47 	vmov.f32	s0, s14
 801cf82:	eef0 0a67 	vmov.f32	s1, s15
 801cf86:	3708      	adds	r7, #8
 801cf88:	46bd      	mov	sp, r7
 801cf8a:	bd80      	pop	{r7, pc}

0801cf8c <json_object_dotget_array>:

JSON_Object * json_object_dotget_object(const JSON_Object *object, const char *name) {
    return json_value_get_object(json_object_dotget_value(object, name));
}

JSON_Array * json_object_dotget_array(const JSON_Object *object, const char *name) {
 801cf8c:	b580      	push	{r7, lr}
 801cf8e:	b082      	sub	sp, #8
 801cf90:	af00      	add	r7, sp, #0
 801cf92:	6078      	str	r0, [r7, #4]
 801cf94:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_object_dotget_value(object, name));
 801cf96:	6839      	ldr	r1, [r7, #0]
 801cf98:	6878      	ldr	r0, [r7, #4]
 801cf9a:	f7ff ffb4 	bl	801cf06 <json_object_dotget_value>
 801cf9e:	4603      	mov	r3, r0
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	f000 f8d0 	bl	801d146 <json_value_get_array>
 801cfa6:	4603      	mov	r3, r0
}
 801cfa8:	4618      	mov	r0, r3
 801cfaa:	3708      	adds	r7, #8
 801cfac:	46bd      	mov	sp, r7
 801cfae:	bd80      	pop	{r7, pc}

0801cfb0 <json_object_dotget_boolean>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
 801cfb0:	b580      	push	{r7, lr}
 801cfb2:	b082      	sub	sp, #8
 801cfb4:	af00      	add	r7, sp, #0
 801cfb6:	6078      	str	r0, [r7, #4]
 801cfb8:	6039      	str	r1, [r7, #0]
    return json_value_get_boolean(json_object_dotget_value(object, name));
 801cfba:	6839      	ldr	r1, [r7, #0]
 801cfbc:	6878      	ldr	r0, [r7, #4]
 801cfbe:	f7ff ffa2 	bl	801cf06 <json_object_dotget_value>
 801cfc2:	4603      	mov	r3, r0
 801cfc4:	4618      	mov	r0, r3
 801cfc6:	f000 f8fd 	bl	801d1c4 <json_value_get_boolean>
 801cfca:	4603      	mov	r3, r0
}
 801cfcc:	4618      	mov	r0, r3
 801cfce:	3708      	adds	r7, #8
 801cfd0:	46bd      	mov	sp, r7
 801cfd2:	bd80      	pop	{r7, pc}

0801cfd4 <json_object_get_count>:

size_t json_object_get_count(const JSON_Object *object) {
 801cfd4:	b480      	push	{r7}
 801cfd6:	b083      	sub	sp, #12
 801cfd8:	af00      	add	r7, sp, #0
 801cfda:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d002      	beq.n	801cfe8 <json_object_get_count+0x14>
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	68db      	ldr	r3, [r3, #12]
 801cfe6:	e000      	b.n	801cfea <json_object_get_count+0x16>
 801cfe8:	2300      	movs	r3, #0
}
 801cfea:	4618      	mov	r0, r3
 801cfec:	370c      	adds	r7, #12
 801cfee:	46bd      	mov	sp, r7
 801cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cff4:	4770      	bx	lr

0801cff6 <json_object_get_name>:

const char * json_object_get_name(const JSON_Object *object, size_t index) {
 801cff6:	b580      	push	{r7, lr}
 801cff8:	b082      	sub	sp, #8
 801cffa:	af00      	add	r7, sp, #0
 801cffc:	6078      	str	r0, [r7, #4]
 801cffe:	6039      	str	r1, [r7, #0]
    if (object == NULL || index >= json_object_get_count(object)) {
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	2b00      	cmp	r3, #0
 801d004:	d006      	beq.n	801d014 <json_object_get_name+0x1e>
 801d006:	6878      	ldr	r0, [r7, #4]
 801d008:	f7ff ffe4 	bl	801cfd4 <json_object_get_count>
 801d00c:	4602      	mov	r2, r0
 801d00e:	683b      	ldr	r3, [r7, #0]
 801d010:	4293      	cmp	r3, r2
 801d012:	d301      	bcc.n	801d018 <json_object_get_name+0x22>
        return NULL;
 801d014:	2300      	movs	r3, #0
 801d016:	e005      	b.n	801d024 <json_object_get_name+0x2e>
    }
    return object->names[index];
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	685a      	ldr	r2, [r3, #4]
 801d01c:	683b      	ldr	r3, [r7, #0]
 801d01e:	009b      	lsls	r3, r3, #2
 801d020:	4413      	add	r3, r2
 801d022:	681b      	ldr	r3, [r3, #0]
}
 801d024:	4618      	mov	r0, r3
 801d026:	3708      	adds	r7, #8
 801d028:	46bd      	mov	sp, r7
 801d02a:	bd80      	pop	{r7, pc}

0801d02c <json_object_get_wrapping_value>:
        return NULL;
    }
    return object->values[index];
}

JSON_Value *json_object_get_wrapping_value(const JSON_Object *object) {
 801d02c:	b480      	push	{r7}
 801d02e:	b083      	sub	sp, #12
 801d030:	af00      	add	r7, sp, #0
 801d032:	6078      	str	r0, [r7, #4]
    return object->wrapping_value;
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	681b      	ldr	r3, [r3, #0]
}
 801d038:	4618      	mov	r0, r3
 801d03a:	370c      	adds	r7, #12
 801d03c:	46bd      	mov	sp, r7
 801d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d042:	4770      	bx	lr

0801d044 <json_object_dothas_value>:
int json_object_has_value_of_type(const JSON_Object *object, const char *name, JSON_Value_Type type) {
    JSON_Value *val = json_object_get_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

int json_object_dothas_value (const JSON_Object *object, const char *name) {
 801d044:	b580      	push	{r7, lr}
 801d046:	b082      	sub	sp, #8
 801d048:	af00      	add	r7, sp, #0
 801d04a:	6078      	str	r0, [r7, #4]
 801d04c:	6039      	str	r1, [r7, #0]
    return json_object_dotget_value(object, name) != NULL;
 801d04e:	6839      	ldr	r1, [r7, #0]
 801d050:	6878      	ldr	r0, [r7, #4]
 801d052:	f7ff ff58 	bl	801cf06 <json_object_dotget_value>
 801d056:	4603      	mov	r3, r0
 801d058:	2b00      	cmp	r3, #0
 801d05a:	bf14      	ite	ne
 801d05c:	2301      	movne	r3, #1
 801d05e:	2300      	moveq	r3, #0
 801d060:	b2db      	uxtb	r3, r3
}
 801d062:	4618      	mov	r0, r3
 801d064:	3708      	adds	r7, #8
 801d066:	46bd      	mov	sp, r7
 801d068:	bd80      	pop	{r7, pc}

0801d06a <json_array_get_value>:
    JSON_Value *val = json_object_dotget_value(object, name);
    return val != NULL && json_value_get_type(val) == type;
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
 801d06a:	b580      	push	{r7, lr}
 801d06c:	b082      	sub	sp, #8
 801d06e:	af00      	add	r7, sp, #0
 801d070:	6078      	str	r0, [r7, #4]
 801d072:	6039      	str	r1, [r7, #0]
    if (array == NULL || index >= json_array_get_count(array)) {
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	2b00      	cmp	r3, #0
 801d078:	d006      	beq.n	801d088 <json_array_get_value+0x1e>
 801d07a:	6878      	ldr	r0, [r7, #4]
 801d07c:	f000 f822 	bl	801d0c4 <json_array_get_count>
 801d080:	4602      	mov	r2, r0
 801d082:	683b      	ldr	r3, [r7, #0]
 801d084:	4293      	cmp	r3, r2
 801d086:	d301      	bcc.n	801d08c <json_array_get_value+0x22>
        return NULL;
 801d088:	2300      	movs	r3, #0
 801d08a:	e005      	b.n	801d098 <json_array_get_value+0x2e>
    }
    return array->items[index];
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	685a      	ldr	r2, [r3, #4]
 801d090:	683b      	ldr	r3, [r7, #0]
 801d092:	009b      	lsls	r3, r3, #2
 801d094:	4413      	add	r3, r2
 801d096:	681b      	ldr	r3, [r3, #0]
}
 801d098:	4618      	mov	r0, r3
 801d09a:	3708      	adds	r7, #8
 801d09c:	46bd      	mov	sp, r7
 801d09e:	bd80      	pop	{r7, pc}

0801d0a0 <json_array_get_object>:

double json_array_get_number(const JSON_Array *array, size_t index) {
    return json_value_get_number(json_array_get_value(array, index));
}

JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {
 801d0a0:	b580      	push	{r7, lr}
 801d0a2:	b082      	sub	sp, #8
 801d0a4:	af00      	add	r7, sp, #0
 801d0a6:	6078      	str	r0, [r7, #4]
 801d0a8:	6039      	str	r1, [r7, #0]
    return json_value_get_object(json_array_get_value(array, index));
 801d0aa:	6839      	ldr	r1, [r7, #0]
 801d0ac:	6878      	ldr	r0, [r7, #4]
 801d0ae:	f7ff ffdc 	bl	801d06a <json_array_get_value>
 801d0b2:	4603      	mov	r3, r0
 801d0b4:	4618      	mov	r0, r3
 801d0b6:	f000 f834 	bl	801d122 <json_value_get_object>
 801d0ba:	4603      	mov	r3, r0
}
 801d0bc:	4618      	mov	r0, r3
 801d0be:	3708      	adds	r7, #8
 801d0c0:	46bd      	mov	sp, r7
 801d0c2:	bd80      	pop	{r7, pc}

0801d0c4 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
 801d0c4:	b480      	push	{r7}
 801d0c6:	b083      	sub	sp, #12
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	d002      	beq.n	801d0d8 <json_array_get_count+0x14>
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	689b      	ldr	r3, [r3, #8]
 801d0d6:	e000      	b.n	801d0da <json_array_get_count+0x16>
 801d0d8:	2300      	movs	r3, #0
}
 801d0da:	4618      	mov	r0, r3
 801d0dc:	370c      	adds	r7, #12
 801d0de:	46bd      	mov	sp, r7
 801d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0e4:	4770      	bx	lr

0801d0e6 <json_array_get_wrapping_value>:

JSON_Value * json_array_get_wrapping_value(const JSON_Array *array) {
 801d0e6:	b480      	push	{r7}
 801d0e8:	b083      	sub	sp, #12
 801d0ea:	af00      	add	r7, sp, #0
 801d0ec:	6078      	str	r0, [r7, #4]
    return array->wrapping_value;
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	681b      	ldr	r3, [r3, #0]
}
 801d0f2:	4618      	mov	r0, r3
 801d0f4:	370c      	adds	r7, #12
 801d0f6:	46bd      	mov	sp, r7
 801d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0fc:	4770      	bx	lr

0801d0fe <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
 801d0fe:	b480      	push	{r7}
 801d100:	b083      	sub	sp, #12
 801d102:	af00      	add	r7, sp, #0
 801d104:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d002      	beq.n	801d112 <json_value_get_type+0x14>
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	685b      	ldr	r3, [r3, #4]
 801d110:	e001      	b.n	801d116 <json_value_get_type+0x18>
 801d112:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d116:	4618      	mov	r0, r3
 801d118:	370c      	adds	r7, #12
 801d11a:	46bd      	mov	sp, r7
 801d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d120:	4770      	bx	lr

0801d122 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
 801d122:	b580      	push	{r7, lr}
 801d124:	b082      	sub	sp, #8
 801d126:	af00      	add	r7, sp, #0
 801d128:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
 801d12a:	6878      	ldr	r0, [r7, #4]
 801d12c:	f7ff ffe7 	bl	801d0fe <json_value_get_type>
 801d130:	4603      	mov	r3, r0
 801d132:	2b04      	cmp	r3, #4
 801d134:	d102      	bne.n	801d13c <json_value_get_object+0x1a>
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	689b      	ldr	r3, [r3, #8]
 801d13a:	e000      	b.n	801d13e <json_value_get_object+0x1c>
 801d13c:	2300      	movs	r3, #0
}
 801d13e:	4618      	mov	r0, r3
 801d140:	3708      	adds	r7, #8
 801d142:	46bd      	mov	sp, r7
 801d144:	bd80      	pop	{r7, pc}

0801d146 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
 801d146:	b580      	push	{r7, lr}
 801d148:	b082      	sub	sp, #8
 801d14a:	af00      	add	r7, sp, #0
 801d14c:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
 801d14e:	6878      	ldr	r0, [r7, #4]
 801d150:	f7ff ffd5 	bl	801d0fe <json_value_get_type>
 801d154:	4603      	mov	r3, r0
 801d156:	2b05      	cmp	r3, #5
 801d158:	d102      	bne.n	801d160 <json_value_get_array+0x1a>
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	689b      	ldr	r3, [r3, #8]
 801d15e:	e000      	b.n	801d162 <json_value_get_array+0x1c>
 801d160:	2300      	movs	r3, #0
}
 801d162:	4618      	mov	r0, r3
 801d164:	3708      	adds	r7, #8
 801d166:	46bd      	mov	sp, r7
 801d168:	bd80      	pop	{r7, pc}

0801d16a <json_value_get_string>:

const char * json_value_get_string(const JSON_Value *value) {
 801d16a:	b580      	push	{r7, lr}
 801d16c:	b082      	sub	sp, #8
 801d16e:	af00      	add	r7, sp, #0
 801d170:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
 801d172:	6878      	ldr	r0, [r7, #4]
 801d174:	f7ff ffc3 	bl	801d0fe <json_value_get_type>
 801d178:	4603      	mov	r3, r0
 801d17a:	2b02      	cmp	r3, #2
 801d17c:	d102      	bne.n	801d184 <json_value_get_string+0x1a>
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	689b      	ldr	r3, [r3, #8]
 801d182:	e000      	b.n	801d186 <json_value_get_string+0x1c>
 801d184:	2300      	movs	r3, #0
}
 801d186:	4618      	mov	r0, r3
 801d188:	3708      	adds	r7, #8
 801d18a:	46bd      	mov	sp, r7
 801d18c:	bd80      	pop	{r7, pc}

0801d18e <json_value_get_number>:

double json_value_get_number(const JSON_Value *value) {
 801d18e:	b580      	push	{r7, lr}
 801d190:	b082      	sub	sp, #8
 801d192:	af00      	add	r7, sp, #0
 801d194:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
 801d196:	6878      	ldr	r0, [r7, #4]
 801d198:	f7ff ffb1 	bl	801d0fe <json_value_get_type>
 801d19c:	4603      	mov	r3, r0
 801d19e:	2b03      	cmp	r3, #3
 801d1a0:	d103      	bne.n	801d1aa <json_value_get_number+0x1c>
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801d1a8:	e003      	b.n	801d1b2 <json_value_get_number+0x24>
 801d1aa:	f04f 0200 	mov.w	r2, #0
 801d1ae:	f04f 0300 	mov.w	r3, #0
 801d1b2:	ec43 2b17 	vmov	d7, r2, r3
}
 801d1b6:	eeb0 0a47 	vmov.f32	s0, s14
 801d1ba:	eef0 0a67 	vmov.f32	s1, s15
 801d1be:	3708      	adds	r7, #8
 801d1c0:	46bd      	mov	sp, r7
 801d1c2:	bd80      	pop	{r7, pc}

0801d1c4 <json_value_get_boolean>:

int json_value_get_boolean(const JSON_Value *value) {
 801d1c4:	b580      	push	{r7, lr}
 801d1c6:	b082      	sub	sp, #8
 801d1c8:	af00      	add	r7, sp, #0
 801d1ca:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
 801d1cc:	6878      	ldr	r0, [r7, #4]
 801d1ce:	f7ff ff96 	bl	801d0fe <json_value_get_type>
 801d1d2:	4603      	mov	r3, r0
 801d1d4:	2b06      	cmp	r3, #6
 801d1d6:	d102      	bne.n	801d1de <json_value_get_boolean+0x1a>
 801d1d8:	687b      	ldr	r3, [r7, #4]
 801d1da:	689b      	ldr	r3, [r3, #8]
 801d1dc:	e001      	b.n	801d1e2 <json_value_get_boolean+0x1e>
 801d1de:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	3708      	adds	r7, #8
 801d1e6:	46bd      	mov	sp, r7
 801d1e8:	bd80      	pop	{r7, pc}
	...

0801d1ec <json_value_free>:

JSON_Value * json_value_get_parent (const JSON_Value *value) {
    return value ? value->parent : NULL;
}

void json_value_free(JSON_Value *value) {
 801d1ec:	b580      	push	{r7, lr}
 801d1ee:	b082      	sub	sp, #8
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
 801d1f4:	6878      	ldr	r0, [r7, #4]
 801d1f6:	f7ff ff82 	bl	801d0fe <json_value_get_type>
 801d1fa:	4603      	mov	r3, r0
 801d1fc:	2b05      	cmp	r3, #5
 801d1fe:	d012      	beq.n	801d226 <json_value_free+0x3a>
 801d200:	2b05      	cmp	r3, #5
 801d202:	dc16      	bgt.n	801d232 <json_value_free+0x46>
 801d204:	2b02      	cmp	r3, #2
 801d206:	d007      	beq.n	801d218 <json_value_free+0x2c>
 801d208:	2b04      	cmp	r3, #4
 801d20a:	d112      	bne.n	801d232 <json_value_free+0x46>
        case JSONObject:
            json_object_free(value->value.object);
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	689b      	ldr	r3, [r3, #8]
 801d210:	4618      	mov	r0, r3
 801d212:	f7fd ffc7 	bl	801b1a4 <json_object_free>
            break;
 801d216:	e00d      	b.n	801d234 <json_value_free+0x48>
        case JSONString:
            parson_free(value->value.string);
 801d218:	4b0a      	ldr	r3, [pc, #40]	; (801d244 <json_value_free+0x58>)
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	687a      	ldr	r2, [r7, #4]
 801d21e:	6892      	ldr	r2, [r2, #8]
 801d220:	4610      	mov	r0, r2
 801d222:	4798      	blx	r3
            break;
 801d224:	e006      	b.n	801d234 <json_value_free+0x48>
        case JSONArray:
            json_array_free(value->value.array);
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	689b      	ldr	r3, [r3, #8]
 801d22a:	4618      	mov	r0, r3
 801d22c:	f7fe f88a 	bl	801b344 <json_array_free>
            break;
 801d230:	e000      	b.n	801d234 <json_value_free+0x48>
        default:
            break;
 801d232:	bf00      	nop
    }
    parson_free(value);
 801d234:	4b03      	ldr	r3, [pc, #12]	; (801d244 <json_value_free+0x58>)
 801d236:	681b      	ldr	r3, [r3, #0]
 801d238:	6878      	ldr	r0, [r7, #4]
 801d23a:	4798      	blx	r3
}
 801d23c:	bf00      	nop
 801d23e:	3708      	adds	r7, #8
 801d240:	46bd      	mov	sp, r7
 801d242:	bd80      	pop	{r7, pc}
 801d244:	20000088 	.word	0x20000088

0801d248 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
 801d248:	b580      	push	{r7, lr}
 801d24a:	b082      	sub	sp, #8
 801d24c:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d24e:	4b12      	ldr	r3, [pc, #72]	; (801d298 <json_value_init_object+0x50>)
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	2010      	movs	r0, #16
 801d254:	4798      	blx	r3
 801d256:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d101      	bne.n	801d262 <json_value_init_object+0x1a>
        return NULL;
 801d25e:	2300      	movs	r3, #0
 801d260:	e016      	b.n	801d290 <json_value_init_object+0x48>
    }
    new_value->parent = NULL;
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	2200      	movs	r2, #0
 801d266:	601a      	str	r2, [r3, #0]
    new_value->type = JSONObject;
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	2204      	movs	r2, #4
 801d26c:	605a      	str	r2, [r3, #4]
    new_value->value.object = json_object_init(new_value);
 801d26e:	6878      	ldr	r0, [r7, #4]
 801d270:	f7fd fd88 	bl	801ad84 <json_object_init>
 801d274:	4602      	mov	r2, r0
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	689b      	ldr	r3, [r3, #8]
 801d27e:	2b00      	cmp	r3, #0
 801d280:	d105      	bne.n	801d28e <json_value_init_object+0x46>
        parson_free(new_value);
 801d282:	4b06      	ldr	r3, [pc, #24]	; (801d29c <json_value_init_object+0x54>)
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	6878      	ldr	r0, [r7, #4]
 801d288:	4798      	blx	r3
        return NULL;
 801d28a:	2300      	movs	r3, #0
 801d28c:	e000      	b.n	801d290 <json_value_init_object+0x48>
    }
    return new_value;
 801d28e:	687b      	ldr	r3, [r7, #4]
}
 801d290:	4618      	mov	r0, r3
 801d292:	3708      	adds	r7, #8
 801d294:	46bd      	mov	sp, r7
 801d296:	bd80      	pop	{r7, pc}
 801d298:	20000084 	.word	0x20000084
 801d29c:	20000088 	.word	0x20000088

0801d2a0 <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
 801d2a0:	b580      	push	{r7, lr}
 801d2a2:	b082      	sub	sp, #8
 801d2a4:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d2a6:	4b12      	ldr	r3, [pc, #72]	; (801d2f0 <json_value_init_array+0x50>)
 801d2a8:	681b      	ldr	r3, [r3, #0]
 801d2aa:	2010      	movs	r0, #16
 801d2ac:	4798      	blx	r3
 801d2ae:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	2b00      	cmp	r3, #0
 801d2b4:	d101      	bne.n	801d2ba <json_value_init_array+0x1a>
        return NULL;
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	e016      	b.n	801d2e8 <json_value_init_array+0x48>
    }
    new_value->parent = NULL;
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	2200      	movs	r2, #0
 801d2be:	601a      	str	r2, [r3, #0]
    new_value->type = JSONArray;
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	2205      	movs	r2, #5
 801d2c4:	605a      	str	r2, [r3, #4]
    new_value->value.array = json_array_init(new_value);
 801d2c6:	6878      	ldr	r0, [r7, #4]
 801d2c8:	f7fd ffa4 	bl	801b214 <json_array_init>
 801d2cc:	4602      	mov	r2, r0
 801d2ce:	687b      	ldr	r3, [r7, #4]
 801d2d0:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	689b      	ldr	r3, [r3, #8]
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	d105      	bne.n	801d2e6 <json_value_init_array+0x46>
        parson_free(new_value);
 801d2da:	4b06      	ldr	r3, [pc, #24]	; (801d2f4 <json_value_init_array+0x54>)
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	6878      	ldr	r0, [r7, #4]
 801d2e0:	4798      	blx	r3
        return NULL;
 801d2e2:	2300      	movs	r3, #0
 801d2e4:	e000      	b.n	801d2e8 <json_value_init_array+0x48>
    }
    return new_value;
 801d2e6:	687b      	ldr	r3, [r7, #4]
}
 801d2e8:	4618      	mov	r0, r3
 801d2ea:	3708      	adds	r7, #8
 801d2ec:	46bd      	mov	sp, r7
 801d2ee:	bd80      	pop	{r7, pc}
 801d2f0:	20000084 	.word	0x20000084
 801d2f4:	20000088 	.word	0x20000088

0801d2f8 <json_value_init_string>:

JSON_Value * json_value_init_string(const char *string) {
 801d2f8:	b580      	push	{r7, lr}
 801d2fa:	b086      	sub	sp, #24
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	6078      	str	r0, [r7, #4]
    char *copy = NULL;
 801d300:	2300      	movs	r3, #0
 801d302:	617b      	str	r3, [r7, #20]
    JSON_Value *value;
    size_t string_len = 0;
 801d304:	2300      	movs	r3, #0
 801d306:	613b      	str	r3, [r7, #16]
    if (string == NULL) {
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d101      	bne.n	801d312 <json_value_init_string+0x1a>
        return NULL;
 801d30e:	2300      	movs	r3, #0
 801d310:	e022      	b.n	801d358 <json_value_init_string+0x60>
    }
    string_len = strlen(string);
 801d312:	6878      	ldr	r0, [r7, #4]
 801d314:	f7e2 ff7e 	bl	8000214 <strlen>
 801d318:	6138      	str	r0, [r7, #16]
    if (!is_valid_utf8(string, string_len)) {
 801d31a:	6939      	ldr	r1, [r7, #16]
 801d31c:	6878      	ldr	r0, [r7, #4]
 801d31e:	f7fd fccc 	bl	801acba <is_valid_utf8>
 801d322:	4603      	mov	r3, r0
 801d324:	2b00      	cmp	r3, #0
 801d326:	d101      	bne.n	801d32c <json_value_init_string+0x34>
        return NULL;
 801d328:	2300      	movs	r3, #0
 801d32a:	e015      	b.n	801d358 <json_value_init_string+0x60>
    }
    copy = parson_strndup(string, string_len);
 801d32c:	6939      	ldr	r1, [r7, #16]
 801d32e:	6878      	ldr	r0, [r7, #4]
 801d330:	f7fd fb24 	bl	801a97c <parson_strndup>
 801d334:	6178      	str	r0, [r7, #20]
    if (copy == NULL) {
 801d336:	697b      	ldr	r3, [r7, #20]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d101      	bne.n	801d340 <json_value_init_string+0x48>
        return NULL;
 801d33c:	2300      	movs	r3, #0
 801d33e:	e00b      	b.n	801d358 <json_value_init_string+0x60>
    }
    value = json_value_init_string_no_copy(copy);
 801d340:	6978      	ldr	r0, [r7, #20]
 801d342:	f7fe f827 	bl	801b394 <json_value_init_string_no_copy>
 801d346:	60f8      	str	r0, [r7, #12]
    if (value == NULL) {
 801d348:	68fb      	ldr	r3, [r7, #12]
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d103      	bne.n	801d356 <json_value_init_string+0x5e>
        parson_free(copy);
 801d34e:	4b04      	ldr	r3, [pc, #16]	; (801d360 <json_value_init_string+0x68>)
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	6978      	ldr	r0, [r7, #20]
 801d354:	4798      	blx	r3
    }
    return value;
 801d356:	68fb      	ldr	r3, [r7, #12]
}
 801d358:	4618      	mov	r0, r3
 801d35a:	3718      	adds	r7, #24
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bd80      	pop	{r7, pc}
 801d360:	20000088 	.word	0x20000088

0801d364 <json_value_init_number>:

JSON_Value * json_value_init_number(double number) {
 801d364:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d366:	b085      	sub	sp, #20
 801d368:	af00      	add	r7, sp, #0
 801d36a:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *new_value = NULL;
 801d36e:	2300      	movs	r3, #0
 801d370:	60fb      	str	r3, [r7, #12]
    if (IS_NUMBER_INVALID(number)) {
 801d372:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d376:	e9d7 0100 	ldrd	r0, r1, [r7]
 801d37a:	f7e3 fbff 	bl	8000b7c <__aeabi_dcmpun>
 801d37e:	4603      	mov	r3, r0
 801d380:	2b00      	cmp	r3, #0
 801d382:	d121      	bne.n	801d3c8 <json_value_init_number+0x64>
 801d384:	683c      	ldr	r4, [r7, #0]
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801d38c:	2301      	movs	r3, #1
 801d38e:	461e      	mov	r6, r3
 801d390:	f04f 32ff 	mov.w	r2, #4294967295
 801d394:	4b1a      	ldr	r3, [pc, #104]	; (801d400 <json_value_init_number+0x9c>)
 801d396:	4620      	mov	r0, r4
 801d398:	4629      	mov	r1, r5
 801d39a:	f7e3 fbef 	bl	8000b7c <__aeabi_dcmpun>
 801d39e:	4603      	mov	r3, r0
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	d10b      	bne.n	801d3bc <json_value_init_number+0x58>
 801d3a4:	f04f 32ff 	mov.w	r2, #4294967295
 801d3a8:	4b15      	ldr	r3, [pc, #84]	; (801d400 <json_value_init_number+0x9c>)
 801d3aa:	4620      	mov	r0, r4
 801d3ac:	4629      	mov	r1, r5
 801d3ae:	f7e3 fbc7 	bl	8000b40 <__aeabi_dcmple>
 801d3b2:	4603      	mov	r3, r0
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d101      	bne.n	801d3bc <json_value_init_number+0x58>
 801d3b8:	2300      	movs	r3, #0
 801d3ba:	461e      	mov	r6, r3
 801d3bc:	b2f3      	uxtb	r3, r6
 801d3be:	f083 0301 	eor.w	r3, r3, #1
 801d3c2:	b2db      	uxtb	r3, r3
 801d3c4:	2b00      	cmp	r3, #0
 801d3c6:	d001      	beq.n	801d3cc <json_value_init_number+0x68>
        return NULL;
 801d3c8:	2300      	movs	r3, #0
 801d3ca:	e015      	b.n	801d3f8 <json_value_init_number+0x94>
    }
    new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d3cc:	4b0d      	ldr	r3, [pc, #52]	; (801d404 <json_value_init_number+0xa0>)
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	2010      	movs	r0, #16
 801d3d2:	4798      	blx	r3
 801d3d4:	60f8      	str	r0, [r7, #12]
    if (new_value == NULL) {
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d101      	bne.n	801d3e0 <json_value_init_number+0x7c>
        return NULL;
 801d3dc:	2300      	movs	r3, #0
 801d3de:	e00b      	b.n	801d3f8 <json_value_init_number+0x94>
    }
    new_value->parent = NULL;
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	2200      	movs	r2, #0
 801d3e4:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNumber;
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	2203      	movs	r2, #3
 801d3ea:	605a      	str	r2, [r3, #4]
    new_value->value.number = number;
 801d3ec:	68f9      	ldr	r1, [r7, #12]
 801d3ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d3f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    return new_value;
 801d3f6:	68fb      	ldr	r3, [r7, #12]
}
 801d3f8:	4618      	mov	r0, r3
 801d3fa:	3714      	adds	r7, #20
 801d3fc:	46bd      	mov	sp, r7
 801d3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d400:	7fefffff 	.word	0x7fefffff
 801d404:	20000084 	.word	0x20000084

0801d408 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
 801d408:	b580      	push	{r7, lr}
 801d40a:	b084      	sub	sp, #16
 801d40c:	af00      	add	r7, sp, #0
 801d40e:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d410:	4b0e      	ldr	r3, [pc, #56]	; (801d44c <json_value_init_boolean+0x44>)
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	2010      	movs	r0, #16
 801d416:	4798      	blx	r3
 801d418:	60f8      	str	r0, [r7, #12]
    if (!new_value) {
 801d41a:	68fb      	ldr	r3, [r7, #12]
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d101      	bne.n	801d424 <json_value_init_boolean+0x1c>
        return NULL;
 801d420:	2300      	movs	r3, #0
 801d422:	e00f      	b.n	801d444 <json_value_init_boolean+0x3c>
    }
    new_value->parent = NULL;
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	2200      	movs	r2, #0
 801d428:	601a      	str	r2, [r3, #0]
    new_value->type = JSONBoolean;
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	2206      	movs	r2, #6
 801d42e:	605a      	str	r2, [r3, #4]
    new_value->value.boolean = boolean ? 1 : 0;
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	2b00      	cmp	r3, #0
 801d434:	bf14      	ite	ne
 801d436:	2301      	movne	r3, #1
 801d438:	2300      	moveq	r3, #0
 801d43a:	b2db      	uxtb	r3, r3
 801d43c:	461a      	mov	r2, r3
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	609a      	str	r2, [r3, #8]
    return new_value;
 801d442:	68fb      	ldr	r3, [r7, #12]
}
 801d444:	4618      	mov	r0, r3
 801d446:	3710      	adds	r7, #16
 801d448:	46bd      	mov	sp, r7
 801d44a:	bd80      	pop	{r7, pc}
 801d44c:	20000084 	.word	0x20000084

0801d450 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
 801d450:	b580      	push	{r7, lr}
 801d452:	b082      	sub	sp, #8
 801d454:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
 801d456:	4b0a      	ldr	r3, [pc, #40]	; (801d480 <json_value_init_null+0x30>)
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	2010      	movs	r0, #16
 801d45c:	4798      	blx	r3
 801d45e:	6078      	str	r0, [r7, #4]
    if (!new_value) {
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	2b00      	cmp	r3, #0
 801d464:	d101      	bne.n	801d46a <json_value_init_null+0x1a>
        return NULL;
 801d466:	2300      	movs	r3, #0
 801d468:	e006      	b.n	801d478 <json_value_init_null+0x28>
    }
    new_value->parent = NULL;
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	2200      	movs	r2, #0
 801d46e:	601a      	str	r2, [r3, #0]
    new_value->type = JSONNull;
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	2201      	movs	r2, #1
 801d474:	605a      	str	r2, [r3, #4]
    return new_value;
 801d476:	687b      	ldr	r3, [r7, #4]
}
 801d478:	4618      	mov	r0, r3
 801d47a:	3708      	adds	r7, #8
 801d47c:	46bd      	mov	sp, r7
 801d47e:	bd80      	pop	{r7, pc}
 801d480:	20000084 	.word	0x20000084

0801d484 <json_serialization_size>:
        default:
            return NULL;
    }
}

size_t json_serialization_size(const JSON_Value *value) {
 801d484:	b580      	push	{r7, lr}
 801d486:	b096      	sub	sp, #88	; 0x58
 801d488:	af02      	add	r7, sp, #8
 801d48a:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 0, num_buf);
 801d48c:	f107 030c 	add.w	r3, r7, #12
 801d490:	9300      	str	r3, [sp, #0]
 801d492:	2300      	movs	r3, #0
 801d494:	2200      	movs	r2, #0
 801d496:	2100      	movs	r1, #0
 801d498:	6878      	ldr	r0, [r7, #4]
 801d49a:	f7fe fcff 	bl	801be9c <json_serialize_to_buffer_r>
 801d49e:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801d4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d4a2:	2b00      	cmp	r3, #0
 801d4a4:	db02      	blt.n	801d4ac <json_serialization_size+0x28>
 801d4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d4a8:	3301      	adds	r3, #1
 801d4aa:	e000      	b.n	801d4ae <json_serialization_size+0x2a>
 801d4ac:	2300      	movs	r3, #0
}
 801d4ae:	4618      	mov	r0, r3
 801d4b0:	3750      	adds	r7, #80	; 0x50
 801d4b2:	46bd      	mov	sp, r7
 801d4b4:	bd80      	pop	{r7, pc}

0801d4b6 <json_serialize_to_buffer>:

JSON_Status json_serialize_to_buffer(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801d4b6:	b580      	push	{r7, lr}
 801d4b8:	b088      	sub	sp, #32
 801d4ba:	af02      	add	r7, sp, #8
 801d4bc:	60f8      	str	r0, [r7, #12]
 801d4be:	60b9      	str	r1, [r7, #8]
 801d4c0:	607a      	str	r2, [r7, #4]
    int written = -1;
 801d4c2:	f04f 33ff 	mov.w	r3, #4294967295
 801d4c6:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size(value);
 801d4c8:	68f8      	ldr	r0, [r7, #12]
 801d4ca:	f7ff ffdb 	bl	801d484 <json_serialization_size>
 801d4ce:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801d4d0:	693b      	ldr	r3, [r7, #16]
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	d003      	beq.n	801d4de <json_serialize_to_buffer+0x28>
 801d4d6:	687a      	ldr	r2, [r7, #4]
 801d4d8:	693b      	ldr	r3, [r7, #16]
 801d4da:	429a      	cmp	r2, r3
 801d4dc:	d202      	bcs.n	801d4e4 <json_serialize_to_buffer+0x2e>
        return JSONFailure;
 801d4de:	f04f 33ff 	mov.w	r3, #4294967295
 801d4e2:	e00f      	b.n	801d504 <json_serialize_to_buffer+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 0, NULL);
 801d4e4:	2300      	movs	r3, #0
 801d4e6:	9300      	str	r3, [sp, #0]
 801d4e8:	2300      	movs	r3, #0
 801d4ea:	2200      	movs	r2, #0
 801d4ec:	68b9      	ldr	r1, [r7, #8]
 801d4ee:	68f8      	ldr	r0, [r7, #12]
 801d4f0:	f7fe fcd4 	bl	801be9c <json_serialize_to_buffer_r>
 801d4f4:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801d4f6:	697b      	ldr	r3, [r7, #20]
 801d4f8:	2b00      	cmp	r3, #0
 801d4fa:	da02      	bge.n	801d502 <json_serialize_to_buffer+0x4c>
        return JSONFailure;
 801d4fc:	f04f 33ff 	mov.w	r3, #4294967295
 801d500:	e000      	b.n	801d504 <json_serialize_to_buffer+0x4e>
    }
    return JSONSuccess;
 801d502:	2300      	movs	r3, #0
}
 801d504:	4618      	mov	r0, r3
 801d506:	3718      	adds	r7, #24
 801d508:	46bd      	mov	sp, r7
 801d50a:	bd80      	pop	{r7, pc}

0801d50c <json_serialize_to_string>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string(const JSON_Value *value) {
 801d50c:	b580      	push	{r7, lr}
 801d50e:	b086      	sub	sp, #24
 801d510:	af00      	add	r7, sp, #0
 801d512:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801d514:	f04f 33ff 	mov.w	r3, #4294967295
 801d518:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size(value);
 801d51a:	6878      	ldr	r0, [r7, #4]
 801d51c:	f7ff ffb2 	bl	801d484 <json_serialization_size>
 801d520:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801d522:	2300      	movs	r3, #0
 801d524:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801d526:	693b      	ldr	r3, [r7, #16]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d101      	bne.n	801d530 <json_serialize_to_string+0x24>
        return NULL;
 801d52c:	2300      	movs	r3, #0
 801d52e:	e019      	b.n	801d564 <json_serialize_to_string+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801d530:	4b0e      	ldr	r3, [pc, #56]	; (801d56c <json_serialize_to_string+0x60>)
 801d532:	681b      	ldr	r3, [r3, #0]
 801d534:	6938      	ldr	r0, [r7, #16]
 801d536:	4798      	blx	r3
 801d538:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801d53a:	68fb      	ldr	r3, [r7, #12]
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	d101      	bne.n	801d544 <json_serialize_to_string+0x38>
        return NULL;
 801d540:	2300      	movs	r3, #0
 801d542:	e00f      	b.n	801d564 <json_serialize_to_string+0x58>
    }
    serialization_result = json_serialize_to_buffer(value, buf, buf_size_bytes);
 801d544:	693a      	ldr	r2, [r7, #16]
 801d546:	68f9      	ldr	r1, [r7, #12]
 801d548:	6878      	ldr	r0, [r7, #4]
 801d54a:	f7ff ffb4 	bl	801d4b6 <json_serialize_to_buffer>
 801d54e:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801d550:	697b      	ldr	r3, [r7, #20]
 801d552:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d556:	d104      	bne.n	801d562 <json_serialize_to_string+0x56>
        json_free_serialized_string(buf);
 801d558:	68f8      	ldr	r0, [r7, #12]
 801d55a:	f000 f87f 	bl	801d65c <json_free_serialized_string>
        return NULL;
 801d55e:	2300      	movs	r3, #0
 801d560:	e000      	b.n	801d564 <json_serialize_to_string+0x58>
    }
    return buf;
 801d562:	68fb      	ldr	r3, [r7, #12]
}
 801d564:	4618      	mov	r0, r3
 801d566:	3718      	adds	r7, #24
 801d568:	46bd      	mov	sp, r7
 801d56a:	bd80      	pop	{r7, pc}
 801d56c:	20000084 	.word	0x20000084

0801d570 <json_serialization_size_pretty>:

size_t json_serialization_size_pretty(const JSON_Value *value) {
 801d570:	b580      	push	{r7, lr}
 801d572:	b096      	sub	sp, #88	; 0x58
 801d574:	af02      	add	r7, sp, #8
 801d576:	6078      	str	r0, [r7, #4]
    char num_buf[NUM_BUF_SIZE]; /* recursively allocating buffer on stack is a bad idea, so let's do it only once */
    int res = json_serialize_to_buffer_r(value, NULL, 0, 1, num_buf);
 801d578:	f107 030c 	add.w	r3, r7, #12
 801d57c:	9300      	str	r3, [sp, #0]
 801d57e:	2301      	movs	r3, #1
 801d580:	2200      	movs	r2, #0
 801d582:	2100      	movs	r1, #0
 801d584:	6878      	ldr	r0, [r7, #4]
 801d586:	f7fe fc89 	bl	801be9c <json_serialize_to_buffer_r>
 801d58a:	64f8      	str	r0, [r7, #76]	; 0x4c
    return res < 0 ? 0 : (size_t)(res + 1);
 801d58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d58e:	2b00      	cmp	r3, #0
 801d590:	db02      	blt.n	801d598 <json_serialization_size_pretty+0x28>
 801d592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d594:	3301      	adds	r3, #1
 801d596:	e000      	b.n	801d59a <json_serialization_size_pretty+0x2a>
 801d598:	2300      	movs	r3, #0
}
 801d59a:	4618      	mov	r0, r3
 801d59c:	3750      	adds	r7, #80	; 0x50
 801d59e:	46bd      	mov	sp, r7
 801d5a0:	bd80      	pop	{r7, pc}

0801d5a2 <json_serialize_to_buffer_pretty>:

JSON_Status json_serialize_to_buffer_pretty(const JSON_Value *value, char *buf, size_t buf_size_in_bytes) {
 801d5a2:	b580      	push	{r7, lr}
 801d5a4:	b088      	sub	sp, #32
 801d5a6:	af02      	add	r7, sp, #8
 801d5a8:	60f8      	str	r0, [r7, #12]
 801d5aa:	60b9      	str	r1, [r7, #8]
 801d5ac:	607a      	str	r2, [r7, #4]
    int written = -1;
 801d5ae:	f04f 33ff 	mov.w	r3, #4294967295
 801d5b2:	617b      	str	r3, [r7, #20]
    size_t needed_size_in_bytes = json_serialization_size_pretty(value);
 801d5b4:	68f8      	ldr	r0, [r7, #12]
 801d5b6:	f7ff ffdb 	bl	801d570 <json_serialization_size_pretty>
 801d5ba:	6138      	str	r0, [r7, #16]
    if (needed_size_in_bytes == 0 || buf_size_in_bytes < needed_size_in_bytes) {
 801d5bc:	693b      	ldr	r3, [r7, #16]
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d003      	beq.n	801d5ca <json_serialize_to_buffer_pretty+0x28>
 801d5c2:	687a      	ldr	r2, [r7, #4]
 801d5c4:	693b      	ldr	r3, [r7, #16]
 801d5c6:	429a      	cmp	r2, r3
 801d5c8:	d202      	bcs.n	801d5d0 <json_serialize_to_buffer_pretty+0x2e>
        return JSONFailure;
 801d5ca:	f04f 33ff 	mov.w	r3, #4294967295
 801d5ce:	e00f      	b.n	801d5f0 <json_serialize_to_buffer_pretty+0x4e>
    }
    written = json_serialize_to_buffer_r(value, buf, 0, 1, NULL);
 801d5d0:	2300      	movs	r3, #0
 801d5d2:	9300      	str	r3, [sp, #0]
 801d5d4:	2301      	movs	r3, #1
 801d5d6:	2200      	movs	r2, #0
 801d5d8:	68b9      	ldr	r1, [r7, #8]
 801d5da:	68f8      	ldr	r0, [r7, #12]
 801d5dc:	f7fe fc5e 	bl	801be9c <json_serialize_to_buffer_r>
 801d5e0:	6178      	str	r0, [r7, #20]
    if (written < 0) {
 801d5e2:	697b      	ldr	r3, [r7, #20]
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	da02      	bge.n	801d5ee <json_serialize_to_buffer_pretty+0x4c>
        return JSONFailure;
 801d5e8:	f04f 33ff 	mov.w	r3, #4294967295
 801d5ec:	e000      	b.n	801d5f0 <json_serialize_to_buffer_pretty+0x4e>
    }
    return JSONSuccess;
 801d5ee:	2300      	movs	r3, #0
}
 801d5f0:	4618      	mov	r0, r3
 801d5f2:	3718      	adds	r7, #24
 801d5f4:	46bd      	mov	sp, r7
 801d5f6:	bd80      	pop	{r7, pc}

0801d5f8 <json_serialize_to_string_pretty>:
    }
    json_free_serialized_string(serialized_string);
    return return_code;
}

char * json_serialize_to_string_pretty(const JSON_Value *value) {
 801d5f8:	b580      	push	{r7, lr}
 801d5fa:	b086      	sub	sp, #24
 801d5fc:	af00      	add	r7, sp, #0
 801d5fe:	6078      	str	r0, [r7, #4]
    JSON_Status serialization_result = JSONFailure;
 801d600:	f04f 33ff 	mov.w	r3, #4294967295
 801d604:	617b      	str	r3, [r7, #20]
    size_t buf_size_bytes = json_serialization_size_pretty(value);
 801d606:	6878      	ldr	r0, [r7, #4]
 801d608:	f7ff ffb2 	bl	801d570 <json_serialization_size_pretty>
 801d60c:	6138      	str	r0, [r7, #16]
    char *buf = NULL;
 801d60e:	2300      	movs	r3, #0
 801d610:	60fb      	str	r3, [r7, #12]
    if (buf_size_bytes == 0) {
 801d612:	693b      	ldr	r3, [r7, #16]
 801d614:	2b00      	cmp	r3, #0
 801d616:	d101      	bne.n	801d61c <json_serialize_to_string_pretty+0x24>
        return NULL;
 801d618:	2300      	movs	r3, #0
 801d61a:	e019      	b.n	801d650 <json_serialize_to_string_pretty+0x58>
    }
    buf = (char*)parson_malloc(buf_size_bytes);
 801d61c:	4b0e      	ldr	r3, [pc, #56]	; (801d658 <json_serialize_to_string_pretty+0x60>)
 801d61e:	681b      	ldr	r3, [r3, #0]
 801d620:	6938      	ldr	r0, [r7, #16]
 801d622:	4798      	blx	r3
 801d624:	60f8      	str	r0, [r7, #12]
    if (buf == NULL) {
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	2b00      	cmp	r3, #0
 801d62a:	d101      	bne.n	801d630 <json_serialize_to_string_pretty+0x38>
        return NULL;
 801d62c:	2300      	movs	r3, #0
 801d62e:	e00f      	b.n	801d650 <json_serialize_to_string_pretty+0x58>
    }
    serialization_result = json_serialize_to_buffer_pretty(value, buf, buf_size_bytes);
 801d630:	693a      	ldr	r2, [r7, #16]
 801d632:	68f9      	ldr	r1, [r7, #12]
 801d634:	6878      	ldr	r0, [r7, #4]
 801d636:	f7ff ffb4 	bl	801d5a2 <json_serialize_to_buffer_pretty>
 801d63a:	6178      	str	r0, [r7, #20]
    if (serialization_result == JSONFailure) {
 801d63c:	697b      	ldr	r3, [r7, #20]
 801d63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d642:	d104      	bne.n	801d64e <json_serialize_to_string_pretty+0x56>
        json_free_serialized_string(buf);
 801d644:	68f8      	ldr	r0, [r7, #12]
 801d646:	f000 f809 	bl	801d65c <json_free_serialized_string>
        return NULL;
 801d64a:	2300      	movs	r3, #0
 801d64c:	e000      	b.n	801d650 <json_serialize_to_string_pretty+0x58>
    }
    return buf;
 801d64e:	68fb      	ldr	r3, [r7, #12]
}
 801d650:	4618      	mov	r0, r3
 801d652:	3718      	adds	r7, #24
 801d654:	46bd      	mov	sp, r7
 801d656:	bd80      	pop	{r7, pc}
 801d658:	20000084 	.word	0x20000084

0801d65c <json_free_serialized_string>:

void json_free_serialized_string(char *string) {
 801d65c:	b580      	push	{r7, lr}
 801d65e:	b082      	sub	sp, #8
 801d660:	af00      	add	r7, sp, #0
 801d662:	6078      	str	r0, [r7, #4]
    parson_free(string);
 801d664:	4b03      	ldr	r3, [pc, #12]	; (801d674 <json_free_serialized_string+0x18>)
 801d666:	681b      	ldr	r3, [r3, #0]
 801d668:	6878      	ldr	r0, [r7, #4]
 801d66a:	4798      	blx	r3
}
 801d66c:	bf00      	nop
 801d66e:	3708      	adds	r7, #8
 801d670:	46bd      	mov	sp, r7
 801d672:	bd80      	pop	{r7, pc}
 801d674:	20000088 	.word	0x20000088

0801d678 <json_array_append_value>:
    }
    array->count = 0;
    return JSONSuccess;
}

JSON_Status json_array_append_value(JSON_Array *array, JSON_Value *value) {
 801d678:	b580      	push	{r7, lr}
 801d67a:	b082      	sub	sp, #8
 801d67c:	af00      	add	r7, sp, #0
 801d67e:	6078      	str	r0, [r7, #4]
 801d680:	6039      	str	r1, [r7, #0]
    if (array == NULL || value == NULL || value->parent != NULL) {
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	2b00      	cmp	r3, #0
 801d686:	d006      	beq.n	801d696 <json_array_append_value+0x1e>
 801d688:	683b      	ldr	r3, [r7, #0]
 801d68a:	2b00      	cmp	r3, #0
 801d68c:	d003      	beq.n	801d696 <json_array_append_value+0x1e>
 801d68e:	683b      	ldr	r3, [r7, #0]
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	2b00      	cmp	r3, #0
 801d694:	d002      	beq.n	801d69c <json_array_append_value+0x24>
        return JSONFailure;
 801d696:	f04f 33ff 	mov.w	r3, #4294967295
 801d69a:	e004      	b.n	801d6a6 <json_array_append_value+0x2e>
    }
    return json_array_add(array, value);
 801d69c:	6839      	ldr	r1, [r7, #0]
 801d69e:	6878      	ldr	r0, [r7, #4]
 801d6a0:	f7fd fdda 	bl	801b258 <json_array_add>
 801d6a4:	4603      	mov	r3, r0
}
 801d6a6:	4618      	mov	r0, r3
 801d6a8:	3708      	adds	r7, #8
 801d6aa:	46bd      	mov	sp, r7
 801d6ac:	bd80      	pop	{r7, pc}

0801d6ae <json_array_append_number>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_array_append_number(JSON_Array *array, double number) {
 801d6ae:	b580      	push	{r7, lr}
 801d6b0:	b086      	sub	sp, #24
 801d6b2:	af00      	add	r7, sp, #0
 801d6b4:	60f8      	str	r0, [r7, #12]
 801d6b6:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801d6ba:	ed97 0b00 	vldr	d0, [r7]
 801d6be:	f7ff fe51 	bl	801d364 <json_value_init_number>
 801d6c2:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801d6c4:	697b      	ldr	r3, [r7, #20]
 801d6c6:	2b00      	cmp	r3, #0
 801d6c8:	d102      	bne.n	801d6d0 <json_array_append_number+0x22>
        return JSONFailure;
 801d6ca:	f04f 33ff 	mov.w	r3, #4294967295
 801d6ce:	e00e      	b.n	801d6ee <json_array_append_number+0x40>
    }
    if (json_array_append_value(array, value) == JSONFailure) {
 801d6d0:	6979      	ldr	r1, [r7, #20]
 801d6d2:	68f8      	ldr	r0, [r7, #12]
 801d6d4:	f7ff ffd0 	bl	801d678 <json_array_append_value>
 801d6d8:	4603      	mov	r3, r0
 801d6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d6de:	d105      	bne.n	801d6ec <json_array_append_number+0x3e>
        json_value_free(value);
 801d6e0:	6978      	ldr	r0, [r7, #20]
 801d6e2:	f7ff fd83 	bl	801d1ec <json_value_free>
        return JSONFailure;
 801d6e6:	f04f 33ff 	mov.w	r3, #4294967295
 801d6ea:	e000      	b.n	801d6ee <json_array_append_number+0x40>
    }
    return JSONSuccess;
 801d6ec:	2300      	movs	r3, #0
}
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	3718      	adds	r7, #24
 801d6f2:	46bd      	mov	sp, r7
 801d6f4:	bd80      	pop	{r7, pc}

0801d6f6 <json_object_set_value>:
        return JSONFailure;
    }
    return JSONSuccess;
}

JSON_Status json_object_set_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801d6f6:	b580      	push	{r7, lr}
 801d6f8:	b086      	sub	sp, #24
 801d6fa:	af00      	add	r7, sp, #0
 801d6fc:	60f8      	str	r0, [r7, #12]
 801d6fe:	60b9      	str	r1, [r7, #8]
 801d700:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 801d702:	2300      	movs	r3, #0
 801d704:	617b      	str	r3, [r7, #20]
    JSON_Value *old_value;
    if (object == NULL || name == NULL || value == NULL || value->parent != NULL) {
 801d706:	68fb      	ldr	r3, [r7, #12]
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d009      	beq.n	801d720 <json_object_set_value+0x2a>
 801d70c:	68bb      	ldr	r3, [r7, #8]
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d006      	beq.n	801d720 <json_object_set_value+0x2a>
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	2b00      	cmp	r3, #0
 801d716:	d003      	beq.n	801d720 <json_object_set_value+0x2a>
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	681b      	ldr	r3, [r3, #0]
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d002      	beq.n	801d726 <json_object_set_value+0x30>
        return JSONFailure;
 801d720:	f04f 33ff 	mov.w	r3, #4294967295
 801d724:	e039      	b.n	801d79a <json_object_set_value+0xa4>
    }
    old_value = json_object_get_value(object, name);
 801d726:	68b9      	ldr	r1, [r7, #8]
 801d728:	68f8      	ldr	r0, [r7, #12]
 801d72a:	f7ff fbd1 	bl	801ced0 <json_object_get_value>
 801d72e:	6138      	str	r0, [r7, #16]
    if (old_value != NULL) { /* free and overwrite old value */
 801d730:	693b      	ldr	r3, [r7, #16]
 801d732:	2b00      	cmp	r3, #0
 801d734:	d02b      	beq.n	801d78e <json_object_set_value+0x98>
        json_value_free(old_value);
 801d736:	6938      	ldr	r0, [r7, #16]
 801d738:	f7ff fd58 	bl	801d1ec <json_value_free>
        for (i = 0; i < json_object_get_count(object); i++) {
 801d73c:	2300      	movs	r3, #0
 801d73e:	617b      	str	r3, [r7, #20]
 801d740:	e01e      	b.n	801d780 <json_object_set_value+0x8a>
            if (strcmp(object->names[i], name) == 0) {
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	685a      	ldr	r2, [r3, #4]
 801d746:	697b      	ldr	r3, [r7, #20]
 801d748:	009b      	lsls	r3, r3, #2
 801d74a:	4413      	add	r3, r2
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	68b9      	ldr	r1, [r7, #8]
 801d750:	4618      	mov	r0, r3
 801d752:	f7e2 fd55 	bl	8000200 <strcmp>
 801d756:	4603      	mov	r3, r0
 801d758:	2b00      	cmp	r3, #0
 801d75a:	d10e      	bne.n	801d77a <json_object_set_value+0x84>
                value->parent = json_object_get_wrapping_value(object);
 801d75c:	68f8      	ldr	r0, [r7, #12]
 801d75e:	f7ff fc65 	bl	801d02c <json_object_get_wrapping_value>
 801d762:	4602      	mov	r2, r0
 801d764:	687b      	ldr	r3, [r7, #4]
 801d766:	601a      	str	r2, [r3, #0]
                object->values[i] = value;
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	689a      	ldr	r2, [r3, #8]
 801d76c:	697b      	ldr	r3, [r7, #20]
 801d76e:	009b      	lsls	r3, r3, #2
 801d770:	4413      	add	r3, r2
 801d772:	687a      	ldr	r2, [r7, #4]
 801d774:	601a      	str	r2, [r3, #0]
                return JSONSuccess;
 801d776:	2300      	movs	r3, #0
 801d778:	e00f      	b.n	801d79a <json_object_set_value+0xa4>
        for (i = 0; i < json_object_get_count(object); i++) {
 801d77a:	697b      	ldr	r3, [r7, #20]
 801d77c:	3301      	adds	r3, #1
 801d77e:	617b      	str	r3, [r7, #20]
 801d780:	68f8      	ldr	r0, [r7, #12]
 801d782:	f7ff fc27 	bl	801cfd4 <json_object_get_count>
 801d786:	4602      	mov	r2, r0
 801d788:	697b      	ldr	r3, [r7, #20]
 801d78a:	4293      	cmp	r3, r2
 801d78c:	d3d9      	bcc.n	801d742 <json_object_set_value+0x4c>
            }
        }
    }
    /* add new key value pair */
    return json_object_add(object, name, value);
 801d78e:	687a      	ldr	r2, [r7, #4]
 801d790:	68b9      	ldr	r1, [r7, #8]
 801d792:	68f8      	ldr	r0, [r7, #12]
 801d794:	f7fd fb1a 	bl	801adcc <json_object_add>
 801d798:	4603      	mov	r3, r0
}
 801d79a:	4618      	mov	r0, r3
 801d79c:	3718      	adds	r7, #24
 801d79e:	46bd      	mov	sp, r7
 801d7a0:	bd80      	pop	{r7, pc}

0801d7a2 <json_object_dotset_value>:

JSON_Status json_object_set_null(JSON_Object *object, const char *name) {
    return json_object_set_value(object, name, json_value_init_null());
}

JSON_Status json_object_dotset_value(JSON_Object *object, const char *name, JSON_Value *value) {
 801d7a2:	b580      	push	{r7, lr}
 801d7a4:	b08c      	sub	sp, #48	; 0x30
 801d7a6:	af00      	add	r7, sp, #0
 801d7a8:	60f8      	str	r0, [r7, #12]
 801d7aa:	60b9      	str	r1, [r7, #8]
 801d7ac:	607a      	str	r2, [r7, #4]
    const char *dot_pos = NULL;
 801d7ae:	2300      	movs	r3, #0
 801d7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    JSON_Value *temp_value = NULL, *new_value = NULL;
 801d7b2:	2300      	movs	r3, #0
 801d7b4:	62bb      	str	r3, [r7, #40]	; 0x28
 801d7b6:	2300      	movs	r3, #0
 801d7b8:	627b      	str	r3, [r7, #36]	; 0x24
    JSON_Object *temp_object = NULL, *new_object = NULL;
 801d7ba:	2300      	movs	r3, #0
 801d7bc:	623b      	str	r3, [r7, #32]
 801d7be:	2300      	movs	r3, #0
 801d7c0:	61fb      	str	r3, [r7, #28]
    JSON_Status status = JSONFailure;
 801d7c2:	f04f 33ff 	mov.w	r3, #4294967295
 801d7c6:	61bb      	str	r3, [r7, #24]
    size_t name_len = 0;
 801d7c8:	2300      	movs	r3, #0
 801d7ca:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
 801d7cc:	68fb      	ldr	r3, [r7, #12]
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d005      	beq.n	801d7de <json_object_dotset_value+0x3c>
 801d7d2:	68bb      	ldr	r3, [r7, #8]
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	d002      	beq.n	801d7de <json_object_dotset_value+0x3c>
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	d102      	bne.n	801d7e4 <json_object_dotset_value+0x42>
        return JSONFailure;
 801d7de:	f04f 33ff 	mov.w	r3, #4294967295
 801d7e2:	e067      	b.n	801d8b4 <json_object_dotset_value+0x112>
    }
    dot_pos = strchr(name, '.');
 801d7e4:	212e      	movs	r1, #46	; 0x2e
 801d7e6:	68b8      	ldr	r0, [r7, #8]
 801d7e8:	f001 fa5e 	bl	801eca8 <strchr>
 801d7ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (dot_pos == NULL) {
 801d7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	d106      	bne.n	801d802 <json_object_dotset_value+0x60>
        return json_object_set_value(object, name, value);
 801d7f4:	687a      	ldr	r2, [r7, #4]
 801d7f6:	68b9      	ldr	r1, [r7, #8]
 801d7f8:	68f8      	ldr	r0, [r7, #12]
 801d7fa:	f7ff ff7c 	bl	801d6f6 <json_object_set_value>
 801d7fe:	4603      	mov	r3, r0
 801d800:	e058      	b.n	801d8b4 <json_object_dotset_value+0x112>
    }
    name_len = dot_pos - name;
 801d802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d804:	68bb      	ldr	r3, [r7, #8]
 801d806:	1ad3      	subs	r3, r2, r3
 801d808:	617b      	str	r3, [r7, #20]
    temp_value = json_object_getn_value(object, name, name_len);
 801d80a:	697a      	ldr	r2, [r7, #20]
 801d80c:	68b9      	ldr	r1, [r7, #8]
 801d80e:	68f8      	ldr	r0, [r7, #12]
 801d810:	f7fd fbd8 	bl	801afc4 <json_object_getn_value>
 801d814:	62b8      	str	r0, [r7, #40]	; 0x28
    if (temp_value) {
 801d816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d818:	2b00      	cmp	r3, #0
 801d81a:	d015      	beq.n	801d848 <json_object_dotset_value+0xa6>
        /* Don't overwrite existing non-object (unlike json_object_set_value, but it shouldn't be changed at this point) */
        if (json_value_get_type(temp_value) != JSONObject) {
 801d81c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d81e:	f7ff fc6e 	bl	801d0fe <json_value_get_type>
 801d822:	4603      	mov	r3, r0
 801d824:	2b04      	cmp	r3, #4
 801d826:	d002      	beq.n	801d82e <json_object_dotset_value+0x8c>
            return JSONFailure;
 801d828:	f04f 33ff 	mov.w	r3, #4294967295
 801d82c:	e042      	b.n	801d8b4 <json_object_dotset_value+0x112>
        }
        temp_object = json_value_get_object(temp_value);
 801d82e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d830:	f7ff fc77 	bl	801d122 <json_value_get_object>
 801d834:	6238      	str	r0, [r7, #32]
        return json_object_dotset_value(temp_object, dot_pos + 1, value);
 801d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d838:	3301      	adds	r3, #1
 801d83a:	687a      	ldr	r2, [r7, #4]
 801d83c:	4619      	mov	r1, r3
 801d83e:	6a38      	ldr	r0, [r7, #32]
 801d840:	f7ff ffaf 	bl	801d7a2 <json_object_dotset_value>
 801d844:	4603      	mov	r3, r0
 801d846:	e035      	b.n	801d8b4 <json_object_dotset_value+0x112>
    }
    new_value = json_value_init_object();
 801d848:	f7ff fcfe 	bl	801d248 <json_value_init_object>
 801d84c:	6278      	str	r0, [r7, #36]	; 0x24
    if (new_value == NULL) {
 801d84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d850:	2b00      	cmp	r3, #0
 801d852:	d102      	bne.n	801d85a <json_object_dotset_value+0xb8>
        return JSONFailure;
 801d854:	f04f 33ff 	mov.w	r3, #4294967295
 801d858:	e02c      	b.n	801d8b4 <json_object_dotset_value+0x112>
    }
    new_object = json_value_get_object(new_value);
 801d85a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d85c:	f7ff fc61 	bl	801d122 <json_value_get_object>
 801d860:	61f8      	str	r0, [r7, #28]
    status = json_object_dotset_value(new_object, dot_pos + 1, value);
 801d862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d864:	3301      	adds	r3, #1
 801d866:	687a      	ldr	r2, [r7, #4]
 801d868:	4619      	mov	r1, r3
 801d86a:	69f8      	ldr	r0, [r7, #28]
 801d86c:	f7ff ff99 	bl	801d7a2 <json_object_dotset_value>
 801d870:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801d872:	69bb      	ldr	r3, [r7, #24]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d005      	beq.n	801d884 <json_object_dotset_value+0xe2>
        json_value_free(new_value);
 801d878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d87a:	f7ff fcb7 	bl	801d1ec <json_value_free>
        return JSONFailure;
 801d87e:	f04f 33ff 	mov.w	r3, #4294967295
 801d882:	e017      	b.n	801d8b4 <json_object_dotset_value+0x112>
    }
    status = json_object_addn(object, name, name_len, new_value);
 801d884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d886:	697a      	ldr	r2, [r7, #20]
 801d888:	68b9      	ldr	r1, [r7, #8]
 801d88a:	68f8      	ldr	r0, [r7, #12]
 801d88c:	f7fd fab8 	bl	801ae00 <json_object_addn>
 801d890:	61b8      	str	r0, [r7, #24]
    if (status != JSONSuccess) {
 801d892:	69bb      	ldr	r3, [r7, #24]
 801d894:	2b00      	cmp	r3, #0
 801d896:	d00c      	beq.n	801d8b2 <json_object_dotset_value+0x110>
        json_object_dotremove_internal(new_object, dot_pos + 1, 0);
 801d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d89a:	3301      	adds	r3, #1
 801d89c:	2200      	movs	r2, #0
 801d89e:	4619      	mov	r1, r3
 801d8a0:	69f8      	ldr	r0, [r7, #28]
 801d8a2:	f7fd fc43 	bl	801b12c <json_object_dotremove_internal>
        json_value_free(new_value);
 801d8a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d8a8:	f7ff fca0 	bl	801d1ec <json_value_free>
        return JSONFailure;
 801d8ac:	f04f 33ff 	mov.w	r3, #4294967295
 801d8b0:	e000      	b.n	801d8b4 <json_object_dotset_value+0x112>
    }
    return JSONSuccess;
 801d8b2:	2300      	movs	r3, #0
}
 801d8b4:	4618      	mov	r0, r3
 801d8b6:	3730      	adds	r7, #48	; 0x30
 801d8b8:	46bd      	mov	sp, r7
 801d8ba:	bd80      	pop	{r7, pc}

0801d8bc <json_object_dotset_string>:

JSON_Status json_object_dotset_string(JSON_Object *object, const char *name, const char *string) {
 801d8bc:	b580      	push	{r7, lr}
 801d8be:	b086      	sub	sp, #24
 801d8c0:	af00      	add	r7, sp, #0
 801d8c2:	60f8      	str	r0, [r7, #12]
 801d8c4:	60b9      	str	r1, [r7, #8]
 801d8c6:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_string(string);
 801d8c8:	6878      	ldr	r0, [r7, #4]
 801d8ca:	f7ff fd15 	bl	801d2f8 <json_value_init_string>
 801d8ce:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801d8d0:	697b      	ldr	r3, [r7, #20]
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	d102      	bne.n	801d8dc <json_object_dotset_string+0x20>
        return JSONFailure;
 801d8d6:	f04f 33ff 	mov.w	r3, #4294967295
 801d8da:	e00f      	b.n	801d8fc <json_object_dotset_string+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801d8dc:	697a      	ldr	r2, [r7, #20]
 801d8de:	68b9      	ldr	r1, [r7, #8]
 801d8e0:	68f8      	ldr	r0, [r7, #12]
 801d8e2:	f7ff ff5e 	bl	801d7a2 <json_object_dotset_value>
 801d8e6:	4603      	mov	r3, r0
 801d8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d8ec:	d105      	bne.n	801d8fa <json_object_dotset_string+0x3e>
        json_value_free(value);
 801d8ee:	6978      	ldr	r0, [r7, #20]
 801d8f0:	f7ff fc7c 	bl	801d1ec <json_value_free>
        return JSONFailure;
 801d8f4:	f04f 33ff 	mov.w	r3, #4294967295
 801d8f8:	e000      	b.n	801d8fc <json_object_dotset_string+0x40>
    }
    return JSONSuccess;
 801d8fa:	2300      	movs	r3, #0
}
 801d8fc:	4618      	mov	r0, r3
 801d8fe:	3718      	adds	r7, #24
 801d900:	46bd      	mov	sp, r7
 801d902:	bd80      	pop	{r7, pc}

0801d904 <json_object_dotset_number>:

JSON_Status json_object_dotset_number(JSON_Object *object, const char *name, double number) {
 801d904:	b580      	push	{r7, lr}
 801d906:	b086      	sub	sp, #24
 801d908:	af00      	add	r7, sp, #0
 801d90a:	60f8      	str	r0, [r7, #12]
 801d90c:	60b9      	str	r1, [r7, #8]
 801d90e:	ed87 0b00 	vstr	d0, [r7]
    JSON_Value *value = json_value_init_number(number);
 801d912:	ed97 0b00 	vldr	d0, [r7]
 801d916:	f7ff fd25 	bl	801d364 <json_value_init_number>
 801d91a:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801d91c:	697b      	ldr	r3, [r7, #20]
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d102      	bne.n	801d928 <json_object_dotset_number+0x24>
        return JSONFailure;
 801d922:	f04f 33ff 	mov.w	r3, #4294967295
 801d926:	e00f      	b.n	801d948 <json_object_dotset_number+0x44>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801d928:	697a      	ldr	r2, [r7, #20]
 801d92a:	68b9      	ldr	r1, [r7, #8]
 801d92c:	68f8      	ldr	r0, [r7, #12]
 801d92e:	f7ff ff38 	bl	801d7a2 <json_object_dotset_value>
 801d932:	4603      	mov	r3, r0
 801d934:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d938:	d105      	bne.n	801d946 <json_object_dotset_number+0x42>
        json_value_free(value);
 801d93a:	6978      	ldr	r0, [r7, #20]
 801d93c:	f7ff fc56 	bl	801d1ec <json_value_free>
        return JSONFailure;
 801d940:	f04f 33ff 	mov.w	r3, #4294967295
 801d944:	e000      	b.n	801d948 <json_object_dotset_number+0x44>
    }
    return JSONSuccess;
 801d946:	2300      	movs	r3, #0
}
 801d948:	4618      	mov	r0, r3
 801d94a:	3718      	adds	r7, #24
 801d94c:	46bd      	mov	sp, r7
 801d94e:	bd80      	pop	{r7, pc}

0801d950 <json_object_dotset_boolean>:

JSON_Status json_object_dotset_boolean(JSON_Object *object, const char *name, int boolean) {
 801d950:	b580      	push	{r7, lr}
 801d952:	b086      	sub	sp, #24
 801d954:	af00      	add	r7, sp, #0
 801d956:	60f8      	str	r0, [r7, #12]
 801d958:	60b9      	str	r1, [r7, #8]
 801d95a:	607a      	str	r2, [r7, #4]
    JSON_Value *value = json_value_init_boolean(boolean);
 801d95c:	6878      	ldr	r0, [r7, #4]
 801d95e:	f7ff fd53 	bl	801d408 <json_value_init_boolean>
 801d962:	6178      	str	r0, [r7, #20]
    if (value == NULL) {
 801d964:	697b      	ldr	r3, [r7, #20]
 801d966:	2b00      	cmp	r3, #0
 801d968:	d102      	bne.n	801d970 <json_object_dotset_boolean+0x20>
        return JSONFailure;
 801d96a:	f04f 33ff 	mov.w	r3, #4294967295
 801d96e:	e00f      	b.n	801d990 <json_object_dotset_boolean+0x40>
    }
    if (json_object_dotset_value(object, name, value) == JSONFailure) {
 801d970:	697a      	ldr	r2, [r7, #20]
 801d972:	68b9      	ldr	r1, [r7, #8]
 801d974:	68f8      	ldr	r0, [r7, #12]
 801d976:	f7ff ff14 	bl	801d7a2 <json_object_dotset_value>
 801d97a:	4603      	mov	r3, r0
 801d97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d980:	d105      	bne.n	801d98e <json_object_dotset_boolean+0x3e>
        json_value_free(value);
 801d982:	6978      	ldr	r0, [r7, #20]
 801d984:	f7ff fc32 	bl	801d1ec <json_value_free>
        return JSONFailure;
 801d988:	f04f 33ff 	mov.w	r3, #4294967295
 801d98c:	e000      	b.n	801d990 <json_object_dotset_boolean+0x40>
    }
    return JSONSuccess;
 801d98e:	2300      	movs	r3, #0
}
 801d990:	4618      	mov	r0, r3
 801d992:	3718      	adds	r7, #24
 801d994:	46bd      	mov	sp, r7
 801d996:	bd80      	pop	{r7, pc}

0801d998 <json_set_allocation_functions>:

int json_boolean(const JSON_Value *value) {
    return json_value_get_boolean(value);
}

void json_set_allocation_functions(JSON_Malloc_Function malloc_fun, JSON_Free_Function free_fun) {
 801d998:	b480      	push	{r7}
 801d99a:	b083      	sub	sp, #12
 801d99c:	af00      	add	r7, sp, #0
 801d99e:	6078      	str	r0, [r7, #4]
 801d9a0:	6039      	str	r1, [r7, #0]
    parson_malloc = malloc_fun;
 801d9a2:	4a06      	ldr	r2, [pc, #24]	; (801d9bc <json_set_allocation_functions+0x24>)
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	6013      	str	r3, [r2, #0]
    parson_free = free_fun;
 801d9a8:	4a05      	ldr	r2, [pc, #20]	; (801d9c0 <json_set_allocation_functions+0x28>)
 801d9aa:	683b      	ldr	r3, [r7, #0]
 801d9ac:	6013      	str	r3, [r2, #0]
}
 801d9ae:	bf00      	nop
 801d9b0:	370c      	adds	r7, #12
 801d9b2:	46bd      	mov	sp, r7
 801d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9b8:	4770      	bx	lr
 801d9ba:	bf00      	nop
 801d9bc:	20000084 	.word	0x20000084
 801d9c0:	20000088 	.word	0x20000088

0801d9c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801d9c4:	480d      	ldr	r0, [pc, #52]	; (801d9fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801d9c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 801d9c8:	f7e7 fb30 	bl	800502c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801d9cc:	480c      	ldr	r0, [pc, #48]	; (801da00 <LoopForever+0x6>)
  ldr r1, =_edata
 801d9ce:	490d      	ldr	r1, [pc, #52]	; (801da04 <LoopForever+0xa>)
  ldr r2, =_sidata
 801d9d0:	4a0d      	ldr	r2, [pc, #52]	; (801da08 <LoopForever+0xe>)
  movs r3, #0
 801d9d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801d9d4:	e002      	b.n	801d9dc <LoopCopyDataInit>

0801d9d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801d9d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801d9d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801d9da:	3304      	adds	r3, #4

0801d9dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801d9dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801d9de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801d9e0:	d3f9      	bcc.n	801d9d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801d9e2:	4a0a      	ldr	r2, [pc, #40]	; (801da0c <LoopForever+0x12>)
  ldr r4, =_ebss
 801d9e4:	4c0a      	ldr	r4, [pc, #40]	; (801da10 <LoopForever+0x16>)
  movs r3, #0
 801d9e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 801d9e8:	e001      	b.n	801d9ee <LoopFillZerobss>

0801d9ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801d9ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801d9ec:	3204      	adds	r2, #4

0801d9ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801d9ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801d9f0:	d3fb      	bcc.n	801d9ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 801d9f2:	f000 fa91 	bl	801df18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 801d9f6:	f7e5 f895 	bl	8002b24 <main>

0801d9fa <LoopForever>:

LoopForever:
    b LoopForever
 801d9fa:	e7fe      	b.n	801d9fa <LoopForever>
  ldr   r0, =_estack
 801d9fc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 801da00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801da04:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 801da08:	080232e4 	.word	0x080232e4
  ldr r2, =_sbss
 801da0c:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 801da10:	20012cc4 	.word	0x20012cc4

0801da14 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 801da14:	e7fe      	b.n	801da14 <ADC1_IRQHandler>
	...

0801da18 <_sbrk>:




caddr_t _sbrk(int incr)
{
 801da18:	b580      	push	{r7, lr}
 801da1a:	b084      	sub	sp, #16
 801da1c:	af00      	add	r7, sp, #0
 801da1e:	6078      	str	r0, [r7, #4]
	char *prev_heap_end;
#ifdef FreeRTOS
	char *min_stack_ptr;
#endif

	if (heap_end == 0)
 801da20:	4b15      	ldr	r3, [pc, #84]	; (801da78 <_sbrk+0x60>)
 801da22:	681b      	ldr	r3, [r3, #0]
 801da24:	2b00      	cmp	r3, #0
 801da26:	d102      	bne.n	801da2e <_sbrk+0x16>
		heap_end = &end;
 801da28:	4b13      	ldr	r3, [pc, #76]	; (801da78 <_sbrk+0x60>)
 801da2a:	4a14      	ldr	r2, [pc, #80]	; (801da7c <_sbrk+0x64>)
 801da2c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801da2e:	4b12      	ldr	r3, [pc, #72]	; (801da78 <_sbrk+0x60>)
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	60fb      	str	r3, [r7, #12]

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 801da34:	4b12      	ldr	r3, [pc, #72]	; (801da80 <_sbrk+0x68>)
 801da36:	681b      	ldr	r3, [r3, #0]
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	60bb      	str	r3, [r7, #8]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 801da3c:	68bb      	ldr	r3, [r7, #8]
 801da3e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 801da42:	60bb      	str	r3, [r7, #8]

	if (heap_end + incr > min_stack_ptr)
 801da44:	4b0c      	ldr	r3, [pc, #48]	; (801da78 <_sbrk+0x60>)
 801da46:	681a      	ldr	r2, [r3, #0]
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	4413      	add	r3, r2
 801da4c:	68ba      	ldr	r2, [r7, #8]
 801da4e:	429a      	cmp	r2, r3
 801da50:	d207      	bcs.n	801da62 <_sbrk+0x4a>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801da52:	f000 f8a3 	bl	801db9c <__errno>
 801da56:	4603      	mov	r3, r0
 801da58:	220c      	movs	r2, #12
 801da5a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 801da5c:	f04f 33ff 	mov.w	r3, #4294967295
 801da60:	e006      	b.n	801da70 <_sbrk+0x58>
	}

	heap_end += incr;
 801da62:	4b05      	ldr	r3, [pc, #20]	; (801da78 <_sbrk+0x60>)
 801da64:	681a      	ldr	r2, [r3, #0]
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	4413      	add	r3, r2
 801da6a:	4a03      	ldr	r2, [pc, #12]	; (801da78 <_sbrk+0x60>)
 801da6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801da6e:	68fb      	ldr	r3, [r7, #12]
}
 801da70:	4618      	mov	r0, r3
 801da72:	3710      	adds	r7, #16
 801da74:	46bd      	mov	sp, r7
 801da76:	bd80      	pop	{r7, pc}
 801da78:	20012cb0 	.word	0x20012cb0
 801da7c:	20012cc8 	.word	0x20012cc8
 801da80:	e000ed08 	.word	0xe000ed08

0801da84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801da84:	b480      	push	{r7}
 801da86:	af00      	add	r7, sp, #0
	return 1;
 801da88:	2301      	movs	r3, #1
}
 801da8a:	4618      	mov	r0, r3
 801da8c:	46bd      	mov	sp, r7
 801da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da92:	4770      	bx	lr

0801da94 <_kill>:

int _kill(int pid, int sig)
{
 801da94:	b580      	push	{r7, lr}
 801da96:	b082      	sub	sp, #8
 801da98:	af00      	add	r7, sp, #0
 801da9a:	6078      	str	r0, [r7, #4]
 801da9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801da9e:	f000 f87d 	bl	801db9c <__errno>
 801daa2:	4603      	mov	r3, r0
 801daa4:	2216      	movs	r2, #22
 801daa6:	601a      	str	r2, [r3, #0]
	return -1;
 801daa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801daac:	4618      	mov	r0, r3
 801daae:	3708      	adds	r7, #8
 801dab0:	46bd      	mov	sp, r7
 801dab2:	bd80      	pop	{r7, pc}

0801dab4 <_exit>:

void _exit (int status)
{
 801dab4:	b580      	push	{r7, lr}
 801dab6:	b082      	sub	sp, #8
 801dab8:	af00      	add	r7, sp, #0
 801daba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801dabc:	f04f 31ff 	mov.w	r1, #4294967295
 801dac0:	6878      	ldr	r0, [r7, #4]
 801dac2:	f7ff ffe7 	bl	801da94 <_kill>
	while (1) {}
 801dac6:	e7fe      	b.n	801dac6 <_exit+0x12>

0801dac8 <_write>:
}

int _write(int file, char *ptr, int len)
{
 801dac8:	b580      	push	{r7, lr}
 801daca:	b086      	sub	sp, #24
 801dacc:	af00      	add	r7, sp, #0
 801dace:	60f8      	str	r0, [r7, #12]
 801dad0:	60b9      	str	r1, [r7, #8]
 801dad2:	607a      	str	r2, [r7, #4]
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801dad4:	2300      	movs	r3, #0
 801dad6:	617b      	str	r3, [r7, #20]
 801dad8:	e009      	b.n	801daee <_write+0x26>
		{
		   __io_putchar( *ptr++ );
 801dada:	68bb      	ldr	r3, [r7, #8]
 801dadc:	1c5a      	adds	r2, r3, #1
 801dade:	60ba      	str	r2, [r7, #8]
 801dae0:	781b      	ldrb	r3, [r3, #0]
 801dae2:	4618      	mov	r0, r3
 801dae4:	f3af 8000 	nop.w
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 801dae8:	697b      	ldr	r3, [r7, #20]
 801daea:	3301      	adds	r3, #1
 801daec:	617b      	str	r3, [r7, #20]
 801daee:	697a      	ldr	r2, [r7, #20]
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	429a      	cmp	r2, r3
 801daf4:	dbf1      	blt.n	801dada <_write+0x12>
		}
	return len;
 801daf6:	687b      	ldr	r3, [r7, #4]
}
 801daf8:	4618      	mov	r0, r3
 801dafa:	3718      	adds	r7, #24
 801dafc:	46bd      	mov	sp, r7
 801dafe:	bd80      	pop	{r7, pc}

0801db00 <_close>:

int _close(int file)
{
 801db00:	b480      	push	{r7}
 801db02:	b083      	sub	sp, #12
 801db04:	af00      	add	r7, sp, #0
 801db06:	6078      	str	r0, [r7, #4]
	return -1;
 801db08:	f04f 33ff 	mov.w	r3, #4294967295
}
 801db0c:	4618      	mov	r0, r3
 801db0e:	370c      	adds	r7, #12
 801db10:	46bd      	mov	sp, r7
 801db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db16:	4770      	bx	lr

0801db18 <_fstat>:

int _fstat(int file, struct stat *st)
{
 801db18:	b480      	push	{r7}
 801db1a:	b083      	sub	sp, #12
 801db1c:	af00      	add	r7, sp, #0
 801db1e:	6078      	str	r0, [r7, #4]
 801db20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801db22:	683b      	ldr	r3, [r7, #0]
 801db24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801db28:	605a      	str	r2, [r3, #4]
	return 0;
 801db2a:	2300      	movs	r3, #0
}
 801db2c:	4618      	mov	r0, r3
 801db2e:	370c      	adds	r7, #12
 801db30:	46bd      	mov	sp, r7
 801db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db36:	4770      	bx	lr

0801db38 <_isatty>:

int _isatty(int file)
{
 801db38:	b480      	push	{r7}
 801db3a:	b083      	sub	sp, #12
 801db3c:	af00      	add	r7, sp, #0
 801db3e:	6078      	str	r0, [r7, #4]
	return 1;
 801db40:	2301      	movs	r3, #1
}
 801db42:	4618      	mov	r0, r3
 801db44:	370c      	adds	r7, #12
 801db46:	46bd      	mov	sp, r7
 801db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db4c:	4770      	bx	lr

0801db4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801db4e:	b480      	push	{r7}
 801db50:	b085      	sub	sp, #20
 801db52:	af00      	add	r7, sp, #0
 801db54:	60f8      	str	r0, [r7, #12]
 801db56:	60b9      	str	r1, [r7, #8]
 801db58:	607a      	str	r2, [r7, #4]
	return 0;
 801db5a:	2300      	movs	r3, #0
}
 801db5c:	4618      	mov	r0, r3
 801db5e:	3714      	adds	r7, #20
 801db60:	46bd      	mov	sp, r7
 801db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db66:	4770      	bx	lr

0801db68 <_read>:

int _read(int file, char *ptr, int len)
{
 801db68:	b580      	push	{r7, lr}
 801db6a:	b084      	sub	sp, #16
 801db6c:	af00      	add	r7, sp, #0
 801db6e:	60f8      	str	r0, [r7, #12]
 801db70:	60b9      	str	r1, [r7, #8]
 801db72:	607a      	str	r2, [r7, #4]
	/* scanf calls _read() with len=1024, so eat one character at time */
	*ptr = __io_getchar();
 801db74:	f3af 8000 	nop.w
 801db78:	4603      	mov	r3, r0
 801db7a:	b2da      	uxtb	r2, r3
 801db7c:	68bb      	ldr	r3, [r7, #8]
 801db7e:	701a      	strb	r2, [r3, #0]
	return 1;
 801db80:	2301      	movs	r3, #1
}
 801db82:	4618      	mov	r0, r3
 801db84:	3710      	adds	r7, #16
 801db86:	46bd      	mov	sp, r7
 801db88:	bd80      	pop	{r7, pc}
	...

0801db8c <calloc>:
 801db8c:	4b02      	ldr	r3, [pc, #8]	; (801db98 <calloc+0xc>)
 801db8e:	460a      	mov	r2, r1
 801db90:	4601      	mov	r1, r0
 801db92:	6818      	ldr	r0, [r3, #0]
 801db94:	f000 baa6 	b.w	801e0e4 <_calloc_r>
 801db98:	2000008c 	.word	0x2000008c

0801db9c <__errno>:
 801db9c:	4b01      	ldr	r3, [pc, #4]	; (801dba4 <__errno+0x8>)
 801db9e:	6818      	ldr	r0, [r3, #0]
 801dba0:	4770      	bx	lr
 801dba2:	bf00      	nop
 801dba4:	2000008c 	.word	0x2000008c

0801dba8 <__sflush_r>:
 801dba8:	898a      	ldrh	r2, [r1, #12]
 801dbaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbae:	4605      	mov	r5, r0
 801dbb0:	0710      	lsls	r0, r2, #28
 801dbb2:	460c      	mov	r4, r1
 801dbb4:	d458      	bmi.n	801dc68 <__sflush_r+0xc0>
 801dbb6:	684b      	ldr	r3, [r1, #4]
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	dc05      	bgt.n	801dbc8 <__sflush_r+0x20>
 801dbbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	dc02      	bgt.n	801dbc8 <__sflush_r+0x20>
 801dbc2:	2000      	movs	r0, #0
 801dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbca:	2e00      	cmp	r6, #0
 801dbcc:	d0f9      	beq.n	801dbc2 <__sflush_r+0x1a>
 801dbce:	2300      	movs	r3, #0
 801dbd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dbd4:	682f      	ldr	r7, [r5, #0]
 801dbd6:	602b      	str	r3, [r5, #0]
 801dbd8:	d032      	beq.n	801dc40 <__sflush_r+0x98>
 801dbda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dbdc:	89a3      	ldrh	r3, [r4, #12]
 801dbde:	075a      	lsls	r2, r3, #29
 801dbe0:	d505      	bpl.n	801dbee <__sflush_r+0x46>
 801dbe2:	6863      	ldr	r3, [r4, #4]
 801dbe4:	1ac0      	subs	r0, r0, r3
 801dbe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dbe8:	b10b      	cbz	r3, 801dbee <__sflush_r+0x46>
 801dbea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dbec:	1ac0      	subs	r0, r0, r3
 801dbee:	2300      	movs	r3, #0
 801dbf0:	4602      	mov	r2, r0
 801dbf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbf4:	6a21      	ldr	r1, [r4, #32]
 801dbf6:	4628      	mov	r0, r5
 801dbf8:	47b0      	blx	r6
 801dbfa:	1c43      	adds	r3, r0, #1
 801dbfc:	89a3      	ldrh	r3, [r4, #12]
 801dbfe:	d106      	bne.n	801dc0e <__sflush_r+0x66>
 801dc00:	6829      	ldr	r1, [r5, #0]
 801dc02:	291d      	cmp	r1, #29
 801dc04:	d82c      	bhi.n	801dc60 <__sflush_r+0xb8>
 801dc06:	4a2a      	ldr	r2, [pc, #168]	; (801dcb0 <__sflush_r+0x108>)
 801dc08:	40ca      	lsrs	r2, r1
 801dc0a:	07d6      	lsls	r6, r2, #31
 801dc0c:	d528      	bpl.n	801dc60 <__sflush_r+0xb8>
 801dc0e:	2200      	movs	r2, #0
 801dc10:	6062      	str	r2, [r4, #4]
 801dc12:	04d9      	lsls	r1, r3, #19
 801dc14:	6922      	ldr	r2, [r4, #16]
 801dc16:	6022      	str	r2, [r4, #0]
 801dc18:	d504      	bpl.n	801dc24 <__sflush_r+0x7c>
 801dc1a:	1c42      	adds	r2, r0, #1
 801dc1c:	d101      	bne.n	801dc22 <__sflush_r+0x7a>
 801dc1e:	682b      	ldr	r3, [r5, #0]
 801dc20:	b903      	cbnz	r3, 801dc24 <__sflush_r+0x7c>
 801dc22:	6560      	str	r0, [r4, #84]	; 0x54
 801dc24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc26:	602f      	str	r7, [r5, #0]
 801dc28:	2900      	cmp	r1, #0
 801dc2a:	d0ca      	beq.n	801dbc2 <__sflush_r+0x1a>
 801dc2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc30:	4299      	cmp	r1, r3
 801dc32:	d002      	beq.n	801dc3a <__sflush_r+0x92>
 801dc34:	4628      	mov	r0, r5
 801dc36:	f000 fa6b 	bl	801e110 <_free_r>
 801dc3a:	2000      	movs	r0, #0
 801dc3c:	6360      	str	r0, [r4, #52]	; 0x34
 801dc3e:	e7c1      	b.n	801dbc4 <__sflush_r+0x1c>
 801dc40:	6a21      	ldr	r1, [r4, #32]
 801dc42:	2301      	movs	r3, #1
 801dc44:	4628      	mov	r0, r5
 801dc46:	47b0      	blx	r6
 801dc48:	1c41      	adds	r1, r0, #1
 801dc4a:	d1c7      	bne.n	801dbdc <__sflush_r+0x34>
 801dc4c:	682b      	ldr	r3, [r5, #0]
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d0c4      	beq.n	801dbdc <__sflush_r+0x34>
 801dc52:	2b1d      	cmp	r3, #29
 801dc54:	d001      	beq.n	801dc5a <__sflush_r+0xb2>
 801dc56:	2b16      	cmp	r3, #22
 801dc58:	d101      	bne.n	801dc5e <__sflush_r+0xb6>
 801dc5a:	602f      	str	r7, [r5, #0]
 801dc5c:	e7b1      	b.n	801dbc2 <__sflush_r+0x1a>
 801dc5e:	89a3      	ldrh	r3, [r4, #12]
 801dc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc64:	81a3      	strh	r3, [r4, #12]
 801dc66:	e7ad      	b.n	801dbc4 <__sflush_r+0x1c>
 801dc68:	690f      	ldr	r7, [r1, #16]
 801dc6a:	2f00      	cmp	r7, #0
 801dc6c:	d0a9      	beq.n	801dbc2 <__sflush_r+0x1a>
 801dc6e:	0793      	lsls	r3, r2, #30
 801dc70:	680e      	ldr	r6, [r1, #0]
 801dc72:	bf08      	it	eq
 801dc74:	694b      	ldreq	r3, [r1, #20]
 801dc76:	600f      	str	r7, [r1, #0]
 801dc78:	bf18      	it	ne
 801dc7a:	2300      	movne	r3, #0
 801dc7c:	eba6 0807 	sub.w	r8, r6, r7
 801dc80:	608b      	str	r3, [r1, #8]
 801dc82:	f1b8 0f00 	cmp.w	r8, #0
 801dc86:	dd9c      	ble.n	801dbc2 <__sflush_r+0x1a>
 801dc88:	6a21      	ldr	r1, [r4, #32]
 801dc8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dc8c:	4643      	mov	r3, r8
 801dc8e:	463a      	mov	r2, r7
 801dc90:	4628      	mov	r0, r5
 801dc92:	47b0      	blx	r6
 801dc94:	2800      	cmp	r0, #0
 801dc96:	dc06      	bgt.n	801dca6 <__sflush_r+0xfe>
 801dc98:	89a3      	ldrh	r3, [r4, #12]
 801dc9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc9e:	81a3      	strh	r3, [r4, #12]
 801dca0:	f04f 30ff 	mov.w	r0, #4294967295
 801dca4:	e78e      	b.n	801dbc4 <__sflush_r+0x1c>
 801dca6:	4407      	add	r7, r0
 801dca8:	eba8 0800 	sub.w	r8, r8, r0
 801dcac:	e7e9      	b.n	801dc82 <__sflush_r+0xda>
 801dcae:	bf00      	nop
 801dcb0:	20400001 	.word	0x20400001

0801dcb4 <_fflush_r>:
 801dcb4:	b538      	push	{r3, r4, r5, lr}
 801dcb6:	690b      	ldr	r3, [r1, #16]
 801dcb8:	4605      	mov	r5, r0
 801dcba:	460c      	mov	r4, r1
 801dcbc:	b913      	cbnz	r3, 801dcc4 <_fflush_r+0x10>
 801dcbe:	2500      	movs	r5, #0
 801dcc0:	4628      	mov	r0, r5
 801dcc2:	bd38      	pop	{r3, r4, r5, pc}
 801dcc4:	b118      	cbz	r0, 801dcce <_fflush_r+0x1a>
 801dcc6:	6983      	ldr	r3, [r0, #24]
 801dcc8:	b90b      	cbnz	r3, 801dcce <_fflush_r+0x1a>
 801dcca:	f000 f887 	bl	801dddc <__sinit>
 801dcce:	4b14      	ldr	r3, [pc, #80]	; (801dd20 <_fflush_r+0x6c>)
 801dcd0:	429c      	cmp	r4, r3
 801dcd2:	d11b      	bne.n	801dd0c <_fflush_r+0x58>
 801dcd4:	686c      	ldr	r4, [r5, #4]
 801dcd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dcda:	2b00      	cmp	r3, #0
 801dcdc:	d0ef      	beq.n	801dcbe <_fflush_r+0xa>
 801dcde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dce0:	07d0      	lsls	r0, r2, #31
 801dce2:	d404      	bmi.n	801dcee <_fflush_r+0x3a>
 801dce4:	0599      	lsls	r1, r3, #22
 801dce6:	d402      	bmi.n	801dcee <_fflush_r+0x3a>
 801dce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcea:	f000 f954 	bl	801df96 <__retarget_lock_acquire_recursive>
 801dcee:	4628      	mov	r0, r5
 801dcf0:	4621      	mov	r1, r4
 801dcf2:	f7ff ff59 	bl	801dba8 <__sflush_r>
 801dcf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dcf8:	07da      	lsls	r2, r3, #31
 801dcfa:	4605      	mov	r5, r0
 801dcfc:	d4e0      	bmi.n	801dcc0 <_fflush_r+0xc>
 801dcfe:	89a3      	ldrh	r3, [r4, #12]
 801dd00:	059b      	lsls	r3, r3, #22
 801dd02:	d4dd      	bmi.n	801dcc0 <_fflush_r+0xc>
 801dd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dd06:	f000 f947 	bl	801df98 <__retarget_lock_release_recursive>
 801dd0a:	e7d9      	b.n	801dcc0 <_fflush_r+0xc>
 801dd0c:	4b05      	ldr	r3, [pc, #20]	; (801dd24 <_fflush_r+0x70>)
 801dd0e:	429c      	cmp	r4, r3
 801dd10:	d101      	bne.n	801dd16 <_fflush_r+0x62>
 801dd12:	68ac      	ldr	r4, [r5, #8]
 801dd14:	e7df      	b.n	801dcd6 <_fflush_r+0x22>
 801dd16:	4b04      	ldr	r3, [pc, #16]	; (801dd28 <_fflush_r+0x74>)
 801dd18:	429c      	cmp	r4, r3
 801dd1a:	bf08      	it	eq
 801dd1c:	68ec      	ldreq	r4, [r5, #12]
 801dd1e:	e7da      	b.n	801dcd6 <_fflush_r+0x22>
 801dd20:	08022f2c 	.word	0x08022f2c
 801dd24:	08022f4c 	.word	0x08022f4c
 801dd28:	08022f0c 	.word	0x08022f0c

0801dd2c <std>:
 801dd2c:	2300      	movs	r3, #0
 801dd2e:	b510      	push	{r4, lr}
 801dd30:	4604      	mov	r4, r0
 801dd32:	e9c0 3300 	strd	r3, r3, [r0]
 801dd36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dd3a:	6083      	str	r3, [r0, #8]
 801dd3c:	8181      	strh	r1, [r0, #12]
 801dd3e:	6643      	str	r3, [r0, #100]	; 0x64
 801dd40:	81c2      	strh	r2, [r0, #14]
 801dd42:	6183      	str	r3, [r0, #24]
 801dd44:	4619      	mov	r1, r3
 801dd46:	2208      	movs	r2, #8
 801dd48:	305c      	adds	r0, #92	; 0x5c
 801dd4a:	f000 f9c3 	bl	801e0d4 <memset>
 801dd4e:	4b05      	ldr	r3, [pc, #20]	; (801dd64 <std+0x38>)
 801dd50:	6263      	str	r3, [r4, #36]	; 0x24
 801dd52:	4b05      	ldr	r3, [pc, #20]	; (801dd68 <std+0x3c>)
 801dd54:	62a3      	str	r3, [r4, #40]	; 0x28
 801dd56:	4b05      	ldr	r3, [pc, #20]	; (801dd6c <std+0x40>)
 801dd58:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dd5a:	4b05      	ldr	r3, [pc, #20]	; (801dd70 <std+0x44>)
 801dd5c:	6224      	str	r4, [r4, #32]
 801dd5e:	6323      	str	r3, [r4, #48]	; 0x30
 801dd60:	bd10      	pop	{r4, pc}
 801dd62:	bf00      	nop
 801dd64:	0801ec05 	.word	0x0801ec05
 801dd68:	0801ec27 	.word	0x0801ec27
 801dd6c:	0801ec5f 	.word	0x0801ec5f
 801dd70:	0801ec83 	.word	0x0801ec83

0801dd74 <_cleanup_r>:
 801dd74:	4901      	ldr	r1, [pc, #4]	; (801dd7c <_cleanup_r+0x8>)
 801dd76:	f000 b8af 	b.w	801ded8 <_fwalk_reent>
 801dd7a:	bf00      	nop
 801dd7c:	0801dcb5 	.word	0x0801dcb5

0801dd80 <__sfmoreglue>:
 801dd80:	b570      	push	{r4, r5, r6, lr}
 801dd82:	2268      	movs	r2, #104	; 0x68
 801dd84:	1e4d      	subs	r5, r1, #1
 801dd86:	4355      	muls	r5, r2
 801dd88:	460e      	mov	r6, r1
 801dd8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dd8e:	f000 fa2b 	bl	801e1e8 <_malloc_r>
 801dd92:	4604      	mov	r4, r0
 801dd94:	b140      	cbz	r0, 801dda8 <__sfmoreglue+0x28>
 801dd96:	2100      	movs	r1, #0
 801dd98:	e9c0 1600 	strd	r1, r6, [r0]
 801dd9c:	300c      	adds	r0, #12
 801dd9e:	60a0      	str	r0, [r4, #8]
 801dda0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801dda4:	f000 f996 	bl	801e0d4 <memset>
 801dda8:	4620      	mov	r0, r4
 801ddaa:	bd70      	pop	{r4, r5, r6, pc}

0801ddac <__sfp_lock_acquire>:
 801ddac:	4801      	ldr	r0, [pc, #4]	; (801ddb4 <__sfp_lock_acquire+0x8>)
 801ddae:	f000 b8f2 	b.w	801df96 <__retarget_lock_acquire_recursive>
 801ddb2:	bf00      	nop
 801ddb4:	20012cb5 	.word	0x20012cb5

0801ddb8 <__sfp_lock_release>:
 801ddb8:	4801      	ldr	r0, [pc, #4]	; (801ddc0 <__sfp_lock_release+0x8>)
 801ddba:	f000 b8ed 	b.w	801df98 <__retarget_lock_release_recursive>
 801ddbe:	bf00      	nop
 801ddc0:	20012cb5 	.word	0x20012cb5

0801ddc4 <__sinit_lock_acquire>:
 801ddc4:	4801      	ldr	r0, [pc, #4]	; (801ddcc <__sinit_lock_acquire+0x8>)
 801ddc6:	f000 b8e6 	b.w	801df96 <__retarget_lock_acquire_recursive>
 801ddca:	bf00      	nop
 801ddcc:	20012cb6 	.word	0x20012cb6

0801ddd0 <__sinit_lock_release>:
 801ddd0:	4801      	ldr	r0, [pc, #4]	; (801ddd8 <__sinit_lock_release+0x8>)
 801ddd2:	f000 b8e1 	b.w	801df98 <__retarget_lock_release_recursive>
 801ddd6:	bf00      	nop
 801ddd8:	20012cb6 	.word	0x20012cb6

0801dddc <__sinit>:
 801dddc:	b510      	push	{r4, lr}
 801ddde:	4604      	mov	r4, r0
 801dde0:	f7ff fff0 	bl	801ddc4 <__sinit_lock_acquire>
 801dde4:	69a3      	ldr	r3, [r4, #24]
 801dde6:	b11b      	cbz	r3, 801ddf0 <__sinit+0x14>
 801dde8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ddec:	f7ff bff0 	b.w	801ddd0 <__sinit_lock_release>
 801ddf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ddf4:	6523      	str	r3, [r4, #80]	; 0x50
 801ddf6:	4b13      	ldr	r3, [pc, #76]	; (801de44 <__sinit+0x68>)
 801ddf8:	4a13      	ldr	r2, [pc, #76]	; (801de48 <__sinit+0x6c>)
 801ddfa:	681b      	ldr	r3, [r3, #0]
 801ddfc:	62a2      	str	r2, [r4, #40]	; 0x28
 801ddfe:	42a3      	cmp	r3, r4
 801de00:	bf04      	itt	eq
 801de02:	2301      	moveq	r3, #1
 801de04:	61a3      	streq	r3, [r4, #24]
 801de06:	4620      	mov	r0, r4
 801de08:	f000 f820 	bl	801de4c <__sfp>
 801de0c:	6060      	str	r0, [r4, #4]
 801de0e:	4620      	mov	r0, r4
 801de10:	f000 f81c 	bl	801de4c <__sfp>
 801de14:	60a0      	str	r0, [r4, #8]
 801de16:	4620      	mov	r0, r4
 801de18:	f000 f818 	bl	801de4c <__sfp>
 801de1c:	2200      	movs	r2, #0
 801de1e:	60e0      	str	r0, [r4, #12]
 801de20:	2104      	movs	r1, #4
 801de22:	6860      	ldr	r0, [r4, #4]
 801de24:	f7ff ff82 	bl	801dd2c <std>
 801de28:	68a0      	ldr	r0, [r4, #8]
 801de2a:	2201      	movs	r2, #1
 801de2c:	2109      	movs	r1, #9
 801de2e:	f7ff ff7d 	bl	801dd2c <std>
 801de32:	68e0      	ldr	r0, [r4, #12]
 801de34:	2202      	movs	r2, #2
 801de36:	2112      	movs	r1, #18
 801de38:	f7ff ff78 	bl	801dd2c <std>
 801de3c:	2301      	movs	r3, #1
 801de3e:	61a3      	str	r3, [r4, #24]
 801de40:	e7d2      	b.n	801dde8 <__sinit+0xc>
 801de42:	bf00      	nop
 801de44:	08022f6c 	.word	0x08022f6c
 801de48:	0801dd75 	.word	0x0801dd75

0801de4c <__sfp>:
 801de4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de4e:	4607      	mov	r7, r0
 801de50:	f7ff ffac 	bl	801ddac <__sfp_lock_acquire>
 801de54:	4b1e      	ldr	r3, [pc, #120]	; (801ded0 <__sfp+0x84>)
 801de56:	681e      	ldr	r6, [r3, #0]
 801de58:	69b3      	ldr	r3, [r6, #24]
 801de5a:	b913      	cbnz	r3, 801de62 <__sfp+0x16>
 801de5c:	4630      	mov	r0, r6
 801de5e:	f7ff ffbd 	bl	801dddc <__sinit>
 801de62:	3648      	adds	r6, #72	; 0x48
 801de64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801de68:	3b01      	subs	r3, #1
 801de6a:	d503      	bpl.n	801de74 <__sfp+0x28>
 801de6c:	6833      	ldr	r3, [r6, #0]
 801de6e:	b30b      	cbz	r3, 801deb4 <__sfp+0x68>
 801de70:	6836      	ldr	r6, [r6, #0]
 801de72:	e7f7      	b.n	801de64 <__sfp+0x18>
 801de74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801de78:	b9d5      	cbnz	r5, 801deb0 <__sfp+0x64>
 801de7a:	4b16      	ldr	r3, [pc, #88]	; (801ded4 <__sfp+0x88>)
 801de7c:	60e3      	str	r3, [r4, #12]
 801de7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801de82:	6665      	str	r5, [r4, #100]	; 0x64
 801de84:	f000 f886 	bl	801df94 <__retarget_lock_init_recursive>
 801de88:	f7ff ff96 	bl	801ddb8 <__sfp_lock_release>
 801de8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801de90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801de94:	6025      	str	r5, [r4, #0]
 801de96:	61a5      	str	r5, [r4, #24]
 801de98:	2208      	movs	r2, #8
 801de9a:	4629      	mov	r1, r5
 801de9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dea0:	f000 f918 	bl	801e0d4 <memset>
 801dea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801deac:	4620      	mov	r0, r4
 801deae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801deb0:	3468      	adds	r4, #104	; 0x68
 801deb2:	e7d9      	b.n	801de68 <__sfp+0x1c>
 801deb4:	2104      	movs	r1, #4
 801deb6:	4638      	mov	r0, r7
 801deb8:	f7ff ff62 	bl	801dd80 <__sfmoreglue>
 801debc:	4604      	mov	r4, r0
 801debe:	6030      	str	r0, [r6, #0]
 801dec0:	2800      	cmp	r0, #0
 801dec2:	d1d5      	bne.n	801de70 <__sfp+0x24>
 801dec4:	f7ff ff78 	bl	801ddb8 <__sfp_lock_release>
 801dec8:	230c      	movs	r3, #12
 801deca:	603b      	str	r3, [r7, #0]
 801decc:	e7ee      	b.n	801deac <__sfp+0x60>
 801dece:	bf00      	nop
 801ded0:	08022f6c 	.word	0x08022f6c
 801ded4:	ffff0001 	.word	0xffff0001

0801ded8 <_fwalk_reent>:
 801ded8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dedc:	4606      	mov	r6, r0
 801dede:	4688      	mov	r8, r1
 801dee0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dee4:	2700      	movs	r7, #0
 801dee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801deea:	f1b9 0901 	subs.w	r9, r9, #1
 801deee:	d505      	bpl.n	801defc <_fwalk_reent+0x24>
 801def0:	6824      	ldr	r4, [r4, #0]
 801def2:	2c00      	cmp	r4, #0
 801def4:	d1f7      	bne.n	801dee6 <_fwalk_reent+0xe>
 801def6:	4638      	mov	r0, r7
 801def8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801defc:	89ab      	ldrh	r3, [r5, #12]
 801defe:	2b01      	cmp	r3, #1
 801df00:	d907      	bls.n	801df12 <_fwalk_reent+0x3a>
 801df02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801df06:	3301      	adds	r3, #1
 801df08:	d003      	beq.n	801df12 <_fwalk_reent+0x3a>
 801df0a:	4629      	mov	r1, r5
 801df0c:	4630      	mov	r0, r6
 801df0e:	47c0      	blx	r8
 801df10:	4307      	orrs	r7, r0
 801df12:	3568      	adds	r5, #104	; 0x68
 801df14:	e7e9      	b.n	801deea <_fwalk_reent+0x12>
	...

0801df18 <__libc_init_array>:
 801df18:	b570      	push	{r4, r5, r6, lr}
 801df1a:	4d0d      	ldr	r5, [pc, #52]	; (801df50 <__libc_init_array+0x38>)
 801df1c:	4c0d      	ldr	r4, [pc, #52]	; (801df54 <__libc_init_array+0x3c>)
 801df1e:	1b64      	subs	r4, r4, r5
 801df20:	10a4      	asrs	r4, r4, #2
 801df22:	2600      	movs	r6, #0
 801df24:	42a6      	cmp	r6, r4
 801df26:	d109      	bne.n	801df3c <__libc_init_array+0x24>
 801df28:	4d0b      	ldr	r5, [pc, #44]	; (801df58 <__libc_init_array+0x40>)
 801df2a:	4c0c      	ldr	r4, [pc, #48]	; (801df5c <__libc_init_array+0x44>)
 801df2c:	f004 f962 	bl	80221f4 <_init>
 801df30:	1b64      	subs	r4, r4, r5
 801df32:	10a4      	asrs	r4, r4, #2
 801df34:	2600      	movs	r6, #0
 801df36:	42a6      	cmp	r6, r4
 801df38:	d105      	bne.n	801df46 <__libc_init_array+0x2e>
 801df3a:	bd70      	pop	{r4, r5, r6, pc}
 801df3c:	f855 3b04 	ldr.w	r3, [r5], #4
 801df40:	4798      	blx	r3
 801df42:	3601      	adds	r6, #1
 801df44:	e7ee      	b.n	801df24 <__libc_init_array+0xc>
 801df46:	f855 3b04 	ldr.w	r3, [r5], #4
 801df4a:	4798      	blx	r3
 801df4c:	3601      	adds	r6, #1
 801df4e:	e7f2      	b.n	801df36 <__libc_init_array+0x1e>
 801df50:	080232dc 	.word	0x080232dc
 801df54:	080232dc 	.word	0x080232dc
 801df58:	080232dc 	.word	0x080232dc
 801df5c:	080232e0 	.word	0x080232e0

0801df60 <__itoa>:
 801df60:	1e93      	subs	r3, r2, #2
 801df62:	2b22      	cmp	r3, #34	; 0x22
 801df64:	b510      	push	{r4, lr}
 801df66:	460c      	mov	r4, r1
 801df68:	d904      	bls.n	801df74 <__itoa+0x14>
 801df6a:	2300      	movs	r3, #0
 801df6c:	700b      	strb	r3, [r1, #0]
 801df6e:	461c      	mov	r4, r3
 801df70:	4620      	mov	r0, r4
 801df72:	bd10      	pop	{r4, pc}
 801df74:	2a0a      	cmp	r2, #10
 801df76:	d109      	bne.n	801df8c <__itoa+0x2c>
 801df78:	2800      	cmp	r0, #0
 801df7a:	da07      	bge.n	801df8c <__itoa+0x2c>
 801df7c:	232d      	movs	r3, #45	; 0x2d
 801df7e:	700b      	strb	r3, [r1, #0]
 801df80:	4240      	negs	r0, r0
 801df82:	2101      	movs	r1, #1
 801df84:	4421      	add	r1, r4
 801df86:	f001 fd7d 	bl	801fa84 <__utoa>
 801df8a:	e7f1      	b.n	801df70 <__itoa+0x10>
 801df8c:	2100      	movs	r1, #0
 801df8e:	e7f9      	b.n	801df84 <__itoa+0x24>

0801df90 <itoa>:
 801df90:	f7ff bfe6 	b.w	801df60 <__itoa>

0801df94 <__retarget_lock_init_recursive>:
 801df94:	4770      	bx	lr

0801df96 <__retarget_lock_acquire_recursive>:
 801df96:	4770      	bx	lr

0801df98 <__retarget_lock_release_recursive>:
 801df98:	4770      	bx	lr

0801df9a <__swhatbuf_r>:
 801df9a:	b570      	push	{r4, r5, r6, lr}
 801df9c:	460e      	mov	r6, r1
 801df9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dfa2:	2900      	cmp	r1, #0
 801dfa4:	b096      	sub	sp, #88	; 0x58
 801dfa6:	4614      	mov	r4, r2
 801dfa8:	461d      	mov	r5, r3
 801dfaa:	da08      	bge.n	801dfbe <__swhatbuf_r+0x24>
 801dfac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801dfb0:	2200      	movs	r2, #0
 801dfb2:	602a      	str	r2, [r5, #0]
 801dfb4:	061a      	lsls	r2, r3, #24
 801dfb6:	d410      	bmi.n	801dfda <__swhatbuf_r+0x40>
 801dfb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dfbc:	e00e      	b.n	801dfdc <__swhatbuf_r+0x42>
 801dfbe:	466a      	mov	r2, sp
 801dfc0:	f002 fd00 	bl	80209c4 <_fstat_r>
 801dfc4:	2800      	cmp	r0, #0
 801dfc6:	dbf1      	blt.n	801dfac <__swhatbuf_r+0x12>
 801dfc8:	9a01      	ldr	r2, [sp, #4]
 801dfca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dfce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dfd2:	425a      	negs	r2, r3
 801dfd4:	415a      	adcs	r2, r3
 801dfd6:	602a      	str	r2, [r5, #0]
 801dfd8:	e7ee      	b.n	801dfb8 <__swhatbuf_r+0x1e>
 801dfda:	2340      	movs	r3, #64	; 0x40
 801dfdc:	2000      	movs	r0, #0
 801dfde:	6023      	str	r3, [r4, #0]
 801dfe0:	b016      	add	sp, #88	; 0x58
 801dfe2:	bd70      	pop	{r4, r5, r6, pc}

0801dfe4 <__smakebuf_r>:
 801dfe4:	898b      	ldrh	r3, [r1, #12]
 801dfe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dfe8:	079d      	lsls	r5, r3, #30
 801dfea:	4606      	mov	r6, r0
 801dfec:	460c      	mov	r4, r1
 801dfee:	d507      	bpl.n	801e000 <__smakebuf_r+0x1c>
 801dff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dff4:	6023      	str	r3, [r4, #0]
 801dff6:	6123      	str	r3, [r4, #16]
 801dff8:	2301      	movs	r3, #1
 801dffa:	6163      	str	r3, [r4, #20]
 801dffc:	b002      	add	sp, #8
 801dffe:	bd70      	pop	{r4, r5, r6, pc}
 801e000:	ab01      	add	r3, sp, #4
 801e002:	466a      	mov	r2, sp
 801e004:	f7ff ffc9 	bl	801df9a <__swhatbuf_r>
 801e008:	9900      	ldr	r1, [sp, #0]
 801e00a:	4605      	mov	r5, r0
 801e00c:	4630      	mov	r0, r6
 801e00e:	f000 f8eb 	bl	801e1e8 <_malloc_r>
 801e012:	b948      	cbnz	r0, 801e028 <__smakebuf_r+0x44>
 801e014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e018:	059a      	lsls	r2, r3, #22
 801e01a:	d4ef      	bmi.n	801dffc <__smakebuf_r+0x18>
 801e01c:	f023 0303 	bic.w	r3, r3, #3
 801e020:	f043 0302 	orr.w	r3, r3, #2
 801e024:	81a3      	strh	r3, [r4, #12]
 801e026:	e7e3      	b.n	801dff0 <__smakebuf_r+0xc>
 801e028:	4b0d      	ldr	r3, [pc, #52]	; (801e060 <__smakebuf_r+0x7c>)
 801e02a:	62b3      	str	r3, [r6, #40]	; 0x28
 801e02c:	89a3      	ldrh	r3, [r4, #12]
 801e02e:	6020      	str	r0, [r4, #0]
 801e030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e034:	81a3      	strh	r3, [r4, #12]
 801e036:	9b00      	ldr	r3, [sp, #0]
 801e038:	6163      	str	r3, [r4, #20]
 801e03a:	9b01      	ldr	r3, [sp, #4]
 801e03c:	6120      	str	r0, [r4, #16]
 801e03e:	b15b      	cbz	r3, 801e058 <__smakebuf_r+0x74>
 801e040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e044:	4630      	mov	r0, r6
 801e046:	f003 f83f 	bl	80210c8 <_isatty_r>
 801e04a:	b128      	cbz	r0, 801e058 <__smakebuf_r+0x74>
 801e04c:	89a3      	ldrh	r3, [r4, #12]
 801e04e:	f023 0303 	bic.w	r3, r3, #3
 801e052:	f043 0301 	orr.w	r3, r3, #1
 801e056:	81a3      	strh	r3, [r4, #12]
 801e058:	89a0      	ldrh	r0, [r4, #12]
 801e05a:	4305      	orrs	r5, r0
 801e05c:	81a5      	strh	r5, [r4, #12]
 801e05e:	e7cd      	b.n	801dffc <__smakebuf_r+0x18>
 801e060:	0801dd75 	.word	0x0801dd75

0801e064 <malloc>:
 801e064:	4b02      	ldr	r3, [pc, #8]	; (801e070 <malloc+0xc>)
 801e066:	4601      	mov	r1, r0
 801e068:	6818      	ldr	r0, [r3, #0]
 801e06a:	f000 b8bd 	b.w	801e1e8 <_malloc_r>
 801e06e:	bf00      	nop
 801e070:	2000008c 	.word	0x2000008c

0801e074 <free>:
 801e074:	4b02      	ldr	r3, [pc, #8]	; (801e080 <free+0xc>)
 801e076:	4601      	mov	r1, r0
 801e078:	6818      	ldr	r0, [r3, #0]
 801e07a:	f000 b849 	b.w	801e110 <_free_r>
 801e07e:	bf00      	nop
 801e080:	2000008c 	.word	0x2000008c

0801e084 <memcpy>:
 801e084:	440a      	add	r2, r1
 801e086:	4291      	cmp	r1, r2
 801e088:	f100 33ff 	add.w	r3, r0, #4294967295
 801e08c:	d100      	bne.n	801e090 <memcpy+0xc>
 801e08e:	4770      	bx	lr
 801e090:	b510      	push	{r4, lr}
 801e092:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e096:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e09a:	4291      	cmp	r1, r2
 801e09c:	d1f9      	bne.n	801e092 <memcpy+0xe>
 801e09e:	bd10      	pop	{r4, pc}

0801e0a0 <memmove>:
 801e0a0:	4288      	cmp	r0, r1
 801e0a2:	b510      	push	{r4, lr}
 801e0a4:	eb01 0402 	add.w	r4, r1, r2
 801e0a8:	d902      	bls.n	801e0b0 <memmove+0x10>
 801e0aa:	4284      	cmp	r4, r0
 801e0ac:	4623      	mov	r3, r4
 801e0ae:	d807      	bhi.n	801e0c0 <memmove+0x20>
 801e0b0:	1e43      	subs	r3, r0, #1
 801e0b2:	42a1      	cmp	r1, r4
 801e0b4:	d008      	beq.n	801e0c8 <memmove+0x28>
 801e0b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e0ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e0be:	e7f8      	b.n	801e0b2 <memmove+0x12>
 801e0c0:	4402      	add	r2, r0
 801e0c2:	4601      	mov	r1, r0
 801e0c4:	428a      	cmp	r2, r1
 801e0c6:	d100      	bne.n	801e0ca <memmove+0x2a>
 801e0c8:	bd10      	pop	{r4, pc}
 801e0ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e0ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e0d2:	e7f7      	b.n	801e0c4 <memmove+0x24>

0801e0d4 <memset>:
 801e0d4:	4402      	add	r2, r0
 801e0d6:	4603      	mov	r3, r0
 801e0d8:	4293      	cmp	r3, r2
 801e0da:	d100      	bne.n	801e0de <memset+0xa>
 801e0dc:	4770      	bx	lr
 801e0de:	f803 1b01 	strb.w	r1, [r3], #1
 801e0e2:	e7f9      	b.n	801e0d8 <memset+0x4>

0801e0e4 <_calloc_r>:
 801e0e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e0e6:	fba1 2402 	umull	r2, r4, r1, r2
 801e0ea:	b94c      	cbnz	r4, 801e100 <_calloc_r+0x1c>
 801e0ec:	4611      	mov	r1, r2
 801e0ee:	9201      	str	r2, [sp, #4]
 801e0f0:	f000 f87a 	bl	801e1e8 <_malloc_r>
 801e0f4:	9a01      	ldr	r2, [sp, #4]
 801e0f6:	4605      	mov	r5, r0
 801e0f8:	b930      	cbnz	r0, 801e108 <_calloc_r+0x24>
 801e0fa:	4628      	mov	r0, r5
 801e0fc:	b003      	add	sp, #12
 801e0fe:	bd30      	pop	{r4, r5, pc}
 801e100:	220c      	movs	r2, #12
 801e102:	6002      	str	r2, [r0, #0]
 801e104:	2500      	movs	r5, #0
 801e106:	e7f8      	b.n	801e0fa <_calloc_r+0x16>
 801e108:	4621      	mov	r1, r4
 801e10a:	f7ff ffe3 	bl	801e0d4 <memset>
 801e10e:	e7f4      	b.n	801e0fa <_calloc_r+0x16>

0801e110 <_free_r>:
 801e110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e112:	2900      	cmp	r1, #0
 801e114:	d044      	beq.n	801e1a0 <_free_r+0x90>
 801e116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e11a:	9001      	str	r0, [sp, #4]
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	f1a1 0404 	sub.w	r4, r1, #4
 801e122:	bfb8      	it	lt
 801e124:	18e4      	addlt	r4, r4, r3
 801e126:	f003 f807 	bl	8021138 <__malloc_lock>
 801e12a:	4a1e      	ldr	r2, [pc, #120]	; (801e1a4 <_free_r+0x94>)
 801e12c:	9801      	ldr	r0, [sp, #4]
 801e12e:	6813      	ldr	r3, [r2, #0]
 801e130:	b933      	cbnz	r3, 801e140 <_free_r+0x30>
 801e132:	6063      	str	r3, [r4, #4]
 801e134:	6014      	str	r4, [r2, #0]
 801e136:	b003      	add	sp, #12
 801e138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e13c:	f003 b802 	b.w	8021144 <__malloc_unlock>
 801e140:	42a3      	cmp	r3, r4
 801e142:	d908      	bls.n	801e156 <_free_r+0x46>
 801e144:	6825      	ldr	r5, [r4, #0]
 801e146:	1961      	adds	r1, r4, r5
 801e148:	428b      	cmp	r3, r1
 801e14a:	bf01      	itttt	eq
 801e14c:	6819      	ldreq	r1, [r3, #0]
 801e14e:	685b      	ldreq	r3, [r3, #4]
 801e150:	1949      	addeq	r1, r1, r5
 801e152:	6021      	streq	r1, [r4, #0]
 801e154:	e7ed      	b.n	801e132 <_free_r+0x22>
 801e156:	461a      	mov	r2, r3
 801e158:	685b      	ldr	r3, [r3, #4]
 801e15a:	b10b      	cbz	r3, 801e160 <_free_r+0x50>
 801e15c:	42a3      	cmp	r3, r4
 801e15e:	d9fa      	bls.n	801e156 <_free_r+0x46>
 801e160:	6811      	ldr	r1, [r2, #0]
 801e162:	1855      	adds	r5, r2, r1
 801e164:	42a5      	cmp	r5, r4
 801e166:	d10b      	bne.n	801e180 <_free_r+0x70>
 801e168:	6824      	ldr	r4, [r4, #0]
 801e16a:	4421      	add	r1, r4
 801e16c:	1854      	adds	r4, r2, r1
 801e16e:	42a3      	cmp	r3, r4
 801e170:	6011      	str	r1, [r2, #0]
 801e172:	d1e0      	bne.n	801e136 <_free_r+0x26>
 801e174:	681c      	ldr	r4, [r3, #0]
 801e176:	685b      	ldr	r3, [r3, #4]
 801e178:	6053      	str	r3, [r2, #4]
 801e17a:	4421      	add	r1, r4
 801e17c:	6011      	str	r1, [r2, #0]
 801e17e:	e7da      	b.n	801e136 <_free_r+0x26>
 801e180:	d902      	bls.n	801e188 <_free_r+0x78>
 801e182:	230c      	movs	r3, #12
 801e184:	6003      	str	r3, [r0, #0]
 801e186:	e7d6      	b.n	801e136 <_free_r+0x26>
 801e188:	6825      	ldr	r5, [r4, #0]
 801e18a:	1961      	adds	r1, r4, r5
 801e18c:	428b      	cmp	r3, r1
 801e18e:	bf04      	itt	eq
 801e190:	6819      	ldreq	r1, [r3, #0]
 801e192:	685b      	ldreq	r3, [r3, #4]
 801e194:	6063      	str	r3, [r4, #4]
 801e196:	bf04      	itt	eq
 801e198:	1949      	addeq	r1, r1, r5
 801e19a:	6021      	streq	r1, [r4, #0]
 801e19c:	6054      	str	r4, [r2, #4]
 801e19e:	e7ca      	b.n	801e136 <_free_r+0x26>
 801e1a0:	b003      	add	sp, #12
 801e1a2:	bd30      	pop	{r4, r5, pc}
 801e1a4:	20012cb8 	.word	0x20012cb8

0801e1a8 <sbrk_aligned>:
 801e1a8:	b570      	push	{r4, r5, r6, lr}
 801e1aa:	4e0e      	ldr	r6, [pc, #56]	; (801e1e4 <sbrk_aligned+0x3c>)
 801e1ac:	460c      	mov	r4, r1
 801e1ae:	6831      	ldr	r1, [r6, #0]
 801e1b0:	4605      	mov	r5, r0
 801e1b2:	b911      	cbnz	r1, 801e1ba <sbrk_aligned+0x12>
 801e1b4:	f000 fcf6 	bl	801eba4 <_sbrk_r>
 801e1b8:	6030      	str	r0, [r6, #0]
 801e1ba:	4621      	mov	r1, r4
 801e1bc:	4628      	mov	r0, r5
 801e1be:	f000 fcf1 	bl	801eba4 <_sbrk_r>
 801e1c2:	1c43      	adds	r3, r0, #1
 801e1c4:	d00a      	beq.n	801e1dc <sbrk_aligned+0x34>
 801e1c6:	1cc4      	adds	r4, r0, #3
 801e1c8:	f024 0403 	bic.w	r4, r4, #3
 801e1cc:	42a0      	cmp	r0, r4
 801e1ce:	d007      	beq.n	801e1e0 <sbrk_aligned+0x38>
 801e1d0:	1a21      	subs	r1, r4, r0
 801e1d2:	4628      	mov	r0, r5
 801e1d4:	f000 fce6 	bl	801eba4 <_sbrk_r>
 801e1d8:	3001      	adds	r0, #1
 801e1da:	d101      	bne.n	801e1e0 <sbrk_aligned+0x38>
 801e1dc:	f04f 34ff 	mov.w	r4, #4294967295
 801e1e0:	4620      	mov	r0, r4
 801e1e2:	bd70      	pop	{r4, r5, r6, pc}
 801e1e4:	20012cbc 	.word	0x20012cbc

0801e1e8 <_malloc_r>:
 801e1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1ec:	1ccd      	adds	r5, r1, #3
 801e1ee:	f025 0503 	bic.w	r5, r5, #3
 801e1f2:	3508      	adds	r5, #8
 801e1f4:	2d0c      	cmp	r5, #12
 801e1f6:	bf38      	it	cc
 801e1f8:	250c      	movcc	r5, #12
 801e1fa:	2d00      	cmp	r5, #0
 801e1fc:	4607      	mov	r7, r0
 801e1fe:	db01      	blt.n	801e204 <_malloc_r+0x1c>
 801e200:	42a9      	cmp	r1, r5
 801e202:	d905      	bls.n	801e210 <_malloc_r+0x28>
 801e204:	230c      	movs	r3, #12
 801e206:	603b      	str	r3, [r7, #0]
 801e208:	2600      	movs	r6, #0
 801e20a:	4630      	mov	r0, r6
 801e20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e210:	4e2e      	ldr	r6, [pc, #184]	; (801e2cc <_malloc_r+0xe4>)
 801e212:	f002 ff91 	bl	8021138 <__malloc_lock>
 801e216:	6833      	ldr	r3, [r6, #0]
 801e218:	461c      	mov	r4, r3
 801e21a:	bb34      	cbnz	r4, 801e26a <_malloc_r+0x82>
 801e21c:	4629      	mov	r1, r5
 801e21e:	4638      	mov	r0, r7
 801e220:	f7ff ffc2 	bl	801e1a8 <sbrk_aligned>
 801e224:	1c43      	adds	r3, r0, #1
 801e226:	4604      	mov	r4, r0
 801e228:	d14d      	bne.n	801e2c6 <_malloc_r+0xde>
 801e22a:	6834      	ldr	r4, [r6, #0]
 801e22c:	4626      	mov	r6, r4
 801e22e:	2e00      	cmp	r6, #0
 801e230:	d140      	bne.n	801e2b4 <_malloc_r+0xcc>
 801e232:	6823      	ldr	r3, [r4, #0]
 801e234:	4631      	mov	r1, r6
 801e236:	4638      	mov	r0, r7
 801e238:	eb04 0803 	add.w	r8, r4, r3
 801e23c:	f000 fcb2 	bl	801eba4 <_sbrk_r>
 801e240:	4580      	cmp	r8, r0
 801e242:	d13a      	bne.n	801e2ba <_malloc_r+0xd2>
 801e244:	6821      	ldr	r1, [r4, #0]
 801e246:	3503      	adds	r5, #3
 801e248:	1a6d      	subs	r5, r5, r1
 801e24a:	f025 0503 	bic.w	r5, r5, #3
 801e24e:	3508      	adds	r5, #8
 801e250:	2d0c      	cmp	r5, #12
 801e252:	bf38      	it	cc
 801e254:	250c      	movcc	r5, #12
 801e256:	4629      	mov	r1, r5
 801e258:	4638      	mov	r0, r7
 801e25a:	f7ff ffa5 	bl	801e1a8 <sbrk_aligned>
 801e25e:	3001      	adds	r0, #1
 801e260:	d02b      	beq.n	801e2ba <_malloc_r+0xd2>
 801e262:	6823      	ldr	r3, [r4, #0]
 801e264:	442b      	add	r3, r5
 801e266:	6023      	str	r3, [r4, #0]
 801e268:	e00e      	b.n	801e288 <_malloc_r+0xa0>
 801e26a:	6822      	ldr	r2, [r4, #0]
 801e26c:	1b52      	subs	r2, r2, r5
 801e26e:	d41e      	bmi.n	801e2ae <_malloc_r+0xc6>
 801e270:	2a0b      	cmp	r2, #11
 801e272:	d916      	bls.n	801e2a2 <_malloc_r+0xba>
 801e274:	1961      	adds	r1, r4, r5
 801e276:	42a3      	cmp	r3, r4
 801e278:	6025      	str	r5, [r4, #0]
 801e27a:	bf18      	it	ne
 801e27c:	6059      	strne	r1, [r3, #4]
 801e27e:	6863      	ldr	r3, [r4, #4]
 801e280:	bf08      	it	eq
 801e282:	6031      	streq	r1, [r6, #0]
 801e284:	5162      	str	r2, [r4, r5]
 801e286:	604b      	str	r3, [r1, #4]
 801e288:	4638      	mov	r0, r7
 801e28a:	f104 060b 	add.w	r6, r4, #11
 801e28e:	f002 ff59 	bl	8021144 <__malloc_unlock>
 801e292:	f026 0607 	bic.w	r6, r6, #7
 801e296:	1d23      	adds	r3, r4, #4
 801e298:	1af2      	subs	r2, r6, r3
 801e29a:	d0b6      	beq.n	801e20a <_malloc_r+0x22>
 801e29c:	1b9b      	subs	r3, r3, r6
 801e29e:	50a3      	str	r3, [r4, r2]
 801e2a0:	e7b3      	b.n	801e20a <_malloc_r+0x22>
 801e2a2:	6862      	ldr	r2, [r4, #4]
 801e2a4:	42a3      	cmp	r3, r4
 801e2a6:	bf0c      	ite	eq
 801e2a8:	6032      	streq	r2, [r6, #0]
 801e2aa:	605a      	strne	r2, [r3, #4]
 801e2ac:	e7ec      	b.n	801e288 <_malloc_r+0xa0>
 801e2ae:	4623      	mov	r3, r4
 801e2b0:	6864      	ldr	r4, [r4, #4]
 801e2b2:	e7b2      	b.n	801e21a <_malloc_r+0x32>
 801e2b4:	4634      	mov	r4, r6
 801e2b6:	6876      	ldr	r6, [r6, #4]
 801e2b8:	e7b9      	b.n	801e22e <_malloc_r+0x46>
 801e2ba:	230c      	movs	r3, #12
 801e2bc:	603b      	str	r3, [r7, #0]
 801e2be:	4638      	mov	r0, r7
 801e2c0:	f002 ff40 	bl	8021144 <__malloc_unlock>
 801e2c4:	e7a1      	b.n	801e20a <_malloc_r+0x22>
 801e2c6:	6025      	str	r5, [r4, #0]
 801e2c8:	e7de      	b.n	801e288 <_malloc_r+0xa0>
 801e2ca:	bf00      	nop
 801e2cc:	20012cb8 	.word	0x20012cb8

0801e2d0 <__cvt>:
 801e2d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e2d4:	ec55 4b10 	vmov	r4, r5, d0
 801e2d8:	2d00      	cmp	r5, #0
 801e2da:	460e      	mov	r6, r1
 801e2dc:	4619      	mov	r1, r3
 801e2de:	462b      	mov	r3, r5
 801e2e0:	bfbb      	ittet	lt
 801e2e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801e2e6:	461d      	movlt	r5, r3
 801e2e8:	2300      	movge	r3, #0
 801e2ea:	232d      	movlt	r3, #45	; 0x2d
 801e2ec:	700b      	strb	r3, [r1, #0]
 801e2ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e2f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801e2f4:	4691      	mov	r9, r2
 801e2f6:	f023 0820 	bic.w	r8, r3, #32
 801e2fa:	bfbc      	itt	lt
 801e2fc:	4622      	movlt	r2, r4
 801e2fe:	4614      	movlt	r4, r2
 801e300:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e304:	d005      	beq.n	801e312 <__cvt+0x42>
 801e306:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801e30a:	d100      	bne.n	801e30e <__cvt+0x3e>
 801e30c:	3601      	adds	r6, #1
 801e30e:	2102      	movs	r1, #2
 801e310:	e000      	b.n	801e314 <__cvt+0x44>
 801e312:	2103      	movs	r1, #3
 801e314:	ab03      	add	r3, sp, #12
 801e316:	9301      	str	r3, [sp, #4]
 801e318:	ab02      	add	r3, sp, #8
 801e31a:	9300      	str	r3, [sp, #0]
 801e31c:	ec45 4b10 	vmov	d0, r4, r5
 801e320:	4653      	mov	r3, sl
 801e322:	4632      	mov	r2, r6
 801e324:	f001 fd60 	bl	801fde8 <_dtoa_r>
 801e328:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e32c:	4607      	mov	r7, r0
 801e32e:	d102      	bne.n	801e336 <__cvt+0x66>
 801e330:	f019 0f01 	tst.w	r9, #1
 801e334:	d022      	beq.n	801e37c <__cvt+0xac>
 801e336:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e33a:	eb07 0906 	add.w	r9, r7, r6
 801e33e:	d110      	bne.n	801e362 <__cvt+0x92>
 801e340:	783b      	ldrb	r3, [r7, #0]
 801e342:	2b30      	cmp	r3, #48	; 0x30
 801e344:	d10a      	bne.n	801e35c <__cvt+0x8c>
 801e346:	2200      	movs	r2, #0
 801e348:	2300      	movs	r3, #0
 801e34a:	4620      	mov	r0, r4
 801e34c:	4629      	mov	r1, r5
 801e34e:	f7e2 fbe3 	bl	8000b18 <__aeabi_dcmpeq>
 801e352:	b918      	cbnz	r0, 801e35c <__cvt+0x8c>
 801e354:	f1c6 0601 	rsb	r6, r6, #1
 801e358:	f8ca 6000 	str.w	r6, [sl]
 801e35c:	f8da 3000 	ldr.w	r3, [sl]
 801e360:	4499      	add	r9, r3
 801e362:	2200      	movs	r2, #0
 801e364:	2300      	movs	r3, #0
 801e366:	4620      	mov	r0, r4
 801e368:	4629      	mov	r1, r5
 801e36a:	f7e2 fbd5 	bl	8000b18 <__aeabi_dcmpeq>
 801e36e:	b108      	cbz	r0, 801e374 <__cvt+0xa4>
 801e370:	f8cd 900c 	str.w	r9, [sp, #12]
 801e374:	2230      	movs	r2, #48	; 0x30
 801e376:	9b03      	ldr	r3, [sp, #12]
 801e378:	454b      	cmp	r3, r9
 801e37a:	d307      	bcc.n	801e38c <__cvt+0xbc>
 801e37c:	9b03      	ldr	r3, [sp, #12]
 801e37e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e380:	1bdb      	subs	r3, r3, r7
 801e382:	4638      	mov	r0, r7
 801e384:	6013      	str	r3, [r2, #0]
 801e386:	b004      	add	sp, #16
 801e388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e38c:	1c59      	adds	r1, r3, #1
 801e38e:	9103      	str	r1, [sp, #12]
 801e390:	701a      	strb	r2, [r3, #0]
 801e392:	e7f0      	b.n	801e376 <__cvt+0xa6>

0801e394 <__exponent>:
 801e394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e396:	4603      	mov	r3, r0
 801e398:	2900      	cmp	r1, #0
 801e39a:	bfb8      	it	lt
 801e39c:	4249      	neglt	r1, r1
 801e39e:	f803 2b02 	strb.w	r2, [r3], #2
 801e3a2:	bfb4      	ite	lt
 801e3a4:	222d      	movlt	r2, #45	; 0x2d
 801e3a6:	222b      	movge	r2, #43	; 0x2b
 801e3a8:	2909      	cmp	r1, #9
 801e3aa:	7042      	strb	r2, [r0, #1]
 801e3ac:	dd2a      	ble.n	801e404 <__exponent+0x70>
 801e3ae:	f10d 0407 	add.w	r4, sp, #7
 801e3b2:	46a4      	mov	ip, r4
 801e3b4:	270a      	movs	r7, #10
 801e3b6:	46a6      	mov	lr, r4
 801e3b8:	460a      	mov	r2, r1
 801e3ba:	fb91 f6f7 	sdiv	r6, r1, r7
 801e3be:	fb07 1516 	mls	r5, r7, r6, r1
 801e3c2:	3530      	adds	r5, #48	; 0x30
 801e3c4:	2a63      	cmp	r2, #99	; 0x63
 801e3c6:	f104 34ff 	add.w	r4, r4, #4294967295
 801e3ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e3ce:	4631      	mov	r1, r6
 801e3d0:	dcf1      	bgt.n	801e3b6 <__exponent+0x22>
 801e3d2:	3130      	adds	r1, #48	; 0x30
 801e3d4:	f1ae 0502 	sub.w	r5, lr, #2
 801e3d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801e3dc:	1c44      	adds	r4, r0, #1
 801e3de:	4629      	mov	r1, r5
 801e3e0:	4561      	cmp	r1, ip
 801e3e2:	d30a      	bcc.n	801e3fa <__exponent+0x66>
 801e3e4:	f10d 0209 	add.w	r2, sp, #9
 801e3e8:	eba2 020e 	sub.w	r2, r2, lr
 801e3ec:	4565      	cmp	r5, ip
 801e3ee:	bf88      	it	hi
 801e3f0:	2200      	movhi	r2, #0
 801e3f2:	4413      	add	r3, r2
 801e3f4:	1a18      	subs	r0, r3, r0
 801e3f6:	b003      	add	sp, #12
 801e3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e3fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 801e402:	e7ed      	b.n	801e3e0 <__exponent+0x4c>
 801e404:	2330      	movs	r3, #48	; 0x30
 801e406:	3130      	adds	r1, #48	; 0x30
 801e408:	7083      	strb	r3, [r0, #2]
 801e40a:	70c1      	strb	r1, [r0, #3]
 801e40c:	1d03      	adds	r3, r0, #4
 801e40e:	e7f1      	b.n	801e3f4 <__exponent+0x60>

0801e410 <_printf_float>:
 801e410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e414:	ed2d 8b02 	vpush	{d8}
 801e418:	b08d      	sub	sp, #52	; 0x34
 801e41a:	460c      	mov	r4, r1
 801e41c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e420:	4616      	mov	r6, r2
 801e422:	461f      	mov	r7, r3
 801e424:	4605      	mov	r5, r0
 801e426:	f002 fe5f 	bl	80210e8 <_localeconv_r>
 801e42a:	f8d0 a000 	ldr.w	sl, [r0]
 801e42e:	4650      	mov	r0, sl
 801e430:	f7e1 fef0 	bl	8000214 <strlen>
 801e434:	2300      	movs	r3, #0
 801e436:	930a      	str	r3, [sp, #40]	; 0x28
 801e438:	6823      	ldr	r3, [r4, #0]
 801e43a:	9305      	str	r3, [sp, #20]
 801e43c:	f8d8 3000 	ldr.w	r3, [r8]
 801e440:	f894 b018 	ldrb.w	fp, [r4, #24]
 801e444:	3307      	adds	r3, #7
 801e446:	f023 0307 	bic.w	r3, r3, #7
 801e44a:	f103 0208 	add.w	r2, r3, #8
 801e44e:	f8c8 2000 	str.w	r2, [r8]
 801e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e456:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801e45a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801e45e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e462:	9307      	str	r3, [sp, #28]
 801e464:	f8cd 8018 	str.w	r8, [sp, #24]
 801e468:	ee08 0a10 	vmov	s16, r0
 801e46c:	4b9f      	ldr	r3, [pc, #636]	; (801e6ec <_printf_float+0x2dc>)
 801e46e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e472:	f04f 32ff 	mov.w	r2, #4294967295
 801e476:	f7e2 fb81 	bl	8000b7c <__aeabi_dcmpun>
 801e47a:	bb88      	cbnz	r0, 801e4e0 <_printf_float+0xd0>
 801e47c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e480:	4b9a      	ldr	r3, [pc, #616]	; (801e6ec <_printf_float+0x2dc>)
 801e482:	f04f 32ff 	mov.w	r2, #4294967295
 801e486:	f7e2 fb5b 	bl	8000b40 <__aeabi_dcmple>
 801e48a:	bb48      	cbnz	r0, 801e4e0 <_printf_float+0xd0>
 801e48c:	2200      	movs	r2, #0
 801e48e:	2300      	movs	r3, #0
 801e490:	4640      	mov	r0, r8
 801e492:	4649      	mov	r1, r9
 801e494:	f7e2 fb4a 	bl	8000b2c <__aeabi_dcmplt>
 801e498:	b110      	cbz	r0, 801e4a0 <_printf_float+0x90>
 801e49a:	232d      	movs	r3, #45	; 0x2d
 801e49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e4a0:	4b93      	ldr	r3, [pc, #588]	; (801e6f0 <_printf_float+0x2e0>)
 801e4a2:	4894      	ldr	r0, [pc, #592]	; (801e6f4 <_printf_float+0x2e4>)
 801e4a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801e4a8:	bf94      	ite	ls
 801e4aa:	4698      	movls	r8, r3
 801e4ac:	4680      	movhi	r8, r0
 801e4ae:	2303      	movs	r3, #3
 801e4b0:	6123      	str	r3, [r4, #16]
 801e4b2:	9b05      	ldr	r3, [sp, #20]
 801e4b4:	f023 0204 	bic.w	r2, r3, #4
 801e4b8:	6022      	str	r2, [r4, #0]
 801e4ba:	f04f 0900 	mov.w	r9, #0
 801e4be:	9700      	str	r7, [sp, #0]
 801e4c0:	4633      	mov	r3, r6
 801e4c2:	aa0b      	add	r2, sp, #44	; 0x2c
 801e4c4:	4621      	mov	r1, r4
 801e4c6:	4628      	mov	r0, r5
 801e4c8:	f000 f9d8 	bl	801e87c <_printf_common>
 801e4cc:	3001      	adds	r0, #1
 801e4ce:	f040 8090 	bne.w	801e5f2 <_printf_float+0x1e2>
 801e4d2:	f04f 30ff 	mov.w	r0, #4294967295
 801e4d6:	b00d      	add	sp, #52	; 0x34
 801e4d8:	ecbd 8b02 	vpop	{d8}
 801e4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4e0:	4642      	mov	r2, r8
 801e4e2:	464b      	mov	r3, r9
 801e4e4:	4640      	mov	r0, r8
 801e4e6:	4649      	mov	r1, r9
 801e4e8:	f7e2 fb48 	bl	8000b7c <__aeabi_dcmpun>
 801e4ec:	b140      	cbz	r0, 801e500 <_printf_float+0xf0>
 801e4ee:	464b      	mov	r3, r9
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	bfbc      	itt	lt
 801e4f4:	232d      	movlt	r3, #45	; 0x2d
 801e4f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e4fa:	487f      	ldr	r0, [pc, #508]	; (801e6f8 <_printf_float+0x2e8>)
 801e4fc:	4b7f      	ldr	r3, [pc, #508]	; (801e6fc <_printf_float+0x2ec>)
 801e4fe:	e7d1      	b.n	801e4a4 <_printf_float+0x94>
 801e500:	6863      	ldr	r3, [r4, #4]
 801e502:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e506:	9206      	str	r2, [sp, #24]
 801e508:	1c5a      	adds	r2, r3, #1
 801e50a:	d13f      	bne.n	801e58c <_printf_float+0x17c>
 801e50c:	2306      	movs	r3, #6
 801e50e:	6063      	str	r3, [r4, #4]
 801e510:	9b05      	ldr	r3, [sp, #20]
 801e512:	6861      	ldr	r1, [r4, #4]
 801e514:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801e518:	2300      	movs	r3, #0
 801e51a:	9303      	str	r3, [sp, #12]
 801e51c:	ab0a      	add	r3, sp, #40	; 0x28
 801e51e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801e522:	ab09      	add	r3, sp, #36	; 0x24
 801e524:	ec49 8b10 	vmov	d0, r8, r9
 801e528:	9300      	str	r3, [sp, #0]
 801e52a:	6022      	str	r2, [r4, #0]
 801e52c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e530:	4628      	mov	r0, r5
 801e532:	f7ff fecd 	bl	801e2d0 <__cvt>
 801e536:	9b06      	ldr	r3, [sp, #24]
 801e538:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e53a:	2b47      	cmp	r3, #71	; 0x47
 801e53c:	4680      	mov	r8, r0
 801e53e:	d108      	bne.n	801e552 <_printf_float+0x142>
 801e540:	1cc8      	adds	r0, r1, #3
 801e542:	db02      	blt.n	801e54a <_printf_float+0x13a>
 801e544:	6863      	ldr	r3, [r4, #4]
 801e546:	4299      	cmp	r1, r3
 801e548:	dd41      	ble.n	801e5ce <_printf_float+0x1be>
 801e54a:	f1ab 0b02 	sub.w	fp, fp, #2
 801e54e:	fa5f fb8b 	uxtb.w	fp, fp
 801e552:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e556:	d820      	bhi.n	801e59a <_printf_float+0x18a>
 801e558:	3901      	subs	r1, #1
 801e55a:	465a      	mov	r2, fp
 801e55c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e560:	9109      	str	r1, [sp, #36]	; 0x24
 801e562:	f7ff ff17 	bl	801e394 <__exponent>
 801e566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e568:	1813      	adds	r3, r2, r0
 801e56a:	2a01      	cmp	r2, #1
 801e56c:	4681      	mov	r9, r0
 801e56e:	6123      	str	r3, [r4, #16]
 801e570:	dc02      	bgt.n	801e578 <_printf_float+0x168>
 801e572:	6822      	ldr	r2, [r4, #0]
 801e574:	07d2      	lsls	r2, r2, #31
 801e576:	d501      	bpl.n	801e57c <_printf_float+0x16c>
 801e578:	3301      	adds	r3, #1
 801e57a:	6123      	str	r3, [r4, #16]
 801e57c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801e580:	2b00      	cmp	r3, #0
 801e582:	d09c      	beq.n	801e4be <_printf_float+0xae>
 801e584:	232d      	movs	r3, #45	; 0x2d
 801e586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e58a:	e798      	b.n	801e4be <_printf_float+0xae>
 801e58c:	9a06      	ldr	r2, [sp, #24]
 801e58e:	2a47      	cmp	r2, #71	; 0x47
 801e590:	d1be      	bne.n	801e510 <_printf_float+0x100>
 801e592:	2b00      	cmp	r3, #0
 801e594:	d1bc      	bne.n	801e510 <_printf_float+0x100>
 801e596:	2301      	movs	r3, #1
 801e598:	e7b9      	b.n	801e50e <_printf_float+0xfe>
 801e59a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801e59e:	d118      	bne.n	801e5d2 <_printf_float+0x1c2>
 801e5a0:	2900      	cmp	r1, #0
 801e5a2:	6863      	ldr	r3, [r4, #4]
 801e5a4:	dd0b      	ble.n	801e5be <_printf_float+0x1ae>
 801e5a6:	6121      	str	r1, [r4, #16]
 801e5a8:	b913      	cbnz	r3, 801e5b0 <_printf_float+0x1a0>
 801e5aa:	6822      	ldr	r2, [r4, #0]
 801e5ac:	07d0      	lsls	r0, r2, #31
 801e5ae:	d502      	bpl.n	801e5b6 <_printf_float+0x1a6>
 801e5b0:	3301      	adds	r3, #1
 801e5b2:	440b      	add	r3, r1
 801e5b4:	6123      	str	r3, [r4, #16]
 801e5b6:	65a1      	str	r1, [r4, #88]	; 0x58
 801e5b8:	f04f 0900 	mov.w	r9, #0
 801e5bc:	e7de      	b.n	801e57c <_printf_float+0x16c>
 801e5be:	b913      	cbnz	r3, 801e5c6 <_printf_float+0x1b6>
 801e5c0:	6822      	ldr	r2, [r4, #0]
 801e5c2:	07d2      	lsls	r2, r2, #31
 801e5c4:	d501      	bpl.n	801e5ca <_printf_float+0x1ba>
 801e5c6:	3302      	adds	r3, #2
 801e5c8:	e7f4      	b.n	801e5b4 <_printf_float+0x1a4>
 801e5ca:	2301      	movs	r3, #1
 801e5cc:	e7f2      	b.n	801e5b4 <_printf_float+0x1a4>
 801e5ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801e5d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e5d4:	4299      	cmp	r1, r3
 801e5d6:	db05      	blt.n	801e5e4 <_printf_float+0x1d4>
 801e5d8:	6823      	ldr	r3, [r4, #0]
 801e5da:	6121      	str	r1, [r4, #16]
 801e5dc:	07d8      	lsls	r0, r3, #31
 801e5de:	d5ea      	bpl.n	801e5b6 <_printf_float+0x1a6>
 801e5e0:	1c4b      	adds	r3, r1, #1
 801e5e2:	e7e7      	b.n	801e5b4 <_printf_float+0x1a4>
 801e5e4:	2900      	cmp	r1, #0
 801e5e6:	bfd4      	ite	le
 801e5e8:	f1c1 0202 	rsble	r2, r1, #2
 801e5ec:	2201      	movgt	r2, #1
 801e5ee:	4413      	add	r3, r2
 801e5f0:	e7e0      	b.n	801e5b4 <_printf_float+0x1a4>
 801e5f2:	6823      	ldr	r3, [r4, #0]
 801e5f4:	055a      	lsls	r2, r3, #21
 801e5f6:	d407      	bmi.n	801e608 <_printf_float+0x1f8>
 801e5f8:	6923      	ldr	r3, [r4, #16]
 801e5fa:	4642      	mov	r2, r8
 801e5fc:	4631      	mov	r1, r6
 801e5fe:	4628      	mov	r0, r5
 801e600:	47b8      	blx	r7
 801e602:	3001      	adds	r0, #1
 801e604:	d12c      	bne.n	801e660 <_printf_float+0x250>
 801e606:	e764      	b.n	801e4d2 <_printf_float+0xc2>
 801e608:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e60c:	f240 80e0 	bls.w	801e7d0 <_printf_float+0x3c0>
 801e610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e614:	2200      	movs	r2, #0
 801e616:	2300      	movs	r3, #0
 801e618:	f7e2 fa7e 	bl	8000b18 <__aeabi_dcmpeq>
 801e61c:	2800      	cmp	r0, #0
 801e61e:	d034      	beq.n	801e68a <_printf_float+0x27a>
 801e620:	4a37      	ldr	r2, [pc, #220]	; (801e700 <_printf_float+0x2f0>)
 801e622:	2301      	movs	r3, #1
 801e624:	4631      	mov	r1, r6
 801e626:	4628      	mov	r0, r5
 801e628:	47b8      	blx	r7
 801e62a:	3001      	adds	r0, #1
 801e62c:	f43f af51 	beq.w	801e4d2 <_printf_float+0xc2>
 801e630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e634:	429a      	cmp	r2, r3
 801e636:	db02      	blt.n	801e63e <_printf_float+0x22e>
 801e638:	6823      	ldr	r3, [r4, #0]
 801e63a:	07d8      	lsls	r0, r3, #31
 801e63c:	d510      	bpl.n	801e660 <_printf_float+0x250>
 801e63e:	ee18 3a10 	vmov	r3, s16
 801e642:	4652      	mov	r2, sl
 801e644:	4631      	mov	r1, r6
 801e646:	4628      	mov	r0, r5
 801e648:	47b8      	blx	r7
 801e64a:	3001      	adds	r0, #1
 801e64c:	f43f af41 	beq.w	801e4d2 <_printf_float+0xc2>
 801e650:	f04f 0800 	mov.w	r8, #0
 801e654:	f104 091a 	add.w	r9, r4, #26
 801e658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e65a:	3b01      	subs	r3, #1
 801e65c:	4543      	cmp	r3, r8
 801e65e:	dc09      	bgt.n	801e674 <_printf_float+0x264>
 801e660:	6823      	ldr	r3, [r4, #0]
 801e662:	079b      	lsls	r3, r3, #30
 801e664:	f100 8105 	bmi.w	801e872 <_printf_float+0x462>
 801e668:	68e0      	ldr	r0, [r4, #12]
 801e66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e66c:	4298      	cmp	r0, r3
 801e66e:	bfb8      	it	lt
 801e670:	4618      	movlt	r0, r3
 801e672:	e730      	b.n	801e4d6 <_printf_float+0xc6>
 801e674:	2301      	movs	r3, #1
 801e676:	464a      	mov	r2, r9
 801e678:	4631      	mov	r1, r6
 801e67a:	4628      	mov	r0, r5
 801e67c:	47b8      	blx	r7
 801e67e:	3001      	adds	r0, #1
 801e680:	f43f af27 	beq.w	801e4d2 <_printf_float+0xc2>
 801e684:	f108 0801 	add.w	r8, r8, #1
 801e688:	e7e6      	b.n	801e658 <_printf_float+0x248>
 801e68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	dc39      	bgt.n	801e704 <_printf_float+0x2f4>
 801e690:	4a1b      	ldr	r2, [pc, #108]	; (801e700 <_printf_float+0x2f0>)
 801e692:	2301      	movs	r3, #1
 801e694:	4631      	mov	r1, r6
 801e696:	4628      	mov	r0, r5
 801e698:	47b8      	blx	r7
 801e69a:	3001      	adds	r0, #1
 801e69c:	f43f af19 	beq.w	801e4d2 <_printf_float+0xc2>
 801e6a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e6a4:	4313      	orrs	r3, r2
 801e6a6:	d102      	bne.n	801e6ae <_printf_float+0x29e>
 801e6a8:	6823      	ldr	r3, [r4, #0]
 801e6aa:	07d9      	lsls	r1, r3, #31
 801e6ac:	d5d8      	bpl.n	801e660 <_printf_float+0x250>
 801e6ae:	ee18 3a10 	vmov	r3, s16
 801e6b2:	4652      	mov	r2, sl
 801e6b4:	4631      	mov	r1, r6
 801e6b6:	4628      	mov	r0, r5
 801e6b8:	47b8      	blx	r7
 801e6ba:	3001      	adds	r0, #1
 801e6bc:	f43f af09 	beq.w	801e4d2 <_printf_float+0xc2>
 801e6c0:	f04f 0900 	mov.w	r9, #0
 801e6c4:	f104 0a1a 	add.w	sl, r4, #26
 801e6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6ca:	425b      	negs	r3, r3
 801e6cc:	454b      	cmp	r3, r9
 801e6ce:	dc01      	bgt.n	801e6d4 <_printf_float+0x2c4>
 801e6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e6d2:	e792      	b.n	801e5fa <_printf_float+0x1ea>
 801e6d4:	2301      	movs	r3, #1
 801e6d6:	4652      	mov	r2, sl
 801e6d8:	4631      	mov	r1, r6
 801e6da:	4628      	mov	r0, r5
 801e6dc:	47b8      	blx	r7
 801e6de:	3001      	adds	r0, #1
 801e6e0:	f43f aef7 	beq.w	801e4d2 <_printf_float+0xc2>
 801e6e4:	f109 0901 	add.w	r9, r9, #1
 801e6e8:	e7ee      	b.n	801e6c8 <_printf_float+0x2b8>
 801e6ea:	bf00      	nop
 801e6ec:	7fefffff 	.word	0x7fefffff
 801e6f0:	08022f70 	.word	0x08022f70
 801e6f4:	08022f74 	.word	0x08022f74
 801e6f8:	08022f7c 	.word	0x08022f7c
 801e6fc:	08022f78 	.word	0x08022f78
 801e700:	08022f80 	.word	0x08022f80
 801e704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e706:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e708:	429a      	cmp	r2, r3
 801e70a:	bfa8      	it	ge
 801e70c:	461a      	movge	r2, r3
 801e70e:	2a00      	cmp	r2, #0
 801e710:	4691      	mov	r9, r2
 801e712:	dc37      	bgt.n	801e784 <_printf_float+0x374>
 801e714:	f04f 0b00 	mov.w	fp, #0
 801e718:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e71c:	f104 021a 	add.w	r2, r4, #26
 801e720:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e722:	9305      	str	r3, [sp, #20]
 801e724:	eba3 0309 	sub.w	r3, r3, r9
 801e728:	455b      	cmp	r3, fp
 801e72a:	dc33      	bgt.n	801e794 <_printf_float+0x384>
 801e72c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e730:	429a      	cmp	r2, r3
 801e732:	db3b      	blt.n	801e7ac <_printf_float+0x39c>
 801e734:	6823      	ldr	r3, [r4, #0]
 801e736:	07da      	lsls	r2, r3, #31
 801e738:	d438      	bmi.n	801e7ac <_printf_float+0x39c>
 801e73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e73c:	9a05      	ldr	r2, [sp, #20]
 801e73e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e740:	1a9a      	subs	r2, r3, r2
 801e742:	eba3 0901 	sub.w	r9, r3, r1
 801e746:	4591      	cmp	r9, r2
 801e748:	bfa8      	it	ge
 801e74a:	4691      	movge	r9, r2
 801e74c:	f1b9 0f00 	cmp.w	r9, #0
 801e750:	dc35      	bgt.n	801e7be <_printf_float+0x3ae>
 801e752:	f04f 0800 	mov.w	r8, #0
 801e756:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e75a:	f104 0a1a 	add.w	sl, r4, #26
 801e75e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e762:	1a9b      	subs	r3, r3, r2
 801e764:	eba3 0309 	sub.w	r3, r3, r9
 801e768:	4543      	cmp	r3, r8
 801e76a:	f77f af79 	ble.w	801e660 <_printf_float+0x250>
 801e76e:	2301      	movs	r3, #1
 801e770:	4652      	mov	r2, sl
 801e772:	4631      	mov	r1, r6
 801e774:	4628      	mov	r0, r5
 801e776:	47b8      	blx	r7
 801e778:	3001      	adds	r0, #1
 801e77a:	f43f aeaa 	beq.w	801e4d2 <_printf_float+0xc2>
 801e77e:	f108 0801 	add.w	r8, r8, #1
 801e782:	e7ec      	b.n	801e75e <_printf_float+0x34e>
 801e784:	4613      	mov	r3, r2
 801e786:	4631      	mov	r1, r6
 801e788:	4642      	mov	r2, r8
 801e78a:	4628      	mov	r0, r5
 801e78c:	47b8      	blx	r7
 801e78e:	3001      	adds	r0, #1
 801e790:	d1c0      	bne.n	801e714 <_printf_float+0x304>
 801e792:	e69e      	b.n	801e4d2 <_printf_float+0xc2>
 801e794:	2301      	movs	r3, #1
 801e796:	4631      	mov	r1, r6
 801e798:	4628      	mov	r0, r5
 801e79a:	9205      	str	r2, [sp, #20]
 801e79c:	47b8      	blx	r7
 801e79e:	3001      	adds	r0, #1
 801e7a0:	f43f ae97 	beq.w	801e4d2 <_printf_float+0xc2>
 801e7a4:	9a05      	ldr	r2, [sp, #20]
 801e7a6:	f10b 0b01 	add.w	fp, fp, #1
 801e7aa:	e7b9      	b.n	801e720 <_printf_float+0x310>
 801e7ac:	ee18 3a10 	vmov	r3, s16
 801e7b0:	4652      	mov	r2, sl
 801e7b2:	4631      	mov	r1, r6
 801e7b4:	4628      	mov	r0, r5
 801e7b6:	47b8      	blx	r7
 801e7b8:	3001      	adds	r0, #1
 801e7ba:	d1be      	bne.n	801e73a <_printf_float+0x32a>
 801e7bc:	e689      	b.n	801e4d2 <_printf_float+0xc2>
 801e7be:	9a05      	ldr	r2, [sp, #20]
 801e7c0:	464b      	mov	r3, r9
 801e7c2:	4442      	add	r2, r8
 801e7c4:	4631      	mov	r1, r6
 801e7c6:	4628      	mov	r0, r5
 801e7c8:	47b8      	blx	r7
 801e7ca:	3001      	adds	r0, #1
 801e7cc:	d1c1      	bne.n	801e752 <_printf_float+0x342>
 801e7ce:	e680      	b.n	801e4d2 <_printf_float+0xc2>
 801e7d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e7d2:	2a01      	cmp	r2, #1
 801e7d4:	dc01      	bgt.n	801e7da <_printf_float+0x3ca>
 801e7d6:	07db      	lsls	r3, r3, #31
 801e7d8:	d538      	bpl.n	801e84c <_printf_float+0x43c>
 801e7da:	2301      	movs	r3, #1
 801e7dc:	4642      	mov	r2, r8
 801e7de:	4631      	mov	r1, r6
 801e7e0:	4628      	mov	r0, r5
 801e7e2:	47b8      	blx	r7
 801e7e4:	3001      	adds	r0, #1
 801e7e6:	f43f ae74 	beq.w	801e4d2 <_printf_float+0xc2>
 801e7ea:	ee18 3a10 	vmov	r3, s16
 801e7ee:	4652      	mov	r2, sl
 801e7f0:	4631      	mov	r1, r6
 801e7f2:	4628      	mov	r0, r5
 801e7f4:	47b8      	blx	r7
 801e7f6:	3001      	adds	r0, #1
 801e7f8:	f43f ae6b 	beq.w	801e4d2 <_printf_float+0xc2>
 801e7fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e800:	2200      	movs	r2, #0
 801e802:	2300      	movs	r3, #0
 801e804:	f7e2 f988 	bl	8000b18 <__aeabi_dcmpeq>
 801e808:	b9d8      	cbnz	r0, 801e842 <_printf_float+0x432>
 801e80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e80c:	f108 0201 	add.w	r2, r8, #1
 801e810:	3b01      	subs	r3, #1
 801e812:	4631      	mov	r1, r6
 801e814:	4628      	mov	r0, r5
 801e816:	47b8      	blx	r7
 801e818:	3001      	adds	r0, #1
 801e81a:	d10e      	bne.n	801e83a <_printf_float+0x42a>
 801e81c:	e659      	b.n	801e4d2 <_printf_float+0xc2>
 801e81e:	2301      	movs	r3, #1
 801e820:	4652      	mov	r2, sl
 801e822:	4631      	mov	r1, r6
 801e824:	4628      	mov	r0, r5
 801e826:	47b8      	blx	r7
 801e828:	3001      	adds	r0, #1
 801e82a:	f43f ae52 	beq.w	801e4d2 <_printf_float+0xc2>
 801e82e:	f108 0801 	add.w	r8, r8, #1
 801e832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e834:	3b01      	subs	r3, #1
 801e836:	4543      	cmp	r3, r8
 801e838:	dcf1      	bgt.n	801e81e <_printf_float+0x40e>
 801e83a:	464b      	mov	r3, r9
 801e83c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e840:	e6dc      	b.n	801e5fc <_printf_float+0x1ec>
 801e842:	f04f 0800 	mov.w	r8, #0
 801e846:	f104 0a1a 	add.w	sl, r4, #26
 801e84a:	e7f2      	b.n	801e832 <_printf_float+0x422>
 801e84c:	2301      	movs	r3, #1
 801e84e:	4642      	mov	r2, r8
 801e850:	e7df      	b.n	801e812 <_printf_float+0x402>
 801e852:	2301      	movs	r3, #1
 801e854:	464a      	mov	r2, r9
 801e856:	4631      	mov	r1, r6
 801e858:	4628      	mov	r0, r5
 801e85a:	47b8      	blx	r7
 801e85c:	3001      	adds	r0, #1
 801e85e:	f43f ae38 	beq.w	801e4d2 <_printf_float+0xc2>
 801e862:	f108 0801 	add.w	r8, r8, #1
 801e866:	68e3      	ldr	r3, [r4, #12]
 801e868:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e86a:	1a5b      	subs	r3, r3, r1
 801e86c:	4543      	cmp	r3, r8
 801e86e:	dcf0      	bgt.n	801e852 <_printf_float+0x442>
 801e870:	e6fa      	b.n	801e668 <_printf_float+0x258>
 801e872:	f04f 0800 	mov.w	r8, #0
 801e876:	f104 0919 	add.w	r9, r4, #25
 801e87a:	e7f4      	b.n	801e866 <_printf_float+0x456>

0801e87c <_printf_common>:
 801e87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e880:	4616      	mov	r6, r2
 801e882:	4699      	mov	r9, r3
 801e884:	688a      	ldr	r2, [r1, #8]
 801e886:	690b      	ldr	r3, [r1, #16]
 801e888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e88c:	4293      	cmp	r3, r2
 801e88e:	bfb8      	it	lt
 801e890:	4613      	movlt	r3, r2
 801e892:	6033      	str	r3, [r6, #0]
 801e894:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e898:	4607      	mov	r7, r0
 801e89a:	460c      	mov	r4, r1
 801e89c:	b10a      	cbz	r2, 801e8a2 <_printf_common+0x26>
 801e89e:	3301      	adds	r3, #1
 801e8a0:	6033      	str	r3, [r6, #0]
 801e8a2:	6823      	ldr	r3, [r4, #0]
 801e8a4:	0699      	lsls	r1, r3, #26
 801e8a6:	bf42      	ittt	mi
 801e8a8:	6833      	ldrmi	r3, [r6, #0]
 801e8aa:	3302      	addmi	r3, #2
 801e8ac:	6033      	strmi	r3, [r6, #0]
 801e8ae:	6825      	ldr	r5, [r4, #0]
 801e8b0:	f015 0506 	ands.w	r5, r5, #6
 801e8b4:	d106      	bne.n	801e8c4 <_printf_common+0x48>
 801e8b6:	f104 0a19 	add.w	sl, r4, #25
 801e8ba:	68e3      	ldr	r3, [r4, #12]
 801e8bc:	6832      	ldr	r2, [r6, #0]
 801e8be:	1a9b      	subs	r3, r3, r2
 801e8c0:	42ab      	cmp	r3, r5
 801e8c2:	dc26      	bgt.n	801e912 <_printf_common+0x96>
 801e8c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e8c8:	1e13      	subs	r3, r2, #0
 801e8ca:	6822      	ldr	r2, [r4, #0]
 801e8cc:	bf18      	it	ne
 801e8ce:	2301      	movne	r3, #1
 801e8d0:	0692      	lsls	r2, r2, #26
 801e8d2:	d42b      	bmi.n	801e92c <_printf_common+0xb0>
 801e8d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e8d8:	4649      	mov	r1, r9
 801e8da:	4638      	mov	r0, r7
 801e8dc:	47c0      	blx	r8
 801e8de:	3001      	adds	r0, #1
 801e8e0:	d01e      	beq.n	801e920 <_printf_common+0xa4>
 801e8e2:	6823      	ldr	r3, [r4, #0]
 801e8e4:	68e5      	ldr	r5, [r4, #12]
 801e8e6:	6832      	ldr	r2, [r6, #0]
 801e8e8:	f003 0306 	and.w	r3, r3, #6
 801e8ec:	2b04      	cmp	r3, #4
 801e8ee:	bf08      	it	eq
 801e8f0:	1aad      	subeq	r5, r5, r2
 801e8f2:	68a3      	ldr	r3, [r4, #8]
 801e8f4:	6922      	ldr	r2, [r4, #16]
 801e8f6:	bf0c      	ite	eq
 801e8f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e8fc:	2500      	movne	r5, #0
 801e8fe:	4293      	cmp	r3, r2
 801e900:	bfc4      	itt	gt
 801e902:	1a9b      	subgt	r3, r3, r2
 801e904:	18ed      	addgt	r5, r5, r3
 801e906:	2600      	movs	r6, #0
 801e908:	341a      	adds	r4, #26
 801e90a:	42b5      	cmp	r5, r6
 801e90c:	d11a      	bne.n	801e944 <_printf_common+0xc8>
 801e90e:	2000      	movs	r0, #0
 801e910:	e008      	b.n	801e924 <_printf_common+0xa8>
 801e912:	2301      	movs	r3, #1
 801e914:	4652      	mov	r2, sl
 801e916:	4649      	mov	r1, r9
 801e918:	4638      	mov	r0, r7
 801e91a:	47c0      	blx	r8
 801e91c:	3001      	adds	r0, #1
 801e91e:	d103      	bne.n	801e928 <_printf_common+0xac>
 801e920:	f04f 30ff 	mov.w	r0, #4294967295
 801e924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e928:	3501      	adds	r5, #1
 801e92a:	e7c6      	b.n	801e8ba <_printf_common+0x3e>
 801e92c:	18e1      	adds	r1, r4, r3
 801e92e:	1c5a      	adds	r2, r3, #1
 801e930:	2030      	movs	r0, #48	; 0x30
 801e932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e936:	4422      	add	r2, r4
 801e938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e93c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e940:	3302      	adds	r3, #2
 801e942:	e7c7      	b.n	801e8d4 <_printf_common+0x58>
 801e944:	2301      	movs	r3, #1
 801e946:	4622      	mov	r2, r4
 801e948:	4649      	mov	r1, r9
 801e94a:	4638      	mov	r0, r7
 801e94c:	47c0      	blx	r8
 801e94e:	3001      	adds	r0, #1
 801e950:	d0e6      	beq.n	801e920 <_printf_common+0xa4>
 801e952:	3601      	adds	r6, #1
 801e954:	e7d9      	b.n	801e90a <_printf_common+0x8e>
	...

0801e958 <_printf_i>:
 801e958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e95c:	7e0f      	ldrb	r7, [r1, #24]
 801e95e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e960:	2f78      	cmp	r7, #120	; 0x78
 801e962:	4691      	mov	r9, r2
 801e964:	4680      	mov	r8, r0
 801e966:	460c      	mov	r4, r1
 801e968:	469a      	mov	sl, r3
 801e96a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e96e:	d807      	bhi.n	801e980 <_printf_i+0x28>
 801e970:	2f62      	cmp	r7, #98	; 0x62
 801e972:	d80a      	bhi.n	801e98a <_printf_i+0x32>
 801e974:	2f00      	cmp	r7, #0
 801e976:	f000 80d8 	beq.w	801eb2a <_printf_i+0x1d2>
 801e97a:	2f58      	cmp	r7, #88	; 0x58
 801e97c:	f000 80a3 	beq.w	801eac6 <_printf_i+0x16e>
 801e980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e988:	e03a      	b.n	801ea00 <_printf_i+0xa8>
 801e98a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e98e:	2b15      	cmp	r3, #21
 801e990:	d8f6      	bhi.n	801e980 <_printf_i+0x28>
 801e992:	a101      	add	r1, pc, #4	; (adr r1, 801e998 <_printf_i+0x40>)
 801e994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e998:	0801e9f1 	.word	0x0801e9f1
 801e99c:	0801ea05 	.word	0x0801ea05
 801e9a0:	0801e981 	.word	0x0801e981
 801e9a4:	0801e981 	.word	0x0801e981
 801e9a8:	0801e981 	.word	0x0801e981
 801e9ac:	0801e981 	.word	0x0801e981
 801e9b0:	0801ea05 	.word	0x0801ea05
 801e9b4:	0801e981 	.word	0x0801e981
 801e9b8:	0801e981 	.word	0x0801e981
 801e9bc:	0801e981 	.word	0x0801e981
 801e9c0:	0801e981 	.word	0x0801e981
 801e9c4:	0801eb11 	.word	0x0801eb11
 801e9c8:	0801ea35 	.word	0x0801ea35
 801e9cc:	0801eaf3 	.word	0x0801eaf3
 801e9d0:	0801e981 	.word	0x0801e981
 801e9d4:	0801e981 	.word	0x0801e981
 801e9d8:	0801eb33 	.word	0x0801eb33
 801e9dc:	0801e981 	.word	0x0801e981
 801e9e0:	0801ea35 	.word	0x0801ea35
 801e9e4:	0801e981 	.word	0x0801e981
 801e9e8:	0801e981 	.word	0x0801e981
 801e9ec:	0801eafb 	.word	0x0801eafb
 801e9f0:	682b      	ldr	r3, [r5, #0]
 801e9f2:	1d1a      	adds	r2, r3, #4
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	602a      	str	r2, [r5, #0]
 801e9f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e9fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ea00:	2301      	movs	r3, #1
 801ea02:	e0a3      	b.n	801eb4c <_printf_i+0x1f4>
 801ea04:	6820      	ldr	r0, [r4, #0]
 801ea06:	6829      	ldr	r1, [r5, #0]
 801ea08:	0606      	lsls	r6, r0, #24
 801ea0a:	f101 0304 	add.w	r3, r1, #4
 801ea0e:	d50a      	bpl.n	801ea26 <_printf_i+0xce>
 801ea10:	680e      	ldr	r6, [r1, #0]
 801ea12:	602b      	str	r3, [r5, #0]
 801ea14:	2e00      	cmp	r6, #0
 801ea16:	da03      	bge.n	801ea20 <_printf_i+0xc8>
 801ea18:	232d      	movs	r3, #45	; 0x2d
 801ea1a:	4276      	negs	r6, r6
 801ea1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ea20:	485e      	ldr	r0, [pc, #376]	; (801eb9c <_printf_i+0x244>)
 801ea22:	230a      	movs	r3, #10
 801ea24:	e019      	b.n	801ea5a <_printf_i+0x102>
 801ea26:	680e      	ldr	r6, [r1, #0]
 801ea28:	602b      	str	r3, [r5, #0]
 801ea2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ea2e:	bf18      	it	ne
 801ea30:	b236      	sxthne	r6, r6
 801ea32:	e7ef      	b.n	801ea14 <_printf_i+0xbc>
 801ea34:	682b      	ldr	r3, [r5, #0]
 801ea36:	6820      	ldr	r0, [r4, #0]
 801ea38:	1d19      	adds	r1, r3, #4
 801ea3a:	6029      	str	r1, [r5, #0]
 801ea3c:	0601      	lsls	r1, r0, #24
 801ea3e:	d501      	bpl.n	801ea44 <_printf_i+0xec>
 801ea40:	681e      	ldr	r6, [r3, #0]
 801ea42:	e002      	b.n	801ea4a <_printf_i+0xf2>
 801ea44:	0646      	lsls	r6, r0, #25
 801ea46:	d5fb      	bpl.n	801ea40 <_printf_i+0xe8>
 801ea48:	881e      	ldrh	r6, [r3, #0]
 801ea4a:	4854      	ldr	r0, [pc, #336]	; (801eb9c <_printf_i+0x244>)
 801ea4c:	2f6f      	cmp	r7, #111	; 0x6f
 801ea4e:	bf0c      	ite	eq
 801ea50:	2308      	moveq	r3, #8
 801ea52:	230a      	movne	r3, #10
 801ea54:	2100      	movs	r1, #0
 801ea56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ea5a:	6865      	ldr	r5, [r4, #4]
 801ea5c:	60a5      	str	r5, [r4, #8]
 801ea5e:	2d00      	cmp	r5, #0
 801ea60:	bfa2      	ittt	ge
 801ea62:	6821      	ldrge	r1, [r4, #0]
 801ea64:	f021 0104 	bicge.w	r1, r1, #4
 801ea68:	6021      	strge	r1, [r4, #0]
 801ea6a:	b90e      	cbnz	r6, 801ea70 <_printf_i+0x118>
 801ea6c:	2d00      	cmp	r5, #0
 801ea6e:	d04d      	beq.n	801eb0c <_printf_i+0x1b4>
 801ea70:	4615      	mov	r5, r2
 801ea72:	fbb6 f1f3 	udiv	r1, r6, r3
 801ea76:	fb03 6711 	mls	r7, r3, r1, r6
 801ea7a:	5dc7      	ldrb	r7, [r0, r7]
 801ea7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ea80:	4637      	mov	r7, r6
 801ea82:	42bb      	cmp	r3, r7
 801ea84:	460e      	mov	r6, r1
 801ea86:	d9f4      	bls.n	801ea72 <_printf_i+0x11a>
 801ea88:	2b08      	cmp	r3, #8
 801ea8a:	d10b      	bne.n	801eaa4 <_printf_i+0x14c>
 801ea8c:	6823      	ldr	r3, [r4, #0]
 801ea8e:	07de      	lsls	r6, r3, #31
 801ea90:	d508      	bpl.n	801eaa4 <_printf_i+0x14c>
 801ea92:	6923      	ldr	r3, [r4, #16]
 801ea94:	6861      	ldr	r1, [r4, #4]
 801ea96:	4299      	cmp	r1, r3
 801ea98:	bfde      	ittt	le
 801ea9a:	2330      	movle	r3, #48	; 0x30
 801ea9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801eaa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801eaa4:	1b52      	subs	r2, r2, r5
 801eaa6:	6122      	str	r2, [r4, #16]
 801eaa8:	f8cd a000 	str.w	sl, [sp]
 801eaac:	464b      	mov	r3, r9
 801eaae:	aa03      	add	r2, sp, #12
 801eab0:	4621      	mov	r1, r4
 801eab2:	4640      	mov	r0, r8
 801eab4:	f7ff fee2 	bl	801e87c <_printf_common>
 801eab8:	3001      	adds	r0, #1
 801eaba:	d14c      	bne.n	801eb56 <_printf_i+0x1fe>
 801eabc:	f04f 30ff 	mov.w	r0, #4294967295
 801eac0:	b004      	add	sp, #16
 801eac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eac6:	4835      	ldr	r0, [pc, #212]	; (801eb9c <_printf_i+0x244>)
 801eac8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801eacc:	6829      	ldr	r1, [r5, #0]
 801eace:	6823      	ldr	r3, [r4, #0]
 801ead0:	f851 6b04 	ldr.w	r6, [r1], #4
 801ead4:	6029      	str	r1, [r5, #0]
 801ead6:	061d      	lsls	r5, r3, #24
 801ead8:	d514      	bpl.n	801eb04 <_printf_i+0x1ac>
 801eada:	07df      	lsls	r7, r3, #31
 801eadc:	bf44      	itt	mi
 801eade:	f043 0320 	orrmi.w	r3, r3, #32
 801eae2:	6023      	strmi	r3, [r4, #0]
 801eae4:	b91e      	cbnz	r6, 801eaee <_printf_i+0x196>
 801eae6:	6823      	ldr	r3, [r4, #0]
 801eae8:	f023 0320 	bic.w	r3, r3, #32
 801eaec:	6023      	str	r3, [r4, #0]
 801eaee:	2310      	movs	r3, #16
 801eaf0:	e7b0      	b.n	801ea54 <_printf_i+0xfc>
 801eaf2:	6823      	ldr	r3, [r4, #0]
 801eaf4:	f043 0320 	orr.w	r3, r3, #32
 801eaf8:	6023      	str	r3, [r4, #0]
 801eafa:	2378      	movs	r3, #120	; 0x78
 801eafc:	4828      	ldr	r0, [pc, #160]	; (801eba0 <_printf_i+0x248>)
 801eafe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801eb02:	e7e3      	b.n	801eacc <_printf_i+0x174>
 801eb04:	0659      	lsls	r1, r3, #25
 801eb06:	bf48      	it	mi
 801eb08:	b2b6      	uxthmi	r6, r6
 801eb0a:	e7e6      	b.n	801eada <_printf_i+0x182>
 801eb0c:	4615      	mov	r5, r2
 801eb0e:	e7bb      	b.n	801ea88 <_printf_i+0x130>
 801eb10:	682b      	ldr	r3, [r5, #0]
 801eb12:	6826      	ldr	r6, [r4, #0]
 801eb14:	6961      	ldr	r1, [r4, #20]
 801eb16:	1d18      	adds	r0, r3, #4
 801eb18:	6028      	str	r0, [r5, #0]
 801eb1a:	0635      	lsls	r5, r6, #24
 801eb1c:	681b      	ldr	r3, [r3, #0]
 801eb1e:	d501      	bpl.n	801eb24 <_printf_i+0x1cc>
 801eb20:	6019      	str	r1, [r3, #0]
 801eb22:	e002      	b.n	801eb2a <_printf_i+0x1d2>
 801eb24:	0670      	lsls	r0, r6, #25
 801eb26:	d5fb      	bpl.n	801eb20 <_printf_i+0x1c8>
 801eb28:	8019      	strh	r1, [r3, #0]
 801eb2a:	2300      	movs	r3, #0
 801eb2c:	6123      	str	r3, [r4, #16]
 801eb2e:	4615      	mov	r5, r2
 801eb30:	e7ba      	b.n	801eaa8 <_printf_i+0x150>
 801eb32:	682b      	ldr	r3, [r5, #0]
 801eb34:	1d1a      	adds	r2, r3, #4
 801eb36:	602a      	str	r2, [r5, #0]
 801eb38:	681d      	ldr	r5, [r3, #0]
 801eb3a:	6862      	ldr	r2, [r4, #4]
 801eb3c:	2100      	movs	r1, #0
 801eb3e:	4628      	mov	r0, r5
 801eb40:	f7e1 fb76 	bl	8000230 <memchr>
 801eb44:	b108      	cbz	r0, 801eb4a <_printf_i+0x1f2>
 801eb46:	1b40      	subs	r0, r0, r5
 801eb48:	6060      	str	r0, [r4, #4]
 801eb4a:	6863      	ldr	r3, [r4, #4]
 801eb4c:	6123      	str	r3, [r4, #16]
 801eb4e:	2300      	movs	r3, #0
 801eb50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eb54:	e7a8      	b.n	801eaa8 <_printf_i+0x150>
 801eb56:	6923      	ldr	r3, [r4, #16]
 801eb58:	462a      	mov	r2, r5
 801eb5a:	4649      	mov	r1, r9
 801eb5c:	4640      	mov	r0, r8
 801eb5e:	47d0      	blx	sl
 801eb60:	3001      	adds	r0, #1
 801eb62:	d0ab      	beq.n	801eabc <_printf_i+0x164>
 801eb64:	6823      	ldr	r3, [r4, #0]
 801eb66:	079b      	lsls	r3, r3, #30
 801eb68:	d413      	bmi.n	801eb92 <_printf_i+0x23a>
 801eb6a:	68e0      	ldr	r0, [r4, #12]
 801eb6c:	9b03      	ldr	r3, [sp, #12]
 801eb6e:	4298      	cmp	r0, r3
 801eb70:	bfb8      	it	lt
 801eb72:	4618      	movlt	r0, r3
 801eb74:	e7a4      	b.n	801eac0 <_printf_i+0x168>
 801eb76:	2301      	movs	r3, #1
 801eb78:	4632      	mov	r2, r6
 801eb7a:	4649      	mov	r1, r9
 801eb7c:	4640      	mov	r0, r8
 801eb7e:	47d0      	blx	sl
 801eb80:	3001      	adds	r0, #1
 801eb82:	d09b      	beq.n	801eabc <_printf_i+0x164>
 801eb84:	3501      	adds	r5, #1
 801eb86:	68e3      	ldr	r3, [r4, #12]
 801eb88:	9903      	ldr	r1, [sp, #12]
 801eb8a:	1a5b      	subs	r3, r3, r1
 801eb8c:	42ab      	cmp	r3, r5
 801eb8e:	dcf2      	bgt.n	801eb76 <_printf_i+0x21e>
 801eb90:	e7eb      	b.n	801eb6a <_printf_i+0x212>
 801eb92:	2500      	movs	r5, #0
 801eb94:	f104 0619 	add.w	r6, r4, #25
 801eb98:	e7f5      	b.n	801eb86 <_printf_i+0x22e>
 801eb9a:	bf00      	nop
 801eb9c:	08022f82 	.word	0x08022f82
 801eba0:	08022f93 	.word	0x08022f93

0801eba4 <_sbrk_r>:
 801eba4:	b538      	push	{r3, r4, r5, lr}
 801eba6:	4d06      	ldr	r5, [pc, #24]	; (801ebc0 <_sbrk_r+0x1c>)
 801eba8:	2300      	movs	r3, #0
 801ebaa:	4604      	mov	r4, r0
 801ebac:	4608      	mov	r0, r1
 801ebae:	602b      	str	r3, [r5, #0]
 801ebb0:	f7fe ff32 	bl	801da18 <_sbrk>
 801ebb4:	1c43      	adds	r3, r0, #1
 801ebb6:	d102      	bne.n	801ebbe <_sbrk_r+0x1a>
 801ebb8:	682b      	ldr	r3, [r5, #0]
 801ebba:	b103      	cbz	r3, 801ebbe <_sbrk_r+0x1a>
 801ebbc:	6023      	str	r3, [r4, #0]
 801ebbe:	bd38      	pop	{r3, r4, r5, pc}
 801ebc0:	20012cc0 	.word	0x20012cc0

0801ebc4 <siprintf>:
 801ebc4:	b40e      	push	{r1, r2, r3}
 801ebc6:	b500      	push	{lr}
 801ebc8:	b09c      	sub	sp, #112	; 0x70
 801ebca:	ab1d      	add	r3, sp, #116	; 0x74
 801ebcc:	9002      	str	r0, [sp, #8]
 801ebce:	9006      	str	r0, [sp, #24]
 801ebd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ebd4:	4809      	ldr	r0, [pc, #36]	; (801ebfc <siprintf+0x38>)
 801ebd6:	9107      	str	r1, [sp, #28]
 801ebd8:	9104      	str	r1, [sp, #16]
 801ebda:	4909      	ldr	r1, [pc, #36]	; (801ec00 <siprintf+0x3c>)
 801ebdc:	f853 2b04 	ldr.w	r2, [r3], #4
 801ebe0:	9105      	str	r1, [sp, #20]
 801ebe2:	6800      	ldr	r0, [r0, #0]
 801ebe4:	9301      	str	r3, [sp, #4]
 801ebe6:	a902      	add	r1, sp, #8
 801ebe8:	f002 ffce 	bl	8021b88 <_svfiprintf_r>
 801ebec:	9b02      	ldr	r3, [sp, #8]
 801ebee:	2200      	movs	r2, #0
 801ebf0:	701a      	strb	r2, [r3, #0]
 801ebf2:	b01c      	add	sp, #112	; 0x70
 801ebf4:	f85d eb04 	ldr.w	lr, [sp], #4
 801ebf8:	b003      	add	sp, #12
 801ebfa:	4770      	bx	lr
 801ebfc:	2000008c 	.word	0x2000008c
 801ec00:	ffff0208 	.word	0xffff0208

0801ec04 <__sread>:
 801ec04:	b510      	push	{r4, lr}
 801ec06:	460c      	mov	r4, r1
 801ec08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec0c:	f003 f8bc 	bl	8021d88 <_read_r>
 801ec10:	2800      	cmp	r0, #0
 801ec12:	bfab      	itete	ge
 801ec14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ec16:	89a3      	ldrhlt	r3, [r4, #12]
 801ec18:	181b      	addge	r3, r3, r0
 801ec1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ec1e:	bfac      	ite	ge
 801ec20:	6563      	strge	r3, [r4, #84]	; 0x54
 801ec22:	81a3      	strhlt	r3, [r4, #12]
 801ec24:	bd10      	pop	{r4, pc}

0801ec26 <__swrite>:
 801ec26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec2a:	461f      	mov	r7, r3
 801ec2c:	898b      	ldrh	r3, [r1, #12]
 801ec2e:	05db      	lsls	r3, r3, #23
 801ec30:	4605      	mov	r5, r0
 801ec32:	460c      	mov	r4, r1
 801ec34:	4616      	mov	r6, r2
 801ec36:	d505      	bpl.n	801ec44 <__swrite+0x1e>
 801ec38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec3c:	2302      	movs	r3, #2
 801ec3e:	2200      	movs	r2, #0
 801ec40:	f002 fa56 	bl	80210f0 <_lseek_r>
 801ec44:	89a3      	ldrh	r3, [r4, #12]
 801ec46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ec4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ec4e:	81a3      	strh	r3, [r4, #12]
 801ec50:	4632      	mov	r2, r6
 801ec52:	463b      	mov	r3, r7
 801ec54:	4628      	mov	r0, r5
 801ec56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ec5a:	f000 bfa7 	b.w	801fbac <_write_r>

0801ec5e <__sseek>:
 801ec5e:	b510      	push	{r4, lr}
 801ec60:	460c      	mov	r4, r1
 801ec62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec66:	f002 fa43 	bl	80210f0 <_lseek_r>
 801ec6a:	1c43      	adds	r3, r0, #1
 801ec6c:	89a3      	ldrh	r3, [r4, #12]
 801ec6e:	bf15      	itete	ne
 801ec70:	6560      	strne	r0, [r4, #84]	; 0x54
 801ec72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ec76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ec7a:	81a3      	strheq	r3, [r4, #12]
 801ec7c:	bf18      	it	ne
 801ec7e:	81a3      	strhne	r3, [r4, #12]
 801ec80:	bd10      	pop	{r4, pc}

0801ec82 <__sclose>:
 801ec82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec86:	f001 b811 	b.w	801fcac <_close_r>

0801ec8a <strcat>:
 801ec8a:	b510      	push	{r4, lr}
 801ec8c:	4602      	mov	r2, r0
 801ec8e:	7814      	ldrb	r4, [r2, #0]
 801ec90:	4613      	mov	r3, r2
 801ec92:	3201      	adds	r2, #1
 801ec94:	2c00      	cmp	r4, #0
 801ec96:	d1fa      	bne.n	801ec8e <strcat+0x4>
 801ec98:	3b01      	subs	r3, #1
 801ec9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ec9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801eca2:	2a00      	cmp	r2, #0
 801eca4:	d1f9      	bne.n	801ec9a <strcat+0x10>
 801eca6:	bd10      	pop	{r4, pc}

0801eca8 <strchr>:
 801eca8:	b2c9      	uxtb	r1, r1
 801ecaa:	4603      	mov	r3, r0
 801ecac:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ecb0:	b11a      	cbz	r2, 801ecba <strchr+0x12>
 801ecb2:	428a      	cmp	r2, r1
 801ecb4:	d1f9      	bne.n	801ecaa <strchr+0x2>
 801ecb6:	4618      	mov	r0, r3
 801ecb8:	4770      	bx	lr
 801ecba:	2900      	cmp	r1, #0
 801ecbc:	bf18      	it	ne
 801ecbe:	2300      	movne	r3, #0
 801ecc0:	e7f9      	b.n	801ecb6 <strchr+0xe>

0801ecc2 <strncmp>:
 801ecc2:	b510      	push	{r4, lr}
 801ecc4:	b17a      	cbz	r2, 801ece6 <strncmp+0x24>
 801ecc6:	4603      	mov	r3, r0
 801ecc8:	3901      	subs	r1, #1
 801ecca:	1884      	adds	r4, r0, r2
 801eccc:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ecd0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ecd4:	4290      	cmp	r0, r2
 801ecd6:	d101      	bne.n	801ecdc <strncmp+0x1a>
 801ecd8:	42a3      	cmp	r3, r4
 801ecda:	d101      	bne.n	801ece0 <strncmp+0x1e>
 801ecdc:	1a80      	subs	r0, r0, r2
 801ecde:	bd10      	pop	{r4, pc}
 801ece0:	2800      	cmp	r0, #0
 801ece2:	d1f3      	bne.n	801eccc <strncmp+0xa>
 801ece4:	e7fa      	b.n	801ecdc <strncmp+0x1a>
 801ece6:	4610      	mov	r0, r2
 801ece8:	e7f9      	b.n	801ecde <strncmp+0x1c>

0801ecea <strncpy>:
 801ecea:	b510      	push	{r4, lr}
 801ecec:	3901      	subs	r1, #1
 801ecee:	4603      	mov	r3, r0
 801ecf0:	b132      	cbz	r2, 801ed00 <strncpy+0x16>
 801ecf2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ecf6:	f803 4b01 	strb.w	r4, [r3], #1
 801ecfa:	3a01      	subs	r2, #1
 801ecfc:	2c00      	cmp	r4, #0
 801ecfe:	d1f7      	bne.n	801ecf0 <strncpy+0x6>
 801ed00:	441a      	add	r2, r3
 801ed02:	2100      	movs	r1, #0
 801ed04:	4293      	cmp	r3, r2
 801ed06:	d100      	bne.n	801ed0a <strncpy+0x20>
 801ed08:	bd10      	pop	{r4, pc}
 801ed0a:	f803 1b01 	strb.w	r1, [r3], #1
 801ed0e:	e7f9      	b.n	801ed04 <strncpy+0x1a>

0801ed10 <sulp>:
 801ed10:	b570      	push	{r4, r5, r6, lr}
 801ed12:	4604      	mov	r4, r0
 801ed14:	460d      	mov	r5, r1
 801ed16:	ec45 4b10 	vmov	d0, r4, r5
 801ed1a:	4616      	mov	r6, r2
 801ed1c:	f002 fd8a 	bl	8021834 <__ulp>
 801ed20:	ec51 0b10 	vmov	r0, r1, d0
 801ed24:	b17e      	cbz	r6, 801ed46 <sulp+0x36>
 801ed26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ed2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ed2e:	2b00      	cmp	r3, #0
 801ed30:	dd09      	ble.n	801ed46 <sulp+0x36>
 801ed32:	051b      	lsls	r3, r3, #20
 801ed34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801ed38:	2400      	movs	r4, #0
 801ed3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801ed3e:	4622      	mov	r2, r4
 801ed40:	462b      	mov	r3, r5
 801ed42:	f7e1 fc81 	bl	8000648 <__aeabi_dmul>
 801ed46:	bd70      	pop	{r4, r5, r6, pc}

0801ed48 <_strtod_l>:
 801ed48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed4c:	ed2d 8b02 	vpush	{d8}
 801ed50:	b09d      	sub	sp, #116	; 0x74
 801ed52:	461f      	mov	r7, r3
 801ed54:	2300      	movs	r3, #0
 801ed56:	9318      	str	r3, [sp, #96]	; 0x60
 801ed58:	4ba2      	ldr	r3, [pc, #648]	; (801efe4 <_strtod_l+0x29c>)
 801ed5a:	9213      	str	r2, [sp, #76]	; 0x4c
 801ed5c:	681b      	ldr	r3, [r3, #0]
 801ed5e:	9305      	str	r3, [sp, #20]
 801ed60:	4604      	mov	r4, r0
 801ed62:	4618      	mov	r0, r3
 801ed64:	4688      	mov	r8, r1
 801ed66:	f7e1 fa55 	bl	8000214 <strlen>
 801ed6a:	f04f 0a00 	mov.w	sl, #0
 801ed6e:	4605      	mov	r5, r0
 801ed70:	f04f 0b00 	mov.w	fp, #0
 801ed74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801ed78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ed7a:	781a      	ldrb	r2, [r3, #0]
 801ed7c:	2a2b      	cmp	r2, #43	; 0x2b
 801ed7e:	d04e      	beq.n	801ee1e <_strtod_l+0xd6>
 801ed80:	d83b      	bhi.n	801edfa <_strtod_l+0xb2>
 801ed82:	2a0d      	cmp	r2, #13
 801ed84:	d834      	bhi.n	801edf0 <_strtod_l+0xa8>
 801ed86:	2a08      	cmp	r2, #8
 801ed88:	d834      	bhi.n	801edf4 <_strtod_l+0xac>
 801ed8a:	2a00      	cmp	r2, #0
 801ed8c:	d03e      	beq.n	801ee0c <_strtod_l+0xc4>
 801ed8e:	2300      	movs	r3, #0
 801ed90:	930a      	str	r3, [sp, #40]	; 0x28
 801ed92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801ed94:	7833      	ldrb	r3, [r6, #0]
 801ed96:	2b30      	cmp	r3, #48	; 0x30
 801ed98:	f040 80b0 	bne.w	801eefc <_strtod_l+0x1b4>
 801ed9c:	7873      	ldrb	r3, [r6, #1]
 801ed9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801eda2:	2b58      	cmp	r3, #88	; 0x58
 801eda4:	d168      	bne.n	801ee78 <_strtod_l+0x130>
 801eda6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eda8:	9301      	str	r3, [sp, #4]
 801edaa:	ab18      	add	r3, sp, #96	; 0x60
 801edac:	9702      	str	r7, [sp, #8]
 801edae:	9300      	str	r3, [sp, #0]
 801edb0:	4a8d      	ldr	r2, [pc, #564]	; (801efe8 <_strtod_l+0x2a0>)
 801edb2:	ab19      	add	r3, sp, #100	; 0x64
 801edb4:	a917      	add	r1, sp, #92	; 0x5c
 801edb6:	4620      	mov	r0, r4
 801edb8:	f001 fe7e 	bl	8020ab8 <__gethex>
 801edbc:	f010 0707 	ands.w	r7, r0, #7
 801edc0:	4605      	mov	r5, r0
 801edc2:	d005      	beq.n	801edd0 <_strtod_l+0x88>
 801edc4:	2f06      	cmp	r7, #6
 801edc6:	d12c      	bne.n	801ee22 <_strtod_l+0xda>
 801edc8:	3601      	adds	r6, #1
 801edca:	2300      	movs	r3, #0
 801edcc:	9617      	str	r6, [sp, #92]	; 0x5c
 801edce:	930a      	str	r3, [sp, #40]	; 0x28
 801edd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	f040 8590 	bne.w	801f8f8 <_strtod_l+0xbb0>
 801edd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801edda:	b1eb      	cbz	r3, 801ee18 <_strtod_l+0xd0>
 801eddc:	4652      	mov	r2, sl
 801edde:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ede2:	ec43 2b10 	vmov	d0, r2, r3
 801ede6:	b01d      	add	sp, #116	; 0x74
 801ede8:	ecbd 8b02 	vpop	{d8}
 801edec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edf0:	2a20      	cmp	r2, #32
 801edf2:	d1cc      	bne.n	801ed8e <_strtod_l+0x46>
 801edf4:	3301      	adds	r3, #1
 801edf6:	9317      	str	r3, [sp, #92]	; 0x5c
 801edf8:	e7be      	b.n	801ed78 <_strtod_l+0x30>
 801edfa:	2a2d      	cmp	r2, #45	; 0x2d
 801edfc:	d1c7      	bne.n	801ed8e <_strtod_l+0x46>
 801edfe:	2201      	movs	r2, #1
 801ee00:	920a      	str	r2, [sp, #40]	; 0x28
 801ee02:	1c5a      	adds	r2, r3, #1
 801ee04:	9217      	str	r2, [sp, #92]	; 0x5c
 801ee06:	785b      	ldrb	r3, [r3, #1]
 801ee08:	2b00      	cmp	r3, #0
 801ee0a:	d1c2      	bne.n	801ed92 <_strtod_l+0x4a>
 801ee0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ee0e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	f040 856e 	bne.w	801f8f4 <_strtod_l+0xbac>
 801ee18:	4652      	mov	r2, sl
 801ee1a:	465b      	mov	r3, fp
 801ee1c:	e7e1      	b.n	801ede2 <_strtod_l+0x9a>
 801ee1e:	2200      	movs	r2, #0
 801ee20:	e7ee      	b.n	801ee00 <_strtod_l+0xb8>
 801ee22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ee24:	b13a      	cbz	r2, 801ee36 <_strtod_l+0xee>
 801ee26:	2135      	movs	r1, #53	; 0x35
 801ee28:	a81a      	add	r0, sp, #104	; 0x68
 801ee2a:	f002 fe0e 	bl	8021a4a <__copybits>
 801ee2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ee30:	4620      	mov	r0, r4
 801ee32:	f002 f9cd 	bl	80211d0 <_Bfree>
 801ee36:	3f01      	subs	r7, #1
 801ee38:	2f04      	cmp	r7, #4
 801ee3a:	d806      	bhi.n	801ee4a <_strtod_l+0x102>
 801ee3c:	e8df f007 	tbb	[pc, r7]
 801ee40:	1714030a 	.word	0x1714030a
 801ee44:	0a          	.byte	0x0a
 801ee45:	00          	.byte	0x00
 801ee46:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801ee4a:	0728      	lsls	r0, r5, #28
 801ee4c:	d5c0      	bpl.n	801edd0 <_strtod_l+0x88>
 801ee4e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801ee52:	e7bd      	b.n	801edd0 <_strtod_l+0x88>
 801ee54:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801ee58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801ee5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ee5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ee62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ee66:	e7f0      	b.n	801ee4a <_strtod_l+0x102>
 801ee68:	f8df b180 	ldr.w	fp, [pc, #384]	; 801efec <_strtod_l+0x2a4>
 801ee6c:	e7ed      	b.n	801ee4a <_strtod_l+0x102>
 801ee6e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ee72:	f04f 3aff 	mov.w	sl, #4294967295
 801ee76:	e7e8      	b.n	801ee4a <_strtod_l+0x102>
 801ee78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ee7a:	1c5a      	adds	r2, r3, #1
 801ee7c:	9217      	str	r2, [sp, #92]	; 0x5c
 801ee7e:	785b      	ldrb	r3, [r3, #1]
 801ee80:	2b30      	cmp	r3, #48	; 0x30
 801ee82:	d0f9      	beq.n	801ee78 <_strtod_l+0x130>
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	d0a3      	beq.n	801edd0 <_strtod_l+0x88>
 801ee88:	2301      	movs	r3, #1
 801ee8a:	f04f 0900 	mov.w	r9, #0
 801ee8e:	9304      	str	r3, [sp, #16]
 801ee90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ee92:	9308      	str	r3, [sp, #32]
 801ee94:	f8cd 901c 	str.w	r9, [sp, #28]
 801ee98:	464f      	mov	r7, r9
 801ee9a:	220a      	movs	r2, #10
 801ee9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ee9e:	7806      	ldrb	r6, [r0, #0]
 801eea0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801eea4:	b2d9      	uxtb	r1, r3
 801eea6:	2909      	cmp	r1, #9
 801eea8:	d92a      	bls.n	801ef00 <_strtod_l+0x1b8>
 801eeaa:	9905      	ldr	r1, [sp, #20]
 801eeac:	462a      	mov	r2, r5
 801eeae:	f7ff ff08 	bl	801ecc2 <strncmp>
 801eeb2:	b398      	cbz	r0, 801ef1c <_strtod_l+0x1d4>
 801eeb4:	2000      	movs	r0, #0
 801eeb6:	4632      	mov	r2, r6
 801eeb8:	463d      	mov	r5, r7
 801eeba:	9005      	str	r0, [sp, #20]
 801eebc:	4603      	mov	r3, r0
 801eebe:	2a65      	cmp	r2, #101	; 0x65
 801eec0:	d001      	beq.n	801eec6 <_strtod_l+0x17e>
 801eec2:	2a45      	cmp	r2, #69	; 0x45
 801eec4:	d118      	bne.n	801eef8 <_strtod_l+0x1b0>
 801eec6:	b91d      	cbnz	r5, 801eed0 <_strtod_l+0x188>
 801eec8:	9a04      	ldr	r2, [sp, #16]
 801eeca:	4302      	orrs	r2, r0
 801eecc:	d09e      	beq.n	801ee0c <_strtod_l+0xc4>
 801eece:	2500      	movs	r5, #0
 801eed0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801eed4:	f108 0201 	add.w	r2, r8, #1
 801eed8:	9217      	str	r2, [sp, #92]	; 0x5c
 801eeda:	f898 2001 	ldrb.w	r2, [r8, #1]
 801eede:	2a2b      	cmp	r2, #43	; 0x2b
 801eee0:	d075      	beq.n	801efce <_strtod_l+0x286>
 801eee2:	2a2d      	cmp	r2, #45	; 0x2d
 801eee4:	d07b      	beq.n	801efde <_strtod_l+0x296>
 801eee6:	f04f 0c00 	mov.w	ip, #0
 801eeea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801eeee:	2909      	cmp	r1, #9
 801eef0:	f240 8082 	bls.w	801eff8 <_strtod_l+0x2b0>
 801eef4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801eef8:	2600      	movs	r6, #0
 801eefa:	e09d      	b.n	801f038 <_strtod_l+0x2f0>
 801eefc:	2300      	movs	r3, #0
 801eefe:	e7c4      	b.n	801ee8a <_strtod_l+0x142>
 801ef00:	2f08      	cmp	r7, #8
 801ef02:	bfd8      	it	le
 801ef04:	9907      	ldrle	r1, [sp, #28]
 801ef06:	f100 0001 	add.w	r0, r0, #1
 801ef0a:	bfda      	itte	le
 801ef0c:	fb02 3301 	mlale	r3, r2, r1, r3
 801ef10:	9307      	strle	r3, [sp, #28]
 801ef12:	fb02 3909 	mlagt	r9, r2, r9, r3
 801ef16:	3701      	adds	r7, #1
 801ef18:	9017      	str	r0, [sp, #92]	; 0x5c
 801ef1a:	e7bf      	b.n	801ee9c <_strtod_l+0x154>
 801ef1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ef1e:	195a      	adds	r2, r3, r5
 801ef20:	9217      	str	r2, [sp, #92]	; 0x5c
 801ef22:	5d5a      	ldrb	r2, [r3, r5]
 801ef24:	2f00      	cmp	r7, #0
 801ef26:	d037      	beq.n	801ef98 <_strtod_l+0x250>
 801ef28:	9005      	str	r0, [sp, #20]
 801ef2a:	463d      	mov	r5, r7
 801ef2c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801ef30:	2b09      	cmp	r3, #9
 801ef32:	d912      	bls.n	801ef5a <_strtod_l+0x212>
 801ef34:	2301      	movs	r3, #1
 801ef36:	e7c2      	b.n	801eebe <_strtod_l+0x176>
 801ef38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ef3a:	1c5a      	adds	r2, r3, #1
 801ef3c:	9217      	str	r2, [sp, #92]	; 0x5c
 801ef3e:	785a      	ldrb	r2, [r3, #1]
 801ef40:	3001      	adds	r0, #1
 801ef42:	2a30      	cmp	r2, #48	; 0x30
 801ef44:	d0f8      	beq.n	801ef38 <_strtod_l+0x1f0>
 801ef46:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801ef4a:	2b08      	cmp	r3, #8
 801ef4c:	f200 84d9 	bhi.w	801f902 <_strtod_l+0xbba>
 801ef50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ef52:	9005      	str	r0, [sp, #20]
 801ef54:	2000      	movs	r0, #0
 801ef56:	9308      	str	r3, [sp, #32]
 801ef58:	4605      	mov	r5, r0
 801ef5a:	3a30      	subs	r2, #48	; 0x30
 801ef5c:	f100 0301 	add.w	r3, r0, #1
 801ef60:	d014      	beq.n	801ef8c <_strtod_l+0x244>
 801ef62:	9905      	ldr	r1, [sp, #20]
 801ef64:	4419      	add	r1, r3
 801ef66:	9105      	str	r1, [sp, #20]
 801ef68:	462b      	mov	r3, r5
 801ef6a:	eb00 0e05 	add.w	lr, r0, r5
 801ef6e:	210a      	movs	r1, #10
 801ef70:	4573      	cmp	r3, lr
 801ef72:	d113      	bne.n	801ef9c <_strtod_l+0x254>
 801ef74:	182b      	adds	r3, r5, r0
 801ef76:	2b08      	cmp	r3, #8
 801ef78:	f105 0501 	add.w	r5, r5, #1
 801ef7c:	4405      	add	r5, r0
 801ef7e:	dc1c      	bgt.n	801efba <_strtod_l+0x272>
 801ef80:	9907      	ldr	r1, [sp, #28]
 801ef82:	230a      	movs	r3, #10
 801ef84:	fb03 2301 	mla	r3, r3, r1, r2
 801ef88:	9307      	str	r3, [sp, #28]
 801ef8a:	2300      	movs	r3, #0
 801ef8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801ef8e:	1c51      	adds	r1, r2, #1
 801ef90:	9117      	str	r1, [sp, #92]	; 0x5c
 801ef92:	7852      	ldrb	r2, [r2, #1]
 801ef94:	4618      	mov	r0, r3
 801ef96:	e7c9      	b.n	801ef2c <_strtod_l+0x1e4>
 801ef98:	4638      	mov	r0, r7
 801ef9a:	e7d2      	b.n	801ef42 <_strtod_l+0x1fa>
 801ef9c:	2b08      	cmp	r3, #8
 801ef9e:	dc04      	bgt.n	801efaa <_strtod_l+0x262>
 801efa0:	9e07      	ldr	r6, [sp, #28]
 801efa2:	434e      	muls	r6, r1
 801efa4:	9607      	str	r6, [sp, #28]
 801efa6:	3301      	adds	r3, #1
 801efa8:	e7e2      	b.n	801ef70 <_strtod_l+0x228>
 801efaa:	f103 0c01 	add.w	ip, r3, #1
 801efae:	f1bc 0f10 	cmp.w	ip, #16
 801efb2:	bfd8      	it	le
 801efb4:	fb01 f909 	mulle.w	r9, r1, r9
 801efb8:	e7f5      	b.n	801efa6 <_strtod_l+0x25e>
 801efba:	2d10      	cmp	r5, #16
 801efbc:	bfdc      	itt	le
 801efbe:	230a      	movle	r3, #10
 801efc0:	fb03 2909 	mlale	r9, r3, r9, r2
 801efc4:	e7e1      	b.n	801ef8a <_strtod_l+0x242>
 801efc6:	2300      	movs	r3, #0
 801efc8:	9305      	str	r3, [sp, #20]
 801efca:	2301      	movs	r3, #1
 801efcc:	e77c      	b.n	801eec8 <_strtod_l+0x180>
 801efce:	f04f 0c00 	mov.w	ip, #0
 801efd2:	f108 0202 	add.w	r2, r8, #2
 801efd6:	9217      	str	r2, [sp, #92]	; 0x5c
 801efd8:	f898 2002 	ldrb.w	r2, [r8, #2]
 801efdc:	e785      	b.n	801eeea <_strtod_l+0x1a2>
 801efde:	f04f 0c01 	mov.w	ip, #1
 801efe2:	e7f6      	b.n	801efd2 <_strtod_l+0x28a>
 801efe4:	08023114 	.word	0x08023114
 801efe8:	08022fa4 	.word	0x08022fa4
 801efec:	7ff00000 	.word	0x7ff00000
 801eff0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801eff2:	1c51      	adds	r1, r2, #1
 801eff4:	9117      	str	r1, [sp, #92]	; 0x5c
 801eff6:	7852      	ldrb	r2, [r2, #1]
 801eff8:	2a30      	cmp	r2, #48	; 0x30
 801effa:	d0f9      	beq.n	801eff0 <_strtod_l+0x2a8>
 801effc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801f000:	2908      	cmp	r1, #8
 801f002:	f63f af79 	bhi.w	801eef8 <_strtod_l+0x1b0>
 801f006:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801f00a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f00c:	9206      	str	r2, [sp, #24]
 801f00e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f010:	1c51      	adds	r1, r2, #1
 801f012:	9117      	str	r1, [sp, #92]	; 0x5c
 801f014:	7852      	ldrb	r2, [r2, #1]
 801f016:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801f01a:	2e09      	cmp	r6, #9
 801f01c:	d937      	bls.n	801f08e <_strtod_l+0x346>
 801f01e:	9e06      	ldr	r6, [sp, #24]
 801f020:	1b89      	subs	r1, r1, r6
 801f022:	2908      	cmp	r1, #8
 801f024:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801f028:	dc02      	bgt.n	801f030 <_strtod_l+0x2e8>
 801f02a:	4576      	cmp	r6, lr
 801f02c:	bfa8      	it	ge
 801f02e:	4676      	movge	r6, lr
 801f030:	f1bc 0f00 	cmp.w	ip, #0
 801f034:	d000      	beq.n	801f038 <_strtod_l+0x2f0>
 801f036:	4276      	negs	r6, r6
 801f038:	2d00      	cmp	r5, #0
 801f03a:	d14d      	bne.n	801f0d8 <_strtod_l+0x390>
 801f03c:	9904      	ldr	r1, [sp, #16]
 801f03e:	4301      	orrs	r1, r0
 801f040:	f47f aec6 	bne.w	801edd0 <_strtod_l+0x88>
 801f044:	2b00      	cmp	r3, #0
 801f046:	f47f aee1 	bne.w	801ee0c <_strtod_l+0xc4>
 801f04a:	2a69      	cmp	r2, #105	; 0x69
 801f04c:	d027      	beq.n	801f09e <_strtod_l+0x356>
 801f04e:	dc24      	bgt.n	801f09a <_strtod_l+0x352>
 801f050:	2a49      	cmp	r2, #73	; 0x49
 801f052:	d024      	beq.n	801f09e <_strtod_l+0x356>
 801f054:	2a4e      	cmp	r2, #78	; 0x4e
 801f056:	f47f aed9 	bne.w	801ee0c <_strtod_l+0xc4>
 801f05a:	499f      	ldr	r1, [pc, #636]	; (801f2d8 <_strtod_l+0x590>)
 801f05c:	a817      	add	r0, sp, #92	; 0x5c
 801f05e:	f001 ff83 	bl	8020f68 <__match>
 801f062:	2800      	cmp	r0, #0
 801f064:	f43f aed2 	beq.w	801ee0c <_strtod_l+0xc4>
 801f068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f06a:	781b      	ldrb	r3, [r3, #0]
 801f06c:	2b28      	cmp	r3, #40	; 0x28
 801f06e:	d12d      	bne.n	801f0cc <_strtod_l+0x384>
 801f070:	499a      	ldr	r1, [pc, #616]	; (801f2dc <_strtod_l+0x594>)
 801f072:	aa1a      	add	r2, sp, #104	; 0x68
 801f074:	a817      	add	r0, sp, #92	; 0x5c
 801f076:	f001 ff8b 	bl	8020f90 <__hexnan>
 801f07a:	2805      	cmp	r0, #5
 801f07c:	d126      	bne.n	801f0cc <_strtod_l+0x384>
 801f07e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f080:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801f084:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801f088:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801f08c:	e6a0      	b.n	801edd0 <_strtod_l+0x88>
 801f08e:	210a      	movs	r1, #10
 801f090:	fb01 2e0e 	mla	lr, r1, lr, r2
 801f094:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801f098:	e7b9      	b.n	801f00e <_strtod_l+0x2c6>
 801f09a:	2a6e      	cmp	r2, #110	; 0x6e
 801f09c:	e7db      	b.n	801f056 <_strtod_l+0x30e>
 801f09e:	4990      	ldr	r1, [pc, #576]	; (801f2e0 <_strtod_l+0x598>)
 801f0a0:	a817      	add	r0, sp, #92	; 0x5c
 801f0a2:	f001 ff61 	bl	8020f68 <__match>
 801f0a6:	2800      	cmp	r0, #0
 801f0a8:	f43f aeb0 	beq.w	801ee0c <_strtod_l+0xc4>
 801f0ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f0ae:	498d      	ldr	r1, [pc, #564]	; (801f2e4 <_strtod_l+0x59c>)
 801f0b0:	3b01      	subs	r3, #1
 801f0b2:	a817      	add	r0, sp, #92	; 0x5c
 801f0b4:	9317      	str	r3, [sp, #92]	; 0x5c
 801f0b6:	f001 ff57 	bl	8020f68 <__match>
 801f0ba:	b910      	cbnz	r0, 801f0c2 <_strtod_l+0x37a>
 801f0bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f0be:	3301      	adds	r3, #1
 801f0c0:	9317      	str	r3, [sp, #92]	; 0x5c
 801f0c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 801f2f4 <_strtod_l+0x5ac>
 801f0c6:	f04f 0a00 	mov.w	sl, #0
 801f0ca:	e681      	b.n	801edd0 <_strtod_l+0x88>
 801f0cc:	4886      	ldr	r0, [pc, #536]	; (801f2e8 <_strtod_l+0x5a0>)
 801f0ce:	f002 fe6f 	bl	8021db0 <nan>
 801f0d2:	ec5b ab10 	vmov	sl, fp, d0
 801f0d6:	e67b      	b.n	801edd0 <_strtod_l+0x88>
 801f0d8:	9b05      	ldr	r3, [sp, #20]
 801f0da:	9807      	ldr	r0, [sp, #28]
 801f0dc:	1af3      	subs	r3, r6, r3
 801f0de:	2f00      	cmp	r7, #0
 801f0e0:	bf08      	it	eq
 801f0e2:	462f      	moveq	r7, r5
 801f0e4:	2d10      	cmp	r5, #16
 801f0e6:	9306      	str	r3, [sp, #24]
 801f0e8:	46a8      	mov	r8, r5
 801f0ea:	bfa8      	it	ge
 801f0ec:	f04f 0810 	movge.w	r8, #16
 801f0f0:	f7e1 fa30 	bl	8000554 <__aeabi_ui2d>
 801f0f4:	2d09      	cmp	r5, #9
 801f0f6:	4682      	mov	sl, r0
 801f0f8:	468b      	mov	fp, r1
 801f0fa:	dd13      	ble.n	801f124 <_strtod_l+0x3dc>
 801f0fc:	4b7b      	ldr	r3, [pc, #492]	; (801f2ec <_strtod_l+0x5a4>)
 801f0fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801f102:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801f106:	f7e1 fa9f 	bl	8000648 <__aeabi_dmul>
 801f10a:	4682      	mov	sl, r0
 801f10c:	4648      	mov	r0, r9
 801f10e:	468b      	mov	fp, r1
 801f110:	f7e1 fa20 	bl	8000554 <__aeabi_ui2d>
 801f114:	4602      	mov	r2, r0
 801f116:	460b      	mov	r3, r1
 801f118:	4650      	mov	r0, sl
 801f11a:	4659      	mov	r1, fp
 801f11c:	f7e1 f8de 	bl	80002dc <__adddf3>
 801f120:	4682      	mov	sl, r0
 801f122:	468b      	mov	fp, r1
 801f124:	2d0f      	cmp	r5, #15
 801f126:	dc38      	bgt.n	801f19a <_strtod_l+0x452>
 801f128:	9b06      	ldr	r3, [sp, #24]
 801f12a:	2b00      	cmp	r3, #0
 801f12c:	f43f ae50 	beq.w	801edd0 <_strtod_l+0x88>
 801f130:	dd24      	ble.n	801f17c <_strtod_l+0x434>
 801f132:	2b16      	cmp	r3, #22
 801f134:	dc0b      	bgt.n	801f14e <_strtod_l+0x406>
 801f136:	496d      	ldr	r1, [pc, #436]	; (801f2ec <_strtod_l+0x5a4>)
 801f138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801f13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f140:	4652      	mov	r2, sl
 801f142:	465b      	mov	r3, fp
 801f144:	f7e1 fa80 	bl	8000648 <__aeabi_dmul>
 801f148:	4682      	mov	sl, r0
 801f14a:	468b      	mov	fp, r1
 801f14c:	e640      	b.n	801edd0 <_strtod_l+0x88>
 801f14e:	9a06      	ldr	r2, [sp, #24]
 801f150:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801f154:	4293      	cmp	r3, r2
 801f156:	db20      	blt.n	801f19a <_strtod_l+0x452>
 801f158:	4c64      	ldr	r4, [pc, #400]	; (801f2ec <_strtod_l+0x5a4>)
 801f15a:	f1c5 050f 	rsb	r5, r5, #15
 801f15e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801f162:	4652      	mov	r2, sl
 801f164:	465b      	mov	r3, fp
 801f166:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f16a:	f7e1 fa6d 	bl	8000648 <__aeabi_dmul>
 801f16e:	9b06      	ldr	r3, [sp, #24]
 801f170:	1b5d      	subs	r5, r3, r5
 801f172:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801f176:	e9d4 2300 	ldrd	r2, r3, [r4]
 801f17a:	e7e3      	b.n	801f144 <_strtod_l+0x3fc>
 801f17c:	9b06      	ldr	r3, [sp, #24]
 801f17e:	3316      	adds	r3, #22
 801f180:	db0b      	blt.n	801f19a <_strtod_l+0x452>
 801f182:	9b05      	ldr	r3, [sp, #20]
 801f184:	1b9e      	subs	r6, r3, r6
 801f186:	4b59      	ldr	r3, [pc, #356]	; (801f2ec <_strtod_l+0x5a4>)
 801f188:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801f18c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f190:	4650      	mov	r0, sl
 801f192:	4659      	mov	r1, fp
 801f194:	f7e1 fb82 	bl	800089c <__aeabi_ddiv>
 801f198:	e7d6      	b.n	801f148 <_strtod_l+0x400>
 801f19a:	9b06      	ldr	r3, [sp, #24]
 801f19c:	eba5 0808 	sub.w	r8, r5, r8
 801f1a0:	4498      	add	r8, r3
 801f1a2:	f1b8 0f00 	cmp.w	r8, #0
 801f1a6:	dd74      	ble.n	801f292 <_strtod_l+0x54a>
 801f1a8:	f018 030f 	ands.w	r3, r8, #15
 801f1ac:	d00a      	beq.n	801f1c4 <_strtod_l+0x47c>
 801f1ae:	494f      	ldr	r1, [pc, #316]	; (801f2ec <_strtod_l+0x5a4>)
 801f1b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801f1b4:	4652      	mov	r2, sl
 801f1b6:	465b      	mov	r3, fp
 801f1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f1bc:	f7e1 fa44 	bl	8000648 <__aeabi_dmul>
 801f1c0:	4682      	mov	sl, r0
 801f1c2:	468b      	mov	fp, r1
 801f1c4:	f038 080f 	bics.w	r8, r8, #15
 801f1c8:	d04f      	beq.n	801f26a <_strtod_l+0x522>
 801f1ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801f1ce:	dd22      	ble.n	801f216 <_strtod_l+0x4ce>
 801f1d0:	2500      	movs	r5, #0
 801f1d2:	462e      	mov	r6, r5
 801f1d4:	9507      	str	r5, [sp, #28]
 801f1d6:	9505      	str	r5, [sp, #20]
 801f1d8:	2322      	movs	r3, #34	; 0x22
 801f1da:	f8df b118 	ldr.w	fp, [pc, #280]	; 801f2f4 <_strtod_l+0x5ac>
 801f1de:	6023      	str	r3, [r4, #0]
 801f1e0:	f04f 0a00 	mov.w	sl, #0
 801f1e4:	9b07      	ldr	r3, [sp, #28]
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	f43f adf2 	beq.w	801edd0 <_strtod_l+0x88>
 801f1ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f1ee:	4620      	mov	r0, r4
 801f1f0:	f001 ffee 	bl	80211d0 <_Bfree>
 801f1f4:	9905      	ldr	r1, [sp, #20]
 801f1f6:	4620      	mov	r0, r4
 801f1f8:	f001 ffea 	bl	80211d0 <_Bfree>
 801f1fc:	4631      	mov	r1, r6
 801f1fe:	4620      	mov	r0, r4
 801f200:	f001 ffe6 	bl	80211d0 <_Bfree>
 801f204:	9907      	ldr	r1, [sp, #28]
 801f206:	4620      	mov	r0, r4
 801f208:	f001 ffe2 	bl	80211d0 <_Bfree>
 801f20c:	4629      	mov	r1, r5
 801f20e:	4620      	mov	r0, r4
 801f210:	f001 ffde 	bl	80211d0 <_Bfree>
 801f214:	e5dc      	b.n	801edd0 <_strtod_l+0x88>
 801f216:	4b36      	ldr	r3, [pc, #216]	; (801f2f0 <_strtod_l+0x5a8>)
 801f218:	9304      	str	r3, [sp, #16]
 801f21a:	2300      	movs	r3, #0
 801f21c:	ea4f 1828 	mov.w	r8, r8, asr #4
 801f220:	4650      	mov	r0, sl
 801f222:	4659      	mov	r1, fp
 801f224:	4699      	mov	r9, r3
 801f226:	f1b8 0f01 	cmp.w	r8, #1
 801f22a:	dc21      	bgt.n	801f270 <_strtod_l+0x528>
 801f22c:	b10b      	cbz	r3, 801f232 <_strtod_l+0x4ea>
 801f22e:	4682      	mov	sl, r0
 801f230:	468b      	mov	fp, r1
 801f232:	4b2f      	ldr	r3, [pc, #188]	; (801f2f0 <_strtod_l+0x5a8>)
 801f234:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801f238:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801f23c:	4652      	mov	r2, sl
 801f23e:	465b      	mov	r3, fp
 801f240:	e9d9 0100 	ldrd	r0, r1, [r9]
 801f244:	f7e1 fa00 	bl	8000648 <__aeabi_dmul>
 801f248:	4b2a      	ldr	r3, [pc, #168]	; (801f2f4 <_strtod_l+0x5ac>)
 801f24a:	460a      	mov	r2, r1
 801f24c:	400b      	ands	r3, r1
 801f24e:	492a      	ldr	r1, [pc, #168]	; (801f2f8 <_strtod_l+0x5b0>)
 801f250:	428b      	cmp	r3, r1
 801f252:	4682      	mov	sl, r0
 801f254:	d8bc      	bhi.n	801f1d0 <_strtod_l+0x488>
 801f256:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801f25a:	428b      	cmp	r3, r1
 801f25c:	bf86      	itte	hi
 801f25e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801f2fc <_strtod_l+0x5b4>
 801f262:	f04f 3aff 	movhi.w	sl, #4294967295
 801f266:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801f26a:	2300      	movs	r3, #0
 801f26c:	9304      	str	r3, [sp, #16]
 801f26e:	e084      	b.n	801f37a <_strtod_l+0x632>
 801f270:	f018 0f01 	tst.w	r8, #1
 801f274:	d005      	beq.n	801f282 <_strtod_l+0x53a>
 801f276:	9b04      	ldr	r3, [sp, #16]
 801f278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f27c:	f7e1 f9e4 	bl	8000648 <__aeabi_dmul>
 801f280:	2301      	movs	r3, #1
 801f282:	9a04      	ldr	r2, [sp, #16]
 801f284:	3208      	adds	r2, #8
 801f286:	f109 0901 	add.w	r9, r9, #1
 801f28a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801f28e:	9204      	str	r2, [sp, #16]
 801f290:	e7c9      	b.n	801f226 <_strtod_l+0x4de>
 801f292:	d0ea      	beq.n	801f26a <_strtod_l+0x522>
 801f294:	f1c8 0800 	rsb	r8, r8, #0
 801f298:	f018 020f 	ands.w	r2, r8, #15
 801f29c:	d00a      	beq.n	801f2b4 <_strtod_l+0x56c>
 801f29e:	4b13      	ldr	r3, [pc, #76]	; (801f2ec <_strtod_l+0x5a4>)
 801f2a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f2a4:	4650      	mov	r0, sl
 801f2a6:	4659      	mov	r1, fp
 801f2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2ac:	f7e1 faf6 	bl	800089c <__aeabi_ddiv>
 801f2b0:	4682      	mov	sl, r0
 801f2b2:	468b      	mov	fp, r1
 801f2b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 801f2b8:	d0d7      	beq.n	801f26a <_strtod_l+0x522>
 801f2ba:	f1b8 0f1f 	cmp.w	r8, #31
 801f2be:	dd1f      	ble.n	801f300 <_strtod_l+0x5b8>
 801f2c0:	2500      	movs	r5, #0
 801f2c2:	462e      	mov	r6, r5
 801f2c4:	9507      	str	r5, [sp, #28]
 801f2c6:	9505      	str	r5, [sp, #20]
 801f2c8:	2322      	movs	r3, #34	; 0x22
 801f2ca:	f04f 0a00 	mov.w	sl, #0
 801f2ce:	f04f 0b00 	mov.w	fp, #0
 801f2d2:	6023      	str	r3, [r4, #0]
 801f2d4:	e786      	b.n	801f1e4 <_strtod_l+0x49c>
 801f2d6:	bf00      	nop
 801f2d8:	08022f7d 	.word	0x08022f7d
 801f2dc:	08022fb8 	.word	0x08022fb8
 801f2e0:	08022f75 	.word	0x08022f75
 801f2e4:	08023020 	.word	0x08023020
 801f2e8:	080232d0 	.word	0x080232d0
 801f2ec:	080231b0 	.word	0x080231b0
 801f2f0:	08023188 	.word	0x08023188
 801f2f4:	7ff00000 	.word	0x7ff00000
 801f2f8:	7ca00000 	.word	0x7ca00000
 801f2fc:	7fefffff 	.word	0x7fefffff
 801f300:	f018 0310 	ands.w	r3, r8, #16
 801f304:	bf18      	it	ne
 801f306:	236a      	movne	r3, #106	; 0x6a
 801f308:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801f6b8 <_strtod_l+0x970>
 801f30c:	9304      	str	r3, [sp, #16]
 801f30e:	4650      	mov	r0, sl
 801f310:	4659      	mov	r1, fp
 801f312:	2300      	movs	r3, #0
 801f314:	f018 0f01 	tst.w	r8, #1
 801f318:	d004      	beq.n	801f324 <_strtod_l+0x5dc>
 801f31a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801f31e:	f7e1 f993 	bl	8000648 <__aeabi_dmul>
 801f322:	2301      	movs	r3, #1
 801f324:	ea5f 0868 	movs.w	r8, r8, asr #1
 801f328:	f109 0908 	add.w	r9, r9, #8
 801f32c:	d1f2      	bne.n	801f314 <_strtod_l+0x5cc>
 801f32e:	b10b      	cbz	r3, 801f334 <_strtod_l+0x5ec>
 801f330:	4682      	mov	sl, r0
 801f332:	468b      	mov	fp, r1
 801f334:	9b04      	ldr	r3, [sp, #16]
 801f336:	b1c3      	cbz	r3, 801f36a <_strtod_l+0x622>
 801f338:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801f33c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801f340:	2b00      	cmp	r3, #0
 801f342:	4659      	mov	r1, fp
 801f344:	dd11      	ble.n	801f36a <_strtod_l+0x622>
 801f346:	2b1f      	cmp	r3, #31
 801f348:	f340 8124 	ble.w	801f594 <_strtod_l+0x84c>
 801f34c:	2b34      	cmp	r3, #52	; 0x34
 801f34e:	bfde      	ittt	le
 801f350:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801f354:	f04f 33ff 	movle.w	r3, #4294967295
 801f358:	fa03 f202 	lslle.w	r2, r3, r2
 801f35c:	f04f 0a00 	mov.w	sl, #0
 801f360:	bfcc      	ite	gt
 801f362:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801f366:	ea02 0b01 	andle.w	fp, r2, r1
 801f36a:	2200      	movs	r2, #0
 801f36c:	2300      	movs	r3, #0
 801f36e:	4650      	mov	r0, sl
 801f370:	4659      	mov	r1, fp
 801f372:	f7e1 fbd1 	bl	8000b18 <__aeabi_dcmpeq>
 801f376:	2800      	cmp	r0, #0
 801f378:	d1a2      	bne.n	801f2c0 <_strtod_l+0x578>
 801f37a:	9b07      	ldr	r3, [sp, #28]
 801f37c:	9300      	str	r3, [sp, #0]
 801f37e:	9908      	ldr	r1, [sp, #32]
 801f380:	462b      	mov	r3, r5
 801f382:	463a      	mov	r2, r7
 801f384:	4620      	mov	r0, r4
 801f386:	f001 ff8b 	bl	80212a0 <__s2b>
 801f38a:	9007      	str	r0, [sp, #28]
 801f38c:	2800      	cmp	r0, #0
 801f38e:	f43f af1f 	beq.w	801f1d0 <_strtod_l+0x488>
 801f392:	9b05      	ldr	r3, [sp, #20]
 801f394:	1b9e      	subs	r6, r3, r6
 801f396:	9b06      	ldr	r3, [sp, #24]
 801f398:	2b00      	cmp	r3, #0
 801f39a:	bfb4      	ite	lt
 801f39c:	4633      	movlt	r3, r6
 801f39e:	2300      	movge	r3, #0
 801f3a0:	930c      	str	r3, [sp, #48]	; 0x30
 801f3a2:	9b06      	ldr	r3, [sp, #24]
 801f3a4:	2500      	movs	r5, #0
 801f3a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f3aa:	9312      	str	r3, [sp, #72]	; 0x48
 801f3ac:	462e      	mov	r6, r5
 801f3ae:	9b07      	ldr	r3, [sp, #28]
 801f3b0:	4620      	mov	r0, r4
 801f3b2:	6859      	ldr	r1, [r3, #4]
 801f3b4:	f001 fecc 	bl	8021150 <_Balloc>
 801f3b8:	9005      	str	r0, [sp, #20]
 801f3ba:	2800      	cmp	r0, #0
 801f3bc:	f43f af0c 	beq.w	801f1d8 <_strtod_l+0x490>
 801f3c0:	9b07      	ldr	r3, [sp, #28]
 801f3c2:	691a      	ldr	r2, [r3, #16]
 801f3c4:	3202      	adds	r2, #2
 801f3c6:	f103 010c 	add.w	r1, r3, #12
 801f3ca:	0092      	lsls	r2, r2, #2
 801f3cc:	300c      	adds	r0, #12
 801f3ce:	f7fe fe59 	bl	801e084 <memcpy>
 801f3d2:	ec4b ab10 	vmov	d0, sl, fp
 801f3d6:	aa1a      	add	r2, sp, #104	; 0x68
 801f3d8:	a919      	add	r1, sp, #100	; 0x64
 801f3da:	4620      	mov	r0, r4
 801f3dc:	f002 faa6 	bl	802192c <__d2b>
 801f3e0:	ec4b ab18 	vmov	d8, sl, fp
 801f3e4:	9018      	str	r0, [sp, #96]	; 0x60
 801f3e6:	2800      	cmp	r0, #0
 801f3e8:	f43f aef6 	beq.w	801f1d8 <_strtod_l+0x490>
 801f3ec:	2101      	movs	r1, #1
 801f3ee:	4620      	mov	r0, r4
 801f3f0:	f001 fff0 	bl	80213d4 <__i2b>
 801f3f4:	4606      	mov	r6, r0
 801f3f6:	2800      	cmp	r0, #0
 801f3f8:	f43f aeee 	beq.w	801f1d8 <_strtod_l+0x490>
 801f3fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f3fe:	9904      	ldr	r1, [sp, #16]
 801f400:	2b00      	cmp	r3, #0
 801f402:	bfab      	itete	ge
 801f404:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801f406:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801f408:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801f40a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801f40e:	bfac      	ite	ge
 801f410:	eb03 0902 	addge.w	r9, r3, r2
 801f414:	1ad7      	sublt	r7, r2, r3
 801f416:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f418:	eba3 0801 	sub.w	r8, r3, r1
 801f41c:	4490      	add	r8, r2
 801f41e:	4ba1      	ldr	r3, [pc, #644]	; (801f6a4 <_strtod_l+0x95c>)
 801f420:	f108 38ff 	add.w	r8, r8, #4294967295
 801f424:	4598      	cmp	r8, r3
 801f426:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801f42a:	f280 80c7 	bge.w	801f5bc <_strtod_l+0x874>
 801f42e:	eba3 0308 	sub.w	r3, r3, r8
 801f432:	2b1f      	cmp	r3, #31
 801f434:	eba2 0203 	sub.w	r2, r2, r3
 801f438:	f04f 0101 	mov.w	r1, #1
 801f43c:	f300 80b1 	bgt.w	801f5a2 <_strtod_l+0x85a>
 801f440:	fa01 f303 	lsl.w	r3, r1, r3
 801f444:	930d      	str	r3, [sp, #52]	; 0x34
 801f446:	2300      	movs	r3, #0
 801f448:	9308      	str	r3, [sp, #32]
 801f44a:	eb09 0802 	add.w	r8, r9, r2
 801f44e:	9b04      	ldr	r3, [sp, #16]
 801f450:	45c1      	cmp	r9, r8
 801f452:	4417      	add	r7, r2
 801f454:	441f      	add	r7, r3
 801f456:	464b      	mov	r3, r9
 801f458:	bfa8      	it	ge
 801f45a:	4643      	movge	r3, r8
 801f45c:	42bb      	cmp	r3, r7
 801f45e:	bfa8      	it	ge
 801f460:	463b      	movge	r3, r7
 801f462:	2b00      	cmp	r3, #0
 801f464:	bfc2      	ittt	gt
 801f466:	eba8 0803 	subgt.w	r8, r8, r3
 801f46a:	1aff      	subgt	r7, r7, r3
 801f46c:	eba9 0903 	subgt.w	r9, r9, r3
 801f470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f472:	2b00      	cmp	r3, #0
 801f474:	dd17      	ble.n	801f4a6 <_strtod_l+0x75e>
 801f476:	4631      	mov	r1, r6
 801f478:	461a      	mov	r2, r3
 801f47a:	4620      	mov	r0, r4
 801f47c:	f002 f86a 	bl	8021554 <__pow5mult>
 801f480:	4606      	mov	r6, r0
 801f482:	2800      	cmp	r0, #0
 801f484:	f43f aea8 	beq.w	801f1d8 <_strtod_l+0x490>
 801f488:	4601      	mov	r1, r0
 801f48a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f48c:	4620      	mov	r0, r4
 801f48e:	f001 ffb7 	bl	8021400 <__multiply>
 801f492:	900b      	str	r0, [sp, #44]	; 0x2c
 801f494:	2800      	cmp	r0, #0
 801f496:	f43f ae9f 	beq.w	801f1d8 <_strtod_l+0x490>
 801f49a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f49c:	4620      	mov	r0, r4
 801f49e:	f001 fe97 	bl	80211d0 <_Bfree>
 801f4a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4a4:	9318      	str	r3, [sp, #96]	; 0x60
 801f4a6:	f1b8 0f00 	cmp.w	r8, #0
 801f4aa:	f300 808c 	bgt.w	801f5c6 <_strtod_l+0x87e>
 801f4ae:	9b06      	ldr	r3, [sp, #24]
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	dd08      	ble.n	801f4c6 <_strtod_l+0x77e>
 801f4b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f4b6:	9905      	ldr	r1, [sp, #20]
 801f4b8:	4620      	mov	r0, r4
 801f4ba:	f002 f84b 	bl	8021554 <__pow5mult>
 801f4be:	9005      	str	r0, [sp, #20]
 801f4c0:	2800      	cmp	r0, #0
 801f4c2:	f43f ae89 	beq.w	801f1d8 <_strtod_l+0x490>
 801f4c6:	2f00      	cmp	r7, #0
 801f4c8:	dd08      	ble.n	801f4dc <_strtod_l+0x794>
 801f4ca:	9905      	ldr	r1, [sp, #20]
 801f4cc:	463a      	mov	r2, r7
 801f4ce:	4620      	mov	r0, r4
 801f4d0:	f002 f89a 	bl	8021608 <__lshift>
 801f4d4:	9005      	str	r0, [sp, #20]
 801f4d6:	2800      	cmp	r0, #0
 801f4d8:	f43f ae7e 	beq.w	801f1d8 <_strtod_l+0x490>
 801f4dc:	f1b9 0f00 	cmp.w	r9, #0
 801f4e0:	dd08      	ble.n	801f4f4 <_strtod_l+0x7ac>
 801f4e2:	4631      	mov	r1, r6
 801f4e4:	464a      	mov	r2, r9
 801f4e6:	4620      	mov	r0, r4
 801f4e8:	f002 f88e 	bl	8021608 <__lshift>
 801f4ec:	4606      	mov	r6, r0
 801f4ee:	2800      	cmp	r0, #0
 801f4f0:	f43f ae72 	beq.w	801f1d8 <_strtod_l+0x490>
 801f4f4:	9a05      	ldr	r2, [sp, #20]
 801f4f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f4f8:	4620      	mov	r0, r4
 801f4fa:	f002 f911 	bl	8021720 <__mdiff>
 801f4fe:	4605      	mov	r5, r0
 801f500:	2800      	cmp	r0, #0
 801f502:	f43f ae69 	beq.w	801f1d8 <_strtod_l+0x490>
 801f506:	68c3      	ldr	r3, [r0, #12]
 801f508:	930b      	str	r3, [sp, #44]	; 0x2c
 801f50a:	2300      	movs	r3, #0
 801f50c:	60c3      	str	r3, [r0, #12]
 801f50e:	4631      	mov	r1, r6
 801f510:	f002 f8ea 	bl	80216e8 <__mcmp>
 801f514:	2800      	cmp	r0, #0
 801f516:	da60      	bge.n	801f5da <_strtod_l+0x892>
 801f518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f51a:	ea53 030a 	orrs.w	r3, r3, sl
 801f51e:	f040 8082 	bne.w	801f626 <_strtod_l+0x8de>
 801f522:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f526:	2b00      	cmp	r3, #0
 801f528:	d17d      	bne.n	801f626 <_strtod_l+0x8de>
 801f52a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f52e:	0d1b      	lsrs	r3, r3, #20
 801f530:	051b      	lsls	r3, r3, #20
 801f532:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801f536:	d976      	bls.n	801f626 <_strtod_l+0x8de>
 801f538:	696b      	ldr	r3, [r5, #20]
 801f53a:	b913      	cbnz	r3, 801f542 <_strtod_l+0x7fa>
 801f53c:	692b      	ldr	r3, [r5, #16]
 801f53e:	2b01      	cmp	r3, #1
 801f540:	dd71      	ble.n	801f626 <_strtod_l+0x8de>
 801f542:	4629      	mov	r1, r5
 801f544:	2201      	movs	r2, #1
 801f546:	4620      	mov	r0, r4
 801f548:	f002 f85e 	bl	8021608 <__lshift>
 801f54c:	4631      	mov	r1, r6
 801f54e:	4605      	mov	r5, r0
 801f550:	f002 f8ca 	bl	80216e8 <__mcmp>
 801f554:	2800      	cmp	r0, #0
 801f556:	dd66      	ble.n	801f626 <_strtod_l+0x8de>
 801f558:	9904      	ldr	r1, [sp, #16]
 801f55a:	4a53      	ldr	r2, [pc, #332]	; (801f6a8 <_strtod_l+0x960>)
 801f55c:	465b      	mov	r3, fp
 801f55e:	2900      	cmp	r1, #0
 801f560:	f000 8081 	beq.w	801f666 <_strtod_l+0x91e>
 801f564:	ea02 010b 	and.w	r1, r2, fp
 801f568:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801f56c:	dc7b      	bgt.n	801f666 <_strtod_l+0x91e>
 801f56e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801f572:	f77f aea9 	ble.w	801f2c8 <_strtod_l+0x580>
 801f576:	4b4d      	ldr	r3, [pc, #308]	; (801f6ac <_strtod_l+0x964>)
 801f578:	4650      	mov	r0, sl
 801f57a:	4659      	mov	r1, fp
 801f57c:	2200      	movs	r2, #0
 801f57e:	f7e1 f863 	bl	8000648 <__aeabi_dmul>
 801f582:	460b      	mov	r3, r1
 801f584:	4303      	orrs	r3, r0
 801f586:	bf08      	it	eq
 801f588:	2322      	moveq	r3, #34	; 0x22
 801f58a:	4682      	mov	sl, r0
 801f58c:	468b      	mov	fp, r1
 801f58e:	bf08      	it	eq
 801f590:	6023      	streq	r3, [r4, #0]
 801f592:	e62b      	b.n	801f1ec <_strtod_l+0x4a4>
 801f594:	f04f 32ff 	mov.w	r2, #4294967295
 801f598:	fa02 f303 	lsl.w	r3, r2, r3
 801f59c:	ea03 0a0a 	and.w	sl, r3, sl
 801f5a0:	e6e3      	b.n	801f36a <_strtod_l+0x622>
 801f5a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801f5a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801f5aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801f5ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801f5b2:	fa01 f308 	lsl.w	r3, r1, r8
 801f5b6:	9308      	str	r3, [sp, #32]
 801f5b8:	910d      	str	r1, [sp, #52]	; 0x34
 801f5ba:	e746      	b.n	801f44a <_strtod_l+0x702>
 801f5bc:	2300      	movs	r3, #0
 801f5be:	9308      	str	r3, [sp, #32]
 801f5c0:	2301      	movs	r3, #1
 801f5c2:	930d      	str	r3, [sp, #52]	; 0x34
 801f5c4:	e741      	b.n	801f44a <_strtod_l+0x702>
 801f5c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f5c8:	4642      	mov	r2, r8
 801f5ca:	4620      	mov	r0, r4
 801f5cc:	f002 f81c 	bl	8021608 <__lshift>
 801f5d0:	9018      	str	r0, [sp, #96]	; 0x60
 801f5d2:	2800      	cmp	r0, #0
 801f5d4:	f47f af6b 	bne.w	801f4ae <_strtod_l+0x766>
 801f5d8:	e5fe      	b.n	801f1d8 <_strtod_l+0x490>
 801f5da:	465f      	mov	r7, fp
 801f5dc:	d16e      	bne.n	801f6bc <_strtod_l+0x974>
 801f5de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f5e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f5e4:	b342      	cbz	r2, 801f638 <_strtod_l+0x8f0>
 801f5e6:	4a32      	ldr	r2, [pc, #200]	; (801f6b0 <_strtod_l+0x968>)
 801f5e8:	4293      	cmp	r3, r2
 801f5ea:	d128      	bne.n	801f63e <_strtod_l+0x8f6>
 801f5ec:	9b04      	ldr	r3, [sp, #16]
 801f5ee:	4651      	mov	r1, sl
 801f5f0:	b1eb      	cbz	r3, 801f62e <_strtod_l+0x8e6>
 801f5f2:	4b2d      	ldr	r3, [pc, #180]	; (801f6a8 <_strtod_l+0x960>)
 801f5f4:	403b      	ands	r3, r7
 801f5f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801f5fa:	f04f 32ff 	mov.w	r2, #4294967295
 801f5fe:	d819      	bhi.n	801f634 <_strtod_l+0x8ec>
 801f600:	0d1b      	lsrs	r3, r3, #20
 801f602:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f606:	fa02 f303 	lsl.w	r3, r2, r3
 801f60a:	4299      	cmp	r1, r3
 801f60c:	d117      	bne.n	801f63e <_strtod_l+0x8f6>
 801f60e:	4b29      	ldr	r3, [pc, #164]	; (801f6b4 <_strtod_l+0x96c>)
 801f610:	429f      	cmp	r7, r3
 801f612:	d102      	bne.n	801f61a <_strtod_l+0x8d2>
 801f614:	3101      	adds	r1, #1
 801f616:	f43f addf 	beq.w	801f1d8 <_strtod_l+0x490>
 801f61a:	4b23      	ldr	r3, [pc, #140]	; (801f6a8 <_strtod_l+0x960>)
 801f61c:	403b      	ands	r3, r7
 801f61e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801f622:	f04f 0a00 	mov.w	sl, #0
 801f626:	9b04      	ldr	r3, [sp, #16]
 801f628:	2b00      	cmp	r3, #0
 801f62a:	d1a4      	bne.n	801f576 <_strtod_l+0x82e>
 801f62c:	e5de      	b.n	801f1ec <_strtod_l+0x4a4>
 801f62e:	f04f 33ff 	mov.w	r3, #4294967295
 801f632:	e7ea      	b.n	801f60a <_strtod_l+0x8c2>
 801f634:	4613      	mov	r3, r2
 801f636:	e7e8      	b.n	801f60a <_strtod_l+0x8c2>
 801f638:	ea53 030a 	orrs.w	r3, r3, sl
 801f63c:	d08c      	beq.n	801f558 <_strtod_l+0x810>
 801f63e:	9b08      	ldr	r3, [sp, #32]
 801f640:	b1db      	cbz	r3, 801f67a <_strtod_l+0x932>
 801f642:	423b      	tst	r3, r7
 801f644:	d0ef      	beq.n	801f626 <_strtod_l+0x8de>
 801f646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f648:	9a04      	ldr	r2, [sp, #16]
 801f64a:	4650      	mov	r0, sl
 801f64c:	4659      	mov	r1, fp
 801f64e:	b1c3      	cbz	r3, 801f682 <_strtod_l+0x93a>
 801f650:	f7ff fb5e 	bl	801ed10 <sulp>
 801f654:	4602      	mov	r2, r0
 801f656:	460b      	mov	r3, r1
 801f658:	ec51 0b18 	vmov	r0, r1, d8
 801f65c:	f7e0 fe3e 	bl	80002dc <__adddf3>
 801f660:	4682      	mov	sl, r0
 801f662:	468b      	mov	fp, r1
 801f664:	e7df      	b.n	801f626 <_strtod_l+0x8de>
 801f666:	4013      	ands	r3, r2
 801f668:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801f66c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801f670:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801f674:	f04f 3aff 	mov.w	sl, #4294967295
 801f678:	e7d5      	b.n	801f626 <_strtod_l+0x8de>
 801f67a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f67c:	ea13 0f0a 	tst.w	r3, sl
 801f680:	e7e0      	b.n	801f644 <_strtod_l+0x8fc>
 801f682:	f7ff fb45 	bl	801ed10 <sulp>
 801f686:	4602      	mov	r2, r0
 801f688:	460b      	mov	r3, r1
 801f68a:	ec51 0b18 	vmov	r0, r1, d8
 801f68e:	f7e0 fe23 	bl	80002d8 <__aeabi_dsub>
 801f692:	2200      	movs	r2, #0
 801f694:	2300      	movs	r3, #0
 801f696:	4682      	mov	sl, r0
 801f698:	468b      	mov	fp, r1
 801f69a:	f7e1 fa3d 	bl	8000b18 <__aeabi_dcmpeq>
 801f69e:	2800      	cmp	r0, #0
 801f6a0:	d0c1      	beq.n	801f626 <_strtod_l+0x8de>
 801f6a2:	e611      	b.n	801f2c8 <_strtod_l+0x580>
 801f6a4:	fffffc02 	.word	0xfffffc02
 801f6a8:	7ff00000 	.word	0x7ff00000
 801f6ac:	39500000 	.word	0x39500000
 801f6b0:	000fffff 	.word	0x000fffff
 801f6b4:	7fefffff 	.word	0x7fefffff
 801f6b8:	08022fd0 	.word	0x08022fd0
 801f6bc:	4631      	mov	r1, r6
 801f6be:	4628      	mov	r0, r5
 801f6c0:	f002 f990 	bl	80219e4 <__ratio>
 801f6c4:	ec59 8b10 	vmov	r8, r9, d0
 801f6c8:	ee10 0a10 	vmov	r0, s0
 801f6cc:	2200      	movs	r2, #0
 801f6ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f6d2:	4649      	mov	r1, r9
 801f6d4:	f7e1 fa34 	bl	8000b40 <__aeabi_dcmple>
 801f6d8:	2800      	cmp	r0, #0
 801f6da:	d07a      	beq.n	801f7d2 <_strtod_l+0xa8a>
 801f6dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d04a      	beq.n	801f778 <_strtod_l+0xa30>
 801f6e2:	4b95      	ldr	r3, [pc, #596]	; (801f938 <_strtod_l+0xbf0>)
 801f6e4:	2200      	movs	r2, #0
 801f6e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f6ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801f938 <_strtod_l+0xbf0>
 801f6ee:	f04f 0800 	mov.w	r8, #0
 801f6f2:	4b92      	ldr	r3, [pc, #584]	; (801f93c <_strtod_l+0xbf4>)
 801f6f4:	403b      	ands	r3, r7
 801f6f6:	930d      	str	r3, [sp, #52]	; 0x34
 801f6f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f6fa:	4b91      	ldr	r3, [pc, #580]	; (801f940 <_strtod_l+0xbf8>)
 801f6fc:	429a      	cmp	r2, r3
 801f6fe:	f040 80b0 	bne.w	801f862 <_strtod_l+0xb1a>
 801f702:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f706:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801f70a:	ec4b ab10 	vmov	d0, sl, fp
 801f70e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f712:	f002 f88f 	bl	8021834 <__ulp>
 801f716:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f71a:	ec53 2b10 	vmov	r2, r3, d0
 801f71e:	f7e0 ff93 	bl	8000648 <__aeabi_dmul>
 801f722:	4652      	mov	r2, sl
 801f724:	465b      	mov	r3, fp
 801f726:	f7e0 fdd9 	bl	80002dc <__adddf3>
 801f72a:	460b      	mov	r3, r1
 801f72c:	4983      	ldr	r1, [pc, #524]	; (801f93c <_strtod_l+0xbf4>)
 801f72e:	4a85      	ldr	r2, [pc, #532]	; (801f944 <_strtod_l+0xbfc>)
 801f730:	4019      	ands	r1, r3
 801f732:	4291      	cmp	r1, r2
 801f734:	4682      	mov	sl, r0
 801f736:	d960      	bls.n	801f7fa <_strtod_l+0xab2>
 801f738:	ee18 3a90 	vmov	r3, s17
 801f73c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801f740:	4293      	cmp	r3, r2
 801f742:	d104      	bne.n	801f74e <_strtod_l+0xa06>
 801f744:	ee18 3a10 	vmov	r3, s16
 801f748:	3301      	adds	r3, #1
 801f74a:	f43f ad45 	beq.w	801f1d8 <_strtod_l+0x490>
 801f74e:	f8df b200 	ldr.w	fp, [pc, #512]	; 801f950 <_strtod_l+0xc08>
 801f752:	f04f 3aff 	mov.w	sl, #4294967295
 801f756:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f758:	4620      	mov	r0, r4
 801f75a:	f001 fd39 	bl	80211d0 <_Bfree>
 801f75e:	9905      	ldr	r1, [sp, #20]
 801f760:	4620      	mov	r0, r4
 801f762:	f001 fd35 	bl	80211d0 <_Bfree>
 801f766:	4631      	mov	r1, r6
 801f768:	4620      	mov	r0, r4
 801f76a:	f001 fd31 	bl	80211d0 <_Bfree>
 801f76e:	4629      	mov	r1, r5
 801f770:	4620      	mov	r0, r4
 801f772:	f001 fd2d 	bl	80211d0 <_Bfree>
 801f776:	e61a      	b.n	801f3ae <_strtod_l+0x666>
 801f778:	f1ba 0f00 	cmp.w	sl, #0
 801f77c:	d11b      	bne.n	801f7b6 <_strtod_l+0xa6e>
 801f77e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f782:	b9f3      	cbnz	r3, 801f7c2 <_strtod_l+0xa7a>
 801f784:	4b6c      	ldr	r3, [pc, #432]	; (801f938 <_strtod_l+0xbf0>)
 801f786:	2200      	movs	r2, #0
 801f788:	4640      	mov	r0, r8
 801f78a:	4649      	mov	r1, r9
 801f78c:	f7e1 f9ce 	bl	8000b2c <__aeabi_dcmplt>
 801f790:	b9d0      	cbnz	r0, 801f7c8 <_strtod_l+0xa80>
 801f792:	4640      	mov	r0, r8
 801f794:	4649      	mov	r1, r9
 801f796:	4b6c      	ldr	r3, [pc, #432]	; (801f948 <_strtod_l+0xc00>)
 801f798:	2200      	movs	r2, #0
 801f79a:	f7e0 ff55 	bl	8000648 <__aeabi_dmul>
 801f79e:	4680      	mov	r8, r0
 801f7a0:	4689      	mov	r9, r1
 801f7a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801f7a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801f7aa:	9315      	str	r3, [sp, #84]	; 0x54
 801f7ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801f7b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f7b4:	e79d      	b.n	801f6f2 <_strtod_l+0x9aa>
 801f7b6:	f1ba 0f01 	cmp.w	sl, #1
 801f7ba:	d102      	bne.n	801f7c2 <_strtod_l+0xa7a>
 801f7bc:	2f00      	cmp	r7, #0
 801f7be:	f43f ad83 	beq.w	801f2c8 <_strtod_l+0x580>
 801f7c2:	4b62      	ldr	r3, [pc, #392]	; (801f94c <_strtod_l+0xc04>)
 801f7c4:	2200      	movs	r2, #0
 801f7c6:	e78e      	b.n	801f6e6 <_strtod_l+0x99e>
 801f7c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801f948 <_strtod_l+0xc00>
 801f7cc:	f04f 0800 	mov.w	r8, #0
 801f7d0:	e7e7      	b.n	801f7a2 <_strtod_l+0xa5a>
 801f7d2:	4b5d      	ldr	r3, [pc, #372]	; (801f948 <_strtod_l+0xc00>)
 801f7d4:	4640      	mov	r0, r8
 801f7d6:	4649      	mov	r1, r9
 801f7d8:	2200      	movs	r2, #0
 801f7da:	f7e0 ff35 	bl	8000648 <__aeabi_dmul>
 801f7de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f7e0:	4680      	mov	r8, r0
 801f7e2:	4689      	mov	r9, r1
 801f7e4:	b933      	cbnz	r3, 801f7f4 <_strtod_l+0xaac>
 801f7e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f7ea:	900e      	str	r0, [sp, #56]	; 0x38
 801f7ec:	930f      	str	r3, [sp, #60]	; 0x3c
 801f7ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801f7f2:	e7dd      	b.n	801f7b0 <_strtod_l+0xa68>
 801f7f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801f7f8:	e7f9      	b.n	801f7ee <_strtod_l+0xaa6>
 801f7fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801f7fe:	9b04      	ldr	r3, [sp, #16]
 801f800:	2b00      	cmp	r3, #0
 801f802:	d1a8      	bne.n	801f756 <_strtod_l+0xa0e>
 801f804:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f80a:	0d1b      	lsrs	r3, r3, #20
 801f80c:	051b      	lsls	r3, r3, #20
 801f80e:	429a      	cmp	r2, r3
 801f810:	d1a1      	bne.n	801f756 <_strtod_l+0xa0e>
 801f812:	4640      	mov	r0, r8
 801f814:	4649      	mov	r1, r9
 801f816:	f7e1 fa77 	bl	8000d08 <__aeabi_d2lz>
 801f81a:	f7e0 fee7 	bl	80005ec <__aeabi_l2d>
 801f81e:	4602      	mov	r2, r0
 801f820:	460b      	mov	r3, r1
 801f822:	4640      	mov	r0, r8
 801f824:	4649      	mov	r1, r9
 801f826:	f7e0 fd57 	bl	80002d8 <__aeabi_dsub>
 801f82a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f82c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801f830:	ea43 030a 	orr.w	r3, r3, sl
 801f834:	4313      	orrs	r3, r2
 801f836:	4680      	mov	r8, r0
 801f838:	4689      	mov	r9, r1
 801f83a:	d055      	beq.n	801f8e8 <_strtod_l+0xba0>
 801f83c:	a336      	add	r3, pc, #216	; (adr r3, 801f918 <_strtod_l+0xbd0>)
 801f83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f842:	f7e1 f973 	bl	8000b2c <__aeabi_dcmplt>
 801f846:	2800      	cmp	r0, #0
 801f848:	f47f acd0 	bne.w	801f1ec <_strtod_l+0x4a4>
 801f84c:	a334      	add	r3, pc, #208	; (adr r3, 801f920 <_strtod_l+0xbd8>)
 801f84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f852:	4640      	mov	r0, r8
 801f854:	4649      	mov	r1, r9
 801f856:	f7e1 f987 	bl	8000b68 <__aeabi_dcmpgt>
 801f85a:	2800      	cmp	r0, #0
 801f85c:	f43f af7b 	beq.w	801f756 <_strtod_l+0xa0e>
 801f860:	e4c4      	b.n	801f1ec <_strtod_l+0x4a4>
 801f862:	9b04      	ldr	r3, [sp, #16]
 801f864:	b333      	cbz	r3, 801f8b4 <_strtod_l+0xb6c>
 801f866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f868:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801f86c:	d822      	bhi.n	801f8b4 <_strtod_l+0xb6c>
 801f86e:	a32e      	add	r3, pc, #184	; (adr r3, 801f928 <_strtod_l+0xbe0>)
 801f870:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f874:	4640      	mov	r0, r8
 801f876:	4649      	mov	r1, r9
 801f878:	f7e1 f962 	bl	8000b40 <__aeabi_dcmple>
 801f87c:	b1a0      	cbz	r0, 801f8a8 <_strtod_l+0xb60>
 801f87e:	4649      	mov	r1, r9
 801f880:	4640      	mov	r0, r8
 801f882:	f7e1 f9b9 	bl	8000bf8 <__aeabi_d2uiz>
 801f886:	2801      	cmp	r0, #1
 801f888:	bf38      	it	cc
 801f88a:	2001      	movcc	r0, #1
 801f88c:	f7e0 fe62 	bl	8000554 <__aeabi_ui2d>
 801f890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f892:	4680      	mov	r8, r0
 801f894:	4689      	mov	r9, r1
 801f896:	bb23      	cbnz	r3, 801f8e2 <_strtod_l+0xb9a>
 801f898:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f89c:	9010      	str	r0, [sp, #64]	; 0x40
 801f89e:	9311      	str	r3, [sp, #68]	; 0x44
 801f8a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801f8a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801f8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f8ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801f8b0:	1a9b      	subs	r3, r3, r2
 801f8b2:	9309      	str	r3, [sp, #36]	; 0x24
 801f8b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f8b8:	eeb0 0a48 	vmov.f32	s0, s16
 801f8bc:	eef0 0a68 	vmov.f32	s1, s17
 801f8c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801f8c4:	f001 ffb6 	bl	8021834 <__ulp>
 801f8c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801f8cc:	ec53 2b10 	vmov	r2, r3, d0
 801f8d0:	f7e0 feba 	bl	8000648 <__aeabi_dmul>
 801f8d4:	ec53 2b18 	vmov	r2, r3, d8
 801f8d8:	f7e0 fd00 	bl	80002dc <__adddf3>
 801f8dc:	4682      	mov	sl, r0
 801f8de:	468b      	mov	fp, r1
 801f8e0:	e78d      	b.n	801f7fe <_strtod_l+0xab6>
 801f8e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801f8e6:	e7db      	b.n	801f8a0 <_strtod_l+0xb58>
 801f8e8:	a311      	add	r3, pc, #68	; (adr r3, 801f930 <_strtod_l+0xbe8>)
 801f8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8ee:	f7e1 f91d 	bl	8000b2c <__aeabi_dcmplt>
 801f8f2:	e7b2      	b.n	801f85a <_strtod_l+0xb12>
 801f8f4:	2300      	movs	r3, #0
 801f8f6:	930a      	str	r3, [sp, #40]	; 0x28
 801f8f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f8fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f8fc:	6013      	str	r3, [r2, #0]
 801f8fe:	f7ff ba6b 	b.w	801edd8 <_strtod_l+0x90>
 801f902:	2a65      	cmp	r2, #101	; 0x65
 801f904:	f43f ab5f 	beq.w	801efc6 <_strtod_l+0x27e>
 801f908:	2a45      	cmp	r2, #69	; 0x45
 801f90a:	f43f ab5c 	beq.w	801efc6 <_strtod_l+0x27e>
 801f90e:	2301      	movs	r3, #1
 801f910:	f7ff bb94 	b.w	801f03c <_strtod_l+0x2f4>
 801f914:	f3af 8000 	nop.w
 801f918:	94a03595 	.word	0x94a03595
 801f91c:	3fdfffff 	.word	0x3fdfffff
 801f920:	35afe535 	.word	0x35afe535
 801f924:	3fe00000 	.word	0x3fe00000
 801f928:	ffc00000 	.word	0xffc00000
 801f92c:	41dfffff 	.word	0x41dfffff
 801f930:	94a03595 	.word	0x94a03595
 801f934:	3fcfffff 	.word	0x3fcfffff
 801f938:	3ff00000 	.word	0x3ff00000
 801f93c:	7ff00000 	.word	0x7ff00000
 801f940:	7fe00000 	.word	0x7fe00000
 801f944:	7c9fffff 	.word	0x7c9fffff
 801f948:	3fe00000 	.word	0x3fe00000
 801f94c:	bff00000 	.word	0xbff00000
 801f950:	7fefffff 	.word	0x7fefffff

0801f954 <strtod>:
 801f954:	460a      	mov	r2, r1
 801f956:	4601      	mov	r1, r0
 801f958:	4802      	ldr	r0, [pc, #8]	; (801f964 <strtod+0x10>)
 801f95a:	4b03      	ldr	r3, [pc, #12]	; (801f968 <strtod+0x14>)
 801f95c:	6800      	ldr	r0, [r0, #0]
 801f95e:	f7ff b9f3 	b.w	801ed48 <_strtod_l>
 801f962:	bf00      	nop
 801f964:	2000008c 	.word	0x2000008c
 801f968:	200000f4 	.word	0x200000f4

0801f96c <_strtol_l.constprop.0>:
 801f96c:	2b01      	cmp	r3, #1
 801f96e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f972:	d001      	beq.n	801f978 <_strtol_l.constprop.0+0xc>
 801f974:	2b24      	cmp	r3, #36	; 0x24
 801f976:	d906      	bls.n	801f986 <_strtol_l.constprop.0+0x1a>
 801f978:	f7fe f910 	bl	801db9c <__errno>
 801f97c:	2316      	movs	r3, #22
 801f97e:	6003      	str	r3, [r0, #0]
 801f980:	2000      	movs	r0, #0
 801f982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f986:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801fa6c <_strtol_l.constprop.0+0x100>
 801f98a:	460d      	mov	r5, r1
 801f98c:	462e      	mov	r6, r5
 801f98e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f992:	f814 700c 	ldrb.w	r7, [r4, ip]
 801f996:	f017 0708 	ands.w	r7, r7, #8
 801f99a:	d1f7      	bne.n	801f98c <_strtol_l.constprop.0+0x20>
 801f99c:	2c2d      	cmp	r4, #45	; 0x2d
 801f99e:	d132      	bne.n	801fa06 <_strtol_l.constprop.0+0x9a>
 801f9a0:	782c      	ldrb	r4, [r5, #0]
 801f9a2:	2701      	movs	r7, #1
 801f9a4:	1cb5      	adds	r5, r6, #2
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	d05b      	beq.n	801fa62 <_strtol_l.constprop.0+0xf6>
 801f9aa:	2b10      	cmp	r3, #16
 801f9ac:	d109      	bne.n	801f9c2 <_strtol_l.constprop.0+0x56>
 801f9ae:	2c30      	cmp	r4, #48	; 0x30
 801f9b0:	d107      	bne.n	801f9c2 <_strtol_l.constprop.0+0x56>
 801f9b2:	782c      	ldrb	r4, [r5, #0]
 801f9b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f9b8:	2c58      	cmp	r4, #88	; 0x58
 801f9ba:	d14d      	bne.n	801fa58 <_strtol_l.constprop.0+0xec>
 801f9bc:	786c      	ldrb	r4, [r5, #1]
 801f9be:	2310      	movs	r3, #16
 801f9c0:	3502      	adds	r5, #2
 801f9c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801f9c6:	f108 38ff 	add.w	r8, r8, #4294967295
 801f9ca:	f04f 0c00 	mov.w	ip, #0
 801f9ce:	fbb8 f9f3 	udiv	r9, r8, r3
 801f9d2:	4666      	mov	r6, ip
 801f9d4:	fb03 8a19 	mls	sl, r3, r9, r8
 801f9d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801f9dc:	f1be 0f09 	cmp.w	lr, #9
 801f9e0:	d816      	bhi.n	801fa10 <_strtol_l.constprop.0+0xa4>
 801f9e2:	4674      	mov	r4, lr
 801f9e4:	42a3      	cmp	r3, r4
 801f9e6:	dd24      	ble.n	801fa32 <_strtol_l.constprop.0+0xc6>
 801f9e8:	f1bc 0f00 	cmp.w	ip, #0
 801f9ec:	db1e      	blt.n	801fa2c <_strtol_l.constprop.0+0xc0>
 801f9ee:	45b1      	cmp	r9, r6
 801f9f0:	d31c      	bcc.n	801fa2c <_strtol_l.constprop.0+0xc0>
 801f9f2:	d101      	bne.n	801f9f8 <_strtol_l.constprop.0+0x8c>
 801f9f4:	45a2      	cmp	sl, r4
 801f9f6:	db19      	blt.n	801fa2c <_strtol_l.constprop.0+0xc0>
 801f9f8:	fb06 4603 	mla	r6, r6, r3, r4
 801f9fc:	f04f 0c01 	mov.w	ip, #1
 801fa00:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fa04:	e7e8      	b.n	801f9d8 <_strtol_l.constprop.0+0x6c>
 801fa06:	2c2b      	cmp	r4, #43	; 0x2b
 801fa08:	bf04      	itt	eq
 801fa0a:	782c      	ldrbeq	r4, [r5, #0]
 801fa0c:	1cb5      	addeq	r5, r6, #2
 801fa0e:	e7ca      	b.n	801f9a6 <_strtol_l.constprop.0+0x3a>
 801fa10:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801fa14:	f1be 0f19 	cmp.w	lr, #25
 801fa18:	d801      	bhi.n	801fa1e <_strtol_l.constprop.0+0xb2>
 801fa1a:	3c37      	subs	r4, #55	; 0x37
 801fa1c:	e7e2      	b.n	801f9e4 <_strtol_l.constprop.0+0x78>
 801fa1e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801fa22:	f1be 0f19 	cmp.w	lr, #25
 801fa26:	d804      	bhi.n	801fa32 <_strtol_l.constprop.0+0xc6>
 801fa28:	3c57      	subs	r4, #87	; 0x57
 801fa2a:	e7db      	b.n	801f9e4 <_strtol_l.constprop.0+0x78>
 801fa2c:	f04f 3cff 	mov.w	ip, #4294967295
 801fa30:	e7e6      	b.n	801fa00 <_strtol_l.constprop.0+0x94>
 801fa32:	f1bc 0f00 	cmp.w	ip, #0
 801fa36:	da05      	bge.n	801fa44 <_strtol_l.constprop.0+0xd8>
 801fa38:	2322      	movs	r3, #34	; 0x22
 801fa3a:	6003      	str	r3, [r0, #0]
 801fa3c:	4646      	mov	r6, r8
 801fa3e:	b942      	cbnz	r2, 801fa52 <_strtol_l.constprop.0+0xe6>
 801fa40:	4630      	mov	r0, r6
 801fa42:	e79e      	b.n	801f982 <_strtol_l.constprop.0+0x16>
 801fa44:	b107      	cbz	r7, 801fa48 <_strtol_l.constprop.0+0xdc>
 801fa46:	4276      	negs	r6, r6
 801fa48:	2a00      	cmp	r2, #0
 801fa4a:	d0f9      	beq.n	801fa40 <_strtol_l.constprop.0+0xd4>
 801fa4c:	f1bc 0f00 	cmp.w	ip, #0
 801fa50:	d000      	beq.n	801fa54 <_strtol_l.constprop.0+0xe8>
 801fa52:	1e69      	subs	r1, r5, #1
 801fa54:	6011      	str	r1, [r2, #0]
 801fa56:	e7f3      	b.n	801fa40 <_strtol_l.constprop.0+0xd4>
 801fa58:	2430      	movs	r4, #48	; 0x30
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	d1b1      	bne.n	801f9c2 <_strtol_l.constprop.0+0x56>
 801fa5e:	2308      	movs	r3, #8
 801fa60:	e7af      	b.n	801f9c2 <_strtol_l.constprop.0+0x56>
 801fa62:	2c30      	cmp	r4, #48	; 0x30
 801fa64:	d0a5      	beq.n	801f9b2 <_strtol_l.constprop.0+0x46>
 801fa66:	230a      	movs	r3, #10
 801fa68:	e7ab      	b.n	801f9c2 <_strtol_l.constprop.0+0x56>
 801fa6a:	bf00      	nop
 801fa6c:	08022e09 	.word	0x08022e09

0801fa70 <strtol>:
 801fa70:	4613      	mov	r3, r2
 801fa72:	460a      	mov	r2, r1
 801fa74:	4601      	mov	r1, r0
 801fa76:	4802      	ldr	r0, [pc, #8]	; (801fa80 <strtol+0x10>)
 801fa78:	6800      	ldr	r0, [r0, #0]
 801fa7a:	f7ff bf77 	b.w	801f96c <_strtol_l.constprop.0>
 801fa7e:	bf00      	nop
 801fa80:	2000008c 	.word	0x2000008c

0801fa84 <__utoa>:
 801fa84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa86:	4c1f      	ldr	r4, [pc, #124]	; (801fb04 <__utoa+0x80>)
 801fa88:	b08b      	sub	sp, #44	; 0x2c
 801fa8a:	4605      	mov	r5, r0
 801fa8c:	460b      	mov	r3, r1
 801fa8e:	466e      	mov	r6, sp
 801fa90:	f104 0c20 	add.w	ip, r4, #32
 801fa94:	6820      	ldr	r0, [r4, #0]
 801fa96:	6861      	ldr	r1, [r4, #4]
 801fa98:	4637      	mov	r7, r6
 801fa9a:	c703      	stmia	r7!, {r0, r1}
 801fa9c:	3408      	adds	r4, #8
 801fa9e:	4564      	cmp	r4, ip
 801faa0:	463e      	mov	r6, r7
 801faa2:	d1f7      	bne.n	801fa94 <__utoa+0x10>
 801faa4:	7921      	ldrb	r1, [r4, #4]
 801faa6:	7139      	strb	r1, [r7, #4]
 801faa8:	1e91      	subs	r1, r2, #2
 801faaa:	6820      	ldr	r0, [r4, #0]
 801faac:	6038      	str	r0, [r7, #0]
 801faae:	2922      	cmp	r1, #34	; 0x22
 801fab0:	f04f 0100 	mov.w	r1, #0
 801fab4:	d904      	bls.n	801fac0 <__utoa+0x3c>
 801fab6:	7019      	strb	r1, [r3, #0]
 801fab8:	460b      	mov	r3, r1
 801faba:	4618      	mov	r0, r3
 801fabc:	b00b      	add	sp, #44	; 0x2c
 801fabe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fac0:	1e58      	subs	r0, r3, #1
 801fac2:	4684      	mov	ip, r0
 801fac4:	fbb5 f7f2 	udiv	r7, r5, r2
 801fac8:	fb02 5617 	mls	r6, r2, r7, r5
 801facc:	3628      	adds	r6, #40	; 0x28
 801face:	446e      	add	r6, sp
 801fad0:	460c      	mov	r4, r1
 801fad2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801fad6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801fada:	462e      	mov	r6, r5
 801fadc:	42b2      	cmp	r2, r6
 801fade:	f101 0101 	add.w	r1, r1, #1
 801fae2:	463d      	mov	r5, r7
 801fae4:	d9ee      	bls.n	801fac4 <__utoa+0x40>
 801fae6:	2200      	movs	r2, #0
 801fae8:	545a      	strb	r2, [r3, r1]
 801faea:	1919      	adds	r1, r3, r4
 801faec:	1aa5      	subs	r5, r4, r2
 801faee:	42aa      	cmp	r2, r5
 801faf0:	dae3      	bge.n	801faba <__utoa+0x36>
 801faf2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801faf6:	780e      	ldrb	r6, [r1, #0]
 801faf8:	7006      	strb	r6, [r0, #0]
 801fafa:	3201      	adds	r2, #1
 801fafc:	f801 5901 	strb.w	r5, [r1], #-1
 801fb00:	e7f4      	b.n	801faec <__utoa+0x68>
 801fb02:	bf00      	nop
 801fb04:	08022ff8 	.word	0x08022ff8

0801fb08 <__swbuf_r>:
 801fb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb0a:	460e      	mov	r6, r1
 801fb0c:	4614      	mov	r4, r2
 801fb0e:	4605      	mov	r5, r0
 801fb10:	b118      	cbz	r0, 801fb1a <__swbuf_r+0x12>
 801fb12:	6983      	ldr	r3, [r0, #24]
 801fb14:	b90b      	cbnz	r3, 801fb1a <__swbuf_r+0x12>
 801fb16:	f7fe f961 	bl	801dddc <__sinit>
 801fb1a:	4b21      	ldr	r3, [pc, #132]	; (801fba0 <__swbuf_r+0x98>)
 801fb1c:	429c      	cmp	r4, r3
 801fb1e:	d12b      	bne.n	801fb78 <__swbuf_r+0x70>
 801fb20:	686c      	ldr	r4, [r5, #4]
 801fb22:	69a3      	ldr	r3, [r4, #24]
 801fb24:	60a3      	str	r3, [r4, #8]
 801fb26:	89a3      	ldrh	r3, [r4, #12]
 801fb28:	071a      	lsls	r2, r3, #28
 801fb2a:	d52f      	bpl.n	801fb8c <__swbuf_r+0x84>
 801fb2c:	6923      	ldr	r3, [r4, #16]
 801fb2e:	b36b      	cbz	r3, 801fb8c <__swbuf_r+0x84>
 801fb30:	6923      	ldr	r3, [r4, #16]
 801fb32:	6820      	ldr	r0, [r4, #0]
 801fb34:	1ac0      	subs	r0, r0, r3
 801fb36:	6963      	ldr	r3, [r4, #20]
 801fb38:	b2f6      	uxtb	r6, r6
 801fb3a:	4283      	cmp	r3, r0
 801fb3c:	4637      	mov	r7, r6
 801fb3e:	dc04      	bgt.n	801fb4a <__swbuf_r+0x42>
 801fb40:	4621      	mov	r1, r4
 801fb42:	4628      	mov	r0, r5
 801fb44:	f7fe f8b6 	bl	801dcb4 <_fflush_r>
 801fb48:	bb30      	cbnz	r0, 801fb98 <__swbuf_r+0x90>
 801fb4a:	68a3      	ldr	r3, [r4, #8]
 801fb4c:	3b01      	subs	r3, #1
 801fb4e:	60a3      	str	r3, [r4, #8]
 801fb50:	6823      	ldr	r3, [r4, #0]
 801fb52:	1c5a      	adds	r2, r3, #1
 801fb54:	6022      	str	r2, [r4, #0]
 801fb56:	701e      	strb	r6, [r3, #0]
 801fb58:	6963      	ldr	r3, [r4, #20]
 801fb5a:	3001      	adds	r0, #1
 801fb5c:	4283      	cmp	r3, r0
 801fb5e:	d004      	beq.n	801fb6a <__swbuf_r+0x62>
 801fb60:	89a3      	ldrh	r3, [r4, #12]
 801fb62:	07db      	lsls	r3, r3, #31
 801fb64:	d506      	bpl.n	801fb74 <__swbuf_r+0x6c>
 801fb66:	2e0a      	cmp	r6, #10
 801fb68:	d104      	bne.n	801fb74 <__swbuf_r+0x6c>
 801fb6a:	4621      	mov	r1, r4
 801fb6c:	4628      	mov	r0, r5
 801fb6e:	f7fe f8a1 	bl	801dcb4 <_fflush_r>
 801fb72:	b988      	cbnz	r0, 801fb98 <__swbuf_r+0x90>
 801fb74:	4638      	mov	r0, r7
 801fb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb78:	4b0a      	ldr	r3, [pc, #40]	; (801fba4 <__swbuf_r+0x9c>)
 801fb7a:	429c      	cmp	r4, r3
 801fb7c:	d101      	bne.n	801fb82 <__swbuf_r+0x7a>
 801fb7e:	68ac      	ldr	r4, [r5, #8]
 801fb80:	e7cf      	b.n	801fb22 <__swbuf_r+0x1a>
 801fb82:	4b09      	ldr	r3, [pc, #36]	; (801fba8 <__swbuf_r+0xa0>)
 801fb84:	429c      	cmp	r4, r3
 801fb86:	bf08      	it	eq
 801fb88:	68ec      	ldreq	r4, [r5, #12]
 801fb8a:	e7ca      	b.n	801fb22 <__swbuf_r+0x1a>
 801fb8c:	4621      	mov	r1, r4
 801fb8e:	4628      	mov	r0, r5
 801fb90:	f000 f81e 	bl	801fbd0 <__swsetup_r>
 801fb94:	2800      	cmp	r0, #0
 801fb96:	d0cb      	beq.n	801fb30 <__swbuf_r+0x28>
 801fb98:	f04f 37ff 	mov.w	r7, #4294967295
 801fb9c:	e7ea      	b.n	801fb74 <__swbuf_r+0x6c>
 801fb9e:	bf00      	nop
 801fba0:	08022f2c 	.word	0x08022f2c
 801fba4:	08022f4c 	.word	0x08022f4c
 801fba8:	08022f0c 	.word	0x08022f0c

0801fbac <_write_r>:
 801fbac:	b538      	push	{r3, r4, r5, lr}
 801fbae:	4d07      	ldr	r5, [pc, #28]	; (801fbcc <_write_r+0x20>)
 801fbb0:	4604      	mov	r4, r0
 801fbb2:	4608      	mov	r0, r1
 801fbb4:	4611      	mov	r1, r2
 801fbb6:	2200      	movs	r2, #0
 801fbb8:	602a      	str	r2, [r5, #0]
 801fbba:	461a      	mov	r2, r3
 801fbbc:	f7fd ff84 	bl	801dac8 <_write>
 801fbc0:	1c43      	adds	r3, r0, #1
 801fbc2:	d102      	bne.n	801fbca <_write_r+0x1e>
 801fbc4:	682b      	ldr	r3, [r5, #0]
 801fbc6:	b103      	cbz	r3, 801fbca <_write_r+0x1e>
 801fbc8:	6023      	str	r3, [r4, #0]
 801fbca:	bd38      	pop	{r3, r4, r5, pc}
 801fbcc:	20012cc0 	.word	0x20012cc0

0801fbd0 <__swsetup_r>:
 801fbd0:	4b32      	ldr	r3, [pc, #200]	; (801fc9c <__swsetup_r+0xcc>)
 801fbd2:	b570      	push	{r4, r5, r6, lr}
 801fbd4:	681d      	ldr	r5, [r3, #0]
 801fbd6:	4606      	mov	r6, r0
 801fbd8:	460c      	mov	r4, r1
 801fbda:	b125      	cbz	r5, 801fbe6 <__swsetup_r+0x16>
 801fbdc:	69ab      	ldr	r3, [r5, #24]
 801fbde:	b913      	cbnz	r3, 801fbe6 <__swsetup_r+0x16>
 801fbe0:	4628      	mov	r0, r5
 801fbe2:	f7fe f8fb 	bl	801dddc <__sinit>
 801fbe6:	4b2e      	ldr	r3, [pc, #184]	; (801fca0 <__swsetup_r+0xd0>)
 801fbe8:	429c      	cmp	r4, r3
 801fbea:	d10f      	bne.n	801fc0c <__swsetup_r+0x3c>
 801fbec:	686c      	ldr	r4, [r5, #4]
 801fbee:	89a3      	ldrh	r3, [r4, #12]
 801fbf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fbf4:	0719      	lsls	r1, r3, #28
 801fbf6:	d42c      	bmi.n	801fc52 <__swsetup_r+0x82>
 801fbf8:	06dd      	lsls	r5, r3, #27
 801fbfa:	d411      	bmi.n	801fc20 <__swsetup_r+0x50>
 801fbfc:	2309      	movs	r3, #9
 801fbfe:	6033      	str	r3, [r6, #0]
 801fc00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fc04:	81a3      	strh	r3, [r4, #12]
 801fc06:	f04f 30ff 	mov.w	r0, #4294967295
 801fc0a:	e03e      	b.n	801fc8a <__swsetup_r+0xba>
 801fc0c:	4b25      	ldr	r3, [pc, #148]	; (801fca4 <__swsetup_r+0xd4>)
 801fc0e:	429c      	cmp	r4, r3
 801fc10:	d101      	bne.n	801fc16 <__swsetup_r+0x46>
 801fc12:	68ac      	ldr	r4, [r5, #8]
 801fc14:	e7eb      	b.n	801fbee <__swsetup_r+0x1e>
 801fc16:	4b24      	ldr	r3, [pc, #144]	; (801fca8 <__swsetup_r+0xd8>)
 801fc18:	429c      	cmp	r4, r3
 801fc1a:	bf08      	it	eq
 801fc1c:	68ec      	ldreq	r4, [r5, #12]
 801fc1e:	e7e6      	b.n	801fbee <__swsetup_r+0x1e>
 801fc20:	0758      	lsls	r0, r3, #29
 801fc22:	d512      	bpl.n	801fc4a <__swsetup_r+0x7a>
 801fc24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fc26:	b141      	cbz	r1, 801fc3a <__swsetup_r+0x6a>
 801fc28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fc2c:	4299      	cmp	r1, r3
 801fc2e:	d002      	beq.n	801fc36 <__swsetup_r+0x66>
 801fc30:	4630      	mov	r0, r6
 801fc32:	f7fe fa6d 	bl	801e110 <_free_r>
 801fc36:	2300      	movs	r3, #0
 801fc38:	6363      	str	r3, [r4, #52]	; 0x34
 801fc3a:	89a3      	ldrh	r3, [r4, #12]
 801fc3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fc40:	81a3      	strh	r3, [r4, #12]
 801fc42:	2300      	movs	r3, #0
 801fc44:	6063      	str	r3, [r4, #4]
 801fc46:	6923      	ldr	r3, [r4, #16]
 801fc48:	6023      	str	r3, [r4, #0]
 801fc4a:	89a3      	ldrh	r3, [r4, #12]
 801fc4c:	f043 0308 	orr.w	r3, r3, #8
 801fc50:	81a3      	strh	r3, [r4, #12]
 801fc52:	6923      	ldr	r3, [r4, #16]
 801fc54:	b94b      	cbnz	r3, 801fc6a <__swsetup_r+0x9a>
 801fc56:	89a3      	ldrh	r3, [r4, #12]
 801fc58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fc5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fc60:	d003      	beq.n	801fc6a <__swsetup_r+0x9a>
 801fc62:	4621      	mov	r1, r4
 801fc64:	4630      	mov	r0, r6
 801fc66:	f7fe f9bd 	bl	801dfe4 <__smakebuf_r>
 801fc6a:	89a0      	ldrh	r0, [r4, #12]
 801fc6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fc70:	f010 0301 	ands.w	r3, r0, #1
 801fc74:	d00a      	beq.n	801fc8c <__swsetup_r+0xbc>
 801fc76:	2300      	movs	r3, #0
 801fc78:	60a3      	str	r3, [r4, #8]
 801fc7a:	6963      	ldr	r3, [r4, #20]
 801fc7c:	425b      	negs	r3, r3
 801fc7e:	61a3      	str	r3, [r4, #24]
 801fc80:	6923      	ldr	r3, [r4, #16]
 801fc82:	b943      	cbnz	r3, 801fc96 <__swsetup_r+0xc6>
 801fc84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fc88:	d1ba      	bne.n	801fc00 <__swsetup_r+0x30>
 801fc8a:	bd70      	pop	{r4, r5, r6, pc}
 801fc8c:	0781      	lsls	r1, r0, #30
 801fc8e:	bf58      	it	pl
 801fc90:	6963      	ldrpl	r3, [r4, #20]
 801fc92:	60a3      	str	r3, [r4, #8]
 801fc94:	e7f4      	b.n	801fc80 <__swsetup_r+0xb0>
 801fc96:	2000      	movs	r0, #0
 801fc98:	e7f7      	b.n	801fc8a <__swsetup_r+0xba>
 801fc9a:	bf00      	nop
 801fc9c:	2000008c 	.word	0x2000008c
 801fca0:	08022f2c 	.word	0x08022f2c
 801fca4:	08022f4c 	.word	0x08022f4c
 801fca8:	08022f0c 	.word	0x08022f0c

0801fcac <_close_r>:
 801fcac:	b538      	push	{r3, r4, r5, lr}
 801fcae:	4d06      	ldr	r5, [pc, #24]	; (801fcc8 <_close_r+0x1c>)
 801fcb0:	2300      	movs	r3, #0
 801fcb2:	4604      	mov	r4, r0
 801fcb4:	4608      	mov	r0, r1
 801fcb6:	602b      	str	r3, [r5, #0]
 801fcb8:	f7fd ff22 	bl	801db00 <_close>
 801fcbc:	1c43      	adds	r3, r0, #1
 801fcbe:	d102      	bne.n	801fcc6 <_close_r+0x1a>
 801fcc0:	682b      	ldr	r3, [r5, #0]
 801fcc2:	b103      	cbz	r3, 801fcc6 <_close_r+0x1a>
 801fcc4:	6023      	str	r3, [r4, #0]
 801fcc6:	bd38      	pop	{r3, r4, r5, pc}
 801fcc8:	20012cc0 	.word	0x20012cc0

0801fccc <quorem>:
 801fccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcd0:	6903      	ldr	r3, [r0, #16]
 801fcd2:	690c      	ldr	r4, [r1, #16]
 801fcd4:	42a3      	cmp	r3, r4
 801fcd6:	4607      	mov	r7, r0
 801fcd8:	f2c0 8081 	blt.w	801fdde <quorem+0x112>
 801fcdc:	3c01      	subs	r4, #1
 801fcde:	f101 0814 	add.w	r8, r1, #20
 801fce2:	f100 0514 	add.w	r5, r0, #20
 801fce6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fcea:	9301      	str	r3, [sp, #4]
 801fcec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801fcf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fcf4:	3301      	adds	r3, #1
 801fcf6:	429a      	cmp	r2, r3
 801fcf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801fcfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fd00:	fbb2 f6f3 	udiv	r6, r2, r3
 801fd04:	d331      	bcc.n	801fd6a <quorem+0x9e>
 801fd06:	f04f 0e00 	mov.w	lr, #0
 801fd0a:	4640      	mov	r0, r8
 801fd0c:	46ac      	mov	ip, r5
 801fd0e:	46f2      	mov	sl, lr
 801fd10:	f850 2b04 	ldr.w	r2, [r0], #4
 801fd14:	b293      	uxth	r3, r2
 801fd16:	fb06 e303 	mla	r3, r6, r3, lr
 801fd1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801fd1e:	b29b      	uxth	r3, r3
 801fd20:	ebaa 0303 	sub.w	r3, sl, r3
 801fd24:	f8dc a000 	ldr.w	sl, [ip]
 801fd28:	0c12      	lsrs	r2, r2, #16
 801fd2a:	fa13 f38a 	uxtah	r3, r3, sl
 801fd2e:	fb06 e202 	mla	r2, r6, r2, lr
 801fd32:	9300      	str	r3, [sp, #0]
 801fd34:	9b00      	ldr	r3, [sp, #0]
 801fd36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fd3a:	b292      	uxth	r2, r2
 801fd3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801fd40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fd44:	f8bd 3000 	ldrh.w	r3, [sp]
 801fd48:	4581      	cmp	r9, r0
 801fd4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fd4e:	f84c 3b04 	str.w	r3, [ip], #4
 801fd52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801fd56:	d2db      	bcs.n	801fd10 <quorem+0x44>
 801fd58:	f855 300b 	ldr.w	r3, [r5, fp]
 801fd5c:	b92b      	cbnz	r3, 801fd6a <quorem+0x9e>
 801fd5e:	9b01      	ldr	r3, [sp, #4]
 801fd60:	3b04      	subs	r3, #4
 801fd62:	429d      	cmp	r5, r3
 801fd64:	461a      	mov	r2, r3
 801fd66:	d32e      	bcc.n	801fdc6 <quorem+0xfa>
 801fd68:	613c      	str	r4, [r7, #16]
 801fd6a:	4638      	mov	r0, r7
 801fd6c:	f001 fcbc 	bl	80216e8 <__mcmp>
 801fd70:	2800      	cmp	r0, #0
 801fd72:	db24      	blt.n	801fdbe <quorem+0xf2>
 801fd74:	3601      	adds	r6, #1
 801fd76:	4628      	mov	r0, r5
 801fd78:	f04f 0c00 	mov.w	ip, #0
 801fd7c:	f858 2b04 	ldr.w	r2, [r8], #4
 801fd80:	f8d0 e000 	ldr.w	lr, [r0]
 801fd84:	b293      	uxth	r3, r2
 801fd86:	ebac 0303 	sub.w	r3, ip, r3
 801fd8a:	0c12      	lsrs	r2, r2, #16
 801fd8c:	fa13 f38e 	uxtah	r3, r3, lr
 801fd90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801fd94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fd98:	b29b      	uxth	r3, r3
 801fd9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fd9e:	45c1      	cmp	r9, r8
 801fda0:	f840 3b04 	str.w	r3, [r0], #4
 801fda4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801fda8:	d2e8      	bcs.n	801fd7c <quorem+0xb0>
 801fdaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fdae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fdb2:	b922      	cbnz	r2, 801fdbe <quorem+0xf2>
 801fdb4:	3b04      	subs	r3, #4
 801fdb6:	429d      	cmp	r5, r3
 801fdb8:	461a      	mov	r2, r3
 801fdba:	d30a      	bcc.n	801fdd2 <quorem+0x106>
 801fdbc:	613c      	str	r4, [r7, #16]
 801fdbe:	4630      	mov	r0, r6
 801fdc0:	b003      	add	sp, #12
 801fdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdc6:	6812      	ldr	r2, [r2, #0]
 801fdc8:	3b04      	subs	r3, #4
 801fdca:	2a00      	cmp	r2, #0
 801fdcc:	d1cc      	bne.n	801fd68 <quorem+0x9c>
 801fdce:	3c01      	subs	r4, #1
 801fdd0:	e7c7      	b.n	801fd62 <quorem+0x96>
 801fdd2:	6812      	ldr	r2, [r2, #0]
 801fdd4:	3b04      	subs	r3, #4
 801fdd6:	2a00      	cmp	r2, #0
 801fdd8:	d1f0      	bne.n	801fdbc <quorem+0xf0>
 801fdda:	3c01      	subs	r4, #1
 801fddc:	e7eb      	b.n	801fdb6 <quorem+0xea>
 801fdde:	2000      	movs	r0, #0
 801fde0:	e7ee      	b.n	801fdc0 <quorem+0xf4>
 801fde2:	0000      	movs	r0, r0
 801fde4:	0000      	movs	r0, r0
	...

0801fde8 <_dtoa_r>:
 801fde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdec:	ed2d 8b04 	vpush	{d8-d9}
 801fdf0:	ec57 6b10 	vmov	r6, r7, d0
 801fdf4:	b093      	sub	sp, #76	; 0x4c
 801fdf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801fdf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801fdfc:	9106      	str	r1, [sp, #24]
 801fdfe:	ee10 aa10 	vmov	sl, s0
 801fe02:	4604      	mov	r4, r0
 801fe04:	9209      	str	r2, [sp, #36]	; 0x24
 801fe06:	930c      	str	r3, [sp, #48]	; 0x30
 801fe08:	46bb      	mov	fp, r7
 801fe0a:	b975      	cbnz	r5, 801fe2a <_dtoa_r+0x42>
 801fe0c:	2010      	movs	r0, #16
 801fe0e:	f7fe f929 	bl	801e064 <malloc>
 801fe12:	4602      	mov	r2, r0
 801fe14:	6260      	str	r0, [r4, #36]	; 0x24
 801fe16:	b920      	cbnz	r0, 801fe22 <_dtoa_r+0x3a>
 801fe18:	4ba7      	ldr	r3, [pc, #668]	; (80200b8 <_dtoa_r+0x2d0>)
 801fe1a:	21ea      	movs	r1, #234	; 0xea
 801fe1c:	48a7      	ldr	r0, [pc, #668]	; (80200bc <_dtoa_r+0x2d4>)
 801fe1e:	f001 ffdd 	bl	8021ddc <__assert_func>
 801fe22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801fe26:	6005      	str	r5, [r0, #0]
 801fe28:	60c5      	str	r5, [r0, #12]
 801fe2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fe2c:	6819      	ldr	r1, [r3, #0]
 801fe2e:	b151      	cbz	r1, 801fe46 <_dtoa_r+0x5e>
 801fe30:	685a      	ldr	r2, [r3, #4]
 801fe32:	604a      	str	r2, [r1, #4]
 801fe34:	2301      	movs	r3, #1
 801fe36:	4093      	lsls	r3, r2
 801fe38:	608b      	str	r3, [r1, #8]
 801fe3a:	4620      	mov	r0, r4
 801fe3c:	f001 f9c8 	bl	80211d0 <_Bfree>
 801fe40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fe42:	2200      	movs	r2, #0
 801fe44:	601a      	str	r2, [r3, #0]
 801fe46:	1e3b      	subs	r3, r7, #0
 801fe48:	bfaa      	itet	ge
 801fe4a:	2300      	movge	r3, #0
 801fe4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801fe50:	f8c8 3000 	strge.w	r3, [r8]
 801fe54:	4b9a      	ldr	r3, [pc, #616]	; (80200c0 <_dtoa_r+0x2d8>)
 801fe56:	bfbc      	itt	lt
 801fe58:	2201      	movlt	r2, #1
 801fe5a:	f8c8 2000 	strlt.w	r2, [r8]
 801fe5e:	ea33 030b 	bics.w	r3, r3, fp
 801fe62:	d11b      	bne.n	801fe9c <_dtoa_r+0xb4>
 801fe64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fe66:	f242 730f 	movw	r3, #9999	; 0x270f
 801fe6a:	6013      	str	r3, [r2, #0]
 801fe6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fe70:	4333      	orrs	r3, r6
 801fe72:	f000 8592 	beq.w	802099a <_dtoa_r+0xbb2>
 801fe76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fe78:	b963      	cbnz	r3, 801fe94 <_dtoa_r+0xac>
 801fe7a:	4b92      	ldr	r3, [pc, #584]	; (80200c4 <_dtoa_r+0x2dc>)
 801fe7c:	e022      	b.n	801fec4 <_dtoa_r+0xdc>
 801fe7e:	4b92      	ldr	r3, [pc, #584]	; (80200c8 <_dtoa_r+0x2e0>)
 801fe80:	9301      	str	r3, [sp, #4]
 801fe82:	3308      	adds	r3, #8
 801fe84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fe86:	6013      	str	r3, [r2, #0]
 801fe88:	9801      	ldr	r0, [sp, #4]
 801fe8a:	b013      	add	sp, #76	; 0x4c
 801fe8c:	ecbd 8b04 	vpop	{d8-d9}
 801fe90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe94:	4b8b      	ldr	r3, [pc, #556]	; (80200c4 <_dtoa_r+0x2dc>)
 801fe96:	9301      	str	r3, [sp, #4]
 801fe98:	3303      	adds	r3, #3
 801fe9a:	e7f3      	b.n	801fe84 <_dtoa_r+0x9c>
 801fe9c:	2200      	movs	r2, #0
 801fe9e:	2300      	movs	r3, #0
 801fea0:	4650      	mov	r0, sl
 801fea2:	4659      	mov	r1, fp
 801fea4:	f7e0 fe38 	bl	8000b18 <__aeabi_dcmpeq>
 801fea8:	ec4b ab19 	vmov	d9, sl, fp
 801feac:	4680      	mov	r8, r0
 801feae:	b158      	cbz	r0, 801fec8 <_dtoa_r+0xe0>
 801feb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801feb2:	2301      	movs	r3, #1
 801feb4:	6013      	str	r3, [r2, #0]
 801feb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801feb8:	2b00      	cmp	r3, #0
 801feba:	f000 856b 	beq.w	8020994 <_dtoa_r+0xbac>
 801febe:	4883      	ldr	r0, [pc, #524]	; (80200cc <_dtoa_r+0x2e4>)
 801fec0:	6018      	str	r0, [r3, #0]
 801fec2:	1e43      	subs	r3, r0, #1
 801fec4:	9301      	str	r3, [sp, #4]
 801fec6:	e7df      	b.n	801fe88 <_dtoa_r+0xa0>
 801fec8:	ec4b ab10 	vmov	d0, sl, fp
 801fecc:	aa10      	add	r2, sp, #64	; 0x40
 801fece:	a911      	add	r1, sp, #68	; 0x44
 801fed0:	4620      	mov	r0, r4
 801fed2:	f001 fd2b 	bl	802192c <__d2b>
 801fed6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801feda:	ee08 0a10 	vmov	s16, r0
 801fede:	2d00      	cmp	r5, #0
 801fee0:	f000 8084 	beq.w	801ffec <_dtoa_r+0x204>
 801fee4:	ee19 3a90 	vmov	r3, s19
 801fee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801feec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801fef0:	4656      	mov	r6, sl
 801fef2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801fef6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801fefa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801fefe:	4b74      	ldr	r3, [pc, #464]	; (80200d0 <_dtoa_r+0x2e8>)
 801ff00:	2200      	movs	r2, #0
 801ff02:	4630      	mov	r0, r6
 801ff04:	4639      	mov	r1, r7
 801ff06:	f7e0 f9e7 	bl	80002d8 <__aeabi_dsub>
 801ff0a:	a365      	add	r3, pc, #404	; (adr r3, 80200a0 <_dtoa_r+0x2b8>)
 801ff0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff10:	f7e0 fb9a 	bl	8000648 <__aeabi_dmul>
 801ff14:	a364      	add	r3, pc, #400	; (adr r3, 80200a8 <_dtoa_r+0x2c0>)
 801ff16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff1a:	f7e0 f9df 	bl	80002dc <__adddf3>
 801ff1e:	4606      	mov	r6, r0
 801ff20:	4628      	mov	r0, r5
 801ff22:	460f      	mov	r7, r1
 801ff24:	f7e0 fb26 	bl	8000574 <__aeabi_i2d>
 801ff28:	a361      	add	r3, pc, #388	; (adr r3, 80200b0 <_dtoa_r+0x2c8>)
 801ff2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff2e:	f7e0 fb8b 	bl	8000648 <__aeabi_dmul>
 801ff32:	4602      	mov	r2, r0
 801ff34:	460b      	mov	r3, r1
 801ff36:	4630      	mov	r0, r6
 801ff38:	4639      	mov	r1, r7
 801ff3a:	f7e0 f9cf 	bl	80002dc <__adddf3>
 801ff3e:	4606      	mov	r6, r0
 801ff40:	460f      	mov	r7, r1
 801ff42:	f7e0 fe31 	bl	8000ba8 <__aeabi_d2iz>
 801ff46:	2200      	movs	r2, #0
 801ff48:	9000      	str	r0, [sp, #0]
 801ff4a:	2300      	movs	r3, #0
 801ff4c:	4630      	mov	r0, r6
 801ff4e:	4639      	mov	r1, r7
 801ff50:	f7e0 fdec 	bl	8000b2c <__aeabi_dcmplt>
 801ff54:	b150      	cbz	r0, 801ff6c <_dtoa_r+0x184>
 801ff56:	9800      	ldr	r0, [sp, #0]
 801ff58:	f7e0 fb0c 	bl	8000574 <__aeabi_i2d>
 801ff5c:	4632      	mov	r2, r6
 801ff5e:	463b      	mov	r3, r7
 801ff60:	f7e0 fdda 	bl	8000b18 <__aeabi_dcmpeq>
 801ff64:	b910      	cbnz	r0, 801ff6c <_dtoa_r+0x184>
 801ff66:	9b00      	ldr	r3, [sp, #0]
 801ff68:	3b01      	subs	r3, #1
 801ff6a:	9300      	str	r3, [sp, #0]
 801ff6c:	9b00      	ldr	r3, [sp, #0]
 801ff6e:	2b16      	cmp	r3, #22
 801ff70:	d85a      	bhi.n	8020028 <_dtoa_r+0x240>
 801ff72:	9a00      	ldr	r2, [sp, #0]
 801ff74:	4b57      	ldr	r3, [pc, #348]	; (80200d4 <_dtoa_r+0x2ec>)
 801ff76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ff7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff7e:	ec51 0b19 	vmov	r0, r1, d9
 801ff82:	f7e0 fdd3 	bl	8000b2c <__aeabi_dcmplt>
 801ff86:	2800      	cmp	r0, #0
 801ff88:	d050      	beq.n	802002c <_dtoa_r+0x244>
 801ff8a:	9b00      	ldr	r3, [sp, #0]
 801ff8c:	3b01      	subs	r3, #1
 801ff8e:	9300      	str	r3, [sp, #0]
 801ff90:	2300      	movs	r3, #0
 801ff92:	930b      	str	r3, [sp, #44]	; 0x2c
 801ff94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff96:	1b5d      	subs	r5, r3, r5
 801ff98:	1e6b      	subs	r3, r5, #1
 801ff9a:	9305      	str	r3, [sp, #20]
 801ff9c:	bf45      	ittet	mi
 801ff9e:	f1c5 0301 	rsbmi	r3, r5, #1
 801ffa2:	9304      	strmi	r3, [sp, #16]
 801ffa4:	2300      	movpl	r3, #0
 801ffa6:	2300      	movmi	r3, #0
 801ffa8:	bf4c      	ite	mi
 801ffaa:	9305      	strmi	r3, [sp, #20]
 801ffac:	9304      	strpl	r3, [sp, #16]
 801ffae:	9b00      	ldr	r3, [sp, #0]
 801ffb0:	2b00      	cmp	r3, #0
 801ffb2:	db3d      	blt.n	8020030 <_dtoa_r+0x248>
 801ffb4:	9b05      	ldr	r3, [sp, #20]
 801ffb6:	9a00      	ldr	r2, [sp, #0]
 801ffb8:	920a      	str	r2, [sp, #40]	; 0x28
 801ffba:	4413      	add	r3, r2
 801ffbc:	9305      	str	r3, [sp, #20]
 801ffbe:	2300      	movs	r3, #0
 801ffc0:	9307      	str	r3, [sp, #28]
 801ffc2:	9b06      	ldr	r3, [sp, #24]
 801ffc4:	2b09      	cmp	r3, #9
 801ffc6:	f200 8089 	bhi.w	80200dc <_dtoa_r+0x2f4>
 801ffca:	2b05      	cmp	r3, #5
 801ffcc:	bfc4      	itt	gt
 801ffce:	3b04      	subgt	r3, #4
 801ffd0:	9306      	strgt	r3, [sp, #24]
 801ffd2:	9b06      	ldr	r3, [sp, #24]
 801ffd4:	f1a3 0302 	sub.w	r3, r3, #2
 801ffd8:	bfcc      	ite	gt
 801ffda:	2500      	movgt	r5, #0
 801ffdc:	2501      	movle	r5, #1
 801ffde:	2b03      	cmp	r3, #3
 801ffe0:	f200 8087 	bhi.w	80200f2 <_dtoa_r+0x30a>
 801ffe4:	e8df f003 	tbb	[pc, r3]
 801ffe8:	59383a2d 	.word	0x59383a2d
 801ffec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801fff0:	441d      	add	r5, r3
 801fff2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801fff6:	2b20      	cmp	r3, #32
 801fff8:	bfc1      	itttt	gt
 801fffa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801fffe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020002:	fa0b f303 	lslgt.w	r3, fp, r3
 8020006:	fa26 f000 	lsrgt.w	r0, r6, r0
 802000a:	bfda      	itte	le
 802000c:	f1c3 0320 	rsble	r3, r3, #32
 8020010:	fa06 f003 	lslle.w	r0, r6, r3
 8020014:	4318      	orrgt	r0, r3
 8020016:	f7e0 fa9d 	bl	8000554 <__aeabi_ui2d>
 802001a:	2301      	movs	r3, #1
 802001c:	4606      	mov	r6, r0
 802001e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020022:	3d01      	subs	r5, #1
 8020024:	930e      	str	r3, [sp, #56]	; 0x38
 8020026:	e76a      	b.n	801fefe <_dtoa_r+0x116>
 8020028:	2301      	movs	r3, #1
 802002a:	e7b2      	b.n	801ff92 <_dtoa_r+0x1aa>
 802002c:	900b      	str	r0, [sp, #44]	; 0x2c
 802002e:	e7b1      	b.n	801ff94 <_dtoa_r+0x1ac>
 8020030:	9b04      	ldr	r3, [sp, #16]
 8020032:	9a00      	ldr	r2, [sp, #0]
 8020034:	1a9b      	subs	r3, r3, r2
 8020036:	9304      	str	r3, [sp, #16]
 8020038:	4253      	negs	r3, r2
 802003a:	9307      	str	r3, [sp, #28]
 802003c:	2300      	movs	r3, #0
 802003e:	930a      	str	r3, [sp, #40]	; 0x28
 8020040:	e7bf      	b.n	801ffc2 <_dtoa_r+0x1da>
 8020042:	2300      	movs	r3, #0
 8020044:	9308      	str	r3, [sp, #32]
 8020046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020048:	2b00      	cmp	r3, #0
 802004a:	dc55      	bgt.n	80200f8 <_dtoa_r+0x310>
 802004c:	2301      	movs	r3, #1
 802004e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020052:	461a      	mov	r2, r3
 8020054:	9209      	str	r2, [sp, #36]	; 0x24
 8020056:	e00c      	b.n	8020072 <_dtoa_r+0x28a>
 8020058:	2301      	movs	r3, #1
 802005a:	e7f3      	b.n	8020044 <_dtoa_r+0x25c>
 802005c:	2300      	movs	r3, #0
 802005e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020060:	9308      	str	r3, [sp, #32]
 8020062:	9b00      	ldr	r3, [sp, #0]
 8020064:	4413      	add	r3, r2
 8020066:	9302      	str	r3, [sp, #8]
 8020068:	3301      	adds	r3, #1
 802006a:	2b01      	cmp	r3, #1
 802006c:	9303      	str	r3, [sp, #12]
 802006e:	bfb8      	it	lt
 8020070:	2301      	movlt	r3, #1
 8020072:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020074:	2200      	movs	r2, #0
 8020076:	6042      	str	r2, [r0, #4]
 8020078:	2204      	movs	r2, #4
 802007a:	f102 0614 	add.w	r6, r2, #20
 802007e:	429e      	cmp	r6, r3
 8020080:	6841      	ldr	r1, [r0, #4]
 8020082:	d93d      	bls.n	8020100 <_dtoa_r+0x318>
 8020084:	4620      	mov	r0, r4
 8020086:	f001 f863 	bl	8021150 <_Balloc>
 802008a:	9001      	str	r0, [sp, #4]
 802008c:	2800      	cmp	r0, #0
 802008e:	d13b      	bne.n	8020108 <_dtoa_r+0x320>
 8020090:	4b11      	ldr	r3, [pc, #68]	; (80200d8 <_dtoa_r+0x2f0>)
 8020092:	4602      	mov	r2, r0
 8020094:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020098:	e6c0      	b.n	801fe1c <_dtoa_r+0x34>
 802009a:	2301      	movs	r3, #1
 802009c:	e7df      	b.n	802005e <_dtoa_r+0x276>
 802009e:	bf00      	nop
 80200a0:	636f4361 	.word	0x636f4361
 80200a4:	3fd287a7 	.word	0x3fd287a7
 80200a8:	8b60c8b3 	.word	0x8b60c8b3
 80200ac:	3fc68a28 	.word	0x3fc68a28
 80200b0:	509f79fb 	.word	0x509f79fb
 80200b4:	3fd34413 	.word	0x3fd34413
 80200b8:	0802302a 	.word	0x0802302a
 80200bc:	08023041 	.word	0x08023041
 80200c0:	7ff00000 	.word	0x7ff00000
 80200c4:	08023026 	.word	0x08023026
 80200c8:	0802301d 	.word	0x0802301d
 80200cc:	08022f81 	.word	0x08022f81
 80200d0:	3ff80000 	.word	0x3ff80000
 80200d4:	080231b0 	.word	0x080231b0
 80200d8:	0802309c 	.word	0x0802309c
 80200dc:	2501      	movs	r5, #1
 80200de:	2300      	movs	r3, #0
 80200e0:	9306      	str	r3, [sp, #24]
 80200e2:	9508      	str	r5, [sp, #32]
 80200e4:	f04f 33ff 	mov.w	r3, #4294967295
 80200e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80200ec:	2200      	movs	r2, #0
 80200ee:	2312      	movs	r3, #18
 80200f0:	e7b0      	b.n	8020054 <_dtoa_r+0x26c>
 80200f2:	2301      	movs	r3, #1
 80200f4:	9308      	str	r3, [sp, #32]
 80200f6:	e7f5      	b.n	80200e4 <_dtoa_r+0x2fc>
 80200f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80200fe:	e7b8      	b.n	8020072 <_dtoa_r+0x28a>
 8020100:	3101      	adds	r1, #1
 8020102:	6041      	str	r1, [r0, #4]
 8020104:	0052      	lsls	r2, r2, #1
 8020106:	e7b8      	b.n	802007a <_dtoa_r+0x292>
 8020108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802010a:	9a01      	ldr	r2, [sp, #4]
 802010c:	601a      	str	r2, [r3, #0]
 802010e:	9b03      	ldr	r3, [sp, #12]
 8020110:	2b0e      	cmp	r3, #14
 8020112:	f200 809d 	bhi.w	8020250 <_dtoa_r+0x468>
 8020116:	2d00      	cmp	r5, #0
 8020118:	f000 809a 	beq.w	8020250 <_dtoa_r+0x468>
 802011c:	9b00      	ldr	r3, [sp, #0]
 802011e:	2b00      	cmp	r3, #0
 8020120:	dd32      	ble.n	8020188 <_dtoa_r+0x3a0>
 8020122:	4ab7      	ldr	r2, [pc, #732]	; (8020400 <_dtoa_r+0x618>)
 8020124:	f003 030f 	and.w	r3, r3, #15
 8020128:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802012c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020130:	9b00      	ldr	r3, [sp, #0]
 8020132:	05d8      	lsls	r0, r3, #23
 8020134:	ea4f 1723 	mov.w	r7, r3, asr #4
 8020138:	d516      	bpl.n	8020168 <_dtoa_r+0x380>
 802013a:	4bb2      	ldr	r3, [pc, #712]	; (8020404 <_dtoa_r+0x61c>)
 802013c:	ec51 0b19 	vmov	r0, r1, d9
 8020140:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020144:	f7e0 fbaa 	bl	800089c <__aeabi_ddiv>
 8020148:	f007 070f 	and.w	r7, r7, #15
 802014c:	4682      	mov	sl, r0
 802014e:	468b      	mov	fp, r1
 8020150:	2503      	movs	r5, #3
 8020152:	4eac      	ldr	r6, [pc, #688]	; (8020404 <_dtoa_r+0x61c>)
 8020154:	b957      	cbnz	r7, 802016c <_dtoa_r+0x384>
 8020156:	4642      	mov	r2, r8
 8020158:	464b      	mov	r3, r9
 802015a:	4650      	mov	r0, sl
 802015c:	4659      	mov	r1, fp
 802015e:	f7e0 fb9d 	bl	800089c <__aeabi_ddiv>
 8020162:	4682      	mov	sl, r0
 8020164:	468b      	mov	fp, r1
 8020166:	e028      	b.n	80201ba <_dtoa_r+0x3d2>
 8020168:	2502      	movs	r5, #2
 802016a:	e7f2      	b.n	8020152 <_dtoa_r+0x36a>
 802016c:	07f9      	lsls	r1, r7, #31
 802016e:	d508      	bpl.n	8020182 <_dtoa_r+0x39a>
 8020170:	4640      	mov	r0, r8
 8020172:	4649      	mov	r1, r9
 8020174:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020178:	f7e0 fa66 	bl	8000648 <__aeabi_dmul>
 802017c:	3501      	adds	r5, #1
 802017e:	4680      	mov	r8, r0
 8020180:	4689      	mov	r9, r1
 8020182:	107f      	asrs	r7, r7, #1
 8020184:	3608      	adds	r6, #8
 8020186:	e7e5      	b.n	8020154 <_dtoa_r+0x36c>
 8020188:	f000 809b 	beq.w	80202c2 <_dtoa_r+0x4da>
 802018c:	9b00      	ldr	r3, [sp, #0]
 802018e:	4f9d      	ldr	r7, [pc, #628]	; (8020404 <_dtoa_r+0x61c>)
 8020190:	425e      	negs	r6, r3
 8020192:	4b9b      	ldr	r3, [pc, #620]	; (8020400 <_dtoa_r+0x618>)
 8020194:	f006 020f 	and.w	r2, r6, #15
 8020198:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802019c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201a0:	ec51 0b19 	vmov	r0, r1, d9
 80201a4:	f7e0 fa50 	bl	8000648 <__aeabi_dmul>
 80201a8:	1136      	asrs	r6, r6, #4
 80201aa:	4682      	mov	sl, r0
 80201ac:	468b      	mov	fp, r1
 80201ae:	2300      	movs	r3, #0
 80201b0:	2502      	movs	r5, #2
 80201b2:	2e00      	cmp	r6, #0
 80201b4:	d17a      	bne.n	80202ac <_dtoa_r+0x4c4>
 80201b6:	2b00      	cmp	r3, #0
 80201b8:	d1d3      	bne.n	8020162 <_dtoa_r+0x37a>
 80201ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80201bc:	2b00      	cmp	r3, #0
 80201be:	f000 8082 	beq.w	80202c6 <_dtoa_r+0x4de>
 80201c2:	4b91      	ldr	r3, [pc, #580]	; (8020408 <_dtoa_r+0x620>)
 80201c4:	2200      	movs	r2, #0
 80201c6:	4650      	mov	r0, sl
 80201c8:	4659      	mov	r1, fp
 80201ca:	f7e0 fcaf 	bl	8000b2c <__aeabi_dcmplt>
 80201ce:	2800      	cmp	r0, #0
 80201d0:	d079      	beq.n	80202c6 <_dtoa_r+0x4de>
 80201d2:	9b03      	ldr	r3, [sp, #12]
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d076      	beq.n	80202c6 <_dtoa_r+0x4de>
 80201d8:	9b02      	ldr	r3, [sp, #8]
 80201da:	2b00      	cmp	r3, #0
 80201dc:	dd36      	ble.n	802024c <_dtoa_r+0x464>
 80201de:	9b00      	ldr	r3, [sp, #0]
 80201e0:	4650      	mov	r0, sl
 80201e2:	4659      	mov	r1, fp
 80201e4:	1e5f      	subs	r7, r3, #1
 80201e6:	2200      	movs	r2, #0
 80201e8:	4b88      	ldr	r3, [pc, #544]	; (802040c <_dtoa_r+0x624>)
 80201ea:	f7e0 fa2d 	bl	8000648 <__aeabi_dmul>
 80201ee:	9e02      	ldr	r6, [sp, #8]
 80201f0:	4682      	mov	sl, r0
 80201f2:	468b      	mov	fp, r1
 80201f4:	3501      	adds	r5, #1
 80201f6:	4628      	mov	r0, r5
 80201f8:	f7e0 f9bc 	bl	8000574 <__aeabi_i2d>
 80201fc:	4652      	mov	r2, sl
 80201fe:	465b      	mov	r3, fp
 8020200:	f7e0 fa22 	bl	8000648 <__aeabi_dmul>
 8020204:	4b82      	ldr	r3, [pc, #520]	; (8020410 <_dtoa_r+0x628>)
 8020206:	2200      	movs	r2, #0
 8020208:	f7e0 f868 	bl	80002dc <__adddf3>
 802020c:	46d0      	mov	r8, sl
 802020e:	46d9      	mov	r9, fp
 8020210:	4682      	mov	sl, r0
 8020212:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8020216:	2e00      	cmp	r6, #0
 8020218:	d158      	bne.n	80202cc <_dtoa_r+0x4e4>
 802021a:	4b7e      	ldr	r3, [pc, #504]	; (8020414 <_dtoa_r+0x62c>)
 802021c:	2200      	movs	r2, #0
 802021e:	4640      	mov	r0, r8
 8020220:	4649      	mov	r1, r9
 8020222:	f7e0 f859 	bl	80002d8 <__aeabi_dsub>
 8020226:	4652      	mov	r2, sl
 8020228:	465b      	mov	r3, fp
 802022a:	4680      	mov	r8, r0
 802022c:	4689      	mov	r9, r1
 802022e:	f7e0 fc9b 	bl	8000b68 <__aeabi_dcmpgt>
 8020232:	2800      	cmp	r0, #0
 8020234:	f040 8295 	bne.w	8020762 <_dtoa_r+0x97a>
 8020238:	4652      	mov	r2, sl
 802023a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802023e:	4640      	mov	r0, r8
 8020240:	4649      	mov	r1, r9
 8020242:	f7e0 fc73 	bl	8000b2c <__aeabi_dcmplt>
 8020246:	2800      	cmp	r0, #0
 8020248:	f040 8289 	bne.w	802075e <_dtoa_r+0x976>
 802024c:	ec5b ab19 	vmov	sl, fp, d9
 8020250:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020252:	2b00      	cmp	r3, #0
 8020254:	f2c0 8148 	blt.w	80204e8 <_dtoa_r+0x700>
 8020258:	9a00      	ldr	r2, [sp, #0]
 802025a:	2a0e      	cmp	r2, #14
 802025c:	f300 8144 	bgt.w	80204e8 <_dtoa_r+0x700>
 8020260:	4b67      	ldr	r3, [pc, #412]	; (8020400 <_dtoa_r+0x618>)
 8020262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020266:	e9d3 8900 	ldrd	r8, r9, [r3]
 802026a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802026c:	2b00      	cmp	r3, #0
 802026e:	f280 80d5 	bge.w	802041c <_dtoa_r+0x634>
 8020272:	9b03      	ldr	r3, [sp, #12]
 8020274:	2b00      	cmp	r3, #0
 8020276:	f300 80d1 	bgt.w	802041c <_dtoa_r+0x634>
 802027a:	f040 826f 	bne.w	802075c <_dtoa_r+0x974>
 802027e:	4b65      	ldr	r3, [pc, #404]	; (8020414 <_dtoa_r+0x62c>)
 8020280:	2200      	movs	r2, #0
 8020282:	4640      	mov	r0, r8
 8020284:	4649      	mov	r1, r9
 8020286:	f7e0 f9df 	bl	8000648 <__aeabi_dmul>
 802028a:	4652      	mov	r2, sl
 802028c:	465b      	mov	r3, fp
 802028e:	f7e0 fc61 	bl	8000b54 <__aeabi_dcmpge>
 8020292:	9e03      	ldr	r6, [sp, #12]
 8020294:	4637      	mov	r7, r6
 8020296:	2800      	cmp	r0, #0
 8020298:	f040 8245 	bne.w	8020726 <_dtoa_r+0x93e>
 802029c:	9d01      	ldr	r5, [sp, #4]
 802029e:	2331      	movs	r3, #49	; 0x31
 80202a0:	f805 3b01 	strb.w	r3, [r5], #1
 80202a4:	9b00      	ldr	r3, [sp, #0]
 80202a6:	3301      	adds	r3, #1
 80202a8:	9300      	str	r3, [sp, #0]
 80202aa:	e240      	b.n	802072e <_dtoa_r+0x946>
 80202ac:	07f2      	lsls	r2, r6, #31
 80202ae:	d505      	bpl.n	80202bc <_dtoa_r+0x4d4>
 80202b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80202b4:	f7e0 f9c8 	bl	8000648 <__aeabi_dmul>
 80202b8:	3501      	adds	r5, #1
 80202ba:	2301      	movs	r3, #1
 80202bc:	1076      	asrs	r6, r6, #1
 80202be:	3708      	adds	r7, #8
 80202c0:	e777      	b.n	80201b2 <_dtoa_r+0x3ca>
 80202c2:	2502      	movs	r5, #2
 80202c4:	e779      	b.n	80201ba <_dtoa_r+0x3d2>
 80202c6:	9f00      	ldr	r7, [sp, #0]
 80202c8:	9e03      	ldr	r6, [sp, #12]
 80202ca:	e794      	b.n	80201f6 <_dtoa_r+0x40e>
 80202cc:	9901      	ldr	r1, [sp, #4]
 80202ce:	4b4c      	ldr	r3, [pc, #304]	; (8020400 <_dtoa_r+0x618>)
 80202d0:	4431      	add	r1, r6
 80202d2:	910d      	str	r1, [sp, #52]	; 0x34
 80202d4:	9908      	ldr	r1, [sp, #32]
 80202d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80202da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80202de:	2900      	cmp	r1, #0
 80202e0:	d043      	beq.n	802036a <_dtoa_r+0x582>
 80202e2:	494d      	ldr	r1, [pc, #308]	; (8020418 <_dtoa_r+0x630>)
 80202e4:	2000      	movs	r0, #0
 80202e6:	f7e0 fad9 	bl	800089c <__aeabi_ddiv>
 80202ea:	4652      	mov	r2, sl
 80202ec:	465b      	mov	r3, fp
 80202ee:	f7df fff3 	bl	80002d8 <__aeabi_dsub>
 80202f2:	9d01      	ldr	r5, [sp, #4]
 80202f4:	4682      	mov	sl, r0
 80202f6:	468b      	mov	fp, r1
 80202f8:	4649      	mov	r1, r9
 80202fa:	4640      	mov	r0, r8
 80202fc:	f7e0 fc54 	bl	8000ba8 <__aeabi_d2iz>
 8020300:	4606      	mov	r6, r0
 8020302:	f7e0 f937 	bl	8000574 <__aeabi_i2d>
 8020306:	4602      	mov	r2, r0
 8020308:	460b      	mov	r3, r1
 802030a:	4640      	mov	r0, r8
 802030c:	4649      	mov	r1, r9
 802030e:	f7df ffe3 	bl	80002d8 <__aeabi_dsub>
 8020312:	3630      	adds	r6, #48	; 0x30
 8020314:	f805 6b01 	strb.w	r6, [r5], #1
 8020318:	4652      	mov	r2, sl
 802031a:	465b      	mov	r3, fp
 802031c:	4680      	mov	r8, r0
 802031e:	4689      	mov	r9, r1
 8020320:	f7e0 fc04 	bl	8000b2c <__aeabi_dcmplt>
 8020324:	2800      	cmp	r0, #0
 8020326:	d163      	bne.n	80203f0 <_dtoa_r+0x608>
 8020328:	4642      	mov	r2, r8
 802032a:	464b      	mov	r3, r9
 802032c:	4936      	ldr	r1, [pc, #216]	; (8020408 <_dtoa_r+0x620>)
 802032e:	2000      	movs	r0, #0
 8020330:	f7df ffd2 	bl	80002d8 <__aeabi_dsub>
 8020334:	4652      	mov	r2, sl
 8020336:	465b      	mov	r3, fp
 8020338:	f7e0 fbf8 	bl	8000b2c <__aeabi_dcmplt>
 802033c:	2800      	cmp	r0, #0
 802033e:	f040 80b5 	bne.w	80204ac <_dtoa_r+0x6c4>
 8020342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020344:	429d      	cmp	r5, r3
 8020346:	d081      	beq.n	802024c <_dtoa_r+0x464>
 8020348:	4b30      	ldr	r3, [pc, #192]	; (802040c <_dtoa_r+0x624>)
 802034a:	2200      	movs	r2, #0
 802034c:	4650      	mov	r0, sl
 802034e:	4659      	mov	r1, fp
 8020350:	f7e0 f97a 	bl	8000648 <__aeabi_dmul>
 8020354:	4b2d      	ldr	r3, [pc, #180]	; (802040c <_dtoa_r+0x624>)
 8020356:	4682      	mov	sl, r0
 8020358:	468b      	mov	fp, r1
 802035a:	4640      	mov	r0, r8
 802035c:	4649      	mov	r1, r9
 802035e:	2200      	movs	r2, #0
 8020360:	f7e0 f972 	bl	8000648 <__aeabi_dmul>
 8020364:	4680      	mov	r8, r0
 8020366:	4689      	mov	r9, r1
 8020368:	e7c6      	b.n	80202f8 <_dtoa_r+0x510>
 802036a:	4650      	mov	r0, sl
 802036c:	4659      	mov	r1, fp
 802036e:	f7e0 f96b 	bl	8000648 <__aeabi_dmul>
 8020372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020374:	9d01      	ldr	r5, [sp, #4]
 8020376:	930f      	str	r3, [sp, #60]	; 0x3c
 8020378:	4682      	mov	sl, r0
 802037a:	468b      	mov	fp, r1
 802037c:	4649      	mov	r1, r9
 802037e:	4640      	mov	r0, r8
 8020380:	f7e0 fc12 	bl	8000ba8 <__aeabi_d2iz>
 8020384:	4606      	mov	r6, r0
 8020386:	f7e0 f8f5 	bl	8000574 <__aeabi_i2d>
 802038a:	3630      	adds	r6, #48	; 0x30
 802038c:	4602      	mov	r2, r0
 802038e:	460b      	mov	r3, r1
 8020390:	4640      	mov	r0, r8
 8020392:	4649      	mov	r1, r9
 8020394:	f7df ffa0 	bl	80002d8 <__aeabi_dsub>
 8020398:	f805 6b01 	strb.w	r6, [r5], #1
 802039c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802039e:	429d      	cmp	r5, r3
 80203a0:	4680      	mov	r8, r0
 80203a2:	4689      	mov	r9, r1
 80203a4:	f04f 0200 	mov.w	r2, #0
 80203a8:	d124      	bne.n	80203f4 <_dtoa_r+0x60c>
 80203aa:	4b1b      	ldr	r3, [pc, #108]	; (8020418 <_dtoa_r+0x630>)
 80203ac:	4650      	mov	r0, sl
 80203ae:	4659      	mov	r1, fp
 80203b0:	f7df ff94 	bl	80002dc <__adddf3>
 80203b4:	4602      	mov	r2, r0
 80203b6:	460b      	mov	r3, r1
 80203b8:	4640      	mov	r0, r8
 80203ba:	4649      	mov	r1, r9
 80203bc:	f7e0 fbd4 	bl	8000b68 <__aeabi_dcmpgt>
 80203c0:	2800      	cmp	r0, #0
 80203c2:	d173      	bne.n	80204ac <_dtoa_r+0x6c4>
 80203c4:	4652      	mov	r2, sl
 80203c6:	465b      	mov	r3, fp
 80203c8:	4913      	ldr	r1, [pc, #76]	; (8020418 <_dtoa_r+0x630>)
 80203ca:	2000      	movs	r0, #0
 80203cc:	f7df ff84 	bl	80002d8 <__aeabi_dsub>
 80203d0:	4602      	mov	r2, r0
 80203d2:	460b      	mov	r3, r1
 80203d4:	4640      	mov	r0, r8
 80203d6:	4649      	mov	r1, r9
 80203d8:	f7e0 fba8 	bl	8000b2c <__aeabi_dcmplt>
 80203dc:	2800      	cmp	r0, #0
 80203de:	f43f af35 	beq.w	802024c <_dtoa_r+0x464>
 80203e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80203e4:	1e6b      	subs	r3, r5, #1
 80203e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80203e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80203ec:	2b30      	cmp	r3, #48	; 0x30
 80203ee:	d0f8      	beq.n	80203e2 <_dtoa_r+0x5fa>
 80203f0:	9700      	str	r7, [sp, #0]
 80203f2:	e049      	b.n	8020488 <_dtoa_r+0x6a0>
 80203f4:	4b05      	ldr	r3, [pc, #20]	; (802040c <_dtoa_r+0x624>)
 80203f6:	f7e0 f927 	bl	8000648 <__aeabi_dmul>
 80203fa:	4680      	mov	r8, r0
 80203fc:	4689      	mov	r9, r1
 80203fe:	e7bd      	b.n	802037c <_dtoa_r+0x594>
 8020400:	080231b0 	.word	0x080231b0
 8020404:	08023188 	.word	0x08023188
 8020408:	3ff00000 	.word	0x3ff00000
 802040c:	40240000 	.word	0x40240000
 8020410:	401c0000 	.word	0x401c0000
 8020414:	40140000 	.word	0x40140000
 8020418:	3fe00000 	.word	0x3fe00000
 802041c:	9d01      	ldr	r5, [sp, #4]
 802041e:	4656      	mov	r6, sl
 8020420:	465f      	mov	r7, fp
 8020422:	4642      	mov	r2, r8
 8020424:	464b      	mov	r3, r9
 8020426:	4630      	mov	r0, r6
 8020428:	4639      	mov	r1, r7
 802042a:	f7e0 fa37 	bl	800089c <__aeabi_ddiv>
 802042e:	f7e0 fbbb 	bl	8000ba8 <__aeabi_d2iz>
 8020432:	4682      	mov	sl, r0
 8020434:	f7e0 f89e 	bl	8000574 <__aeabi_i2d>
 8020438:	4642      	mov	r2, r8
 802043a:	464b      	mov	r3, r9
 802043c:	f7e0 f904 	bl	8000648 <__aeabi_dmul>
 8020440:	4602      	mov	r2, r0
 8020442:	460b      	mov	r3, r1
 8020444:	4630      	mov	r0, r6
 8020446:	4639      	mov	r1, r7
 8020448:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 802044c:	f7df ff44 	bl	80002d8 <__aeabi_dsub>
 8020450:	f805 6b01 	strb.w	r6, [r5], #1
 8020454:	9e01      	ldr	r6, [sp, #4]
 8020456:	9f03      	ldr	r7, [sp, #12]
 8020458:	1bae      	subs	r6, r5, r6
 802045a:	42b7      	cmp	r7, r6
 802045c:	4602      	mov	r2, r0
 802045e:	460b      	mov	r3, r1
 8020460:	d135      	bne.n	80204ce <_dtoa_r+0x6e6>
 8020462:	f7df ff3b 	bl	80002dc <__adddf3>
 8020466:	4642      	mov	r2, r8
 8020468:	464b      	mov	r3, r9
 802046a:	4606      	mov	r6, r0
 802046c:	460f      	mov	r7, r1
 802046e:	f7e0 fb7b 	bl	8000b68 <__aeabi_dcmpgt>
 8020472:	b9d0      	cbnz	r0, 80204aa <_dtoa_r+0x6c2>
 8020474:	4642      	mov	r2, r8
 8020476:	464b      	mov	r3, r9
 8020478:	4630      	mov	r0, r6
 802047a:	4639      	mov	r1, r7
 802047c:	f7e0 fb4c 	bl	8000b18 <__aeabi_dcmpeq>
 8020480:	b110      	cbz	r0, 8020488 <_dtoa_r+0x6a0>
 8020482:	f01a 0f01 	tst.w	sl, #1
 8020486:	d110      	bne.n	80204aa <_dtoa_r+0x6c2>
 8020488:	4620      	mov	r0, r4
 802048a:	ee18 1a10 	vmov	r1, s16
 802048e:	f000 fe9f 	bl	80211d0 <_Bfree>
 8020492:	2300      	movs	r3, #0
 8020494:	9800      	ldr	r0, [sp, #0]
 8020496:	702b      	strb	r3, [r5, #0]
 8020498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802049a:	3001      	adds	r0, #1
 802049c:	6018      	str	r0, [r3, #0]
 802049e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80204a0:	2b00      	cmp	r3, #0
 80204a2:	f43f acf1 	beq.w	801fe88 <_dtoa_r+0xa0>
 80204a6:	601d      	str	r5, [r3, #0]
 80204a8:	e4ee      	b.n	801fe88 <_dtoa_r+0xa0>
 80204aa:	9f00      	ldr	r7, [sp, #0]
 80204ac:	462b      	mov	r3, r5
 80204ae:	461d      	mov	r5, r3
 80204b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80204b4:	2a39      	cmp	r2, #57	; 0x39
 80204b6:	d106      	bne.n	80204c6 <_dtoa_r+0x6de>
 80204b8:	9a01      	ldr	r2, [sp, #4]
 80204ba:	429a      	cmp	r2, r3
 80204bc:	d1f7      	bne.n	80204ae <_dtoa_r+0x6c6>
 80204be:	9901      	ldr	r1, [sp, #4]
 80204c0:	2230      	movs	r2, #48	; 0x30
 80204c2:	3701      	adds	r7, #1
 80204c4:	700a      	strb	r2, [r1, #0]
 80204c6:	781a      	ldrb	r2, [r3, #0]
 80204c8:	3201      	adds	r2, #1
 80204ca:	701a      	strb	r2, [r3, #0]
 80204cc:	e790      	b.n	80203f0 <_dtoa_r+0x608>
 80204ce:	4ba6      	ldr	r3, [pc, #664]	; (8020768 <_dtoa_r+0x980>)
 80204d0:	2200      	movs	r2, #0
 80204d2:	f7e0 f8b9 	bl	8000648 <__aeabi_dmul>
 80204d6:	2200      	movs	r2, #0
 80204d8:	2300      	movs	r3, #0
 80204da:	4606      	mov	r6, r0
 80204dc:	460f      	mov	r7, r1
 80204de:	f7e0 fb1b 	bl	8000b18 <__aeabi_dcmpeq>
 80204e2:	2800      	cmp	r0, #0
 80204e4:	d09d      	beq.n	8020422 <_dtoa_r+0x63a>
 80204e6:	e7cf      	b.n	8020488 <_dtoa_r+0x6a0>
 80204e8:	9a08      	ldr	r2, [sp, #32]
 80204ea:	2a00      	cmp	r2, #0
 80204ec:	f000 80d7 	beq.w	802069e <_dtoa_r+0x8b6>
 80204f0:	9a06      	ldr	r2, [sp, #24]
 80204f2:	2a01      	cmp	r2, #1
 80204f4:	f300 80ba 	bgt.w	802066c <_dtoa_r+0x884>
 80204f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80204fa:	2a00      	cmp	r2, #0
 80204fc:	f000 80b2 	beq.w	8020664 <_dtoa_r+0x87c>
 8020500:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020504:	9e07      	ldr	r6, [sp, #28]
 8020506:	9d04      	ldr	r5, [sp, #16]
 8020508:	9a04      	ldr	r2, [sp, #16]
 802050a:	441a      	add	r2, r3
 802050c:	9204      	str	r2, [sp, #16]
 802050e:	9a05      	ldr	r2, [sp, #20]
 8020510:	2101      	movs	r1, #1
 8020512:	441a      	add	r2, r3
 8020514:	4620      	mov	r0, r4
 8020516:	9205      	str	r2, [sp, #20]
 8020518:	f000 ff5c 	bl	80213d4 <__i2b>
 802051c:	4607      	mov	r7, r0
 802051e:	2d00      	cmp	r5, #0
 8020520:	dd0c      	ble.n	802053c <_dtoa_r+0x754>
 8020522:	9b05      	ldr	r3, [sp, #20]
 8020524:	2b00      	cmp	r3, #0
 8020526:	dd09      	ble.n	802053c <_dtoa_r+0x754>
 8020528:	42ab      	cmp	r3, r5
 802052a:	9a04      	ldr	r2, [sp, #16]
 802052c:	bfa8      	it	ge
 802052e:	462b      	movge	r3, r5
 8020530:	1ad2      	subs	r2, r2, r3
 8020532:	9204      	str	r2, [sp, #16]
 8020534:	9a05      	ldr	r2, [sp, #20]
 8020536:	1aed      	subs	r5, r5, r3
 8020538:	1ad3      	subs	r3, r2, r3
 802053a:	9305      	str	r3, [sp, #20]
 802053c:	9b07      	ldr	r3, [sp, #28]
 802053e:	b31b      	cbz	r3, 8020588 <_dtoa_r+0x7a0>
 8020540:	9b08      	ldr	r3, [sp, #32]
 8020542:	2b00      	cmp	r3, #0
 8020544:	f000 80af 	beq.w	80206a6 <_dtoa_r+0x8be>
 8020548:	2e00      	cmp	r6, #0
 802054a:	dd13      	ble.n	8020574 <_dtoa_r+0x78c>
 802054c:	4639      	mov	r1, r7
 802054e:	4632      	mov	r2, r6
 8020550:	4620      	mov	r0, r4
 8020552:	f000 ffff 	bl	8021554 <__pow5mult>
 8020556:	ee18 2a10 	vmov	r2, s16
 802055a:	4601      	mov	r1, r0
 802055c:	4607      	mov	r7, r0
 802055e:	4620      	mov	r0, r4
 8020560:	f000 ff4e 	bl	8021400 <__multiply>
 8020564:	ee18 1a10 	vmov	r1, s16
 8020568:	4680      	mov	r8, r0
 802056a:	4620      	mov	r0, r4
 802056c:	f000 fe30 	bl	80211d0 <_Bfree>
 8020570:	ee08 8a10 	vmov	s16, r8
 8020574:	9b07      	ldr	r3, [sp, #28]
 8020576:	1b9a      	subs	r2, r3, r6
 8020578:	d006      	beq.n	8020588 <_dtoa_r+0x7a0>
 802057a:	ee18 1a10 	vmov	r1, s16
 802057e:	4620      	mov	r0, r4
 8020580:	f000 ffe8 	bl	8021554 <__pow5mult>
 8020584:	ee08 0a10 	vmov	s16, r0
 8020588:	2101      	movs	r1, #1
 802058a:	4620      	mov	r0, r4
 802058c:	f000 ff22 	bl	80213d4 <__i2b>
 8020590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020592:	2b00      	cmp	r3, #0
 8020594:	4606      	mov	r6, r0
 8020596:	f340 8088 	ble.w	80206aa <_dtoa_r+0x8c2>
 802059a:	461a      	mov	r2, r3
 802059c:	4601      	mov	r1, r0
 802059e:	4620      	mov	r0, r4
 80205a0:	f000 ffd8 	bl	8021554 <__pow5mult>
 80205a4:	9b06      	ldr	r3, [sp, #24]
 80205a6:	2b01      	cmp	r3, #1
 80205a8:	4606      	mov	r6, r0
 80205aa:	f340 8081 	ble.w	80206b0 <_dtoa_r+0x8c8>
 80205ae:	f04f 0800 	mov.w	r8, #0
 80205b2:	6933      	ldr	r3, [r6, #16]
 80205b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80205b8:	6918      	ldr	r0, [r3, #16]
 80205ba:	f000 febb 	bl	8021334 <__hi0bits>
 80205be:	f1c0 0020 	rsb	r0, r0, #32
 80205c2:	9b05      	ldr	r3, [sp, #20]
 80205c4:	4418      	add	r0, r3
 80205c6:	f010 001f 	ands.w	r0, r0, #31
 80205ca:	f000 8092 	beq.w	80206f2 <_dtoa_r+0x90a>
 80205ce:	f1c0 0320 	rsb	r3, r0, #32
 80205d2:	2b04      	cmp	r3, #4
 80205d4:	f340 808a 	ble.w	80206ec <_dtoa_r+0x904>
 80205d8:	f1c0 001c 	rsb	r0, r0, #28
 80205dc:	9b04      	ldr	r3, [sp, #16]
 80205de:	4403      	add	r3, r0
 80205e0:	9304      	str	r3, [sp, #16]
 80205e2:	9b05      	ldr	r3, [sp, #20]
 80205e4:	4403      	add	r3, r0
 80205e6:	4405      	add	r5, r0
 80205e8:	9305      	str	r3, [sp, #20]
 80205ea:	9b04      	ldr	r3, [sp, #16]
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	dd07      	ble.n	8020600 <_dtoa_r+0x818>
 80205f0:	ee18 1a10 	vmov	r1, s16
 80205f4:	461a      	mov	r2, r3
 80205f6:	4620      	mov	r0, r4
 80205f8:	f001 f806 	bl	8021608 <__lshift>
 80205fc:	ee08 0a10 	vmov	s16, r0
 8020600:	9b05      	ldr	r3, [sp, #20]
 8020602:	2b00      	cmp	r3, #0
 8020604:	dd05      	ble.n	8020612 <_dtoa_r+0x82a>
 8020606:	4631      	mov	r1, r6
 8020608:	461a      	mov	r2, r3
 802060a:	4620      	mov	r0, r4
 802060c:	f000 fffc 	bl	8021608 <__lshift>
 8020610:	4606      	mov	r6, r0
 8020612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020614:	2b00      	cmp	r3, #0
 8020616:	d06e      	beq.n	80206f6 <_dtoa_r+0x90e>
 8020618:	ee18 0a10 	vmov	r0, s16
 802061c:	4631      	mov	r1, r6
 802061e:	f001 f863 	bl	80216e8 <__mcmp>
 8020622:	2800      	cmp	r0, #0
 8020624:	da67      	bge.n	80206f6 <_dtoa_r+0x90e>
 8020626:	9b00      	ldr	r3, [sp, #0]
 8020628:	3b01      	subs	r3, #1
 802062a:	ee18 1a10 	vmov	r1, s16
 802062e:	9300      	str	r3, [sp, #0]
 8020630:	220a      	movs	r2, #10
 8020632:	2300      	movs	r3, #0
 8020634:	4620      	mov	r0, r4
 8020636:	f000 fded 	bl	8021214 <__multadd>
 802063a:	9b08      	ldr	r3, [sp, #32]
 802063c:	ee08 0a10 	vmov	s16, r0
 8020640:	2b00      	cmp	r3, #0
 8020642:	f000 81b1 	beq.w	80209a8 <_dtoa_r+0xbc0>
 8020646:	2300      	movs	r3, #0
 8020648:	4639      	mov	r1, r7
 802064a:	220a      	movs	r2, #10
 802064c:	4620      	mov	r0, r4
 802064e:	f000 fde1 	bl	8021214 <__multadd>
 8020652:	9b02      	ldr	r3, [sp, #8]
 8020654:	2b00      	cmp	r3, #0
 8020656:	4607      	mov	r7, r0
 8020658:	f300 808e 	bgt.w	8020778 <_dtoa_r+0x990>
 802065c:	9b06      	ldr	r3, [sp, #24]
 802065e:	2b02      	cmp	r3, #2
 8020660:	dc51      	bgt.n	8020706 <_dtoa_r+0x91e>
 8020662:	e089      	b.n	8020778 <_dtoa_r+0x990>
 8020664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020666:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802066a:	e74b      	b.n	8020504 <_dtoa_r+0x71c>
 802066c:	9b03      	ldr	r3, [sp, #12]
 802066e:	1e5e      	subs	r6, r3, #1
 8020670:	9b07      	ldr	r3, [sp, #28]
 8020672:	42b3      	cmp	r3, r6
 8020674:	bfbf      	itttt	lt
 8020676:	9b07      	ldrlt	r3, [sp, #28]
 8020678:	9607      	strlt	r6, [sp, #28]
 802067a:	1af2      	sublt	r2, r6, r3
 802067c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802067e:	bfb6      	itet	lt
 8020680:	189b      	addlt	r3, r3, r2
 8020682:	1b9e      	subge	r6, r3, r6
 8020684:	930a      	strlt	r3, [sp, #40]	; 0x28
 8020686:	9b03      	ldr	r3, [sp, #12]
 8020688:	bfb8      	it	lt
 802068a:	2600      	movlt	r6, #0
 802068c:	2b00      	cmp	r3, #0
 802068e:	bfb7      	itett	lt
 8020690:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8020694:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8020698:	1a9d      	sublt	r5, r3, r2
 802069a:	2300      	movlt	r3, #0
 802069c:	e734      	b.n	8020508 <_dtoa_r+0x720>
 802069e:	9e07      	ldr	r6, [sp, #28]
 80206a0:	9d04      	ldr	r5, [sp, #16]
 80206a2:	9f08      	ldr	r7, [sp, #32]
 80206a4:	e73b      	b.n	802051e <_dtoa_r+0x736>
 80206a6:	9a07      	ldr	r2, [sp, #28]
 80206a8:	e767      	b.n	802057a <_dtoa_r+0x792>
 80206aa:	9b06      	ldr	r3, [sp, #24]
 80206ac:	2b01      	cmp	r3, #1
 80206ae:	dc18      	bgt.n	80206e2 <_dtoa_r+0x8fa>
 80206b0:	f1ba 0f00 	cmp.w	sl, #0
 80206b4:	d115      	bne.n	80206e2 <_dtoa_r+0x8fa>
 80206b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80206ba:	b993      	cbnz	r3, 80206e2 <_dtoa_r+0x8fa>
 80206bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80206c0:	0d1b      	lsrs	r3, r3, #20
 80206c2:	051b      	lsls	r3, r3, #20
 80206c4:	b183      	cbz	r3, 80206e8 <_dtoa_r+0x900>
 80206c6:	9b04      	ldr	r3, [sp, #16]
 80206c8:	3301      	adds	r3, #1
 80206ca:	9304      	str	r3, [sp, #16]
 80206cc:	9b05      	ldr	r3, [sp, #20]
 80206ce:	3301      	adds	r3, #1
 80206d0:	9305      	str	r3, [sp, #20]
 80206d2:	f04f 0801 	mov.w	r8, #1
 80206d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80206d8:	2b00      	cmp	r3, #0
 80206da:	f47f af6a 	bne.w	80205b2 <_dtoa_r+0x7ca>
 80206de:	2001      	movs	r0, #1
 80206e0:	e76f      	b.n	80205c2 <_dtoa_r+0x7da>
 80206e2:	f04f 0800 	mov.w	r8, #0
 80206e6:	e7f6      	b.n	80206d6 <_dtoa_r+0x8ee>
 80206e8:	4698      	mov	r8, r3
 80206ea:	e7f4      	b.n	80206d6 <_dtoa_r+0x8ee>
 80206ec:	f43f af7d 	beq.w	80205ea <_dtoa_r+0x802>
 80206f0:	4618      	mov	r0, r3
 80206f2:	301c      	adds	r0, #28
 80206f4:	e772      	b.n	80205dc <_dtoa_r+0x7f4>
 80206f6:	9b03      	ldr	r3, [sp, #12]
 80206f8:	2b00      	cmp	r3, #0
 80206fa:	dc37      	bgt.n	802076c <_dtoa_r+0x984>
 80206fc:	9b06      	ldr	r3, [sp, #24]
 80206fe:	2b02      	cmp	r3, #2
 8020700:	dd34      	ble.n	802076c <_dtoa_r+0x984>
 8020702:	9b03      	ldr	r3, [sp, #12]
 8020704:	9302      	str	r3, [sp, #8]
 8020706:	9b02      	ldr	r3, [sp, #8]
 8020708:	b96b      	cbnz	r3, 8020726 <_dtoa_r+0x93e>
 802070a:	4631      	mov	r1, r6
 802070c:	2205      	movs	r2, #5
 802070e:	4620      	mov	r0, r4
 8020710:	f000 fd80 	bl	8021214 <__multadd>
 8020714:	4601      	mov	r1, r0
 8020716:	4606      	mov	r6, r0
 8020718:	ee18 0a10 	vmov	r0, s16
 802071c:	f000 ffe4 	bl	80216e8 <__mcmp>
 8020720:	2800      	cmp	r0, #0
 8020722:	f73f adbb 	bgt.w	802029c <_dtoa_r+0x4b4>
 8020726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020728:	9d01      	ldr	r5, [sp, #4]
 802072a:	43db      	mvns	r3, r3
 802072c:	9300      	str	r3, [sp, #0]
 802072e:	f04f 0800 	mov.w	r8, #0
 8020732:	4631      	mov	r1, r6
 8020734:	4620      	mov	r0, r4
 8020736:	f000 fd4b 	bl	80211d0 <_Bfree>
 802073a:	2f00      	cmp	r7, #0
 802073c:	f43f aea4 	beq.w	8020488 <_dtoa_r+0x6a0>
 8020740:	f1b8 0f00 	cmp.w	r8, #0
 8020744:	d005      	beq.n	8020752 <_dtoa_r+0x96a>
 8020746:	45b8      	cmp	r8, r7
 8020748:	d003      	beq.n	8020752 <_dtoa_r+0x96a>
 802074a:	4641      	mov	r1, r8
 802074c:	4620      	mov	r0, r4
 802074e:	f000 fd3f 	bl	80211d0 <_Bfree>
 8020752:	4639      	mov	r1, r7
 8020754:	4620      	mov	r0, r4
 8020756:	f000 fd3b 	bl	80211d0 <_Bfree>
 802075a:	e695      	b.n	8020488 <_dtoa_r+0x6a0>
 802075c:	2600      	movs	r6, #0
 802075e:	4637      	mov	r7, r6
 8020760:	e7e1      	b.n	8020726 <_dtoa_r+0x93e>
 8020762:	9700      	str	r7, [sp, #0]
 8020764:	4637      	mov	r7, r6
 8020766:	e599      	b.n	802029c <_dtoa_r+0x4b4>
 8020768:	40240000 	.word	0x40240000
 802076c:	9b08      	ldr	r3, [sp, #32]
 802076e:	2b00      	cmp	r3, #0
 8020770:	f000 80ca 	beq.w	8020908 <_dtoa_r+0xb20>
 8020774:	9b03      	ldr	r3, [sp, #12]
 8020776:	9302      	str	r3, [sp, #8]
 8020778:	2d00      	cmp	r5, #0
 802077a:	dd05      	ble.n	8020788 <_dtoa_r+0x9a0>
 802077c:	4639      	mov	r1, r7
 802077e:	462a      	mov	r2, r5
 8020780:	4620      	mov	r0, r4
 8020782:	f000 ff41 	bl	8021608 <__lshift>
 8020786:	4607      	mov	r7, r0
 8020788:	f1b8 0f00 	cmp.w	r8, #0
 802078c:	d05b      	beq.n	8020846 <_dtoa_r+0xa5e>
 802078e:	6879      	ldr	r1, [r7, #4]
 8020790:	4620      	mov	r0, r4
 8020792:	f000 fcdd 	bl	8021150 <_Balloc>
 8020796:	4605      	mov	r5, r0
 8020798:	b928      	cbnz	r0, 80207a6 <_dtoa_r+0x9be>
 802079a:	4b87      	ldr	r3, [pc, #540]	; (80209b8 <_dtoa_r+0xbd0>)
 802079c:	4602      	mov	r2, r0
 802079e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80207a2:	f7ff bb3b 	b.w	801fe1c <_dtoa_r+0x34>
 80207a6:	693a      	ldr	r2, [r7, #16]
 80207a8:	3202      	adds	r2, #2
 80207aa:	0092      	lsls	r2, r2, #2
 80207ac:	f107 010c 	add.w	r1, r7, #12
 80207b0:	300c      	adds	r0, #12
 80207b2:	f7fd fc67 	bl	801e084 <memcpy>
 80207b6:	2201      	movs	r2, #1
 80207b8:	4629      	mov	r1, r5
 80207ba:	4620      	mov	r0, r4
 80207bc:	f000 ff24 	bl	8021608 <__lshift>
 80207c0:	9b01      	ldr	r3, [sp, #4]
 80207c2:	f103 0901 	add.w	r9, r3, #1
 80207c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80207ca:	4413      	add	r3, r2
 80207cc:	9305      	str	r3, [sp, #20]
 80207ce:	f00a 0301 	and.w	r3, sl, #1
 80207d2:	46b8      	mov	r8, r7
 80207d4:	9304      	str	r3, [sp, #16]
 80207d6:	4607      	mov	r7, r0
 80207d8:	4631      	mov	r1, r6
 80207da:	ee18 0a10 	vmov	r0, s16
 80207de:	f7ff fa75 	bl	801fccc <quorem>
 80207e2:	4641      	mov	r1, r8
 80207e4:	9002      	str	r0, [sp, #8]
 80207e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80207ea:	ee18 0a10 	vmov	r0, s16
 80207ee:	f000 ff7b 	bl	80216e8 <__mcmp>
 80207f2:	463a      	mov	r2, r7
 80207f4:	9003      	str	r0, [sp, #12]
 80207f6:	4631      	mov	r1, r6
 80207f8:	4620      	mov	r0, r4
 80207fa:	f000 ff91 	bl	8021720 <__mdiff>
 80207fe:	68c2      	ldr	r2, [r0, #12]
 8020800:	f109 3bff 	add.w	fp, r9, #4294967295
 8020804:	4605      	mov	r5, r0
 8020806:	bb02      	cbnz	r2, 802084a <_dtoa_r+0xa62>
 8020808:	4601      	mov	r1, r0
 802080a:	ee18 0a10 	vmov	r0, s16
 802080e:	f000 ff6b 	bl	80216e8 <__mcmp>
 8020812:	4602      	mov	r2, r0
 8020814:	4629      	mov	r1, r5
 8020816:	4620      	mov	r0, r4
 8020818:	9207      	str	r2, [sp, #28]
 802081a:	f000 fcd9 	bl	80211d0 <_Bfree>
 802081e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8020822:	ea43 0102 	orr.w	r1, r3, r2
 8020826:	9b04      	ldr	r3, [sp, #16]
 8020828:	430b      	orrs	r3, r1
 802082a:	464d      	mov	r5, r9
 802082c:	d10f      	bne.n	802084e <_dtoa_r+0xa66>
 802082e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020832:	d02a      	beq.n	802088a <_dtoa_r+0xaa2>
 8020834:	9b03      	ldr	r3, [sp, #12]
 8020836:	2b00      	cmp	r3, #0
 8020838:	dd02      	ble.n	8020840 <_dtoa_r+0xa58>
 802083a:	9b02      	ldr	r3, [sp, #8]
 802083c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8020840:	f88b a000 	strb.w	sl, [fp]
 8020844:	e775      	b.n	8020732 <_dtoa_r+0x94a>
 8020846:	4638      	mov	r0, r7
 8020848:	e7ba      	b.n	80207c0 <_dtoa_r+0x9d8>
 802084a:	2201      	movs	r2, #1
 802084c:	e7e2      	b.n	8020814 <_dtoa_r+0xa2c>
 802084e:	9b03      	ldr	r3, [sp, #12]
 8020850:	2b00      	cmp	r3, #0
 8020852:	db04      	blt.n	802085e <_dtoa_r+0xa76>
 8020854:	9906      	ldr	r1, [sp, #24]
 8020856:	430b      	orrs	r3, r1
 8020858:	9904      	ldr	r1, [sp, #16]
 802085a:	430b      	orrs	r3, r1
 802085c:	d122      	bne.n	80208a4 <_dtoa_r+0xabc>
 802085e:	2a00      	cmp	r2, #0
 8020860:	ddee      	ble.n	8020840 <_dtoa_r+0xa58>
 8020862:	ee18 1a10 	vmov	r1, s16
 8020866:	2201      	movs	r2, #1
 8020868:	4620      	mov	r0, r4
 802086a:	f000 fecd 	bl	8021608 <__lshift>
 802086e:	4631      	mov	r1, r6
 8020870:	ee08 0a10 	vmov	s16, r0
 8020874:	f000 ff38 	bl	80216e8 <__mcmp>
 8020878:	2800      	cmp	r0, #0
 802087a:	dc03      	bgt.n	8020884 <_dtoa_r+0xa9c>
 802087c:	d1e0      	bne.n	8020840 <_dtoa_r+0xa58>
 802087e:	f01a 0f01 	tst.w	sl, #1
 8020882:	d0dd      	beq.n	8020840 <_dtoa_r+0xa58>
 8020884:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020888:	d1d7      	bne.n	802083a <_dtoa_r+0xa52>
 802088a:	2339      	movs	r3, #57	; 0x39
 802088c:	f88b 3000 	strb.w	r3, [fp]
 8020890:	462b      	mov	r3, r5
 8020892:	461d      	mov	r5, r3
 8020894:	3b01      	subs	r3, #1
 8020896:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802089a:	2a39      	cmp	r2, #57	; 0x39
 802089c:	d071      	beq.n	8020982 <_dtoa_r+0xb9a>
 802089e:	3201      	adds	r2, #1
 80208a0:	701a      	strb	r2, [r3, #0]
 80208a2:	e746      	b.n	8020732 <_dtoa_r+0x94a>
 80208a4:	2a00      	cmp	r2, #0
 80208a6:	dd07      	ble.n	80208b8 <_dtoa_r+0xad0>
 80208a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80208ac:	d0ed      	beq.n	802088a <_dtoa_r+0xaa2>
 80208ae:	f10a 0301 	add.w	r3, sl, #1
 80208b2:	f88b 3000 	strb.w	r3, [fp]
 80208b6:	e73c      	b.n	8020732 <_dtoa_r+0x94a>
 80208b8:	9b05      	ldr	r3, [sp, #20]
 80208ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80208be:	4599      	cmp	r9, r3
 80208c0:	d047      	beq.n	8020952 <_dtoa_r+0xb6a>
 80208c2:	ee18 1a10 	vmov	r1, s16
 80208c6:	2300      	movs	r3, #0
 80208c8:	220a      	movs	r2, #10
 80208ca:	4620      	mov	r0, r4
 80208cc:	f000 fca2 	bl	8021214 <__multadd>
 80208d0:	45b8      	cmp	r8, r7
 80208d2:	ee08 0a10 	vmov	s16, r0
 80208d6:	f04f 0300 	mov.w	r3, #0
 80208da:	f04f 020a 	mov.w	r2, #10
 80208de:	4641      	mov	r1, r8
 80208e0:	4620      	mov	r0, r4
 80208e2:	d106      	bne.n	80208f2 <_dtoa_r+0xb0a>
 80208e4:	f000 fc96 	bl	8021214 <__multadd>
 80208e8:	4680      	mov	r8, r0
 80208ea:	4607      	mov	r7, r0
 80208ec:	f109 0901 	add.w	r9, r9, #1
 80208f0:	e772      	b.n	80207d8 <_dtoa_r+0x9f0>
 80208f2:	f000 fc8f 	bl	8021214 <__multadd>
 80208f6:	4639      	mov	r1, r7
 80208f8:	4680      	mov	r8, r0
 80208fa:	2300      	movs	r3, #0
 80208fc:	220a      	movs	r2, #10
 80208fe:	4620      	mov	r0, r4
 8020900:	f000 fc88 	bl	8021214 <__multadd>
 8020904:	4607      	mov	r7, r0
 8020906:	e7f1      	b.n	80208ec <_dtoa_r+0xb04>
 8020908:	9b03      	ldr	r3, [sp, #12]
 802090a:	9302      	str	r3, [sp, #8]
 802090c:	9d01      	ldr	r5, [sp, #4]
 802090e:	ee18 0a10 	vmov	r0, s16
 8020912:	4631      	mov	r1, r6
 8020914:	f7ff f9da 	bl	801fccc <quorem>
 8020918:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802091c:	9b01      	ldr	r3, [sp, #4]
 802091e:	f805 ab01 	strb.w	sl, [r5], #1
 8020922:	1aea      	subs	r2, r5, r3
 8020924:	9b02      	ldr	r3, [sp, #8]
 8020926:	4293      	cmp	r3, r2
 8020928:	dd09      	ble.n	802093e <_dtoa_r+0xb56>
 802092a:	ee18 1a10 	vmov	r1, s16
 802092e:	2300      	movs	r3, #0
 8020930:	220a      	movs	r2, #10
 8020932:	4620      	mov	r0, r4
 8020934:	f000 fc6e 	bl	8021214 <__multadd>
 8020938:	ee08 0a10 	vmov	s16, r0
 802093c:	e7e7      	b.n	802090e <_dtoa_r+0xb26>
 802093e:	9b02      	ldr	r3, [sp, #8]
 8020940:	2b00      	cmp	r3, #0
 8020942:	bfc8      	it	gt
 8020944:	461d      	movgt	r5, r3
 8020946:	9b01      	ldr	r3, [sp, #4]
 8020948:	bfd8      	it	le
 802094a:	2501      	movle	r5, #1
 802094c:	441d      	add	r5, r3
 802094e:	f04f 0800 	mov.w	r8, #0
 8020952:	ee18 1a10 	vmov	r1, s16
 8020956:	2201      	movs	r2, #1
 8020958:	4620      	mov	r0, r4
 802095a:	f000 fe55 	bl	8021608 <__lshift>
 802095e:	4631      	mov	r1, r6
 8020960:	ee08 0a10 	vmov	s16, r0
 8020964:	f000 fec0 	bl	80216e8 <__mcmp>
 8020968:	2800      	cmp	r0, #0
 802096a:	dc91      	bgt.n	8020890 <_dtoa_r+0xaa8>
 802096c:	d102      	bne.n	8020974 <_dtoa_r+0xb8c>
 802096e:	f01a 0f01 	tst.w	sl, #1
 8020972:	d18d      	bne.n	8020890 <_dtoa_r+0xaa8>
 8020974:	462b      	mov	r3, r5
 8020976:	461d      	mov	r5, r3
 8020978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802097c:	2a30      	cmp	r2, #48	; 0x30
 802097e:	d0fa      	beq.n	8020976 <_dtoa_r+0xb8e>
 8020980:	e6d7      	b.n	8020732 <_dtoa_r+0x94a>
 8020982:	9a01      	ldr	r2, [sp, #4]
 8020984:	429a      	cmp	r2, r3
 8020986:	d184      	bne.n	8020892 <_dtoa_r+0xaaa>
 8020988:	9b00      	ldr	r3, [sp, #0]
 802098a:	3301      	adds	r3, #1
 802098c:	9300      	str	r3, [sp, #0]
 802098e:	2331      	movs	r3, #49	; 0x31
 8020990:	7013      	strb	r3, [r2, #0]
 8020992:	e6ce      	b.n	8020732 <_dtoa_r+0x94a>
 8020994:	4b09      	ldr	r3, [pc, #36]	; (80209bc <_dtoa_r+0xbd4>)
 8020996:	f7ff ba95 	b.w	801fec4 <_dtoa_r+0xdc>
 802099a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802099c:	2b00      	cmp	r3, #0
 802099e:	f47f aa6e 	bne.w	801fe7e <_dtoa_r+0x96>
 80209a2:	4b07      	ldr	r3, [pc, #28]	; (80209c0 <_dtoa_r+0xbd8>)
 80209a4:	f7ff ba8e 	b.w	801fec4 <_dtoa_r+0xdc>
 80209a8:	9b02      	ldr	r3, [sp, #8]
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	dcae      	bgt.n	802090c <_dtoa_r+0xb24>
 80209ae:	9b06      	ldr	r3, [sp, #24]
 80209b0:	2b02      	cmp	r3, #2
 80209b2:	f73f aea8 	bgt.w	8020706 <_dtoa_r+0x91e>
 80209b6:	e7a9      	b.n	802090c <_dtoa_r+0xb24>
 80209b8:	0802309c 	.word	0x0802309c
 80209bc:	08022f80 	.word	0x08022f80
 80209c0:	0802301d 	.word	0x0802301d

080209c4 <_fstat_r>:
 80209c4:	b538      	push	{r3, r4, r5, lr}
 80209c6:	4d07      	ldr	r5, [pc, #28]	; (80209e4 <_fstat_r+0x20>)
 80209c8:	2300      	movs	r3, #0
 80209ca:	4604      	mov	r4, r0
 80209cc:	4608      	mov	r0, r1
 80209ce:	4611      	mov	r1, r2
 80209d0:	602b      	str	r3, [r5, #0]
 80209d2:	f7fd f8a1 	bl	801db18 <_fstat>
 80209d6:	1c43      	adds	r3, r0, #1
 80209d8:	d102      	bne.n	80209e0 <_fstat_r+0x1c>
 80209da:	682b      	ldr	r3, [r5, #0]
 80209dc:	b103      	cbz	r3, 80209e0 <_fstat_r+0x1c>
 80209de:	6023      	str	r3, [r4, #0]
 80209e0:	bd38      	pop	{r3, r4, r5, pc}
 80209e2:	bf00      	nop
 80209e4:	20012cc0 	.word	0x20012cc0

080209e8 <rshift>:
 80209e8:	6903      	ldr	r3, [r0, #16]
 80209ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80209ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80209f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80209f6:	f100 0414 	add.w	r4, r0, #20
 80209fa:	dd45      	ble.n	8020a88 <rshift+0xa0>
 80209fc:	f011 011f 	ands.w	r1, r1, #31
 8020a00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8020a04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8020a08:	d10c      	bne.n	8020a24 <rshift+0x3c>
 8020a0a:	f100 0710 	add.w	r7, r0, #16
 8020a0e:	4629      	mov	r1, r5
 8020a10:	42b1      	cmp	r1, r6
 8020a12:	d334      	bcc.n	8020a7e <rshift+0x96>
 8020a14:	1a9b      	subs	r3, r3, r2
 8020a16:	009b      	lsls	r3, r3, #2
 8020a18:	1eea      	subs	r2, r5, #3
 8020a1a:	4296      	cmp	r6, r2
 8020a1c:	bf38      	it	cc
 8020a1e:	2300      	movcc	r3, #0
 8020a20:	4423      	add	r3, r4
 8020a22:	e015      	b.n	8020a50 <rshift+0x68>
 8020a24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8020a28:	f1c1 0820 	rsb	r8, r1, #32
 8020a2c:	40cf      	lsrs	r7, r1
 8020a2e:	f105 0e04 	add.w	lr, r5, #4
 8020a32:	46a1      	mov	r9, r4
 8020a34:	4576      	cmp	r6, lr
 8020a36:	46f4      	mov	ip, lr
 8020a38:	d815      	bhi.n	8020a66 <rshift+0x7e>
 8020a3a:	1a9a      	subs	r2, r3, r2
 8020a3c:	0092      	lsls	r2, r2, #2
 8020a3e:	3a04      	subs	r2, #4
 8020a40:	3501      	adds	r5, #1
 8020a42:	42ae      	cmp	r6, r5
 8020a44:	bf38      	it	cc
 8020a46:	2200      	movcc	r2, #0
 8020a48:	18a3      	adds	r3, r4, r2
 8020a4a:	50a7      	str	r7, [r4, r2]
 8020a4c:	b107      	cbz	r7, 8020a50 <rshift+0x68>
 8020a4e:	3304      	adds	r3, #4
 8020a50:	1b1a      	subs	r2, r3, r4
 8020a52:	42a3      	cmp	r3, r4
 8020a54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8020a58:	bf08      	it	eq
 8020a5a:	2300      	moveq	r3, #0
 8020a5c:	6102      	str	r2, [r0, #16]
 8020a5e:	bf08      	it	eq
 8020a60:	6143      	streq	r3, [r0, #20]
 8020a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020a66:	f8dc c000 	ldr.w	ip, [ip]
 8020a6a:	fa0c fc08 	lsl.w	ip, ip, r8
 8020a6e:	ea4c 0707 	orr.w	r7, ip, r7
 8020a72:	f849 7b04 	str.w	r7, [r9], #4
 8020a76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020a7a:	40cf      	lsrs	r7, r1
 8020a7c:	e7da      	b.n	8020a34 <rshift+0x4c>
 8020a7e:	f851 cb04 	ldr.w	ip, [r1], #4
 8020a82:	f847 cf04 	str.w	ip, [r7, #4]!
 8020a86:	e7c3      	b.n	8020a10 <rshift+0x28>
 8020a88:	4623      	mov	r3, r4
 8020a8a:	e7e1      	b.n	8020a50 <rshift+0x68>

08020a8c <__hexdig_fun>:
 8020a8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8020a90:	2b09      	cmp	r3, #9
 8020a92:	d802      	bhi.n	8020a9a <__hexdig_fun+0xe>
 8020a94:	3820      	subs	r0, #32
 8020a96:	b2c0      	uxtb	r0, r0
 8020a98:	4770      	bx	lr
 8020a9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8020a9e:	2b05      	cmp	r3, #5
 8020aa0:	d801      	bhi.n	8020aa6 <__hexdig_fun+0x1a>
 8020aa2:	3847      	subs	r0, #71	; 0x47
 8020aa4:	e7f7      	b.n	8020a96 <__hexdig_fun+0xa>
 8020aa6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8020aaa:	2b05      	cmp	r3, #5
 8020aac:	d801      	bhi.n	8020ab2 <__hexdig_fun+0x26>
 8020aae:	3827      	subs	r0, #39	; 0x27
 8020ab0:	e7f1      	b.n	8020a96 <__hexdig_fun+0xa>
 8020ab2:	2000      	movs	r0, #0
 8020ab4:	4770      	bx	lr
	...

08020ab8 <__gethex>:
 8020ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020abc:	ed2d 8b02 	vpush	{d8}
 8020ac0:	b089      	sub	sp, #36	; 0x24
 8020ac2:	ee08 0a10 	vmov	s16, r0
 8020ac6:	9304      	str	r3, [sp, #16]
 8020ac8:	4bb4      	ldr	r3, [pc, #720]	; (8020d9c <__gethex+0x2e4>)
 8020aca:	681b      	ldr	r3, [r3, #0]
 8020acc:	9301      	str	r3, [sp, #4]
 8020ace:	4618      	mov	r0, r3
 8020ad0:	468b      	mov	fp, r1
 8020ad2:	4690      	mov	r8, r2
 8020ad4:	f7df fb9e 	bl	8000214 <strlen>
 8020ad8:	9b01      	ldr	r3, [sp, #4]
 8020ada:	f8db 2000 	ldr.w	r2, [fp]
 8020ade:	4403      	add	r3, r0
 8020ae0:	4682      	mov	sl, r0
 8020ae2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8020ae6:	9305      	str	r3, [sp, #20]
 8020ae8:	1c93      	adds	r3, r2, #2
 8020aea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8020aee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8020af2:	32fe      	adds	r2, #254	; 0xfe
 8020af4:	18d1      	adds	r1, r2, r3
 8020af6:	461f      	mov	r7, r3
 8020af8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8020afc:	9100      	str	r1, [sp, #0]
 8020afe:	2830      	cmp	r0, #48	; 0x30
 8020b00:	d0f8      	beq.n	8020af4 <__gethex+0x3c>
 8020b02:	f7ff ffc3 	bl	8020a8c <__hexdig_fun>
 8020b06:	4604      	mov	r4, r0
 8020b08:	2800      	cmp	r0, #0
 8020b0a:	d13a      	bne.n	8020b82 <__gethex+0xca>
 8020b0c:	9901      	ldr	r1, [sp, #4]
 8020b0e:	4652      	mov	r2, sl
 8020b10:	4638      	mov	r0, r7
 8020b12:	f7fe f8d6 	bl	801ecc2 <strncmp>
 8020b16:	4605      	mov	r5, r0
 8020b18:	2800      	cmp	r0, #0
 8020b1a:	d168      	bne.n	8020bee <__gethex+0x136>
 8020b1c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8020b20:	eb07 060a 	add.w	r6, r7, sl
 8020b24:	f7ff ffb2 	bl	8020a8c <__hexdig_fun>
 8020b28:	2800      	cmp	r0, #0
 8020b2a:	d062      	beq.n	8020bf2 <__gethex+0x13a>
 8020b2c:	4633      	mov	r3, r6
 8020b2e:	7818      	ldrb	r0, [r3, #0]
 8020b30:	2830      	cmp	r0, #48	; 0x30
 8020b32:	461f      	mov	r7, r3
 8020b34:	f103 0301 	add.w	r3, r3, #1
 8020b38:	d0f9      	beq.n	8020b2e <__gethex+0x76>
 8020b3a:	f7ff ffa7 	bl	8020a8c <__hexdig_fun>
 8020b3e:	2301      	movs	r3, #1
 8020b40:	fab0 f480 	clz	r4, r0
 8020b44:	0964      	lsrs	r4, r4, #5
 8020b46:	4635      	mov	r5, r6
 8020b48:	9300      	str	r3, [sp, #0]
 8020b4a:	463a      	mov	r2, r7
 8020b4c:	4616      	mov	r6, r2
 8020b4e:	3201      	adds	r2, #1
 8020b50:	7830      	ldrb	r0, [r6, #0]
 8020b52:	f7ff ff9b 	bl	8020a8c <__hexdig_fun>
 8020b56:	2800      	cmp	r0, #0
 8020b58:	d1f8      	bne.n	8020b4c <__gethex+0x94>
 8020b5a:	9901      	ldr	r1, [sp, #4]
 8020b5c:	4652      	mov	r2, sl
 8020b5e:	4630      	mov	r0, r6
 8020b60:	f7fe f8af 	bl	801ecc2 <strncmp>
 8020b64:	b980      	cbnz	r0, 8020b88 <__gethex+0xd0>
 8020b66:	b94d      	cbnz	r5, 8020b7c <__gethex+0xc4>
 8020b68:	eb06 050a 	add.w	r5, r6, sl
 8020b6c:	462a      	mov	r2, r5
 8020b6e:	4616      	mov	r6, r2
 8020b70:	3201      	adds	r2, #1
 8020b72:	7830      	ldrb	r0, [r6, #0]
 8020b74:	f7ff ff8a 	bl	8020a8c <__hexdig_fun>
 8020b78:	2800      	cmp	r0, #0
 8020b7a:	d1f8      	bne.n	8020b6e <__gethex+0xb6>
 8020b7c:	1bad      	subs	r5, r5, r6
 8020b7e:	00ad      	lsls	r5, r5, #2
 8020b80:	e004      	b.n	8020b8c <__gethex+0xd4>
 8020b82:	2400      	movs	r4, #0
 8020b84:	4625      	mov	r5, r4
 8020b86:	e7e0      	b.n	8020b4a <__gethex+0x92>
 8020b88:	2d00      	cmp	r5, #0
 8020b8a:	d1f7      	bne.n	8020b7c <__gethex+0xc4>
 8020b8c:	7833      	ldrb	r3, [r6, #0]
 8020b8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8020b92:	2b50      	cmp	r3, #80	; 0x50
 8020b94:	d13b      	bne.n	8020c0e <__gethex+0x156>
 8020b96:	7873      	ldrb	r3, [r6, #1]
 8020b98:	2b2b      	cmp	r3, #43	; 0x2b
 8020b9a:	d02c      	beq.n	8020bf6 <__gethex+0x13e>
 8020b9c:	2b2d      	cmp	r3, #45	; 0x2d
 8020b9e:	d02e      	beq.n	8020bfe <__gethex+0x146>
 8020ba0:	1c71      	adds	r1, r6, #1
 8020ba2:	f04f 0900 	mov.w	r9, #0
 8020ba6:	7808      	ldrb	r0, [r1, #0]
 8020ba8:	f7ff ff70 	bl	8020a8c <__hexdig_fun>
 8020bac:	1e43      	subs	r3, r0, #1
 8020bae:	b2db      	uxtb	r3, r3
 8020bb0:	2b18      	cmp	r3, #24
 8020bb2:	d82c      	bhi.n	8020c0e <__gethex+0x156>
 8020bb4:	f1a0 0210 	sub.w	r2, r0, #16
 8020bb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020bbc:	f7ff ff66 	bl	8020a8c <__hexdig_fun>
 8020bc0:	1e43      	subs	r3, r0, #1
 8020bc2:	b2db      	uxtb	r3, r3
 8020bc4:	2b18      	cmp	r3, #24
 8020bc6:	d91d      	bls.n	8020c04 <__gethex+0x14c>
 8020bc8:	f1b9 0f00 	cmp.w	r9, #0
 8020bcc:	d000      	beq.n	8020bd0 <__gethex+0x118>
 8020bce:	4252      	negs	r2, r2
 8020bd0:	4415      	add	r5, r2
 8020bd2:	f8cb 1000 	str.w	r1, [fp]
 8020bd6:	b1e4      	cbz	r4, 8020c12 <__gethex+0x15a>
 8020bd8:	9b00      	ldr	r3, [sp, #0]
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	bf14      	ite	ne
 8020bde:	2700      	movne	r7, #0
 8020be0:	2706      	moveq	r7, #6
 8020be2:	4638      	mov	r0, r7
 8020be4:	b009      	add	sp, #36	; 0x24
 8020be6:	ecbd 8b02 	vpop	{d8}
 8020bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bee:	463e      	mov	r6, r7
 8020bf0:	4625      	mov	r5, r4
 8020bf2:	2401      	movs	r4, #1
 8020bf4:	e7ca      	b.n	8020b8c <__gethex+0xd4>
 8020bf6:	f04f 0900 	mov.w	r9, #0
 8020bfa:	1cb1      	adds	r1, r6, #2
 8020bfc:	e7d3      	b.n	8020ba6 <__gethex+0xee>
 8020bfe:	f04f 0901 	mov.w	r9, #1
 8020c02:	e7fa      	b.n	8020bfa <__gethex+0x142>
 8020c04:	230a      	movs	r3, #10
 8020c06:	fb03 0202 	mla	r2, r3, r2, r0
 8020c0a:	3a10      	subs	r2, #16
 8020c0c:	e7d4      	b.n	8020bb8 <__gethex+0x100>
 8020c0e:	4631      	mov	r1, r6
 8020c10:	e7df      	b.n	8020bd2 <__gethex+0x11a>
 8020c12:	1bf3      	subs	r3, r6, r7
 8020c14:	3b01      	subs	r3, #1
 8020c16:	4621      	mov	r1, r4
 8020c18:	2b07      	cmp	r3, #7
 8020c1a:	dc0b      	bgt.n	8020c34 <__gethex+0x17c>
 8020c1c:	ee18 0a10 	vmov	r0, s16
 8020c20:	f000 fa96 	bl	8021150 <_Balloc>
 8020c24:	4604      	mov	r4, r0
 8020c26:	b940      	cbnz	r0, 8020c3a <__gethex+0x182>
 8020c28:	4b5d      	ldr	r3, [pc, #372]	; (8020da0 <__gethex+0x2e8>)
 8020c2a:	4602      	mov	r2, r0
 8020c2c:	21de      	movs	r1, #222	; 0xde
 8020c2e:	485d      	ldr	r0, [pc, #372]	; (8020da4 <__gethex+0x2ec>)
 8020c30:	f001 f8d4 	bl	8021ddc <__assert_func>
 8020c34:	3101      	adds	r1, #1
 8020c36:	105b      	asrs	r3, r3, #1
 8020c38:	e7ee      	b.n	8020c18 <__gethex+0x160>
 8020c3a:	f100 0914 	add.w	r9, r0, #20
 8020c3e:	f04f 0b00 	mov.w	fp, #0
 8020c42:	f1ca 0301 	rsb	r3, sl, #1
 8020c46:	f8cd 9008 	str.w	r9, [sp, #8]
 8020c4a:	f8cd b000 	str.w	fp, [sp]
 8020c4e:	9306      	str	r3, [sp, #24]
 8020c50:	42b7      	cmp	r7, r6
 8020c52:	d340      	bcc.n	8020cd6 <__gethex+0x21e>
 8020c54:	9802      	ldr	r0, [sp, #8]
 8020c56:	9b00      	ldr	r3, [sp, #0]
 8020c58:	f840 3b04 	str.w	r3, [r0], #4
 8020c5c:	eba0 0009 	sub.w	r0, r0, r9
 8020c60:	1080      	asrs	r0, r0, #2
 8020c62:	0146      	lsls	r6, r0, #5
 8020c64:	6120      	str	r0, [r4, #16]
 8020c66:	4618      	mov	r0, r3
 8020c68:	f000 fb64 	bl	8021334 <__hi0bits>
 8020c6c:	1a30      	subs	r0, r6, r0
 8020c6e:	f8d8 6000 	ldr.w	r6, [r8]
 8020c72:	42b0      	cmp	r0, r6
 8020c74:	dd63      	ble.n	8020d3e <__gethex+0x286>
 8020c76:	1b87      	subs	r7, r0, r6
 8020c78:	4639      	mov	r1, r7
 8020c7a:	4620      	mov	r0, r4
 8020c7c:	f000 ff08 	bl	8021a90 <__any_on>
 8020c80:	4682      	mov	sl, r0
 8020c82:	b1a8      	cbz	r0, 8020cb0 <__gethex+0x1f8>
 8020c84:	1e7b      	subs	r3, r7, #1
 8020c86:	1159      	asrs	r1, r3, #5
 8020c88:	f003 021f 	and.w	r2, r3, #31
 8020c8c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8020c90:	f04f 0a01 	mov.w	sl, #1
 8020c94:	fa0a f202 	lsl.w	r2, sl, r2
 8020c98:	420a      	tst	r2, r1
 8020c9a:	d009      	beq.n	8020cb0 <__gethex+0x1f8>
 8020c9c:	4553      	cmp	r3, sl
 8020c9e:	dd05      	ble.n	8020cac <__gethex+0x1f4>
 8020ca0:	1eb9      	subs	r1, r7, #2
 8020ca2:	4620      	mov	r0, r4
 8020ca4:	f000 fef4 	bl	8021a90 <__any_on>
 8020ca8:	2800      	cmp	r0, #0
 8020caa:	d145      	bne.n	8020d38 <__gethex+0x280>
 8020cac:	f04f 0a02 	mov.w	sl, #2
 8020cb0:	4639      	mov	r1, r7
 8020cb2:	4620      	mov	r0, r4
 8020cb4:	f7ff fe98 	bl	80209e8 <rshift>
 8020cb8:	443d      	add	r5, r7
 8020cba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020cbe:	42ab      	cmp	r3, r5
 8020cc0:	da4c      	bge.n	8020d5c <__gethex+0x2a4>
 8020cc2:	ee18 0a10 	vmov	r0, s16
 8020cc6:	4621      	mov	r1, r4
 8020cc8:	f000 fa82 	bl	80211d0 <_Bfree>
 8020ccc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020cce:	2300      	movs	r3, #0
 8020cd0:	6013      	str	r3, [r2, #0]
 8020cd2:	27a3      	movs	r7, #163	; 0xa3
 8020cd4:	e785      	b.n	8020be2 <__gethex+0x12a>
 8020cd6:	1e73      	subs	r3, r6, #1
 8020cd8:	9a05      	ldr	r2, [sp, #20]
 8020cda:	9303      	str	r3, [sp, #12]
 8020cdc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8020ce0:	4293      	cmp	r3, r2
 8020ce2:	d019      	beq.n	8020d18 <__gethex+0x260>
 8020ce4:	f1bb 0f20 	cmp.w	fp, #32
 8020ce8:	d107      	bne.n	8020cfa <__gethex+0x242>
 8020cea:	9b02      	ldr	r3, [sp, #8]
 8020cec:	9a00      	ldr	r2, [sp, #0]
 8020cee:	f843 2b04 	str.w	r2, [r3], #4
 8020cf2:	9302      	str	r3, [sp, #8]
 8020cf4:	2300      	movs	r3, #0
 8020cf6:	9300      	str	r3, [sp, #0]
 8020cf8:	469b      	mov	fp, r3
 8020cfa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8020cfe:	f7ff fec5 	bl	8020a8c <__hexdig_fun>
 8020d02:	9b00      	ldr	r3, [sp, #0]
 8020d04:	f000 000f 	and.w	r0, r0, #15
 8020d08:	fa00 f00b 	lsl.w	r0, r0, fp
 8020d0c:	4303      	orrs	r3, r0
 8020d0e:	9300      	str	r3, [sp, #0]
 8020d10:	f10b 0b04 	add.w	fp, fp, #4
 8020d14:	9b03      	ldr	r3, [sp, #12]
 8020d16:	e00d      	b.n	8020d34 <__gethex+0x27c>
 8020d18:	9b03      	ldr	r3, [sp, #12]
 8020d1a:	9a06      	ldr	r2, [sp, #24]
 8020d1c:	4413      	add	r3, r2
 8020d1e:	42bb      	cmp	r3, r7
 8020d20:	d3e0      	bcc.n	8020ce4 <__gethex+0x22c>
 8020d22:	4618      	mov	r0, r3
 8020d24:	9901      	ldr	r1, [sp, #4]
 8020d26:	9307      	str	r3, [sp, #28]
 8020d28:	4652      	mov	r2, sl
 8020d2a:	f7fd ffca 	bl	801ecc2 <strncmp>
 8020d2e:	9b07      	ldr	r3, [sp, #28]
 8020d30:	2800      	cmp	r0, #0
 8020d32:	d1d7      	bne.n	8020ce4 <__gethex+0x22c>
 8020d34:	461e      	mov	r6, r3
 8020d36:	e78b      	b.n	8020c50 <__gethex+0x198>
 8020d38:	f04f 0a03 	mov.w	sl, #3
 8020d3c:	e7b8      	b.n	8020cb0 <__gethex+0x1f8>
 8020d3e:	da0a      	bge.n	8020d56 <__gethex+0x29e>
 8020d40:	1a37      	subs	r7, r6, r0
 8020d42:	4621      	mov	r1, r4
 8020d44:	ee18 0a10 	vmov	r0, s16
 8020d48:	463a      	mov	r2, r7
 8020d4a:	f000 fc5d 	bl	8021608 <__lshift>
 8020d4e:	1bed      	subs	r5, r5, r7
 8020d50:	4604      	mov	r4, r0
 8020d52:	f100 0914 	add.w	r9, r0, #20
 8020d56:	f04f 0a00 	mov.w	sl, #0
 8020d5a:	e7ae      	b.n	8020cba <__gethex+0x202>
 8020d5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8020d60:	42a8      	cmp	r0, r5
 8020d62:	dd72      	ble.n	8020e4a <__gethex+0x392>
 8020d64:	1b45      	subs	r5, r0, r5
 8020d66:	42ae      	cmp	r6, r5
 8020d68:	dc36      	bgt.n	8020dd8 <__gethex+0x320>
 8020d6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020d6e:	2b02      	cmp	r3, #2
 8020d70:	d02a      	beq.n	8020dc8 <__gethex+0x310>
 8020d72:	2b03      	cmp	r3, #3
 8020d74:	d02c      	beq.n	8020dd0 <__gethex+0x318>
 8020d76:	2b01      	cmp	r3, #1
 8020d78:	d11c      	bne.n	8020db4 <__gethex+0x2fc>
 8020d7a:	42ae      	cmp	r6, r5
 8020d7c:	d11a      	bne.n	8020db4 <__gethex+0x2fc>
 8020d7e:	2e01      	cmp	r6, #1
 8020d80:	d112      	bne.n	8020da8 <__gethex+0x2f0>
 8020d82:	9a04      	ldr	r2, [sp, #16]
 8020d84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8020d88:	6013      	str	r3, [r2, #0]
 8020d8a:	2301      	movs	r3, #1
 8020d8c:	6123      	str	r3, [r4, #16]
 8020d8e:	f8c9 3000 	str.w	r3, [r9]
 8020d92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020d94:	2762      	movs	r7, #98	; 0x62
 8020d96:	601c      	str	r4, [r3, #0]
 8020d98:	e723      	b.n	8020be2 <__gethex+0x12a>
 8020d9a:	bf00      	nop
 8020d9c:	08023114 	.word	0x08023114
 8020da0:	0802309c 	.word	0x0802309c
 8020da4:	080230ad 	.word	0x080230ad
 8020da8:	1e71      	subs	r1, r6, #1
 8020daa:	4620      	mov	r0, r4
 8020dac:	f000 fe70 	bl	8021a90 <__any_on>
 8020db0:	2800      	cmp	r0, #0
 8020db2:	d1e6      	bne.n	8020d82 <__gethex+0x2ca>
 8020db4:	ee18 0a10 	vmov	r0, s16
 8020db8:	4621      	mov	r1, r4
 8020dba:	f000 fa09 	bl	80211d0 <_Bfree>
 8020dbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020dc0:	2300      	movs	r3, #0
 8020dc2:	6013      	str	r3, [r2, #0]
 8020dc4:	2750      	movs	r7, #80	; 0x50
 8020dc6:	e70c      	b.n	8020be2 <__gethex+0x12a>
 8020dc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020dca:	2b00      	cmp	r3, #0
 8020dcc:	d1f2      	bne.n	8020db4 <__gethex+0x2fc>
 8020dce:	e7d8      	b.n	8020d82 <__gethex+0x2ca>
 8020dd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	d1d5      	bne.n	8020d82 <__gethex+0x2ca>
 8020dd6:	e7ed      	b.n	8020db4 <__gethex+0x2fc>
 8020dd8:	1e6f      	subs	r7, r5, #1
 8020dda:	f1ba 0f00 	cmp.w	sl, #0
 8020dde:	d131      	bne.n	8020e44 <__gethex+0x38c>
 8020de0:	b127      	cbz	r7, 8020dec <__gethex+0x334>
 8020de2:	4639      	mov	r1, r7
 8020de4:	4620      	mov	r0, r4
 8020de6:	f000 fe53 	bl	8021a90 <__any_on>
 8020dea:	4682      	mov	sl, r0
 8020dec:	117b      	asrs	r3, r7, #5
 8020dee:	2101      	movs	r1, #1
 8020df0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8020df4:	f007 071f 	and.w	r7, r7, #31
 8020df8:	fa01 f707 	lsl.w	r7, r1, r7
 8020dfc:	421f      	tst	r7, r3
 8020dfe:	4629      	mov	r1, r5
 8020e00:	4620      	mov	r0, r4
 8020e02:	bf18      	it	ne
 8020e04:	f04a 0a02 	orrne.w	sl, sl, #2
 8020e08:	1b76      	subs	r6, r6, r5
 8020e0a:	f7ff fded 	bl	80209e8 <rshift>
 8020e0e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020e12:	2702      	movs	r7, #2
 8020e14:	f1ba 0f00 	cmp.w	sl, #0
 8020e18:	d048      	beq.n	8020eac <__gethex+0x3f4>
 8020e1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8020e1e:	2b02      	cmp	r3, #2
 8020e20:	d015      	beq.n	8020e4e <__gethex+0x396>
 8020e22:	2b03      	cmp	r3, #3
 8020e24:	d017      	beq.n	8020e56 <__gethex+0x39e>
 8020e26:	2b01      	cmp	r3, #1
 8020e28:	d109      	bne.n	8020e3e <__gethex+0x386>
 8020e2a:	f01a 0f02 	tst.w	sl, #2
 8020e2e:	d006      	beq.n	8020e3e <__gethex+0x386>
 8020e30:	f8d9 0000 	ldr.w	r0, [r9]
 8020e34:	ea4a 0a00 	orr.w	sl, sl, r0
 8020e38:	f01a 0f01 	tst.w	sl, #1
 8020e3c:	d10e      	bne.n	8020e5c <__gethex+0x3a4>
 8020e3e:	f047 0710 	orr.w	r7, r7, #16
 8020e42:	e033      	b.n	8020eac <__gethex+0x3f4>
 8020e44:	f04f 0a01 	mov.w	sl, #1
 8020e48:	e7d0      	b.n	8020dec <__gethex+0x334>
 8020e4a:	2701      	movs	r7, #1
 8020e4c:	e7e2      	b.n	8020e14 <__gethex+0x35c>
 8020e4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020e50:	f1c3 0301 	rsb	r3, r3, #1
 8020e54:	9315      	str	r3, [sp, #84]	; 0x54
 8020e56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020e58:	2b00      	cmp	r3, #0
 8020e5a:	d0f0      	beq.n	8020e3e <__gethex+0x386>
 8020e5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8020e60:	f104 0314 	add.w	r3, r4, #20
 8020e64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8020e68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8020e6c:	f04f 0c00 	mov.w	ip, #0
 8020e70:	4618      	mov	r0, r3
 8020e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8020e76:	f1b2 3fff 	cmp.w	r2, #4294967295
 8020e7a:	d01c      	beq.n	8020eb6 <__gethex+0x3fe>
 8020e7c:	3201      	adds	r2, #1
 8020e7e:	6002      	str	r2, [r0, #0]
 8020e80:	2f02      	cmp	r7, #2
 8020e82:	f104 0314 	add.w	r3, r4, #20
 8020e86:	d13f      	bne.n	8020f08 <__gethex+0x450>
 8020e88:	f8d8 2000 	ldr.w	r2, [r8]
 8020e8c:	3a01      	subs	r2, #1
 8020e8e:	42b2      	cmp	r2, r6
 8020e90:	d10a      	bne.n	8020ea8 <__gethex+0x3f0>
 8020e92:	1171      	asrs	r1, r6, #5
 8020e94:	2201      	movs	r2, #1
 8020e96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8020e9a:	f006 061f 	and.w	r6, r6, #31
 8020e9e:	fa02 f606 	lsl.w	r6, r2, r6
 8020ea2:	421e      	tst	r6, r3
 8020ea4:	bf18      	it	ne
 8020ea6:	4617      	movne	r7, r2
 8020ea8:	f047 0720 	orr.w	r7, r7, #32
 8020eac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020eae:	601c      	str	r4, [r3, #0]
 8020eb0:	9b04      	ldr	r3, [sp, #16]
 8020eb2:	601d      	str	r5, [r3, #0]
 8020eb4:	e695      	b.n	8020be2 <__gethex+0x12a>
 8020eb6:	4299      	cmp	r1, r3
 8020eb8:	f843 cc04 	str.w	ip, [r3, #-4]
 8020ebc:	d8d8      	bhi.n	8020e70 <__gethex+0x3b8>
 8020ebe:	68a3      	ldr	r3, [r4, #8]
 8020ec0:	459b      	cmp	fp, r3
 8020ec2:	db19      	blt.n	8020ef8 <__gethex+0x440>
 8020ec4:	6861      	ldr	r1, [r4, #4]
 8020ec6:	ee18 0a10 	vmov	r0, s16
 8020eca:	3101      	adds	r1, #1
 8020ecc:	f000 f940 	bl	8021150 <_Balloc>
 8020ed0:	4681      	mov	r9, r0
 8020ed2:	b918      	cbnz	r0, 8020edc <__gethex+0x424>
 8020ed4:	4b1a      	ldr	r3, [pc, #104]	; (8020f40 <__gethex+0x488>)
 8020ed6:	4602      	mov	r2, r0
 8020ed8:	2184      	movs	r1, #132	; 0x84
 8020eda:	e6a8      	b.n	8020c2e <__gethex+0x176>
 8020edc:	6922      	ldr	r2, [r4, #16]
 8020ede:	3202      	adds	r2, #2
 8020ee0:	f104 010c 	add.w	r1, r4, #12
 8020ee4:	0092      	lsls	r2, r2, #2
 8020ee6:	300c      	adds	r0, #12
 8020ee8:	f7fd f8cc 	bl	801e084 <memcpy>
 8020eec:	4621      	mov	r1, r4
 8020eee:	ee18 0a10 	vmov	r0, s16
 8020ef2:	f000 f96d 	bl	80211d0 <_Bfree>
 8020ef6:	464c      	mov	r4, r9
 8020ef8:	6923      	ldr	r3, [r4, #16]
 8020efa:	1c5a      	adds	r2, r3, #1
 8020efc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8020f00:	6122      	str	r2, [r4, #16]
 8020f02:	2201      	movs	r2, #1
 8020f04:	615a      	str	r2, [r3, #20]
 8020f06:	e7bb      	b.n	8020e80 <__gethex+0x3c8>
 8020f08:	6922      	ldr	r2, [r4, #16]
 8020f0a:	455a      	cmp	r2, fp
 8020f0c:	dd0b      	ble.n	8020f26 <__gethex+0x46e>
 8020f0e:	2101      	movs	r1, #1
 8020f10:	4620      	mov	r0, r4
 8020f12:	f7ff fd69 	bl	80209e8 <rshift>
 8020f16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020f1a:	3501      	adds	r5, #1
 8020f1c:	42ab      	cmp	r3, r5
 8020f1e:	f6ff aed0 	blt.w	8020cc2 <__gethex+0x20a>
 8020f22:	2701      	movs	r7, #1
 8020f24:	e7c0      	b.n	8020ea8 <__gethex+0x3f0>
 8020f26:	f016 061f 	ands.w	r6, r6, #31
 8020f2a:	d0fa      	beq.n	8020f22 <__gethex+0x46a>
 8020f2c:	4453      	add	r3, sl
 8020f2e:	f1c6 0620 	rsb	r6, r6, #32
 8020f32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8020f36:	f000 f9fd 	bl	8021334 <__hi0bits>
 8020f3a:	42b0      	cmp	r0, r6
 8020f3c:	dbe7      	blt.n	8020f0e <__gethex+0x456>
 8020f3e:	e7f0      	b.n	8020f22 <__gethex+0x46a>
 8020f40:	0802309c 	.word	0x0802309c

08020f44 <L_shift>:
 8020f44:	f1c2 0208 	rsb	r2, r2, #8
 8020f48:	0092      	lsls	r2, r2, #2
 8020f4a:	b570      	push	{r4, r5, r6, lr}
 8020f4c:	f1c2 0620 	rsb	r6, r2, #32
 8020f50:	6843      	ldr	r3, [r0, #4]
 8020f52:	6804      	ldr	r4, [r0, #0]
 8020f54:	fa03 f506 	lsl.w	r5, r3, r6
 8020f58:	432c      	orrs	r4, r5
 8020f5a:	40d3      	lsrs	r3, r2
 8020f5c:	6004      	str	r4, [r0, #0]
 8020f5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8020f62:	4288      	cmp	r0, r1
 8020f64:	d3f4      	bcc.n	8020f50 <L_shift+0xc>
 8020f66:	bd70      	pop	{r4, r5, r6, pc}

08020f68 <__match>:
 8020f68:	b530      	push	{r4, r5, lr}
 8020f6a:	6803      	ldr	r3, [r0, #0]
 8020f6c:	3301      	adds	r3, #1
 8020f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020f72:	b914      	cbnz	r4, 8020f7a <__match+0x12>
 8020f74:	6003      	str	r3, [r0, #0]
 8020f76:	2001      	movs	r0, #1
 8020f78:	bd30      	pop	{r4, r5, pc}
 8020f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020f7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8020f82:	2d19      	cmp	r5, #25
 8020f84:	bf98      	it	ls
 8020f86:	3220      	addls	r2, #32
 8020f88:	42a2      	cmp	r2, r4
 8020f8a:	d0f0      	beq.n	8020f6e <__match+0x6>
 8020f8c:	2000      	movs	r0, #0
 8020f8e:	e7f3      	b.n	8020f78 <__match+0x10>

08020f90 <__hexnan>:
 8020f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f94:	680b      	ldr	r3, [r1, #0]
 8020f96:	115e      	asrs	r6, r3, #5
 8020f98:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8020f9c:	f013 031f 	ands.w	r3, r3, #31
 8020fa0:	b087      	sub	sp, #28
 8020fa2:	bf18      	it	ne
 8020fa4:	3604      	addne	r6, #4
 8020fa6:	2500      	movs	r5, #0
 8020fa8:	1f37      	subs	r7, r6, #4
 8020faa:	4690      	mov	r8, r2
 8020fac:	6802      	ldr	r2, [r0, #0]
 8020fae:	9301      	str	r3, [sp, #4]
 8020fb0:	4682      	mov	sl, r0
 8020fb2:	f846 5c04 	str.w	r5, [r6, #-4]
 8020fb6:	46b9      	mov	r9, r7
 8020fb8:	463c      	mov	r4, r7
 8020fba:	9502      	str	r5, [sp, #8]
 8020fbc:	46ab      	mov	fp, r5
 8020fbe:	7851      	ldrb	r1, [r2, #1]
 8020fc0:	1c53      	adds	r3, r2, #1
 8020fc2:	9303      	str	r3, [sp, #12]
 8020fc4:	b341      	cbz	r1, 8021018 <__hexnan+0x88>
 8020fc6:	4608      	mov	r0, r1
 8020fc8:	9205      	str	r2, [sp, #20]
 8020fca:	9104      	str	r1, [sp, #16]
 8020fcc:	f7ff fd5e 	bl	8020a8c <__hexdig_fun>
 8020fd0:	2800      	cmp	r0, #0
 8020fd2:	d14f      	bne.n	8021074 <__hexnan+0xe4>
 8020fd4:	9904      	ldr	r1, [sp, #16]
 8020fd6:	9a05      	ldr	r2, [sp, #20]
 8020fd8:	2920      	cmp	r1, #32
 8020fda:	d818      	bhi.n	802100e <__hexnan+0x7e>
 8020fdc:	9b02      	ldr	r3, [sp, #8]
 8020fde:	459b      	cmp	fp, r3
 8020fe0:	dd13      	ble.n	802100a <__hexnan+0x7a>
 8020fe2:	454c      	cmp	r4, r9
 8020fe4:	d206      	bcs.n	8020ff4 <__hexnan+0x64>
 8020fe6:	2d07      	cmp	r5, #7
 8020fe8:	dc04      	bgt.n	8020ff4 <__hexnan+0x64>
 8020fea:	462a      	mov	r2, r5
 8020fec:	4649      	mov	r1, r9
 8020fee:	4620      	mov	r0, r4
 8020ff0:	f7ff ffa8 	bl	8020f44 <L_shift>
 8020ff4:	4544      	cmp	r4, r8
 8020ff6:	d950      	bls.n	802109a <__hexnan+0x10a>
 8020ff8:	2300      	movs	r3, #0
 8020ffa:	f1a4 0904 	sub.w	r9, r4, #4
 8020ffe:	f844 3c04 	str.w	r3, [r4, #-4]
 8021002:	f8cd b008 	str.w	fp, [sp, #8]
 8021006:	464c      	mov	r4, r9
 8021008:	461d      	mov	r5, r3
 802100a:	9a03      	ldr	r2, [sp, #12]
 802100c:	e7d7      	b.n	8020fbe <__hexnan+0x2e>
 802100e:	2929      	cmp	r1, #41	; 0x29
 8021010:	d156      	bne.n	80210c0 <__hexnan+0x130>
 8021012:	3202      	adds	r2, #2
 8021014:	f8ca 2000 	str.w	r2, [sl]
 8021018:	f1bb 0f00 	cmp.w	fp, #0
 802101c:	d050      	beq.n	80210c0 <__hexnan+0x130>
 802101e:	454c      	cmp	r4, r9
 8021020:	d206      	bcs.n	8021030 <__hexnan+0xa0>
 8021022:	2d07      	cmp	r5, #7
 8021024:	dc04      	bgt.n	8021030 <__hexnan+0xa0>
 8021026:	462a      	mov	r2, r5
 8021028:	4649      	mov	r1, r9
 802102a:	4620      	mov	r0, r4
 802102c:	f7ff ff8a 	bl	8020f44 <L_shift>
 8021030:	4544      	cmp	r4, r8
 8021032:	d934      	bls.n	802109e <__hexnan+0x10e>
 8021034:	f1a8 0204 	sub.w	r2, r8, #4
 8021038:	4623      	mov	r3, r4
 802103a:	f853 1b04 	ldr.w	r1, [r3], #4
 802103e:	f842 1f04 	str.w	r1, [r2, #4]!
 8021042:	429f      	cmp	r7, r3
 8021044:	d2f9      	bcs.n	802103a <__hexnan+0xaa>
 8021046:	1b3b      	subs	r3, r7, r4
 8021048:	f023 0303 	bic.w	r3, r3, #3
 802104c:	3304      	adds	r3, #4
 802104e:	3401      	adds	r4, #1
 8021050:	3e03      	subs	r6, #3
 8021052:	42b4      	cmp	r4, r6
 8021054:	bf88      	it	hi
 8021056:	2304      	movhi	r3, #4
 8021058:	4443      	add	r3, r8
 802105a:	2200      	movs	r2, #0
 802105c:	f843 2b04 	str.w	r2, [r3], #4
 8021060:	429f      	cmp	r7, r3
 8021062:	d2fb      	bcs.n	802105c <__hexnan+0xcc>
 8021064:	683b      	ldr	r3, [r7, #0]
 8021066:	b91b      	cbnz	r3, 8021070 <__hexnan+0xe0>
 8021068:	4547      	cmp	r7, r8
 802106a:	d127      	bne.n	80210bc <__hexnan+0x12c>
 802106c:	2301      	movs	r3, #1
 802106e:	603b      	str	r3, [r7, #0]
 8021070:	2005      	movs	r0, #5
 8021072:	e026      	b.n	80210c2 <__hexnan+0x132>
 8021074:	3501      	adds	r5, #1
 8021076:	2d08      	cmp	r5, #8
 8021078:	f10b 0b01 	add.w	fp, fp, #1
 802107c:	dd06      	ble.n	802108c <__hexnan+0xfc>
 802107e:	4544      	cmp	r4, r8
 8021080:	d9c3      	bls.n	802100a <__hexnan+0x7a>
 8021082:	2300      	movs	r3, #0
 8021084:	f844 3c04 	str.w	r3, [r4, #-4]
 8021088:	2501      	movs	r5, #1
 802108a:	3c04      	subs	r4, #4
 802108c:	6822      	ldr	r2, [r4, #0]
 802108e:	f000 000f 	and.w	r0, r0, #15
 8021092:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8021096:	6022      	str	r2, [r4, #0]
 8021098:	e7b7      	b.n	802100a <__hexnan+0x7a>
 802109a:	2508      	movs	r5, #8
 802109c:	e7b5      	b.n	802100a <__hexnan+0x7a>
 802109e:	9b01      	ldr	r3, [sp, #4]
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	d0df      	beq.n	8021064 <__hexnan+0xd4>
 80210a4:	f04f 32ff 	mov.w	r2, #4294967295
 80210a8:	f1c3 0320 	rsb	r3, r3, #32
 80210ac:	fa22 f303 	lsr.w	r3, r2, r3
 80210b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80210b4:	401a      	ands	r2, r3
 80210b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80210ba:	e7d3      	b.n	8021064 <__hexnan+0xd4>
 80210bc:	3f04      	subs	r7, #4
 80210be:	e7d1      	b.n	8021064 <__hexnan+0xd4>
 80210c0:	2004      	movs	r0, #4
 80210c2:	b007      	add	sp, #28
 80210c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080210c8 <_isatty_r>:
 80210c8:	b538      	push	{r3, r4, r5, lr}
 80210ca:	4d06      	ldr	r5, [pc, #24]	; (80210e4 <_isatty_r+0x1c>)
 80210cc:	2300      	movs	r3, #0
 80210ce:	4604      	mov	r4, r0
 80210d0:	4608      	mov	r0, r1
 80210d2:	602b      	str	r3, [r5, #0]
 80210d4:	f7fc fd30 	bl	801db38 <_isatty>
 80210d8:	1c43      	adds	r3, r0, #1
 80210da:	d102      	bne.n	80210e2 <_isatty_r+0x1a>
 80210dc:	682b      	ldr	r3, [r5, #0]
 80210de:	b103      	cbz	r3, 80210e2 <_isatty_r+0x1a>
 80210e0:	6023      	str	r3, [r4, #0]
 80210e2:	bd38      	pop	{r3, r4, r5, pc}
 80210e4:	20012cc0 	.word	0x20012cc0

080210e8 <_localeconv_r>:
 80210e8:	4800      	ldr	r0, [pc, #0]	; (80210ec <_localeconv_r+0x4>)
 80210ea:	4770      	bx	lr
 80210ec:	200001e4 	.word	0x200001e4

080210f0 <_lseek_r>:
 80210f0:	b538      	push	{r3, r4, r5, lr}
 80210f2:	4d07      	ldr	r5, [pc, #28]	; (8021110 <_lseek_r+0x20>)
 80210f4:	4604      	mov	r4, r0
 80210f6:	4608      	mov	r0, r1
 80210f8:	4611      	mov	r1, r2
 80210fa:	2200      	movs	r2, #0
 80210fc:	602a      	str	r2, [r5, #0]
 80210fe:	461a      	mov	r2, r3
 8021100:	f7fc fd25 	bl	801db4e <_lseek>
 8021104:	1c43      	adds	r3, r0, #1
 8021106:	d102      	bne.n	802110e <_lseek_r+0x1e>
 8021108:	682b      	ldr	r3, [r5, #0]
 802110a:	b103      	cbz	r3, 802110e <_lseek_r+0x1e>
 802110c:	6023      	str	r3, [r4, #0]
 802110e:	bd38      	pop	{r3, r4, r5, pc}
 8021110:	20012cc0 	.word	0x20012cc0

08021114 <__ascii_mbtowc>:
 8021114:	b082      	sub	sp, #8
 8021116:	b901      	cbnz	r1, 802111a <__ascii_mbtowc+0x6>
 8021118:	a901      	add	r1, sp, #4
 802111a:	b142      	cbz	r2, 802112e <__ascii_mbtowc+0x1a>
 802111c:	b14b      	cbz	r3, 8021132 <__ascii_mbtowc+0x1e>
 802111e:	7813      	ldrb	r3, [r2, #0]
 8021120:	600b      	str	r3, [r1, #0]
 8021122:	7812      	ldrb	r2, [r2, #0]
 8021124:	1e10      	subs	r0, r2, #0
 8021126:	bf18      	it	ne
 8021128:	2001      	movne	r0, #1
 802112a:	b002      	add	sp, #8
 802112c:	4770      	bx	lr
 802112e:	4610      	mov	r0, r2
 8021130:	e7fb      	b.n	802112a <__ascii_mbtowc+0x16>
 8021132:	f06f 0001 	mvn.w	r0, #1
 8021136:	e7f8      	b.n	802112a <__ascii_mbtowc+0x16>

08021138 <__malloc_lock>:
 8021138:	4801      	ldr	r0, [pc, #4]	; (8021140 <__malloc_lock+0x8>)
 802113a:	f7fc bf2c 	b.w	801df96 <__retarget_lock_acquire_recursive>
 802113e:	bf00      	nop
 8021140:	20012cb4 	.word	0x20012cb4

08021144 <__malloc_unlock>:
 8021144:	4801      	ldr	r0, [pc, #4]	; (802114c <__malloc_unlock+0x8>)
 8021146:	f7fc bf27 	b.w	801df98 <__retarget_lock_release_recursive>
 802114a:	bf00      	nop
 802114c:	20012cb4 	.word	0x20012cb4

08021150 <_Balloc>:
 8021150:	b570      	push	{r4, r5, r6, lr}
 8021152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021154:	4604      	mov	r4, r0
 8021156:	460d      	mov	r5, r1
 8021158:	b976      	cbnz	r6, 8021178 <_Balloc+0x28>
 802115a:	2010      	movs	r0, #16
 802115c:	f7fc ff82 	bl	801e064 <malloc>
 8021160:	4602      	mov	r2, r0
 8021162:	6260      	str	r0, [r4, #36]	; 0x24
 8021164:	b920      	cbnz	r0, 8021170 <_Balloc+0x20>
 8021166:	4b18      	ldr	r3, [pc, #96]	; (80211c8 <_Balloc+0x78>)
 8021168:	4818      	ldr	r0, [pc, #96]	; (80211cc <_Balloc+0x7c>)
 802116a:	2166      	movs	r1, #102	; 0x66
 802116c:	f000 fe36 	bl	8021ddc <__assert_func>
 8021170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021174:	6006      	str	r6, [r0, #0]
 8021176:	60c6      	str	r6, [r0, #12]
 8021178:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802117a:	68f3      	ldr	r3, [r6, #12]
 802117c:	b183      	cbz	r3, 80211a0 <_Balloc+0x50>
 802117e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021180:	68db      	ldr	r3, [r3, #12]
 8021182:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021186:	b9b8      	cbnz	r0, 80211b8 <_Balloc+0x68>
 8021188:	2101      	movs	r1, #1
 802118a:	fa01 f605 	lsl.w	r6, r1, r5
 802118e:	1d72      	adds	r2, r6, #5
 8021190:	0092      	lsls	r2, r2, #2
 8021192:	4620      	mov	r0, r4
 8021194:	f7fc ffa6 	bl	801e0e4 <_calloc_r>
 8021198:	b160      	cbz	r0, 80211b4 <_Balloc+0x64>
 802119a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802119e:	e00e      	b.n	80211be <_Balloc+0x6e>
 80211a0:	2221      	movs	r2, #33	; 0x21
 80211a2:	2104      	movs	r1, #4
 80211a4:	4620      	mov	r0, r4
 80211a6:	f7fc ff9d 	bl	801e0e4 <_calloc_r>
 80211aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80211ac:	60f0      	str	r0, [r6, #12]
 80211ae:	68db      	ldr	r3, [r3, #12]
 80211b0:	2b00      	cmp	r3, #0
 80211b2:	d1e4      	bne.n	802117e <_Balloc+0x2e>
 80211b4:	2000      	movs	r0, #0
 80211b6:	bd70      	pop	{r4, r5, r6, pc}
 80211b8:	6802      	ldr	r2, [r0, #0]
 80211ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80211be:	2300      	movs	r3, #0
 80211c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80211c4:	e7f7      	b.n	80211b6 <_Balloc+0x66>
 80211c6:	bf00      	nop
 80211c8:	0802302a 	.word	0x0802302a
 80211cc:	08023128 	.word	0x08023128

080211d0 <_Bfree>:
 80211d0:	b570      	push	{r4, r5, r6, lr}
 80211d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80211d4:	4605      	mov	r5, r0
 80211d6:	460c      	mov	r4, r1
 80211d8:	b976      	cbnz	r6, 80211f8 <_Bfree+0x28>
 80211da:	2010      	movs	r0, #16
 80211dc:	f7fc ff42 	bl	801e064 <malloc>
 80211e0:	4602      	mov	r2, r0
 80211e2:	6268      	str	r0, [r5, #36]	; 0x24
 80211e4:	b920      	cbnz	r0, 80211f0 <_Bfree+0x20>
 80211e6:	4b09      	ldr	r3, [pc, #36]	; (802120c <_Bfree+0x3c>)
 80211e8:	4809      	ldr	r0, [pc, #36]	; (8021210 <_Bfree+0x40>)
 80211ea:	218a      	movs	r1, #138	; 0x8a
 80211ec:	f000 fdf6 	bl	8021ddc <__assert_func>
 80211f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80211f4:	6006      	str	r6, [r0, #0]
 80211f6:	60c6      	str	r6, [r0, #12]
 80211f8:	b13c      	cbz	r4, 802120a <_Bfree+0x3a>
 80211fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80211fc:	6862      	ldr	r2, [r4, #4]
 80211fe:	68db      	ldr	r3, [r3, #12]
 8021200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021204:	6021      	str	r1, [r4, #0]
 8021206:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802120a:	bd70      	pop	{r4, r5, r6, pc}
 802120c:	0802302a 	.word	0x0802302a
 8021210:	08023128 	.word	0x08023128

08021214 <__multadd>:
 8021214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021218:	690d      	ldr	r5, [r1, #16]
 802121a:	4607      	mov	r7, r0
 802121c:	460c      	mov	r4, r1
 802121e:	461e      	mov	r6, r3
 8021220:	f101 0c14 	add.w	ip, r1, #20
 8021224:	2000      	movs	r0, #0
 8021226:	f8dc 3000 	ldr.w	r3, [ip]
 802122a:	b299      	uxth	r1, r3
 802122c:	fb02 6101 	mla	r1, r2, r1, r6
 8021230:	0c1e      	lsrs	r6, r3, #16
 8021232:	0c0b      	lsrs	r3, r1, #16
 8021234:	fb02 3306 	mla	r3, r2, r6, r3
 8021238:	b289      	uxth	r1, r1
 802123a:	3001      	adds	r0, #1
 802123c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021240:	4285      	cmp	r5, r0
 8021242:	f84c 1b04 	str.w	r1, [ip], #4
 8021246:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802124a:	dcec      	bgt.n	8021226 <__multadd+0x12>
 802124c:	b30e      	cbz	r6, 8021292 <__multadd+0x7e>
 802124e:	68a3      	ldr	r3, [r4, #8]
 8021250:	42ab      	cmp	r3, r5
 8021252:	dc19      	bgt.n	8021288 <__multadd+0x74>
 8021254:	6861      	ldr	r1, [r4, #4]
 8021256:	4638      	mov	r0, r7
 8021258:	3101      	adds	r1, #1
 802125a:	f7ff ff79 	bl	8021150 <_Balloc>
 802125e:	4680      	mov	r8, r0
 8021260:	b928      	cbnz	r0, 802126e <__multadd+0x5a>
 8021262:	4602      	mov	r2, r0
 8021264:	4b0c      	ldr	r3, [pc, #48]	; (8021298 <__multadd+0x84>)
 8021266:	480d      	ldr	r0, [pc, #52]	; (802129c <__multadd+0x88>)
 8021268:	21b5      	movs	r1, #181	; 0xb5
 802126a:	f000 fdb7 	bl	8021ddc <__assert_func>
 802126e:	6922      	ldr	r2, [r4, #16]
 8021270:	3202      	adds	r2, #2
 8021272:	f104 010c 	add.w	r1, r4, #12
 8021276:	0092      	lsls	r2, r2, #2
 8021278:	300c      	adds	r0, #12
 802127a:	f7fc ff03 	bl	801e084 <memcpy>
 802127e:	4621      	mov	r1, r4
 8021280:	4638      	mov	r0, r7
 8021282:	f7ff ffa5 	bl	80211d0 <_Bfree>
 8021286:	4644      	mov	r4, r8
 8021288:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802128c:	3501      	adds	r5, #1
 802128e:	615e      	str	r6, [r3, #20]
 8021290:	6125      	str	r5, [r4, #16]
 8021292:	4620      	mov	r0, r4
 8021294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021298:	0802309c 	.word	0x0802309c
 802129c:	08023128 	.word	0x08023128

080212a0 <__s2b>:
 80212a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212a4:	460c      	mov	r4, r1
 80212a6:	4615      	mov	r5, r2
 80212a8:	461f      	mov	r7, r3
 80212aa:	2209      	movs	r2, #9
 80212ac:	3308      	adds	r3, #8
 80212ae:	4606      	mov	r6, r0
 80212b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80212b4:	2100      	movs	r1, #0
 80212b6:	2201      	movs	r2, #1
 80212b8:	429a      	cmp	r2, r3
 80212ba:	db09      	blt.n	80212d0 <__s2b+0x30>
 80212bc:	4630      	mov	r0, r6
 80212be:	f7ff ff47 	bl	8021150 <_Balloc>
 80212c2:	b940      	cbnz	r0, 80212d6 <__s2b+0x36>
 80212c4:	4602      	mov	r2, r0
 80212c6:	4b19      	ldr	r3, [pc, #100]	; (802132c <__s2b+0x8c>)
 80212c8:	4819      	ldr	r0, [pc, #100]	; (8021330 <__s2b+0x90>)
 80212ca:	21ce      	movs	r1, #206	; 0xce
 80212cc:	f000 fd86 	bl	8021ddc <__assert_func>
 80212d0:	0052      	lsls	r2, r2, #1
 80212d2:	3101      	adds	r1, #1
 80212d4:	e7f0      	b.n	80212b8 <__s2b+0x18>
 80212d6:	9b08      	ldr	r3, [sp, #32]
 80212d8:	6143      	str	r3, [r0, #20]
 80212da:	2d09      	cmp	r5, #9
 80212dc:	f04f 0301 	mov.w	r3, #1
 80212e0:	6103      	str	r3, [r0, #16]
 80212e2:	dd16      	ble.n	8021312 <__s2b+0x72>
 80212e4:	f104 0909 	add.w	r9, r4, #9
 80212e8:	46c8      	mov	r8, r9
 80212ea:	442c      	add	r4, r5
 80212ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80212f0:	4601      	mov	r1, r0
 80212f2:	3b30      	subs	r3, #48	; 0x30
 80212f4:	220a      	movs	r2, #10
 80212f6:	4630      	mov	r0, r6
 80212f8:	f7ff ff8c 	bl	8021214 <__multadd>
 80212fc:	45a0      	cmp	r8, r4
 80212fe:	d1f5      	bne.n	80212ec <__s2b+0x4c>
 8021300:	f1a5 0408 	sub.w	r4, r5, #8
 8021304:	444c      	add	r4, r9
 8021306:	1b2d      	subs	r5, r5, r4
 8021308:	1963      	adds	r3, r4, r5
 802130a:	42bb      	cmp	r3, r7
 802130c:	db04      	blt.n	8021318 <__s2b+0x78>
 802130e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021312:	340a      	adds	r4, #10
 8021314:	2509      	movs	r5, #9
 8021316:	e7f6      	b.n	8021306 <__s2b+0x66>
 8021318:	f814 3b01 	ldrb.w	r3, [r4], #1
 802131c:	4601      	mov	r1, r0
 802131e:	3b30      	subs	r3, #48	; 0x30
 8021320:	220a      	movs	r2, #10
 8021322:	4630      	mov	r0, r6
 8021324:	f7ff ff76 	bl	8021214 <__multadd>
 8021328:	e7ee      	b.n	8021308 <__s2b+0x68>
 802132a:	bf00      	nop
 802132c:	0802309c 	.word	0x0802309c
 8021330:	08023128 	.word	0x08023128

08021334 <__hi0bits>:
 8021334:	0c03      	lsrs	r3, r0, #16
 8021336:	041b      	lsls	r3, r3, #16
 8021338:	b9d3      	cbnz	r3, 8021370 <__hi0bits+0x3c>
 802133a:	0400      	lsls	r0, r0, #16
 802133c:	2310      	movs	r3, #16
 802133e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021342:	bf04      	itt	eq
 8021344:	0200      	lsleq	r0, r0, #8
 8021346:	3308      	addeq	r3, #8
 8021348:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802134c:	bf04      	itt	eq
 802134e:	0100      	lsleq	r0, r0, #4
 8021350:	3304      	addeq	r3, #4
 8021352:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021356:	bf04      	itt	eq
 8021358:	0080      	lsleq	r0, r0, #2
 802135a:	3302      	addeq	r3, #2
 802135c:	2800      	cmp	r0, #0
 802135e:	db05      	blt.n	802136c <__hi0bits+0x38>
 8021360:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021364:	f103 0301 	add.w	r3, r3, #1
 8021368:	bf08      	it	eq
 802136a:	2320      	moveq	r3, #32
 802136c:	4618      	mov	r0, r3
 802136e:	4770      	bx	lr
 8021370:	2300      	movs	r3, #0
 8021372:	e7e4      	b.n	802133e <__hi0bits+0xa>

08021374 <__lo0bits>:
 8021374:	6803      	ldr	r3, [r0, #0]
 8021376:	f013 0207 	ands.w	r2, r3, #7
 802137a:	4601      	mov	r1, r0
 802137c:	d00b      	beq.n	8021396 <__lo0bits+0x22>
 802137e:	07da      	lsls	r2, r3, #31
 8021380:	d423      	bmi.n	80213ca <__lo0bits+0x56>
 8021382:	0798      	lsls	r0, r3, #30
 8021384:	bf49      	itett	mi
 8021386:	085b      	lsrmi	r3, r3, #1
 8021388:	089b      	lsrpl	r3, r3, #2
 802138a:	2001      	movmi	r0, #1
 802138c:	600b      	strmi	r3, [r1, #0]
 802138e:	bf5c      	itt	pl
 8021390:	600b      	strpl	r3, [r1, #0]
 8021392:	2002      	movpl	r0, #2
 8021394:	4770      	bx	lr
 8021396:	b298      	uxth	r0, r3
 8021398:	b9a8      	cbnz	r0, 80213c6 <__lo0bits+0x52>
 802139a:	0c1b      	lsrs	r3, r3, #16
 802139c:	2010      	movs	r0, #16
 802139e:	b2da      	uxtb	r2, r3
 80213a0:	b90a      	cbnz	r2, 80213a6 <__lo0bits+0x32>
 80213a2:	3008      	adds	r0, #8
 80213a4:	0a1b      	lsrs	r3, r3, #8
 80213a6:	071a      	lsls	r2, r3, #28
 80213a8:	bf04      	itt	eq
 80213aa:	091b      	lsreq	r3, r3, #4
 80213ac:	3004      	addeq	r0, #4
 80213ae:	079a      	lsls	r2, r3, #30
 80213b0:	bf04      	itt	eq
 80213b2:	089b      	lsreq	r3, r3, #2
 80213b4:	3002      	addeq	r0, #2
 80213b6:	07da      	lsls	r2, r3, #31
 80213b8:	d403      	bmi.n	80213c2 <__lo0bits+0x4e>
 80213ba:	085b      	lsrs	r3, r3, #1
 80213bc:	f100 0001 	add.w	r0, r0, #1
 80213c0:	d005      	beq.n	80213ce <__lo0bits+0x5a>
 80213c2:	600b      	str	r3, [r1, #0]
 80213c4:	4770      	bx	lr
 80213c6:	4610      	mov	r0, r2
 80213c8:	e7e9      	b.n	802139e <__lo0bits+0x2a>
 80213ca:	2000      	movs	r0, #0
 80213cc:	4770      	bx	lr
 80213ce:	2020      	movs	r0, #32
 80213d0:	4770      	bx	lr
	...

080213d4 <__i2b>:
 80213d4:	b510      	push	{r4, lr}
 80213d6:	460c      	mov	r4, r1
 80213d8:	2101      	movs	r1, #1
 80213da:	f7ff feb9 	bl	8021150 <_Balloc>
 80213de:	4602      	mov	r2, r0
 80213e0:	b928      	cbnz	r0, 80213ee <__i2b+0x1a>
 80213e2:	4b05      	ldr	r3, [pc, #20]	; (80213f8 <__i2b+0x24>)
 80213e4:	4805      	ldr	r0, [pc, #20]	; (80213fc <__i2b+0x28>)
 80213e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80213ea:	f000 fcf7 	bl	8021ddc <__assert_func>
 80213ee:	2301      	movs	r3, #1
 80213f0:	6144      	str	r4, [r0, #20]
 80213f2:	6103      	str	r3, [r0, #16]
 80213f4:	bd10      	pop	{r4, pc}
 80213f6:	bf00      	nop
 80213f8:	0802309c 	.word	0x0802309c
 80213fc:	08023128 	.word	0x08023128

08021400 <__multiply>:
 8021400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021404:	4691      	mov	r9, r2
 8021406:	690a      	ldr	r2, [r1, #16]
 8021408:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802140c:	429a      	cmp	r2, r3
 802140e:	bfb8      	it	lt
 8021410:	460b      	movlt	r3, r1
 8021412:	460c      	mov	r4, r1
 8021414:	bfbc      	itt	lt
 8021416:	464c      	movlt	r4, r9
 8021418:	4699      	movlt	r9, r3
 802141a:	6927      	ldr	r7, [r4, #16]
 802141c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021420:	68a3      	ldr	r3, [r4, #8]
 8021422:	6861      	ldr	r1, [r4, #4]
 8021424:	eb07 060a 	add.w	r6, r7, sl
 8021428:	42b3      	cmp	r3, r6
 802142a:	b085      	sub	sp, #20
 802142c:	bfb8      	it	lt
 802142e:	3101      	addlt	r1, #1
 8021430:	f7ff fe8e 	bl	8021150 <_Balloc>
 8021434:	b930      	cbnz	r0, 8021444 <__multiply+0x44>
 8021436:	4602      	mov	r2, r0
 8021438:	4b44      	ldr	r3, [pc, #272]	; (802154c <__multiply+0x14c>)
 802143a:	4845      	ldr	r0, [pc, #276]	; (8021550 <__multiply+0x150>)
 802143c:	f240 115d 	movw	r1, #349	; 0x15d
 8021440:	f000 fccc 	bl	8021ddc <__assert_func>
 8021444:	f100 0514 	add.w	r5, r0, #20
 8021448:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802144c:	462b      	mov	r3, r5
 802144e:	2200      	movs	r2, #0
 8021450:	4543      	cmp	r3, r8
 8021452:	d321      	bcc.n	8021498 <__multiply+0x98>
 8021454:	f104 0314 	add.w	r3, r4, #20
 8021458:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802145c:	f109 0314 	add.w	r3, r9, #20
 8021460:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021464:	9202      	str	r2, [sp, #8]
 8021466:	1b3a      	subs	r2, r7, r4
 8021468:	3a15      	subs	r2, #21
 802146a:	f022 0203 	bic.w	r2, r2, #3
 802146e:	3204      	adds	r2, #4
 8021470:	f104 0115 	add.w	r1, r4, #21
 8021474:	428f      	cmp	r7, r1
 8021476:	bf38      	it	cc
 8021478:	2204      	movcc	r2, #4
 802147a:	9201      	str	r2, [sp, #4]
 802147c:	9a02      	ldr	r2, [sp, #8]
 802147e:	9303      	str	r3, [sp, #12]
 8021480:	429a      	cmp	r2, r3
 8021482:	d80c      	bhi.n	802149e <__multiply+0x9e>
 8021484:	2e00      	cmp	r6, #0
 8021486:	dd03      	ble.n	8021490 <__multiply+0x90>
 8021488:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802148c:	2b00      	cmp	r3, #0
 802148e:	d05a      	beq.n	8021546 <__multiply+0x146>
 8021490:	6106      	str	r6, [r0, #16]
 8021492:	b005      	add	sp, #20
 8021494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021498:	f843 2b04 	str.w	r2, [r3], #4
 802149c:	e7d8      	b.n	8021450 <__multiply+0x50>
 802149e:	f8b3 a000 	ldrh.w	sl, [r3]
 80214a2:	f1ba 0f00 	cmp.w	sl, #0
 80214a6:	d024      	beq.n	80214f2 <__multiply+0xf2>
 80214a8:	f104 0e14 	add.w	lr, r4, #20
 80214ac:	46a9      	mov	r9, r5
 80214ae:	f04f 0c00 	mov.w	ip, #0
 80214b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80214b6:	f8d9 1000 	ldr.w	r1, [r9]
 80214ba:	fa1f fb82 	uxth.w	fp, r2
 80214be:	b289      	uxth	r1, r1
 80214c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80214c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80214c8:	f8d9 2000 	ldr.w	r2, [r9]
 80214cc:	4461      	add	r1, ip
 80214ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80214d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80214d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80214da:	b289      	uxth	r1, r1
 80214dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80214e0:	4577      	cmp	r7, lr
 80214e2:	f849 1b04 	str.w	r1, [r9], #4
 80214e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80214ea:	d8e2      	bhi.n	80214b2 <__multiply+0xb2>
 80214ec:	9a01      	ldr	r2, [sp, #4]
 80214ee:	f845 c002 	str.w	ip, [r5, r2]
 80214f2:	9a03      	ldr	r2, [sp, #12]
 80214f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80214f8:	3304      	adds	r3, #4
 80214fa:	f1b9 0f00 	cmp.w	r9, #0
 80214fe:	d020      	beq.n	8021542 <__multiply+0x142>
 8021500:	6829      	ldr	r1, [r5, #0]
 8021502:	f104 0c14 	add.w	ip, r4, #20
 8021506:	46ae      	mov	lr, r5
 8021508:	f04f 0a00 	mov.w	sl, #0
 802150c:	f8bc b000 	ldrh.w	fp, [ip]
 8021510:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021514:	fb09 220b 	mla	r2, r9, fp, r2
 8021518:	4492      	add	sl, r2
 802151a:	b289      	uxth	r1, r1
 802151c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8021520:	f84e 1b04 	str.w	r1, [lr], #4
 8021524:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021528:	f8be 1000 	ldrh.w	r1, [lr]
 802152c:	0c12      	lsrs	r2, r2, #16
 802152e:	fb09 1102 	mla	r1, r9, r2, r1
 8021532:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8021536:	4567      	cmp	r7, ip
 8021538:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802153c:	d8e6      	bhi.n	802150c <__multiply+0x10c>
 802153e:	9a01      	ldr	r2, [sp, #4]
 8021540:	50a9      	str	r1, [r5, r2]
 8021542:	3504      	adds	r5, #4
 8021544:	e79a      	b.n	802147c <__multiply+0x7c>
 8021546:	3e01      	subs	r6, #1
 8021548:	e79c      	b.n	8021484 <__multiply+0x84>
 802154a:	bf00      	nop
 802154c:	0802309c 	.word	0x0802309c
 8021550:	08023128 	.word	0x08023128

08021554 <__pow5mult>:
 8021554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021558:	4615      	mov	r5, r2
 802155a:	f012 0203 	ands.w	r2, r2, #3
 802155e:	4606      	mov	r6, r0
 8021560:	460f      	mov	r7, r1
 8021562:	d007      	beq.n	8021574 <__pow5mult+0x20>
 8021564:	4c25      	ldr	r4, [pc, #148]	; (80215fc <__pow5mult+0xa8>)
 8021566:	3a01      	subs	r2, #1
 8021568:	2300      	movs	r3, #0
 802156a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802156e:	f7ff fe51 	bl	8021214 <__multadd>
 8021572:	4607      	mov	r7, r0
 8021574:	10ad      	asrs	r5, r5, #2
 8021576:	d03d      	beq.n	80215f4 <__pow5mult+0xa0>
 8021578:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802157a:	b97c      	cbnz	r4, 802159c <__pow5mult+0x48>
 802157c:	2010      	movs	r0, #16
 802157e:	f7fc fd71 	bl	801e064 <malloc>
 8021582:	4602      	mov	r2, r0
 8021584:	6270      	str	r0, [r6, #36]	; 0x24
 8021586:	b928      	cbnz	r0, 8021594 <__pow5mult+0x40>
 8021588:	4b1d      	ldr	r3, [pc, #116]	; (8021600 <__pow5mult+0xac>)
 802158a:	481e      	ldr	r0, [pc, #120]	; (8021604 <__pow5mult+0xb0>)
 802158c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021590:	f000 fc24 	bl	8021ddc <__assert_func>
 8021594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021598:	6004      	str	r4, [r0, #0]
 802159a:	60c4      	str	r4, [r0, #12]
 802159c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80215a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80215a4:	b94c      	cbnz	r4, 80215ba <__pow5mult+0x66>
 80215a6:	f240 2171 	movw	r1, #625	; 0x271
 80215aa:	4630      	mov	r0, r6
 80215ac:	f7ff ff12 	bl	80213d4 <__i2b>
 80215b0:	2300      	movs	r3, #0
 80215b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80215b6:	4604      	mov	r4, r0
 80215b8:	6003      	str	r3, [r0, #0]
 80215ba:	f04f 0900 	mov.w	r9, #0
 80215be:	07eb      	lsls	r3, r5, #31
 80215c0:	d50a      	bpl.n	80215d8 <__pow5mult+0x84>
 80215c2:	4639      	mov	r1, r7
 80215c4:	4622      	mov	r2, r4
 80215c6:	4630      	mov	r0, r6
 80215c8:	f7ff ff1a 	bl	8021400 <__multiply>
 80215cc:	4639      	mov	r1, r7
 80215ce:	4680      	mov	r8, r0
 80215d0:	4630      	mov	r0, r6
 80215d2:	f7ff fdfd 	bl	80211d0 <_Bfree>
 80215d6:	4647      	mov	r7, r8
 80215d8:	106d      	asrs	r5, r5, #1
 80215da:	d00b      	beq.n	80215f4 <__pow5mult+0xa0>
 80215dc:	6820      	ldr	r0, [r4, #0]
 80215de:	b938      	cbnz	r0, 80215f0 <__pow5mult+0x9c>
 80215e0:	4622      	mov	r2, r4
 80215e2:	4621      	mov	r1, r4
 80215e4:	4630      	mov	r0, r6
 80215e6:	f7ff ff0b 	bl	8021400 <__multiply>
 80215ea:	6020      	str	r0, [r4, #0]
 80215ec:	f8c0 9000 	str.w	r9, [r0]
 80215f0:	4604      	mov	r4, r0
 80215f2:	e7e4      	b.n	80215be <__pow5mult+0x6a>
 80215f4:	4638      	mov	r0, r7
 80215f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80215fa:	bf00      	nop
 80215fc:	08023278 	.word	0x08023278
 8021600:	0802302a 	.word	0x0802302a
 8021604:	08023128 	.word	0x08023128

08021608 <__lshift>:
 8021608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802160c:	460c      	mov	r4, r1
 802160e:	6849      	ldr	r1, [r1, #4]
 8021610:	6923      	ldr	r3, [r4, #16]
 8021612:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021616:	68a3      	ldr	r3, [r4, #8]
 8021618:	4607      	mov	r7, r0
 802161a:	4691      	mov	r9, r2
 802161c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021620:	f108 0601 	add.w	r6, r8, #1
 8021624:	42b3      	cmp	r3, r6
 8021626:	db0b      	blt.n	8021640 <__lshift+0x38>
 8021628:	4638      	mov	r0, r7
 802162a:	f7ff fd91 	bl	8021150 <_Balloc>
 802162e:	4605      	mov	r5, r0
 8021630:	b948      	cbnz	r0, 8021646 <__lshift+0x3e>
 8021632:	4602      	mov	r2, r0
 8021634:	4b2a      	ldr	r3, [pc, #168]	; (80216e0 <__lshift+0xd8>)
 8021636:	482b      	ldr	r0, [pc, #172]	; (80216e4 <__lshift+0xdc>)
 8021638:	f240 11d9 	movw	r1, #473	; 0x1d9
 802163c:	f000 fbce 	bl	8021ddc <__assert_func>
 8021640:	3101      	adds	r1, #1
 8021642:	005b      	lsls	r3, r3, #1
 8021644:	e7ee      	b.n	8021624 <__lshift+0x1c>
 8021646:	2300      	movs	r3, #0
 8021648:	f100 0114 	add.w	r1, r0, #20
 802164c:	f100 0210 	add.w	r2, r0, #16
 8021650:	4618      	mov	r0, r3
 8021652:	4553      	cmp	r3, sl
 8021654:	db37      	blt.n	80216c6 <__lshift+0xbe>
 8021656:	6920      	ldr	r0, [r4, #16]
 8021658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802165c:	f104 0314 	add.w	r3, r4, #20
 8021660:	f019 091f 	ands.w	r9, r9, #31
 8021664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021668:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802166c:	d02f      	beq.n	80216ce <__lshift+0xc6>
 802166e:	f1c9 0e20 	rsb	lr, r9, #32
 8021672:	468a      	mov	sl, r1
 8021674:	f04f 0c00 	mov.w	ip, #0
 8021678:	681a      	ldr	r2, [r3, #0]
 802167a:	fa02 f209 	lsl.w	r2, r2, r9
 802167e:	ea42 020c 	orr.w	r2, r2, ip
 8021682:	f84a 2b04 	str.w	r2, [sl], #4
 8021686:	f853 2b04 	ldr.w	r2, [r3], #4
 802168a:	4298      	cmp	r0, r3
 802168c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8021690:	d8f2      	bhi.n	8021678 <__lshift+0x70>
 8021692:	1b03      	subs	r3, r0, r4
 8021694:	3b15      	subs	r3, #21
 8021696:	f023 0303 	bic.w	r3, r3, #3
 802169a:	3304      	adds	r3, #4
 802169c:	f104 0215 	add.w	r2, r4, #21
 80216a0:	4290      	cmp	r0, r2
 80216a2:	bf38      	it	cc
 80216a4:	2304      	movcc	r3, #4
 80216a6:	f841 c003 	str.w	ip, [r1, r3]
 80216aa:	f1bc 0f00 	cmp.w	ip, #0
 80216ae:	d001      	beq.n	80216b4 <__lshift+0xac>
 80216b0:	f108 0602 	add.w	r6, r8, #2
 80216b4:	3e01      	subs	r6, #1
 80216b6:	4638      	mov	r0, r7
 80216b8:	612e      	str	r6, [r5, #16]
 80216ba:	4621      	mov	r1, r4
 80216bc:	f7ff fd88 	bl	80211d0 <_Bfree>
 80216c0:	4628      	mov	r0, r5
 80216c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80216c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80216ca:	3301      	adds	r3, #1
 80216cc:	e7c1      	b.n	8021652 <__lshift+0x4a>
 80216ce:	3904      	subs	r1, #4
 80216d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80216d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80216d8:	4298      	cmp	r0, r3
 80216da:	d8f9      	bhi.n	80216d0 <__lshift+0xc8>
 80216dc:	e7ea      	b.n	80216b4 <__lshift+0xac>
 80216de:	bf00      	nop
 80216e0:	0802309c 	.word	0x0802309c
 80216e4:	08023128 	.word	0x08023128

080216e8 <__mcmp>:
 80216e8:	b530      	push	{r4, r5, lr}
 80216ea:	6902      	ldr	r2, [r0, #16]
 80216ec:	690c      	ldr	r4, [r1, #16]
 80216ee:	1b12      	subs	r2, r2, r4
 80216f0:	d10e      	bne.n	8021710 <__mcmp+0x28>
 80216f2:	f100 0314 	add.w	r3, r0, #20
 80216f6:	3114      	adds	r1, #20
 80216f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80216fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021700:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021704:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021708:	42a5      	cmp	r5, r4
 802170a:	d003      	beq.n	8021714 <__mcmp+0x2c>
 802170c:	d305      	bcc.n	802171a <__mcmp+0x32>
 802170e:	2201      	movs	r2, #1
 8021710:	4610      	mov	r0, r2
 8021712:	bd30      	pop	{r4, r5, pc}
 8021714:	4283      	cmp	r3, r0
 8021716:	d3f3      	bcc.n	8021700 <__mcmp+0x18>
 8021718:	e7fa      	b.n	8021710 <__mcmp+0x28>
 802171a:	f04f 32ff 	mov.w	r2, #4294967295
 802171e:	e7f7      	b.n	8021710 <__mcmp+0x28>

08021720 <__mdiff>:
 8021720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021724:	460c      	mov	r4, r1
 8021726:	4606      	mov	r6, r0
 8021728:	4611      	mov	r1, r2
 802172a:	4620      	mov	r0, r4
 802172c:	4690      	mov	r8, r2
 802172e:	f7ff ffdb 	bl	80216e8 <__mcmp>
 8021732:	1e05      	subs	r5, r0, #0
 8021734:	d110      	bne.n	8021758 <__mdiff+0x38>
 8021736:	4629      	mov	r1, r5
 8021738:	4630      	mov	r0, r6
 802173a:	f7ff fd09 	bl	8021150 <_Balloc>
 802173e:	b930      	cbnz	r0, 802174e <__mdiff+0x2e>
 8021740:	4b3a      	ldr	r3, [pc, #232]	; (802182c <__mdiff+0x10c>)
 8021742:	4602      	mov	r2, r0
 8021744:	f240 2132 	movw	r1, #562	; 0x232
 8021748:	4839      	ldr	r0, [pc, #228]	; (8021830 <__mdiff+0x110>)
 802174a:	f000 fb47 	bl	8021ddc <__assert_func>
 802174e:	2301      	movs	r3, #1
 8021750:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021758:	bfa4      	itt	ge
 802175a:	4643      	movge	r3, r8
 802175c:	46a0      	movge	r8, r4
 802175e:	4630      	mov	r0, r6
 8021760:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021764:	bfa6      	itte	ge
 8021766:	461c      	movge	r4, r3
 8021768:	2500      	movge	r5, #0
 802176a:	2501      	movlt	r5, #1
 802176c:	f7ff fcf0 	bl	8021150 <_Balloc>
 8021770:	b920      	cbnz	r0, 802177c <__mdiff+0x5c>
 8021772:	4b2e      	ldr	r3, [pc, #184]	; (802182c <__mdiff+0x10c>)
 8021774:	4602      	mov	r2, r0
 8021776:	f44f 7110 	mov.w	r1, #576	; 0x240
 802177a:	e7e5      	b.n	8021748 <__mdiff+0x28>
 802177c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8021780:	6926      	ldr	r6, [r4, #16]
 8021782:	60c5      	str	r5, [r0, #12]
 8021784:	f104 0914 	add.w	r9, r4, #20
 8021788:	f108 0514 	add.w	r5, r8, #20
 802178c:	f100 0e14 	add.w	lr, r0, #20
 8021790:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8021794:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8021798:	f108 0210 	add.w	r2, r8, #16
 802179c:	46f2      	mov	sl, lr
 802179e:	2100      	movs	r1, #0
 80217a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80217a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80217a8:	fa1f f883 	uxth.w	r8, r3
 80217ac:	fa11 f18b 	uxtah	r1, r1, fp
 80217b0:	0c1b      	lsrs	r3, r3, #16
 80217b2:	eba1 0808 	sub.w	r8, r1, r8
 80217b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80217ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80217be:	fa1f f888 	uxth.w	r8, r8
 80217c2:	1419      	asrs	r1, r3, #16
 80217c4:	454e      	cmp	r6, r9
 80217c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80217ca:	f84a 3b04 	str.w	r3, [sl], #4
 80217ce:	d8e7      	bhi.n	80217a0 <__mdiff+0x80>
 80217d0:	1b33      	subs	r3, r6, r4
 80217d2:	3b15      	subs	r3, #21
 80217d4:	f023 0303 	bic.w	r3, r3, #3
 80217d8:	3304      	adds	r3, #4
 80217da:	3415      	adds	r4, #21
 80217dc:	42a6      	cmp	r6, r4
 80217de:	bf38      	it	cc
 80217e0:	2304      	movcc	r3, #4
 80217e2:	441d      	add	r5, r3
 80217e4:	4473      	add	r3, lr
 80217e6:	469e      	mov	lr, r3
 80217e8:	462e      	mov	r6, r5
 80217ea:	4566      	cmp	r6, ip
 80217ec:	d30e      	bcc.n	802180c <__mdiff+0xec>
 80217ee:	f10c 0203 	add.w	r2, ip, #3
 80217f2:	1b52      	subs	r2, r2, r5
 80217f4:	f022 0203 	bic.w	r2, r2, #3
 80217f8:	3d03      	subs	r5, #3
 80217fa:	45ac      	cmp	ip, r5
 80217fc:	bf38      	it	cc
 80217fe:	2200      	movcc	r2, #0
 8021800:	441a      	add	r2, r3
 8021802:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021806:	b17b      	cbz	r3, 8021828 <__mdiff+0x108>
 8021808:	6107      	str	r7, [r0, #16]
 802180a:	e7a3      	b.n	8021754 <__mdiff+0x34>
 802180c:	f856 8b04 	ldr.w	r8, [r6], #4
 8021810:	fa11 f288 	uxtah	r2, r1, r8
 8021814:	1414      	asrs	r4, r2, #16
 8021816:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802181a:	b292      	uxth	r2, r2
 802181c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8021820:	f84e 2b04 	str.w	r2, [lr], #4
 8021824:	1421      	asrs	r1, r4, #16
 8021826:	e7e0      	b.n	80217ea <__mdiff+0xca>
 8021828:	3f01      	subs	r7, #1
 802182a:	e7ea      	b.n	8021802 <__mdiff+0xe2>
 802182c:	0802309c 	.word	0x0802309c
 8021830:	08023128 	.word	0x08023128

08021834 <__ulp>:
 8021834:	b082      	sub	sp, #8
 8021836:	ed8d 0b00 	vstr	d0, [sp]
 802183a:	9b01      	ldr	r3, [sp, #4]
 802183c:	4912      	ldr	r1, [pc, #72]	; (8021888 <__ulp+0x54>)
 802183e:	4019      	ands	r1, r3
 8021840:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8021844:	2900      	cmp	r1, #0
 8021846:	dd05      	ble.n	8021854 <__ulp+0x20>
 8021848:	2200      	movs	r2, #0
 802184a:	460b      	mov	r3, r1
 802184c:	ec43 2b10 	vmov	d0, r2, r3
 8021850:	b002      	add	sp, #8
 8021852:	4770      	bx	lr
 8021854:	4249      	negs	r1, r1
 8021856:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802185a:	ea4f 5021 	mov.w	r0, r1, asr #20
 802185e:	f04f 0200 	mov.w	r2, #0
 8021862:	f04f 0300 	mov.w	r3, #0
 8021866:	da04      	bge.n	8021872 <__ulp+0x3e>
 8021868:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802186c:	fa41 f300 	asr.w	r3, r1, r0
 8021870:	e7ec      	b.n	802184c <__ulp+0x18>
 8021872:	f1a0 0114 	sub.w	r1, r0, #20
 8021876:	291e      	cmp	r1, #30
 8021878:	bfda      	itte	le
 802187a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802187e:	fa20 f101 	lsrle.w	r1, r0, r1
 8021882:	2101      	movgt	r1, #1
 8021884:	460a      	mov	r2, r1
 8021886:	e7e1      	b.n	802184c <__ulp+0x18>
 8021888:	7ff00000 	.word	0x7ff00000

0802188c <__b2d>:
 802188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802188e:	6905      	ldr	r5, [r0, #16]
 8021890:	f100 0714 	add.w	r7, r0, #20
 8021894:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8021898:	1f2e      	subs	r6, r5, #4
 802189a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802189e:	4620      	mov	r0, r4
 80218a0:	f7ff fd48 	bl	8021334 <__hi0bits>
 80218a4:	f1c0 0320 	rsb	r3, r0, #32
 80218a8:	280a      	cmp	r0, #10
 80218aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8021928 <__b2d+0x9c>
 80218ae:	600b      	str	r3, [r1, #0]
 80218b0:	dc14      	bgt.n	80218dc <__b2d+0x50>
 80218b2:	f1c0 0e0b 	rsb	lr, r0, #11
 80218b6:	fa24 f10e 	lsr.w	r1, r4, lr
 80218ba:	42b7      	cmp	r7, r6
 80218bc:	ea41 030c 	orr.w	r3, r1, ip
 80218c0:	bf34      	ite	cc
 80218c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80218c6:	2100      	movcs	r1, #0
 80218c8:	3015      	adds	r0, #21
 80218ca:	fa04 f000 	lsl.w	r0, r4, r0
 80218ce:	fa21 f10e 	lsr.w	r1, r1, lr
 80218d2:	ea40 0201 	orr.w	r2, r0, r1
 80218d6:	ec43 2b10 	vmov	d0, r2, r3
 80218da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80218dc:	42b7      	cmp	r7, r6
 80218de:	bf3a      	itte	cc
 80218e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80218e4:	f1a5 0608 	subcc.w	r6, r5, #8
 80218e8:	2100      	movcs	r1, #0
 80218ea:	380b      	subs	r0, #11
 80218ec:	d017      	beq.n	802191e <__b2d+0x92>
 80218ee:	f1c0 0c20 	rsb	ip, r0, #32
 80218f2:	fa04 f500 	lsl.w	r5, r4, r0
 80218f6:	42be      	cmp	r6, r7
 80218f8:	fa21 f40c 	lsr.w	r4, r1, ip
 80218fc:	ea45 0504 	orr.w	r5, r5, r4
 8021900:	bf8c      	ite	hi
 8021902:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8021906:	2400      	movls	r4, #0
 8021908:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802190c:	fa01 f000 	lsl.w	r0, r1, r0
 8021910:	fa24 f40c 	lsr.w	r4, r4, ip
 8021914:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8021918:	ea40 0204 	orr.w	r2, r0, r4
 802191c:	e7db      	b.n	80218d6 <__b2d+0x4a>
 802191e:	ea44 030c 	orr.w	r3, r4, ip
 8021922:	460a      	mov	r2, r1
 8021924:	e7d7      	b.n	80218d6 <__b2d+0x4a>
 8021926:	bf00      	nop
 8021928:	3ff00000 	.word	0x3ff00000

0802192c <__d2b>:
 802192c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021930:	4689      	mov	r9, r1
 8021932:	2101      	movs	r1, #1
 8021934:	ec57 6b10 	vmov	r6, r7, d0
 8021938:	4690      	mov	r8, r2
 802193a:	f7ff fc09 	bl	8021150 <_Balloc>
 802193e:	4604      	mov	r4, r0
 8021940:	b930      	cbnz	r0, 8021950 <__d2b+0x24>
 8021942:	4602      	mov	r2, r0
 8021944:	4b25      	ldr	r3, [pc, #148]	; (80219dc <__d2b+0xb0>)
 8021946:	4826      	ldr	r0, [pc, #152]	; (80219e0 <__d2b+0xb4>)
 8021948:	f240 310a 	movw	r1, #778	; 0x30a
 802194c:	f000 fa46 	bl	8021ddc <__assert_func>
 8021950:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021954:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021958:	bb35      	cbnz	r5, 80219a8 <__d2b+0x7c>
 802195a:	2e00      	cmp	r6, #0
 802195c:	9301      	str	r3, [sp, #4]
 802195e:	d028      	beq.n	80219b2 <__d2b+0x86>
 8021960:	4668      	mov	r0, sp
 8021962:	9600      	str	r6, [sp, #0]
 8021964:	f7ff fd06 	bl	8021374 <__lo0bits>
 8021968:	9900      	ldr	r1, [sp, #0]
 802196a:	b300      	cbz	r0, 80219ae <__d2b+0x82>
 802196c:	9a01      	ldr	r2, [sp, #4]
 802196e:	f1c0 0320 	rsb	r3, r0, #32
 8021972:	fa02 f303 	lsl.w	r3, r2, r3
 8021976:	430b      	orrs	r3, r1
 8021978:	40c2      	lsrs	r2, r0
 802197a:	6163      	str	r3, [r4, #20]
 802197c:	9201      	str	r2, [sp, #4]
 802197e:	9b01      	ldr	r3, [sp, #4]
 8021980:	61a3      	str	r3, [r4, #24]
 8021982:	2b00      	cmp	r3, #0
 8021984:	bf14      	ite	ne
 8021986:	2202      	movne	r2, #2
 8021988:	2201      	moveq	r2, #1
 802198a:	6122      	str	r2, [r4, #16]
 802198c:	b1d5      	cbz	r5, 80219c4 <__d2b+0x98>
 802198e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8021992:	4405      	add	r5, r0
 8021994:	f8c9 5000 	str.w	r5, [r9]
 8021998:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802199c:	f8c8 0000 	str.w	r0, [r8]
 80219a0:	4620      	mov	r0, r4
 80219a2:	b003      	add	sp, #12
 80219a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80219a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80219ac:	e7d5      	b.n	802195a <__d2b+0x2e>
 80219ae:	6161      	str	r1, [r4, #20]
 80219b0:	e7e5      	b.n	802197e <__d2b+0x52>
 80219b2:	a801      	add	r0, sp, #4
 80219b4:	f7ff fcde 	bl	8021374 <__lo0bits>
 80219b8:	9b01      	ldr	r3, [sp, #4]
 80219ba:	6163      	str	r3, [r4, #20]
 80219bc:	2201      	movs	r2, #1
 80219be:	6122      	str	r2, [r4, #16]
 80219c0:	3020      	adds	r0, #32
 80219c2:	e7e3      	b.n	802198c <__d2b+0x60>
 80219c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80219c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80219cc:	f8c9 0000 	str.w	r0, [r9]
 80219d0:	6918      	ldr	r0, [r3, #16]
 80219d2:	f7ff fcaf 	bl	8021334 <__hi0bits>
 80219d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80219da:	e7df      	b.n	802199c <__d2b+0x70>
 80219dc:	0802309c 	.word	0x0802309c
 80219e0:	08023128 	.word	0x08023128

080219e4 <__ratio>:
 80219e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219e8:	4688      	mov	r8, r1
 80219ea:	4669      	mov	r1, sp
 80219ec:	4681      	mov	r9, r0
 80219ee:	f7ff ff4d 	bl	802188c <__b2d>
 80219f2:	a901      	add	r1, sp, #4
 80219f4:	4640      	mov	r0, r8
 80219f6:	ec55 4b10 	vmov	r4, r5, d0
 80219fa:	f7ff ff47 	bl	802188c <__b2d>
 80219fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021a02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8021a06:	eba3 0c02 	sub.w	ip, r3, r2
 8021a0a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021a0e:	1a9b      	subs	r3, r3, r2
 8021a10:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8021a14:	ec51 0b10 	vmov	r0, r1, d0
 8021a18:	2b00      	cmp	r3, #0
 8021a1a:	bfd6      	itet	le
 8021a1c:	460a      	movle	r2, r1
 8021a1e:	462a      	movgt	r2, r5
 8021a20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8021a24:	468b      	mov	fp, r1
 8021a26:	462f      	mov	r7, r5
 8021a28:	bfd4      	ite	le
 8021a2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8021a2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8021a32:	4620      	mov	r0, r4
 8021a34:	ee10 2a10 	vmov	r2, s0
 8021a38:	465b      	mov	r3, fp
 8021a3a:	4639      	mov	r1, r7
 8021a3c:	f7de ff2e 	bl	800089c <__aeabi_ddiv>
 8021a40:	ec41 0b10 	vmov	d0, r0, r1
 8021a44:	b003      	add	sp, #12
 8021a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021a4a <__copybits>:
 8021a4a:	3901      	subs	r1, #1
 8021a4c:	b570      	push	{r4, r5, r6, lr}
 8021a4e:	1149      	asrs	r1, r1, #5
 8021a50:	6914      	ldr	r4, [r2, #16]
 8021a52:	3101      	adds	r1, #1
 8021a54:	f102 0314 	add.w	r3, r2, #20
 8021a58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8021a5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8021a60:	1f05      	subs	r5, r0, #4
 8021a62:	42a3      	cmp	r3, r4
 8021a64:	d30c      	bcc.n	8021a80 <__copybits+0x36>
 8021a66:	1aa3      	subs	r3, r4, r2
 8021a68:	3b11      	subs	r3, #17
 8021a6a:	f023 0303 	bic.w	r3, r3, #3
 8021a6e:	3211      	adds	r2, #17
 8021a70:	42a2      	cmp	r2, r4
 8021a72:	bf88      	it	hi
 8021a74:	2300      	movhi	r3, #0
 8021a76:	4418      	add	r0, r3
 8021a78:	2300      	movs	r3, #0
 8021a7a:	4288      	cmp	r0, r1
 8021a7c:	d305      	bcc.n	8021a8a <__copybits+0x40>
 8021a7e:	bd70      	pop	{r4, r5, r6, pc}
 8021a80:	f853 6b04 	ldr.w	r6, [r3], #4
 8021a84:	f845 6f04 	str.w	r6, [r5, #4]!
 8021a88:	e7eb      	b.n	8021a62 <__copybits+0x18>
 8021a8a:	f840 3b04 	str.w	r3, [r0], #4
 8021a8e:	e7f4      	b.n	8021a7a <__copybits+0x30>

08021a90 <__any_on>:
 8021a90:	f100 0214 	add.w	r2, r0, #20
 8021a94:	6900      	ldr	r0, [r0, #16]
 8021a96:	114b      	asrs	r3, r1, #5
 8021a98:	4298      	cmp	r0, r3
 8021a9a:	b510      	push	{r4, lr}
 8021a9c:	db11      	blt.n	8021ac2 <__any_on+0x32>
 8021a9e:	dd0a      	ble.n	8021ab6 <__any_on+0x26>
 8021aa0:	f011 011f 	ands.w	r1, r1, #31
 8021aa4:	d007      	beq.n	8021ab6 <__any_on+0x26>
 8021aa6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8021aaa:	fa24 f001 	lsr.w	r0, r4, r1
 8021aae:	fa00 f101 	lsl.w	r1, r0, r1
 8021ab2:	428c      	cmp	r4, r1
 8021ab4:	d10b      	bne.n	8021ace <__any_on+0x3e>
 8021ab6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021aba:	4293      	cmp	r3, r2
 8021abc:	d803      	bhi.n	8021ac6 <__any_on+0x36>
 8021abe:	2000      	movs	r0, #0
 8021ac0:	bd10      	pop	{r4, pc}
 8021ac2:	4603      	mov	r3, r0
 8021ac4:	e7f7      	b.n	8021ab6 <__any_on+0x26>
 8021ac6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8021aca:	2900      	cmp	r1, #0
 8021acc:	d0f5      	beq.n	8021aba <__any_on+0x2a>
 8021ace:	2001      	movs	r0, #1
 8021ad0:	e7f6      	b.n	8021ac0 <__any_on+0x30>

08021ad2 <__ssputs_r>:
 8021ad2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ad6:	688e      	ldr	r6, [r1, #8]
 8021ad8:	429e      	cmp	r6, r3
 8021ada:	4682      	mov	sl, r0
 8021adc:	460c      	mov	r4, r1
 8021ade:	4690      	mov	r8, r2
 8021ae0:	461f      	mov	r7, r3
 8021ae2:	d838      	bhi.n	8021b56 <__ssputs_r+0x84>
 8021ae4:	898a      	ldrh	r2, [r1, #12]
 8021ae6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021aea:	d032      	beq.n	8021b52 <__ssputs_r+0x80>
 8021aec:	6825      	ldr	r5, [r4, #0]
 8021aee:	6909      	ldr	r1, [r1, #16]
 8021af0:	eba5 0901 	sub.w	r9, r5, r1
 8021af4:	6965      	ldr	r5, [r4, #20]
 8021af6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021afa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021afe:	3301      	adds	r3, #1
 8021b00:	444b      	add	r3, r9
 8021b02:	106d      	asrs	r5, r5, #1
 8021b04:	429d      	cmp	r5, r3
 8021b06:	bf38      	it	cc
 8021b08:	461d      	movcc	r5, r3
 8021b0a:	0553      	lsls	r3, r2, #21
 8021b0c:	d531      	bpl.n	8021b72 <__ssputs_r+0xa0>
 8021b0e:	4629      	mov	r1, r5
 8021b10:	f7fc fb6a 	bl	801e1e8 <_malloc_r>
 8021b14:	4606      	mov	r6, r0
 8021b16:	b950      	cbnz	r0, 8021b2e <__ssputs_r+0x5c>
 8021b18:	230c      	movs	r3, #12
 8021b1a:	f8ca 3000 	str.w	r3, [sl]
 8021b1e:	89a3      	ldrh	r3, [r4, #12]
 8021b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b24:	81a3      	strh	r3, [r4, #12]
 8021b26:	f04f 30ff 	mov.w	r0, #4294967295
 8021b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b2e:	6921      	ldr	r1, [r4, #16]
 8021b30:	464a      	mov	r2, r9
 8021b32:	f7fc faa7 	bl	801e084 <memcpy>
 8021b36:	89a3      	ldrh	r3, [r4, #12]
 8021b38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021b40:	81a3      	strh	r3, [r4, #12]
 8021b42:	6126      	str	r6, [r4, #16]
 8021b44:	6165      	str	r5, [r4, #20]
 8021b46:	444e      	add	r6, r9
 8021b48:	eba5 0509 	sub.w	r5, r5, r9
 8021b4c:	6026      	str	r6, [r4, #0]
 8021b4e:	60a5      	str	r5, [r4, #8]
 8021b50:	463e      	mov	r6, r7
 8021b52:	42be      	cmp	r6, r7
 8021b54:	d900      	bls.n	8021b58 <__ssputs_r+0x86>
 8021b56:	463e      	mov	r6, r7
 8021b58:	6820      	ldr	r0, [r4, #0]
 8021b5a:	4632      	mov	r2, r6
 8021b5c:	4641      	mov	r1, r8
 8021b5e:	f7fc fa9f 	bl	801e0a0 <memmove>
 8021b62:	68a3      	ldr	r3, [r4, #8]
 8021b64:	1b9b      	subs	r3, r3, r6
 8021b66:	60a3      	str	r3, [r4, #8]
 8021b68:	6823      	ldr	r3, [r4, #0]
 8021b6a:	4433      	add	r3, r6
 8021b6c:	6023      	str	r3, [r4, #0]
 8021b6e:	2000      	movs	r0, #0
 8021b70:	e7db      	b.n	8021b2a <__ssputs_r+0x58>
 8021b72:	462a      	mov	r2, r5
 8021b74:	f000 f962 	bl	8021e3c <_realloc_r>
 8021b78:	4606      	mov	r6, r0
 8021b7a:	2800      	cmp	r0, #0
 8021b7c:	d1e1      	bne.n	8021b42 <__ssputs_r+0x70>
 8021b7e:	6921      	ldr	r1, [r4, #16]
 8021b80:	4650      	mov	r0, sl
 8021b82:	f7fc fac5 	bl	801e110 <_free_r>
 8021b86:	e7c7      	b.n	8021b18 <__ssputs_r+0x46>

08021b88 <_svfiprintf_r>:
 8021b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b8c:	4698      	mov	r8, r3
 8021b8e:	898b      	ldrh	r3, [r1, #12]
 8021b90:	061b      	lsls	r3, r3, #24
 8021b92:	b09d      	sub	sp, #116	; 0x74
 8021b94:	4607      	mov	r7, r0
 8021b96:	460d      	mov	r5, r1
 8021b98:	4614      	mov	r4, r2
 8021b9a:	d50e      	bpl.n	8021bba <_svfiprintf_r+0x32>
 8021b9c:	690b      	ldr	r3, [r1, #16]
 8021b9e:	b963      	cbnz	r3, 8021bba <_svfiprintf_r+0x32>
 8021ba0:	2140      	movs	r1, #64	; 0x40
 8021ba2:	f7fc fb21 	bl	801e1e8 <_malloc_r>
 8021ba6:	6028      	str	r0, [r5, #0]
 8021ba8:	6128      	str	r0, [r5, #16]
 8021baa:	b920      	cbnz	r0, 8021bb6 <_svfiprintf_r+0x2e>
 8021bac:	230c      	movs	r3, #12
 8021bae:	603b      	str	r3, [r7, #0]
 8021bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8021bb4:	e0d1      	b.n	8021d5a <_svfiprintf_r+0x1d2>
 8021bb6:	2340      	movs	r3, #64	; 0x40
 8021bb8:	616b      	str	r3, [r5, #20]
 8021bba:	2300      	movs	r3, #0
 8021bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8021bbe:	2320      	movs	r3, #32
 8021bc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021bc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8021bc8:	2330      	movs	r3, #48	; 0x30
 8021bca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8021d74 <_svfiprintf_r+0x1ec>
 8021bce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021bd2:	f04f 0901 	mov.w	r9, #1
 8021bd6:	4623      	mov	r3, r4
 8021bd8:	469a      	mov	sl, r3
 8021bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021bde:	b10a      	cbz	r2, 8021be4 <_svfiprintf_r+0x5c>
 8021be0:	2a25      	cmp	r2, #37	; 0x25
 8021be2:	d1f9      	bne.n	8021bd8 <_svfiprintf_r+0x50>
 8021be4:	ebba 0b04 	subs.w	fp, sl, r4
 8021be8:	d00b      	beq.n	8021c02 <_svfiprintf_r+0x7a>
 8021bea:	465b      	mov	r3, fp
 8021bec:	4622      	mov	r2, r4
 8021bee:	4629      	mov	r1, r5
 8021bf0:	4638      	mov	r0, r7
 8021bf2:	f7ff ff6e 	bl	8021ad2 <__ssputs_r>
 8021bf6:	3001      	adds	r0, #1
 8021bf8:	f000 80aa 	beq.w	8021d50 <_svfiprintf_r+0x1c8>
 8021bfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021bfe:	445a      	add	r2, fp
 8021c00:	9209      	str	r2, [sp, #36]	; 0x24
 8021c02:	f89a 3000 	ldrb.w	r3, [sl]
 8021c06:	2b00      	cmp	r3, #0
 8021c08:	f000 80a2 	beq.w	8021d50 <_svfiprintf_r+0x1c8>
 8021c0c:	2300      	movs	r3, #0
 8021c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8021c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021c16:	f10a 0a01 	add.w	sl, sl, #1
 8021c1a:	9304      	str	r3, [sp, #16]
 8021c1c:	9307      	str	r3, [sp, #28]
 8021c1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021c22:	931a      	str	r3, [sp, #104]	; 0x68
 8021c24:	4654      	mov	r4, sl
 8021c26:	2205      	movs	r2, #5
 8021c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c2c:	4851      	ldr	r0, [pc, #324]	; (8021d74 <_svfiprintf_r+0x1ec>)
 8021c2e:	f7de faff 	bl	8000230 <memchr>
 8021c32:	9a04      	ldr	r2, [sp, #16]
 8021c34:	b9d8      	cbnz	r0, 8021c6e <_svfiprintf_r+0xe6>
 8021c36:	06d0      	lsls	r0, r2, #27
 8021c38:	bf44      	itt	mi
 8021c3a:	2320      	movmi	r3, #32
 8021c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021c40:	0711      	lsls	r1, r2, #28
 8021c42:	bf44      	itt	mi
 8021c44:	232b      	movmi	r3, #43	; 0x2b
 8021c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8021c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8021c50:	d015      	beq.n	8021c7e <_svfiprintf_r+0xf6>
 8021c52:	9a07      	ldr	r2, [sp, #28]
 8021c54:	4654      	mov	r4, sl
 8021c56:	2000      	movs	r0, #0
 8021c58:	f04f 0c0a 	mov.w	ip, #10
 8021c5c:	4621      	mov	r1, r4
 8021c5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021c62:	3b30      	subs	r3, #48	; 0x30
 8021c64:	2b09      	cmp	r3, #9
 8021c66:	d94e      	bls.n	8021d06 <_svfiprintf_r+0x17e>
 8021c68:	b1b0      	cbz	r0, 8021c98 <_svfiprintf_r+0x110>
 8021c6a:	9207      	str	r2, [sp, #28]
 8021c6c:	e014      	b.n	8021c98 <_svfiprintf_r+0x110>
 8021c6e:	eba0 0308 	sub.w	r3, r0, r8
 8021c72:	fa09 f303 	lsl.w	r3, r9, r3
 8021c76:	4313      	orrs	r3, r2
 8021c78:	9304      	str	r3, [sp, #16]
 8021c7a:	46a2      	mov	sl, r4
 8021c7c:	e7d2      	b.n	8021c24 <_svfiprintf_r+0x9c>
 8021c7e:	9b03      	ldr	r3, [sp, #12]
 8021c80:	1d19      	adds	r1, r3, #4
 8021c82:	681b      	ldr	r3, [r3, #0]
 8021c84:	9103      	str	r1, [sp, #12]
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	bfbb      	ittet	lt
 8021c8a:	425b      	neglt	r3, r3
 8021c8c:	f042 0202 	orrlt.w	r2, r2, #2
 8021c90:	9307      	strge	r3, [sp, #28]
 8021c92:	9307      	strlt	r3, [sp, #28]
 8021c94:	bfb8      	it	lt
 8021c96:	9204      	strlt	r2, [sp, #16]
 8021c98:	7823      	ldrb	r3, [r4, #0]
 8021c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8021c9c:	d10c      	bne.n	8021cb8 <_svfiprintf_r+0x130>
 8021c9e:	7863      	ldrb	r3, [r4, #1]
 8021ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8021ca2:	d135      	bne.n	8021d10 <_svfiprintf_r+0x188>
 8021ca4:	9b03      	ldr	r3, [sp, #12]
 8021ca6:	1d1a      	adds	r2, r3, #4
 8021ca8:	681b      	ldr	r3, [r3, #0]
 8021caa:	9203      	str	r2, [sp, #12]
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	bfb8      	it	lt
 8021cb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8021cb4:	3402      	adds	r4, #2
 8021cb6:	9305      	str	r3, [sp, #20]
 8021cb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8021d84 <_svfiprintf_r+0x1fc>
 8021cbc:	7821      	ldrb	r1, [r4, #0]
 8021cbe:	2203      	movs	r2, #3
 8021cc0:	4650      	mov	r0, sl
 8021cc2:	f7de fab5 	bl	8000230 <memchr>
 8021cc6:	b140      	cbz	r0, 8021cda <_svfiprintf_r+0x152>
 8021cc8:	2340      	movs	r3, #64	; 0x40
 8021cca:	eba0 000a 	sub.w	r0, r0, sl
 8021cce:	fa03 f000 	lsl.w	r0, r3, r0
 8021cd2:	9b04      	ldr	r3, [sp, #16]
 8021cd4:	4303      	orrs	r3, r0
 8021cd6:	3401      	adds	r4, #1
 8021cd8:	9304      	str	r3, [sp, #16]
 8021cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021cde:	4826      	ldr	r0, [pc, #152]	; (8021d78 <_svfiprintf_r+0x1f0>)
 8021ce0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021ce4:	2206      	movs	r2, #6
 8021ce6:	f7de faa3 	bl	8000230 <memchr>
 8021cea:	2800      	cmp	r0, #0
 8021cec:	d038      	beq.n	8021d60 <_svfiprintf_r+0x1d8>
 8021cee:	4b23      	ldr	r3, [pc, #140]	; (8021d7c <_svfiprintf_r+0x1f4>)
 8021cf0:	bb1b      	cbnz	r3, 8021d3a <_svfiprintf_r+0x1b2>
 8021cf2:	9b03      	ldr	r3, [sp, #12]
 8021cf4:	3307      	adds	r3, #7
 8021cf6:	f023 0307 	bic.w	r3, r3, #7
 8021cfa:	3308      	adds	r3, #8
 8021cfc:	9303      	str	r3, [sp, #12]
 8021cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d00:	4433      	add	r3, r6
 8021d02:	9309      	str	r3, [sp, #36]	; 0x24
 8021d04:	e767      	b.n	8021bd6 <_svfiprintf_r+0x4e>
 8021d06:	fb0c 3202 	mla	r2, ip, r2, r3
 8021d0a:	460c      	mov	r4, r1
 8021d0c:	2001      	movs	r0, #1
 8021d0e:	e7a5      	b.n	8021c5c <_svfiprintf_r+0xd4>
 8021d10:	2300      	movs	r3, #0
 8021d12:	3401      	adds	r4, #1
 8021d14:	9305      	str	r3, [sp, #20]
 8021d16:	4619      	mov	r1, r3
 8021d18:	f04f 0c0a 	mov.w	ip, #10
 8021d1c:	4620      	mov	r0, r4
 8021d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021d22:	3a30      	subs	r2, #48	; 0x30
 8021d24:	2a09      	cmp	r2, #9
 8021d26:	d903      	bls.n	8021d30 <_svfiprintf_r+0x1a8>
 8021d28:	2b00      	cmp	r3, #0
 8021d2a:	d0c5      	beq.n	8021cb8 <_svfiprintf_r+0x130>
 8021d2c:	9105      	str	r1, [sp, #20]
 8021d2e:	e7c3      	b.n	8021cb8 <_svfiprintf_r+0x130>
 8021d30:	fb0c 2101 	mla	r1, ip, r1, r2
 8021d34:	4604      	mov	r4, r0
 8021d36:	2301      	movs	r3, #1
 8021d38:	e7f0      	b.n	8021d1c <_svfiprintf_r+0x194>
 8021d3a:	ab03      	add	r3, sp, #12
 8021d3c:	9300      	str	r3, [sp, #0]
 8021d3e:	462a      	mov	r2, r5
 8021d40:	4b0f      	ldr	r3, [pc, #60]	; (8021d80 <_svfiprintf_r+0x1f8>)
 8021d42:	a904      	add	r1, sp, #16
 8021d44:	4638      	mov	r0, r7
 8021d46:	f7fc fb63 	bl	801e410 <_printf_float>
 8021d4a:	1c42      	adds	r2, r0, #1
 8021d4c:	4606      	mov	r6, r0
 8021d4e:	d1d6      	bne.n	8021cfe <_svfiprintf_r+0x176>
 8021d50:	89ab      	ldrh	r3, [r5, #12]
 8021d52:	065b      	lsls	r3, r3, #25
 8021d54:	f53f af2c 	bmi.w	8021bb0 <_svfiprintf_r+0x28>
 8021d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021d5a:	b01d      	add	sp, #116	; 0x74
 8021d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d60:	ab03      	add	r3, sp, #12
 8021d62:	9300      	str	r3, [sp, #0]
 8021d64:	462a      	mov	r2, r5
 8021d66:	4b06      	ldr	r3, [pc, #24]	; (8021d80 <_svfiprintf_r+0x1f8>)
 8021d68:	a904      	add	r1, sp, #16
 8021d6a:	4638      	mov	r0, r7
 8021d6c:	f7fc fdf4 	bl	801e958 <_printf_i>
 8021d70:	e7eb      	b.n	8021d4a <_svfiprintf_r+0x1c2>
 8021d72:	bf00      	nop
 8021d74:	08023284 	.word	0x08023284
 8021d78:	0802328e 	.word	0x0802328e
 8021d7c:	0801e411 	.word	0x0801e411
 8021d80:	08021ad3 	.word	0x08021ad3
 8021d84:	0802328a 	.word	0x0802328a

08021d88 <_read_r>:
 8021d88:	b538      	push	{r3, r4, r5, lr}
 8021d8a:	4d07      	ldr	r5, [pc, #28]	; (8021da8 <_read_r+0x20>)
 8021d8c:	4604      	mov	r4, r0
 8021d8e:	4608      	mov	r0, r1
 8021d90:	4611      	mov	r1, r2
 8021d92:	2200      	movs	r2, #0
 8021d94:	602a      	str	r2, [r5, #0]
 8021d96:	461a      	mov	r2, r3
 8021d98:	f7fb fee6 	bl	801db68 <_read>
 8021d9c:	1c43      	adds	r3, r0, #1
 8021d9e:	d102      	bne.n	8021da6 <_read_r+0x1e>
 8021da0:	682b      	ldr	r3, [r5, #0]
 8021da2:	b103      	cbz	r3, 8021da6 <_read_r+0x1e>
 8021da4:	6023      	str	r3, [r4, #0]
 8021da6:	bd38      	pop	{r3, r4, r5, pc}
 8021da8:	20012cc0 	.word	0x20012cc0
 8021dac:	00000000 	.word	0x00000000

08021db0 <nan>:
 8021db0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8021db8 <nan+0x8>
 8021db4:	4770      	bx	lr
 8021db6:	bf00      	nop
 8021db8:	00000000 	.word	0x00000000
 8021dbc:	7ff80000 	.word	0x7ff80000

08021dc0 <__ascii_wctomb>:
 8021dc0:	b149      	cbz	r1, 8021dd6 <__ascii_wctomb+0x16>
 8021dc2:	2aff      	cmp	r2, #255	; 0xff
 8021dc4:	bf85      	ittet	hi
 8021dc6:	238a      	movhi	r3, #138	; 0x8a
 8021dc8:	6003      	strhi	r3, [r0, #0]
 8021dca:	700a      	strbls	r2, [r1, #0]
 8021dcc:	f04f 30ff 	movhi.w	r0, #4294967295
 8021dd0:	bf98      	it	ls
 8021dd2:	2001      	movls	r0, #1
 8021dd4:	4770      	bx	lr
 8021dd6:	4608      	mov	r0, r1
 8021dd8:	4770      	bx	lr
	...

08021ddc <__assert_func>:
 8021ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021dde:	4614      	mov	r4, r2
 8021de0:	461a      	mov	r2, r3
 8021de2:	4b09      	ldr	r3, [pc, #36]	; (8021e08 <__assert_func+0x2c>)
 8021de4:	681b      	ldr	r3, [r3, #0]
 8021de6:	4605      	mov	r5, r0
 8021de8:	68d8      	ldr	r0, [r3, #12]
 8021dea:	b14c      	cbz	r4, 8021e00 <__assert_func+0x24>
 8021dec:	4b07      	ldr	r3, [pc, #28]	; (8021e0c <__assert_func+0x30>)
 8021dee:	9100      	str	r1, [sp, #0]
 8021df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021df4:	4906      	ldr	r1, [pc, #24]	; (8021e10 <__assert_func+0x34>)
 8021df6:	462b      	mov	r3, r5
 8021df8:	f000 f80e 	bl	8021e18 <fiprintf>
 8021dfc:	f000 f9a6 	bl	802214c <abort>
 8021e00:	4b04      	ldr	r3, [pc, #16]	; (8021e14 <__assert_func+0x38>)
 8021e02:	461c      	mov	r4, r3
 8021e04:	e7f3      	b.n	8021dee <__assert_func+0x12>
 8021e06:	bf00      	nop
 8021e08:	2000008c 	.word	0x2000008c
 8021e0c:	08023295 	.word	0x08023295
 8021e10:	080232a2 	.word	0x080232a2
 8021e14:	080232d0 	.word	0x080232d0

08021e18 <fiprintf>:
 8021e18:	b40e      	push	{r1, r2, r3}
 8021e1a:	b503      	push	{r0, r1, lr}
 8021e1c:	4601      	mov	r1, r0
 8021e1e:	ab03      	add	r3, sp, #12
 8021e20:	4805      	ldr	r0, [pc, #20]	; (8021e38 <fiprintf+0x20>)
 8021e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8021e26:	6800      	ldr	r0, [r0, #0]
 8021e28:	9301      	str	r3, [sp, #4]
 8021e2a:	f000 f85f 	bl	8021eec <_vfiprintf_r>
 8021e2e:	b002      	add	sp, #8
 8021e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8021e34:	b003      	add	sp, #12
 8021e36:	4770      	bx	lr
 8021e38:	2000008c 	.word	0x2000008c

08021e3c <_realloc_r>:
 8021e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021e40:	4680      	mov	r8, r0
 8021e42:	4614      	mov	r4, r2
 8021e44:	460e      	mov	r6, r1
 8021e46:	b921      	cbnz	r1, 8021e52 <_realloc_r+0x16>
 8021e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021e4c:	4611      	mov	r1, r2
 8021e4e:	f7fc b9cb 	b.w	801e1e8 <_malloc_r>
 8021e52:	b92a      	cbnz	r2, 8021e60 <_realloc_r+0x24>
 8021e54:	f7fc f95c 	bl	801e110 <_free_r>
 8021e58:	4625      	mov	r5, r4
 8021e5a:	4628      	mov	r0, r5
 8021e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021e60:	f000 f97b 	bl	802215a <_malloc_usable_size_r>
 8021e64:	4284      	cmp	r4, r0
 8021e66:	4607      	mov	r7, r0
 8021e68:	d802      	bhi.n	8021e70 <_realloc_r+0x34>
 8021e6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8021e6e:	d812      	bhi.n	8021e96 <_realloc_r+0x5a>
 8021e70:	4621      	mov	r1, r4
 8021e72:	4640      	mov	r0, r8
 8021e74:	f7fc f9b8 	bl	801e1e8 <_malloc_r>
 8021e78:	4605      	mov	r5, r0
 8021e7a:	2800      	cmp	r0, #0
 8021e7c:	d0ed      	beq.n	8021e5a <_realloc_r+0x1e>
 8021e7e:	42bc      	cmp	r4, r7
 8021e80:	4622      	mov	r2, r4
 8021e82:	4631      	mov	r1, r6
 8021e84:	bf28      	it	cs
 8021e86:	463a      	movcs	r2, r7
 8021e88:	f7fc f8fc 	bl	801e084 <memcpy>
 8021e8c:	4631      	mov	r1, r6
 8021e8e:	4640      	mov	r0, r8
 8021e90:	f7fc f93e 	bl	801e110 <_free_r>
 8021e94:	e7e1      	b.n	8021e5a <_realloc_r+0x1e>
 8021e96:	4635      	mov	r5, r6
 8021e98:	e7df      	b.n	8021e5a <_realloc_r+0x1e>

08021e9a <__sfputc_r>:
 8021e9a:	6893      	ldr	r3, [r2, #8]
 8021e9c:	3b01      	subs	r3, #1
 8021e9e:	2b00      	cmp	r3, #0
 8021ea0:	b410      	push	{r4}
 8021ea2:	6093      	str	r3, [r2, #8]
 8021ea4:	da08      	bge.n	8021eb8 <__sfputc_r+0x1e>
 8021ea6:	6994      	ldr	r4, [r2, #24]
 8021ea8:	42a3      	cmp	r3, r4
 8021eaa:	db01      	blt.n	8021eb0 <__sfputc_r+0x16>
 8021eac:	290a      	cmp	r1, #10
 8021eae:	d103      	bne.n	8021eb8 <__sfputc_r+0x1e>
 8021eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021eb4:	f7fd be28 	b.w	801fb08 <__swbuf_r>
 8021eb8:	6813      	ldr	r3, [r2, #0]
 8021eba:	1c58      	adds	r0, r3, #1
 8021ebc:	6010      	str	r0, [r2, #0]
 8021ebe:	7019      	strb	r1, [r3, #0]
 8021ec0:	4608      	mov	r0, r1
 8021ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021ec6:	4770      	bx	lr

08021ec8 <__sfputs_r>:
 8021ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021eca:	4606      	mov	r6, r0
 8021ecc:	460f      	mov	r7, r1
 8021ece:	4614      	mov	r4, r2
 8021ed0:	18d5      	adds	r5, r2, r3
 8021ed2:	42ac      	cmp	r4, r5
 8021ed4:	d101      	bne.n	8021eda <__sfputs_r+0x12>
 8021ed6:	2000      	movs	r0, #0
 8021ed8:	e007      	b.n	8021eea <__sfputs_r+0x22>
 8021eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021ede:	463a      	mov	r2, r7
 8021ee0:	4630      	mov	r0, r6
 8021ee2:	f7ff ffda 	bl	8021e9a <__sfputc_r>
 8021ee6:	1c43      	adds	r3, r0, #1
 8021ee8:	d1f3      	bne.n	8021ed2 <__sfputs_r+0xa>
 8021eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021eec <_vfiprintf_r>:
 8021eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ef0:	460d      	mov	r5, r1
 8021ef2:	b09d      	sub	sp, #116	; 0x74
 8021ef4:	4614      	mov	r4, r2
 8021ef6:	4698      	mov	r8, r3
 8021ef8:	4606      	mov	r6, r0
 8021efa:	b118      	cbz	r0, 8021f04 <_vfiprintf_r+0x18>
 8021efc:	6983      	ldr	r3, [r0, #24]
 8021efe:	b90b      	cbnz	r3, 8021f04 <_vfiprintf_r+0x18>
 8021f00:	f7fb ff6c 	bl	801dddc <__sinit>
 8021f04:	4b89      	ldr	r3, [pc, #548]	; (802212c <_vfiprintf_r+0x240>)
 8021f06:	429d      	cmp	r5, r3
 8021f08:	d11b      	bne.n	8021f42 <_vfiprintf_r+0x56>
 8021f0a:	6875      	ldr	r5, [r6, #4]
 8021f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021f0e:	07d9      	lsls	r1, r3, #31
 8021f10:	d405      	bmi.n	8021f1e <_vfiprintf_r+0x32>
 8021f12:	89ab      	ldrh	r3, [r5, #12]
 8021f14:	059a      	lsls	r2, r3, #22
 8021f16:	d402      	bmi.n	8021f1e <_vfiprintf_r+0x32>
 8021f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021f1a:	f7fc f83c 	bl	801df96 <__retarget_lock_acquire_recursive>
 8021f1e:	89ab      	ldrh	r3, [r5, #12]
 8021f20:	071b      	lsls	r3, r3, #28
 8021f22:	d501      	bpl.n	8021f28 <_vfiprintf_r+0x3c>
 8021f24:	692b      	ldr	r3, [r5, #16]
 8021f26:	b9eb      	cbnz	r3, 8021f64 <_vfiprintf_r+0x78>
 8021f28:	4629      	mov	r1, r5
 8021f2a:	4630      	mov	r0, r6
 8021f2c:	f7fd fe50 	bl	801fbd0 <__swsetup_r>
 8021f30:	b1c0      	cbz	r0, 8021f64 <_vfiprintf_r+0x78>
 8021f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021f34:	07dc      	lsls	r4, r3, #31
 8021f36:	d50e      	bpl.n	8021f56 <_vfiprintf_r+0x6a>
 8021f38:	f04f 30ff 	mov.w	r0, #4294967295
 8021f3c:	b01d      	add	sp, #116	; 0x74
 8021f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f42:	4b7b      	ldr	r3, [pc, #492]	; (8022130 <_vfiprintf_r+0x244>)
 8021f44:	429d      	cmp	r5, r3
 8021f46:	d101      	bne.n	8021f4c <_vfiprintf_r+0x60>
 8021f48:	68b5      	ldr	r5, [r6, #8]
 8021f4a:	e7df      	b.n	8021f0c <_vfiprintf_r+0x20>
 8021f4c:	4b79      	ldr	r3, [pc, #484]	; (8022134 <_vfiprintf_r+0x248>)
 8021f4e:	429d      	cmp	r5, r3
 8021f50:	bf08      	it	eq
 8021f52:	68f5      	ldreq	r5, [r6, #12]
 8021f54:	e7da      	b.n	8021f0c <_vfiprintf_r+0x20>
 8021f56:	89ab      	ldrh	r3, [r5, #12]
 8021f58:	0598      	lsls	r0, r3, #22
 8021f5a:	d4ed      	bmi.n	8021f38 <_vfiprintf_r+0x4c>
 8021f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021f5e:	f7fc f81b 	bl	801df98 <__retarget_lock_release_recursive>
 8021f62:	e7e9      	b.n	8021f38 <_vfiprintf_r+0x4c>
 8021f64:	2300      	movs	r3, #0
 8021f66:	9309      	str	r3, [sp, #36]	; 0x24
 8021f68:	2320      	movs	r3, #32
 8021f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8021f72:	2330      	movs	r3, #48	; 0x30
 8021f74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022138 <_vfiprintf_r+0x24c>
 8021f78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021f7c:	f04f 0901 	mov.w	r9, #1
 8021f80:	4623      	mov	r3, r4
 8021f82:	469a      	mov	sl, r3
 8021f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021f88:	b10a      	cbz	r2, 8021f8e <_vfiprintf_r+0xa2>
 8021f8a:	2a25      	cmp	r2, #37	; 0x25
 8021f8c:	d1f9      	bne.n	8021f82 <_vfiprintf_r+0x96>
 8021f8e:	ebba 0b04 	subs.w	fp, sl, r4
 8021f92:	d00b      	beq.n	8021fac <_vfiprintf_r+0xc0>
 8021f94:	465b      	mov	r3, fp
 8021f96:	4622      	mov	r2, r4
 8021f98:	4629      	mov	r1, r5
 8021f9a:	4630      	mov	r0, r6
 8021f9c:	f7ff ff94 	bl	8021ec8 <__sfputs_r>
 8021fa0:	3001      	adds	r0, #1
 8021fa2:	f000 80aa 	beq.w	80220fa <_vfiprintf_r+0x20e>
 8021fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021fa8:	445a      	add	r2, fp
 8021faa:	9209      	str	r2, [sp, #36]	; 0x24
 8021fac:	f89a 3000 	ldrb.w	r3, [sl]
 8021fb0:	2b00      	cmp	r3, #0
 8021fb2:	f000 80a2 	beq.w	80220fa <_vfiprintf_r+0x20e>
 8021fb6:	2300      	movs	r3, #0
 8021fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8021fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021fc0:	f10a 0a01 	add.w	sl, sl, #1
 8021fc4:	9304      	str	r3, [sp, #16]
 8021fc6:	9307      	str	r3, [sp, #28]
 8021fc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021fcc:	931a      	str	r3, [sp, #104]	; 0x68
 8021fce:	4654      	mov	r4, sl
 8021fd0:	2205      	movs	r2, #5
 8021fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021fd6:	4858      	ldr	r0, [pc, #352]	; (8022138 <_vfiprintf_r+0x24c>)
 8021fd8:	f7de f92a 	bl	8000230 <memchr>
 8021fdc:	9a04      	ldr	r2, [sp, #16]
 8021fde:	b9d8      	cbnz	r0, 8022018 <_vfiprintf_r+0x12c>
 8021fe0:	06d1      	lsls	r1, r2, #27
 8021fe2:	bf44      	itt	mi
 8021fe4:	2320      	movmi	r3, #32
 8021fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021fea:	0713      	lsls	r3, r2, #28
 8021fec:	bf44      	itt	mi
 8021fee:	232b      	movmi	r3, #43	; 0x2b
 8021ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8021ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8021ffa:	d015      	beq.n	8022028 <_vfiprintf_r+0x13c>
 8021ffc:	9a07      	ldr	r2, [sp, #28]
 8021ffe:	4654      	mov	r4, sl
 8022000:	2000      	movs	r0, #0
 8022002:	f04f 0c0a 	mov.w	ip, #10
 8022006:	4621      	mov	r1, r4
 8022008:	f811 3b01 	ldrb.w	r3, [r1], #1
 802200c:	3b30      	subs	r3, #48	; 0x30
 802200e:	2b09      	cmp	r3, #9
 8022010:	d94e      	bls.n	80220b0 <_vfiprintf_r+0x1c4>
 8022012:	b1b0      	cbz	r0, 8022042 <_vfiprintf_r+0x156>
 8022014:	9207      	str	r2, [sp, #28]
 8022016:	e014      	b.n	8022042 <_vfiprintf_r+0x156>
 8022018:	eba0 0308 	sub.w	r3, r0, r8
 802201c:	fa09 f303 	lsl.w	r3, r9, r3
 8022020:	4313      	orrs	r3, r2
 8022022:	9304      	str	r3, [sp, #16]
 8022024:	46a2      	mov	sl, r4
 8022026:	e7d2      	b.n	8021fce <_vfiprintf_r+0xe2>
 8022028:	9b03      	ldr	r3, [sp, #12]
 802202a:	1d19      	adds	r1, r3, #4
 802202c:	681b      	ldr	r3, [r3, #0]
 802202e:	9103      	str	r1, [sp, #12]
 8022030:	2b00      	cmp	r3, #0
 8022032:	bfbb      	ittet	lt
 8022034:	425b      	neglt	r3, r3
 8022036:	f042 0202 	orrlt.w	r2, r2, #2
 802203a:	9307      	strge	r3, [sp, #28]
 802203c:	9307      	strlt	r3, [sp, #28]
 802203e:	bfb8      	it	lt
 8022040:	9204      	strlt	r2, [sp, #16]
 8022042:	7823      	ldrb	r3, [r4, #0]
 8022044:	2b2e      	cmp	r3, #46	; 0x2e
 8022046:	d10c      	bne.n	8022062 <_vfiprintf_r+0x176>
 8022048:	7863      	ldrb	r3, [r4, #1]
 802204a:	2b2a      	cmp	r3, #42	; 0x2a
 802204c:	d135      	bne.n	80220ba <_vfiprintf_r+0x1ce>
 802204e:	9b03      	ldr	r3, [sp, #12]
 8022050:	1d1a      	adds	r2, r3, #4
 8022052:	681b      	ldr	r3, [r3, #0]
 8022054:	9203      	str	r2, [sp, #12]
 8022056:	2b00      	cmp	r3, #0
 8022058:	bfb8      	it	lt
 802205a:	f04f 33ff 	movlt.w	r3, #4294967295
 802205e:	3402      	adds	r4, #2
 8022060:	9305      	str	r3, [sp, #20]
 8022062:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022148 <_vfiprintf_r+0x25c>
 8022066:	7821      	ldrb	r1, [r4, #0]
 8022068:	2203      	movs	r2, #3
 802206a:	4650      	mov	r0, sl
 802206c:	f7de f8e0 	bl	8000230 <memchr>
 8022070:	b140      	cbz	r0, 8022084 <_vfiprintf_r+0x198>
 8022072:	2340      	movs	r3, #64	; 0x40
 8022074:	eba0 000a 	sub.w	r0, r0, sl
 8022078:	fa03 f000 	lsl.w	r0, r3, r0
 802207c:	9b04      	ldr	r3, [sp, #16]
 802207e:	4303      	orrs	r3, r0
 8022080:	3401      	adds	r4, #1
 8022082:	9304      	str	r3, [sp, #16]
 8022084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022088:	482c      	ldr	r0, [pc, #176]	; (802213c <_vfiprintf_r+0x250>)
 802208a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802208e:	2206      	movs	r2, #6
 8022090:	f7de f8ce 	bl	8000230 <memchr>
 8022094:	2800      	cmp	r0, #0
 8022096:	d03f      	beq.n	8022118 <_vfiprintf_r+0x22c>
 8022098:	4b29      	ldr	r3, [pc, #164]	; (8022140 <_vfiprintf_r+0x254>)
 802209a:	bb1b      	cbnz	r3, 80220e4 <_vfiprintf_r+0x1f8>
 802209c:	9b03      	ldr	r3, [sp, #12]
 802209e:	3307      	adds	r3, #7
 80220a0:	f023 0307 	bic.w	r3, r3, #7
 80220a4:	3308      	adds	r3, #8
 80220a6:	9303      	str	r3, [sp, #12]
 80220a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80220aa:	443b      	add	r3, r7
 80220ac:	9309      	str	r3, [sp, #36]	; 0x24
 80220ae:	e767      	b.n	8021f80 <_vfiprintf_r+0x94>
 80220b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80220b4:	460c      	mov	r4, r1
 80220b6:	2001      	movs	r0, #1
 80220b8:	e7a5      	b.n	8022006 <_vfiprintf_r+0x11a>
 80220ba:	2300      	movs	r3, #0
 80220bc:	3401      	adds	r4, #1
 80220be:	9305      	str	r3, [sp, #20]
 80220c0:	4619      	mov	r1, r3
 80220c2:	f04f 0c0a 	mov.w	ip, #10
 80220c6:	4620      	mov	r0, r4
 80220c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80220cc:	3a30      	subs	r2, #48	; 0x30
 80220ce:	2a09      	cmp	r2, #9
 80220d0:	d903      	bls.n	80220da <_vfiprintf_r+0x1ee>
 80220d2:	2b00      	cmp	r3, #0
 80220d4:	d0c5      	beq.n	8022062 <_vfiprintf_r+0x176>
 80220d6:	9105      	str	r1, [sp, #20]
 80220d8:	e7c3      	b.n	8022062 <_vfiprintf_r+0x176>
 80220da:	fb0c 2101 	mla	r1, ip, r1, r2
 80220de:	4604      	mov	r4, r0
 80220e0:	2301      	movs	r3, #1
 80220e2:	e7f0      	b.n	80220c6 <_vfiprintf_r+0x1da>
 80220e4:	ab03      	add	r3, sp, #12
 80220e6:	9300      	str	r3, [sp, #0]
 80220e8:	462a      	mov	r2, r5
 80220ea:	4b16      	ldr	r3, [pc, #88]	; (8022144 <_vfiprintf_r+0x258>)
 80220ec:	a904      	add	r1, sp, #16
 80220ee:	4630      	mov	r0, r6
 80220f0:	f7fc f98e 	bl	801e410 <_printf_float>
 80220f4:	4607      	mov	r7, r0
 80220f6:	1c78      	adds	r0, r7, #1
 80220f8:	d1d6      	bne.n	80220a8 <_vfiprintf_r+0x1bc>
 80220fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80220fc:	07d9      	lsls	r1, r3, #31
 80220fe:	d405      	bmi.n	802210c <_vfiprintf_r+0x220>
 8022100:	89ab      	ldrh	r3, [r5, #12]
 8022102:	059a      	lsls	r2, r3, #22
 8022104:	d402      	bmi.n	802210c <_vfiprintf_r+0x220>
 8022106:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022108:	f7fb ff46 	bl	801df98 <__retarget_lock_release_recursive>
 802210c:	89ab      	ldrh	r3, [r5, #12]
 802210e:	065b      	lsls	r3, r3, #25
 8022110:	f53f af12 	bmi.w	8021f38 <_vfiprintf_r+0x4c>
 8022114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022116:	e711      	b.n	8021f3c <_vfiprintf_r+0x50>
 8022118:	ab03      	add	r3, sp, #12
 802211a:	9300      	str	r3, [sp, #0]
 802211c:	462a      	mov	r2, r5
 802211e:	4b09      	ldr	r3, [pc, #36]	; (8022144 <_vfiprintf_r+0x258>)
 8022120:	a904      	add	r1, sp, #16
 8022122:	4630      	mov	r0, r6
 8022124:	f7fc fc18 	bl	801e958 <_printf_i>
 8022128:	e7e4      	b.n	80220f4 <_vfiprintf_r+0x208>
 802212a:	bf00      	nop
 802212c:	08022f2c 	.word	0x08022f2c
 8022130:	08022f4c 	.word	0x08022f4c
 8022134:	08022f0c 	.word	0x08022f0c
 8022138:	08023284 	.word	0x08023284
 802213c:	0802328e 	.word	0x0802328e
 8022140:	0801e411 	.word	0x0801e411
 8022144:	08021ec9 	.word	0x08021ec9
 8022148:	0802328a 	.word	0x0802328a

0802214c <abort>:
 802214c:	b508      	push	{r3, lr}
 802214e:	2006      	movs	r0, #6
 8022150:	f000 f834 	bl	80221bc <raise>
 8022154:	2001      	movs	r0, #1
 8022156:	f7fb fcad 	bl	801dab4 <_exit>

0802215a <_malloc_usable_size_r>:
 802215a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802215e:	1f18      	subs	r0, r3, #4
 8022160:	2b00      	cmp	r3, #0
 8022162:	bfbc      	itt	lt
 8022164:	580b      	ldrlt	r3, [r1, r0]
 8022166:	18c0      	addlt	r0, r0, r3
 8022168:	4770      	bx	lr

0802216a <_raise_r>:
 802216a:	291f      	cmp	r1, #31
 802216c:	b538      	push	{r3, r4, r5, lr}
 802216e:	4604      	mov	r4, r0
 8022170:	460d      	mov	r5, r1
 8022172:	d904      	bls.n	802217e <_raise_r+0x14>
 8022174:	2316      	movs	r3, #22
 8022176:	6003      	str	r3, [r0, #0]
 8022178:	f04f 30ff 	mov.w	r0, #4294967295
 802217c:	bd38      	pop	{r3, r4, r5, pc}
 802217e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022180:	b112      	cbz	r2, 8022188 <_raise_r+0x1e>
 8022182:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022186:	b94b      	cbnz	r3, 802219c <_raise_r+0x32>
 8022188:	4620      	mov	r0, r4
 802218a:	f000 f831 	bl	80221f0 <_getpid_r>
 802218e:	462a      	mov	r2, r5
 8022190:	4601      	mov	r1, r0
 8022192:	4620      	mov	r0, r4
 8022194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022198:	f000 b818 	b.w	80221cc <_kill_r>
 802219c:	2b01      	cmp	r3, #1
 802219e:	d00a      	beq.n	80221b6 <_raise_r+0x4c>
 80221a0:	1c59      	adds	r1, r3, #1
 80221a2:	d103      	bne.n	80221ac <_raise_r+0x42>
 80221a4:	2316      	movs	r3, #22
 80221a6:	6003      	str	r3, [r0, #0]
 80221a8:	2001      	movs	r0, #1
 80221aa:	e7e7      	b.n	802217c <_raise_r+0x12>
 80221ac:	2400      	movs	r4, #0
 80221ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80221b2:	4628      	mov	r0, r5
 80221b4:	4798      	blx	r3
 80221b6:	2000      	movs	r0, #0
 80221b8:	e7e0      	b.n	802217c <_raise_r+0x12>
	...

080221bc <raise>:
 80221bc:	4b02      	ldr	r3, [pc, #8]	; (80221c8 <raise+0xc>)
 80221be:	4601      	mov	r1, r0
 80221c0:	6818      	ldr	r0, [r3, #0]
 80221c2:	f7ff bfd2 	b.w	802216a <_raise_r>
 80221c6:	bf00      	nop
 80221c8:	2000008c 	.word	0x2000008c

080221cc <_kill_r>:
 80221cc:	b538      	push	{r3, r4, r5, lr}
 80221ce:	4d07      	ldr	r5, [pc, #28]	; (80221ec <_kill_r+0x20>)
 80221d0:	2300      	movs	r3, #0
 80221d2:	4604      	mov	r4, r0
 80221d4:	4608      	mov	r0, r1
 80221d6:	4611      	mov	r1, r2
 80221d8:	602b      	str	r3, [r5, #0]
 80221da:	f7fb fc5b 	bl	801da94 <_kill>
 80221de:	1c43      	adds	r3, r0, #1
 80221e0:	d102      	bne.n	80221e8 <_kill_r+0x1c>
 80221e2:	682b      	ldr	r3, [r5, #0]
 80221e4:	b103      	cbz	r3, 80221e8 <_kill_r+0x1c>
 80221e6:	6023      	str	r3, [r4, #0]
 80221e8:	bd38      	pop	{r3, r4, r5, pc}
 80221ea:	bf00      	nop
 80221ec:	20012cc0 	.word	0x20012cc0

080221f0 <_getpid_r>:
 80221f0:	f7fb bc48 	b.w	801da84 <_getpid>

080221f4 <_init>:
 80221f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80221f6:	bf00      	nop
 80221f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80221fa:	bc08      	pop	{r3}
 80221fc:	469e      	mov	lr, r3
 80221fe:	4770      	bx	lr

08022200 <_fini>:
 8022200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022202:	bf00      	nop
 8022204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022206:	bc08      	pop	{r3}
 8022208:	469e      	mov	lr, r3
 802220a:	4770      	bx	lr
